// Module: Direct.obj
// Source: C:\Copter\source\sparkal\Direct.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: void;

// Type: /*packed*/ class DirectoryEntry (forward reference);
class DirectoryEntry{ // packed(0x10 bytes) TI: 0x239f
public:
	void DirectoryEntry(/*unpacked*/ class Directory*, /*packed*/ class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(/*packed*/ class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(/*packed*/ class basic_string<char>&);
	int32_t GetEntryMinusExtension(/*packed*/ class basic_string<char>&);
	/*+0x0*/   /*unpacked*/ class Directory *directoryParent;
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   long lType;
};

// Type: /*unpacked*/ class Directory (forward reference);
// Directory Class implementation not found

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: uint32_t;

// Type: int32_t;

// Type: unsigned long;

// Type: void * __ptr32;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class DirectoryEntry;
class DirectoryEntry{ // packed(0x10 bytes) TI: 0x239f
public:
	void DirectoryEntry(/*unpacked*/ class Directory*, /*packed*/ class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(/*packed*/ class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(/*packed*/ class basic_string<char>&);
	int32_t GetEntryMinusExtension(/*packed*/ class basic_string<char>&);
	/*+0x0*/   /*unpacked*/ class Directory *directoryParent;
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   long lType;
};

// Type: /*packed*/ struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAA{ // packed(0x13e bytes) TI: 0x26cd
	/*+0x0*/   unsigned long dwFileAttributes;
	/*+0x4*/   /*packed*/ struct _FILETIME ftCreationTime; // 0x8 bytes
	/*+0xc*/   /*packed*/ struct _FILETIME ftLastAccessTime; // 0x8 bytes
	/*+0x14*/  /*packed*/ struct _FILETIME ftLastWriteTime; // 0x8 bytes
	/*+0x1c*/  unsigned long nFileSizeHigh;
	/*+0x20*/  unsigned long nFileSizeLow;
	/*+0x24*/  unsigned long dwReserved0;
	/*+0x28*/  unsigned long dwReserved1;
	/*+0x2c*/  char cFileName[260]; // 0x104 bytes
	/*+0x130*/ char cAlternateFileName[14]; // 0xe bytes
};

// Type: /*packed*/ class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{ // packed(0x8 bytes) TI: 0x1cb1
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
	};
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static /*packed*/ class allocator<basic_string<char>> value_allocator;
	using value_type = /*packed*/ class basic_string<char>;
	using value_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using list_node_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node>;
	using link_type = /*packed*/ struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<basic_string<char>>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<basic_string<char>>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *free_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *next_avail;
	static /*packed*/ struct list<basic_string<char>>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<basic_string<char>>::list_node* get_node();
	void put_node(/*packed*/ struct list<basic_string<char>>::list_node*);
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cd3
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator++();
		/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cc6
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const /*packed*/ class list<basic_string<char>>&);
	void list<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>::const_iterator begin();
	/*packed*/ class list<basic_string<char>>::iterator begin();
	/*packed*/ class list<basic_string<char>>::const_iterator end();
	/*packed*/ class list<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void swap(/*packed*/ class list<basic_string<char>>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::const_iterator, /*packed*/ class list<basic_string<char>>::const_iterator);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class list<basic_string<char>>::iterator insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void erase(/*packed*/ class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>& operator=(const /*packed*/ class list<basic_string<char>>&);
protected:
	void transfer(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
public:
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&);
	void remove(const /*packed*/ class basic_string<char>&);
	void unique();
	void merge(/*packed*/ class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class list<DirectoryEntry>::iterator;
class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
{ // packed(0x4 bytes) TI: 0x238e
protected:
	/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<DirectoryEntry>::iterator&);
	/*packed*/ class DirectoryEntry& operator*();
	/*packed*/ class list<DirectoryEntry>::iterator operator++(int32_t);
	/*packed*/ class list<DirectoryEntry>::iterator& operator++();
	/*packed*/ class list<DirectoryEntry>::iterator operator--(int32_t);
	/*packed*/ class list<DirectoryEntry>::iterator& operator--();
};

// Type: char;

// Type: /*packed*/ class list<DirectoryEntry>::iterator (forward reference);
class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
{ // packed(0x4 bytes) TI: 0x238e
protected:
	/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<DirectoryEntry>::iterator&);
	/*packed*/ class DirectoryEntry& operator*();
	/*packed*/ class list<DirectoryEntry>::iterator operator++(int32_t);
	/*packed*/ class list<DirectoryEntry>::iterator& operator++();
	/*packed*/ class list<DirectoryEntry>::iterator operator--(int32_t);
	/*packed*/ class list<DirectoryEntry>::iterator& operator--();
};

// Type: /*packed*/ class list<DirectoryEntry> (forward reference);
class list<DirectoryEntry>{ // packed(0x8 bytes) TI: 0x236c
	using void_pointer = void * __ptr32;
	struct list<DirectoryEntry>::list_node{ // packed(0x18 bytes) TI: 0x2392
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class DirectoryEntry data; // 0x10 bytes
	};
protected:
	static /*packed*/ class allocator<list<DirectoryEntry>::list_node> list_node_allocator;
	static /*packed*/ class allocator<DirectoryEntry> value_allocator;
	using value_type = /*packed*/ class DirectoryEntry;
	using value_allocator_type = /*packed*/ class allocator<DirectoryEntry>;
	using pointer = /*packed*/ class DirectoryEntry*;
	using reference = /*packed*/ class DirectoryEntry&;
	using const_reference = const /*packed*/ class DirectoryEntry&;
	using list_node_allocator_type = /*packed*/ class allocator<list<DirectoryEntry>::list_node>;
	using link_type = /*packed*/ struct list<DirectoryEntry>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<DirectoryEntry>::list_node_buffer{ // packed(0x8 bytes) TI: 0x2390
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<DirectoryEntry>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<DirectoryEntry>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<DirectoryEntry>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<DirectoryEntry>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<DirectoryEntry>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<DirectoryEntry>::list_node *free_list;
	static /*packed*/ struct list<DirectoryEntry>::list_node *next_avail;
	static /*packed*/ struct list<DirectoryEntry>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<DirectoryEntry>::list_node* get_node();
	void put_node(/*packed*/ struct list<DirectoryEntry>::list_node*);
	/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<DirectoryEntry>::iterator : public bidirectional_iterator<DirectoryEntry,int>
	{ // packed(0x4 bytes) TI: 0x238e
	protected:
		/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<DirectoryEntry>::iterator&);
		/*packed*/ class DirectoryEntry& operator*();
		/*packed*/ class list<DirectoryEntry>::iterator operator++(int32_t);
		/*packed*/ class list<DirectoryEntry>::iterator& operator++();
		/*packed*/ class list<DirectoryEntry>::iterator operator--(int32_t);
		/*packed*/ class list<DirectoryEntry>::iterator& operator--();
	};
	class list<DirectoryEntry>::const_iterator : public bidirectional_iterator<DirectoryEntry,int>
	{ // packed(0x4 bytes) TI: 0x2381
	protected:
		/*+0x0*/   /*packed*/ struct list<DirectoryEntry>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<DirectoryEntry>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<DirectoryEntry>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<DirectoryEntry>::const_iterator&);
		const /*packed*/ class DirectoryEntry& operator*();
		/*packed*/ class list<DirectoryEntry>::const_iterator operator++(int32_t);
		/*packed*/ class list<DirectoryEntry>::const_iterator& operator++();
		/*packed*/ class list<DirectoryEntry>::const_iterator operator--(int32_t);
		/*packed*/ class list<DirectoryEntry>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int>;
public:
	void list<DirectoryEntry>(const /*packed*/ class list<DirectoryEntry>&);
	void list<DirectoryEntry>(const /*packed*/ class DirectoryEntry*, const /*packed*/ class DirectoryEntry*);
	void list<DirectoryEntry>(uint32_t, const /*packed*/ class DirectoryEntry&);
	void list<DirectoryEntry>();
	/*packed*/ class list<DirectoryEntry>::const_iterator begin();
	/*packed*/ class list<DirectoryEntry>::iterator begin();
	/*packed*/ class list<DirectoryEntry>::const_iterator end();
	/*packed*/ class list<DirectoryEntry>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::const_iterator,DirectoryEntry,DirectoryEntry const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<DirectoryEntry>::iterator,DirectoryEntry,DirectoryEntry &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class DirectoryEntry& front();
	/*packed*/ class DirectoryEntry& front();
	const /*packed*/ class DirectoryEntry& back();
	/*packed*/ class DirectoryEntry& back();
	void swap(/*packed*/ class list<DirectoryEntry>&);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, uint32_t, const /*packed*/ class DirectoryEntry&);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::const_iterator, /*packed*/ class list<DirectoryEntry>::const_iterator);
	void insert(/*packed*/ class list<DirectoryEntry>::iterator, const /*packed*/ class DirectoryEntry*, const /*packed*/ class DirectoryEntry*);
	/*packed*/ class list<DirectoryEntry>::iterator insert(/*packed*/ class list<DirectoryEntry>::iterator, const /*packed*/ class DirectoryEntry&);
	void push_front(const /*packed*/ class DirectoryEntry&);
	void push_back(const /*packed*/ class DirectoryEntry&);
	void erase(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
	void erase(/*packed*/ class list<DirectoryEntry>::iterator);
	void pop_front();
	void pop_back();
	void ~list<DirectoryEntry>();
	/*packed*/ class list<DirectoryEntry>& operator=(const /*packed*/ class list<DirectoryEntry>&);
protected:
	void transfer(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
public:
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&, /*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>::iterator);
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&, /*packed*/ class list<DirectoryEntry>::iterator);
	void splice(/*packed*/ class list<DirectoryEntry>::iterator, /*packed*/ class list<DirectoryEntry>&);
	void remove(const /*packed*/ class DirectoryEntry&);
	void unique();
	void merge(/*packed*/ class list<DirectoryEntry>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ struct list<DirectoryEntry>::list_node (forward reference);
struct list<DirectoryEntry>::list_node{ // packed(0x18 bytes) TI: 0x2392
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class DirectoryEntry data; // 0x10 bytes
};

// Type: /*packed*/ class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ struct list<basic_string<char>>::list_node (forward reference);
struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
};

// Type: /*packed*/ class list<basic_string<char>>::iterator (forward reference);
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<DirectoryEntry,int>;
struct bidirectional_iterator<DirectoryEntry,int>{ // packed(0x1 bytes) TI: 0x2325
};

// Type: /*packed*/ struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x1847
};



// Contribution: 1:00080b20-00085dca Module: 29, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00481b20
void DirectoryEntry::DirectoryEntry() {

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5f;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T69;
_T5f:
	this->sName.reference = 0x0;
_T69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T78;
// LINE 35:
_T78:
	this->directoryParent = 0x0;
// LINE 36:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00481bae
void DirectoryEntry::DirectoryEntry(/*unpacked*/ class Directory *directoryNewParent, /*packed*/ class basic_string<char>& sNewName, long lNewType) {

	__asm        mov    eax, directoryNewParent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T19;
_T19:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T5b;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4c;
_T4c:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    _T60;
_T60:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T86;

	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T8d;
_T86:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
_T8d:
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Td3;

	__asm        jmp    _Ta9;
_Ta9:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Td3;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1b5;
_Td3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T1ab;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T185;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T125;
_T125:
	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T14a;

	__asm        mov    eax, sNewName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T156;

	__asm        jmp    _T156;
_T14a:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T156;
_T156:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T180;
_T180:
	__asm        jmp    _T18e;
_T185:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T18e:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T19d;
_T19d:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1b5;
_T1ab:
	this->sName.reference = 0x0;
_T1b5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T1c4;
_T1c4:
	this->lType = lNewType;
// LINE 46:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00481d8a
int32_t DirectoryEntry::GetEntryExtension(/*packed*/ class basic_string<char>& sEntryExtension) {
	/*bp-0x4*/   uint32_t nPosition;


	__asm        mov    byte ptr [ebp-0x1C], 0x2E;
// LINE 60:
	__asm        jmp    _T15;
_T15:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        ja     _T3b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T36;
_T36:
	__asm        jmp    _T42;
_T3b:
	__asm        mov    dword ptr [ebp-8], 0;
_T42:
	__asm        jmp    _T47;
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T63;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    _T163;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T8d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T99;

	__asm        jmp    _T99;
_T8d:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T99;
_T99:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-0x14];
	__asm        movsx  eax, byte ptr [eax+ecx-1];
	__asm        movsx  ecx, byte ptr [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        je     _Tb5;

	__asm        jmp    _Tba;
_Tb5:
	__asm        jmp    _Tdb;
_Tba:
	__asm        jmp    _Tc9;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tdb;
_Tc9:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jbe    _Tdb;

	__asm        dec    dword ptr [ebp-8];
	__asm        jmp    _T68;
_Tdb:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        jne    _T157;

	__asm        jmp    _Tea;
_Tea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T11b;

	__asm        jmp    _T11b;
_T10f:
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, byte ptr [eax];
	__asm        movsx  ecx, byte ptr [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        je     _T132;

	__asm        jmp    _T137;
_T132:
	__asm        jmp    _T157;
_T137:
	__asm        jmp    _T146;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T157;
_T146:
	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    _T163;

	__asm        jmp    _T163;
_T157:
	__asm        mov    eax, [ebp-8];
	__asm        dec    eax;
	__asm        mov    nPosition, eax;
	__asm        jmp    _T163;
// LINE 61:
_T163:
	__asm        cmp    nPosition, 0;
	__asm        jb     _T407;

	__asm        jmp    _T172;
_T172:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T407;
// LINE 62:
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T1ce;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1bf;
_T1bf:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1ce;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jae    _T207;

	__asm        jmp    _T1f0;
_T1f0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T20e;
_T207:
	__asm        mov    dword ptr [ebp-0x20], 0xFFFFFFFF;
_T20e:
	__asm        jmp    _T213;
_T213:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T2af;

	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T2af;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T28f;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T28f;

	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T28a;
_T28a:
	__asm        jmp    _T28f;
_T28f:
	__asm        jmp    _T294;
_T294:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3ef;
_T2af:
	__asm        jmp    _T2b4;
_T2b4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2d9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T2e5;

	__asm        jmp    _T2e5;
_T2d9:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T2e5;
_T2e5:
	__asm        cmp    dword ptr [ebp-0x20], 0xFFFFFFFF;
	__asm        jne    _T321;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T312;
_T312:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T321;
_T321:
	__asm        jmp    _T326;
_T326:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T357;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T3a7;

	__asm        jmp    _T345;
_T345:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3a7;
_T357:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T38a;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T391;
_T38a:
	__asm        mov    dword ptr [ebp-0x34], 0;
_T391:
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3de;
_T3a7:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T3de;

	__asm        jmp    _T3b6;
_T3b6:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3de;
_T3de:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3ef;
_T3ef:
	__asm        jmp    _T3f4;
// LINE 63:
_T3f4:
	__asm        jmp    _T3f9;
_T3f9:
	return sEntryExtension.reference-><basic_string_ref<char>+0x04:4>;
// LINE 67:
_T407:
	__asm        jmp    _T40c;
_T40c:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T44e;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T43f;
_T43f:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T44e;
_T44e:
	__asm        jmp    _T453;
_T453:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T479;

	__asm        jmp    _T468;
_T468:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T480;
_T479:
	__asm        mov    dword ptr [ebp-0x44], 0xFFFFFFFF;
_T480:
	__asm        jmp    _T485;
_T485:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T54f;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T4d6;

	__asm        jmp    _T4b1;
_T4b1:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T4dd;
_T4d6:
	__asm        mov    dword ptr [ebp-0x48], 0;
_T4dd:
	__asm        jmp    _T4e2;
_T4e2:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x60], ecx;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T522;
_T522:
	__asm        jmp    _T527;
_T527:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+4], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5df;
_T54f:
	__asm        jmp    _T554;
_T554:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T578;

	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T5df;
_T578:
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T5df;

	__asm        jmp    _T587;
_T587:
	__asm        jmp    _T58c;
_T58c:
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x44];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x54], ecx;
	__asm        mov    eax, sEntryExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5cf;
_T5cf:
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x44];
	__asm        neg    eax;
	__asm        mov    ecx, sEntryExtension;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
_T5df:
	__asm        jmp    _T5e4;
// LINE 68:
_T5e4:
	return 0x0;
// LINE 69:
}

// FUNCTION: COPTER_D 0x0048237c
int32_t DirectoryEntry::GetEntryMinusExtension(/*packed*/ class basic_string<char>& sEntryMinusExtension) {
	/*bp-0x4*/   uint32_t nPosition;


	__asm        mov    byte ptr [ebp-0x40], 0x2E;
// LINE 84:
	__asm        jmp    _T15;
_T15:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        ja     _T3b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T36;
_T36:
	__asm        jmp    _T42;
_T3b:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T42:
	__asm        jmp    _T47;
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T63;

	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    _T163;
_T63:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T8d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T99;

	__asm        jmp    _T99;
_T8d:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T99;
_T99:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x38];
	__asm        movsx  eax, byte ptr [eax+ecx-1];
	__asm        movsx  ecx, byte ptr [ebp-0x40];
	__asm        cmp    eax, ecx;
	__asm        je     _Tb5;

	__asm        jmp    _Tba;
_Tb5:
	__asm        jmp    _Tdb;
_Tba:
	__asm        jmp    _Tc9;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _Tdb;
_Tc9:
	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        jbe    _Tdb;

	__asm        dec    dword ptr [ebp-0x2C];
	__asm        jmp    _T68;
_Tdb:
	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        jne    _T157;

	__asm        jmp    _Tea;
_Tea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T11b;

	__asm        jmp    _T11b;
_T10f:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    eax, [ebp-0x30];
	__asm        movsx  eax, byte ptr [eax];
	__asm        movsx  ecx, byte ptr [ebp-0x40];
	__asm        cmp    eax, ecx;
	__asm        je     _T132;

	__asm        jmp    _T137;
_T132:
	__asm        jmp    _T157;
_T137:
	__asm        jmp    _T146;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T157;
_T146:
	__asm        mov    nPosition, 0xFFFFFFFF;
	__asm        jmp    _T163;

	__asm        jmp    _T163;
_T157:
	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    eax;
	__asm        mov    nPosition, eax;
	__asm        jmp    _T163;
// LINE 85:
_T163:
	__asm        cmp    nPosition, 0;
	__asm        jbe    _T2fd;

	__asm        jmp    _T172;
_T172:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T2fd;
// LINE 86:
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T1cb;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1bc;
_T1bc:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T1cb;
_T1cb:
	__asm        jmp    _T1d0;
_T1d0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T1f8;

	__asm        jmp    _T1e7;
_T1e7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T1fe;
_T1f8:
	__asm        mov    eax, nPosition;
	__asm        mov    [ebp-0x44], eax;
_T1fe:
	__asm        jmp    _T203;
_T203:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, [ebp-0x44];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T29f;

	__asm        jmp    _T21a;
_T21a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T29f;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T27f;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T27f;

	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T269;
_T269:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T27a;
_T27a:
	__asm        jmp    _T27f;
_T27f:
	__asm        jmp    _T284;
_T284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T2e5;
_T29f:
	__asm        jmp    _T2a4;
_T2a4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2c9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T2d5;

	__asm        jmp    _T2d5;
_T2c9:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    _T2d5;
_T2d5:
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        call   basic_string<char>::assign_str;
_T2e5:
	__asm        jmp    _T2ea;
// LINE 87:
_T2ea:
	__asm        jmp    _T2ef;
_T2ef:
	return sEntryMinusExtension.reference-><basic_string_ref<char>+0x04:4>;
// LINE 91:
_T2fd:
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        cmp    eax, sEntryMinusExtension;
	__asm        je     _T498;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T398;

	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T398;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T378;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T378:
	__asm        jmp    _T37d;
_T37d:
	__asm        jmp    _T382;
_T382:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T393;
_T393:
	__asm        jmp    _T398;
_T398:
	__asm        jmp    _T39d;
_T39d:
	__asm        jmp    _T3a2;
_T3a2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T3cd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sEntryMinusExtension;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T498;
_T3cd:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T48e;

	__asm        jmp    _T3e9;
_T3e9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T468;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T463;
_T463:
	__asm        jmp    _T471;
_T468:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T471:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T480;
_T480:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sEntryMinusExtension;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T498;
_T48e:
	sEntryMinusExtension.reference = 0x0;
_T498:
	__asm        jmp    _T49d;
// LINE 92:
_T49d:
	__asm        jmp    _T4a2;
_T4a2:
	return sEntryMinusExtension.reference-><basic_string_ref<char>+0x04:4>;
// LINE 93:
}

// FUNCTION: COPTER_D 0x00482833
void DirectoryEntry::GetFullPath(/*packed*/ class basic_string<char>& sFullPath) {
// LINE 101:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T143;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    sFullPath, eax;
	__asm        je     _T139;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tbb;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tbb;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T9b;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T9b:
	__asm        jmp    _Ta0;
_Ta0:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb6;
_Tb6:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
_Tc0:
	__asm        jmp    _Tc5;
_Tc5:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tf0;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T139;
_Tf0:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T12f;

	__asm        jmp    _T10c;
_T10c:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T139;
_T12f:
	sFullPath.reference = 0x0;
_T139:
	__asm        jmp    _T13e;
// LINE 103:
_T13e:
	__asm        jmp    _T349;
// LINE 104:
_T143:
	__asm        jmp    _T148;
_T148:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T18a;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T17b;
_T17b:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T18a;
_T18a:
	__asm        jmp    _T18f;
_T18f:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T1b5;

	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1bc;
_T1b5:
	__asm        mov    dword ptr [ebp-0x38], 0xFFFFFFFF;
_T1bc:
	__asm        jmp    _T1c1;
_T1c1:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T28b;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T212;

	__asm        jmp    _T1ed;
_T1ed:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T219;
_T212:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T219:
	__asm        jmp    _T21e;
_T21e:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x38];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x54], ecx;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T25e;
_T25e:
	__asm        jmp    _T263;
_T263:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T344;
_T28b:
	__asm        jmp    _T290;
_T290:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T2b4;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T344;
_T2b4:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T344;

	__asm        jmp    _T2c3;
_T2c3:
	__asm        jmp    _T2c8;
_T2c8:
	__asm        jmp    _T2cd;
_T2cd:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2f2;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T2fe;

	__asm        jmp    _T2fe;
_T2f2:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T2fe;
_T2fe:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x38];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T334;
_T334:
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x38];
	__asm        neg    eax;
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
_T344:
	__asm        jmp    _T349;
// LINE 105:
_T349:
	__asm        jmp    _T34e;
_T34e:
	__asm        jmp    _T353;
_T353:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T378;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T384;

	__asm        jmp    _T384;
_T378:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    _T384;
_T384:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T395;
_T395:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T3de;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3cf;
_T3cf:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3de;
_T3de:
	__asm        jmp    _T3e3;
_T3e3:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T418;

	__asm        jmp    _T3f8;
_T3f8:
	__asm        jmp    _T3fd;
_T3fd:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1C];
	__asm        jae    _T4b2;
_T418:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T49a;

	__asm        jmp    _T434;
_T434:
	__asm        jmp    _T439;
_T439:
	__asm        jmp    _T43e;
_T43e:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T463;

	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T46f;

	__asm        jmp    _T46f;
_T463:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T46f;
_T46f:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4a1;
_T49a:
	__asm        mov    dword ptr [ebp-8], 0;
_T4a1:
	__asm        mov    ecx, sFullPath;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, sFullPath;
	__asm        mov    [ecx+4], eax;
_T4b2:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T4f3;

	__asm        jmp    _T4c1;
_T4c1:
	__asm        jmp    _T4c6;
_T4c6:
	__asm        mov    eax, sFullPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4f3;
_T4f3:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, sFullPath;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T504;
_T504:
	__asm        jmp    _T509;
// LINE 106:
_T509:
	return;
}

// FUNCTION: COPTER_D 0x00482d48
int32_t DirectoryEntry::IsMediaRemovable() {
// LINE 112:
	return 0x0;
// LINE 113:
}

// FUNCTION: COPTER_D 0x00482d60
unsigned long DirectoryEntry::GetSize() {
// LINE 119:
	return 0x0;
// LINE 131:
}

// FUNCTION: COPTER_D 0x00482d78
int32_t DirectoryEntry::GetCreationDate() {
// LINE 137:
	return 0x0;
// LINE 138:
}

// FUNCTION: COPTER_D 0x00482d90
int32_t DirectoryEntry::GetlastModificationDate() {
// LINE 144:
	return 0x0;
// LINE 145:
}

// FUNCTION: COPTER_D 0x00482da8
int32_t DirectoryEntry::GetSerialNumber() {
// LINE 151:
	return 0x0;
// LINE 152:
}

// FUNCTION: COPTER_D 0x00482dc0
int32_t DirectoryEntry::CreatePhysicalEntry() {
// LINE 158:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 4;
	__asm        jne    _T1d1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x94], eax;
// LINE 160:
	__asm        jmp    _T38;
_T38:
	__asm        jmp    _T3d;
_T3d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x80];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf1;

	__asm        jmp    _T88;
_T88:
	__asm        jmp    _T8d;
_T8d:
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x94];
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf1;
_Tf1:
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    _T102;
_T102:
	__asm        jmp    _T107;
_T107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x80];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T138;
_T138:
	__asm        push   0;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35FC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T198;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T198;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T182;
_T182:
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T193;
_T193:
	__asm        jmp    _T198;
_T198:
	__asm        jmp    _T19d;
_T19d:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1bf;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1bf:
	__asm        jmp    _T1c4;
_T1c4:
	__asm        mov    eax, [ebp-8];
	__asm        jmp    __RETURN;
// LINE 165:
	__asm        jmp    _T4d7;
_T1d1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 8;
	__asm        jne    _T4d7;
// Block start:
	/*bp-0x4*/   void * __ptr32 hFile;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x48], eax;
// LINE 169:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        jmp    _T1f9;
_T1f9:
	__asm        jmp    _T1fe;
_T1fe:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T223;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T22f;

	__asm        jmp    _T22f;
_T223:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T22f;
_T22f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T257;
_T257:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2ee;

	__asm        jmp    _T26f;
_T26f:
	__asm        jmp    _T274;
_T274:
	__asm        jmp    _T279;
_T279:
	__asm        jmp    _T27e;
_T27e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2a9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T2b5;

	__asm        jmp    _T2b5;
_T2a9:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T2b5;
_T2b5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2ee;
_T2ee:
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T2fc;
_T2fc:
	__asm        jmp    _T301;
_T301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T32f;
_T32f:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T351;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T351:
	__asm        jmp    _T356;
_T356:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T36e;
_T36e:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3d8;

	__asm        jmp    _T380;
_T380:
	__asm        jmp    _T385;
_T385:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3a4;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T3b0;

	__asm        jmp    _T3b0;
_T3a4:
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    _T3b0;
_T3b0:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3d8;
_T3d8:
	__asm        jmp    _T3dd;
_T3dd:
	__asm        mov    byte ptr [ebp-0x60], 0;
	__asm        jmp    _T3e6;
_T3e6:
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T3f1;
_T3f1:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x18];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T40c;
_T40c:
	__asm        jmp    _T411;
_T411:
	__asm        push   0;
	__asm        push   0x80;
	__asm        push   1;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x80000000;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C360C];
	__asm        mov    hFile, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T47c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T47c;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T466;
_T466:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T477;
_T477:
	__asm        jmp    _T47c;
_T47c:
	__asm        jmp    _T481;
_T481:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T4a3;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4a3:
	__asm        jmp    _T4a8;
// LINE 170:
_T4a8:
	__asm        cmp    hFile, 0xFFFFFFFF;
	__asm        je     _T4bc;
// LINE 171:
	__asm        mov    eax, hFile;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3610];
// LINE 172:
_T4bc:
_T4d0:
_T4d2:
	return (hFile == -0x1);
// LINE 177:
// Block end:
_T4d7:
	return 0x0;
// LINE 178:
__RETURN:
}

// FUNCTION: COPTER_D 0x004832a3
void Directory::Directory(/*packed*/ class basic_string<char>& sNewDirectoryPath, int32_t bReadNow, int32_t bNewAllowParentDirectoryAsEntry, int32_t bNewAllowCurrentDirectoryAsEntry) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<DirectoryEntry>::number_of_lists;
	__asm        mov    eax, list<DirectoryEntry>::free_list;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    list<DirectoryEntry>::free_list, 0;
	__asm        je     _T48;

	__asm        mov    eax, list<DirectoryEntry>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<DirectoryEntry>::free_list, eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T225;
_T48:
	__asm        mov    eax, list<DirectoryEntry>::next_avail;
	__asm        cmp    list<DirectoryEntry>::last, eax;
	__asm        jne    _T210;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _Ta7;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9d;
_T9d:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x24], 0xAA;
	__asm        lea    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Tec;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _Tf2;
_Tec:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        jmp    _Tfc;
_Tfc:
	__asm        jmp    _T101;
_T101:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    _T15f;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T155;
_T155:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T15f:
	__asm        jmp    _T164;
_T164:
	__asm        jmp    _T169;
_T169:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<DirectoryEntry>::buffer_list;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    list<DirectoryEntry>::buffer_list, eax;
	__asm        mov    eax, list<DirectoryEntry>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<DirectoryEntry>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x38], 0xAA;
	__asm        lea    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x3C], 1;
	__asm        lea    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1c6;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T1cc;
_T1c6:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x48], eax;
_T1cc:
	__asm        jmp    _T1d1;
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
	__asm        jmp    _T1db;
_T1db:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 3;
	__asm        add    eax, list<DirectoryEntry>::next_avail;
	__asm        mov    list<DirectoryEntry>::last, eax;
	__asm        jmp    _T1f6;
_T1f6:
	__asm        mov    eax, list<DirectoryEntry>::next_avail;
	__asm        mov    [ebp-0x18], eax;
	__asm        add    list<DirectoryEntry>::next_avail, 0x18;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T225;
_T210:
	__asm        mov    eax, list<DirectoryEntry>::next_avail;
	__asm        mov    [ebp-0x1C], eax;
	__asm        add    list<DirectoryEntry>::next_avail, 0x18;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x60], eax;
_T225:
	__asm        jmp    _T22a;
_T22a:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T250;
_T250:
	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T297;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T288;
_T288:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T297;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T2c2;

	__asm        jmp    _T2b1;
_T2b1:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T2c9;
_T2c2:
	__asm        mov    dword ptr [ebp-0x64], 0xFFFFFFFF;
_T2c9:
	__asm        jmp    _T2ce;
_T2ce:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x64];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T30f;

	__asm        jmp    _T2e5;
_T2e5:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T30f;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T3f1;
_T30f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T3e7;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3c1;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T361;
_T361:
	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T386;

	__asm        mov    eax, sNewDirectoryPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T392;

	__asm        jmp    _T392;
_T386:
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    _T392;
_T392:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3bc;
_T3bc:
	__asm        jmp    _T3ca;
_T3c1:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax], 0;
_T3ca:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3d9;
_T3d9:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3f1;
_T3e7:
	this-><Directory+0x0c:4> = 0x0;
_T3f1:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        jmp    _T400;
_T400:
	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T4b8;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T436;
_T436:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T492;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48d;
_T48d:
	__asm        jmp    _T49b;
_T492:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T49b:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T4aa;
_T4aa:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T4c2;
_T4b8:
	this-><Directory+0x14:4> = 0x0;
_T4c2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T4d1;
_T4d1:
	__asm        mov    eax, bNewAllowParentDirectoryAsEntry;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, bNewAllowCurrentDirectoryAsEntry;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 199:
	__asm        mov    ecx, this;
	__asm        call   Directory::MakeSurePathEndsWithSeparator;
// LINE 200:
	__asm        cmp    bReadNow, 0;
	__asm        je     _T4fd;
// LINE 201:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 202:
_T4fd:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004837af
int32_t Directory::IsDirectoryRoot() {
// LINE 209:
	return 0x0;
// LINE 210:
}

// FUNCTION: COPTER_D 0x004837c7
int32_t Directory::ReadDirectoryEntries() {
	/*bp-0x140*/ /*packed*/ struct _WIN32_FIND_DATAA findData; // 0x13e bytes
	/*bp-0x150*/ /*packed*/ class DirectoryEntry directoryEntryCurrent; // 0x10 bytes
	/*bp-0x154*/ void * __ptr32 hFind;
	/*bp-0x158*/ int32_t bCurrentDirectoryEnumerated;
	/*bp-0x15c*/ int32_t bParentDirectoryEnumerated;
	/*bp-0x164*/ /*packed*/ class basic_string<char> sPathWithFilter; // 0x8 bytes
	/*bp-0x168*/ int32_t bNextFileFound;

// LINE 222:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x180];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     _T84;

	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x344], eax;
	__asm        mov    eax, [ebp-0x344];
	__asm        mov    [ebp-0x348], eax;
	__asm        mov    eax, [ebp-0x348];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T84:
	__asm        jmp    _T89;
// LINE 225:
_T89:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 227:
	bParentDirectoryEnumerated = 0x0;
// LINE 228:
	bCurrentDirectoryEnumerated = 0x0;
// LINE 231:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x328], eax;
	__asm        mov    eax, [ebp-0x328];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    _Tc7;
_Tc7:
	__asm        jmp    _Tcc;
_Tcc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x32C], eax;
	__asm        mov    eax, [ebp-0x32C];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    _Ted;
_Ted:
	__asm        jmp    _Tf2;
_Tf2:
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    [ebp-0x33C], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x340], eax;
_T10a:
	__asm        mov    eax, [ebp-0x33C];
	__asm        cmp    [ebp-0x340], eax;
	__asm        jne    _T126;

	__asm        jmp    _T13d;

	__asm        jmp    _T126;
_T126:
	__asm        jmp    _T138;

	__asm        cmp    dword ptr [ebp-0x334], 0;
	__asm        jne    _T13d;
_T138:
	__asm        jmp    _T142;
_T13d:
	__asm        jmp    _T17b;
_T142:
	__asm        jmp    _T154;

	__asm        cmp    dword ptr [ebp-0x338], 0;
	__asm        je     _T17b;
_T154:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x330];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x340];
	__asm        call   list<DirectoryEntry>::iterator::operator++;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::erase;
	__asm        jmp    _T10a;
_T17b:
	__asm        jmp    _T180;
// LINE 233:
_T180:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 234:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        jne    _T215;
// LINE 235:
	__asm        mov    dword ptr [ebp-0x18C], 0;
	__asm        jmp    _T1bb;
_T1bb:
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     _T205;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x34C], eax;
	__asm        mov    eax, [ebp-0x34C];
	__asm        mov    [ebp-0x350], eax;
	__asm        mov    eax, [ebp-0x350];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T205:
	__asm        jmp    _T20a;
_T20a:
	__asm        mov    eax, [ebp-0x18C];
	__asm        jmp    __RETURN;
// LINE 239:
_T215:
	directoryEntryCurrent.directoryParent = this;
// LINE 240:
	__asm        jmp    _T226;
_T226:
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T24d;
// LINE 241:
_T24d:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     _T586;
// LINE 242:
	directoryEntryCurrent.lType = 0x4;
// LINE 243:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    _T3ce;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x320], eax;
	__asm        cmp    dword ptr [ebp-0x320], 0;
	__asm        je     _T2ab;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x320];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x194], eax;
	__asm        jmp    _T2b5;
_T2ab:
	__asm        mov    dword ptr [ebp-0x194], 0;
_T2b5:
	__asm        mov    dword ptr [ebp-0x198], 0;
	__asm        jmp    _T2c4;
_T2c4:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x324], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x324];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x198];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T2fa;

	__asm        mov    dword ptr [ebp-0x190], 1;
	__asm        jmp    _T304;
_T2fa:
	__asm        mov    dword ptr [ebp-0x190], 0;
_T304:
	__asm        jmp    _T309;
_T309:
	__asm        lea    ecx, [ebp-0x198];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     _T348;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x318], eax;
	__asm        mov    eax, [ebp-0x318];
	__asm        mov    [ebp-0x31C], eax;
	__asm        mov    eax, [ebp-0x31C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T348:
	__asm        jmp    _T34d;
_T34d:
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        cmp    dword ptr [ebp-0x1E8], 0;
	__asm        je     _T3ce;
// LINE 244:
	bCurrentDirectoryEnumerated = 0x1;
// LINE 245:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T3c9;
// LINE 246:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x314], eax;
	__asm        mov    eax, [ebp-0x314];
	__asm        mov    [ebp-0x30C], eax;
	__asm        jmp    _T39f;
_T39f:
	__asm        jmp    _T3a4;
_T3a4:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x310];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T3c9;
// LINE 248:
_T3c9:
	__asm        jmp    _T581;
_T3ce:
	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    _T538;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x304], eax;
	__asm        cmp    dword ptr [ebp-0x304], 0;
	__asm        je     _T415;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x304];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    _T41f;
_T415:
	__asm        mov    dword ptr [ebp-0x1A0], 0;
_T41f:
	__asm        mov    dword ptr [ebp-0x1A4], 0;
	__asm        jmp    _T42e;
_T42e:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x308], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x308];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T464;

	__asm        mov    dword ptr [ebp-0x19C], 1;
	__asm        jmp    _T46e;
_T464:
	__asm        mov    dword ptr [ebp-0x19C], 0;
_T46e:
	__asm        jmp    _T473;
_T473:
	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     _T4b2;

	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x2FC], eax;
	__asm        mov    eax, [ebp-0x2FC];
	__asm        mov    [ebp-0x300], eax;
	__asm        mov    eax, [ebp-0x300];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T4b2:
	__asm        jmp    _T4b7;
_T4b7:
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     _T538;
// LINE 249:
	bParentDirectoryEnumerated = 0x1;
// LINE 250:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T533;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2E0], eax;
	__asm        mov    eax, [ebp-0x2E0];
	__asm        mov    [ebp-0x2D8], eax;
	__asm        jmp    _T509;
_T509:
	__asm        jmp    _T50e;
_T50e:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2D8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2DC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T533;
// LINE 253:
_T533:
	__asm        jmp    _T581;
// LINE 254:
_T538:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2EC], eax;
	__asm        mov    eax, [ebp-0x2EC];
	__asm        mov    [ebp-0x2E4], eax;
	__asm        jmp    _T557;
_T557:
	__asm        jmp    _T55c;
_T55c:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2E4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2E8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T581;
// LINE 256:
_T581:
	__asm        jmp    _T5d9;
// LINE 257:
_T586:
	directoryEntryCurrent.lType = 0x8;
// LINE 258:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2F8], eax;
	__asm        mov    eax, [ebp-0x2F8];
	__asm        mov    [ebp-0x2F0], eax;
	__asm        jmp    _T5af;
_T5af:
	__asm        jmp    _T5b4;
_T5b4:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2F0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2F4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T5d9;
// LINE 262:
_T5d9:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3600];
	__asm        mov    bNextFileFound, eax;
// LINE 263:
	__asm        cmp    bNextFileFound, 0;
	__asm        jne    _T612;
// LINE 264:
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3604];
// LINE 265:
	__asm        jmp    _Tcd2;
// LINE 267:
_T612:
	__asm        jmp    _T617;
_T617:
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T63e;
// LINE 268:
_T63e:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     _T977;
// LINE 269:
	directoryEntryCurrent.lType = 0x4;
// LINE 270:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    _T7bf;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2D0], eax;
	__asm        cmp    dword ptr [ebp-0x2D0], 0;
	__asm        je     _T69c;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2D0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    _T6a6;
_T69c:
	__asm        mov    dword ptr [ebp-0x1AC], 0;
_T6a6:
	__asm        mov    dword ptr [ebp-0x1B0], 0;
	__asm        jmp    _T6b5;
_T6b5:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x2D4], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T6eb;

	__asm        mov    dword ptr [ebp-0x1A8], 1;
	__asm        jmp    _T6f5;
_T6eb:
	__asm        mov    dword ptr [ebp-0x1A8], 0;
_T6f5:
	__asm        jmp    _T6fa;
_T6fa:
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1B0], 0;
	__asm        je     _T739;

	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x2C8], eax;
	__asm        mov    eax, [ebp-0x2C8];
	__asm        mov    [ebp-0x2CC], eax;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T739:
	__asm        jmp    _T73e;
_T73e:
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x1F0], eax;
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     _T7bf;
// LINE 271:
	bCurrentDirectoryEnumerated = 0x1;
// LINE 272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T7ba;
// LINE 273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C4], eax;
	__asm        mov    eax, [ebp-0x2C4];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        jmp    _T790;
_T790:
	__asm        jmp    _T795;
_T795:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2C0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T7ba;
// LINE 275:
_T7ba:
	__asm        jmp    _T972;
_T7bf:
	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    _T929;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2B4], eax;
	__asm        cmp    dword ptr [ebp-0x2B4], 0;
	__asm        je     _T806;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2B4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1B8], eax;
	__asm        jmp    _T810;
_T806:
	__asm        mov    dword ptr [ebp-0x1B8], 0;
_T810:
	__asm        mov    dword ptr [ebp-0x1BC], 0;
	__asm        jmp    _T81f;
_T81f:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x2B8], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2B8];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1BC];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T855;

	__asm        mov    dword ptr [ebp-0x1B4], 1;
	__asm        jmp    _T85f;
_T855:
	__asm        mov    dword ptr [ebp-0x1B4], 0;
_T85f:
	__asm        jmp    _T864;
_T864:
	__asm        lea    ecx, [ebp-0x1BC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1BC], 0;
	__asm        je     _T8a3;

	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x2AC], eax;
	__asm        mov    eax, [ebp-0x2AC];
	__asm        mov    [ebp-0x2B0], eax;
	__asm        mov    eax, [ebp-0x2B0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T8a3:
	__asm        jmp    _T8a8;
_T8a8:
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1F4], eax;
	__asm        cmp    dword ptr [ebp-0x1F4], 0;
	__asm        je     _T929;
// LINE 276:
	bParentDirectoryEnumerated = 0x1;
// LINE 277:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T924;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x288], eax;
	__asm        jmp    _T8fa;
_T8fa:
	__asm        jmp    _T8ff;
_T8ff:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x288];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T924;
// LINE 280:
_T924:
	__asm        jmp    _T972;
// LINE 281:
_T929:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x294], eax;
	__asm        jmp    _T948;
_T948:
	__asm        jmp    _T94d;
_T94d:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x298];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T972;
// LINE 283:
_T972:
	__asm        jmp    _T9ca;
// LINE 284:
_T977:
	directoryEntryCurrent.lType = 0x8;
// LINE 285:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        jmp    _T9a0;
_T9a0:
	__asm        jmp    _T9a5;
_T9a5:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T9ca;
// LINE 287:
_T9ca:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x280], eax;
	__asm        cmp    dword ptr [ebp-0x280], 0;
	__asm        je     _Ta04;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x280];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    _Ta0e;
_Ta04:
	__asm        mov    dword ptr [ebp-0x1C4], 0;
_Ta0e:
	__asm        mov    dword ptr [ebp-0x1C8], 0;
	__asm        jmp    _Ta1d;
_Ta1d:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x284], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x284];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1C8];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Ta53;

	__asm        mov    dword ptr [ebp-0x1C0], 1;
	__asm        jmp    _Ta5d;
_Ta53:
	__asm        mov    dword ptr [ebp-0x1C0], 0;
_Ta5d:
	__asm        jmp    _Ta62;
_Ta62:
	__asm        lea    ecx, [ebp-0x1C8];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C8], 0;
	__asm        je     _Taa1;

	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x278], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Taa1:
	__asm        jmp    _Taa6;
_Taa6:
	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x1F8], eax;
	__asm        cmp    dword ptr [ebp-0x1F8], 0;
	__asm        je     _Tb27;
// LINE 288:
	bCurrentDirectoryEnumerated = 0x1;
// LINE 289:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _Tb22;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    [ebp-0x26C], eax;
	__asm        jmp    _Taf8;
_Taf8:
	__asm        jmp    _Tafd;
_Tafd:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _Tb22;
// LINE 292:
_Tb22:
	__asm        jmp    _Tccd;
_Tb27:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x264], eax;
	__asm        cmp    dword ptr [ebp-0x264], 0;
	__asm        je     _Tb61;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x264];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    _Tb6b;
_Tb61:
	__asm        mov    dword ptr [ebp-0x1D0], 0;
_Tb6b:
	__asm        mov    dword ptr [ebp-0x1D4], 0;
	__asm        jmp    _Tb7a;
_Tb7a:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x268], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x268];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Tbb0;

	__asm        mov    dword ptr [ebp-0x1CC], 1;
	__asm        jmp    _Tbba;
_Tbb0:
	__asm        mov    dword ptr [ebp-0x1CC], 0;
_Tbba:
	__asm        jmp    _Tbbf;
_Tbbf:
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     _Tbfe;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tbfe:
	__asm        jmp    _Tc03;
_Tc03:
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        cmp    dword ptr [ebp-0x1FC], 0;
	__asm        je     _Tc84;
// LINE 293:
	bParentDirectoryEnumerated = 0x1;
// LINE 294:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _Tc7f;
// LINE 295:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x21C], eax;
	__asm        mov    eax, [ebp-0x21C];
	__asm        mov    [ebp-0x214], eax;
	__asm        jmp    _Tc55;
_Tc55:
	__asm        jmp    _Tc5a;
_Tc5a:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x218];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _Tc7f;
// LINE 297:
_Tc7f:
	__asm        jmp    _Tccd;
// LINE 298:
_Tc84:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x228], eax;
	__asm        mov    eax, [ebp-0x228];
	__asm        mov    [ebp-0x220], eax;
	__asm        jmp    _Tca3;
_Tca3:
	__asm        jmp    _Tca8;
_Tca8:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x224];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _Tccd;
// LINE 299:
_Tccd:
	__asm        jmp    _T5d9;
// LINE 305:
_Tcd2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _Ted6;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    _Ted6;

	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x204], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x204];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Td1e;

	__asm        jmp    _Td23;
_Td1e:
	__asm        jmp    _Ted6;
_Td23:
	__asm        jmp    _Td35;

	__asm        cmp    dword ptr [ebp-0x208], 0;
	__asm        je     _Ted6;
// LINE 306:
// Block start:
	/*bp-0x170*/ /*packed*/ class basic_string<char> sParentDirectory; // 0x8 bytes
_Td35:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x358], eax;
// LINE 307:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x354], eax;
	__asm        cmp    dword ptr [ebp-0x354], 0;
	__asm        je     _Td7a;

	__asm        mov    eax, [ebp-0x358];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x354];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sParentDirectory.reference, eax;
	__asm        jmp    _Td84;
_Td7a:
	sParentDirectory.reference = 0x0;
_Td84:
	__asm        mov    sParentDirectory.c_str_ptr, 0;
	__asm        jmp    _Td93;
// LINE 308:
_Td93:
	__asm        lea    eax, sParentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Directory::DoesDirectoryListContainEntry;
	__asm        test   eax, eax;
	__asm        jne    _Te92;
// LINE 309:
	__asm        lea    eax, directoryEntryCurrent.sName.c_str_ptr;
	__asm        lea    ecx, sParentDirectory.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     _Te50;

	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _Tdd1;
_Tdd1:
	__asm        mov    eax, sParentDirectory.reference;
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdfb;

	__asm        mov    eax, sParentDirectory.reference;
	__asm        mov    directoryEntryCurrent.sName.reference, eax;
	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _Te50;
_Tdfb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x36C], eax;
	__asm        cmp    dword ptr [ebp-0x36C], 0;
	__asm        je     _Te46;

	__asm        jmp    _Te1d;
_Te1d:
	__asm        mov    eax, sParentDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, sParentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x36C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    directoryEntryCurrent.sName.reference, eax;
	__asm        jmp    _Te50;
_Te46:
	directoryEntryCurrent.sName.reference = 0x0;
_Te50:
	__asm        jmp    _Te55;
// LINE 310:
_Te55:
	directoryEntryCurrent.lType = 0x4;
// LINE 311:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _Te92;
// LINE 313:
_Te92:
	__asm        lea    ecx, sParentDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sParentDirectory.c_str_ptr, 0;
	__asm        je     _Ted1;

	__asm        mov    eax, sParentDirectory.c_str_ptr;
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Ted1:
	__asm        jmp    _Ted6;
// LINE 316:
// Block end:
_Ted6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T1118;

	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    _T1118;

	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x20C], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x20C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Tf22;

	__asm        jmp    _Tf27;
_Tf22:
	__asm        jmp    _T1118;
_Tf27:
	__asm        jmp    _Tf39;

	__asm        cmp    dword ptr [ebp-0x210], 0;
	__asm        je     _T1118;
// LINE 317:
// Block start:
	/*bp-0x178*/ /*packed*/ class basic_string<char> sCurrentDirectory; // 0x8 bytes
_Tf39:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x360], eax;
// LINE 318:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x35C], eax;
	__asm        cmp    dword ptr [ebp-0x35C], 0;
	__asm        je     _Tf7e;

	__asm        mov    eax, [ebp-0x360];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x35C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sCurrentDirectory.reference, eax;
	__asm        jmp    _Tf88;
_Tf7e:
	sCurrentDirectory.reference = 0x0;
_Tf88:
	__asm        mov    sCurrentDirectory.c_str_ptr, 0;
	__asm        jmp    _Tf97;
_Tf97:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x368], eax;
// LINE 319:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x364], eax;
	__asm        cmp    dword ptr [ebp-0x364], 0;
	__asm        je     _Tfdc;

	__asm        mov    eax, [ebp-0x368];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x364];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    _Tfe6;
_Tfdc:
	__asm        mov    dword ptr [ebp-0x1DC], 0;
_Tfe6:
	__asm        mov    dword ptr [ebp-0x1E0], 0;
	__asm        jmp    _Tff5;
_Tff5:
	__asm        lea    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Directory::DoesDirectoryListContainEntry;
	__asm        test   eax, eax;
	__asm        jne    _T101e;

	__asm        mov    dword ptr [ebp-0x1D8], 1;
	__asm        jmp    _T1028;
_T101e:
	__asm        mov    dword ptr [ebp-0x1D8], 0;
_T1028:
	__asm        lea    ecx, [ebp-0x1E0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1E0], 0;
	__asm        je     _T1067;

	__asm        mov    eax, [ebp-0x1E0];
	__asm        mov    [ebp-0x24C], eax;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1067:
	__asm        jmp    _T106c;
_T106c:
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    [ebp-0x200], eax;
	__asm        cmp    dword ptr [ebp-0x200], 0;
	__asm        je     _T10d4;
// LINE 320:
	__asm        lea    eax, sCurrentDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 321:
	directoryEntryCurrent.lType = 0x4;
// LINE 322:
	__asm        lea    eax, directoryEntryCurrent.directoryParent;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x238];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   list<DirectoryEntry>::insert;
	__asm        jmp    _T10d4;
// LINE 324:
_T10d4:
	__asm        lea    ecx, sCurrentDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sCurrentDirectory.c_str_ptr, 0;
	__asm        je     _T1113;

	__asm        mov    eax, sCurrentDirectory.c_str_ptr;
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        mov    [ebp-0x258], eax;
	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1113:
	__asm        jmp    _T1118;
// LINE 327:
// Block end:
_T1118:
	__asm        mov    dword ptr [ebp-0x1E4], 1;
	__asm        jmp    _T1127;
_T1127:
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     _T1171;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        mov    [ebp-0x260], eax;
	__asm        mov    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1171:
	__asm        jmp    _T1176;
_T1176:
	__asm        mov    eax, [ebp-0x1E4];
	__asm        jmp    __RETURN;
// LINE 328:
__RETURN:
}

// FUNCTION: COPTER_D 0x0048494d
int32_t Directory::ReadDirectorySpecificEntriesIntoStringList(/*packed*/ class list<basic_string<char>>& sDirectoryEntries, long lFilter) {
	/*bp-0x140*/ /*packed*/ struct _WIN32_FIND_DATAA findData; // 0x13e bytes
	/*bp-0x150*/ /*packed*/ class DirectoryEntry directoryEntryCurrent; // 0x10 bytes
	/*bp-0x154*/ void * __ptr32 hFind;
	/*bp-0x158*/ int32_t bCurrentDirectoryEnumerated;
	/*bp-0x15c*/ int32_t bParentDirectoryEnumerated;
	/*bp-0x164*/ /*packed*/ class basic_string<char> sPathWithFilter; // 0x8 bytes
	/*bp-0x168*/ int32_t bNextFileFound;

// LINE 349:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x170];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x170];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 352:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 354:
	bParentDirectoryEnumerated = 0x0;
// LINE 355:
	bCurrentDirectoryEnumerated = 0x0;
// LINE 357:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 358:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        jne    _Tcb;
// LINE 359:
	__asm        mov    dword ptr [ebp-0x174], 0;
	__asm        jmp    _Taa;
_Taa:
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x174];
	__asm        jmp    __RETURN;
// LINE 361:
_Tcb:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     _T44f;
// LINE 362:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 4;
	__asm        je     _T44a;
// LINE 363:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    _T1ef;

	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x330], eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x334], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x330];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x334];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T13d;

	__asm        mov    dword ptr [ebp-0x178], 1;
	__asm        jmp    _T147;
_T13d:
	__asm        mov    dword ptr [ebp-0x178], 0;
_T147:
	__asm        jmp    _T14c;
_T14c:
	__asm        lea    ecx, [ebp-0x180];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x1F8], eax;
	__asm        cmp    dword ptr [ebp-0x1F8], 0;
	__asm        je     _T1ef;
// LINE 364:
	bCurrentDirectoryEnumerated = 0x1;
// LINE 365:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     _T1ea;
// LINE 366:
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x188];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x32C], eax;
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x328], eax;
	__asm        mov    eax, [ebp-0x328];
	__asm        mov    [ebp-0x320], eax;
	__asm        jmp    _T1b8;
_T1b8:
	__asm        jmp    _T1bd;
_T1bd:
	__asm        mov    eax, [ebp-0x32C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x320];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x324];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T1df;
_T1df:
	__asm        lea    ecx, [ebp-0x188];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 368:
_T1ea:
	__asm        jmp    _T44a;
_T1ef:
	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    _T370;

	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x318], eax;
	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x194];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x31C], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x318];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x31C];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T24a;

	__asm        mov    dword ptr [ebp-0x18C], 1;
	__asm        jmp    _T254;
_T24a:
	__asm        mov    dword ptr [ebp-0x18C], 0;
_T254:
	__asm        jmp    _T259;
_T259:
	__asm        lea    ecx, [ebp-0x194];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        cmp    dword ptr [ebp-0x1FC], 0;
	__asm        je     _T370;
// LINE 369:
	bParentDirectoryEnumerated = 0x1;
// LINE 370:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     _T36b;
// LINE 371:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x308], eax;
	__asm        cmp    dword ptr [ebp-0x308], 0;
	__asm        je     _T2cb;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x308];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x198], eax;
	__asm        jmp    _T2d5;
_T2cb:
	__asm        mov    dword ptr [ebp-0x198], 0;
_T2d5:
	__asm        mov    dword ptr [ebp-0x19C], 0;
	__asm        jmp    _T2e4;
_T2e4:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x314], eax;
	__asm        mov    eax, [ebp-0x314];
	__asm        mov    [ebp-0x30C], eax;
	__asm        jmp    _T300;
_T300:
	__asm        jmp    _T305;
_T305:
	__asm        lea    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x310];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T327;
_T327:
	__asm        lea    ecx, [ebp-0x19C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     _T366;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x300], eax;
	__asm        mov    eax, [ebp-0x300];
	__asm        mov    [ebp-0x304], eax;
	__asm        mov    eax, [ebp-0x304];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T366:
	__asm        jmp    _T36b;
// LINE 373:
_T36b:
	__asm        jmp    _T44a;
// LINE 374:
_T370:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2F0], eax;
	__asm        cmp    dword ptr [ebp-0x2F0], 0;
	__asm        je     _T3aa;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2F0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    _T3b4;
_T3aa:
	__asm        mov    dword ptr [ebp-0x1A0], 0;
_T3b4:
	__asm        mov    dword ptr [ebp-0x1A4], 0;
	__asm        jmp    _T3c3;
_T3c3:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2FC], eax;
	__asm        mov    eax, [ebp-0x2FC];
	__asm        mov    [ebp-0x2F4], eax;
	__asm        jmp    _T3df;
_T3df:
	__asm        jmp    _T3e4;
_T3e4:
	__asm        lea    eax, [ebp-0x1A4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2F8];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T406;
_T406:
	__asm        lea    ecx, [ebp-0x1A4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        je     _T445;

	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x2E8], eax;
	__asm        mov    eax, [ebp-0x2E8];
	__asm        mov    [ebp-0x2EC], eax;
	__asm        mov    eax, [ebp-0x2EC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T445:
	__asm        jmp    _T44a;
// LINE 377:
_T44a:
	__asm        jmp    _T533;
// LINE 378:
_T44f:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 8;
	__asm        je     _T533;
// LINE 379:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2D8], eax;
	__asm        cmp    dword ptr [ebp-0x2D8], 0;
	__asm        je     _T493;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2D8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        jmp    _T49d;
_T493:
	__asm        mov    dword ptr [ebp-0x1A8], 0;
_T49d:
	__asm        mov    dword ptr [ebp-0x1AC], 0;
	__asm        jmp    _T4ac;
_T4ac:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2E4], eax;
	__asm        mov    eax, [ebp-0x2E4];
	__asm        mov    [ebp-0x2DC], eax;
	__asm        jmp    _T4c8;
_T4c8:
	__asm        jmp    _T4cd;
_T4cd:
	__asm        lea    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2DC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2E0];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T4ef;
_T4ef:
	__asm        lea    ecx, [ebp-0x1AC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1AC], 0;
	__asm        je     _T52e;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x2D0], eax;
	__asm        mov    eax, [ebp-0x2D0];
	__asm        mov    [ebp-0x2D4], eax;
	__asm        mov    eax, [ebp-0x2D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T52e:
	__asm        jmp    _T533;
// LINE 383:
_T533:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3600];
	__asm        mov    bNextFileFound, eax;
// LINE 384:
	__asm        cmp    bNextFileFound, 0;
	__asm        jne    _T56c;
// LINE 385:
	__asm        mov    eax, hFind;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3604];
// LINE 386:
	__asm        jmp    _Tb35;
// LINE 388:
_T56c:
	__asm        test   reinterpret_cast<uint8_t>(findData.dwFileAttributes), 0x10;
	__asm        je     _Ta4c;
// LINE 389:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 4;
	__asm        je     _Ta47;
// LINE 390:
	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        jne    _T778;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C8], eax;
	__asm        cmp    dword ptr [ebp-0x2C8], 0;
	__asm        je     _T5ca;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        jmp    _T5d4;
_T5ca:
	__asm        mov    dword ptr [ebp-0x1B4], 0;
_T5d4:
	__asm        mov    dword ptr [ebp-0x1B8], 0;
	__asm        jmp    _T5e3;
_T5e3:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x2CC], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2CC];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B8];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T619;

	__asm        mov    dword ptr [ebp-0x1B0], 1;
	__asm        jmp    _T623;
_T619:
	__asm        mov    dword ptr [ebp-0x1B0], 0;
_T623:
	__asm        jmp    _T628;
_T628:
	__asm        lea    ecx, [ebp-0x1B8];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     _T667;

	__asm        mov    eax, [ebp-0x1B8];
	__asm        mov    [ebp-0x2C0], eax;
	__asm        mov    eax, [ebp-0x2C0];
	__asm        mov    [ebp-0x2C4], eax;
	__asm        mov    eax, [ebp-0x2C4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T667:
	__asm        jmp    _T66c;
_T66c:
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x200], eax;
	__asm        cmp    dword ptr [ebp-0x200], 0;
	__asm        je     _T778;
// LINE 391:
	bCurrentDirectoryEnumerated = 0x1;
// LINE 392:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     _T773;
// LINE 393:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2B0], eax;
	__asm        cmp    dword ptr [ebp-0x2B0], 0;
	__asm        je     _T6d3;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2B0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        jmp    _T6dd;
_T6d3:
	__asm        mov    dword ptr [ebp-0x1BC], 0;
_T6dd:
	__asm        mov    dword ptr [ebp-0x1C0], 0;
	__asm        jmp    _T6ec;
_T6ec:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2BC], eax;
	__asm        mov    eax, [ebp-0x2BC];
	__asm        mov    [ebp-0x2B4], eax;
	__asm        jmp    _T708;
_T708:
	__asm        jmp    _T70d;
_T70d:
	__asm        lea    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2B8];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T72f;
_T72f:
	__asm        lea    ecx, [ebp-0x1C0];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C0], 0;
	__asm        je     _T76e;

	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        mov    [ebp-0x2AC], eax;
	__asm        mov    eax, [ebp-0x2AC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T76e:
	__asm        jmp    _T773;
// LINE 395:
_T773:
	__asm        jmp    _Ta47;
_T778:
	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        jne    _T96d;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2A0], eax;
	__asm        cmp    dword ptr [ebp-0x2A0], 0;
	__asm        je     _T7bf;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2A0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    _T7c9;
_T7bf:
	__asm        mov    dword ptr [ebp-0x1C8], 0;
_T7c9:
	__asm        mov    dword ptr [ebp-0x1CC], 0;
	__asm        jmp    _T7d8;
_T7d8:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x2A4], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1CC];
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T80e;

	__asm        mov    dword ptr [ebp-0x1C4], 1;
	__asm        jmp    _T818;
_T80e:
	__asm        mov    dword ptr [ebp-0x1C4], 0;
_T818:
	__asm        jmp    _T81d;
_T81d:
	__asm        lea    ecx, [ebp-0x1CC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        je     _T85c;

	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T85c:
	__asm        jmp    _T861;
_T861:
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x204], eax;
	__asm        cmp    dword ptr [ebp-0x204], 0;
	__asm        je     _T96d;
// LINE 396:
	bParentDirectoryEnumerated = 0x1;
// LINE 397:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     _T968;
// LINE 398:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x288], eax;
	__asm        cmp    dword ptr [ebp-0x288], 0;
	__asm        je     _T8c8;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x288];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D0], eax;
	__asm        jmp    _T8d2;
_T8c8:
	__asm        mov    dword ptr [ebp-0x1D0], 0;
_T8d2:
	__asm        mov    dword ptr [ebp-0x1D4], 0;
	__asm        jmp    _T8e1;
_T8e1:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x294], eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        mov    [ebp-0x28C], eax;
	__asm        jmp    _T8fd;
_T8fd:
	__asm        jmp    _T902;
_T902:
	__asm        lea    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x290];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _T924;
_T924:
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     _T963;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x280];
	__asm        mov    [ebp-0x284], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T963:
	__asm        jmp    _T968;
// LINE 400:
_T968:
	__asm        jmp    _Ta47;
// LINE 401:
_T96d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x270], eax;
	__asm        cmp    dword ptr [ebp-0x270], 0;
	__asm        je     _T9a7;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x270];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    _T9b1;
_T9a7:
	__asm        mov    dword ptr [ebp-0x1D8], 0;
_T9b1:
	__asm        mov    dword ptr [ebp-0x1DC], 0;
	__asm        jmp    _T9c0;
_T9c0:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x274], eax;
	__asm        jmp    _T9dc;
_T9dc:
	__asm        jmp    _T9e1;
_T9e1:
	__asm        lea    eax, [ebp-0x1DC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x278];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _Ta03;
_Ta03:
	__asm        lea    ecx, [ebp-0x1DC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1DC], 0;
	__asm        je     _Ta42;

	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Ta42:
	__asm        jmp    _Ta47;
// LINE 404:
_Ta47:
	__asm        jmp    _Tb30;
// LINE 405:
_Ta4c:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 8;
	__asm        je     _Tb30;
// LINE 406:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x258], eax;
	__asm        cmp    dword ptr [ebp-0x258], 0;
	__asm        je     _Ta90;

	__asm        lea    eax, findData.cFileName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x258];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1E0], eax;
	__asm        jmp    _Ta9a;
_Ta90:
	__asm        mov    dword ptr [ebp-0x1E0], 0;
_Ta9a:
	__asm        mov    dword ptr [ebp-0x1E4], 0;
	__asm        jmp    _Taa9;
_Taa9:
	__asm        mov    eax, sDirectoryEntries;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x264], eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    [ebp-0x25C], eax;
	__asm        jmp    _Tac5;
_Tac5:
	__asm        jmp    _Taca;
_Taca:
	__asm        lea    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _Taec;
_Taec:
	__asm        lea    ecx, [ebp-0x1E4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1E4], 0;
	__asm        je     _Tb2b;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tb2b:
	__asm        jmp    _Tb30;
// LINE 408:
_Tb30:
	__asm        jmp    _T533;
// LINE 412:
_Tb35:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 2;
	__asm        je     _Tc61;

	__asm        cmp    bParentDirectoryEnumerated, 0;
	__asm        je     _Tc61;

	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x240], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Tb7b;

	__asm        jmp    _Tb80;
_Tb7b:
	__asm        jmp    _Tc61;
_Tb80:
	__asm        jmp    _Tb92;

	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     _Tc61;
// LINE 413:
_Tb92:
	__asm        mov    eax, SZ_PARENT_DIR_NAME;
	__asm        mov    [ebp-0x23C], eax;
// LINE 414:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        cmp    dword ptr [ebp-0x238], 0;
	__asm        je     _Tbd7;

	__asm        mov    eax, [ebp-0x23C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        jmp    _Tbe1;
_Tbd7:
	__asm        mov    dword ptr [ebp-0x1E8], 0;
_Tbe1:
	__asm        mov    dword ptr [ebp-0x1EC], 0;
	__asm        jmp    _Tbf0;
_Tbf0:
	__asm        lea    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x24C];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _Tc1d;
_Tc1d:
	__asm        lea    ecx, [ebp-0x1EC];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1EC], 0;
	__asm        je     _Tc5c;

	__asm        mov    eax, [ebp-0x1EC];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tc5c:
	__asm        jmp    _Tc61;
// LINE 418:
_Tc61:
	__asm        test   reinterpret_cast<uint8_t>(lFilter), 1;
	__asm        je     _Td8d;

	__asm        cmp    bCurrentDirectoryEnumerated, 0;
	__asm        je     _Td8d;

	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x220], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x10;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Tca7;

	__asm        jmp    _Tcac;
_Tca7:
	__asm        jmp    _Td8d;
_Tcac:
	__asm        jmp    _Tcbe;

	__asm        cmp    dword ptr [ebp-0x224], 0;
	__asm        je     _Td8d;
// LINE 419:
_Tcbe:
	__asm        mov    eax, SZ_CURRENT_DIR_NAME;
	__asm        mov    [ebp-0x21C], eax;
// LINE 420:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x218], eax;
	__asm        cmp    dword ptr [ebp-0x218], 0;
	__asm        je     _Td03;

	__asm        mov    eax, [ebp-0x21C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x218];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1F0], eax;
	__asm        jmp    _Td0d;
_Td03:
	__asm        mov    dword ptr [ebp-0x1F0], 0;
_Td0d:
	__asm        mov    dword ptr [ebp-0x1F4], 0;
	__asm        jmp    _Td1c;
_Td1c:
	__asm        lea    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    ecx, sDirectoryEntries;
	__asm        call   list<basic_string<char>>::insert;
	__asm        jmp    _Td49;
_Td49:
	__asm        lea    ecx, [ebp-0x1F4];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1F4], 0;
	__asm        je     _Td88;

	__asm        mov    eax, [ebp-0x1F4];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        mov    [ebp-0x20C], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Td88:
	__asm        jmp    _Td8d;
// LINE 423:
_Td8d:
	__asm        jmp    _Td92;
_Td92:
	__asm        lea    ecx, directoryEntryCurrent.sName.c_str_ptr;
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, sPathWithFilter.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sPathWithFilter.c_str_ptr, 0;
	__asm        je     _Tddc;

	__asm        mov    eax, sPathWithFilter.c_str_ptr;
	__asm        mov    [ebp-0x210], eax;
	__asm        mov    eax, [ebp-0x210];
	__asm        mov    [ebp-0x214], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tddc:
	__asm        jmp    __RETURN;
__RETURN:
}

// FUNCTION: COPTER_D 0x00485735
int32_t Directory::DoesAnyEntryExistThatMatchesPattern(const /*packed*/ class basic_string<char>& sPathPattern) {
	/*bp-0x140*/ /*packed*/ struct _WIN32_FIND_DATAA findData; // 0x13e bytes
	/*bp-0x150*/ /*packed*/ class DirectoryEntry directoryEntryCurrent; // 0x10 bytes
	/*bp-0x154*/ void * __ptr32 hFind;

// LINE 435:
	__asm        lea    ecx, directoryEntryCurrent.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 437:
	__asm        mov    eax, sPathPattern;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T49;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49:
	__asm        jmp    _T4e;
_T4e:
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, sPathPattern;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T6b;
_T6b:
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf8;

	__asm        jmp    _T80;
_T80:
	__asm        jmp    _T85;
_T85:
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tad;

	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x188], eax;
	__asm        jmp    _Tbc;

	__asm        jmp    _Tbc;
_Tad:
	__asm        mov    dword ptr [ebp-0x188], 0;
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf8;
_Tf8:
	__asm        jmp    _Tfd;
_Tfd:
	__asm        mov    byte ptr [ebp-0x178], 0;
	__asm        jmp    _T109;
_T109:
	__asm        lea    eax, [ebp-0x178];
	__asm        mov    [ebp-0x180], eax;
	__asm        jmp    _T11a;
_T11a:
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sPathPattern;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx], al;
	__asm        jmp    _T143;
_T143:
	__asm        jmp    _T148;
_T148:
	__asm        lea    eax, findData.dwFileAttributes;
	__asm        push   eax;
	__asm        mov    eax, sPathPattern;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F0];
	__asm        mov    hFind, eax;
// LINE 438:
	__asm        cmp    hFind, 0xFFFFFFFF;
	__asm        je     _T17d;

	__asm        mov    dword ptr [ebp-0x158], 1;
	__asm        jmp    _T187;
_T17d:
	__asm        mov    dword ptr [ebp-0x158], 0;
_T187:
	__asm        jmp    _T18c;
_T18c:
	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T23f;

	__asm        mov    eax, directoryEntryCurrent.sName.reference;
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x164], eax;
	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     _T23f;

	__asm        mov    eax, [ebp-0x164];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T21c;

	__asm        mov    eax, [ebp-0x164];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    dword ptr [eax], 0;
_T21c:
	__asm        jmp    _T221;
_T221:
	__asm        jmp    _T226;
_T226:
	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T23a;
_T23a:
	__asm        jmp    _T23f;
_T23f:
	__asm        jmp    _T244;
_T244:
	__asm        cmp    directoryEntryCurrent.sName.c_str_ptr, 0;
	__asm        je     _T278;

	__asm        mov    eax, directoryEntryCurrent.sName.c_str_ptr;
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T278:
	__asm        jmp    _T27d;
_T27d:
	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    __RETURN;
// LINE 440:
__RETURN:
}

// FUNCTION: COPTER_D 0x004859c2
int32_t Directory::DoesDirectoryListContainEntry(const /*packed*/ class basic_string<char>& sEntry) {
	/*bp-0x4*/   /*packed*/ class list<DirectoryEntry>::iterator tempDirectoryEntryListIterator;

// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tempDirectoryEntryListIterator.node, eax;
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 450:
_T26:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T39;
_T39:
	__asm        jmp    _T3e;
_T3e:
	__asm        mov    eax, [ebp-8];
	__asm        cmp    tempDirectoryEntryListIterator.node, eax;
	__asm        jne    _T54;

	__asm        jmp    _T68;

	__asm        jmp    _T54;
_T54:
	__asm        jmp    _T63;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T68;
_T63:
	__asm        jmp    _T6d;
_T68:
	__asm        jmp    _T166;
_T6d:
	__asm        jmp    _T7c;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T166;
// LINE 451:
_T7c:
	__asm        jmp    _T81;
_T81:
	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T8f;
_T8f:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _Tb5;

	__asm        jmp    _Ta4;
_Ta4:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Tbc;
_Tb5:
	__asm        mov    dword ptr [ebp-0x10], 0xFFFFFFFF;
_Tbc:
	__asm        jmp    _Tc1;
_Tc1:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Teb;

	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tf7;

	__asm        jmp    _Tf7;
_Teb:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _Tf7;
_Tf7:
	__asm        jmp    _Tfc;
_Tfc:
	__asm        mov    eax, sEntry;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    _T125;

	__asm        jmp    _T12a;
_T125:
	__asm        jmp    _T143;
_T12a:
	__asm        jmp    _T139;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T143;
// LINE 452:
_T139:
	return 0x1;
// LINE 453:
_T143:
	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, tempDirectoryEntryListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempDirectoryEntryListIterator.node, eax;
	__asm        jmp    _T156;
_T156:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T161;
// LINE 454:
_T161:
	__asm        jmp    _T26;
// LINE 455:
_T166:
	return 0x0;
// LINE 456:
}

// FUNCTION: COPTER_D 0x00485b36
int32_t Directory::ChangeDirectory(/*packed*/ class basic_string<char>& sNewDirectory, int32_t bReadNow) {
// LINE 474:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sNewDirectory;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this-><Directory+0x0c:4> = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 475:
_T1d3:
	__asm        mov    ecx, this;
	__asm        call   Directory::MakeSurePathEndsWithSeparator;
// LINE 476:
	__asm        cmp    bReadNow, 0;
	__asm        je     _T1ed;
// LINE 477:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 478:
_T1ed:
	return 0x1;
// LINE 479:
}

// FUNCTION: COPTER_D 0x00485d34
int32_t Directory::CreateNewEntry(/*packed*/ class basic_string<char>& sName, long lType) {
	/*bp-0x10*/  /*packed*/ class DirectoryEntry tempDirectoryEntry; // 0x10 bytes

// LINE 487:
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        mov    eax, sName;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectoryEntry.directoryParent;
	__asm        call   DirectoryEntry::DirectoryEntry;
// LINE 488:
	__asm        lea    ecx, tempDirectoryEntry.directoryParent;
	__asm        call   DirectoryEntry::CreatePhysicalEntry;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T30;
_T30:
	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb3;

	__asm        mov    eax, tempDirectoryEntry.sName.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tb3;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T93;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T93:
	__asm        jmp    _T98;
_T98:
	__asm        jmp    _T9d;
_T9d:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tae;
_Tae:
	__asm        jmp    _Tb3;
_Tb3:
	__asm        jmp    _Tb8;
_Tb8:
	__asm        cmp    tempDirectoryEntry.sName.c_str_ptr, 0;
	__asm        je     _Tda;

	__asm        mov    eax, tempDirectoryEntry.sName.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tda:
	__asm        jmp    _Tdf;
_Tdf:
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    __RETURN;
// LINE 489:
__RETURN:
}

// FUNCTION: COPTER_D 0x00485e22
class DirectoryEntry * Directory::GetNthEntry(int32_t nIndex) {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   /*packed*/ class list<DirectoryEntry>::iterator iterator;

// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 500:
_T26:
	__asm        mov    i, 0;
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    iEnd, eax;
	__asm        jmp    _T61;
_T40:
	__asm        inc    i;
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T56;
_T56:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T61;
_T61:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T8e;
// LINE 501:
	__asm        mov    eax, nIndex;
	__asm        cmp    i, eax;
	__asm        jne    _T89;
// LINE 502:
	__asm        jmp    _T7e;
_T7e:
	__asm        mov    eax, iterator.node;
	__asm        add    eax, 8;
	__asm        jmp    __RETURN;
// LINE 503:
_T89:
	__asm        jmp    _T40;
// LINE 504:
_T8e:
	return 0x0;
// LINE 505:
__RETURN:
}

// FUNCTION: COPTER_D 0x00485ebe
void Directory::SetNewDirectoryEntryFilter(/*packed*/ class basic_string<char>& sNewDirectoryEntryFilter, int32_t bRereadEntries) {
// LINE 512:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        cmp    eax, sNewDirectoryEntryFilter;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, sNewDirectoryEntryFilter;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T1ce;
_T1c4:
	this-><Directory+0x14:4> = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 513:
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T440;
// LINE 514:
	__asm        mov    eax, SZ_DEFAULT_FILTER;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1f5;
_T1f5:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T240;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T231;
_T231:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T240;
_T240:
	__asm        jmp    _T245;
_T245:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T276;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T3f7;

	__asm        jmp    _T264;
_T264:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T3f7;
_T276:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T351;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T2c9;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2c9;
_T2c9:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T32e;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T329;
_T329:
	__asm        jmp    _T337;
_T32e:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T337:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T346;
_T346:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T358;
_T351:
	__asm        mov    dword ptr [ebp-4], 0;
_T358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3e4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T3e4;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3c4;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T3c4:
	__asm        jmp    _T3c9;
_T3c9:
	__asm        jmp    _T3ce;
_T3ce:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3df;
_T3df:
	__asm        jmp    _T3e4;
_T3e4:
	__asm        jmp    _T3e9;
_T3e9:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        jmp    _T42a;
_T3f7:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T42a;

	__asm        jmp    _T406;
_T406:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T42a;
_T42a:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T43b;
_T43b:
	__asm        jmp    _T440;
// LINE 515:
_T440:
	__asm        cmp    bRereadEntries, 0;
	__asm        je     _T452;
// LINE 516:
	__asm        mov    ecx, this;
	__asm        call   Directory::ReadDirectoryEntries;
// LINE 517:
_T452:
	return;
}

// FUNCTION: COPTER_D 0x0048631c
void Directory::MakeSurePathEndsWithSeparator() {
	/*bp-0x4*/   char chLastCharacter;
	/*bp-0x8*/   uint32_t nDirectoryPathLength;

// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    nDirectoryPathLength, eax;
	__asm        jmp    _T1d;
// LINE 528:
_T1d:
	__asm        cmp    nDirectoryPathLength, 0;
	__asm        ja     _T2c;
// LINE 529:
	return;
// LINE 530:
_T2c:
	__asm        jmp    _T31;
_T31:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, nDirectoryPathLength;
	__asm        dec    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        ja     _T76;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T67;
_T67:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T76;
_T76:
	__asm        jmp    _T7b;
_T7b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T22d;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T18c;

	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Te2;

	__asm        jmp    _Te2;
_Td6:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _Te2;
_Te2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T169;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T164;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T164;
_T164:
	__asm        jmp    _T172;
_T169:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
_T172:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T181;
_T181:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T193;
_T18c:
	__asm        mov    dword ptr [ebp-0xC], 0;
_T193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T21f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T21f;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1ff;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax], 0;
_T1ff:
	__asm        jmp    _T204;
_T204:
	__asm        jmp    _T209;
_T209:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T21a;
_T21a:
	__asm        jmp    _T21f;
_T21f:
	__asm        jmp    _T224;
_T224:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T22d:
	__asm        jmp    _T232;
_T232:
	__asm        jmp    _T237;
_T237:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, nDirectoryPathLength;
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    chLastCharacter, al;
// LINE 531:
	__asm        movsx  eax, chLastCharacter;
	__asm        cmp    eax, 0x5C;
	__asm        je     _T4ac;

	__asm        movsx  eax, chLastCharacter;
	__asm        cmp    eax, 0x2F;
	__asm        je     _T4ac;
// LINE 532:
	__asm        mov    byte ptr [ebp-0x6C], 0x5C;
	__asm        jmp    _T26c;
_T26c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     _T2ae;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T29f;
_T29f:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T2ae;
_T2ae:
	__asm        jmp    _T2b3;
_T2b3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2e6;

	__asm        jmp    _T2c8;
_T2c8:
	__asm        jmp    _T2cd;
_T2cd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    eax, [ecx+8];
	__asm        jbe    _T452;
_T2e6:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T3e8;

	__asm        jmp    _T302;
_T302:
	__asm        jmp    _T307;
_T307:
	__asm        jmp    _T30c;
_T30c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T331;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T33d;

	__asm        jmp    _T33d;
_T331:
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    _T33d;
_T33d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T3c5;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3c0;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3c0;
_T3c0:
	__asm        jmp    _T3ce;
_T3c5:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
_T3ce:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T3dd;
_T3dd:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T3ef;
_T3e8:
	__asm        mov    dword ptr [ebp-0x40], 0;
_T3ef:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T444;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T444;

	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T42e;
_T42e:
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T43f;
_T43f:
	__asm        jmp    _T444;
_T444:
	__asm        jmp    _T449;
_T449:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T452:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    _T461;
_T45e:
	__asm        inc    dword ptr [ebp-0x3C];
_T461:
	__asm        cmp    dword ptr [ebp-0x3C], 1;
	__asm        jae    _T49e;

	__asm        jmp    _T470;
_T470:
	__asm        jmp    _T475;
_T475:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        add    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    al, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx], al;
	__asm        jmp    _T499;
_T499:
	__asm        jmp    _T45e;
_T49e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    _T4ac;
// LINE 533:
_T4ac:
	return;
}

// FUNCTION: COPTER_D 0x004867d2
void Directory::SplitDirectoryPath(const /*packed*/ class basic_string<char>& sPath, /*packed*/ class basic_string<char>& sFirstPart, /*packed*/ class basic_string<char>& sLastPart) {
	/*bp-0x4*/   uint32_t nPosition;
	/*bp-0x8*/   uint32_t nDirectoryPathLength;

// LINE 548:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    nDirectoryPathLength, eax;
	__asm        jmp    _T1a;
// LINE 549:
_T1a:
	__asm        cmp    nDirectoryPathLength, 0;
	__asm        ja     _T29;
// LINE 550:
	return;
// LINE 553:
_T29:
	__asm        jmp    _T2e;
_T2e:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, SZ_DIR_SEPARATOR_1;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T4a;
_T4a:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, sPath;
	__asm        call   basic_string<char>::rfind_str;
	__asm        mov    nPosition, eax;
	__asm        jmp    _T6f;
// LINE 554:
_T6f:
	__asm        cmp    nPosition, 0;
	__asm        jb     _T34d;

	__asm        jmp    _T7e;
_T7e:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T34d;
// LINE 555:
	__asm        jmp    _T95;
_T95:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _Td7;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc8;
_Tc8:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Td7;
_Td7:
	__asm        jmp    _Tdc;
_Tdc:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T105;

	__asm        jmp    _Tf4;
_Tf4:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T10c;
_T105:
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x2C], eax;
_T10c:
	__asm        jmp    _T111;
_T111:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T198;

	__asm        jmp    _T128;
_T128:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T198;

	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T179;

	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T179;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T179;
_T179:
	__asm        jmp    _T17e;
_T17e:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFirstPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1de;
_T198:
	__asm        jmp    _T19d;
_T19d:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c2;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T1ce;

	__asm        jmp    _T1ce;
_T1c2:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T1ce;
_T1ce:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
_T1de:
	__asm        jmp    _T1e3;
// LINE 556:
_T1e3:
	__asm        jmp    _T1e8;
_T1e8:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T22d;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T21e;
_T21e:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T22d;
_T22d:
	__asm        jmp    _T232;
_T232:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jae    _T266;

	__asm        jmp    _T24f;
_T24f:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T26d;
_T266:
	__asm        mov    dword ptr [ebp-0x40], 0xFFFFFFFF;
_T26d:
	__asm        jmp    _T272;
_T272:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T2f9;

	__asm        jmp    _T289;
_T289:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T2f9;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2da;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T2da;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T2da;
_T2da:
	__asm        jmp    _T2df;
_T2df:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T343;
_T2f9:
	__asm        jmp    _T2fe;
_T2fe:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T323;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T32f;

	__asm        jmp    _T32f;
_T323:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T32f;
_T32f:
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        add    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, sLastPart;
	__asm        call   basic_string<char>::assign_str;
_T343:
	__asm        jmp    _T348;
// LINE 557:
_T348:
	return;
// LINE 561:
_T34d:
	__asm        jmp    _T352;
_T352:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, SZ_DIR_SEPARATOR_2;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T36e;
_T36e:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, sPath;
	__asm        call   basic_string<char>::rfind_str;
	__asm        mov    nPosition, eax;
	__asm        jmp    _T393;
// LINE 562:
_T393:
	__asm        cmp    nPosition, 0;
	__asm        jb     _T4e1;

	__asm        jmp    _T3a2;
_T3a2:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T4e1;
// LINE 563:
	__asm        jmp    _T3b9;
_T3b9:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T3fb;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3ec;
_T3ec:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3fb;
_T3fb:
	__asm        jmp    _T400;
_T400:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, nPosition;
	__asm        inc    ecx;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T429;

	__asm        jmp    _T418;
_T418:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T430;
_T429:
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x54], eax;
_T430:
	__asm        jmp    _T435;
_T435:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T47e;

	__asm        jmp    _T44c;
_T44c:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T47e;

	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sFirstPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sFirstPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T4c4;
_T47e:
	__asm        jmp    _T483;
_T483:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4a8;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T4b4;

	__asm        jmp    _T4b4;
_T4a8:
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    _T4b4;
_T4b4:
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
_T4c4:
	__asm        jmp    _T4c9;
// LINE 564:
_T4c9:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, nPosition;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, sPath;
	__asm        push   eax;
	__asm        mov    ecx, sLastPart;
	__asm        call   basic_string<char>::assign;
// LINE 565:
	return;
// LINE 570:
_T4e1:
	__asm        mov    eax, SZ_DIR_SEPARATOR_1;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T4ee;
_T4ee:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, sFirstPart;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T50c;
// LINE 571:
_T50c:
	__asm        mov    eax, sPath;
	__asm        cmp    sLastPart, eax;
	__asm        je     _T5ea;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T56d;

	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T56d;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T557;
_T557:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T568;
_T568:
	__asm        jmp    _T56d;
_T56d:
	__asm        jmp    _T572;
_T572:
	__asm        jmp    _T577;
_T577:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T5a1;

	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sLastPart;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T5ea;
_T5a1:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5e0;

	__asm        jmp    _T5bd;
_T5bd:
	__asm        mov    eax, sPath;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, sPath;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, sLastPart;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5ea;
_T5e0:
	sLastPart.reference = 0x0;
_T5ea:
	__asm        jmp    _T5ef;
// LINE 572:
_T5ef:
	return;
}



// Contribution: 1:00085dd0-00085e0b Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486dd0
// list<DirectoryEntry>::iterator::operator++



// Contribution: 1:00085e10-00085e41 Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486e10
// list<DirectoryEntry>::begin



// Contribution: 1:00085e50-000862ac Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00486e50
// list<DirectoryEntry>::insert



// Contribution: 1:000862b0-000863e5 Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004872b0
// list<DirectoryEntry>::erase



// Contribution: 1:000863f0-0008682a Module: 29, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004873f0
// list<basic_string<char>>::insert



// Contribution: 3:00002b8c-00002bb9 Module: 29, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599b8c
char * SZ_DEFAULT_FILTER = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599b90
char * SZ_CURRENT_DIR_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599b94
char * SZ_PARENT_DIR_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599b98
char * SZ_ROOT_DIR_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599b9c
char * SZ_DIR_SEPARATOR_1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599ba0
char * SZ_DIR_SEPARATOR_2 = { 0 /* todo */ };

