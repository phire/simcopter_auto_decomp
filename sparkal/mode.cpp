// Module: mode.obj
// Source: C:\Copter\source\sparkal\mode.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: struct tagMode[64];

// Type: long;

// Type: struct tagMode (forward reference);
// tagMode Class implementation not found

// Type: void * __ptr32;

// Type: void;

// Type: struct _DDSURFACEDESC (forward reference);
// _DDSURFACEDESC Class implementation not found



// Contribution: 1:0008a110-0008a2a6 Module: 27, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048b110
int32_t GetAllDisplayModes() {
// LINE 33:
	__asm        push   0x48B234;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x20];
// LINE 34:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048B13B;
// LINE 40:
}

// FUNCTION: COPTER_D 0x0048b140
int32_t IsModeAvailable(long lWidth, long lHeight, long lBPP) {
	int32_t i;

// LINE 62:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        mov    eax, i;
	__asm        cmp    gNumModes, eax;
	__asm        jle    _T78;
// LINE 65:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lWidth;
	__asm        cmp    gModeList[0].lWidth[eax*4], ecx;
	__asm        jne    _T73;

	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lHeight;
	__asm        cmp    gModeList[0].lHeight[eax*4], ecx;
	__asm        jne    _T73;

	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lBPP;
	__asm        cmp    gModeList[0].lBPP[eax*4], ecx;
	__asm        jne    _T73;
// LINE 66:
	__asm        mov    eax, 1;
	__asm        jmp    _T7f;
// LINE 67:
_T73:
	__asm        jmp    _T15;
// LINE 68:
_T78:
	__asm        xor    eax, eax;
	__asm        jmp    _T7f;
// LINE 69:
_T7f:
}

// FUNCTION: COPTER_D 0x0048b1c4
void GetCurrentScreenMode(struct tagMode* modeCurrent, int32_t __formal) {
	void * __ptr32 hdcScreen;
	int32_t nPlanes;
	int32_t nBitsPerPixel;

// LINE 84:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 85:
	__asm        push   0xE;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nPlanes, eax;
// LINE 86:
	__asm        push   0xC;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nBitsPerPixel, eax;
// LINE 87:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 89:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx], eax;
// LINE 90:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx+4], eax;
// LINE 91:
	__asm        mov    eax, nPlanes;
	__asm        imul   eax, nBitsPerPixel;
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx+8], eax;
// LINE 93:
	__asm        jmp    near ptr 0x0048B22F;
}

// FUNCTION: COPTER_D 0x0048b234
long EnumDisplayModesCallback(struct _DDSURFACEDESC* pddsd, void * __ptr32 Context) {
// LINE 104:
	__asm        cmp    gNumModes, 0x40;
	__asm        jl     _T1a;
// LINE 105:
	__asm        xor    eax, eax;
	__asm        jmp    _T6c;
// LINE 106:
_T1a:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lWidth[ecx*4], eax;
// LINE 107:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lHeight[ecx*4], eax;
// LINE 108:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lBPP[ecx*4], eax;
// LINE 109:
	__asm        inc    gNumModes;
// LINE 111:
	__asm        mov    eax, 1;
	__asm        jmp    _T6c;
// LINE 112:
_T6c:
}



// Contribution: 3:00002d80-00002d83 Module: 27, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599d80
int32_t gNumModes = { /* <data@0x00599d80> */ };



// Contribution: 3:0006d818-0006db17 Module: 27, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604818
struct tagMode gModeList[64];

