// Module: mode.obj
// Source: C:\Copter\source\sparkal\mode.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0008a110-0008a2a6 Module: 27, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048b110
int32_t GetAllDisplayModes() {
// LINE 31:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 33:
	__asm        push   0x48B234;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x20];
// LINE 34:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048B13B;
// LINE 40:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b140
int32_t IsModeAvailable(long lWidth, long lHeight, long lBPP) {
	int32_t i;

// LINE 56:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 62:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0048B158;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    ds:[0x599D80], eax;
	__asm        jle    near ptr 0x0048B1B8;
// LINE 65:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lWidth;
	__asm        cmp    [eax*4+0x604818], ecx;
	__asm        jne    near ptr 0x0048B1B3;
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lHeight;
	__asm        cmp    [eax*4+0x60481C], ecx;
	__asm        jne    near ptr 0x0048B1B3;
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lBPP;
	__asm        cmp    [eax*4+0x604820], ecx;
	__asm        jne    near ptr 0x0048B1B3;
// LINE 66:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048B1BF;
// LINE 67:
	__asm        jmp    near ptr 0x0048B155;
// LINE 68:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048B1BF;
// LINE 69:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b1c4
void GetCurrentScreenMode(struct tagMode* modeCurrent, int32_t __formal) {
	void * __ptr32 hdcScreen;
	int32_t nPlanes;
	int32_t nBitsPerPixel;

// LINE 78:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 84:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 85:
	__asm        push   0xE;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nPlanes, eax;
// LINE 86:
	__asm        push   0xC;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nBitsPerPixel, eax;
// LINE 87:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 89:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx], eax;
// LINE 90:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx+4], eax;
// LINE 91:
	__asm        mov    eax, nPlanes;
	__asm        imul   eax, nBitsPerPixel;
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx+8], eax;
// LINE 93:
	__asm        jmp    near ptr 0x0048B22F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048b234
long EnumDisplayModesCallback(struct _DDSURFACEDESC* pddsd, void * __ptr32 Context) {
// LINE 103:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 104:
	__asm        cmp    dword ptr ds:[0x599D80], 0x40;
	__asm        jl     near ptr 0x0048B24E;
// LINE 105:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048B2A0;
// LINE 106:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, ds:[0x599D80];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x604818], eax;
// LINE 107:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, ds:[0x599D80];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x60481C], eax;
// LINE 108:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    ecx, ds:[0x599D80];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x604820], eax;
// LINE 109:
	__asm        inc    dword ptr ds:[0x599D80];
// LINE 111:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0048B2A0;
// LINE 112:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}



// Contribution: 3:00002d80-00002d83 Module: 27, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599d80
// gNumModes


// Contribution: 3:0006d818-0006db17 Module: 27, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604818
// gModeList
