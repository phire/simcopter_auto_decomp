// Module: mode.obj
// Source: C:\Copter\source\sparkal\mode.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: /*packed*/ struct tagMode (forward reference);
struct tagMode{ // packed(0xc bytes) TI: 0x2407
	/*+0x0*/   long lWidth;
	/*+0x4*/   long lHeight;
	/*+0x8*/   long lBPP;
};

// Type: long;

// Type: void * __ptr32;

// Type: void;

// Type: /*packed*/ struct _DDSURFACEDESC (forward reference);
struct _DDSURFACEDESC{ // packed(0x6c bytes) TI: 0x1737
	/*+0x0*/   unsigned long dwSize;
	/*+0x4*/   unsigned long dwFlags;
	/*+0x8*/   unsigned long dwHeight;
	/*+0xc*/   unsigned long dwWidth;
	/*+0x10*/  long lPitch;
	/*+0x14*/  unsigned long dwBackBufferCount;
	/*+0x18*/  unsigned long dwZBufferBitDepth;
	/*+0x1c*/  unsigned long dwAlphaBitDepth;
	/*+0x20*/  unsigned long dwReserved;
	/*+0x24*/  void * __ptr32 lpSurface;
	/*+0x28*/  /*packed*/ struct _DDCOLORKEY ddckCKDestOverlay; // 0x8 bytes
	/*+0x30*/  /*packed*/ struct _DDCOLORKEY ddckCKDestBlt; // 0x8 bytes
	/*+0x38*/  /*packed*/ struct _DDCOLORKEY ddckCKSrcOverlay; // 0x8 bytes
	/*+0x40*/  /*packed*/ struct _DDCOLORKEY ddckCKSrcBlt; // 0x8 bytes
	/*+0x48*/  /*packed*/ struct _DDPIXELFORMAT ddpfPixelFormat; // 0x20 bytes
	/*+0x68*/  /*packed*/ struct _DDSCAPS ddsCaps;
};



// Contribution: 1:0008a110-0008a2a6 Module: 27, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048b110
int32_t GetAllDisplayModes() {
// LINE 33:
	__asm        push   0x48B234;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, lpDD;
	__asm        push   eax;
	__asm        mov    eax, lpDD;
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x20];
// LINE 34:
	return 0x1;
// LINE 40:
}

// FUNCTION: COPTER_D 0x0048b140
int32_t IsModeAvailable(long lWidth, long lHeight, long lBPP) {
	/*bp-0x4*/   int32_t i;

// LINE 62:
	i = 0x0;
	__asm        jmp    _T18;
_T15:
	i++;
_T18:
	__asm        mov    eax, i;
	__asm        cmp    gNumModes, eax;
	__asm        jle    _T78;
// LINE 65:
	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lWidth;
	__asm        cmp    gModeList[0].lWidth[eax*4], ecx;
	__asm        jne    _T73;

	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lHeight;
	__asm        cmp    gModeList[0].lHeight[eax*4], ecx;
	__asm        jne    _T73;

	__asm        mov    eax, i;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, lBPP;
	__asm        cmp    gModeList[0].lBPP[eax*4], ecx;
	__asm        jne    _T73;
// LINE 66:
	return 0x1;
// LINE 67:
_T73:
	__asm        jmp    _T15;
// LINE 68:
_T78:
	return 0x0;
// LINE 69:
}

// FUNCTION: COPTER_D 0x0048b1c4
void GetCurrentScreenMode(/*packed*/ struct tagMode *modeCurrent, int32_t __formal) {
	/*bp-0x4*/   int32_t nBitsPerPixel;
	/*bp-0x8*/   int32_t nPlanes;
	/*bp-0xc*/   void * __ptr32 hdcScreen;

// LINE 84:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdcScreen, eax;
// LINE 85:
	__asm        push   0xE;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nPlanes, eax;
// LINE 86:
	__asm        push   0xC;
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    nBitsPerPixel, eax;
// LINE 87:
	__asm        mov    eax, hdcScreen;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 89:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx], eax;
// LINE 90:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    ecx, modeCurrent;
	__asm        mov    [ecx+4], eax;
// LINE 91:
	modeCurrent->lBPP = (nPlanes * nBitsPerPixel);
// LINE 93:
	return;
}

// FUNCTION: COPTER_D 0x0048b234
long EnumDisplayModesCallback(/*packed*/ struct _DDSURFACEDESC *pddsd, void * __ptr32 Context) {
// LINE 104:
	__asm        cmp    gNumModes, 0x40;
	__asm        jl     _T1a;
// LINE 105:
	return 0x0;
// LINE 106:
_T1a:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lWidth[ecx*4], eax;
// LINE 107:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lHeight[ecx*4], eax;
// LINE 108:
	__asm        mov    eax, pddsd;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    ecx, gNumModes;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    gModeList[0].lBPP[ecx*4], eax;
// LINE 109:
	gNumModes++;
// LINE 111:
	return 0x1;
// LINE 112:
}



// Contribution: 3:00002d80-00002d83 Module: 27, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599d80
int32_t gNumModes = 0;



// Contribution: 3:0006d818-0006db17 Module: 27, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00604818
/*packed*/ struct tagMode gModeList[64];

