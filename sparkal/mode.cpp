// Module: mode.obj
// Source: C:\Copter\source\sparkal\mode.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0008a110-0008a2a6 Module: 27, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x0048b110
GetAllDisplayModes {
// LINE 31:
	asm( 
"	      0048b110    push ebp"
"	      0048b111    mov ebp,esp"
"	      0048b113    push ebx"
"	      0048b114    push esi"
"	      0048b115    push edi"
);
// LINE 33:
	asm( 
"	      0048b116    push 48B234h"
"	      0048b11b    push 0"
"	      0048b11d    push 0"
"	      0048b11f    push 0"
"	      0048b121    mov eax,ds:[597264h]"
"	      0048b126    push eax"
"	      0048b127    mov eax,ds:[597264h]"
"	      0048b12c    mov eax,[eax]"
"	      0048b12e    call dword ptr [eax+20h]"
);
// LINE 34:
	asm( 
"	      0048b131    mov eax,1"
"	      0048b136    jmp near ptr 0048B13Bh"
);
// LINE 40:
	asm( 
"	      0048b13b    pop edi"
"	      0048b13c    pop esi"
"	      0048b13d    pop ebx"
"	      0048b13e    leave"
"	      0048b13f    ret"
);
}

// FUNCTION: SIMCOPTER 0x0048b140
IsModeAvailable {
// LINE 56:
	asm( 
"	      0048b140    push ebp"
"	      0048b141    mov ebp,esp"
"	      0048b143    sub esp,4"
"	      0048b146    push ebx"
"	      0048b147    push esi"
"	      0048b148    push edi"
);
// LINE 62:
	asm( 
"	      0048b149    mov dword ptr [ebp-4],0"
"	      0048b150    jmp near ptr 0048B158h"
"	      0048b155    inc dword ptr [ebp-4]"
"	      0048b158    mov eax,[ebp-4]"
"	      0048b15b    cmp ds:[599D80h],eax"
"	      0048b161    jle near ptr 0048B1B8h"
);
// LINE 65:
	asm( 
"	      0048b167    mov eax,[ebp-4]"
"	      0048b16a    lea eax,[eax+eax*2]"
"	      0048b16d    mov ecx,[ebp+8]"
"	      0048b170    cmp [eax*4+604818h],ecx"
"	      0048b177    jne near ptr 0048B1B3h"
"	      0048b17d    mov eax,[ebp-4]"
"	      0048b180    lea eax,[eax+eax*2]"
"	      0048b183    mov ecx,[ebp+0Ch]"
"	      0048b186    cmp [eax*4+60481Ch],ecx"
"	      0048b18d    jne near ptr 0048B1B3h"
"	      0048b193    mov eax,[ebp-4]"
"	      0048b196    lea eax,[eax+eax*2]"
"	      0048b199    mov ecx,[ebp+10h]"
"	      0048b19c    cmp [eax*4+604820h],ecx"
"	      0048b1a3    jne near ptr 0048B1B3h"
);
// LINE 66:
	asm( 
"	      0048b1a9    mov eax,1"
"	      0048b1ae    jmp near ptr 0048B1BFh"
);
// LINE 67:
	asm( 
"	      0048b1b3    jmp near ptr 0048B155h"
);
// LINE 68:
	asm( 
"	      0048b1b8    xor eax,eax"
"	      0048b1ba    jmp near ptr 0048B1BFh"
);
// LINE 69:
	asm( 
"	      0048b1bf    pop edi"
"	      0048b1c0    pop esi"
"	      0048b1c1    pop ebx"
"	      0048b1c2    leave"
"	      0048b1c3    ret"
);
}

// FUNCTION: SIMCOPTER 0x0048b1c4
GetCurrentScreenMode {
// LINE 78:
	asm( 
"	      0048b1c4    push ebp"
"	      0048b1c5    mov ebp,esp"
"	      0048b1c7    sub esp,0Ch"
"	      0048b1ca    push ebx"
"	      0048b1cb    push esi"
"	      0048b1cc    push edi"
);
// LINE 84:
	asm( 
"	      0048b1cd    push 0"
"	      0048b1cf    call dword ptr ds:[6C3850h]"
"	      0048b1d5    mov [ebp-0Ch],eax"
);
// LINE 85:
	asm( 
"	      0048b1d8    push 0Eh"
"	      0048b1da    mov eax,[ebp-0Ch]"
"	      0048b1dd    push eax"
"	      0048b1de    call dword ptr ds:[6C3590h]"
"	      0048b1e4    mov [ebp-8],eax"
);
// LINE 86:
	asm( 
"	      0048b1e7    push 0Ch"
"	      0048b1e9    mov eax,[ebp-0Ch]"
"	      0048b1ec    push eax"
"	      0048b1ed    call dword ptr ds:[6C3590h]"
"	      0048b1f3    mov [ebp-4],eax"
);
// LINE 87:
	asm( 
"	      0048b1f6    mov eax,[ebp-0Ch]"
"	      0048b1f9    push eax"
"	      0048b1fa    push 0"
"	      0048b1fc    call dword ptr ds:[6C384Ch]"
);
// LINE 89:
	asm( 
"	      0048b202    push 0"
"	      0048b204    call dword ptr ds:[6C3810h]"
"	      0048b20a    mov ecx,[ebp+8]"
"	      0048b20d    mov [ecx],eax"
);
// LINE 90:
	asm( 
"	      0048b20f    push 1"
"	      0048b211    call dword ptr ds:[6C3810h]"
"	      0048b217    mov ecx,[ebp+8]"
"	      0048b21a    mov [ecx+4],eax"
);
// LINE 91:
	asm( 
"	      0048b21d    mov eax,[ebp-8]"
"	      0048b220    imul eax,[ebp-4]"
"	      0048b224    mov ecx,[ebp+8]"
"	      0048b227    mov [ecx+8],eax"
);
// LINE 93:
	asm( 
"	      0048b22a    jmp near ptr 0048B22Fh"
"	      0048b22f    pop edi"
"	      0048b230    pop esi"
"	      0048b231    pop ebx"
"	      0048b232    leave"
"	      0048b233    ret"
);
}

// FUNCTION: SIMCOPTER 0x0048b234
EnumDisplayModesCallback {
// LINE 103:
	asm( 
"	      0048b234    push ebp"
"	      0048b235    mov ebp,esp"
"	      0048b237    push ebx"
"	      0048b238    push esi"
"	      0048b239    push edi"
);
// LINE 104:
	asm( 
"	      0048b23a    cmp dword ptr ds:[599D80h],40h"
"	      0048b241    jl near ptr 0048B24Eh"
);
// LINE 105:
	asm( 
"	      0048b247    xor eax,eax"
"	      0048b249    jmp near ptr 0048B2A0h"
);
// LINE 106:
	asm( 
"	      0048b24e    mov eax,[ebp+8]"
"	      0048b251    mov eax,[eax+0Ch]"
"	      0048b254    mov ecx,ds:[599D80h]"
"	      0048b25a    lea ecx,[ecx+ecx*2]"
"	      0048b25d    mov [ecx*4+604818h],eax"
);
// LINE 107:
	asm( 
"	      0048b264    mov eax,[ebp+8]"
"	      0048b267    mov eax,[eax+8]"
"	      0048b26a    mov ecx,ds:[599D80h]"
"	      0048b270    lea ecx,[ecx+ecx*2]"
"	      0048b273    mov [ecx*4+60481Ch],eax"
);
// LINE 108:
	asm( 
"	      0048b27a    mov eax,[ebp+8]"
"	      0048b27d    mov eax,[eax+54h]"
"	      0048b280    mov ecx,ds:[599D80h]"
"	      0048b286    lea ecx,[ecx+ecx*2]"
"	      0048b289    mov [ecx*4+604820h],eax"
);
// LINE 109:
	asm( 
"	      0048b290    inc dword ptr ds:[599D80h]"
);
// LINE 111:
	asm( 
"	      0048b296    mov eax,1"
"	      0048b29b    jmp near ptr 0048B2A0h"
);
// LINE 112:
	asm( 
"	      0048b2a0    pop edi"
"	      0048b2a1    pop esi"
"	      0048b2a2    pop ebx"
"	      0048b2a3    leave"
"	      0048b2a4    ret 8"
);
}



// Contribution: 3:00002d80-00002d83 Module: 27, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x00002d80
// gNumModes


// Contribution: 3:0006d818-0006db17 Module: 27, 8 byte alignment, uninitialized_data, read, write, 
