// Module: Mdate.obj
// Source: C:\Copter\source\sparkal\Mdate.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class MDate (forward reference);
class MDate{
		enum HowToPrint {
			Normal = 0,
			Terse = 1,
			Numbers = 2,
			EuropeanNumbers = 3,
			European = 4,
		};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	// vtable: 0
	intro char * PrintString(char *);
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	// vtable: 4
	intro class MDate Previous(char *);
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};

// Type: struct tm (forward reference);

// Type: long;

// Type: void;

// Type: uint32_t;

// Type: char *;

// Type: enum MDate::HowToPrint;

// Type: int32_t;

// Type: unsigned long;

// Type: class ostrstream;
class ostrstream : public virtual ios, public ostream, public virtual <indirect> ios
{
public:
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream();
	int32_t pcount();
	class strstreambuf* rdbuf();
	char * str();
};

// Type: class istream (forward reference);
class istream : public virtual ios
{
public:
	int32_t[0]* ios;
	void istream(class ios&);
	void istream(const class istream&);
	void istream();
	void istream(class streambuf*);
	virtual void ~istream();
	int32_t ipfx(int32_t);
	void isfx();
	class istream& operator>>(class streambuf*);
	class istream& operator>>(double&);
	class istream& operator>>(double&);
	class istream& operator>>(float&);
	class istream& operator>>(unsigned long&);
	class istream& operator>>(long&);
	class istream& operator>>(uint32_t&);
	class istream& operator>>(int32_t&);
	class istream& operator>>(unsigned short&);
	class istream& operator>>(short&);
	class istream& operator>>(char&);
	class istream& operator>>(unsigned char&);
	class istream& operator>>(char&);
	class istream& operator>>(char *);
	class istream& operator>>(unsigned char *);
	class istream& operator>>(char *);
	class istream& operator>>(class ios& (*)(class ios&));
	class istream& operator>>(class istream& (*)(class istream&));
	class istream& get(char *, int32_t, int32_t);
	class istream& get(class streambuf&, char);
	class istream& get(char&);
	class istream& get(unsigned char&);
	class istream& get(char&);
	class istream& get(char *, int32_t, char);
	class istream& get(unsigned char *, int32_t, char);
	class istream& get(char *, int32_t, char);
	int32_t get();
	class istream& getline(char *, int32_t, char);
	class istream& getline(unsigned char *, int32_t, char);
	class istream& getline(char *, int32_t, char);
	class istream& ignore(int32_t, int32_t);
	class istream& read(char *, int32_t);
	class istream& read(unsigned char *, int32_t);
	class istream& read(char *, int32_t);
	int32_t gcount();
	int32_t peek();
	class istream& putback(char);
	int32_t sync();
	class istream& seekg(long, enum ios::seek_dir);
	class istream& seekg(long);
	long tellg();
	void eatwhite();
protected:
	class istream& operator=(const class istream&);
	class istream& operator=(class streambuf*);
	int32_t do_ipfx(int32_t);
private:
	int32_t getint(char *);
	int32_t getdouble(char *, int32_t);
	int32_t _fGline;
	int32_t x_gcount;
};

// Type: char;

// Type: char[12];

// Type: class ostream (forward reference);
class ostream : public virtual ios
{
public:
	int32_t[0]* ios;
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(class ios& (*)(class ios&));
	class ostream& operator<<(class ostream& (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: char[80];



// Contribution: 1:000bb460-000bc660 Module: 2, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bc460
void MDate::MDate() {
	struct tm* now;
	long clk;

// LINE 75:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 76:
	__asm        push   0;
	__asm        call   0x0056EF00;
	__asm        add    esp, 4;
	__asm        mov    clk, eax;
// LINE 77:
	__asm        lea    eax, clk;
	__asm        push   eax;
	__asm        call   0x0056ECA0;
	__asm        add    esp, 4;
	__asm        mov    now, eax;
// LINE 78:
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x14];
	__asm        add    eax, 0x76C;
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 79:
	__asm        jmp    near ptr 0x004BC4C9;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc4d1
void MDate::MDate(uint32_t day, uint32_t year) {
// LINE 94:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 95:
	__asm        cmp    year, 0;
	__asm        je     near ptr 0x004BC51B;
// LINE 96:
	__asm        mov    eax, year;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, day;
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+4], ecx;
// LINE 97:
	__asm        jmp    near ptr 0x004BC529;
// LINE 98:
	__asm        mov    eax, day;
	__asm        add    eax, 0x24DB1A;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 99:
	__asm        jmp    near ptr 0x004BC52E;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004bc538
void MDate::MDate(uint32_t day, char * monthName, uint32_t year) {
// LINE 112:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 113:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        call   0x004BC7A2;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 114:
	__asm        jmp    near ptr 0x004BC57F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004bc589
void MDate::MDate(uint32_t day, uint32_t month, uint32_t year) {
// LINE 127:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 128:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, month;
	__asm        push   eax;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 129:
	__asm        jmp    near ptr 0x004BC5C7;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004bc5d1
enum MDate::HowToPrint MDate::SetPrintOption(enum MDate::HowToPrint h) {
	enum MDate::HowToPrint oldoption;

// LINE 136:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    oldoption, eax;
// LINE 138:
	__asm        mov    eax, h;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 139:
	__asm        mov    eax, oldoption;
	__asm        jmp    near ptr 0x004BC5F7;
// LINE 140:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004bc5fe
char * MDate::DayName(uint32_t weekDayNumber) {
// LINE 152:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 153:
	__asm        cmp    weekDayNumber, 1;
	__asm        jb     near ptr 0x004BC620;
	__asm        cmp    weekDayNumber, 7;
	__asm        ja     near ptr 0x004BC620;
	__asm        jmp    near ptr 0x004BC625;
	__asm        jmp    near ptr 0x004BC643;
	__asm        jmp    near ptr 0x004BC634;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BC643;
	__asm        mov    eax, weekDayNumber;
	__asm        mov    eax, [eax*4+0x59ACF4];
	__asm        jmp    near ptr 0x004BC645;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC64A;
// LINE 154:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc64f
uint32_t MDate::DayOfWeek(char * nameOfDay) {
// LINE 167:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 168:
	__asm        push   7;
	__asm        push   0x59AD18;
	__asm        mov    eax, nameOfDay;
	__asm        push   eax;
	__asm        call   0x004BC673;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    near ptr 0x004BC66E;
// LINE 169:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc673
int32_t FindMatch(char * str, char ** candidates, int32_t icand) {
	uint32_t len;

// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 56:
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    len, eax;
// LINE 58:
	__asm        mov    eax, icand;
	__asm        mov    [ebp-8], eax;
	__asm        dec    icand;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004BC6CA;
// LINE 59:
	__asm        mov    eax, len;
	__asm        push   eax;
	__asm        mov    eax, icand;
	__asm        mov    ecx, candidates;
	__asm        mov    eax, [ecx+eax*4];
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   0x0058E570;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004BC6C5;
// LINE 60:
	__asm        jmp    near ptr 0x004BC6CA;
// LINE 61:
	__asm        jmp    near ptr 0x004BC68B;
// LINE 62:
	__asm        mov    eax, icand;
	__asm        jmp    near ptr 0x004BC6D2;
// LINE 63:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc6d7
int32_t MDate::DayWithinMonth(uint32_t month, uint32_t day, uint32_t year) {
	uint32_t d;

// LINE 181:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 182:
	__asm        cmp    day, 0;
	__asm        jbe    near ptr 0x004BC717;
	__asm        cmp    month, 1;
	__asm        jb     near ptr 0x004BC708;
	__asm        cmp    month, 0xC;
	__asm        ja     near ptr 0x004BC708;
	__asm        jmp    near ptr 0x004BC71E;
	__asm        jmp    near ptr 0x004BC708;
	__asm        jmp    near ptr 0x004BC717;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x004BC71E;
// LINE 183:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC76A;
// LINE 184:
	__asm        mov    eax, month;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x59237F];
	__asm        mov    d, ecx;
// LINE 185:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        call   0x004BC89F;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004BC74D;
	__asm        cmp    month, 2;
	__asm        jne    near ptr 0x004BC74D;
// LINE 186:
	__asm        inc    d;
// LINE 187:
	__asm        mov    eax, day;
	__asm        cmp    d, eax;
	__asm        jb     near ptr 0x004BC763;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BC765;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC76A;
// LINE 188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc76f
uint32_t MDate::DaysInYear(uint32_t year) {
// LINE 200:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 201:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        call   0x004BC89F;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004BC793;
	__asm        mov    eax, 0x16E;
	__asm        jmp    near ptr 0x004BC798;
	__asm        mov    eax, 0x16D;
	__asm        jmp    near ptr 0x004BC79D;
// LINE 202:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc7a2
uint32_t MDate::IndexOfMonth(char * nameOfMonth) {
// LINE 215:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 216:
	__asm        push   0xC;
	__asm        push   0x59ACC8;
	__asm        mov    eax, nameOfMonth;
	__asm        push   eax;
	__asm        call   0x004BC673;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    near ptr 0x004BC7C1;
// LINE 217:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc7c6
unsigned long MDate::Jday(uint32_t m, uint32_t d, uint32_t y) {
	unsigned long ya;
	unsigned long c;

// LINE 233:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 235:
	__asm        cmp    y, 0x63;
	__asm        ja     near ptr 0x004BC7E0;
// LINE 236:
	__asm        add    y, 0x76C;
// LINE 237:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, d;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        call   0x004BC6D7;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004BC803;
// LINE 238:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC89A;
// LINE 240:
	__asm        cmp    m, 2;
	__asm        jbe    near ptr 0x004BC816;
// LINE 241:
	__asm        sub    m, 3;
// LINE 242:
	__asm        jmp    near ptr 0x004BC81D;
// LINE 243:
	__asm        add    m, 9;
// LINE 244:
	__asm        dec    y;
// LINE 247:
	__asm        mov    ecx, 0x64;
	__asm        mov    eax, y;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    c, eax;
// LINE 248:
	__asm        mov    eax, y;
	__asm        mov    ecx, c;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    ya, eax;
// LINE 249:
	__asm        mov    eax, m;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ebx, 5;
	__asm        lea    eax, [ecx+eax*8+2];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    ecx, ya;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, c;
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, d;
	__asm        lea    eax, [eax+ecx+0x1A431F];
	__asm        jmp    near ptr 0x004BC89A;
// LINE 250:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc89f
int32_t MDate::LeapYear(uint32_t year) {
// LINE 262:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 263:
	__asm        test   reinterpret_cast<uint8_t>(year), 3;
	__asm        jne    near ptr 0x004BC8C3;
	__asm        mov    ecx, 0x64;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x004BC8D7;
	__asm        mov    ecx, 0x190;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x004BC8E1;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BC8E3;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC8E8;
// LINE 264:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc8ed
char * MDate::MonthName(uint32_t monthNumber) {
// LINE 277:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 278:
	__asm        cmp    monthNumber, 1;
	__asm        jb     near ptr 0x004BC90F;
	__asm        cmp    monthNumber, 0xC;
	__asm        ja     near ptr 0x004BC90F;
	__asm        jmp    near ptr 0x004BC914;
	__asm        jmp    near ptr 0x004BC932;
	__asm        jmp    near ptr 0x004BC923;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004BC932;
	__asm        mov    eax, monthNumber;
	__asm        mov    eax, [eax*4+0x59AC94];
	__asm        jmp    near ptr 0x004BC934;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC939;
// LINE 279:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc93e
int32_t MDate::CompareTo(const class MDate& d) {
// LINE 292:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x004BC96B;
// LINE 294:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004BC993;
// LINE 295:
	__asm        jmp    near ptr 0x004BC993;
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    near ptr 0x004BC98C;
// LINE 296:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004BC993;
// LINE 297:
	__asm        jmp    near ptr 0x004BC993;
// LINE 298:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BC993;
// LINE 299:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004bc99a
uint32_t MDate::Day() {
// LINE 307:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+4];
	__asm        mov    ecx, this;
	__asm        call   0x004BCDB1;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        sub    ebx, eax;
	__asm        mov    eax, ebx;
	__asm        jmp    near ptr 0x004BC9CB;
// LINE 309:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc9d0
uint32_t MDate::DayOfMonth() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 320:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 322:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004BCAA0;
// LINE 323:
	__asm        mov    eax, d;
	__asm        jmp    near ptr 0x004BC9F8;
// LINE 324:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc9fd
uint32_t MDate::FirstDayOfMonth(uint32_t month) {
	uint32_t firstDay;

// LINE 336:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 337:
	__asm        cmp    month, 1;
	__asm        jb     near ptr 0x004BCA27;
	__asm        cmp    month, 0xC;
	__asm        ja     near ptr 0x004BCA27;
	__asm        jmp    near ptr 0x004BCA3D;
	__asm        jmp    near ptr 0x004BCA27;
	__asm        jmp    near ptr 0x004BCA36;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x004BCA3D;
// LINE 338:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BCA7D;
// LINE 339:
	__asm        mov    eax, month;
	__asm        mov    eax, [eax*4+0x59238C];
	__asm        mov    firstDay, eax;
// LINE 340:
	__asm        cmp    month, 2;
	__asm        jbe    near ptr 0x004BCA75;
	__asm        jmp    near ptr 0x004BCA59;
	__asm        mov    ecx, this;
	__asm        call   0x004BCDB1;
	__asm        push   eax;
	__asm        call   0x004BC89F;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004BCA75;
// LINE 341:
	__asm        inc    firstDay;
// LINE 342:
	__asm        mov    eax, firstDay;
	__asm        jmp    near ptr 0x004BCA7D;
// LINE 343:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004bca84
uint32_t MDate::Hash() {
// LINE 351:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x004BCA9B;
// LINE 353:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bcaa0
void MDate::Mdy(uint32_t& m, uint32_t& D, uint32_t& y) {
	unsigned long j;
	unsigned long d;

// LINE 368:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 0x1A431F;
	__asm        mov    j, eax;
// LINE 371:
	__asm        mov    eax, j;
	__asm        mov    ecx, 0x23AB1;
	__asm        lea    eax, [eax*4-1];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 372:
	__asm        mov    eax, j;
	__asm        shl    eax, 2;
	__asm        dec    eax;
	__asm        mov    ecx, y;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    j, eax;
// LINE 373:
	__asm        mov    eax, j;
	__asm        shr    eax, 2;
	__asm        mov    d, eax;
// LINE 374:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x5B5;
	__asm        lea    eax, [eax*4+3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    j, eax;
// LINE 375:
	__asm        mov    eax, d;
	__asm        shl    eax, 2;
	__asm        add    eax, 3;
	__asm        mov    ecx, j;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 376:
	__asm        mov    eax, d;
	__asm        add    eax, 4;
	__asm        shr    eax, 2;
	__asm        mov    d, eax;
// LINE 377:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x99;
	__asm        lea    eax, [eax+eax*4-3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, m;
	__asm        mov    [ecx], eax;
// LINE 378:
	__asm        mov    eax, d;
	__asm        lea    eax, [eax+eax*4];
	__asm        sub    eax, 3;
	__asm        mov    ecx, m;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 379:
	__asm        mov    eax, d;
	__asm        mov    ecx, 5;
	__asm        add    eax, 5;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, D;
	__asm        mov    [ecx], eax;
// LINE 380:
	__asm        mov    eax, y;
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, j;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 382:
	__asm        mov    eax, m;
	__asm        cmp    dword ptr [eax], 0xA;
	__asm        jae    near ptr 0x004BCBB6;
// LINE 383:
	__asm        mov    eax, m;
	__asm        add    dword ptr [eax], 3;
// LINE 384:
	__asm        jmp    near ptr 0x004BCBC1;
// LINE 385:
	__asm        mov    eax, m;
	__asm        sub    dword ptr [eax], 9;
// LINE 386:
	__asm        mov    eax, y;
	__asm        inc    dword ptr [eax];
// LINE 388:
	__asm        jmp    near ptr 0x004BCBC6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004bcbcd
class MDate MDate::MaxDate(const class MDate& dt) {
// LINE 396:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x004BCBF6;
	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004BCBFC;
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    near ptr 0x004BCC28;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCC30;
// LINE 398:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004bcc37
class MDate MDate::MinDate(const class MDate& dt) {
// LINE 406:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 407:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        ja     near ptr 0x004BCC60;
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004BCC66;
	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    near ptr 0x004BCC92;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCC9A;
// LINE 408:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004bcca1
uint32_t MDate::Month() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 419:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 421:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004BCAA0;
// LINE 422:
	__asm        mov    eax, m;
	__asm        jmp    near ptr 0x004BCCC9;
// LINE 423:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bccce
class MDate MDate::Previous(char * dayName) {
// LINE 435:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 436:
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        call   0x004BC64F;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004BCD02;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCCFB;
// LINE 437:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004bcd02
class MDate MDate::Previous(uint32_t desiredDayOfWeek) {
	unsigned long j;
	uint32_t thisDayOfWeek;

// LINE 448:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 451:
	__asm        dec    desiredDayOfWeek;
// LINE 452:
	__asm        mov    ecx, this;
	__asm        call   0x004BCD7C;
	__asm        dec    eax;
	__asm        mov    thisDayOfWeek, eax;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    j, eax;
// LINE 458:
	__asm        mov    eax, desiredDayOfWeek;
	__asm        cmp    thisDayOfWeek, eax;
	__asm        jae    near ptr 0x004BCD42;
// LINE 459:
	__asm        mov    eax, 7;
	__asm        sub    eax, desiredDayOfWeek;
	__asm        add    thisDayOfWeek, eax;
// LINE 460:
	__asm        jmp    near ptr 0x004BCD4C;
// LINE 461:
	__asm        xor    eax, eax;
	__asm        sub    eax, desiredDayOfWeek;
	__asm        neg    eax;
	__asm        sub    thisDayOfWeek, eax;
// LINE 462:
	__asm        xor    eax, eax;
	__asm        sub    eax, thisDayOfWeek;
	__asm        neg    eax;
	__asm        sub    j, eax;
// LINE 463:
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        mov    eax, j;
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004BCD6D;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCD75;
// LINE 464:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004bcd7c
uint32_t MDate::WeekDay() {
// LINE 472:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 7;
	__asm        inc    eax;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+6];
	__asm        mov    ecx, 7;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+1];
	__asm        jmp    near ptr 0x004BCDAC;
// LINE 474:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bcdb1
uint32_t MDate::Year() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 484:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 486:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004BCAA0;
// LINE 487:
	__asm        mov    eax, y;
	__asm        jmp    near ptr 0x004BCDD9;
// LINE 488:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bcdde
uint32_t MDate::YearLastTwoDigits() {
// LINE 498:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 499:
	__asm        mov    ecx, this;
	__asm        call   0x004BCDB1;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, edx;
	__asm        jmp    near ptr 0x004BCE02;
// LINE 500:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bce07
char * MDate::PrintString(char * szDate) {
	class ostrstream strtemp;

// LINE 510:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 511:
	__asm        push   1;
	__asm        push   2;
	__asm        push   4;
	__asm        mov    eax, szDate;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   0x0056C780;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   0x004BD39A;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x60], eax;
// LINE 512:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BCE49;
// LINE 513:
	__asm        mov    eax, szDate;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004BCE54;
	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   0x0056C8D0;
	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   0x0056B140;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    near ptr 0x004BCE6C;
// LINE 514:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004bce73
void MDate::ParseFrom(class istream& s) {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 577:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 579:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 581:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BCEA4;
	__asm        jmp    near ptr 0x004BCEA9;
	__asm        jmp    near ptr 0x004BD09B;
	__asm        jmp    near ptr 0x004BCEB8;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004BD09B;
// LINE 582:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD175;
	__asm        add    esp, 4;
// LINE 583:
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00571280;
// LINE 584:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD175;
	__asm        add    esp, 4;
// LINE 585:
	__asm        jmp    near ptr 0x004BCEE1;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     near ptr 0x004BCEFC;
// LINE 586:
	__asm        jmp    near ptr 0x004BD16E;
// LINE 587:
	__asm        jmp    near ptr 0x004BCF01;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     near ptr 0x004BCFB5;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x18], eax;
// LINE 588:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BCF46;
	__asm        jmp    near ptr 0x004BCF37;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571240;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BCF4B;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BCF76;
	__asm        jmp    near ptr 0x004BCF67;
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571260;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BCF7B;
	__asm        jmp    near ptr 0x004BCF80;
// LINE 589:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD27C;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   0x004BC7A2;
	__asm        add    esp, 4;
	__asm        mov    m, eax;
// LINE 590:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD175;
	__asm        add    esp, 4;
// LINE 591:
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00571280;
// LINE 593:
	__asm        jmp    near ptr 0x004BD083;
// LINE 594:
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00571280;
// LINE 595:
	__asm        jmp    near ptr 0x004BCFC6;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     near ptr 0x004BCFE1;
	__asm        jmp    near ptr 0x004BD16E;
// LINE 596:
	__asm        jmp    near ptr 0x004BCFE6;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     near ptr 0x004BD083;
// LINE 597:
	__asm        mov    eax, m;
	__asm        mov    d, eax;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x1C], eax;
// LINE 598:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BD031;
	__asm        jmp    near ptr 0x004BD022;
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571240;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD036;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BD061;
	__asm        jmp    near ptr 0x004BD052;
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571260;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD066;
	__asm        jmp    near ptr 0x004BD06B;
// LINE 599:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD27C;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   0x004BC7A2;
	__asm        add    esp, 4;
	__asm        mov    m, eax;
// LINE 602:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD175;
	__asm        add    esp, 4;
// LINE 603:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00571280;
// LINE 605:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD0B6;
	__asm        jmp    near ptr 0x004BD0BB;
	__asm        jmp    near ptr 0x004BD0E9;
	__asm        jmp    near ptr 0x004BD0CA;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004BD0E9;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, d;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        call   0x004BC7C6;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004BD0F3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 606:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004BD169;
// LINE 607:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BD12F;
	__asm        jmp    near ptr 0x004BD120;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571240;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD134;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    near ptr 0x004BD15F;
	__asm        jmp    near ptr 0x004BD150;
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   0x00571260;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD164;
	__asm        jmp    near ptr 0x004BD169;
// LINE 608:
	__asm        jmp    near ptr 0x004BD16E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004bd175
void SkipDelim(class istream& strm) {
	char c;

// LINE 525:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 527:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD19E;
	__asm        jmp    near ptr 0x004BD1B2;
	__asm        jmp    near ptr 0x004BD19E;
	__asm        jmp    near ptr 0x004BD1AD;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x004BD1B2;
// LINE 528:
	__asm        jmp    near ptr 0x004BD277;
// LINE 531:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, strm;
	__asm        call   0x00572160;
// LINE 532:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD1D9;
	__asm        jmp    near ptr 0x004BD1DE;
	__asm        jmp    near ptr 0x004BD237;
	__asm        jmp    near ptr 0x004BD1ED;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004BD237;
	__asm        cmp    dword ptr ds:[0x5C0BA4], 1;
	__asm        jle    near ptr 0x004BD214;
	__asm        push   0x107;
	__asm        movsx  eax, c;
	__asm        push   eax;
	__asm        call   0x005720A0;
	__asm        add    esp, 8;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004BD22D;
	__asm        movsx  eax, c;
	__asm        mov    ecx, ds:[0x5C0998];
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+eax*2];
	__asm        and    edx, 0x107;
	__asm        mov    [ebp-8], edx;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004BD1B2;
// LINE 534:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD252;
	__asm        jmp    near ptr 0x004BD257;
	__asm        jmp    near ptr 0x004BD272;
	__asm        jmp    near ptr 0x004BD266;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004BD272;
// LINE 535:
	__asm        mov    eax, reinterpret_cast<uint32_t>(c);
	__asm        push   eax;
	__asm        mov    ecx, strm;
	__asm        call   0x00571B20;
// LINE 536:
	__asm        jmp    near ptr 0x004BD277;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bd27c
char * ParseMonth(class istream& s) {
	char c;
	static const char[12] month = { /* <data@0x006069a8> */ };
	char * p;

// LINE 547:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 549:
	__asm        mov    p, 0x6069A8;
// LINE 551:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   0x004BD175;
	__asm        add    esp, 4;
// LINE 552:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00570410;
// LINE 553:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD2BF;
	__asm        jmp    near ptr 0x004BD2C4;
	__asm        jmp    near ptr 0x004BD34A;
	__asm        jmp    near ptr 0x004BD2D3;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004BD34A;
	__asm        cmp    dword ptr ds:[0x5C0BA4], 1;
	__asm        jle    near ptr 0x004BD2FA;
	__asm        push   0x103;
	__asm        movsx  eax, c;
	__asm        push   eax;
	__asm        call   0x005720A0;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004BD313;
	__asm        movsx  eax, c;
	__asm        mov    ecx, ds:[0x5C0998];
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+eax*2];
	__asm        and    edx, 0x103;
	__asm        mov    [ebp-0xC], edx;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004BD34A;
	__asm        mov    eax, 0x6069A8;
	__asm        add    eax, 0xA;
	__asm        cmp    eax, p;
	__asm        je     near ptr 0x004BD34A;
// LINE 554:
	__asm        mov    al, c;
	__asm        mov    ecx, p;
	__asm        mov    [ecx], al;
	__asm        inc    p;
// LINE 555:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00570410;
// LINE 556:
	__asm        jmp    near ptr 0x004BD2A4;
// LINE 557:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    near ptr 0x004BD365;
	__asm        jmp    near ptr 0x004BD36A;
	__asm        jmp    near ptr 0x004BD385;
	__asm        jmp    near ptr 0x004BD379;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004BD385;
// LINE 558:
	__asm        mov    eax, reinterpret_cast<uint32_t>(c);
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00571B20;
// LINE 559:
	__asm        mov    eax, p;
	__asm        mov    byte ptr [eax], 0;
// LINE 560:
	__asm        mov    eax, 0x6069A8;
	__asm        jmp    near ptr 0x004BD395;
// LINE 561:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bd39a
class ostream& operator<<(class ostream& s, const class MDate& d) {
	class ostrstream out;
	char[80] buf;

// LINE 617:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 623:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056C780;
// LINE 625:
	__asm        mov    eax, d;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x004BD5F3;
// LINE 630:
	__asm        jmp    near ptr 0x004BD3D1;
	__asm        mov    ecx, d;
	__asm        call   0x004BCDB1;
	__asm        push   eax;
	__asm        push   0x59AE98;
	__asm        mov    ecx, d;
	__asm        call   0x004BC9D0;
	__asm        push   eax;
	__asm        push   0x59AE94;
	__asm        mov    ecx, d;
	__asm        call   0x004BCCA1;
	__asm        push   eax;
	__asm        call   0x004BC8ED;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD440;
// LINE 631:
	__asm        jmp    near ptr 0x004BD621;
// LINE 636:
	__asm        jmp    near ptr 0x004BD44A;
	__asm        mov    ecx, d;
	__asm        call   0x004BCDB1;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    ecx, d;
	__asm        call   0x004BCCA1;
	__asm        push   eax;
	__asm        call   0x004BC8ED;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   0x004BC9D0;
	__asm        push   eax;
	__asm        push   0x59AE9C;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0x14;
// LINE 637:
	__asm        jmp    near ptr 0x004BD621;
// LINE 638:
	__asm        mov    ecx, d;
	__asm        call   0x004BCDB1;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB0;
	__asm        mov    ecx, d;
	__asm        call   0x004BC9D0;
	__asm        push   eax;
	__asm        push   0x59AEAC;
	__asm        mov    ecx, d;
	__asm        call   0x004BCCA1;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xB4], eax;
// LINE 641:
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD4FC;
// LINE 642:
	__asm        jmp    near ptr 0x004BD621;
// LINE 643:
	__asm        mov    ecx, d;
	__asm        call   0x004BCDB1;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB8;
	__asm        mov    ecx, d;
	__asm        call   0x004BCCA1;
	__asm        push   eax;
	__asm        push   0x59AEB4;
	__asm        mov    ecx, d;
	__asm        call   0x004BC9D0;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xB8], eax;
// LINE 646:
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD570;
// LINE 647:
	__asm        jmp    near ptr 0x004BD621;
// LINE 651:
	__asm        jmp    near ptr 0x004BD57A;
	__asm        mov    ecx, d;
	__asm        call   0x004BCDB1;
	__asm        push   eax;
	__asm        push   0x59AEC0;
	__asm        mov    ecx, d;
	__asm        call   0x004BCCA1;
	__asm        push   eax;
	__asm        call   0x004BC8ED;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59AEBC;
	__asm        mov    ecx, d;
	__asm        call   0x004BC9D0;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   0x0056F090;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x00569960;
	__asm        mov    ecx, eax;
	__asm        call   0x0056F090;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   0x004205D0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD5E9;
// LINE 652:
	__asm        jmp    near ptr 0x004BD621;
// LINE 653:
	__asm        jmp    near ptr 0x004BD621;
	__asm        cmp    dword ptr [ebp-0xC0], 4;
	__asm        ja     near ptr 0x004BD621;
	__asm        mov    eax, [ebp-0xC0];
	__asm        jmp    dword ptr [eax*4+0x4BD60D];
	__asm        int    3;
	__asm        ror    dword ptr [ebx], cl;
	__asm        inc    ebp;
	__asm        aam    0x4B;
	__asm        add    [ebp+0x1004BD4], cl;
	__asm        aad    0x4B;
	__asm        add    buf[37], dh;
	__asm        dec    ebx;
	__asm        (bad);
// LINE 658:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   0x00569960;
// LINE 659:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004BD63B;
	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   0x0056C8D0;
	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   0x0056B140;
	__asm        mov    eax, [ebp-0xAC];
	__asm        jmp    near ptr 0x004BD65C;
// LINE 660:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 2:00003380-000033bf Module: 2, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00592380
// DaysInMonth
// LOCAL: COPTER_D 0x00592390
// FirstDayOfEachMonth


// Contribution: 3:00003c98-00003ec1 Module: 2, 8 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x0059ac98
// MonthNames
// LOCAL: COPTER_D 0x0059acc8
// UCMonthNames
// LOCAL: COPTER_D 0x0059acf8
// WeekDayNames
// LOCAL: COPTER_D 0x0059ad18
// UCWeekDayNames


// Contribution: 3:0006f9a8-0006f9b3 Module: 2, 8 byte alignment, uninitialized_data, read, write, 
