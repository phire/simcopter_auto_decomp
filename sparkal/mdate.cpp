// Module: Mdate.obj
// Source: C:\Copter\source\sparkal\Mdate.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class MDate (forward reference);
class MDate{
		enum HowToPrint {
			Normal = 0,
			Terse = 1,
			Numbers = 2,
			EuropeanNumbers = 3,
			European = 4,
		};
protected:
	void MDate(unsigned long);
public:
	void MDate(const class MTime&);
	void MDate(class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	// vtable: 0
	intro char * PrintString(char *);
	int32_t Between(const class MDate&, const class MDate&);
	int32_t CompareTo(const class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	class MDate MaxDate(const class MDate&);
	class MDate MinDate(const class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	class MDate Previous(uint32_t);
	// vtable: 4
	intro class MDate Previous(char *);
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const class MDate&);
	int32_t operator<=(const class MDate&);
	int32_t operator>(const class MDate&);
	int32_t operator>=(const class MDate&);
	int32_t operator==(const class MDate&);
	int32_t operator!=(const class MDate&);
	unsigned long operator-(const class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	unsigned long Julnum;
	enum MDate::HowToPrint PrintOption;
};

// Type: struct tm (forward reference);

// Type: long;

// Type: void;

// Type: uint32_t;

// Type: char *;

// Type: enum MDate::HowToPrint;

// Type: int32_t;

// Type: unsigned long;

// Type: class ostrstream;
class ostrstream : public virtual ios, public ostream, public virtual <indirect> ios
{
public:
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream();
	int32_t pcount();
	class strstreambuf* rdbuf();
	char * str();
};

// Type: class istream (forward reference);
class istream : public virtual ios
{
public:
	int32_t[0]* ios;
	void istream(class ios&);
	void istream(const class istream&);
	void istream();
	void istream(class streambuf*);
	virtual void ~istream();
	int32_t ipfx(int32_t);
	void isfx();
	class istream& operator>>(class streambuf*);
	class istream& operator>>(double&);
	class istream& operator>>(double&);
	class istream& operator>>(float&);
	class istream& operator>>(unsigned long&);
	class istream& operator>>(long&);
	class istream& operator>>(uint32_t&);
	class istream& operator>>(int32_t&);
	class istream& operator>>(unsigned short&);
	class istream& operator>>(short&);
	class istream& operator>>(char&);
	class istream& operator>>(unsigned char&);
	class istream& operator>>(char&);
	class istream& operator>>(char *);
	class istream& operator>>(unsigned char *);
	class istream& operator>>(char *);
	class istream& operator>>(class ios& (*)(class ios&));
	class istream& operator>>(class istream& (*)(class istream&));
	class istream& get(char *, int32_t, int32_t);
	class istream& get(class streambuf&, char);
	class istream& get(char&);
	class istream& get(unsigned char&);
	class istream& get(char&);
	class istream& get(char *, int32_t, char);
	class istream& get(unsigned char *, int32_t, char);
	class istream& get(char *, int32_t, char);
	int32_t get();
	class istream& getline(char *, int32_t, char);
	class istream& getline(unsigned char *, int32_t, char);
	class istream& getline(char *, int32_t, char);
	class istream& ignore(int32_t, int32_t);
	class istream& read(char *, int32_t);
	class istream& read(unsigned char *, int32_t);
	class istream& read(char *, int32_t);
	int32_t gcount();
	int32_t peek();
	class istream& putback(char);
	int32_t sync();
	class istream& seekg(long, enum ios::seek_dir);
	class istream& seekg(long);
	long tellg();
	void eatwhite();
protected:
	class istream& operator=(const class istream&);
	class istream& operator=(class streambuf*);
	int32_t do_ipfx(int32_t);
private:
	int32_t getint(char *);
	int32_t getdouble(char *, int32_t);
	int32_t _fGline;
	int32_t x_gcount;
};

// Type: char;

// Type: char[12];

// Type: class ostream (forward reference);
class ostream : public virtual ios
{
public:
	int32_t[0]* ios;
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(class ios& (*)(class ios&));
	class ostream& operator<<(class ostream& (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};

// Type: char[80];

// Type: class ios;
class ios{
		enum io_state {
			goodbit = 0,
			eofbit = 1,
			failbit = 2,
			badbit = 4,
		};
		enum open_mode {
			in = 1,
			out = 2,
			ate = 4,
			app = 8,
			trunc = 16,
			nocreate = 32,
			noreplace = 64,
			binary = 128,
		};
		enum seek_dir {
			beg = 0,
			cur = 1,
			end = 2,
		};
		enum __unnamed {
			skipws = 1,
			left = 2,
			right = 4,
			internal = 8,
			dec = 16,
			oct = 32,
			hex = 64,
			showbase = 128,
			showpoint = 256,
			uppercase = 512,
			showpos = 1024,
			scientific = 2048,
			fixed = 4096,
			unitbuf = 8192,
			stdio = 16384,
		};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
protected:
	void ios(const class ios&);
	void ios();
public:
	void ios(class streambuf*);
	// vtable: 0
	intro void ~ios();
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	class ostream* tie();
	class ostream* tie(class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	class ios& operator=(const class ios&);
	void init(class streambuf*);
		enum __unnamed {
			skipping = 0,
			tied = 1,
		};
protected:
	class streambuf* bp;
	int32_t state;
	int32_t ispecial;
	int32_t ospecial;
	int32_t isfx_special;
	int32_t osfx_special;
	int32_t x_delbuf;
	class ostream* x_tie;
	long x_flags;
	int32_t x_precision;
	char x_fill;
	int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static struct _CRT_CRITICAL_SECTION x_lockc;
	int32_t LockFlg;
	struct _CRT_CRITICAL_SECTION x_lock;
};

// Type: class ostream;
class ostream : public virtual ios
{
public:
	int32_t[0]* ios;
	void ostream(class ios&);
	void ostream(const class ostream&);
	void ostream();
	void ostream(class streambuf*);
	virtual void ~ostream();
	class ostream& flush();
	int32_t opfx();
	void osfx();
	class ostream& operator<<(class streambuf*);
	class ostream& operator<<(void * __ptr32);
	class ostream& operator<<(double);
	class ostream& operator<<(double);
	class ostream& operator<<(float);
	class ostream& operator<<(unsigned long);
	class ostream& operator<<(long);
	class ostream& operator<<(uint32_t);
	class ostream& operator<<(int32_t);
	class ostream& operator<<(unsigned short);
	class ostream& operator<<(short);
	class ostream& operator<<(char);
	class ostream& operator<<(unsigned char);
	class ostream& operator<<(char);
	class ostream& operator<<(char *);
	class ostream& operator<<(unsigned char *);
	class ostream& operator<<(char *);
	class ostream& operator<<(class ios& (*)(class ios&));
	class ostream& operator<<(class ostream& (*)(class ostream&));
	class ostream& put(char);
	class ostream& put(unsigned char);
	class ostream& put(char);
	class ostream& write(char *, int32_t);
	class ostream& write(unsigned char *, int32_t);
	class ostream& write(char *, int32_t);
	class ostream& seekp(long, enum ios::seek_dir);
	class ostream& seekp(long);
	long tellp();
protected:
	class ostream& operator=(const class ostream&);
	class ostream& operator=(class streambuf*);
	int32_t do_opfx(int32_t);
	void do_osfx();
private:
	class ostream& writepad(char *, char *);
	int32_t x_floatused;
};



// Contribution: 1:000bb460-000bc660 Module: 2, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bc460
void MDate::MDate() {
	struct tm* now;
	long clk;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 76:
	__asm        push   0;
	__asm        call   time;
	__asm        add    esp, 4;
	__asm        mov    clk, eax;
// LINE 77:
	__asm        lea    eax, clk;
	__asm        push   eax;
	__asm        call   localtime;
	__asm        add    esp, 4;
	__asm        mov    now, eax;
// LINE 78:
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x14];
	__asm        add    eax, 0x76C;
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 79:
	__asm        jmp    near ptr 0x004BC4C9;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc4d1
void MDate::MDate(uint32_t day, uint32_t year) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 95:
	__asm        cmp    year, 0;
	__asm        je     _T4a;
// LINE 96:
	__asm        mov    eax, year;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, day;
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+4], ecx;
// LINE 97:
	__asm        jmp    _T58;
// LINE 98:
_T4a:
	__asm        mov    eax, day;
	__asm        add    eax, 0x24DB1A;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 99:
_T58:
	__asm        jmp    near ptr 0x004BC52E;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc538
void MDate::MDate(uint32_t day, char * monthName, uint32_t year) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 113:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        call   MDate::IndexOfMonth;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 114:
	__asm        jmp    near ptr 0x004BC57F;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc589
void MDate::MDate(uint32_t day, uint32_t month, uint32_t year) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F3E8;
// LINE 128:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, month;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 129:
	__asm        jmp    near ptr 0x004BC5C7;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc5d1
enum MDate::HowToPrint MDate::SetPrintOption(enum MDate::HowToPrint h) {
	enum MDate::HowToPrint oldoption;

// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    oldoption, eax;
// LINE 138:
	__asm        mov    eax, h;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 139:
	__asm        mov    eax, oldoption;
	__asm        jmp    near ptr 0x004BC5F7;
// LINE 140:
}

// FUNCTION: COPTER_D 0x004bc5fe
char * MDate::DayName(uint32_t weekDayNumber) {
// LINE 153:
	__asm        cmp    weekDayNumber, 1;
	__asm        jb     _T22;

	__asm        cmp    weekDayNumber, 7;
	__asm        ja     _T22;

	__asm        jmp    _T27;

_T22:
	__asm        jmp    _T45;

_T27:
	__asm        jmp    _T36;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;

_T36:
	__asm        mov    eax, weekDayNumber;
	__asm        mov    eax, [eax*4+0x59ACF4];
	__asm        jmp    _T47;

_T45:
	__asm        xor    eax, eax;
_T47:
	__asm        jmp    near ptr 0x004BC64A;
// LINE 154:
}

// FUNCTION: COPTER_D 0x004bc64f
uint32_t MDate::DayOfWeek(char * nameOfDay) {
// LINE 168:
	__asm        push   7;
	__asm        push   0x59AD18;
	__asm        mov    eax, nameOfDay;
	__asm        push   eax;
	__asm        call   FindMatch;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    near ptr 0x004BC66E;
// LINE 169:
}

// FUNCTION: COPTER_D 0x004bc673
int32_t FindMatch(char * str, char ** candidates, int32_t icand) {
	uint32_t len;

// LINE 56:
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    len, eax;
// LINE 58:
_T18:
	__asm        mov    eax, icand;
	__asm        mov    [ebp-8], eax;
	__asm        dec    icand;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T57;
// LINE 59:
	__asm        mov    eax, len;
	__asm        push   eax;
	__asm        mov    eax, icand;
	__asm        mov    ecx, candidates;
	__asm        mov    eax, [ecx+eax*4];
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   _strnicmp;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    _T52;
// LINE 60:
	__asm        jmp    _T57;
// LINE 61:
_T52:
	__asm        jmp    _T18;
// LINE 62:
_T57:
	__asm        mov    eax, icand;
	__asm        jmp    near ptr 0x004BC6D2;
// LINE 63:
}

// FUNCTION: COPTER_D 0x004bc6d7
int32_t MDate::DayWithinMonth(uint32_t month, uint32_t day, uint32_t year) {
	uint32_t d;

// LINE 182:
	__asm        cmp    day, 0;
	__asm        jbe    _T40;

	__asm        cmp    month, 1;
	__asm        jb     _T31;

	__asm        cmp    month, 0xC;
	__asm        ja     _T31;

	__asm        jmp    _T47;

	__asm        jmp    _T31;

_T31:
	__asm        jmp    _T40;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T47;
// LINE 183:
_T40:
	__asm        xor    eax, eax;
	__asm        jmp    _T93;
// LINE 184:
_T47:
	__asm        mov    eax, month;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x59237F];
	__asm        mov    d, ecx;
// LINE 185:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        call   MDate::LeapYear;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T76;

	__asm        cmp    month, 2;
	__asm        jne    _T76;
// LINE 186:
	__asm        inc    d;
// LINE 187:
_T76:
	__asm        mov    eax, day;
	__asm        cmp    d, eax;
	__asm        jb     _T8c;

	__asm        mov    eax, 1;
	__asm        jmp    _T8e;

_T8c:
	__asm        xor    eax, eax;
_T8e:
	__asm        jmp    _T93;
// LINE 188:
}

// FUNCTION: COPTER_D 0x004bc76f
uint32_t MDate::DaysInYear(uint32_t year) {
// LINE 201:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        call   MDate::LeapYear;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T24;

	__asm        mov    eax, 0x16E;
	__asm        jmp    _T29;

_T24:
	__asm        mov    eax, 0x16D;
_T29:
	__asm        jmp    near ptr 0x004BC79D;
// LINE 202:
}

// FUNCTION: COPTER_D 0x004bc7a2
uint32_t MDate::IndexOfMonth(char * nameOfMonth) {
// LINE 216:
	__asm        push   0xC;
	__asm        push   0x59ACC8;
	__asm        mov    eax, nameOfMonth;
	__asm        push   eax;
	__asm        call   FindMatch;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    near ptr 0x004BC7C1;
// LINE 217:
}

// FUNCTION: COPTER_D 0x004bc7c6
unsigned long MDate::Jday(uint32_t m, uint32_t d, uint32_t y) {
	unsigned long ya;
	unsigned long c;

// LINE 235:
	__asm        cmp    y, 0x63;
	__asm        ja     _T1a;
// LINE 236:
	__asm        add    y, 0x76C;
// LINE 237:
_T1a:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, d;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        call   MDate::DayWithinMonth;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    _T3d;
// LINE 238:
	__asm        xor    eax, eax;
	__asm        jmp    _Td4;
// LINE 240:
_T3d:
	__asm        cmp    m, 2;
	__asm        jbe    _T50;
// LINE 241:
	__asm        sub    m, 3;
// LINE 242:
	__asm        jmp    _T57;
// LINE 243:
_T50:
	__asm        add    m, 9;
// LINE 244:
	__asm        dec    y;
// LINE 247:
_T57:
	__asm        mov    ecx, 0x64;
	__asm        mov    eax, y;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    c, eax;
// LINE 248:
	__asm        mov    eax, y;
	__asm        mov    ecx, c;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    ya, eax;
// LINE 249:
	__asm        mov    eax, m;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ebx, 5;
	__asm        lea    eax, [ecx+eax*8+2];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    ecx, ya;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, c;
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, d;
	__asm        lea    eax, [eax+ecx+0x1A431F];
	__asm        jmp    _Td4;
// LINE 250:
}

// FUNCTION: COPTER_D 0x004bc89f
int32_t MDate::LeapYear(uint32_t year) {
// LINE 263:
	__asm        test   reinterpret_cast<uint8_t>(year), 3;
	__asm        jne    _T24;

	__asm        mov    ecx, 0x64;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    _T38;

_T24:
	__asm        mov    ecx, 0x190;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    _T42;

_T38:
	__asm        mov    eax, 1;
	__asm        jmp    _T44;

_T42:
	__asm        xor    eax, eax;
_T44:
	__asm        jmp    near ptr 0x004BC8E8;
// LINE 264:
}

// FUNCTION: COPTER_D 0x004bc8ed
char * MDate::MonthName(uint32_t monthNumber) {
// LINE 278:
	__asm        cmp    monthNumber, 1;
	__asm        jb     _T22;

	__asm        cmp    monthNumber, 0xC;
	__asm        ja     _T22;

	__asm        jmp    _T27;

_T22:
	__asm        jmp    _T45;

_T27:
	__asm        jmp    _T36;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;

_T36:
	__asm        mov    eax, monthNumber;
	__asm        mov    eax, [eax*4+0x59AC94];
	__asm        jmp    _T47;

_T45:
	__asm        xor    eax, eax;
_T47:
	__asm        jmp    near ptr 0x004BC939;
// LINE 279:
}

// FUNCTION: COPTER_D 0x004bc93e
int32_t MDate::CompareTo(const class MDate& d) {
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T2d;
// LINE 294:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    _T55;
// LINE 295:
	__asm        jmp    _T55;

_T2d:
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T4e;
// LINE 296:
	__asm        mov    eax, 1;
	__asm        jmp    _T55;
// LINE 297:
	__asm        jmp    _T55;
// LINE 298:
_T4e:
	__asm        xor    eax, eax;
	__asm        jmp    _T55;
// LINE 299:
}

// FUNCTION: COPTER_D 0x004bc99a
uint32_t MDate::Day() {
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+4];
	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        sub    ebx, eax;
	__asm        mov    eax, ebx;
	__asm        jmp    near ptr 0x004BC9CB;
// LINE 309:
}

// FUNCTION: COPTER_D 0x004bc9d0
uint32_t MDate::DayOfMonth() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 322:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Mdy;
// LINE 323:
	__asm        mov    eax, d;
	__asm        jmp    near ptr 0x004BC9F8;
// LINE 324:
}

// FUNCTION: COPTER_D 0x004bc9fd
uint32_t MDate::FirstDayOfMonth(uint32_t month) {
	uint32_t firstDay;

// LINE 337:
	__asm        cmp    month, 1;
	__asm        jb     _T2a;

	__asm        cmp    month, 0xC;
	__asm        ja     _T2a;

	__asm        jmp    _T40;

	__asm        jmp    _T2a;

_T2a:
	__asm        jmp    _T39;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T40;
// LINE 338:
_T39:
	__asm        xor    eax, eax;
	__asm        jmp    _T80;
// LINE 339:
_T40:
	__asm        mov    eax, month;
	__asm        mov    eax, [eax*4+0x59238C];
	__asm        mov    firstDay, eax;
// LINE 340:
	__asm        cmp    month, 2;
	__asm        jbe    _T78;

	__asm        jmp    near ptr 0x004BCA59;

	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        call   MDate::LeapYear;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T78;
// LINE 341:
	__asm        inc    firstDay;
// LINE 342:
_T78:
	__asm        mov    eax, firstDay;
	__asm        jmp    _T80;
// LINE 343:
}

// FUNCTION: COPTER_D 0x004bca84
uint32_t MDate::Hash() {
// LINE 352:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x004BCA9B;
// LINE 353:
}

// FUNCTION: COPTER_D 0x004bcaa0
void MDate::Mdy(uint32_t& m, uint32_t& D, uint32_t& y) {
	unsigned long j;
	unsigned long d;

// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 0x1A431F;
	__asm        mov    j, eax;
// LINE 371:
	__asm        mov    eax, j;
	__asm        mov    ecx, 0x23AB1;
	__asm        lea    eax, [eax*4-1];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 372:
	__asm        mov    eax, j;
	__asm        shl    eax, 2;
	__asm        dec    eax;
	__asm        mov    ecx, y;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    j, eax;
// LINE 373:
	__asm        mov    eax, j;
	__asm        shr    eax, 2;
	__asm        mov    d, eax;
// LINE 374:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x5B5;
	__asm        lea    eax, [eax*4+3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    j, eax;
// LINE 375:
	__asm        mov    eax, d;
	__asm        shl    eax, 2;
	__asm        add    eax, 3;
	__asm        mov    ecx, j;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 376:
	__asm        mov    eax, d;
	__asm        add    eax, 4;
	__asm        shr    eax, 2;
	__asm        mov    d, eax;
// LINE 377:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x99;
	__asm        lea    eax, [eax+eax*4-3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, m;
	__asm        mov    [ecx], eax;
// LINE 378:
	__asm        mov    eax, d;
	__asm        lea    eax, [eax+eax*4];
	__asm        sub    eax, 3;
	__asm        mov    ecx, m;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 379:
	__asm        mov    eax, d;
	__asm        mov    ecx, 5;
	__asm        add    eax, 5;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, D;
	__asm        mov    [ecx], eax;
// LINE 380:
	__asm        mov    eax, y;
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, j;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 382:
	__asm        mov    eax, m;
	__asm        cmp    dword ptr [eax], 0xA;
	__asm        jae    _T116;
// LINE 383:
	__asm        mov    eax, m;
	__asm        add    dword ptr [eax], 3;
// LINE 384:
	__asm        jmp    _T121;
// LINE 385:
_T116:
	__asm        mov    eax, m;
	__asm        sub    dword ptr [eax], 9;
// LINE 386:
	__asm        mov    eax, y;
	__asm        inc    dword ptr [eax];
// LINE 388:
_T121:
	__asm        jmp    near ptr 0x004BCBC6;
}

// FUNCTION: COPTER_D 0x004bcbcd
class MDate MDate::MaxDate(const class MDate& dt) {
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T29;

	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2f;

_T29:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    near ptr 0x004BCC28;

	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCC30;
// LINE 398:
}

// FUNCTION: COPTER_D 0x004bcc37
class MDate MDate::MinDate(const class MDate& dt) {
// LINE 407:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        ja     _T29;

	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2f;

_T29:
	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    near ptr 0x004BCC92;

	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCC9A;
// LINE 408:
}

// FUNCTION: COPTER_D 0x004bcca1
uint32_t MDate::Month() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 421:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Mdy;
// LINE 422:
	__asm        mov    eax, m;
	__asm        jmp    near ptr 0x004BCCC9;
// LINE 423:
}

// FUNCTION: COPTER_D 0x004bccce
class MDate MDate::Previous(char * dayName) {
// LINE 436:
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        call   MDate::DayOfWeek;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, __$ReturnUdt;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Previous;
	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCCFB;
// LINE 437:
}

// FUNCTION: COPTER_D 0x004bcd02
class MDate MDate::Previous(uint32_t desiredDayOfWeek) {
	unsigned long j;
	uint32_t thisDayOfWeek;

// LINE 451:
	__asm        dec    desiredDayOfWeek;
// LINE 452:
	__asm        mov    ecx, this;
	__asm        call   MDate::WeekDay;
	__asm        dec    eax;
	__asm        mov    thisDayOfWeek, eax;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    j, eax;
// LINE 458:
	__asm        mov    eax, desiredDayOfWeek;
	__asm        cmp    thisDayOfWeek, eax;
	__asm        jae    _T40;
// LINE 459:
	__asm        mov    eax, 7;
	__asm        sub    eax, desiredDayOfWeek;
	__asm        add    thisDayOfWeek, eax;
// LINE 460:
	__asm        jmp    _T4a;
// LINE 461:
_T40:
	__asm        xor    eax, eax;
	__asm        sub    eax, desiredDayOfWeek;
	__asm        neg    eax;
	__asm        sub    thisDayOfWeek, eax;
// LINE 462:
_T4a:
	__asm        xor    eax, eax;
	__asm        sub    eax, thisDayOfWeek;
	__asm        neg    eax;
	__asm        sub    j, eax;
// LINE 463:
	__asm        mov    eax, __$ReturnUdt;
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        mov    eax, j;
	__asm        mov    ecx, __$ReturnUdt;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004BCD6D;

	__asm        mov    eax, __$ReturnUdt;
	__asm        jmp    near ptr 0x004BCD75;
// LINE 464:
}

// FUNCTION: COPTER_D 0x004bcd7c
uint32_t MDate::WeekDay() {
// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 7;
	__asm        inc    eax;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+6];
	__asm        mov    ecx, 7;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+1];
	__asm        jmp    near ptr 0x004BCDAC;
// LINE 474:
}

// FUNCTION: COPTER_D 0x004bcdb1
uint32_t MDate::Year() {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 486:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Mdy;
// LINE 487:
	__asm        mov    eax, y;
	__asm        jmp    near ptr 0x004BCDD9;
// LINE 488:
}

// FUNCTION: COPTER_D 0x004bcdde
uint32_t MDate::YearLastTwoDigits() {
// LINE 499:
	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, edx;
	__asm        jmp    near ptr 0x004BCE02;
// LINE 500:
}

// FUNCTION: COPTER_D 0x004bce07
char * MDate::PrintString(char * szDate) {
	class ostrstream strtemp;

// LINE 511:
	__asm        push   1;
	__asm        push   2;
	__asm        push   4;
	__asm        mov    eax, szDate;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x60], eax;
// LINE 512:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BCE49;
// LINE 513:
	__asm        mov    eax, szDate;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004BCE54;

	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp.<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    near ptr 0x004BCE6C;
// LINE 514:
}

// FUNCTION: COPTER_D 0x004bce73
void MDate::ParseFrom(class istream& s) {
	uint32_t m;
	uint32_t y;
	uint32_t d;

// LINE 579:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 581:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T31;

	__asm        jmp    _T36;

_T31:
	__asm        jmp    _T228;

_T36:
	__asm        jmp    _T45;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T228;
// LINE 582:
_T45:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   SkipDelim;
	__asm        add    esp, 4;
// LINE 583:
	__asm        lea    eax, m;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::operator>>;
// LINE 584:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   SkipDelim;
	__asm        add    esp, 4;
// LINE 585:
	__asm        jmp    near ptr 0x004BCEE1;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     _T89;
// LINE 586:
	__asm        jmp    _T2fb;
// LINE 587:
_T89:
	__asm        jmp    near ptr 0x004BCF01;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     _T142;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x18], eax;
// LINE 588:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _Td3;

	__asm        jmp    near ptr 0x004BCF37;

	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_Td3:
	__asm        jmp    near ptr 0x004BCF4B;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T103;

	__asm        jmp    near ptr 0x004BCF67;

	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T103:
	__asm        jmp    near ptr 0x004BCF7B;

	__asm        jmp    near ptr 0x004BCF80;
// LINE 589:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   ParseMonth;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   MDate::IndexOfMonth;
	__asm        add    esp, 4;
	__asm        mov    m, eax;
// LINE 590:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   SkipDelim;
	__asm        add    esp, 4;
// LINE 591:
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::operator>>;
// LINE 593:
	__asm        jmp    _T210;
// LINE 594:
_T142:
	__asm        lea    eax, d;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::operator>>;
// LINE 595:
	__asm        jmp    near ptr 0x004BCFC6;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     _T16e;

	__asm        jmp    _T2fb;
// LINE 596:
_T16e:
	__asm        jmp    near ptr 0x004BCFE6;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     _T210;
// LINE 597:
	__asm        mov    eax, m;
	__asm        mov    d, eax;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x1C], eax;
// LINE 598:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T1be;

	__asm        jmp    near ptr 0x004BD022;

	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_T1be:
	__asm        jmp    near ptr 0x004BD036;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T1ee;

	__asm        jmp    near ptr 0x004BD052;

	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T1ee:
	__asm        jmp    near ptr 0x004BD066;

	__asm        jmp    near ptr 0x004BD06B;
// LINE 599:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   ParseMonth;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   MDate::IndexOfMonth;
	__asm        add    esp, 4;
	__asm        mov    m, eax;
// LINE 602:
_T210:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   SkipDelim;
	__asm        add    esp, 4;
// LINE 603:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::operator>>;
// LINE 605:
_T228:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T243;

	__asm        jmp    _T248;

_T243:
	__asm        jmp    _T276;

_T248:
	__asm        jmp    _T257;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T276;

_T257:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, d;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T280;

_T276:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 606:
_T280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T2f6;
// LINE 607:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T2bc;

	__asm        jmp    near ptr 0x004BD120;

	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_T2bc:
	__asm        jmp    near ptr 0x004BD134;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T2ec;

	__asm        jmp    near ptr 0x004BD150;

	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T2ec:
	__asm        jmp    near ptr 0x004BD164;

	__asm        jmp    _T2f6;
// LINE 608:
_T2f6:
	__asm        jmp    _T2fb;
}

// FUNCTION: COPTER_D 0x004bd175
void SkipDelim(class istream& strm) {
	char c;

// LINE 527:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T29;

	__asm        jmp    _T3d;

	__asm        jmp    _T29;

_T29:
	__asm        jmp    _T38;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T3d;
// LINE 528:
_T38:
	__asm        jmp    _T102;
// LINE 531:
_T3d:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, strm;
	__asm        call   istream::operator>>;
// LINE 532:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T64;

	__asm        jmp    _T69;

_T64:
	__asm        jmp    _Tc2;

_T69:
	__asm        jmp    _T78;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tc2;

_T78:
	__asm        cmp    dword ptr ds:[0x5C0BA4], 1;
	__asm        jle    _T9f;

	__asm        push   0x107;
	__asm        movsx  eax, c;
	__asm        push   eax;
	__asm        call   _isctype;
	__asm        add    esp, 8;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tb8;

_T9f:
	__asm        movsx  eax, c;
	__asm        mov    ecx, ds:[0x5C0998];
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+eax*2];
	__asm        and    edx, 0x107;
	__asm        mov    [ebp-8], edx;
_Tb8:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3d;
// LINE 534:
_Tc2:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _Tdd;

	__asm        jmp    _Te2;

_Tdd:
	__asm        jmp    _Tfd;

_Te2:
	__asm        jmp    _Tf1;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tfd;
// LINE 535:
_Tf1:
	__asm        mov    eax, reinterpret_cast<uint32_t>(c);
	__asm        push   eax;
	__asm        mov    ecx, strm;
	__asm        call   istream::putback;
// LINE 536:
_Tfd:
	__asm        jmp    _T102;
}

// FUNCTION: COPTER_D 0x004bd27c
char * ParseMonth(class istream& s) {
	char c;
	static const char month[12] = { /* <data@0x006069a8> */ };
	char * p;

// LINE 549:
	__asm        mov    p, 0x6069A8;
// LINE 551:
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   SkipDelim;
	__asm        add    esp, 4;
// LINE 552:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::get;
// LINE 553:
_T28:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T43;

	__asm        jmp    _T48;

_T43:
	__asm        jmp    _Tce;

_T48:
	__asm        jmp    _T57;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tce;

_T57:
	__asm        cmp    dword ptr ds:[0x5C0BA4], 1;
	__asm        jle    _T7e;

	__asm        push   0x103;
	__asm        movsx  eax, c;
	__asm        push   eax;
	__asm        call   _isctype;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T97;

_T7e:
	__asm        movsx  eax, c;
	__asm        mov    ecx, ds:[0x5C0998];
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+eax*2];
	__asm        and    edx, 0x103;
	__asm        mov    [ebp-0xC], edx;
_T97:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tce;

	__asm        mov    eax, 0x6069A8;
	__asm        add    eax, 0xA;
	__asm        cmp    eax, p;
	__asm        je     _Tce;
// LINE 554:
	__asm        mov    al, c;
	__asm        mov    ecx, p;
	__asm        mov    [ecx], al;
	__asm        inc    p;
// LINE 555:
	__asm        lea    eax, c;
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::get;
// LINE 556:
	__asm        jmp    _T28;
// LINE 557:
_Tce:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _Te9;

	__asm        jmp    _Tee;

_Te9:
	__asm        jmp    _T109;

_Tee:
	__asm        jmp    _Tfd;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T109;
// LINE 558:
_Tfd:
	__asm        mov    eax, reinterpret_cast<uint32_t>(c);
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   istream::putback;
// LINE 559:
_T109:
	__asm        mov    eax, p;
	__asm        mov    byte ptr [eax], 0;
// LINE 560:
	__asm        mov    eax, 0x6069A8;
	__asm        jmp    near ptr 0x004BD395;
// LINE 561:
}

// FUNCTION: COPTER_D 0x004bd39a
class ostream& operator<<(class ostream& s, const class MDate& d) {
	class ostrstream out;
	char buf[80];

// LINE 623:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostrstream::ostrstream;
// LINE 625:
	__asm        mov    eax, d;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    _T259;
// LINE 630:
	__asm        jmp    near ptr 0x004BD3D1;

	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        push   0x59AE98;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AE94;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD440;
// LINE 631:
	__asm        jmp    _T287;
// LINE 636:
	__asm        jmp    near ptr 0x004BD44A;

	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AE9C;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 637:
	__asm        jmp    _T287;
// LINE 638:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB0;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AEAC;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB4], eax;
// LINE 641:
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD4FC;
// LINE 642:
	__asm        jmp    _T287;
// LINE 643:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB8;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        push   0x59AEB4;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB8], eax;
// LINE 646:
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD570;
// LINE 647:
	__asm        jmp    _T287;
// LINE 651:
	__asm        jmp    near ptr 0x004BD57A;

	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        push   0x59AEC0;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59AEBC;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BD5E9;
// LINE 652:
	__asm        jmp    _T287;
// LINE 653:
	__asm        jmp    _T287;

_T259:
	__asm        cmp    dword ptr [ebp-0xC0], 4;
	__asm        ja     _T287;

	__asm        mov    eax, [ebp-0xC0];
	__asm        jmp    dword ptr [eax*4+0x4BD60D];
// Switch pointers
// LINE 658:
_T287:
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        mov    ecx, s;
	__asm        call   ostream::operator<<;
// LINE 659:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004BD63B;

	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, out.<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0xAC];
	__asm        jmp    near ptr 0x004BD65C;
// LINE 660:
}



// Contribution: 2:00003380-000033bf Module: 2, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00592380
// DaysInMonth
// LOCAL: COPTER_D 0x00592390
// FirstDayOfEachMonth


// Contribution: 3:00003c98-00003ec1 Module: 2, 8 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x0059ac98
// MonthNames
// LOCAL: COPTER_D 0x0059acc8
// UCMonthNames
// LOCAL: COPTER_D 0x0059acf8
// WeekDayNames
// LOCAL: COPTER_D 0x0059ad18
// UCWeekDayNames


// Contribution: 3:0006f9a8-0006f9b3 Module: 2, 8 byte alignment, uninitialized_data, read, write, 
