// Module: Mdate.obj
// Source: C:\Copter\source\sparkal\Mdate.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned char;

// Type: uint32_t;

// Type: char *;

// Type: /*packed*/ class MDate (forward reference);
// VTABLE: COPTER_D 0x0058f3e8
class MDate{ // packed(0xc bytes) TI: 0x284c
	enum HowToPrint {
		Normal = 0,
		Terse = 1,
		Numbers = 2,
		EuropeanNumbers = 3,
		European = 4,
	};
protected:
	void MDate(unsigned long);
public:
	void MDate(const /*unpacked*/ class MTime&);
	void MDate(/*unpacked*/ class istream&);
	void MDate(uint32_t, uint32_t, uint32_t);
	void MDate(uint32_t, char *, uint32_t);
	void MDate(uint32_t, uint32_t);
	void MDate();
	virtual char * PrintString(char *); // vtable+0x0
	int32_t Between(const /*packed*/ class MDate&, const /*packed*/ class MDate&);
	int32_t CompareTo(const /*packed*/ class MDate&);
	uint32_t Day();
	uint32_t DayOfMonth();
	uint32_t FirstDayOfMonth(uint32_t);
	uint32_t FirstDayOfMonth();
	uint32_t Hash();
	int32_t IsValid();
	int32_t Leap();
	/*packed*/ class MDate MaxDate(const /*packed*/ class MDate&);
	/*packed*/ class MDate MinDate(const /*packed*/ class MDate&);
	uint32_t Month();
	char * NameOfDay();
	char * NameOfMonth();
	/*packed*/ class MDate Previous(uint32_t);
	virtual /*packed*/ class MDate Previous(char *); // vtable+0x4
	uint32_t WeekDay();
	uint32_t Year();
	uint32_t YearLastTwoDigits();
	enum MDate::HowToPrint SetPrintOption(enum MDate::HowToPrint);
	int32_t operator<(const /*packed*/ class MDate&);
	int32_t operator<=(const /*packed*/ class MDate&);
	int32_t operator>(const /*packed*/ class MDate&);
	int32_t operator>=(const /*packed*/ class MDate&);
	int32_t operator==(const /*packed*/ class MDate&);
	int32_t operator!=(const /*packed*/ class MDate&);
	unsigned long operator-(const /*packed*/ class MDate&);
	void operator++();
	void operator--();
	void operator+=(int32_t);
	void operator-=(int32_t);
	// calltype: NearC
	static char * DayName(uint32_t);
	// calltype: NearC
	static uint32_t DayOfWeek(char *);
	// calltype: NearC
	static int32_t DayWithinMonth(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static uint32_t DaysInYear(uint32_t);
	// calltype: NearC
	static uint32_t IndexOfMonth(char *);
	// calltype: NearC
	static unsigned long Jday(uint32_t, uint32_t, uint32_t);
	// calltype: NearC
	static int32_t LeapYear(uint32_t);
	// calltype: NearC
	static char * MonthName(uint32_t);
protected:
	// calltype: NearC
	static int32_t AssertWeekDayNumber(uint32_t);
	// calltype: NearC
	static int32_t AssertIndexOfMonth(uint32_t);
	void ParseFrom(/*unpacked*/ class istream&);
	void Mdy(uint32_t&, uint32_t&, uint32_t&);
	/*+0x4*/   unsigned long Julnum;
	/*+0x8*/   enum MDate::HowToPrint PrintOption;
};

// Type: /*packed*/ struct tm (forward reference);
struct tm{ // packed(0x24 bytes) TI: 0x2033
	/*+0x0*/   int32_t tm_sec;
	/*+0x4*/   int32_t tm_min;
	/*+0x8*/   int32_t tm_hour;
	/*+0xc*/   int32_t tm_mday;
	/*+0x10*/  int32_t tm_mon;
	/*+0x14*/  int32_t tm_year;
	/*+0x18*/  int32_t tm_wday;
	/*+0x1c*/  int32_t tm_yday;
	/*+0x20*/  int32_t tm_isdst;
};

// Type: long;

// Type: void;

// Type: enum MDate::HowToPrint;
enum HowToPrint {
	Normal = 0,
	Terse = 1,
	Numbers = 2,
	EuropeanNumbers = 3,
	European = 4,
};

// Type: int32_t;

// Type: unsigned long;

// Type: /*unpacked*/ class ostrstream;
// VTABLE: COPTER_D 0x00593b34
class ostrstream : public ostream, public virtual <indirect> ios
{ // not packed(0x58 bytes) TI: 0x1fc2
public:
	<NoType> ios;
	void ostrstream(char *, int32_t, int32_t);
	void ostrstream();
	virtual void ~ostrstream() /* override */;
	int32_t pcount();
	/*unpacked*/ class strstreambuf* rdbuf();
	char * str();
};

// Type: /*unpacked*/ class istream (forward reference);
// istream Class implementation not found

// Type: char;

// Type: /*unpacked*/ class ostream (forward reference);
// ostream Class implementation not found

// Type: /*unpacked*/ class ios;
// VTABLE: COPTER_D 0x00593ad4
class ios{ // not packed(0x50 bytes) TI: 0x4126
	enum io_state {
		goodbit = 0,
		eofbit = 1,
		failbit = 2,
		badbit = 4,
	};
	enum open_mode {
		in = 1,
		out = 2,
		ate = 4,
		app = 8,
		trunc = 16,
		nocreate = 32,
		noreplace = 64,
		binary = 128,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
	enum /* __unnamed */ {
		skipws = 1,
		left = 2,
		right = 4,
		internal = 8,
		dec = 16,
		oct = 32,
		hex = 64,
		showbase = 128,
		showpoint = 256,
		uppercase = 512,
		showpos = 1024,
		scientific = 2048,
		fixed = 4096,
		unitbuf = 8192,
		stdio = 16384,
	};
public:
	static const long basefield;
	static const long adjustfield;
	static const long floatfield;
	void ios(const /*unpacked*/ class ios&);
	void ios();
	void ios(/*unpacked*/ class streambuf*);
	virtual void ~ios(); // vtable+0x0
	long flags(long);
	long flags();
	long setf(long);
	long setf(long, long);
	long unsetf(long);
	int32_t width(int32_t);
	int32_t width();
	/*unpacked*/ class ostream* tie();
	/*unpacked*/ class ostream* tie(/*unpacked*/ class ostream*);
	char fill(char);
	char fill();
	int32_t precision();
	int32_t precision(int32_t);
	int32_t rdstate();
	void clear(int32_t);
	void * __ptr32 operator void *();
	int32_t operator!();
	int32_t good();
	int32_t eof();
	int32_t fail();
	int32_t bad();
	/*unpacked*/ class streambuf* rdbuf();
	long& iword(int32_t);
	void * __ptr32& pword(int32_t);
	// calltype: NearC
	static long bitalloc();
	// calltype: NearC
	static int32_t xalloc();
	// calltype: NearC
	static void sync_with_stdio();
	// calltype: NearC
	void setlock();
	// calltype: NearC
	void clrlock();
	// calltype: NearC
	void lock();
	// calltype: NearC
	void unlock();
	// calltype: NearC
	void lockbuf();
	// calltype: NearC
	void unlockbuf();
protected:
	/*unpacked*/ class ios& operator=(const /*unpacked*/ class ios&);
	void init(/*unpacked*/ class streambuf*);
	enum /* __unnamed */ {
		skipping = 0,
		tied = 1,
	};
protected:
	/*+0x4*/   /*unpacked*/ class streambuf *bp;
	/*+0x8*/   int32_t state;
	/*+0xc*/   int32_t ispecial;
	/*+0x10*/  int32_t ospecial;
	/*+0x14*/  int32_t isfx_special;
	/*+0x18*/  int32_t osfx_special;
	/*+0x1c*/  int32_t x_delbuf;
	/*+0x20*/  /*unpacked*/ class ostream *x_tie;
	/*+0x24*/  long x_flags;
	/*+0x28*/  int32_t x_precision;
	/*+0x2c*/  char x_fill; // 0x1 bytes
	/*+0x30*/  int32_t x_width;
	static void (*stdioflush)();
	// calltype: NearC
	static void lockc();
	// calltype: NearC
	static void unlockc();
	/*unpacked*/ struct _CRT_CRITICAL_SECTION* lockptr();
public:
	void delbuf(int32_t);
	int32_t delbuf();
private:
	static long x_maxbit;
	static int32_t x_curindex;
	static int32_t sunk_with_stdio;
	static long x_statebuf[8];
	static int32_t fLockcInit;
	static /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lockc;
	/*+0x34*/  int32_t LockFlg;
	/*+0x38*/  /*unpacked*/ struct _CRT_CRITICAL_SECTION x_lock; // 0x18 bytes
};



// Contribution: 1:000bb460-000bc660 Module: 2, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bc460
void MDate::MDate() {
	/*bp-0x4*/   long clk;
	/*bp-0x8*/   /*packed*/ struct tm *now;


	this->PrintOption = 0x0;
	this-><vftable> = 0x58f3e8;
// LINE 76:
	clk = time(0x0);
// LINE 77:
	now = localtime(clk);
// LINE 78:
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x14];
	__asm        add    eax, 0x76C;
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, now;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 79:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc4d1
void MDate::MDate(uint32_t day, uint32_t year) {

	this->PrintOption = 0x0;
	this-><vftable> = 0x58f3e8;
// LINE 95:
	__asm        cmp    year, 0;
	__asm        je     _T4a;
// LINE 96:
	__asm        mov    eax, year;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, day;
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+4], ecx;
// LINE 97:
	__asm        jmp    _T58;
// LINE 98:
_T4a:
	this->Julnum = (day + 0x24db1a);
// LINE 99:
_T58:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc538
void MDate::MDate(uint32_t day, char * monthName, uint32_t year) {

	this->PrintOption = 0x0;
	this-><vftable> = 0x58f3e8;
// LINE 113:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        mov    eax, day;
	__asm        push   eax;
	__asm        mov    eax, monthName;
	__asm        push   eax;
	__asm        call   MDate::IndexOfMonth;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 114:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc589
void MDate::MDate(uint32_t day, uint32_t month, uint32_t year) {

	this->PrintOption = 0x0;
	this-><vftable> = 0x58f3e8;
// LINE 128:
	this->Julnum = MDate::Jday(month, day, year);
// LINE 129:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004bc5d1
enum MDate::HowToPrint MDate::SetPrintOption(enum MDate::HowToPrint h) {
	/*bp-0x4*/   enum MDate::HowToPrint oldoption;

// LINE 137:
	oldoption = this->PrintOption;
// LINE 138:
	this->PrintOption = h;
// LINE 139:
	return oldoption;
// LINE 140:
}

// FUNCTION: COPTER_D 0x004bc5fe
char * MDate::DayName(uint32_t weekDayNumber) {
// LINE 153:
	__asm        cmp    weekDayNumber, 1;
	__asm        jb     _T22;

	__asm        cmp    weekDayNumber, 7;
	__asm        ja     _T22;

	__asm        jmp    _T27;
_T22:
	__asm        jmp    _T45;
_T27:
	__asm        jmp    _T36;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
_T36:
	__asm        mov    eax, weekDayNumber;
	__asm        mov    eax, UCMonthNames[11][eax*4];
	__asm        jmp    _T47;
_T45:
	__asm        xor    eax, eax;
_T47:
	__asm        jmp    __RETURN;
// LINE 154:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc64f
uint32_t MDate::DayOfWeek(char * nameOfDay) {
// LINE 168:
	__asm        push   7;
	__asm        push   0x59AD18;
	__asm        mov    eax, nameOfDay;
	__asm        push   eax;
	__asm        call   FindMatch;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    __RETURN;
// LINE 169:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc673
static int32_t FindMatch(char * str, char * *candidates, int32_t icand) {
	/*bp-0x4*/   uint32_t len;

// LINE 56:
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    len, eax;
// LINE 58:
__WHILE_18:
	__asm        mov    eax, icand;
	__asm        mov    [ebp-8], eax;
	__asm        dec    icand;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T57;
// LINE 59:
	__asm        mov    eax, len;
	__asm        push   eax;
	__asm        mov    eax, icand;
	__asm        mov    ecx, candidates;
	__asm        mov    eax, [ecx+eax*4];
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   _strnicmp;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    _T52;
// LINE 60:
	__asm        jmp    _T57;
// LINE 61:
_T52:
	__asm        jmp    __WHILE_18;
// LINE 62:
_T57:
	return icand;
// LINE 63:
}

// FUNCTION: COPTER_D 0x004bc6d7
int32_t MDate::DayWithinMonth(uint32_t month, uint32_t day, uint32_t year) {
	/*bp-0x4*/   uint32_t d;

// LINE 182:
	__asm        cmp    day, 0;
	__asm        jbe    _T40;

	__asm        cmp    month, 1;
	__asm        jb     _T31;

	__asm        cmp    month, 0xC;
	__asm        ja     _T31;

	__asm        jmp    _T47;

	__asm        jmp    _T31;
_T31:
	__asm        jmp    _T40;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T47;
// LINE 183:
_T40:
	return 0x0;
// LINE 184:
_T47:
	__asm        mov    eax, month;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x59237F];
	__asm        mov    d, ecx;
// LINE 185:
	__asm        mov    eax, year;
	__asm        push   eax;
	__asm        call   MDate::LeapYear;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T76;

	__asm        cmp    month, 2;
	__asm        jne    _T76;
// LINE 186:
	d++;
// LINE 187:
_T76:
_T8c:
_T8e:
	return (d < day);
// LINE 188:
}

// FUNCTION: COPTER_D 0x004bc76f
uint32_t MDate::DaysInYear(uint32_t year) {
// LINE 201:
_T24:
_T29:
	return (MDate::LeapYear(year) == 0x0) ? 0x16e : 0x16d;
// LINE 202:
}

// FUNCTION: COPTER_D 0x004bc7a2
uint32_t MDate::IndexOfMonth(char * nameOfMonth) {
// LINE 216:
	__asm        push   0xC;
	__asm        push   0x59ACC8;
	__asm        mov    eax, nameOfMonth;
	__asm        push   eax;
	__asm        call   FindMatch;
	__asm        add    esp, 0xC;
	__asm        inc    eax;
	__asm        jmp    __RETURN;
// LINE 217:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc7c6
unsigned long MDate::Jday(uint32_t m, uint32_t d, uint32_t y) {
	/*bp-0x4*/   unsigned long c;
	/*bp-0x8*/   unsigned long ya;

// LINE 235:
	__asm        cmp    y, 0x63;
	__asm        ja     _T1a;
// LINE 236:
	y += 0x76c;
// LINE 237:
_T1a:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, d;
	__asm        push   eax;
	__asm        mov    eax, m;
	__asm        push   eax;
	__asm        call   MDate::DayWithinMonth;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    _T3d;
// LINE 238:
	return 0x0;
// LINE 240:
_T3d:
	__asm        cmp    m, 2;
	__asm        jbe    _T50;
// LINE 241:
	m -= 0x3;
// LINE 242:
	__asm        jmp    _T57;
// LINE 243:
_T50:
	m += 0x9;
// LINE 244:
	y--;
// LINE 247:
_T57:
	__asm        mov    ecx, 0x64;
	__asm        mov    eax, y;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    c, eax;
// LINE 248:
	__asm        mov    eax, y;
	__asm        mov    ecx, c;
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    ya, eax;
// LINE 249:
	__asm        mov    eax, m;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ebx, 5;
	__asm        lea    eax, [ecx+eax*8+2];
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    ecx, ya;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, c;
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shr    ecx, 2;
	__asm        add    eax, ecx;
	__asm        mov    ecx, d;
	__asm        lea    eax, [eax+ecx+0x1A431F];
	__asm        jmp    __RETURN;
// LINE 250:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc89f
int32_t MDate::LeapYear(uint32_t year) {
// LINE 263:
	__asm        test   reinterpret_cast<uint8_t>(year), 3;
	__asm        jne    _T24;

	__asm        mov    ecx, 0x64;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    _T38;
_T24:
	__asm        mov    ecx, 0x190;
	__asm        mov    eax, year;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        test   edx, edx;
	__asm        jne    _T42;
_T38:
	__asm        mov    eax, 1;
	__asm        jmp    _T44;
_T42:
	__asm        xor    eax, eax;
_T44:
	__asm        jmp    __RETURN;
// LINE 264:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc8ed
char * MDate::MonthName(uint32_t monthNumber) {
// LINE 278:
	__asm        cmp    monthNumber, 1;
	__asm        jb     _T22;

	__asm        cmp    monthNumber, 0xC;
	__asm        ja     _T22;

	__asm        jmp    _T27;
_T22:
	__asm        jmp    _T45;
_T27:
	__asm        jmp    _T36;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
_T36:
	__asm        mov    eax, monthNumber;
	__asm        mov    eax, [eax*4+0x59AC94];
	__asm        jmp    _T47;
_T45:
	__asm        xor    eax, eax;
_T47:
	__asm        jmp    __RETURN;
// LINE 279:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc93e
int32_t MDate::CompareTo(const /*packed*/ class MDate& d) {
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T2d;
// LINE 294:
	return 0xffffffff;
// LINE 295:
	__asm        jmp    __RETURN;
_T2d:
	__asm        mov    eax, this;
	__asm        mov    ecx, d;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T4e;
// LINE 296:
	return 0x1;
// LINE 297:
	__asm        jmp    __RETURN;
// LINE 298:
_T4e:
	return 0x0;
// LINE 299:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc99a
uint32_t MDate::Day() {
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+4];
	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        push   0x1F;
	__asm        push   0xC;
	__asm        call   MDate::Jday;
	__asm        add    esp, 0xC;
	__asm        sub    ebx, eax;
	__asm        mov    eax, ebx;
	__asm        jmp    __RETURN;
// LINE 309:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bc9d0
uint32_t MDate::DayOfMonth() {
	/*bp-0x4*/   uint32_t d;
	/*bp-0x8*/   uint32_t y;
	/*bp-0xc*/   uint32_t m;

// LINE 322:
	this->MDate::Mdy(m, d, y);
// LINE 323:
	return d;
// LINE 324:
}

// FUNCTION: COPTER_D 0x004bc9fd
uint32_t MDate::FirstDayOfMonth(uint32_t month) {
	/*bp-0x4*/   uint32_t firstDay;

// LINE 337:
	__asm        cmp    month, 1;
	__asm        jb     _T2a;

	__asm        cmp    month, 0xC;
	__asm        ja     _T2a;

	__asm        jmp    _T40;

	__asm        jmp    _T2a;
_T2a:
	__asm        jmp    _T39;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T40;
// LINE 338:
_T39:
	return 0x0;
// LINE 339:
_T40:
	__asm        mov    eax, month;
	__asm        mov    eax, [eax*4+0x59238C];
	__asm        mov    firstDay, eax;
// LINE 340:
	__asm        cmp    month, 2;
	__asm        jbe    _T78;

	__asm        jmp    _T5c;
_T5c:
	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        call   MDate::LeapYear;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T78;
// LINE 341:
	firstDay++;
// LINE 342:
_T78:
	return firstDay;
// LINE 343:
}

// FUNCTION: COPTER_D 0x004bca84
uint32_t MDate::Hash() {
// LINE 352:
	return this->Julnum;
// LINE 353:
}

// FUNCTION: COPTER_D 0x004bcaa0
void MDate::Mdy(uint32_t& m, uint32_t& D, uint32_t& y) {
	/*bp-0x4*/   unsigned long d;
	/*bp-0x8*/   unsigned long j;

// LINE 370:
	j = (this->Julnum - 0x1a431f);
// LINE 371:
	__asm        mov    eax, j;
	__asm        mov    ecx, 0x23AB1;
	__asm        lea    eax, [eax*4-1];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 372:
	__asm        mov    eax, j;
	__asm        shl    eax, 2;
	__asm        dec    eax;
	__asm        mov    ecx, y;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        shl    ecx, 7;
	__asm        sub    ecx, edx;
	__asm        shl    ecx, 2;
	__asm        sub    ecx, edx;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    j, eax;
// LINE 373:
	d = (j >> 0x2);
// LINE 374:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x5B5;
	__asm        lea    eax, [eax*4+3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    j, eax;
// LINE 375:
	__asm        mov    eax, d;
	__asm        shl    eax, 2;
	__asm        add    eax, 3;
	__asm        mov    ecx, j;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*4];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 376:
	d = ((d + 0x4) >> 0x2);
// LINE 377:
	__asm        mov    eax, d;
	__asm        mov    ecx, 0x99;
	__asm        lea    eax, [eax+eax*4-3];
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, m;
	__asm        mov    [ecx], eax;
// LINE 378:
	__asm        mov    eax, d;
	__asm        lea    eax, [eax+eax*4];
	__asm        sub    eax, 3;
	__asm        mov    ecx, m;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    ecx, [edx+ecx*8];
	__asm        sub    eax, ecx;
	__asm        mov    d, eax;
// LINE 379:
	__asm        mov    eax, d;
	__asm        mov    ecx, 5;
	__asm        add    eax, 5;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, D;
	__asm        mov    [ecx], eax;
// LINE 380:
	__asm        mov    eax, y;
	__asm        mov    eax, [eax];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, j;
	__asm        mov    ecx, y;
	__asm        mov    [ecx], eax;
// LINE 382:
	__asm        mov    eax, m;
	__asm        cmp    dword ptr [eax], 0xA;
	__asm        jae    _T116;
// LINE 383:
	m. += 0x3;
// LINE 384:
	__asm        jmp    _T121;
// LINE 385:
_T116:
	m. -= 0x9;
// LINE 386:
	y.++;
// LINE 388:
_T121:
	return;
}

// FUNCTION: COPTER_D 0x004bcbcd
/*packed*/ class MDate MDate::MaxDate(const /*packed*/ class MDate& dt) {
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T29;

	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2f;
_T29:
	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 398:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bcc37
/*packed*/ class MDate MDate::MinDate(const /*packed*/ class MDate& dt) {
// LINE 407:
	__asm        mov    eax, this;
	__asm        mov    ecx, dt;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        ja     _T29;

	__asm        mov    eax, this;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T2f;
_T29:
	__asm        mov    eax, dt;
	__asm        mov    [ebp-4], eax;
_T2f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 408:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bcca1
uint32_t MDate::Month() {
	/*bp-0x4*/   uint32_t d;
	/*bp-0x8*/   uint32_t y;
	/*bp-0xc*/   uint32_t m;

// LINE 421:
	this->MDate::Mdy(m, d, y);
// LINE 422:
	return m;
// LINE 423:
}

// FUNCTION: COPTER_D 0x004bccce
/*packed*/ class MDate MDate::Previous(char * dayName) {
// LINE 436:
	__asm        mov    eax, dayName;
	__asm        push   eax;
	__asm        call   MDate::DayOfWeek;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MDate::Previous;
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 437:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bcd02
/*packed*/ class MDate MDate::Previous(uint32_t desiredDayOfWeek) {
	/*bp-0x4*/   uint32_t thisDayOfWeek;
	/*bp-0x8*/   unsigned long j;

// LINE 451:
	desiredDayOfWeek--;
// LINE 452:
	__asm        mov    ecx, this;
	__asm        call   MDate::WeekDay;
	__asm        dec    eax;
	__asm        mov    thisDayOfWeek, eax;
// LINE 453:
	j = this->Julnum;
// LINE 458:
	__asm        mov    eax, desiredDayOfWeek;
	__asm        cmp    thisDayOfWeek, eax;
	__asm        jae    _T40;
// LINE 459:
	thisDayOfWeek += (0x7 - desiredDayOfWeek);
// LINE 460:
	__asm        jmp    _T4a;
// LINE 461:
_T40:
	thisDayOfWeek -= desiredDayOfWeek;
// LINE 462:
_T4a:
	j -= thisDayOfWeek;
// LINE 463:
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    dword ptr [eax], 0x58F3E8;
	__asm        mov    eax, j;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T6b;
_T6b:
	__asm        mov    eax, reinterpret_cast<uint32_t>(__$ReturnUdt);
	__asm        jmp    __RETURN;
// LINE 464:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bcd7c
uint32_t MDate::WeekDay() {
// LINE 473:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 7;
	__asm        inc    eax;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+6];
	__asm        mov    ecx, 7;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        lea    eax, [edx+1];
	__asm        jmp    __RETURN;
// LINE 474:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bcdb1
uint32_t MDate::Year() {
	/*bp-0x4*/   uint32_t d;
	/*bp-0x8*/   uint32_t y;
	/*bp-0xc*/   uint32_t m;

// LINE 486:
	this->MDate::Mdy(m, d, y);
// LINE 487:
	return y;
// LINE 488:
}

// FUNCTION: COPTER_D 0x004bcdde
uint32_t MDate::YearLastTwoDigits() {
// LINE 499:
	__asm        mov    ecx, this;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    eax, edx;
	__asm        jmp    __RETURN;
// LINE 500:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bce07
char * MDate::PrintString(char * szDate) {
	/*bp-0x58*/  /*unpacked*/ class ostrstream strtemp; // 0x58 bytes

// LINE 511:
	__asm        push   1;
	__asm        push   2;
	__asm        push   4;
	__asm        mov    eax, szDate;
	__asm        push   eax;
	__asm        lea    ecx, strtemp.ios;
	__asm        call   ostrstream::ostrstream;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    eax, strtemp.ios;
	__asm        push   eax;
	__asm        call   operator<<;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x60], eax;
// LINE 512:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T42;
// LINE 513:
_T42:
	__asm        mov    eax, szDate;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T4d;
_T4d:
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, strtemp<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    __RETURN;
// LINE 514:
__RETURN:
}

// FUNCTION: COPTER_D 0x004bce73
void MDate::ParseFrom(/*unpacked*/ class istream& s) {
	/*bp-0x4*/   uint32_t d;
	/*bp-0x8*/   uint32_t y;
	/*bp-0xc*/   uint32_t m;

// LINE 579:
	this->Julnum = 0x0;
// LINE 581:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T31;

	__asm        jmp    _T36;
_T31:
	__asm        jmp    _T228;
_T36:
	__asm        jmp    _T45;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T228;
// LINE 582:
_T45:
	SkipDelim(s);
// LINE 583:
	s->istream::operator>>(m);
// LINE 584:
	SkipDelim(s);
// LINE 585:
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     _T89;
// LINE 586:
	return;
// LINE 587:
_T89:
	__asm        jmp    _T8e;
_T8e:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     _T142;

	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x18], eax;
// LINE 588:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _Td3;

	__asm        jmp    _Tc4;
_Tc4:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_Td3:
	__asm        jmp    _Td8;
_Td8:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T103;

	__asm        jmp    _Tf4;
_Tf4:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T103:
	__asm        jmp    _T108;
_T108:
	__asm        jmp    _T10d;
// LINE 589:
_T10d:
	m = MDate::IndexOfMonth(ParseMonth(s));
// LINE 590:
	SkipDelim(s);
// LINE 591:
	s->istream::operator>>(d);
// LINE 593:
	__asm        jmp    _T210;
// LINE 594:
_T142:
	s->istream::operator>>(d);
// LINE 595:
	__asm        jmp    _T153;
_T153:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 1;
	__asm        je     _T16e;

	return;
// LINE 596:
_T16e:
	__asm        jmp    _T173;
_T173:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        test   byte ptr [eax+ecx+8], 6;
	__asm        je     _T210;
// LINE 597:
	__asm        mov    eax, m;
	__asm        mov    d, eax;
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x1C], eax;
// LINE 598:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T1be;

	__asm        jmp    _T1af;
_T1af:
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_T1be:
	__asm        jmp    _T1c3;
_T1c3:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T1ee;

	__asm        jmp    _T1df;
_T1df:
	__asm        mov    eax, [ebp-0x1C];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T1ee:
	__asm        jmp    _T1f3;
_T1f3:
	__asm        jmp    _T1f8;
// LINE 599:
_T1f8:
	m = MDate::IndexOfMonth(ParseMonth(s));
// LINE 602:
_T210:
	SkipDelim(s);
// LINE 603:
	s->istream::operator>>(y);
// LINE 605:
_T228:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T243;

	__asm        jmp    _T248;
_T243:
	__asm        jmp    _T276;
_T248:
	__asm        jmp    _T257;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T276;
_T257:
	this->Julnum = MDate::Jday(m, d, y);
	__asm        jmp    _T280;
_T276:
	this->Julnum = 0x0;
// LINE 606:
_T280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T2f6;
// LINE 607:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, s;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T2bc;

	__asm        jmp    _T2ad;
_T2ad:
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtlock;
	__asm        add    esp, 4;
_T2bc:
	__asm        jmp    _T2c1;
_T2c1:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+0x34], 0;
	__asm        jge    _T2ec;

	__asm        jmp    _T2dd;
_T2dd:
	__asm        mov    eax, [ebp-0x20];
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        call   _mtunlock;
	__asm        add    esp, 4;
_T2ec:
	__asm        jmp    _T2f1;
_T2f1:
	__asm        jmp    _T2f6;
// LINE 608:
_T2f6:
	return;
}

// FUNCTION: COPTER_D 0x004bd175
static void SkipDelim(/*unpacked*/ class istream& strm) {
	/*bp-0x4*/   char c;

// LINE 527:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T29;

	__asm        jmp    __DO_3d;

	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T38;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    __DO_3d;
// LINE 528:
_T38:
	return;
// LINE 531:
__DO_3d:
	strm->istream::operator>>(c);
// LINE 531:
__DO_3d:
	strm->istream::operator>>(c);
// LINE 532:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _T64;

	__asm        jmp    _T69;
_T64:
	__asm        jmp    _Tc2;
_T69:
	__asm        jmp    _T78;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tc2;
_T78:
	__asm        cmp    __mb_cur_max, 1;
	__asm        jle    _T9f;

	__asm        push   0x107;
	__asm        movsx  eax, c;
	__asm        push   eax;
	__asm        call   _isctype;
	__asm        add    esp, 8;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    __DO_WHILE_3d;
_T9f:
	__asm        movsx  eax, c;
	__asm        mov    ecx, _pctype;
	__asm        xor    edx, edx;
	__asm        mov    dx, [ecx+eax*2];
	__asm        and    edx, 0x107;
	__asm        mov    [ebp-8], edx;
__DO_WHILE_3d:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     __DO_3d;
// LINE 534:
_Tc2:
	__asm        mov    eax, strm;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, strm;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _Tdd;

	__asm        jmp    _Te2;
_Tdd:
	__asm        jmp    _Tfd;
_Te2:
	__asm        jmp    _Tf1;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tfd;
// LINE 535:
_Tf1:
	strm->istream::putback(reinterpret_cast<uint32_t>(c));
// LINE 536:
_Tfd:
	return;
}

// FUNCTION: COPTER_D 0x004bd27c
static char * ParseMonth(/*unpacked*/ class istream& s) {
	/*bp-0x4*/   char * p;
	// StaticLocal: 0x006069a8
	static char month[12];
	;
	/*bp-0x8*/   char c;

// LINE 549:
	p = 0x6069a8;
// LINE 551:
	SkipDelim(s);
// LINE 552:
	s->istream::get(c);
// LINE 553:
_LOOP_28:
	for (;;) {
		// LINE 553:
		_LOOP_28:
			__asm        mov    eax, s;
			__asm        mov    eax, [eax];
			__asm        mov    eax, [eax+4];
			__asm        mov    ecx, s;
			__asm        cmp    dword ptr [eax+ecx+8], 0;
			__asm        jne    _T43;

			__asm        jmp    _T48;
		_T43:
			__asm        jmp    _Tce;
		_T48:
			__asm        jmp    _T57;

			__asm        cmp    dword ptr [ebp-0x10], 0;
			__asm        je     _Tce;
		_T57:
			__asm        cmp    __mb_cur_max, 1;
			__asm        jle    _T7e;

			__asm        push   0x103;
			__asm        movsx  eax, c;
			__asm        push   eax;
			__asm        call   _isctype;
			__asm        add    esp, 8;
			__asm        mov    [ebp-0xC], eax;
			__asm        jmp    _T97;
		_T7e:
			__asm        movsx  eax, c;
			__asm        mov    ecx, _pctype;
			__asm        xor    edx, edx;
			__asm        mov    dx, [ecx+eax*2];
			__asm        and    edx, 0x103;
			__asm        mov    [ebp-0xC], edx;
		_T97:
			__asm        cmp    dword ptr [ebp-0xC], 0;
			__asm        je     _Tce;

			__asm        mov    eax, 0x6069A8;
			__asm        add    eax, 0xA;
			__asm        cmp    eax, p;
			__asm        je     _Tce;
		// LINE 554:
			__asm        mov    al, c;
			__asm        mov    ecx, p;
			__asm        mov    [ecx], al;
			__asm        inc    p;
		// LINE 555:
			s->istream::get(c);
	}
// LINE 557:
_Tce:
	__asm        mov    eax, s;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, s;
	__asm        cmp    dword ptr [eax+ecx+8], 0;
	__asm        jne    _Te9;

	__asm        jmp    _Tee;
_Te9:
	__asm        jmp    _T109;
_Tee:
	__asm        jmp    _Tfd;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T109;
// LINE 558:
_Tfd:
	s->istream::putback(reinterpret_cast<uint32_t>(c));
// LINE 559:
_T109:
	p[0] = 0x0;
// LINE 560:
	return 0x6069a8;
// LINE 561:
}

// FUNCTION: COPTER_D 0x004bd39a
/*unpacked*/ class ostream& operator<<(/*unpacked*/ class ostream& s, const /*packed*/ class MDate& d) {
	/*bp-0x50*/  char buf[80]; // 0x50 bytes
	/*bp-0xa8*/  /*unpacked*/ class ostrstream out; // 0x58 bytes

// LINE 623:
	__asm        push   1;
	__asm        push   2;
	__asm        push   0x50;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostrstream::ostrstream;
// LINE 625:
	__asm        mov    eax, d;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    _T259;
// LINE 630:
_T32:
	__asm        jmp    _T37;
_T37:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        push   0x59AE98;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AE94;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _Ta6;
// LINE 631:
_Ta6:
	__asm        jmp    _T287;
// LINE 636:
_Tab:
	__asm        jmp    _Tb0;
_Tb0:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AE9C;
	__asm        lea    eax, buf[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 637:
	__asm        jmp    _T287;
// LINE 638:
_Tf3:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB0;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        push   0x59AEAC;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB4], eax;
// LINE 641:
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T162;
// LINE 642:
_T162:
	__asm        jmp    _T287;
// LINE 643:
_T167:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        mov    ecx, 0x64;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        push   0x59AEB8;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        push   0x59AEB4;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xB8], eax;
// LINE 646:
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T1d6;
// LINE 647:
_T1d6:
	__asm        jmp    _T287;
// LINE 651:
_T1db:
	__asm        jmp    _T1e0;
_T1e0:
	__asm        mov    ecx, d;
	__asm        call   MDate::Year;
	__asm        push   eax;
	__asm        push   0x59AEC0;
	__asm        mov    ecx, d;
	__asm        call   MDate::Month;
	__asm        push   eax;
	__asm        call   MDate::MonthName;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x59AEBC;
	__asm        mov    ecx, d;
	__asm        call   MDate::DayOfMonth;
	__asm        push   eax;
	__asm        lea    ecx, out.ios;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    ecx, eax;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   ends;
	__asm        add    esp, 4;
	__asm        jmp    _T24f;
// LINE 652:
_T24f:
	__asm        jmp    _T287;
// LINE 653:
	__asm        jmp    _T287;
_T259:
	__asm        cmp    dword ptr [ebp-0xC0], 4;
	__asm        ja     _T287;

	__asm        mov    eax, [ebp-0xC0];
	__asm        jmp    _Switch_273[0][eax*4];
// Switch pointers:
//   _T32
//   _Tab
//   _Tf3
//   _T167
//   _T1db
// LINE 658:
_T287:
	s->ostream::operator<<(buf[0]);
// LINE 659:
	__asm        mov    eax, s;
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T2a1;
_T2a1:
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ostrstream::~ostrstream;
	__asm        lea    ecx, out<ostrstream+0x08>;
	__asm        call   ios::~ios;
	__asm        mov    eax, [ebp-0xAC];
	__asm        jmp    __RETURN;
// LINE 660:
__RETURN:
}



// Contribution: 2:00003380-000033bf Module: 2, 8 byte alignment, initialized_data, read, 
// GLOBAL: COPTER_D 0x00592380
static const unsigned char DaysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

// GLOBAL: COPTER_D 0x00592390
static const uint32_t FirstDayOfEachMonth[12] = {1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335};



// Contribution: 3:00003c98-00003ec1 Module: 2, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059ac98
static char * MonthNames[12] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059acc8
static char * UCMonthNames[12] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059acf8
static char * WeekDayNames[7] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059ad18
static char * UCWeekDayNames[7] = { 0 /* todo */ };



// Contribution: 3:0006f9a8-0006f9b3 Module: 2, 8 byte alignment, uninitialized_data, read, write, 
