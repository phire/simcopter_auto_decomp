// Module: sparkapp.obj
// Source: C:\Copter\source\sparkal\sparkapp.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: /*packed*/ class CSparkalApp (forward reference);
// VTABLE: COPTER_D 0x0058f428
class CSparkalApp{ // packed(0x14 bytes) TI: 0x23fb
public:
	void CSparkalApp();
	virtual void ~CSparkalApp(); // vtable+0x0
	virtual /*unpacked*/ class CSparkalWindow* NewWindow(unsigned long, unsigned long, unsigned long, const /*packed*/ struct SparkalColor*, char *); // vtable+0x4
	/*unpacked*/ class IFlatImage* NewImage(long, long, const const /*packed*/ struct SparkalColor*);
	/*unpacked*/ class IFlatImage* NewImage(char *);
	virtual unsigned long PrepareGame(); // vtable+0x8
	virtual unsigned long TickGame(); // vtable+0xc
	virtual unsigned long FinishGame(); // vtable+0x10
	unsigned long TestFlag(unsigned long);
	unsigned long SetFlag(unsigned long);
	unsigned long ResetFlag(unsigned long);
	int32_t GetRuntimePlatform();
	int32_t DecideRuntimePlatform();
	enum PlatfromType {
		Unknown = 0,
		Win32s = 1,
		WinNT31 = 2,
		WinNT35 = 3,
		Win95 = 4,
		MacSystem7 = 5,
	};
protected:
	/*+0x4*/   /*packed*/ struct SparkalColor *mpColorTable;
	/*+0x8*/   int32_t _mRuntimePlatform;
	/*+0xc*/   unsigned long _mFlags;
	/*+0x10*/  int32_t mbUseDirectDraw;
};

// Type: unsigned char;

// Type: unsigned long;

// Type: int32_t;

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: char *;

// Type: /*packed*/ class CSparkalWindow (forward reference);
// VTABLE: COPTER_D 0x00590ef8
class CSparkalWindow{ // packed(0x68 bytes) TI: 0x20d9
public:
	void CSparkalWindow(unsigned long, unsigned long, unsigned long, const /*packed*/ struct SparkalColor*, char *);
	void CSparkalWindow();
	virtual void ~CSparkalWindow(); // vtable+0x0
	void * __ptr32 GetPlatformData();
	long GetWidth();
	long GetHeight();
	virtual unsigned long GetClientSize(long *, long *); // vtable+0x4
	/*unpacked*/ class ScreenBuffer* GetBackBuffer();
	/*unpacked*/ class ScreenBuffer* SetBackBuffer(/*unpacked*/ class ScreenBuffer*);
	/*unpacked*/ class ICommander* GetCommander();
	/*unpacked*/ class ICommander* SetCommander(/*unpacked*/ class ICommander*);
	virtual unsigned long Draw(); // vtable+0x8
	virtual unsigned long SetCursor(unsigned long); // vtable+0xc
	virtual unsigned long SetCursorFromIndex(int32_t); // vtable+0x10
	virtual unsigned long LoadGameCursors(); // vtable+0x14
	virtual void FreeGameCursors(); // vtable+0x18
	unsigned long DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *);
	virtual unsigned long Sleep(); // vtable+0x1c
	virtual unsigned long WakeUp(); // vtable+0x20
	unsigned long ScreenScroll(long, long, long, long, long, long);
	unsigned long RectSlideUp(long, long, long, long);
	virtual unsigned long SwapBuffer(long, long, long, long); // vtable+0x24
	virtual unsigned long SwapBuffer(); // vtable+0x28
	virtual void UpdatePalette(long, long, /*packed*/ struct SparkalColor*); // vtable+0x2c
protected:
	/*+0x4*/   long mHeight;
	/*+0x8*/   long mWidth;
	/*+0xc*/   unsigned long mStyle;
	/*+0x10*/  /*unpacked*/ class ICommander *mpCommander;
	/*+0x14*/  /*unpacked*/ class ScreenBuffer *mpBackBuffer;
	/*+0x18*/  void * __ptr32 mWindow;
	// calltype: NearStd
	virtual long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long); // vtable+0x30
	/*+0x1c*/  void * __ptr32 mPalette;
	/*+0x20*/  void * __ptr32 mhCurrentCursor;
	/*+0x24*/  void * __ptr32 mhCustomCursor;
	/*+0x28*/  void * __ptr32 mCursors[16]; // 0x40 bytes
};

// Type: /*unpacked*/ class IFlatImage (forward reference);
// IFlatImage Class implementation not found

// Type: /*packed*/ class CBackBuffer (forward reference);
// VTABLE: COPTER_D 0x00590808
class CBackBuffer : public IBackBuffer
{ // packed(0x134 bytes) TI: 0x2843
public:
	void CBackBuffer(long, long, const /*packed*/ struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	virtual void InitializeMemberVariables(); // vtable+0x28
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock() /* override */;
	virtual unsigned long Unlock() /* override */;
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, /*packed*/ struct SparkalColor*);
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long) /* override */;
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x2c
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long) /* override */;
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalRect&, const /*packed*/ struct SparkalRect&); // vtable+0x30
	virtual unsigned long Duplicate(/*packed*/ class CBackBuffer*, int32_t); // vtable+0x34
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, const /*packed*/ struct SparkalPoint&, const /*packed*/ struct SparkalRect&); // vtable+0x38
	virtual unsigned long ComposeNoClip(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0x3c
	void UpdatePalette(long, long, const /*packed*/ struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long) /* override */;
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(/*packed*/ class MFont*);
	void SetFontColor(/*packed*/ struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(/*packed*/ struct SparkalColor&);
	void SetColorIndex(int32_t);
	virtual unsigned long DrawLine(long, long, long, long, long); // vtable+0x40
	virtual unsigned long FillRect(long, const /*packed*/ struct SparkalRect*); // vtable+0x44
	virtual unsigned long DrawBufferText(char *, long, unsigned long, const /*packed*/ class MRect&, /*packed*/ class MFont*); // vtable+0x48
	virtual unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, /*packed*/ class MFont*); // vtable+0x4c
	virtual unsigned long DrawLineUnclipped(long, long, long, long, long); // vtable+0x50
	virtual unsigned long DrawLineClipped(long, long, long, long, long); // vtable+0x54
	virtual unsigned long DrawRectangleOutline(const /*packed*/ struct SparkalRect&, long); // vtable+0x58
	virtual unsigned long DrawRectangleOutlineUnclipped(const /*packed*/ struct SparkalRect&, long); // vtable+0x5c
	long IsLost();
	long Restore();
	/*+0x18*/  char * szFilePath;
	/*+0x1c*/  /*packed*/ struct tagRECT rectDirectDrawBuffer; // 0x10 bytes
protected:
	/*+0x2c*/  int32_t bSurfacePrimary;
	/*+0x30*/  int32_t bSurfaceTransparent;
	/*+0x34*/  /*packed*/ class MFont *mFont;
	/*+0x38*/  /*packed*/ struct SparkalColor colorFontCurrent;
	/*+0x3c*/  /*packed*/ struct SparkalColor colorCurrent;
	/*+0x40*/  int32_t nColorIndexFontCurrent;
	/*+0x44*/  int32_t nColorIndexCurrent;
	/*+0x48*/  int32_t nColorIndexTransparent;
	/*+0x4c*/  /*packed*/ struct IDirectDrawSurface *mpFrontSurface;
	/*+0x50*/  /*packed*/ struct IDirectDrawSurface *mpBackSurface;
	/*+0x54*/  /*packed*/ struct IDirectDrawPalette *mpPalette;
	/*+0x58*/  /*packed*/ struct _DDSURFACEDESC mDDdesc; // 0x6c bytes
	/*+0xc4*/  /*packed*/ struct _DDBLTFX mDDBltFx; // 0x64 bytes
	/*+0x128*/ void * __ptr32 hPen;
	/*+0x12c*/ int32_t nPenThickness;
	/*+0x130*/ /*packed*/ struct SparkalColor colorPenCurrent;
	virtual /*packed*/ struct IDirectDrawSurface* GetDDSurface(); // vtable+0x60
};

// Type: long;

// Type: uint32_t;

// Type: /*packed*/ class IBackBuffer;
// VTABLE: COPTER_D 0x005907e0
class IBackBuffer : public IFlatImage
{ // packed(0x18 bytes) TI: 0x283f
public:
	virtual unsigned long Swap(/*packed*/ class CSparkalWindow*, long, long); // vtable+0x1c
	virtual unsigned long SwapRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long); // vtable+0x20
	virtual unsigned long StretchRect(/*packed*/ class CSparkalWindow*, long, long, long, long, long, long, long, long); // vtable+0x24
};

// Type: /*packed*/ class IFlatImage;
// VTABLE: COPTER_D 0x00591050
class IFlatImage{ // packed(0x18 bytes) TI: 0x13a1
public:
	void IFlatImage();
	virtual unsigned long Lock(); // vtable+0x0
	virtual unsigned long Unlock(); // vtable+0x4
	unsigned long GetLockCount();
	virtual void SetTransparentColor(int32_t, long); // vtable+0x8
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0xc
	unsigned long Compose(/*packed*/ class IFlatImage*, long, long);
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long); // vtable+0x10
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, /*packed*/ struct SparkalRect, /*packed*/ struct SparkalRect); // vtable+0x14
	virtual unsigned long FillRect(long, /*packed*/ struct SparkalRect*); // vtable+0x18
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	/*+0x4*/   unsigned long mLockCount;
	/*+0x8*/   long mWidth;
	/*+0xc*/   long mHeight;
	/*+0x10*/  void * __ptr32 mpBits;
	/*+0x14*/  long mStride;
};



// Contribution: 1:00025fc0-00026507 Module: 69, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00426fc0
void CSparkalApp::CSparkalApp() {

	this-><vftable> = 0x58f428;
// LINE 15:
	__asm        mov    ecx, this;
	__asm        call   CSparkalApp::DecideRuntimePlatform;
// LINE 19:
	__asm        jmp    _T31;
// LINE 20:
	this->mbUseDirectDraw = 0x0;
// LINE 21:
	__asm        jmp    _T3b;
// LINE 22:
_T31:
	this->mbUseDirectDraw = 0x1;
// LINE 26:
_T3b:
	this->_mFlags = 0x1;
// LINE 34:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        mov    eax, 0x59A9D4;
	__asm        test   eax, eax;
	__asm        jne    _T74;

	__asm        push   0x194;
	__asm        push   0x597444;
	__asm        push   0x597424;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T79;
_T74:
	__asm        jmp    _T79;
_T79:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        jmp    _Ta7;

	__asm        push   0x169;
	__asm        push   0x597444;
	__asm        push   0x597430;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tac;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        push   2;
	__asm        push   0x40;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _Tc9;

	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
_Tc9:
	__asm        jmp    _Tce;
_Tce:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ted;

	__asm        mov    eax, [ebp-8];
	__asm        mov    word ptr [eax], 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    CRLECompressedImage::RLEGraphicsPool, eax;
	__asm        jmp    _Tf3;
_Ted:
	__asm        mov    word ptr [ebp-4], 0xFFFF;
_Tf3:
	__asm        jmp    _Tf8;
// LINE 35:
_Tf8:
	__asm        cmp    CRLECompressedImage::RLEGraphicsPool, 0;
	__asm        jne    _T114;
// LINE 37:
	__asm        push   1;
	__asm        push   0x80000001;
	__asm        call   GUIReportError;
	__asm        add    esp, 8;
// LINE 38:
_T114:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004270e1
void CSparkalApp::~CSparkalApp() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F428;
	__asm        mov    eax, CRLECompressedImage::RLEGraphicsPool;
	__asm        mov    [ebp-0xC], eax;
// LINE 51:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T43;

	__asm        push   0x1B5;
	__asm        push   0x597444;
	__asm        push   0x597468;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48;
_T43:
	__asm        jmp    _T48;
_T48:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T74;

	__asm        push   0x173;
	__asm        push   0x597444;
	__asm        push   0x597474;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T79;
_T74:
	__asm        jmp    _T79;
_T79:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3658];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3658];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tae;

	__asm        mov    word ptr [ebp-4], 0xFFFF;
_Tae:
	__asm        jmp    _Tb3;
_Tb3:
	__asm        jmp    _Tb8;
// LINE 52:
_Tb8:
	return;
}

// FUNCTION: COPTER_D 0x004271a3
int32_t CSparkalApp::DecideRuntimePlatform() {
	/*bp-0x4*/   unsigned char WinMajor;
	/*bp-0x8*/   unsigned long Version;
	/*bp-0xc*/   unsigned char WinMinor;

// LINE 62:
	this->_mRuntimePlatform = 0x0;
// LINE 65:
	__asm        call   dword ptr ds:[0x6C3644];
	__asm        mov    Version, eax;
// LINE 66:
	WinMajor = reinterpret_cast<uint8_t>(Version);
// LINE 67:
	__asm        mov    eax, Version;
	__asm        mov    WinMinor, ah;
// LINE 68:
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 3;
	__asm        jne    _T6f;

	__asm        xor    eax, eax;
	__asm        mov    al, WinMinor;
	__asm        cmp    eax, 0x32;
	__asm        jge    _T6f;
// LINE 70:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&Version) + 3), 0x80;
	__asm        je     _T60;
// LINE 71:
	this->_mRuntimePlatform = 0x1;
// LINE 72:
	__asm        jmp    _T6a;
// LINE 73:
_T60:
	this->_mRuntimePlatform = 0x2;
// LINE 75:
_T6a:
	__asm        jmp    _Ta4;
_T6f:
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 4;
	__asm        jge    _T8c;
// LINE 76:
	this->_mRuntimePlatform = 0x3;
// LINE 77:
	__asm        jmp    _Ta4;
_T8c:
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 4;
	__asm        jl     _Ta4;
// LINE 78:
	this->_mRuntimePlatform = 0x4;
// LINE 86:
_Ta4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _Taf;
// LINE 87:
_Taf:
}

// FUNCTION: COPTER_D 0x00427257
/*packed*/ class CSparkalWindow* CSparkalApp::NewWindow(unsigned long Width, unsigned long Height, unsigned long Style, const /*packed*/ struct SparkalColor *pColors, char * Caption) {
	/*bp-0x4*/   /*packed*/ class CSparkalWindow *Window;

// LINE 97:
	Window = 0x0;
// LINE 101:
	__asm        push   0x9C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T51;

	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, Style;
	__asm        push   eax;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   GameWindow::GameWindow;
	__asm        mov    Window, eax;
	__asm        jmp    _T58;
_T51:
	Window = 0x0;
// LINE 108:
_T58:
	return Window;
// LINE 109:
}

// FUNCTION: COPTER_D 0x004272be
/*unpacked*/ class IFlatImage* CSparkalApp::NewImage(char * fileName) {
	/*bp-0x4*/   /*unpacked*/ class IFlatImage *pBitmap;

// LINE 117:
	pBitmap = 0x0;
// LINE 120:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T60;
// LINE 121:
// Block start:
	/*bp-0x8*/   /*packed*/ class CBackBuffer *pDDBitmap;
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T4e;

	__asm        mov    eax, fileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    _T55;
_T4e:
	pDDBitmap = 0x0;
// LINE 122:
_T55:
	pBitmap = pDDBitmap;
// LINE 124:
// Block end:
	__asm        jmp    _T9b;
// LINE 125:
// Block start:
	/*bp-0xc*/   /*packed*/ class CBackBuffer *pBBitmap;
_T60:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T8e;

	__asm        mov    eax, fileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    _T95;
_T8e:
	pBBitmap = 0x0;
// LINE 126:
_T95:
	pBitmap = pBBitmap;
// LINE 132:
// Block end:
_T9b:
	return pBitmap;
// LINE 133:
}

// FUNCTION: COPTER_D 0x00427368
/*unpacked*/ class IFlatImage* CSparkalApp::NewImage(long width, long height, const const /*packed*/ struct SparkalColor *pColors) {
	/*bp-0x4*/   /*unpacked*/ class IFlatImage *pBitmap;

// LINE 142:
	pBitmap = 0x0;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _Tb7;
// LINE 147:
// Block start:
	/*bp-0x8*/   /*packed*/ class CBackBuffer *pDDBitmap;
	__asm        cmp    pColors, 0;
	__asm        je     _T6c;
// LINE 148:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T60;

	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    _T67;
_T60:
	pDDBitmap = 0x0;
// LINE 149:
_T67:
	__asm        jmp    _Tac;
// LINE 150:
_T6c:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Ta5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    _Tac;
_Ta5:
	pDDBitmap = 0x0;
// LINE 151:
_Tac:
	pBitmap = pDDBitmap;
// LINE 153:
// Block end:
	__asm        jmp    _T149;
// LINE 155:
// Block start:
	/*bp-0xc*/   /*packed*/ class CBackBuffer *pBBitmap;
_Tb7:
	__asm        cmp    pColors, 0;
	__asm        je     _T103;
// LINE 156:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tf7;

	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    _Tfe;
_Tf7:
	pBBitmap = 0x0;
// LINE 157:
_Tfe:
	__asm        jmp    _T143;
// LINE 158:
_T103:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T13c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    _T143;
_T13c:
	pBBitmap = 0x0;
// LINE 159:
_T143:
	pBitmap = pBBitmap;
// LINE 165:
// Block end:
_T149:
	return pBitmap;
// LINE 166:
}

// FUNCTION: COPTER_D 0x004274c0
unsigned long CSparkalApp::PrepareGame() {
// LINE 175:
	return 0x0;
// LINE 176:
}

// FUNCTION: COPTER_D 0x004274d8
unsigned long CSparkalApp::TickGame() {
// LINE 180:
	return 0x0;
// LINE 181:
}

// FUNCTION: COPTER_D 0x004274f0
unsigned long CSparkalApp::FinishGame() {
// LINE 185:
	return 0x0;
// LINE 186:
}



// Contribution: 1:00026510-00026548 Module: 69, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00427510
// CSparkalApp::`scalar deleting destructor'



// Contribution: 2:00000428-0000043b Module: 69, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CSparkalApp @ 0x0058f428
//   00: CSparkalApp::`scalar deleting destructor' @ 0x00427510
//   01: CSparkalApp::NewWindow @ 0x00427257
//   02: _purecall @ 0x0056cfa0
//   03: _purecall @ 0x0056cfa0
//   04: _purecall @ 0x0056cfa0
//   5 entries



// Contribution: 3:00000424-0000042e Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "(int)pPool"


// Contribution: 3:00000430-00000442 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "thePointer && size"


// Contribution: 3:00000444-00000467 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "C:\Copter\source\sparkal\memory.hpp"


// Contribution: 3:00000468-00000471 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "(int)Pool"


// Contribution: 3:00000474-00000483 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "(int)thePointer"
