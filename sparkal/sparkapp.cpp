// Module: sparkapp.obj
// Source: C:\Copter\source\sparkal\sparkapp.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00025fc0-00026507 Module: 69, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00426fc0
void CSparkalApp::CSparkalApp() {
// LINE 14:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F428;
// LINE 15:
	__asm        mov    ecx, this;
	__asm        call   0x004271A3;
// LINE 19:
	__asm        jmp    near ptr 0x00426FF1;
// LINE 20:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 21:
	__asm        jmp    near ptr 0x00426FFB;
// LINE 22:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 1;
// LINE 26:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 1;
// LINE 34:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        mov    eax, 0x59A9D4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00427034;
	__asm        push   0x194;
	__asm        push   0x597444;
	__asm        push   0x597424;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00427039;
	__asm        jmp    near ptr 0x00427039;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x00427067;
	__asm        push   0x169;
	__asm        push   0x597444;
	__asm        push   0x597430;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042706C;
	__asm        jmp    near ptr 0x0042706C;
	__asm        push   2;
	__asm        push   0x40;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x00427089;
	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
	__asm        jmp    near ptr 0x0042708E;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004270AD;
	__asm        mov    eax, [ebp-8];
	__asm        mov    word ptr [eax], 0xC;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ds:[0x59A9D4], eax;
	__asm        jmp    near ptr 0x004270B3;
	__asm        mov    word ptr [ebp-4], 0xFFFF;
	__asm        jmp    near ptr 0x004270B8;
// LINE 35:
	__asm        cmp    dword ptr ds:[0x59A9D4], 0;
	__asm        jne    near ptr 0x004270D4;
// LINE 37:
	__asm        push   1;
	__asm        push   0x80000001;
	__asm        call   0x0044FF40;
	__asm        add    esp, 8;
// LINE 38:
	__asm        jmp    near ptr 0x004270D9;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004270e1
void CSparkalApp::~CSparkalApp() {
// LINE 45:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F428;
	__asm        mov    eax, ds:[0x59A9D4];
	__asm        mov    [ebp-0xC], eax;
// LINE 51:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x00427124;
	__asm        push   0x1B5;
	__asm        push   0x597444;
	__asm        push   0x597468;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00427129;
	__asm        jmp    near ptr 0x00427129;
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x00427155;
	__asm        push   0x173;
	__asm        push   0x597444;
	__asm        push   0x597474;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0042715A;
	__asm        jmp    near ptr 0x0042715A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3658];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3658];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0042718F;
	__asm        mov    word ptr [ebp-4], 0xFFFF;
	__asm        jmp    near ptr 0x00427194;
	__asm        jmp    near ptr 0x00427199;
// LINE 52:
	__asm        jmp    near ptr 0x0042719E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004271a3
int32_t CSparkalApp::DecideRuntimePlatform() {
	unsigned char WinMinor;
	unsigned long Version;
	unsigned char WinMajor;

// LINE 61:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 62:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 65:
	__asm        call   dword ptr ds:[0x6C3644];
	__asm        mov    Version, eax;
// LINE 66:
	__asm        mov    al, reinterpret_cast<uint8_t>(Version);
	__asm        mov    WinMajor, al;
// LINE 67:
	__asm        mov    eax, Version;
	__asm        mov    WinMinor, ah;
// LINE 68:
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 3;
	__asm        jne    near ptr 0x00427212;
	__asm        xor    eax, eax;
	__asm        mov    al, WinMinor;
	__asm        cmp    eax, 0x32;
	__asm        jge    near ptr 0x00427212;
// LINE 70:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&Version) + 3), 0x80;
	__asm        je     near ptr 0x00427203;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 1;
// LINE 72:
	__asm        jmp    near ptr 0x0042720D;
// LINE 73:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 2;
// LINE 75:
	__asm        jmp    near ptr 0x00427247;
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x0042722F;
// LINE 76:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 3;
// LINE 77:
	__asm        jmp    near ptr 0x00427247;
	__asm        xor    eax, eax;
	__asm        mov    al, WinMajor;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00427247;
// LINE 78:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 4;
// LINE 86:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x00427252;
// LINE 87:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00427257
class CSparkalWindow* CSparkalApp::NewWindow(unsigned long Width, unsigned long Height, unsigned long Style, const struct SparkalColor* pColors, char * Caption) {
	class CSparkalWindow* Window;

// LINE 96:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 97:
	__asm        mov    Window, 0;
// LINE 101:
	__asm        push   0x9C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004272A8;
	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, Style;
	__asm        push   eax;
	__asm        mov    eax, Height;
	__asm        push   eax;
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x00466F70;
	__asm        mov    Window, eax;
	__asm        jmp    near ptr 0x004272AF;
	__asm        mov    Window, 0;
// LINE 108:
	__asm        mov    eax, Window;
	__asm        jmp    near ptr 0x004272B7;
// LINE 109:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004272be
class IFlatImage* CSparkalApp::NewImage(char * fileName) {
	class IFlatImage* pBitmap;

// LINE 116:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 117:
	__asm        mov    pBitmap, 0;
// LINE 120:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0042731E;
// LINE 121:
// Block start:
	class CBackBuffer* pDDBitmap;
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0042730C;
	__asm        mov    eax, fileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0046E6DF;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    near ptr 0x00427313;
	__asm        mov    pDDBitmap, 0;
// LINE 122:
	__asm        mov    eax, pDDBitmap;
	__asm        mov    pBitmap, eax;
// LINE 124:
// Block end:
	__asm        jmp    near ptr 0x00427359;
// LINE 125:
// Block start:
	class CBackBuffer* pBBitmap;
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0042734C;
	__asm        mov    eax, fileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046E6DF;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    near ptr 0x00427353;
	__asm        mov    pBBitmap, 0;
// LINE 126:
	__asm        mov    eax, pBBitmap;
	__asm        mov    pBitmap, eax;
// LINE 132:
// Block end:
	__asm        mov    eax, pBitmap;
	__asm        jmp    near ptr 0x00427361;
// LINE 133:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00427368
class IFlatImage* CSparkalApp::NewImage(long width, long height, const const struct SparkalColor* pColors) {
	class IFlatImage* pBitmap;

// LINE 141:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 142:
	__asm        mov    pBitmap, 0;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0042741F;
// LINE 147:
// Block start:
	class CBackBuffer* pDDBitmap;
	__asm        cmp    pColors, 0;
	__asm        je     near ptr 0x004273D4;
// LINE 148:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004273C8;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0046EA06;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    near ptr 0x004273CF;
	__asm        mov    pDDBitmap, 0;
// LINE 149:
	__asm        jmp    near ptr 0x00427414;
// LINE 150:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0042740D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0046EA06;
	__asm        mov    pDDBitmap, eax;
	__asm        jmp    near ptr 0x00427414;
	__asm        mov    pDDBitmap, 0;
// LINE 151:
	__asm        mov    eax, pDDBitmap;
	__asm        mov    pBitmap, eax;
// LINE 153:
// Block end:
	__asm        jmp    near ptr 0x004274B1;
// LINE 155:
// Block start:
	class CBackBuffer* pBBitmap;
	__asm        cmp    pColors, 0;
	__asm        je     near ptr 0x0042746B;
// LINE 156:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0042745F;
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0046EA06;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    near ptr 0x00427466;
	__asm        mov    pBBitmap, 0;
// LINE 157:
	__asm        jmp    near ptr 0x004274AB;
// LINE 158:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004274A4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, height;
	__asm        push   eax;
	__asm        mov    eax, width;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0046EA06;
	__asm        mov    pBBitmap, eax;
	__asm        jmp    near ptr 0x004274AB;
	__asm        mov    pBBitmap, 0;
// LINE 159:
	__asm        mov    eax, pBBitmap;
	__asm        mov    pBitmap, eax;
// LINE 165:
// Block end:
	__asm        mov    eax, pBitmap;
	__asm        jmp    near ptr 0x004274B9;
// LINE 166:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004274c0
unsigned long CSparkalApp::PrepareGame() {
// LINE 174:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 175:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004274D3;
// LINE 176:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004274d8
unsigned long CSparkalApp::TickGame() {
// LINE 179:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 180:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004274EB;
// LINE 181:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004274f0
unsigned long CSparkalApp::FinishGame() {
// LINE 184:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 185:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00427503;
// LINE 186:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00026510-00026548 Module: 69, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00427510
// CSparkalApp::`scalar deleting destructor'



// Contribution: 2:00000428-0000043b Module: 69, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f428
// ??_7CSparkalApp@@6B@


// Contribution: 3:00000424-0000042e Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597424
// ??_C@_0L@JPFL@?$CIint?$CJpPool?$AA@


// Contribution: 3:00000430-00000442 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597430
// ??_C@_0BD@OKOA@thePointer?5?$CG?$CG?5size?$AA@


// Contribution: 3:00000444-00000467 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597444
// ??_C@_0CE@KOME@C?3?2Copter?2source?2sparkal?2memory?4@


// Contribution: 3:00000468-00000471 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597468
// ??_C@_09IHHC@?$CIint?$CJPool?$AA@


// Contribution: 3:00000474-00000483 Module: 69, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00597474
// ??_C@_0BA@CGBB@?$CIint?$CJthePointer?$AA@
