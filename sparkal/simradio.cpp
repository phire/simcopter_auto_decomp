// Module: Simradio.obj
// Source: C:\Copter\source\sparkal\Simradio.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class RadioStation (forward reference);
class RadioStation{
public:
	void RadioStation(const class RadioStation&);
	void RadioStation();
	class RadioStation& operator=(const class RadioStation&);
	// vtable: 0
	intro void ~RadioStation();
	// vtable: 4
	intro int32_t Initialize();
	// vtable: 8
	intro void StationSet();
	// vtable: 12
	intro int32_t DoState();
	// vtable: 16
	intro void LoadAllPlaylists();
	// vtable: 20
	intro void ShufflePlaylist();
	// vtable: 24
	intro void RandomizeStringList(class list<basic_string<char>>&);
	// vtable: 28
	intro void ShuffleCycle();
	// vtable: 32
	intro void SetPlayStatus(int32_t);
	// vtable: 36
	intro int32_t IsPlaying();
	// vtable: 40
	intro void GetStationCallSign(class basic_string<char>&);
	// vtable: 44
	intro enum RadioStationType GetRadioStationType();
	// vtable: 48
	intro int32_t IsCycleTypePresent(enum RadioStationCycleType);
protected:
	// vtable: 52
	intro void MoveToNextPlaylistItem(enum RadioStationCycleType);
	// vtable: 56
	intro int32_t ReadCallSignFromDisk();
	// vtable: 60
	intro int32_t DetectRadioStationType();
	// vtable: 64
	intro int32_t StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType);
	int32_t bPlaying;
	struct RadioStationState myRadioStationState;
	enum RadioStationType myRadioStationType;
	class Radio* myRadio;
	class basic_string<char> sCallSign;
	class basic_string<char> sStationBaseDirectory;
	class basic_string<char> sMusicDirectory;
	class list<basic_string<char>> musicSelectionList;
	class list<basic_string<char>>::iterator musicSelectionListIterator;
	class basic_string<char> sDJDirectory;
	class list<basic_string<char>> djSelectionList;
	class list<basic_string<char>>::iterator djSelectionListIterator;
	class basic_string<char> sCommercialDirectory;
	class list<basic_string<char>> commercialSelectionList;
	class list<basic_string<char>>::iterator commercialSelectionListIterator;
	class basic_string<char> sJingleDirectory;
	class list<basic_string<char>> jingleSelectionList;
	class list<basic_string<char>>::iterator jingleSelectionListIterator;
};

// Type: void;
// Type: int32_t;
// Type: unsigned long;
// Type: enum RadioStationCycleType;
// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class Directory (forward reference);
// Type: class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{
	using void_pointer = void * __ptr32;
	class list<basic_string<char>>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class basic_string<char> data;
	};
protected:
	static class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static class allocator<basic_string<char>> value_allocator;
	using value_type = class basic_string<char>;
	using value_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using list_node_allocator_type = class allocator<list<basic_string<char>>::list_node>;
	using link_type = struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<basic_string<char>>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<basic_string<char>>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = struct list<basic_string<char>>::list_node_buffer*;
protected:
	static class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static struct list<basic_string<char>>::list_node_buffer* buffer_list;
	static struct list<basic_string<char>>::list_node* free_list;
	static struct list<basic_string<char>>::list_node* next_avail;
	static struct list<basic_string<char>>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<basic_string<char>>::list_node* get_node();
	void put_node(struct list<basic_string<char>>::list_node*);
	struct list<basic_string<char>>::list_node* node;
	uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::iterator();
	protected:
		void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::iterator&);
		class basic_string<char>& operator*();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::const_iterator(const class list<basic_string<char>>::iterator&);
		void list<basic_string<char>>::const_iterator();
	protected:
		void list<basic_string<char>>::const_iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::const_iterator&);
		const class basic_string<char>& operator*();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const class list<basic_string<char>>&);
	void list<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	void swap(class list<basic_string<char>>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::const_iterator, class list<basic_string<char>>::const_iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	class list<basic_string<char>>::iterator list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>&);
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	class list<basic_string<char>>& operator=(const class list<basic_string<char>>&);
protected:
	void transfer(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
public:
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&);
	void remove(const class basic_string<char>&);
	void unique();
	void merge(class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void list<basic_string<char>>::iterator();
protected:
	void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
};

// Type: class vector<basic_string<char>>;
class vector<basic_string<char>>{
	using vector_allocator = class allocator<basic_string<char>>;
	using value_type = class basic_string<char>;
	using pointer = class basic_string<char>*;
	using iterator = class basic_string<char>*;
	using const_iterator = const class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static class allocator<basic_string<char>> static_allocator;
	class basic_string<char>* start;
	class basic_string<char>* finish;
	class basic_string<char>* end_of_storage;
	void insert_aux(class basic_string<char>*, const class basic_string<char>&);
public:
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	const class basic_string<char>* vector<basic_string<char>>();
	class basic_string<char>* vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> vector<basic_string<char>>();
	class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> vector<basic_string<char>>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const class basic_string<char>& vector<basic_string<char>>(uint32_t);
	class basic_string<char>& vector<basic_string<char>>(uint32_t);
	void vector<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void vector<basic_string<char>>(const class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	class vector<basic_string<char>>& operator=(const class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	const class basic_string<char>& vector<basic_string<char>>();
	class basic_string<char>& vector<basic_string<char>>();
	void push_back(const class basic_string<char>&);
	void swap(class vector<basic_string<char>>&);
	void vector<basic_string<char>>(class basic_string<char>*, uint32_t, const class basic_string<char>&);
	void vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>*, const class basic_string<char>*);
	class basic_string<char>* vector<basic_string<char>>(class basic_string<char>*, const class basic_string<char>&);
	void pop_back();
	void vector<basic_string<char>>(class basic_string<char>*, class basic_string<char>*);
	void vector<basic_string<char>>(class basic_string<char>*);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: enum RadioStationType;
// Type: class DirectoryEntry (forward reference);
class DirectoryEntry{
public:
	void DirectoryEntry(class Directory*, class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(class basic_string<char>&);
	int32_t GetEntryMinusExtension(class basic_string<char>&);
	class Directory* directoryParent;
	class basic_string<char> sName;
	long lType;
};

// Type: class Radio (forward reference);
// Type: struct RadioPreferences (forward reference);
// Type: struct RadioPreferences;
class RadioPreferences{
public:
	long lVolume;
	int32_t bPreferToBeOn;
	long lCurrentStation;
	int32_t bOptionDJ;
	int32_t bOptionCommercials;
	int32_t bAutoMute;
	int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: char *;
// Type: enum RadioOption;
// Type: long;
// Type: class list<basic_string<char>>;
class list<basic_string<char>>{
	using void_pointer = void * __ptr32;
	class list<basic_string<char>>::list_node{
	public:
		void * __ptr32 next;
		void * __ptr32 prev;
		class basic_string<char> data;
	};
protected:
	static class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static class allocator<basic_string<char>> value_allocator;
	using value_type = class basic_string<char>;
	using value_allocator_type = class allocator<basic_string<char>>;
	using pointer = class basic_string<char>*;
	using reference = class basic_string<char>&;
	using const_reference = const class basic_string<char>&;
	using list_node_allocator_type = class allocator<list<basic_string<char>>::list_node>;
	using link_type = struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	class list<basic_string<char>>::list_node_buffer{
	public:
		void * __ptr32 next_buffer;
		struct list<basic_string<char>>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = struct list<basic_string<char>>::list_node_buffer*;
protected:
	static class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static struct list<basic_string<char>>::list_node_buffer* buffer_list;
	static struct list<basic_string<char>>::list_node* free_list;
	static struct list<basic_string<char>>::list_node* next_avail;
	static struct list<basic_string<char>>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<basic_string<char>>::list_node* get_node();
	void put_node(struct list<basic_string<char>>::list_node*);
	struct list<basic_string<char>>::list_node* node;
	uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::iterator();
	protected:
		void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::iterator&);
		class basic_string<char>& operator*();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
		class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
		class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{
	protected:
		struct list<basic_string<char>>::list_node* node;
	public:
		void list<basic_string<char>>::const_iterator(const class list<basic_string<char>>::iterator&);
		void list<basic_string<char>>::const_iterator();
	protected:
		void list<basic_string<char>>::const_iterator(struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const class list<basic_string<char>>::const_iterator&);
		const class basic_string<char>& operator*();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
		class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
		class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const class list<basic_string<char>>&);
	void list<basic_string<char>>(const class basic_string<char>*, const class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>();
	class list<basic_string<char>>::iterator list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> list<basic_string<char>>();
	class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> list<basic_string<char>>();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	const class basic_string<char>& list<basic_string<char>>();
	class basic_string<char>& list<basic_string<char>>();
	void swap(class list<basic_string<char>>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, uint32_t, const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::const_iterator, class list<basic_string<char>>::const_iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>*, const class basic_string<char>*);
	class list<basic_string<char>>::iterator list<basic_string<char>>(class list<basic_string<char>>::iterator, const class basic_string<char>&);
	void push_front(const class basic_string<char>&);
	void push_back(const class basic_string<char>&);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	class list<basic_string<char>>& operator=(const class list<basic_string<char>>&);
protected:
	void transfer(class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
public:
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&, class list<basic_string<char>>::iterator);
	void list<basic_string<char>>(class list<basic_string<char>>::iterator, class list<basic_string<char>>&);
	void remove(const class basic_string<char>&);
	void unique();
	void merge(class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: class RadioStation;
class RadioStation{
public:
	void RadioStation(const class RadioStation&);
	void RadioStation();
	class RadioStation& operator=(const class RadioStation&);
	// vtable: 0
	intro void ~RadioStation();
	// vtable: 4
	intro int32_t Initialize();
	// vtable: 8
	intro void StationSet();
	// vtable: 12
	intro int32_t DoState();
	// vtable: 16
	intro void LoadAllPlaylists();
	// vtable: 20
	intro void ShufflePlaylist();
	// vtable: 24
	intro void RandomizeStringList(class list<basic_string<char>>&);
	// vtable: 28
	intro void ShuffleCycle();
	// vtable: 32
	intro void SetPlayStatus(int32_t);
	// vtable: 36
	intro int32_t IsPlaying();
	// vtable: 40
	intro void GetStationCallSign(class basic_string<char>&);
	// vtable: 44
	intro enum RadioStationType GetRadioStationType();
	// vtable: 48
	intro int32_t IsCycleTypePresent(enum RadioStationCycleType);
protected:
	// vtable: 52
	intro void MoveToNextPlaylistItem(enum RadioStationCycleType);
	// vtable: 56
	intro int32_t ReadCallSignFromDisk();
	// vtable: 60
	intro int32_t DetectRadioStationType();
	// vtable: 64
	intro int32_t StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType);
	int32_t bPlaying;
	struct RadioStationState myRadioStationState;
	enum RadioStationType myRadioStationType;
	class Radio* myRadio;
	class basic_string<char> sCallSign;
	class basic_string<char> sStationBaseDirectory;
	class basic_string<char> sMusicDirectory;
	class list<basic_string<char>> musicSelectionList;
	class list<basic_string<char>>::iterator musicSelectionListIterator;
	class basic_string<char> sDJDirectory;
	class list<basic_string<char>> djSelectionList;
	class list<basic_string<char>>::iterator djSelectionListIterator;
	class basic_string<char> sCommercialDirectory;
	class list<basic_string<char>> commercialSelectionList;
	class list<basic_string<char>>::iterator commercialSelectionListIterator;
	class basic_string<char> sJingleDirectory;
	class list<basic_string<char>> jingleSelectionList;
	class list<basic_string<char>>::iterator jingleSelectionListIterator;
};

// Type: struct list<basic_string<char>>::list_node (forward reference);
// Type: class MTimer (forward reference);
class MTimer{
		enum TimerResolution {
			nTimerResolutionMicroseconds = 0,
			nTimerResolutionMilliseconds = 1,
			nTimerResolutionSeconds = 2,
		};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	enum MTimer::TimerResolution nTimerResolution;
	unsigned long lStartTime;
	unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	unsigned long lFrequency;
};

// Type: enum MTimer::TimerResolution;
// Type: class vector<int> (forward reference);
class vector<int>{
	using vector_allocator = class allocator<int>;
	using value_type = int32_t;
	using pointer = int32_t *;
	using iterator = int32_t *;
	using const_iterator = int32_t *;
	using reference = int32_t&;
	using const_reference = const int32_t&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<int const *,int,int const &,int>;
	using reverse_iterator = class reverse_iterator<int *,int,int &,int>;
protected:
	static class allocator<int> static_allocator;
	int32_t * start;
	int32_t * finish;
	int32_t * end_of_storage;
	void insert_aux(int32_t *, const int32_t&);
public:
	int32_t * vector<int>();
	int32_t * vector<int>();
	int32_t * vector<int>();
	int32_t * vector<int>();
	class reverse_iterator<int const *,int,int const &,int> vector<int>();
	class reverse_iterator<int *,int,int &,int> vector<int>();
	class reverse_iterator<int const *,int,int const &,int> vector<int>();
	class reverse_iterator<int *,int,int &,int> vector<int>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const int32_t& vector<int>(uint32_t);
	int32_t& vector<int>(uint32_t);
	void vector<int>(int32_t *, int32_t *);
	void vector<int>(const class vector<int>&);
	void vector<int>(uint32_t, const int32_t&);
	void vector<int>();
	void ~vector<int>();
	class vector<int>& operator=(const class vector<int>&);
	void reserve(uint32_t);
	const int32_t& vector<int>();
	int32_t& vector<int>();
	const int32_t& vector<int>();
	int32_t& vector<int>();
	void push_back(const int32_t&);
	void swap(class vector<int>&);
	void vector<int>(int32_t *, uint32_t, const int32_t&);
	void vector<int>(int32_t *, int32_t *, int32_t *);
	int32_t * vector<int>(int32_t *, const int32_t&);
	void pop_back();
	void vector<int>(int32_t *, int32_t *);
	void vector<int>(int32_t *);
};

// Type: uint32_t;
// Type: class list<basic_string<char>>::iterator (forward reference);
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void list<basic_string<char>>::iterator();
protected:
	void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
};

// Type: class vector<RadioStation> (forward reference);
class vector<RadioStation>{
	using vector_allocator = class allocator<RadioStation>;
	using value_type = class RadioStation;
	using pointer = class RadioStation*;
	using iterator = class RadioStation*;
	using const_iterator = const class RadioStation*;
	using reference = class RadioStation&;
	using const_reference = const class RadioStation&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int>;
	using reverse_iterator = class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int>;
protected:
	static class allocator<RadioStation> static_allocator;
	class RadioStation* start;
	class RadioStation* finish;
	class RadioStation* end_of_storage;
	void insert_aux(class RadioStation*, const class RadioStation&);
public:
	const class RadioStation* vector<RadioStation>();
	class RadioStation* vector<RadioStation>();
	const class RadioStation* vector<RadioStation>();
	class RadioStation* vector<RadioStation>();
	class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int> vector<RadioStation>();
	class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int> vector<RadioStation>();
	class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int> vector<RadioStation>();
	class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int> vector<RadioStation>();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const class RadioStation& vector<RadioStation>(uint32_t);
	class RadioStation& vector<RadioStation>(uint32_t);
	void vector<RadioStation>(const class RadioStation*, const class RadioStation*);
	void vector<RadioStation>(const class vector<RadioStation>&);
	void vector<RadioStation>(uint32_t, const class RadioStation&);
	void vector<RadioStation>();
	void ~vector<RadioStation>();
	class vector<RadioStation>& operator=(const class vector<RadioStation>&);
	void reserve(uint32_t);
	const class RadioStation& vector<RadioStation>();
	class RadioStation& vector<RadioStation>();
	const class RadioStation& vector<RadioStation>();
	class RadioStation& vector<RadioStation>();
	void push_back(const class RadioStation&);
	void swap(class vector<RadioStation>&);
	void vector<RadioStation>(class RadioStation*, uint32_t, const class RadioStation&);
	void vector<RadioStation>(class RadioStation*, const class RadioStation*, const class RadioStation*);
	class RadioStation* vector<RadioStation>(class RadioStation*, const class RadioStation&);
	void pop_back();
	void vector<RadioStation>(class RadioStation*, class RadioStation*);
	void vector<RadioStation>(class RadioStation*);
};

// Type: int32_t *;
// Type: struct list<basic_string<char>>::list_node_buffer (forward reference);
// Type: class list<basic_string<char>>::const_iterator;
class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void list<basic_string<char>>::const_iterator(const class list<basic_string<char>>::iterator&);
	void list<basic_string<char>>::const_iterator();
protected:
	void list<basic_string<char>>::const_iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::const_iterator&);
	const class basic_string<char>& operator*();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
	class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
	class list<basic_string<char>>::const_iterator list<basic_string<char>>::const_iterator(int32_t);
	class list<basic_string<char>>::const_iterator& list<basic_string<char>>::const_iterator();
};



// Contribution: 1:00032120-000389b8 Module: 59, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00433120
void RadioStation::RadioStation() {
// LINE 62:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x00433159;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   0x00439BD0;
	__asm        jmp    near ptr 0x0043316B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004331D2;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004331C4;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x004331DC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    near ptr 0x004331EB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0043323E;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00433230;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x00433248;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        jmp    near ptr 0x00433257;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004332AA;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043329C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    near ptr 0x004332B4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        jmp    near ptr 0x004332C3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00433306;
	__asm        jmp    near ptr 0x0043330B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0043335E;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00433350;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x00433368;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x00433377;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004333BA;
	__asm        jmp    near ptr 0x004333BF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00433412;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00433404;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x0043341C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x70], 0;
	__asm        jmp    near ptr 0x0043342B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043346E;
	__asm        jmp    near ptr 0x00433473;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004334A0;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x0041E2D0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x004334AD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x004334BF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00433517;
	__asm        jmp    near ptr 0x0043351C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F518;
// LINE 64:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x00439CC0;
// LINE 65:
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x00439CC0;
// LINE 66:
	__asm        mov    dword ptr [ebp-0xC], 2;
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x00439CC0;
// LINE 67:
	__asm        mov    dword ptr [ebp-0x10], 3;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x00439CC0;
// LINE 68:
	__asm        jmp    near ptr 0x0043359A;
	__asm        jmp    near ptr 0x0043359F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004335B6;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0043C260;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004335CD;
// LINE 69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 71:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 72:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   0x00439C40;
// LINE 73:
	__asm        jmp    near ptr 0x004335FD;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00433605
void RadioStation::RadioStation(const class RadioStation& copyRadioStation) {
// LINE 80:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x00433634;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   0x00439BD0;
	__asm        jmp    near ptr 0x00433646;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00433699;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043368B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x004336A3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    near ptr 0x004336B2;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00433705;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004336F7;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0043370F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        jmp    near ptr 0x0043371E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00433771;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00433763;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    near ptr 0x0043377B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        jmp    near ptr 0x0043378A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004337CD;
	__asm        jmp    near ptr 0x004337D2;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004337FC;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041E2D0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x00433806;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    near ptr 0x00433815;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00433858;
	__asm        jmp    near ptr 0x0043385D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00433887;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041E2D0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x00433891;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x70], 0;
	__asm        jmp    near ptr 0x004338A0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004338E3;
	__asm        jmp    near ptr 0x004338E8;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00433915;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0041E2D0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x00433922;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x00433934;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        inc    dword ptr ds:[0x598560];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x004399C0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043398C;
	__asm        jmp    near ptr 0x00433991;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F518;
// LINE 81:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 82:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x0043B250;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00433A03;
// LINE 83:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 84:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
// LINE 85:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        mov    ecx, copyRadioStation;
	__asm        add    ecx, 0x38;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433AB5;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00433A3F;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433A69;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433AB5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00433AAB;
	__asm        jmp    near ptr 0x00433A85;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x00433AB5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        jmp    near ptr 0x00433ABA;
// LINE 86:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    ecx, copyRadioStation;
	__asm        add    ecx, 0x40;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433B54;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00433ADE;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433B08;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433B54;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00433B4A;
	__asm        jmp    near ptr 0x00433B24;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x00433B54;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        jmp    near ptr 0x00433B59;
// LINE 87:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        call   0x00412670;
// LINE 88:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043AAE0;
// LINE 89:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 90:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412670;
// LINE 91:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043AAE0;
// LINE 92:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 93:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x00412670;
// LINE 94:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043AAE0;
// LINE 95:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 96:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x00412670;
// LINE 97:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043AAE0;
// LINE 98:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 99:
	__asm        jmp    near ptr 0x00433C34;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00433c3e
class RadioStation& RadioStation::operator=(const class RadioStation& copyRadioStation) {
// LINE 106:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 107:
	__asm        mov    eax, this;
	__asm        cmp    copyRadioStation, eax;
	__asm        jne    near ptr 0x00433C5E;
// LINE 108:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004341BF;
// LINE 110:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 111:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   0x0043B250;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00433CC7;
// LINE 112:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 113:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
// LINE 114:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433DB4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00433D34;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00433D34;
	__asm        push   1;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00433D34;
	__asm        jmp    near ptr 0x00433D39;
	__asm        jmp    near ptr 0x00433D3E;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433D68;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433DB4;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00433DAA;
	__asm        jmp    near ptr 0x00433D84;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x00433DB4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0;
	__asm        jmp    near ptr 0x00433DB9;
// LINE 115:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433E8E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00433E0E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00433E0E;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00433E0E;
	__asm        jmp    near ptr 0x00433E13;
	__asm        jmp    near ptr 0x00433E18;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433E42;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433E8E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00433E84;
	__asm        jmp    near ptr 0x00433E5E;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x00433E8E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0;
	__asm        jmp    near ptr 0x00433E93;
// LINE 116:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433F2D;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00433EB7;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433EE1;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433F2D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00433F23;
	__asm        jmp    near ptr 0x00433EFD;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    near ptr 0x00433F2D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
	__asm        jmp    near ptr 0x00433F32;
// LINE 117:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043AAE0;
// LINE 118:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 119:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00433FEA;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00433F74;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00433F9E;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00433FEA;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00433FE0;
	__asm        jmp    near ptr 0x00433FBA;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x00433FEA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
	__asm        jmp    near ptr 0x00433FEF;
// LINE 120:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043AAE0;
// LINE 121:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 122:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004340A7;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00434031;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0043405B;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004340A7;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0043409D;
	__asm        jmp    near ptr 0x00434077;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x004340A7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x004340AC;
// LINE 123:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043AAE0;
// LINE 124:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 125:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00434189;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x004340FC;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00434132;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00434189;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0043417C;
	__asm        jmp    near ptr 0x0043414E;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041E200;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x00434189;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        jmp    near ptr 0x0043418E;
// LINE 126:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043AAE0;
// LINE 127:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 128:
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x004341BF;
// LINE 129:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004341c6
void RadioStation::~RadioStation() {
// LINE 136:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F518;
// LINE 140:
	__asm        jmp    near ptr 0x004341E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004341F7;
	__asm        jmp    near ptr 0x004341FC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00434215;
	__asm        jmp    near ptr 0x0043421A;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A940;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x00434253;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x0043426D;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A8B0;
	__asm        jmp    near ptr 0x00434272;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004342BC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004342BC;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004342BC;
	__asm        jmp    near ptr 0x004342C1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x004342EF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004342F4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00434308;
	__asm        jmp    near ptr 0x0043430D;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A080;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A940;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x0043434E;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x00434365;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A8B0;
	__asm        jmp    near ptr 0x0043436A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004343AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004343AB;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004343AB;
	__asm        jmp    near ptr 0x004343B0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x70], 0;
	__asm        je     near ptr 0x004343D8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004343DD;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043A0C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00434429;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00434429;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00434429;
	__asm        jmp    near ptr 0x0043442E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x00434456;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043445B;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043A0C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004344A7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004344A7;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004344A7;
	__asm        jmp    near ptr 0x004344AC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     near ptr 0x004344D4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004344D9;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        call   0x00412080;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     near ptr 0x0043450C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00434511;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        call   0x00412080;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00434544;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00434549;
	__asm        jmp    near ptr 0x0043454E;
	__asm        jmp    near ptr 0x00434553;
	__asm        jmp    near ptr 0x00434558;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00434572;
	__asm        jmp    near ptr 0x00434577;
	__asm        jmp    near ptr 0x0043457C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00434581
int32_t RadioStation::Initialize() {
// LINE 146:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 147:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434597;
// LINE 148:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043459c
void RadioStation::SetPlayStatus(int32_t bNewPlaying) {
// LINE 155:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 156:
	__asm        mov    eax, bNewPlaying;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 159:
	__asm        jmp    near ptr 0x004345B6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004345bd
void RadioStation::StationSet() {
// LINE 165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 167:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 168:
	__asm        jmp    near ptr 0x004345E4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004345e9
int32_t RadioStation::IsPlaying() {
// LINE 175:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00434600;
// LINE 177:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00434605
int32_t RadioStation::DoState() {
	unsigned long lElapsedTime;

// LINE 184:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 187:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0043462E;
// LINE 188:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434A41;
// LINE 190:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x0043496E;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00434649;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     near ptr 0x004346CC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 1;
	__asm        jne    near ptr 0x00434676;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004346BA;
	__asm        jmp    near ptr 0x004346BA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x004346A3;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004346BA;
	__asm        jmp    near ptr 0x004346BA;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004346BA;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x0043470A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     near ptr 0x0043470A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedTime, eax;
	__asm        jmp    near ptr 0x00434715;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedTime, eax;
	__asm        jmp    near ptr 0x00434715;
// LINE 192:
	__asm        cmp    lElapsedTime, 0xFA0;
	__asm        jb     near ptr 0x00434964;
// LINE 194:
	__asm        jmp    near ptr 0x00434727;
	__asm        jmp    near ptr 0x0043472C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        jne    near ptr 0x00434794;
// LINE 195:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00434794;
// LINE 196:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0x4B;
	__asm        jge    near ptr 0x00434794;
// LINE 200:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x18];
// LINE 201:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 202:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 203:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434A41;
// LINE 208:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x14];
// LINE 209:
	__asm        jmp    near ptr 0x0043479F;
	__asm        jmp    near ptr 0x004347A4;
	__asm        jmp    near ptr 0x004347A9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x14];
	__asm        jne    near ptr 0x004347D9;
// LINE 210:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 211:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 213:
	__asm        jmp    near ptr 0x004347DE;
	__asm        jmp    near ptr 0x004347E3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        jne    near ptr 0x0043482A;
// LINE 216:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00434825;
// LINE 217:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 218:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 221:
	__asm        jmp    near ptr 0x0043495A;
	__asm        jmp    near ptr 0x0043482F;
	__asm        jmp    near ptr 0x00434834;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 1;
	__asm        jne    near ptr 0x00434891;
// LINE 223:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0x32;
	__asm        jge    near ptr 0x0043488C;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043488C;
// LINE 225:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 226:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 234:
	__asm        jmp    near ptr 0x0043495A;
	__asm        jmp    near ptr 0x00434896;
	__asm        jmp    near ptr 0x0043489B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 2;
	__asm        jne    near ptr 0x004348F8;
// LINE 236:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0xA;
	__asm        jge    near ptr 0x004348F3;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004348F3;
// LINE 238:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 239:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 243:
	__asm        jmp    near ptr 0x0043495A;
	__asm        jmp    near ptr 0x004348FD;
	__asm        jmp    near ptr 0x00434902;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 3;
	__asm        jne    near ptr 0x0043495A;
// LINE 245:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0xA;
	__asm        jge    near ptr 0x0043495A;
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043495A;
// LINE 247:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 248:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 252:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434A41;
// LINE 254:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434A41;
// LINE 258:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00434A37;
// LINE 259:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 260:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        jmp    near ptr 0x004349AE;
// LINE 261:
	__asm        jmp    near ptr 0x004349B3;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     near ptr 0x004349C5;
	__asm        jmp    near ptr 0x00434A37;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 1;
	__asm        jne    near ptr 0x004349E8;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x00434A32;
	__asm        jmp    near ptr 0x00434A32;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    near ptr 0x00434A18;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x00434A32;
	__asm        jmp    near ptr 0x00434A32;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x00434A32;
	__asm        jmp    near ptr 0x00434A37;
// LINE 263:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00434A41;
// LINE 264:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00434a46
int32_t RadioStation::StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType radioStationCycleType) {
	class basic_string<char> sFullSelectionPath;

// LINE 271:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x11C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 272:
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 274:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    near ptr 0x00434B29;
// LINE 275:
	__asm        push   0;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   0x0043A2D0;
// LINE 276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00434A9B;
	__asm        jmp    near ptr 0x00434AA0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    near ptr 0x00434AB7;
	__asm        jmp    near ptr 0x00434ABC;
	__asm        jmp    near ptr 0x00434AEB;
	__asm        jmp    near ptr 0x00434ACE;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     near ptr 0x00434AEB;
// LINE 277:
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043A080;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 278:
	__asm        jmp    near ptr 0x00434AF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0043BDF0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x00412130;
// LINE 281:
	__asm        jmp    near ptr 0x004352FB;
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    near ptr 0x00434D3E;
// LINE 282:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x6C;
	__asm        call   0x0043A2D0;
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00434B64;
	__asm        jmp    near ptr 0x00434B69;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x24];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    near ptr 0x00434B80;
	__asm        jmp    near ptr 0x00434B85;
	__asm        jmp    near ptr 0x00434BC7;
	__asm        jmp    near ptr 0x00434B97;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x00434BC7;
// LINE 284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00434BB6;
	__asm        jmp    near ptr 0x00434BBB;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 285:
	__asm        jmp    near ptr 0x00434BCC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    near ptr 0x00434BE3;
	__asm        jmp    near ptr 0x00434BE8;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xF4];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00434C21;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00434CA2;
	__asm        jmp    near ptr 0x00434C39;
	__asm        jmp    near ptr 0x00434C3E;
	__asm        jmp    near ptr 0x00434C43;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00434CA2;
	__asm        mov    eax, [ebp-0xF0];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    near ptr 0x00434CB6;
	__asm        jmp    near ptr 0x00434CBB;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF8];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0xF4];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00434CF2;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00434D34;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00434D39;
// LINE 288:
	__asm        jmp    near ptr 0x004352FB;
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    near ptr 0x00435002;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x00434D79;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00434D87;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00434DA4;
	__asm        jmp    near ptr 0x00434DA9;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    near ptr 0x00434DC3;
	__asm        jmp    near ptr 0x00434DC8;
	__asm        jmp    near ptr 0x00434E0D;
	__asm        jmp    near ptr 0x00434DDA;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     near ptr 0x00434E0D;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00434DF9;
	__asm        jmp    near ptr 0x00434DFE;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 292:
	__asm        jmp    near ptr 0x00434E12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x00434E2C;
	__asm        jmp    near ptr 0x00434E31;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xBC];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00434E6A;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00434EEB;
	__asm        jmp    near ptr 0x00434E82;
	__asm        jmp    near ptr 0x00434E87;
	__asm        jmp    near ptr 0x00434E8C;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00434EEB;
	__asm        mov    eax, [ebp-0xB8];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x00434EFF;
	__asm        jmp    near ptr 0x00434F04;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x44];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0xBC];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00434F3B;
	__asm        lea    eax, [ebp-0x44];
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00434FBD;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00434F56;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00434F74;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        mov    eax, sFullSelectionPath.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00434FBD;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xEC], eax;
	__asm        cmp    dword ptr [ebp-0xEC], 0;
	__asm        je     near ptr 0x00434FB6;
	__asm        jmp    near ptr 0x00434F96;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        call   0x0041E200;
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        jmp    near ptr 0x00434FBD;
	__asm        mov    sFullSelectionPath.reference, 0;
	__asm        jmp    near ptr 0x00434FC2;
	__asm        lea    ecx, [ebp-0x44];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00434FF8;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00434FFD;
// LINE 295:
	__asm        jmp    near ptr 0x004352FB;
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    near ptr 0x004352BD;
// LINE 296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x0043503D;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0043504B;
// LINE 297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00435065;
	__asm        jmp    near ptr 0x0043506A;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    near ptr 0x00435084;
	__asm        jmp    near ptr 0x00435089;
	__asm        jmp    near ptr 0x004350D1;
	__asm        jmp    near ptr 0x0043509B;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x004350D1;
// LINE 298:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004350BD;
	__asm        jmp    near ptr 0x004350C2;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 299:
	__asm        jmp    near ptr 0x004350D6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004350F0;
	__asm        jmp    near ptr 0x004350F5;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x84];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00435134;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004351B5;
	__asm        jmp    near ptr 0x0043514C;
	__asm        jmp    near ptr 0x00435151;
	__asm        jmp    near ptr 0x00435156;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004351B5;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x004351C6;
	__asm        jmp    near ptr 0x004351CB;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x88];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x84];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00435202;
	__asm        lea    eax, [ebp-0x58];
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00435284;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x0043521D;
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0043523B;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        mov    eax, sFullSelectionPath.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00435284;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB4], eax;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     near ptr 0x0043527D;
	__asm        jmp    near ptr 0x0043525D;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   0x0041E200;
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        jmp    near ptr 0x00435284;
	__asm        mov    sFullSelectionPath.reference, 0;
	__asm        jmp    near ptr 0x00435289;
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004352B3;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004352B8;
// LINE 301:
	__asm        jmp    near ptr 0x004352FB;
// LINE 302:
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sFullSelectionPath.c_str_ptr, 0;
	__asm        je     near ptr 0x004352EE;
	__asm        mov    eax, sFullSelectionPath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004352F3;
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    near ptr 0x004353DB;
// LINE 304:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00435339;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 306:
	__asm        push   1;
	__asm        lea    eax, sFullSelectionPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x2C];
// LINE 307:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+8];
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x2C];
// LINE 309:
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sFullSelectionPath.c_str_ptr, 0;
	__asm        je     near ptr 0x004353CE;
	__asm        mov    eax, sFullSelectionPath.c_str_ptr;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004353D3;
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    near ptr 0x004353DB;
// LINE 310:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004353e2
void RadioStation::LoadAllPlaylists() {
	class Directory tempDirectory;

// LINE 317:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xF8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 318:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     near ptr 0x00435444;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00435439;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0043544B;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x00435457;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x004832A3;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0043549F;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004354A4;
	__asm        mov    eax, ds:[0x5984C4];
	__asm        mov    [ebp-0xEC], eax;
// LINE 320:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x004354E6;
	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004354ED;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x004354F9;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485EBE;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0043553D;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00435542;
// LINE 322:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00435559;
	__asm        jmp    near ptr 0x0043555E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00435577;
	__asm        jmp    near ptr 0x0043557C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        jne    near ptr 0x004355AA;
	__asm        jmp    near ptr 0x004355BE;
	__asm        jmp    near ptr 0x004355AA;
	__asm        jmp    near ptr 0x004355B9;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    near ptr 0x004355BE;
	__asm        jmp    near ptr 0x004355C3;
	__asm        jmp    near ptr 0x00435613;
	__asm        jmp    near ptr 0x004355D5;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x00435613;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004355F1;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004355FC;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x0043558E;
	__asm        jmp    near ptr 0x00435618;
// LINE 323:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 324:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00435645;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0043565C;
	__asm        jmp    near ptr 0x00435661;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0043567A;
	__asm        jmp    near ptr 0x0043567F;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    [ebp-0xA4], eax;
	__asm        jne    near ptr 0x004356AD;
	__asm        jmp    near ptr 0x004356C4;
	__asm        jmp    near ptr 0x004356AD;
	__asm        jmp    near ptr 0x004356BF;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        jne    near ptr 0x004356C4;
	__asm        jmp    near ptr 0x004356C9;
	__asm        jmp    near ptr 0x00435725;
	__asm        jmp    near ptr 0x004356DB;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x00435725;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    near ptr 0x004356FA;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0043570B;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x00435691;
	__asm        jmp    near ptr 0x0043572A;
// LINE 327:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 328:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00435757;
// LINE 330:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0043576E;
	__asm        jmp    near ptr 0x00435773;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0043578C;
	__asm        jmp    near ptr 0x00435791;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        cmp    [ebp-0xBC], eax;
	__asm        jne    near ptr 0x004357BF;
	__asm        jmp    near ptr 0x004357D6;
	__asm        jmp    near ptr 0x004357BF;
	__asm        jmp    near ptr 0x004357D1;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        jne    near ptr 0x004357D6;
	__asm        jmp    near ptr 0x004357DB;
	__asm        jmp    near ptr 0x00435837;
	__asm        jmp    near ptr 0x004357ED;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     near ptr 0x00435837;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    near ptr 0x0043580C;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x0043581D;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x004357A3;
	__asm        jmp    near ptr 0x0043583C;
// LINE 331:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 332:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00435869;
// LINE 334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00435883;
	__asm        jmp    near ptr 0x00435888;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004358A4;
	__asm        jmp    near ptr 0x004358A9;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0xD4], eax;
	__asm        mov    eax, [ebp-0xD0];
	__asm        cmp    [ebp-0xD4], eax;
	__asm        jne    near ptr 0x004358D7;
	__asm        jmp    near ptr 0x004358EE;
	__asm        jmp    near ptr 0x004358D7;
	__asm        jmp    near ptr 0x004358E9;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        jne    near ptr 0x004358EE;
	__asm        jmp    near ptr 0x004358F3;
	__asm        jmp    near ptr 0x00435952;
	__asm        jmp    near ptr 0x00435905;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     near ptr 0x00435952;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    near ptr 0x00435924;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    near ptr 0x00435935;
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x004358BB;
	__asm        jmp    near ptr 0x00435957;
// LINE 335:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 336:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0048494D;
	__asm        jmp    near ptr 0x00435988;
// LINE 337:
	__asm        jmp    near ptr 0x0043598D;
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x004359C3;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004359C8;
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   0x00412130;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00428C70;
	__asm        jmp    near ptr 0x004359DD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004359e2
void RadioStation::ShufflePlaylist() {
	class basic_string<char> sTempItem;
	class basic_string<char> sCurrentLastItem;

// LINE 349:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x160;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 350:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     near ptr 0x00435A5C;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00435A4E;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    near ptr 0x00435A63;
	__asm        mov    sCurrentLastItem.reference, 0;
	__asm        mov    sCurrentLastItem.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00435A6F;
// LINE 351:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x118], eax;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     near ptr 0x00435AD7;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00435AC9;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    near ptr 0x00435ADE;
	__asm        mov    sTempItem.reference, 0;
	__asm        mov    sTempItem.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00435AEA;
// LINE 357:
	__asm        jmp    near ptr 0x00435AEF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x00435FBD;
// LINE 358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    near ptr 0x00435B1F;
	__asm        jmp    near ptr 0x00435B24;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    near ptr 0x00435B38;
	__asm        jmp    near ptr 0x00435B3D;
	__asm        jmp    near ptr 0x00435B42;
	__asm        mov    eax, [ebp-0xFC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x130], eax;
	__asm        lea    eax, sCurrentLastItem.c_str_ptr;
	__asm        cmp    [ebp-0x130], eax;
	__asm        je     near ptr 0x00435BE9;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00435B6D;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00435B97;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        mov    eax, sCurrentLastItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00435BE9;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     near ptr 0x00435BE2;
	__asm        jmp    near ptr 0x00435BB9;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12C];
	__asm        call   0x0041E200;
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    near ptr 0x00435BE9;
	__asm        mov    sCurrentLastItem.reference, 0;
	__asm        jmp    near ptr 0x00435BEE;
// LINE 359:
	__asm        mov    eax, this;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 360:
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    near ptr 0x00435C29;
	__asm        jmp    near ptr 0x00435C2E;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xF4], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x0041B570;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00435C5F;
	__asm        jmp    near ptr 0x00435C64;
	__asm        jmp    near ptr 0x00435F8D;
	__asm        jmp    near ptr 0x00435C76;
	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        je     near ptr 0x00435F8D;
// LINE 361:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    near ptr 0x00435C96;
	__asm        jmp    near ptr 0x00435C9B;
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    near ptr 0x00435CAF;
	__asm        jmp    near ptr 0x00435CB4;
	__asm        jmp    near ptr 0x00435CB9;
	__asm        mov    eax, [ebp-0xE4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x138], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x138], eax;
	__asm        je     near ptr 0x00435D60;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00435CE4;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00435D0E;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    sTempItem.reference, eax;
	__asm        mov    eax, sTempItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00435D60;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x134], eax;
	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     near ptr 0x00435D59;
	__asm        jmp    near ptr 0x00435D30;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x134];
	__asm        call   0x0041E200;
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    near ptr 0x00435D60;
	__asm        mov    sTempItem.reference, 0;
	__asm        jmp    near ptr 0x00435D65;
// LINE 362:
	__asm        lea    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    near ptr 0x00435D85;
	__asm        jmp    near ptr 0x00435D8A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x00435DAA;
	__asm        jmp    near ptr 0x00435DAF;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x00435DC3;
	__asm        jmp    near ptr 0x00435DC8;
	__asm        jmp    near ptr 0x00435DCD;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        cmp    [ebp-0x144], eax;
	__asm        je     near ptr 0x00435EA4;
	__asm        mov    ecx, [ebp-0x144];
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00435E0F;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00435E46;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00435EA4;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     near ptr 0x00435E97;
	__asm        jmp    near ptr 0x00435E68;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x13C];
	__asm        call   0x0041E200;
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00435EA4;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00435EA9;
// LINE 363:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    near ptr 0x00435ECB;
	__asm        jmp    near ptr 0x00435ED0;
	__asm        jmp    near ptr 0x00435ED5;
	__asm        jmp    near ptr 0x00435EDA;
	__asm        mov    eax, [ebp-0xDC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14C], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x14C], eax;
	__asm        je     near ptr 0x00435F88;
	__asm        mov    ecx, [ebp-0x14C];
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00435F08;
	__asm        mov    eax, sTempItem.reference;
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00435F33;
	__asm        mov    eax, sTempItem.reference;
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00435F88;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     near ptr 0x00435F7B;
	__asm        jmp    near ptr 0x00435F55;
	__asm        mov    eax, sTempItem.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x148];
	__asm        call   0x0041E200;
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00435F88;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00435F8D;
// LINE 365:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00435FAC;
	__asm        jmp    near ptr 0x00435FB1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 369:
	__asm        jmp    near ptr 0x00435FC2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     near ptr 0x00436323;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x00435FF2;
	__asm        jmp    near ptr 0x00435FF7;
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    near ptr 0x0043600B;
	__asm        jmp    near ptr 0x00436010;
	__asm        jmp    near ptr 0x00436015;
	__asm        mov    eax, [ebp-0xC4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x154], eax;
	__asm        lea    eax, sCurrentLastItem.c_str_ptr;
	__asm        cmp    [ebp-0x154], eax;
	__asm        je     near ptr 0x004360BC;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00436040;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0043606A;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        mov    eax, sCurrentLastItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004360BC;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     near ptr 0x004360B5;
	__asm        jmp    near ptr 0x0043608C;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   0x0041E200;
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    near ptr 0x004360BC;
	__asm        mov    sCurrentLastItem.reference, 0;
	__asm        jmp    near ptr 0x004360C1;
// LINE 371:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 372:
	__asm        lea    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004360FC;
	__asm        jmp    near ptr 0x00436101;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xBC], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x0041B570;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00436132;
	__asm        jmp    near ptr 0x00436137;
	__asm        jmp    near ptr 0x004362F3;
	__asm        jmp    near ptr 0x00436149;
	__asm        cmp    dword ptr [ebp-0xC0], 0;
	__asm        je     near ptr 0x004362F3;
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00436169;
	__asm        jmp    near ptr 0x0043616E;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x00436182;
	__asm        jmp    near ptr 0x00436187;
	__asm        jmp    near ptr 0x0043618C;
	__asm        mov    eax, [ebp-0xAC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x15C], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x15C], eax;
	__asm        je     near ptr 0x00436233;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x004361B7;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004361E1;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    sTempItem.reference, eax;
	__asm        mov    eax, sTempItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00436233;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     near ptr 0x0043622C;
	__asm        jmp    near ptr 0x00436203;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x158];
	__asm        call   0x0041E200;
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    near ptr 0x00436233;
	__asm        mov    sTempItem.reference, 0;
	__asm        jmp    near ptr 0x00436238;
// LINE 374:
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    near ptr 0x00436258;
	__asm        jmp    near ptr 0x0043625D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x0043627D;
	__asm        jmp    near ptr 0x00436282;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x00436296;
	__asm        jmp    near ptr 0x0043629B;
	__asm        jmp    near ptr 0x004362A0;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 375:
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    near ptr 0x004362DA;
	__asm        jmp    near ptr 0x004362DF;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 377:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00436312;
	__asm        jmp    near ptr 0x00436317;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 381:
	__asm        jmp    near ptr 0x00436328;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x00436519;
// LINE 382:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00436358;
	__asm        jmp    near ptr 0x0043635D;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00436371;
	__asm        jmp    near ptr 0x00436376;
	__asm        jmp    near ptr 0x0043637B;
	__asm        mov    eax, [ebp-0x8C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x00412670;
// LINE 383:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 384:
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004363C2;
	__asm        jmp    near ptr 0x004363C7;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x84], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x0041B570;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004363F5;
	__asm        jmp    near ptr 0x004363FA;
	__asm        jmp    near ptr 0x004364E6;
	__asm        jmp    near ptr 0x0043640C;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x004364E6;
// LINE 385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00436423;
	__asm        jmp    near ptr 0x00436428;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00436436;
	__asm        jmp    near ptr 0x0043643B;
	__asm        jmp    near ptr 0x00436440;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   0x00412670;
// LINE 386:
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00436469;
	__asm        jmp    near ptr 0x0043646E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x00436485;
	__asm        jmp    near ptr 0x0043648A;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x00436498;
	__asm        jmp    near ptr 0x0043649D;
	__asm        jmp    near ptr 0x004364A2;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 387:
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x004364D0;
	__asm        jmp    near ptr 0x004364D5;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00436505;
	__asm        jmp    near ptr 0x0043650A;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 393:
	__asm        jmp    near ptr 0x0043651E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     near ptr 0x0043670E;
// LINE 394:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0043654B;
	__asm        jmp    near ptr 0x00436550;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0043655E;
	__asm        jmp    near ptr 0x00436563;
	__asm        jmp    near ptr 0x00436568;
	__asm        mov    eax, [ebp-0x54];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x00412670;
// LINE 395:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 396:
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004365B1;
	__asm        jmp    near ptr 0x004365B6;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x0041B570;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004365DE;
	__asm        jmp    near ptr 0x004365E3;
	__asm        jmp    near ptr 0x004366D8;
	__asm        jmp    near ptr 0x004365F2;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x004366D8;
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0043660C;
	__asm        jmp    near ptr 0x00436611;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0043661F;
	__asm        jmp    near ptr 0x00436624;
	__asm        jmp    near ptr 0x00436629;
	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   0x00412670;
// LINE 398:
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00436655;
	__asm        jmp    near ptr 0x0043665A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00436674;
	__asm        jmp    near ptr 0x00436679;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00436687;
	__asm        jmp    near ptr 0x0043668C;
	__asm        jmp    near ptr 0x00436691;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 399:
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0043A080;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004366C2;
	__asm        jmp    near ptr 0x004366C7;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   0x00412670;
// LINE 401:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004366FA;
	__asm        jmp    near ptr 0x004366FF;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 403:
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sTempItem.c_str_ptr, 0;
	__asm        je     near ptr 0x00436744;
	__asm        mov    eax, sTempItem.c_str_ptr;
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436749;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sCurrentLastItem.c_str_ptr, 0;
	__asm        je     near ptr 0x0043677F;
	__asm        mov    eax, sCurrentLastItem.c_str_ptr;
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436784;
	__asm        jmp    near ptr 0x00436789;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0043678e
void RadioStation::RandomizeStringList(class list<basic_string<char>>& stringList) {
	class list<basic_string<char>>::iterator stringListIterator;
	int32_t i;
	int32_t iEnd;
	class vector<basic_string<char>> stringArray;

// LINE 411:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 412:
	__asm        jmp    near ptr 0x004367A5;
	__asm        mov    eax, stringList;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004367B7;
// LINE 413:
	__asm        jmp    near ptr 0x00436BC6;
// LINE 415:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    stringListIterator.node, eax;
	__asm        jmp    near ptr 0x004367CC;
	__asm        jmp    near ptr 0x004367D1;
// LINE 416:
	__asm        mov    stringArray.start, 0;
	__asm        mov    stringArray.finish, 0;
	__asm        mov    stringArray.end_of_storage, 0;
	__asm        jmp    near ptr 0x004367EB;
// LINE 419:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004367FE;
	__asm        jmp    near ptr 0x00436803;
	__asm        mov    eax, stringListIterator.node;
	__asm        cmp    [ebp-0x1C], eax;
	__asm        jne    near ptr 0x00436819;
	__asm        jmp    near ptr 0x0043682D;
	__asm        jmp    near ptr 0x00436819;
	__asm        jmp    near ptr 0x00436828;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    near ptr 0x0043682D;
	__asm        jmp    near ptr 0x00436832;
	__asm        jmp    near ptr 0x004368F4;
	__asm        jmp    near ptr 0x00436841;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x004368F4;
// LINE 420:
	__asm        jmp    near ptr 0x00436846;
	__asm        mov    eax, stringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, stringArray.end_of_storage;
	__asm        cmp    stringArray.finish, eax;
	__asm        je     near ptr 0x004368AE;
	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x00436878;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x004368A0;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        call   0x00411B80;
	__asm        jmp    near ptr 0x004368A0;
	__asm        jmp    near ptr 0x004368A5;
	__asm        add    stringArray.finish, 8;
	__asm        jmp    near ptr 0x004368C6;
	__asm        jmp    near ptr 0x004368B3;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, stringArray.finish;
	__asm        push   eax;
	__asm        lea    ecx, stringArray.start;
	__asm        call   0x00426900;
	__asm        jmp    near ptr 0x004368CB;
// LINE 421:
	__asm        mov    eax, stringListIterator.node;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, stringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    stringListIterator.node, eax;
	__asm        jmp    near ptr 0x004368E1;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004368EF;
// LINE 422:
	__asm        jmp    near ptr 0x004367EB;
// LINE 425:
	__asm        jmp    near ptr 0x004368F9;
	__asm        jmp    near ptr 0x004368FE;
	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0043690F;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    [ebp-0x40], eax;
	__asm        jne    near ptr 0x00436920;
	__asm        jmp    near ptr 0x00436980;
	__asm        mov    eax, [ebp-0x40];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00436932;
	__asm        add    dword ptr [ebp-0x34], 8;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x3C], eax;
	__asm        je     near ptr 0x0043697B;
	__asm        mov    eax, [ebp-0x34];
	__asm        sub    eax, [ebp-0x40];
	__asm        sar    eax, 3;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00490FD3;
	__asm        add    esp, 4;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0043695F;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0043C2F0;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00436976;
	__asm        jmp    near ptr 0x0043692E;
	__asm        jmp    near ptr 0x00436980;
	__asm        jmp    near ptr 0x00436985;
// LINE 428:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00436998;
	__asm        jmp    near ptr 0x0043699D;
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004369B2;
	__asm        jmp    near ptr 0x004369B7;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x94], eax;
	__asm        jne    near ptr 0x004369E5;
	__asm        jmp    near ptr 0x004369FC;
	__asm        jmp    near ptr 0x004369E5;
	__asm        jmp    near ptr 0x004369F7;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        jne    near ptr 0x004369FC;
	__asm        jmp    near ptr 0x00436A01;
	__asm        jmp    near ptr 0x00436A51;
	__asm        jmp    near ptr 0x00436A13;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x00436A51;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    near ptr 0x00436A32;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x00436A40;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, stringList;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x004369C9;
	__asm        jmp    near ptr 0x00436A56;
// LINE 431:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00436A62;
	__asm        jmp    near ptr 0x00436A67;
	__asm        jmp    near ptr 0x00436A6C;
	__asm        mov    eax, stringArray.finish;
	__asm        sub    eax, stringArray.start;
	__asm        sar    eax, 3;
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x00436A80;
	__asm        inc    i;
	__asm        mov    eax, iEnd;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x00436B2C;
// LINE 432:
	__asm        jmp    near ptr 0x00436A91;
	__asm        jmp    near ptr 0x00436A96;
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        add    eax, stringArray.start;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00436AB5;
	__asm        jmp    near ptr 0x00436ABA;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, stringList;
	__asm        call   0x004399C0;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x00436AD0;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x00425E20;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, stringList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00436B1D;
	__asm        jmp    near ptr 0x00436B22;
	__asm        jmp    near ptr 0x00436B27;
// LINE 433:
	__asm        jmp    near ptr 0x00436A7D;
// LINE 434:
	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        cmp    [ebp-0x7C], eax;
	__asm        je     near ptr 0x00436B9B;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00436B72;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436B77;
	__asm        jmp    near ptr 0x00436B88;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436B8D;
	__asm        jmp    near ptr 0x00436B92;
	__asm        add    dword ptr [ebp-0x7C], 8;
	__asm        jmp    near ptr 0x00436B38;
	__asm        jmp    near ptr 0x00436BA0;
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436BB7;
	__asm        jmp    near ptr 0x00436BBC;
	__asm        jmp    near ptr 0x00436BC1;
	__asm        jmp    near ptr 0x00436BC6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00436bcd
void RadioStation::ShuffleCycle() {
	int32_t nTempCycleItem;
	int32_t nCurrentCycleLastItem;

// LINE 445:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 450:
	__asm        jmp    near ptr 0x00436BDE;
	__asm        jmp    near ptr 0x00436BE3;
	__asm        jmp    near ptr 0x00436BE8;
	__asm        jmp    near ptr 0x00436BED;
	__asm        jmp    near ptr 0x00436BF2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    nCurrentCycleLastItem, eax;
// LINE 451:
	__asm        jmp    near ptr 0x00436C13;
	__asm        jmp    near ptr 0x00436C18;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00436C2F;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    [ebp-0x24], eax;
	__asm        jne    near ptr 0x00436C40;
	__asm        jmp    near ptr 0x00436CAD;
	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00436C52;
	__asm        add    dword ptr [ebp-0x14], 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     near ptr 0x00436CA8;
	__asm        mov    eax, [ebp-0x14];
	__asm        sub    eax, [ebp-0x24];
	__asm        sar    eax, 2;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00490FD3;
	__asm        add    esp, 4;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00436C7F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00436C9E;
	__asm        jmp    near ptr 0x00436CA3;
	__asm        jmp    near ptr 0x00436C4E;
	__asm        jmp    near ptr 0x00436CAD;
	__asm        jmp    near ptr 0x00436CB2;
// LINE 456:
	__asm        cmp    nCurrentCycleLastItem, 0;
	__asm        je     near ptr 0x00436D76;
	__asm        jmp    near ptr 0x00436CC1;
	__asm        jmp    near ptr 0x00436CC6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nCurrentCycleLastItem;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00436D76;
// LINE 458:
	__asm        jmp    near ptr 0x00436CDC;
	__asm        jmp    near ptr 0x00436CE1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax];
	__asm        mov    nTempCycleItem, eax;
// LINE 459:
	__asm        jmp    near ptr 0x00436CF1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00436CFF;
	__asm        jmp    near ptr 0x00436D04;
	__asm        jmp    near ptr 0x00436D09;
	__asm        jmp    near ptr 0x00436D0E;
	__asm        jmp    near ptr 0x00436D13;
	__asm        jmp    near ptr 0x00436D18;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
// LINE 460:
	__asm        jmp    near ptr 0x00436D3B;
	__asm        jmp    near ptr 0x00436D40;
	__asm        jmp    near ptr 0x00436D45;
	__asm        jmp    near ptr 0x00436D4A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        lea    eax, [eax*4-4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00436D6E;
	__asm        mov    eax, nTempCycleItem;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
// LINE 462:
	__asm        jmp    near ptr 0x00436D7B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00436d80
void RadioStation::GetStationCallSign(class basic_string<char>& sStationCallSign) {
// LINE 469:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 470:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        cmp    eax, sStationCallSign;
	__asm        je     near ptr 0x00436F4E;
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00436E27;
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00436E27;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00436E07;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00436E0C;
	__asm        jmp    near ptr 0x00436E11;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00436E22;
	__asm        jmp    near ptr 0x00436E27;
	__asm        jmp    near ptr 0x00436E2C;
	__asm        jmp    near ptr 0x00436E31;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00436E5B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, sStationCallSign;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00436F4E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00436F44;
	__asm        jmp    near ptr 0x00436E77;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00436F1E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00436EBE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00436EE3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00436EEF;
	__asm        jmp    near ptr 0x00436EEF;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00436EEF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00436F19;
	__asm        jmp    near ptr 0x00436F27;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00436F36;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, sStationCallSign;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00436F4E;
	__asm        mov    eax, sStationCallSign;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x00436F53;
// LINE 471:
	__asm        jmp    near ptr 0x00436F58;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00436f5f
enum RadioStationType RadioStation::GetRadioStationType() {
// LINE 478:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 479:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        jmp    near ptr 0x00436F76;
// LINE 480:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00436f7b
int32_t RadioStation::IsCycleTypePresent(enum RadioStationCycleType radioStationCycleType) {
// LINE 487:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 488:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    near ptr 0x00436FA6;
// LINE 489:
	__asm        jmp    near ptr 0x00436F96;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        jmp    near ptr 0x0043704D;
// LINE 491:
	__asm        jmp    near ptr 0x00437046;
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    near ptr 0x00436FDC;
// LINE 492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        jne    near ptr 0x00436FC7;
// LINE 493:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043704D;
// LINE 494:
	__asm        jmp    near ptr 0x00436FCC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        jmp    near ptr 0x0043704D;
// LINE 496:
	__asm        jmp    near ptr 0x00437046;
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    near ptr 0x00437012;
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    near ptr 0x00436FFD;
// LINE 498:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043704D;
// LINE 499:
	__asm        jmp    near ptr 0x00437002;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    near ptr 0x0043704D;
// LINE 501:
	__asm        jmp    near ptr 0x00437046;
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    near ptr 0x00437046;
// LINE 502:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    near ptr 0x00437033;
// LINE 503:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043704D;
// LINE 504:
	__asm        jmp    near ptr 0x00437038;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        jmp    near ptr 0x0043704D;
// LINE 506:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043704D;
// LINE 507:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00437054
void RadioStation::MoveToNextPlaylistItem(enum RadioStationCycleType radioStationCycleType) {
// LINE 514:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 515:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    near ptr 0x0043710B;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        jmp    near ptr 0x00437086;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00437091;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004370A5;
	__asm        jmp    near ptr 0x004370AA;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    near ptr 0x004370BE;
	__asm        jmp    near ptr 0x004370C3;
	__asm        jmp    near ptr 0x00437106;
	__asm        jmp    near ptr 0x004370D2;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00437106;
// LINE 518:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004370E8;
	__asm        jmp    near ptr 0x004370ED;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    near ptr 0x00437101;
	__asm        jmp    near ptr 0x00437101;
	__asm        jmp    near ptr 0x00437106;
// LINE 520:
	__asm        jmp    near ptr 0x0043732B;
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    near ptr 0x004371B6;
// LINE 521:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    near ptr 0x00437131;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0043713C;
// LINE 522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00437150;
	__asm        jmp    near ptr 0x00437155;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    near ptr 0x00437169;
	__asm        jmp    near ptr 0x0043716E;
	__asm        jmp    near ptr 0x004371B1;
	__asm        jmp    near ptr 0x0043717D;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004371B1;
// LINE 523:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00437193;
	__asm        jmp    near ptr 0x00437198;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    near ptr 0x004371AC;
	__asm        jmp    near ptr 0x004371AC;
	__asm        jmp    near ptr 0x004371B1;
// LINE 525:
	__asm        jmp    near ptr 0x0043732B;
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    near ptr 0x00437270;
// LINE 526:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x004371E5;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004371F0;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00437204;
	__asm        jmp    near ptr 0x00437209;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    near ptr 0x00437220;
	__asm        jmp    near ptr 0x00437225;
	__asm        jmp    near ptr 0x0043726B;
	__asm        jmp    near ptr 0x00437234;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x0043726B;
// LINE 528:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0043724A;
	__asm        jmp    near ptr 0x0043724F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x24];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    near ptr 0x00437266;
	__asm        jmp    near ptr 0x00437266;
	__asm        jmp    near ptr 0x0043726B;
// LINE 530:
	__asm        jmp    near ptr 0x0043732B;
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    near ptr 0x0043732B;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x0043729F;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004372AA;
// LINE 532:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004372C1;
	__asm        jmp    near ptr 0x004372C6;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    near ptr 0x004372DD;
	__asm        jmp    near ptr 0x004372E2;
	__asm        jmp    near ptr 0x0043732B;
	__asm        jmp    near ptr 0x004372F1;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0043732B;
// LINE 533:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0043730A;
	__asm        jmp    near ptr 0x0043730F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    near ptr 0x00437326;
	__asm        jmp    near ptr 0x00437326;
	__asm        jmp    near ptr 0x0043732B;
// LINE 535:
	__asm        jmp    near ptr 0x00437330;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00437337
int32_t RadioStation::ReadCallSignFromDisk() {
	class Directory tempDirectory;
	class DirectoryEntry* tempDirectoryEntry;

// LINE 542:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x94;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 543:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00437399;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043738E;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004373A0;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x004373AC;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x004832A3;
	__asm        mov    eax, [ebp-0x28];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043740A;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0043740A;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004373F4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437405;
	__asm        jmp    near ptr 0x0043740A;
	__asm        jmp    near ptr 0x0043740F;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00437431;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437436;
	__asm        mov    eax, ds:[0x5984C8];
	__asm        mov    [ebp-0x70], eax;
// LINE 546:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x004374EB;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043746C;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004374C8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004374C3;
	__asm        jmp    near ptr 0x004374D1;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004374E0;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x004374F2;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x004374FE;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485EBE;
	__asm        mov    eax, [ebp-0x30];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00437558;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x00437558;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00437542;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437553;
	__asm        jmp    near ptr 0x00437558;
	__asm        jmp    near ptr 0x0043755D;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0043757F;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437584;
// LINE 547:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 549:
	__asm        jmp    near ptr 0x0043759D;
	__asm        jmp    near ptr 0x004375A2;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00437645;
// LINE 550:
	__asm        push   0;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485E22;
	__asm        mov    tempDirectoryEntry, eax;
// LINE 551:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, tempDirectoryEntry;
	__asm        call   0x0048237C;
// LINE 552:
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        jmp    near ptr 0x004375D7;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00437601;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437606;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00437630;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437635;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00428C70;
	__asm        mov    eax, [ebp-0x38];
	__asm        jmp    near ptr 0x004376D7;
// LINE 554:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x00437651;
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00437687;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043768C;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004376C2;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004376C7;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00428C70;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    near ptr 0x004376D7;
// LINE 555:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004376dc
int32_t RadioStation::DetectRadioStationType() {
	class basic_string<char> sStationDirectoryParent;
	int32_t i;
	class basic_string<char> sStationDirectoryName;

// LINE 562:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x94;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 563:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x00437756;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00437748;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    sStationDirectoryParent.reference, eax;
	__asm        jmp    near ptr 0x0043775D;
	__asm        mov    sStationDirectoryParent.reference, 0;
	__asm        mov    sStationDirectoryParent.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00437769;
// LINE 564:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x004377D1;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004377C3;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    sStationDirectoryName.reference, eax;
	__asm        jmp    near ptr 0x004377D8;
	__asm        mov    sStationDirectoryName.reference, 0;
	__asm        mov    sStationDirectoryName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004377E4;
// LINE 569:
	__asm        lea    eax, sStationDirectoryName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sStationDirectoryParent.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        call   0x004867D2;
	__asm        add    esp, 0xC;
// LINE 570:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0043780D;
	__asm        inc    i;
	__asm        cmp    i, 9;
	__asm        jge    near ptr 0x00437A34;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x598488];
	__asm        mov    [ebp-0x84], eax;
// LINE 571:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00437855;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0043785C;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x00437868;
	__asm        jmp    near ptr 0x0043786D;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00437890;
	__asm        jmp    near ptr 0x0043787F;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x0043789A;
	__asm        mov    dword ptr [ebp-0x88], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0043789F;
	__asm        jmp    near ptr 0x004378A4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, sStationDirectoryName.c_str_ptr;
	__asm        call   0x00410C40;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004378D9;
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        jmp    near ptr 0x004378E0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004378E5;
	__asm        mov    eax, [ebp-0x1C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043791D;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0043791D;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0043791D;
	__asm        jmp    near ptr 0x00437922;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00437944;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437949;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00437A2F;
// LINE 575:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00437997;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00437997;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00437997;
	__asm        jmp    near ptr 0x0043799C;
	__asm        cmp    sStationDirectoryName.c_str_ptr, 0;
	__asm        je     near ptr 0x004379BE;
	__asm        mov    eax, sStationDirectoryName.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004379C3;
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004379FB;
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004379FB;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004379FB;
	__asm        jmp    near ptr 0x00437A00;
	__asm        cmp    sStationDirectoryParent.c_str_ptr, 0;
	__asm        je     near ptr 0x00437A22;
	__asm        mov    eax, sStationDirectoryParent.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437A27;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    near ptr 0x00437B0B;
// LINE 577:
	__asm        jmp    near ptr 0x0043780A;
// LINE 578:
	__asm        mov    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00437A73;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x00437A73;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00437A73;
	__asm        jmp    near ptr 0x00437A78;
	__asm        cmp    sStationDirectoryName.c_str_ptr, 0;
	__asm        je     near ptr 0x00437A9A;
	__asm        mov    eax, sStationDirectoryName.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437A9F;
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00437AD7;
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     near ptr 0x00437AD7;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00437AD7;
	__asm        jmp    near ptr 0x00437ADC;
	__asm        cmp    sStationDirectoryParent.c_str_ptr, 0;
	__asm        je     near ptr 0x00437AFE;
	__asm        mov    eax, sStationDirectoryParent.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437B03;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    near ptr 0x00437B0B;
// LINE 579:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437b10
 Radio::Radio() {
// LINE 603:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    near ptr 0x00437B3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0x2710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x34;
	__asm        call   0x0042EF87;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F560;
// LINE 604:
	__asm        jmp    near ptr 0x00437BB2;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437bba
 Radio::~Radio() {
// LINE 610:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F560;
// LINE 611:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x3C];
// LINE 612:
	__asm        jmp    near ptr 0x00437BE3;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x34;
	__asm        call   0x0042F2E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    [ebp-0xC], eax;
	__asm        je     near ptr 0x00437C29;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00437C1D;
	__asm        add    dword ptr [ebp-0xC], 0x98;
	__asm        jmp    near ptr 0x00437C00;
	__asm        jmp    near ptr 0x00437C2E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00437C48;
	__asm        jmp    near ptr 0x00437C4D;
	__asm        jmp    near ptr 0x00437C52;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437c57
int  Radio::Initialize() {
// LINE 619:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 621:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 622:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437C83;
// LINE 623:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437c88
int  Radio::DeInitialize() {
// LINE 630:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 631:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 632:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x3C];
// LINE 633:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437CB8;
// LINE 634:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437cbd
void  Radio::SetPreferences(struct RadioPreferences& newRadioPreferences) {
// LINE 641:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 642:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 643:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 644:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 645:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 646:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 647:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 648:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 652:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 653:
	__asm        jmp    near ptr 0x00437D45;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00437d4c
void  Radio::GetPreferences(struct RadioPreferences& currentRadioPreferences) {
// LINE 660:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 661:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+4], eax;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx], eax;
// LINE 663:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+8], eax;
// LINE 664:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+0xC], eax;
// LINE 665:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+0x10], eax;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+0x14], eax;
// LINE 667:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+0x18], eax;
// LINE 668:
	__asm        jmp    near ptr 0x00437DB0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00437db7
int  Radio::GetPreferences() {
	struct RadioPreferences tempRadioPreferences;
	char * chPrefData;

// LINE 675:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 679:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     near ptr 0x00437E58;
// LINE 680:
	__asm        push   0x5245494F;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 681:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x00437E58;
// LINE 683:
	__asm        push   0x5245494F;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x1C;
	__asm        jne    near ptr 0x00437E58;
// LINE 684:
	__asm        lea    edi, tempRadioPreferences.lVolume;
	__asm        mov    esi, chPrefData;
	__asm        mov    ecx, 7;
	__asm        rep movsd;
// LINE 686:
	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 0;
	__asm        je     near ptr 0x00437E38;
	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 1;
	__asm        je     near ptr 0x00437E38;
// LINE 687:
	__asm        mov    tempRadioPreferences.bPreferToBeOn, 0;
// LINE 688:
	__asm        cmp    tempRadioPreferences.lVolume, 0x64;
	__asm        jge    near ptr 0x00437E49;
// LINE 689:
	__asm        mov    tempRadioPreferences.bPreferToBeOn, 0;
// LINE 690:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 695:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437E62;
// LINE 696:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437e67
int  Radio::SavePreferences() {
	struct RadioPreferences tempRadioPreferences;

// LINE 703:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 706:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     near ptr 0x00437EDB;
// LINE 707:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    tempRadioPreferences.lVolume, eax;
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    tempRadioPreferences.bPreferToBeOn, eax;
// LINE 709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    tempRadioPreferences.lCurrentStation, eax;
// LINE 710:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    tempRadioPreferences.bOptionDJ, eax;
// LINE 711:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    tempRadioPreferences.bOptionCommercials, eax;
// LINE 713:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        mov    tempRadioPreferences.bOptionPlayEnglishIfDefaultLanguageNotFound, eax;
// LINE 716:
	__asm        push   0x1C;
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        push   0x5245494F;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 717:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437EE2;
// LINE 719:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00437EE2;
// LINE 720:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00437ee7
int  Radio::SetOn(int32_t bNewOn) {
// LINE 727:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 732:
	__asm        cmp    bNewOn, 0;
	__asm        je     near ptr 0x00437FCE;
// LINE 733:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x00437FC9;
	__asm        jmp    near ptr 0x00437F0F;
	__asm        jmp    near ptr 0x00437F14;
	__asm        jmp    near ptr 0x00437F19;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00437FC9;
// LINE 734:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 735:
	__asm        jmp    near ptr 0x00437F44;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00437F63;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
// LINE 736:
	__asm        jmp    near ptr 0x00437F79;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00437F98;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xC];
// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 740:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437FFE;
// LINE 743:
	__asm        jmp    near ptr 0x00437FF4;
// LINE 744:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00437FF4;
// LINE 745:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 746:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 749:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00437FFE;
// LINE 750:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00438005
void  Radio::SetMute(int32_t bNewMute) {
// LINE 758:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 759:
	__asm        cmp    bNewMute, 0;
	__asm        je     near ptr 0x00438051;
// LINE 760:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x14];
// LINE 763:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    near ptr 0x0043804C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0x64;
	__asm        jle    near ptr 0x0043804C;
// LINE 764:
	__asm        push   0x64;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 767:
	__asm        jmp    near ptr 0x00438094;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    near ptr 0x00438094;
// LINE 768:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x14];
// LINE 769:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x00438094;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0x64;
	__asm        jle    near ptr 0x00438094;
// LINE 771:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 774:
	__asm        jmp    near ptr 0x00438099;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004380a0
void  Radio::SetOption(int32_t bNewOption, enum RadioOption nRadioOption) {
// LINE 780:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 781:
	__asm        cmp    nRadioOption, 0;
	__asm        jne    near ptr 0x004380C4;
// LINE 782:
	__asm        mov    eax, bNewOption;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 783:
	__asm        jmp    near ptr 0x004380EF;
	__asm        cmp    nRadioOption, 1;
	__asm        jne    near ptr 0x004380DC;
// LINE 784:
	__asm        mov    eax, bNewOption;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 785:
	__asm        jmp    near ptr 0x004380EF;
	__asm        cmp    nRadioOption, 2;
	__asm        jne    near ptr 0x004380EF;
// LINE 786:
	__asm        mov    eax, bNewOption;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x30], eax;
// LINE 787:
	__asm        jmp    near ptr 0x004380F4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004380fb
int  Radio::GetOption(enum RadioOption nRadioOption) {
// LINE 793:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 794:
	__asm        cmp    nRadioOption, 0;
	__asm        jne    near ptr 0x00438121;
// LINE 795:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        jmp    near ptr 0x00438157;
// LINE 796:
	__asm        jmp    near ptr 0x00438150;
	__asm        cmp    nRadioOption, 1;
	__asm        jne    near ptr 0x0043813B;
// LINE 797:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        jmp    near ptr 0x00438157;
// LINE 798:
	__asm        jmp    near ptr 0x00438150;
	__asm        cmp    nRadioOption, 2;
	__asm        jne    near ptr 0x00438150;
// LINE 799:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        jmp    near ptr 0x00438157;
// LINE 800:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00438157;
// LINE 801:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043815e
int  Radio::SetVolume(long lNewVolume) {
// LINE 811:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 812:
	__asm        cmp    lNewVolume, 0;
	__asm        jge    near ptr 0x0043817B;
// LINE 813:
	__asm        mov    lNewVolume, 0;
// LINE 814:
	__asm        cmp    lNewVolume, 0x2710;
	__asm        jle    near ptr 0x0043818F;
// LINE 815:
	__asm        mov    lNewVolume, 0x2710;
// LINE 816:
	__asm        mov    eax, lNewVolume;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 817:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jg     near ptr 0x004381BB;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 819:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004381C5;
// LINE 820:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004381cc
int  Radio::SetStation(int32_t nStationIndex) {
// LINE 826:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 827:
	__asm        mov    eax, this;
	__asm        mov    ecx, nStationIndex;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jne    near ptr 0x004381F1;
// LINE 828:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004382C3;
// LINE 830:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00438217;
// LINE 831:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 832:
	__asm        jmp    near ptr 0x0043821C;
	__asm        jmp    near ptr 0x00438221;
	__asm        jmp    near ptr 0x00438226;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    eax, nStationIndex;
	__asm        jg     near ptr 0x0043826A;
// LINE 833:
	__asm        jmp    near ptr 0x00438248;
	__asm        jmp    near ptr 0x0043824D;
	__asm        jmp    near ptr 0x00438252;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        dec    eax;
	__asm        mov    nStationIndex, eax;
// LINE 834:
	__asm        cmp    nStationIndex, 0;
	__asm        jge    near ptr 0x0043827B;
// LINE 835:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004382C3;
// LINE 836:
	__asm        mov    eax, nStationIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 837:
	__asm        jmp    near ptr 0x00438289;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004382A8;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
// LINE 838:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004382C3;
// LINE 839:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004382ca
int  Radio::SetStation(enum RadioStationType radioStationType) {
	int32_t i;
	int32_t iEnd;

// LINE 846:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 849:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004382E2;
	__asm        jmp    near ptr 0x004382E7;
	__asm        jmp    near ptr 0x004382EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x0043830B;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x0043836B;
// LINE 850:
	__asm        jmp    near ptr 0x0043831C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00438338;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x2C];
	__asm        cmp    eax, radioStationType;
	__asm        jne    near ptr 0x00438366;
// LINE 851:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    near ptr 0x00438372;
// LINE 852:
	__asm        jmp    near ptr 0x00438308;
// LINE 853:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00438372;
// LINE 854:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00438379
int  Radio::IsStationTypeAvailable(enum RadioStationType radioStationType) {
	int32_t i;
	int32_t iEnd;

// LINE 860:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 863:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00438391;
	__asm        jmp    near ptr 0x00438396;
	__asm        jmp    near ptr 0x0043839B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iEnd, eax;
	__asm        jmp    near ptr 0x004383BA;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    near ptr 0x00438410;
// LINE 864:
	__asm        jmp    near ptr 0x004383CB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004383E7;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x2C];
	__asm        cmp    eax, radioStationType;
	__asm        jne    near ptr 0x0043840B;
// LINE 865:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00438417;
// LINE 866:
	__asm        jmp    near ptr 0x004383B7;
// LINE 867:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00438417;
// LINE 868:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043841e
int  Radio::GetStationCount() {
// LINE 875:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 876:
	__asm        jmp    near ptr 0x0043842F;
	__asm        jmp    near ptr 0x00438434;
	__asm        jmp    near ptr 0x00438439;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        jmp    near ptr 0x00438452;
// LINE 877:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00438457
int  Radio::DoState() {
// LINE 884:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 885:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x00438477;
// LINE 886:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004384B1;
// LINE 887:
	__asm        jmp    near ptr 0x0043847C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0043849B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004384B1;
// LINE 888:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004384b6
int  Radio::StationDirectoryNameIsValid(class basic_string<char>& sStationDirectory) {
	int32_t i;

// LINE 895:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 898:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004384D1;
	__asm        inc    i;
	__asm        cmp    i, 9;
	__asm        jge    near ptr 0x0043866F;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x598488];
	__asm        mov    [ebp-0x24], eax;
// LINE 899:
	__asm        jmp    near ptr 0x004384ED;
	__asm        jmp    near ptr 0x004384F2;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00438512;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00438554;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438545;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438554;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        jb     near ptr 0x00438564;
	__asm        mov    eax, ecx;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0043856C;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004385B8;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x004385A2;
	__asm        jmp    near ptr 0x0043858B;
	__asm        jmp    near ptr 0x00438590;
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004385B3;
	__asm        jmp    near ptr 0x004385A7;
	__asm        jmp    near ptr 0x004385AC;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00438638;
	__asm        jmp    near ptr 0x004385BD;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004385E2;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004385EE;
	__asm        jmp    near ptr 0x004385EE;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x004385EE;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056AC90;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0043860A;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0043861F;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00438633;
	__asm        jmp    near ptr 0x00438624;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00438638;
	__asm        jmp    near ptr 0x0043863D;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x0043864C;
	__asm        jmp    near ptr 0x00438651;
	__asm        jmp    near ptr 0x0043866A;
	__asm        jmp    near ptr 0x00438660;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0043866A;
// LINE 900:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00438676;
// LINE 901:
	__asm        jmp    near ptr 0x004384CE;
// LINE 902:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00438676;
// LINE 903:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0043867d
int  Radio::SetupStations() {
	class basic_string<char> sStationDirectory;
	class basic_string<char> sScratch;
	class list<basic_string<char>> radioStationStringList;
	class Directory tempDirectory;
	class basic_string<char> sCurrentLanguage;
	int32_t nStationCount;
	class basic_string<char> sCommercialDirectory;
	class RadioStation tempRadioStation;
	class basic_string<char> sRadioDirectory;
	class list<basic_string<char>>::iterator radioStationStringListIterator;

// LINE 914:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x258;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 915:
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 916:
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 917:
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 918:
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 919:
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00411EE0;
// LINE 920:
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   0x0043A490;
// LINE 921:
	__asm        jmp    near ptr 0x004386D3;
// LINE 922:
	__asm        lea    ecx, tempRadioStation.<vftable>;
	__asm        call   0x00433120;
// LINE 923:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0xF8];
	__asm        call   0x00411EE0;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x004832A3;
	__asm        lea    ecx, [ebp-0xF8];
	__asm        call   0x00412130;
	__asm        push   0x59855C;
	__asm        lea    ecx, [ebp-0x100];
	__asm        call   0x00411990;
	__asm        mov    [ebp-0x254], eax;
// LINE 927:
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   3;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0043873A;
	__asm        lea    ecx, [ebp-0x100];
	__asm        call   0x00412130;
// LINE 928:
	__asm        mov    eax, ds:[0x5984B4];
	__asm        push   eax;
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   0x0043B9E0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x108];
	__asm        call   0x00412130;
// LINE 929:
	__asm        mov    eax, ds:[0x5984B0];
	__asm        push   eax;
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        call   0x0043B9E0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x110];
	__asm        call   0x00412130;
// LINE 932:
	__asm        push   0;
	__asm        lea    eax, sStationDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00485B36;
// LINE 933:
	__asm        push   0;
	__asm        lea    eax, radioStationStringList.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x0043A7D0;
// LINE 936:
	__asm        jmp    near ptr 0x004387D2;
	__asm        jmp    near ptr 0x004387D7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x0043A6F0;
// LINE 937:
	__asm        lea    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   0x0043A080;
	__asm        mov    eax, [eax];
	__asm        mov    radioStationStringListIterator.node, eax;
// LINE 938:
	__asm        mov    eax, this;
	__asm        mov    tempRadioStation.myRadio, eax;
// LINE 939:
	__asm        mov    nStationCount, 0;
// LINE 940:
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x00438840;
	__asm        jmp    near ptr 0x00438845;
	__asm        mov    eax, [ebp-0x118];
	__asm        cmp    radioStationStringListIterator.node, eax;
	__asm        jne    near ptr 0x0043885E;
	__asm        jmp    near ptr 0x00438875;
	__asm        jmp    near ptr 0x0043885E;
	__asm        jmp    near ptr 0x00438870;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        jne    near ptr 0x00438875;
	__asm        jmp    near ptr 0x0043887A;
	__asm        jmp    near ptr 0x004393F8;
	__asm        jmp    near ptr 0x0043888C;
	__asm        cmp    dword ptr [ebp-0x250], 0;
	__asm        je     near ptr 0x004393F8;
// LINE 943:
	__asm        jmp    near ptr 0x00438891;
	__asm        push   0x5C;
	__asm        mov    ecx, radioStationStringListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   0x00412850;
// LINE 946:
	__asm        jmp    near ptr 0x004388A3;
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, sStationDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   0x0043BDF0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x120];
	__asm        call   0x00412130;
// LINE 947:
	__asm        lea    ecx, tempRadioStation.<vftable>;
	__asm        call   0x00437337;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004393CC;
// LINE 948:
	__asm        lea    ecx, tempRadioStation.<vftable>;
	__asm        call   0x004376DC;
// LINE 952:
	__asm        mov    eax, ds:[0x5984B8];
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   0x0043B9E0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sMusicDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x128];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     near ptr 0x00438953;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438958;
// LINE 956:
	__asm        mov    eax, ds:[0x5984BC];
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   0x0043B9E0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x130];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     near ptr 0x004389B9;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004389BE;
// LINE 957:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 958:
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   0x0043BDF0;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   0x00412670;
	__asm        lea    ecx, [ebp-0x138];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     near ptr 0x00438A34;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438A39;
// LINE 959:
	__asm        cmp    dword ptr ds:[0x597664], 1;
	__asm        je     near ptr 0x00438AA6;
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00438AA6;
// LINE 960:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00438A97;
// LINE 961:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 962:
	__asm        jmp    near ptr 0x00438AA6;
// LINE 963:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x004157D0;
// LINE 965:
	__asm        jmp    near ptr 0x00438AAB;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00438ACE;
	__asm        mov    eax, ds:[0x5984B0];
	__asm        mov    [ebp-0x22C], eax;
// LINE 969:
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220], eax;
	__asm        jmp    near ptr 0x00438AF3;
	__asm        jmp    near ptr 0x00438AF8;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    eax, sRadioDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x21C];
	__asm        call   0x00411F60;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     near ptr 0x00438B67;
	__asm        jmp    near ptr 0x00438B2C;
	__asm        jmp    near ptr 0x00438B31;
	__asm        mov    eax, [ebp-0x218];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, sRadioDirectory.reference;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x228], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00438B67;
	__asm        mov    eax, [ebp-0x218];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    near ptr 0x00438B7B;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    ecx, [ebp-0x224];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x21C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x140];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x21C];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00438BAF;
	__asm        lea    eax, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        lea    ecx, [ebp-0x140];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00438C40;
	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00438BCD;
	__asm        mov    eax, [ebp-0x13C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00438BF1;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    tempRadioStation.sCommercialDirectory.reference, eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00438C40;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        cmp    dword ptr [ebp-0x238], 0;
	__asm        je     near ptr 0x00438C39;
	__asm        jmp    near ptr 0x00438C13;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   0x0041E200;
	__asm        mov    tempRadioStation.sCommercialDirectory.reference, eax;
	__asm        jmp    near ptr 0x00438C40;
	__asm        mov    tempRadioStation.sCommercialDirectory.reference, 0;
	__asm        jmp    near ptr 0x00438C45;
	__asm        lea    ecx, [ebp-0x140];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     near ptr 0x00438C84;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x20C], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x210], eax;
	__asm        mov    eax, [ebp-0x210];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438C89;
// LINE 970:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 971:
	__asm        jmp    near ptr 0x00438C9F;
	__asm        jmp    near ptr 0x00438CA4;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1F8];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00438CCE;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00438D43;
	__asm        jmp    near ptr 0x00438CE3;
	__asm        jmp    near ptr 0x00438CE8;
	__asm        jmp    near ptr 0x00438CED;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x200], eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x204], eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1F4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x200];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x204];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00438D43;
	__asm        mov    eax, [ebp-0x1F4];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1FC], eax;
	__asm        jmp    near ptr 0x00438D57;
	__asm        jmp    near ptr 0x00438D5C;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1FC];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1F8];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x148];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x1F8];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00438D93;
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        lea    ecx, [ebp-0x148];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00438E36;
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00438DB7;
	__asm        mov    eax, [ebp-0x144];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00438DE1;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    sScratch.reference, eax;
	__asm        mov    eax, sScratch.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00438E36;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x214], eax;
	__asm        cmp    dword ptr [ebp-0x214], 0;
	__asm        je     near ptr 0x00438E2C;
	__asm        jmp    near ptr 0x00438E03;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x214];
	__asm        call   0x0041E200;
	__asm        mov    sScratch.reference, eax;
	__asm        jmp    near ptr 0x00438E36;
	__asm        mov    sScratch.reference, 0;
	__asm        jmp    near ptr 0x00438E3B;
	__asm        lea    ecx, [ebp-0x148];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     near ptr 0x00438E7A;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00438E7F;
// LINE 972:
	__asm        cmp    dword ptr ds:[0x597664], 1;
	__asm        je     near ptr 0x00438EEC;
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00438EEC;
// LINE 973:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00438EDD;
// LINE 974:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 975:
	__asm        jmp    near ptr 0x00438EEC;
// LINE 976:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x004157D0;
// LINE 978:
	__asm        jmp    near ptr 0x00438EF1;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00438F14;
	__asm        mov    eax, ds:[0x5984C0];
	__asm        mov    [ebp-0x1E4], eax;
// LINE 982:
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    near ptr 0x00438F39;
	__asm        jmp    near ptr 0x00438F3E;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sStationBaseDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   0x00411F60;
	__asm        cmp    dword ptr [ebp-0x1D8], 0;
	__asm        je     near ptr 0x00438FAD;
	__asm        jmp    near ptr 0x00438F72;
	__asm        jmp    near ptr 0x00438F77;
	__asm        mov    eax, tempRadioStation.sStationBaseDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00438FAD;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    near ptr 0x00438FC1;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    ecx, [ebp-0x1DC];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x150];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x00438FF5;
	__asm        lea    eax, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        lea    ecx, [ebp-0x150];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00439086;
	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x00439013;
	__asm        mov    eax, [ebp-0x14C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00439037;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    tempRadioStation.sJingleDirectory.reference, eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x00439086;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1F0], eax;
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     near ptr 0x0043907F;
	__asm        jmp    near ptr 0x00439059;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        call   0x0041E200;
	__asm        mov    tempRadioStation.sJingleDirectory.reference, eax;
	__asm        jmp    near ptr 0x00439086;
	__asm        mov    tempRadioStation.sJingleDirectory.reference, 0;
	__asm        jmp    near ptr 0x0043908B;
	__asm        lea    ecx, [ebp-0x150];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     near ptr 0x004390CA;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004390CF;
// LINE 983:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 984:
	__asm        jmp    near ptr 0x004390E5;
	__asm        jmp    near ptr 0x004390EA;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   0x00411F60;
	__asm        jmp    near ptr 0x00439114;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00439189;
	__asm        jmp    near ptr 0x00439129;
	__asm        jmp    near ptr 0x0043912E;
	__asm        jmp    near ptr 0x00439133;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00439189;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        jmp    near ptr 0x0043919D;
	__asm        jmp    near ptr 0x004391A2;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x158];
	__asm        call   0x00411B80;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x004391D9;
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        lea    ecx, [ebp-0x158];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0043927C;
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   0x00412080;
	__asm        jmp    near ptr 0x004391FD;
	__asm        mov    eax, [ebp-0x154];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x00439227;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    sScratch.reference, eax;
	__asm        mov    eax, sScratch.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0043927C;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1CC], eax;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        je     near ptr 0x00439272;
	__asm        jmp    near ptr 0x00439249;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1CC];
	__asm        call   0x0041E200;
	__asm        mov    sScratch.reference, eax;
	__asm        jmp    near ptr 0x0043927C;
	__asm        mov    sScratch.reference, 0;
	__asm        jmp    near ptr 0x00439281;
	__asm        lea    ecx, [ebp-0x158];
	__asm        call   0x00412080;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     near ptr 0x004392C0;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004392C5;
// LINE 985:
	__asm        cmp    dword ptr ds:[0x597664], 1;
	__asm        je     near ptr 0x00439332;
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00439332;
// LINE 986:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00439323;
// LINE 987:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   0x0042BA26;
	__asm        add    esp, 8;
// LINE 988:
	__asm        jmp    near ptr 0x00439332;
// LINE 989:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x004157D0;
// LINE 991:
	__asm        jmp    near ptr 0x00439337;
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x0043935A;
// LINE 994:
	__asm        inc    nStationCount;
// LINE 995:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     near ptr 0x004393A3;
	__asm        lea    eax, tempRadioStation.<vftable>;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0043A870;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+8], 0x98;
	__asm        jmp    near ptr 0x004393C7;
	__asm        jmp    near ptr 0x004393A8;
	__asm        lea    eax, tempRadioStation.<vftable>;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x0043B5E0;
	__asm        jmp    near ptr 0x004393CC;
// LINE 998:
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    radioStationStringListIterator.node, eax;
	__asm        jmp    near ptr 0x004393E2;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x15C], eax;
	__asm        jmp    near ptr 0x004393F3;
// LINE 999:
	__asm        jmp    near ptr 0x00438823;
// LINE 1002:
	__asm        jmp    near ptr 0x004393FD;
	__asm        jmp    near ptr 0x00439402;
	__asm        jmp    near ptr 0x00439407;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x20];
	__asm        jg     near ptr 0x0043943D;
// LINE 1003:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
// LINE 1005:
	__asm        mov    eax, nStationCount;
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x0043944E;
	__asm        lea    ecx, [ebp-0xC8];
	__asm        call   0x00412130;
	__asm        lea    ecx, [ebp-0xD0];
	__asm        call   0x00412130;
	__asm        lea    ecx, tempDirectory.<Directory+0x00:None>;
	__asm        call   0x00428C70;
	__asm        lea    ecx, tempRadioStation.<vftable>;
	__asm        call   0x004341C6;
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x19C], eax;
	__asm        jmp    near ptr 0x00439497;
	__asm        jmp    near ptr 0x0043949C;
	__asm        mov    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   0x0043A080;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   0x0043A940;
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x004394EC;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x00439503;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   0x0043A8B0;
	__asm        jmp    near ptr 0x00439508;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sCurrentLanguage.c_str_ptr, 0;
	__asm        je     near ptr 0x00439547;
	__asm        mov    eax, sCurrentLanguage.c_str_ptr;
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043954C;
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sScratch.c_str_ptr, 0;
	__asm        je     near ptr 0x0043958B;
	__asm        mov    eax, sScratch.c_str_ptr;
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439590;
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sCommercialDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x004395CF;
	__asm        mov    eax, sCommercialDirectory.c_str_ptr;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004395D4;
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sStationDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x00439613;
	__asm        mov    eax, sStationDirectory.c_str_ptr;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439618;
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sRadioDirectory.c_str_ptr, 0;
	__asm        je     near ptr 0x0043964E;
	__asm        mov    eax, sRadioDirectory.c_str_ptr;
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x194], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439653;
	__asm        mov    eax, [ebp-0x160];
	__asm        jmp    near ptr 0x0043965E;
// LINE 1006:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00439663
int  Radio::DoesAtLeastOneSoundEntryExistForTheGivenDirectory(const class basic_string<char>& sDirectory) {
// LINE 1013:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x5984C4];
	__asm        mov    [ebp-0x6C], eax;
// LINE 1014:
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0043968B;
	__asm        jmp    near ptr 0x00439690;
	__asm        jmp    near ptr 0x00439695;
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004396BA;
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004396C6;
	__asm        jmp    near ptr 0x004396C6;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    near ptr 0x004396C6;
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        sub    eax, [ebp-0x30];
	__asm        cmp    eax, [ebp-0x68];
	__asm        ja     near ptr 0x00439715;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439706;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439715;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x004397C1;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043979E;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00439799;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00439799;
	__asm        jmp    near ptr 0x004397A7;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004397B6;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004397C8;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x004397D4;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00439812;
	__asm        jmp    near ptr 0x004397E3;
	__asm        jmp    near ptr 0x004397E8;
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00439812;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00439820;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x34];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   0x00411B80;
	__asm        mov    eax, [ebp-0x28];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004398BB;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004398BB;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043989B;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004398A0;
	__asm        jmp    near ptr 0x004398A5;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004398B6;
	__asm        jmp    near ptr 0x004398BB;
	__asm        jmp    near ptr 0x004398C0;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004398E2;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004398E7;
	__asm        jmp    near ptr 0x004398EC;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x00485735;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043997E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0043997E;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043995E;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00439963;
	__asm        jmp    near ptr 0x00439968;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00439979;
	__asm        jmp    near ptr 0x0043997E;
	__asm        jmp    near ptr 0x00439983;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004399A5;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004399AA;
	__asm        mov    eax, [ebp-4];
	__asm        jmp    near ptr 0x004399B2;
// LINE 1015:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 1:000389c0-00038bcf Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004399c0
// list<basic_string<char>>::get_node



// Contribution: 1:00038bd0-00038c3a Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00038c40-00038cbd Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00038cc0-00039038 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00439cc0
// vector<int>::push_back



// Contribution: 1:00039040-00039078 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0043a040
// RadioStation::`scalar deleting destructor'



// Contribution: 1:00039080-000390b1 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a080
// list<basic_string<char>>::begin



// Contribution: 1:000390c0-000392c0 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a0c0
// list<basic_string<char>>::~list<basic_string<char>>



// Contribution: 1:000392d0-0003930b Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a2d0
// list<basic_string<char>>::iterator::operator++



// Contribution: 1:00039310-00039440 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a310
// list<basic_string<char>>::erase



// Contribution: 1:00039450-00039488 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0043a450
// Radio::`scalar deleting destructor'



// Contribution: 1:00039490-000396e1 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a490
// list<basic_string<char>>::list<basic_string<char>>



// Contribution: 1:000396f0-000397c3 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a6f0
// vector<RadioStation>::erase



// Contribution: 1:000397d0-000397ff Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00039800-00039868 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a800
// allocate



// Contribution: 1:00039870-000398a8 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a870
// construct



// Contribution: 1:000398b0-0003993e Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a8b0
// list<basic_string<char>>::deallocate_buffers



// Contribution: 1:00039940-00039adc Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a940
// list<basic_string<char>>::erase



// Contribution: 1:00039ae0-0003a09c Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043aae0
// list<basic_string<char>>::operator=



// Contribution: 1:0003a0a0-0003a247 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b0a0
// list<basic_string<char>>::add_new_buffer



// Contribution: 1:0003a250-0003a5de Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b250
// vector<int>::operator=



// Contribution: 1:0003a5e0-0003a9d6 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b5e0
// vector<RadioStation>::insert_aux



// Contribution: 1:0003a9e0-0003adec Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b9e0
// operator+



// Contribution: 1:0003adf0-0003b256 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043bdf0
// operator+



// Contribution: 1:0003b260-0003b2eb Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043c260
// __random_shuffle



// Contribution: 1:0003b2f0-0003b70f Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043c2f0
// __iter_swap



// Contribution: 2:00000518-0000055b Module: 59, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f518
// ??_7RadioStation@@6B@


// Contribution: 2:00000560-000005af Module: 59, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f560
// ??_7Radio@@6B@


// Contribution: 3:00001488-0000155c Module: 59, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598488
// StationDirectoryNameArray
// GLOBAL: COPTER_D 0x005984ac
// SZ_RADIO_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984b0
// SZ_RADIO_COMMERCIAL_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984b4
// SZ_RADIO_STATIONS_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984b8
// SZ_RADIO_STATIONS_MUSIC_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984bc
// SZ_RADIO_STATIONS_DJ_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984c0
// SZ_RADIO_STATIONS_JINGLE_DIRECTORY_NAME
// GLOBAL: COPTER_D 0x005984c4
// SZ_SOUND_FILE_FILTER
// GLOBAL: COPTER_D 0x005984c8
// SZ_CALL_ID_FILTER


// Contribution: 3:00001560-00001563 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598560
// list<basic_string<char>>::number_of_lists


// Contribution: 3:00001564-00001567 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598564
// list<basic_string<char>>::last


// Contribution: 3:00001568-0000156b Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598568
// list<basic_string<char>>::next_avail


// Contribution: 3:0000156c-0000156f Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059856c
// list<basic_string<char>>::free_list


// Contribution: 3:00001570-00001573 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598570
// list<basic_string<char>>::buffer_list
