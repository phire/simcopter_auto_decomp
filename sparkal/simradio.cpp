// Module: Simradio.obj
// Source: C:\Copter\source\sparkal\Simradio.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ struct list<basic_string<char>>::list_node_buffer (forward reference);
struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
};

// Type: /*packed*/ struct list<basic_string<char>>::list_node (forward reference);
struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
};

// Type: uint32_t;

// Type: char *;

// Type: void;

// Type: /*packed*/ class RadioStation (forward reference);
// VTABLE: COPTER_D 0x0058f518
class RadioStation{ // packed(0x98 bytes) TI: 0x11a5
public:
	void RadioStation(const /*packed*/ class RadioStation&);
	void RadioStation();
	/*packed*/ class RadioStation& operator=(const /*packed*/ class RadioStation&);
	virtual void ~RadioStation(); // vtable+0x0
	virtual int32_t Initialize(); // vtable+0x4
	virtual void StationSet(); // vtable+0x8
	virtual int32_t DoState(); // vtable+0xc
	virtual void LoadAllPlaylists(); // vtable+0x10
	virtual void ShufflePlaylist(); // vtable+0x14
	virtual void RandomizeStringList(/*packed*/ class list<basic_string<char>>&); // vtable+0x18
	virtual void ShuffleCycle(); // vtable+0x1c
	virtual void SetPlayStatus(int32_t); // vtable+0x20
	virtual int32_t IsPlaying(); // vtable+0x24
	virtual void GetStationCallSign(/*packed*/ class basic_string<char>&); // vtable+0x28
	virtual enum RadioStationType GetRadioStationType(); // vtable+0x2c
	virtual int32_t IsCycleTypePresent(enum RadioStationCycleType); // vtable+0x30
protected:
	virtual void MoveToNextPlaylistItem(enum RadioStationCycleType); // vtable+0x34
	virtual int32_t ReadCallSignFromDisk(); // vtable+0x38
	virtual int32_t DetectRadioStationType(); // vtable+0x3c
	virtual int32_t StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType); // vtable+0x40
	/*+0x4*/   int32_t bPlaying;
	/*+0x8*/   /*packed*/ struct RadioStationState myRadioStationState; // 0x28 bytes
	/*+0x30*/  enum RadioStationType myRadioStationType;
	/*+0x34*/  /*unpacked*/ class Radio *myRadio;
	/*+0x38*/  /*packed*/ class basic_string<char> sCallSign; // 0x8 bytes
	/*+0x40*/  /*packed*/ class basic_string<char> sStationBaseDirectory; // 0x8 bytes
	/*+0x48*/  /*packed*/ class basic_string<char> sMusicDirectory; // 0x8 bytes
	/*+0x50*/  /*packed*/ class list<basic_string<char>> musicSelectionList; // 0x8 bytes
	/*+0x58*/  /*packed*/ class list<basic_string<char>>::iterator musicSelectionListIterator;
	/*+0x5c*/  /*packed*/ class basic_string<char> sDJDirectory; // 0x8 bytes
	/*+0x64*/  /*packed*/ class list<basic_string<char>> djSelectionList; // 0x8 bytes
	/*+0x6c*/  /*packed*/ class list<basic_string<char>>::iterator djSelectionListIterator;
	/*+0x70*/  /*packed*/ class basic_string<char> sCommercialDirectory; // 0x8 bytes
	/*+0x78*/  /*packed*/ class list<basic_string<char>> commercialSelectionList; // 0x8 bytes
	/*+0x80*/  /*packed*/ class list<basic_string<char>>::iterator commercialSelectionListIterator;
	/*+0x84*/  /*packed*/ class basic_string<char> sJingleDirectory; // 0x8 bytes
	/*+0x8c*/  /*packed*/ class list<basic_string<char>> jingleSelectionList; // 0x8 bytes
	/*+0x94*/  /*packed*/ class list<basic_string<char>>::iterator jingleSelectionListIterator;
};

// Type: int32_t;

// Type: unsigned long;

// Type: enum RadioStationCycleType;
enum RadioStationCycleType {
	nRadioStationCycleTypeMusicNone = -1,
	nRadioStationCycleTypeMusic = 0,
	nRadioStationCycleTypeDJ = 1,
	nRadioStationCycleTypeCommercial = 2,
	nRadioStationCycleTypeJingle = 3,
	nRadioStationCycleTypeAll = 4,
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*unpacked*/ class Directory (forward reference);
// Directory Class implementation not found

// Type: /*packed*/ class list<basic_string<char>> (forward reference);
class list<basic_string<char>>{ // packed(0x8 bytes) TI: 0x1cb1
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
	};
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static /*packed*/ class allocator<basic_string<char>> value_allocator;
	using value_type = /*packed*/ class basic_string<char>;
	using value_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using list_node_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node>;
	using link_type = /*packed*/ struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<basic_string<char>>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<basic_string<char>>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *free_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *next_avail;
	static /*packed*/ struct list<basic_string<char>>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<basic_string<char>>::list_node* get_node();
	void put_node(/*packed*/ struct list<basic_string<char>>::list_node*);
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cd3
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator++();
		/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cc6
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const /*packed*/ class list<basic_string<char>>&);
	void list<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>::const_iterator begin();
	/*packed*/ class list<basic_string<char>>::iterator begin();
	/*packed*/ class list<basic_string<char>>::const_iterator end();
	/*packed*/ class list<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void swap(/*packed*/ class list<basic_string<char>>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::const_iterator, /*packed*/ class list<basic_string<char>>::const_iterator);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class list<basic_string<char>>::iterator insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void erase(/*packed*/ class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>& operator=(const /*packed*/ class list<basic_string<char>>&);
protected:
	void transfer(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
public:
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&);
	void remove(const /*packed*/ class basic_string<char>&);
	void unique();
	void merge(/*packed*/ class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ class vector<basic_string<char>>;
class vector<basic_string<char>>{ // packed(0xc bytes) TI: 0x1f15
	using vector_allocator = /*packed*/ class allocator<basic_string<char>>;
	using value_type = /*packed*/ class basic_string<char>;
	using pointer = /*packed*/ class basic_string<char>*;
	using iterator = /*packed*/ class basic_string<char>*;
	using const_iterator = const /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int>;
protected:
	static /*packed*/ class allocator<basic_string<char>> static_allocator;
	/*+0x0*/   /*packed*/ class basic_string<char> *start;
	/*+0x4*/   /*packed*/ class basic_string<char> *finish;
	/*+0x8*/   /*packed*/ class basic_string<char> *end_of_storage;
	void insert_aux(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
public:
	const /*packed*/ class basic_string<char>* begin();
	/*packed*/ class basic_string<char>* begin();
	const /*packed*/ class basic_string<char>* end();
	/*packed*/ class basic_string<char>* end();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_iterator<basic_string<char> const *,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_iterator<basic_string<char> *,basic_string<char>,basic_string<char> &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ class basic_string<char>& operator[](uint32_t);
	/*packed*/ class basic_string<char>& operator[](uint32_t);
	void vector<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void vector<basic_string<char>>(const /*packed*/ class vector<basic_string<char>>&);
	void vector<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void vector<basic_string<char>>();
	void ~vector<basic_string<char>>();
	/*packed*/ class vector<basic_string<char>>& operator=(const /*packed*/ class vector<basic_string<char>>&);
	void reserve(uint32_t);
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void push_back(const /*packed*/ class basic_string<char>&);
	void swap(/*packed*/ class vector<basic_string<char>>&);
	void insert(/*packed*/ class basic_string<char>*, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class basic_string<char>* insert(/*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>&);
	void pop_back();
	void erase(/*packed*/ class basic_string<char>*, /*packed*/ class basic_string<char>*);
	void erase(/*packed*/ class basic_string<char>*);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: enum RadioStationType;
enum RadioStationType {
	nRadioStationTypeUnknown = -1,
	nRadioStationTypeClassical = 0,
	nRadioStationTypeRock = 1,
	nRadioStationTypeTechno = 2,
	nRadioStationTypeCountry = 3,
	nRadioStationTypeJazz = 4,
	nRadioStationTypeOldies = 5,
	nRadioStationTypeRB = 6,
	nRadioStationTypeEasy = 7,
	nRadioStationTypeTalk = 8,
	nRadioStationTypeCount = 9,
};

// Type: /*packed*/ class DirectoryEntry (forward reference);
class DirectoryEntry{ // packed(0x10 bytes) TI: 0x239f
public:
	void DirectoryEntry(/*unpacked*/ class Directory*, /*packed*/ class basic_string<char>&, long);
	void DirectoryEntry();
	char * operator char *();
	int32_t IsMediaRemovable();
	unsigned long GetSize();
	int32_t GetCreationDate();
	int32_t GetlastModificationDate();
	int32_t GetSerialNumber();
	void GetFullPath(/*packed*/ class basic_string<char>&);
	int32_t CreatePhysicalEntry();
	int32_t GetEntryExtension(/*packed*/ class basic_string<char>&);
	int32_t GetEntryMinusExtension(/*packed*/ class basic_string<char>&);
	/*+0x0*/   /*unpacked*/ class Directory *directoryParent;
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   long lType;
};

// Type: /*packed*/ struct RadioPreferences (forward reference);
struct RadioPreferences{ // packed(0x1c bytes) TI: 0x2a39
	/*+0x0*/   long lVolume;
	/*+0x4*/   int32_t bPreferToBeOn;
	/*+0x8*/   long lCurrentStation;
	/*+0xc*/   int32_t bOptionDJ;
	/*+0x10*/  int32_t bOptionCommercials;
	/*+0x14*/  int32_t bAutoMute;
	/*+0x18*/  int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: /*packed*/ struct RadioPreferences;
struct RadioPreferences{ // packed(0x1c bytes) TI: 0x2a39
	/*+0x0*/   long lVolume;
	/*+0x4*/   int32_t bPreferToBeOn;
	/*+0x8*/   long lCurrentStation;
	/*+0xc*/   int32_t bOptionDJ;
	/*+0x10*/  int32_t bOptionCommercials;
	/*+0x14*/  int32_t bAutoMute;
	/*+0x18*/  int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: enum RadioOption;
enum RadioOption {
	nRadioOptionDJ = 0,
	nRadioOptionCommercials = 1,
	nRadioOptionEnglish = 2,
};

// Type: long;

// Type: /*packed*/ class list<basic_string<char>>;
class list<basic_string<char>>{ // packed(0x8 bytes) TI: 0x1cb1
	using void_pointer = void * __ptr32;
	struct list<basic_string<char>>::list_node{ // packed(0x10 bytes) TI: 0x1cd7
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ class basic_string<char> data; // 0x8 bytes
	};
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node> list_node_allocator;
	static /*packed*/ class allocator<basic_string<char>> value_allocator;
	using value_type = /*packed*/ class basic_string<char>;
	using value_allocator_type = /*packed*/ class allocator<basic_string<char>>;
	using pointer = /*packed*/ class basic_string<char>*;
	using reference = /*packed*/ class basic_string<char>&;
	using const_reference = const /*packed*/ class basic_string<char>&;
	using list_node_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node>;
	using link_type = /*packed*/ struct list<basic_string<char>>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<basic_string<char>>::list_node_buffer{ // packed(0x8 bytes) TI: 0x1cd5
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<basic_string<char>>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<basic_string<char>>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<basic_string<char>>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<basic_string<char>>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *free_list;
	static /*packed*/ struct list<basic_string<char>>::list_node *next_avail;
	static /*packed*/ struct list<basic_string<char>>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<basic_string<char>>::list_node* get_node();
	void put_node(/*packed*/ struct list<basic_string<char>>::list_node*);
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cd3
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
		/*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator++();
		/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::iterator& operator--();
	};
	class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
	{ // packed(0x4 bytes) TI: 0x1cc6
	protected:
		/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
		const /*packed*/ class basic_string<char>& operator*();
		/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
		/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
		/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int>;
public:
	void list<basic_string<char>>(const /*packed*/ class list<basic_string<char>>&);
	void list<basic_string<char>>(const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	void list<basic_string<char>>(uint32_t, const /*packed*/ class basic_string<char>&);
	void list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>::const_iterator begin();
	/*packed*/ class list<basic_string<char>>::iterator begin();
	/*packed*/ class list<basic_string<char>>::const_iterator end();
	/*packed*/ class list<basic_string<char>>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::const_iterator,basic_string<char>,basic_string<char> const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<basic_string<char>>::iterator,basic_string<char>,basic_string<char> &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ class basic_string<char>& front();
	/*packed*/ class basic_string<char>& front();
	const /*packed*/ class basic_string<char>& back();
	/*packed*/ class basic_string<char>& back();
	void swap(/*packed*/ class list<basic_string<char>>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, uint32_t, const /*packed*/ class basic_string<char>&);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::const_iterator, /*packed*/ class list<basic_string<char>>::const_iterator);
	void insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>*, const /*packed*/ class basic_string<char>*);
	/*packed*/ class list<basic_string<char>>::iterator insert(/*packed*/ class list<basic_string<char>>::iterator, const /*packed*/ class basic_string<char>&);
	void push_front(const /*packed*/ class basic_string<char>&);
	void push_back(const /*packed*/ class basic_string<char>&);
	void erase(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void erase(/*packed*/ class list<basic_string<char>>::iterator);
	void pop_front();
	void pop_back();
	void ~list<basic_string<char>>();
	/*packed*/ class list<basic_string<char>>& operator=(const /*packed*/ class list<basic_string<char>>&);
protected:
	void transfer(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
public:
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&, /*packed*/ class list<basic_string<char>>::iterator);
	void splice(/*packed*/ class list<basic_string<char>>::iterator, /*packed*/ class list<basic_string<char>>&);
	void remove(const /*packed*/ class basic_string<char>&);
	void unique();
	void merge(/*packed*/ class list<basic_string<char>>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class RadioStation;
// VTABLE: COPTER_D 0x0058f518
class RadioStation{ // packed(0x98 bytes) TI: 0x11a5
public:
	void RadioStation(const /*packed*/ class RadioStation&);
	void RadioStation();
	/*packed*/ class RadioStation& operator=(const /*packed*/ class RadioStation&);
	virtual void ~RadioStation(); // vtable+0x0
	virtual int32_t Initialize(); // vtable+0x4
	virtual void StationSet(); // vtable+0x8
	virtual int32_t DoState(); // vtable+0xc
	virtual void LoadAllPlaylists(); // vtable+0x10
	virtual void ShufflePlaylist(); // vtable+0x14
	virtual void RandomizeStringList(/*packed*/ class list<basic_string<char>>&); // vtable+0x18
	virtual void ShuffleCycle(); // vtable+0x1c
	virtual void SetPlayStatus(int32_t); // vtable+0x20
	virtual int32_t IsPlaying(); // vtable+0x24
	virtual void GetStationCallSign(/*packed*/ class basic_string<char>&); // vtable+0x28
	virtual enum RadioStationType GetRadioStationType(); // vtable+0x2c
	virtual int32_t IsCycleTypePresent(enum RadioStationCycleType); // vtable+0x30
protected:
	virtual void MoveToNextPlaylistItem(enum RadioStationCycleType); // vtable+0x34
	virtual int32_t ReadCallSignFromDisk(); // vtable+0x38
	virtual int32_t DetectRadioStationType(); // vtable+0x3c
	virtual int32_t StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType); // vtable+0x40
	/*+0x4*/   int32_t bPlaying;
	/*+0x8*/   /*packed*/ struct RadioStationState myRadioStationState; // 0x28 bytes
	/*+0x30*/  enum RadioStationType myRadioStationType;
	/*+0x34*/  /*unpacked*/ class Radio *myRadio;
	/*+0x38*/  /*packed*/ class basic_string<char> sCallSign; // 0x8 bytes
	/*+0x40*/  /*packed*/ class basic_string<char> sStationBaseDirectory; // 0x8 bytes
	/*+0x48*/  /*packed*/ class basic_string<char> sMusicDirectory; // 0x8 bytes
	/*+0x50*/  /*packed*/ class list<basic_string<char>> musicSelectionList; // 0x8 bytes
	/*+0x58*/  /*packed*/ class list<basic_string<char>>::iterator musicSelectionListIterator;
	/*+0x5c*/  /*packed*/ class basic_string<char> sDJDirectory; // 0x8 bytes
	/*+0x64*/  /*packed*/ class list<basic_string<char>> djSelectionList; // 0x8 bytes
	/*+0x6c*/  /*packed*/ class list<basic_string<char>>::iterator djSelectionListIterator;
	/*+0x70*/  /*packed*/ class basic_string<char> sCommercialDirectory; // 0x8 bytes
	/*+0x78*/  /*packed*/ class list<basic_string<char>> commercialSelectionList; // 0x8 bytes
	/*+0x80*/  /*packed*/ class list<basic_string<char>>::iterator commercialSelectionListIterator;
	/*+0x84*/  /*packed*/ class basic_string<char> sJingleDirectory; // 0x8 bytes
	/*+0x8c*/  /*packed*/ class list<basic_string<char>> jingleSelectionList; // 0x8 bytes
	/*+0x94*/  /*packed*/ class list<basic_string<char>>::iterator jingleSelectionListIterator;
};

// Type: enum MTimer::TimerResolution;
enum TimerResolution {
	nTimerResolutionMicroseconds = 0,
	nTimerResolutionMilliseconds = 1,
	nTimerResolutionSeconds = 2,
};

// Type: /*packed*/ class MTimer (forward reference);
class MTimer{ // packed(0x10 bytes) TI: 0x1968
	enum TimerResolution {
		nTimerResolutionMicroseconds = 0,
		nTimerResolutionMilliseconds = 1,
		nTimerResolutionSeconds = 2,
	};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	/*+0x0*/   enum MTimer::TimerResolution nTimerResolution;
	/*+0x4*/   unsigned long lStartTime;
	/*+0x8*/   unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	/*+0xc*/   unsigned long lFrequency;
};

// Type: /*packed*/ class vector<int> (forward reference);
class vector<int>{ // packed(0xc bytes) TI: 0x1f70
	using vector_allocator = /*packed*/ class allocator<int>;
	using value_type = int32_t;
	using pointer = int32_t *;
	using iterator = int32_t *;
	using const_iterator = int32_t *;
	using reference = int32_t&;
	using const_reference = const int32_t&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<int const *,int,int const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<int *,int,int &,int>;
protected:
	static /*packed*/ class allocator<int> static_allocator;
	/*+0x0*/   int32_t * start;
	/*+0x4*/   int32_t * finish;
	/*+0x8*/   int32_t * end_of_storage;
	void insert_aux(int32_t *, const int32_t&);
public:
	int32_t * begin();
	int32_t * begin();
	int32_t * end();
	int32_t * end();
	/*unpacked*/ class reverse_iterator<int const *,int,int const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<int *,int,int &,int> rbegin();
	/*unpacked*/ class reverse_iterator<int const *,int,int const &,int> rend();
	/*unpacked*/ class reverse_iterator<int *,int,int &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const int32_t& operator[](uint32_t);
	int32_t& operator[](uint32_t);
	void vector<int>(int32_t *, int32_t *);
	void vector<int>(const /*packed*/ class vector<int>&);
	void vector<int>(uint32_t, const int32_t&);
	void vector<int>();
	void ~vector<int>();
	/*packed*/ class vector<int>& operator=(const /*packed*/ class vector<int>&);
	void reserve(uint32_t);
	const int32_t& front();
	int32_t& front();
	const int32_t& back();
	int32_t& back();
	void push_back(const int32_t&);
	void swap(/*packed*/ class vector<int>&);
	void insert(int32_t *, uint32_t, const int32_t&);
	void insert(int32_t *, int32_t *, int32_t *);
	int32_t * insert(int32_t *, const int32_t&);
	void pop_back();
	void erase(int32_t *, int32_t *);
	void erase(int32_t *);
};

// Type: /*packed*/ class list<basic_string<char>>::iterator (forward reference);
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ class vector<RadioStation> (forward reference);
class vector<RadioStation>{ // packed(0xc bytes) TI: 0x1d06
	using vector_allocator = /*packed*/ class allocator<RadioStation>;
	using value_type = /*packed*/ class RadioStation;
	using pointer = /*packed*/ class RadioStation*;
	using iterator = /*packed*/ class RadioStation*;
	using const_iterator = const /*packed*/ class RadioStation*;
	using reference = /*packed*/ class RadioStation&;
	using const_reference = const /*packed*/ class RadioStation&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = /*unpacked*/ class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int>;
protected:
	static /*packed*/ class allocator<RadioStation> static_allocator;
	/*+0x0*/   /*packed*/ class RadioStation *start;
	/*+0x4*/   /*packed*/ class RadioStation *finish;
	/*+0x8*/   /*packed*/ class RadioStation *end_of_storage;
	void insert_aux(/*packed*/ class RadioStation*, const /*packed*/ class RadioStation&);
public:
	const /*packed*/ class RadioStation* begin();
	/*packed*/ class RadioStation* begin();
	const /*packed*/ class RadioStation* end();
	/*packed*/ class RadioStation* end();
	/*unpacked*/ class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int> rbegin();
	/*unpacked*/ class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int> rbegin();
	/*unpacked*/ class reverse_iterator<RadioStation const *,RadioStation,RadioStation const &,int> rend();
	/*unpacked*/ class reverse_iterator<RadioStation *,RadioStation,RadioStation &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const /*packed*/ class RadioStation& operator[](uint32_t);
	/*packed*/ class RadioStation& operator[](uint32_t);
	void vector<RadioStation>(const /*packed*/ class RadioStation*, const /*packed*/ class RadioStation*);
	void vector<RadioStation>(const /*packed*/ class vector<RadioStation>&);
	void vector<RadioStation>(uint32_t, const /*packed*/ class RadioStation&);
	void vector<RadioStation>();
	void ~vector<RadioStation>();
	/*packed*/ class vector<RadioStation>& operator=(const /*packed*/ class vector<RadioStation>&);
	void reserve(uint32_t);
	const /*packed*/ class RadioStation& front();
	/*packed*/ class RadioStation& front();
	const /*packed*/ class RadioStation& back();
	/*packed*/ class RadioStation& back();
	void push_back(const /*packed*/ class RadioStation&);
	void swap(/*packed*/ class vector<RadioStation>&);
	void insert(/*packed*/ class RadioStation*, uint32_t, const /*packed*/ class RadioStation&);
	void insert(/*packed*/ class RadioStation*, const /*packed*/ class RadioStation*, const /*packed*/ class RadioStation*);
	/*packed*/ class RadioStation* insert(/*packed*/ class RadioStation*, const /*packed*/ class RadioStation&);
	void pop_back();
	void erase(/*packed*/ class RadioStation*, /*packed*/ class RadioStation*);
	void erase(/*packed*/ class RadioStation*);
};

// Type: int32_t *;

// Type: /*packed*/ class list<basic_string<char>>::const_iterator;
class list<basic_string<char>>::const_iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cc6
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void const_iterator(const /*packed*/ class list<basic_string<char>>::iterator&);
	void const_iterator();
protected:
	void const_iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::const_iterator&);
	const /*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::const_iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::const_iterator& operator++();
	/*packed*/ class list<basic_string<char>>::const_iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::const_iterator& operator--();
};

// Type: /*packed*/ struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x1847
};



// Contribution: 1:00032120-000389b8 Module: 59, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00433120
void RadioStation::RadioStation() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T39;
_T39:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   MTimer::MTimer;
	__asm        jmp    _T4b;
_T4b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tb2;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Ta4;
_Ta4:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _Tbc;
_Tb2:
	this->sCallSign.reference = 0x0;
_Tbc:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    _Tcb;
_Tcb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T11e;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T110;
_T110:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T128;
_T11e:
	this->sStationBaseDirectory.reference = 0x0;
_T128:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        jmp    _T137;
_T137:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T18a;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    _T194;
_T18a:
	this->sMusicDirectory.reference = 0x0;
_T194:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        jmp    _T1a3;
_T1a3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1e6;
_T1e6:
	__asm        jmp    _T1eb;
_T1eb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T23e;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T230;
_T230:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T248;
_T23e:
	this->sDJDirectory.reference = 0x0;
_T248:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    _T257;
_T257:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T29a;
_T29a:
	__asm        jmp    _T29f;
_T29f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2f2;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T2e4;
_T2e4:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T2fc;
_T2f2:
	this->sCommercialDirectory.reference = 0x0;
_T2fc:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x70], 0;
	__asm        jmp    _T30b;
_T30b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T34e;
_T34e:
	__asm        jmp    _T353;
_T353:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T380;

	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T38d;
_T380:
	this->sJingleDirectory.reference = 0x0;
_T38d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    _T39f;
_T39f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3f7;
_T3f7:
	__asm        jmp    _T3fc;
_T3fc:
	this-><vftable> = 0x58f518;
// LINE 64:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        lea    eax, [ebp-4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::push_back;
// LINE 65:
	__asm        mov    dword ptr [ebp-8], 1;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::push_back;
// LINE 66:
	__asm        mov    dword ptr [ebp-0xC], 2;
	__asm        lea    eax, [ebp-0xC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::push_back;
// LINE 67:
	__asm        mov    dword ptr [ebp-0x10], 3;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::push_back;
// LINE 68:
	__asm        jmp    _T47a;
_T47a:
	__asm        jmp    _T47f;
_T47f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T496;
_T496:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   __random_shuffle;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4ad;
// LINE 69:
_T4ad:
	this->myRadioStationState.nCurrentCycleIndex = 0x0;
// LINE 70:
	this->myRadioStationState.nCurrentCycleSubIndex = 0x0;
// LINE 71:
	this->myRadioStationState.bPaused = 0x0;
// LINE 72:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   MTimer::SetResolution;
// LINE 73:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00433605
void RadioStation::RadioStation(const /*packed*/ class RadioStation& copyRadioStation) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    _T2f;
_T2f:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        call   MTimer::MTimer;
	__asm        jmp    _T41;
_T41:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T94;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T9e;
_T94:
	this->sCallSign.reference = 0x0;
_T9e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 0;
	__asm        jmp    _Tad;
_Tad:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T100;

	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tf2;
_Tf2:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T10a;
_T100:
	this->sStationBaseDirectory.reference = 0x0;
_T10a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
	__asm        jmp    _T119;
_T119:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T16c;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T15e;
_T15e:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    _T176;
_T16c:
	this->sMusicDirectory.reference = 0x0;
_T176:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
	__asm        jmp    _T185;
_T185:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1c8;
_T1c8:
	__asm        jmp    _T1cd;
_T1cd:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1f7;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T201;
_T1f7:
	this->sDJDirectory.reference = 0x0;
_T201:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5C], 0;
	__asm        jmp    _T210;
_T210:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x68], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T253;
_T253:
	__asm        jmp    _T258;
_T258:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T282;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T28c;
_T282:
	this->sCommercialDirectory.reference = 0x0;
_T28c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x70], 0;
	__asm        jmp    _T29b;
_T29b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2de;
_T2de:
	__asm        jmp    _T2e3;
_T2e3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T310;

	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T31d;
_T310:
	this->sJingleDirectory.reference = 0x0;
_T31d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    _T32f;
_T32f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        inc    list<basic_string<char>>::number_of_lists;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T387;
_T387:
	__asm        jmp    _T38c;
_T38c:
	this-><vftable> = 0x58f518;
// LINE 81:
	this->bPlaying = copyRadioStation.bPlaying;
// LINE 82:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::operator=;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T3fe;
// LINE 83:
_T3fe:
	this->myRadioStationType = copyRadioStation.myRadioStationType;
// LINE 84:
	this->myRadio = copyRadioStation.myRadio;
// LINE 85:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        mov    ecx, copyRadioStation;
	__asm        add    ecx, 0x38;
	__asm        cmp    eax, ecx;
	__asm        je     _T4b0;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T43a;
_T43a:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T464;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T4b0;
_T464:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T4a6;

	__asm        jmp    _T480;
_T480:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T4b0;
_T4a6:
	this->sCallSign.reference = 0x0;
_T4b0:
	__asm        jmp    _T4b5;
// LINE 86:
_T4b5:
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        mov    ecx, copyRadioStation;
	__asm        add    ecx, 0x40;
	__asm        cmp    eax, ecx;
	__asm        je     _T54f;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T4d9;
_T4d9:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T503;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T54f;
_T503:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T545;

	__asm        jmp    _T51f;
_T51f:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T54f;
_T545:
	this->sStationBaseDirectory.reference = 0x0;
_T54f:
	__asm        jmp    _T554;
// LINE 87:
_T554:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        call   basic_string<char>::operator=;
// LINE 88:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 89:
	this->musicSelectionListIterator.node = copyRadioStation.musicSelectionListIterator.node;
// LINE 90:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::operator=;
// LINE 91:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 92:
	this->djSelectionListIterator.node = copyRadioStation.djSelectionListIterator.node;
// LINE 93:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   basic_string<char>::operator=;
// LINE 94:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 95:
	this->commercialSelectionListIterator.node = copyRadioStation.commercialSelectionListIterator.node;
// LINE 96:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   basic_string<char>::operator=;
// LINE 97:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 98:
	this->jingleSelectionListIterator.node = copyRadioStation.jingleSelectionListIterator.node;
// LINE 99:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00433c3e
/*packed*/ class RadioStation& RadioStation::operator=(const /*packed*/ class RadioStation& copyRadioStation) {
// LINE 107:
	__asm        mov    eax, this;
	__asm        cmp    copyRadioStation, eax;
	__asm        jne    _T20;
// LINE 108:
	return this;
// LINE 110:
_T20:
	this->bPlaying = copyRadioStation.bPlaying;
// LINE 111:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        call   vector<int>::operator=;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x20;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T89;
// LINE 112:
_T89:
	this->myRadioStationType = copyRadioStation.myRadioStationType;
// LINE 113:
	this->myRadio = copyRadioStation.myRadio;
// LINE 114:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        cmp    eax, ecx;
	__asm        je     _T176;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tf6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tf6;

	__asm        push   1;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _Tf6;
_Tf6:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        jmp    _T100;
_T100:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T12a;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T176;
_T12a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T16c;

	__asm        jmp    _T146;
_T146:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    _T176;
_T16c:
	this->sCallSign.reference = 0x0;
_T176:
	__asm        jmp    _T17b;
// LINE 115:
_T17b:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        cmp    eax, ecx;
	__asm        je     _T250;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1d0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1d0;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1d0;
_T1d0:
	__asm        jmp    _T1d5;
_T1d5:
	__asm        jmp    _T1da;
_T1da:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T204;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T250;
_T204:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T246;

	__asm        jmp    _T220;
_T220:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T250;
_T246:
	this->sStationBaseDirectory.reference = 0x0;
_T250:
	__asm        jmp    _T255;
// LINE 116:
_T255:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        cmp    eax, ecx;
	__asm        je     _T2ef;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x48;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T279;
_T279:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T2a3;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T2ef;
_T2a3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T2e5;

	__asm        jmp    _T2bf;
_T2bf:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
	__asm        jmp    _T2ef;
_T2e5:
	this->sMusicDirectory.reference = 0x0;
_T2ef:
	__asm        jmp    _T2f4;
// LINE 117:
_T2f4:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 118:
	this->musicSelectionListIterator.node = copyRadioStation.musicSelectionListIterator.node;
// LINE 119:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        cmp    eax, ecx;
	__asm        je     _T3ac;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T336;
_T336:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T360;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T3ac;
_T360:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T3a2;

	__asm        jmp    _T37c;
_T37c:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T3ac;
_T3a2:
	this->sDJDirectory.reference = 0x0;
_T3ac:
	__asm        jmp    _T3b1;
// LINE 120:
_T3b1:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 121:
	this->djSelectionListIterator.node = copyRadioStation.djSelectionListIterator.node;
// LINE 122:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        cmp    eax, ecx;
	__asm        je     _T469;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T3f3;
_T3f3:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T41d;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T469;
_T41d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T45f;

	__asm        jmp    _T439;
_T439:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T469;
_T45f:
	this->sCommercialDirectory.reference = 0x0;
_T469:
	__asm        jmp    _T46e;
// LINE 123:
_T46e:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 124:
	this->commercialSelectionListIterator.node = copyRadioStation.commercialSelectionListIterator.node;
// LINE 125:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        cmp    eax, ecx;
	__asm        je     _T54b;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T4be;
_T4be:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T4f4;

	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T54b;
_T4f4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T53e;

	__asm        jmp    _T510;
_T510:
	__asm        mov    eax, copyRadioStation;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T54b;
_T53e:
	this->sJingleDirectory.reference = 0x0;
_T54b:
	__asm        jmp    _T550;
// LINE 126:
_T550:
	__asm        mov    eax, copyRadioStation;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::operator=;
// LINE 127:
	this->jingleSelectionListIterator.node = copyRadioStation.jingleSelectionListIterator.node;
// LINE 128:
	return this;
// LINE 129:
}

// FUNCTION: COPTER_D 0x004341c6
void RadioStation::~RadioStation() {

	this-><vftable> = 0x58f518;
// LINE 140:
	__asm        jmp    _T1a;
_T1a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T31;
_T31:
	__asm        jmp    _T36;
_T36:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T4f;
_T4f:
	__asm        jmp    _T54;
_T54:
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T8d;
_T8d:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _Ta7;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::deallocate_buffers;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tf6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tf6;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _Tf6;
_Tf6:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T129;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T129:
	__asm        jmp    _T12e;
_T12e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T142;
_T142:
	__asm        jmp    _T147;
_T147:
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::erase;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T188;
_T188:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _T19f;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::deallocate_buffers;
_T19f:
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1e5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1e5;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1e5;
_T1e5:
	__asm        jmp    _T1ea;
_T1ea:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x70], 0;
	__asm        je     _T212;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T212:
	__asm        jmp    _T217;
_T217:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::~list<basic_string<char>>;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T263;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T263;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T263;
_T263:
	__asm        jmp    _T268;
_T268:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T290;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T290:
	__asm        jmp    _T295;
_T295:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::~list<basic_string<char>>;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2e1;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T2e1;
_T2e1:
	__asm        jmp    _T2e6;
_T2e6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        je     _T30e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x48];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T30e:
	__asm        jmp    _T313;
_T313:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x40;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T346;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T346:
	__asm        jmp    _T34b;
_T34b:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x38;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T37e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T37e:
	__asm        jmp    _T383;
_T383:
	__asm        jmp    _T388;
_T388:
	__asm        jmp    _T38d;
_T38d:
	__asm        jmp    _T392;
_T392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3ac;
_T3ac:
	__asm        jmp    _T3b1;
_T3b1:
	return;
}

// FUNCTION: COPTER_D 0x00434581
int32_t RadioStation::Initialize() {
// LINE 147:
	return 0x1;
// LINE 148:
}

// FUNCTION: COPTER_D 0x0043459c
void RadioStation::SetPlayStatus(int32_t bNewPlaying) {
// LINE 156:
	this->bPlaying = bNewPlaying;
// LINE 159:
	return;
}

// FUNCTION: COPTER_D 0x004345bd
void RadioStation::StationSet() {
// LINE 166:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 167:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 168:
	return;
}

// FUNCTION: COPTER_D 0x004345e9
int32_t RadioStation::IsPlaying() {
// LINE 176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    _T17;
// LINE 177:
_T17:
}

// FUNCTION: COPTER_D 0x00434605
int32_t RadioStation::DoState() {
	/*bp-0x4*/   unsigned long lElapsedTime;

// LINE 187:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x24];
	__asm        test   eax, eax;
	__asm        jne    _T29;
// LINE 188:
	return 0x1;
// LINE 190:
_T29:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T369;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T44;
_T44:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     _Tc7;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 1;
	__asm        jne    _T71;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _Tb5;

	__asm        jmp    _Tb5;
_T71:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T9e;

	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _Tb5;

	__asm        jmp    _Tb5;
_T9e:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        add    [ebp-0x18], eax;
_Tc7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T105;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        je     _T105;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedTime, eax;
	__asm        jmp    _T110;
_T105:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    lElapsedTime, eax;
	__asm        jmp    _T110;
// LINE 192:
_T110:
	__asm        cmp    lElapsedTime, 0xFA0;
	__asm        jb     _T35f;
// LINE 194:
	__asm        jmp    _T122;
_T122:
	__asm        jmp    _T127;
_T127:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        jne    _T18f;
// LINE 195:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     _T18f;
// LINE 196:
	__asm        call   rand;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0x4B;
	__asm        jge    _T18f;
// LINE 200:
	this->myRadioStationState.nCurrentCycleSubIndex++;
// LINE 201:
	this->myRadioStationState.bPaused = 0x0;
// LINE 202:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 203:
	return 0x1;
// LINE 208:
_T18f:
	this->myRadioStationState.nCurrentCycleIndex++;
// LINE 209:
	__asm        jmp    _T19a;
_T19a:
	__asm        jmp    _T19f;
_T19f:
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x14];
	__asm        jne    _T1d4;
// LINE 210:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 211:
	this->myRadioStationState.nCurrentCycleIndex = 0x0;
// LINE 213:
_T1d4:
	__asm        jmp    _T1d9;
_T1d9:
	__asm        jmp    _T1de;
_T1de:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        jne    _T225;
// LINE 216:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     _T220;
// LINE 217:
	this->myRadioStationState.bPaused = 0x0;
// LINE 218:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 221:
_T220:
	__asm        jmp    _T355;
_T225:
	__asm        jmp    _T22a;
_T22a:
	__asm        jmp    _T22f;
_T22f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 1;
	__asm        jne    _T28c;
// LINE 223:
	__asm        call   rand;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0x32;
	__asm        jge    _T287;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     _T287;
// LINE 225:
	this->myRadioStationState.bPaused = 0x0;
// LINE 226:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 234:
_T287:
	__asm        jmp    _T355;
_T28c:
	__asm        jmp    _T291;
_T291:
	__asm        jmp    _T296;
_T296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 2;
	__asm        jne    _T2f3;
// LINE 236:
	__asm        call   rand;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0xA;
	__asm        jge    _T2ee;

	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     _T2ee;
// LINE 238:
	this->myRadioStationState.bPaused = 0x0;
// LINE 239:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 243:
_T2ee:
	__asm        jmp    _T355;
_T2f3:
	__asm        jmp    _T2f8;
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    dword ptr [ecx+eax*4], 3;
	__asm        jne    _T355;
// LINE 245:
	__asm        call   rand;
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    edx, 0xA;
	__asm        jge    _T355;

	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
	__asm        test   eax, eax;
	__asm        je     _T355;
// LINE 247:
	this->myRadioStationState.bPaused = 0x0;
// LINE 248:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 252:
_T355:
	return 0x1;
// LINE 254:
_T35f:
	return 0x1;
// LINE 258:
_T369:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T432;
// LINE 259:
	this->myRadioStationState.bPaused = 0x1;
// LINE 260:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0;
	__asm        jmp    _T3a9;
// LINE 261:
_T3a9:
	__asm        jmp    _T3ae;
_T3ae:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        je     _T3c0;

	__asm        jmp    _T432;
_T3c0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 1;
	__asm        jne    _T3e3;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    _T42d;

	__asm        jmp    _T42d;
_T3e3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x20], 0;
	__asm        jne    _T413;

	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    _T42d;

	__asm        jmp    _T42d;
_T413:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    _T42d;
_T42d:
	__asm        jmp    _T432;
// LINE 263:
_T432:
	return 0x1;
// LINE 264:
}

// FUNCTION: COPTER_D 0x00434a46
int32_t RadioStation::StartPlayingNextSelectionOfGivenType(enum RadioStationCycleType radioStationCycleType) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sFullSelectionPath; // 0x8 bytes

// LINE 272:
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 274:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    _Te3;
// LINE 275:
	__asm        push   0;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        call   list<basic_string<char>>::iterator::operator++;
// LINE 276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T55;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    _T71;

	__asm        jmp    _T76;
_T71:
	__asm        jmp    _Ta5;
_T76:
	__asm        jmp    _T88;

	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     _Ta5;
// LINE 277:
_T88:
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 278:
_Ta5:
	__asm        jmp    _Taa;
_Taa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 281:
	__asm        jmp    _T8b5;
_Te3:
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    _T2f8;
// LINE 282:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x6C;
	__asm        call   list<basic_string<char>>::iterator::operator++;
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T11e;
_T11e:
	__asm        jmp    _T123;
_T123:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x24];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    _T13a;

	__asm        jmp    _T13f;
_T13a:
	__asm        jmp    _T181;
_T13f:
	__asm        jmp    _T151;

	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T181;
// LINE 284:
_T151:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T170;
_T170:
	__asm        jmp    _T175;
_T175:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 285:
_T181:
	__asm        jmp    _T186;
_T186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    _T19d;
_T19d:
	__asm        jmp    _T1a2;
_T1a2:
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xF4];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T1db;
_T1db:
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T25c;

	__asm        jmp    _T1f3;
_T1f3:
	__asm        jmp    _T1f8;
_T1f8:
	__asm        jmp    _T1fd;
_T1fd:
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xFC], eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T25c;
_T25c:
	__asm        mov    eax, [ebp-0xF0];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xF8], eax;
	__asm        jmp    _T270;
_T270:
	__asm        jmp    _T275;
_T275:
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xF8];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0xF4];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T2ac;
_T2ac:
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ee;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2ee:
	__asm        jmp    _T2f3;
// LINE 288:
_T2f3:
	__asm        jmp    _T8b5;
_T2f8:
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    _T5bc;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T333;
_T333:
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T341;
// LINE 290:
_T341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T35e;
_T35e:
	__asm        jmp    _T363;
_T363:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    _T37d;

	__asm        jmp    _T382;
_T37d:
	__asm        jmp    _T3c7;
_T382:
	__asm        jmp    _T394;

	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     _T3c7;
// LINE 291:
_T394:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T3b3;
_T3b3:
	__asm        jmp    _T3b8;
_T3b8:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 292:
_T3c7:
	__asm        jmp    _T3cc;
_T3cc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    _T3e6;
_T3e6:
	__asm        jmp    _T3eb;
_T3eb:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xBC];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T424;
_T424:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4a5;

	__asm        jmp    _T43c;
_T43c:
	__asm        jmp    _T441;
_T441:
	__asm        jmp    _T446;
_T446:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB8];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4a5;
_T4a5:
	__asm        mov    eax, [ebp-0xB8];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    _T4b9;
_T4b9:
	__asm        jmp    _T4be;
_T4be:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x44];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0xBC];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T4f5;
_T4f5:
	__asm        lea    eax, [ebp-0x44];
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     _T577;

	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T510;
_T510:
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T52e;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        mov    eax, sFullSelectionPath.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T577;
_T52e:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xEC], eax;
	__asm        cmp    dword ptr [ebp-0xEC], 0;
	__asm        je     _T570;

	__asm        jmp    _T550;
_T550:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xEC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        jmp    _T577;
_T570:
	sFullSelectionPath.reference = 0x0;
_T577:
	__asm        jmp    _T57c;
_T57c:
	__asm        lea    ecx, [ebp-0x44];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T5b2;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5b2:
	__asm        jmp    _T5b7;
// LINE 295:
_T5b7:
	__asm        jmp    _T8b5;
_T5bc:
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    _T877;
// LINE 296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    _T5f7;
_T5f7:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T605;
// LINE 297:
_T605:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T61f;
_T61f:
	__asm        jmp    _T624;
_T624:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    _T63e;

	__asm        jmp    _T643;
_T63e:
	__asm        jmp    _T68b;
_T643:
	__asm        jmp    _T655;

	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T68b;
// LINE 298:
_T655:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T677;
_T677:
	__asm        jmp    _T67c;
_T67c:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 299:
_T68b:
	__asm        jmp    _T690;
_T690:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T6aa;
_T6aa:
	__asm        jmp    _T6af;
_T6af:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x84];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T6ee;
_T6ee:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T76f;

	__asm        jmp    _T706;
_T706:
	__asm        jmp    _T70b;
_T70b:
	__asm        jmp    _T710;
_T710:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T76f;
_T76f:
	__asm        mov    eax, [ebp-0x80];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T780;
_T780:
	__asm        jmp    _T785;
_T785:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x88];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x84];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T7bc;
_T7bc:
	__asm        lea    eax, [ebp-0x58];
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        cmp    eax, ecx;
	__asm        je     _T83e;

	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T7d7;
_T7d7:
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T7f5;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        mov    eax, sFullSelectionPath.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T83e;
_T7f5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB4], eax;
	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     _T837;

	__asm        jmp    _T817;
_T817:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sFullSelectionPath.reference, eax;
	__asm        jmp    _T83e;
_T837:
	sFullSelectionPath.reference = 0x0;
_T83e:
	__asm        jmp    _T843;
_T843:
	__asm        lea    ecx, [ebp-0x58];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T86d;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T86d:
	__asm        jmp    _T872;
// LINE 301:
_T872:
	__asm        jmp    _T8b5;
// LINE 302:
_T877:
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFullSelectionPath.c_str_ptr, 0;
	__asm        je     _T8a8;

	__asm        mov    eax, sFullSelectionPath.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T8a8:
	__asm        jmp    _T8ad;
_T8ad:
	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    _T995;
// LINE 304:
_T8b5:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T8f3;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 306:
_T8f3:
	__asm        push   1;
	__asm        lea    eax, sFullSelectionPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x2C];
// LINE 307:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x34];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+8];
// LINE 308:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x2C];
// LINE 309:
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    ecx, sFullSelectionPath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sFullSelectionPath.c_str_ptr, 0;
	__asm        je     _T988;

	__asm        mov    eax, sFullSelectionPath.c_str_ptr;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T988:
	__asm        jmp    _T98d;
_T98d:
	__asm        mov    eax, [ebp-0x60];
	__asm        jmp    _T995;
// LINE 310:
_T995:
}

// FUNCTION: COPTER_D 0x004353e2
void RadioStation::LoadAllPlaylists() {
	/*bp-0x20*/  /*unpacked*/ class Directory tempDirectory;

// LINE 318:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    dword ptr [ebp-0x74], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T69;
_T62:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T69:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T75;
_T75:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::Directory;
	__asm        lea    ecx, [ebp-0x28];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _Tbd;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0xD8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tbd:
	__asm        jmp    _Tc2;
_Tc2:
	__asm        mov    eax, SZ_SOUND_FILE_FILTER;
	__asm        mov    [ebp-0xEC], eax;
// LINE 320:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T104;

	__asm        mov    eax, [ebp-0xEC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T10b;
_T104:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T10b:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T117;
_T117:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::SetNewDirectoryEntryFilter;
	__asm        lea    ecx, [ebp-0x30];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T15b;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xE4], eax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T15b:
	__asm        jmp    _T160;
// LINE 322:
_T160:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T177;
_T177:
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T195;
_T195:
	__asm        jmp    _T19a;
_T19a:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x8C], eax;
_T1ac:
	__asm        mov    eax, [ebp-0x88];
	__asm        cmp    [ebp-0x8C], eax;
	__asm        jne    _T1c8;

	__asm        jmp    _T1dc;

	__asm        jmp    _T1c8;
_T1c8:
	__asm        jmp    _T1d7;

	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        jne    _T1dc;
_T1d7:
	__asm        jmp    _T1e1;
_T1dc:
	__asm        jmp    _T231;
_T1e1:
	__asm        jmp    _T1f3;

	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T231;
_T1f3:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T21a;
_T21a:
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::erase;
	__asm        jmp    _T1ac;
_T231:
	__asm        jmp    _T236;
// LINE 323:
_T236:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 324:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _T263;
// LINE 326:
_T263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T27a;
_T27a:
	__asm        jmp    _T27f;
_T27f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T298;
_T298:
	__asm        jmp    _T29d;
_T29d:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0xA4], eax;
_T2af:
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    [ebp-0xA4], eax;
	__asm        jne    _T2cb;

	__asm        jmp    _T2e2;

	__asm        jmp    _T2cb;
_T2cb:
	__asm        jmp    _T2dd;

	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        jne    _T2e2;
_T2dd:
	__asm        jmp    _T2e7;
_T2e2:
	__asm        jmp    _T343;
_T2e7:
	__asm        jmp    _T2f9;

	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T343;
_T2f9:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        jmp    _T318;
_T318:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T329;
_T329:
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::erase;
	__asm        jmp    _T2af;
_T343:
	__asm        jmp    _T348;
// LINE 327:
_T348:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 328:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _T375;
// LINE 330:
_T375:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T38c;
_T38c:
	__asm        jmp    _T391;
_T391:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T3aa;
_T3aa:
	__asm        jmp    _T3af;
_T3af:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0xBC], eax;
_T3c1:
	__asm        mov    eax, [ebp-0xB8];
	__asm        cmp    [ebp-0xBC], eax;
	__asm        jne    _T3dd;

	__asm        jmp    _T3f4;

	__asm        jmp    _T3dd;
_T3dd:
	__asm        jmp    _T3ef;

	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        jne    _T3f4;
_T3ef:
	__asm        jmp    _T3f9;
_T3f4:
	__asm        jmp    _T455;
_T3f9:
	__asm        jmp    _T40b;

	__asm        cmp    dword ptr [ebp-0xB4], 0;
	__asm        je     _T455;
_T40b:
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        jmp    _T42a;
_T42a:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T43b;
_T43b:
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::erase;
	__asm        jmp    _T3c1;
_T455:
	__asm        jmp    _T45a;
// LINE 331:
_T45a:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 332:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _T487;
// LINE 334:
_T487:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T4a1;
_T4a1:
	__asm        jmp    _T4a6;
_T4a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T4c2;
_T4c2:
	__asm        jmp    _T4c7;
_T4c7:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0xD0], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0xD4], eax;
_T4d9:
	__asm        mov    eax, [ebp-0xD0];
	__asm        cmp    [ebp-0xD4], eax;
	__asm        jne    _T4f5;

	__asm        jmp    _T50c;

	__asm        jmp    _T4f5;
_T4f5:
	__asm        jmp    _T507;

	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        jne    _T50c;
_T507:
	__asm        jmp    _T511;
_T50c:
	__asm        jmp    _T570;
_T511:
	__asm        jmp    _T523;

	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     _T570;
_T523:
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xD4], eax;
	__asm        jmp    _T542;
_T542:
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    [ebp-0xC0], eax;
	__asm        jmp    _T553;
_T553:
	__asm        mov    eax, [ebp-0xC0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::erase;
	__asm        jmp    _T4d9;
_T570:
	__asm        jmp    _T575;
// LINE 335:
_T575:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 336:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectorySpecificEntriesIntoStringList;
	__asm        jmp    _T5a6;
// LINE 337:
_T5a6:
	__asm        jmp    _T5ab;
_T5ab:
	__asm        lea    ecx, [ebp-0x10];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T5e1;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5e1:
	__asm        jmp    _T5e6;
_T5e6:
	__asm        lea    ecx, [ebp-0x18];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        jmp    _T5fb;
_T5fb:
}

// FUNCTION: COPTER_D 0x004359e2
void RadioStation::ShufflePlaylist() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sCurrentLastItem; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sTempItem; // 0x8 bytes

// LINE 350:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _T7a;

	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x114];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T6c;
_T6c:
	__asm        mov    eax, [ebp-0x114];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    _T81;
_T7a:
	sCurrentLastItem.reference = 0x0;
_T81:
	__asm        mov    sCurrentLastItem.c_str_ptr, 0;
	__asm        jmp    _T8d;
// LINE 351:
_T8d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x118], eax;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     _Tf5;

	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x118];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    _Tfc;
_Tf5:
	sTempItem.reference = 0x0;
_Tfc:
	__asm        mov    sTempItem.c_str_ptr, 0;
	__asm        jmp    _T108;
// LINE 357:
_T108:
	__asm        jmp    _T10d;
_T10d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _T5db;
// LINE 358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xFC], eax;
	__asm        jmp    _T156;
_T156:
	__asm        jmp    _T15b;
_T15b:
	__asm        jmp    _T160;
_T160:
	__asm        mov    eax, [ebp-0xFC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x130], eax;
	__asm        lea    eax, sCurrentLastItem.c_str_ptr;
	__asm        cmp    [ebp-0x130], eax;
	__asm        je     _T207;

	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T18b;
_T18b:
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T1b5;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        mov    eax, sCurrentLastItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T207;
_T1b5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     _T200;

	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x12C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    _T207;
_T200:
	sCurrentLastItem.reference = 0x0;
_T207:
	__asm        jmp    _T20c;
// LINE 359:
_T20c:
	__asm        mov    eax, this;
	__asm        add    eax, 0x50;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 360:
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0xD0], eax;
	__asm        jmp    _T247;
_T247:
	__asm        jmp    _T24c;
_T24c:
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xF4], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T27d;

	__asm        jmp    _T282;
_T27d:
	__asm        jmp    _T5ab;
_T282:
	__asm        jmp    _T294;

	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        je     _T5ab;
// LINE 361:
_T294:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0xE8], eax;
	__asm        mov    eax, [ebp-0xE8];
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    _T2b4;
_T2b4:
	__asm        jmp    _T2b9;
_T2b9:
	__asm        mov    eax, [ebp-0xE4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xE4], eax;
	__asm        jmp    _T2cd;
_T2cd:
	__asm        jmp    _T2d2;
_T2d2:
	__asm        jmp    _T2d7;
_T2d7:
	__asm        mov    eax, [ebp-0xE4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x138], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x138], eax;
	__asm        je     _T37e;

	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T302;
_T302:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T32c;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    sTempItem.reference, eax;
	__asm        mov    eax, sTempItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T37e;
_T32c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x134], eax;
	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     _T377;

	__asm        jmp    _T34e;
_T34e:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x134];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    _T37e;
_T377:
	sTempItem.reference = 0x0;
_T37e:
	__asm        jmp    _T383;
// LINE 362:
_T383:
	__asm        lea    eax, [ebp-0xD4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x50;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0xD8], eax;
	__asm        jmp    _T3a3;
_T3a3:
	__asm        jmp    _T3a8;
_T3a8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0xF0], eax;
	__asm        mov    eax, [ebp-0xF0];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    _T3c8;
_T3c8:
	__asm        jmp    _T3cd;
_T3cd:
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    _T3e1;
_T3e1:
	__asm        jmp    _T3e6;
_T3e6:
	__asm        jmp    _T3eb;
_T3eb:
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0xEC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        cmp    [ebp-0x144], eax;
	__asm        je     _T4c2;

	__asm        mov    ecx, [ebp-0x144];
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T42d;
_T42d:
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T464;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T4c2;
_T464:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _T4b5;

	__asm        jmp    _T486;
_T486:
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x13C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4c2;
_T4b5:
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+4], 0;
_T4c2:
	__asm        jmp    _T4c7;
// LINE 363:
_T4c7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        mov    [ebp-0xDC], eax;
	__asm        jmp    _T4e9;
_T4e9:
	__asm        jmp    _T4ee;
_T4ee:
	__asm        jmp    _T4f3;
_T4f3:
	__asm        jmp    _T4f8;
_T4f8:
	__asm        mov    eax, [ebp-0xDC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14C], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x14C], eax;
	__asm        je     _T5a6;

	__asm        mov    ecx, [ebp-0x14C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T526;
_T526:
	__asm        mov    eax, sTempItem.reference;
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T551;

	__asm        mov    eax, sTempItem.reference;
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        add    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5a6;
_T551:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _T599;

	__asm        jmp    _T573;
_T573:
	__asm        mov    eax, sTempItem.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x148];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5a6;
_T599:
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+4], 0;
_T5a6:
	__asm        jmp    _T5ab;
// LINE 365:
_T5ab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T5ca;
_T5ca:
	__asm        jmp    _T5cf;
_T5cf:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 369:
_T5db:
	__asm        jmp    _T5e0;
_T5e0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x68], 0;
	__asm        je     _T941;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        mov    eax, [ebp-0xC8];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T610;
_T610:
	__asm        jmp    _T615;
_T615:
	__asm        mov    eax, [ebp-0xC4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC4], eax;
	__asm        jmp    _T629;
_T629:
	__asm        jmp    _T62e;
_T62e:
	__asm        jmp    _T633;
_T633:
	__asm        mov    eax, [ebp-0xC4];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x154], eax;
	__asm        lea    eax, sCurrentLastItem.c_str_ptr;
	__asm        cmp    [ebp-0x154], eax;
	__asm        je     _T6da;

	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T65e;
_T65e:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T688;

	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        mov    eax, sCurrentLastItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T6da;
_T688:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _T6d3;

	__asm        jmp    _T6aa;
_T6aa:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sCurrentLastItem.reference, eax;
	__asm        jmp    _T6da;
_T6d3:
	sCurrentLastItem.reference = 0x0;
_T6da:
	__asm        jmp    _T6df;
// LINE 371:
_T6df:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 372:
	__asm        lea    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T71a;
_T71a:
	__asm        jmp    _T71f;
_T71f:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xBC], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _T750;

	__asm        jmp    _T755;
_T750:
	__asm        jmp    _T911;
_T755:
	__asm        jmp    _T767;

	__asm        cmp    dword ptr [ebp-0xC0], 0;
	__asm        je     _T911;
// LINE 373:
_T767:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T787;
_T787:
	__asm        jmp    _T78c;
_T78c:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T7a0;
_T7a0:
	__asm        jmp    _T7a5;
_T7a5:
	__asm        jmp    _T7aa;
_T7aa:
	__asm        mov    eax, [ebp-0xAC];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x15C], eax;
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        cmp    [ebp-0x15C], eax;
	__asm        je     _T851;

	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T7d5;
_T7d5:
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T7ff;

	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    sTempItem.reference, eax;
	__asm        mov    eax, sTempItem.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T851;
_T7ff:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _T84a;

	__asm        jmp    _T821;
_T821:
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x158];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sTempItem.reference, eax;
	__asm        jmp    _T851;
_T84a:
	sTempItem.reference = 0x0;
_T851:
	__asm        jmp    _T856;
// LINE 374:
_T856:
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0xA0], eax;
	__asm        jmp    _T876;
_T876:
	__asm        jmp    _T87b;
_T87b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    _T89b;
_T89b:
	__asm        jmp    _T8a0;
_T8a0:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    _T8b4;
_T8b4:
	__asm        jmp    _T8b9;
_T8b9:
	__asm        jmp    _T8be;
_T8be:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 375:
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x64;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T8f8;
_T8f8:
	__asm        jmp    _T8fd;
_T8fd:
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 377:
_T911:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T930;
_T930:
	__asm        jmp    _T935;
_T935:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
// LINE 381:
_T941:
	__asm        jmp    _T946;
_T946:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _Tb37;
// LINE 382:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T976;
_T976:
	__asm        jmp    _T97b;
_T97b:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T98f;
_T98f:
	__asm        jmp    _T994;
_T994:
	__asm        jmp    _T999;
_T999:
	__asm        mov    eax, [ebp-0x8C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 383:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 384:
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T9e0;
_T9e0:
	__asm        jmp    _T9e5;
_T9e5:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x84], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Ta13;

	__asm        jmp    _Ta18;
_Ta13:
	__asm        jmp    _Tb04;
_Ta18:
	__asm        jmp    _Ta2a;

	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _Tb04;
// LINE 385:
_Ta2a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _Ta41;
_Ta41:
	__asm        jmp    _Ta46;
_Ta46:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _Ta54;
_Ta54:
	__asm        jmp    _Ta59;
_Ta59:
	__asm        jmp    _Ta5e;
_Ta5e:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 386:
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _Ta87;
_Ta87:
	__asm        jmp    _Ta8c;
_Ta8c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _Taa3;
_Taa3:
	__asm        jmp    _Taa8;
_Taa8:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _Tab6;
_Tab6:
	__asm        jmp    _Tabb;
_Tabb:
	__asm        jmp    _Tac0;
_Tac0:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 387:
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _Taee;
_Taee:
	__asm        jmp    _Taf3;
_Taf3:
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 389:
_Tb04:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tb23;
_Tb23:
	__asm        jmp    _Tb28;
_Tb28:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 393:
_Tb37:
	__asm        jmp    _Tb3c;
_Tb3c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _Td2c;
// LINE 394:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _Tb69;
_Tb69:
	__asm        jmp    _Tb6e;
_Tb6e:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _Tb7c;
_Tb7c:
	__asm        jmp    _Tb81;
_Tb81:
	__asm        jmp    _Tb86;
_Tb86:
	__asm        mov    eax, [ebp-0x54];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 395:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 396:
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _Tbcf;
_Tbcf:
	__asm        jmp    _Tbd4;
_Tbd4:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x4C], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::compare;
	__asm        test   eax, eax;
	__asm        jne    _Tbfc;

	__asm        jmp    _Tc01;
_Tbfc:
	__asm        jmp    _Tcf6;
_Tc01:
	__asm        jmp    _Tc10;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _Tcf6;
// LINE 397:
_Tc10:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Tc2a;
_Tc2a:
	__asm        jmp    _Tc2f;
_Tc2f:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Tc3d;
_Tc3d:
	__asm        jmp    _Tc42;
_Tc42:
	__asm        jmp    _Tc47;
_Tc47:
	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
// LINE 398:
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _Tc73;
_Tc73:
	__asm        jmp    _Tc78;
_Tc78:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _Tc92;
_Tc92:
	__asm        jmp    _Tc97;
_Tc97:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _Tca5;
_Tca5:
	__asm        jmp    _Tcaa;
_Tcaa:
	__asm        jmp    _Tcaf;
_Tcaf:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 399:
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Tce0;
_Tce0:
	__asm        jmp    _Tce5;
_Tce5:
	__asm        lea    eax, sTempItem.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [eax];
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator=;
// LINE 401:
_Tcf6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Td18;
_Td18:
	__asm        jmp    _Td1d;
_Td1d:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 403:
_Td2c:
	__asm        lea    ecx, sTempItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sTempItem.c_str_ptr, 0;
	__asm        je     _Td62;

	__asm        mov    eax, sTempItem.c_str_ptr;
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Td62:
	__asm        jmp    _Td67;
_Td67:
	__asm        lea    ecx, sCurrentLastItem.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sCurrentLastItem.c_str_ptr, 0;
	__asm        je     _Td9d;

	__asm        mov    eax, sCurrentLastItem.c_str_ptr;
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Td9d:
	__asm        jmp    _Tda2;
_Tda2:
	return;
}

// FUNCTION: COPTER_D 0x0043678e
void RadioStation::RandomizeStringList(/*packed*/ class list<basic_string<char>>& stringList) {
	/*bp-0xc*/   /*packed*/ class vector<basic_string<char>> stringArray; // 0xc bytes
	/*bp-0x10*/  int32_t iEnd;
	/*bp-0x14*/  int32_t i;
	/*bp-0x18*/  /*packed*/ class list<basic_string<char>>::iterator stringListIterator;

// LINE 412:
	__asm        jmp    _T17;
_T17:
	__asm        mov    eax, stringList;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T29;
// LINE 413:
	return;
// LINE 415:
_T29:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    stringListIterator.node, eax;
	__asm        jmp    _T3e;
_T3e:
	__asm        jmp    _T43;
// LINE 416:
_T43:
	__asm        mov    stringArray.start, 0;
	__asm        mov    stringArray.finish, 0;
	__asm        mov    stringArray.end_of_storage, 0;
	__asm        jmp    _T5d;
// LINE 419:
_T5d:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T70;
_T70:
	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, stringListIterator.node;
	__asm        cmp    [ebp-0x1C], eax;
	__asm        jne    _T8b;

	__asm        jmp    _T9f;

	__asm        jmp    _T8b;
_T8b:
	__asm        jmp    _T9a;

	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    _T9f;
_T9a:
	__asm        jmp    _Ta4;
_T9f:
	__asm        jmp    _T166;
_Ta4:
	__asm        jmp    _Tb3;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T166;
// LINE 420:
_Tb3:
	__asm        jmp    _Tb8;
_Tb8:
	__asm        mov    eax, stringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, stringArray.end_of_storage;
	__asm        cmp    stringArray.finish, eax;
	__asm        je     _T120;

	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    _Tea;
_Tea:
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T112;

	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T112;
_T112:
	__asm        jmp    _T117;
_T117:
	__asm        add    stringArray.finish, 8;
	__asm        jmp    _T138;
_T120:
	__asm        jmp    _T125;
_T125:
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    eax, stringArray.finish;
	__asm        push   eax;
	__asm        lea    ecx, stringArray.start;
	__asm        call   vector<basic_string<char>>::insert_aux;
_T138:
	__asm        jmp    _T13d;
// LINE 421:
_T13d:
	__asm        mov    eax, stringListIterator.node;
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, stringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    stringListIterator.node, eax;
	__asm        jmp    _T153;
_T153:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T161;
// LINE 422:
_T161:
	__asm        jmp    _T5d;
// LINE 425:
_T166:
	__asm        jmp    _T16b;
_T16b:
	__asm        jmp    _T170;
_T170:
	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T181;
_T181:
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    [ebp-0x40], eax;
	__asm        jne    _T192;

	__asm        jmp    _T1f2;
_T192:
	__asm        mov    eax, [ebp-0x40];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1a4;
_T1a0:
	__asm        add    dword ptr [ebp-0x34], 8;
_T1a4:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x3C], eax;
	__asm        je     _T1ed;

	__asm        mov    eax, [ebp-0x34];
	__asm        sub    eax, [ebp-0x40];
	__asm        sar    eax, 3;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   __long_random;
	__asm        add    esp, 4;
	__asm        shl    eax, 3;
	__asm        add    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1d1;
_T1d1:
	__asm        push   0;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   __iter_swap;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1e8;
_T1e8:
	__asm        jmp    _T1a0;
_T1ed:
	__asm        jmp    _T1f2;
_T1f2:
	__asm        jmp    _T1f7;
// LINE 428:
_T1f7:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T20a;
_T20a:
	__asm        jmp    _T20f;
_T20f:
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T224;
_T224:
	__asm        jmp    _T229;
_T229:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x94], eax;
_T23b:
	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    [ebp-0x94], eax;
	__asm        jne    _T257;

	__asm        jmp    _T26e;

	__asm        jmp    _T257;
_T257:
	__asm        jmp    _T269;

	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        jne    _T26e;
_T269:
	__asm        jmp    _T273;
_T26e:
	__asm        jmp    _T2c3;
_T273:
	__asm        jmp    _T285;

	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     _T2c3;
_T285:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _T2a4;
_T2a4:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T2b2;
_T2b2:
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, stringList;
	__asm        call   list<basic_string<char>>::erase;
	__asm        jmp    _T23b;
_T2c3:
	__asm        jmp    _T2c8;
// LINE 431:
_T2c8:
	__asm        mov    i, 0;
	__asm        jmp    _T2d4;
_T2d4:
	__asm        jmp    _T2d9;
_T2d9:
	__asm        jmp    _T2de;
_T2de:
	__asm        mov    eax, stringArray.finish;
	__asm        sub    eax, stringArray.start;
	__asm        sar    eax, 3;
	__asm        mov    iEnd, eax;
	__asm        jmp    _T2f2;
_T2ef:
	i++;
_T2f2:
	__asm        mov    eax, iEnd;
	__asm        cmp    i, eax;
	__asm        jge    _T39e;
// LINE 432:
	__asm        jmp    _T303;
_T303:
	__asm        jmp    _T308;
_T308:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        add    eax, stringArray.start;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, stringList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T327;
_T327:
	__asm        jmp    _T32c;
_T32c:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    ecx, stringList;
	__asm        call   list<basic_string<char>>::get_node;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T342;
_T342:
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, stringList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T38f;
_T38f:
	__asm        jmp    _T394;
_T394:
	__asm        jmp    _T399;
// LINE 433:
_T399:
	__asm        jmp    _T2ef;
// LINE 434:
_T39e:
	__asm        mov    eax, stringArray.finish;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x7C], eax;
_T3aa:
	__asm        mov    eax, [ebp-0x78];
	__asm        cmp    [ebp-0x7C], eax;
	__asm        je     _T40d;

	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x7C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T3e4;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3e4:
	__asm        jmp    _T3e9;
_T3e9:
	__asm        jmp    _T3fa;

	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3fa:
	__asm        jmp    _T3ff;
_T3ff:
	__asm        jmp    _T404;
_T404:
	__asm        add    dword ptr [ebp-0x7C], 8;
	__asm        jmp    _T3aa;
_T40d:
	__asm        jmp    _T412;
_T412:
	__asm        mov    eax, stringArray.start;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T429;
_T429:
	__asm        jmp    _T42e;
_T42e:
	__asm        jmp    _T433;
_T433:
	return;
}

// FUNCTION: COPTER_D 0x00436bcd
void RadioStation::ShuffleCycle() {
	/*bp-0x4*/   int32_t nCurrentCycleLastItem;
	/*bp-0x8*/   int32_t nTempCycleItem;

// LINE 450:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    nCurrentCycleLastItem, eax;
// LINE 451:
	__asm        jmp    _T46;
_T46:
	__asm        jmp    _T4b;
_T4b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T62;
_T62:
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    [ebp-0x24], eax;
	__asm        jne    _T73;

	__asm        jmp    _Te0;
_T73:
	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T85;
_T81:
	__asm        add    dword ptr [ebp-0x14], 4;
_T85:
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    [ebp-0x20], eax;
	__asm        je     _Tdb;

	__asm        mov    eax, [ebp-0x14];
	__asm        sub    eax, [ebp-0x24];
	__asm        sar    eax, 2;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   __long_random;
	__asm        add    esp, 4;
	__asm        shl    eax, 2;
	__asm        add    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _Td1;
_Td1:
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _T81;
_Tdb:
	__asm        jmp    _Te0;
_Te0:
	__asm        jmp    _Te5;
// LINE 456:
_Te5:
	__asm        cmp    nCurrentCycleLastItem, 0;
	__asm        je     _T1a9;

	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, nCurrentCycleLastItem;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T1a9;
// LINE 458:
	__asm        jmp    _T10f;
_T10f:
	__asm        jmp    _T114;
_T114:
	nTempCycleItem = this->myRadioStationState.CycleArray.start[0];
// LINE 459:
	__asm        jmp    _T124;
_T124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T132;
_T132:
	__asm        jmp    _T137;
_T137:
	__asm        jmp    _T13c;
_T13c:
	__asm        jmp    _T141;
_T141:
	__asm        jmp    _T146;
_T146:
	__asm        jmp    _T14b;
_T14b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
// LINE 460:
	__asm        jmp    _T16e;
_T16e:
	__asm        jmp    _T173;
_T173:
	__asm        jmp    _T178;
_T178:
	__asm        jmp    _T17d;
_T17d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 2;
	__asm        lea    eax, [eax*4-4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T1a1;
_T1a1:
	__asm        mov    eax, nTempCycleItem;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
// LINE 462:
_T1a9:
	return;
}

// FUNCTION: COPTER_D 0x00436d80
void RadioStation::GetStationCallSign(/*packed*/ class basic_string<char>& sStationCallSign) {
// LINE 470:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        cmp    eax, sStationCallSign;
	__asm        je     _T1ce;

	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, sStationCallSign;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sStationCallSign;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, sStationCallSign;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1ce;
_T1c4:
	sStationCallSign.reference = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 471:
_T1d3:
	return;
}

// FUNCTION: COPTER_D 0x00436f5f
enum RadioStationType RadioStation::GetRadioStationType() {
// LINE 479:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        jmp    _T17;
// LINE 480:
_T17:
}

// FUNCTION: COPTER_D 0x00436f7b
int32_t RadioStation::IsCycleTypePresent(enum RadioStationCycleType radioStationCycleType) {
// LINE 488:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    _T2b;
// LINE 489:
	__asm        jmp    _T1b;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        jmp    _Td2;
// LINE 491:
	__asm        jmp    _Tcb;
_T2b:
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    _T61;
// LINE 492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x24], 0;
	__asm        jne    _T4c;
// LINE 493:
	__asm        xor    eax, eax;
	__asm        jmp    _Td2;
// LINE 494:
_T4c:
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        jmp    _Td2;
// LINE 496:
	__asm        jmp    _Tcb;
_T61:
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    _T97;
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    _T82;
// LINE 498:
	__asm        xor    eax, eax;
	__asm        jmp    _Td2;
// LINE 499:
_T82:
	__asm        jmp    _T87;
_T87:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    _Td2;
// LINE 501:
	__asm        jmp    _Tcb;
_T97:
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    _Tcb;
// LINE 502:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        cmp    dword ptr [eax+0x28], 0;
	__asm        jne    _Tb8;
// LINE 503:
	return 0x0;
// LINE 504:
_Tb8:
	__asm        jmp    _Tbd;
_Tbd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        jmp    _Td2;
// LINE 506:
_Tcb:
	__asm        xor    eax, eax;
	__asm        jmp    _Td2;
// LINE 507:
_Td2:
}

// FUNCTION: COPTER_D 0x00437054
void RadioStation::MoveToNextPlaylistItem(enum RadioStationCycleType radioStationCycleType) {
// LINE 515:
	__asm        cmp    radioStationCycleType, 0;
	__asm        jne    _Tb7;
// LINE 516:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T3d;
// LINE 517:
_T3d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
_T56:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    _T6a;

	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Tb2;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _Tb2;
// LINE 518:
_T7e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T94;
_T94:
	__asm        jmp    _T99;
_T99:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x58], ecx;
	__asm        jne    _Tad;

	__asm        jmp    _Tad;
_Tad:
	__asm        jmp    _Tb2;
// LINE 520:
_Tb2:
	__asm        jmp    _T2d7;
_Tb7:
	__asm        cmp    radioStationCycleType, 1;
	__asm        jne    _T162;
// LINE 521:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x6C], eax;
	__asm        jmp    _Tdd;
_Tdd:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te8;
// LINE 522:
_Te8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tfc;
_Tfc:
	__asm        jmp    _T101;
_T101:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    _T115;

	__asm        jmp    _T11a;
_T115:
	__asm        jmp    _T15d;
_T11a:
	__asm        jmp    _T129;

	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T15d;
// LINE 523:
_T129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T13f;
_T13f:
	__asm        jmp    _T144;
_T144:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x6C], ecx;
	__asm        jne    _T158;

	__asm        jmp    _T158;
_T158:
	__asm        jmp    _T15d;
// LINE 525:
_T15d:
	__asm        jmp    _T2d7;
_T162:
	__asm        cmp    radioStationCycleType, 2;
	__asm        jne    _T21c;
// LINE 526:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T191;
_T191:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T19c;
// LINE 527:
_T19c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T1b0;
_T1b0:
	__asm        jmp    _T1b5;
_T1b5:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    _T1cc;

	__asm        jmp    _T1d1;
_T1cc:
	__asm        jmp    _T217;
_T1d1:
	__asm        jmp    _T1e0;

	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T217;
// LINE 528:
_T1e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T1f6;
_T1f6:
	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x24];
	__asm        cmp    [eax+0x80], ecx;
	__asm        jne    _T212;

	__asm        jmp    _T212;
_T212:
	__asm        jmp    _T217;
// LINE 530:
_T217:
	__asm        jmp    _T2d7;
_T21c:
	__asm        cmp    radioStationCycleType, 3;
	__asm        jne    _T2d7;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    _T24b;
_T24b:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T256;
// LINE 532:
_T256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T26d;
_T26d:
	__asm        jmp    _T272;
_T272:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    _T289;

	__asm        jmp    _T28e;
_T289:
	__asm        jmp    _T2d7;
_T28e:
	__asm        jmp    _T29d;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2d7;
// LINE 533:
_T29d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T2b6;
_T2b6:
	__asm        jmp    _T2bb;
_T2bb:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jne    _T2d2;

	__asm        jmp    _T2d2;
_T2d2:
	__asm        jmp    _T2d7;
// LINE 535:
_T2d7:
	return;
}

// FUNCTION: COPTER_D 0x00437337
int32_t RadioStation::ReadCallSignFromDisk() {
	/*bp-0x4*/   /*packed*/ class DirectoryEntry *tempDirectoryEntry;
	/*bp-0x24*/  /*unpacked*/ class Directory tempDirectory;

// LINE 543:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T62;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T69;
_T62:
	__asm        mov    dword ptr [ebp-0x28], 0;
_T69:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T75;
_T75:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::Directory;
	__asm        mov    eax, [ebp-0x28];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Td3;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _Td3;

	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _Tbd;
_Tbd:
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tce;
_Tce:
	__asm        jmp    _Td3;
_Td3:
	__asm        jmp    _Td8;
_Td8:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tfa;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tfa:
	__asm        jmp    _Tff;
_Tff:
	__asm        mov    eax, SZ_CALL_ID_FILTER;
	__asm        mov    [ebp-0x70], eax;
// LINE 546:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T1b4;

	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T135;
_T135:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T191;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T18c;
_T18c:
	__asm        jmp    _T19a;
_T191:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax], 0;
_T19a:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1a9;
_T1a9:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T1bb;
_T1b4:
	__asm        mov    dword ptr [ebp-0x30], 0;
_T1bb:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T1c7;
_T1c7:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::SetNewDirectoryEntryFilter;
	__asm        mov    eax, [ebp-0x30];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T221;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T221;

	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T20b;
_T20b:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T21c;
_T21c:
	__asm        jmp    _T221;
_T221:
	__asm        jmp    _T226;
_T226:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T248;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T248:
	__asm        jmp    _T24d;
// LINE 547:
_T24d:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 549:
	__asm        jmp    _T266;
_T266:
	__asm        jmp    _T26b;
_T26b:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T30e;
// LINE 550:
	__asm        push   0;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::GetNthEntry;
	__asm        mov    tempDirectoryEntry, eax;
// LINE 551:
	__asm        mov    eax, this;
	__asm        add    eax, 0x38;
	__asm        push   eax;
	__asm        mov    ecx, tempDirectoryEntry;
	__asm        call   DirectoryEntry::GetEntryMinusExtension;
// LINE 552:
	__asm        mov    dword ptr [ebp-0x38], 1;
	__asm        jmp    _T2a0;
_T2a0:
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T2ca;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2ca:
	__asm        jmp    _T2cf;
_T2cf:
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T2f9;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2f9:
	__asm        jmp    _T2fe;
_T2fe:
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        mov    eax, [ebp-0x38];
	__asm        jmp    _T3a0;
// LINE 554:
_T30e:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    _T31a;
_T31a:
	__asm        lea    ecx, [ebp-0x14];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T350;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T350:
	__asm        jmp    _T355;
_T355:
	__asm        lea    ecx, [ebp-0x1C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T38b;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T38b:
	__asm        jmp    _T390;
_T390:
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    _T3a0;
// LINE 555:
_T3a0:
}

// FUNCTION: COPTER_D 0x004376dc
int32_t RadioStation::DetectRadioStationType() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sStationDirectoryName; // 0x8 bytes
	/*bp-0xc*/   int32_t i;
	/*bp-0x14*/  /*packed*/ class basic_string<char> sStationDirectoryParent; // 0x8 bytes

// LINE 563:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     _T7a;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T6c;
_T6c:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    sStationDirectoryParent.reference, eax;
	__asm        jmp    _T81;
_T7a:
	sStationDirectoryParent.reference = 0x0;
_T81:
	__asm        mov    sStationDirectoryParent.c_str_ptr, 0;
	__asm        jmp    _T8d;
// LINE 564:
_T8d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _Tf5;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x90];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    sStationDirectoryName.reference, eax;
	__asm        jmp    _Tfc;
_Tf5:
	sStationDirectoryName.reference = 0x0;
_Tfc:
	__asm        mov    sStationDirectoryName.c_str_ptr, 0;
	__asm        jmp    _T108;
// LINE 569:
_T108:
	__asm        lea    eax, sStationDirectoryName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sStationDirectoryParent.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x40;
	__asm        push   eax;
	__asm        call   Directory::SplitDirectoryPath;
	__asm        add    esp, 0xC;
// LINE 570:
	__asm        mov    i, 0;
	__asm        jmp    _T131;
_T12e:
	i++;
_T131:
	__asm        cmp    i, 9;
	__asm        jge    _T358;

	__asm        mov    eax, i;
	__asm        mov    eax, StationDirectoryNameArray[eax*4];
	__asm        mov    [ebp-0x84], eax;
// LINE 571:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T179;

	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T180;
_T179:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T180:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T18c;
_T18c:
	__asm        jmp    _T191;
_T191:
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T1b4;

	__asm        jmp    _T1a3;
_T1a3:
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T1be;
_T1b4:
	__asm        mov    dword ptr [ebp-0x88], 0xFFFFFFFF;
_T1be:
	__asm        jmp    _T1c3;
_T1c3:
	__asm        jmp    _T1c8;
_T1c8:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x20];
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    ecx, sStationDirectoryName.c_str_ptr;
	__asm        call   basic_string<char>::compare_str;
	__asm        test   eax, eax;
	__asm        jne    _T1fd;

	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        jmp    _T204;
_T1fd:
	__asm        mov    dword ptr [ebp-0x18], 0;
_T204:
	__asm        jmp    _T209;
_T209:
	__asm        mov    eax, [ebp-0x1C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T241;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T241;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T241;
_T241:
	__asm        jmp    _T246;
_T246:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T268;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T268:
	__asm        jmp    _T26d;
_T26d:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T353;
// LINE 575:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2bb;

	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T2bb;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T2bb;
_T2bb:
	__asm        jmp    _T2c0;
_T2c0:
	__asm        cmp    sStationDirectoryName.c_str_ptr, 0;
	__asm        je     _T2e2;

	__asm        mov    eax, sStationDirectoryName.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e2:
	__asm        jmp    _T2e7;
_T2e7:
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T31f;

	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T31f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T31f;
_T31f:
	__asm        jmp    _T324;
_T324:
	__asm        cmp    sStationDirectoryParent.c_str_ptr, 0;
	__asm        je     _T346;

	__asm        mov    eax, sStationDirectoryParent.c_str_ptr;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T346:
	__asm        jmp    _T34b;
_T34b:
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    _T42f;
// LINE 577:
_T353:
	__asm        jmp    _T12e;
// LINE 578:
_T358:
	__asm        mov    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T397;

	__asm        mov    eax, sStationDirectoryName.reference;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T397;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T397;
_T397:
	__asm        jmp    _T39c;
_T39c:
	__asm        cmp    sStationDirectoryName.c_str_ptr, 0;
	__asm        je     _T3be;

	__asm        mov    eax, sStationDirectoryName.c_str_ptr;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3be:
	__asm        jmp    _T3c3;
_T3c3:
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3fb;

	__asm        mov    eax, sStationDirectoryParent.reference;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T3fb;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x78];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T3fb;
_T3fb:
	__asm        jmp    _T400;
_T400:
	__asm        cmp    sStationDirectoryParent.c_str_ptr, 0;
	__asm        je     _T422;

	__asm        mov    eax, sStationDirectoryParent.c_str_ptr;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T422:
	__asm        jmp    _T427;
_T427:
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    _T42f;
// LINE 579:
_T42f:
}

// FUNCTION: COPTER_D 0x00437b10
 Radio::Radio() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        jmp    _T2f;
_T2f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0x2710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 1;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x34;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F560;
// LINE 604:
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00437bba
 Radio::~Radio() {

	this-><Radio+0x00:4> = 0x58f560;
// LINE 611:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x3C];
// LINE 612:
	__asm        jmp    _T29;
_T29:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x34;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
_T46:
	__asm        mov    eax, [ebp-8];
	__asm        cmp    [ebp-0xC], eax;
	__asm        je     _T6f;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T63;
_T63:
	__asm        add    dword ptr [ebp-0xC], 0x98;
	__asm        jmp    _T46;
_T6f:
	__asm        jmp    _T74;
_T74:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _T93;
_T93:
	__asm        jmp    _T98;
_T98:
}

// FUNCTION: COPTER_D 0x00437c57
int  Radio::Initialize() {
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x44];
// LINE 621:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 622:
	return 0x1;
// LINE 623:
}

// FUNCTION: COPTER_D 0x00437c88
int  Radio::DeInitialize() {
// LINE 631:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x18];
// LINE 632:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x3C];
// LINE 633:
	return 0x1;
// LINE 634:
}

// FUNCTION: COPTER_D 0x00437cbd
void  Radio::SetPreferences(/*packed*/ struct RadioPreferences& newRadioPreferences) {
// LINE 642:
	this-><Radio+0x18:4> = newRadioPreferences.bPreferToBeOn;
// LINE 643:
	this-><Radio+0x10:4> = newRadioPreferences.lVolume;
// LINE 644:
	this-><Radio+0x20:4> = newRadioPreferences.lCurrentStation;
// LINE 645:
	this-><Radio+0x24:4> = newRadioPreferences.bOptionDJ;
// LINE 646:
	this-><Radio+0x28:4> = newRadioPreferences.bOptionCommercials;
// LINE 647:
	this-><Radio+0x2c:4> = newRadioPreferences.bAutoMute;
// LINE 648:
	this-><Radio+0x30:4> = newRadioPreferences.bOptionPlayEnglishIfDefaultLanguageNotFound;
// LINE 651:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 652:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 653:
	__asm        jmp    _T88;
_T88:
}

// FUNCTION: COPTER_D 0x00437d4c
void  Radio::GetPreferences(/*packed*/ struct RadioPreferences& currentRadioPreferences) {
// LINE 661:
	currentRadioPreferences.bPreferToBeOn = this-><Radio+0x18:4>;
// LINE 662:
	currentRadioPreferences.lVolume = this-><Radio+0x10:4>;
// LINE 663:
	currentRadioPreferences.lCurrentStation = this-><Radio+0x20:4>;
// LINE 664:
	currentRadioPreferences.bOptionDJ = this-><Radio+0x24:4>;
// LINE 665:
	currentRadioPreferences.bOptionCommercials = this-><Radio+0x28:4>;
// LINE 666:
	currentRadioPreferences.bAutoMute = this-><Radio+0x2c:4>;
// LINE 667:
	currentRadioPreferences.bOptionPlayEnglishIfDefaultLanguageNotFound = this-><Radio+0x30:4>;
// LINE 668:
	__asm        jmp    _T64;
_T64:
}

// FUNCTION: COPTER_D 0x00437db7
int  Radio::GetPreferences() {
	/*bp-0x4*/   char * chPrefData;
	/*bp-0x20*/  /*packed*/ struct RadioPreferences tempRadioPreferences; // 0x1c bytes

// LINE 679:
	__asm        cmp    gPreferenceManager, 0;
	__asm        je     _Ta1;
// LINE 680:
	__asm        push   0x5245494F;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 681:
	__asm        cmp    chPrefData, 0;
	__asm        je     _Ta1;
// LINE 683:
	__asm        push   0x5245494F;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x1C;
	__asm        jne    _Ta1;
// LINE 684:
	__asm        lea    edi, tempRadioPreferences.lVolume;
	__asm        mov    esi, chPrefData;
	__asm        mov    ecx, 7;
	__asm        rep movsd;
// LINE 686:
	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 0;
	__asm        je     _T81;

	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 1;
	__asm        je     _T81;
// LINE 687:
	tempRadioPreferences.bPreferToBeOn = 0x0;
// LINE 688:
_T81:
	__asm        cmp    tempRadioPreferences.lVolume, 0x64;
	__asm        jge    _T92;
// LINE 689:
	tempRadioPreferences.bPreferToBeOn = 0x0;
// LINE 690:
_T92:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 695:
_Ta1:
	return 0x1;
// LINE 696:
}

// FUNCTION: COPTER_D 0x00437e67
int  Radio::SavePreferences() {
	/*bp-0x1c*/  /*packed*/ struct RadioPreferences tempRadioPreferences; // 0x1c bytes

// LINE 706:
	__asm        cmp    gPreferenceManager, 0;
	__asm        je     _T74;
// LINE 707:
	tempRadioPreferences.lVolume = this-><Radio+0x10:4>;
// LINE 708:
	tempRadioPreferences.bPreferToBeOn = this-><Radio+0x18:4>;
// LINE 709:
	tempRadioPreferences.lCurrentStation = this-><Radio+0x20:4>;
// LINE 710:
	tempRadioPreferences.bOptionDJ = this-><Radio+0x24:4>;
// LINE 711:
	tempRadioPreferences.bOptionCommercials = this-><Radio+0x28:4>;
// LINE 713:
	tempRadioPreferences.bOptionPlayEnglishIfDefaultLanguageNotFound = this-><Radio+0x30:4>;
// LINE 716:
	__asm        push   0x1C;
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        push   0x5245494F;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 717:
	return 0x1;
// LINE 719:
_T74:
	return 0x0;
// LINE 720:
}

// FUNCTION: COPTER_D 0x00437ee7
int  Radio::SetOn(int32_t bNewOn) {
// LINE 732:
	__asm        cmp    bNewOn, 0;
	__asm        je     _Te7;
// LINE 733:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _Te2;

	__asm        jmp    _T28;
_T28:
	__asm        jmp    _T2d;
_T2d:
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        test   eax, eax;
	__asm        je     _Te2;
// LINE 734:
	this-><Radio+0x1c:4> = 0x1;
// LINE 735:
	__asm        jmp    _T5d;
_T5d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T7c;
_T7c:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
// LINE 736:
	__asm        jmp    _T92;
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0xC];
// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 740:
	return 0x1;
// LINE 743:
_Te2:
	__asm        jmp    _T10d;
// LINE 744:
_Te7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T10d;
// LINE 745:
	this-><Radio+0x1c:4> = 0x0;
// LINE 746:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 749:
_T10d:
	return 0x1;
// LINE 750:
}

// FUNCTION: COPTER_D 0x00438005
void  Radio::SetMute(int32_t bNewMute) {
// LINE 759:
	__asm        cmp    bNewMute, 0;
	__asm        je     _T4c;
// LINE 760:
	this-><Radio+0x14:4>++;
// LINE 763:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 1;
	__asm        jne    _T47;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0x64;
	__asm        jle    _T47;
// LINE 764:
	__asm        push   0x64;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 767:
_T47:
	__asm        jmp    _T8f;
_T4c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    _T8f;
// LINE 768:
	this-><Radio+0x14:4>--;
// LINE 769:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    _T8f;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0x64;
	__asm        jle    _T8f;
// LINE 771:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 774:
_T8f:
	__asm        jmp    _T94;
_T94:
}

// FUNCTION: COPTER_D 0x004380a0
void  Radio::SetOption(int32_t bNewOption, enum RadioOption nRadioOption) {
// LINE 781:
	__asm        cmp    nRadioOption, 0;
	__asm        jne    _T24;
// LINE 782:
	this-><Radio+0x24:4> = bNewOption;
// LINE 783:
	__asm        jmp    _T4f;
_T24:
	__asm        cmp    nRadioOption, 1;
	__asm        jne    _T3c;
// LINE 784:
	this-><Radio+0x28:4> = bNewOption;
// LINE 785:
	__asm        jmp    _T4f;
_T3c:
	__asm        cmp    nRadioOption, 2;
	__asm        jne    _T4f;
// LINE 786:
	this-><Radio+0x30:4> = bNewOption;
// LINE 787:
_T4f:
	__asm        jmp    _T54;
_T54:
}

// FUNCTION: COPTER_D 0x004380fb
int  Radio::GetOption(enum RadioOption nRadioOption) {
// LINE 794:
	__asm        cmp    nRadioOption, 0;
	__asm        jne    _T26;
// LINE 795:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        jmp    _T5c;
// LINE 796:
	__asm        jmp    _T55;
_T26:
	__asm        cmp    nRadioOption, 1;
	__asm        jne    _T40;
// LINE 797:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        jmp    _T5c;
// LINE 798:
	__asm        jmp    _T55;
_T40:
	__asm        cmp    nRadioOption, 2;
	__asm        jne    _T55;
// LINE 799:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x30];
	__asm        jmp    _T5c;
// LINE 800:
_T55:
	__asm        xor    eax, eax;
	__asm        jmp    _T5c;
// LINE 801:
_T5c:
}

// FUNCTION: COPTER_D 0x0043815e
int  Radio::SetVolume(long lNewVolume) {
// LINE 812:
	__asm        cmp    lNewVolume, 0;
	__asm        jge    _T1d;
// LINE 813:
	lNewVolume = 0x0;
// LINE 814:
_T1d:
	__asm        cmp    lNewVolume, 0x2710;
	__asm        jle    _T31;
// LINE 815:
	lNewVolume = 0x2710;
// LINE 816:
_T31:
	this-><Radio+0x10:4> = lNewVolume;
// LINE 817:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jg     _T5d;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x24];
// LINE 819:
_T5d:
	return 0x1;
// LINE 820:
}

// FUNCTION: COPTER_D 0x004381cc
int  Radio::SetStation(int32_t nStationIndex) {
// LINE 827:
	__asm        mov    eax, this;
	__asm        mov    ecx, nStationIndex;
	__asm        cmp    [eax+0x20], ecx;
	__asm        jne    _T25;
// LINE 828:
	return 0x1;
// LINE 830:
_T25:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T4b;
// LINE 831:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        add    ecx, 0x34;
	__asm        call   dword ptr [eax+0xC];
// LINE 832:
_T4b:
	__asm        jmp    _T50;
_T50:
	__asm        jmp    _T55;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        cmp    eax, nStationIndex;
	__asm        jg     _T9e;
// LINE 833:
	__asm        jmp    _T7c;
_T7c:
	__asm        jmp    _T81;
_T81:
	__asm        jmp    _T86;
_T86:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        dec    eax;
	__asm        mov    nStationIndex, eax;
// LINE 834:
_T9e:
	__asm        cmp    nStationIndex, 0;
	__asm        jge    _Taf;
// LINE 835:
	return 0x0;
// LINE 836:
_Taf:
	this-><Radio+0x20:4> = nStationIndex;
// LINE 837:
	__asm        jmp    _Tbd;
_Tbd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _Tdc;
_Tdc:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
// LINE 838:
	return 0x1;
// LINE 839:
}

// FUNCTION: COPTER_D 0x004382ca
int  Radio::SetStation(enum RadioStationType radioStationType) {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 849:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T18:
	__asm        jmp    _T1d;
_T1d:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iEnd, eax;
	__asm        jmp    _T41;
_T3e:
	i++;
_T41:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _Ta1;
// LINE 850:
	__asm        jmp    _T52;
_T52:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x2C];
	__asm        cmp    eax, radioStationType;
	__asm        jne    _T9c;
// LINE 851:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
	__asm        jmp    _Ta8;
// LINE 852:
_T9c:
	__asm        jmp    _T3e;
// LINE 853:
_Ta1:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta8;
// LINE 854:
_Ta8:
}

// FUNCTION: COPTER_D 0x00438379
int  Radio::IsStationTypeAvailable(enum RadioStationType radioStationType) {
	/*bp-0x4*/   int32_t iEnd;
	/*bp-0x8*/   int32_t i;

// LINE 863:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T18:
	__asm        jmp    _T1d;
_T1d:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iEnd, eax;
	__asm        jmp    _T41;
_T3e:
	i++;
_T41:
	__asm        mov    eax, i;
	__asm        cmp    iEnd, eax;
	__asm        jle    _T97;
// LINE 864:
	__asm        jmp    _T52;
_T52:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax+0x2C];
	__asm        cmp    eax, radioStationType;
	__asm        jne    _T92;
// LINE 865:
	return 0x1;
// LINE 866:
_T92:
	__asm        jmp    _T3e;
// LINE 867:
_T97:
	return 0x0;
// LINE 868:
}

// FUNCTION: COPTER_D 0x0043841e
int  Radio::GetStationCount() {
// LINE 876:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        jmp    _T34;
// LINE 877:
_T34:
}

// FUNCTION: COPTER_D 0x00438457
int  Radio::DoState() {
// LINE 885:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _T20;
// LINE 886:
	__asm        xor    eax, eax;
	__asm        jmp    _T5a;
// LINE 887:
_T20:
	__asm        jmp    _T25;
_T25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T44;
_T44:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+0xC];
	__asm        jmp    _T5a;
// LINE 888:
_T5a:
}

// FUNCTION: COPTER_D 0x004384b6
int  Radio::StationDirectoryNameIsValid(/*packed*/ class basic_string<char>& sStationDirectory) {
	/*bp-0x4*/   int32_t i;

// LINE 898:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 9;
	__asm        jge    _T1b9;

	__asm        mov    eax, i;
	__asm        mov    eax, StationDirectoryNameArray[eax*4];
	__asm        mov    [ebp-0x24], eax;
// LINE 899:
	__asm        jmp    _T37;
_T37:
	__asm        jmp    _T3c;
_T3c:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T5c;
_T5c:
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _T9e;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T8f;
_T8f:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T9e;
_T9e:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    eax, ecx;
	__asm        jb     _Tae;

	__asm        mov    eax, ecx;
_Tae:
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _Tb6;
_Tb6:
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T102;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _Tec;

	__asm        jmp    _Td5;
_Td5:
	__asm        jmp    _Tda;
_Tda:
	__asm        xor    eax, eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tfd;
_Tec:
	__asm        jmp    _Tf1;
_Tf1:
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    dword ptr [ebp-0x18], 0;
_Tfd:
	__asm        jmp    _T182;
_T102:
	__asm        jmp    _T107;
_T107:
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T12c;

	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T138;

	__asm        jmp    _T138;
_T12c:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T138;
_T138:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcmp;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T154;
_T154:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T169;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T17d;
_T169:
	__asm        jmp    _T16e;
_T16e:
	__asm        mov    eax, sStationDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
_T17d:
	__asm        jmp    _T182;
_T182:
	__asm        jmp    _T187;
_T187:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T196;

	__asm        jmp    _T19b;
_T196:
	__asm        jmp    _T1b4;
_T19b:
	__asm        jmp    _T1aa;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T1b4;
// LINE 900:
_T1aa:
	return 0x1;
// LINE 901:
_T1b4:
	__asm        jmp    _T18;
// LINE 902:
_T1b9:
	return 0x0;
// LINE 903:
}

// FUNCTION: COPTER_D 0x0043867d
int  Radio::SetupStations() {
	/*bp-0x4*/   /*packed*/ class list<basic_string<char>>::iterator radioStationStringListIterator;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sRadioDirectory; // 0x8 bytes
	/*bp-0xa4*/  /*packed*/ class RadioStation tempRadioStation; // 0x98 bytes
	/*bp-0xac*/  /*packed*/ class basic_string<char> sCommercialDirectory; // 0x8 bytes
	/*bp-0xb0*/  int32_t nStationCount;
	/*bp-0xb8*/  /*packed*/ class basic_string<char> sCurrentLanguage; // 0x8 bytes
	/*bp-0xd8*/  /*unpacked*/ class Directory tempDirectory;
	/*bp-0xe0*/  /*packed*/ class list<basic_string<char>> radioStationStringList; // 0x8 bytes
	/*bp-0xe8*/  /*packed*/ class basic_string<char> sScratch; // 0x8 bytes
	/*bp-0xf0*/  /*packed*/ class basic_string<char> sStationDirectory; // 0x8 bytes

// LINE 915:
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 916:
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 917:
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 918:
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 919:
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::basic_string<char>;
// LINE 920:
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   list<basic_string<char>>::list<basic_string<char>>;
// LINE 921:
	__asm        jmp    _T56;
// LINE 922:
_T56:
	__asm        lea    ecx, tempRadioStation<vftable>;
	__asm        call   RadioStation::RadioStation;
// LINE 923:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        lea    ecx, [ebp-0xF8];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::Directory;
	__asm        lea    ecx, [ebp-0xF8];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        push   0x59855C;
	__asm        lea    ecx, [ebp-0x100];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    [ebp-0x254], eax;
// LINE 927:
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x254];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   3;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _Tbd;
_Tbd:
	__asm        lea    ecx, [ebp-0x100];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 928:
	__asm        mov    eax, SZ_RADIO_STATIONS_DIRECTORY_NAME;
	__asm        push   eax;
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x108];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 929:
	__asm        mov    eax, SZ_RADIO_COMMERCIAL_DIRECTORY_NAME;
	__asm        push   eax;
	__asm        lea    eax, sRadioDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x110];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 932:
	__asm        push   0;
	__asm        lea    eax, sStationDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ChangeDirectory;
// LINE 933:
	__asm        push   0;
	__asm        lea    eax, radioStationStringList.node;
	__asm        push   eax;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   Directory::ReadDirectoryDirectoryEntriesIntoStringList;
// LINE 936:
	__asm        jmp    _T155;
_T155:
	__asm        jmp    _T15a;
_T15a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   vector<RadioStation>::erase;
// LINE 937:
	__asm        lea    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        mov    radioStationStringListIterator.node, eax;
// LINE 938:
	tempRadioStation.myRadio = this;
// LINE 939:
	nStationCount = 0x0;
// LINE 940:
_T1a6:
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    _T1c3;
_T1c3:
	__asm        jmp    _T1c8;
_T1c8:
	__asm        mov    eax, [ebp-0x118];
	__asm        cmp    radioStationStringListIterator.node, eax;
	__asm        jne    _T1e1;

	__asm        jmp    _T1f8;

	__asm        jmp    _T1e1;
_T1e1:
	__asm        jmp    _T1f3;

	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        jne    _T1f8;
_T1f3:
	__asm        jmp    _T1fd;
_T1f8:
	__asm        jmp    _Td7b;
_T1fd:
	__asm        jmp    _T20f;

	__asm        cmp    dword ptr [ebp-0x250], 0;
	__asm        je     _Td7b;
// LINE 943:
_T20f:
	__asm        jmp    _T214;
_T214:
	__asm        push   0x5C;
	__asm        mov    ecx, radioStationStringListIterator.node;
	__asm        add    ecx, 8;
	__asm        call   basic_string<char>::operator+=;
// LINE 946:
	__asm        jmp    _T226;
_T226:
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, sStationDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x120];
	__asm        call   basic_string<char>::~basic_string<char>;
// LINE 947:
	__asm        lea    ecx, tempRadioStation<vftable>;
	__asm        call   RadioStation::ReadCallSignFromDisk;
	__asm        test   eax, eax;
	__asm        je     _Td4f;
// LINE 948:
	__asm        lea    ecx, tempRadioStation<vftable>;
	__asm        call   RadioStation::DetectRadioStationType;
// LINE 952:
	__asm        mov    eax, SZ_RADIO_STATIONS_MUSIC_DIRECTORY_NAME;
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sMusicDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x128];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _T2d6;

	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2d6:
	__asm        jmp    _T2db;
// LINE 956:
_T2db:
	__asm        mov    eax, SZ_RADIO_STATIONS_DJ_DIRECTORY_NAME;
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x130];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _T33c;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T33c:
	__asm        jmp    _T341;
// LINE 957:
_T341:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 958:
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        call   operator+;
	__asm        add    esp, 0xC;
	__asm        push   eax;
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   basic_string<char>::operator=;
	__asm        lea    ecx, [ebp-0x138];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T3b7;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x234], eax;
	__asm        mov    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3b7:
	__asm        jmp    _T3bc;
// LINE 959:
_T3bc:
	__asm        cmp    gDefaultLanguage, 1;
	__asm        je     _T429;

	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    _T429;
// LINE 960:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T41a;
// LINE 961:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 962:
	__asm        jmp    _T429;
// LINE 963:
_T41a:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::remove;
// LINE 965:
_T429:
	__asm        jmp    _T42e;
_T42e:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sDJDirectory.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T451;
_T451:
	__asm        mov    eax, SZ_RADIO_COMMERCIAL_DIRECTORY_NAME;
	__asm        mov    [ebp-0x22C], eax;
// LINE 969:
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220], eax;
	__asm        jmp    _T476;
_T476:
	__asm        jmp    _T47b;
_T47b:
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    eax, sRadioDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x21C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     _T4ea;

	__asm        jmp    _T4af;
_T4af:
	__asm        jmp    _T4b4;
_T4b4:
	__asm        mov    eax, [ebp-0x218];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, sRadioDirectory.reference;
	__asm        add    eax, [ecx+4];
	__asm        mov    [ebp-0x228], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x228];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4ea;
_T4ea:
	__asm        mov    eax, [ebp-0x218];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    _T4fe;
_T4fe:
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    ecx, [ebp-0x224];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x21C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x140];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x21C];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T532;
_T532:
	__asm        lea    eax, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        lea    ecx, [ebp-0x140];
	__asm        cmp    eax, ecx;
	__asm        je     _T5c3;

	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T550;
_T550:
	__asm        mov    eax, [ebp-0x13C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T574;

	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    tempRadioStation.sCommercialDirectory.reference, eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T5c3;
_T574:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x238], eax;
	__asm        cmp    dword ptr [ebp-0x238], 0;
	__asm        je     _T5bc;

	__asm        jmp    _T596;
_T596:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x238];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    tempRadioStation.sCommercialDirectory.reference, eax;
	__asm        jmp    _T5c3;
_T5bc:
	tempRadioStation.sCommercialDirectory.reference = 0x0;
_T5c3:
	__asm        jmp    _T5c8;
_T5c8:
	__asm        lea    ecx, [ebp-0x140];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _T607;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x20C], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x210], eax;
	__asm        mov    eax, [ebp-0x210];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T607:
	__asm        jmp    _T60c;
// LINE 970:
_T60c:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 971:
	__asm        jmp    _T622;
_T622:
	__asm        jmp    _T627;
_T627:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1F8];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _T651;
_T651:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6c6;

	__asm        jmp    _T666;
_T666:
	__asm        jmp    _T66b;
_T66b:
	__asm        jmp    _T670;
_T670:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x200], eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x204], eax;
	__asm        mov    eax, tempRadioStation.sCommercialDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1F4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x208], eax;
	__asm        mov    eax, [ebp-0x200];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x204];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x208];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T6c6;
_T6c6:
	__asm        mov    eax, [ebp-0x1F4];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1FC], eax;
	__asm        jmp    _T6da;
_T6da:
	__asm        jmp    _T6df;
_T6df:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1FC];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1F8];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x148];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x1F8];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T716;
_T716:
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        lea    ecx, [ebp-0x148];
	__asm        cmp    eax, ecx;
	__asm        je     _T7b9;

	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T73a;
_T73a:
	__asm        mov    eax, [ebp-0x144];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T764;

	__asm        mov    eax, [ebp-0x144];
	__asm        mov    sScratch.reference, eax;
	__asm        mov    eax, sScratch.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _T7b9;
_T764:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x214], eax;
	__asm        cmp    dword ptr [ebp-0x214], 0;
	__asm        je     _T7af;

	__asm        jmp    _T786;
_T786:
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x148];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x214];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sScratch.reference, eax;
	__asm        jmp    _T7b9;
_T7af:
	sScratch.reference = 0x0;
_T7b9:
	__asm        jmp    _T7be;
_T7be:
	__asm        lea    ecx, [ebp-0x148];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _T7fd;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7fd:
	__asm        jmp    _T802;
// LINE 972:
_T802:
	__asm        cmp    gDefaultLanguage, 1;
	__asm        je     _T86f;

	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    _T86f;
// LINE 973:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _T860;
// LINE 974:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 975:
	__asm        jmp    _T86f;
// LINE 976:
_T860:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::remove;
// LINE 978:
_T86f:
	__asm        jmp    _T874;
_T874:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T897;
_T897:
	__asm        mov    eax, SZ_RADIO_STATIONS_JINGLE_DIRECTORY_NAME;
	__asm        mov    [ebp-0x1E4], eax;
// LINE 982:
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    _T8bc;
_T8bc:
	__asm        jmp    _T8c1;
_T8c1:
	__asm        mov    eax, [ebp-0x1D8];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sStationBaseDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sStationBaseDirectory.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        cmp    dword ptr [ebp-0x1D8], 0;
	__asm        je     _T930;

	__asm        jmp    _T8f5;
_T8f5:
	__asm        jmp    _T8fa;
_T8fa:
	__asm        mov    eax, tempRadioStation.sStationBaseDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1D0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T930;
_T930:
	__asm        mov    eax, [ebp-0x1D0];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        jmp    _T944;
_T944:
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    ecx, [ebp-0x1DC];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x150];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x1D4];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T978;
_T978:
	__asm        lea    eax, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        lea    ecx, [ebp-0x150];
	__asm        cmp    eax, ecx;
	__asm        je     _Ta09;

	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _T996;
_T996:
	__asm        mov    eax, [ebp-0x14C];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T9ba;

	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    tempRadioStation.sJingleDirectory.reference, eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _Ta09;
_T9ba:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1F0], eax;
	__asm        cmp    dword ptr [ebp-0x1F0], 0;
	__asm        je     _Ta02;

	__asm        jmp    _T9dc;
_T9dc:
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1F0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    tempRadioStation.sJingleDirectory.reference, eax;
	__asm        jmp    _Ta09;
_Ta02:
	tempRadioStation.sJingleDirectory.reference = 0x0;
_Ta09:
	__asm        jmp    _Ta0e;
_Ta0e:
	__asm        lea    ecx, [ebp-0x150];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Ta4d;

	__asm        mov    eax, [ebp-0x150];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Ta4d:
	__asm        jmp    _Ta52;
// LINE 983:
_Ta52:
	__asm        push   0;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 984:
	__asm        jmp    _Ta68;
_Ta68:
	__asm        jmp    _Ta6d;
_Ta6d:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        jmp    _Ta97;
_Ta97:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tb0c;

	__asm        jmp    _Taac;
_Taac:
	__asm        jmp    _Tab1;
_Tab1:
	__asm        jmp    _Tab6;
_Tab6:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, tempRadioStation.sJingleDirectory.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1AC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tb0c;
_Tb0c:
	__asm        mov    eax, [ebp-0x1AC];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        jmp    _Tb20;
_Tb20:
	__asm        jmp    _Tb25;
_Tb25:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x158];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        lea    ecx, [ebp-0x1B0];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _Tb5c;
_Tb5c:
	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        lea    ecx, [ebp-0x158];
	__asm        cmp    eax, ecx;
	__asm        je     _Tbff;

	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        jmp    _Tb80;
_Tb80:
	__asm        mov    eax, [ebp-0x154];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tbaa;

	__asm        mov    eax, [ebp-0x154];
	__asm        mov    sScratch.reference, eax;
	__asm        mov    eax, sScratch.reference;
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    _Tbff;
_Tbaa:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1CC], eax;
	__asm        cmp    dword ptr [ebp-0x1CC], 0;
	__asm        je     _Tbf5;

	__asm        jmp    _Tbcc;
_Tbcc:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1CC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    sScratch.reference, eax;
	__asm        jmp    _Tbff;
_Tbf5:
	sScratch.reference = 0x0;
_Tbff:
	__asm        jmp    _Tc04;
_Tc04:
	__asm        lea    ecx, [ebp-0x158];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _Tc43;

	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x168], eax;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tc43:
	__asm        jmp    _Tc48;
// LINE 985:
_Tc48:
	__asm        cmp    gDefaultLanguage, 1;
	__asm        je     _Tcb5;

	__asm        lea    eax, sScratch.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x4C];
	__asm        test   eax, eax;
	__asm        jne    _Tcb5;
// LINE 986:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
	__asm        test   eax, eax;
	__asm        je     _Tca6;
// LINE 987:
	__asm        push   1;
	__asm        lea    eax, sCurrentLanguage.c_str_ptr;
	__asm        push   eax;
	__asm        call   LanguageManager::GetLanguageDirectoryName;
	__asm        add    esp, 8;
// LINE 988:
	__asm        jmp    _Tcb5;
// LINE 989:
_Tca6:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::remove;
// LINE 991:
_Tcb5:
	__asm        jmp    _Tcba;
_Tcba:
	__asm        mov    eax, sCurrentLanguage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        lea    ecx, tempRadioStation.sJingleDirectory.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Tcdd;
// LINE 994:
_Tcdd:
	nStationCount++;
// LINE 995:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+0xC], ecx;
	__asm        je     _Td26;

	__asm        lea    eax, tempRadioStation<vftable>;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+8], 0x98;
	__asm        jmp    _Td4a;
_Td26:
	__asm        jmp    _Td2b;
_Td2b:
	__asm        lea    eax, tempRadioStation<vftable>;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   vector<RadioStation>::insert_aux;
_Td4a:
	__asm        jmp    _Td4f;
// LINE 998:
_Td4f:
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, radioStationStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    radioStationStringListIterator.node, eax;
	__asm        jmp    _Td65;
_Td65:
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x15C], eax;
	__asm        jmp    _Td76;
// LINE 999:
_Td76:
	__asm        jmp    _T1a6;
// LINE 1002:
_Td7b:
	__asm        jmp    _Td80;
_Td80:
	__asm        jmp    _Td85;
_Td85:
	__asm        jmp    _Td8a;
_Td8a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+4];
	__asm        mov    ecx, 0x98;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x20];
	__asm        jg     _Tdc0;
// LINE 1003:
	this-><Radio+0x20:4> = 0x0;
// LINE 1005:
_Tdc0:
	__asm        mov    eax, nStationCount;
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    _Tdd1;
_Tdd1:
	__asm        lea    ecx, [ebp-0xC8];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, [ebp-0xD0];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        lea    ecx, tempDirectory<Directory+0x00:None>;
	__asm        call   list<DirectoryEntry>::~list<DirectoryEntry>;
	__asm        lea    ecx, tempRadioStation<vftable>;
	__asm        call   RadioStation::~RadioStation;
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    [ebp-0x19C], eax;
	__asm        jmp    _Te1a;
_Te1a:
	__asm        jmp    _Te1f;
_Te1f:
	__asm        mov    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   list<basic_string<char>>::begin;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   list<basic_string<char>>::erase;
	__asm        mov    eax, radioStationStringList.node;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _Te6f;
_Te6f:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _Te86;

	__asm        lea    ecx, radioStationStringList.node;
	__asm        call   list<basic_string<char>>::deallocate_buffers;
_Te86:
	__asm        jmp    _Te8b;
_Te8b:
	__asm        lea    ecx, sCurrentLanguage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sCurrentLanguage.c_str_ptr, 0;
	__asm        je     _Teca;

	__asm        mov    eax, sCurrentLanguage.c_str_ptr;
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Teca:
	__asm        jmp    _Tecf;
_Tecf:
	__asm        lea    ecx, sScratch.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sScratch.c_str_ptr, 0;
	__asm        je     _Tf0e;

	__asm        mov    eax, sScratch.c_str_ptr;
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tf0e:
	__asm        jmp    _Tf13;
_Tf13:
	__asm        lea    ecx, sCommercialDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sCommercialDirectory.c_str_ptr, 0;
	__asm        je     _Tf52;

	__asm        mov    eax, sCommercialDirectory.c_str_ptr;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x184], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tf52:
	__asm        jmp    _Tf57;
_Tf57:
	__asm        lea    ecx, sStationDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sStationDirectory.c_str_ptr, 0;
	__asm        je     _Tf96;

	__asm        mov    eax, sStationDirectory.c_str_ptr;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tf96:
	__asm        jmp    _Tf9b;
_Tf9b:
	__asm        lea    ecx, sRadioDirectory.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sRadioDirectory.c_str_ptr, 0;
	__asm        je     _Tfd1;

	__asm        mov    eax, sRadioDirectory.c_str_ptr;
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x194], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tfd1:
	__asm        jmp    _Tfd6;
_Tfd6:
	__asm        mov    eax, [ebp-0x160];
	__asm        jmp    _Tfe1;
// LINE 1006:
_Tfe1:
}

// FUNCTION: COPTER_D 0x00439663
int  Radio::DoesAtLeastOneSoundEntryExistForTheGivenDirectory(const /*packed*/ class basic_string<char>& sDirectory) {

	__asm        mov    eax, SZ_SOUND_FILE_FILTER;
	__asm        mov    [ebp-0x6C], eax;
// LINE 1014:
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T28;
_T28:
	__asm        jmp    _T2d;
_T2d:
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T57;

	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T63;

	__asm        jmp    _T63;
_T57:
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        jmp    _T63;
_T63:
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        sub    eax, [ebp-0x30];
	__asm        cmp    eax, [ebp-0x68];
	__asm        ja     _Tb2;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Ta3;
_Ta3:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T15e;

	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T13b;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T136;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T136;
_T136:
	__asm        jmp    _T144;
_T13b:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax], 0;
_T144:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T153;
_T153:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T165;
_T15e:
	__asm        mov    dword ptr [ebp-0x28], 0;
_T165:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T171;
_T171:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T1af;

	__asm        jmp    _T180;
_T180:
	__asm        jmp    _T185;
_T185:
	__asm        mov    eax, sDirectory;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1af;
_T1af:
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1bd;
_T1bd:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-0x34];
	__asm        add    [ecx], eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0xC];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        mov    eax, [ebp-0x28];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T258;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T258;

	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T238;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
_T238:
	__asm        jmp    _T23d;
_T23d:
	__asm        jmp    _T242;
_T242:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T253;
_T253:
	__asm        jmp    _T258;
_T258:
	__asm        jmp    _T25d;
_T25d:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T27f;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T27f:
	__asm        jmp    _T284;
_T284:
	__asm        jmp    _T289;
_T289:
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   Directory::DoesAnyEntryExistThatMatchesPattern;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T31b;

	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T31b;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2fb;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
_T2fb:
	__asm        jmp    _T300;
_T300:
	__asm        jmp    _T305;
_T305:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T316;
_T316:
	__asm        jmp    _T31b;
_T31b:
	__asm        jmp    _T320;
_T320:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T342;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T342:
	__asm        jmp    _T347;
_T347:
	__asm        mov    eax, [ebp-4];
	__asm        jmp    _T34f;
// LINE 1015:
_T34f:
}



// Contribution: 1:000389c0-00038bcf Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004399c0
// list<basic_string<char>>::get_node



// Contribution: 1:00038bd0-00038c3a Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00038c40-00038cbd Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00038cc0-00039038 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00439cc0
// vector<int>::push_back



// Contribution: 1:00039040-00039078 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0043a040
// RadioStation::`scalar deleting destructor'



// Contribution: 1:00039080-000390b1 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a080
// list<basic_string<char>>::begin



// Contribution: 1:000390c0-000392c0 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a0c0
// list<basic_string<char>>::~list<basic_string<char>>



// Contribution: 1:000392d0-0003930b Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a2d0
// list<basic_string<char>>::iterator::operator++



// Contribution: 1:00039310-00039440 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a310
// list<basic_string<char>>::erase



// Contribution: 1:00039450-00039488 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0043a450
// Radio::`scalar deleting destructor'



// Contribution: 1:00039490-000396e1 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a490
// list<basic_string<char>>::list<basic_string<char>>



// Contribution: 1:000396f0-000397c3 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a6f0
// vector<RadioStation>::erase



// Contribution: 1:000397d0-000397ff Module: 59, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00039800-00039868 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a800
// allocate



// Contribution: 1:00039870-000398a8 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a870
// construct



// Contribution: 1:000398b0-0003993e Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a8b0
// list<basic_string<char>>::deallocate_buffers



// Contribution: 1:00039940-00039adc Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043a940
// list<basic_string<char>>::erase



// Contribution: 1:00039ae0-0003a09c Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043aae0
// list<basic_string<char>>::operator=



// Contribution: 1:0003a0a0-0003a247 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b0a0
// list<basic_string<char>>::add_new_buffer



// Contribution: 1:0003a250-0003a5de Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b250
// vector<int>::operator=



// Contribution: 1:0003a5e0-0003a9d6 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b5e0
// vector<RadioStation>::insert_aux



// Contribution: 1:0003a9e0-0003adec Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043b9e0
// operator+



// Contribution: 1:0003adf0-0003b256 Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043bdf0
// operator+



// Contribution: 1:0003b260-0003b2eb Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043c260
// __random_shuffle



// Contribution: 1:0003b2f0-0003b70f Module: 59, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x0043c2f0
// __iter_swap



// Contribution: 2:00000518-0000055b Module: 59, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for RadioStation @ 0x0058f518
//   00: RadioStation::`scalar deleting destructor' @ 0x0043a040
//   01: RadioStation::Initialize @ 0x00434581
//   02: RadioStation::StationSet @ 0x004345bd
//   03: RadioStation::DoState @ 0x00434605
//   04: RadioStation::LoadAllPlaylists @ 0x004353e2
//   05: RadioStation::ShufflePlaylist @ 0x004359e2
//   06: RadioStation::RandomizeStringList @ 0x0043678e
//   07: RadioStation::ShuffleCycle @ 0x00436bcd
//   08: RadioStation::SetPlayStatus @ 0x0043459c
//   09: RadioStation::IsPlaying @ 0x004345e9
//   10: RadioStation::GetStationCallSign @ 0x00436d80
//   11: RadioStation::GetRadioStationType @ 0x00436f5f
//   12: RadioStation::IsCycleTypePresent @ 0x00436f7b
//   13: RadioStation::MoveToNextPlaylistItem @ 0x00437054
//   14: RadioStation::ReadCallSignFromDisk @ 0x00437337
//   15: RadioStation::DetectRadioStationType @ 0x004376dc
//   16: RadioStation::StartPlayingNextSelectionOfGivenType @ 0x00434a46
//   17 entries



// Contribution: 2:00000560-000005af Module: 59, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for Radio @ 0x0058f560
//   00: Radio::`scalar deleting destructor' @ 0x0043a450
//   01: Radio::Initialize @ 0x00437c57
//   02: Radio::DeInitialize @ 0x00437c88
//   03: Radio::SetPreferences @ 0x00437cbd
//   04: Radio::GetPreferences @ 0x00437d4c
//   05: Radio::GetPreferences @ 0x00437db7
//   06: Radio::SavePreferences @ 0x00437e67
//   07: Radio::SetOn @ 0x00437ee7
//   08: Radio::SetMute @ 0x00438005
//   09: Radio::SetOption @ 0x004380a0
//   10: Radio::GetOption @ 0x004380fb
//   11: Radio::SetVolume @ 0x0043815e
//   12: Radio::SetStation @ 0x004382ca
//   13: Radio::SetStation @ 0x004381cc
//   14: Radio::IsStationTypeAvailable @ 0x00438379
//   15: Radio::GetStationCount @ 0x0043841e
//   16: Radio::DoState @ 0x00438457
//   17: Radio::SetupStations @ 0x0043867d
//   18: Radio::StationDirectoryNameIsValid @ 0x004384b6
//   19: Radio::DoesAtLeastOneSoundEntryExistForTheGivenDirectory @ 0x00439663
//   20 entries



// Contribution: 3:00001488-0000155c Module: 59, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598488
char * StationDirectoryNameArray[9] = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984ac
char * SZ_RADIO_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984b0
char * SZ_RADIO_COMMERCIAL_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984b4
char * SZ_RADIO_STATIONS_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984b8
char * SZ_RADIO_STATIONS_MUSIC_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984bc
char * SZ_RADIO_STATIONS_DJ_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984c0
char * SZ_RADIO_STATIONS_JINGLE_DIRECTORY_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984c4
char * SZ_SOUND_FILE_FILTER = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005984c8
char * SZ_CALL_ID_FILTER = { 0 /* todo */ };



// Contribution: 3:00001560-00001563 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598560
uint32_t list<basic_string<char>>::number_of_lists = 0;



// Contribution: 3:00001564-00001567 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598564
/*packed*/ struct list<basic_string<char>>::list_node *list<basic_string<char>>::last = { 0 /* todo */ };



// Contribution: 3:00001568-0000156b Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598568
/*packed*/ struct list<basic_string<char>>::list_node *list<basic_string<char>>::next_avail = { 0 /* todo */ };



// Contribution: 3:0000156c-0000156f Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059856c
/*packed*/ struct list<basic_string<char>>::list_node *list<basic_string<char>>::free_list = { 0 /* todo */ };



// Contribution: 3:00001570-00001573 Module: 59, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x00598570
/*packed*/ struct list<basic_string<char>>::list_node_buffer *list<basic_string<char>>::buffer_list = { 0 /* todo */ };

