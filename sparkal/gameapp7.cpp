// Module: Gameapp7.obj
// Source: C:\Copter\source\sparkal\Gameapp7.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: long;

// Type: void;

// Type: /*unpacked*/ class CGameApp (forward reference);
// CGameApp Class implementation not found

// Type: char;

// Type: /*packed*/ class Version;
// VTABLE: COPTER_D 0x0058f5b8
class Version{ // packed(0xc bytes) TI: 0x241c
public:
	void Version();
	virtual void ~Version(); // vtable+0x0
	int32_t GetApplicationName(char *&);
	long GetApplicationVersion(int32_t);
	int32_t GetApplicationVersion(char *&);
	int32_t GetApplicationCopyright(char *&);
	int32_t GetApplicationDebugVersion(char *&);
	// calltype: NearC
	static int32_t GetSystemType();
	// calltype: NearC
	static long GetSystemVersion(int32_t);
	// calltype: NearC
	static int32_t GetSystemVersion(char *);
	// calltype: NearC
	static long GetCPUVersion();
	// calltype: NearC
	static long GetCPUSpeed();
protected:
	unsigned char * lpTransBlock;
	void * __ptr32 lpFVData;
};

// Type: int32_t;

// Type: /*packed*/ struct _MEMORYSTATUS;
struct _MEMORYSTATUS{ // packed(0x20 bytes) TI: 0x241e
	unsigned long dwLength;
	unsigned long dwMemoryLoad;
	unsigned long dwTotalPhys;
	unsigned long dwAvailPhys;
	unsigned long dwTotalPageFile;
	unsigned long dwAvailPageFile;
	unsigned long dwTotalVirtual;
	unsigned long dwAvailVirtual;
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	/*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	/*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ struct SparkalColor;
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: /*packed*/ class MessageBoxWindow (forward reference);
// VTABLE: COPTER_D 0x0058fa80
class MessageBoxWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x2a45
public:
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, unsigned long, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xc4
	virtual void SetButtonTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xc8
protected:
	virtual int32_t ConvertTypeToStringID(long); // vtable+0xcc
	virtual void DrawTextOntoBox(); // vtable+0xd0
	long lMessageID;
	/*packed*/ class basic_string<char> sMessage;
	/*packed*/ class basic_string<char> sButtonImageFileName;
	/*packed*/ class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	/*packed*/ struct SparkalColor colorFont;
	/*packed*/ struct SparkalColor colorButtonFont;
	/*packed*/ struct SparkalColor colorButtonFontHighlighted;
};

// Type: /*packed*/ class MessageBoxWindowEdit (forward reference);
// VTABLE: COPTER_D 0x005901f8
class MessageBoxWindowEdit : public MessageBoxWindow
{ // packed(0xa8 bytes) TI: 0x442a
public:
	void MessageBoxWindowEdit(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, const /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	void MessageBoxWindowEdit(/*packed*/ class MPoint&, unsigned long, unsigned long, const /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual void GetEditText(char *, unsigned long); // vtable+0xd4
	virtual void GetEditText(/*packed*/ class basic_string<char>&); // vtable+0xd8
protected:
	/*packed*/ class BoneheadTextEditWindow *myTextEditWindow;
};

// Type: uint32_t;

// Type: /*packed*/ struct Point2d (forward reference);
struct Point2d{ // packed(0x8 bytes) TI: 0x18b2
	int32_t x;
	int32_t y;
};

// Type: /*packed*/ class DigitalSound (forward reference);
// VTABLE: COPTER_D 0x0058f488
class DigitalSound : public Sound
{ // packed(0x7a bytes) TI: 0x45d4
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static /*packed*/ struct IDirectSound *lpDirectSound;
	uint32_t cbSize;
	/*packed*/ struct tWAVEFORMATEX waveFormatEx;
	/*packed*/ struct IDirectSoundBuffer *lpSound[8];
	/*packed*/ struct _STREAMBUFINFO *lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const /*packed*/ class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound() /* override */;
	/*packed*/ class DigitalSound& operator=(/*packed*/ class DigitalSound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&, int32_t); // vtable+0x2c
	virtual int32_t Load(); // vtable+0x30
	virtual int32_t LoadFromResource(); // vtable+0x34
	virtual int32_t LoadFromFile(); // vtable+0x38
	virtual void Unload(); // vtable+0x3c
	virtual long Play(long, int32_t) /* override */;
	virtual long Stop() /* override */;
	virtual long ShouldWeStream(); // vtable+0x40
	virtual long PlayStream(); // vtable+0x44
	virtual long StopStream(); // vtable+0x48
protected:
	virtual long IsPlaying(/*packed*/ struct IDirectSoundBuffer**); // vtable+0x4c
public:
	virtual long IsPlaying() /* override */;
	virtual int32_t GetVolume(long *) /* override */;
	virtual int32_t SetVolume(long) /* override */;
	virtual int32_t GetPan(long *); // vtable+0x50
	virtual int32_t SetPan(long); // vtable+0x54
	virtual int32_t SetPosition(long, long, long); // vtable+0x58
	virtual long GetOriginalFrequency(); // vtable+0x5c
	virtual int32_t GetFrequency(long *); // vtable+0x60
	virtual int32_t SetFrequency(long); // vtable+0x64
	virtual int32_t GetSoundType() /* override */;
	virtual int32_t SetCompletionNotification(void (*)(long), long) /* override */;
	virtual void StopCompletionNotification() /* override */;
	virtual long EstimateRemainingPlayTime() /* override */;
protected:
	virtual int32_t GetSoundAliasToPlay(/*packed*/ struct IDirectSoundBuffer**); // vtable+0x68
	virtual int32_t CreateSoundBuffer(/*packed*/ struct _DSBUFFERDESC*); // vtable+0x6c
	virtual int32_t CreatePrimarySoundBuffer(); // vtable+0x70
	virtual int32_t ReleaseSoundBuffer(); // vtable+0x74
	virtual long InitializeStreamBuffer(long); // vtable+0x78
	virtual void ProcessStreamingBufferTimerCallback(); // vtable+0x7c
	virtual void ProcessCompletionEstimationTimerCallback(); // vtable+0x80
	virtual void StopCompletionNotificationEstimationTimer(); // vtable+0x84
	virtual int32_t StartCompletionNotificationEstimationTimer(); // vtable+0x88
};

// Type: /*packed*/ struct UserMenuWindowDescription;
struct UserMenuWindowDescription{ // packed(0x54 bytes) TI: 0x101b
	/*packed*/ class basic_string<char> sImageFileName;
	int32_t nTransparentIndex;
	/*packed*/ class MRect rectPosition;
	long lMenuStringResourceIndex;
	long lMenuStringResourceCount;
	long lSelectionBase;
	/*packed*/ struct SparkalColor colorFont;
	/*packed*/ struct SparkalColor colorFontHighlighted;
	/*packed*/ class MPoint ptPositionFirstItem;
	int32_t nSizeItemFont;
	int32_t nLineHeight;
	long lTitleStringResourceIndex;
	int32_t bTitleCentered;
	/*packed*/ class MPoint ptTitlePosition;
	int32_t nSizeTitleFont;
};

// Type: /*packed*/ class UserMenuWindow (forward reference);
// VTABLE: COPTER_D 0x005912f8
class UserMenuWindow : public GraphicWindow
{ // packed(0x152 bytes) TI: 0x45d0
public:
	void UserMenuWindow(/*packed*/ struct UserMenuWindowDescription&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t SetSelectionIndex(int32_t); // vtable+0xc4
	virtual int32_t SetSelectionValue(int32_t); // vtable+0xc8
	virtual int32_t GetSelectionIndex(); // vtable+0xcc
	virtual int32_t GetSelectionValue(); // vtable+0xd0
	virtual int32_t GetLineCount(); // vtable+0xd4
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t ExecuteSelection(int32_t); // vtable+0xd8
protected:
	virtual void DrawSelectionIndicators(); // vtable+0xdc
	virtual int32_t DoCursorHitTest(int32_t&, long, long); // vtable+0xe0
	virtual int32_t GetPositionOfNthItem(int32_t, /*packed*/ class MPoint&); // vtable+0xe4
	/*packed*/ struct UserMenuWindowDescription myUserMenuWindowDescription;
	/*packed*/ class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	/*packed*/ class DigitalSound soundSelectionChange;
};

// Type: /*packed*/ class UserInputWindow (forward reference);
// VTABLE: COPTER_D 0x0058f228
class UserInputWindow : public GraphicWindow
{ // packed(0xb0 bytes) TI: 0x28a7
	enum KeyUsageType {
		nKeyUsageTypeFree = 0,
		nKeyUsageTypeReserved = 1,
		nKeyUsageTypeCurrentCommand = 2,
		nKeyUsageTypeOtherCommand = 3,
	};
public:
	void UserInputWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual void SetupAllInputDevices(); // vtable+0xc4
	virtual void SetupAllCommands(); // vtable+0xc8
	virtual void ReadShortcuts(/*packed*/ class list<Shortcut>&); // vtable+0xcc
	virtual void WriteShortcutsToPreferenceFile(); // vtable+0xd0
	int32_t HaveCommandsChanged();
	long GetCurrentDevice();
	long GetCurrentCommand();
	enum UserInputWindow::KeyUsageType GetKeyUsageType(long, long);
	void RemoveShortcutFromList(long, long, long);
protected:
	void UpdateDisplay(int32_t);
	int32_t DoJoystickWindowMessage(long, void * __ptr32);
	int32_t DoKeyboardWindowMessage(long, void * __ptr32);
	int32_t DoInputDeviceListBoxWindowMessage(long, void * __ptr32);
	int32_t DoCommandListBoxWindowMessage(long, void * __ptr32);
	void DisplayError(int32_t);
	void ClearDeviceArea();
	void AddJoystickTwinCommand(long, long, long);
	void RemoveJoystickTwinCommand(long, long, long);
	int32_t DoesTwinCommandExistForShortcut(long, long, long);
	/*packed*/ class JoystickWindow *myJoystickWindow;
	/*packed*/ class KeyboardWindow *myKeyboardWindow;
	/*packed*/ class ListBoxWindow *myInputDeviceListBoxWindow;
	/*packed*/ class ListBoxWindow *myCommandListBoxWindow;
	/*packed*/ class TextWindow *myStatusTextWindow;
	/*packed*/ class list<StringIDAssociation> myInputDeviceStringIDAssociationList;
	/*packed*/ class list<StringIDAssociation> myCommandStringIDAssociationList;
	/*packed*/ class list<Shortcut> myShortcutListNonConfigurable;
	/*packed*/ class list<Shortcut> myShortcutListConfigurable;
	int32_t bCommandsHaveChanged;
	int32_t bInitializing;
};

// Type: /*packed*/ class RenderSettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fc20
class RenderSettingsWindow : public GraphicWindow
{ // packed(0xb8 bytes) TI: 0x2add
public:
	void RenderSettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~RenderSettingsWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
	int32_t SetCurrentSettings(long, long, long, long, long);
	void GetCurrentSettings(long&, long&, long&, long&, long&);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	long bShowBuildingTextures;
	long bShowGroundTextures;
	long bShowSkyAndClouds;
	long lQuadPixelType;
	long lFogCloseness;
protected:
	void SetControlsBasedOnCurrentSettings();
	void DrawPreviewBasedOnCurrentSettings();
	void GetPreviewFileNames(/*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&);
	/*packed*/ class CheckBoxWindow *myBuildingTexturesCheckBoxWindow;
	/*packed*/ class CheckBoxWindow *myObjectTexturesCheckBoxWindow;
	/*packed*/ class CheckBoxWindow *mySkyDisplayCheckBoxWindow;
	/*unpacked*/ class ButtonGroup *myDisplayResolutionButtonGroup;
	/*packed*/ class SliderWindow *myFogSliderWindow;
	/*packed*/ class CBackBuffer *mySkyImage;
	/*packed*/ class CBackBuffer *myBuildingImage;
	/*packed*/ class MTimer mySkyTimer;
	long lSkyImagePanX;
};

// Type: /*packed*/ class SoundSettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fce8
class SoundSettingsWindow : public GraphicWindow
{ // packed(0x88 bytes) TI: 0x2a87
public:
	void SoundSettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	int32_t SetCurrentVolumeSettings(/*unpacked*/ struct SoundPreferences&);
	int32_t SetCurrentRadioSettings(/*packed*/ struct RadioPreferences&, long);
	void GetCurrentVolumeSettings(/*unpacked*/ struct SoundPreferences&);
	void GetCurrentRadioSettings(/*packed*/ struct RadioPreferences&);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	// calltype: NearC
	static long ConvertSoundValueToSliderValue(long);
	// calltype: NearC
	static long ConvertSliderValueToSoundValue(long);
protected:
	/*packed*/ class SliderWindow *myMasterVolumeSliderWindow;
	/*packed*/ class SliderWindow *myRadioStationSliderWindow;
	/*packed*/ class SliderWindow *myRadioVolumeSliderWindow;
	/*packed*/ class CheckBoxWindow *myDJCheckBoxWindow;
	/*packed*/ class CheckBoxWindow *myCommercialCheckBoxWindow;
};

// Type: /*packed*/ struct RadioPreferences;
struct RadioPreferences{ // packed(0x1c bytes) TI: 0x2a39
	long lVolume;
	int32_t bPreferToBeOn;
	long lCurrentStation;
	int32_t bOptionDJ;
	int32_t bOptionCommercials;
	int32_t bAutoMute;
	int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: /*packed*/ struct SoundPreferences;
struct SoundPreferences{ // packed(0x10 bytes) TI: 0x2845
	long lMasterVolume;
	long lDispatchVolume;
	long lSoundEffectsVolume;
	long lVehicleVolume;
};

// Type: /*packed*/ class CitySettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fdd0
class CitySettingsWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x2a34
public:
	void CitySettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	void SetCurrentCitySettings(/*packed*/ struct tagCitySettings*);
	void GetCurrentCitySettings(/*packed*/ struct tagCitySettings*);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
protected:
	/*packed*/ class SliderWindow *mySliderWindows[8];
};

// Type: /*packed*/ class ControlDisplayWindow (forward reference);
// VTABLE: COPTER_D 0x0058f300
class ControlDisplayWindow : public GraphicWindow
{ // packed(0x80 bytes) TI: 0x2adb
public:
	void ControlDisplayWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void ReadShortcuts(/*packed*/ class list<Shortcut>*); // vtable+0xc4
protected:
	void GetCommandString(/*packed*/ class basic_string<char>&, long);
	void AppendKeysString(/*packed*/ class basic_string<char>&, long, long, int32_t);
	int32_t bInitializing;
	/*packed*/ class ListBoxWindow *myCommandListBoxWindow;
	/*packed*/ class ListBoxWindow *myKeysListBoxWindow;
};

// Type: /*packed*/ class CheckupWindow (forward reference);
// VTABLE: COPTER_D 0x005903a0
class CheckupWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x486b
public:
	void CheckupWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	void SetCurrentSettings(long *);
	void GetCurrentSettings(long *);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	void SetTextControlsBasedOnCurrentSliderValues();
	void SetAllControlValuesToDefaults();
	// calltype: NearC
	static int32_t ShouldWeDisplayCheckupWindow();
	int32_t CanUserAffordCurrentSliderValues();
protected:
	/*packed*/ class SliderWindow *mySliderWindows[3];
	/*packed*/ class TextWindow *myTextWindows[5];
};

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class Sound;
// VTABLE: COPTER_D 0x0058f458
class Sound{ // packed(0x34 bytes) TI: 0x4335
	enum SoundSourceType {
		nSoundSourceTypeResource = 0,
		nSoundSourceTypeFile = 1,
	};
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum SoundDuplicateType {
		nSoundDuplicateDefault = 0,
		nSoundDuplicateInterrupt = 1,
		nSoundDuplicateContinue = 2,
		nSoundDuplicateOverlap = 3,
	};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	/*packed*/ class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	int32_t bUnloadBeforeNextPlay;
	void Sound();
	virtual void ~Sound(); // vtable+0x0
	/*packed*/ class Sound& operator=(const /*packed*/ class Sound&);
	virtual void SetSoundFile(const /*packed*/ class basic_string<char>&); // vtable+0x4
	virtual long Play(long, int32_t); // vtable+0x8
	virtual long Stop(); // vtable+0xc
	virtual long IsPlaying(); // vtable+0x10
	virtual int32_t SetCompletionNotification(void (*)(long), long); // vtable+0x14
	virtual void StopCompletionNotification(); // vtable+0x18
	virtual long EstimateRemainingPlayTime(); // vtable+0x1c
	virtual int32_t GetVolume(long *); // vtable+0x20
	virtual int32_t SetVolume(long); // vtable+0x24
	virtual int32_t GetSoundType(); // vtable+0x28
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: /*packed*/ class MessageBoxWindow;
// VTABLE: COPTER_D 0x0058fa80
class MessageBoxWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x2a45
public:
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, unsigned long, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xc4
	virtual void SetButtonTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xc8
protected:
	virtual int32_t ConvertTypeToStringID(long); // vtable+0xcc
	virtual void DrawTextOntoBox(); // vtable+0xd0
	long lMessageID;
	/*packed*/ class basic_string<char> sMessage;
	/*packed*/ class basic_string<char> sButtonImageFileName;
	/*packed*/ class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	/*packed*/ struct SparkalColor colorFont;
	/*packed*/ struct SparkalColor colorButtonFont;
	/*packed*/ struct SparkalColor colorButtonFontHighlighted;
};



// Contribution: 1:0003d250-00040e21 Module: 53, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043e250
void SoundCompletionDeletionFunction(long lSoundPointer) {
// LINE 77:
	__asm        mov    eax, lSoundPointer;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T30;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T30;
// LINE 78:
_T30:
	__asm        jmp    near ptr 0x0043E285;
}

// FUNCTION: COPTER_D 0x0043e28a
void SoundCompletionUnloadFunction(long lSoundPointer) {
// LINE 87:
	__asm        mov    eax, lSoundPointer;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lSoundPointer;
	__asm        call   dword ptr [eax+0x3C];
// LINE 88:
	__asm        jmp    near ptr 0x0043E2A0;
}

// FUNCTION: COPTER_D 0x0043e2a5
void  CGameApp::ShowVersion() {
	long lCPUVersion;
	long lPhysicalMemory;
	long lCPUSpeed;
	char * szVersionInformation;
	char szUnformattedVersionInformation[64];
	char szFormattedVersionInformation[512];
	/*packed*/ class Version tempVersion;
	long lSystemType;
	int32_t nFullStringID;
	/*packed*/ struct _MEMORYSTATUS tempMemoryStatus;
	/*packed*/ class basic_string<char> sMessage;

// LINE 106:
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::Version;
// LINE 107:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x298], eax;
	__asm        cmp    dword ptr [ebp-0x298], 0;
	__asm        je     _T86;

	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x298];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043E31D;

	__asm        mov    eax, [ebp-0x298];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T8d;
_T86:
	sMessage.reference = 0x0;
_T8d:
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0043E33E;
// LINE 108:
	szVersionInformation = 0x0;
// LINE 118:
	__asm        push   0;
	__asm        push   4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 119:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12B0], eax;
	__asm        cmp    dword ptr [ebp-0x12B0], 0;
	__asm        jne    _T15f;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12B0], eax;
	__asm        jmp    near ptr 0x0043E3B6;

	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E3DA;

	__asm        jmp    near ptr 0x0043E3DF;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E3FF;

	__asm        jmp    _T18d;
_T15f:
	__asm        jmp    near ptr 0x0043E409;

	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E42D;

	__asm        jmp    _T18d;
// LINE 120:
_T18d:
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     _T1bb;

	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72CC], eax;
	__asm        mov    eax, [ebp-0x72CC];
	__asm        mov    [ebp-0x72D4], eax;
	__asm        mov    eax, [ebp-0x72D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1bb:
	__asm        jmp    near ptr 0x0043E465;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sMessage.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0043E47D;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T22f;

	__asm        jmp    near ptr 0x0043E48F;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x72E0], eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x72E4], eax;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72E8], eax;
	__asm        mov    eax, [ebp-0x72E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x72E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x72E8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22f;
_T22f:
	__asm        jmp    near ptr 0x0043E4D9;

	__asm        mov    byte ptr [ebp-0x72D0], 0;
	__asm        jmp    near ptr 0x0043E4E5;

	__asm        lea    eax, [ebp-0x72D0];
	__asm        mov    [ebp-0x72D8], eax;
	__asm        jmp    near ptr 0x0043E4F6;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72DC], eax;
	__asm        mov    eax, [ebp-0x72D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x72DC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0043E51A;

	__asm        jmp    near ptr 0x0043E51F;

	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 121:
	__asm        push   0x598828;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 124:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::GetApplicationVersion;
	__asm        test   eax, eax;
	__asm        je     _T3da;
// LINE 125:
	__asm        push   0;
	__asm        push   0x175;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 126:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22B4], eax;
	__asm        cmp    dword ptr [ebp-0x22B4], 0;
	__asm        jne    _T377;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22B4], eax;
	__asm        jmp    near ptr 0x0043E5CE;

	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E5F2;

	__asm        jmp    near ptr 0x0043E5F7;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E617;

	__asm        jmp    _T3a5;
_T377:
	__asm        jmp    near ptr 0x0043E621;

	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E645;

	__asm        jmp    _T3a5;
// LINE 127:
_T3a5:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 128:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 131:
_T3da:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::GetApplicationDebugVersion;
	__asm        test   eax, eax;
	__asm        je     _T513;
// LINE 132:
	__asm        push   0;
	__asm        push   0x176;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 133:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32B8], eax;
	__asm        cmp    dword ptr [ebp-0x32B8], 0;
	__asm        jne    _T4b0;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32B8], eax;
	__asm        jmp    near ptr 0x0043E707;

	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E72B;

	__asm        jmp    near ptr 0x0043E730;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E750;

	__asm        jmp    _T4de;
_T4b0:
	__asm        jmp    near ptr 0x0043E75A;

	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E77E;

	__asm        jmp    _T4de;
// LINE 134:
_T4de:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 135:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 140:
_T513:
	__asm        call   Version::GetSystemType;
	__asm        mov    lSystemType, eax;
// LINE 141:
	__asm        push   0;
	__asm        mov    eax, lSystemType;
	__asm        add    eax, 0x177;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 142:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x42BC], eax;
	__asm        cmp    dword ptr [ebp-0x42BC], 0;
	__asm        jne    _T5de;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x42BC], eax;
	__asm        jmp    near ptr 0x0043E835;

	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E859;

	__asm        jmp    near ptr 0x0043E85E;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E87E;

	__asm        jmp    _T60c;
_T5de:
	__asm        jmp    near ptr 0x0043E888;

	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E8AC;

	__asm        jmp    _T60c;
// LINE 144:
_T60c:
	__asm        push   1;
	__asm        call   Version::GetSystemVersion;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Version::GetSystemVersion;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 145:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 146:
	__asm        push   0x59882C;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 149:
	lPhysicalMemory = 0x0;
// LINE 152:
	tempMemoryStatus.dwLength = 0x20;
// LINE 153:
	__asm        lea    eax, tempMemoryStatus.dwLength;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C362C];
// LINE 154:
	__asm        mov    ecx, 0xFA000;
	__asm        mov    eax, tempMemoryStatus.dwTotalPhys;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    lPhysicalMemory, eax;
// LINE 156:
	__asm        push   0;
	__asm        push   0x174;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 157:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x52C0], eax;
	__asm        cmp    dword ptr [ebp-0x52C0], 0;
	__asm        jne    _T750;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x52C0], eax;
	__asm        jmp    near ptr 0x0043E9A7;

	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E9CB;

	__asm        jmp    near ptr 0x0043E9D0;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E9F0;

	__asm        jmp    _T77e;
_T750:
	__asm        jmp    near ptr 0x0043E9FA;

	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EA1E;

	__asm        jmp    _T77e;
// LINE 158:
_T77e:
	__asm        mov    eax, lPhysicalMemory;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 159:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 162:
	__asm        call   Version::GetCPUVersion;
	__asm        mov    lCPUVersion, eax;
// LINE 163:
	__asm        push   0;
	__asm        mov    eax, lCPUVersion;
	__asm        add    eax, 0x168;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 164:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x62C4], eax;
	__asm        cmp    dword ptr [ebp-0x62C4], 0;
	__asm        jne    _T884;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x62C4], eax;
	__asm        jmp    near ptr 0x0043EADB;

	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EAFF;

	__asm        jmp    near ptr 0x0043EB04;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043EB24;

	__asm        jmp    _T8b2;
_T884:
	__asm        jmp    near ptr 0x0043EB2E;

	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EB52;

	__asm        jmp    _T8b2;
// LINE 165:
_T8b2:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 168:
	__asm        call   Version::GetCPUSpeed;
	__asm        mov    lCPUSpeed, eax;
// LINE 169:
	__asm        cmp    lCPUSpeed, 0;
	__asm        je     _Ta04;
// LINE 170:
	__asm        push   0;
	__asm        push   0x173;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 171:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x72C8], eax;
	__asm        cmp    dword ptr [ebp-0x72C8], 0;
	__asm        jne    _T9a1;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x72C8], eax;
	__asm        jmp    near ptr 0x0043EBF8;

	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EC1C;

	__asm        jmp    near ptr 0x0043EC21;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043EC41;

	__asm        jmp    _T9cf;
_T9a1:
	__asm        jmp    near ptr 0x0043EC4B;

	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EC6F;

	__asm        jmp    _T9cf;
// LINE 172:
_T9cf:
	__asm        mov    eax, lCPUSpeed;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 173:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 178:
_Ta04:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2AC], eax;
	__asm        cmp    dword ptr [ebp-0x2AC], 0;
	__asm        je     _Ta3e;

	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2AC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x290], eax;
	__asm        jmp    _Ta48;
_Ta3e:
	None = 0x0;
_Ta48:
	__asm        mov    dword ptr [ebp-0x294], 0;
	__asm        jmp    near ptr 0x0043ECFC;

	__asm        push   1;
	__asm        lea    eax, [ebp-0x294];
	__asm        push   eax;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
	__asm        lea    ecx, [ebp-0x294];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x294], 0;
	__asm        je     _Taaf;

	__asm        mov    eax, [ebp-0x294];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Taaf:
	__asm        jmp    near ptr 0x0043ED59;
// LINE 179:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     _Taea;

	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x2A4], eax;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Taea:
	__asm        jmp    near ptr 0x0043ED94;

	__asm        lea    ecx, tempVersion<vftable>;
	__asm        call   Version::~Version;
	__asm        jmp    near ptr 0x0043EDA1;
}

// FUNCTION: COPTER_D 0x0043eda6
int  CGameApp::CreateMessageBox(long lID, /*packed*/ class basic_string<char>& sMessage, long lType) {
	char * szImageFileNameToUse;
	/*packed*/ struct SparkalColor colorButtonFont;
	char * szButtonImageFileNameToUse;
	/*packed*/ struct SparkalColor colorButtonFontHighlighted;
	char * szAnimationFileNameToUse;
	/*packed*/ struct SparkalColor colorMessageFont;
	/*packed*/ class MessageBoxWindow *tempMessageBoxWindow;

// LINE 190:
	__asm        jmp    near ptr 0x0043EDBD;
// LINE 191:
	__asm        jmp    near ptr 0x0043EDC2;
// LINE 192:
	__asm        jmp    near ptr 0x0043EDC7;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0043EDEA;

	__asm        jmp    near ptr 0x0043EDEF;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0043EE03;

	__asm        jmp    near ptr 0x0043EE08;

	__asm        jmp    near ptr 0x0043EE0D;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    _T3b7;
// LINE 196:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_1;
// LINE 197:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_1;
// LINE 198:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_1;
// LINE 199:
	__asm        mov    byte ptr [ebp-0x20], 0x6B;
	__asm        mov    byte ptr [ebp-0x1F], 0x52;
	__asm        mov    byte ptr [ebp-0x1E], 0x4D;
	__asm        jmp    near ptr 0x0043EE4A;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 200:
	__asm        mov    byte ptr [ebp-0x24], 0xDA;
	__asm        mov    byte ptr [ebp-0x23], 0xDA;
	__asm        mov    byte ptr [ebp-0x22], 0xDA;
	__asm        jmp    near ptr 0x0043EE61;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 201:
	__asm        mov    byte ptr [ebp-0x28], 0xF0;
	__asm        mov    byte ptr [ebp-0x27], 0xFA;
	__asm        mov    byte ptr [ebp-0x26], 0xFF;
	__asm        jmp    near ptr 0x0043EE78;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 202:
	__asm        jmp    _T3f8;
// LINE 204:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBCC], 0;
	__asm        je     _T170;

	__asm        jmp    near ptr 0x0043EE9B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBCC];
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     _T170;
// LINE 205:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_2D;
// LINE 206:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2D;
// LINE 207:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2D;
// LINE 208:
	__asm        mov    byte ptr [ebp-0x2C], 0x18;
	__asm        mov    byte ptr [ebp-0x2B], 0x21;
	__asm        mov    byte ptr [ebp-0x2A], 0x39;
	__asm        jmp    near ptr 0x0043EEDD;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 209:
	__asm        mov    byte ptr [ebp-0x30], 0x4A;
	__asm        mov    byte ptr [ebp-0x2F], 0x95;
	__asm        mov    byte ptr [ebp-0x2E], 0xC0;
	__asm        jmp    near ptr 0x0043EEF4;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 210:
	__asm        mov    byte ptr [ebp-0x34], 0x70;
	__asm        mov    byte ptr [ebp-0x33], 0xCA;
	__asm        mov    byte ptr [ebp-0x32], 0xEA;
	__asm        jmp    near ptr 0x0043EF0B;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 212:
	__asm        jmp    _T1cd;
// LINE 213:
_T170:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_2N;
// LINE 214:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2N;
// LINE 215:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2N;
// LINE 216:
	__asm        mov    byte ptr [ebp-0x38], 0x19;
	__asm        mov    byte ptr [ebp-0x37], 0x1F;
	__asm        mov    byte ptr [ebp-0x36], 0x41;
	__asm        jmp    near ptr 0x0043EF3F;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 217:
	__asm        mov    byte ptr [ebp-0x3C], 0x30;
	__asm        mov    byte ptr [ebp-0x3B], 0x7A;
	__asm        mov    byte ptr [ebp-0x3A], 0xAA;
	__asm        jmp    near ptr 0x0043EF56;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 218:
	__asm        mov    byte ptr [ebp-0x40], 0x70;
	__asm        mov    byte ptr [ebp-0x3F], 0xCA;
	__asm        mov    byte ptr [ebp-0x3E], 0xEA;
	__asm        jmp    near ptr 0x0043EF6D;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 220:
_T1cd:
	__asm        jmp    _T3f8;
// LINE 222:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_3;
// LINE 223:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_3;
// LINE 224:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_3;
// LINE 225:
	__asm        mov    byte ptr [ebp-0x44], 0x15;
	__asm        mov    byte ptr [ebp-0x43], 0x18;
	__asm        mov    byte ptr [ebp-0x42], 0x4A;
	__asm        jmp    near ptr 0x0043EFA1;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 226:
	__asm        mov    byte ptr [ebp-0x48], 0x44;
	__asm        mov    byte ptr [ebp-0x47], 0x8A;
	__asm        mov    byte ptr [ebp-0x46], 0xAC;
	__asm        jmp    near ptr 0x0043EFB8;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 227:
	__asm        mov    byte ptr [ebp-0x4C], 0x94;
	__asm        mov    byte ptr [ebp-0x4B], 0xD6;
	__asm        mov    byte ptr [ebp-0x4A], 0xFF;
	__asm        jmp    near ptr 0x0043EFCF;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 228:
	__asm        jmp    _T3f8;
// LINE 230:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_4;
// LINE 231:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_4;
// LINE 232:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_4;
// LINE 233:
	__asm        mov    byte ptr [ebp-0x50], 0x15;
	__asm        mov    byte ptr [ebp-0x4F], 0x18;
	__asm        mov    byte ptr [ebp-0x4E], 0x4A;
	__asm        jmp    near ptr 0x0043F003;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 234:
	__asm        mov    byte ptr [ebp-0x54], 0x40;
	__asm        mov    byte ptr [ebp-0x53], 0x89;
	__asm        mov    byte ptr [ebp-0x52], 0xB5;
	__asm        jmp    near ptr 0x0043F01A;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 235:
	__asm        mov    byte ptr [ebp-0x58], 0x70;
	__asm        mov    byte ptr [ebp-0x57], 0xCA;
	__asm        mov    byte ptr [ebp-0x56], 0xEA;
	__asm        jmp    near ptr 0x0043F031;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 236:
	__asm        jmp    _T3f8;
// LINE 238:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_5;
// LINE 239:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_5;
// LINE 240:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_5;
// LINE 241:
	__asm        mov    byte ptr [ebp-0x5C], 0x15;
	__asm        mov    byte ptr [ebp-0x5B], 0x18;
	__asm        mov    byte ptr [ebp-0x5A], 0x4A;
	__asm        jmp    near ptr 0x0043F065;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 242:
	__asm        mov    byte ptr [ebp-0x60], 0x40;
	__asm        mov    byte ptr [ebp-0x5F], 0x89;
	__asm        mov    byte ptr [ebp-0x5E], 0xB5;
	__asm        jmp    near ptr 0x0043F07C;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 243:
	__asm        mov    byte ptr [ebp-0x64], 0x70;
	__asm        mov    byte ptr [ebp-0x63], 0xCA;
	__asm        mov    byte ptr [ebp-0x62], 0xEA;
	__asm        jmp    near ptr 0x0043F093;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 244:
	__asm        jmp    _T3f8;
// LINE 246:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_6;
// LINE 247:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_6;
// LINE 248:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_6;
// LINE 249:
	__asm        mov    byte ptr [ebp-0x68], 0x10;
	__asm        mov    byte ptr [ebp-0x67], 0x15;
	__asm        mov    byte ptr [ebp-0x66], 0x1F;
	__asm        jmp    near ptr 0x0043F0C7;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 250:
	__asm        mov    byte ptr [ebp-0x6C], 0xA;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0xDA;
	__asm        jmp    near ptr 0x0043F0DE;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 251:
	__asm        mov    byte ptr [ebp-0x70], 0xD3;
	__asm        mov    byte ptr [ebp-0x6F], 0xDA;
	__asm        mov    byte ptr [ebp-0x6E], 0xFF;
	__asm        jmp    near ptr 0x0043F0F5;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 254:
_T355:
	szImageFileNameToUse = SZ_ABOUT_BOX_IMAGE_FILE_NAME_0;
// LINE 255:
	szButtonImageFileNameToUse = SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_0;
// LINE 256:
	szAnimationFileNameToUse = SZ_ABOUT_BOX_ANIMATION_FILE_NAME_0;
// LINE 257:
	__asm        mov    byte ptr [ebp-0x74], 0x10;
	__asm        mov    byte ptr [ebp-0x73], 0x15;
	__asm        mov    byte ptr [ebp-0x72], 0x1F;
	__asm        jmp    near ptr 0x0043F124;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 258:
	__asm        mov    byte ptr [ebp-0x78], 0xA;
	__asm        mov    byte ptr [ebp-0x77], 0x85;
	__asm        mov    byte ptr [ebp-0x76], 0xDA;
	__asm        jmp    near ptr 0x0043F13B;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 259:
	__asm        mov    byte ptr [ebp-0x7C], 0xD3;
	__asm        mov    byte ptr [ebp-0x7B], 0xDA;
	__asm        mov    byte ptr [ebp-0x7A], 0xFF;
	__asm        jmp    near ptr 0x0043F152;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 260:
	__asm        jmp    _T3f8;
_T3b7:
	__asm        sub    dword ptr [ebp-0x9C], 4;
	__asm        cmp    dword ptr [ebp-0x9C], 7;
	__asm        ja     _T355;

	__asm        mov    eax, [ebp-0x9C];
	__asm        jmp    SwitchPointers4452734[0][eax*4];
// Switch pointers
// LINE 264:
_T3f8:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T49f;

	__asm        cmp    this, 0;
	__asm        je     _T433;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T43d;
_T433:
	None = 0x0;
_T43d:
	__asm        jmp    near ptr 0x0043F1E8;

	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0043F201;

	__asm        mov    eax, szAnimationFileNameToUse;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileNameToUse;
	__asm        push   eax;
	__asm        mov    eax, szImageFileNameToUse;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, lID;
	__asm        push   eax;
	__asm        mov    eax, sMessage;
	__asm        push   eax;
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   MessageBoxWindow::MessageBoxWindow;
	__asm        mov    tempMessageBoxWindow, eax;
	__asm        jmp    _T4a6;
_T49f:
	tempMessageBoxWindow = 0x0;
// LINE 265:
_T4a6:
	__asm        cmp    tempMessageBoxWindow, 0;
	__asm        je     _T504;
// LINE 266:
	__asm        lea    eax, colorMessageFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 267:
	__asm        lea    eax, colorButtonFontHighlighted.Blue;
	__asm        push   eax;
	__asm        lea    eax, colorButtonFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 268:
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+4];
// LINE 269:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 270:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 272:
_T504:
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        jmp    near ptr 0x0043F2B2;
// LINE 273:
}

// FUNCTION: COPTER_D 0x0043f2b9
int  CGameApp::CreateMessageBox(long lID, int32_t nStringID, long lType) {
	int32_t nFullStringID;
	/*packed*/ class basic_string<char> sMessage;

// LINE 282:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043F314;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sMessage.reference = 0x0;
_T6d:
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0043F332;
// LINE 284:
	__asm        push   0;
	__asm        mov    eax, nStringID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 285:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    _T3a7;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    near ptr 0x0043F3A2;

	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    _T143;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F3ED;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T143;
_T143:
	__asm        jmp    near ptr 0x0043F401;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T179;

	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T1da;

	__asm        jmp    near ptr 0x0043F420;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1da;
_T179:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     _T1ba;

	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    _T1c4;
_T1ba:
	None = 0x0;
_T1c4:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T219;
_T1da:
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     _T219;

	__asm        jmp    near ptr 0x0043F4A5;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T219;
_T219:
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F4E3;

	__asm        jmp    near ptr 0x0043F4E8;

	__asm        jmp    near ptr 0x0043F4ED;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    near ptr 0x0043F505;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T29b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F545;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T29b;
_T29b:
	__asm        jmp    near ptr 0x0043F559;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2cf;

	__asm        jmp    near ptr 0x0043F56B;

	__asm        jmp    near ptr 0x0043F570;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sMessage.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    _T344;
_T2cf:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     _T329;

	__asm        jmp    near ptr 0x0043F5AA;

	__asm        jmp    near ptr 0x0043F5AF;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    _T333;
_T329:
	None = 0x0;
_T333:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sMessage.reference, eax;
_T344:
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     _T38c;

	__asm        jmp    near ptr 0x0043F60F;

	__asm        jmp    near ptr 0x0043F614;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T38c;
_T38c:
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F656;

	__asm        jmp    near ptr 0x0043F65B;

	__asm        jmp    _T53b;
_T3a7:
	__asm        jmp    near ptr 0x0043F665;

	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    _T406;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F6B0;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T406;
_T406:
	__asm        jmp    near ptr 0x0043F6C4;

	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T43c;

	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T4e1;

	__asm        jmp    near ptr 0x0043F6E3;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4e1;
_T43c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     _T47d;

	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    _T487;
_T47d:
	None = 0x0;
_T487:
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T4ce;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T4ce;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T4ce;
_T4ce:
	__asm        jmp    near ptr 0x0043F78C;

	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    _T520;
_T4e1:
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     _T520;

	__asm        jmp    near ptr 0x0043F7AC;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T520;
_T520:
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F7EA;

	__asm        jmp    near ptr 0x0043F7EF;

	__asm        jmp    _T53b;
// LINE 286:
_T53b:
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        lea    eax, sMessage.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, lID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T5d8;

	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T5d8;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T5b8;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T5b8:
	__asm        jmp    near ptr 0x0043F876;

	__asm        jmp    near ptr 0x0043F87B;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F88C;

	__asm        jmp    _T5d8;
_T5d8:
	__asm        jmp    near ptr 0x0043F896;

	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     _T5ff;

	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5ff:
	__asm        jmp    near ptr 0x0043F8BD;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0043F8C5;
// LINE 287:
}

// FUNCTION: COPTER_D 0x0043f8cc
void  CGameApp::DestroyMessageBox() {
// LINE 298:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 299:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jge    _T32;
// LINE 300:
	this-><CGameApp+0xa4:4> = 0x0;
// LINE 301:
_T32:
	__asm        jmp    near ptr 0x0043F903;
}

// FUNCTION: COPTER_D 0x0043f908
int  CGameApp::CreateCheatCodeEntryMessageBox() {
	/*packed*/ struct SparkalColor colorButtonFont;
	/*packed*/ class MessageBoxWindowEdit *tempMessageBoxWindowEdit;
	/*packed*/ struct SparkalColor colorButtonFontHighlighted;
	/*packed*/ struct SparkalColor colorMessageFont;


	None = 0x0;
// LINE 308:
	__asm        jmp    near ptr 0x0043F920;
// LINE 309:
	__asm        jmp    near ptr 0x0043F925;
// LINE 310:
	__asm        jmp    near ptr 0x0043F92A;
// LINE 313:
	__asm        mov    byte ptr [ebp-0x14], 0x10;
	__asm        mov    byte ptr [ebp-0x13], 0x15;
	__asm        mov    byte ptr [ebp-0x12], 0x1F;
	__asm        jmp    near ptr 0x0043F93B;

	reinterpret_cast<uint32_t>(colorMessageFont.Blue) = None;
// LINE 314:
	__asm        mov    byte ptr [ebp-0x18], 0xA;
	__asm        mov    byte ptr [ebp-0x17], 0x85;
	__asm        mov    byte ptr [ebp-0x16], 0xDA;
	__asm        jmp    near ptr 0x0043F952;

	reinterpret_cast<uint32_t>(colorButtonFont.Blue) = None;
// LINE 315:
	__asm        mov    byte ptr [ebp-0x1C], 0xD3;
	__asm        mov    byte ptr [ebp-0x1B], 0xDA;
	__asm        mov    byte ptr [ebp-0x1A], 0xFF;
	__asm        jmp    near ptr 0x0043F969;

	reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue) = None;
// LINE 322:
	__asm        push   0xA8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T170;

	__asm        cmp    this, 0;
	__asm        je     _T99;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Ta0;
_T99:
	None = 0x0;
_Ta0:
	__asm        or     dword ptr [ebp-0x34], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _Tf4;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043F9F1;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Tfb;
_Tf4:
	None = 0x0;
_Tfb:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0043FA0F;

	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0043FA1A;

	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0043FA2D;

	__asm        mov    eax, SZ_ABOUT_BOX_ANIMATION_FILE_NAME_0;
	__asm        push   eax;
	__asm        mov    eax, SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_0;
	__asm        push   eax;
	__asm        mov    eax, SZ_ABOUT_BOX_IMAGE_FILE_NAME_0;
	__asm        push   eax;
	__asm        mov    eax, SZ_CHEAT_BOX_TEXT_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7DF;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        push   0x25;
	__asm        push   0x10001;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   MessageBoxWindowEdit::MessageBoxWindowEdit;
	__asm        mov    tempMessageBoxWindowEdit, eax;
	__asm        jmp    _T177;
_T170:
	tempMessageBoxWindowEdit = 0x0;
_T177:
	__asm        test   byte ptr [ebp-0x34], 1;
	__asm        je     _T239;

	__asm        and    dword ptr [ebp-0x34], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x24];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T208;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T208;

	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e8;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0;
_T1e8:
	__asm        jmp    near ptr 0x0043FAF5;

	__asm        jmp    near ptr 0x0043FAFA;

	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043FB0B;

	__asm        jmp    _T208;
_T208:
	__asm        jmp    near ptr 0x0043FB15;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T22f;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T22f:
	__asm        jmp    near ptr 0x0043FB3C;

	__asm        jmp    _T239;
// LINE 323:
_T239:
	__asm        cmp    tempMessageBoxWindowEdit, 0;
	__asm        je     _T29b;
// LINE 324:
	__asm        lea    eax, colorMessageFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0xC4];
// LINE 325:
	__asm        lea    eax, colorButtonFontHighlighted.Blue;
	__asm        push   eax;
	__asm        lea    eax, colorButtonFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0xC8];
// LINE 326:
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+4];
// LINE 327:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0x40];
// LINE 328:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 329:
	__asm        mov    eax, 1;
	__asm        jmp    _T2a2;
// LINE 331:
_T29b:
	__asm        xor    eax, eax;
	__asm        jmp    _T2a2;
// LINE 332:
_T2a2:
}

// FUNCTION: COPTER_D 0x0043fbaf
void  CGameApp::DestroyCheatCodeEntryMessageBox() {
// LINE 340:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 341:
	__asm        jmp    near ptr 0x0043FBC8;
}

// FUNCTION: COPTER_D 0x0043fbcd
int  CGameApp::DoCheatCode(/*packed*/ class basic_string<char>& sCheatCodeString) {
	int32_t nReturnValue;
	char * szCheatOn;
	char * szCheatSoundFileName;
	char * szCheatOff;
	uint32_t nTextPosition;


	None = 0x0;
// LINE 353:
	nReturnValue = 0x0;
// LINE 354:
	szCheatSoundFileName = 0x0;
// LINE 356:
	szCheatOn = 0x598830;
// LINE 357:
	szCheatOff = 0x59883c;
// LINE 360:
	__asm        jmp    near ptr 0x0043FC0A;

	__asm        jmp    near ptr 0x0043FC0F;

	__asm        push   0x59884C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59884C;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Tb3;
// LINE 362:
	__asm        cmp    G_CheatCodes[0], 0;
	__asm        jne    _T84;

	__asm        mov    G_CheatCodes[0], 1;
	__asm        jmp    _T8e;
_T84:
	G_CheatCodes[0] = 0x0;
// LINE 363:
_T8e:
	__asm        cmp    G_CheatCodes[0], 0;
	__asm        je     _Ta6;
// LINE 364:
	szCheatSoundFileName = szCheatOn;
// LINE 365:
	__asm        jmp    _Tac;
// LINE 366:
_Ta6:
	szCheatSoundFileName = szCheatOff;
// LINE 367:
_Tac:
	nReturnValue = 0x1;
// LINE 369:
_Tb3:
	__asm        jmp    near ptr 0x0043FC85;

	__asm        jmp    near ptr 0x0043FC8A;

	__asm        push   0x598860;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x598860;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T12e;
// LINE 370:
	__asm        cmp    G_CheatCodes[1], 0;
	__asm        jne    _Tff;

	__asm        mov    G_CheatCodes[1], 1;
	__asm        jmp    _T109;
_Tff:
	G_CheatCodes[1] = 0x0;
// LINE 371:
_T109:
	__asm        cmp    G_CheatCodes[1], 0;
	__asm        je     _T121;
// LINE 372:
	szCheatSoundFileName = szCheatOn;
// LINE 373:
	__asm        jmp    _T127;
// LINE 374:
_T121:
	szCheatSoundFileName = szCheatOff;
// LINE 375:
_T127:
	nReturnValue = 0x1;
// LINE 377:
_T12e:
	__asm        jmp    near ptr 0x0043FD00;

	__asm        jmp    near ptr 0x0043FD05;

	__asm        push   0x59886C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59886C;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1cb;
// LINE 378:
	__asm        cmp    G_CheatCodes[2], 0;
	__asm        jne    _T17a;

	__asm        mov    G_CheatCodes[2], 1;
	__asm        jmp    _T184;
_T17a:
	G_CheatCodes[2] = 0x0;
// LINE 379:
_T184:
	__asm        cmp    G_CheatCodes[2], 0;
	__asm        je     _T1be;
// LINE 380:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    eax, S_helitype_data[0].fuel_capacity[eax*8];
	__asm        mov    ecx, G_uheli;
	__asm        mov    [ecx+0x320], eax;
// LINE 381:
	szCheatSoundFileName = szCheatOn;
// LINE 383:
	__asm        jmp    _T1c4;
// LINE 384:
_T1be:
	szCheatSoundFileName = szCheatOff;
// LINE 385:
_T1c4:
	nReturnValue = 0x1;
// LINE 387:
_T1cb:
	__asm        jmp    near ptr 0x0043FD9D;

	__asm        jmp    near ptr 0x0043FDA2;

	__asm        push   0x598884;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x598884;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T246;
// LINE 388:
	__asm        cmp    G_CheatCodes[4], 0;
	__asm        jne    _T217;

	__asm        mov    G_CheatCodes[4], 1;
	__asm        jmp    _T221;
_T217:
	G_CheatCodes[4] = 0x0;
// LINE 389:
_T221:
	__asm        cmp    G_CheatCodes[4], 0;
	__asm        je     _T239;
// LINE 390:
	szCheatSoundFileName = szCheatOn;
// LINE 391:
	__asm        jmp    _T23f;
// LINE 392:
_T239:
	szCheatSoundFileName = szCheatOff;
// LINE 393:
_T23f:
	nReturnValue = 0x1;
// LINE 395:
_T246:
	__asm        jmp    near ptr 0x0043FE18;

	__asm        jmp    near ptr 0x0043FE1D;

	__asm        push   0x5988A8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x5988A8;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T2bc;
// LINE 397:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T2b7;
// LINE 398:
// Block start:
	/*packed*/ struct Point2d *position2d;
	__asm        call   S3HeliGetFreePad;
	__asm        mov    position2d, eax;
// LINE 399:
	__asm        push   0x50000;
	__asm        push   0x50000;
	__asm        mov    eax, position2d;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, position2d;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   S3PersonUserAppear;
	__asm        add    esp, 0x10;
// LINE 400:
	szCheatSoundFileName = szCheatOn;
// LINE 401:
	nReturnValue = 0x1;
// LINE 404:
// Block end:
_T2b7:
	__asm        jmp    _T515;
_T2bc:
	__asm        jmp    near ptr 0x0043FE8E;

	__asm        jmp    near ptr 0x0043FE93;

	__asm        push   0x5988C4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x5988C4;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T32f;
// LINE 405:
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T32a;
// LINE 406:
	__asm        push   0x50000;
	__asm        push   0x50000;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   S3PersonUserAppear;
	__asm        add    esp, 0x10;
// LINE 407:
	szCheatSoundFileName = szCheatOn;
// LINE 408:
	nReturnValue = 0x1;
// LINE 411:
_T32a:
	__asm        jmp    _T515;
_T32f:
	__asm        jmp    near ptr 0x0043FF01;

	__asm        push   0x5988DC;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    dword ptr [ebp-0x158], 0;
	__asm        jmp    near ptr 0x0043FF23;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T373;

	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        jne    _T382;
_T373:
	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    _T4dc;
_T382:
	__asm        jmp    _T387;
_T387:
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x158];
	__asm        cmp    eax, [ebp-0x16C];
	__asm        jb     _T4cd;

	__asm        mov    dword ptr [ebp-0x15C], 0;
	__asm        jmp    _T3b7;
_T3b1:
	__asm        inc    dword ptr [ebp-0x15C];
_T3b7:
	__asm        mov    eax, [ebp-0x16C];
	__asm        cmp    [ebp-0x15C], eax;
	__asm        jae    _T438;

	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x16C];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x15C];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x158];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 0x5988DC;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x15C];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x160];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     _T417;

	__asm        jmp    _T41c;
_T417:
	__asm        jmp    _T433;
_T41c:
	__asm        jmp    _T42e;

	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     _T433;
_T42e:
	__asm        jmp    _T438;
_T433:
	__asm        jmp    _T3b1;
_T438:
	__asm        mov    eax, [ebp-0x16C];
	__asm        cmp    [ebp-0x15C], eax;
	__asm        jne    _T45b;

	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    _T4dc;
_T45b:
	__asm        mov    eax, [ebp-0x16C];
	__asm        sub    eax, [ebp-0x15C];
	__asm        add    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 0x5988DC;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x15C];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x154], eax;
	__asm        cmp    dword ptr [ebp-0x154], 0xFFFFFFFF;
	__asm        jne    _T4ad;

	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    _T4dc;
_T4ad:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        sub    ecx, [ebp-0x15C];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    _T387;
_T4cd:
	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    _T4dc;
_T4dc:
	__asm        jmp    near ptr 0x004400AE;

	__asm        cmp    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        je     _T515;
// LINE 412:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T515;
// LINE 413:
	__asm        push   0x3E9;
	__asm        call   SetUserPoints;
	__asm        add    esp, 4;
// LINE 414:
	szCheatSoundFileName = szCheatOn;
// LINE 415:
	nReturnValue = 0x1;
// LINE 418:
_T515:
	__asm        jmp    near ptr 0x004400E7;

	__asm        push   0x5988F4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    dword ptr [ebp-0x174], 0;
	__asm        jmp    near ptr 0x00440109;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T559;

	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        jne    _T568;
_T559:
	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    _T6c2;
_T568:
	__asm        jmp    _T56d;
_T56d:
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x174];
	__asm        cmp    eax, [ebp-0x188];
	__asm        jb     _T6b3;

	__asm        mov    dword ptr [ebp-0x178], 0;
	__asm        jmp    _T59d;
_T597:
	__asm        inc    dword ptr [ebp-0x178];
_T59d:
	__asm        mov    eax, [ebp-0x178];
	__asm        cmp    [ebp-0x188], eax;
	__asm        jbe    _T61e;

	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x188];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x178];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 0x5988F4;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x178];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x17C];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     _T5fd;

	__asm        jmp    _T602;
_T5fd:
	__asm        jmp    _T619;
_T602:
	__asm        jmp    _T614;

	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     _T619;
_T614:
	__asm        jmp    _T61e;
_T619:
	__asm        jmp    _T597;
_T61e:
	__asm        mov    eax, [ebp-0x178];
	__asm        cmp    [ebp-0x188], eax;
	__asm        jne    _T641;

	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    _T6c2;
_T641:
	__asm        mov    eax, [ebp-0x188];
	__asm        sub    eax, [ebp-0x178];
	__asm        add    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 0x5988F4;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x178];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x170], eax;
	__asm        cmp    dword ptr [ebp-0x170], 0xFFFFFFFF;
	__asm        jne    _T693;

	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    _T6c2;
_T693:
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x188];
	__asm        sub    ecx, [ebp-0x178];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x174], eax;
	__asm        jmp    _T56d;
_T6b3:
	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    _T6c2;
_T6c2:
	__asm        jmp    near ptr 0x00440294;

	__asm        cmp    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        je     _T71f;
// LINE 419:
	__asm        cmp    G_CheatCodes[5], 0;
	__asm        jne    _T6f0;

	__asm        mov    G_CheatCodes[5], 1;
	__asm        jmp    _T6fa;
_T6f0:
	G_CheatCodes[5] = 0x0;
// LINE 420:
_T6fa:
	__asm        cmp    G_CheatCodes[5], 0;
	__asm        je     _T712;
// LINE 421:
	szCheatSoundFileName = szCheatOn;
// LINE 422:
	__asm        jmp    _T718;
// LINE 423:
_T712:
	szCheatSoundFileName = szCheatOff;
// LINE 424:
_T718:
	nReturnValue = 0x1;
// LINE 426:
_T71f:
	__asm        jmp    near ptr 0x004402F1;

	__asm        push   0x598904;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    dword ptr [ebp-0x190], 0;
	__asm        jmp    near ptr 0x00440313;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T763;

	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        jne    _T772;
_T763:
	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    _T8cc;
_T772:
	__asm        jmp    _T777;
_T777:
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x190];
	__asm        cmp    eax, [ebp-0x1A4];
	__asm        jb     _T8bd;

	__asm        mov    dword ptr [ebp-0x194], 0;
	__asm        jmp    _T7a7;
_T7a1:
	__asm        inc    dword ptr [ebp-0x194];
_T7a7:
	__asm        mov    eax, [ebp-0x1A4];
	__asm        cmp    [ebp-0x194], eax;
	__asm        jae    _T828;

	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x194];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x190];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        add    eax, 0x598904;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x194];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x198];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     _T807;

	__asm        jmp    _T80c;
_T807:
	__asm        jmp    _T823;
_T80c:
	__asm        jmp    _T81e;

	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     _T823;
_T81e:
	__asm        jmp    _T828;
_T823:
	__asm        jmp    _T7a1;
_T828:
	__asm        mov    eax, [ebp-0x1A4];
	__asm        cmp    [ebp-0x194], eax;
	__asm        jne    _T84b;

	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    _T8cc;
_T84b:
	__asm        mov    eax, [ebp-0x1A4];
	__asm        sub    eax, [ebp-0x194];
	__asm        add    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        add    eax, 0x598904;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x194];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0xFFFFFFFF;
	__asm        jne    _T89d;

	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    _T8cc;
_T89d:
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        sub    ecx, [ebp-0x194];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x190], eax;
	__asm        jmp    _T777;
_T8bd:
	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    _T8cc;
_T8cc:
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    nTextPosition, eax;
	__asm        jmp    near ptr 0x004404A7;

	__asm        cmp    nTextPosition, 0xFFFFFFFF;
	__asm        je     _T9cf;
// LINE 431:
// Block start:
	char szCareerLevel[3];
	int32_t nCharsToCopy;
	int32_t nNewCareerLevel;
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T9cf;
// LINE 432:
	__asm        push   0x598918;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        add    nTextPosition, eax;
// LINE 433:
	__asm        jmp    near ptr 0x004404D3;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nTextPosition;
	__asm        mov    nCharsToCopy, eax;
// LINE 434:
	__asm        cmp    nCharsToCopy, 0;
	__asm        jl     _T9cf;
// LINE 435:
	__asm        cmp    nCharsToCopy, 2;
	__asm        jle    _T930;
// LINE 436:
	nCharsToCopy = 0x2;
// LINE 437:
_T930:
	__asm        jmp    near ptr 0x00440502;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        cmp    eax, nTextPosition;
	__asm        jbe    _T99e;
// LINE 438:
	__asm        jmp    near ptr 0x0044051A;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T975;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    _T984;

	__asm        jmp    _T984;
_T975:
	__asm        mov    dword ptr [ebp-0x1C4], 0;
	__asm        jmp    _T984;
_T984:
	__asm        mov    eax, nCharsToCopy;
	__asm        push   eax;
	__asm        mov    eax, nTextPosition;
	__asm        add    eax, [ebp-0x1C4];
	__asm        push   eax;
	__asm        lea    eax, szCareerLevel[0];
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 439:
_T99e:
	__asm        lea    eax, szCareerLevel[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    nNewCareerLevel, eax;
// LINE 440:
	__asm        cmp    nNewCareerLevel, 1;
	__asm        jge    _T9c1;

	__asm        cmp    nNewCareerLevel, 0x1F;
	__asm        jg     _T9cf;
// LINE 443:
_T9c1:
	G_CheatCodes[3] = nNewCareerLevel;
// LINE 444:
	szCheatSoundFileName = szCheatOn;
// LINE 449:
// Block end:
_T9cf:
	__asm        jmp    near ptr 0x004405A1;

	__asm        push   0x59892C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    dword ptr [ebp-0x1AC], 0;
	__asm        jmp    near ptr 0x004405C3;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Ta13;

	__asm        cmp    dword ptr [ebp-0x1C0], 0;
	__asm        jne    _Ta22;
_Ta13:
	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    _Tb7c;
_Ta22:
	__asm        jmp    _Ta27;
_Ta27:
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x1AC];
	__asm        cmp    eax, [ebp-0x1C0];
	__asm        jb     _Tb6d;

	__asm        mov    dword ptr [ebp-0x1B0], 0;
	__asm        jmp    _Ta57;
_Ta51:
	__asm        inc    dword ptr [ebp-0x1B0];
_Ta57:
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1B0], eax;
	__asm        jae    _Tad8;

	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x1C0];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x1B0];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        add    eax, 0x59892C;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x1B0];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     _Tab7;

	__asm        jmp    _Tabc;
_Tab7:
	__asm        jmp    _Tad3;
_Tabc:
	__asm        jmp    _Tace;

	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     _Tad3;
_Tace:
	__asm        jmp    _Tad8;
_Tad3:
	__asm        jmp    _Ta51;
_Tad8:
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1B0], eax;
	__asm        jne    _Tafb;

	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1BC], eax;
	__asm        jmp    _Tb7c;
_Tafb:
	__asm        mov    eax, [ebp-0x1C0];
	__asm        sub    eax, [ebp-0x1B0];
	__asm        add    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        add    eax, 0x59892C;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x1B0];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        cmp    dword ptr [ebp-0x1A8], 0xFFFFFFFF;
	__asm        jne    _Tb4d;

	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    _Tb7c;
_Tb4d:
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    ecx, [ebp-0x1C0];
	__asm        sub    ecx, [ebp-0x1B0];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    _Ta27;
_Tb6d:
	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    _Tb7c;
_Tb7c:
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    nTextPosition, eax;
	__asm        jmp    near ptr 0x00440757;

	__asm        cmp    nTextPosition, 0xFFFFFFFF;
	__asm        je     _Tc80;
// LINE 453:
// Block start:
	int32_t nNewBucks;
	int32_t nCharsToCopy;
	const long lMaxBucks;
	char szBucks[3];
	lMaxBucks = 0xc350;
// LINE 455:
	__asm        push   0x598950;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        add    nTextPosition, eax;
// LINE 456:
	__asm        jmp    near ptr 0x0044077D;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nTextPosition;
	__asm        mov    nCharsToCopy, eax;
// LINE 457:
	__asm        cmp    nCharsToCopy, 0;
	__asm        jl     _Tc80;
// LINE 458:
	__asm        cmp    nCharsToCopy, 5;
	__asm        jle    _Tbda;
// LINE 459:
	nCharsToCopy = 0x5;
// LINE 460:
_Tbda:
	__asm        jmp    near ptr 0x004407AC;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        cmp    eax, nTextPosition;
	__asm        jbe    _Tc48;
// LINE 461:
	__asm        jmp    near ptr 0x004407C4;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tc1f;

	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    _Tc2e;

	__asm        jmp    _Tc2e;
_Tc1f:
	__asm        mov    dword ptr [ebp-0x1C8], 0;
	__asm        jmp    _Tc2e;
_Tc2e:
	__asm        mov    eax, nCharsToCopy;
	__asm        push   eax;
	__asm        mov    eax, nTextPosition;
	__asm        add    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        lea    eax, szBucks[0];
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 462:
_Tc48:
	__asm        lea    eax, szBucks[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    nNewBucks, eax;
// LINE 463:
	__asm        cmp    nNewBucks, 0;
	__asm        jg     _Tc6e;

	__asm        cmp    nNewBucks, 0xC350;
	__asm        jge    _Tc80;
// LINE 467:
_Tc6e:
	__asm        mov    eax, nNewBucks;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 468:
	szCheatSoundFileName = szCheatOn;
// LINE 482:
// Block end:
_Tc80:
	__asm        cmp    szCheatSoundFileName, 0;
	__asm        je     _Tf4f;
// LINE 484:
// Block start:
	/*packed*/ class DigitalSound *tempCheatCodeSound;
	char szFullPath[260];
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, szCheatSoundFileName;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 485:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _Tdf2;

	__asm        or     dword ptr [ebp-0x14C], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1E4], eax;
	__asm        cmp    dword ptr [ebp-0x1E4], 0;
	__asm        je     _Tdae;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004408CC;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Td7f;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        push   eax;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00440947;

	__asm        jmp    _Td8b;
_Td7f:
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    dword ptr [eax], 0;
_Td8b:
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044096A;

	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    _Tdb8;
_Tdae:
	None = 0x0;
_Tdb8:
	__asm        mov    dword ptr [ebp-0x148], 0;
	__asm        jmp    near ptr 0x00440994;

	__asm        lea    eax, [ebp-0x148];
	__asm        mov    [ebp-0x150], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x140];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    tempCheatCodeSound, eax;
	__asm        jmp    _Tdfc;
_Tdf2:
	tempCheatCodeSound = 0x0;
_Tdfc:
	__asm        test   byte ptr [ebp-0x14C], 1;
	__asm        je     _Tf06;

	__asm        and    dword ptr [ebp-0x14C], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x144];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x144];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tec3;

	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    [ebp-0x1D4], eax;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     _Tec3;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tea0;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1DC], eax;
	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    dword ptr [eax], 0;
_Tea0:
	__asm        jmp    near ptr 0x00440A72;

	__asm        jmp    near ptr 0x00440A77;

	__asm        mov    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440A8B;

	__asm        jmp    _Tec3;
_Tec3:
	__asm        jmp    near ptr 0x00440A95;

	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _Tefc;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1D0], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tefc:
	__asm        jmp    near ptr 0x00440ACE;

	__asm        jmp    _Tf06;
// LINE 486:
_Tf06:
	__asm        mov    eax, tempCheatCodeSound;
	__asm        push   eax;
	__asm        push   0x43E250;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+0x14];
// LINE 487:
	__asm        mov    eax, glMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+0x24];
// LINE 488:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+8];
// LINE 491:
// Block end:
_Tf4f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 492:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x00440B38;
// LINE 493:
}

// FUNCTION: COPTER_D 0x00440b3f
int  CGameApp::CheckCommandLineForCheatCodes() {
	int32_t i;
	char szCommandValue[128];

// LINE 508:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x78;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     _T284;
// LINE 509:
	__asm        mov    i, 0;
	__asm        jmp    _T40;
_T3a:
	__asm        inc    i;
_T40:
	__asm        cmp    i, 0x80;
	__asm        jge    _T74;
// LINE 510:
	__asm        mov    eax, i;
	__asm        movsx  eax, byte ptr [ebp+eax-0x80];
	__asm        cmp    eax, 0x5F;
	__asm        jne    _T6f;
// LINE 511:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax-0x80], 0x20;
// LINE 512:
_T6f:
	__asm        jmp    _T3a;
// LINE 513:
_T74:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T157;

	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00440BEA;

	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T128;

	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00440C62;

	__asm        jmp    _T134;
_T128:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax], 0;
_T134:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00440C85;

	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T161;
_T157:
	None = 0x0;
_T161:
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x00440CAF;

	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DoCheatCode;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x8C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T23b;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     _T23b;

	__asm        mov    eax, [ebp-0x9C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T218;

	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    dword ptr [eax], 0;
_T218:
	__asm        jmp    near ptr 0x00440D5C;

	__asm        jmp    near ptr 0x00440D61;

	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440D75;

	__asm        jmp    _T23b;
_T23b:
	__asm        jmp    near ptr 0x00440D7F;

	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T274;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T274:
	__asm        jmp    near ptr 0x00440DB8;

	__asm        mov    eax, [ebp-0x88];
	__asm        jmp    _T28b;
// LINE 515:
_T284:
	__asm        xor    eax, eax;
	__asm        jmp    _T28b;
// LINE 516:
_T28b:
}

// FUNCTION: COPTER_D 0x00440dcf
void  CGameApp::CreateDebugBuffer() {
	/*packed*/ struct SparkalColor colorDebugText;
	char szTypeFaceName[64];

// LINE 525:
	__asm        jmp    near ptr 0x00440DE0;
// LINE 527:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T47;

	__asm        push   0;
	__asm        push   0x30;
	__asm        push   0x280;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
	__asm        jmp    _T51;
_T47:
	this-><CGameApp+0x54:4> = 0x0;
// LINE 528:
_T51:
	__asm        push   0;
	__asm        push   0xFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0x44];
// LINE 529:
	__asm        push   0xFF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+8];
// LINE 530:
	colorDebugText.Red = 0xff;
// LINE 531:
	colorDebugText.Green = 0x0;
// LINE 532:
	__asm        mov    colorDebugText.Blue, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x54], eax;
// LINE 533:
	__asm        mov    eax, reinterpret_cast<uint32_t>(colorDebugText.Blue);
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00440E73;
// LINE 534:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   LanguageManager::GetTypefaceForLanguage;
	__asm        add    esp, 0xC;
// LINE 535:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _Te7;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   MFont::MFont;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _Tee;
_Te7:
	None = 0x0;
_Tee:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x54];
	__asm        call   CBackBuffer::SetFont;
// LINE 536:
	__asm        jmp    near ptr 0x00440ED1;
}

// FUNCTION: COPTER_D 0x00440ed6
void  CGameApp::DestroyDebugBuffer() {
// LINE 544:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     _T5a;
// LINE 545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440F21;

	__asm        jmp    _T50;
// LINE 546:
_T50:
	this-><CGameApp+0x54:4> = 0x0;
// LINE 548:
_T5a:
	__asm        jmp    near ptr 0x00440F35;
}

// FUNCTION: COPTER_D 0x00440f3a
void  CGameApp::CreatePaletteBuffer() {
// LINE 555:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        jne    _T59;
// LINE 556:
	__asm        push   0x138;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T4c;

	__asm        mov    ecx, [ebp-4];
	__asm        call   PaletteBuffer::PaletteBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x42BC], eax;
	__asm        jmp    _T59;
_T4c:
	this-><CGameApp+0x42bc:4> = 0x0;
// LINE 558:
_T59:
	__asm        jmp    near ptr 0x00440F98;
}

// FUNCTION: COPTER_D 0x00440f9d
void  CGameApp::TogglePaletteBufferDisplay() {
// LINE 566:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        jne    _T46;
// LINE 567:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        jne    _T34;
// LINE 568:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreatePaletteBuffer;
// LINE 569:
_T34:
	this-><CGameApp+0x430c:4> = 0x1;
// LINE 571:
	__asm        jmp    _T53;
// LINE 572:
_T46:
	this-><CGameApp+0x430c:4> = 0x0;
// LINE 574:
_T53:
	__asm        jmp    near ptr 0x00440FF5;
}

// FUNCTION: COPTER_D 0x00440ffa
void  CGameApp::ToggleDebugWindowDisplay() {
// LINE 582:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4310], 0;
	__asm        jne    _T46;
// LINE 583:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T34;
// LINE 584:
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::ShowWindow;
// LINE 585:
_T34:
	this-><CGameApp+0x4310:4> = 0x1;
// LINE 587:
	__asm        jmp    _T6b;
// LINE 588:
_T46:
	__asm        cmp    gDebugWindow, 0;
	__asm        je     _T5e;
// LINE 589:
	__asm        mov    ecx, gDebugWindow;
	__asm        call   CDebugWindow::HideWindow;
// LINE 590:
_T5e:
	this-><CGameApp+0x4310:4> = 0x0;
// LINE 592:
_T6b:
	__asm        jmp    near ptr 0x0044106A;
}

// FUNCTION: COPTER_D 0x0044106f
void  CGameApp::CreatePlayMenu() {
	/*packed*/ struct UserMenuWindowDescription tempUMWD;
	/*packed*/ class UserMenuWindow *myUserMenuWindow;

// LINE 602:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     _T7a;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004410DB;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    tempUMWD.sImageFileName.reference, eax;
	__asm        jmp    _T81;
_T7a:
	tempUMWD.sImageFileName.reference = 0x0;
_T81:
	__asm        mov    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004410FC;

	__asm        jmp    near ptr 0x00441101;

	__asm        jmp    near ptr 0x00441106;

	__asm        jmp    near ptr 0x0044110B;

	__asm        jmp    near ptr 0x00441110;

	__asm        jmp    near ptr 0x00441115;

	__asm        jmp    near ptr 0x0044111A;

	__asm        jmp    near ptr 0x0044111F;

	__asm        jmp    near ptr 0x00441124;

	__asm        jmp    near ptr 0x00441129;

	None = SZ_PLAY_MENU_IMAGE_FILE_NAME;
// LINE 604:
	__asm        jmp    near ptr 0x00441139;

	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0044115D;
// LINE 605:
	tempUMWD.nTransparentIndex = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 606:
	__asm        jmp    near ptr 0x0044116A;

	__asm        mov    dword ptr [ebp-0x68], 0x32;
	__asm        mov    dword ptr [ebp-0x64], 0xA;
	__asm        mov    dword ptr [ebp-0x60], 0x33;
	__asm        mov    dword ptr [ebp-0x5C], 0xB;
	__asm        jmp    near ptr 0x0044118B;

	__asm        lea    eax, [ebp-0x68];
	__asm        lea    ecx, tempUMWD.rectPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 607:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T151;

	__asm        mov    tempUMWD.lMenuStringResourceIndex, 0x3C;
	__asm        jmp    _T158;
_T151:
	tempUMWD.lMenuStringResourceIndex = 0x3d;
// LINE 608:
_T158:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T171;

	__asm        mov    tempUMWD.lMenuStringResourceCount, 8;
	__asm        jmp    _T178;
_T171:
	tempUMWD.lMenuStringResourceCount = 0x7;
// LINE 609:
_T178:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T191;

	__asm        mov    tempUMWD.lSelectionBase, 0;
	__asm        jmp    _T198;
_T191:
	tempUMWD.lSelectionBase = 0x1;
// LINE 610:
_T198:
	__asm        mov    byte ptr [ebp-0x6C], 0x80;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0x4A;
	__asm        jmp    near ptr 0x00441218;

	reinterpret_cast<uint32_t>(tempUMWD.colorFont.Blue) = None;
// LINE 611:
	__asm        mov    byte ptr [ebp-0x70], 0xEA;
	__asm        mov    byte ptr [ebp-0x6F], 0xEF;
	__asm        mov    byte ptr [ebp-0x6E], 0x9A;
	__asm        jmp    near ptr 0x0044122F;

	reinterpret_cast<uint32_t>(tempUMWD.colorFontHighlighted.Blue) = None;
// LINE 614:
	__asm        cmp    gCurrentCityType, 1;
	__asm        jne    _T1f6;

	__asm        jmp    near ptr 0x00441247;

	__asm        mov    dword ptr [ebp-0x7C], 0x66;
	__asm        mov    dword ptr [ebp-0x78], 0x40;
	__asm        jmp    near ptr 0x0044125A;

	__asm        lea    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T21a;
_T1f6:
	__asm        jmp    near ptr 0x0044126A;

	__asm        mov    dword ptr [ebp-0x84], 0x66;
	__asm        mov    dword ptr [ebp-0x80], 0x68;
	__asm        jmp    near ptr 0x00441280;

	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x74], eax;
_T21a:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        lea    edx, tempUMWD.ptPositionFirstItem.x;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 615:
	tempUMWD.nSizeItemFont = 0x1a;
// LINE 616:
	tempUMWD.nLineHeight = 0x28;
// LINE 617:
	tempUMWD.lTitleStringResourceIndex = 0xffffffff;
// LINE 618:
	tempUMWD.bTitleCentered = 0x1;
// LINE 619:
	__asm        jmp    near ptr 0x004412C6;

	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    near ptr 0x004412DF;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0x88];
	__asm        lea    edx, tempUMWD.ptTitlePosition.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 620:
	tempUMWD.nSizeTitleFont = 0x24;
// LINE 623:
	__asm        push   0x15A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T305;

	__asm        cmp    this, 0;
	__asm        je     _T2cc;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T2d6;
_T2cc:
	None = 0x0;
_T2d6:
	__asm        push   1;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D3;
	__asm        lea    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   CopterPlayMenu::CopterPlayMenu;
	__asm        mov    myUserMenuWindow, eax;
	__asm        jmp    _T30c;
_T305:
	myUserMenuWindow = 0x0;
// LINE 624:
_T30c:
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 626:
	__asm        jmp    near ptr 0x004413A0;

	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        je     _T367;

	__asm        mov    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T367:
	__asm        jmp    near ptr 0x004413DB;

	__asm        jmp    near ptr 0x004413E0;
}

// FUNCTION: COPTER_D 0x004413e5
void  CGameApp::CreateUserInputWindow() {
	/*packed*/ class UserInputWindow *myUserInputWindow;
	int32_t nCurrentGameMode;

// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00441408;

	__asm        jmp    near ptr 0x0044140D;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0044141B;

	__asm        jmp    near ptr 0x00441420;

	__asm        jmp    near ptr 0x00441425;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 636:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 637:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 639:
_T5c:
	__asm        push   0xB0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Te1;

	__asm        cmp    this, 0;
	__asm        je     _T8e;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T95;
_T8e:
	None = 0x0;
_T95:
	__asm        jmp    near ptr 0x0044147F;

	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x004414A0;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D4;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   UserInputWindow::UserInputWindow;
	__asm        mov    myUserInputWindow, eax;
	__asm        jmp    _Te8;
_Te1:
	myUserInputWindow = 0x0;
// LINE 640:
_Te8:
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+4];
// LINE 641:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 642:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1E8;
	__asm        push   eax;
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 643:
	__asm        jmp    near ptr 0x00441506;
}

// FUNCTION: COPTER_D 0x0044150b
void  CGameApp::DestroyUserInputWindow(/*packed*/ class UserInputWindow *windowToDestroy, int32_t bUseData) {
	int32_t nCurrentGameMode;

// LINE 650:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0044152E;

	__asm        jmp    near ptr 0x00441533;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00441541;

	__asm        jmp    near ptr 0x00441546;

	__asm        jmp    near ptr 0x0044154B;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 652:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 653:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 656:
_T5c:
	__asm        cmp    bUseData, 0;
	__asm        je     _Ta5;

	__asm        jmp    near ptr 0x00441576;

	__asm        mov    eax, windowToDestroy;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _Ta5;
// LINE 657:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0xD0];
// LINE 658:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::RemoveUserConfigurableCommands;
// LINE 659:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::ReadUserConfigurableCommands;
// LINE 661:
_Ta5:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 662:
	__asm        jmp    near ptr 0x004415C0;
}

// FUNCTION: COPTER_D 0x004415c7
void  CGameApp::CreateRenderSettingsWindow() {
	/*packed*/ class RenderSettingsWindow *myRenderSettingsWindow;
	int32_t nCurrentGameMode;

// LINE 670:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004415EA;

	__asm        jmp    near ptr 0x004415EF;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004415FD;

	__asm        jmp    near ptr 0x00441602;

	__asm        jmp    near ptr 0x00441607;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 672:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 673:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 675:
_T5c:
	__asm        push   0xB8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Te1;

	__asm        cmp    this, 0;
	__asm        je     _T8e;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T95;
_T8e:
	None = 0x0;
_T95:
	__asm        jmp    near ptr 0x00441661;

	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x00441682;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D5;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   RenderSettingsWindow::RenderSettingsWindow;
	__asm        mov    myRenderSettingsWindow, eax;
	__asm        jmp    _Te8;
_Te1:
	myRenderSettingsWindow = 0x0;
// LINE 676:
_Te8:
	__asm        mov    eax, myRenderSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 677:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myRenderSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 682:
	__asm        call   GetRenderBackPlaneValue;
	__asm        push   eax;
	__asm        call   ConvertRenderBackPlaneValueToGUI;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4308];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4330];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x432C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4328];
	__asm        push   eax;
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   RenderSettingsWindow::SetCurrentSettings;
// LINE 683:
	__asm        jmp    near ptr 0x00441710;
}

// FUNCTION: COPTER_D 0x00441715
void  CGameApp::DestroyRenderSettingsWindow(/*packed*/ class RenderSettingsWindow *windowToDestroy, int32_t bUseData) {
	long lQuadPixelType;
	int32_t nCurrentGameMode;
	long bShowGroundTextures;
	long bShowSkyAndClouds;
	long bShowBuildingTextures;
	long lFogCloseness;

// LINE 691:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00441738;

	__asm        jmp    near ptr 0x0044173D;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0044174B;

	__asm        jmp    near ptr 0x00441750;

	__asm        jmp    near ptr 0x00441755;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 698:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 699:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 701:
_T5c:
	__asm        cmp    bUseData, 0;
	__asm        je     _Td2;
// LINE 706:
	__asm        lea    eax, lFogCloseness;
	__asm        push   eax;
	__asm        lea    eax, lQuadPixelType;
	__asm        push   eax;
	__asm        lea    eax, bShowSkyAndClouds;
	__asm        push   eax;
	__asm        lea    eax, bShowGroundTextures;
	__asm        push   eax;
	__asm        lea    eax, bShowBuildingTextures;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   RenderSettingsWindow::GetCurrentSettings;
// LINE 709:
	__asm        mov    eax, bShowBuildingTextures;
	__asm        mov    G_texobjs, eax;
	__asm        mov    eax, G_texobjs;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4328], eax;
// LINE 710:
	__asm        mov    eax, bShowGroundTextures;
	__asm        mov    G_texterr, eax;
	__asm        mov    eax, G_texterr;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x432C], eax;
// LINE 711:
	this-><CGameApp+0x4330:4> = bShowSkyAndClouds;
// LINE 712:
	this-><CGameApp+0x4308:4> = lQuadPixelType;
// LINE 717:
	__asm        mov    eax, lFogCloseness;
	__asm        push   eax;
	__asm        call   S3SetBackPlaneBasedOnValue;
	__asm        add    esp, 4;
// LINE 720:
_Td2:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 721:
	__asm        jmp    near ptr 0x004417F7;
}

// FUNCTION: COPTER_D 0x004417fe
void  CGameApp::CreateSoundSettingsWindow() {
	/*packed*/ class SoundSettingsWindow *mySoundSettingsWindow;
	/*packed*/ struct RadioPreferences tempRadioPreferences;
	int32_t nCurrentGameMode;
	char * chPrefData;
	/*packed*/ struct SoundPreferences tempSoundPreferences;

// LINE 732:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00441821;

	__asm        jmp    near ptr 0x00441826;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00441834;

	__asm        jmp    near ptr 0x00441839;

	__asm        jmp    near ptr 0x0044183E;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 734:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 735:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 737:
_T5c:
	__asm        push   0x88;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _Te1;

	__asm        cmp    this, 0;
	__asm        je     _T8e;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T95;
_T8e:
	None = 0x0;
_T95:
	__asm        jmp    near ptr 0x00441898;

	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        jmp    near ptr 0x004418B9;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D6;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   SoundSettingsWindow::SoundSettingsWindow;
	__asm        mov    mySoundSettingsWindow, eax;
	__asm        jmp    _Te8;
_Te1:
	mySoundSettingsWindow = 0x0;
// LINE 738:
_Te8:
	__asm        mov    eax, mySoundSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, mySoundSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 742:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 743:
	__asm        cmp    chPrefData, 0;
	__asm        je     _T166;

	__asm        push   0x4FFFFFF;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    _T166;
// LINE 744:
	__asm        mov    eax, chPrefData;
	__asm        lea    ecx, tempSoundPreferences.lMasterVolume;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 746:
	__asm        jmp    _T17f;
// LINE 750:
_T166:
	__asm        mov    tempSoundPreferences.lVehicleVolume, 0x2710;
	__asm        mov    eax, tempSoundPreferences.lVehicleVolume;
	__asm        mov    tempSoundPreferences.lSoundEffectsVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lSoundEffectsVolume;
	__asm        mov    tempSoundPreferences.lDispatchVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lDispatchVolume;
	__asm        mov    tempSoundPreferences.lMasterVolume, eax;
// LINE 752:
_T17f:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   SoundSettingsWindow::SetCurrentVolumeSettings;
// LINE 755:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::GetPreferences;
// LINE 760:
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::GetStationCount;
	__asm        push   eax;
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   SoundSettingsWindow::SetCurrentRadioSettings;
// LINE 761:
	__asm        jmp    near ptr 0x004419B3;
}

// FUNCTION: COPTER_D 0x004419b8
void  CGameApp::DestroySoundSettingsWindow(/*packed*/ class SoundSettingsWindow *windowToDestroy, int32_t bUseData) {
	/*packed*/ struct RadioPreferences tempRadioPreferences;
	int32_t nCurrentGameMode;
	/*packed*/ struct SoundPreferences tempSoundPreferences;

// LINE 770:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004419DB;

	__asm        jmp    near ptr 0x004419E0;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004419EE;

	__asm        jmp    near ptr 0x004419F3;

	__asm        jmp    near ptr 0x004419F8;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 772:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    _T5c;
// LINE 773:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 775:
_T5c:
	__asm        cmp    bUseData, 0;
	__asm        je     _Tba;
// LINE 777:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   SoundSettingsWindow::GetCurrentVolumeSettings;
// LINE 778:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 781:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   SoundSettingsWindow::GetCurrentRadioSettings;
// LINE 786:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::SetPreferences;
// LINE 794:
	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 0;
	__asm        je     _Tb2;
// LINE 795:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::EnableSoundTrack;
// LINE 796:
	__asm        jmp    _Tba;
// LINE 797:
_Tb2:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisableSoundTrack;
// LINE 799:
_Tba:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 800:
	__asm        jmp    near ptr 0x00441A82;
}

// FUNCTION: COPTER_D 0x00441a89
void  CGameApp::CreateCitySettingsWindow() {
	/*packed*/ class CitySettingsWindow *myCitySettingsWindow;

// LINE 808:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 810:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T9a;

	__asm        cmp    this, 0;
	__asm        je     _T47;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T4e;
_T47:
	None = 0x0;
_T4e:
	__asm        jmp    near ptr 0x00441ADC;

	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441AFD;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D8;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CitySettingsWindow::CitySettingsWindow;
	__asm        mov    myCitySettingsWindow, eax;
	__asm        jmp    _Ta1;
_T9a:
	myCitySettingsWindow = 0x0;
// LINE 811:
_Ta1:
	__asm        mov    eax, myCitySettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 812:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myCitySettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 813:
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   CitySettingsWindow::SetCurrentCitySettings;
// LINE 814:
	__asm        jmp    near ptr 0x00441B5A;
}

// FUNCTION: COPTER_D 0x00441b5f
void  CGameApp::DestroyCitySettingsWindow(/*packed*/ class CitySettingsWindow *windowToDestroy, int32_t bUseData) {
// LINE 825:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 826:
	__asm        cmp    bUseData, 0;
	__asm        je     _T4a;
// LINE 827:
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   CitySettingsWindow::GetCurrentCitySettings;
// LINE 828:
	__asm        push   0x24;
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        push   0x5EEEEEE;
	__asm        mov    eax, gPreferenceManager;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gPreferenceManager;
	__asm        call   dword ptr [eax+0x2C];
// LINE 830:
_T4a:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 831:
	__asm        jmp    near ptr 0x00441BB9;
}

// FUNCTION: COPTER_D 0x00441bc0
void  CGameApp::CreateControlDisplayWindow() {
	/*packed*/ class ControlDisplayWindow *tempControlDisplayWindow;

// LINE 838:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 840:
	__asm        push   0x80;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T9a;

	__asm        cmp    this, 0;
	__asm        je     _T47;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T4e;
_T47:
	None = 0x0;
_T4e:
	__asm        jmp    near ptr 0x00441C13;

	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441C34;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x2711;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   ControlDisplayWindow::ControlDisplayWindow;
	__asm        mov    tempControlDisplayWindow, eax;
	__asm        jmp    _Ta1;
_T9a:
	tempControlDisplayWindow = 0x0;
// LINE 841:
_Ta1:
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+4];
// LINE 842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 843:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1E8;
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 844:
	__asm        jmp    near ptr 0x00441C9A;
}

// FUNCTION: COPTER_D 0x00441c9f
void  CGameApp::DestroyControlDisplayWindow() {
// LINE 851:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 852:
	__asm        jmp    near ptr 0x00441CB9;
}

// FUNCTION: COPTER_D 0x00441cbe
void  CGameApp::CreateCheckupWindow() {
	/*packed*/ class CheckupWindow *tempCheckupWindow;

// LINE 859:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 861:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T9a;

	__asm        cmp    this, 0;
	__asm        je     _T47;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T4e;
_T47:
	None = 0x0;
_T4e:
	__asm        jmp    near ptr 0x00441D11;

	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441D32;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7E1;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CheckupWindow::CheckupWindow;
	__asm        mov    tempCheckupWindow, eax;
	__asm        jmp    _Ta1;
_T9a:
	tempCheckupWindow = 0x0;
// LINE 862:
_Ta1:
	__asm        mov    eax, tempCheckupWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheckupWindow;
	__asm        call   dword ptr [eax+4];
// LINE 863:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempCheckupWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheckupWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 864:
	__asm        jmp    near ptr 0x00441D81;
}

// FUNCTION: COPTER_D 0x00441d86
void  CGameApp::DestroyCheckupWindow(/*packed*/ class CheckupWindow *windowToDestroy, int32_t bUseData) {
	long lSettings[3];

// LINE 873:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 874:
	__asm        cmp    bUseData, 0;
	__asm        je     _T85;
// LINE 875:
	__asm        lea    eax, lSettings[0];
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   CheckupWindow::GetCurrentSettings;
// LINE 878:
	__asm        mov    eax, lSettings[0];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 879:
	__asm        mov    eax, lSettings[0];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliPurchaseRepairs;
	__asm        add    esp, 8;
// LINE 881:
	__asm        mov    eax, lSettings[1];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 882:
	__asm        mov    eax, lSettings[1];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliPurchaseFuel;
	__asm        add    esp, 8;
// LINE 884:
	__asm        mov    eax, lSettings[2];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 885:
	__asm        mov    eax, lSettings[2];
	__asm        push   eax;
	__asm        call   S3HeliPurchaseTeargasCanisters;
	__asm        add    esp, 4;
// LINE 888:
_T85:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 889:
	__asm        jmp    near ptr 0x00441E1B;
}



// Contribution: 3:00001680-00001970 Module: 53, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598680
char * SZ_PLAY_MENU_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598684
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_0 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598688
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059868c
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_2N = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598690
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_2D = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598694
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_3 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598698
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_4 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059869c
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_5 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986a0
char * SZ_ABOUT_BOX_IMAGE_FILE_NAME_6 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986a4
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_0 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986a8
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986ac
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2N = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986b0
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2D = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986b4
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_3 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986b8
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_4 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986bc
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_5 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986c0
char * SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_6 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986c4
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_0 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986c8
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986cc
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2N = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986d0
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2D = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986d4
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_3 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986d8
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_4 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986dc
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_5 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986e0
char * SZ_ABOUT_BOX_ANIMATION_FILE_NAME_6 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005986e4
char * SZ_CHEAT_BOX_TEXT_IMAGE_FILE_NAME = { 0 /* todo */ };

