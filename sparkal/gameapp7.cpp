// Module: Gameapp7.obj
// Source: C:\Copter\source\sparkal\Gameapp7.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long;

// Type: void;

// Type: class CGameApp (forward reference);

// Type: char *;

// Type: char[64];

// Type: char[512];

// Type: class Version;
class Version{
public:
	void Version();
	// vtable: 0
	intro void ~Version();
	int32_t GetApplicationName(char *&);
	long GetApplicationVersion(int32_t);
	int32_t GetApplicationVersion(char *&);
	int32_t GetApplicationCopyright(char *&);
	int32_t GetApplicationDebugVersion(char *&);
	// calltype: NearC
	static int32_t GetSystemType();
	// calltype: NearC
	static long GetSystemVersion(int32_t);
	// calltype: NearC
	static int32_t GetSystemVersion(char *);
	// calltype: NearC
	static long GetCPUVersion();
	// calltype: NearC
	static long GetCPUSpeed();
protected:
	unsigned char * lpTransBlock;
	void * __ptr32 lpFVData;
};

// Type: int32_t;

// Type: struct _MEMORYSTATUS;
struct _MEMORYSTATUS{
	unsigned long dwLength;
	unsigned long dwMemoryLoad;
	unsigned long dwTotalPhys;
	unsigned long dwAvailPhys;
	unsigned long dwTotalPageFile;
	unsigned long dwAvailPageFile;
	unsigned long dwTotalVirtual;
	unsigned long dwAvailVirtual;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: struct SparkalColor;
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class MessageBoxWindow (forward reference);
class MessageBoxWindow : public GraphicWindow
{
public:
	void MessageBoxWindow(class MPoint&, unsigned long, class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(class MPoint&, unsigned long, unsigned long, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 200
	intro void SetButtonTextColor(const struct SparkalColor*, const struct SparkalColor*);
protected:
	// vtable: 204
	intro int32_t ConvertTypeToStringID(long);
	// vtable: 208
	intro void DrawTextOntoBox();
	long lMessageID;
	class basic_string<char> sMessage;
	class basic_string<char> sButtonImageFileName;
	class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	struct SparkalColor colorFont;
	struct SparkalColor colorButtonFont;
	struct SparkalColor colorButtonFontHighlighted;
};

// Type: class MessageBoxWindowEdit (forward reference);
class MessageBoxWindowEdit : public MessageBoxWindow
{
public:
	void MessageBoxWindowEdit(class MPoint&, unsigned long, class basic_string<char>&, const class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	void MessageBoxWindowEdit(class MPoint&, unsigned long, unsigned long, const class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	virtual int32_t Initialize();
	// vtable: 212
	intro void GetEditText(char *, unsigned long);
	// vtable: 216
	intro void GetEditText(class basic_string<char>&);
protected:
	class BoneheadTextEditWindow* myTextEditWindow;
};

// Type: uint32_t;

// Type: struct Point2d (forward reference);

// Type: char[3];

// Type: class DigitalSound (forward reference);
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer* lpSound[8];
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long IsPlaying(struct IDirectSoundBuffer**);
public:
	virtual long IsPlaying();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: char[260];

// Type: char[128];

// Type: struct UserMenuWindowDescription;
struct UserMenuWindowDescription{
	class basic_string<char> sImageFileName;
	int32_t nTransparentIndex;
	class MRect rectPosition;
	long lMenuStringResourceIndex;
	long lMenuStringResourceCount;
	long lSelectionBase;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	class MPoint ptPositionFirstItem;
	int32_t nSizeItemFont;
	int32_t nLineHeight;
	long lTitleStringResourceIndex;
	int32_t bTitleCentered;
	class MPoint ptTitlePosition;
	int32_t nSizeTitleFont;
};

// Type: class UserMenuWindow (forward reference);
class UserMenuWindow : public GraphicWindow
{
public:
	void UserMenuWindow(struct UserMenuWindowDescription&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void UserMenuWindow();
	virtual void ~UserMenuWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t SetSelectionIndex(int32_t);
	// vtable: 200
	intro int32_t SetSelectionValue(int32_t);
	// vtable: 204
	intro int32_t GetSelectionIndex();
	// vtable: 208
	intro int32_t GetSelectionValue();
	// vtable: 212
	intro int32_t GetLineCount();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro int32_t ExecuteSelection(int32_t);
protected:
	// vtable: 220
	intro void DrawSelectionIndicators();
	// vtable: 224
	intro int32_t DoCursorHitTest(int32_t&, long, long);
	// vtable: 228
	intro int32_t GetPositionOfNthItem(int32_t, class MPoint&);
	struct UserMenuWindowDescription myUserMenuWindowDescription;
	class vector<TextWindow *> myTextWindowPtrArray;
	int32_t nCurrentSelection;
	class DigitalSound soundSelectionChange;
};

// Type: class UserInputWindow (forward reference);
class UserInputWindow : public GraphicWindow
{
		enum KeyUsageType {
			nKeyUsageTypeFree = 0,
			nKeyUsageTypeReserved = 1,
			nKeyUsageTypeCurrentCommand = 2,
			nKeyUsageTypeOtherCommand = 3,
		};
public:
	void UserInputWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	// vtable: 196
	intro void SetupAllInputDevices();
	// vtable: 200
	intro void SetupAllCommands();
	// vtable: 204
	intro void ReadShortcuts(class list<Shortcut>&);
	// vtable: 208
	intro void WriteShortcutsToPreferenceFile();
	int32_t HaveCommandsChanged();
	long GetCurrentDevice();
	long GetCurrentCommand();
	enum UserInputWindow::KeyUsageType GetKeyUsageType(long, long);
	void RemoveShortcutFromList(long, long, long);
protected:
	void UpdateDisplay(int32_t);
	int32_t DoJoystickWindowMessage(long, void * __ptr32);
	int32_t DoKeyboardWindowMessage(long, void * __ptr32);
	int32_t DoInputDeviceListBoxWindowMessage(long, void * __ptr32);
	int32_t DoCommandListBoxWindowMessage(long, void * __ptr32);
	void DisplayError(int32_t);
	void ClearDeviceArea();
	void AddJoystickTwinCommand(long, long, long);
	void RemoveJoystickTwinCommand(long, long, long);
	int32_t DoesTwinCommandExistForShortcut(long, long, long);
	class JoystickWindow* myJoystickWindow;
	class KeyboardWindow* myKeyboardWindow;
	class ListBoxWindow* myInputDeviceListBoxWindow;
	class ListBoxWindow* myCommandListBoxWindow;
	class TextWindow* myStatusTextWindow;
	class list<StringIDAssociation> myInputDeviceStringIDAssociationList;
	class list<StringIDAssociation> myCommandStringIDAssociationList;
	class list<Shortcut> myShortcutListNonConfigurable;
	class list<Shortcut> myShortcutListConfigurable;
	int32_t bCommandsHaveChanged;
	int32_t bInitializing;
};

// Type: class RenderSettingsWindow (forward reference);
class RenderSettingsWindow : public GraphicWindow
{
public:
	void RenderSettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~RenderSettingsWindow();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
	int32_t SetCurrentSettings(long, long, long, long, long);
	void GetCurrentSettings(long&, long&, long&, long&, long&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	long bShowBuildingTextures;
	long bShowGroundTextures;
	long bShowSkyAndClouds;
	long lQuadPixelType;
	long lFogCloseness;
protected:
	void SetControlsBasedOnCurrentSettings();
	void DrawPreviewBasedOnCurrentSettings();
	void GetPreviewFileNames(class basic_string<char>&, class basic_string<char>&, class basic_string<char>&);
	class CheckBoxWindow* myBuildingTexturesCheckBoxWindow;
	class CheckBoxWindow* myObjectTexturesCheckBoxWindow;
	class CheckBoxWindow* mySkyDisplayCheckBoxWindow;
	class ButtonGroup* myDisplayResolutionButtonGroup;
	class SliderWindow* myFogSliderWindow;
	class CBackBuffer* mySkyImage;
	class CBackBuffer* myBuildingImage;
	class MTimer mySkyTimer;
	long lSkyImagePanX;
};

// Type: class SoundSettingsWindow (forward reference);
class SoundSettingsWindow : public GraphicWindow
{
public:
	void SoundSettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	int32_t SetCurrentVolumeSettings(struct SoundPreferences&);
	int32_t SetCurrentRadioSettings(struct RadioPreferences&, long);
	void GetCurrentVolumeSettings(struct SoundPreferences&);
	void GetCurrentRadioSettings(struct RadioPreferences&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	// calltype: NearC
	static long ConvertSoundValueToSliderValue(long);
	// calltype: NearC
	static long ConvertSliderValueToSoundValue(long);
protected:
	class SliderWindow* myMasterVolumeSliderWindow;
	class SliderWindow* myRadioStationSliderWindow;
	class SliderWindow* myRadioVolumeSliderWindow;
	class CheckBoxWindow* myDJCheckBoxWindow;
	class CheckBoxWindow* myCommercialCheckBoxWindow;
};

// Type: struct RadioPreferences;
struct RadioPreferences{
	long lVolume;
	int32_t bPreferToBeOn;
	long lCurrentStation;
	int32_t bOptionDJ;
	int32_t bOptionCommercials;
	int32_t bAutoMute;
	int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: struct SoundPreferences;
struct SoundPreferences{
	long lMasterVolume;
	long lDispatchVolume;
	long lSoundEffectsVolume;
	long lVehicleVolume;
};

// Type: class CitySettingsWindow (forward reference);
class CitySettingsWindow : public GraphicWindow
{
public:
	void CitySettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	void SetCurrentCitySettings(struct tagCitySettings*);
	void GetCurrentCitySettings(struct tagCitySettings*);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
protected:
	class SliderWindow* mySliderWindows[8];
};

// Type: class ControlDisplayWindow (forward reference);
class ControlDisplayWindow : public GraphicWindow
{
public:
	void ControlDisplayWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void ReadShortcuts(class list<Shortcut>*);
protected:
	void GetCommandString(class basic_string<char>&, long);
	void AppendKeysString(class basic_string<char>&, long, long, int32_t);
	int32_t bInitializing;
	class ListBoxWindow* myCommandListBoxWindow;
	class ListBoxWindow* myKeysListBoxWindow;
};

// Type: class CheckupWindow (forward reference);
class CheckupWindow : public GraphicWindow
{
public:
	void CheckupWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	void SetCurrentSettings(long *);
	void GetCurrentSettings(long *);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	void SetTextControlsBasedOnCurrentSliderValues();
	void SetAllControlValuesToDefaults();
	// calltype: NearC
	static int32_t ShouldWeDisplayCheckupWindow();
	int32_t CanUserAffordCurrentSliderValues();
protected:
	class SliderWindow* mySliderWindows[3];
	class TextWindow* myTextWindows[5];
};

// Type: long[3];

// Type: class GraphicWindow (forward reference);

// Type: class Sound;
class Sound{
		enum SoundSourceType {
			nSoundSourceTypeResource = 0,
			nSoundSourceTypeFile = 1,
		};
public:
	enum Sound::SoundSourceType nSoundSourceType;
		enum SoundDuplicateType {
			nSoundDuplicateDefault = 0,
			nSoundDuplicateInterrupt = 1,
			nSoundDuplicateContinue = 2,
			nSoundDuplicateOverlap = 3,
		};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: class MessageBoxWindow;
class MessageBoxWindow : public GraphicWindow
{
public:
	void MessageBoxWindow(class MPoint&, unsigned long, class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(class MPoint&, unsigned long, unsigned long, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 200
	intro void SetButtonTextColor(const struct SparkalColor*, const struct SparkalColor*);
protected:
	// vtable: 204
	intro int32_t ConvertTypeToStringID(long);
	// vtable: 208
	intro void DrawTextOntoBox();
	long lMessageID;
	class basic_string<char> sMessage;
	class basic_string<char> sButtonImageFileName;
	class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	struct SparkalColor colorFont;
	struct SparkalColor colorButtonFont;
	struct SparkalColor colorButtonFontHighlighted;
};



// Contribution: 1:0003d250-00040e21 Module: 53, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043e250
void SoundCompletionDeletionFunction(long lSoundPointer) {
// LINE 77:
	__asm        mov    eax, lSoundPointer;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0043E280;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0043E280;
// LINE 78:
	__asm        jmp    near ptr 0x0043E285;
}

// FUNCTION: COPTER_D 0x0043e28a
void SoundCompletionUnloadFunction(long lSoundPointer) {
// LINE 87:
	__asm        mov    eax, lSoundPointer;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, lSoundPointer;
	__asm        call   dword ptr [eax+0x3C];
// LINE 88:
	__asm        jmp    near ptr 0x0043E2A0;
}

// FUNCTION: COPTER_D 0x0043e2a5
void  CGameApp::ShowVersion() {
	long lCPUVersion;
	long lPhysicalMemory;
	long lCPUSpeed;
	char * szVersionInformation;
	char szUnformattedVersionInformation[64];
	char szFormattedVersionInformation[512];
	class Version tempVersion;
	long lSystemType;
	int32_t nFullStringID;
	struct _MEMORYSTATUS tempMemoryStatus;
	class basic_string<char> sMessage;

// LINE 106:
	__asm        lea    ecx, tempVersion.<vftable>;
	__asm        call   Version::Version;
// LINE 107:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x298], eax;
	__asm        cmp    dword ptr [ebp-0x298], 0;
	__asm        je     near ptr 0x0043E32B;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x298];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043E31D;
	__asm        mov    eax, [ebp-0x298];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0043E332;
	__asm        mov    sMessage.reference, 0;
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0043E33E;
// LINE 108:
	__asm        mov    szVersionInformation, 0;
// LINE 118:
	__asm        push   0;
	__asm        push   4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 119:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12B0], eax;
	__asm        cmp    dword ptr [ebp-0x12B0], 0;
	__asm        jne    near ptr 0x0043E404;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x12B0], eax;
	__asm        jmp    near ptr 0x0043E3B6;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E3DA;
	__asm        jmp    near ptr 0x0043E3DF;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E3FF;
	__asm        jmp    near ptr 0x0043E432;
	__asm        jmp    near ptr 0x0043E409;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x12AC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E42D;
	__asm        jmp    near ptr 0x0043E432;
// LINE 120:
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     near ptr 0x0043E460;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72CC], eax;
	__asm        mov    eax, [ebp-0x72CC];
	__asm        mov    [ebp-0x72D4], eax;
	__asm        mov    eax, [ebp-0x72D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043E465;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sMessage.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0043E47D;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0043E4D4;
	__asm        jmp    near ptr 0x0043E48F;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x72E0], eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x72E4], eax;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72E8], eax;
	__asm        mov    eax, [ebp-0x72E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x72E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x72E8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0043E4D4;
	__asm        jmp    near ptr 0x0043E4D9;
	__asm        mov    byte ptr [ebp-0x72D0], 0;
	__asm        jmp    near ptr 0x0043E4E5;
	__asm        lea    eax, [ebp-0x72D0];
	__asm        mov    [ebp-0x72D8], eax;
	__asm        jmp    near ptr 0x0043E4F6;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x72DC], eax;
	__asm        mov    eax, [ebp-0x72D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x72DC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0043E51A;
	__asm        jmp    near ptr 0x0043E51F;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 121:
	__asm        push   0x598828;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 124:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion.<vftable>;
	__asm        call   Version::GetApplicationVersion;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043E67F;
// LINE 125:
	__asm        push   0;
	__asm        push   0x175;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 126:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22B4], eax;
	__asm        cmp    dword ptr [ebp-0x22B4], 0;
	__asm        jne    near ptr 0x0043E61C;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x22B4], eax;
	__asm        jmp    near ptr 0x0043E5CE;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E5F2;
	__asm        jmp    near ptr 0x0043E5F7;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E617;
	__asm        jmp    near ptr 0x0043E64A;
	__asm        jmp    near ptr 0x0043E621;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x22B0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E645;
	__asm        jmp    near ptr 0x0043E64A;
// LINE 127:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 128:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 131:
	__asm        lea    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, tempVersion.<vftable>;
	__asm        call   Version::GetApplicationDebugVersion;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043E7B8;
// LINE 132:
	__asm        push   0;
	__asm        push   0x176;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 133:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32B8], eax;
	__asm        cmp    dword ptr [ebp-0x32B8], 0;
	__asm        jne    near ptr 0x0043E755;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x32B8], eax;
	__asm        jmp    near ptr 0x0043E707;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E72B;
	__asm        jmp    near ptr 0x0043E730;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E750;
	__asm        jmp    near ptr 0x0043E783;
	__asm        jmp    near ptr 0x0043E75A;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x32B4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E77E;
	__asm        jmp    near ptr 0x0043E783;
// LINE 134:
	__asm        mov    eax, szVersionInformation;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 135:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 140:
	__asm        call   Version::GetSystemType;
	__asm        mov    lSystemType, eax;
// LINE 141:
	__asm        push   0;
	__asm        mov    eax, lSystemType;
	__asm        add    eax, 0x177;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 142:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x42BC], eax;
	__asm        cmp    dword ptr [ebp-0x42BC], 0;
	__asm        jne    near ptr 0x0043E883;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x42BC], eax;
	__asm        jmp    near ptr 0x0043E835;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E859;
	__asm        jmp    near ptr 0x0043E85E;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E87E;
	__asm        jmp    near ptr 0x0043E8B1;
	__asm        jmp    near ptr 0x0043E888;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x42B8];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E8AC;
	__asm        jmp    near ptr 0x0043E8B1;
// LINE 144:
	__asm        push   1;
	__asm        call   Version::GetSystemVersion;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Version::GetSystemVersion;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 145:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 146:
	__asm        push   0x59882C;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 149:
	__asm        mov    lPhysicalMemory, 0;
// LINE 152:
	__asm        mov    tempMemoryStatus.dwLength, 0x20;
// LINE 153:
	__asm        lea    eax, tempMemoryStatus.dwLength;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C362C];
// LINE 154:
	__asm        mov    ecx, 0xFA000;
	__asm        mov    eax, tempMemoryStatus.dwTotalPhys;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    lPhysicalMemory, eax;
// LINE 156:
	__asm        push   0;
	__asm        push   0x174;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 157:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x52C0], eax;
	__asm        cmp    dword ptr [ebp-0x52C0], 0;
	__asm        jne    near ptr 0x0043E9F5;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x52C0], eax;
	__asm        jmp    near ptr 0x0043E9A7;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043E9CB;
	__asm        jmp    near ptr 0x0043E9D0;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043E9F0;
	__asm        jmp    near ptr 0x0043EA23;
	__asm        jmp    near ptr 0x0043E9FA;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x52BC];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EA1E;
	__asm        jmp    near ptr 0x0043EA23;
// LINE 158:
	__asm        mov    eax, lPhysicalMemory;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 159:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 162:
	__asm        call   Version::GetCPUVersion;
	__asm        mov    lCPUVersion, eax;
// LINE 163:
	__asm        push   0;
	__asm        mov    eax, lCPUVersion;
	__asm        add    eax, 0x168;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 164:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x62C4], eax;
	__asm        cmp    dword ptr [ebp-0x62C4], 0;
	__asm        jne    near ptr 0x0043EB29;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x62C4], eax;
	__asm        jmp    near ptr 0x0043EADB;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EAFF;
	__asm        jmp    near ptr 0x0043EB04;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043EB24;
	__asm        jmp    near ptr 0x0043EB57;
	__asm        jmp    near ptr 0x0043EB2E;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x62C0];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EB52;
	__asm        jmp    near ptr 0x0043EB57;
// LINE 165:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 168:
	__asm        call   Version::GetCPUSpeed;
	__asm        mov    lCPUSpeed, eax;
// LINE 169:
	__asm        cmp    lCPUSpeed, 0;
	__asm        je     near ptr 0x0043ECA9;
// LINE 170:
	__asm        push   0;
	__asm        push   0x173;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 171:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x72C8], eax;
	__asm        cmp    dword ptr [ebp-0x72C8], 0;
	__asm        jne    near ptr 0x0043EC46;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x72C8], eax;
	__asm        jmp    near ptr 0x0043EBF8;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EC1C;
	__asm        jmp    near ptr 0x0043EC21;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0043EC41;
	__asm        jmp    near ptr 0x0043EC74;
	__asm        jmp    near ptr 0x0043EC4B;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x72C4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0043EC6F;
	__asm        jmp    near ptr 0x0043EC74;
// LINE 172:
	__asm        mov    eax, lCPUSpeed;
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 173:
	__asm        lea    eax, szUnformattedVersionInformation[0];
	__asm        push   eax;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 178:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2AC], eax;
	__asm        cmp    dword ptr [ebp-0x2AC], 0;
	__asm        je     near ptr 0x0043ECE3;
	__asm        lea    eax, szFormattedVersionInformation[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2AC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x290], eax;
	__asm        jmp    near ptr 0x0043ECED;
	__asm        mov    dword ptr [ebp-0x290], 0;
	__asm        mov    dword ptr [ebp-0x294], 0;
	__asm        jmp    near ptr 0x0043ECFC;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x294];
	__asm        push   eax;
	__asm        push   0x7DA;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
	__asm        lea    ecx, [ebp-0x294];
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    dword ptr [ebp-0x294], 0;
	__asm        je     near ptr 0x0043ED54;
	__asm        mov    eax, [ebp-0x294];
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043ED59;
// LINE 179:
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     near ptr 0x0043ED8F;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x2A4], eax;
	__asm        mov    eax, [ebp-0x2A4];
	__asm        mov    [ebp-0x2A8], eax;
	__asm        mov    eax, [ebp-0x2A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043ED94;
	__asm        lea    ecx, tempVersion.<vftable>;
	__asm        call   Version::~Version;
	__asm        jmp    near ptr 0x0043EDA1;
}

// FUNCTION: COPTER_D 0x0043eda6
int  CGameApp::CreateMessageBox(long lID, class basic_string<char>& sMessage, long lType) {
	char * szImageFileNameToUse;
	struct SparkalColor colorButtonFont;
	char * szButtonImageFileNameToUse;
	struct SparkalColor colorButtonFontHighlighted;
	char * szAnimationFileNameToUse;
	struct SparkalColor colorMessageFont;
	class MessageBoxWindow* tempMessageBoxWindow;

// LINE 190:
	__asm        jmp    near ptr 0x0043EDBD;
// LINE 191:
	__asm        jmp    near ptr 0x0043EDC2;
// LINE 192:
	__asm        jmp    near ptr 0x0043EDC7;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0043EDEA;
	__asm        jmp    near ptr 0x0043EDEF;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0043EE03;
	__asm        jmp    near ptr 0x0043EE08;
	__asm        jmp    near ptr 0x0043EE0D;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x0043F15D;
// LINE 196:
	__asm        mov    eax, ds:[0x598688];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 197:
	__asm        mov    eax, ds:[0x5986A8];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 198:
	__asm        mov    eax, ds:[0x5986C8];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 199:
	__asm        mov    byte ptr [ebp-0x20], 0x6B;
	__asm        mov    byte ptr [ebp-0x1F], 0x52;
	__asm        mov    byte ptr [ebp-0x1E], 0x4D;
	__asm        jmp    near ptr 0x0043EE4A;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 200:
	__asm        mov    byte ptr [ebp-0x24], 0xDA;
	__asm        mov    byte ptr [ebp-0x23], 0xDA;
	__asm        mov    byte ptr [ebp-0x22], 0xDA;
	__asm        jmp    near ptr 0x0043EE61;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 201:
	__asm        mov    byte ptr [ebp-0x28], 0xF0;
	__asm        mov    byte ptr [ebp-0x27], 0xFA;
	__asm        mov    byte ptr [ebp-0x26], 0xFF;
	__asm        jmp    near ptr 0x0043EE78;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 202:
	__asm        jmp    near ptr 0x0043F19E;
// LINE 204:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBCC], 0;
	__asm        je     near ptr 0x0043EF16;
	__asm        jmp    near ptr 0x0043EE9B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBCC];
	__asm        cmp    dword ptr [eax+0xF2], 0;
	__asm        je     near ptr 0x0043EF16;
// LINE 205:
	__asm        mov    eax, ds:[0x598690];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 206:
	__asm        mov    eax, ds:[0x5986B0];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 207:
	__asm        mov    eax, ds:[0x5986D0];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 208:
	__asm        mov    byte ptr [ebp-0x2C], 0x18;
	__asm        mov    byte ptr [ebp-0x2B], 0x21;
	__asm        mov    byte ptr [ebp-0x2A], 0x39;
	__asm        jmp    near ptr 0x0043EEDD;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 209:
	__asm        mov    byte ptr [ebp-0x30], 0x4A;
	__asm        mov    byte ptr [ebp-0x2F], 0x95;
	__asm        mov    byte ptr [ebp-0x2E], 0xC0;
	__asm        jmp    near ptr 0x0043EEF4;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 210:
	__asm        mov    byte ptr [ebp-0x34], 0x70;
	__asm        mov    byte ptr [ebp-0x33], 0xCA;
	__asm        mov    byte ptr [ebp-0x32], 0xEA;
	__asm        jmp    near ptr 0x0043EF0B;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 212:
	__asm        jmp    near ptr 0x0043EF73;
// LINE 213:
	__asm        mov    eax, ds:[0x59868C];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 214:
	__asm        mov    eax, ds:[0x5986AC];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 215:
	__asm        mov    eax, ds:[0x5986CC];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 216:
	__asm        mov    byte ptr [ebp-0x38], 0x19;
	__asm        mov    byte ptr [ebp-0x37], 0x1F;
	__asm        mov    byte ptr [ebp-0x36], 0x41;
	__asm        jmp    near ptr 0x0043EF3F;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 217:
	__asm        mov    byte ptr [ebp-0x3C], 0x30;
	__asm        mov    byte ptr [ebp-0x3B], 0x7A;
	__asm        mov    byte ptr [ebp-0x3A], 0xAA;
	__asm        jmp    near ptr 0x0043EF56;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 218:
	__asm        mov    byte ptr [ebp-0x40], 0x70;
	__asm        mov    byte ptr [ebp-0x3F], 0xCA;
	__asm        mov    byte ptr [ebp-0x3E], 0xEA;
	__asm        jmp    near ptr 0x0043EF6D;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 220:
	__asm        jmp    near ptr 0x0043F19E;
// LINE 222:
	__asm        mov    eax, ds:[0x598694];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 223:
	__asm        mov    eax, ds:[0x5986B4];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 224:
	__asm        mov    eax, ds:[0x5986D4];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 225:
	__asm        mov    byte ptr [ebp-0x44], 0x15;
	__asm        mov    byte ptr [ebp-0x43], 0x18;
	__asm        mov    byte ptr [ebp-0x42], 0x4A;
	__asm        jmp    near ptr 0x0043EFA1;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 226:
	__asm        mov    byte ptr [ebp-0x48], 0x44;
	__asm        mov    byte ptr [ebp-0x47], 0x8A;
	__asm        mov    byte ptr [ebp-0x46], 0xAC;
	__asm        jmp    near ptr 0x0043EFB8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 227:
	__asm        mov    byte ptr [ebp-0x4C], 0x94;
	__asm        mov    byte ptr [ebp-0x4B], 0xD6;
	__asm        mov    byte ptr [ebp-0x4A], 0xFF;
	__asm        jmp    near ptr 0x0043EFCF;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 228:
	__asm        jmp    near ptr 0x0043F19E;
// LINE 230:
	__asm        mov    eax, ds:[0x598698];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 231:
	__asm        mov    eax, ds:[0x5986B8];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 232:
	__asm        mov    eax, ds:[0x5986D8];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 233:
	__asm        mov    byte ptr [ebp-0x50], 0x15;
	__asm        mov    byte ptr [ebp-0x4F], 0x18;
	__asm        mov    byte ptr [ebp-0x4E], 0x4A;
	__asm        jmp    near ptr 0x0043F003;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 234:
	__asm        mov    byte ptr [ebp-0x54], 0x40;
	__asm        mov    byte ptr [ebp-0x53], 0x89;
	__asm        mov    byte ptr [ebp-0x52], 0xB5;
	__asm        jmp    near ptr 0x0043F01A;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 235:
	__asm        mov    byte ptr [ebp-0x58], 0x70;
	__asm        mov    byte ptr [ebp-0x57], 0xCA;
	__asm        mov    byte ptr [ebp-0x56], 0xEA;
	__asm        jmp    near ptr 0x0043F031;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 236:
	__asm        jmp    near ptr 0x0043F19E;
// LINE 238:
	__asm        mov    eax, ds:[0x59869C];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 239:
	__asm        mov    eax, ds:[0x5986BC];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 240:
	__asm        mov    eax, ds:[0x5986DC];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 241:
	__asm        mov    byte ptr [ebp-0x5C], 0x15;
	__asm        mov    byte ptr [ebp-0x5B], 0x18;
	__asm        mov    byte ptr [ebp-0x5A], 0x4A;
	__asm        jmp    near ptr 0x0043F065;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 242:
	__asm        mov    byte ptr [ebp-0x60], 0x40;
	__asm        mov    byte ptr [ebp-0x5F], 0x89;
	__asm        mov    byte ptr [ebp-0x5E], 0xB5;
	__asm        jmp    near ptr 0x0043F07C;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 243:
	__asm        mov    byte ptr [ebp-0x64], 0x70;
	__asm        mov    byte ptr [ebp-0x63], 0xCA;
	__asm        mov    byte ptr [ebp-0x62], 0xEA;
	__asm        jmp    near ptr 0x0043F093;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 244:
	__asm        jmp    near ptr 0x0043F19E;
// LINE 246:
	__asm        mov    eax, ds:[0x5986A0];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 247:
	__asm        mov    eax, ds:[0x5986C0];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 248:
	__asm        mov    eax, ds:[0x5986E0];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 249:
	__asm        mov    byte ptr [ebp-0x68], 0x10;
	__asm        mov    byte ptr [ebp-0x67], 0x15;
	__asm        mov    byte ptr [ebp-0x66], 0x1F;
	__asm        jmp    near ptr 0x0043F0C7;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 250:
	__asm        mov    byte ptr [ebp-0x6C], 0xA;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0xDA;
	__asm        jmp    near ptr 0x0043F0DE;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 251:
	__asm        mov    byte ptr [ebp-0x70], 0xD3;
	__asm        mov    byte ptr [ebp-0x6F], 0xDA;
	__asm        mov    byte ptr [ebp-0x6E], 0xFF;
	__asm        jmp    near ptr 0x0043F0F5;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 254:
	__asm        mov    eax, ds:[0x598684];
	__asm        mov    szImageFileNameToUse, eax;
// LINE 255:
	__asm        mov    eax, ds:[0x5986A4];
	__asm        mov    szButtonImageFileNameToUse, eax;
// LINE 256:
	__asm        mov    eax, ds:[0x5986C4];
	__asm        mov    szAnimationFileNameToUse, eax;
// LINE 257:
	__asm        mov    byte ptr [ebp-0x74], 0x10;
	__asm        mov    byte ptr [ebp-0x73], 0x15;
	__asm        mov    byte ptr [ebp-0x72], 0x1F;
	__asm        jmp    near ptr 0x0043F124;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 258:
	__asm        mov    byte ptr [ebp-0x78], 0xA;
	__asm        mov    byte ptr [ebp-0x77], 0x85;
	__asm        mov    byte ptr [ebp-0x76], 0xDA;
	__asm        jmp    near ptr 0x0043F13B;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 259:
	__asm        mov    byte ptr [ebp-0x7C], 0xD3;
	__asm        mov    byte ptr [ebp-0x7B], 0xDA;
	__asm        mov    byte ptr [ebp-0x7A], 0xFF;
	__asm        jmp    near ptr 0x0043F152;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 260:
	__asm        jmp    near ptr 0x0043F19E;
	__asm        sub    dword ptr [ebp-0x9C], 4;
	__asm        cmp    dword ptr [ebp-0x9C], 7;
	__asm        ja     near ptr 0x0043F0FB;
	__asm        mov    eax, [ebp-0x9C];
	__asm        jmp    dword ptr [eax*4+0x43F17E];
// Switch pointers
// LINE 264:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x0043F245;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0043F1D9;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x0043F1E3;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        jmp    near ptr 0x0043F1E8;
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        jmp    near ptr 0x0043F201;
	__asm        mov    eax, szAnimationFileNameToUse;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileNameToUse;
	__asm        push   eax;
	__asm        mov    eax, szImageFileNameToUse;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, lID;
	__asm        push   eax;
	__asm        mov    eax, sMessage;
	__asm        push   eax;
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   MessageBoxWindow::MessageBoxWindow;
	__asm        mov    tempMessageBoxWindow, eax;
	__asm        jmp    near ptr 0x0043F24C;
	__asm        mov    tempMessageBoxWindow, 0;
// LINE 265:
	__asm        cmp    tempMessageBoxWindow, 0;
	__asm        je     near ptr 0x0043F2AA;
// LINE 266:
	__asm        lea    eax, colorMessageFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 267:
	__asm        lea    eax, colorButtonFontHighlighted.Blue;
	__asm        push   eax;
	__asm        lea    eax, colorButtonFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 268:
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+4];
// LINE 269:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 270:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 272:
	__asm        mov    eax, tempMessageBoxWindow;
	__asm        jmp    near ptr 0x0043F2B2;
// LINE 273:
}

// FUNCTION: COPTER_D 0x0043f2b9
int  CGameApp::CreateMessageBox(long lID, int32_t nStringID, long lType) {
	int32_t nFullStringID;
	class basic_string<char> sMessage;

// LINE 282:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0043F31F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043F314;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0043F326;
	__asm        mov    sMessage.reference, 0;
	__asm        mov    sMessage.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0043F332;
// LINE 284:
	__asm        push   0;
	__asm        mov    eax, nStringID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 285:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        cmp    dword ptr [ebp-0x1030], 0;
	__asm        jne    near ptr 0x0043F660;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1030], eax;
	__asm        jmp    near ptr 0x0043F3A2;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1044], eax;
	__asm        cmp    dword ptr [ebp-0x1044], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0043F3FC;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1040], eax;
	__asm        mov    eax, [ebp-0x1040];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F3ED;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F3FC;
	__asm        jmp    near ptr 0x0043F401;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0043F432;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x0043F493;
	__asm        jmp    near ptr 0x0043F420;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1044];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0043F493;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1038], eax;
	__asm        cmp    dword ptr [ebp-0x1038], 0;
	__asm        je     near ptr 0x0043F473;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1038];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1034], eax;
	__asm        jmp    near ptr 0x0043F47D;
	__asm        mov    dword ptr [ebp-0x1034], 0;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1034];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0043F4D2;
	__asm        cmp    dword ptr [ebp-0x1044], 0;
	__asm        je     near ptr 0x0043F4D2;
	__asm        jmp    near ptr 0x0043F4A5;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x103C], eax;
	__asm        mov    eax, [ebp-0x1044];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x103C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0043F4D2;
	__asm        mov    eax, [ebp-0x1044];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F4E3;
	__asm        jmp    near ptr 0x0043F4E8;
	__asm        jmp    near ptr 0x0043F4ED;
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1058], eax;
	__asm        jmp    near ptr 0x0043F505;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1058];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0043F554;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1054], eax;
	__asm        mov    eax, [ebp-0x1054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F545;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F554;
	__asm        jmp    near ptr 0x0043F559;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0043F588;
	__asm        jmp    near ptr 0x0043F56B;
	__asm        jmp    near ptr 0x0043F570;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sMessage.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1058];
	__asm        jae    near ptr 0x0043F5FD;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x104C], eax;
	__asm        cmp    dword ptr [ebp-0x104C], 0;
	__asm        je     near ptr 0x0043F5E2;
	__asm        jmp    near ptr 0x0043F5AA;
	__asm        jmp    near ptr 0x0043F5AF;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x104C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1048], eax;
	__asm        jmp    near ptr 0x0043F5EC;
	__asm        mov    dword ptr [ebp-0x1048], 0;
	__asm        lea    ecx, sMessage.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1048];
	__asm        mov    sMessage.reference, eax;
	__asm        cmp    dword ptr [ebp-0x1058], 0;
	__asm        je     near ptr 0x0043F645;
	__asm        jmp    near ptr 0x0043F60F;
	__asm        jmp    near ptr 0x0043F614;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1050], eax;
	__asm        mov    eax, [ebp-0x1058];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0043F645;
	__asm        mov    eax, [ebp-0x1058];
	__asm        mov    ecx, sMessage.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F656;
	__asm        jmp    near ptr 0x0043F65B;
	__asm        jmp    near ptr 0x0043F7F4;
	__asm        jmp    near ptr 0x0043F665;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1074], eax;
	__asm        cmp    dword ptr [ebp-0x1074], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0043F6BF;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1068], eax;
	__asm        mov    eax, [ebp-0x1068];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F6B0;
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F6BF;
	__asm        jmp    near ptr 0x0043F6C4;
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0043F6F5;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x0043F79A;
	__asm        jmp    near ptr 0x0043F6E3;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    ecx, [ebp-0x1074];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0043F79A;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1060], eax;
	__asm        cmp    dword ptr [ebp-0x1060], 0;
	__asm        je     near ptr 0x0043F736;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1060];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x105C], eax;
	__asm        jmp    near ptr 0x0043F740;
	__asm        mov    dword ptr [ebp-0x105C], 0;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043F787;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1070];
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x0043F787;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    near ptr 0x0043F787;
	__asm        jmp    near ptr 0x0043F78C;
	__asm        mov    eax, [ebp-0x105C];
	__asm        mov    sMessage.reference, eax;
	__asm        jmp    near ptr 0x0043F7D9;
	__asm        cmp    dword ptr [ebp-0x1074], 0;
	__asm        je     near ptr 0x0043F7D9;
	__asm        jmp    near ptr 0x0043F7AC;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1064], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x102C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1064];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0043F7D9;
	__asm        mov    eax, [ebp-0x1074];
	__asm        mov    ecx, sMessage.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0043F7EA;
	__asm        jmp    near ptr 0x0043F7EF;
	__asm        jmp    near ptr 0x0043F7F4;
// LINE 286:
	__asm        mov    eax, lType;
	__asm        push   eax;
	__asm        lea    eax, sMessage.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, lID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreateMessageBox;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sMessage.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMessage.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043F891;
	__asm        mov    eax, sMessage.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0043F891;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043F871;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0043F876;
	__asm        jmp    near ptr 0x0043F87B;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F88C;
	__asm        jmp    near ptr 0x0043F891;
	__asm        jmp    near ptr 0x0043F896;
	__asm        cmp    sMessage.c_str_ptr, 0;
	__asm        je     near ptr 0x0043F8B8;
	__asm        mov    eax, sMessage.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043F8BD;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0043F8C5;
// LINE 287:
}

// FUNCTION: COPTER_D 0x0043f8cc
void  CGameApp::DestroyMessageBox() {
// LINE 298:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 299:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jge    near ptr 0x0043F8FE;
// LINE 300:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 301:
	__asm        jmp    near ptr 0x0043F903;
}

// FUNCTION: COPTER_D 0x0043f908
int  CGameApp::CreateCheatCodeEntryMessageBox() {
	struct SparkalColor colorButtonFont;
	class MessageBoxWindowEdit* tempMessageBoxWindowEdit;
	struct SparkalColor colorButtonFontHighlighted;
	struct SparkalColor colorMessageFont;

	__asm        mov    dword ptr [ebp-0x34], 0;
// LINE 308:
	__asm        jmp    near ptr 0x0043F920;
// LINE 309:
	__asm        jmp    near ptr 0x0043F925;
// LINE 310:
	__asm        jmp    near ptr 0x0043F92A;
// LINE 313:
	__asm        mov    byte ptr [ebp-0x14], 0x10;
	__asm        mov    byte ptr [ebp-0x13], 0x15;
	__asm        mov    byte ptr [ebp-0x12], 0x1F;
	__asm        jmp    near ptr 0x0043F93B;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    reinterpret_cast<uint32_t>(colorMessageFont.Blue), eax;
// LINE 314:
	__asm        mov    byte ptr [ebp-0x18], 0xA;
	__asm        mov    byte ptr [ebp-0x17], 0x85;
	__asm        mov    byte ptr [ebp-0x16], 0xDA;
	__asm        jmp    near ptr 0x0043F952;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFont.Blue), eax;
// LINE 315:
	__asm        mov    byte ptr [ebp-0x1C], 0xD3;
	__asm        mov    byte ptr [ebp-0x1B], 0xDA;
	__asm        mov    byte ptr [ebp-0x1A], 0xFF;
	__asm        jmp    near ptr 0x0043F969;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    reinterpret_cast<uint32_t>(colorButtonFontHighlighted.Blue), eax;
// LINE 322:
	__asm        push   0xA8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0043FA78;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0043F9A1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0043F9A8;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        or     dword ptr [ebp-0x34], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0043F9FC;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0043F9F1;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0043FA03;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0043FA0F;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0043FA1A;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0043FA2D;
	__asm        mov    eax, ds:[0x5986C4];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5986A4];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598684];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5986E4];
	__asm        push   eax;
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7DF;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        push   0x25;
	__asm        push   0x10001;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   MessageBoxWindowEdit::MessageBoxWindowEdit;
	__asm        mov    tempMessageBoxWindowEdit, eax;
	__asm        jmp    near ptr 0x0043FA7F;
	__asm        mov    tempMessageBoxWindowEdit, 0;
	__asm        test   byte ptr [ebp-0x34], 1;
	__asm        je     near ptr 0x0043FB41;
	__asm        and    dword ptr [ebp-0x34], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x24];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0043FB10;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0043FB10;
	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043FAF0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0043FAF5;
	__asm        jmp    near ptr 0x0043FAFA;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043FB0B;
	__asm        jmp    near ptr 0x0043FB10;
	__asm        jmp    near ptr 0x0043FB15;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0043FB37;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0043FB3C;
	__asm        jmp    near ptr 0x0043FB41;
// LINE 323:
	__asm        cmp    tempMessageBoxWindowEdit, 0;
	__asm        je     near ptr 0x0043FBA3;
// LINE 324:
	__asm        lea    eax, colorMessageFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0xC4];
// LINE 325:
	__asm        lea    eax, colorButtonFontHighlighted.Blue;
	__asm        push   eax;
	__asm        lea    eax, colorButtonFont.Blue;
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0xC8];
// LINE 326:
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+4];
// LINE 327:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempMessageBoxWindowEdit;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempMessageBoxWindowEdit;
	__asm        call   dword ptr [eax+0x40];
// LINE 328:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 329:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043FBAA;
// LINE 331:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043FBAA;
// LINE 332:
}

// FUNCTION: COPTER_D 0x0043fbaf
void  CGameApp::DestroyCheatCodeEntryMessageBox() {
// LINE 340:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DestroyMessageBox;
// LINE 341:
	__asm        jmp    near ptr 0x0043FBC8;
}

// FUNCTION: COPTER_D 0x0043fbcd
int  CGameApp::DoCheatCode(class basic_string<char>& sCheatCodeString) {
	int32_t nReturnValue;
	char * szCheatOn;
	char * szCheatSoundFileName;
	char * szCheatOff;
	uint32_t nTextPosition;

	__asm        mov    dword ptr [ebp-0x14C], 0;
// LINE 353:
	__asm        mov    nReturnValue, 0;
// LINE 354:
	__asm        mov    szCheatSoundFileName, 0;
// LINE 356:
	__asm        mov    szCheatOn, 0x598830;
// LINE 357:
	__asm        mov    szCheatOff, 0x59883C;
// LINE 360:
	__asm        jmp    near ptr 0x0043FC0A;
	__asm        jmp    near ptr 0x0043FC0F;
	__asm        push   0x59884C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59884C;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FC80;
// LINE 362:
	__asm        cmp    dword ptr ds:[0x5C3808], 0;
	__asm        jne    near ptr 0x0043FC51;
	__asm        mov    dword ptr ds:[0x5C3808], 1;
	__asm        jmp    near ptr 0x0043FC5B;
	__asm        mov    dword ptr ds:[0x5C3808], 0;
// LINE 363:
	__asm        cmp    dword ptr ds:[0x5C3808], 0;
	__asm        je     near ptr 0x0043FC73;
// LINE 364:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 365:
	__asm        jmp    near ptr 0x0043FC79;
// LINE 366:
	__asm        mov    eax, szCheatOff;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 367:
	__asm        mov    nReturnValue, 1;
// LINE 369:
	__asm        jmp    near ptr 0x0043FC85;
	__asm        jmp    near ptr 0x0043FC8A;
	__asm        push   0x598860;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x598860;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FCFB;
// LINE 370:
	__asm        cmp    dword ptr ds:[0x5C380C], 0;
	__asm        jne    near ptr 0x0043FCCC;
	__asm        mov    dword ptr ds:[0x5C380C], 1;
	__asm        jmp    near ptr 0x0043FCD6;
	__asm        mov    dword ptr ds:[0x5C380C], 0;
// LINE 371:
	__asm        cmp    dword ptr ds:[0x5C380C], 0;
	__asm        je     near ptr 0x0043FCEE;
// LINE 372:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 373:
	__asm        jmp    near ptr 0x0043FCF4;
// LINE 374:
	__asm        mov    eax, szCheatOff;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 375:
	__asm        mov    nReturnValue, 1;
// LINE 377:
	__asm        jmp    near ptr 0x0043FD00;
	__asm        jmp    near ptr 0x0043FD05;
	__asm        push   0x59886C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x59886C;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FD98;
// LINE 378:
	__asm        cmp    dword ptr ds:[0x5C3810], 0;
	__asm        jne    near ptr 0x0043FD47;
	__asm        mov    dword ptr ds:[0x5C3810], 1;
	__asm        jmp    near ptr 0x0043FD51;
	__asm        mov    dword ptr ds:[0x5C3810], 0;
// LINE 379:
	__asm        cmp    dword ptr ds:[0x5C3810], 0;
	__asm        je     near ptr 0x0043FD8B;
// LINE 380:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    eax, [eax*8+0x5B49B8];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    [ecx+0x320], eax;
// LINE 381:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 383:
	__asm        jmp    near ptr 0x0043FD91;
// LINE 384:
	__asm        mov    eax, szCheatOff;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 385:
	__asm        mov    nReturnValue, 1;
// LINE 387:
	__asm        jmp    near ptr 0x0043FD9D;
	__asm        jmp    near ptr 0x0043FDA2;
	__asm        push   0x598884;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x598884;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FE13;
// LINE 388:
	__asm        cmp    dword ptr ds:[0x5C3818], 0;
	__asm        jne    near ptr 0x0043FDE4;
	__asm        mov    dword ptr ds:[0x5C3818], 1;
	__asm        jmp    near ptr 0x0043FDEE;
	__asm        mov    dword ptr ds:[0x5C3818], 0;
// LINE 389:
	__asm        cmp    dword ptr ds:[0x5C3818], 0;
	__asm        je     near ptr 0x0043FE06;
// LINE 390:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 391:
	__asm        jmp    near ptr 0x0043FE0C;
// LINE 392:
	__asm        mov    eax, szCheatOff;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 393:
	__asm        mov    nReturnValue, 1;
// LINE 395:
	__asm        jmp    near ptr 0x0043FE18;
	__asm        jmp    near ptr 0x0043FE1D;
	__asm        push   0x5988A8;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x5988A8;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FE89;
// LINE 397:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x0043FE84;
// LINE 398:
// Block start:
	struct Point2d* position2d;
	__asm        call   S3HeliGetFreePad;
	__asm        mov    position2d, eax;
// LINE 399:
	__asm        push   0x50000;
	__asm        push   0x50000;
	__asm        mov    eax, position2d;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, position2d;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   S3PersonUserAppear;
	__asm        add    esp, 0x10;
// LINE 400:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 401:
	__asm        mov    nReturnValue, 1;
// LINE 404:
// Block end:
	__asm        jmp    near ptr 0x004400E2;
	__asm        jmp    near ptr 0x0043FE8E;
	__asm        jmp    near ptr 0x0043FE93;
	__asm        push   0x5988C4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x5988C4;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find_str;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0043FEFC;
// LINE 405:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x0043FEF7;
// LINE 406:
	__asm        push   0x50000;
	__asm        push   0x50000;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   S3PersonUserAppear;
	__asm        add    esp, 0x10;
// LINE 407:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 408:
	__asm        mov    nReturnValue, 1;
// LINE 411:
	__asm        jmp    near ptr 0x004400E2;
	__asm        jmp    near ptr 0x0043FF01;
	__asm        push   0x5988DC;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    dword ptr [ebp-0x158], 0;
	__asm        jmp    near ptr 0x0043FF23;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0043FF40;
	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        jne    near ptr 0x0043FF4F;
	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004400A9;
	__asm        jmp    near ptr 0x0043FF54;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x158];
	__asm        cmp    eax, [ebp-0x16C];
	__asm        jb     near ptr 0x0044009A;
	__asm        mov    dword ptr [ebp-0x15C], 0;
	__asm        jmp    near ptr 0x0043FF84;
	__asm        inc    dword ptr [ebp-0x15C];
	__asm        mov    eax, [ebp-0x16C];
	__asm        cmp    [ebp-0x15C], eax;
	__asm        jae    near ptr 0x00440005;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x16C];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x15C];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x158];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 0x5988DC;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x15C];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x160];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0043FFE4;
	__asm        jmp    near ptr 0x0043FFE9;
	__asm        jmp    near ptr 0x00440000;
	__asm        jmp    near ptr 0x0043FFFB;
	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     near ptr 0x00440000;
	__asm        jmp    near ptr 0x00440005;
	__asm        jmp    near ptr 0x0043FF7E;
	__asm        mov    eax, [ebp-0x16C];
	__asm        cmp    [ebp-0x15C], eax;
	__asm        jne    near ptr 0x00440028;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    near ptr 0x004400A9;
	__asm        mov    eax, [ebp-0x16C];
	__asm        sub    eax, [ebp-0x15C];
	__asm        add    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        add    eax, 0x5988DC;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x15C];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x154], eax;
	__asm        cmp    dword ptr [ebp-0x154], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0044007A;
	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004400A9;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, [ebp-0x16C];
	__asm        sub    ecx, [ebp-0x15C];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x158], eax;
	__asm        jmp    near ptr 0x0043FF54;
	__asm        mov    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004400A9;
	__asm        jmp    near ptr 0x004400AE;
	__asm        cmp    dword ptr [ebp-0x168], 0xFFFFFFFF;
	__asm        je     near ptr 0x004400E2;
// LINE 412:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 2;
	__asm        jne    near ptr 0x004400E2;
// LINE 413:
	__asm        push   0x3E9;
	__asm        call   SetUserPoints;
	__asm        add    esp, 4;
// LINE 414:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 415:
	__asm        mov    nReturnValue, 1;
// LINE 418:
	__asm        jmp    near ptr 0x004400E7;
	__asm        push   0x5988F4;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    dword ptr [ebp-0x174], 0;
	__asm        jmp    near ptr 0x00440109;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00440126;
	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        jne    near ptr 0x00440135;
	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044028F;
	__asm        jmp    near ptr 0x0044013A;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x174];
	__asm        cmp    eax, [ebp-0x188];
	__asm        jb     near ptr 0x00440280;
	__asm        mov    dword ptr [ebp-0x178], 0;
	__asm        jmp    near ptr 0x0044016A;
	__asm        inc    dword ptr [ebp-0x178];
	__asm        mov    eax, [ebp-0x178];
	__asm        cmp    [ebp-0x188], eax;
	__asm        jbe    near ptr 0x004401EB;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x188];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x178];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x174];
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 0x5988F4;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x178];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x17C];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004401CA;
	__asm        jmp    near ptr 0x004401CF;
	__asm        jmp    near ptr 0x004401E6;
	__asm        jmp    near ptr 0x004401E1;
	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     near ptr 0x004401E6;
	__asm        jmp    near ptr 0x004401EB;
	__asm        jmp    near ptr 0x00440164;
	__asm        mov    eax, [ebp-0x178];
	__asm        cmp    [ebp-0x188], eax;
	__asm        jne    near ptr 0x0044020E;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    [ebp-0x184], eax;
	__asm        jmp    near ptr 0x0044028F;
	__asm        mov    eax, [ebp-0x188];
	__asm        sub    eax, [ebp-0x178];
	__asm        add    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        add    eax, 0x5988F4;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x178];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x170], eax;
	__asm        cmp    dword ptr [ebp-0x170], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00440260;
	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044028F;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    ecx, [ebp-0x188];
	__asm        sub    ecx, [ebp-0x178];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x174], eax;
	__asm        jmp    near ptr 0x0044013A;
	__asm        mov    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044028F;
	__asm        jmp    near ptr 0x00440294;
	__asm        cmp    dword ptr [ebp-0x184], 0xFFFFFFFF;
	__asm        je     near ptr 0x004402EC;
// LINE 419:
	__asm        cmp    dword ptr ds:[0x5C381C], 0;
	__asm        jne    near ptr 0x004402BD;
	__asm        mov    dword ptr ds:[0x5C381C], 1;
	__asm        jmp    near ptr 0x004402C7;
	__asm        mov    dword ptr ds:[0x5C381C], 0;
// LINE 420:
	__asm        cmp    dword ptr ds:[0x5C381C], 0;
	__asm        je     near ptr 0x004402DF;
// LINE 421:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 422:
	__asm        jmp    near ptr 0x004402E5;
// LINE 423:
	__asm        mov    eax, szCheatOff;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 424:
	__asm        mov    nReturnValue, 1;
// LINE 426:
	__asm        jmp    near ptr 0x004402F1;
	__asm        push   0x598904;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    dword ptr [ebp-0x190], 0;
	__asm        jmp    near ptr 0x00440313;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00440330;
	__asm        cmp    dword ptr [ebp-0x1A4], 0;
	__asm        jne    near ptr 0x0044033F;
	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440499;
	__asm        jmp    near ptr 0x00440344;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x190];
	__asm        cmp    eax, [ebp-0x1A4];
	__asm        jb     near ptr 0x0044048A;
	__asm        mov    dword ptr [ebp-0x194], 0;
	__asm        jmp    near ptr 0x00440374;
	__asm        inc    dword ptr [ebp-0x194];
	__asm        mov    eax, [ebp-0x1A4];
	__asm        cmp    [ebp-0x194], eax;
	__asm        jae    near ptr 0x004403F5;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x194];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x190];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        add    eax, 0x598904;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x194];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x198];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x004403D4;
	__asm        jmp    near ptr 0x004403D9;
	__asm        jmp    near ptr 0x004403F0;
	__asm        jmp    near ptr 0x004403EB;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     near ptr 0x004403F0;
	__asm        jmp    near ptr 0x004403F5;
	__asm        jmp    near ptr 0x0044036E;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        cmp    [ebp-0x194], eax;
	__asm        jne    near ptr 0x00440418;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        jmp    near ptr 0x00440499;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        sub    eax, [ebp-0x194];
	__asm        add    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        add    eax, 0x598904;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x194];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0044046A;
	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440499;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    ecx, [ebp-0x1A4];
	__asm        sub    ecx, [ebp-0x194];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x190], eax;
	__asm        jmp    near ptr 0x00440344;
	__asm        mov    dword ptr [ebp-0x1A0], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440499;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    nTextPosition, eax;
	__asm        jmp    near ptr 0x004404A7;
	__asm        cmp    nTextPosition, 0xFFFFFFFF;
	__asm        je     near ptr 0x0044059C;
// LINE 431:
// Block start:
	char szCareerLevel[3];
	int32_t nCharsToCopy;
	int32_t nNewCareerLevel;
	__asm        cmp    dword ptr ds:[0x5C2AA0], 2;
	__asm        jne    near ptr 0x0044059C;
// LINE 432:
	__asm        push   0x598918;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        add    nTextPosition, eax;
// LINE 433:
	__asm        jmp    near ptr 0x004404D3;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nTextPosition;
	__asm        mov    nCharsToCopy, eax;
// LINE 434:
	__asm        cmp    nCharsToCopy, 0;
	__asm        jl     near ptr 0x0044059C;
// LINE 435:
	__asm        cmp    nCharsToCopy, 2;
	__asm        jle    near ptr 0x004404FD;
// LINE 436:
	__asm        mov    nCharsToCopy, 2;
// LINE 437:
	__asm        jmp    near ptr 0x00440502;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        cmp    eax, nTextPosition;
	__asm        jbe    near ptr 0x0044056B;
// LINE 438:
	__asm        jmp    near ptr 0x0044051A;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00440542;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C4], eax;
	__asm        jmp    near ptr 0x00440551;
	__asm        jmp    near ptr 0x00440551;
	__asm        mov    dword ptr [ebp-0x1C4], 0;
	__asm        jmp    near ptr 0x00440551;
	__asm        mov    eax, nCharsToCopy;
	__asm        push   eax;
	__asm        mov    eax, nTextPosition;
	__asm        add    eax, [ebp-0x1C4];
	__asm        push   eax;
	__asm        lea    eax, szCareerLevel[0];
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 439:
	__asm        lea    eax, szCareerLevel[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    nNewCareerLevel, eax;
// LINE 440:
	__asm        cmp    nNewCareerLevel, 1;
	__asm        jge    near ptr 0x0044058E;
	__asm        cmp    nNewCareerLevel, 0x1F;
	__asm        jg     near ptr 0x0044059C;
// LINE 443:
	__asm        mov    eax, nNewCareerLevel;
	__asm        mov    ds:[0x5C3814], eax;
// LINE 444:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 449:
// Block end:
	__asm        jmp    near ptr 0x004405A1;
	__asm        push   0x59892C;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    dword ptr [ebp-0x1AC], 0;
	__asm        jmp    near ptr 0x004405C3;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004405E0;
	__asm        cmp    dword ptr [ebp-0x1C0], 0;
	__asm        jne    near ptr 0x004405EF;
	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440749;
	__asm        jmp    near ptr 0x004405F4;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x1AC];
	__asm        cmp    eax, [ebp-0x1C0];
	__asm        jb     near ptr 0x0044073A;
	__asm        mov    dword ptr [ebp-0x1B0], 0;
	__asm        jmp    near ptr 0x00440624;
	__asm        inc    dword ptr [ebp-0x1B0];
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1B0], eax;
	__asm        jae    near ptr 0x004406A5;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::data;
	__asm        mov    ecx, [ebp-0x1C0];
	__asm        dec    ecx;
	__asm        sub    ecx, [ebp-0x1B0];
	__asm        add    eax, ecx;
	__asm        add    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        add    eax, 0x59892C;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x1B0];
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    ecx, [ebp-0x1B4];
	__asm        movsx  ecx, byte ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00440684;
	__asm        jmp    near ptr 0x00440689;
	__asm        jmp    near ptr 0x004406A0;
	__asm        jmp    near ptr 0x0044069B;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     near ptr 0x004406A0;
	__asm        jmp    near ptr 0x004406A5;
	__asm        jmp    near ptr 0x0044061E;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        cmp    [ebp-0x1B0], eax;
	__asm        jne    near ptr 0x004406C8;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1BC], eax;
	__asm        jmp    near ptr 0x00440749;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        sub    eax, [ebp-0x1B0];
	__asm        add    eax, [ebp-0x1AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        add    eax, 0x59892C;
	__asm        dec    eax;
	__asm        sub    eax, [ebp-0x1B0];
	__asm        mov    al, [eax];
	__asm        push   eax;
	__asm        mov    ecx, sCheatCodeString;
	__asm        call   basic_string<char>::find;
	__asm        mov    [ebp-0x1A8], eax;
	__asm        cmp    dword ptr [ebp-0x1A8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0044071A;
	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440749;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        mov    ecx, [ebp-0x1C0];
	__asm        sub    ecx, [ebp-0x1B0];
	__asm        dec    ecx;
	__asm        sub    eax, ecx;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        jmp    near ptr 0x004405F4;
	__asm        mov    dword ptr [ebp-0x1BC], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00440749;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    nTextPosition, eax;
	__asm        jmp    near ptr 0x00440757;
	__asm        cmp    nTextPosition, 0xFFFFFFFF;
	__asm        je     near ptr 0x0044084D;
// LINE 453:
// Block start:
	int32_t nNewBucks;
	int32_t nCharsToCopy;
	const long lMaxBucks;
	char szBucks[3];
	__asm        mov    lMaxBucks, 0xC350;
// LINE 455:
	__asm        push   0x598950;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        add    nTextPosition, eax;
// LINE 456:
	__asm        jmp    near ptr 0x0044077D;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, nTextPosition;
	__asm        mov    nCharsToCopy, eax;
// LINE 457:
	__asm        cmp    nCharsToCopy, 0;
	__asm        jl     near ptr 0x0044084D;
// LINE 458:
	__asm        cmp    nCharsToCopy, 5;
	__asm        jle    near ptr 0x004407A7;
// LINE 459:
	__asm        mov    nCharsToCopy, 5;
// LINE 460:
	__asm        jmp    near ptr 0x004407AC;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        cmp    eax, nTextPosition;
	__asm        jbe    near ptr 0x00440815;
// LINE 461:
	__asm        jmp    near ptr 0x004407C4;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004407EC;
	__asm        mov    eax, sCheatCodeString;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        jmp    near ptr 0x004407FB;
	__asm        jmp    near ptr 0x004407FB;
	__asm        mov    dword ptr [ebp-0x1C8], 0;
	__asm        jmp    near ptr 0x004407FB;
	__asm        mov    eax, nCharsToCopy;
	__asm        push   eax;
	__asm        mov    eax, nTextPosition;
	__asm        add    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        lea    eax, szBucks[0];
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 462:
	__asm        lea    eax, szBucks[0];
	__asm        push   eax;
	__asm        call   atoi;
	__asm        add    esp, 4;
	__asm        mov    nNewBucks, eax;
// LINE 463:
	__asm        cmp    nNewBucks, 0;
	__asm        jg     near ptr 0x0044083B;
	__asm        cmp    nNewBucks, 0xC350;
	__asm        jge    near ptr 0x0044084D;
// LINE 467:
	__asm        mov    eax, nNewBucks;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 468:
	__asm        mov    eax, szCheatOn;
	__asm        mov    szCheatSoundFileName, eax;
// LINE 482:
// Block end:
	__asm        cmp    szCheatSoundFileName, 0;
	__asm        je     near ptr 0x00440B1C;
// LINE 484:
// Block start:
	class DigitalSound* tempCheatCodeSound;
	char szFullPath[260];
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, szCheatSoundFileName;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 485:
	__asm        push   0x7A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     near ptr 0x004409BF;
	__asm        or     dword ptr [ebp-0x14C], 1;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1E4], eax;
	__asm        cmp    dword ptr [ebp-0x1E4], 0;
	__asm        je     near ptr 0x0044097B;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004408CC;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0044094C;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x1E4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1EC], eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        push   eax;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1EC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00440947;
	__asm        jmp    near ptr 0x00440958;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044096A;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x144], eax;
	__asm        jmp    near ptr 0x00440985;
	__asm        mov    dword ptr [ebp-0x144], 0;
	__asm        mov    dword ptr [ebp-0x148], 0;
	__asm        jmp    near ptr 0x00440994;
	__asm        lea    eax, [ebp-0x148];
	__asm        mov    [ebp-0x150], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x150];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x140];
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    tempCheatCodeSound, eax;
	__asm        jmp    near ptr 0x004409C9;
	__asm        mov    tempCheatCodeSound, 0;
	__asm        test   byte ptr [ebp-0x14C], 1;
	__asm        je     near ptr 0x00440AD3;
	__asm        and    dword ptr [ebp-0x14C], 0xFFFFFFFE;
	__asm        mov    eax, [ebp-0x144];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x144];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00440A90;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    [ebp-0x1D4], eax;
	__asm        cmp    dword ptr [ebp-0x1D4], 0;
	__asm        je     near ptr 0x00440A90;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00440A6D;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1DC], eax;
	__asm        mov    eax, [ebp-0x1DC];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00440A72;
	__asm        jmp    near ptr 0x00440A77;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440A8B;
	__asm        jmp    near ptr 0x00440A90;
	__asm        jmp    near ptr 0x00440A95;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     near ptr 0x00440AC9;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1D0], eax;
	__asm        mov    eax, [ebp-0x1D0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440ACE;
	__asm        jmp    near ptr 0x00440AD3;
// LINE 486:
	__asm        mov    eax, tempCheatCodeSound;
	__asm        push   eax;
	__asm        push   0x43E250;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+0x14];
// LINE 487:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+0x24];
// LINE 488:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, tempCheatCodeSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheatCodeSound;
	__asm        call   dword ptr [eax+8];
// LINE 491:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x84];
// LINE 492:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x00440B38;
// LINE 493:
}

// FUNCTION: COPTER_D 0x00440b3f
int  CGameApp::CheckCommandLineForCheatCodes() {
	int32_t i;
	char szCommandValue[128];

// LINE 508:
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        push   0x78;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::IsSwitchPresent;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00440DC3;
// LINE 509:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00440B7F;
	__asm        inc    i;
	__asm        cmp    i, 0x80;
	__asm        jge    near ptr 0x00440BB3;
// LINE 510:
	__asm        mov    eax, i;
	__asm        movsx  eax, byte ptr [ebp+eax-0x80];
	__asm        cmp    eax, 0x5F;
	__asm        jne    near ptr 0x00440BAE;
// LINE 511:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax-0x80], 0x20;
// LINE 512:
	__asm        jmp    near ptr 0x00440B79;
// LINE 513:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x00440C96;
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00440BEA;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00440C67;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        lea    eax, szCommandValue[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00440C62;
	__asm        jmp    near ptr 0x00440C73;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00440C85;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x00440CA0;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x00440CAF;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DoCheatCode;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x8C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00440D7A;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0x9C], eax;
	__asm        cmp    dword ptr [ebp-0x9C], 0;
	__asm        je     near ptr 0x00440D7A;
	__asm        mov    eax, [ebp-0x9C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00440D57;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00440D5C;
	__asm        jmp    near ptr 0x00440D61;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440D75;
	__asm        jmp    near ptr 0x00440D7A;
	__asm        jmp    near ptr 0x00440D7F;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x00440DB3;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440DB8;
	__asm        mov    eax, [ebp-0x88];
	__asm        jmp    near ptr 0x00440DCA;
// LINE 515:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00440DCA;
// LINE 516:
}

// FUNCTION: COPTER_D 0x00440dcf
void  CGameApp::CreateDebugBuffer() {
	struct SparkalColor colorDebugText;
	char szTypeFaceName[64];

// LINE 525:
	__asm        jmp    near ptr 0x00440DE0;
// LINE 527:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00440E16;
	__asm        push   0;
	__asm        push   0x30;
	__asm        push   0x280;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x54], eax;
	__asm        jmp    near ptr 0x00440E20;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 528:
	__asm        push   0;
	__asm        push   0xFF;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+0x44];
// LINE 529:
	__asm        push   0xFF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x54];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x54];
	__asm        call   dword ptr [edx+8];
// LINE 530:
	__asm        mov    colorDebugText.Red, 0xFF;
// LINE 531:
	__asm        mov    colorDebugText.Green, 0;
// LINE 532:
	__asm        mov    colorDebugText.Blue, 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x54], eax;
// LINE 533:
	__asm        mov    eax, reinterpret_cast<uint32_t>(colorDebugText.Blue);
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00440E73;
// LINE 534:
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   LanguageManager::GetTypefaceForLanguage;
	__asm        add    esp, 0xC;
// LINE 535:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00440EB6;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        lea    eax, szTypeFaceName[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   MFont::MFont;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00440EBD;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x54];
	__asm        call   CBackBuffer::SetFont;
// LINE 536:
	__asm        jmp    near ptr 0x00440ED1;
}

// FUNCTION: COPTER_D 0x00440ed6
void  CGameApp::DestroyDebugBuffer() {
// LINE 544:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        je     near ptr 0x00440F30;
// LINE 545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00440F26;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00440F21;
	__asm        jmp    near ptr 0x00440F26;
// LINE 546:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 548:
	__asm        jmp    near ptr 0x00440F35;
}

// FUNCTION: COPTER_D 0x00440f3a
void  CGameApp::CreatePaletteBuffer() {
// LINE 555:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        jne    near ptr 0x00440F93;
// LINE 556:
	__asm        push   0x138;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00440F86;
	__asm        mov    ecx, [ebp-4];
	__asm        call   PaletteBuffer::PaletteBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x42BC], eax;
	__asm        jmp    near ptr 0x00440F93;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x42BC], 0;
// LINE 558:
	__asm        jmp    near ptr 0x00440F98;
}

// FUNCTION: COPTER_D 0x00440f9d
void  CGameApp::TogglePaletteBufferDisplay() {
// LINE 566:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x430C], 0;
	__asm        jne    near ptr 0x00440FE3;
// LINE 567:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x42BC], 0;
	__asm        jne    near ptr 0x00440FD1;
// LINE 568:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::CreatePaletteBuffer;
// LINE 569:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x430C], 1;
// LINE 571:
	__asm        jmp    near ptr 0x00440FF0;
// LINE 572:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x430C], 0;
// LINE 574:
	__asm        jmp    near ptr 0x00440FF5;
}

// FUNCTION: COPTER_D 0x00440ffa
void  CGameApp::ToggleDebugWindowDisplay() {
// LINE 582:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4310], 0;
	__asm        jne    near ptr 0x00441040;
// LINE 583:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x0044102E;
// LINE 584:
	__asm        mov    ecx, ds:[0x597374];
	__asm        call   CDebugWindow::ShowWindow;
// LINE 585:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4310], 1;
// LINE 587:
	__asm        jmp    near ptr 0x00441065;
// LINE 588:
	__asm        cmp    dword ptr ds:[0x597374], 0;
	__asm        je     near ptr 0x00441058;
// LINE 589:
	__asm        mov    ecx, ds:[0x597374];
	__asm        call   CDebugWindow::HideWindow;
// LINE 590:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4310], 0;
// LINE 592:
	__asm        jmp    near ptr 0x0044106A;
}

// FUNCTION: COPTER_D 0x0044106f
void  CGameApp::CreatePlayMenu() {
	struct UserMenuWindowDescription tempUMWD;
	class UserMenuWindow* myUserMenuWindow;

// LINE 602:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     near ptr 0x004410E9;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004410DB;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    tempUMWD.sImageFileName.reference, eax;
	__asm        jmp    near ptr 0x004410F0;
	__asm        mov    tempUMWD.sImageFileName.reference, 0;
	__asm        mov    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004410FC;
	__asm        jmp    near ptr 0x00441101;
	__asm        jmp    near ptr 0x00441106;
	__asm        jmp    near ptr 0x0044110B;
	__asm        jmp    near ptr 0x00441110;
	__asm        jmp    near ptr 0x00441115;
	__asm        jmp    near ptr 0x0044111A;
	__asm        jmp    near ptr 0x0044111F;
	__asm        jmp    near ptr 0x00441124;
	__asm        jmp    near ptr 0x00441129;
	__asm        mov    eax, ds:[0x598680];
	__asm        mov    [ebp-0xA4], eax;
// LINE 604:
	__asm        jmp    near ptr 0x00441139;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0044115D;
// LINE 605:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    tempUMWD.nTransparentIndex, eax;
// LINE 606:
	__asm        jmp    near ptr 0x0044116A;
	__asm        mov    dword ptr [ebp-0x68], 0x32;
	__asm        mov    dword ptr [ebp-0x64], 0xA;
	__asm        mov    dword ptr [ebp-0x60], 0x33;
	__asm        mov    dword ptr [ebp-0x5C], 0xB;
	__asm        jmp    near ptr 0x0044118B;
	__asm        lea    eax, [ebp-0x68];
	__asm        lea    ecx, tempUMWD.rectPosition.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 607:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    near ptr 0x004411C0;
	__asm        mov    tempUMWD.lMenuStringResourceIndex, 0x3C;
	__asm        jmp    near ptr 0x004411C7;
	__asm        mov    tempUMWD.lMenuStringResourceIndex, 0x3D;
// LINE 608:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    near ptr 0x004411E0;
	__asm        mov    tempUMWD.lMenuStringResourceCount, 8;
	__asm        jmp    near ptr 0x004411E7;
	__asm        mov    tempUMWD.lMenuStringResourceCount, 7;
// LINE 609:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    near ptr 0x00441200;
	__asm        mov    tempUMWD.lSelectionBase, 0;
	__asm        jmp    near ptr 0x00441207;
	__asm        mov    tempUMWD.lSelectionBase, 1;
// LINE 610:
	__asm        mov    byte ptr [ebp-0x6C], 0x80;
	__asm        mov    byte ptr [ebp-0x6B], 0x85;
	__asm        mov    byte ptr [ebp-0x6A], 0x4A;
	__asm        jmp    near ptr 0x00441218;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    reinterpret_cast<uint32_t>(tempUMWD.colorFont.Blue), eax;
// LINE 611:
	__asm        mov    byte ptr [ebp-0x70], 0xEA;
	__asm        mov    byte ptr [ebp-0x6F], 0xEF;
	__asm        mov    byte ptr [ebp-0x6E], 0x9A;
	__asm        jmp    near ptr 0x0044122F;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    reinterpret_cast<uint32_t>(tempUMWD.colorFontHighlighted.Blue), eax;
// LINE 614:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    near ptr 0x00441265;
	__asm        jmp    near ptr 0x00441247;
	__asm        mov    dword ptr [ebp-0x7C], 0x66;
	__asm        mov    dword ptr [ebp-0x78], 0x40;
	__asm        jmp    near ptr 0x0044125A;
	__asm        lea    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00441289;
	__asm        jmp    near ptr 0x0044126A;
	__asm        mov    dword ptr [ebp-0x84], 0x66;
	__asm        mov    dword ptr [ebp-0x80], 0x68;
	__asm        jmp    near ptr 0x00441280;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        lea    edx, tempUMWD.ptPositionFirstItem.x;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 615:
	__asm        mov    tempUMWD.nSizeItemFont, 0x1A;
// LINE 616:
	__asm        mov    tempUMWD.nLineHeight, 0x28;
// LINE 617:
	__asm        mov    tempUMWD.lTitleStringResourceIndex, 0xFFFFFFFF;
// LINE 618:
	__asm        mov    tempUMWD.bTitleCentered, 1;
// LINE 619:
	__asm        jmp    near ptr 0x004412C6;
	__asm        mov    dword ptr [ebp-0x8C], 0;
	__asm        mov    dword ptr [ebp-0x88], 0;
	__asm        jmp    near ptr 0x004412DF;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0x88];
	__asm        lea    edx, tempUMWD.ptTitlePosition.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 620:
	__asm        mov    tempUMWD.nSizeTitleFont, 0x24;
// LINE 623:
	__asm        push   0x15A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x00441374;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0044133B;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x00441345;
	__asm        mov    dword ptr [ebp-0x98], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D3;
	__asm        lea    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   CopterPlayMenu::CopterPlayMenu;
	__asm        mov    myUserMenuWindow, eax;
	__asm        jmp    near ptr 0x0044137B;
	__asm        mov    myUserMenuWindow, 0;
// LINE 624:
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 625:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myUserMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserMenuWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 626:
	__asm        jmp    near ptr 0x004413A0;
	__asm        lea    ecx, tempUMWD.sImageFileName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    tempUMWD.sImageFileName.c_str_ptr, 0;
	__asm        je     near ptr 0x004413D6;
	__asm        mov    eax, tempUMWD.sImageFileName.c_str_ptr;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004413DB;
	__asm        jmp    near ptr 0x004413E0;
}

// FUNCTION: COPTER_D 0x004413e5
void  CGameApp::CreateUserInputWindow() {
	class UserInputWindow* myUserInputWindow;
	int32_t nCurrentGameMode;

// LINE 634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00441408;
	__asm        jmp    near ptr 0x0044140D;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0044141B;
	__asm        jmp    near ptr 0x00441420;
	__asm        jmp    near ptr 0x00441425;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 636:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x00441441;
// LINE 637:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 639:
	__asm        push   0xB0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004414C6;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00441473;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0044147A;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0044147F;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x004414A0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D4;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   UserInputWindow::UserInputWindow;
	__asm        mov    myUserInputWindow, eax;
	__asm        jmp    near ptr 0x004414CD;
	__asm        mov    myUserInputWindow, 0;
// LINE 640:
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+4];
// LINE 641:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 642:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1E8;
	__asm        push   eax;
	__asm        mov    eax, myUserInputWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myUserInputWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 643:
	__asm        jmp    near ptr 0x00441506;
}

// FUNCTION: COPTER_D 0x0044150b
void  CGameApp::DestroyUserInputWindow(class UserInputWindow* windowToDestroy, int32_t bUseData) {
	int32_t nCurrentGameMode;

// LINE 650:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0044152E;
	__asm        jmp    near ptr 0x00441533;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00441541;
	__asm        jmp    near ptr 0x00441546;
	__asm        jmp    near ptr 0x0044154B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 652:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x00441567;
// LINE 653:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 656:
	__asm        cmp    bUseData, 0;
	__asm        je     near ptr 0x004415B0;
	__asm        jmp    near ptr 0x00441576;
	__asm        mov    eax, windowToDestroy;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x004415B0;
// LINE 657:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0xD0];
// LINE 658:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::RemoveUserConfigurableCommands;
// LINE 659:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        call   GameModePlayData::ReadUserConfigurableCommands;
// LINE 661:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 662:
	__asm        jmp    near ptr 0x004415C0;
}

// FUNCTION: COPTER_D 0x004415c7
void  CGameApp::CreateRenderSettingsWindow() {
	class RenderSettingsWindow* myRenderSettingsWindow;
	int32_t nCurrentGameMode;

// LINE 670:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004415EA;
	__asm        jmp    near ptr 0x004415EF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x004415FD;
	__asm        jmp    near ptr 0x00441602;
	__asm        jmp    near ptr 0x00441607;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 672:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x00441623;
// LINE 673:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 675:
	__asm        push   0xB8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004416A8;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00441655;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0044165C;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x00441661;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x00441682;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D5;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   RenderSettingsWindow::RenderSettingsWindow;
	__asm        mov    myRenderSettingsWindow, eax;
	__asm        jmp    near ptr 0x004416AF;
	__asm        mov    myRenderSettingsWindow, 0;
// LINE 676:
	__asm        mov    eax, myRenderSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 677:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myRenderSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 682:
	__asm        call   GetRenderBackPlaneValue;
	__asm        push   eax;
	__asm        call   ConvertRenderBackPlaneValueToGUI;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4308];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4330];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x432C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4328];
	__asm        push   eax;
	__asm        mov    ecx, myRenderSettingsWindow;
	__asm        call   RenderSettingsWindow::SetCurrentSettings;
// LINE 683:
	__asm        jmp    near ptr 0x00441710;
}

// FUNCTION: COPTER_D 0x00441715
void  CGameApp::DestroyRenderSettingsWindow(class RenderSettingsWindow* windowToDestroy, int32_t bUseData) {
	long lQuadPixelType;
	int32_t nCurrentGameMode;
	long bShowGroundTextures;
	long bShowSkyAndClouds;
	long bShowBuildingTextures;
	long lFogCloseness;

// LINE 691:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00441738;
	__asm        jmp    near ptr 0x0044173D;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0044174B;
	__asm        jmp    near ptr 0x00441750;
	__asm        jmp    near ptr 0x00441755;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 698:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x00441771;
// LINE 699:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 701:
	__asm        cmp    bUseData, 0;
	__asm        je     near ptr 0x004417E7;
// LINE 706:
	__asm        lea    eax, lFogCloseness;
	__asm        push   eax;
	__asm        lea    eax, lQuadPixelType;
	__asm        push   eax;
	__asm        lea    eax, bShowSkyAndClouds;
	__asm        push   eax;
	__asm        lea    eax, bShowGroundTextures;
	__asm        push   eax;
	__asm        lea    eax, bShowBuildingTextures;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   RenderSettingsWindow::GetCurrentSettings;
// LINE 709:
	__asm        mov    eax, bShowBuildingTextures;
	__asm        mov    ds:[0x598E88], eax;
	__asm        mov    eax, ds:[0x598E88];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4328], eax;
// LINE 710:
	__asm        mov    eax, bShowGroundTextures;
	__asm        mov    ds:[0x598E8C], eax;
	__asm        mov    eax, ds:[0x598E8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x432C], eax;
// LINE 711:
	__asm        mov    eax, bShowSkyAndClouds;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4330], eax;
// LINE 712:
	__asm        mov    eax, lQuadPixelType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4308], eax;
// LINE 717:
	__asm        mov    eax, lFogCloseness;
	__asm        push   eax;
	__asm        call   S3SetBackPlaneBasedOnValue;
	__asm        add    esp, 4;
// LINE 720:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 721:
	__asm        jmp    near ptr 0x004417F7;
}

// FUNCTION: COPTER_D 0x004417fe
void  CGameApp::CreateSoundSettingsWindow() {
	class SoundSettingsWindow* mySoundSettingsWindow;
	struct RadioPreferences tempRadioPreferences;
	int32_t nCurrentGameMode;
	char * chPrefData;
	struct SoundPreferences tempSoundPreferences;

// LINE 732:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00441821;
	__asm        jmp    near ptr 0x00441826;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00441834;
	__asm        jmp    near ptr 0x00441839;
	__asm        jmp    near ptr 0x0044183E;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 734:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x0044185A;
// LINE 735:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 737:
	__asm        push   0x88;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004418DF;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0044188C;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00441893;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x00441898;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        mov    dword ptr [ebp-0x40], 1;
	__asm        jmp    near ptr 0x004418B9;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D6;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   SoundSettingsWindow::SoundSettingsWindow;
	__asm        mov    mySoundSettingsWindow, eax;
	__asm        jmp    near ptr 0x004418E6;
	__asm        mov    mySoundSettingsWindow, 0;
// LINE 738:
	__asm        mov    eax, mySoundSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, mySoundSettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 742:
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 743:
	__asm        cmp    chPrefData, 0;
	__asm        je     near ptr 0x00441964;
	__asm        push   0x4FFFFFF;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x10;
	__asm        jne    near ptr 0x00441964;
// LINE 744:
	__asm        mov    eax, chPrefData;
	__asm        lea    ecx, tempSoundPreferences.lMasterVolume;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 746:
	__asm        jmp    near ptr 0x0044197D;
// LINE 750:
	__asm        mov    tempSoundPreferences.lVehicleVolume, 0x2710;
	__asm        mov    eax, tempSoundPreferences.lVehicleVolume;
	__asm        mov    tempSoundPreferences.lSoundEffectsVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lSoundEffectsVolume;
	__asm        mov    tempSoundPreferences.lDispatchVolume, eax;
	__asm        mov    eax, tempSoundPreferences.lDispatchVolume;
	__asm        mov    tempSoundPreferences.lMasterVolume, eax;
// LINE 752:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   SoundSettingsWindow::SetCurrentVolumeSettings;
// LINE 755:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::GetPreferences;
// LINE 760:
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::GetStationCount;
	__asm        push   eax;
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, mySoundSettingsWindow;
	__asm        call   SoundSettingsWindow::SetCurrentRadioSettings;
// LINE 761:
	__asm        jmp    near ptr 0x004419B3;
}

// FUNCTION: COPTER_D 0x004419b8
void  CGameApp::DestroySoundSettingsWindow(class SoundSettingsWindow* windowToDestroy, int32_t bUseData) {
	struct RadioPreferences tempRadioPreferences;
	int32_t nCurrentGameMode;
	struct SoundPreferences tempSoundPreferences;

// LINE 770:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4338];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004419DB;
	__asm        jmp    near ptr 0x004419E0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x004419EE;
	__asm        jmp    near ptr 0x004419F3;
	__asm        jmp    near ptr 0x004419F8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        mov    nCurrentGameMode, eax;
// LINE 772:
	__asm        cmp    nCurrentGameMode, 6;
	__asm        jne    near ptr 0x00441A14;
// LINE 773:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 775:
	__asm        cmp    bUseData, 0;
	__asm        je     near ptr 0x00441A72;
// LINE 777:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   SoundSettingsWindow::GetCurrentVolumeSettings;
// LINE 778:
	__asm        lea    eax, tempSoundPreferences.lMasterVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 781:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   SoundSettingsWindow::GetCurrentRadioSettings;
// LINE 786:
	__asm        lea    eax, tempRadioPreferences.lVolume;
	__asm        push   eax;
	__asm        mov    ecx, 0x604480;
	__asm        call   Radio::SetPreferences;
// LINE 794:
	__asm        cmp    tempRadioPreferences.bPreferToBeOn, 0;
	__asm        je     near ptr 0x00441A6A;
// LINE 795:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::EnableSoundTrack;
// LINE 796:
	__asm        jmp    near ptr 0x00441A72;
// LINE 797:
	__asm        mov    ecx, this;
	__asm        call   CGameApp::DisableSoundTrack;
// LINE 799:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 800:
	__asm        jmp    near ptr 0x00441A82;
}

// FUNCTION: COPTER_D 0x00441a89
void  CGameApp::CreateCitySettingsWindow() {
	class CitySettingsWindow* myCitySettingsWindow;

// LINE 808:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 810:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00441B23;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00441AD0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00441AD7;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00441ADC;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441AFD;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7D8;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CitySettingsWindow::CitySettingsWindow;
	__asm        mov    myCitySettingsWindow, eax;
	__asm        jmp    near ptr 0x00441B2A;
	__asm        mov    myCitySettingsWindow, 0;
// LINE 811:
	__asm        mov    eax, myCitySettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   dword ptr [eax+4];
// LINE 812:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, myCitySettingsWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 813:
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        mov    ecx, myCitySettingsWindow;
	__asm        call   CitySettingsWindow::SetCurrentCitySettings;
// LINE 814:
	__asm        jmp    near ptr 0x00441B5A;
}

// FUNCTION: COPTER_D 0x00441b5f
void  CGameApp::DestroyCitySettingsWindow(class CitySettingsWindow* windowToDestroy, int32_t bUseData) {
// LINE 825:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 826:
	__asm        cmp    bUseData, 0;
	__asm        je     near ptr 0x00441BA9;
// LINE 827:
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   CitySettingsWindow::GetCurrentCitySettings;
// LINE 828:
	__asm        push   0x24;
	__asm        call   GetCurrentCitySettings;
	__asm        push   eax;
	__asm        push   0x5EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x2C];
// LINE 830:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 831:
	__asm        jmp    near ptr 0x00441BB9;
}

// FUNCTION: COPTER_D 0x00441bc0
void  CGameApp::CreateControlDisplayWindow() {
	class ControlDisplayWindow* tempControlDisplayWindow;

// LINE 838:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 840:
	__asm        push   0x80;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00441C5A;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00441C07;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00441C0E;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00441C13;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441C34;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x2711;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   ControlDisplayWindow::ControlDisplayWindow;
	__asm        mov    tempControlDisplayWindow, eax;
	__asm        jmp    near ptr 0x00441C61;
	__asm        mov    tempControlDisplayWindow, 0;
// LINE 841:
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+4];
// LINE 842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 843:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1E8;
	__asm        push   eax;
	__asm        mov    eax, tempControlDisplayWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempControlDisplayWindow;
	__asm        call   dword ptr [eax+0xC4];
// LINE 844:
	__asm        jmp    near ptr 0x00441C9A;
}

// FUNCTION: COPTER_D 0x00441c9f
void  CGameApp::DestroyControlDisplayWindow() {
// LINE 851:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 852:
	__asm        jmp    near ptr 0x00441CB9;
}

// FUNCTION: COPTER_D 0x00441cbe
void  CGameApp::CreateCheckupWindow() {
	class CheckupWindow* tempCheckupWindow;

// LINE 859:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xA4];
// LINE 861:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00441D58;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x00441D05;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00441D0C;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00441D11;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        jmp    near ptr 0x00441D32;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        push   0x7E1;
	__asm        lea    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CheckupWindow::CheckupWindow;
	__asm        mov    tempCheckupWindow, eax;
	__asm        jmp    near ptr 0x00441D5F;
	__asm        mov    tempCheckupWindow, 0;
// LINE 862:
	__asm        mov    eax, tempCheckupWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheckupWindow;
	__asm        call   dword ptr [eax+4];
// LINE 863:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        push   eax;
	__asm        mov    eax, tempCheckupWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempCheckupWindow;
	__asm        call   dword ptr [eax+0x40];
// LINE 864:
	__asm        jmp    near ptr 0x00441D81;
}

// FUNCTION: COPTER_D 0x00441d86
void  CGameApp::DestroyCheckupWindow(class CheckupWindow* windowToDestroy, int32_t bUseData) {
	long lSettings[3];

// LINE 873:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xA4];
// LINE 874:
	__asm        cmp    bUseData, 0;
	__asm        je     near ptr 0x00441E0B;
// LINE 875:
	__asm        lea    eax, lSettings[0];
	__asm        push   eax;
	__asm        mov    ecx, windowToDestroy;
	__asm        call   CheckupWindow::GetCurrentSettings;
// LINE 878:
	__asm        mov    eax, lSettings[0];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 879:
	__asm        mov    eax, lSettings[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   S3HeliPurchaseRepairs;
	__asm        add    esp, 8;
// LINE 881:
	__asm        mov    eax, lSettings[1];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 882:
	__asm        mov    eax, lSettings[1];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   S3HeliPurchaseFuel;
	__asm        add    esp, 8;
// LINE 884:
	__asm        mov    eax, lSettings[2];
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 885:
	__asm        mov    eax, lSettings[2];
	__asm        push   eax;
	__asm        call   S3HeliPurchaseTeargasCanisters;
	__asm        add    esp, 4;
// LINE 888:
	__asm        mov    eax, windowToDestroy;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, windowToDestroy;
	__asm        call   dword ptr [eax+0x6C];
// LINE 889:
	__asm        jmp    near ptr 0x00441E1B;
}



// Contribution: 3:00001680-00001970 Module: 53, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598680
// SZ_PLAY_MENU_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598684
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_0
// GLOBAL: COPTER_D 0x00598688
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_1
// GLOBAL: COPTER_D 0x0059868c
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_2N
// GLOBAL: COPTER_D 0x00598690
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_2D
// GLOBAL: COPTER_D 0x00598694
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_3
// GLOBAL: COPTER_D 0x00598698
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_4
// GLOBAL: COPTER_D 0x0059869c
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_5
// GLOBAL: COPTER_D 0x005986a0
// SZ_ABOUT_BOX_IMAGE_FILE_NAME_6
// GLOBAL: COPTER_D 0x005986a4
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_0
// GLOBAL: COPTER_D 0x005986a8
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_1
// GLOBAL: COPTER_D 0x005986ac
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2N
// GLOBAL: COPTER_D 0x005986b0
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_2D
// GLOBAL: COPTER_D 0x005986b4
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_3
// GLOBAL: COPTER_D 0x005986b8
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_4
// GLOBAL: COPTER_D 0x005986bc
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_5
// GLOBAL: COPTER_D 0x005986c0
// SZ_ABOUT_BOX_BUTTON_IMAGE_FILE_NAME_6
// GLOBAL: COPTER_D 0x005986c4
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_0
// GLOBAL: COPTER_D 0x005986c8
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_1
// GLOBAL: COPTER_D 0x005986cc
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2N
// GLOBAL: COPTER_D 0x005986d0
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_2D
// GLOBAL: COPTER_D 0x005986d4
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_3
// GLOBAL: COPTER_D 0x005986d8
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_4
// GLOBAL: COPTER_D 0x005986dc
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_5
// GLOBAL: COPTER_D 0x005986e0
// SZ_ABOUT_BOX_ANIMATION_FILE_NAME_6
// GLOBAL: COPTER_D 0x005986e4
// SZ_CHEAT_BOX_TEXT_IMAGE_FILE_NAME
