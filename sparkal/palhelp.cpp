// Module: palhelp.obj
// Source: C:\Copter\source\sparkal\palhelp.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class SparkalPalette (forward reference);
class SparkalPalette{
public:
	struct SparkalColor* pColors;
	long lColors;
	int32_t bOwnColors;
	void SparkalPalette(struct SparkalColor*, int32_t, unsigned long);
	void SparkalPalette();
	// vtable: 0
	intro void ~SparkalPalette();
	// vtable: 4
	intro void GetRGBValue(int32_t, struct SparkalColor&);
	// vtable: 8
	intro void GetNearestIndex(struct SparkalColor&, int32_t&);
	// vtable: 12
	intro void FadeToWhite(long);
	// vtable: 16
	intro void FadeToBlack(long);
	// vtable: 20
	intro void FadeToPalette(struct SparkalColor, long, long);
	// calltype: NearC
	static void FadeToPalette(struct SparkalColor, struct SparkalColor*, long, long);
	void FadeToRGB(struct SparkalColor&, long);
	// calltype: NearC
	static void SetSystemPaletteEntriesToRGB(struct SparkalColor&);
	// vtable: 24
	intro void ImplementNewPalette(struct SparkalColor*);
};

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: int32_t;

// Type: unsigned long;

// Type: void;

// Type: long;

// Type: class MTimer;
class MTimer{
		enum TimerResolution {
			nTimerResolutionMicroseconds = 0,
			nTimerResolutionMilliseconds = 1,
			nTimerResolutionSeconds = 2,
		};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	enum MTimer::TimerResolution nTimerResolution;
	unsigned long lStartTime;
	unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	unsigned long lFrequency;
};

// Type: struct tagPALETTEENTRY[256];

// Type: struct SparkalColor;
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: struct SparkalPalette::FadeToPalette::TempPalette (forward reference);

// Type: class CopterSparkalPalette (forward reference);
class CopterSparkalPalette : public SparkalPalette
{
public:
	void CopterSparkalPalette(struct SparkalColor*, int32_t);
	void CopterSparkalPalette();
	int32_t GetNextDarkerColorIndex(int32_t);
	int32_t GetNextLighterColorIndex(int32_t);
	virtual void ~CopterSparkalPalette();
};

// Type: void * __ptr32;

// Type: struct ClearWindowsSystemPalette::__unnamed;
class ClearWindowsSystemPalette::__unnamed{
public:
	unsigned short Version;
	unsigned short NumberOfEntries;
	struct tagPALETTEENTRY aEntries[256];
};

// Type: uint32_t;



// Contribution: 1:000953b0-00096b4b Module: 18, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004963b0
void SparkalPalette::SparkalPalette(struct SparkalColor* pNewColors, int32_t bNewOwnColors, unsigned long lNewColors) {
// LINE 29:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, pNewColors;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, lNewColors;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, bNewOwnColors;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5910F8;
// LINE 31:
	__asm        jmp    near ptr 0x004963E5;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004963ef
void SparkalPalette::SparkalPalette() {
// LINE 40:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5910F8;
// LINE 41:
	__asm        jmp    near ptr 0x00496427;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0049642f
void SparkalPalette::~SparkalPalette() {
// LINE 47:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5910F8;
// LINE 48:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00496479;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00496479;
// LINE 49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 50:
	__asm        jmp    near ptr 0x0049647E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00496483
void SparkalPalette::GetNearestIndex(struct SparkalColor& colorValue, int32_t& nIndex) {
	int32_t nCurrentBestMatch;
	int32_t i;
	unsigned long lCurrentDistance;
	unsigned long lClosestDistance;

// LINE 64:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 67:
	__asm        mov    lClosestDistance, 0xFFFFFFFF;
// LINE 70:
	__asm        mov    nCurrentBestMatch, 0;
	__asm        mov    eax, nCurrentBestMatch;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x004964AB;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+8], ecx;
	__asm        jle    near ptr 0x0049659C;
// LINE 77:
	__asm        mov    eax, colorValue;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+2];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, i;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+edx*4+2];
	__asm        sub    ecx, ebx;
	__asm        mov    [ebp-0x18], ecx;
	__asm        mov    eax, colorValue;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+2];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ebx, i;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+ebx*4+2];
	__asm        sub    edx, ecx;
	__asm        mov    eax, [ebp-0x18];
	__asm        imul   eax, edx;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    ecx, colorValue;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    ebx, i;
	__asm        xor    eax, eax;
	__asm        mov    al, [ecx+ebx*4];
	__asm        sub    edx, eax;
	__asm        mov    [ebp-0x20], edx;
	__asm        mov    eax, colorValue;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ebx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ebx*4];
	__asm        sub    ecx, edx;
	__asm        mov    eax, [ebp-0x20];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    ecx, colorValue;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    ebx, i;
	__asm        xor    eax, eax;
	__asm        mov    al, [ecx+ebx*4+1];
	__asm        sub    edx, eax;
	__asm        mov    [ebp-0x28], edx;
	__asm        mov    eax, colorValue;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ebx, i;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ebx*4+1];
	__asm        sub    ecx, edx;
	__asm        mov    eax, [ebp-0x28];
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x24];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    lCurrentDistance, eax;
// LINE 78:
	__asm        mov    eax, lClosestDistance;
	__asm        cmp    lCurrentDistance, eax;
	__asm        jae    near ptr 0x00496597;
// LINE 79:
	__asm        mov    eax, lClosestDistance;
	__asm        mov    lCurrentDistance, eax;
// LINE 80:
	__asm        mov    eax, i;
	__asm        mov    nCurrentBestMatch, eax;
// LINE 82:
	__asm        jmp    near ptr 0x004964A8;
// LINE 83:
	__asm        mov    eax, nCurrentBestMatch;
	__asm        mov    ecx, nIndex;
	__asm        mov    [ecx], eax;
// LINE 84:
	__asm        jmp    near ptr 0x004965A9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004965b0
void SparkalPalette::FadeToWhite(long lFadeTime) {
	const unsigned long lDelayTime;
	class MTimer timerFade;
	struct tagPALETTEENTRY palEntries[256];
	int32_t j;
	int32_t i;
	int32_t nOriginalPriority;
	int32_t nMultiplier;
	int32_t nDivisor;

// LINE 93:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x460;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 95:
	__asm        mov    eax, lFadeTime;
	__asm        cdq;
	__asm        and    edx, 0x3F;
	__asm        add    eax, edx;
	__asm        sar    eax, 6;
	__asm        mov    lDelayTime, eax;
// LINE 96:
	__asm        mov    timerFade.nTimerResolution, 1;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lFrequency, 0;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496633;
	__asm        lea    eax, [ebp-0x440];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x440];
	__asm        mov    [ebp-0x438], eax;
	__asm        mov    eax, [ebp-0x438];
	__asm        mov    timerFade.lFrequency, eax;
	__asm        jmp    near ptr 0x00496633;
	__asm        jmp    near ptr 0x00496638;
// LINE 113:
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E0];
	__asm        mov    nOriginalPriority, eax;
// LINE 114:
	__asm        push   2;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 116:
	__asm        cmp    dword ptr ds:[0x597268], 0;
	__asm        jne    near ptr 0x0049666E;
// LINE 117:
	__asm        jmp    near ptr 0x00496669;
	__asm        jmp    near ptr 0x00496A0D;
// LINE 118:
	__asm        mov    i, 0xA;
	__asm        jmp    near ptr 0x0049667D;
	__asm        inc    i;
	__asm        cmp    i, 0xF6;
	__asm        jge    near ptr 0x004966E7;
// LINE 119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x414], al;
// LINE 120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x413], al;
// LINE 121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x412], al;
// LINE 122:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x411], 5;
// LINE 123:
	__asm        jmp    near ptr 0x0049667A;
// LINE 124:
	__asm        mov    nMultiplier, 0x3F;
// LINE 125:
	__asm        mov    nDivisor, 0x40;
// LINE 126:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00496704;
	__asm        inc    i;
	__asm        cmp    i, 0x40;
	__asm        jge    near ptr 0x004969F2;
// LINE 127:
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        jmp    near ptr 0x00496727;
	__asm        jmp    near ptr 0x0049672C;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x0049673E;
	__asm        jmp    near ptr 0x004967BC;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00496761;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x004967B7;
	__asm        jmp    near ptr 0x004967B7;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x0049679D;
	__asm        lea    eax, [ebp-0x434];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x434];
	__asm        mov    [ebp-0x42C], eax;
	__asm        mov    eax, [ebp-0x42C];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x004967B7;
	__asm        jmp    near ptr 0x004967B7;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x004967B7;
	__asm        jmp    near ptr 0x004967BC;
	__asm        jmp    near ptr 0x004967C1;
// LINE 128:
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x004967E1;
// LINE 129:
	__asm        sar    nDivisor, 1;
// LINE 130:
	__asm        mov    eax, nDivisor;
	__asm        dec    eax;
	__asm        mov    nMultiplier, eax;
// LINE 132:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x004967F0;
	__asm        inc    j;
	__asm        cmp    j, 0xF6;
	__asm        jge    near ptr 0x00496886;
// LINE 134:
	__asm        mov    ecx, 0xFF;
	__asm        mov    eax, 0xFF;
	__asm        mov    edx, j;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ebp+edx*4-0x414];
	__asm        sub    eax, ebx;
	__asm        imul   eax, nMultiplier;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x414], cl;
// LINE 135:
	__asm        mov    ecx, 0xFF;
	__asm        mov    eax, 0xFF;
	__asm        mov    edx, j;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ebp+edx*4-0x413];
	__asm        sub    eax, ebx;
	__asm        imul   eax, nMultiplier;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x413], cl;
// LINE 136:
	__asm        mov    ecx, 0xFF;
	__asm        mov    eax, 0xFF;
	__asm        mov    edx, j;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ebp+edx*4-0x412];
	__asm        sub    eax, ebx;
	__asm        imul   eax, nMultiplier;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x412], cl;
// LINE 137:
	__asm        jmp    near ptr 0x004967ED;
// LINE 139:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 140:
	__asm        lea    eax, palEntries[10].peRed;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 144:
	__asm        mov    eax, timerFade.lTotalElapsedTime;
	__asm        mov    [ebp-0x448], eax;
	__asm        jmp    near ptr 0x004968CB;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x0049696F;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x004968FB;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496951;
	__asm        jmp    near ptr 0x00496951;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496937;
	__asm        lea    eax, [ebp-0x454];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    [ebp-0x44C], eax;
	__asm        mov    eax, [ebp-0x44C];
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496951;
	__asm        jmp    near ptr 0x00496951;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496951;
	__asm        mov    eax, [ebp-0x458];
	__asm        sub    eax, timerFade.lStartTime;
	__asm        mov    [ebp-0x444], eax;
	__asm        mov    eax, [ebp-0x444];
	__asm        add    [ebp-0x448], eax;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x004969BF;
	__asm        cmp    timerFade.lFrequency, 0;
	__asm        je     near ptr 0x004969BF;
	__asm        mov    eax, timerFade.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x448];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x448], eax;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x448], eax;
	__asm        jae    near ptr 0x004969ED;
	__asm        jmp    near ptr 0x004969E8;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x448], eax;
	__asm        jae    near ptr 0x004969ED;
	__asm        jmp    near ptr 0x004969E8;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x45C], eax;
	__asm        jae    near ptr 0x004969ED;
	__asm        jmp    near ptr 0x004968BA;
// LINE 145:
	__asm        jmp    near ptr 0x00496701;
// LINE 147:
	__asm        mov    eax, nOriginalPriority;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 171:
	__asm        jmp    near ptr 0x00496A08;
	__asm        jmp    near ptr 0x00496A0D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00496a14
void SparkalPalette::FadeToBlack(long lFadeTime) {
	const unsigned long lDelayTime;
	class MTimer timerFade;
	struct tagPALETTEENTRY palEntries[256];
	int32_t j;
	int32_t i;
	int32_t nOriginalPriority;
	int32_t nMultiplier;
	int32_t nDivisor;

// LINE 180:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x460;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 182:
	__asm        mov    eax, lFadeTime;
	__asm        cdq;
	__asm        and    edx, 0x3F;
	__asm        add    eax, edx;
	__asm        sar    eax, 6;
	__asm        mov    lDelayTime, eax;
// LINE 183:
	__asm        mov    timerFade.nTimerResolution, 1;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lFrequency, 0;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496A97;
	__asm        lea    eax, [ebp-0x440];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x440];
	__asm        mov    [ebp-0x438], eax;
	__asm        mov    eax, [ebp-0x438];
	__asm        mov    timerFade.lFrequency, eax;
	__asm        jmp    near ptr 0x00496A97;
	__asm        jmp    near ptr 0x00496A9C;
// LINE 200:
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E0];
	__asm        mov    nOriginalPriority, eax;
// LINE 201:
	__asm        push   2;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 203:
	__asm        cmp    dword ptr ds:[0x597268], 0;
	__asm        jne    near ptr 0x00496AD2;
// LINE 204:
	__asm        jmp    near ptr 0x00496ACD;
	__asm        jmp    near ptr 0x00496E4D;
// LINE 206:
	__asm        mov    i, 0xA;
	__asm        jmp    near ptr 0x00496AE1;
	__asm        inc    i;
	__asm        cmp    i, 0xF6;
	__asm        jge    near ptr 0x00496B4B;
// LINE 207:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x414], al;
// LINE 208:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x413], al;
// LINE 209:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x412], al;
// LINE 210:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x411], 5;
// LINE 211:
	__asm        jmp    near ptr 0x00496ADE;
// LINE 213:
	__asm        mov    nMultiplier, 0x3F;
// LINE 214:
	__asm        mov    nDivisor, 0x40;
// LINE 215:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00496B68;
	__asm        inc    i;
	__asm        cmp    i, 0x40;
	__asm        jge    near ptr 0x00496E32;
// LINE 216:
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        jmp    near ptr 0x00496B8B;
	__asm        jmp    near ptr 0x00496B90;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00496BA2;
	__asm        jmp    near ptr 0x00496C20;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00496BC5;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00496C1B;
	__asm        jmp    near ptr 0x00496C1B;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496C01;
	__asm        lea    eax, [ebp-0x434];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x434];
	__asm        mov    [ebp-0x42C], eax;
	__asm        mov    eax, [ebp-0x42C];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00496C1B;
	__asm        jmp    near ptr 0x00496C1B;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00496C1B;
	__asm        jmp    near ptr 0x00496C20;
	__asm        jmp    near ptr 0x00496C25;
// LINE 217:
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x00496C45;
// LINE 218:
	__asm        sar    nDivisor, 1;
// LINE 219:
	__asm        mov    eax, nDivisor;
	__asm        dec    eax;
	__asm        mov    nMultiplier, eax;
// LINE 221:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x00496C54;
	__asm        inc    j;
	__asm        cmp    j, 0xF6;
	__asm        jge    near ptr 0x00496CC6;
// LINE 223:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x414];
	__asm        imul   ecx, nMultiplier;
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        mov    ecx, j;
	__asm        mov    [ebp+ecx*4-0x414], al;
// LINE 224:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x413];
	__asm        imul   ecx, nMultiplier;
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        mov    ecx, j;
	__asm        mov    [ebp+ecx*4-0x413], al;
// LINE 225:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x412];
	__asm        imul   ecx, nMultiplier;
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        mov    ecx, j;
	__asm        mov    [ebp+ecx*4-0x412], al;
// LINE 226:
	__asm        jmp    near ptr 0x00496C51;
// LINE 228:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 229:
	__asm        lea    eax, palEntries[10].peRed;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 233:
	__asm        mov    eax, timerFade.lTotalElapsedTime;
	__asm        mov    [ebp-0x448], eax;
	__asm        jmp    near ptr 0x00496D0B;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00496DAF;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00496D3B;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496D91;
	__asm        jmp    near ptr 0x00496D91;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496D77;
	__asm        lea    eax, [ebp-0x454];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x454];
	__asm        mov    [ebp-0x44C], eax;
	__asm        mov    eax, [ebp-0x44C];
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496D91;
	__asm        jmp    near ptr 0x00496D91;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x458], eax;
	__asm        jmp    near ptr 0x00496D91;
	__asm        mov    eax, [ebp-0x458];
	__asm        sub    eax, timerFade.lStartTime;
	__asm        mov    [ebp-0x444], eax;
	__asm        mov    eax, [ebp-0x444];
	__asm        add    [ebp-0x448], eax;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496DFF;
	__asm        cmp    timerFade.lFrequency, 0;
	__asm        je     near ptr 0x00496DFF;
	__asm        mov    eax, timerFade.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x448];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x448], eax;
	__asm        mov    eax, [ebp-0x448];
	__asm        cmp    lDelayTime, eax;
	__asm        jbe    near ptr 0x00496E2D;
	__asm        jmp    near ptr 0x00496E28;
	__asm        mov    eax, [ebp-0x448];
	__asm        cmp    lDelayTime, eax;
	__asm        jbe    near ptr 0x00496E2D;
	__asm        jmp    near ptr 0x00496E28;
	__asm        mov    eax, [ebp-0x45C];
	__asm        cmp    lDelayTime, eax;
	__asm        jbe    near ptr 0x00496E2D;
	__asm        jmp    near ptr 0x00496CFA;
// LINE 234:
	__asm        jmp    near ptr 0x00496B65;
// LINE 236:
	__asm        mov    eax, nOriginalPriority;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 260:
	__asm        jmp    near ptr 0x00496E48;
	__asm        jmp    near ptr 0x00496E4D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00496e54
void SparkalPalette::FadeToRGB(struct SparkalColor& colorToFadeTo, long lFadeTime) {
	const unsigned long lDelayTime;
	class MTimer timerFade;
	struct tagPALETTEENTRY palEntries[256];
	int32_t nDifference;
	int32_t j;
	int32_t i;
	int32_t nOriginalPriority;
	int32_t nMultiplier;
	int32_t nDivisor;

// LINE 269:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x464;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 272:
	__asm        mov    eax, lFadeTime;
	__asm        cdq;
	__asm        and    edx, 0x3F;
	__asm        add    eax, edx;
	__asm        sar    eax, 6;
	__asm        mov    lDelayTime, eax;
// LINE 273:
	__asm        mov    timerFade.nTimerResolution, 1;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lFrequency, 0;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00496ED7;
	__asm        lea    eax, [ebp-0x444];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x444];
	__asm        mov    [ebp-0x43C], eax;
	__asm        mov    eax, [ebp-0x43C];
	__asm        mov    timerFade.lFrequency, eax;
	__asm        jmp    near ptr 0x00496ED7;
	__asm        jmp    near ptr 0x00496EDC;
// LINE 290:
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E0];
	__asm        mov    nOriginalPriority, eax;
// LINE 291:
	__asm        push   2;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 293:
	__asm        cmp    dword ptr ds:[0x597268], 0;
	__asm        jne    near ptr 0x00496F12;
// LINE 294:
	__asm        jmp    near ptr 0x00496F0D;
	__asm        jmp    near ptr 0x004972E0;
// LINE 295:
	__asm        mov    i, 0xA;
	__asm        jmp    near ptr 0x00496F21;
	__asm        inc    i;
	__asm        cmp    i, 0xF6;
	__asm        jge    near ptr 0x00496F8B;
// LINE 296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x418], al;
// LINE 297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x417], al;
// LINE 298:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, i;
	__asm        mov    al, [eax+ecx*4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x416], al;
// LINE 299:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x415], 5;
// LINE 300:
	__asm        jmp    near ptr 0x00496F1E;
// LINE 302:
	__asm        mov    nMultiplier, 0x3F;
// LINE 303:
	__asm        mov    nDivisor, 0x40;
// LINE 304:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00496FA8;
	__asm        inc    i;
	__asm        cmp    i, 0x40;
	__asm        jge    near ptr 0x004972C5;
// LINE 305:
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        jmp    near ptr 0x00496FCB;
	__asm        jmp    near ptr 0x00496FD0;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00496FE2;
	__asm        jmp    near ptr 0x00497060;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00497005;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x0049705B;
	__asm        jmp    near ptr 0x0049705B;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00497041;
	__asm        lea    eax, [ebp-0x438];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x438];
	__asm        mov    [ebp-0x430], eax;
	__asm        mov    eax, [ebp-0x430];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x0049705B;
	__asm        jmp    near ptr 0x0049705B;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x0049705B;
	__asm        jmp    near ptr 0x00497060;
	__asm        jmp    near ptr 0x00497065;
// LINE 306:
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x00497085;
// LINE 307:
	__asm        sar    nDivisor, 1;
// LINE 308:
	__asm        mov    eax, nDivisor;
	__asm        dec    eax;
	__asm        mov    nMultiplier, eax;
// LINE 310:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x00497094;
	__asm        inc    j;
	__asm        cmp    j, 0xF6;
	__asm        jge    near ptr 0x00497159;
// LINE 311:
	__asm        mov    eax, colorToFadeTo;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+2];
	__asm        mov    eax, j;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ebp+eax*4-0x418];
	__asm        sub    ecx, edx;
	__asm        mov    nDifference, ecx;
// LINE 312:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x418];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        add    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x418], cl;
// LINE 314:
	__asm        mov    eax, colorToFadeTo;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, j;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ebp+eax*4-0x417];
	__asm        sub    ecx, edx;
	__asm        mov    nDifference, ecx;
// LINE 315:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x417];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        add    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x417], cl;
// LINE 317:
	__asm        mov    eax, colorToFadeTo;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, j;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ebp+eax*4-0x416];
	__asm        sub    ecx, edx;
	__asm        mov    nDifference, ecx;
// LINE 318:
	__asm        mov    eax, j;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [ebp+eax*4-0x416];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        add    ecx, eax;
	__asm        mov    eax, j;
	__asm        mov    [ebp+eax*4-0x416], cl;
// LINE 319:
	__asm        jmp    near ptr 0x00497091;
// LINE 321:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 322:
	__asm        lea    eax, palEntries[10].peRed;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 326:
	__asm        mov    eax, timerFade.lTotalElapsedTime;
	__asm        mov    [ebp-0x44C], eax;
	__asm        jmp    near ptr 0x0049719E;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00497242;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x004971CE;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x45C], eax;
	__asm        jmp    near ptr 0x00497224;
	__asm        jmp    near ptr 0x00497224;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x0049720A;
	__asm        lea    eax, [ebp-0x458];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x458];
	__asm        mov    [ebp-0x450], eax;
	__asm        mov    eax, [ebp-0x450];
	__asm        mov    [ebp-0x45C], eax;
	__asm        jmp    near ptr 0x00497224;
	__asm        jmp    near ptr 0x00497224;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x45C], eax;
	__asm        jmp    near ptr 0x00497224;
	__asm        mov    eax, [ebp-0x45C];
	__asm        sub    eax, timerFade.lStartTime;
	__asm        mov    [ebp-0x448], eax;
	__asm        mov    eax, [ebp-0x448];
	__asm        add    [ebp-0x44C], eax;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x00497292;
	__asm        cmp    timerFade.lFrequency, 0;
	__asm        je     near ptr 0x00497292;
	__asm        mov    eax, timerFade.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x44C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x44C], eax;
	__asm        mov    eax, [ebp-0x44C];
	__asm        cmp    lDelayTime, eax;
	__asm        jbe    near ptr 0x004972C0;
	__asm        jmp    near ptr 0x004972BB;
	__asm        mov    eax, [ebp-0x44C];
	__asm        cmp    lDelayTime, eax;
	__asm        jbe    near ptr 0x004972C0;
	__asm        jmp    near ptr 0x004972BB;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x460], eax;
	__asm        jae    near ptr 0x004972C0;
	__asm        jmp    near ptr 0x0049718D;
// LINE 327:
	__asm        jmp    near ptr 0x00496FA5;
// LINE 329:
	__asm        mov    eax, nOriginalPriority;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 353:
	__asm        jmp    near ptr 0x004972DB;
	__asm        jmp    near ptr 0x004972E0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004972e7
void SparkalPalette::FadeToPalette(struct SparkalColor colorStart, long lFadeTime, long lSteps) {
// LINE 360:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 361:
	__asm        mov    eax, lSteps;
	__asm        push   eax;
	__asm        mov    eax, lFadeTime;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(colorStart.Blue);
	__asm        push   eax;
	__asm        call   0x0049731A;
	__asm        add    esp, 0x10;
// LINE 362:
	__asm        jmp    near ptr 0x00497313;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0049731a
void SparkalPalette::FadeToPalette(struct SparkalColor colorStart, struct SparkalColor* paletteDestination, long lFadeTime, long lSteps) {
	const unsigned long lDelayTime;
	class MTimer timerFade;
	int32_t nDifference;
	struct SparkalPalette::FadeToPalette::TempPalette* paletteArray;
	int32_t j;
	int32_t i;
	 typedef struct SparkalPalette::FadeToPalette::TempPalette SparkalPalette::FadeToPalette::TempPalette;
	const int32_t nLastStepIndex;
	int32_t nOriginalPriority;
	int32_t nMultiplier;
	int32_t nDivisor;

// LINE 377:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 379:
	__asm        mov    eax, lFadeTime;
	__asm        cdq;
	__asm        idiv   lSteps;
	__asm        mov    lDelayTime, eax;
// LINE 381:
	__asm        mov    timerFade.nTimerResolution, 1;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lFrequency, 0;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x0049736E;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    timerFade.lFrequency, eax;
	__asm        jmp    near ptr 0x0049736E;
	__asm        jmp    near ptr 0x00497373;
// LINE 384:
	__asm        cmp    lSteps, 0xC8;
	__asm        jle    near ptr 0x00497387;
// LINE 385:
	__asm        mov    lSteps, 0xC8;
// LINE 391:
	__asm        mov    eax, lSteps;
	__asm        shl    eax, 0xA;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    paletteArray, eax;
// LINE 392:
	__asm        mov    eax, lSteps;
	__asm        dec    eax;
	__asm        mov    nLastStepIndex, eax;
// LINE 396:
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E0];
	__asm        mov    nOriginalPriority, eax;
// LINE 397:
	__asm        push   2;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 399:
	__asm        cmp    dword ptr ds:[0x597268], 0;
	__asm        jne    near ptr 0x004973D6;
// LINE 400:
	__asm        jmp    near ptr 0x004973D1;
	__asm        jmp    near ptr 0x0049783F;
// LINE 401:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004973E5;
	__asm        inc    i;
	__asm        mov    eax, lSteps;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0049742B;
// LINE 402:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x00497400;
	__asm        inc    j;
	__asm        cmp    j, 0xF5;
	__asm        jge    near ptr 0x00497426;
// LINE 403:
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 0xA;
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, paletteArray;
	__asm        mov    byte ptr [eax+ecx+3], 5;
	__asm        jmp    near ptr 0x004973FD;
// LINE 404:
	__asm        jmp    near ptr 0x004973E2;
// LINE 406:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x0049743A;
	__asm        inc    j;
	__asm        cmp    j, 0xF6;
	__asm        jge    near ptr 0x004974C7;
// LINE 407:
	__asm        mov    al, colorStart.Red;
	__asm        mov    ecx, j;
	__asm        mov    edx, paletteArray;
	__asm        mov    [edx+ecx*4], al;
// LINE 408:
	__asm        mov    al, colorStart.Green;
	__asm        mov    ecx, j;
	__asm        mov    edx, paletteArray;
	__asm        mov    [edx+ecx*4+1], al;
// LINE 409:
	__asm        mov    al, colorStart.Blue;
	__asm        mov    ecx, j;
	__asm        mov    edx, paletteArray;
	__asm        mov    [edx+ecx*4+2], al;
// LINE 410:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, j;
	__asm        mov    edx, nLastStepIndex;
	__asm        shl    edx, 0xA;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, paletteArray;
	__asm        mov    [ecx+edx], al;
// LINE 411:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, j;
	__asm        mov    edx, nLastStepIndex;
	__asm        shl    edx, 0xA;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, paletteArray;
	__asm        mov    [ecx+edx+1], al;
// LINE 412:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, j;
	__asm        mov    edx, nLastStepIndex;
	__asm        shl    edx, 0xA;
	__asm        lea    ecx, [edx+ecx*4];
	__asm        mov    edx, paletteArray;
	__asm        mov    [ecx+edx+2], al;
// LINE 413:
	__asm        jmp    near ptr 0x00497437;
// LINE 417:
	__asm        mov    nMultiplier, 0x3F;
// LINE 418:
	__asm        mov    nDivisor, 0x40;
// LINE 419:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x004974E4;
	__asm        inc    i;
	__asm        mov    eax, nLastStepIndex;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x004977D2;
// LINE 420:
	__asm        mov    timerFade.lTotalElapsedTime, 0;
	__asm        mov    timerFade.lStartTime, 0;
	__asm        jmp    near ptr 0x00497503;
	__asm        jmp    near ptr 0x00497508;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00497517;
	__asm        jmp    near ptr 0x0049757A;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00497534;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00497575;
	__asm        jmp    near ptr 0x00497575;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x0049755E;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00497575;
	__asm        jmp    near ptr 0x00497575;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    timerFade.lStartTime, eax;
	__asm        jmp    near ptr 0x00497575;
	__asm        jmp    near ptr 0x0049757A;
	__asm        jmp    near ptr 0x0049757F;
// LINE 421:
	__asm        mov    ecx, lSteps;
	__asm        sar    ecx, 2;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        test   edx, edx;
	__asm        jne    near ptr 0x0049759E;
// LINE 422:
	__asm        sar    nDivisor, 1;
// LINE 423:
	__asm        mov    eax, nDivisor;
	__asm        dec    eax;
	__asm        mov    nMultiplier, eax;
// LINE 425:
	__asm        mov    j, 0xA;
	__asm        jmp    near ptr 0x004975AD;
	__asm        inc    j;
	__asm        cmp    j, 0xF6;
	__asm        jge    near ptr 0x004976B4;
// LINE 426:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*4+2];
	__asm        mov    eax, i;
	__asm        dec    eax;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, j;
	__asm        lea    eax, [eax+ecx*4];
	__asm        mov    ecx, paletteArray;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+ecx];
	__asm        sub    edx, ebx;
	__asm        mov    nDifference, edx;
// LINE 427:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+eax*4+2];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ebx, eax;
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 0xA;
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, paletteArray;
	__asm        mov    [eax+ecx], bl;
// LINE 429:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*4+1];
	__asm        mov    eax, i;
	__asm        dec    eax;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, j;
	__asm        lea    eax, [eax+ecx*4];
	__asm        mov    ecx, paletteArray;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+ecx+1];
	__asm        sub    edx, ebx;
	__asm        mov    nDifference, edx;
// LINE 430:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+eax*4+1];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ebx, eax;
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 0xA;
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, paletteArray;
	__asm        mov    [eax+ecx+1], bl;
// LINE 432:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax*4];
	__asm        mov    eax, i;
	__asm        dec    eax;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, j;
	__asm        lea    eax, [eax+ecx*4];
	__asm        mov    ecx, paletteArray;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+ecx+2];
	__asm        sub    edx, ebx;
	__asm        mov    nDifference, edx;
// LINE 433:
	__asm        mov    eax, j;
	__asm        mov    ecx, paletteDestination;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+eax*4];
	__asm        mov    eax, nMultiplier;
	__asm        imul   eax, nDifference;
	__asm        cdq;
	__asm        idiv   nDivisor;
	__asm        sub    ebx, eax;
	__asm        mov    eax, j;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 0xA;
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, paletteArray;
	__asm        mov    [eax+ecx+2], bl;
// LINE 434:
	__asm        jmp    near ptr 0x004975AA;
// LINE 436:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 437:
	__asm        mov    eax, i;
	__asm        shl    eax, 0xA;
	__asm        add    eax, paletteArray;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 441:
	__asm        mov    eax, timerFade.lTotalElapsedTime;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004976F9;
	__asm        cmp    timerFade.lStartTime, 0;
	__asm        je     near ptr 0x00497770;
	__asm        cmp    timerFade.nTimerResolution, 1;
	__asm        jne    near ptr 0x00497720;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00497761;
	__asm        jmp    near ptr 0x00497761;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x0049774A;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00497761;
	__asm        jmp    near ptr 0x00497761;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00497761;
	__asm        mov    eax, [ebp-0x6C];
	__asm        sub    eax, timerFade.lStartTime;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        add    [ebp-0x5C], eax;
	__asm        cmp    timerFade.nTimerResolution, 0;
	__asm        jne    near ptr 0x004977AB;
	__asm        cmp    timerFade.lFrequency, 0;
	__asm        je     near ptr 0x004977AB;
	__asm        mov    eax, timerFade.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jae    near ptr 0x004977CD;
	__asm        jmp    near ptr 0x004977C8;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jae    near ptr 0x004977CD;
	__asm        jmp    near ptr 0x004977C8;
	__asm        mov    eax, lDelayTime;
	__asm        cmp    [ebp-0x70], eax;
	__asm        jae    near ptr 0x004977CD;
	__asm        jmp    near ptr 0x004976EE;
// LINE 442:
	__asm        jmp    near ptr 0x004974E1;
// LINE 444:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 445:
	__asm        mov    eax, nLastStepIndex;
	__asm        shl    eax, 0xA;
	__asm        add    eax, paletteArray;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 450:
	__asm        mov    eax, nOriginalPriority;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F4];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35F8];
// LINE 452:
	__asm        mov    eax, paletteArray;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 456:
	__asm        jmp    near ptr 0x0049783A;
	__asm        jmp    near ptr 0x0049783F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00497844
void SparkalPalette::SetSystemPaletteEntriesToRGB(struct SparkalColor& colorToSet) {
	struct tagPALETTEENTRY palEntries[256];
	int32_t i;

// LINE 462:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x404;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 467:
	__asm        mov    i, 0xA;
	__asm        jmp    near ptr 0x0049785F;
	__asm        inc    i;
	__asm        cmp    i, 0xF6;
	__asm        jge    near ptr 0x004978AB;
// LINE 468:
	__asm        mov    eax, colorToSet;
	__asm        mov    al, [eax+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x404], al;
// LINE 469:
	__asm        mov    eax, colorToSet;
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x403], al;
// LINE 470:
	__asm        mov    eax, colorToSet;
	__asm        mov    al, [eax];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x402], al;
// LINE 471:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x401], 5;
// LINE 472:
	__asm        jmp    near ptr 0x0049785C;
// LINE 475:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x58];
// LINE 476:
	__asm        lea    eax, palEntries[10].peRed;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
// LINE 483:
	__asm        jmp    near ptr 0x004978E4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004978e9
void SparkalPalette::ImplementNewPalette(struct SparkalColor* pNewColors) {
	long hResult;
	struct tagPALETTEENTRY palEntries[256];
	int32_t i;

// LINE 493:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x410;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 503:
	__asm        mov    i, 0xA;
	__asm        jmp    near ptr 0x0049790A;
	__asm        inc    i;
	__asm        cmp    i, 0xF6;
	__asm        jge    near ptr 0x00497962;
// LINE 504:
	__asm        mov    eax, i;
	__asm        mov    ecx, pNewColors;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x404], al;
// LINE 505:
	__asm        mov    eax, i;
	__asm        mov    ecx, pNewColors;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x403], al;
// LINE 506:
	__asm        mov    eax, i;
	__asm        mov    ecx, pNewColors;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*4-0x402], al;
// LINE 507:
	__asm        mov    eax, i;
	__asm        mov    byte ptr [ebp+eax*4-0x401], 5;
// LINE 508:
	__asm        jmp    near ptr 0x00497907;
// LINE 510:
	__asm        cmp    dword ptr ds:[0x597268], 0;
	__asm        je     near ptr 0x004979C3;
// LINE 511:
	__asm        lea    eax, palEntries[10].peRed;
	__asm        push   eax;
	__asm        push   0xEC;
	__asm        push   0xA;
	__asm        push   0;
	__asm        mov    eax, ds:[0x597268];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597268];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    hResult, eax;
// LINE 512:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x004979C3;
// LINE 513:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-0x40C], eax;
	__asm        jmp    near ptr 0x004979B3;
	__asm        push   0x59A1C8;
	__asm        lea    ecx, [ebp-0x40C];
	__asm        call   0x0042D420;
// LINE 519:
	__asm        jmp    near ptr 0x004979C8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004979cf
void CopterSparkalPalette::CopterSparkalPalette() {
// LINE 534:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004963EF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591118;
// LINE 535:
	__asm        jmp    near ptr 0x004979F1;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004979f9
void CopterSparkalPalette::CopterSparkalPalette(struct SparkalColor* pNewColors, int32_t bNewOwnColors) {
// LINE 543:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0x100;
	__asm        mov    eax, bNewOwnColors;
	__asm        push   eax;
	__asm        mov    eax, pNewColors;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004963B0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591118;
// LINE 544:
	__asm        jmp    near ptr 0x00497A28;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00497a32
void ClearWindowsSystemPalette() {
	void * __ptr32 ScreenDC;
	void * __ptr32 OldPalette;
	void * __ptr32 BlackPalette;
	struct ClearWindowsSystemPalette::__unnamed Palette;
	int32_t Counter;

// LINE 560:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x414;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 570:
	__asm        mov    Palette.Version, 0x300;
	__asm        mov    Palette.NumberOfEntries, 0x100;
	__asm        lea    edi, Palette.aEntries[0].peRed;
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x100;
	__asm        rep stosd;
// LINE 573:
	__asm        mov    Counter, 0;
	__asm        jmp    near ptr 0x00497A6E;
	__asm        inc    Counter;
	__asm        cmp    Counter, 0x100;
	__asm        jge    near ptr 0x00497AAC;
// LINE 574:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x404], 0;
// LINE 575:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x403], 0;
// LINE 576:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x402], 0;
// LINE 577:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x401], 5;
// LINE 578:
	__asm        jmp    near ptr 0x00497A6B;
// LINE 582:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    ScreenDC, eax;
// LINE 583:
	__asm        cmp    ScreenDC, 0;
	__asm        je     near ptr 0x00497B42;
// LINE 584:
	__asm        lea    eax, Palette.Version;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C357C];
	__asm        mov    BlackPalette, eax;
// LINE 585:
	__asm        cmp    BlackPalette, 0;
	__asm        je     near ptr 0x00497B33;
// LINE 586:
	__asm        push   0;
	__asm        mov    eax, BlackPalette;
	__asm        push   eax;
	__asm        mov    eax, ScreenDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
	__asm        mov    OldPalette, eax;
// LINE 587:
	__asm        mov    eax, ScreenDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3578];
// LINE 588:
	__asm        push   0;
	__asm        mov    eax, OldPalette;
	__asm        push   eax;
	__asm        mov    eax, ScreenDC;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 589:
	__asm        mov    eax, BlackPalette;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 591:
	__asm        mov    eax, ScreenDC;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 594:
	__asm        jmp    near ptr 0x00497B47;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00096b50-00096b78 Module: 18, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00096b80-00096bb8 Module: 18, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00497b80
// SparkalPalette::`scalar deleting destructor'



// Contribution: 1:00096bc0-00096bfd Module: 18, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00497bc0
// CopterSparkalPalette::`scalar deleting destructor'



// Contribution: 2:000020f8-00002113 Module: 18, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005910f8
// ??_7SparkalPalette@@6B@


// Contribution: 2:00002118-00002133 Module: 18, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591118
// ??_7CopterSparkalPalette@@6B@


// Contribution: 3:000031c8-00003207 Module: 18, 4 byte alignment, initialized_data, read, write, 
