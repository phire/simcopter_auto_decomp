// Module: gameapp4.obj
// Source: C:\Copter\source\sparkal\gameapp4.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000baa30-000bb457 Module: 3, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004bba30
unsigned long  CGameApp::FinishGame() {
// LINE 48:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 50:
	__asm        mov    ecx, this;
	__asm        call   0x004330EA;
// LINE 51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 53:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x30], 0;
	__asm        jne    near ptr 0x004BBAAD;
// LINE 54:
// Block start:
	long hResult;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x54];
// LINE 57:
	__asm        jmp    near ptr 0x004BBA6C;
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x597264];
	__asm        mov    eax, [eax];
	__asm        call   dword ptr [eax+0x50];
	__asm        mov    hResult, eax;
// LINE 58:
	__asm        cmp    hResult, 0;
	__asm        je     near ptr 0x004BBAAD;
// LINE 59:
	__asm        mov    eax, hResult;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004BBAA0;
	__asm        push   0x59AC54;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0042D420;
// LINE 63:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x50];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004BBAD7;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x004BBAD7;
// LINE 64:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 66:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 70:
	__asm        call   0x0041F5A5;
// LINE 73:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004BBB12;
// LINE 74:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bbb17
int  CGameApp::BackgroundVRAppInit() {
	class MRect rectText;
	char[260] szVideoPath;
	struct VRAppInitThreadStruct tempVRAppInitThreadStruct;
	class Random tempRandom;
	int32_t nXPosition;
	int32_t nHeight;
	unsigned long lCurrentInitializationFlag;
	unsigned long lCurrentInitializationIndex;
	void * __ptr32 hAppInitThread;
	class MRect rectLine;
	int32_t nWidth;
	int32_t nYPosition;
	class basic_string<char> sCurrentInitializer;
	unsigned long lFullStringIndex;
	class SmackerBackBuffer tempHourglassVideoBuffer;

// LINE 92:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x1534;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        call   0x0056F980;
	__asm        mov    [ebp-0x4CC], eax;
// LINE 97:
	__asm        mov    eax, [ebp-0x4CC];
	__asm        push   eax;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   0x00490FF1;
	__asm        jmp    near ptr 0x004BBB4F;
// LINE 98:
	__asm        jmp    near ptr 0x004BBB54;
	__asm        jmp    near ptr 0x004BBB59;
// LINE 99:
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00498EE8;
// LINE 102:
	__asm        mov    lCurrentInitializationFlag, 1;
// LINE 103:
	__asm        mov    lCurrentInitializationIndex, 1;
// LINE 105:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4D0], eax;
	__asm        cmp    dword ptr [ebp-0x4D0], 0;
	__asm        je     near ptr 0x004BBBE3;
	__asm        mov    eax, [ebp-0x4D0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x4D0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4D0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x4D0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x4D0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004BBBD2;
	__asm        mov    eax, [ebp-0x4D0];
	__asm        mov    sCurrentInitializer.reference, eax;
	__asm        jmp    near ptr 0x004BBBED;
	__asm        mov    sCurrentInitializer.reference, 0;
	__asm        mov    sCurrentInitializer.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004BBBFC;
// LINE 107:
	__asm        jmp    near ptr 0x004BBC01;
	__asm        jmp    near ptr 0x004BBC06;
	__asm        jmp    near ptr 0x004BBC0B;
	__asm        jmp    near ptr 0x004BBC10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 0x14;
	__asm        mov    [ebp-0x504], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        add    eax, 0x64;
	__asm        mov    [ebp-0x508], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        sub    eax, 0x28;
	__asm        mov    [ebp-0x50C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    eax, 0x64;
	__asm        mov    [ebp-0x510], eax;
	__asm        jmp    near ptr 0x004BBC75;
	__asm        mov    eax, [ebp-0x510];
	__asm        mov    rectText.left, eax;
	__asm        mov    eax, [ebp-0x50C];
	__asm        mov    rectText.top, eax;
	__asm        mov    eax, [ebp-0x508];
	__asm        mov    rectText.right, eax;
	__asm        mov    eax, [ebp-0x504];
	__asm        mov    rectText.bottom, eax;
	__asm        jmp    near ptr 0x004BBCAA;
// LINE 110:
	__asm        lea    eax, szVideoPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59AC44];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00492E50;
// LINE 111:
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00499074;
// LINE 112:
	__asm        mov    tempHourglassVideoBuffer.bLoopVideo, 1;
// LINE 113:
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFE000;
	__asm        lea    eax, szVideoPath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00499149;
// LINE 114:
	__asm        jmp    near ptr 0x004BBCF8;
	__asm        mov    eax, tempHourglassVideoBuffer.mWidth;
	__asm        mov    nWidth, eax;
// LINE 115:
	__asm        jmp    near ptr 0x004BBD09;
	__asm        mov    eax, tempHourglassVideoBuffer.mHeight;
	__asm        mov    nHeight, eax;
// LINE 116:
	__asm        jmp    near ptr 0x004BBD1A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, eax;
	__asm        mov    eax, nWidth;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nXPosition, ecx;
// LINE 117:
	__asm        jmp    near ptr 0x004BBD47;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, eax;
	__asm        mov    eax, nHeight;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    nYPosition, ecx;
// LINE 119:
	__asm        mov    tempVRAppInitThreadStruct.nReturnValue, 0;
// LINE 120:
	__asm        mov    tempVRAppInitThreadStruct.nCurrentPercentageComplete, 0;
// LINE 122:
	__asm        lea    eax, tempVRAppInitThreadStruct.nReturnValue;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x4BC3DB;
	__asm        call   0x00570FB0;
	__asm        add    esp, 0xC;
	__asm        mov    hAppInitThread, eax;
// LINE 127:
	__asm        mov    byte ptr [ebp-0x4B8], 0;
	__asm        mov    byte ptr [ebp-0x4B7], 0;
	__asm        mov    byte ptr [ebp-0x4B6], 0;
	__asm        jmp    near ptr 0x004BBDB9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        mov    [ebp-0x4C8], eax;
	__asm        mov    eax, [ebp-0x4B8];
	__asm        mov    ecx, [ebp-0x4C8];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004BBDDC;
// LINE 128:
	__asm        cmp    tempVRAppInitThreadStruct.nReturnValue, 0;
	__asm        jne    near ptr 0x004BC19C;
// LINE 129:
	__asm        mov    eax, nHeight;
	__asm        push   eax;
	__asm        mov    eax, nWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, nYPosition;
	__asm        push   eax;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00499396;
// LINE 130:
	__asm        mov    eax, ds:[0x5B4790];
	__asm        test   lCurrentInitializationFlag, eax;
	__asm        je     near ptr 0x004BC178;
	__asm        cmp    lCurrentInitializationFlag, 0x8000;
	__asm        jae    near ptr 0x004BC178;
// LINE 131:
	__asm        inc    lCurrentInitializationIndex;
// LINE 132:
	__asm        shl    lCurrentInitializationFlag, 1;
// LINE 133:
	__asm        push   0;
	__asm        mov    eax, lCurrentInitializationIndex;
	__asm        add    eax, 0x289;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    lFullStringIndex, eax;
// LINE 134:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        mov    eax, lFullStringIndex;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1514], eax;
	__asm        cmp    dword ptr [ebp-0x1514], 0;
	__asm        jne    near ptr 0x004BBF21;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, lFullStringIndex;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1514], eax;
	__asm        jmp    near ptr 0x004BBECD;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        lea    ecx, sCurrentInitializer.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004BBEF4;
	__asm        jmp    near ptr 0x004BBEF9;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sCurrentInitializer.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004BBF1C;
	__asm        jmp    near ptr 0x004BC0E4;
	__asm        jmp    near ptr 0x004BBF26;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1530], eax;
	__asm        cmp    dword ptr [ebp-0x1530], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004BBF80;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1524], eax;
	__asm        mov    eax, [ebp-0x1524];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BBF71;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BBF80;
	__asm        jmp    near ptr 0x004BBF85;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004BBFBC;
	__asm        cmp    dword ptr [ebp-0x1530], 0;
	__asm        je     near ptr 0x004BC084;
	__asm        jmp    near ptr 0x004BBFA7;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    ecx, [ebp-0x1530];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004BC084;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x151C], eax;
	__asm        cmp    dword ptr [ebp-0x151C], 0;
	__asm        je     near ptr 0x004BBFFD;
	__asm        mov    eax, [ebp-0x1530];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x151C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1518], eax;
	__asm        jmp    near ptr 0x004BC007;
	__asm        mov    dword ptr [ebp-0x1518], 0;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004BC06E;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    [ebp-0x152C], eax;
	__asm        mov    eax, [ebp-0x152C];
	__asm        mov    [ebp-0x1528], eax;
	__asm        cmp    dword ptr [ebp-0x1528], 0;
	__asm        je     near ptr 0x004BC06E;
	__asm        mov    ecx, [ebp-0x1528];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004BC055;
	__asm        mov    eax, [ebp-0x1528];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BC069;
	__asm        jmp    near ptr 0x004BC06E;
	__asm        jmp    near ptr 0x004BC073;
	__asm        mov    eax, [ebp-0x1518];
	__asm        mov    sCurrentInitializer.reference, eax;
	__asm        jmp    near ptr 0x004BC0C6;
	__asm        cmp    dword ptr [ebp-0x1530], 0;
	__asm        je     near ptr 0x004BC0C6;
	__asm        jmp    near ptr 0x004BC096;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1520], eax;
	__asm        mov    eax, [ebp-0x1530];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1510];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1520];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004BC0C6;
	__asm        mov    eax, [ebp-0x1530];
	__asm        mov    ecx, sCurrentInitializer.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004BC0DA;
	__asm        jmp    near ptr 0x004BC0DF;
	__asm        jmp    near ptr 0x004BC0E4;
// LINE 135:
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        push   0x2E;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x18];
// LINE 137:
	__asm        jmp    near ptr 0x004BC109;
	__asm        jmp    near ptr 0x004BC10E;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004BC136;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C4], eax;
	__asm        jmp    near ptr 0x004BC145;
	__asm        jmp    near ptr 0x004BC145;
	__asm        mov    dword ptr [ebp-0x4C4], 0;
	__asm        jmp    near ptr 0x004BC145;
	__asm        push   0;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x34];
	__asm        call   dword ptr [edx+0x48];
// LINE 139:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x50];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x50];
	__asm        call   dword ptr [edx+8];
// LINE 140:
	__asm        push   0x1E;
	__asm        call   dword ptr ds:[0x6C35D8];
// LINE 141:
	__asm        jmp    near ptr 0x004BBDDC;
// LINE 142:
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00497F91;
// LINE 144:
	__asm        cmp    tempVRAppInitThreadStruct.nReturnValue, 0;
	__asm        jge    near ptr 0x004BC2C5;
// LINE 145:
	__asm        mov    dword ptr [ebp-0x4BC], 0;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004BC271;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    [ebp-0x4E0], eax;
	__asm        mov    eax, [ebp-0x4E0];
	__asm        mov    [ebp-0x4DC], eax;
	__asm        cmp    dword ptr [ebp-0x4DC], 0;
	__asm        je     near ptr 0x004BC271;
	__asm        mov    eax, [ebp-0x4DC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004BC24E;
	__asm        mov    eax, [ebp-0x4DC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4E4], eax;
	__asm        mov    eax, [ebp-0x4E4];
	__asm        mov    [ebp-0x4E8], eax;
	__asm        mov    eax, [ebp-0x4E8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4DC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4DC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004BC253;
	__asm        jmp    near ptr 0x004BC258;
	__asm        mov    eax, [ebp-0x4DC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BC26C;
	__asm        jmp    near ptr 0x004BC271;
	__asm        jmp    near ptr 0x004BC276;
	__asm        cmp    sCurrentInitializer.c_str_ptr, 0;
	__asm        je     near ptr 0x004BC2AA;
	__asm        mov    eax, sCurrentInitializer.c_str_ptr;
	__asm        mov    [ebp-0x4D4], eax;
	__asm        mov    eax, [ebp-0x4D4];
	__asm        mov    [ebp-0x4D8], eax;
	__asm        mov    eax, [ebp-0x4D8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BC2AF;
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00498FE5;
	__asm        mov    eax, [ebp-0x4BC];
	__asm        jmp    near ptr 0x004BC3D6;
// LINE 146:
	__asm        mov    dword ptr [ebp-0x4C0], 1;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004BC382;
	__asm        mov    eax, sCurrentInitializer.reference;
	__asm        mov    [ebp-0x4F8], eax;
	__asm        mov    eax, [ebp-0x4F8];
	__asm        mov    [ebp-0x4F4], eax;
	__asm        cmp    dword ptr [ebp-0x4F4], 0;
	__asm        je     near ptr 0x004BC382;
	__asm        mov    eax, [ebp-0x4F4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004BC35F;
	__asm        mov    eax, [ebp-0x4F4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4FC], eax;
	__asm        mov    eax, [ebp-0x4FC];
	__asm        mov    [ebp-0x500], eax;
	__asm        mov    eax, [ebp-0x500];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x4F4];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x4F4];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004BC364;
	__asm        jmp    near ptr 0x004BC369;
	__asm        mov    eax, [ebp-0x4F4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BC37D;
	__asm        jmp    near ptr 0x004BC382;
	__asm        jmp    near ptr 0x004BC387;
	__asm        cmp    sCurrentInitializer.c_str_ptr, 0;
	__asm        je     near ptr 0x004BC3BB;
	__asm        mov    eax, sCurrentInitializer.c_str_ptr;
	__asm        mov    [ebp-0x4EC], eax;
	__asm        mov    eax, [ebp-0x4EC];
	__asm        mov    [ebp-0x4F0], eax;
	__asm        mov    eax, [ebp-0x4F0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004BC3C0;
	__asm        lea    ecx, tempHourglassVideoBuffer.<vftable>;
	__asm        call   0x00498FE5;
	__asm        mov    eax, [ebp-0x4C0];
	__asm        jmp    near ptr 0x004BC3D6;
// LINE 150:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004bc3db
void AppInitThreadStartRoutine(void * __ptr32 pVRAppInitThreadStruct) {
	struct VRAppInitThreadStruct* tempVRAppInitThreadStruct;

// LINE 157:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x4BC440;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 4;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    [ebp-0x10], esp;
// LINE 160:
	__asm        mov    eax, pVRAppInitThreadStruct;
	__asm        mov    tempVRAppInitThreadStruct, eax;
// LINE 165:
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 167:
	__asm        call   0x004EAC40;
	__asm        mov    ecx, tempVRAppInitThreadStruct;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x004BC42A;
// LINE 171:
_L48858:
	__asm        mov    eax, tempVRAppInitThreadStruct;
	__asm        mov    dword ptr [eax], 0xFFFFFFFF;
// LINE 172:
	__asm        mov    eax, 0x4BC42A;
	__asm        ret;
// LINE 174:
_L44245:
_L44245:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, tempVRAppInitThreadStruct;
	__asm        mov    dword ptr [eax+4], 0x64;
// LINE 178:
	__asm        jmp    near ptr 0x004BC44A;
_L48859:
	__asm        mov    eax, 0x595CE0;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 2:00006ce0-00006d37 Module: 3, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00003c44-00003c95 Module: 3, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059ac44
// SZ_HOURGLASS_VIDEO_FILE_NAME
