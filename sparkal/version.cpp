// Module: version.obj
// Source: C:\Copter\source\sparkal\version.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class Version (forward reference);
class Version{
public:
	void Version();
	// vtable: 0
	intro void ~Version();
	int32_t GetApplicationName(char *&);
	long GetApplicationVersion(int32_t);
	int32_t GetApplicationVersion(char *&);
	int32_t GetApplicationCopyright(char *&);
	int32_t GetApplicationDebugVersion(char *&);
	// calltype: NearC
	static int32_t GetSystemType();
	// calltype: NearC
	static long GetSystemVersion(int32_t);
	// calltype: NearC
	static int32_t GetSystemVersion(char *);
	// calltype: NearC
	static long GetCPUVersion();
	// calltype: NearC
	static long GetCPUSpeed();
protected:
	unsigned char * lpTransBlock;
	void * __ptr32 lpFVData;
};

// Type: unsigned long;

// Type: void * __ptr32;

// Type: uint32_t;

// Type: char[260];

// Type: void;

// Type: char *;

// Type: char[255];

// Type: int32_t;

// Type: struct tagVS_FIXEDFILEINFO (forward reference);

// Type: long;

// Type: struct FREQ_INFO;
struct FREQ_INFO{
	unsigned long in_cycles;
	unsigned long ex_ticks;
	unsigned long raw_freq;
	unsigned long norm_freq;
};



// Contribution: 1:0003cae0-0003d110 Module: 55, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0043dae0
void Version::Version() {
	unsigned long dwVersionInfoHandle;
	void * __ptr32 hModule;
	unsigned long dwVersionInfoSize;
	uint32_t nValueSize;
	char szFileName[260];

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5B8;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 35:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C363C];
	__asm        mov    hModule, eax;
// LINE 36:
	__asm        push   0x103;
	__asm        lea    eax, szFileName[0];
	__asm        push   eax;
	__asm        mov    eax, hModule;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3640];
// LINE 37:
	__asm        lea    eax, dwVersionInfoHandle;
	__asm        push   eax;
	__asm        lea    eax, szFileName[0];
	__asm        push   eax;
	__asm        call   0x004C468A;
	__asm        mov    dwVersionInfoSize, eax;
// LINE 38:
	__asm        cmp    dwVersionInfoSize, 0;
	__asm        je     near ptr 0x0043DC00;
// LINE 39:
	__asm        mov    eax, dwVersionInfoSize;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, dwVersionInfoSize;
	__asm        push   eax;
	__asm        mov    eax, dwVersionInfoHandle;
	__asm        push   eax;
	__asm        lea    eax, szFileName[0];
	__asm        push   eax;
	__asm        call   0x004C4684;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0043DC00;
// LINE 42:
	__asm        lea    eax, nValueSize;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        push   0x598584;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0043DC00;
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x118], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 45:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 50:
	__asm        jmp    near ptr 0x0043DC05;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0043dc10
void Version::~Version() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F5B8;
// LINE 59:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0043DC4D;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 62:
	__asm        jmp    near ptr 0x0043DC52;
}

// FUNCTION: COPTER_D 0x0043dc57
int32_t Version::GetApplicationName(char *& szName) {
	char subBlockName[255];
	int32_t nReturnValue;
	uint32_t vSize;

// LINE 80:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0043DC80;
// LINE 81:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043DCE2;
// LINE 94:
	__asm        push   0x5985A0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        push   ecx;
	__asm        push   0x5985AC;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x14;
// LINE 95:
	__asm        lea    eax, vSize;
	__asm        push   eax;
	__asm        mov    eax, szName;
	__asm        push   eax;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        mov    nReturnValue, eax;
// LINE 96:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0043DCE2;
// LINE 98:
}

// FUNCTION: COPTER_D 0x0043dce9
int32_t Version::GetApplicationVersion(char *& szVersion) {
	char subBlockName[255];
	int32_t nReturnValue;
	uint32_t vSize;

// LINE 115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0043DD12;
// LINE 116:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043DD74;
// LINE 117:
	__asm        push   0x5985CC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        push   ecx;
	__asm        push   0x5985D8;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x14;
// LINE 118:
	__asm        lea    eax, vSize;
	__asm        push   eax;
	__asm        mov    eax, szVersion;
	__asm        push   eax;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        mov    nReturnValue, eax;
// LINE 119:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0043DD74;
// LINE 121:
}

// FUNCTION: COPTER_D 0x0043dd7b
int32_t Version::GetApplicationCopyright(char *& szCopyright) {
	char subBlockName[255];
	int32_t nReturnValue;
	uint32_t vSize;

// LINE 139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0043DDA4;
// LINE 140:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043DE06;
// LINE 141:
	__asm        push   0x5985F8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        push   ecx;
	__asm        push   0x598608;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x14;
// LINE 142:
	__asm        lea    eax, vSize;
	__asm        push   eax;
	__asm        mov    eax, szCopyright;
	__asm        push   eax;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        mov    nReturnValue, eax;
// LINE 143:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0043DE06;
// LINE 145:
}

// FUNCTION: COPTER_D 0x0043de0d
int32_t Version::GetApplicationDebugVersion(char *& szVersion) {
	char subBlockName[255];
	int32_t nReturnValue;
	uint32_t vSize;

// LINE 162:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0043DE36;
// LINE 163:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043DE98;
// LINE 164:
	__asm        push   0x598628;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+2];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax];
	__asm        push   ecx;
	__asm        push   0x598638;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x14;
// LINE 165:
	__asm        lea    eax, vSize;
	__asm        push   eax;
	__asm        mov    eax, szVersion;
	__asm        push   eax;
	__asm        lea    eax, subBlockName[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        mov    nReturnValue, eax;
// LINE 166:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x0043DE98;
// LINE 168:
}

// FUNCTION: COPTER_D 0x0043de9f
long Version::GetApplicationVersion(int32_t nVersionComponent) {
	int32_t nReturnValue;
	struct tagVS_FIXEDFILEINFO* vsFixedFileInfo;
	uint32_t vSize;

// LINE 193:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0043DEBF;
// LINE 194:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 195:
	__asm        lea    eax, vSize;
	__asm        push   eax;
	__asm        lea    eax, vsFixedFileInfo;
	__asm        push   eax;
	__asm        push   0x598658;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004C467E;
	__asm        mov    nReturnValue, eax;
// LINE 196:
	__asm        cmp    nReturnValue, 0;
	__asm        jne    near ptr 0x0043DEEF;
// LINE 197:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 198:
	__asm        cmp    nVersionComponent, 0;
	__asm        jne    near ptr 0x0043DF14;
// LINE 199:
	__asm        mov    eax, vsFixedFileInfo;
	__asm        mov    eax, [eax+8];
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 200:
	__asm        jmp    near ptr 0x0043DF72;
	__asm        cmp    nVersionComponent, 1;
	__asm        jne    near ptr 0x0043DF33;
// LINE 201:
	__asm        mov    eax, vsFixedFileInfo;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+8];
	__asm        mov    eax, ecx;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 202:
	__asm        jmp    near ptr 0x0043DF72;
	__asm        cmp    nVersionComponent, 2;
	__asm        jne    near ptr 0x0043DF58;
// LINE 203:
	__asm        mov    eax, vsFixedFileInfo;
	__asm        mov    eax, [eax+0xC];
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 204:
	__asm        jmp    near ptr 0x0043DF72;
	__asm        cmp    nVersionComponent, 3;
	__asm        jne    near ptr 0x0043DF72;
// LINE 205:
	__asm        mov    eax, vsFixedFileInfo;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0xC];
	__asm        mov    eax, ecx;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 206:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0043DF7C;
// LINE 208:
}

// FUNCTION: COPTER_D 0x0043df83
int32_t Version::GetSystemVersion(char * szSystemVersion) {
	unsigned long dwVersion;

// LINE 232:
	__asm        call   dword ptr ds:[0x6C3644];
	__asm        mov    dwVersion, eax;
// LINE 234:
	__asm        cmp    dwVersion, 0x80000000;
	__asm        jae    near ptr 0x0043DFC5;
// LINE 238:
	__asm        xor    eax, eax;
	__asm        mov    al, *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&dwVersion) + 1);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(dwVersion);
	__asm        push   eax;
	__asm        push   0x59865C;
	__asm        mov    eax, szSystemVersion;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x10;
// LINE 240:
	__asm        jmp    near ptr 0x0043DFE3;
// LINE 244:
	__asm        xor    eax, eax;
	__asm        mov    al, *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&dwVersion) + 1);
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(dwVersion);
	__asm        push   eax;
	__asm        push   0x598670;
	__asm        mov    eax, szSystemVersion;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3858];
	__asm        add    esp, 0x10;
// LINE 255:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0043DFED;
// LINE 256:
}

// FUNCTION: COPTER_D 0x0043dff2
int32_t Version::GetSystemType() {
	int32_t nSystemType;
	unsigned long dwVersion;

// LINE 268:
	__asm        mov    nSystemType, 0;
// LINE 271:
	__asm        call   dword ptr ds:[0x6C3644];
	__asm        mov    dwVersion, eax;
// LINE 273:
	__asm        cmp    dwVersion, 0x80000000;
	__asm        jae    near ptr 0x0043E024;
// LINE 274:
	__asm        mov    nSystemType, 4;
// LINE 275:
	__asm        jmp    near ptr 0x0043E02B;
// LINE 276:
	__asm        mov    nSystemType, 3;
// LINE 285:
	__asm        mov    eax, nSystemType;
	__asm        jmp    near ptr 0x0043E033;
// LINE 286:
}

// FUNCTION: COPTER_D 0x0043e038
long Version::GetSystemVersion(int32_t nVersionComponent) {
	unsigned long dwVersion;

// LINE 307:
	__asm        call   dword ptr ds:[0x6C3644];
	__asm        mov    dwVersion, eax;
// LINE 309:
	__asm        cmp    nVersionComponent, 0;
	__asm        jne    near ptr 0x0043E063;
// LINE 310:
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(dwVersion);
	__asm        jmp    near ptr 0x0043E081;
// LINE 311:
	__asm        jmp    near ptr 0x0043E077;
	__asm        cmp    nVersionComponent, 1;
	__asm        jne    near ptr 0x0043E077;
// LINE 312:
	__asm        xor    eax, eax;
	__asm        mov    al, *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&dwVersion) + 1);
	__asm        jmp    near ptr 0x0043E081;
// LINE 313:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0043E081;
// LINE 316:
}

// FUNCTION: COPTER_D 0x0043e086
long Version::GetCPUVersion() {
	long lReturnValue;

// LINE 339:
	__asm        call   wincpuid;
	__asm        movzx  eax, ax;
	__asm        mov    lReturnValue, eax;
// LINE 340:
	__asm        cmp    lReturnValue, 0xA;
	__asm        jle    near ptr 0x0043E0AB;
// LINE 341:
	__asm        mov    lReturnValue, 0xA;
// LINE 342:
	__asm        mov    eax, lReturnValue;
	__asm        jmp    near ptr 0x0043E0B3;
// LINE 344:
}

// FUNCTION: COPTER_D 0x0043e0b8
long Version::GetCPUSpeed() {
	struct FREQ_INFO tempFREQ_INFO;

// LINE 360:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   cpuspeed;
	__asm        add    esp, 8;
	__asm        lea    ecx, [ebp-0x20];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x20];
	__asm        lea    ecx, tempFREQ_INFO.in_cycles;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 361:
	__asm        mov    eax, tempFREQ_INFO.norm_freq;
	__asm        jmp    near ptr 0x0043E10C;
// LINE 363:
}



// Contribution: 1:0003d120-0003d158 Module: 55, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0043e120
// Version::`scalar deleting destructor'



// Contribution: 2:000005b8-000005bb Module: 55, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f5b8
// ??_7Version@@6B@


// Contribution: 3:00001584-0000167d Module: 55, 4 byte alignment, initialized_data, read, write, 
