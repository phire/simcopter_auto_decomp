// Module: gamewin.obj
// Source: C:\Copter\source\sparkal\gamewin.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00065f70-00067019 Module: 43, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00466f70
void GameWindow::GameWindow(unsigned long Width, unsigned long Height, unsigned long Style, const struct SparkalColor* pColors, char * Caption) {
	struct tagWNDCLASSA ClassInfo;

// LINE 36:
	asm( 
"	      00466f70    push ebp"
"	      00466f71    mov ebp,esp"
"	      00466f73    sub esp,2Ch"
"	      00466f76    push ebx"
"	      00466f77    push esi"
"	      00466f78    push edi"
"	      00466f79    mov this,ecx"
"	      00466f7c    mov ecx,this"
"	      00466f7f    call 00480690h"
"	      00466f84    jmp near ptr 00466F89h"
"	      00466f89    jmp near ptr 00466F8Eh"
"	      00466f8e    jmp near ptr 00466F93h"
"	      00466f93    jmp near ptr 00466F98h"
"	      00466f98    jmp near ptr 00466F9Dh"
"	      00466f9d    jmp near ptr 00466FA2h"
"	      00466fa2    mov eax,this"
"	      00466fa5    mov dword ptr [eax+98h],0"
"	      00466faf    mov eax,this"
"	      00466fb2    mov dword ptr [eax],590470h"
);
// LINE 40:
	asm( 
"	      00466fb8    mov eax,Width"
"	      00466fbb    mov ecx,this"
"	      00466fbe    mov [ecx+8],eax"
);
// LINE 41:
	asm( 
"	      00466fc1    mov eax,Height"
"	      00466fc4    mov ecx,this"
"	      00466fc7    mov [ecx+4],eax"
);
// LINE 42:
	asm( 
"	      00466fca    mov eax,Style"
"	      00466fcd    mov ecx,this"
"	      00466fd0    mov [ecx+0Ch],eax"
);
// LINE 44:
	asm( 
"	      00466fd3    cmp Caption,0"
"	      00466fd7    je near ptr 00467017h"
);
// LINE 45:
	asm( 
"	      00466fdd    mov eax,Caption"
"	      00466fe0    push eax"
"	      00466fe1    call 0056ABE0h"
"	      00466fe6    add esp,4"
"	      00466fe9    inc eax"
"	      00466fea    push eax"
"	      00466feb    call 0056A600h"
"	      00466ff0    add esp,4"
"	      00466ff3    mov ecx,this"
"	      00466ff6    mov [ecx+98h],eax"
);
// LINE 46:
	asm( 
"	      00466ffc    mov eax,Caption"
"	      00466fff    push eax"
"	      00467000    mov eax,this"
"	      00467003    mov eax,[eax+98h]"
"	      00467009    push eax"
"	      0046700a    call 0056CEB0h"
"	      0046700f    add esp,8"
);
// LINE 48:
	asm( 
"	      00467012    jmp near ptr 00467041h"
);
// LINE 49:
	asm( 
"	      00467017    push 4"
"	      00467019    call 0056A600h"
"	      0046701e    add esp,4"
"	      00467021    mov ecx,this"
"	      00467024    mov [ecx+98h],eax"
);
// LINE 50:
	asm( 
"	      0046702a    push 599314h"
"	      0046702f    mov eax,this"
"	      00467032    mov eax,[eax+98h]"
"	      00467038    push eax"
"	      00467039    call 0056CEB0h"
"	      0046703e    add esp,8"
);
// LINE 53:
	asm( 
"	      00467041    lea eax,ClassInfo.style"
"	      00467044    push eax"
"	      00467045    push 599AB8h"
"	      0046704a    mov eax,ds:[5C28C8h]"
"	      0046704f    push eax"
"	      00467050    call dword ptr ds:[6C3878h]"
"	      00467056    test eax,eax"
"	      00467058    jne near ptr 004670BCh"
);
// LINE 54:
	asm( 
"	      0046705e    mov ClassInfo.hCursor,0"
);
// LINE 55:
	asm( 
"	      00467065    mov ClassInfo.lpszMenuName,599318h"
);
// LINE 56:
	asm( 
"	      0046706c    mov ClassInfo.lpszClassName,599AB8h"
);
// LINE 57:
	asm( 
"	      00467073    push 4"
"	      00467075    call dword ptr ds:[6C3560h]"
"	      0046707b    mov ClassInfo.hbrBackground,eax"
);
// LINE 58:
	asm( 
"	      0046707e    mov eax,ds:[5C28C8h]"
"	      00467083    mov ClassInfo.hInstance,eax"
);
// LINE 59:
	asm( 
"	      00467086    mov ClassInfo.style,20h"
);
// LINE 60:
	asm( 
"	      0046708d    mov ClassInfo.lpfnWndProc,4815DDh"
);
// LINE 61:
	asm( 
"	      00467094    mov ClassInfo.cbWndExtra,4"
);
// LINE 62:
	asm( 
"	      0046709b    mov ClassInfo.cbClsExtra,0"
);
// LINE 63:
	asm( 
"	      004670a2    push 7F00h"
"	      004670a7    push 0"
"	      004670a9    call dword ptr ds:[6C381Ch]"
"	      004670af    mov ClassInfo.hIcon,eax"
);
// LINE 64:
	asm( 
"	      004670b2    lea eax,ClassInfo.style"
"	      004670b5    push eax"
"	      004670b6    call dword ptr ds:[6C3814h]"
);
// LINE 67:
	asm( 
"	      004670bc    mov ecx,this"
"	      004670bf    call 004670DFh"
);
// LINE 68:
	asm( 
"	      004670c4    mov eax,pColors"
"	      004670c7    push eax"
"	      004670c8    mov ecx,this"
"	      004670cb    call 004673EAh"
);
// LINE 70:
	asm( 
"	      004670d0    jmp near ptr 004670D5h"
"	      004670d5    mov eax,this"
"	      004670d8    pop edi"
"	      004670d9    pop esi"
"	      004670da    pop ebx"
"	      004670db    leave"
"	      004670dc    ret 14h"
);
}

// FUNCTION: COPTER_D 0x004670df
unsigned long GameWindow::CreateSparkalWindow() {
	unsigned long dwWindowStyle;
	struct tagRECT rectWindowForAdjust;

// LINE 78:
	asm( 
"	      004670df    push ebp"
"	      004670e0    mov ebp,esp"
"	      004670e2    sub esp,18h"
"	      004670e5    push ebx"
"	      004670e6    push esi"
"	      004670e7    push edi"
"	      004670e8    mov this,ecx"
);
// LINE 83:
	asm( 
"	      004670eb    mov eax,this"
"	      004670ee    cmp dword ptr [eax+18h],0"
"	      004670f2    je near ptr 00467102h"
);
// LINE 84:
	asm( 
"	      004670f8    mov eax,80000000h"
"	      004670fd    jmp near ptr 004672C6h"
);
// LINE 86:
	asm( 
"	      00467102    mov rectWindowForAdjust.top,0"
);
// LINE 87:
	asm( 
"	      00467109    mov rectWindowForAdjust.left,0"
);
// LINE 88:
	asm( 
"	      00467110    mov eax,this"
"	      00467113    mov eax,[eax+8]"
"	      00467116    mov rectWindowForAdjust.right,eax"
);
// LINE 89:
	asm( 
"	      00467119    mov eax,this"
"	      0046711c    mov eax,[eax+4]"
"	      0046711f    mov rectWindowForAdjust.bottom,eax"
);
// LINE 91:
	asm( 
"	      00467122    mov dwWindowStyle,0"
);
// LINE 92:
	asm( 
"	      00467129    mov eax,this"
"	      0046712c    test byte ptr [eax+0Ch],1"
"	      00467130    je near ptr 00467142h"
);
// LINE 93:
	asm( 
"	      00467136    or dwWindowStyle,40000h"
);
// LINE 94:
	asm( 
"	      0046713d    jmp near ptr 00467162h"
"	      00467142    mov eax,this"
"	      00467145    test byte ptr [eax+0Ch],4"
"	      00467149    je near ptr 0046715Bh"
);
// LINE 95:
	asm( 
"	      0046714f    or dwWindowStyle,800000h"
);
// LINE 96:
	asm( 
"	      00467156    jmp near ptr 00467162h"
);
// LINE 97:
	asm( 
"	      0046715b    or dwWindowStyle,80000000h"
);
// LINE 98:
	asm( 
"	      00467162    mov eax,this"
"	      00467165    test byte ptr [eax+0Ch],2"
"	      00467169    je near ptr 00467176h"
);
// LINE 99:
	asm( 
"	      0046716f    or dwWindowStyle,0C00000h"
);
// LINE 100:
	asm( 
"	      00467176    mov eax,this"
"	      00467179    test byte ptr [eax+0Ch],8"
"	      0046717d    je near ptr 0046718Ah"
);
// LINE 101:
	asm( 
"	      00467183    or dwWindowStyle,0C80000h"
);
// LINE 102:
	asm( 
"	      0046718a    mov eax,this"
"	      0046718d    test byte ptr [eax+0Ch],10h"
"	      00467191    je near ptr 0046719Eh"
);
// LINE 103:
	asm( 
"	      00467197    or dwWindowStyle,0B0000h"
);
// LINE 107:
	asm( 
"	      0046719e    push 40000h"
"	      004671a3    push 0"
"	      004671a5    mov eax,dwWindowStyle"
"	      004671a8    push eax"
"	      004671a9    lea eax,rectWindowForAdjust.left"
"	      004671ac    push eax"
"	      004671ad    call dword ptr ds:[6C387Ch]"
);
// LINE 111:
	asm( 
"	      004671b3    mov eax,rectWindowForAdjust.left"
"	      004671b6    mov ecx,this"
"	      004671b9    mov [ecx+78h],eax"
);
// LINE 112:
	asm( 
"	      004671bc    mov eax,rectWindowForAdjust.top"
"	      004671bf    mov ecx,this"
"	      004671c2    mov [ecx+7Ch],eax"
);
// LINE 113:
	asm( 
"	      004671c5    mov eax,rectWindowForAdjust.right"
"	      004671c8    mov ecx,this"
"	      004671cb    mov [ecx+80h],eax"
);
// LINE 114:
	asm( 
"	      004671d1    mov eax,rectWindowForAdjust.bottom"
"	      004671d4    mov ecx,this"
"	      004671d7    mov [ecx+84h],eax"
);
// LINE 115:
	asm( 
"	      004671dd    mov eax,this"
"	      004671e0    add eax,78h"
"	      004671e3    push eax"
"	      004671e4    mov eax,this"
"	      004671e7    mov eax,[eax]"
"	      004671e9    mov ecx,this"
"	      004671ec    call dword ptr [eax+48h]"
);
// LINE 116:
	asm( 
"	      004671ef    mov eax,this"
"	      004671f2    add eax,78h"
"	      004671f5    mov ecx,this"
"	      004671f8    add ecx,68h"
"	      004671fb    mov edx,[eax]"
"	      004671fd    mov [ecx],edx"
"	      004671ff    mov edx,[eax+4]"
"	      00467202    mov [ecx+4],edx"
"	      00467205    mov edx,[eax+8]"
"	      00467208    mov [ecx+8],edx"
"	      0046720b    mov eax,[eax+0Ch]"
"	      0046720e    mov [ecx+0Ch],eax"
);
// LINE 130:
	asm( 
"	      00467211    jmp near ptr 00467216h"
"	      00467216    jmp near ptr 0046721Bh"
"	      0046721b    push 0"
"	      0046721d    mov eax,ds:[5C28C8h]"
"	      00467222    push eax"
"	      00467223    push 0"
"	      00467225    push 0"
"	      00467227    mov eax,this"
"	      0046722a    mov eax,[eax+84h]"
"	      00467230    mov ecx,this"
"	      00467233    sub eax,[ecx+7Ch]"
"	      00467236    push eax"
"	      00467237    mov eax,this"
"	      0046723a    mov eax,[eax+80h]"
"	      00467240    mov ecx,this"
"	      00467243    sub eax,[ecx+78h]"
"	      00467246    push eax"
"	      00467247    mov eax,this"
"	      0046724a    mov eax,[eax+7Ch]"
"	      0046724d    push eax"
"	      0046724e    mov eax,this"
"	      00467251    mov eax,[eax+78h]"
"	      00467254    push eax"
"	      00467255    mov eax,dwWindowStyle"
"	      00467258    push eax"
"	      00467259    mov eax,this"
"	      0046725c    mov eax,[eax+98h]"
"	      00467262    push eax"
"	      00467263    push 599AB8h"
"	      00467268    push 40000h"
"	      0046726d    call dword ptr ds:[6C3808h]"
"	      00467273    mov ecx,this"
"	      00467276    mov [ecx+18h],eax"
);
// LINE 132:
	asm( 
"	      00467279    mov eax,this"
"	      0046727c    cmp dword ptr [eax+18h],0"
"	      00467280    je near ptr 004672BCh"
);
// LINE 134:
	asm( 
"	      00467286    mov eax,this"
"	      00467289    push eax"
"	      0046728a    push 0"
"	      0046728c    mov eax,this"
"	      0046728f    mov eax,[eax+18h]"
"	      00467292    push eax"
"	      00467293    call dword ptr ds:[6C380Ch]"
);
// LINE 135:
	asm( 
"	      00467299    push 1"
"	      0046729b    mov eax,this"
"	      0046729e    mov eax,[eax+18h]"
"	      004672a1    push eax"
"	      004672a2    call dword ptr ds:[6C3820h]"
);
// LINE 136:
	asm( 
"	      004672a8    mov eax,this"
"	      004672ab    mov eax,[eax+18h]"
"	      004672ae    push eax"
"	      004672af    call dword ptr ds:[6C3864h]"
);
// LINE 137:
	asm( 
"	      004672b5    xor eax,eax"
"	      004672b7    jmp near ptr 004672C6h"
);
// LINE 139:
	asm( 
"	      004672bc    mov eax,80000000h"
"	      004672c1    jmp near ptr 004672C6h"
);
// LINE 141:
	asm( 
"	      004672c6    pop edi"
"	      004672c7    pop esi"
"	      004672c8    pop ebx"
"	      004672c9    leave"
"	      004672ca    ret"
);
}

// FUNCTION: COPTER_D 0x004672cb
void GameWindow::~GameWindow() {
// LINE 149:
	asm( 
"	      004672cb    push ebp"
"	      004672cc    mov ebp,esp"
"	      004672ce    sub esp,0Ch"
"	      004672d1    push ebx"
"	      004672d2    push esi"
"	      004672d3    push edi"
"	      004672d4    mov this,ecx"
"	      004672d7    mov eax,this"
"	      004672da    mov dword ptr [eax],590470h"
);
// LINE 150:
	asm( 
"	      004672e0    mov eax,this"
"	      004672e3    mov eax,[eax+98h]"
"	      004672e9    mov [ebp-4],eax"
"	      004672ec    mov eax,[ebp-4]"
"	      004672ef    mov [ebp-8],eax"
"	      004672f2    mov eax,[ebp-8]"
"	      004672f5    push eax"
"	      004672f6    call 0056A740h"
"	      004672fb    add esp,4"
);
// LINE 151:
	asm( 
"	      004672fe    jmp near ptr 00467303h"
"	      00467303    mov ecx,this"
"	      00467306    call 00480D01h"
"	      0046730b    pop edi"
"	      0046730c    pop esi"
"	      0046730d    pop ebx"
"	      0046730e    leave"
"	      0046730f    ret"
);
}

// FUNCTION: COPTER_D 0x00467310
int32_t GameWindow::Initialize() {
// LINE 158:
	asm( 
"	      00467310    push ebp"
"	      00467311    mov ebp,esp"
"	      00467313    sub esp,4"
"	      00467316    push ebx"
"	      00467317    push esi"
"	      00467318    push edi"
"	      00467319    mov this,ecx"
);
// LINE 159:
	asm( 
"	      0046731c    mov eax,this"
"	      0046731f    mov eax,[eax]"
"	      00467321    mov ecx,this"
"	      00467324    call dword ptr [eax+14h]"
);
// LINE 160:
	asm( 
"	      00467327    mov eax,1"
"	      0046732c    jmp near ptr 00467331h"
);
// LINE 161:
	asm( 
"	      00467331    pop edi"
"	      00467332    pop esi"
"	      00467333    pop ebx"
"	      00467334    leave"
"	      00467335    ret"
);
}

// FUNCTION: COPTER_D 0x00467336
unsigned long GameWindow::Draw() {
// LINE 169:
	asm( 
"	      00467336    push ebp"
"	      00467337    mov ebp,esp"
"	      00467339    sub esp,4"
"	      0046733c    push ebx"
"	      0046733d    push esi"
"	      0046733e    push edi"
"	      0046733f    mov this,ecx"
);
// LINE 172:
	asm( 
"	      00467342    mov eax,this"
"	      00467345    cmp dword ptr [eax+14h],0"
"	      00467349    je near ptr 00467384h"
);
// LINE 173:
	asm( 
"	      0046734f    mov eax,this"
"	      00467352    mov ecx,this"
"	      00467355    mov ecx,[ecx+14h]"
"	      00467358    mov edx,[ecx]"
"	      0046735a    mov ecx,[eax+14h]"
"	      0046735d    call dword ptr [edx+4]"
"	      00467360    test eax,eax"
"	      00467362    je near ptr 0046736Dh"
"	      00467368    jmp near ptr 0046734Fh"
);
// LINE 174:
	asm( 
"	      0046736d    push 0"
"	      0046736f    push 0"
"	      00467371    push 0"
"	      00467373    mov eax,this"
"	      00467376    mov ecx,this"
"	      00467379    mov ecx,[ecx+14h]"
"	      0046737c    mov edx,[ecx]"
"	      0046737e    mov ecx,[eax+14h]"
"	      00467381    call dword ptr [edx+1Ch]"
);
// LINE 176:
	asm( 
"	      00467384    xor eax,eax"
"	      00467386    jmp near ptr 0046738Bh"
);
// LINE 177:
	asm( 
"	      0046738b    pop edi"
"	      0046738c    pop esi"
"	      0046738d    pop ebx"
"	      0046738e    leave"
"	      0046738f    ret"
);
}

// FUNCTION: COPTER_D 0x00467390
unsigned long GameWindow::SwapBuffer() {
// LINE 184:
	asm( 
"	      00467390    push ebp"
"	      00467391    mov ebp,esp"
"	      00467393    sub esp,4"
"	      00467396    push ebx"
"	      00467397    push esi"
"	      00467398    push edi"
"	      00467399    mov this,ecx"
);
// LINE 185:
	asm( 
"	      0046739c    mov eax,this"
"	      0046739f    cmp dword ptr [eax+14h],0"
"	      004673a3    je near ptr 004673DEh"
);
// LINE 186:
	asm( 
"	      004673a9    mov eax,this"
"	      004673ac    mov ecx,this"
"	      004673af    mov ecx,[ecx+14h]"
"	      004673b2    mov edx,[ecx]"
"	      004673b4    mov ecx,[eax+14h]"
"	      004673b7    call dword ptr [edx+4]"
"	      004673ba    test eax,eax"
"	      004673bc    je near ptr 004673C7h"
"	      004673c2    jmp near ptr 004673A9h"
);
// LINE 187:
	asm( 
"	      004673c7    push 0"
"	      004673c9    push 0"
"	      004673cb    push 0"
"	      004673cd    mov eax,this"
"	      004673d0    mov ecx,this"
"	      004673d3    mov ecx,[ecx+14h]"
"	      004673d6    mov edx,[ecx]"
"	      004673d8    mov ecx,[eax+14h]"
"	      004673db    call dword ptr [edx+1Ch]"
);
// LINE 189:
	asm( 
"	      004673de    xor eax,eax"
"	      004673e0    jmp near ptr 004673E5h"
);
// LINE 190:
	asm( 
"	      004673e5    pop edi"
"	      004673e6    pop esi"
"	      004673e7    pop ebx"
"	      004673e8    leave"
"	      004673e9    ret"
);
}

// FUNCTION: COPTER_D 0x004673ea
unsigned long GameWindow::MakePalette(const struct SparkalColor* pColors) {
	struct GameWindow::MakePalette::__unnamed LogPalette;
	void * __ptr32 hdc;
	int32_t StaticCount;
	uint32_t PaletteUse;
	int32_t End;
	int32_t Start;
	int32_t Counter;

// LINE 197:
	asm( 
"	      004673ea    push ebp"
"	      004673eb    mov ebp,esp"
"	      004673ed    sub esp,420h"
"	      004673f3    push ebx"
"	      004673f4    push esi"
"	      004673f5    push edi"
"	      004673f6    mov this,ecx"
);
// LINE 199:
	asm( 
"	      004673fc    cmp pColors,0"
"	      00467400    jne near ptr 00467410h"
);
// LINE 200:
	asm( 
"	      00467406    mov eax,80000000h"
"	      0046740b    jmp near ptr 0046769Ah"
);
// LINE 201:
	asm( 
"	      00467410    xor eax,eax"
"	      00467412    jmp near ptr 0046769Ah"
);
// LINE 208:
	asm( 
"	      00467417    mov LogPalette.Version,300h"
"	      00467420    mov LogPalette.NumberOfEntries,100h"
"	      00467429    lea edi,LogPalette.aEntries[0].peRed"
"	      0046742f    xor eax,eax"
"	      00467431    mov ecx,100h"
"	      00467436    rep stosd"
);
// LINE 212:
	asm( 
"	      00467438    mov StaticCount,14h"
);
// LINE 213:
	asm( 
"	      0046743f    mov PaletteUse,1"
);
// LINE 215:
	asm( 
"	      00467446    push 0"
"	      00467448    call dword ptr ds:[6C3850h]"
"	      0046744e    mov hdc,eax"
);
// LINE 216:
	asm( 
"	      00467451    cmp hdc,0"
"	      00467455    je near ptr 0046749Bh"
);
// LINE 217:
	asm( 
"	      0046745b    mov eax,hdc"
"	      0046745e    push eax"
"	      0046745f    call dword ptr ds:[6C3588h]"
"	      00467465    mov PaletteUse,eax"
);
// LINE 218:
	asm( 
"	      00467468    push 18h"
"	      0046746a    mov eax,hdc"
"	      0046746d    push eax"
"	      0046746e    call dword ptr ds:[6C3590h]"
"	      00467474    mov StaticCount,eax"
);
// LINE 219:
	asm( 
"	      00467477    lea eax,LogPalette.aEntries[0].peRed"
"	      0046747d    push eax"
"	      0046747e    push 100h"
"	      00467483    push 0"
"	      00467485    mov eax,hdc"
"	      00467488    push eax"
"	      00467489    call dword ptr ds:[6C3580h]"
);
// LINE 220:
	asm( 
"	      0046748f    mov eax,hdc"
"	      00467492    push eax"
"	      00467493    push 0"
"	      00467495    call dword ptr ds:[6C384Ch]"
);
// LINE 224:
	asm( 
"	      0046749b    mov eax,StaticCount"
"	      0046749e    cdq"
"	      0046749f    sub eax,edx"
"	      004674a1    sar eax,1"
"	      004674a4    mov Start,eax"
);
// LINE 225:
	asm( 
"	      004674a7    mov ecx,100h"
"	      004674ac    mov eax,StaticCount"
"	      004674af    cdq"
"	      004674b0    sub eax,edx"
"	      004674b2    sar eax,1"
"	      004674b5    sub ecx,eax"
"	      004674b7    mov End,ecx"
);
// LINE 228:
	asm( 
"	      004674ba    cmp PaletteUse,2"
"	      004674be    jne near ptr 004674D2h"
);
// LINE 229:
	asm( 
"	      004674c4    mov Start,1"
);
// LINE 230:
	asm( 
"	      004674cb    mov End,0FFh"
);
// LINE 234:
	asm( 
"	      004674d2    mov Counter,0"
"	      004674d9    jmp near ptr 004674E1h"
"	      004674de    inc Counter"
"	      004674e1    mov eax,Counter"
"	      004674e4    cmp Start,eax"
"	      004674e7    jle near ptr 004674FDh"
);
// LINE 235:
	asm( 
"	      004674ed    mov eax,Counter"
"	      004674f0    mov byte ptr [ebp+eax*4-415h],0"
"	      004674f8    jmp near ptr 004674DEh"
);
// LINE 238:
	asm( 
"	      004674fd    cmp pColors,0"
"	      00467501    je near ptr 0046756Bh"
);
// LINE 239:
	asm( 
"	      00467507    jmp near ptr 0046750Fh"
"	      0046750c    inc Counter"
"	      0046750f    mov eax,End"
"	      00467512    cmp Counter,eax"
"	      00467515    jge near ptr 00467566h"
);
// LINE 240:
	asm( 
"	      0046751b    mov eax,Counter"
"	      0046751e    mov ecx,pColors"
"	      00467521    mov al,[ecx+eax*4]"
"	      00467524    mov ecx,Counter"
"	      00467527    mov [ebp+ecx*4-416h],al"
);
// LINE 241:
	asm( 
"	      0046752e    mov eax,Counter"
"	      00467531    mov ecx,pColors"
"	      00467534    mov al,[ecx+eax*4+1]"
"	      00467538    mov ecx,Counter"
"	      0046753b    mov [ebp+ecx*4-417h],al"
);
// LINE 242:
	asm( 
"	      00467542    mov eax,Counter"
"	      00467545    mov ecx,pColors"
"	      00467548    mov al,[ecx+eax*4+2]"
"	      0046754c    mov ecx,Counter"
"	      0046754f    mov [ebp+ecx*4-418h],al"
);
// LINE 243:
	asm( 
"	      00467556    mov eax,Counter"
"	      00467559    mov byte ptr [ebp+eax*4-415h],5"
);
// LINE 244:
	asm( 
"	      00467561    jmp near ptr 0046750Ch"
);
// LINE 246:
	asm( 
"	      00467566    jmp near ptr 004675B6h"
);
// LINE 247:
	asm( 
"	      0046756b    jmp near ptr 00467573h"
"	      00467570    inc Counter"
"	      00467573    mov eax,End"
"	      00467576    cmp Counter,eax"
"	      00467579    jge near ptr 004675B6h"
);
// LINE 248:
	asm( 
"	      0046757f    mov al,reinterpret_cast<uint8_t>(Counter)"
"	      00467582    mov ecx,Counter"
"	      00467585    mov [ebp+ecx*4-416h],al"
);
// LINE 249:
	asm( 
"	      0046758c    mov al,reinterpret_cast<uint8_t>(Counter)"
"	      0046758f    mov ecx,Counter"
"	      00467592    mov [ebp+ecx*4-417h],al"
);
// LINE 250:
	asm( 
"	      00467599    mov al,reinterpret_cast<uint8_t>(Counter)"
"	      0046759c    mov ecx,Counter"
"	      0046759f    mov [ebp+ecx*4-418h],al"
);
// LINE 251:
	asm( 
"	      004675a6    mov eax,Counter"
"	      004675a9    mov byte ptr [ebp+eax*4-415h],5"
);
// LINE 252:
	asm( 
"	      004675b1    jmp near ptr 00467570h"
);
// LINE 256:
	asm( 
"	      004675b6    jmp near ptr 004675BEh"
"	      004675bb    inc Counter"
"	      004675be    cmp Counter,100h"
"	      004675c5    jge near ptr 004675DBh"
);
// LINE 257:
	asm( 
"	      004675cb    mov eax,Counter"
"	      004675ce    mov byte ptr [ebp+eax*4-415h],0"
"	      004675d6    jmp near ptr 004675BBh"
);
// LINE 260:
	asm( 
"	      004675db    lea eax,LogPalette.Version"
"	      004675e1    push eax"
"	      004675e2    call dword ptr ds:[6C357Ch]"
"	      004675e8    mov ecx,this"
"	      004675ee    mov [ecx+1Ch],eax"
);
// LINE 263:
	asm( 
"	      004675f1    mov eax,this"
"	      004675f7    mov eax,[eax+18h]"
"	      004675fa    push eax"
"	      004675fb    call dword ptr ds:[6C3850h]"
"	      00467601    mov hdc,eax"
);
// LINE 264:
	asm( 
"	      00467604    cmp hdc,0"
"	      00467608    je near ptr 00467693h"
);
// LINE 265:
	asm( 
"	      0046760e    push 1"
"	      00467610    mov eax,hdc"
"	      00467613    push eax"
"	      00467614    call dword ptr ds:[6C3584h]"
);
// LINE 266:
	asm( 
"	      0046761a    push 1"
"	      0046761c    mov eax,hdc"
"	      0046761f    push eax"
"	      00467620    call dword ptr ds:[6C3574h]"
);
// LINE 267:
	asm( 
"	      00467626    push 0"
"	      00467628    mov eax,this"
"	      0046762e    mov eax,[eax+1Ch]"
"	      00467631    push eax"
"	      00467632    mov eax,hdc"
"	      00467635    push eax"
"	      00467636    call dword ptr ds:[6C3570h]"
);
// LINE 268:
	asm( 
"	      0046763c    mov eax,hdc"
"	      0046763f    push eax"
"	      00467640    call dword ptr ds:[6C3578h]"
);
// LINE 270:
	asm( 
"	      00467646    lea eax,LogPalette.aEntries[0].peRed"
"	      0046764c    push eax"
"	      0046764d    mov eax,this"
"	      00467653    mov eax,[eax+1Ch]"
"	      00467656    push eax"
"	      00467657    mov eax,hdc"
"	      0046765a    push eax"
"	      0046765b    call 0048132Bh"
"	      00467660    add esp,0Ch"
"	      00467663    test eax,eax"
"	      00467665    jne near ptr 0046767Fh"
);
// LINE 271:
	asm( 
"	      0046766b    push 0"
"	      0046766d    push 59931Ch"
"	      00467672    push 599324h"
"	      00467677    push 0"
"	      00467679    call dword ptr ds:[6C3870h]"
);
// LINE 273:
	asm( 
"	      0046767f    mov eax,hdc"
"	      00467682    push eax"
"	      00467683    mov eax,this"
"	      00467689    mov eax,[eax+18h]"
"	      0046768c    push eax"
"	      0046768d    call dword ptr ds:[6C384Ch]"
);
// LINE 276:
	asm( 
"	      00467693    xor eax,eax"
"	      00467695    jmp near ptr 0046769Ah"
);
// LINE 277:
	asm( 
"	      0046769a    pop edi"
"	      0046769b    pop esi"
"	      0046769c    pop ebx"
"	      0046769d    leave"
"	      0046769e    ret 4"
);
}

// FUNCTION: COPTER_D 0x004676a1
void GameWindow::UpdatePalette(long start, long count, struct SparkalColor* pColor) {
// LINE 285:
	asm( 
"	      004676a1    push ebp"
"	      004676a2    mov ebp,esp"
"	      004676a4    sub esp,4"
"	      004676a7    push ebx"
"	      004676a8    push esi"
"	      004676a9    push edi"
"	      004676aa    mov this,ecx"
);
// LINE 287:
	asm( 
"	      004676ad    mov eax,pColor"
"	      004676b0    push eax"
"	      004676b1    mov eax,count"
"	      004676b4    push eax"
"	      004676b5    mov eax,start"
"	      004676b8    push eax"
"	      004676b9    mov eax,this"
"	      004676bc    mov ecx,[eax+14h]"
"	      004676bf    call 00470221h"
);
// LINE 289:
	asm( 
"	      004676c4    jmp near ptr 004676C9h"
"	      004676c9    pop edi"
"	      004676ca    pop esi"
"	      004676cb    pop ebx"
"	      004676cc    leave"
"	      004676cd    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x004676d0
void GameWindow::ProcessWindowMove() {
	struct tagRECT rectWindowTemp;

// LINE 297:
	asm( 
"	      004676d0    push ebp"
"	      004676d1    mov ebp,esp"
"	      004676d3    sub esp,14h"
"	      004676d6    push ebx"
"	      004676d7    push esi"
"	      004676d8    push edi"
"	      004676d9    mov this,ecx"
);
// LINE 305:
	asm( 
"	      004676dc    lea eax,rectWindowTemp.left"
"	      004676df    push eax"
"	      004676e0    mov eax,this"
"	      004676e3    mov eax,[eax+18h]"
"	      004676e6    push eax"
"	      004676e7    call dword ptr ds:[6C38B8h]"
);
// LINE 306:
	asm( 
"	      004676ed    mov eax,rectWindowTemp.left"
"	      004676f0    mov ecx,this"
"	      004676f3    mov [ecx+78h],eax"
);
// LINE 307:
	asm( 
"	      004676f6    mov eax,rectWindowTemp.top"
"	      004676f9    mov ecx,this"
"	      004676fc    mov [ecx+7Ch],eax"
);
// LINE 308:
	asm( 
"	      004676ff    mov eax,rectWindowTemp.right"
"	      00467702    mov ecx,this"
"	      00467705    mov [ecx+80h],eax"
);
// LINE 309:
	asm( 
"	      0046770b    mov eax,rectWindowTemp.bottom"
"	      0046770e    mov ecx,this"
"	      00467711    mov [ecx+84h],eax"
);
// LINE 312:
	asm( 
"	      00467717    lea eax,rectWindowTemp.left"
"	      0046771a    push eax"
"	      0046771b    mov eax,this"
"	      0046771e    mov eax,[eax+18h]"
"	      00467721    push eax"
"	      00467722    call dword ptr ds:[6C382Ch]"
);
// LINE 313:
	asm( 
"	      00467728    lea eax,rectWindowTemp.left"
"	      0046772b    push eax"
"	      0046772c    mov eax,this"
"	      0046772f    mov eax,[eax+18h]"
"	      00467732    push eax"
"	      00467733    call dword ptr ds:[6C37E0h]"
);
// LINE 314:
	asm( 
"	      00467739    lea eax,rectWindowTemp.right"
"	      0046773c    push eax"
"	      0046773d    mov eax,this"
"	      00467740    mov eax,[eax+18h]"
"	      00467743    push eax"
"	      00467744    call dword ptr ds:[6C37E0h]"
);
// LINE 315:
	asm( 
"	      0046774a    mov eax,rectWindowTemp.left"
"	      0046774d    mov ecx,this"
"	      00467750    mov [ecx+88h],eax"
);
// LINE 316:
	asm( 
"	      00467756    mov eax,rectWindowTemp.top"
"	      00467759    mov ecx,this"
"	      0046775c    mov [ecx+8Ch],eax"
);
// LINE 317:
	asm( 
"	      00467762    mov eax,rectWindowTemp.right"
"	      00467765    mov ecx,this"
"	      00467768    mov [ecx+90h],eax"
);
// LINE 318:
	asm( 
"	      0046776e    mov eax,rectWindowTemp.bottom"
"	      00467771    mov ecx,this"
"	      00467774    mov [ecx+94h],eax"
);
// LINE 323:
	asm( 
"	      0046777a    mov eax,this"
"	      0046777d    cmp dword ptr [eax+14h],0"
"	      00467781    je near ptr 004677A4h"
);
// LINE 324:
	asm( 
"	      00467787    mov eax,this"
"	      0046778a    add eax,88h"
"	      0046778f    push eax"
"	      00467790    mov eax,this"
"	      00467793    mov ecx,this"
"	      00467796    mov ecx,[ecx+14h]"
"	      00467799    mov edx,[ecx]"
"	      0046779b    mov ecx,[eax+14h]"
"	      0046779e    call dword ptr [edx+80h]"
);
// LINE 326:
	asm( 
"	      004677a4    jmp near ptr 004677A9h"
"	      004677a9    pop edi"
"	      004677aa    pop esi"
"	      004677ab    pop ebx"
"	      004677ac    leave"
"	      004677ad    ret"
);
}

// FUNCTION: COPTER_D 0x004677ae
int32_t GameWindow::PrepareForSwitchToWindowedMode() {
// LINE 333:
	asm( 
"	      004677ae    push ebp"
"	      004677af    mov ebp,esp"
"	      004677b1    sub esp,4"
"	      004677b4    push ebx"
"	      004677b5    push esi"
"	      004677b6    push edi"
"	      004677b7    mov this,ecx"
);
// LINE 335:
	asm( 
"	      004677ba    mov eax,1"
"	      004677bf    jmp near ptr 004677C4h"
);
// LINE 340:
	asm( 
"	      004677c4    pop edi"
"	      004677c5    pop esi"
"	      004677c6    pop ebx"
"	      004677c7    leave"
"	      004677c8    ret"
);
}

// FUNCTION: COPTER_D 0x004677c9
int32_t GameWindow::CompleteSwitchToWindowedMode() {
	struct tagRECT rectWindowTempWindows;
	unsigned long dwStyle;

// LINE 346:
	asm( 
"	      004677c9    push ebp"
"	      004677ca    mov ebp,esp"
"	      004677cc    sub esp,18h"
"	      004677cf    push ebx"
"	      004677d0    push esi"
"	      004677d1    push edi"
"	      004677d2    mov this,ecx"
);
// LINE 353:
	asm( 
"	      004677d5    push 0FFFFFFF0h"
"	      004677d7    mov eax,this"
"	      004677da    mov eax,[eax+18h]"
"	      004677dd    push eax"
"	      004677de    call dword ptr ds:[6C3868h]"
"	      004677e4    mov dwStyle,eax"
);
// LINE 354:
	asm( 
"	      004677e7    and dwStyle,7FFFFFFFh"
);
// LINE 355:
	asm( 
"	      004677ee    or dwStyle,10C60000h"
);
// LINE 356:
	asm( 
"	      004677f5    mov eax,dwStyle"
"	      004677f8    push eax"
"	      004677f9    push 0FFFFFFF0h"
"	      004677fb    mov eax,this"
"	      004677fe    mov eax,[eax+18h]"
"	      00467801    push eax"
"	      00467802    call dword ptr ds:[6C380Ch]"
);
// LINE 358:
	asm( 
"	      00467808    mov eax,this"
"	      0046780b    mov eax,[eax+4]"
"	      0046780e    push eax"
"	      0046780f    mov eax,this"
"	      00467812    mov eax,[eax+8]"
"	      00467815    push eax"
"	      00467816    push 0"
"	      00467818    push 0"
"	      0046781a    lea eax,rectWindowTempWindows.left"
"	      0046781d    push eax"
"	      0046781e    call dword ptr ds:[6C38ACh]"
);
// LINE 360:
	asm( 
"	      00467824    push 0FFFFFFECh"
"	      00467826    mov eax,this"
"	      00467829    mov eax,[eax+18h]"
"	      0046782c    push eax"
"	      0046782d    call dword ptr ds:[6C3868h]"
"	      00467833    push eax"
"	      00467834    mov eax,this"
"	      00467837    mov eax,[eax+18h]"
"	      0046783a    push eax"
"	      0046783b    call dword ptr ds:[6C38B0h]"
"	      00467841    cmp eax,1"
"	      00467844    sbb eax,eax"
"	      00467846    inc eax"
"	      00467847    push eax"
"	      00467848    push 0FFFFFFF0h"
"	      0046784a    mov eax,this"
"	      0046784d    mov eax,[eax+18h]"
"	      00467850    push eax"
"	      00467851    call dword ptr ds:[6C3868h]"
"	      00467857    push eax"
"	      00467858    lea eax,rectWindowTempWindows.left"
"	      0046785b    push eax"
"	      0046785c    call dword ptr ds:[6C387Ch]"
);
// LINE 363:
	asm( 
"	      00467862    mov eax,rectWindowTempWindows.left"
"	      00467865    mov ecx,this"
"	      00467868    mov [ecx+78h],eax"
);
// LINE 364:
	asm( 
"	      0046786b    mov eax,rectWindowTempWindows.top"
"	      0046786e    mov ecx,this"
"	      00467871    mov [ecx+7Ch],eax"
);
// LINE 365:
	asm( 
"	      00467874    mov eax,rectWindowTempWindows.right"
"	      00467877    mov ecx,this"
"	      0046787a    mov [ecx+80h],eax"
);
// LINE 366:
	asm( 
"	      00467880    mov eax,rectWindowTempWindows.bottom"
"	      00467883    mov ecx,this"
"	      00467886    mov [ecx+84h],eax"
);
// LINE 367:
	asm( 
"	      0046788c    mov eax,this"
"	      0046788f    add eax,78h"
"	      00467892    push eax"
"	      00467893    mov eax,this"
"	      00467896    mov eax,[eax]"
"	      00467898    mov ecx,this"
"	      0046789b    call dword ptr [eax+48h]"
);
// LINE 368:
	asm( 
"	      0046789e    mov eax,this"
"	      004678a1    add eax,78h"
"	      004678a4    mov ecx,this"
"	      004678a7    add ecx,68h"
"	      004678aa    mov edx,[eax]"
"	      004678ac    mov [ecx],edx"
"	      004678ae    mov edx,[eax+4]"
"	      004678b1    mov [ecx+4],edx"
"	      004678b4    mov edx,[eax+8]"
"	      004678b7    mov [ecx+8],edx"
"	      004678ba    mov eax,[eax+0Ch]"
"	      004678bd    mov [ecx+0Ch],eax"
);
// LINE 373:
	asm( 
"	      004678c0    jmp near ptr 004678C5h"
"	      004678c5    jmp near ptr 004678CAh"
"	      004678ca    push 14h"
"	      004678cc    mov eax,this"
"	      004678cf    mov eax,[eax+84h]"
"	      004678d5    mov ecx,this"
"	      004678d8    sub eax,[ecx+7Ch]"
"	      004678db    push eax"
"	      004678dc    mov eax,this"
"	      004678df    mov eax,[eax+80h]"
"	      004678e5    mov ecx,this"
"	      004678e8    sub eax,[ecx+78h]"
"	      004678eb    push eax"
"	      004678ec    mov eax,this"
"	      004678ef    mov eax,[eax+7Ch]"
"	      004678f2    push eax"
"	      004678f3    mov eax,this"
"	      004678f6    mov eax,[eax+78h]"
"	      004678f9    push eax"
"	      004678fa    push 0"
"	      004678fc    mov eax,this"
"	      004678ff    mov eax,[eax+18h]"
"	      00467902    push eax"
"	      00467903    call dword ptr ds:[6C37E8h]"
);
// LINE 380:
	asm( 
"	      00467909    mov eax,1"
"	      0046790e    jmp near ptr 00467913h"
);
// LINE 382:
	asm( 
"	      00467913    pop edi"
"	      00467914    pop esi"
"	      00467915    pop ebx"
"	      00467916    leave"
"	      00467917    ret"
);
}

// FUNCTION: COPTER_D 0x00467918
int32_t GameWindow::PrepareForSwitchToFullScreenMode() {
// LINE 389:
	asm( 
"	      00467918    push ebp"
"	      00467919    mov ebp,esp"
"	      0046791b    sub esp,4"
"	      0046791e    push ebx"
"	      0046791f    push esi"
"	      00467920    push edi"
"	      00467921    mov this,ecx"
);
// LINE 392:
	asm( 
"	      00467924    mov eax,1"
"	      00467929    jmp near ptr 0046792Eh"
);
// LINE 394:
	asm( 
"	      0046792e    pop edi"
"	      0046792f    pop esi"
"	      00467930    pop ebx"
"	      00467931    leave"
"	      00467932    ret"
);
}

// FUNCTION: COPTER_D 0x00467933
int32_t GameWindow::CompleteSwitchToFullScreenMode() {
	unsigned long dwStyle;
	struct tagRECT rectWindowTemp;

// LINE 402:
	asm( 
"	      00467933    push ebp"
"	      00467934    mov ebp,esp"
"	      00467936    sub esp,20h"
"	      00467939    push ebx"
"	      0046793a    push esi"
"	      0046793b    push edi"
"	      0046793c    mov this,ecx"
);
// LINE 409:
	asm( 
"	      0046793f    mov eax,this"
"	      00467942    mov dword ptr [eax+0Ch],0"
);
// LINE 410:
	asm( 
"	      00467949    mov dwStyle,90000000h"
);
// LINE 411:
	asm( 
"	      00467950    mov eax,dwStyle"
"	      00467953    push eax"
"	      00467954    push 0FFFFFFF0h"
"	      00467956    mov eax,this"
"	      00467959    mov eax,[eax+18h]"
"	      0046795c    push eax"
"	      0046795d    call dword ptr ds:[6C380Ch]"
"	      00467963    mov eax,this"
"	      00467966    mov eax,[eax+4]"
"	      00467969    mov [ebp-18h],eax"
"	      0046796c    mov eax,this"
"	      0046796f    mov eax,[eax+8]"
"	      00467972    mov [ebp-1Ch],eax"
);
// LINE 414:
	asm( 
"	      00467975    mov eax,this"
"	      00467978    mov dword ptr [eax+78h],0"
"	      0046797f    mov eax,this"
"	      00467982    mov dword ptr [eax+7Ch],0"
"	      00467989    mov eax,[ebp-1Ch]"
"	      0046798c    mov ecx,this"
"	      0046798f    mov [ecx+80h],eax"
"	      00467995    mov eax,[ebp-18h]"
"	      00467998    mov ecx,this"
"	      0046799b    mov [ecx+84h],eax"
"	      004679a1    jmp near ptr 004679A6h"
);
// LINE 415:
	asm( 
"	      004679a6    mov eax,this"
"	      004679a9    add eax,78h"
"	      004679ac    mov ecx,this"
"	      004679af    add ecx,68h"
"	      004679b2    mov edx,[eax]"
"	      004679b4    mov [ecx],edx"
"	      004679b6    mov edx,[eax+4]"
"	      004679b9    mov [ecx+4],edx"
"	      004679bc    mov edx,[eax+8]"
"	      004679bf    mov [ecx+8],edx"
"	      004679c2    mov eax,[eax+0Ch]"
"	      004679c5    mov [ecx+0Ch],eax"
);
// LINE 416:
	asm( 
"	      004679c8    mov eax,this"
"	      004679cb    mov eax,[eax+4]"
"	      004679ce    push eax"
"	      004679cf    mov eax,this"
"	      004679d2    mov eax,[eax+8]"
"	      004679d5    push eax"
"	      004679d6    push 0"
"	      004679d8    push 0"
"	      004679da    lea eax,rectWindowTemp.left"
"	      004679dd    push eax"
"	      004679de    call dword ptr ds:[6C38ACh]"
);
// LINE 418:
	asm( 
"	      004679e4    push 0FFFFFFECh"
"	      004679e6    mov eax,this"
"	      004679e9    mov eax,[eax+18h]"
"	      004679ec    push eax"
"	      004679ed    call dword ptr ds:[6C3868h]"
"	      004679f3    push eax"
"	      004679f4    mov eax,this"
"	      004679f7    mov eax,[eax+18h]"
"	      004679fa    push eax"
"	      004679fb    call dword ptr ds:[6C38B0h]"
"	      00467a01    cmp eax,1"
"	      00467a04    sbb eax,eax"
"	      00467a06    inc eax"
"	      00467a07    push eax"
"	      00467a08    mov eax,dwStyle"
"	      00467a0b    push eax"
"	      00467a0c    lea eax,rectWindowTemp.left"
"	      00467a0f    push eax"
"	      00467a10    call dword ptr ds:[6C387Ch]"
);
// LINE 424:
	asm( 
"	      00467a16    push 14h"
"	      00467a18    mov eax,rectWindowTemp.bottom"
"	      00467a1b    sub eax,rectWindowTemp.top"
"	      00467a1e    push eax"
"	      00467a1f    mov eax,rectWindowTemp.right"
"	      00467a22    sub eax,rectWindowTemp.left"
"	      00467a25    push eax"
"	      00467a26    push 0"
"	      00467a28    push 0"
"	      00467a2a    push 0"
"	      00467a2c    mov eax,this"
"	      00467a2f    mov eax,[eax+18h]"
"	      00467a32    push eax"
"	      00467a33    call dword ptr ds:[6C37E8h]"
);
// LINE 431:
	asm( 
"	      00467a39    mov eax,1"
"	      00467a3e    jmp near ptr 00467A43h"
);
// LINE 433:
	asm( 
"	      00467a43    pop edi"
"	      00467a44    pop esi"
"	      00467a45    pop ebx"
"	      00467a46    leave"
"	      00467a47    ret"
);
}

// FUNCTION: COPTER_D 0x00467a48
void GameWindow::CenterWindow() {
	unsigned long nWindowWidth;
	unsigned long nScreenWidth;
	unsigned long nWindowHeight;
	unsigned long nScreenHeight;

// LINE 441:
	asm( 
"	      00467a48    push ebp"
"	      00467a49    mov ebp,esp"
"	      00467a4b    sub esp,14h"
"	      00467a4e    push ebx"
"	      00467a4f    push esi"
"	      00467a50    push edi"
"	      00467a51    mov this,ecx"
);
// LINE 443:
	asm( 
"	      00467a54    push 0"
"	      00467a56    call dword ptr ds:[6C3810h]"
"	      00467a5c    mov nScreenWidth,eax"
"	      00467a5f    jmp near ptr 00467A64h"
);
// LINE 444:
	asm( 
"	      00467a64    push 1"
"	      00467a66    call dword ptr ds:[6C3810h]"
"	      00467a6c    mov nScreenHeight,eax"
"	      00467a6f    jmp near ptr 00467A74h"
);
// LINE 445:
	asm( 
"	      00467a74    jmp near ptr 00467A79h"
"	      00467a79    mov eax,this"
"	      00467a7c    mov eax,[eax+80h]"
"	      00467a82    mov ecx,this"
"	      00467a85    sub eax,[ecx+78h]"
"	      00467a88    mov nWindowWidth,eax"
);
// LINE 446:
	asm( 
"	      00467a8b    jmp near ptr 00467A90h"
"	      00467a90    mov eax,this"
"	      00467a93    mov eax,[eax+84h]"
"	      00467a99    mov ecx,this"
"	      00467a9c    sub eax,[ecx+7Ch]"
"	      00467a9f    mov nWindowHeight,eax"
);
// LINE 449:
	asm( 
"	      00467aa2    mov eax,nScreenWidth"
"	      00467aa5    shr eax,1"
"	      00467aa8    mov ecx,nWindowWidth"
"	      00467aab    shr ecx,1"
"	      00467aae    sub eax,ecx"
"	      00467ab0    mov ecx,this"
"	      00467ab3    mov [ecx+78h],eax"
);
// LINE 450:
	asm( 
"	      00467ab6    mov eax,nScreenHeight"
"	      00467ab9    shr eax,1"
"	      00467abc    mov ecx,nWindowHeight"
"	      00467abf    shr ecx,1"
"	      00467ac2    sub eax,ecx"
"	      00467ac4    mov ecx,this"
"	      00467ac7    mov [ecx+7Ch],eax"
);
// LINE 453:
	asm( 
"	      00467aca    push 0"
"	      00467acc    mov eax,nWindowHeight"
"	      00467acf    push eax"
"	      00467ad0    mov eax,nWindowWidth"
"	      00467ad3    push eax"
"	      00467ad4    mov eax,this"
"	      00467ad7    mov eax,[eax+7Ch]"
"	      00467ada    push eax"
"	      00467adb    mov eax,this"
"	      00467ade    mov eax,[eax+78h]"
"	      00467ae1    push eax"
"	      00467ae2    mov eax,this"
"	      00467ae5    mov eax,[eax+18h]"
"	      00467ae8    push eax"
"	      00467ae9    call dword ptr ds:[6C3828h]"
);
// LINE 455:
	asm( 
"	      00467aef    jmp near ptr 00467AF4h"
"	      00467af4    pop edi"
"	      00467af5    pop esi"
"	      00467af6    pop ebx"
"	      00467af7    leave"
"	      00467af8    ret"
);
}

// FUNCTION: COPTER_D 0x00467af9
void GameWindow::PlaceWindowRect(class MRect* rectWindowToPlace) {
	unsigned long nWindowWidth;
	unsigned long nScreenWidth;
	unsigned long nWindowHeight;
	unsigned long nScreenHeight;

// LINE 469:
	asm( 
"	      00467af9    push ebp"
"	      00467afa    mov ebp,esp"
"	      00467afc    sub esp,14h"
"	      00467aff    push ebx"
"	      00467b00    push esi"
"	      00467b01    push edi"
"	      00467b02    mov this,ecx"
);
// LINE 471:
	asm( 
"	      00467b05    push 0"
"	      00467b07    call dword ptr ds:[6C3810h]"
"	      00467b0d    mov nScreenWidth,eax"
"	      00467b10    jmp near ptr 00467B15h"
);
// LINE 472:
	asm( 
"	      00467b15    push 1"
"	      00467b17    call dword ptr ds:[6C3810h]"
"	      00467b1d    mov nScreenHeight,eax"
"	      00467b20    jmp near ptr 00467B25h"
);
// LINE 473:
	asm( 
"	      00467b25    jmp near ptr 00467B2Ah"
"	      00467b2a    mov eax,rectWindowToPlace"
"	      00467b2d    mov eax,[eax+8]"
"	      00467b30    mov ecx,rectWindowToPlace"
"	      00467b33    sub eax,[ecx]"
"	      00467b35    mov nWindowWidth,eax"
);
// LINE 474:
	asm( 
"	      00467b38    jmp near ptr 00467B3Dh"
"	      00467b3d    mov eax,rectWindowToPlace"
"	      00467b40    mov eax,[eax+0Ch]"
"	      00467b43    mov ecx,rectWindowToPlace"
"	      00467b46    sub eax,[ecx+4]"
"	      00467b49    mov nWindowHeight,eax"
);
// LINE 477:
	asm( 
"	      00467b4c    mov eax,nScreenWidth"
"	      00467b4f    shr eax,1"
"	      00467b52    mov ecx,nWindowWidth"
"	      00467b55    shr ecx,1"
"	      00467b58    sub eax,ecx"
"	      00467b5a    mov ecx,rectWindowToPlace"
"	      00467b5d    mov [ecx],eax"
);
// LINE 478:
	asm( 
"	      00467b5f    mov eax,nScreenHeight"
"	      00467b62    shr eax,1"
"	      00467b65    mov ecx,nWindowHeight"
"	      00467b68    shr ecx,1"
"	      00467b6b    sub eax,ecx"
"	      00467b6d    mov ecx,rectWindowToPlace"
"	      00467b70    mov [ecx+4],eax"
);
// LINE 479:
	asm( 
"	      00467b73    mov eax,rectWindowToPlace"
"	      00467b76    mov eax,[eax]"
"	      00467b78    add eax,nWindowWidth"
"	      00467b7b    mov ecx,rectWindowToPlace"
"	      00467b7e    mov [ecx+8],eax"
);
// LINE 480:
	asm( 
"	      00467b81    mov eax,rectWindowToPlace"
"	      00467b84    mov eax,[eax+4]"
"	      00467b87    add eax,nWindowHeight"
"	      00467b8a    mov ecx,rectWindowToPlace"
"	      00467b8d    mov [ecx+0Ch],eax"
);
// LINE 482:
	asm( 
"	      00467b90    jmp near ptr 00467B95h"
"	      00467b95    pop edi"
"	      00467b96    pop esi"
"	      00467b97    pop ebx"
"	      00467b98    leave"
"	      00467b99    ret 4"
);
}

// FUNCTION: COPTER_D 0x00467b9c
long GameWindow::MySparkalWindowProc(void * __ptr32 Window, uint32_t Message, uint32_t wParam, long lParam) {
	struct tagMINMAXINFO* lpMinMaxInfo;

// LINE 493:
	asm( 
"	      00467b9c    push ebp"
"	      00467b9d    mov ebp,esp"
"	      00467b9f    sub esp,8"
"	      00467ba2    push ebx"
"	      00467ba3    push esi"
"	      00467ba4    push edi"
);
// LINE 496:
	asm( 
"	      00467ba5    mov eax,Message"
"	      00467ba8    cmp ds:[646ED0h],eax"
"	      00467bae    jne near ptr 00467BCDh"
);
// LINE 497:
	asm( 
"	      00467bb4    push 599348h"
"	      00467bb9    call 004C9D68h"
"	      00467bbe    add esp,4"
);
// LINE 498:
	asm( 
"	      00467bc1    call 004C9D5Dh"
);
// LINE 499:
	asm( 
"	      00467bc6    xor eax,eax"
"	      00467bc8    jmp near ptr 00468013h"
);
// LINE 502:
	asm( 
"	      00467bcd    mov eax,Message"
"	      00467bd0    mov [ebp-8],eax"
"	      00467bd3    jmp near ptr 00467EE1h"
);
// LINE 504:
	asm( 
"	      00467bd8    mov eax,this"
"	      00467bdb    mov ecx,this"
"	      00467bde    mov ecx,[ecx+10h]"
"	      00467be1    mov edx,[ecx]"
"	      00467be3    mov ecx,[eax+10h]"
"	      00467be6    call dword ptr [edx+4Ch]"
);
// LINE 505:
	asm( 
"	      00467be9    xor eax,eax"
"	      00467beb    jmp near ptr 00468013h"
);
// LINE 508:
	asm( 
"	      00467bf0    mov eax,this"
"	      00467bf3    mov dword ptr [eax+18h],0"
);
// LINE 509:
	asm( 
"	      00467bfa    jmp near ptr 00467FF5h"
);
// LINE 513:
	asm( 
"	      00467bff    mov eax,this"
"	      00467c02    mov eax,[eax]"
"	      00467c04    mov ecx,this"
"	      00467c07    call dword ptr [eax+40h]"
);
// LINE 514:
	asm( 
"	      00467c0a    xor eax,eax"
"	      00467c0c    jmp near ptr 00468013h"
);
// LINE 517:
	asm( 
"	      00467c11    mov eax,lParam"
"	      00467c14    mov lpMinMaxInfo,eax"
);
// LINE 520:
	asm( 
"	      00467c17    mov eax,this"
"	      00467c1a    mov eax,[eax+70h]"
"	      00467c1d    mov ecx,this"
"	      00467c20    sub eax,[ecx+68h]"
"	      00467c23    mov ecx,lpMinMaxInfo"
"	      00467c26    mov [ecx+20h],eax"
"	      00467c29    jmp near ptr 00467C2Eh"
"	      00467c2e    mov eax,lpMinMaxInfo"
"	      00467c31    mov eax,[eax+20h]"
"	      00467c34    mov ecx,lpMinMaxInfo"
"	      00467c37    mov [ecx+18h],eax"
"	      00467c3a    mov eax,lpMinMaxInfo"
"	      00467c3d    mov eax,[eax+18h]"
"	      00467c40    mov ecx,lpMinMaxInfo"
"	      00467c43    mov [ecx+8],eax"
);
// LINE 523:
	asm( 
"	      00467c46    mov eax,this"
"	      00467c49    mov eax,[eax+74h]"
"	      00467c4c    mov ecx,this"
"	      00467c4f    sub eax,[ecx+6Ch]"
"	      00467c52    mov ecx,lpMinMaxInfo"
"	      00467c55    mov [ecx+24h],eax"
"	      00467c58    jmp near ptr 00467C5Dh"
"	      00467c5d    mov eax,lpMinMaxInfo"
"	      00467c60    mov eax,[eax+24h]"
"	      00467c63    mov ecx,lpMinMaxInfo"
"	      00467c66    mov [ecx+1Ch],eax"
"	      00467c69    mov eax,lpMinMaxInfo"
"	      00467c6c    mov eax,[eax+1Ch]"
"	      00467c6f    mov ecx,lpMinMaxInfo"
"	      00467c72    mov [ecx+0Ch],eax"
);
// LINE 527:
	asm( 
"	      00467c75    mov eax,this"
"	      00467c78    mov eax,[eax+68h]"
"	      00467c7b    mov ecx,lpMinMaxInfo"
"	      00467c7e    mov [ecx+10h],eax"
);
// LINE 528:
	asm( 
"	      00467c81    mov eax,this"
"	      00467c84    mov eax,[eax+6Ch]"
"	      00467c87    mov ecx,lpMinMaxInfo"
"	      00467c8a    mov [ecx+14h],eax"
);
// LINE 529:
	asm( 
"	      00467c8d    xor eax,eax"
"	      00467c8f    jmp near ptr 00468013h"
);
// LINE 530:
	asm( 
"	      00467c94    jmp near ptr 00467FF5h"
);
// LINE 533:
	asm( 
"	      00467c99    mov eax,this"
"	      00467c9c    cmp dword ptr [eax+10h],0"
"	      00467ca0    je near ptr 00467CB7h"
);
// LINE 534:
	asm( 
"	      00467ca6    mov eax,this"
"	      00467ca9    mov ecx,this"
"	      00467cac    mov ecx,[ecx+10h]"
"	      00467caf    mov edx,[ecx]"
"	      00467cb1    mov ecx,[eax+10h]"
"	      00467cb4    call dword ptr [edx+24h]"
);
// LINE 535:
	asm( 
"	      00467cb7    xor eax,eax"
"	      00467cb9    jmp near ptr 00468013h"
);
// LINE 536:
	asm( 
"	      00467cbe    jmp near ptr 00467FF5h"
);
// LINE 539:
	asm( 
"	      00467cc3    mov eax,wParam"
"	      00467cc6    push eax"
"	      00467cc7    mov eax,this"
"	      00467cca    mov ecx,this"
"	      00467ccd    mov ecx,[ecx+10h]"
"	      00467cd0    mov edx,[ecx]"
"	      00467cd2    mov ecx,[eax+10h]"
"	      00467cd5    call dword ptr [edx+38h]"
);
// LINE 540:
	asm( 
"	      00467cd8    xor eax,eax"
"	      00467cda    jmp near ptr 00468013h"
);
// LINE 543:
	asm( 
"	      00467cdf    mov eax,wParam"
"	      00467ce2    push eax"
"	      00467ce3    mov eax,this"
"	      00467ce6    mov ecx,this"
"	      00467ce9    mov ecx,[ecx+10h]"
"	      00467cec    mov edx,[ecx]"
"	      00467cee    mov ecx,[eax+10h]"
"	      00467cf1    call dword ptr [edx+2Ch]"
);
// LINE 544:
	asm( 
"	      00467cf4    xor eax,eax"
"	      00467cf6    jmp near ptr 00468013h"
);
// LINE 547:
	asm( 
"	      00467cfb    mov eax,wParam"
"	      00467cfe    push eax"
"	      00467cff    mov eax,this"
"	      00467d02    mov ecx,this"
"	      00467d05    mov ecx,[ecx+10h]"
"	      00467d08    mov edx,[ecx]"
"	      00467d0a    mov ecx,[eax+10h]"
"	      00467d0d    call dword ptr [edx+34h]"
);
// LINE 548:
	asm( 
"	      00467d10    xor eax,eax"
"	      00467d12    jmp near ptr 00468013h"
);
// LINE 559:
	asm( 
"	      00467d17    cmp wParam,73h"
"	      00467d1b    jne near ptr 00467D37h"
);
// LINE 560:
	asm( 
"	      00467d21    mov eax,this"
"	      00467d24    mov ecx,this"
"	      00467d27    mov ecx,[ecx+10h]"
"	      00467d2a    mov edx,[ecx]"
"	      00467d2c    mov ecx,[eax+10h]"
"	      00467d2f    call dword ptr [edx+4Ch]"
);
// LINE 561:
	asm( 
"	      00467d32    jmp near ptr 00467D4Ch"
);
// LINE 562:
	asm( 
"	      00467d37    mov eax,wParam"
"	      00467d3a    push eax"
"	      00467d3b    mov eax,this"
"	      00467d3e    mov ecx,this"
"	      00467d41    mov ecx,[ecx+10h]"
"	      00467d44    mov edx,[ecx]"
"	      00467d46    mov ecx,[eax+10h]"
"	      00467d49    call dword ptr [edx+2Ch]"
);
// LINE 563:
	asm( 
"	      00467d4c    xor eax,eax"
"	      00467d4e    jmp near ptr 00468013h"
);
// LINE 566:
	asm( 
"	      00467d53    cmp wParam,73h"
"	      00467d57    je near ptr 00467D72h"
);
// LINE 567:
	asm( 
"	      00467d5d    mov eax,wParam"
"	      00467d60    push eax"
"	      00467d61    mov eax,this"
"	      00467d64    mov ecx,this"
"	      00467d67    mov ecx,[ecx+10h]"
"	      00467d6a    mov edx,[ecx]"
"	      00467d6c    mov ecx,[eax+10h]"
"	      00467d6f    call dword ptr [edx+34h]"
);
// LINE 568:
	asm( 
"	      00467d72    xor eax,eax"
"	      00467d74    jmp near ptr 00468013h"
);
// LINE 571:
	asm( 
"	      00467d79    mov eax,Window"
"	      00467d7c    push eax"
"	      00467d7d    call dword ptr ds:[6C38A0h]"
);
// LINE 572:
	asm( 
"	      00467d83    mov eax,lParam"
"	      00467d86    shr eax,10h"
"	      00467d89    and eax,0FFFFh"
"	      00467d8e    movzx eax,ax"
"	      00467d91    push eax"
"	      00467d92    mov eax,lParam"
"	      00467d95    and eax,0FFFFh"
"	      00467d9a    push eax"
"	      00467d9b    mov eax,this"
"	      00467d9e    mov ecx,this"
"	      00467da1    mov ecx,[ecx+10h]"
"	      00467da4    mov edx,[ecx]"
"	      00467da6    mov ecx,[eax+10h]"
"	      00467da9    call dword ptr [edx+3Ch]"
);
// LINE 573:
	asm( 
"	      00467dac    xor eax,eax"
"	      00467dae    jmp near ptr 00468013h"
);
// LINE 576:
	asm( 
"	      00467db3    mov eax,Window"
"	      00467db6    push eax"
"	      00467db7    call dword ptr ds:[6C38A0h]"
);
// LINE 577:
	asm( 
"	      00467dbd    mov eax,lParam"
"	      00467dc0    shr eax,10h"
"	      00467dc3    and eax,0FFFFh"
"	      00467dc8    movzx eax,ax"
"	      00467dcb    push eax"
"	      00467dcc    mov eax,lParam"
"	      00467dcf    and eax,0FFFFh"
"	      00467dd4    push eax"
"	      00467dd5    mov eax,this"
"	      00467dd8    mov ecx,this"
"	      00467ddb    mov ecx,[ecx+10h]"
"	      00467dde    mov edx,[ecx]"
"	      00467de0    mov ecx,[eax+10h]"
"	      00467de3    call dword ptr [edx+44h]"
);
// LINE 578:
	asm( 
"	      00467de6    xor eax,eax"
"	      00467de8    jmp near ptr 00468013h"
);
// LINE 581:
	asm( 
"	      00467ded    call dword ptr ds:[6C38A4h]"
"	      00467df3    cmp eax,Window"
"	      00467df6    jne near ptr 00467E02h"
);
// LINE 582:
	asm( 
"	      00467dfc    call dword ptr ds:[6C38A8h]"
);
// LINE 583:
	asm( 
"	      00467e02    mov eax,lParam"
"	      00467e05    shr eax,10h"
"	      00467e08    and eax,0FFFFh"
"	      00467e0d    movzx eax,ax"
"	      00467e10    push eax"
"	      00467e11    mov eax,lParam"
"	      00467e14    and eax,0FFFFh"
"	      00467e19    push eax"
"	      00467e1a    mov eax,this"
"	      00467e1d    mov ecx,this"
"	      00467e20    mov ecx,[ecx+10h]"
"	      00467e23    mov edx,[ecx]"
"	      00467e25    mov ecx,[eax+10h]"
"	      00467e28    call dword ptr [edx+40h]"
);
// LINE 584:
	asm( 
"	      00467e2b    xor eax,eax"
"	      00467e2d    jmp near ptr 00468013h"
);
// LINE 587:
	asm( 
"	      00467e32    call dword ptr ds:[6C38A4h]"
"	      00467e38    cmp eax,Window"
"	      00467e3b    jne near ptr 00467E47h"
);
// LINE 588:
	asm( 
"	      00467e41    call dword ptr ds:[6C38A8h]"
);
// LINE 589:
	asm( 
"	      00467e47    mov eax,lParam"
"	      00467e4a    shr eax,10h"
"	      00467e4d    and eax,0FFFFh"
"	      00467e52    movzx eax,ax"
"	      00467e55    push eax"
"	      00467e56    mov eax,lParam"
"	      00467e59    and eax,0FFFFh"
"	      00467e5e    push eax"
"	      00467e5f    mov eax,this"
"	      00467e62    mov ecx,this"
"	      00467e65    mov ecx,[ecx+10h]"
"	      00467e68    mov edx,[ecx]"
"	      00467e6a    mov ecx,[eax+10h]"
"	      00467e6d    call dword ptr [edx+48h]"
);
// LINE 590:
	asm( 
"	      00467e70    xor eax,eax"
"	      00467e72    jmp near ptr 00468013h"
);
// LINE 593:
	asm( 
"	      00467e77    mov eax,lParam"
"	      00467e7a    and eax,0FFFFh"
"	      00467e7f    cmp eax,1"
"	      00467e82    jne near ptr 00467E9Fh"
);
// LINE 594:
	asm( 
"	      00467e88    push 0"
"	      00467e8a    mov eax,this"
"	      00467e8d    mov eax,[eax]"
"	      00467e8f    mov ecx,this"
"	      00467e92    call dword ptr [eax+0Ch]"
);
// LINE 595:
	asm( 
"	      00467e95    mov eax,1"
"	      00467e9a    jmp near ptr 00468013h"
);
// LINE 597:
	asm( 
"	      00467e9f    jmp near ptr 00467FF5h"
);
// LINE 601:
	asm( 
"	      00467ea4    mov eax,Window"
"	      00467ea7    cmp wParam,eax"
"	      00467eaa    jne near ptr 00467EB7h"
);
// LINE 602:
	asm( 
"	      00467eb0    xor eax,eax"
"	      00467eb2    jmp near ptr 00468013h"
);
// LINE 606:
	asm( 
"	      00467eb7    mov eax,this"
"	      00467eba    cmp dword ptr [eax+14h],0"
"	      00467ebe    je near ptr 00467ED5h"
);
// LINE 607:
	asm( 
"	      00467ec4    mov eax,this"
"	      00467ec7    mov ecx,this"
"	      00467eca    mov ecx,[ecx+14h]"
"	      00467ecd    mov edx,[ecx]"
"	      00467ecf    mov ecx,[eax+14h]"
"	      00467ed2    call dword ptr [edx+7Ch]"
);
// LINE 608:
	asm( 
"	      00467ed5    xor eax,eax"
"	      00467ed7    jmp near ptr 00468013h"
);
// LINE 609:
	asm( 
"	      00467edc    jmp near ptr 00467FF5h"
"	      00467ee1    cmp dword ptr [ebp-8],10h"
"	      00467ee5    ja near ptr 00467F21h"
"	      00467eeb    je near ptr 00467BD8h"
"	      00467ef1    sub dword ptr [ebp-8],2"
"	      00467ef5    cmp dword ptr [ebp-8],5"
"	      00467ef9    ja near ptr 00467FF5h"
"	      00467eff    mov eax,[ebp-8]"
"	      00467f02    jmp dword ptr [eax*4+467F09h]"
"	      00467f09    (bad)"
"	      00467f0c    add bh,bh"
"	      00467f0e    jnp short 00467F56h"
"	      00467f10    add ch,dh"
"	      00467f12    jg short 00467F5Ah"
"	      00467f14    add bh,bh"
"	      00467f16    jnp short 00467F5Eh"
"	      00467f18    add ch,dh"
"	      00467f1a    jg short 00467F62h"
"	      00467f1c    add [ecx-7CFFB984h],bl"
"	      00467f22    jge short 00467F1Ch"
"	      00467f24    and [edi],cl"
"	      00467f26    xchg edx,ds:[0F000000h]"
"	      00467f2c    test [esi-1],al"
"	      00467f2f    (bad)"
"	      00467f31    cmp dword ptr [ebp-8],1Ch"
"	      00467f35    je near ptr 00467EB7h"
"	      00467f3b    jmp near ptr 00467FF5h"
"	      00467f40    cmp dword ptr [ebp-8],100h"
"	      00467f47    ja near ptr 00467F62h"
"	      00467f4d    je near ptr 00467CDFh"
"	      00467f53    cmp dword ptr [ebp-8],24h"
"	      00467f57    je near ptr 00467C11h"
"	      00467f5d    jmp near ptr 00467FF5h"
"	      00467f62    cmp dword ptr [ebp-8],201h"
"	      00467f69    ja near ptr 00467FA4h"
"	      00467f6f    je near ptr 00467D79h"
"	      00467f75    sub dword ptr [ebp-8],101h"
"	      00467f7c    cmp dword ptr [ebp-8],4"
"	      00467f80    ja near ptr 00467FF5h"
"	      00467f86    mov eax,[ebp-8]"
"	      00467f89    jmp dword ptr [eax*4+467F90h]"
"	      00467f90    sti"
"	      00467f91    jl short 00467FD9h"
"	      00467f93    add bl,al"
"	      00467f95    jl short 00467FDDh"
"	      00467f97    add ch,dh"
"	      00467f99    jg short 00467FE1h"
"	      00467f9b    add [edi],dl"
"	      00467f9d    jge short 00467FE5h"
"	      00467f9f    add [ebx+7Dh],dl"
"	      00467fa2    inc esi"
"	      00467fa3    add [ecx+30FF87Dh],al"
"	      00467fa9    add [eax],al"
"	      00467fab    ja near ptr 00467FE3h"
"	      00467fb1    je near ptr 00467EB7h"
"	      00467fb7    cmp dword ptr [ebp-8],202h"
"	      00467fbe    je near ptr 00467DEDh"
"	      00467fc4    cmp dword ptr [ebp-8],204h"
"	      00467fcb    je near ptr 00467DB3h"
"	      00467fd1    cmp dword ptr [ebp-8],205h"
"	      00467fd8    je near ptr 00467E32h"
"	      00467fde    jmp near ptr 00467FF5h"
"	      00467fe3    cmp dword ptr [ebp-8],311h"
"	      00467fea    je near ptr 00467EA4h"
"	      00467ff0    jmp near ptr 00467FF5h"
);
// LINE 610:
	asm( 
"	      00467ff5    mov eax,lParam"
"	      00467ff8    push eax"
"	      00467ff9    mov eax,wParam"
"	      00467ffc    push eax"
"	      00467ffd    mov eax,Message"
"	      00468000    push eax"
"	      00468001    mov eax,Window"
"	      00468004    push eax"
"	      00468005    mov eax,this"
"	      00468008    push eax"
"	      00468009    call 00481647h"
"	      0046800e    jmp near ptr 00468013h"
);
// LINE 611:
	asm( 
"	      00468013    pop edi"
"	      00468014    pop esi"
"	      00468015    pop ebx"
"	      00468016    leave"
"	      00468017    ret 14h"
);
}



// Contribution: 1:00067020-00067037 Module: 43, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00067040-00067057 Module: 43, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00067060-00067098 Module: 43, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00468060
// GameWindow::`scalar deleting destructor'



// Contribution: 2:00001470-000014cb Module: 43, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590470
// ??_7GameWindow@@6B@


// Contribution: 3:00002314-00002351 Module: 43, 4 byte alignment, initialized_data, read, write, 
