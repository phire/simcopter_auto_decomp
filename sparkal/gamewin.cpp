// Module: gamewin.obj
// Source: C:\Copter\source\sparkal\gamewin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class GameWindow (forward reference);
class GameWindow : public CSparkalWindow
{
public:
	void GameWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	virtual void ~GameWindow();
	// vtable: 52
	intro int32_t Initialize();
	// vtable: 56
	intro unsigned long CreateSparkalWindow();
	virtual unsigned long SwapBuffer();
	virtual unsigned long Draw();
	// vtable: 60
	intro unsigned long MakePalette(const struct SparkalColor*);
	virtual void UpdatePalette(long, long, struct SparkalColor*);
	// vtable: 64
	intro void ProcessWindowMove();
	// vtable: 68
	intro void CenterWindow();
	// vtable: 72
	intro void PlaceWindowRect(class MRect*);
	// vtable: 76
	intro int32_t PrepareForSwitchToWindowedMode();
	// vtable: 80
	intro int32_t CompleteSwitchToWindowedMode();
	// vtable: 84
	intro int32_t PrepareForSwitchToFullScreenMode();
	// vtable: 88
	intro int32_t CompleteSwitchToFullScreenMode();
	// calltype: NearStd
	virtual long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long);
protected:
	class MRect rectWindowDesired;
	class MRect rectWindow;
	class MRect rectWindowClient;
	char * szCaption;
};

// Type: unsigned long;

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: char *;

// Type: struct tagWNDCLASSA;
struct tagWNDCLASSA{
	uint32_t style;
	long (*lpfnWndProc)(void * __ptr32, uint32_t, uint32_t, long);
	int32_t cbClsExtra;
	int32_t cbWndExtra;
	void * __ptr32 hInstance;
	void * __ptr32 hIcon;
	void * __ptr32 hCursor;
	void * __ptr32 hbrBackground;
	char * lpszMenuName;
	char * lpszClassName;
};

// Type: void;

// Type: struct tagRECT;
struct tagRECT{
	long left;
	long top;
	long right;
	long bottom;
};

// Type: int32_t;

// Type: struct GameWindow::MakePalette::__unnamed;
struct GameWindow::MakePalette::__unnamed{
	unsigned short Version;
	unsigned short NumberOfEntries;
	struct tagPALETTEENTRY aEntries[256];
};

// Type: void * __ptr32;

// Type: uint32_t;

// Type: long;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: struct tagMINMAXINFO (forward reference);
struct tagMINMAXINFO{
	struct tagPOINT ptReserved;
	struct tagPOINT ptMaxSize;
	struct tagPOINT ptMaxPosition;
	struct tagPOINT ptMinTrackSize;
	struct tagPOINT ptMaxTrackSize;
};

// Type: class CSparkalWindow (forward reference);
class CSparkalWindow{
public:
	void CSparkalWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	void CSparkalWindow();
	// vtable: 0
	intro void ~CSparkalWindow();
	void * __ptr32 GetPlatformData();
	long GetWidth();
	long GetHeight();
	// vtable: 4
	intro unsigned long GetClientSize(long *, long *);
	class ScreenBuffer* GetBackBuffer();
	class ScreenBuffer* SetBackBuffer(class ScreenBuffer*);
	class ICommander* GetCommander();
	class ICommander* SetCommander(class ICommander*);
	// vtable: 8
	intro unsigned long Draw();
	// vtable: 12
	intro unsigned long SetCursor(unsigned long);
	// vtable: 16
	intro unsigned long SetCursorFromIndex(int32_t);
	// vtable: 20
	intro unsigned long LoadGameCursors();
	// vtable: 24
	intro void FreeGameCursors();
	unsigned long DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *);
	// vtable: 28
	intro unsigned long Sleep();
	// vtable: 32
	intro unsigned long WakeUp();
	unsigned long ScreenScroll(long, long, long, long, long, long);
	unsigned long RectSlideUp(long, long, long, long);
	// vtable: 36
	intro unsigned long SwapBuffer(long, long, long, long);
	// vtable: 40
	intro unsigned long SwapBuffer();
	// vtable: 44
	intro void UpdatePalette(long, long, struct SparkalColor*);
protected:
	long mHeight;
	long mWidth;
	unsigned long mStyle;
	class ICommander* mpCommander;
	class ScreenBuffer* mpBackBuffer;
	void * __ptr32 mWindow;
	// vtable: 48
	// calltype: NearStd
	intro long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long);
	void * __ptr32 mPalette;
	void * __ptr32 mhCurrentCursor;
	void * __ptr32 mhCustomCursor;
	void * __ptr32 mCursors[16];
};

// Type: class CSparkalWindow;
class CSparkalWindow{
public:
	void CSparkalWindow(unsigned long, unsigned long, unsigned long, const struct SparkalColor*, char *);
	void CSparkalWindow();
	// vtable: 0
	intro void ~CSparkalWindow();
	void * __ptr32 GetPlatformData();
	long GetWidth();
	long GetHeight();
	// vtable: 4
	intro unsigned long GetClientSize(long *, long *);
	class ScreenBuffer* GetBackBuffer();
	class ScreenBuffer* SetBackBuffer(class ScreenBuffer*);
	class ICommander* GetCommander();
	class ICommander* SetCommander(class ICommander*);
	// vtable: 8
	intro unsigned long Draw();
	// vtable: 12
	intro unsigned long SetCursor(unsigned long);
	// vtable: 16
	intro unsigned long SetCursorFromIndex(int32_t);
	// vtable: 20
	intro unsigned long LoadGameCursors();
	// vtable: 24
	intro void FreeGameCursors();
	unsigned long DrawBufferText(const const char*, unsigned long, long, long, long *, long *, long *, long *);
	// vtable: 28
	intro unsigned long Sleep();
	// vtable: 32
	intro unsigned long WakeUp();
	unsigned long ScreenScroll(long, long, long, long, long, long);
	unsigned long RectSlideUp(long, long, long, long);
	// vtable: 36
	intro unsigned long SwapBuffer(long, long, long, long);
	// vtable: 40
	intro unsigned long SwapBuffer();
	// vtable: 44
	intro void UpdatePalette(long, long, struct SparkalColor*);
protected:
	long mHeight;
	long mWidth;
	unsigned long mStyle;
	class ICommander* mpCommander;
	class ScreenBuffer* mpBackBuffer;
	void * __ptr32 mWindow;
	// vtable: 48
	// calltype: NearStd
	intro long MySparkalWindowProc(void * __ptr32, uint32_t, uint32_t, long);
	void * __ptr32 mPalette;
	void * __ptr32 mhCurrentCursor;
	void * __ptr32 mhCustomCursor;
	void * __ptr32 mCursors[16];
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:00065f70-00067019 Module: 43, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00466f70
void GameWindow::GameWindow(unsigned long Width, unsigned long Height, unsigned long Style, const struct SparkalColor* pColors, char * Caption) {
	struct tagWNDCLASSA ClassInfo;


	__asm        mov    ecx, this;
	__asm        call   CSparkalWindow::CSparkalWindow;
	__asm        jmp    near ptr 0x00466F89;

	__asm        jmp    near ptr 0x00466F8E;

	__asm        jmp    near ptr 0x00466F93;

	__asm        jmp    near ptr 0x00466F98;

	__asm        jmp    near ptr 0x00466F9D;

	__asm        jmp    near ptr 0x00466FA2;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590470;
// LINE 40:
	__asm        mov    eax, Width;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 41:
	__asm        mov    eax, Height;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 42:
	__asm        mov    eax, Style;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 44:
	__asm        cmp    Caption, 0;
	__asm        je     _Ta7;
// LINE 45:
	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 46:
	__asm        mov    eax, Caption;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 48:
	__asm        jmp    _Td1;
// LINE 49:
_Ta7:
	__asm        push   4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 50:
	__asm        push   0x599314;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 53:
_Td1:
	__asm        lea    eax, ClassInfo.style;
	__asm        push   eax;
	__asm        push   0x599AB8;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3878];
	__asm        test   eax, eax;
	__asm        jne    _T14c;
// LINE 54:
	__asm        mov    ClassInfo.hCursor, 0;
// LINE 55:
	__asm        mov    ClassInfo.lpszMenuName, 0x599318;
// LINE 56:
	__asm        mov    ClassInfo.lpszClassName, 0x599AB8;
// LINE 57:
	__asm        push   4;
	__asm        call   dword ptr ds:[0x6C3560];
	__asm        mov    ClassInfo.hbrBackground, eax;
// LINE 58:
	__asm        mov    eax, _ghWindowsInstance;
	__asm        mov    ClassInfo.hInstance, eax;
// LINE 59:
	__asm        mov    ClassInfo.style, 0x20;
// LINE 60:
	__asm        mov    ClassInfo.lpfnWndProc, 0x4815DD;
// LINE 61:
	__asm        mov    ClassInfo.cbWndExtra, 4;
// LINE 62:
	__asm        mov    ClassInfo.cbClsExtra, 0;
// LINE 63:
	__asm        push   0x7F00;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C381C];
	__asm        mov    ClassInfo.hIcon, eax;
// LINE 64:
	__asm        lea    eax, ClassInfo.style;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3814];
// LINE 67:
_T14c:
	__asm        mov    ecx, this;
	__asm        call   GameWindow::CreateSparkalWindow;
// LINE 68:
	__asm        mov    eax, pColors;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GameWindow::MakePalette;
// LINE 70:
	__asm        jmp    near ptr 0x004670D5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004670df
unsigned long GameWindow::CreateSparkalWindow() {
	unsigned long dwWindowStyle;
	struct tagRECT rectWindowForAdjust;

// LINE 83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T23;
// LINE 84:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T1e7;
// LINE 86:
_T23:
	__asm        mov    rectWindowForAdjust.top, 0;
// LINE 87:
	__asm        mov    rectWindowForAdjust.left, 0;
// LINE 88:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    rectWindowForAdjust.right, eax;
// LINE 89:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    rectWindowForAdjust.bottom, eax;
// LINE 91:
	__asm        mov    dwWindowStyle, 0;
// LINE 92:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xC], 1;
	__asm        je     _T63;
// LINE 93:
	__asm        or     dwWindowStyle, 0x40000;
// LINE 94:
	__asm        jmp    _T83;
_T63:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xC], 4;
	__asm        je     _T7c;
// LINE 95:
	__asm        or     dwWindowStyle, 0x800000;
// LINE 96:
	__asm        jmp    _T83;
// LINE 97:
_T7c:
	__asm        or     dwWindowStyle, 0x80000000;
// LINE 98:
_T83:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xC], 2;
	__asm        je     _T97;
// LINE 99:
	__asm        or     dwWindowStyle, 0xC00000;
// LINE 100:
_T97:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xC], 8;
	__asm        je     _Tab;
// LINE 101:
	__asm        or     dwWindowStyle, 0xC80000;
// LINE 102:
_Tab:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xC], 0x10;
	__asm        je     _Tbf;
// LINE 103:
	__asm        or     dwWindowStyle, 0xB0000;
// LINE 107:
_Tbf:
	__asm        push   0x40000;
	__asm        push   0;
	__asm        mov    eax, dwWindowStyle;
	__asm        push   eax;
	__asm        lea    eax, rectWindowForAdjust.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C387C];
// LINE 111:
	__asm        mov    eax, rectWindowForAdjust.left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 112:
	__asm        mov    eax, rectWindowForAdjust.top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 113:
	__asm        mov    eax, rectWindowForAdjust.right;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 114:
	__asm        mov    eax, rectWindowForAdjust.bottom;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 115:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 116:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x68;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 130:
	__asm        jmp    near ptr 0x00467216;

	__asm        jmp    near ptr 0x0046721B;

	__asm        push   0;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, dwWindowStyle;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        push   0x599AB8;
	__asm        push   0x40000;
	__asm        call   dword ptr ds:[0x6C3808];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 132:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1dd;
// LINE 134:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
// LINE 135:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3820];
// LINE 136:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3864];
// LINE 137:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e7;
// LINE 139:
_T1dd:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T1e7;
// LINE 141:
_T1e7:
}

// FUNCTION: COPTER_D 0x004672cb
void GameWindow::~GameWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590470;
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 151:
	__asm        jmp    near ptr 0x00467303;

	__asm        mov    ecx, this;
	__asm        call   CSparkalWindow::~CSparkalWindow;
}

// FUNCTION: COPTER_D 0x00467310
int32_t GameWindow::Initialize() {
// LINE 159:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 160:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00467331;
// LINE 161:
}

// FUNCTION: COPTER_D 0x00467336
unsigned long GameWindow::Draw() {
// LINE 172:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T4e;
// LINE 173:
_T19:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        je     _T37;

	__asm        jmp    _T19;
// LINE 174:
_T37:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x1C];
// LINE 176:
_T4e:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046738B;
// LINE 177:
}

// FUNCTION: COPTER_D 0x00467390
unsigned long GameWindow::SwapBuffer() {
// LINE 185:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T4e;
// LINE 186:
_T19:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        je     _T37;

	__asm        jmp    _T19;
// LINE 187:
_T37:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x1C];
// LINE 189:
_T4e:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004673E5;
// LINE 190:
}

// FUNCTION: COPTER_D 0x004673ea
unsigned long GameWindow::MakePalette(const struct SparkalColor* pColors) {
	struct GameWindow::MakePalette::__unnamed LogPalette;
	void * __ptr32 hdc;
	int32_t StaticCount;
	uint32_t PaletteUse;
	int32_t End;
	int32_t Start;
	int32_t Counter;

// LINE 199:
	__asm        cmp    pColors, 0;
	__asm        jne    _T26;
// LINE 200:
	__asm        mov    eax, 0x80000000;
	__asm        jmp    _T2b0;
// LINE 201:
_T26:
	__asm        xor    eax, eax;
	__asm        jmp    _T2b0;
// LINE 208:
	__asm        mov    LogPalette.Version, 0x300;
	__asm        mov    LogPalette.NumberOfEntries, 0x100;
	__asm        lea    edi, LogPalette.aEntries[0].peRed;
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x100;
	__asm        rep stosd;
// LINE 212:
	__asm        mov    StaticCount, 0x14;
// LINE 213:
	__asm        mov    PaletteUse, 1;
// LINE 215:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 216:
	__asm        cmp    hdc, 0;
	__asm        je     _Tb1;
// LINE 217:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3588];
	__asm        mov    PaletteUse, eax;
// LINE 218:
	__asm        push   0x18;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3590];
	__asm        mov    StaticCount, eax;
// LINE 219:
	__asm        lea    eax, LogPalette.aEntries[0].peRed;
	__asm        push   eax;
	__asm        push   0x100;
	__asm        push   0;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3580];
// LINE 220:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 224:
_Tb1:
	__asm        mov    eax, StaticCount;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    Start, eax;
// LINE 225:
	__asm        mov    ecx, 0x100;
	__asm        mov    eax, StaticCount;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        sub    ecx, eax;
	__asm        mov    End, ecx;
// LINE 228:
	__asm        cmp    PaletteUse, 2;
	__asm        jne    _Te8;
// LINE 229:
	__asm        mov    Start, 1;
// LINE 230:
	__asm        mov    End, 0xFF;
// LINE 234:
_Te8:
	__asm        mov    Counter, 0;
	__asm        jmp    _Tf7;
_Tf4:
	__asm        inc    Counter;
_Tf7:
	__asm        mov    eax, Counter;
	__asm        cmp    Start, eax;
	__asm        jle    _T113;
// LINE 235:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x415], 0;
	__asm        jmp    _Tf4;
// LINE 238:
_T113:
	__asm        cmp    pColors, 0;
	__asm        je     _T181;
// LINE 239:
	__asm        jmp    _T125;
_T122:
	__asm        inc    Counter;
_T125:
	__asm        mov    eax, End;
	__asm        cmp    Counter, eax;
	__asm        jge    _T17c;
// LINE 240:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x416], al;
// LINE 241:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+1];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x417], al;
// LINE 242:
	__asm        mov    eax, Counter;
	__asm        mov    ecx, pColors;
	__asm        mov    al, [ecx+eax*4+2];
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x418], al;
// LINE 243:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x415], 5;
// LINE 244:
	__asm        jmp    _T122;
// LINE 246:
_T17c:
	__asm        jmp    _T1cc;
// LINE 247:
_T181:
	__asm        jmp    _T189;
_T186:
	__asm        inc    Counter;
_T189:
	__asm        mov    eax, End;
	__asm        cmp    Counter, eax;
	__asm        jge    _T1cc;
// LINE 248:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x416], al;
// LINE 249:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x417], al;
// LINE 250:
	__asm        mov    al, reinterpret_cast<uint8_t>(Counter);
	__asm        mov    ecx, Counter;
	__asm        mov    [ebp+ecx*4-0x418], al;
// LINE 251:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x415], 5;
// LINE 252:
	__asm        jmp    _T186;
// LINE 256:
_T1cc:
	__asm        jmp    _T1d4;
_T1d1:
	__asm        inc    Counter;
_T1d4:
	__asm        cmp    Counter, 0x100;
	__asm        jge    _T1f1;
// LINE 257:
	__asm        mov    eax, Counter;
	__asm        mov    byte ptr [ebp+eax*4-0x415], 0;
	__asm        jmp    _T1d1;
// LINE 260:
_T1f1:
	__asm        lea    eax, LogPalette.Version;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C357C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    hdc, eax;
// LINE 264:
	__asm        cmp    hdc, 0;
	__asm        je     _T2a9;
// LINE 265:
	__asm        push   1;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3584];
// LINE 266:
	__asm        push   1;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3574];
// LINE 267:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3570];
// LINE 268:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3578];
// LINE 270:
	__asm        lea    eax, LogPalette.aEntries[0].peRed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        call   CheckIdentityPalette;
	__asm        add    esp, 0xC;
	__asm        test   eax, eax;
	__asm        jne    _T295;
// LINE 271:
	__asm        push   0;
	__asm        push   0x59931C;
	__asm        push   0x599324;
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3870];
// LINE 273:
_T295:
	__asm        mov    eax, hdc;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 276:
_T2a9:
	__asm        xor    eax, eax;
	__asm        jmp    _T2b0;
// LINE 277:
_T2b0:
}

// FUNCTION: COPTER_D 0x004676a1
void GameWindow::UpdatePalette(long start, long count, struct SparkalColor* pColor) {
// LINE 287:
	__asm        mov    eax, pColor;
	__asm        push   eax;
	__asm        mov    eax, count;
	__asm        push   eax;
	__asm        mov    eax, start;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x14];
	__asm        call   CBackBuffer::UpdatePalette;
// LINE 289:
	__asm        jmp    near ptr 0x004676C9;
}

// FUNCTION: COPTER_D 0x004676d0
void GameWindow::ProcessWindowMove() {
	struct tagRECT rectWindowTemp;

// LINE 305:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B8];
// LINE 306:
	__asm        mov    eax, rectWindowTemp.left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 307:
	__asm        mov    eax, rectWindowTemp.top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 308:
	__asm        mov    eax, rectWindowTemp.right;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 309:
	__asm        mov    eax, rectWindowTemp.bottom;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 312:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C382C];
// LINE 313:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E0];
// LINE 314:
	__asm        lea    eax, rectWindowTemp.right;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E0];
// LINE 315:
	__asm        mov    eax, rectWindowTemp.left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 316:
	__asm        mov    eax, rectWindowTemp.top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
// LINE 317:
	__asm        mov    eax, rectWindowTemp.right;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
// LINE 318:
	__asm        mov    eax, rectWindowTemp.bottom;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 323:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _Td4;
// LINE 324:
	__asm        mov    eax, this;
	__asm        add    eax, 0x88;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x80];
// LINE 326:
_Td4:
	__asm        jmp    near ptr 0x004677A9;
}

// FUNCTION: COPTER_D 0x004677ae
int32_t GameWindow::PrepareForSwitchToWindowedMode() {
// LINE 335:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004677C4;
// LINE 340:
}

// FUNCTION: COPTER_D 0x004677c9
int32_t GameWindow::CompleteSwitchToWindowedMode() {
	struct tagRECT rectWindowTempWindows;
	unsigned long dwStyle;

// LINE 353:
	__asm        push   0xFFFFFFF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        mov    dwStyle, eax;
// LINE 354:
	__asm        and    dwStyle, 0x7FFFFFFF;
// LINE 355:
	__asm        or     dwStyle, 0x10C60000;
// LINE 356:
	__asm        mov    eax, dwStyle;
	__asm        push   eax;
	__asm        push   0xFFFFFFF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
// LINE 358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, rectWindowTempWindows.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38AC];
// LINE 360:
	__asm        push   0xFFFFFFEC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B0];
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        push   0xFFFFFFF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        push   eax;
	__asm        lea    eax, rectWindowTempWindows.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C387C];
// LINE 363:
	__asm        mov    eax, rectWindowTempWindows.left;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 364:
	__asm        mov    eax, rectWindowTempWindows.top;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 365:
	__asm        mov    eax, rectWindowTempWindows.right;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 366:
	__asm        mov    eax, rectWindowTempWindows.bottom;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 368:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x68;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 373:
	__asm        jmp    near ptr 0x004678C5;

	__asm        jmp    near ptr 0x004678CA;

	__asm        push   0x14;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E8];
// LINE 380:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00467913;
// LINE 382:
}

// FUNCTION: COPTER_D 0x00467918
int32_t GameWindow::PrepareForSwitchToFullScreenMode() {
// LINE 392:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046792E;
// LINE 394:
}

// FUNCTION: COPTER_D 0x00467933
int32_t GameWindow::CompleteSwitchToFullScreenMode() {
	unsigned long dwStyle;
	struct tagRECT rectWindowTemp;

// LINE 409:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 410:
	__asm        mov    dwStyle, 0x90000000;
// LINE 411:
	__asm        mov    eax, dwStyle;
	__asm        push   eax;
	__asm        push   0xFFFFFFF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C380C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x1C], eax;
// LINE 414:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x004679A6;
// LINE 415:
	__asm        mov    eax, this;
	__asm        add    eax, 0x78;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x68;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 416:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38AC];
// LINE 418:
	__asm        push   0xFFFFFFEC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3868];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B0];
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, dwStyle;
	__asm        push   eax;
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C387C];
// LINE 424:
	__asm        push   0x14;
	__asm        mov    eax, rectWindowTemp.bottom;
	__asm        sub    eax, rectWindowTemp.top;
	__asm        push   eax;
	__asm        mov    eax, rectWindowTemp.right;
	__asm        sub    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E8];
// LINE 431:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00467A43;
// LINE 433:
}

// FUNCTION: COPTER_D 0x00467a48
void GameWindow::CenterWindow() {
	unsigned long nWindowWidth;
	unsigned long nScreenWidth;
	unsigned long nWindowHeight;
	unsigned long nScreenHeight;

// LINE 443:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    nScreenWidth, eax;
	__asm        jmp    near ptr 0x00467A64;
// LINE 444:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    nScreenHeight, eax;
	__asm        jmp    near ptr 0x00467A74;
// LINE 445:
	__asm        jmp    near ptr 0x00467A79;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    nWindowWidth, eax;
// LINE 446:
	__asm        jmp    near ptr 0x00467A90;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x7C];
	__asm        mov    nWindowHeight, eax;
// LINE 449:
	__asm        mov    eax, nScreenWidth;
	__asm        shr    eax, 1;
	__asm        mov    ecx, nWindowWidth;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 450:
	__asm        mov    eax, nScreenHeight;
	__asm        shr    eax, 1;
	__asm        mov    ecx, nWindowHeight;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 453:
	__asm        push   0;
	__asm        mov    eax, nWindowHeight;
	__asm        push   eax;
	__asm        mov    eax, nWindowWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3828];
// LINE 455:
	__asm        jmp    near ptr 0x00467AF4;
}

// FUNCTION: COPTER_D 0x00467af9
void GameWindow::PlaceWindowRect(class MRect* rectWindowToPlace) {
	unsigned long nWindowWidth;
	unsigned long nScreenWidth;
	unsigned long nWindowHeight;
	unsigned long nScreenHeight;

// LINE 471:
	__asm        push   0;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    nScreenWidth, eax;
	__asm        jmp    near ptr 0x00467B15;
// LINE 472:
	__asm        push   1;
	__asm        call   dword ptr ds:[0x6C3810];
	__asm        mov    nScreenHeight, eax;
	__asm        jmp    near ptr 0x00467B25;
// LINE 473:
	__asm        jmp    near ptr 0x00467B2A;

	__asm        mov    eax, rectWindowToPlace;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, rectWindowToPlace;
	__asm        sub    eax, [ecx];
	__asm        mov    nWindowWidth, eax;
// LINE 474:
	__asm        jmp    near ptr 0x00467B3D;

	__asm        mov    eax, rectWindowToPlace;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, rectWindowToPlace;
	__asm        sub    eax, [ecx+4];
	__asm        mov    nWindowHeight, eax;
// LINE 477:
	__asm        mov    eax, nScreenWidth;
	__asm        shr    eax, 1;
	__asm        mov    ecx, nWindowWidth;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, rectWindowToPlace;
	__asm        mov    [ecx], eax;
// LINE 478:
	__asm        mov    eax, nScreenHeight;
	__asm        shr    eax, 1;
	__asm        mov    ecx, nWindowHeight;
	__asm        shr    ecx, 1;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, rectWindowToPlace;
	__asm        mov    [ecx+4], eax;
// LINE 479:
	__asm        mov    eax, rectWindowToPlace;
	__asm        mov    eax, [eax];
	__asm        add    eax, nWindowWidth;
	__asm        mov    ecx, rectWindowToPlace;
	__asm        mov    [ecx+8], eax;
// LINE 480:
	__asm        mov    eax, rectWindowToPlace;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, nWindowHeight;
	__asm        mov    ecx, rectWindowToPlace;
	__asm        mov    [ecx+0xC], eax;
// LINE 482:
	__asm        jmp    near ptr 0x00467B95;
}

// FUNCTION: COPTER_D 0x00467b9c
long GameWindow::MySparkalWindowProc(void * __ptr32 Window, uint32_t Message, uint32_t wParam, long lParam) {
	struct tagMINMAXINFO* lpMinMaxInfo;

// LINE 496:
	__asm        mov    eax, Message;
	__asm        cmp    g_uTWKMessageNum, eax;
	__asm        jne    _T31;
// LINE 497:
	__asm        push   0x599348;
	__asm        call   TWKReadAllFiles;
	__asm        add    esp, 4;
// LINE 498:
	__asm        call   TWKUpdate;
// LINE 499:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 502:
_T31:
	__asm        mov    eax, Message;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T345;
// LINE 504:
_T3c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x4C];
// LINE 505:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 508:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 509:
	__asm        jmp    _T459;
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x40];
// LINE 514:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 517:
	__asm        mov    eax, lParam;
	__asm        mov    lpMinMaxInfo, eax;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x68];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x20], eax;
	__asm        jmp    near ptr 0x00467C2E;

	__asm        mov    eax, lpMinMaxInfo;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, lpMinMaxInfo;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+8], eax;
// LINE 523:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x6C];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x00467C5D;

	__asm        mov    eax, lpMinMaxInfo;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, lpMinMaxInfo;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0xC], eax;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x10], eax;
// LINE 528:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x6C];
	__asm        mov    ecx, lpMinMaxInfo;
	__asm        mov    [ecx+0x14], eax;
// LINE 529:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 530:
	__asm        jmp    _T459;
// LINE 533:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T11b;
// LINE 534:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x24];
// LINE 535:
_T11b:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 536:
	__asm        jmp    _T459;
// LINE 539:
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x38];
// LINE 540:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 543:
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x2C];
// LINE 544:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 547:
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x34];
// LINE 548:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 559:
	__asm        cmp    wParam, 0x73;
	__asm        jne    _T19b;
// LINE 560:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x4C];
// LINE 561:
	__asm        jmp    _T1b0;
// LINE 562:
_T19b:
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x2C];
// LINE 563:
_T1b0:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 566:
	__asm        cmp    wParam, 0x73;
	__asm        je     _T1d6;
// LINE 567:
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x34];
// LINE 568:
_T1d6:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 571:
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38A0];
// LINE 572:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x3C];
// LINE 573:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 576:
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38A0];
// LINE 577:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x44];
// LINE 578:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 581:
	__asm        call   dword ptr ds:[0x6C38A4];
	__asm        cmp    eax, Window;
	__asm        jne    _T266;
// LINE 582:
	__asm        call   dword ptr ds:[0x6C38A8];
// LINE 583:
_T266:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x40];
// LINE 584:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 587:
	__asm        call   dword ptr ds:[0x6C38A4];
	__asm        cmp    eax, Window;
	__asm        jne    _T2ab;
// LINE 588:
	__asm        call   dword ptr ds:[0x6C38A8];
// LINE 589:
_T2ab:
	__asm        mov    eax, lParam;
	__asm        shr    eax, 0x10;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        push   eax;
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx+0x48];
// LINE 590:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 593:
	__asm        mov    eax, lParam;
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 1;
	__asm        jne    _T303;
// LINE 594:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
// LINE 595:
	__asm        mov    eax, 1;
	__asm        jmp    _T477;
// LINE 597:
_T303:
	__asm        jmp    _T459;
// LINE 601:
	__asm        mov    eax, Window;
	__asm        cmp    wParam, eax;
	__asm        jne    _T31b;
// LINE 602:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 606:
_T31b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T339;
// LINE 607:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x7C];
// LINE 608:
_T339:
	__asm        xor    eax, eax;
	__asm        jmp    _T477;
// LINE 609:
	__asm        jmp    _T459;
_T345:
	__asm        cmp    dword ptr [ebp-8], 0x10;
	__asm        ja     _T385;

	__asm        je     _T3c;

	__asm        sub    dword ptr [ebp-8], 2;
	__asm        cmp    dword ptr [ebp-8], 5;
	__asm        ja     _T459;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    SwitchPointers4620041[0][eax*4];
// Switch pointers
// LINE 610:
_T459:
	__asm        mov    eax, lParam;
	__asm        push   eax;
	__asm        mov    eax, wParam;
	__asm        push   eax;
	__asm        mov    eax, Message;
	__asm        push   eax;
	__asm        mov    eax, Window;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   CSparkalWindow::MySparkalWindowProc;
	__asm        jmp    _T477;
// LINE 611:
_T477:
}



// Contribution: 1:00067020-00067037 Module: 43, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00067040-00067057 Module: 43, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00067060-00067098 Module: 43, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00468060
// GameWindow::`scalar deleting destructor'



// Contribution: 2:00001470-000014cb Module: 43, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590470
// GLOBAL: COPTER_D 0x00590470
// ??_7GameWindow@@6B@


// Contribution: 3:00002314-00002351 Module: 43, 4 byte alignment, initialized_data, read, write, 
