// Module: flatimg.obj
// Source: C:\Copter\source\sparkal\flatimg.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0008e120-0008ee82 Module: 24, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048f120
void IFlatImage::IFlatImage() {
// LINE 26:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591050;
// LINE 27:
	__asm        jmp    near ptr 0x0048F16C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048f174
unsigned long IFlatImage::StretchCompose(class IFlatImage* pDest, long SourceLeft, long SourceTop, long SourceWidth, long SourceHeight, long DestLeft, long DestTop, long DestWidth, long DestHeight) {
	long YError;
	long DestStride;
	unsigned char * pDestBits;
	unsigned char * pSourceLeft;
	unsigned char * pSourceBits;
	long YCount;
	unsigned long ReturnCode;
	unsigned char * pDestLeft;
	long SourceStride;

// LINE 38:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 39:
	__asm        cmp    pDest, 0;
	__asm        jne    near ptr 0x0048F1A3;
	__asm        push   0x27;
	__asm        push   0x599DA8;
	__asm        push   0x599DD0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F1A8;
	__asm        jmp    near ptr 0x0048F1A8;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 43:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax];
// LINE 46:
	__asm        mov    eax, SourceHeight;
	__asm        cmp    DestHeight, eax;
	__asm        jge    near ptr 0x0048F1E1;
	__asm        push   0x2E;
	__asm        push   0x599DD8;
	__asm        push   0x599E00;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F1E6;
	__asm        jmp    near ptr 0x0048F1E6;
// LINE 47:
	__asm        mov    eax, SourceWidth;
	__asm        cmp    DestWidth, eax;
	__asm        jge    near ptr 0x0048F20B;
	__asm        push   0x2F;
	__asm        push   0x599E1C;
	__asm        push   0x599E44;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F210;
	__asm        jmp    near ptr 0x0048F210;
// LINE 49:
	__asm        mov    ReturnCode, 0;
// LINE 51:
	__asm        jmp    near ptr 0x0048F21C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pSourceBits, eax;
// LINE 52:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    SourceStride, eax;
	__asm        jmp    near ptr 0x0048F233;
// LINE 54:
	__asm        jmp    near ptr 0x0048F238;
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestBits, eax;
// LINE 55:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    DestStride, eax;
	__asm        jmp    near ptr 0x0048F24F;
// LINE 57:
	__asm        mov    eax, SourceTop;
	__asm        imul   eax, SourceStride;
	__asm        add    eax, SourceLeft;
	__asm        add    eax, pSourceBits;
	__asm        mov    pSourceLeft, eax;
// LINE 58:
	__asm        mov    eax, DestStride;
	__asm        imul   eax, DestTop;
	__asm        add    eax, DestLeft;
	__asm        add    eax, pDestBits;
	__asm        mov    pDestLeft, eax;
// LINE 61:
	__asm        mov    eax, DestHeight;
	__asm        neg    eax;
	__asm        mov    YError, eax;
// LINE 62:
	__asm        mov    YCount, 0;
// LINE 63:
	__asm        mov    eax, SourceHeight;
	__asm        cmp    YCount, eax;
	__asm        jge    near ptr 0x0048F309;
// LINE 66:
// Block start:
	long XError;
	long XCount;
	__asm        mov    eax, pSourceLeft;
	__asm        mov    pSourceBits, eax;
// LINE 67:
	__asm        mov    eax, pDestLeft;
	__asm        mov    pDestBits, eax;
// LINE 69:
	__asm        mov    eax, DestWidth;
	__asm        neg    eax;
	__asm        mov    XError, eax;
// LINE 70:
	__asm        mov    XCount, 0;
// LINE 71:
	__asm        mov    eax, SourceWidth;
	__asm        cmp    XCount, eax;
	__asm        jge    near ptr 0x0048F2DF;
// LINE 74:
	__asm        mov    eax, pSourceBits;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pDestBits;
	__asm        mov    [ecx], al;
	__asm        inc    pDestBits;
// LINE 77:
	__asm        mov    eax, SourceWidth;
	__asm        add    XError, eax;
// LINE 78:
	__asm        js     near ptr 0x0048F2DA;
// LINE 80:
	__asm        xor    eax, eax;
	__asm        sub    eax, DestWidth;
	__asm        neg    eax;
	__asm        sub    XError, eax;
// LINE 81:
	__asm        inc    pSourceBits;
// LINE 82:
	__asm        inc    XCount;
// LINE 84:
	__asm        jmp    near ptr 0x0048F2A5;
// LINE 87:
	__asm        mov    eax, DestStride;
	__asm        add    pDestLeft, eax;
// LINE 90:
	__asm        mov    eax, SourceHeight;
	__asm        add    YError, eax;
// LINE 91:
	__asm        js     near ptr 0x0048F304;
// LINE 93:
	__asm        xor    eax, eax;
	__asm        sub    eax, DestHeight;
	__asm        neg    eax;
	__asm        sub    YError, eax;
// LINE 94:
	__asm        mov    eax, SourceStride;
	__asm        add    pSourceLeft, eax;
// LINE 95:
	__asm        inc    YCount;
// LINE 97:
// Block end:
	__asm        jmp    near ptr 0x0048F27E;
// LINE 99:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax+4];
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 101:
	__asm        mov    eax, ReturnCode;
	__asm        jmp    near ptr 0x0048F327;
// LINE 102:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x0048f32e
unsigned long IFlatImage::StretchCompose(class IFlatImage* pDestImage, struct SparkalRect destRect, struct SparkalRect srcRect) {
	long SrcWidth;
	long SrcHeight;
	long DestHeight;
	long SrcTop;
	long DestLeft;
	long DestTop;
	long DestWidth;
	long SrcLeft;

// LINE 110:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 114:
	__asm        mov    eax, srcRect.left;
	__asm        mov    SrcLeft, eax;
// LINE 115:
	__asm        mov    eax, srcRect.top;
	__asm        mov    SrcTop, eax;
// LINE 116:
	__asm        mov    eax, srcRect.right;
	__asm        sub    eax, srcRect.left;
	__asm        mov    SrcWidth, eax;
// LINE 117:
	__asm        mov    eax, srcRect.bottom;
	__asm        sub    eax, srcRect.top;
	__asm        mov    SrcHeight, eax;
// LINE 119:
	__asm        mov    eax, destRect.left;
	__asm        mov    DestLeft, eax;
// LINE 120:
	__asm        mov    eax, destRect.top;
	__asm        mov    DestTop, eax;
// LINE 121:
	__asm        mov    eax, destRect.right;
	__asm        sub    eax, destRect.left;
	__asm        mov    DestWidth, eax;
// LINE 122:
	__asm        mov    eax, destRect.bottom;
	__asm        sub    eax, destRect.top;
	__asm        mov    DestHeight, eax;
// LINE 126:
	__asm        mov    eax, DestHeight;
	__asm        push   eax;
	__asm        mov    eax, DestWidth;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, SrcHeight;
	__asm        push   eax;
	__asm        mov    eax, SrcWidth;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0048F3AA;
// LINE 127:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x0048f3b1
unsigned long IFlatImage::Compose(class IFlatImage* pDest, long DestLeft, long DestTop, long ClipLeft, long ClipTop, long ClipRight, long ClipBottom) {
	unsigned char * pSource;
	long DestStride;
	unsigned char * pDestBits;
	long Width;
	long Height;
	unsigned long Error;

// LINE 133:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 134:
	__asm        cmp    pDest, 0;
	__asm        jne    near ptr 0x0048F3E3;
	__asm        push   0x86;
	__asm        push   0x599E60;
	__asm        push   0x599E88;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F3E8;
	__asm        jmp    near ptr 0x0048F3E8;
// LINE 137:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 138:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax];
// LINE 140:
	__asm        mov    Error, 0;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pSource, eax;
// LINE 144:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    Height, eax;
// LINE 145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    Width, eax;
// LINE 148:
	__asm        mov    eax, DestTop;
	__asm        cmp    ClipTop, eax;
	__asm        jle    near ptr 0x0048F451;
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, ClipTop;
	__asm        sub    ecx, DestTop;
	__asm        imul   eax, ecx;
	__asm        add    pSource, eax;
// LINE 151:
	__asm        xor    eax, eax;
	__asm        mov    ecx, ClipTop;
	__asm        sub    ecx, DestTop;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    Height, eax;
// LINE 152:
	__asm        mov    eax, ClipTop;
	__asm        mov    DestTop, eax;
// LINE 155:
	__asm        mov    eax, DestLeft;
	__asm        cmp    ClipLeft, eax;
	__asm        jle    near ptr 0x0048F47B;
// LINE 157:
	__asm        mov    eax, ClipLeft;
	__asm        sub    eax, DestLeft;
	__asm        add    pSource, eax;
// LINE 158:
	__asm        xor    eax, eax;
	__asm        mov    ecx, ClipLeft;
	__asm        sub    ecx, DestLeft;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    Width, eax;
// LINE 159:
	__asm        mov    eax, ClipLeft;
	__asm        mov    DestLeft, eax;
// LINE 164:
	__asm        mov    eax, Width;
	__asm        add    eax, DestLeft;
	__asm        cmp    eax, ClipRight;
	__asm        jl     near ptr 0x0048F494;
// LINE 165:
	__asm        mov    eax, ClipRight;
	__asm        sub    eax, DestLeft;
	__asm        dec    eax;
	__asm        mov    Width, eax;
// LINE 167:
	__asm        mov    eax, Height;
	__asm        add    eax, DestTop;
	__asm        cmp    eax, ClipBottom;
	__asm        jl     near ptr 0x0048F4AD;
// LINE 168:
	__asm        mov    eax, ClipBottom;
	__asm        sub    eax, DestTop;
	__asm        dec    eax;
	__asm        mov    Height, eax;
// LINE 170:
	__asm        jmp    near ptr 0x0048F4B2;
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pDestBits, eax;
// LINE 171:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    DestStride, eax;
	__asm        jmp    near ptr 0x0048F4C9;
// LINE 173:
	__asm        cmp    Width, 0;
	__asm        je     near ptr 0x0048F546;
	__asm        cmp    pSource, 0;
	__asm        je     near ptr 0x0048F546;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0048F546;
	__asm        cmp    pDest, 0;
	__asm        je     near ptr 0x0048F546;
	__asm        cmp    DestStride, 0;
	__asm        je     near ptr 0x0048F546;
// LINE 175:
	__asm        mov    eax, DestStride;
	__asm        imul   eax, DestTop;
	__asm        add    eax, DestLeft;
	__asm        add    pDestBits, eax;
// LINE 176:
	__asm        mov    eax, Height;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    Height;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0048F546;
// LINE 179:
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    eax, pSource;
	__asm        push   eax;
	__asm        mov    eax, pDestBits;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 180:
	__asm        mov    eax, DestStride;
	__asm        add    pDestBits, eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    pSource, eax;
// LINE 182:
	__asm        jmp    near ptr 0x0048F50B;
// LINE 185:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax+4];
// LINE 186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 187:
	__asm        mov    eax, Error;
	__asm        jmp    near ptr 0x0048F564;
// LINE 188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0048f56b
unsigned long IFlatImage::FillRect(long nPaletteIndex, struct SparkalRect* rectFill) {
	int32_t Left;
	int32_t Top;
	int32_t Right;
	long Width;
	long Height;
	unsigned char * pBits;
	int32_t Bottom;

// LINE 197:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 206:
	__asm        cmp    rectFill, 0;
	__asm        je     near ptr 0x0048F5FB;
// LINE 207:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax];
	__asm        mov    Left, eax;
// LINE 208:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+4];
	__asm        mov    Top, eax;
// LINE 209:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+8];
	__asm        mov    Right, eax;
// LINE 210:
	__asm        mov    eax, rectFill;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    Bottom, eax;
// LINE 213:
	__asm        cmp    Left, 0;
	__asm        jge    near ptr 0x0048F5B5;
// LINE 214:
	__asm        mov    Left, 0;
// LINE 215:
	__asm        cmp    Top, 0;
	__asm        jge    near ptr 0x0048F5C6;
// LINE 216:
	__asm        mov    Top, 0;
// LINE 217:
	__asm        mov    eax, this;
	__asm        mov    ecx, Right;
	__asm        cmp    [eax+8], ecx;
	__asm        jge    near ptr 0x0048F5DE;
// LINE 218:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    Right, eax;
// LINE 219:
	__asm        mov    eax, this;
	__asm        mov    ecx, Bottom;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jge    near ptr 0x0048F5F6;
// LINE 220:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    Bottom, eax;
// LINE 222:
	__asm        jmp    near ptr 0x0048F614;
// LINE 223:
	__asm        mov    Bottom, 0;
	__asm        mov    eax, Bottom;
	__asm        mov    Right, eax;
	__asm        mov    eax, Right;
	__asm        mov    Top, eax;
	__asm        mov    eax, Top;
	__asm        mov    Left, eax;
// LINE 225:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 226:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, Top;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, Left;
	__asm        mov    pBits, eax;
// LINE 227:
	__asm        mov    eax, Bottom;
	__asm        sub    eax, Top;
	__asm        mov    Height, eax;
// LINE 228:
	__asm        mov    eax, Right;
	__asm        sub    eax, Left;
	__asm        mov    Width, eax;
// LINE 230:
	__asm        cmp    Width, 0;
	__asm        je     near ptr 0x0048F685;
// LINE 231:
	__asm        mov    eax, Height;
	__asm        mov    [ebp-0x20], eax;
	__asm        dec    Height;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0048F685;
// LINE 232:
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    eax, nPaletteIndex;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
// LINE 233:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    pBits, eax;
// LINE 234:
	__asm        jmp    near ptr 0x0048F650;
// LINE 236:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 238:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0048F697;
// LINE 239:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0048f69e
void CFlatImage::CFlatImage(long Width, long Height, unsigned char InitialColor) {
// LINE 253:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0048F120;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591070;
// LINE 254:
	__asm        mov    eax, Width;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 255:
	__asm        mov    eax, Height;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 259:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        mov    [ebp-0x18], eax;
// LINE 260:
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        je     near ptr 0x0048F715;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x0048F731;
	__asm        push   0x12A;
	__asm        push   0x597444;
	__asm        push   0x59A090;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F736;
	__asm        jmp    near ptr 0x0048F736;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        push   0x42;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x0048F75B;
	__asm        mov    word ptr [ebp-0x14], 0xFFFF;
	__asm        jmp    near ptr 0x0048F760;
// LINE 261:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0048F85E;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
// LINE 263:
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0048F792;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    near ptr 0x0048F7AE;
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F7B3;
	__asm        jmp    near ptr 0x0048F7B3;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0048F7D6;
	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
	__asm        jmp    near ptr 0x0048F7DB;
// LINE 264:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048F85E;
// LINE 266:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, InitialColor;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x0056EB90;
	__asm        add    esp, 0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 267:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0048F840;
	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F845;
	__asm        jmp    near ptr 0x0048F845;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    near ptr 0x0048F854;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 271:
	__asm        jmp    near ptr 0x0048F863;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0048f86d
void CFlatImage::CFlatImage(class IFlatImage* pImage, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {
// LINE 278:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x0048F120;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591070;
// LINE 279:
	__asm        cmp    pImage, 0;
	__asm        jne    near ptr 0x0048F8B0;
	__asm        push   0x117;
	__asm        push   0x599E90;
	__asm        push   0x599EB8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F8B5;
	__asm        jmp    near ptr 0x0048F8B5;
// LINE 280:
	__asm        mov    eax, SrcLeft;
	__asm        cmp    SrcRight, eax;
	__asm        jg     near ptr 0x0048F8DD;
	__asm        push   0x118;
	__asm        push   0x599EC0;
	__asm        push   0x599EE8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F8E2;
	__asm        jmp    near ptr 0x0048F8E2;
// LINE 281:
	__asm        mov    eax, SrcTop;
	__asm        cmp    SrcBottom, eax;
	__asm        jg     near ptr 0x0048F90A;
	__asm        push   0x119;
	__asm        push   0x599EFC;
	__asm        push   0x599F24;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F90F;
	__asm        jmp    near ptr 0x0048F90F;
// LINE 283:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 284:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 285:
	__asm        jmp    near ptr 0x0048F92C;
	__asm        mov    eax, this;
	__asm        mov    ecx, pImage;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+8], ecx;
	__asm        jle    near ptr 0x0048F95A;
	__asm        push   0x11D;
	__asm        push   0x599F38;
	__asm        push   0x599F60;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F95F;
	__asm        jmp    near ptr 0x0048F95F;
// LINE 286:
	__asm        jmp    near ptr 0x0048F964;
	__asm        mov    eax, pImage;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        jge    near ptr 0x0048F992;
	__asm        push   0x11E;
	__asm        push   0x599F80;
	__asm        push   0x599FA8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F997;
	__asm        jmp    near ptr 0x0048F997;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0xC];
	__asm        mov    [ebp-0x34], eax;
// LINE 290:
	__asm        mov    word ptr [ebp-0x30], 0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        je     near ptr 0x0048F9D5;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    near ptr 0x0048F9F1;
	__asm        push   0x12A;
	__asm        push   0x597444;
	__asm        push   0x59A090;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048F9F6;
	__asm        jmp    near ptr 0x0048F9F6;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x42;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x0048FA1B;
	__asm        mov    word ptr [ebp-0x30], 0xFFFF;
	__asm        jmp    near ptr 0x0048FA20;
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0048FBDD;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x2C], eax;
// LINE 293:
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0048FA52;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    near ptr 0x0048FA6E;
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FA73;
	__asm        jmp    near ptr 0x0048FA73;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0048FA96;
	__asm        mov    word ptr [ebp-0x28], 0xFFFF;
	__asm        jmp    near ptr 0x0048FA9B;
// LINE 294:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048FB8A;
// LINE 296:
// Block start:
	unsigned char * pSource;
	long SrcStride;
	unsigned char * pBits;
	__asm        jmp    near ptr 0x0048FAAD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pBits, eax;
// LINE 297:
	__asm        jmp    near ptr 0x0048FABB;
	__asm        mov    eax, pImage;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    pSource, eax;
// LINE 298:
	__asm        mov    eax, pImage;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    SrcStride, eax;
	__asm        jmp    near ptr 0x0048FAD2;
// LINE 301:
	__asm        cmp    pBits, 0;
	__asm        je     near ptr 0x0048FB3C;
	__asm        cmp    pSource, 0;
	__asm        je     near ptr 0x0048FB3C;
	__asm        cmp    SrcStride, 0;
	__asm        je     near ptr 0x0048FB3C;
// LINE 303:
// Block start:
	int32_t Count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    Count, eax;
// LINE 304:
	__asm        mov    eax, Count;
	__asm        mov    [ebp-0x14], eax;
	__asm        dec    Count;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0048FB37;
// LINE 306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, pSource;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
// LINE 307:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        add    pBits, eax;
// LINE 308:
	__asm        mov    eax, SrcStride;
	__asm        add    pSource, eax;
// LINE 309:
	__asm        jmp    near ptr 0x0048FAF9;
// LINE 311:
// Block end:
	__asm        jmp    near ptr 0x0048FB3C;
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x1C], eax;
// LINE 316:
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x0048FB71;
	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FB76;
	__asm        jmp    near ptr 0x0048FB76;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    near ptr 0x0048FB85;
// LINE 318:
// Block end:
	__asm        jmp    near ptr 0x0048FBDD;
// LINE 319:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x24], eax;
// LINE 320:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x0048FBBF;
	__asm        push   0x134;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FBC4;
	__asm        jmp    near ptr 0x0048FBC4;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        jmp    near ptr 0x0048FBD3;
// LINE 321:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 325:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    near ptr 0x0048FC00;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 328:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 330:
	__asm        jmp    near ptr 0x0048FC19;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0048fc23
void CFlatImage::~CFlatImage() {
// LINE 336:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591070;
// LINE 337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0048FC61;
	__asm        push   0x151;
	__asm        push   0x599FC8;
	__asm        push   0x599FF0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FC66;
	__asm        jmp    near ptr 0x0048FC66;
// LINE 338:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x0048FCBC;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0048FCA8;
	__asm        push   0x134;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FCAD;
	__asm        jmp    near ptr 0x0048FCAD;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        jmp    near ptr 0x0048FCBC;
// LINE 340:
	__asm        jmp    near ptr 0x0048FCC1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048fcc6
unsigned long CFlatImage::Lock() {
// LINE 348:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 349:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0048FD5F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 350:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0048FD04;
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    near ptr 0x0048FD20;
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FD25;
	__asm        jmp    near ptr 0x0048FD25;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0048FD48;
	__asm        mov    word ptr [ebp-4], 0xFFFF;
	__asm        jmp    near ptr 0x0048FD4D;
// LINE 351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 354:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048FD78;
// LINE 355:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 357:
	__asm        inc    dword ptr ds:[0x599DA4];
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0048FD83;
// LINE 361:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0048fd88
unsigned long CFlatImage::Unlock() {
// LINE 363:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 364:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        ja     near ptr 0x0048FDBD;
	__asm        push   0x16C;
	__asm        push   0x59A000;
	__asm        push   0x59A028;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FDC2;
	__asm        jmp    near ptr 0x0048FDC2;
// LINE 365:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0048FDEB;
	__asm        push   0x16D;
	__asm        push   0x59A038;
	__asm        push   0x59A060;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FDF0;
	__asm        jmp    near ptr 0x0048FDF0;
// LINE 367:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0048FE73;
// LINE 368:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+4];
// LINE 370:
	__asm        dec    dword ptr ds:[0x599DA4];
// LINE 373:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0048FE73;
// LINE 374:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 376:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0048FE5F;
	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0048FE64;
	__asm        jmp    near ptr 0x0048FE64;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    near ptr 0x0048FE73;
// LINE 380:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0048FE7E;
// LINE 381:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:0008ee90-0008eec8 Module: 24, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0048fe90
// CFlatImage::`scalar deleting destructor'



// Contribution: 2:00002050-0000206b Module: 24, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591050
// ??_7IFlatImage@@6B@


// Contribution: 2:00002070-0000208f Module: 24, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591070
// ??_7CFlatImage@@6B@


// Contribution: 3:00002da0-00003066 Module: 24, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599da0
// IFlatImage::lTotalMemoryUsage
// GLOBAL: COPTER_D 0x00599da4
// IFlatImage::lTotalLockCount


// Contribution: 3:00003068-0000307f Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a068
// ??_C@_0BI@MJPB@theHandle?5?$CG?$CG?5lockedData?$AA@


// Contribution: 3:00003080-0000308e Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a080
// ??_C@_0P@EIPH@?$CIint?$CJtheHandle?$AA@


// Contribution: 3:00003090-000030a1 Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a090
// ??_C@_0BC@NODK@theHandle?5?$CG?$CG?5size?$AA@
