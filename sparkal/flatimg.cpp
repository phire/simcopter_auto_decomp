// Module: flatimg.obj
// Source: C:\Copter\source\sparkal\flatimg.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned long;

// Type: void;

// Type: /*packed*/ class IFlatImage (forward reference);
// VTABLE: COPTER_D 0x00591050
class IFlatImage{ // packed(0x18 bytes) TI: 0x13a1
public:
	void IFlatImage();
	virtual unsigned long Lock(); // vtable+0x0
	virtual unsigned long Unlock(); // vtable+0x4
	unsigned long GetLockCount();
	virtual void SetTransparentColor(int32_t, long); // vtable+0x8
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	virtual unsigned long Compose(/*packed*/ class IFlatImage*, long, long, long, long, long, long); // vtable+0xc
	unsigned long Compose(/*packed*/ class IFlatImage*, long, long);
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, long, long, long, long, long, long, long, long); // vtable+0x10
	virtual unsigned long StretchCompose(/*packed*/ class IFlatImage*, /*packed*/ struct SparkalRect, /*packed*/ struct SparkalRect); // vtable+0x14
	virtual unsigned long FillRect(long, /*packed*/ struct SparkalRect*); // vtable+0x18
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	/*+0x4*/   unsigned long mLockCount;
	/*+0x8*/   long mWidth;
	/*+0xc*/   long mHeight;
	/*+0x10*/  void * __ptr32 mpBits;
	/*+0x14*/  long mStride;
};

// Type: long;

// Type: unsigned char *;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalRect (forward reference);
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: int32_t;

// Type: unsigned char;

// Type: /*packed*/ class CFlatImage (forward reference);
// VTABLE: COPTER_D 0x00591070
class CFlatImage : public IFlatImage
{ // packed(0x1c bytes) TI: 0x20e3
public:
	void CFlatImage(/*unpacked*/ class IFlatImage*, long, long, long, long);
	void CFlatImage(long, long, unsigned char);
	void CFlatImage();
	virtual void ~CFlatImage(); // vtable+0x1c
	virtual unsigned long Lock() /* override */;
	virtual unsigned long Unlock() /* override */;
protected:
	/*+0x18*/  void * __ptr32 mBitsHandle;
};

// Type: uint32_t;

// Type: /*unpacked*/ class IFlatImage (forward reference);
// IFlatImage Class implementation not found



// Contribution: 1:0008e120-0008ee82 Module: 24, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0048f120
void IFlatImage::IFlatImage() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591050;
// LINE 27:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048f174
unsigned long IFlatImage::StretchCompose(/*packed*/ class IFlatImage *pDest, long SourceLeft, long SourceTop, long SourceWidth, long SourceHeight, long DestLeft, long DestTop, long DestWidth, long DestHeight) {
	/*bp-0x4*/   long SourceStride;
	/*bp-0x8*/   unsigned char * pDestLeft;
	/*bp-0xc*/   unsigned long ReturnCode;
	/*bp-0x10*/  long YCount;
	/*bp-0x14*/  unsigned char * pSourceBits;
	/*bp-0x18*/  unsigned char * pSourceLeft;
	/*bp-0x1c*/  unsigned char * pDestBits;
	/*bp-0x20*/  long DestStride;
	/*bp-0x24*/  long YError;

// LINE 39:
	__asm        cmp    pDest, 0;
	__asm        jne    _T2f;

	__asm        push   0x27;
	__asm        push   0x599DA8;
	__asm        push   0x599DD0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T34;
_T2f:
	__asm        jmp    _T34;
// LINE 42:
_T34:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 43:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax];
// LINE 46:
	__asm        mov    eax, SourceHeight;
	__asm        cmp    DestHeight, eax;
	__asm        jge    _T6d;

	__asm        push   0x2E;
	__asm        push   0x599DD8;
	__asm        push   0x599E00;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T72;
_T6d:
	__asm        jmp    _T72;
// LINE 47:
_T72:
	__asm        mov    eax, SourceWidth;
	__asm        cmp    DestWidth, eax;
	__asm        jge    _T97;

	__asm        push   0x2F;
	__asm        push   0x599E1C;
	__asm        push   0x599E44;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T9c;
_T97:
	__asm        jmp    _T9c;
// LINE 49:
_T9c:
	ReturnCode = 0x0;
// LINE 51:
	__asm        jmp    _Ta8;
_Ta8:
	pSourceBits = this->mpBits;
// LINE 52:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    SourceStride, eax;
	__asm        jmp    _Tbf;
// LINE 54:
_Tbf:
	__asm        jmp    _Tc4;
_Tc4:
	pDestBits = pDest->mpBits;
// LINE 55:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    DestStride, eax;
	__asm        jmp    _Tdb;
// LINE 57:
_Tdb:
	__asm        mov    eax, SourceTop;
	__asm        imul   eax, SourceStride;
	__asm        add    eax, SourceLeft;
	__asm        add    eax, pSourceBits;
	__asm        mov    pSourceLeft, eax;
// LINE 58:
	__asm        mov    eax, DestStride;
	__asm        imul   eax, DestTop;
	__asm        add    eax, DestLeft;
	__asm        add    eax, pDestBits;
	__asm        mov    pDestLeft, eax;
// LINE 61:
	__asm        mov    eax, DestHeight;
	__asm        neg    eax;
	__asm        mov    YError, eax;
// LINE 62:
	YCount = 0x0;
// LINE 63:
_T10a:
	__asm        mov    eax, SourceHeight;
	__asm        cmp    YCount, eax;
	__asm        jge    _T195;
// LINE 66:
// Block start:
	/*bp-0x28*/  long XCount;
	/*bp-0x2c*/  long XError;
	pSourceBits = pSourceLeft;
// LINE 67:
	pDestBits = pDestLeft;
// LINE 69:
	__asm        mov    eax, DestWidth;
	__asm        neg    eax;
	__asm        mov    XError, eax;
// LINE 70:
	XCount = 0x0;
// LINE 71:
_T131:
	__asm        mov    eax, SourceWidth;
	__asm        cmp    XCount, eax;
	__asm        jge    _T16b;
// LINE 74:
	__asm        mov    eax, pSourceBits;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pDestBits;
	__asm        mov    [ecx], al;
	__asm        inc    pDestBits;
// LINE 77:
	XError += SourceWidth;
// LINE 78:
	__asm        js     _T166;
// LINE 80:
	__asm        xor    eax, eax;
	__asm        sub    eax, DestWidth;
	__asm        neg    eax;
	__asm        sub    XError, eax;
// LINE 81:
	pSourceBits++;
// LINE 82:
	XCount++;
// LINE 84:
_T166:
	__asm        jmp    _T131;
// LINE 87:
_T16b:
	pDestLeft += DestStride;
// LINE 90:
	YError += SourceHeight;
// LINE 91:
	__asm        js     _T190;
// LINE 93:
	__asm        xor    eax, eax;
	__asm        sub    eax, DestHeight;
	__asm        neg    eax;
	__asm        sub    YError, eax;
// LINE 94:
	pSourceLeft += SourceStride;
// LINE 95:
	YCount++;
// LINE 97:
// Block end:
_T190:
	__asm        jmp    _T10a;
// LINE 99:
_T195:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax+4];
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 101:
	return ReturnCode;
// LINE 102:
}

// FUNCTION: COPTER_D 0x0048f32e
unsigned long IFlatImage::StretchCompose(/*packed*/ class IFlatImage *pDestImage, /*packed*/ struct SparkalRect destRect, /*packed*/ struct SparkalRect srcRect) {
	/*bp-0x4*/   long SrcLeft;
	/*bp-0x8*/   long DestWidth;
	/*bp-0xc*/   long DestTop;
	/*bp-0x10*/  long DestLeft;
	/*bp-0x14*/  long SrcTop;
	/*bp-0x18*/  long DestHeight;
	/*bp-0x1c*/  long SrcHeight;
	/*bp-0x20*/  long SrcWidth;

// LINE 114:
	SrcLeft = srcRect.left;
// LINE 115:
	SrcTop = srcRect.top;
// LINE 116:
	__asm        mov    eax, srcRect.right;
	__asm        sub    eax, srcRect.left;
	__asm        mov    SrcWidth, eax;
// LINE 117:
	__asm        mov    eax, srcRect.bottom;
	__asm        sub    eax, srcRect.top;
	__asm        mov    SrcHeight, eax;
// LINE 119:
	DestLeft = destRect.left;
// LINE 120:
	DestTop = destRect.top;
// LINE 121:
	__asm        mov    eax, destRect.right;
	__asm        sub    eax, destRect.left;
	__asm        mov    DestWidth, eax;
// LINE 122:
	__asm        mov    eax, destRect.bottom;
	__asm        sub    eax, destRect.top;
	__asm        mov    DestHeight, eax;
// LINE 126:
	__asm        mov    eax, DestHeight;
	__asm        push   eax;
	__asm        mov    eax, DestWidth;
	__asm        push   eax;
	__asm        mov    eax, DestTop;
	__asm        push   eax;
	__asm        mov    eax, DestLeft;
	__asm        push   eax;
	__asm        mov    eax, SrcHeight;
	__asm        push   eax;
	__asm        mov    eax, SrcWidth;
	__asm        push   eax;
	__asm        mov    eax, SrcTop;
	__asm        push   eax;
	__asm        mov    eax, SrcLeft;
	__asm        push   eax;
	__asm        mov    eax, pDestImage;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    _T7c;
// LINE 127:
_T7c:
}

// FUNCTION: COPTER_D 0x0048f3b1
unsigned long IFlatImage::Compose(/*packed*/ class IFlatImage *pDest, long DestLeft, long DestTop, long ClipLeft, long ClipTop, long ClipRight, long ClipBottom) {
	/*bp-0x4*/   unsigned long Error;
	/*bp-0x8*/   long Height;
	/*bp-0xc*/   long Width;
	/*bp-0x10*/  unsigned char * pDestBits;
	/*bp-0x14*/  long DestStride;
	/*bp-0x18*/  unsigned char * pSource;

// LINE 134:
	__asm        cmp    pDest, 0;
	__asm        jne    _T32;

	__asm        push   0x86;
	__asm        push   0x599E60;
	__asm        push   0x599E88;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T37;
_T32:
	__asm        jmp    _T37;
// LINE 137:
_T37:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 138:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax];
// LINE 140:
	Error = 0x0;
// LINE 143:
	pSource = this->mpBits;
// LINE 144:
	Height = this->mHeight;
// LINE 145:
	Width = this->mWidth;
// LINE 148:
	__asm        mov    eax, DestTop;
	__asm        cmp    ClipTop, eax;
	__asm        jle    _Ta0;
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, ClipTop;
	__asm        sub    ecx, DestTop;
	__asm        imul   eax, ecx;
	__asm        add    pSource, eax;
// LINE 151:
	__asm        xor    eax, eax;
	__asm        mov    ecx, ClipTop;
	__asm        sub    ecx, DestTop;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    Height, eax;
// LINE 152:
	DestTop = ClipTop;
// LINE 155:
_Ta0:
	__asm        mov    eax, DestLeft;
	__asm        cmp    ClipLeft, eax;
	__asm        jle    _Tca;
// LINE 157:
	__asm        mov    eax, ClipLeft;
	__asm        sub    eax, DestLeft;
	__asm        add    pSource, eax;
// LINE 158:
	__asm        xor    eax, eax;
	__asm        mov    ecx, ClipLeft;
	__asm        sub    ecx, DestLeft;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    Width, eax;
// LINE 159:
	DestLeft = ClipLeft;
// LINE 164:
_Tca:
	__asm        mov    eax, Width;
	__asm        add    eax, DestLeft;
	__asm        cmp    eax, ClipRight;
	__asm        jl     _Te3;
// LINE 165:
	__asm        mov    eax, ClipRight;
	__asm        sub    eax, DestLeft;
	__asm        dec    eax;
	__asm        mov    Width, eax;
// LINE 167:
_Te3:
	__asm        mov    eax, Height;
	__asm        add    eax, DestTop;
	__asm        cmp    eax, ClipBottom;
	__asm        jl     _Tfc;
// LINE 168:
	__asm        mov    eax, ClipBottom;
	__asm        sub    eax, DestTop;
	__asm        dec    eax;
	__asm        mov    Height, eax;
// LINE 170:
_Tfc:
	__asm        jmp    _T101;
_T101:
	pDestBits = pDest->mpBits;
// LINE 171:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    DestStride, eax;
	__asm        jmp    _T118;
// LINE 173:
_T118:
	__asm        cmp    Width, 0;
	__asm        je     _T195;

	__asm        cmp    pSource, 0;
	__asm        je     _T195;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     _T195;

	__asm        cmp    pDest, 0;
	__asm        je     _T195;

	__asm        cmp    DestStride, 0;
	__asm        je     _T195;
// LINE 175:
	__asm        mov    eax, DestStride;
	__asm        imul   eax, DestTop;
	__asm        add    eax, DestLeft;
	__asm        add    pDestBits, eax;
// LINE 176:
_T15a:
	__asm        mov    eax, Height;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    Height;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T195;
// LINE 179:
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    eax, pSource;
	__asm        push   eax;
	__asm        mov    eax, pDestBits;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 180:
	pDestBits += DestStride;
// LINE 181:
	pSource += this->mStride;
// LINE 182:
	__asm        jmp    _T15a;
// LINE 185:
_T195:
	__asm        mov    eax, pDest;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pDest;
	__asm        call   dword ptr [eax+4];
// LINE 186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 187:
	return Error;
// LINE 188:
}

// FUNCTION: COPTER_D 0x0048f56b
unsigned long IFlatImage::FillRect(long nPaletteIndex, /*packed*/ struct SparkalRect *rectFill) {
	/*bp-0x4*/   int32_t Bottom;
	/*bp-0x8*/   unsigned char * pBits;
	/*bp-0xc*/   long Height;
	/*bp-0x10*/  long Width;
	/*bp-0x14*/  int32_t Right;
	/*bp-0x18*/  int32_t Top;
	/*bp-0x1c*/  int32_t Left;

// LINE 206:
	__asm        cmp    rectFill, 0;
	__asm        je     _T90;
// LINE 207:
	Left = rectFill->left;
// LINE 208:
	Top = rectFill->top;
// LINE 209:
	Right = rectFill->right;
// LINE 210:
	Bottom = rectFill->bottom;
// LINE 213:
	__asm        cmp    Left, 0;
	__asm        jge    _T4a;
// LINE 214:
	Left = 0x0;
// LINE 215:
_T4a:
	__asm        cmp    Top, 0;
	__asm        jge    _T5b;
// LINE 216:
	Top = 0x0;
// LINE 217:
_T5b:
	__asm        mov    eax, this;
	__asm        mov    ecx, Right;
	__asm        cmp    [eax+8], ecx;
	__asm        jge    _T73;
// LINE 218:
	Right = this->mWidth;
// LINE 219:
_T73:
	__asm        mov    eax, this;
	__asm        mov    ecx, Bottom;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jge    _T8b;
// LINE 220:
	Bottom = this->mHeight;
// LINE 222:
_T8b:
	__asm        jmp    _Ta9;
// LINE 223:
_T90:
	__asm        mov    Bottom, 0;
	__asm        mov    eax, Bottom;
	__asm        mov    Right, eax;
	__asm        mov    eax, Right;
	__asm        mov    Top, eax;
	__asm        mov    eax, Top;
	__asm        mov    Left, eax;
// LINE 225:
_Ta9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
// LINE 226:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, Top;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        add    eax, Left;
	__asm        mov    pBits, eax;
// LINE 227:
	__asm        mov    eax, Bottom;
	__asm        sub    eax, Top;
	__asm        mov    Height, eax;
// LINE 228:
	__asm        mov    eax, Right;
	__asm        sub    eax, Left;
	__asm        mov    Width, eax;
// LINE 230:
	__asm        cmp    Width, 0;
	__asm        je     _T11a;
// LINE 231:
_Te5:
	__asm        mov    eax, Height;
	__asm        mov    [ebp-0x20], eax;
	__asm        dec    Height;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T11a;
// LINE 232:
	__asm        mov    eax, Width;
	__asm        push   eax;
	__asm        mov    eax, nPaletteIndex;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
// LINE 233:
	pBits += this->mStride;
// LINE 234:
	__asm        jmp    _Te5;
// LINE 236:
_T11a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 238:
	return 0x0;
// LINE 239:
}

// FUNCTION: COPTER_D 0x0048f69e
void CFlatImage::CFlatImage(long Width, long Height, unsigned char InitialColor) {

	__asm        mov    ecx, this;
	__asm        call   IFlatImage::IFlatImage;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591070;
// LINE 254:
	this-><CFlatImage+0x08> = Width;
// LINE 255:
	this-><CFlatImage+0x0c> = Height;
// LINE 256:
	this-><CFlatImage+0x10> = 0x0;
// LINE 259:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        mov    [ebp-0x18], eax;
// LINE 260:
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        je     _T77;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T93;
_T77:
	__asm        push   0x12A;
	__asm        push   0x597444;
	__asm        push   0x59A090;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T98;
_T93:
	__asm        jmp    _T98;
_T98:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        push   0x42;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    _Tbd;

	__asm        mov    word ptr [ebp-0x14], 0xFFFF;
_Tbd:
	__asm        jmp    _Tc2;
// LINE 261:
_Tc2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1c0;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x10], eax;
// LINE 263:
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tf4;

	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    _T110;
_Tf4:
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T115;
_T110:
	__asm        jmp    _T115;
_T115:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T138;

	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
_T138:
	__asm        jmp    _T13d;
// LINE 264:
_T13d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T1c0;
// LINE 266:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, InitialColor;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   memset;
	__asm        add    esp, 0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 267:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T1a2;

	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1a7;
_T1a2:
	__asm        jmp    _T1a7;
_T1a7:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    _T1b6;
// LINE 268:
_T1b6:
	this-><CFlatImage+0x10> = 0x0;
// LINE 271:
_T1c0:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048f86d
void CFlatImage::CFlatImage(/*packed*/ class IFlatImage *pImage, long SrcLeft, long SrcTop, long SrcRight, long SrcBottom) {

	__asm        mov    ecx, this;
	__asm        call   IFlatImage::IFlatImage;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591070;
// LINE 279:
	__asm        cmp    pImage, 0;
	__asm        jne    _T43;

	__asm        push   0x117;
	__asm        push   0x599E90;
	__asm        push   0x599EB8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48;
_T43:
	__asm        jmp    _T48;
// LINE 280:
_T48:
	__asm        mov    eax, SrcLeft;
	__asm        cmp    SrcRight, eax;
	__asm        jg     _T70;

	__asm        push   0x118;
	__asm        push   0x599EC0;
	__asm        push   0x599EE8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T75;
_T70:
	__asm        jmp    _T75;
// LINE 281:
_T75:
	__asm        mov    eax, SrcTop;
	__asm        cmp    SrcBottom, eax;
	__asm        jg     _T9d;

	__asm        push   0x119;
	__asm        push   0x599EFC;
	__asm        push   0x599F24;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Ta2;
_T9d:
	__asm        jmp    _Ta2;
// LINE 283:
_Ta2:
	__asm        mov    eax, SrcRight;
	__asm        sub    eax, SrcLeft;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 284:
	__asm        mov    eax, SrcBottom;
	__asm        sub    eax, SrcTop;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 285:
	__asm        jmp    _Tbf;
_Tbf:
	__asm        mov    eax, this;
	__asm        mov    ecx, pImage;
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+8], ecx;
	__asm        jle    _Ted;

	__asm        push   0x11D;
	__asm        push   0x599F38;
	__asm        push   0x599F60;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf2;
_Ted:
	__asm        jmp    _Tf2;
// LINE 286:
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, pImage;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        cmp    [eax+0xC], ecx;
	__asm        jge    _T125;

	__asm        push   0x11E;
	__asm        push   0x599F80;
	__asm        push   0x599FA8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T12a;
_T125:
	__asm        jmp    _T12a;
// LINE 289:
_T12a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0xC];
	__asm        mov    [ebp-0x34], eax;
// LINE 290:
	__asm        mov    word ptr [ebp-0x30], 0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        je     _T168;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    _T184;
_T168:
	__asm        push   0x12A;
	__asm        push   0x597444;
	__asm        push   0x59A090;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T189;
_T184:
	__asm        jmp    _T189;
_T189:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        push   0x42;
	__asm        call   dword ptr ds:[0x6C3730];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    _T1ae;

	__asm        mov    word ptr [ebp-0x30], 0xFFFF;
_T1ae:
	__asm        jmp    _T1b3;
// LINE 291:
_T1b3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T370;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x2C], eax;
// LINE 293:
	__asm        mov    word ptr [ebp-0x28], 0;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1e5;

	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    _T201;
_T1e5:
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T206;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T229;

	__asm        mov    word ptr [ebp-0x28], 0xFFFF;
_T229:
	__asm        jmp    _T22e;
// LINE 294:
_T22e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _T31d;
// LINE 296:
// Block start:
	/*bp-0x4*/   unsigned char * pBits;
	/*bp-0x8*/   long SrcStride;
	/*bp-0xc*/   unsigned char * pSource;
	__asm        jmp    _T240;
_T240:
	pBits = this-><CFlatImage+0x10>;
// LINE 297:
	__asm        jmp    _T24e;
_T24e:
	pSource = pImage->mpBits;
// LINE 298:
	__asm        mov    eax, pImage;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    SrcStride, eax;
	__asm        jmp    _T265;
// LINE 301:
_T265:
	__asm        cmp    pBits, 0;
	__asm        je     _T2cf;

	__asm        cmp    pSource, 0;
	__asm        je     _T2cf;

	__asm        cmp    SrcStride, 0;
	__asm        je     _T2cf;
// LINE 303:
// Block start:
	/*bp-0x10*/  int32_t Count;
	Count = this-><CFlatImage+0x0c>;
// LINE 304:
_T28c:
	__asm        mov    eax, Count;
	__asm        mov    [ebp-0x14], eax;
	__asm        dec    Count;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T2ca;
// LINE 306:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, pSource;
	__asm        push   eax;
	__asm        mov    eax, pBits;
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
// LINE 307:
	pBits += this-><CFlatImage+0x14>;
// LINE 308:
	pSource += SrcStride;
// LINE 309:
	__asm        jmp    _T28c;
// LINE 311:
// Block end:
_T2ca:
	__asm        jmp    _T2cf;
// LINE 314:
_T2cf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x1C], eax;
// LINE 316:
	__asm        mov    word ptr [ebp-0x18], 0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T304;

	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T309;
_T304:
	__asm        jmp    _T309;
_T309:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    _T318;
// LINE 318:
// Block end:
_T318:
	__asm        jmp    _T370;
// LINE 319:
_T31d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x24], eax;
// LINE 320:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T352;

	__asm        push   0x134;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T357;
_T352:
	__asm        jmp    _T357;
_T357:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        jmp    _T366;
// LINE 321:
_T366:
	this->mBitsHandle = 0x0;
// LINE 325:
_T370:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        jne    _T393;
// LINE 326:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 328:
_T393:
	this-><CFlatImage+0x10> = 0x0;
// LINE 329:
	this-><CFlatImage+0x14> = 0x0;
// LINE 330:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0048fc23
void CFlatImage::~CFlatImage() {

	this-><CFlatImage+0x00> = 0x591070;
// LINE 337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3e;

	__asm        push   0x151;
	__asm        push   0x599FC8;
	__asm        push   0x599FF0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T43;
_T3e:
	__asm        jmp    _T43;
// LINE 338:
_T43:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T99;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T85;

	__asm        push   0x134;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T8a;
_T85:
	__asm        jmp    _T8a;
_T8a:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3650];
	__asm        jmp    _T99;
// LINE 340:
_T99:
	return;
}

// FUNCTION: COPTER_D 0x0048fcc6
unsigned long CFlatImage::Lock() {
// LINE 349:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T99;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 350:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3e;

	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        jne    _T5a;
_T3e:
	__asm        push   0x147;
	__asm        push   0x597444;
	__asm        push   0x59A068;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5f;
_T5a:
	__asm        jmp    _T5f;
_T5f:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35E4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T82;

	__asm        mov    word ptr [ebp-4], 0xFFFF;
_T82:
	__asm        jmp    _T87;
// LINE 351:
_T87:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 3;
	__asm        and    eax, 0xFFFFFFFC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 354:
_T99:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _Tb2;
// LINE 355:
	this-><CFlatImage+0x04>++;
// LINE 357:
	IFlatImage::lTotalLockCount++;
// LINE 360:
_Tb2:
	return this-><CFlatImage+0x04>;
// LINE 361:
}

// FUNCTION: COPTER_D 0x0048fd88
unsigned long CFlatImage::Unlock() {
// LINE 364:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        ja     _T35;

	__asm        push   0x16C;
	__asm        push   0x59A000;
	__asm        push   0x59A028;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3a;
_T35:
	__asm        jmp    _T3a;
// LINE 365:
_T3a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T63;

	__asm        push   0x16D;
	__asm        push   0x59A038;
	__asm        push   0x59A060;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T68;
_T63:
	__asm        jmp    _T68;
// LINE 367:
_T68:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _Teb;
// LINE 368:
	this-><CFlatImage+0x04>--;
// LINE 370:
	IFlatImage::lTotalLockCount--;
// LINE 373:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _Teb;
// LINE 374:
	this-><CFlatImage+0x14> = 0x0;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-8], eax;
// LINE 376:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _Td7;

	__asm        push   0x151;
	__asm        push   0x597444;
	__asm        push   0x59A080;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tdc;
_Td7:
	__asm        jmp    _Tdc;
_Tdc:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3654];
	__asm        jmp    _Teb;
// LINE 380:
_Teb:
	return this-><CFlatImage+0x04>;
// LINE 381:
}



// Contribution: 1:0008ee90-0008eec8 Module: 24, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0048fe90
// CFlatImage::`scalar deleting destructor'



// Contribution: 2:00002050-0000206b Module: 24, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for IFlatImage @ 0x00591050
//   00: _purecall @ 0x0056cfa0
//   01: _purecall @ 0x0056cfa0
//   02: IFlatImage::SetTransparentColor @ 0x00471570
//   03: IFlatImage::Compose @ 0x0048f3b1
//   04: IFlatImage::StretchCompose @ 0x0048f174
//   05: IFlatImage::StretchCompose @ 0x0048f32e
//   06: IFlatImage::FillRect @ 0x0048f56b
//   7 entries



// Contribution: 2:00002070-0000208f Module: 24, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CFlatImage @ 0x00591070
//   00: CFlatImage::Lock @ 0x0048fcc6
//   01: CFlatImage::Unlock @ 0x0048fd88
//   02: IFlatImage::SetTransparentColor @ 0x00471570
//   03: IFlatImage::Compose @ 0x0048f3b1
//   04: IFlatImage::StretchCompose @ 0x0048f174
//   05: IFlatImage::StretchCompose @ 0x0048f32e
//   06: IFlatImage::FillRect @ 0x0048f56b
//   07: CFlatImage::`scalar deleting destructor' @ 0x0048fe90
//   8 entries



// Contribution: 3:00002da0-00003066 Module: 24, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00599da0
unsigned long IFlatImage::lTotalMemoryUsage = 0;

// GLOBAL: COPTER_D 0x00599da4
unsigned long IFlatImage::lTotalLockCount = 0;



// Contribution: 3:00003068-0000307f Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "theHandle && lockedData"


// Contribution: 3:00003080-0000308e Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "(int)theHandle"


// Contribution: 3:00003090-000030a1 Module: 24, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "theHandle && size"
