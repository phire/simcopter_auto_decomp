// Module: Dialwin.obj
// Source: C:\Copter\source\sparkal\Dialwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ class RadioCompassWindow (forward reference);
// VTABLE: COPTER_D 0x0058f650
class RadioCompassWindow : public GraphicWindow
{ // packed(0xb4 bytes) TI: 0x2a7c
public:
	void RadioCompassWindow(/*packed*/ class MRect&, long, /*unpacked*/ class GraphicWindow*, /*unpacked*/ class Radio*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~RadioCompassWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void InitializeCachedSettings(); // vtable+0xc4
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	int32_t GetCurrentCompassPosition();
	void SetNewRadioStation(int32_t);
	void SetNewRadioStationVolume(long);
	void CheckForRadioChange();
protected:
	/*+0x74*/  long lFrameCount;
	/*+0x78*/  /*unpacked*/ class Radio *myRadio;
	/*+0x7c*/  int32_t nRadioStationIndex;
	/*+0x80*/  long lRadioStationVolume;
	/*+0x84*/  /*unpacked*/ class CBackBuffer *myCompassImage;
	/*+0x88*/  /*packed*/ class basic_string<char> sCompassFile; // 0x8 bytes
	/*+0x90*/  int32_t nLastCompassPosition;
	/*+0x94*/  /*packed*/ class MRect rectRadioStations; // 0x10 bytes
	/*+0xa4*/  /*packed*/ class MRect rectRadioStationVolume; // 0x10 bytes
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: long;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*unpacked*/ class Radio (forward reference);
// Radio Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: int32_t;

// Type: void;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: /*packed*/ class DialWindow (forward reference);
// VTABLE: COPTER_D 0x0058f738
class DialWindow : public GraphicWindow
{ // packed(0x1e8 bytes) TI: 0x4212
public:
	void DialWindow(/*packed*/ class MRect&, long, /*packed*/ struct CommandSystem*, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~DialWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void InitializeCachedSettings(); // vtable+0xc4
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t DoesWindowNeedUpdating() /* override */;
	void SetNewDialPositions();
	void DrawCurrentDamage();
	void CheckForChangedDamage();
	void TurnOffSpotlightCommand(int32_t);
	void TurnOnSpotlightCommand(int32_t);
protected:
	/*+0x74*/  /*packed*/ struct CommandSystem *myCommandSystem;
	/*+0x78*/  /*packed*/ class BitmappedFont *myMoneyGuageFont;
	/*+0x7c*/  /*unpacked*/ class CBackBuffer *mySecondImage;
	/*+0x80*/  /*unpacked*/ class CBackBuffer *myDamageImage;
	/*+0x84*/  /*unpacked*/ class CBackBuffer *myFuelLightImage;
	/*+0x88*/  /*unpacked*/ class CBackBuffer *myPointsLightImage;
	/*+0x8c*/  /*unpacked*/ class CBackBuffer *myAltitudeHundredsImage;
	/*+0x90*/  /*unpacked*/ class CBackBuffer *mySpotlightBootImage;
	/*+0x94*/  /*unpacked*/ class CBackBuffer *mySpotlightBootBackImage;
	/*+0x98*/  int32_t nCurrentDamage;
	/*+0x9c*/  long lCurrentFuelPercentage;
	/*+0xa0*/  long lCurrentFuelLight;
	/*+0xa4*/  /*packed*/ class DialHand dials[3]; // 0x9c bytes
	/*+0x140*/ /*packed*/ class MRect rectDials[3]; // 0x30 bytes
	/*+0x170*/ /*packed*/ class MRect rectMoneyFont; // 0x10 bytes
	/*+0x180*/ long lCurrentMoney;
	/*+0x184*/ long lCurrentPoints;
	/*+0x188*/ int32_t bCurrentPointsOverLimit;
	/*+0x18c*/ /*packed*/ class MPoint ptLastSpotlightPosition; // 0x8 bytes
	/*+0x194*/ /*packed*/ class MRect rectSpotlightControl; // 0x10 bytes
	/*+0x1a4*/ /*packed*/ class MRect rectSpotlightControlSet[4]; // 0x40 bytes
	/*+0x1e4*/ long lSpotlightControlCurrent;
};

// Type: /*packed*/ struct CommandSystem (forward reference);
struct CommandSystem{ // packed(0xaa8 bytes) TI: 0x12e4
	/*+0x0*/   /*packed*/ struct Command keyboardCommands[100]; // 0xc8 bytes
	/*+0xc8*/  /*packed*/ class CharList keyboardCommandList; // 0x10 bytes
	/*+0xd8*/  /*packed*/ class list<Shortcut> commandShortcuts; // 0x8 bytes
	/*+0xe0*/  unsigned char chCommandKeyboardArray[2048]; // 0x800 bytes
	/*+0x8e0*/ unsigned char chCommandJoystickArray[4][14]; // 0x38 bytes
	/*+0x918*/ long joystickCommands[100]; // 0x190 bytes
	void CommandSystem();
	void Initialize();
	void ClearAllCommands();
	void ClearAllCommandsDevice(long);
	void TurnOnCommand(int32_t);
	void TurnOffCommand(int32_t);
	void TurnOnCommandDevice(int32_t, long);
	void TurnOffCommandDevice(int32_t, long);
	int32_t IsCommandSet(int32_t);
	int32_t IsCommandPush(int32_t);
	void SetUpCommandArraysFromShortcuts();
	// calltype: NearC
	static int32_t GetKeystateIndexForChar(long, char);
	long GetJoystickCommandValue(int32_t);
	void PollJoysticksForCommands();
};

// Type: char;

// Type: /*packed*/ class MPoint;
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: /*packed*/ class PassengerWindow (forward reference);
// VTABLE: COPTER_D 0x0058f800
class PassengerWindow : public GraphicWindow
{ // packed(0xac bytes) TI: 0x2a76
	enum Position {
		nPositionUp = 0,
		nPositionDown = 1,
	};
	enum PositionChangeDirection {
		nPositionChangeDirectionDown = -1,
		nPositionChangeDirectionNone = 0,
		nPositionChangeDirectionUp = 1,
	};
public:
	void PassengerWindow(/*packed*/ class MRect&, long, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~PassengerWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void InitializeCachedSettings(); // vtable+0xc4
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t DoesWindowNeedUpdating() /* override */;
	virtual void MoveToUpPosition(); // vtable+0xc8
	virtual void MoveToDownPosition(); // vtable+0xcc
	virtual void TogglePosition(); // vtable+0xd0
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	void DrawPassengers();
	void GetRectOfPassengerGraphic(int32_t, int32_t, /*packed*/ class MRect&);
	int32_t DoesPositionHitPassenger(long, long, long&);
	/*+0x74*/  enum PassengerWindow::Position nPositionCurrent;
	/*+0x78*/  int32_t nHeightOfWindowToShow;
	/*+0x7c*/  int32_t nYPositionOfWindowWhenDown;
	/*+0x80*/  /*packed*/ class MTimer timerForPositionChange; // 0x10 bytes
	/*+0x90*/  int32_t nChangingPosition;
	/*+0x94*/  long lPassengerDraggedID;
	/*+0x98*/  /*packed*/ class MPoint ptLastCursorPosition; // 0x8 bytes
	/*+0xa0*/  /*unpacked*/ class CBackBuffer *myPassengerImage;
	/*+0xa4*/  /*packed*/ class basic_string<char> sPassengerFile; // 0x8 bytes
};

// Type: /*packed*/ struct tagHeliPassengerData (forward reference);
struct tagHeliPassengerData{ // packed(0x15c bytes) TI: 0x2a7a
	/*+0x0*/   long lPassengerDataChanged;
	/*+0x4*/   long lSeatsTotal;
	/*+0x8*/   long lSeatsUsed;
	/*+0xc*/   long lDoubleSeatsTotal;
	/*+0x10*/  long lDoubleSeatsUsed;
	/*+0x14*/  long lRowWidth;
	/*+0x18*/  long lPassengerCount;
	/*+0x1c*/  /*packed*/ struct tagPassengerInfo passengers[16]; // 0x140 bytes
};

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class MapWindow (forward reference);
// VTABLE: COPTER_D 0x0058f8d8
class MapWindow : public GraphicWindow
{ // packed(0x118 bytes) TI: 0x4206
public:
	void MapWindow(/*packed*/ class MRect&, long, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~MapWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void InitializeCachedSettings(); // vtable+0xc4
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual void DrawButton(int32_t, int32_t); // vtable+0xc8
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual void CreateAutoMessageSelectionPopupWindow(int32_t, int32_t, /*packed*/ class MPoint&); // vtable+0xcc
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual int32_t GetStringIDForVehicleName(int32_t); // vtable+0xd0
	/*+0x74*/  /*unpacked*/ class CBackBuffer *myButtonImage;
	/*+0x78*/  int32_t bCurrentMissionFilter;
	/*+0x7c*/  int32_t bOtherMissionFilter;
	/*+0x80*/  int32_t nTrackingButton;
	/*+0x84*/  int32_t nCurrentAutoID;
	/*+0x88*/  long lCurrentMissionID;
	/*+0x8c*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa8*/  /*packed*/ class MRect rectButtons[6]; // 0x60 bytes
	/*+0x108*/ /*packed*/ class MRect rectMissionText; // 0x10 bytes
};

// Type: /*packed*/ struct MISSION_DATA (forward reference);
struct MISSION_DATA{ // packed(0xd4 bytes) TI: 0x31c4
	/*+0x0*/   char mtext[32]; // 0x20 bytes
	/*+0x20*/  long type_ctr;
	/*+0x24*/  long key;
	/*+0x28*/  /*packed*/ struct Point2d maploc; // 0x8 bytes
	/*+0x30*/  /*packed*/ struct Point2d destmaploc; // 0x8 bytes
	/*+0x38*/  /*packed*/ struct Point2d pickuploc; // 0x8 bytes
	/*+0x40*/  int32_t timer;
	/*+0x44*/  long money_bonus;
	/*+0x48*/  long points_bonus;
	/*+0x4c*/  long flags;
	/*+0x50*/  long type;
	/*+0x54*/  long state;
	/*+0x58*/  /*packed*/ struct __unnamed mdata; // 0x7c bytes
};

// Type: void * __ptr32;

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: /*packed*/ class PopupMenuWindow (forward reference);
// VTABLE: COPTER_D 0x00592220
class PopupMenuWindow : public ListBoxWindow
{ // packed(0xcc bytes) TI: 0x215d
public:
	void PopupMenuWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual void ResizeWindowToFitMenuItems(); // vtable+0x158
	virtual int32_t RemoveStringAtIndex(long) /* override */;
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&) /* override */;
};

// Type: /*packed*/ class EquipmentPanelWindow (forward reference);
// VTABLE: COPTER_D 0x0058f9b0
class EquipmentPanelWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x2a7e
public:
	void EquipmentPanelWindow(char *, /*packed*/ class MRect&, long, /*packed*/ struct CommandSystem*, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*);
	virtual void ~EquipmentPanelWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void InitializeCachedSettings(); // vtable+0xc4
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual void DrawButton(int32_t, int32_t); // vtable+0xc8
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	void CreateMegaphoneSelectionPopupWindow();
	virtual int32_t DoesWindowNeedUpdating() /* override */;
protected:
	void DoCurrentControlStart();
	void DoCurrentControlEnd();
	void DrawBucketWaterGuage();
	void DrawTeargasUsage();
	/*+0x74*/  /*packed*/ class MRect rectControls[4]; // 0x40 bytes
	/*+0xb4*/  long lCurrentSelectedControl;
	/*+0xb8*/  /*packed*/ struct CommandSystem *myCommandSystem;
	/*+0xbc*/  /*unpacked*/ class CBackBuffer *myBucketWaterGuageImage;
	/*+0xc0*/  /*unpacked*/ class CBackBuffer *myButtonImage;
	/*+0xc4*/  long lLastBucketWaterGuageLevel;
	/*+0xc8*/  long lLastTeargasCount;
};

// Type: uint32_t;

// Type: /*packed*/ class DialHand (forward reference);
class DialHand{ // packed(0x34 bytes) TI: 0x2733
	enum DialDirection {
		nDialDirectionClockwise = -1,
		nDialDirectionCounterClockwise = 1,
	};
public:
	void DialHand();
	int32_t SetCurrentValue(long);
	int32_t GetCurrentValue();
	int32_t SetPercent(long);
	void SetMaxValue(long);
	void SetAnglePerValue(float);
	void SetStartAngle(long);
	void SetDialPosition(long, long);
	void SetDialDirection(enum DialHand::DialDirection);
	void SetDialLength(long);
	void SetDialWidth(long);
	void DrawSelf(/*unpacked*/ class CBackBuffer*);
	void SetDialColor(int32_t);
	int32_t HasChangedSinceLastDraw();
	void GetBoundingRect(/*packed*/ class MRect&);
	void CalculateCurrentPosition();
	/*+0x0*/   int32_t bHasChangedSinceLastDraw;
	/*+0x4*/   long lCurrentValue;
	/*+0x8*/   enum DialHand::DialDirection nDialDirection;
	/*+0xc*/   long lMaxValue;
	/*+0x10*/  long lStartAngle;
	/*+0x14*/  long lDialLength;
	/*+0x18*/  long lDialWidth;
	/*+0x1c*/  float fAnglePerValue;
	/*+0x20*/  /*packed*/ class MPoint ptPosition; // 0x8 bytes
	/*+0x28*/  /*packed*/ class MPoint ptEndPosition; // 0x8 bytes
	/*+0x30*/  int32_t nColorDial;
};

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: /*packed*/ class ListBoxWindow;
// VTABLE: COPTER_D 0x005920c8
class ListBoxWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x17a0
public:
	void ListBoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t RemoveString(long); // vtable+0xc4
	virtual int32_t RemoveString(/*packed*/ class basic_string<char>&); // vtable+0xc8
	virtual void RemoveAllStrings(); // vtable+0xcc
	virtual int32_t InsertString(long, long); // vtable+0xd0
	virtual int32_t InsertString(/*packed*/ class basic_string<char>&, long); // vtable+0xd4
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xd8
	virtual int32_t SetSelection(long); // vtable+0xdc
	virtual long GetSelection(); // vtable+0xe0
	virtual void SetShouldSort(); // vtable+0xe4
	virtual void Sort(); // vtable+0xe8
	virtual int32_t MoveLineUp(); // vtable+0xec
	virtual int32_t MoveLineDown(); // vtable+0xf0
	virtual int32_t ScrollToStart(); // vtable+0xf4
	virtual int32_t ScrollToEnd(); // vtable+0xf8
	virtual int32_t ScrollPageUp(); // vtable+0xfc
	virtual int32_t ScrollPageDown(); // vtable+0x100
	virtual int32_t IsIndexInView(long); // vtable+0x104
	virtual void PutIndexInView(long); // vtable+0x108
	virtual int32_t ScrollToFirstLetter(char); // vtable+0x10c
	virtual void SetIndexOfTopLine(long); // vtable+0x110
	virtual long GetLineCount(); // vtable+0x114
	virtual long GetIndexOfTopLine(); // vtable+0x118
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetBackgroundDrawing(int32_t); // vtable+0x11c
	virtual void SetBackgroundPaletteIndex(int32_t, int32_t); // vtable+0x120
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0x124
	virtual void SetFontCharacteristics(long, long, long); // vtable+0x128
	virtual int32_t AddScrollBar(int32_t, int32_t, char *); // vtable+0x12c
	virtual void RemoveScrollBar(int32_t, int32_t); // vtable+0x130
protected:
	virtual void CalculateAllMetrics(); // vtable+0x134
	virtual int32_t GetStringAddressFromIndex(long, /*packed*/ class basic_string<char>*&); // vtable+0x138
	virtual int32_t GetStringFromIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x13c
	virtual int32_t GetIndexFromString(long&, /*packed*/ class basic_string<char>&); // vtable+0x140
	virtual int32_t RemoveStringAtIndex(long); // vtable+0x144
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x148
	virtual int32_t ModifyString(long, /*packed*/ class basic_string<char>&); // vtable+0x14c
	virtual void SetScrollBarValue(); // vtable+0x150
	virtual void SetScrollBarSizes(); // vtable+0x154
	/*+0x74*/  /*packed*/ class list<basic_string<char>> myStringList; // 0x8 bytes
	/*+0x7c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x80*/  /*packed*/ struct SparkalColor colorFontHighlighted;
	/*+0x84*/  int32_t nBackgroundIndex;
	/*+0x88*/  int32_t nBackgroundIndexHighlighted;
	/*+0x8c*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa8*/  unsigned long nTextDrawStyle;
	/*+0xac*/  long lCurrentSelection;
	/*+0xb0*/  long lVisibleLines;
	/*+0xb4*/  long lFirstVisibleLine;
	/*+0xb8*/  long lLineHeight;
	/*+0xbc*/  int32_t bAlwaysSort;
	/*+0xc0*/  /*packed*/ class ScrollBarWindow *myVerticalScrollBarWindow;
	/*+0xc4*/  /*packed*/ class ScrollBarWindow *myHorizontalScrollBarWindow;
	/*+0xc8*/  int32_t bBusySettingSelection;
};



// Contribution: 1:00047270-0004ec1a Module: 47, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00448270
void RadioCompassWindow::RadioCompassWindow(/*packed*/ class MRect& rectNewWindow, long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*unpacked*/ class Radio *myNewRadio, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, SZ_RADIO_COMPASS_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x2A;
	__asm        mov    eax, myNewRadio;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, SZ_COMPASS_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T10f;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T8a;
_T8a:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Te6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Te1;
_Te1:
	__asm        jmp    _Tef;
_Te6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_Tef:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T11c;
_T10f:
	this->sCompassFile.reference = 0x0;
_T11c:
	this->sCompassFile.c_str_ptr = 0x0;
	__asm        jmp    _T12e;
_T12e:
	this->nLastCompassPosition = 0xffffffff;
	__asm        jmp    _T140;
_T140:
	this->rectRadioStations.left = 0x14;
	this->rectRadioStations.top = 0x10;
	this->rectRadioStations.right = 0x56;
	this->rectRadioStations.bottom = 0x22;
	__asm        jmp    _T179;
_T179:
	__asm        jmp    _T17e;
_T17e:
	this->rectRadioStationVolume.left = 0x62;
	this->rectRadioStationVolume.top = 0x14;
	this->rectRadioStationVolume.right = 0x6e;
	this->rectRadioStationVolume.bottom = 0x26;
	__asm        jmp    _T1b7;
_T1b7:
	this-><RadioCompassWindow+0x00> = 0x58f650;
// LINE 76:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044843f
void RadioCompassWindow::~RadioCompassWindow() {

	this-><RadioCompassWindow+0x00> = 0x58f650;
// LINE 83:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::DestroyImage;
// LINE 84:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	return;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044853b
int32_t RadioCompassWindow::Initialize() {
// LINE 93:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 94:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T30;
// LINE 95:
	return 0x0;
// LINE 98:
_T30:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T89;
// LINE 99:
	this->nRadioStationIndex = this->myRadio-><Radio+0x20:4>;
	__asm        jmp    _T51;
// LINE 100:
_T51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 102:
	this->lRadioStationVolume = this->myRadio-><Radio+0x10:4>;
	__asm        jmp    _T77;
// LINE 103:
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 106:
_T89:
	return 0x1;
// LINE 107:
}

// FUNCTION: COPTER_D 0x004485d3
void RadioCompassWindow::InitializeCachedSettings() {
// LINE 114:
	this->lRadioStationVolume = 0xffffffff;
// LINE 115:
	this->nRadioStationIndex = 0xffffffff;
// LINE 116:
	this->nLastCompassPosition = 0xf4240;
// LINE 117:
	return;
}

// FUNCTION: COPTER_D 0x0044860d
void RadioCompassWindow::DestroyImage() {
// LINE 126:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 128:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T6b;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
// LINE 130:
_T5e:
	this->myCompassImage = 0x0;
// LINE 132:
_T6b:
	return;
}

// FUNCTION: COPTER_D 0x00448682
int32_t RadioCompassWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sCompassPath; // 0x8 bytes

// LINE 141:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sCompassPath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sCompassPath.reference = 0x0;
_T63:
	sCompassPath.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 144:
_T6f:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 146:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    _T1ce;
// LINE 147:
	__asm        lea    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x88;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _Tab;
// LINE 148:
_Tab:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1c1;

	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     _Te7;

	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Te7:
	__asm        jmp    _Tec;
_Tec:
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sCompassPath.c_str_ptr, eax;
	__asm        jmp    _T104;
_T104:
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T16e;

	__asm        jmp    _T116;
_T116:
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13a;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T146;

	__asm        jmp    _T146;
_T13a:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T146;
_T146:
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T16e;
_T16e:
	__asm        jmp    _T173;
_T173:
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    _T17c;
_T17c:
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T187;
_T187:
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    _T1a2;
_T1a2:
	__asm        jmp    _T1a7;
_T1a7:
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T1ce;
_T1c1:
	this->myCompassImage = 0x0;
// LINE 150:
_T1ce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 151:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sCompassPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T26b;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T26b;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T24b;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T24b:
	__asm        jmp    _T250;
_T250:
	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T266;
_T266:
	__asm        jmp    _T26b;
_T26b:
	__asm        jmp    _T270;
_T270:
	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     _T292;

	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T292:
	__asm        jmp    _T297;
_T297:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 152:
__RETURN:
}

// FUNCTION: COPTER_D 0x00448928
int32_t RadioCompassWindow::ComposeSelf() {
	/*bp-0x4*/   int32_t nCurrentCompassPosition;

// LINE 169:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 170:
	return 0x0;
// LINE 172:
_T20:
	this->lFrameCount++;
// LINE 173:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T3e;
// LINE 174:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::CheckForRadioChange;
// LINE 175:
_T3e:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x74], 1;
	__asm        je     _Tc6;
// LINE 176:
	nCurrentCompassPosition = G_uheli->yaw;
	__asm        jmp    _T5e;
// LINE 177:
_T5e:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCurrentCompassPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        je     _Tc6;
// LINE 183:
	__asm        mov    ecx, 0x1E0000;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nCurrentCompassPosition, eax;
// LINE 186:
	__asm        push   0x10;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        push   0x190;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 187:
	this->nLastCompassPosition = G_uheli->yaw;
// LINE 191:
_Tc6:
	__asm        jmp    _Tcb;
_Tcb:
	__asm        jmp    _Td0;
_Td0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 192:
	return 0x1;
// LINE 193:
}

// FUNCTION: COPTER_D 0x00448a45
long RadioCompassWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lNewRadioStationVolume;
	/*bp-0x8*/   int32_t nNewRadioStationIndex;

// LINE 205:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    _T6f;

	__asm        jmp    _T74;
_T6f:
	__asm        jmp    _Tce;
_T74:
	__asm        jmp    _T83;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tce;
// LINE 206:
_T83:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    ecx, nCursorX;
	__asm        sub    ecx, 0x14;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, 0x42;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nNewRadioStationIndex, eax;
// LINE 207:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x34];
// LINE 208:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 210:
	__asm        jmp    _T261;
_Tce:
	__asm        jmp    _Td3;
_Td3:
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Te4;
_Te4:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _T131;

	__asm        jmp    _T136;
_T131:
	__asm        jmp    _T261;
_T136:
	__asm        jmp    _T145;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T261;
// LINE 211:
_T145:
	__asm        mov    eax, 0x26;
	__asm        sub    eax, nCursorY;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, 0x12;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 212:
	lNewRadioStationVolume = SoundSettingsWindow::ConvertSliderValueToSoundValue(lNewRadioStationVolume);
// LINE 214:
	__asm        cmp    lNewRadioStationVolume, 0x9C4;
	__asm        jg     _T1e4;
// LINE 215:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x24], eax;
// LINE 216:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1bb;

	__asm        jmp    _T1da;
_T1bb:
	__asm        jmp    _T1c0;
_T1c0:
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T1da;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+0x1C];
_T1da:
	__asm        jmp    _T1df;
// LINE 218:
_T1df:
	__asm        jmp    _T255;
_T1e4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x28], eax;
// LINE 219:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x18], 1;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T209;

	__asm        jmp    _T228;
_T209:
	__asm        jmp    _T20e;
_T20e:
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T228;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   dword ptr [eax+0x1C];
_T228:
	__asm        jmp    _T22d;
// LINE 220:
_T22d:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x1C];
// LINE 221:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
// LINE 223:
_T255:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 225:
_T261:
	return 0x1;
// LINE 226:
}

// FUNCTION: COPTER_D 0x00448cb7
void RadioCompassWindow::SetNewRadioStation(int32_t nNewRadioStationIndex) {
	/*bp-0x4*/   int32_t nStationXPosition;
	/*bp-0x8*/   int32_t nRadioStationCount;

// LINE 242:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _T1e0;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    nRadioStationCount, eax;
// LINE 248:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    _T60;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 250:
	__asm        jmp    _T67;
// LINE 251:
_T60:
	nStationXPosition = 0x14;
_T67:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 252:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    _T8f;
_T8f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 253:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    _Tba;
_Tba:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 254:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    _Tde;
_Tde:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 255:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    _T105;
// LINE 258:
_T105:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    _T12a;
// LINE 259:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 260:
	__asm        jmp    _T131;
// LINE 261:
_T12a:
	nStationXPosition = 0x14;
_T131:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 262:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    _T159;
_T159:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 263:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    _T184;
_T184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 264:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    _T1a8;
_T1a8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x28], eax;
// LINE 265:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    _T1cf;
// LINE 267:
_T1cf:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 269:
_T1e0:
	this->nRadioStationIndex = nNewRadioStationIndex;
// LINE 270:
	return;
}

// FUNCTION: COPTER_D 0x00448eac
void RadioCompassWindow::SetNewRadioStationVolume(long lNewRadioStationVolume) {
	/*bp-0x4*/   int32_t nVolumeYPosition;

// LINE 286:
	lNewRadioStationVolume = SoundSettingsWindow::ConvertSoundValueToSliderValue(lNewRadioStationVolume);
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _T1a2;
// LINE 289:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
// LINE 290:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    _T76;
_T76:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 291:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    _T99;
_T99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 292:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    _Tbf;
_Tbf:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 293:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    _Te5;
// LINE 296:
_Te5:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 297:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    _T122;
_T122:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 298:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    _T145;
_T145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 299:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 300:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    _T191;
// LINE 302:
_T191:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 304:
_T1a2:
	this->lRadioStationVolume = lNewRadioStationVolume;
// LINE 305:
	return;
}

// FUNCTION: COPTER_D 0x00449066
void RadioCompassWindow::CheckForRadioChange() {
	/*bp-0x4*/   long lNewRadioStationVolume;
	/*bp-0x8*/   int32_t nNewRadioStationIndex;

// LINE 314:
	nNewRadioStationIndex = this->myRadio-><Radio+0x20:4>;
	__asm        jmp    _T1d;
// LINE 315:
_T1d:
	lNewRadioStationVolume = this->myRadio-><Radio+0x10:4>;
	__asm        jmp    _T2e;
// LINE 317:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewRadioStationIndex;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        je     _T49;
// LINE 318:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 320:
_T49:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewRadioStationVolume;
	__asm        cmp    [eax+0x80], ecx;
	__asm        je     _T67;
// LINE 321:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 322:
_T67:
	return;
}

// FUNCTION: COPTER_D 0x004490d7
void DialWindow::DialWindow(/*packed*/ class MRect& rectNewWindow, long lNewID, /*packed*/ struct CommandSystem *myNewCommandSystem, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, myNewCommandSystem;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0xFFFFFC18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        mov    [ebp-8], eax;
_Td7:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _Tf1;

	__asm        mov    ecx, [ebp-8];
	__asm        call   DialHand::DialHand;
	__asm        add    dword ptr [ebp-8], 0x34;
	__asm        jmp    _Td7;
_Tf1:
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    dword ptr [ebp-0xC], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x140;
	__asm        mov    [ebp-0x10], eax;
_T108:
	__asm        dec    dword ptr [ebp-0xC];
	__asm        js     _T122;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x10], 0x10;
	__asm        jmp    _T108;
_T122:
	__asm        jmp    _T127;
_T127:
	__asm        jmp    _T12c;
_T12c:
	this->rectMoneyFont.left = 0x14;
	this->rectMoneyFont.top = 0xc;
	this->rectMoneyFont.right = 0x5e;
	this->rectMoneyFont.bottom = 0x1a;
	__asm        jmp    _T165;
_T165:
	this->lCurrentMoney = 0x0;
	this->lCurrentPoints = 0x0;
	__asm        jmp    _T184;
_T184:
	this->ptLastSpotlightPosition.x = 0x2710;
	this->ptLastSpotlightPosition.y = 0x2710;
	__asm        jmp    _T1a3;
_T1a3:
	__asm        jmp    _T1a8;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1A4;
	__asm        mov    [ebp-0x18], eax;
_T1bf:
	__asm        dec    dword ptr [ebp-0x14];
	__asm        js     _T1d9;

	__asm        mov    ecx, [ebp-0x18];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x18], 0x10;
	__asm        jmp    _T1bf;
_T1d9:
	__asm        jmp    _T1de;
_T1de:
	this->lSpotlightControlCurrent = 0xffffffff;
	this-><DialWindow+0x00> = 0x58f738;
// LINE 367:
	this->dials[0].ptPosition.x = 0xa1;
	this->dials[0].ptPosition.y = 0x2f;
	__asm        jmp    _T213;
// LINE 368:
_T213:
	this->dials[0].nDialDirection = 0xffffffff;
	__asm        jmp    _T225;
// LINE 369:
_T225:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jle    _T25c;

	this->dials[0].lCurrentValue = this->dials[0].lMaxValue;
_T25c:
	__asm        jmp    _T261;
// LINE 370:
_T261:
	this->dials[0].lStartAngle = 0x102;
	__asm        jmp    _T273;
// LINE 371:
_T273:
	this->dials[0].fAnglePerValue = 0x40566666;
	__asm        jmp    _T285;
// LINE 372:
_T285:
	this->dials[0].lDialLength = 0x1c;
	__asm        jmp    _T297;
// LINE 373:
_T297:
	this->dials[0].lDialWidth = 0x2;
	__asm        jmp    _T2a9;
// LINE 374:
_T2a9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x48], eax;
	__asm        fimul  dword ptr [ebp-0x48];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x34], ecx;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x50], eax;
	__asm        fimul  dword ptr [ebp-0x50];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x54], eax;
	__asm        fild   dword ptr [ebp-0x54];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x58], eax;
	__asm        fimul  dword ptr [ebp-0x58];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    _T372;
// LINE 375:
_T372:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x140;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x20], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x20];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x1C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    _T41d;
_T41d:
	__asm        jmp    _T422;
// LINE 377:
_T422:
	this->dials[1].ptPosition.x = 0x13c;
	this->dials[1].ptPosition.y = 0x26;
	__asm        jmp    _T441;
// LINE 378:
_T441:
	this->dials[1].nDialDirection = 0xffffffff;
	__asm        jmp    _T453;
// LINE 379:
_T453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE4], 0x186A0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jle    _T48a;

	this->dials[1].lCurrentValue = this->dials[1].lMaxValue;
_T48a:
	__asm        jmp    _T48f;
// LINE 380:
_T48f:
	this->dials[1].lStartAngle = 0x5a;
	__asm        jmp    _T4a1;
// LINE 381:
_T4a1:
	this->dials[1].fAnglePerValue = 0x40666666;
	__asm        jmp    _T4b3;
// LINE 382:
_T4b3:
	this->dials[1].lDialLength = 0x18;
	__asm        jmp    _T4c5;
// LINE 383:
_T4c5:
	this->dials[1].lDialWidth = 0x2;
	__asm        jmp    _T4d7;
// LINE 384:
_T4d7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0x5C], eax;
	__asm        fild   dword ptr [ebp-0x5C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0x60], eax;
	__asm        fimul  dword ptr [ebp-0x60];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x38], ecx;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x64], eax;
	__asm        fild   dword ptr [ebp-0x64];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x68], eax;
	__asm        fimul  dword ptr [ebp-0x68];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x6C], eax;
	__asm        fild   dword ptr [ebp-0x6C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x70], eax;
	__asm        fimul  dword ptr [ebp-0x70];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    _T5a0;
// LINE 385:
_T5a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x150;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x28], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x28];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x24];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    _T64b;
_T64b:
	__asm        jmp    _T650;
// LINE 387:
_T650:
	this->dials[2].ptPosition.x = 0x18e;
	this->dials[2].ptPosition.y = 0x20;
	__asm        jmp    _T66f;
// LINE 388:
_T66f:
	this->dials[2].nDialDirection = 0xffffffff;
	__asm        jmp    _T681;
// LINE 389:
_T681:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x118], 0x19;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jle    _T6b8;

	this->dials[2].lCurrentValue = this->dials[2].lMaxValue;
_T6b8:
	__asm        jmp    _T6bd;
// LINE 390:
_T6bd:
	this->dials[2].lStartAngle = 0x5a;
	__asm        jmp    _T6cf;
// LINE 391:
_T6cf:
	this->dials[2].fAnglePerValue = 0x41600000;
	__asm        jmp    _T6e1;
// LINE 392:
_T6e1:
	this->dials[2].lDialLength = 0x1a;
	__asm        jmp    _T6f3;
// LINE 393:
_T6f3:
	this->dials[2].lDialWidth = 0x2;
	__asm        jmp    _T705;
// LINE 394:
_T705:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x74], eax;
	__asm        fild   dword ptr [ebp-0x74];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0x78], eax;
	__asm        fimul  dword ptr [ebp-0x78];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        fild   dword ptr [ebp-0x7C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x80], eax;
	__asm        fimul  dword ptr [ebp-0x80];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x84], eax;
	__asm        fild   dword ptr [ebp-0x84];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x88], eax;
	__asm        fimul  dword ptr [ebp-0x88];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    _T7da;
// LINE 395:
_T7da:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x160;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x30], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x30];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    _T885;
_T885:
	__asm        jmp    _T88a;
// LINE 397:
_T88a:
	this->rectSpotlightControlSet[0].left = 0xde;
	this->rectSpotlightControlSet[0].top = 0x7;
	this->rectSpotlightControlSet[0].right = 0x102;
	this->rectSpotlightControlSet[0].bottom = 0x12;
	__asm        jmp    _T8c3;
// LINE 398:
_T8c3:
	this->rectSpotlightControlSet[1].left = 0x102;
	this->rectSpotlightControlSet[1].top = 0x12;
	this->rectSpotlightControlSet[1].right = 0x10c;
	this->rectSpotlightControlSet[1].bottom = 0x3d;
	__asm        jmp    _T8fc;
// LINE 399:
_T8fc:
	this->rectSpotlightControlSet[2].left = 0xdd;
	this->rectSpotlightControlSet[2].top = 0x3c;
	this->rectSpotlightControlSet[2].right = 0x102;
	this->rectSpotlightControlSet[2].bottom = 0x47;
	__asm        jmp    _T935;
// LINE 400:
_T935:
	this->rectSpotlightControlSet[3].left = 0xd2;
	this->rectSpotlightControlSet[3].top = 0x11;
	this->rectSpotlightControlSet[3].right = 0xdd;
	this->rectSpotlightControlSet[3].bottom = 0x46;
	__asm        jmp    _T96e;
// LINE 401:
_T96e:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00449a54
void DialWindow::~DialWindow() {

	this-><DialWindow+0x00> = 0x58f738;
// LINE 408:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DestroyImage;
// LINE 409:
	return;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00449a83
int32_t DialWindow::Initialize() {
// LINE 419:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 420:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 421:
__RETURN:
}

// FUNCTION: COPTER_D 0x00449aae
void DialWindow::InitializeCachedSettings() {
// LINE 431:
	this->nCurrentDamage = 0xfffffc18;
// LINE 432:
	this->lCurrentFuelPercentage = 0xfffffc18;
// LINE 433:
	this->lCurrentFuelLight = 0xfffffc18;
// LINE 434:
	this->lCurrentMoney = 0xfffffc18;
// LINE 435:
	this->lCurrentPoints = 0xfffffc18;
// LINE 436:
	this->bCurrentPointsOverLimit = 0x0;
// LINE 437:
	this->ptLastSpotlightPosition.x = 0xfffffc18;
// LINE 438:
	this->ptLastSpotlightPosition.y = 0xfffffc18;
// LINE 439:
	__asm        jmp    _T79;
_T79:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jne    _Tf0;
// LINE 440:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _Tb6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-4], eax;
_Tb6:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _Te6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _Teb;
_Te6:
	__asm        jmp    _Teb;
// LINE 441:
_Teb:
	__asm        jmp    _T14f;
// LINE 442:
_Tf0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _T11a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
_T11a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _T14a;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _T14f;
_T14a:
	__asm        jmp    _T14f;
// LINE 444:
_T14f:
	__asm        jmp    _T154;
_T154:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jne    _T1cb;
// LINE 445:
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T191;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0xC], eax;
_T191:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T1c1;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T1c6;
_T1c1:
	__asm        jmp    _T1c6;
// LINE 446:
_T1c6:
	__asm        jmp    _T22a;
// LINE 447:
_T1cb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T1f5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
_T1f5:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T225;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T22a;
_T225:
	__asm        jmp    _T22a;
// LINE 449:
_T22a:
	__asm        jmp    _T22f;
_T22f:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jne    _T2a6;
// LINE 450:
	__asm        mov    dword ptr [ebp-0x14], 2;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T26c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x14], eax;
_T26c:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T29c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T2a1;
_T29c:
	__asm        jmp    _T2a1;
// LINE 451:
_T2a1:
	__asm        jmp    _T305;
// LINE 452:
_T2a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T2d0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
_T2d0:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T300;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T305;
_T300:
	__asm        jmp    _T305;
// LINE 453:
_T305:
	this->lSpotlightControlCurrent = 0xffffffff;
// LINE 454:
	return;
}

// FUNCTION: COPTER_D 0x00449dca
void DialWindow::DestroyImage() {
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 465:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T62;
// LINE 466:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T58;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T53;
_T53:
	__asm        jmp    _T58;
// LINE 467:
_T58:
	this->mySecondImage = 0x0;
// LINE 469:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _Tb9;
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tac;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
// LINE 471:
_Tac:
	this->myDamageImage = 0x0;
// LINE 473:
_Tb9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T110;
// LINE 474:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T103;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tfe;
_Tfe:
	__asm        jmp    _T103;
// LINE 475:
_T103:
	this->myFuelLightImage = 0x0;
// LINE 477:
_T110:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T15e;
// LINE 478:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T154;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   BitmappedFont::~BitmappedFont;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T14f;
_T14f:
	__asm        jmp    _T154;
// LINE 479:
_T154:
	this->myMoneyGuageFont = 0x0;
// LINE 481:
_T15e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T1b5;
// LINE 482:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T1a8;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1a3;
_T1a3:
	__asm        jmp    _T1a8;
// LINE 483:
_T1a8:
	this->myPointsLightImage = 0x0;
// LINE 485:
_T1b5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     _T20c;
// LINE 486:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1ff;

	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1fa;
_T1fa:
	__asm        jmp    _T1ff;
// LINE 487:
_T1ff:
	this->myAltitudeHundredsImage = 0x0;
// LINE 489:
_T20c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T263;
// LINE 490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T256;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T251;
_T251:
	__asm        jmp    _T256;
// LINE 491:
_T256:
	this->mySpotlightBootImage = 0x0;
// LINE 493:
_T263:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T2ba;
// LINE 494:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2ad;

	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2a8;
_T2a8:
	__asm        jmp    _T2ad;
// LINE 495:
_T2ad:
	this->mySpotlightBootBackImage = 0x0;
// LINE 497:
_T2ba:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T322;
// LINE 498:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T2dd;

	__asm        jmp    _T2e2;
_T2dd:
	__asm        jmp    _T303;
_T2e2:
	__asm        jmp    _T2f1;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T303;
// LINE 499:
_T2f1:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 500:
_T303:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 501:
	this->lSpotlightControlCurrent = 0xffffffff;
// LINE 503:
_T322:
	return;
}

// FUNCTION: COPTER_D 0x0044a0f6
void DialWindow::TurnOffSpotlightCommand(int32_t nIndex) {
// LINE 510:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    _T40;
// LINE 511:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    _T3b;
// LINE 512:
_T3b:
	__asm        jmp    _Td7;
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    _T74;
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    _T6f;
// LINE 514:
_T6f:
	__asm        jmp    _Td7;
_T74:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    _Ta8;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    _Ta3;
// LINE 516:
_Ta3:
	__asm        jmp    _Td7;
_Ta8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    _Td7;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    _Td7;
// LINE 518:
_Td7:
	return;
}

// FUNCTION: COPTER_D 0x0044a1d9
void DialWindow::TurnOnSpotlightCommand(int32_t nIndex) {
// LINE 526:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    _T40;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    _T3b;
// LINE 528:
_T3b:
	__asm        jmp    _Td7;
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    _T74;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    _T6f;
// LINE 530:
_T6f:
	__asm        jmp    _Td7;
_T74:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    _Ta8;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    _Ta3;
// LINE 532:
_Ta3:
	__asm        jmp    _Td7;
_Ta8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    _Td7;
// LINE 533:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    _Td7;
// LINE 534:
_Td7:
	return;
}

// FUNCTION: COPTER_D 0x0044a2bc
int32_t DialWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	/*bp-0x104*/ char szFullPath[260]; // 0x104 bytes

// LINE 546:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 550:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    _Td0;
// LINE 551:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T90;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T9d;
_T90:
	this->mySecondImage = 0x0;
// LINE 552:
_T9d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _Td0;
// LINE 554:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x34];
// LINE 557:
_Td0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T174;
// LINE 558:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_DAMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 559:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T13f;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T14f;
_T13f:
	this->myDamageImage = 0x0;
// LINE 560:
_T14f:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+8];
// LINE 562:
_T174:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    _T1f3;
// LINE 563:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_FUEL_LIGHT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 564:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T1e3;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T1f3;
_T1e3:
	this->myFuelLightImage = 0x0;
// LINE 566:
_T1f3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        jne    _T272;
// LINE 567:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_MANA_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 568:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _T262;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T272;
_T262:
	this->myPointsLightImage = 0x0;
// LINE 570:
_T272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T2fd;
// LINE 571:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_MONEY_FONT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   8;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 572:
	__asm        push   0x54;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x118], eax;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     _T2da;

	__asm        push   1;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x118];
	__asm        call   BitmappedFont::BitmappedFont;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T2e7;
_T2da:
	this->myMoneyGuageFont = 0x0;
// LINE 573:
_T2e7:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx];
// LINE 575:
_T2fd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        jne    _T37c;
// LINE 576:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_ALTITUDE_NBR_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 577:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _T36c;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T37c;
_T36c:
	this->myAltitudeHundredsImage = 0x0;
// LINE 579:
_T37c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T420;
// LINE 580:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_BOOT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 581:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T3eb;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x120];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    _T3fb;
_T3eb:
	this->mySpotlightBootImage = 0x0;
// LINE 582:
_T3fb:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+8];
// LINE 584:
_T420:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        jne    _T49f;
// LINE 585:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_BOOT_BACK_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 586:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x124], eax;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T48f;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    _T49f;
_T48f:
	this->mySpotlightBootBackImage = 0x0;
// LINE 588:
_T49f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 590:
	return this->mySecondImage;
// LINE 591:
}

// FUNCTION: COPTER_D 0x0044a784
void DialWindow::DrawCurrentDamage() {
	/*bp-0x4*/   int32_t nDamageInRangeOf0to15;
	// StaticLocal: 0x00598f80
	static int32_t nDamageArray[6][2] = {{14, 8}, {13, 7}, {12, 6}, {11, 5}, {10, 4}, {9, 3}};
	;
	/*bp-0x8*/   int32_t i;
	/*bp-0xc*/   int32_t nSourceImageX;

// LINE 618:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x98];
	__asm        lea    ebx, [ebx+ebx*2];
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumDamage;
	__asm        add    esp, 4;
	__asm        mov    ecx, eax;
	__asm        mov    eax, ebx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nDamageInRangeOf0to15, eax;
// LINE 619:
	i = 0x0;
	__asm        jmp    _T42;
_T3f:
	i++;
_T42:
	__asm        cmp    i, 6;
	__asm        jge    _Td5;
// LINE 620:
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    nDamageArray[0][eax*8], ecx;
	__asm        jg     _T6b;
// LINE 621:
	nSourceImageX = 0x0;
// LINE 622:
	__asm        jmp    _T91;
_T6b:
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    nDamageArray[0][1][eax*8], ecx;
	__asm        jg     _T8a;
// LINE 623:
	nSourceImageX = 0xf;
// LINE 624:
	__asm        jmp    _T91;
// LINE 625:
_T8a:
	nSourceImageX = 0x1e;
// LINE 629:
_T91:
	__asm        push   0xE;
	__asm        mov    eax, nSourceImageX;
	__asm        add    eax, 0xF;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nSourceImageX;
	__asm        push   eax;
	__asm        push   0x3F;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, 0xB;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 630:
	__asm        jmp    _T3f;
// LINE 631:
_Td5:
	return;
}

// FUNCTION: COPTER_D 0x0044a863
long DialWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   int32_t i;

// LINE 640:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     _T106;
// LINE 641:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T48;
// LINE 642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 643:
_T48:
	i = 0x0;
	__asm        jmp    _T57;
_T54:
	i++;
_T57:
	__asm        cmp    i, 4;
	__asm        jge    _T106;
// LINE 644:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    _Tca;

	__asm        jmp    _Tcf;
_Tca:
	__asm        jmp    _T101;
_Tcf:
	__asm        jmp    _Tde;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T101;
// LINE 645:
_Tde:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1E4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 646:
	__asm        jmp    _T106;
// LINE 648:
_T101:
	__asm        jmp    _T54;
// LINE 650:
_T106:
	return 0x1;
// LINE 651:
}

// FUNCTION: COPTER_D 0x0044a97a
long DialWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 658:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 659:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 660:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T74;
// LINE 661:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 662:
	this->lSpotlightControlCurrent = 0xffffffff;
// LINE 664:
_T74:
	return 0x1;
// LINE 665:
}

// FUNCTION: COPTER_D 0x0044a9ff
long DialWindow::DoCursorMove(long nCursorX, long nCursorY) {
	/*bp-0x4*/   long lNewSpotlightCommand;
	/*bp-0x8*/   int32_t i;

// LINE 676:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T10f;
// LINE 677:
	i = 0x0;
	lNewSpotlightCommand = 0xffffffff;
	__asm        jmp    _T32;
_T2f:
	i++;
_T32:
	__asm        cmp    i, 4;
	__asm        jge    _Tc9;
// LINE 678:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    _Ta5;

	__asm        jmp    _Taa;
_Ta5:
	__asm        jmp    _Tc4;
_Taa:
	__asm        jmp    _Tb9;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tc4;
// LINE 679:
_Tb9:
	lNewSpotlightCommand = i;
// LINE 680:
	__asm        jmp    _Tc9;
// LINE 682:
_Tc4:
	__asm        jmp    _T2f;
// LINE 683:
_Tc9:
	__asm        cmp    lNewSpotlightCommand, 0;
	__asm        jl     _T10f;

	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSpotlightCommand;
	__asm        cmp    [eax+0x1E4], ecx;
	__asm        je     _T10f;
// LINE 684:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 685:
	__asm        mov    eax, lNewSpotlightCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 686:
	this->lSpotlightControlCurrent = lNewSpotlightCommand;
// LINE 689:
_T10f:
	return 0x1;
// LINE 690:
}

// FUNCTION: COPTER_D 0x0044ab1f
int32_t DialWindow::ComposeSelf() {
	/*bp-0x10*/  char szMoneyString[16]; // 0x10 bytes
	/*bp-0x18*/  /*packed*/ class MPoint ptSpotLightBackPositionCoordinates; // 0x8 bytes
	// StaticLocal: 0x00598fb0
	static long lFrameCounter = 12;
	;
	/*bp-0x1c*/  long lStringLength;
	/*bp-0x24*/  /*packed*/ class MPoint ptSpotLightPositionLocalCoordinates; // 0x8 bytes

// LINE 700:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 701:
_T1c:
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
// LINE 704:
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T3d;
// LINE 705:
	return 0x0;
// LINE 707:
_T3d:
	lFrameCounter++;
// LINE 708:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 1;
	__asm        je     _Te55;
// LINE 709:
	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        cmp    [eax+0xD0], ecx;
	__asm        je     _T8f;

	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DrawCurrentDamage;
_T8f:
	__asm        jmp    _T94;
// LINE 712:
_T94:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::SetNewDialPositions;
// LINE 715:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tc7;

	__asm        jmp    _Tb4;
_Tb4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T3d5;
_Tc7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x5C], eax;
// LINE 716:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        fimul  dword ptr [ebp-0xA4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x58], ecx;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xA8], eax;
	__asm        fild   dword ptr [ebp-0xA8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        fimul  dword ptr [ebp-0xAC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xB0], eax;
	__asm        fild   dword ptr [ebp-0xB0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        fimul  dword ptr [ebp-0xB4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    _T1de;
_T1de:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        jmp    _T25c;
// LINE 717:
_T25c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x140];
	__asm        cmp    [eax+0x148], ecx;
	__asm        jge    _T310;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
_T310:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14C];
	__asm        cmp    [eax+0x144], ecx;
	__asm        jle    _T364;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
_T364:
	__asm        jmp    _T369;
_T369:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x7C], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x7C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x78];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    _T3d0;
_T3d0:
	__asm        jmp    _T3d5;
// LINE 719:
_T3d5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3fd;

	__asm        jmp    _T3ea;
_T3ea:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        je     _T729;
_T3fd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x68], eax;
// LINE 720:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        fild   dword ptr [ebp-0xB8];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0xBC], eax;
	__asm        fimul  dword ptr [ebp-0xBC];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x64], ecx;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC0], eax;
	__asm        fild   dword ptr [ebp-0xC0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        fimul  dword ptr [ebp-0xC4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        fild   dword ptr [ebp-0xC8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xCC], eax;
	__asm        fimul  dword ptr [ebp-0xCC];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    _T514;
_T514:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T531;
_T531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 0;
	__asm        jmp    _T592;
// LINE 721:
_T592:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x150];
	__asm        cmp    [eax+0x158], ecx;
	__asm        jge    _T64c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
_T64c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x154];
	__asm        cmp    [eax+0x15C], ecx;
	__asm        jge    _T6a6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
_T6a6:
	__asm        jmp    _T6ab;
_T6ab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x88], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x88];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x84];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    _T724;
_T724:
	__asm        jmp    _T729;
// LINE 723:
_T729:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T751;

	__asm        jmp    _T73e;
_T73e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        je     _Ta7d;
_T751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x74], eax;
// LINE 724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0xD0], eax;
	__asm        fild   dword ptr [ebp-0xD0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0xD4], eax;
	__asm        fimul  dword ptr [ebp-0xD4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x70], ecx;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xD8], eax;
	__asm        fild   dword ptr [ebp-0xD8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xDC], eax;
	__asm        fimul  dword ptr [ebp-0xDC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xE0], eax;
	__asm        fild   dword ptr [ebp-0xE0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xE4], eax;
	__asm        fimul  dword ptr [ebp-0xE4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    _T868;
_T868:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x13C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _T885;
_T885:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0;
	__asm        jmp    _T8e6;
// LINE 725:
_T8e6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x160];
	__asm        cmp    [eax+0x168], ecx;
	__asm        jge    _T9a0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
_T9a0:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x16C];
	__asm        cmp    [eax+0x164], ecx;
	__asm        jle    _T9fa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
_T9fa:
	__asm        jmp    _T9ff;
_T9ff:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x94], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x94];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x90];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    _Ta78;
_Ta78:
	__asm        jmp    _Ta7d;
// LINE 727:
_Ta7d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Taa4;

	__asm        call   GetUserMoney;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x180];
	__asm        je     _Tb04;
// LINE 728:
_Taa4:
	this->lCurrentMoney = GetUserMoney();
// LINE 729:
	lStringLength = sprintf(this->lCurrentMoney, 0x59906c, szMoneyString[0]);
// LINE 731:
	__asm        push   8;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        lea    eax, szMoneyString[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x170;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   BitmappedFont::DrawTextLineFormatNoClip;
// LINE 734:
_Tb04:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tb44;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_SpotLiteXRotation;
	__asm        cmp    [eax+0x190], ecx;
	__asm        jne    _Tb44;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_SpotLiteYRotation;
	__asm        cmp    [eax+0x18C], ecx;
	__asm        je     _Tcb3;
// LINE 736:
_Tb44:
	this->ptLastSpotlightPosition.y = G_SpotLiteXRotation;
// LINE 737:
	this->ptLastSpotlightPosition.x = G_SpotLiteYRotation;
// LINE 742:
	__asm        mov    eax, G_SpotLiteYRotation;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.x, eax;
// LINE 743:
	__asm        mov    eax, G_SpotLiteXRotation;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.y, eax;
// LINE 744:
	ptSpotLightBackPositionCoordinates.x = (0xa - ptSpotLightPositionLocalCoordinates.x);
// LINE 745:
	ptSpotLightBackPositionCoordinates.y = (0xe - ptSpotLightPositionLocalCoordinates.y);
// LINE 746:
	ptSpotLightPositionLocalCoordinates.x += 0xe1;
// LINE 747:
	ptSpotLightPositionLocalCoordinates.y += 0x21;
// LINE 748:
	__asm        push   0x4B;
	__asm        push   0x104;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 751:
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        add    eax, 0x25;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        add    eax, 0x1F;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        push   0xDF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x94];
	__asm        call   dword ptr [edx+0xC];
// LINE 753:
	__asm        jmp    _Tc37;
_Tc37:
	__asm        jmp    _Tc3c;
_Tc3c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _Tc65;
_Tc65:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _Tc84;
_Tc84:
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        lea    eax, ptSpotLightPositionLocalCoordinates.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0x2C];
// LINE 756:
_Tcb3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tced;

	__asm        call   GetUserPoints;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x184];
	__asm        je     _Te55;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x188], 0;
	__asm        jne    _Te55;
// LINE 757:
// Block start:
	/*bp-0x28*/  int32_t iLitEnd;
	/*bp-0x2c*/  const int32_t nYPosition;
	/*bp-0x30*/  int32_t i;
	/*bp-0x34*/  int32_t nXPosition;
	/*bp-0x38*/  const int32_t iGuageEnd;
_Tced:
	nXPosition = 0x14;
// LINE 758:
	iGuageEnd = 0xf;
	nYPosition = 0x25;
// LINE 760:
	this->lCurrentPoints = GetUserPoints();
// LINE 761:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x184], 0x3E8;
	__asm        jle    _Td49;
// LINE 762:
	this->lCurrentPoints = 0x3e8;
// LINE 763:
	this->bCurrentPointsOverLimit = 0x1;
// LINE 765:
_Td49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x184];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iLitEnd, eax;
// LINE 767:
	i = 0x0;
	__asm        jmp    _Td79;
_Td72:
	i++;
	nXPosition += 0x5;
_Td79:
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    _Tdbf;
// LINE 768:
	__asm        push   0xD;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Td72;
// LINE 769:
_Tdbf:
	__asm        cmp    i, 0xF;
	__asm        jge    _Te55;
// LINE 771:
	__asm        push   0xD;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
// LINE 772:
	i++;
// LINE 773:
	nXPosition += 0x5;
// LINE 776:
	__asm        jmp    _Te11;
_Te0a:
	i++;
	nXPosition += 0x5;
_Te11:
	__asm        cmp    i, 0xF;
	__asm        jge    _Te55;
// LINE 777:
	__asm        push   0xD;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Te0a;
// LINE 784:
// Block end:
_Te55:
	__asm        jmp    _Te5a;
_Te5a:
	__asm        jmp    _Te5f;
_Te5f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xC];
// LINE 786:
	return 0x1;
// LINE 787:
}

// FUNCTION: COPTER_D 0x0044b9e0
int32_t DialWindow::DoesWindowNeedUpdating() {
// LINE 798:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        jne    _T65;

	__asm        jmp    _T26;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        jne    _T65;

	__asm        jmp    _T3b;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T65;
_T65:
_T6f:
_T71:
	return (G_uheli->damage == this->nCurrentDamage);
// LINE 799:
}

// FUNCTION: COPTER_D 0x0044ba5b
void DialWindow::SetNewDialPositions() {
	/*bp-0x4*/   long lNewAltitude;
	// StaticLocal: 0x00598fb4
	static long lFrameCounter = 7;
	;
	/*bp-0x8*/   long lNewFuelLight;

// LINE 816:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T1d7;
// LINE 817:
	__asm        push   0x640000;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    eax, S_helitype_data[0].fuel_capacity[eax*8];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x320];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x10], eax;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _T8a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-0x10], eax;
_T8a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _Tba;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _Tce;
_Tba:
	__asm        jmp    _T1d7;

	__asm        jmp    _Tce;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1d7;
// LINE 819:
_Tce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 820:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jle    _T13e;
// LINE 821:
	lNewFuelLight = 0x0;
// LINE 822:
	__asm        jmp    _T161;
_T13e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xA;
	__asm        jle    _T15a;
// LINE 823:
	lNewFuelLight = 0x1;
// LINE 824:
	__asm        jmp    _T161;
// LINE 825:
_T15a:
	lNewFuelLight = 0x2;
// LINE 826:
_T161:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewFuelLight;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jne    _T183;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jge    _T1d7;
// LINE 827:
_T183:
	this->lCurrentFuelLight = lNewFuelLight;
// LINE 828:
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    [ebp-0xC], eax;
	__asm        inc    lNewFuelLight;
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x3B;
	__asm        push   0x88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 832:
_T1d7:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    _T3df;
// LINE 833:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, G_uheli;
	__asm        sub    eax, [ecx+0x150];
	__asm        sar    eax, 0x10;
	__asm        mov    lNewAltitude, eax;
	__asm        mov    eax, lNewAltitude;
	__asm        mov    [ebp-0x18], eax;
// LINE 834:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T22a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x18], eax;
_T22a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T25a;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T26e;
_T25a:
	__asm        jmp    _T30f;

	__asm        jmp    _T26e;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T30f;
// LINE 835:
_T26e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 836:
	__asm        mov    eax, lNewAltitude;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, 0x5A;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewAltitude, edx;
// LINE 839:
	__asm        mov    eax, lNewAltitude;
	__asm        add    eax, 9;
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    eax, lNewAltitude;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x22;
	__asm        push   0x12C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC];
// LINE 841:
_T30f:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x128];
	__asm        sar    eax, 0x14;
	__asm        push   eax;
	__asm        call   abs;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T347;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x20], eax;
_T347:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T377;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T38b;
_T377:
	__asm        jmp    _T3df;

	__asm        jmp    _T38b;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T3df;
// LINE 842:
_T38b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 845:
_T3df:
	lFrameCounter++;
// LINE 846:
	return;
}

// FUNCTION: COPTER_D 0x0044be4a
void PassengerWindow::PassengerWindow(/*packed*/ class MRect& rectNewPosition, long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_PASSENGER_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x2B;
	__asm        mov    eax, rectNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb5;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        jmp    _Tba;
_Tba:
	this->nChangingPosition = 0x0;
	this->lPassengerDraggedID = 0xffffffff;
	__asm        jmp    _Td9;
_Td9:
	__asm        jmp    _Tde;
_Tde:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, SZ_PASSENGER_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1a6;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T121;
_T121:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T17d;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T178;
_T178:
	__asm        jmp    _T186;
_T17d:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T186:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T195;
_T195:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T1b3;
_T1a6:
	this->sPassengerFile.reference = 0x0;
_T1b3:
	this->sPassengerFile.c_str_ptr = 0x0;
	__asm        jmp    _T1c5;
_T1c5:
	this-><PassengerWindow+0x00> = 0x58f800;
// LINE 911:
	this-><PassengerWindow+0x58> = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 912:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044c032
void PassengerWindow::~PassengerWindow() {

	this-><PassengerWindow+0x00> = 0x58f800;
// LINE 920:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DestroyImage;
// LINE 921:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	__asm        jmp    _Tef;
_Tef:
	return;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044c133
int32_t PassengerWindow::Initialize() {
// LINE 931:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 932:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 933:
__RETURN:
}

// FUNCTION: COPTER_D 0x0044c15e
void PassengerWindow::InitializeCachedSettings() {
// LINE 941:
	__asm        cmp    G_uheli, 0;
	__asm        je     _T2c;
// LINE 942:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerSetChanged;
	__asm        add    esp, 4;
// LINE 943:
_T2c:
	return;
}

// FUNCTION: COPTER_D 0x0044c194
int32_t PassengerWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sPassengerPath; // 0x8 bytes

// LINE 951:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sPassengerPath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sPassengerPath.reference = 0x0;
_T63:
	sPassengerPath.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 954:
_T6f:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 955:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _Ta2;
// LINE 956:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 958:
_Ta2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        jne    _T222;
// LINE 959:
	__asm        lea    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _Td2;
// LINE 960:
_Td2:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1e8;

	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     _T10e;

	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T10e:
	__asm        jmp    _T113;
_T113:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sPassengerPath.c_str_ptr, eax;
	__asm        jmp    _T12b;
_T12b:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T195;

	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T161;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T16d;

	__asm        jmp    _T16d;
_T161:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T16d;
_T16d:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T195;
_T195:
	__asm        jmp    _T19a;
_T19a:
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    _T1a3;
_T1a3:
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T1ae;
_T1ae:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    _T1c9;
_T1c9:
	__asm        jmp    _T1ce;
_T1ce:
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    _T1f5;
_T1e8:
	this->myPassengerImage = 0x0;
// LINE 961:
_T1f5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T222;
// LINE 962:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+8];
// LINE 964:
_T222:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 966:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2bf;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T2bf;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T29f;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T29f:
	__asm        jmp    _T2a4;
_T2a4:
	__asm        jmp    _T2a9;
_T2a9:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        jmp    _T2bf;
_T2bf:
	__asm        jmp    _T2c4;
_T2c4:
	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     _T2e6;

	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e6:
	__asm        jmp    _T2eb;
_T2eb:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 967:
__RETURN:
}

// FUNCTION: COPTER_D 0x0044c48e
void PassengerWindow::DestroyImage() {
// LINE 975:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     _T6b;
// LINE 977:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
// LINE 978:
_T5e:
	this->myPassengerImage = 0x0;
// LINE 980:
_T6b:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T7e;

	__asm        jmp    _T83;
_T7e:
	__asm        jmp    _Tb1;
_T83:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb1;
// LINE 981:
_T92:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 982:
	this->lPassengerDraggedID = 0xffffffff;
// LINE 984:
_Tb1:
	return;
}

// FUNCTION: COPTER_D 0x0044c549
int32_t PassengerWindow::ComposeSelf() {
// LINE 991:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 992:
	return 0x0;
// LINE 997:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        jne    _T3d;
// LINE 998:
	return 0x0;
// LINE 999:
_T3d:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1001:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T222;
// LINE 1002:
// Block start:
	/*bp-0x4*/   unsigned long lTimeElapsed;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _Tfc;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _Ta0;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;

	__asm        jmp    _Te7;
_Ta0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Td0;

	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;

	__asm        jmp    _Te7;
_Td0:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        add    [ebp-0x48], eax;
_Tfc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T143;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     _T143;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    _T14e;
_T143:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    _T14e;
// LINE 1004:
_T14e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 1;
	__asm        jne    _T17e;
// LINE 1006:
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        add    eax, 0x2B;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 1008:
	__asm        jmp    _T19d;
// LINE 1010:
_T17e:
	__asm        mov    ecx, 0x73;
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        sub    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x78], ecx;
// LINE 1013:
_T19d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x2B;
	__asm        jg     _T1d0;
// LINE 1014:
	this->nHeightOfWindowToShow = 0x2b;
// LINE 1015:
	this->nChangingPosition = 0x0;
// LINE 1016:
	this->nPositionCurrent = 0x1;
// LINE 1018:
	__asm        jmp    _T1fe;
_T1d0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x73;
	__asm        jl     _T1fe;
// LINE 1019:
	this->nHeightOfWindowToShow = 0x73;
// LINE 1020:
	this->nChangingPosition = 0x0;
// LINE 1021:
	this->nPositionCurrent = 0x0;
// LINE 1024:
_T1fe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        sub    ecx, 0x2B;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1028:
// Block end:
_T222:
	__asm        jmp    _T227;
_T227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1031:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DrawPassengers;
// LINE 1033:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     _T40f;
// LINE 1034:
// Block start:
	/*bp-0x8*/   long lPassengerIndex;
	/*bp-0x10*/  /*packed*/ class MPoint ptGraphicIconPosition; // 0x8 bytes
	/*bp-0x20*/  /*packed*/ class MRect rectSource; // 0x10 bytes
	/*bp-0x24*/  /*packed*/ struct tagHeliPassengerData *tempHeliPassengerData;
	__asm        jmp    _T27f;
_T27f:
	__asm        jmp    _T284;
// LINE 1035:
_T284:
	tempHeliPassengerData = (G_uheli + 0x1c4);
// LINE 1036:
	lPassengerIndex = HeliPassengerGetIndexInHeli(this->lPassengerDraggedID, tempHeliPassengerData);
// LINE 1037:
	__asm        jmp    _T2af;
_T2af:
	__asm        mov    dword ptr [ebp-0x2C], 0xD;
	__asm        mov    dword ptr [ebp-0x28], 0x10;
	__asm        jmp    _T2c2;
_T2c2:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        sub    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        sub    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T2f1;
_T2f1:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ptGraphicIconPosition.x, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ptGraphicIconPosition.y, eax;
	__asm        jmp    _T302;
_T302:
	__asm        jmp    _T307;
// LINE 1039:
_T307:
	__asm        cmp    lPassengerIndex, 0xFFFFFFFF;
	__asm        je     _T3c9;
// LINE 1040:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, G_uheli;
	__asm        sub    eax, [ecx+0x154];
	__asm        cmp    eax, 0x50000;
	__asm        jle    _T35a;
// LINE 1041:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1043:
	__asm        jmp    _T388;
// LINE 1045:
_T35a:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1047:
_T388:
	__asm        lea    eax, ptGraphicIconPosition.y;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1048:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1050:
	__asm        jmp    _T40f;
// LINE 1051:
_T3c9:
	this->lPassengerDraggedID = 0xffffffff;
// LINE 1052:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T3e9;

	__asm        jmp    _T3ee;
_T3e9:
	__asm        jmp    _T40f;
_T3ee:
	__asm        jmp    _T3fd;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T40f;
// LINE 1053:
_T3fd:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1056:
// Block end:
_T40f:
	return 0x1;
// LINE 1057:
}

// FUNCTION: COPTER_D 0x0044c967
void PassengerWindow::DrawPassengers() {
	/*bp-0x40*/  int32_t bSeats[16]; // 0x40 bytes
	/*bp-0x50*/  /*packed*/ class MRect rectSource; // 0x10 bytes
	/*bp-0x54*/  int32_t nCurrentSeat;
	/*bp-0x58*/  /*packed*/ struct tagHeliPassengerData *tempHeliPassengerData;
	/*bp-0x5c*/  int32_t i;
	/*bp-0x6c*/  /*packed*/ class MRect rectDestination; // 0x10 bytes

// LINE 1064:
	tempHeliPassengerData = (G_uheli + 0x1c4);
// LINE 1067:
	__asm        jmp    _T1e;
_T1e:
	__asm        jmp    _T23;
// LINE 1068:
_T23:
	__asm        jmp    _T28;
_T28:
	__asm        jmp    _T2d;
// LINE 1071:
_T2d:
	i = 0x0;
	__asm        jmp    _T3c;
_T39:
	i++;
_T3c:
	__asm        cmp    i, 0x10;
	__asm        jge    _T56;
// LINE 1072:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jmp    _T39;
// LINE 1074:
_T56:
	i = 0x0;
	__asm        jmp    _T65;
_T62:
	i++;
_T65:
	__asm        cmp    i, 0x10;
	__asm        jge    _T1b6;
// LINE 1075:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    _T8b;
// LINE 1076:
	__asm        jmp    _T62;
// LINE 1077:
_T8b:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1079:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1080:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1081:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1083:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    _T1a6;
// LINE 1084:
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    _T141;
// LINE 1085:
	rectSource.bottom = ((this-><PassengerWindow+0x1c> - rectDestination.top) + rectSource.top);
// LINE 1086:
_T141:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x94];
	__asm        cmp    [eax+ecx+0x28], edx;
	__asm        jne    _T170;
// LINE 1087:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1089:
_T170:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1092:
_T1a6:
	__asm        mov    eax, nCurrentSeat;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 1;
// LINE 1093:
	__asm        jmp    _T62;
// LINE 1096:
_T1b6:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1097:
	nCurrentSeat = 0x0;
	__asm        jmp    _T1d5;
_T1d2:
	nCurrentSeat++;
_T1d5:
	__asm        mov    eax, tempHeliPassengerData;
	__asm        mov    ecx, nCurrentSeat;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    _T2a2;
// LINE 1098:
	__asm        mov    eax, nCurrentSeat;
	__asm        cmp    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jne    _T29d;
// LINE 1099:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1100:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    _T29d;
// LINE 1102:
	__asm        jmp    _T243;
_T243:
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    _T267;
// LINE 1103:
	rectSource.bottom = ((this-><PassengerWindow+0x1c> - rectDestination.top) + rectSource.top);
// LINE 1105:
_T267:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1108:
_T29d:
	__asm        jmp    _T1d2;
// LINE 1109:
_T2a2:
	__asm        mov    eax, tempHeliPassengerData;
	__asm        push   eax;
	__asm        call   HeliPassengerClearChanged;
	__asm        add    esp, 4;
// LINE 1110:
	return;
}

// FUNCTION: COPTER_D 0x0044cc1f
void PassengerWindow::GetRectOfPassengerGraphic(int32_t face, int32_t nPassengerExpression, /*packed*/ class MRect& rectPosition) {
// LINE 1129:
	__asm        mov    eax, face;
	__asm        lea    eax, [eax+eax*2+3];
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx], eax;
// LINE 1130:
	__asm        mov    eax, nPassengerExpression;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+4], eax;
// LINE 1131:
	rectPosition.right = (rectPosition.left + 0x1b);
// LINE 1132:
	rectPosition.bottom = (rectPosition.top + 0x21);
// LINE 1133:
	return;
}

// FUNCTION: COPTER_D 0x0044cc73
int32_t PassengerWindow::DoesWindowNeedUpdating() {
// LINE 1146:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T56;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T56;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T56;
_T56:
_T60:
_T62:
	return (HeliPassengerHasChanged((G_uheli + 0x1c4)) == 0x0);
// LINE 1147:
}

// FUNCTION: COPTER_D 0x0044ccdf
void PassengerWindow::MoveToUpPosition() {
// LINE 1155:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T21;
// LINE 1156:
	return;
// LINE 1158:
_T21:
	this->timerForPositionChange.lTotalElapsedTime = 0x0;
	this->timerForPositionChange.lStartTime = 0x0;
	__asm        jmp    _T40;
// LINE 1159:
_T40:
	__asm        jmp    _T45;
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T5a;

	__asm        jmp    _Tdb;
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T83;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_T83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb9;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_Tb9:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
// LINE 1160:
_Tdb:
	this->nChangingPosition = 0x1;
// LINE 1161:
	return;
}

// FUNCTION: COPTER_D 0x0044cdd1
void PassengerWindow::MoveToDownPosition() {
// LINE 1168:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T21;
// LINE 1169:
	return;
// LINE 1171:
_T21:
	this->timerForPositionChange.lTotalElapsedTime = 0x0;
	this->timerForPositionChange.lStartTime = 0x0;
	__asm        jmp    _T40;
// LINE 1172:
_T40:
	__asm        jmp    _T45;
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T5a;

	__asm        jmp    _Tdb;
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T83;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_T83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb9;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_Tb9:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
// LINE 1173:
_Tdb:
	this->nChangingPosition = 0xffffffff;
// LINE 1174:
	return;
}

// FUNCTION: COPTER_D 0x0044cec3
void PassengerWindow::TogglePosition() {
// LINE 1181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _T2c;
// LINE 1182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1183:
	__asm        jmp    _T3a;
// LINE 1184:
_T2c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1185:
_T3a:
	return;
}

// FUNCTION: COPTER_D 0x0044cf07
long PassengerWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x10*/  /*packed*/ class MRect rectButtonPositionDown; // 0x10 bytes
	/*bp-0x20*/  /*packed*/ class MRect rectButtonPositionUp; // 0x10 bytes
	/*bp-0x24*/  long lPassengerID;

// LINE 1193:
	__asm        jmp    _T11;
_T11:
	rectButtonPositionUp.left = 0xad;
	rectButtonPositionUp.top = 0x4;
	rectButtonPositionUp.right = 0xba;
	rectButtonPositionUp.bottom = 0xe;
	__asm        jmp    _T32;
// LINE 1194:
_T32:
	__asm        jmp    _T37;
_T37:
	rectButtonPositionDown.left = 0xad;
	rectButtonPositionDown.top = 0xe;
	rectButtonPositionDown.right = 0xba;
	rectButtonPositionDown.bottom = 0x1a;
	__asm        jmp    _T58;
// LINE 1197:
_T58:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.left, eax;
	__asm        jg     _T8d;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.top, eax;
	__asm        jg     _T8d;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.right, eax;
	__asm        jle    _T8d;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.bottom, eax;
	__asm        jle    _T8d;

	__asm        jmp    _T92;
_T8d:
	__asm        jmp    _Tc1;
_T92:
	__asm        jmp    _Ta1;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc1;
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _Tc1;
// LINE 1198:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1199:
	__asm        jmp    _T1ab;
_Tc1:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.left, eax;
	__asm        jg     _Tf6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.top, eax;
	__asm        jg     _Tf6;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.right, eax;
	__asm        jle    _Tf6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.bottom, eax;
	__asm        jle    _Tf6;

	__asm        jmp    _Tfb;
_Tf6:
	__asm        jmp    _T12a;
_Tfb:
	__asm        jmp    _T10a;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T12a;
_T10a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T12a;
// LINE 1200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1201:
	__asm        jmp    _T1ab;
_T12a:
	__asm        lea    eax, lPassengerID;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DoesPositionHitPassenger;
	__asm        test   eax, eax;
	__asm        je     _T1ab;
// LINE 1203:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T15e;

	__asm        jmp    _T1ab;

	__asm        jmp    _T15e;
_T15e:
	__asm        jmp    _T16d;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T1ab;
_T16d:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     _T1ab;
// LINE 1205:
	this->lPassengerDraggedID = lPassengerID;
// LINE 1206:
	this->ptLastCursorPosition.x = nCursorX;
// LINE 1207:
	this->ptLastCursorPosition.y = nCursorY;
// LINE 1214:
_T1ab:
	return 0x1;
// LINE 1215:
}

// FUNCTION: COPTER_D 0x0044d0c3
long PassengerWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1222:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 1223:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1225:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     _T92;
// LINE 1226:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        jne    _T85;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        call   GetOutOfHeli;
	__asm        add    esp, 4;
// LINE 1228:
_T85:
	this->lPassengerDraggedID = 0xffffffff;
// LINE 1231:
_T92:
	return 0x1;
// LINE 1232:
}

// FUNCTION: COPTER_D 0x0044d166
long PassengerWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1239:
	this->ptLastCursorPosition.x = nCursorX;
// LINE 1240:
	this->ptLastCursorPosition.y = nCursorY;
// LINE 1241:
	return 0x1;
// LINE 1242:
}

// FUNCTION: COPTER_D 0x0044d19b
int32_t PassengerWindow::DoesPositionHitPassenger(long nCursorX, long nCursorY, long& lPassengerID) {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrent; // 0x10 bytes
	/*bp-0x14*/  /*packed*/ struct tagHeliPassengerData *tempHeliPassengerData;
	/*bp-0x18*/  int32_t nCurrentSeat;
	/*bp-0x1c*/  int32_t i;

// LINE 1251:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
// LINE 1253:
_T16:
	tempHeliPassengerData = (G_uheli + 0x1c4);
// LINE 1255:
	i = 0x0;
	__asm        jmp    _T32;
_T2f:
	i++;
_T32:
	__asm        cmp    i, 0x10;
	__asm        jge    _T11b;
// LINE 1256:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    _T58;
// LINE 1257:
	__asm        jmp    _T2f;
// LINE 1258:
_T58:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1259:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        add    eax, 0xE;
	__asm        mov    rectCurrent.left, eax;
// LINE 1260:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        add    ecx, 6;
	__asm        mov    rectCurrent.top, ecx;
// LINE 1261:
	rectCurrent.right = (rectCurrent.left + 0x1b);
// LINE 1262:
	rectCurrent.bottom = (rectCurrent.top + 0x21);
// LINE 1263:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.left, eax;
	__asm        jg     _Te3;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.top, eax;
	__asm        jg     _Te3;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.right, eax;
	__asm        jle    _Te3;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.bottom, eax;
	__asm        jle    _Te3;

	__asm        jmp    _Te8;
_Te3:
	__asm        jmp    _T116;
_Te8:
	__asm        jmp    _Tf7;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T116;
// LINE 1264:
_Tf7:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x28];
	__asm        mov    ecx, lPassengerID;
	__asm        mov    [ecx], eax;
// LINE 1265:
	return 0x1;
// LINE 1267:
_T116:
	__asm        jmp    _T2f;
// LINE 1268:
_T11b:
	return 0x0;
// LINE 1269:
}

// FUNCTION: COPTER_D 0x0044d2c4
void MapWindow::MapWindow(/*packed*/ class MRect& rectNewPosition, long lNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_MAP_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::MFont;
	__asm        mov    dword ptr [ebp-4], 6;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        mov    [ebp-8], eax;
_T88:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _Ta2;

	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    _T88;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	this->rectMissionText.left = 0x1e;
	this->rectMissionText.top = 0x7e;
	this->rectMissionText.right = 0xaf;
	this->rectMissionText.bottom = 0x8b;
	__asm        jmp    _Te5;
_Te5:
	this-><MapWindow+0x00> = 0x58f8d8;
// LINE 1308:
	this->rectButtons[0].left = 0x9;
	this->rectButtons[0].top = 0x36;
	this->rectButtons[0].right = 0x18;
	this->rectButtons[0].bottom = 0x45;
	__asm        jmp    _T127;
// LINE 1309:
_T127:
	this->rectButtons[1].left = 0x1b;
	this->rectButtons[1].top = 0x36;
	this->rectButtons[1].right = 0x2a;
	this->rectButtons[1].bottom = 0x45;
	__asm        jmp    _T160;
// LINE 1310:
_T160:
	this->rectButtons[2].left = 0x9;
	this->rectButtons[2].top = 0x49;
	this->rectButtons[2].right = 0x18;
	this->rectButtons[2].bottom = 0x58;
	__asm        jmp    _T199;
// LINE 1311:
_T199:
	this->rectButtons[3].left = 0x1b;
	this->rectButtons[3].top = 0x49;
	this->rectButtons[3].right = 0x2a;
	this->rectButtons[3].bottom = 0x58;
	__asm        jmp    _T1d2;
// LINE 1312:
_T1d2:
	this->rectButtons[4].left = 0x9;
	this->rectButtons[4].top = 0x5c;
	this->rectButtons[4].right = 0x18;
	this->rectButtons[4].bottom = 0x6b;
	__asm        jmp    _T20b;
// LINE 1313:
_T20b:
	this->rectButtons[5].left = 0x1b;
	this->rectButtons[5].top = 0x5c;
	this->rectButtons[5].right = 0x2a;
	this->rectButtons[5].bottom = 0x6b;
	__asm        jmp    _T244;
// LINE 1315:
_T244:
	this-><MapWindow+0x58> = GraphicWindow::colorConstants.nPaletteIndexTransparent;
// LINE 1316:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::SetFontCharacteristics;
// LINE 1317:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 1319:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044d54a
void MapWindow::~MapWindow() {

	this-><MapWindow+0x00> = 0x58f8d8;
// LINE 1326:
	__asm        mov    ecx, this;
	__asm        call   MapWindow::DestroyImage;
// LINE 1327:
	return;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::~MFont;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044d587
int32_t MapWindow::Initialize() {
// LINE 1338:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 1339:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    __RETURN;
// LINE 1340:
__RETURN:
}

// FUNCTION: COPTER_D 0x0044d5b2
void MapWindow::InitializeCachedSettings() {
// LINE 1347:
	this->bCurrentMissionFilter = 0x1;
// LINE 1348:
	this->bOtherMissionFilter = 0x0;
// LINE 1349:
	this->lCurrentMissionID = 0xffffffff;
// LINE 1350:
	return;
}

// FUNCTION: COPTER_D 0x0044d5e9
int32_t MapWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	/*bp-0x104*/ char szFullPath[260]; // 0x104 bytes

// LINE 1362:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 1363:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T54;
// LINE 1364:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 1365:
_T54:
	__asm        mov    byte ptr [ebp-0x108], 0x6F;
	__asm        mov    byte ptr [ebp-0x107], 0xDA;
	__asm        mov    byte ptr [ebp-0x106], 0xFF;
	__asm        jmp    _T6e;
_T6e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T91;
// LINE 1366:
_T91:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T107;
// LINE 1367:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAP_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1368:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _Tfa;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T107;
_Tfa:
	this->myButtonImage = 0x0;
// LINE 1370:
_T107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1371:
	return this-><MapWindow+0x40>;
// LINE 1372:
}

// FUNCTION: COPTER_D 0x0044d719
void MapWindow::DestroyImage() {
// LINE 1382:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T5a;
// LINE 1383:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T4b;
_T4b:
	__asm        jmp    _T50;
// LINE 1384:
_T50:
	this->myButtonImage = 0x0;
// LINE 1386:
_T5a:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1387:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T75;

	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Ta8;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta8;
// LINE 1388:
_T89:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1389:
	this->nTrackingButton = 0xffffffff;
// LINE 1391:
_Ta8:
	return;
}

// FUNCTION: COPTER_D 0x0044d7cb
int32_t MapWindow::ComposeSelf() {
	/*bp-0x4*/   long lNewMissionID;
	// StaticLocal: 0x00598fc8
	static int32_t lFrameCounter = 3;
	;
	/*bp-0x8*/   /*packed*/ struct MISSION_DATA *md;

// LINE 1405:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1406:
	return 0x0;
// LINE 1408:
_T20:
	lFrameCounter++;
// LINE 1409:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 1;
	__asm        je     _T7a;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
// LINE 1411:
	__asm        jmp    _T48;
_T48:
	__asm        jmp    _T4d;
_T4d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   S3MapBlit;
	__asm        add    esp, 8;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 1414:
_T7a:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T12a;
// LINE 1415:
	__asm        call   S3MissionGetCurr;
	__asm        mov    md, eax;
	__asm        cmp    md, 0;
	__asm        je     _Ta9;
// LINE 1416:
	lNewMissionID = md->key;
// LINE 1418:
	__asm        jmp    _Tb0;
// LINE 1419:
_Ta9:
	lNewMissionID = 0xffffffff;
// LINE 1421:
_Tb0:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewMissionID;
	__asm        cmp    [eax+0x88], ecx;
	__asm        je     _T12a;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0x31;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 1424:
	__asm        cmp    md, 0;
	__asm        je     _T11e;
// LINE 1425:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 1426:
_T11e:
	this->lCurrentMissionID = lNewMissionID;
// LINE 1431:
_T12a:
	__asm        jmp    _T12f;
_T12f:
	__asm        jmp    _T134;
_T134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1433:
	return 0x1;
// LINE 1434:
}

// FUNCTION: COPTER_D 0x0044d94c
void MapWindow::DrawButton(int32_t nButton, int32_t nState) {
	/*bp-0x10*/  /*packed*/ class MRect rectSource; // 0x10 bytes
	/*bp-0x18*/  /*packed*/ class MPoint ptDestination; // 0x8 bytes

// LINE 1441:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
// LINE 1442:
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
// LINE 1445:
_T20:
	__asm        cmp    nButton, 0;
	__asm        jne    _T8e;
// LINE 1446:
	ptDestination.x = 0x9;
// LINE 1447:
	ptDestination.y = 0x36;
// LINE 1448:
	__asm        cmp    nState, 0;
	__asm        je     _T68;

	rectSource.left = 0x20;
	rectSource.top = 0x0;
	rectSource.right = 0x30;
	rectSource.bottom = 0x10;
	__asm        jmp    _T63;
_T63:
	__asm        jmp    _T89;
_T68:
	rectSource.left = 0x0;
	rectSource.top = 0x0;
	rectSource.right = 0x10;
	rectSource.bottom = 0x10;
	__asm        jmp    _T89;
// LINE 1450:
_T89:
	__asm        jmp    _T2af;
_T8e:
	__asm        cmp    nButton, 1;
	__asm        jne    _Tfc;
// LINE 1451:
	ptDestination.x = 0x1b;
// LINE 1452:
	ptDestination.y = 0x36;
// LINE 1453:
	__asm        cmp    nState, 0;
	__asm        je     _Td6;

	rectSource.left = 0x30;
	rectSource.top = 0x0;
	rectSource.right = 0x40;
	rectSource.bottom = 0x10;
	__asm        jmp    _Td1;
_Td1:
	__asm        jmp    _Tf7;
_Td6:
	rectSource.left = 0x10;
	rectSource.top = 0x0;
	rectSource.right = 0x20;
	rectSource.bottom = 0x10;
	__asm        jmp    _Tf7;
// LINE 1455:
_Tf7:
	__asm        jmp    _T2af;
_Tfc:
	__asm        cmp    nButton, 2;
	__asm        jne    _T16a;
// LINE 1456:
	ptDestination.x = 0x9;
// LINE 1457:
	ptDestination.y = 0x49;
// LINE 1458:
	__asm        cmp    nState, 0;
	__asm        je     _T144;

	rectSource.left = 0x20;
	rectSource.top = 0x10;
	rectSource.right = 0x30;
	rectSource.bottom = 0x20;
	__asm        jmp    _T13f;
_T13f:
	__asm        jmp    _T165;
_T144:
	rectSource.left = 0x0;
	rectSource.top = 0x10;
	rectSource.right = 0x10;
	rectSource.bottom = 0x20;
	__asm        jmp    _T165;
// LINE 1460:
_T165:
	__asm        jmp    _T2af;
_T16a:
	__asm        cmp    nButton, 3;
	__asm        jne    _T1d8;
// LINE 1461:
	ptDestination.x = 0x1b;
// LINE 1462:
	ptDestination.y = 0x49;
// LINE 1463:
	__asm        cmp    nState, 0;
	__asm        je     _T1b2;

	rectSource.left = 0x30;
	rectSource.top = 0x10;
	rectSource.right = 0x40;
	rectSource.bottom = 0x20;
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1d3;
_T1b2:
	rectSource.left = 0x10;
	rectSource.top = 0x10;
	rectSource.right = 0x20;
	rectSource.bottom = 0x20;
	__asm        jmp    _T1d3;
// LINE 1465:
_T1d3:
	__asm        jmp    _T2af;
_T1d8:
	__asm        cmp    nButton, 4;
	__asm        jne    _T246;
// LINE 1466:
	ptDestination.x = 0x9;
// LINE 1467:
	ptDestination.y = 0x5c;
// LINE 1468:
	__asm        cmp    nState, 0;
	__asm        je     _T220;

	rectSource.left = 0x20;
	rectSource.top = 0x20;
	rectSource.right = 0x30;
	rectSource.bottom = 0x30;
	__asm        jmp    _T21b;
_T21b:
	__asm        jmp    _T241;
_T220:
	rectSource.left = 0x0;
	rectSource.top = 0x20;
	rectSource.right = 0x10;
	rectSource.bottom = 0x30;
	__asm        jmp    _T241;
// LINE 1470:
_T241:
	__asm        jmp    _T2af;
_T246:
	__asm        cmp    nButton, 5;
	__asm        jne    _T2af;
// LINE 1471:
	ptDestination.x = 0x1b;
// LINE 1472:
	ptDestination.y = 0x5c;
// LINE 1473:
	__asm        cmp    nState, 0;
	__asm        je     _T28e;

	rectSource.left = 0x30;
	rectSource.top = 0x20;
	rectSource.right = 0x40;
	rectSource.bottom = 0x30;
	__asm        jmp    _T289;
_T289:
	__asm        jmp    _T2af;
_T28e:
	rectSource.left = 0x10;
	rectSource.top = 0x20;
	rectSource.right = 0x20;
	rectSource.bottom = 0x30;
	__asm        jmp    _T2af;
// LINE 1475:
_T2af:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1476:
	return;
}

// FUNCTION: COPTER_D 0x0044dc27
long MapWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long __formal) {
	/*bp-0x4*/   int32_t i;

// LINE 1490:
	__asm        mov    eax, nCursorX;
	__asm        cmp    S_bordermin.x, eax;
	__asm        jg     _Tb6;

	__asm        mov    eax, nCursorX;
	__asm        cmp    S_bordermax.x, eax;
	__asm        jl     _Tb6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    S_bordermin.y, eax;
	__asm        jg     _Tb6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    S_bordermax.y, eax;
	__asm        jl     _Tb6;
// LINE 1492:
	this->nCurrentAutoID = S3MapCursorDown((nCursorY - S_bordermin.y), (nCursorX - S_bordermin.x));
// LINE 1493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jl     _Tb1;
// LINE 1494:
	__asm        jmp    _T82;
_T82:
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T93;
_T93:
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1496:
_Tb1:
	__asm        jmp    _T2f1;
_Tb6:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE8], ecx;
	__asm        jg     _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xEC], ecx;
	__asm        jg     _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF0], ecx;
	__asm        jle    _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xF4], ecx;
	__asm        jle    _T103;

	__asm        jmp    _T108;
_T103:
	__asm        jmp    _T168;
_T108:
	__asm        jmp    _T117;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T168;
// LINE 1497:
_T117:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T133;

	this->bCurrentMissionFilter = 0x1;
	__asm        jmp    _T13d;
_T133:
	this->bCurrentMissionFilter = 0x0;
// LINE 1498:
_T13d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1499:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        call   S3MapCommandCurrentMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1501:
	__asm        jmp    _T2f1;
_T168:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF8], ecx;
	__asm        jg     _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xFC], ecx;
	__asm        jg     _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x100], ecx;
	__asm        jle    _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x104], ecx;
	__asm        jle    _T1b5;

	__asm        jmp    _T1ba;
_T1b5:
	__asm        jmp    _T21a;
_T1ba:
	__asm        jmp    _T1c9;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T21a;
// LINE 1502:
_T1c9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    _T1e5;

	this->bOtherMissionFilter = 0x1;
	__asm        jmp    _T1ef;
_T1e5:
	this->bOtherMissionFilter = 0x0;
// LINE 1503:
_T1ef:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1504:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        call   S3MapCommandOtherMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1506:
	__asm        jmp    _T2f1;
// LINE 1507:
_T21a:
	i = 0x0;
	__asm        jmp    _T229;
_T226:
	i++;
_T229:
	__asm        cmp    i, 4;
	__asm        jge    _T2f1;
// LINE 1508:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xA8], edx;
	__asm        jg     _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xAC], edx;
	__asm        jg     _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xB0], edx;
	__asm        jle    _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xB4], edx;
	__asm        jle    _T29c;

	__asm        jmp    _T2a1;
_T29c:
	__asm        jmp    _T2ec;
_T2a1:
	__asm        jmp    _T2b0;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T2ec;
// LINE 1509:
_T2b0:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1510:
	__asm        push   1;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1511:
	this->nTrackingButton = i;
// LINE 1512:
	return 0x1;
// LINE 1514:
_T2ec:
	__asm        jmp    _T226;
// LINE 1516:
_T2f1:
	return 0x1;
// LINE 1517:
}

// FUNCTION: COPTER_D 0x0044df29
long MapWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long __formal) {
// LINE 1528:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T27d;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T27d;
// LINE 1529:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jl     _T27d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 4;
	__asm        jge    _T27d;
// LINE 1531:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Te0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jg     _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _Tc2;

	__asm        jmp    _Tc7;
_Tc2:
	__asm        jmp    _Te0;
_Tc7:
	__asm        jmp    _Td6;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Te0;
// LINE 1532:
_Td6:
	__asm        call   S3MapCommandZoomOut;
// LINE 1533:
	__asm        jmp    _T24c;
_Te0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T15b;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jg     _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xBC], ecx;
	__asm        jg     _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC0], ecx;
	__asm        jle    _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jle    _T13d;

	__asm        jmp    _T142;
_T13d:
	__asm        jmp    _T15b;
_T142:
	__asm        jmp    _T151;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T15b;
// LINE 1534:
_T151:
	__asm        call   S3MapCommandZoomIn;
// LINE 1535:
	__asm        jmp    _T24c;
_T15b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 2;
	__asm        jne    _T1d6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC8], ecx;
	__asm        jg     _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xCC], ecx;
	__asm        jg     _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD0], ecx;
	__asm        jle    _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jle    _T1b8;

	__asm        jmp    _T1bd;
_T1b8:
	__asm        jmp    _T1d6;
_T1bd:
	__asm        jmp    _T1cc;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1d6;
// LINE 1536:
_T1cc:
	__asm        call   S3MapCommandPreviousMission;
// LINE 1537:
	__asm        jmp    _T24c;
_T1d6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 3;
	__asm        jne    _T24c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD8], ecx;
	__asm        jg     _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jg     _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE0], ecx;
	__asm        jle    _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jle    _T233;

	__asm        jmp    _T238;
_T233:
	__asm        jmp    _T24c;
_T238:
	__asm        jmp    _T247;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T24c;
// LINE 1538:
_T247:
	__asm        call   S3MapCommandNextMission;
// LINE 1539:
_T24c:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1540:
	this->nTrackingButton = 0xffffffff;
// LINE 1541:
	return 0x1;
// LINE 1550:
_T27d:
	return 0x1;
// LINE 1551:
}

// FUNCTION: COPTER_D 0x0044e1b7
int32_t MapWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	/*bp-0x4*/   long lMessageData;

// LINE 1560:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T49;

	__asm        cmp    lMessage, 0x10003;
	__asm        jne    _T49;
// LINE 1561:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lMessageData, eax;
// LINE 1562:
	__asm        cmp    lMessageData, 1;
	__asm        jne    _T49;
// LINE 1563:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        call   AutomobileClass::S3AutoMessage;
	__asm        add    esp, 8;
// LINE 1565:
_T49:
	return 0x1;
// LINE 1566:
}

// FUNCTION: COPTER_D 0x0044e211
void MapWindow::CreateAutoMessageSelectionPopupWindow(int32_t nAutoID, int32_t nType, /*packed*/ class MPoint& ptPosition) {
	/*bp-0x4*/   /*packed*/ class PopupMenuWindow *tempPopupMenuWindow;
	/*bp-0x8*/   int32_t StringID;

// LINE 1575:
	__asm        mov    eax, ptPosition;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, ptPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1578:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta9;

	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        inc    eax;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T85;
_T85:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::screenWindow;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    _Tb0;
_Ta9:
	tempPopupMenuWindow = 0x0;
// LINE 1579:
_Tb0:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1580:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 1582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    StringID, eax;
// LINE 1583:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, StringID;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1584:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x60;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1586:
	return;
}

// FUNCTION: COPTER_D 0x0044e32d
int32_t MapWindow::GetStringIDForVehicleName(int32_t nAutoID) {
	/*bp-0x4*/   long lCarModel;

// LINE 1595:
	__asm        cmp    nAutoID, 0x46;
	__asm        jl     _T1d;
// LINE 1596:
	return 0x0;
// LINE 1598:
_T1d:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, cars[0][eax*4];
	__asm        mov    eax, [eax+4];
	__asm        mov    lCarModel, eax;
	__asm        jmp    _T32;
// LINE 1604:
_T32:
	__asm        cmp    lCarModel, 0x7A;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x7D;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x7E;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12A;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12B;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12C;
	__asm        jne    _Ta4;
// LINE 1606:
_T77:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, cars[0][eax*4];
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     _T95;
// LINE 1607:
	return 0x5b;
// LINE 1608:
_T95:
	return 0x5a;
// LINE 1610:
	__asm        jmp    _T10f;
_Ta4:
	__asm        cmp    lCarModel, 0x11E;
	__asm        jne    _Tc0;
// LINE 1611:
	return 0x5c;
// LINE 1612:
	__asm        jmp    _T10f;
_Tc0:
	__asm        cmp    lCarModel, 0x11F;
	__asm        jne    _Tdc;
// LINE 1613:
	return 0x5e;
// LINE 1614:
	__asm        jmp    _T10f;
_Tdc:
	__asm        cmp    lCarModel, 0x11C;
	__asm        jne    _Tf8;
// LINE 1615:
	return 0x5f;
// LINE 1616:
	__asm        jmp    _T10f;
_Tf8:
	__asm        cmp    lCarModel, 0x11D;
	__asm        jne    _T10f;
// LINE 1617:
	return 0x5d;
// LINE 1618:
_T10f:
	return 0x0;
// LINE 1619:
}

// FUNCTION: COPTER_D 0x0044e44a
void EquipmentPanelWindow::EquipmentPanelWindow(char * szImageFileName, /*packed*/ class MRect& rectNewPosition, long lNewID, /*packed*/ struct CommandSystem *myNewCommandSystem, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner) {

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    dword ptr [ebp-4], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        mov    [ebp-8], eax;
_T3c:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T56;

	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    _T3c;
_T56:
	__asm        jmp    _T5b;
_T5b:
	this->lCurrentSelectedControl = 0x0;
	this->myCommandSystem = myNewCommandSystem;
	this->myBucketWaterGuageImage = 0x0;
	this->myButtonImage = 0x0;
	this->lLastBucketWaterGuageLevel = 0x0;
	this->lLastTeargasCount = 0x0;
	this-><EquipmentPanelWindow+0x00> = 0x58f9b0;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T19e;
// LINE 1669:
	this->rectControls[0].left = 0x66;
	this->rectControls[0].top = 0xa;
	this->rectControls[0].right = 0x77;
	this->rectControls[0].bottom = 0x18;
	__asm        jmp    _Tee;
// LINE 1670:
_Tee:
	this->rectControls[1].left = 0x66;
	this->rectControls[1].top = 0x18;
	this->rectControls[1].right = 0x77;
	this->rectControls[1].bottom = 0x27;
	__asm        jmp    _T127;
// LINE 1671:
_T127:
	this->rectControls[2].left = 0x4d;
	this->rectControls[2].top = 0x4;
	this->rectControls[2].right = 0x62;
	this->rectControls[2].bottom = 0x1a;
	__asm        jmp    _T160;
// LINE 1672:
_T160:
	this->rectControls[3].left = 0xa;
	this->rectControls[3].top = 0xe;
	this->rectControls[3].right = 0x20;
	this->rectControls[3].bottom = 0x24;
	__asm        jmp    _T199;
// LINE 1674:
_T199:
	__asm        jmp    _T298;
_T19e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T1e0;
// LINE 1675:
	this->rectControls[0].left = 0x4d;
	this->rectControls[0].top = 0x9;
	this->rectControls[0].right = 0x66;
	this->rectControls[0].bottom = 0x28;
	__asm        jmp    _T1db;
// LINE 1677:
_T1db:
	__asm        jmp    _T298;
_T1e0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T25b;
// LINE 1678:
	this->rectControls[0].left = 0x50;
	this->rectControls[0].top = 0xa;
	this->rectControls[0].right = 0x63;
	this->rectControls[0].bottom = 0x19;
	__asm        jmp    _T21d;
// LINE 1679:
_T21d:
	this->rectControls[1].left = 0x50;
	this->rectControls[1].top = 0x19;
	this->rectControls[1].right = 0x63;
	this->rectControls[1].bottom = 0x29;
	__asm        jmp    _T256;
// LINE 1681:
_T256:
	__asm        jmp    _T298;
_T25b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T298;
// LINE 1682:
	this->rectControls[0].left = 0x4d;
	this->rectControls[0].top = 0x9;
	this->rectControls[0].right = 0x66;
	this->rectControls[0].bottom = 0x28;
	__asm        jmp    _T298;
// LINE 1684:
_T298:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044e6f1
void EquipmentPanelWindow::~EquipmentPanelWindow() {

	this-><EquipmentPanelWindow+0x00> = 0x58f9b0;
// LINE 1691:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DestroyImage;
// LINE 1692:
	return;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044e720
int32_t EquipmentPanelWindow::Initialize() {
// LINE 1700:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1701:
	return this->GraphicWindow::Initialize();
// LINE 1702:
}

// FUNCTION: COPTER_D 0x0044e74b
void EquipmentPanelWindow::InitializeCachedSettings() {
// LINE 1708:
	this->lLastBucketWaterGuageLevel = 0x0;
// LINE 1709:
	this->lLastTeargasCount = 0x0;
// LINE 1710:
	return;
}

// FUNCTION: COPTER_D 0x0044e77b
int32_t EquipmentPanelWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	/*bp-0x104*/ char szPath[260]; // 0x104 bytes

// LINE 1720:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _Ta1;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _Ta1;
// LINE 1722:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_BUCKET_WATER_GUAGE_IMAGE;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1723:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T91;

	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC], eax;
	__asm        jmp    _Ta1;
_T91:
	this->myBucketWaterGuageImage = 0x0;
// LINE 1726:
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        jne    _T1a1;
// LINE 1727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _Te2;
// LINE 1728:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_0;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1729:
	__asm        jmp    _T129;
_Te2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T110;
// LINE 1730:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_2;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1731:
	__asm        jmp    _T129;
// LINE 1732:
_T110:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_1;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1733:
_T129:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T16c;

	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T17c;
_T16c:
	this->myButtonImage = 0x0;
// LINE 1734:
_T17c:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+8];
// LINE 1736:
_T1a1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1738:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
	__asm        jmp    __RETURN;
// LINE 1739:
__RETURN:
}

// FUNCTION: COPTER_D 0x0044e94b
void EquipmentPanelWindow::DestroyImage() {
// LINE 1746:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     _T63;
// LINE 1747:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 1748:
_T56:
	this->myBucketWaterGuageImage = 0x0;
// LINE 1750:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _Tba;
// LINE 1751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta8;
_Ta8:
	__asm        jmp    _Tad;
// LINE 1752:
_Tad:
	this->myButtonImage = 0x0;
// LINE 1754:
_Tba:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1755:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _Td5;

	__asm        jmp    _Tda;
_Td5:
	__asm        jmp    _T108;
_Tda:
	__asm        jmp    _Te9;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T108;
// LINE 1756:
_Te9:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1757:
	this->lCurrentSelectedControl = 0x0;
// LINE 1759:
_T108:
	return;
}

// FUNCTION: COPTER_D 0x0044ea5d
int32_t EquipmentPanelWindow::DrawSelf() {
// LINE 1766:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T26;
// LINE 1767:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawBucketWaterGuage;
// LINE 1768:
	__asm        jmp    _T3b;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T3b;
// LINE 1769:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawTeargasUsage;
// LINE 1770:
_T3b:
	return 0x1;
// LINE 1771:
}

// FUNCTION: COPTER_D 0x0044eaa7
int32_t EquipmentPanelWindow::DoesWindowNeedUpdating() {
	// StaticLocal: 0x00598fdc
	static long lFrameCounter = 37;
	;

// LINE 1780:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 4;
	__asm        je     _Tab;
// LINE 1781:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T76;
// LINE 1782:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   S_helitype_data[0].max_load[ecx*8];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xC4];
	__asm        je     _T6a;

	__asm        mov    eax, 1;
	__asm        jmp    _T6c;
_T6a:
	__asm        xor    eax, eax;
_T6c:
	__asm        jmp    __RETURN;
// LINE 1783:
	__asm        jmp    _Tab;
_T76:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _Tab;
// LINE 1784:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        cmp    [eax+0x54], ecx;
	__asm        je     _Ta4;

	__asm        mov    eax, 1;
	__asm        jmp    _Ta6;
_Ta4:
	__asm        xor    eax, eax;
_Ta6:
	__asm        jmp    __RETURN;
// LINE 1786:
_Tab:
	lFrameCounter++;
// LINE 1788:
	return this->GraphicWindow::DoesWindowNeedUpdating();
// LINE 1789:
__RETURN:
}

// FUNCTION: COPTER_D 0x0044eb6a
void EquipmentPanelWindow::DrawButton(int32_t nButton, int32_t nState) {
	/*bp-0x10*/  /*packed*/ class MRect rectSource; // 0x10 bytes
	/*bp-0x18*/  /*packed*/ class MPoint ptDestination; // 0x8 bytes

// LINE 1797:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
// LINE 1798:
_T16:
	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
// LINE 1800:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T1fd;
// LINE 1801:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _Ta1;
// LINE 1802:
	ptDestination.x = 0x66;
// LINE 1803:
	ptDestination.y = 0xa;
// LINE 1804:
	__asm        cmp    nState, 0;
	__asm        jne    _T7b;
// LINE 1805:
	rectSource.left = 0x0;
	rectSource.top = 0x0;
	rectSource.right = 0x11;
	rectSource.bottom = 0xe;
	__asm        jmp    _T76;
// LINE 1806:
_T76:
	__asm        jmp    _T9c;
// LINE 1807:
_T7b:
	rectSource.left = 0x11;
	rectSource.top = 0x0;
	rectSource.right = 0x22;
	rectSource.bottom = 0xe;
	__asm        jmp    _T9c;
// LINE 1809:
_T9c:
	__asm        jmp    _T1f8;
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T115;
// LINE 1810:
	ptDestination.x = 0x66;
// LINE 1811:
	ptDestination.y = 0x18;
// LINE 1812:
	__asm        cmp    nState, 0;
	__asm        jne    _Tef;
// LINE 1813:
	rectSource.left = 0x0;
	rectSource.top = 0xe;
	rectSource.right = 0x11;
	rectSource.bottom = 0x1d;
	__asm        jmp    _Tea;
// LINE 1814:
_Tea:
	__asm        jmp    _T110;
// LINE 1815:
_Tef:
	rectSource.left = 0x11;
	rectSource.top = 0xe;
	rectSource.right = 0x22;
	rectSource.bottom = 0x1d;
	__asm        jmp    _T110;
// LINE 1817:
_T110:
	__asm        jmp    _T1f8;
_T115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _T189;
// LINE 1818:
	ptDestination.x = 0x4d;
// LINE 1819:
	ptDestination.y = 0x5;
// LINE 1820:
	__asm        cmp    nState, 0;
	__asm        jne    _T163;
// LINE 1821:
	rectSource.left = 0x22;
	rectSource.top = 0x0;
	rectSource.right = 0x36;
	rectSource.bottom = 0x15;
	__asm        jmp    _T15e;
// LINE 1822:
_T15e:
	__asm        jmp    _T184;
// LINE 1823:
_T163:
	rectSource.left = 0x36;
	rectSource.top = 0x0;
	rectSource.right = 0x4a;
	rectSource.bottom = 0x14;
	__asm        jmp    _T184;
// LINE 1825:
_T184:
	__asm        jmp    _T1f8;
_T189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T1f8;
// LINE 1826:
	ptDestination.x = 0xb;
// LINE 1827:
	ptDestination.y = 0xf;
// LINE 1828:
	__asm        cmp    nState, 0;
	__asm        jne    _T1d7;
// LINE 1829:
	rectSource.left = 0x22;
	rectSource.top = 0x0;
	rectSource.right = 0x36;
	rectSource.bottom = 0x15;
	__asm        jmp    _T1d2;
// LINE 1830:
_T1d2:
	__asm        jmp    _T1f8;
// LINE 1831:
_T1d7:
	rectSource.left = 0x36;
	rectSource.top = 0x0;
	rectSource.right = 0x4a;
	rectSource.bottom = 0x14;
	__asm        jmp    _T1f8;
// LINE 1834:
_T1f8:
	__asm        jmp    _T36b;
_T1fd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T2f2;
// LINE 1835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T27e;
// LINE 1836:
	ptDestination.x = 0x51;
// LINE 1837:
	ptDestination.y = 0xb;
// LINE 1838:
	__asm        cmp    nState, 0;
	__asm        jne    _T258;
// LINE 1839:
	rectSource.left = 0x0;
	rectSource.top = 0x0;
	rectSource.right = 0x11;
	rectSource.bottom = 0xe;
	__asm        jmp    _T253;
// LINE 1840:
_T253:
	__asm        jmp    _T279;
// LINE 1841:
_T258:
	rectSource.left = 0x11;
	rectSource.top = 0x0;
	rectSource.right = 0x22;
	rectSource.bottom = 0xe;
	__asm        jmp    _T279;
// LINE 1843:
_T279:
	__asm        jmp    _T2ed;
_T27e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T2ed;
// LINE 1844:
	ptDestination.x = 0x51;
// LINE 1845:
	ptDestination.y = 0x19;
// LINE 1846:
	__asm        cmp    nState, 0;
	__asm        jne    _T2cc;
// LINE 1847:
	rectSource.left = 0x0;
	rectSource.top = 0xe;
	rectSource.right = 0x11;
	rectSource.bottom = 0x1d;
	__asm        jmp    _T2c7;
// LINE 1848:
_T2c7:
	__asm        jmp    _T2ed;
// LINE 1849:
_T2cc:
	rectSource.left = 0x11;
	rectSource.top = 0xe;
	rectSource.right = 0x22;
	rectSource.bottom = 0x1d;
	__asm        jmp    _T2ed;
// LINE 1852:
_T2ed:
	__asm        jmp    _T36b;
_T2f2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        je     _T30c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T36b;
// LINE 1853:
_T30c:
	ptDestination.x = 0x51;
// LINE 1854:
	ptDestination.y = 0xc;
// LINE 1855:
	__asm        cmp    nState, 0;
	__asm        jne    _T34a;
// LINE 1856:
	rectSource.left = 0x0;
	rectSource.top = 0x0;
	rectSource.right = 0x11;
	rectSource.bottom = 0x18;
	__asm        jmp    _T345;
// LINE 1857:
_T345:
	__asm        jmp    _T36b;
// LINE 1858:
_T34a:
	rectSource.left = 0x11;
	rectSource.top = 0x0;
	rectSource.right = 0x22;
	rectSource.bottom = 0x18;
	__asm        jmp    _T36b;
// LINE 1860:
_T36b:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1861:
	return;
}

// FUNCTION: COPTER_D 0x0044ef07
void EquipmentPanelWindow::DrawBucketWaterGuage() {
	/*bp-0x4*/   int32_t iLitEnd;
	/*bp-0x8*/   const int32_t nYPosition;
	/*bp-0xc*/   int32_t i;
	/*bp-0x10*/  int32_t nXPosition;
	/*bp-0x14*/  const int32_t iGuageEnd;

// LINE 1869:
	nXPosition = 0x10;
// LINE 1870:
	iGuageEnd = 0xb;
	nYPosition = 0x2b;
// LINE 1872:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   S_helitype_data[0].max_load[ecx*8];
	__asm        mov    iLitEnd, eax;
// LINE 1873:
	this->lLastBucketWaterGuageLevel = iLitEnd;
// LINE 1875:
	i = 0x0;
	__asm        jmp    _T6e;
_T67:
	i++;
	nXPosition += 0x5;
_T6e:
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    _Tab;
// LINE 1876:
	__asm        push   0xA;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _T67;
// LINE 1877:
_Tab:
	__asm        cmp    i, 0xB;
	__asm        jge    _T12f;
// LINE 1879:
	__asm        push   0xA;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1880:
	i++;
// LINE 1881:
	nXPosition += 0x5;
// LINE 1884:
	__asm        jmp    _Tf4;
_Ted:
	i++;
	nXPosition += 0x5;
_Tf4:
	__asm        cmp    i, 0xB;
	__asm        jge    _T12f;
// LINE 1885:
	__asm        push   0xA;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Ted;
// LINE 1887:
_T12f:
	return;
}

// FUNCTION: COPTER_D 0x0044f040
void EquipmentPanelWindow::DrawTeargasUsage() {
	/*bp-0x4*/   long lTeargasUsed;
	/*bp-0x14*/  /*packed*/ class MRect rectSourceEnabled; // 0x10 bytes
	/*bp-0x18*/  int32_t i;
	/*bp-0x28*/  /*packed*/ class MRect rectSourceDisabled; // 0x10 bytes
	/*bp-0x30*/  /*packed*/ class MPoint ptDestination; // 0x8 bytes

// LINE 1894:
	__asm        jmp    _T11;
_T11:
	rectSourceEnabled.left = 0x22;
	rectSourceEnabled.top = 0x0;
	rectSourceEnabled.right = 0x26;
	rectSourceEnabled.bottom = 0x4;
	__asm        jmp    _T32;
// LINE 1895:
_T32:
	__asm        jmp    _T37;
_T37:
	rectSourceDisabled.left = 0x22;
	rectSourceDisabled.top = 0x4;
	rectSourceDisabled.right = 0x26;
	rectSourceDisabled.bottom = 0x8;
	__asm        jmp    _T58;
// LINE 1896:
_T58:
	__asm        jmp    _T5d;
_T5d:
	__asm        jmp    _T62;
// LINE 1900:
_T62:
	__asm        mov    ebx, 0xA;
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        sub    ebx, [eax+0x54];
	__asm        mov    lTeargasUsed, ebx;
// LINE 1901:
	__asm        cmp    lTeargasUsed, 0;
	__asm        jge    _T83;
// LINE 1902:
	lTeargasUsed = 0x0;
// LINE 1903:
_T83:
	__asm        cmp    lTeargasUsed, 0xA;
	__asm        jle    _T94;
// LINE 1904:
	lTeargasUsed = 0xa;
// LINE 1906:
_T94:
	i = 0x0;
	__asm        jmp    _Ta3;
_Ta0:
	i++;
_Ta3:
	__asm        mov    eax, lTeargasUsed;
	__asm        cmp    i, eax;
	__asm        jge    _T108;
// LINE 1907:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1908:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1909:
	__asm        lea    eax, rectSourceDisabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1910:
	__asm        jmp    _Ta0;
// LINE 1911:
_T108:
	__asm        jmp    _T110;
_T10d:
	i++;
_T110:
	__asm        cmp    i, 0xA;
	__asm        jge    _T173;
// LINE 1912:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1913:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1914:
	__asm        lea    eax, rectSourceEnabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1915:
	__asm        jmp    _T10d;
// LINE 1916:
_T173:
	return;
}

// FUNCTION: COPTER_D 0x0044f1bd
int32_t EquipmentPanelWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1923:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T31;

	__asm        cmp    lMessage, 0x10003;
	__asm        jne    _T31;
// LINE 1924:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   S3PlayMegaphoneMessage;
	__asm        add    esp, 4;
// LINE 1925:
_T31:
	return 0x1;
// LINE 1926:
}

// FUNCTION: COPTER_D 0x0044f1ff
long EquipmentPanelWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T1eb;
// LINE 1934:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T5d;

	__asm        jmp    _T62;
_T5d:
	__asm        jmp    _T83;
_T62:
	__asm        jmp    _T71;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T83;
// LINE 1935:
_T71:
	this->lCurrentSelectedControl = 0x1;
// LINE 1936:
	__asm        jmp    _T1e6;
_T83:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _Td0;

	__asm        jmp    _Td5;
_Td0:
	__asm        jmp    _Tf6;
_Td5:
	__asm        jmp    _Te4;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tf6;
// LINE 1937:
_Te4:
	this->lCurrentSelectedControl = 0x2;
// LINE 1938:
	__asm        jmp    _T1e6;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    _T143;

	__asm        jmp    _T148;
_T143:
	__asm        jmp    _T169;
_T148:
	__asm        jmp    _T157;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T169;
// LINE 1939:
_T157:
	this->lCurrentSelectedControl = 0x3;
// LINE 1940:
	__asm        jmp    _T1e6;
_T169:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _T1b6;

	__asm        jmp    _T1bb;
_T1b6:
	__asm        jmp    _T1dc;
_T1bb:
	__asm        jmp    _T1ca;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1dc;
// LINE 1941:
_T1ca:
	this->lCurrentSelectedControl = 0x4;
// LINE 1942:
	__asm        jmp    _T1e6;
// LINE 1943:
_T1dc:
	return 0x1;
// LINE 1945:
_T1e6:
	__asm        jmp    _T3fa;
_T1eb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T2e4;
// LINE 1946:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T23c;

	__asm        jmp    _T241;
_T23c:
	__asm        jmp    _T262;
_T241:
	__asm        jmp    _T250;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T262;
// LINE 1947:
_T250:
	this->lCurrentSelectedControl = 0x6;
// LINE 1948:
	__asm        jmp    _T2df;
_T262:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _T2af;

	__asm        jmp    _T2b4;
_T2af:
	__asm        jmp    _T2d5;
_T2b4:
	__asm        jmp    _T2c3;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T2d5;
// LINE 1949:
_T2c3:
	this->lCurrentSelectedControl = 0x7;
// LINE 1950:
	__asm        jmp    _T2df;
// LINE 1951:
_T2d5:
	return 0x1;
// LINE 1953:
_T2df:
	__asm        jmp    _T3fa;
_T2e4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T36a;
// LINE 1954:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T335;

	__asm        jmp    _T33a;
_T335:
	__asm        jmp    _T35b;
_T33a:
	__asm        jmp    _T349;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T35b;
// LINE 1955:
_T349:
	this->lCurrentSelectedControl = 0x8;
// LINE 1956:
	__asm        jmp    _T365;
// LINE 1957:
_T35b:
	return 0x1;
// LINE 1959:
_T365:
	__asm        jmp    _T3fa;
_T36a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T3f0;
// LINE 1960:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T3bb;

	__asm        jmp    _T3c0;
_T3bb:
	__asm        jmp    _T3e1;
_T3c0:
	__asm        jmp    _T3cf;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T3e1;
// LINE 1961:
_T3cf:
	this->lCurrentSelectedControl = 0x5;
// LINE 1962:
	__asm        jmp    _T3eb;
// LINE 1963:
_T3e1:
	return 0x1;
// LINE 1965:
_T3eb:
	__asm        jmp    _T3fa;
// LINE 1966:
_T3f0:
	return 0x1;
// LINE 1968:
_T3fa:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1969:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1970:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        je     _T43e;
// LINE 1971:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1972:
_T43e:
	return 0x1;
// LINE 1973:
}

// FUNCTION: COPTER_D 0x0044f64e
long EquipmentPanelWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1981:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 1982:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1983:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        je     _T120;
// LINE 1984:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1987:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T10b;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    _T10b;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _Td0;

	__asm        jmp    _Td5;
_Td0:
	__asm        jmp    _T10b;
_Td5:
	__asm        jmp    _Te4;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T10b;
// LINE 1989:
_Te4:
	this->lCurrentSelectedControl = 0x5;
// LINE 1990:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1991:
	this->lCurrentSelectedControl = 0x0;
// LINE 1993:
	__asm        jmp    _T113;
// LINE 1994:
_T10b:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlEnd;
// LINE 1995:
_T113:
	this->lCurrentSelectedControl = 0x0;
// LINE 1997:
_T120:
	return 0x1;
// LINE 1998:
}

// FUNCTION: COPTER_D 0x0044f77f
void EquipmentPanelWindow::DoCurrentControlStart() {
// LINE 2006:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T26;
// LINE 2007:
	return;
// LINE 2008:
	__asm        jmp    _T1d1;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T5d;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    _T58;
// LINE 2010:
_T58:
	__asm        jmp    _T1d1;
_T5d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T94;
// LINE 2011:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    _T8f;
// LINE 2012:
_T8f:
	__asm        jmp    _T1d1;
_T94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _Tcb;
// LINE 2013:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    _Tc6;
// LINE 2014:
_Tc6:
	__asm        jmp    _T1d1;
_Tcb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T102;
// LINE 2015:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    _Tfd;
// LINE 2016:
_Tfd:
	__asm        jmp    _T1d1;
_T102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T139;
// LINE 2017:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    _T134;
// LINE 2018:
_T134:
	__asm        jmp    _T1d1;
_T139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T170;
// LINE 2019:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    _T16b;
// LINE 2020:
_T16b:
	__asm        jmp    _T1d1;
_T170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    _T1a7;
// LINE 2021:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    _T1a2;
// LINE 2022:
_T1a2:
	__asm        jmp    _T1d1;
_T1a7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    _T1d1;
// LINE 2025:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 2026:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow;
// LINE 2028:
_T1d1:
	return;
}

// FUNCTION: COPTER_D 0x0044f95a
void EquipmentPanelWindow::DoCurrentControlEnd() {
// LINE 2038:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T26;
// LINE 2039:
	return;
// LINE 2040:
	__asm        jmp    _T1a2;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T5d;
// LINE 2041:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    _T58;
// LINE 2042:
_T58:
	__asm        jmp    _T1a2;
_T5d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T94;
// LINE 2043:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    _T8f;
// LINE 2044:
_T8f:
	__asm        jmp    _T1a2;
_T94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _Tcb;
// LINE 2045:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    _Tc6;
// LINE 2046:
_Tc6:
	__asm        jmp    _T1a2;
_Tcb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T102;
// LINE 2047:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    _Tfd;
// LINE 2048:
_Tfd:
	__asm        jmp    _T1a2;
_T102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T139;
// LINE 2049:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    _T134;
// LINE 2050:
_T134:
	__asm        jmp    _T1a2;
_T139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T170;
// LINE 2051:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    _T16b;
// LINE 2052:
_T16b:
	__asm        jmp    _T1a2;
_T170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    _T1a2;
// LINE 2053:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    _T1a2;
// LINE 2054:
_T1a2:
	return;
}

// FUNCTION: COPTER_D 0x0044fb06
void EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow() {
	/*bp-0x4*/   /*packed*/ class PopupMenuWindow *tempPopupMenuWindow;
	/*bp-0x8*/   long nMenuXPosition;
	/*bp-0xc*/   int32_t i;
	/*bp-0x10*/  long nMenuYPosition;

// LINE 2063:
	nMenuXPosition = this->rectControls[0].left;
// LINE 2064:
	nMenuYPosition = this->rectControls[0].top;
// LINE 2067:
	__asm        lea    eax, nMenuYPosition;
	__asm        push   eax;
	__asm        lea    eax, nMenuXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 2070:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tae;

	__asm        mov    eax, nMenuYPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, nMenuYPosition;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T8a;
_T8a:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::screenWindow;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    _Tb5;
_Tae:
	tempPopupMenuWindow = 0x0;
// LINE 2071:
_Tb5:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2072:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 2073:
	i = 0x22;
	__asm        jmp    _Te3;
_Te0:
	i++;
_Te3:
	__asm        cmp    i, 0x25;
	__asm        jg     _T10b;
// LINE 2074:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, i;
	__asm        add    eax, 0x96;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
	__asm        jmp    _Te0;
// LINE 2076:
_T10b:
	return;
}



// Contribution: 1:0004ec20-0004ec58 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fc20
// RadioCompassWindow::`scalar deleting destructor'



// Contribution: 1:0004ec60-0004ecd2 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ece0-0004ee38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ee40-0004ee78 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe40
// DialWindow::`scalar deleting destructor'



// Contribution: 1:0004ee80-0004eeb8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe80
// PassengerWindow::`scalar deleting destructor'



// Contribution: 1:0004eec0-0004eef8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fec0
// MapWindow::`scalar deleting destructor'



// Contribution: 1:0004ef00-0004ef38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044ff00
// EquipmentPanelWindow::`scalar deleting destructor'



// Contribution: 2:00000650-00000717 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for RadioCompassWindow @ 0x0058f650
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: RadioCompassWindow::Initialize @ 0x0044853b
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: RadioCompassWindow::CreateImage @ 0x00448682
//   05: RadioCompassWindow::DestroyImage @ 0x0044860d
//   06: RadioCompassWindow::ComposeSelf @ 0x00448928
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: RadioCompassWindow::DoCursorDown @ 0x00448a45
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: RadioCompassWindow::`scalar deleting destructor' @ 0x0044fc20
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: RadioCompassWindow::InitializeCachedSettings @ 0x004485d3
//   50 entries



// Contribution: 2:00000718-00000733 Module: 47, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00000738-000007ff Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for DialWindow @ 0x0058f738
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: DialWindow::Initialize @ 0x00449a83
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: DialWindow::CreateImage @ 0x0044a2bc
//   05: DialWindow::DestroyImage @ 0x00449dca
//   06: DialWindow::ComposeSelf @ 0x0044ab1f
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: DialWindow::DoCursorDown @ 0x0044a863
//   36: DialWindow::DoCursorUp @ 0x0044a97a
//   37: DialWindow::DoCursorMove @ 0x0044a9ff
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: DialWindow::`scalar deleting destructor' @ 0x0044fe40
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: DialWindow::DoesWindowNeedUpdating @ 0x0044b9e0
//   49: DialWindow::InitializeCachedSettings @ 0x00449aae
//   50 entries



// Contribution: 2:00000800-000008d3 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for PassengerWindow @ 0x0058f800
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: PassengerWindow::Initialize @ 0x0044c133
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: PassengerWindow::CreateImage @ 0x0044c194
//   05: PassengerWindow::DestroyImage @ 0x0044c48e
//   06: PassengerWindow::ComposeSelf @ 0x0044c549
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: PassengerWindow::DoCursorDown @ 0x0044cf07
//   36: PassengerWindow::DoCursorUp @ 0x0044d0c3
//   37: PassengerWindow::DoCursorMove @ 0x0044d166
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: PassengerWindow::`scalar deleting destructor' @ 0x0044fe80
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: PassengerWindow::DoesWindowNeedUpdating @ 0x0044cc73
//   49: PassengerWindow::InitializeCachedSettings @ 0x0044c15e
//   50: PassengerWindow::MoveToUpPosition @ 0x0044ccdf
//   51: PassengerWindow::MoveToDownPosition @ 0x0044cdd1
//   52: PassengerWindow::TogglePosition @ 0x0044cec3
//   53 entries



// Contribution: 2:000008d8-000009ab Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MapWindow @ 0x0058f8d8
//   00: MapWindow::DoMessage @ 0x0044e1b7
//   01: MapWindow::Initialize @ 0x0044d587
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: MapWindow::CreateImage @ 0x0044d5e9
//   05: MapWindow::DestroyImage @ 0x0044d719
//   06: MapWindow::ComposeSelf @ 0x0044d7cb
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: MapWindow::DoCursorDown @ 0x0044dc27
//   36: MapWindow::DoCursorUp @ 0x0044df29
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: MapWindow::`scalar deleting destructor' @ 0x0044fec0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: MapWindow::InitializeCachedSettings @ 0x0044d5b2
//   50: MapWindow::DrawButton @ 0x0044d94c
//   51: MapWindow::CreateAutoMessageSelectionPopupWindow @ 0x0044e211
//   52: MapWindow::GetStringIDForVehicleName @ 0x0044e32d
//   53 entries



// Contribution: 2:000009b0-00000a7b Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for EquipmentPanelWindow @ 0x0058f9b0
//   00: EquipmentPanelWindow::DoMessage @ 0x0044f1bd
//   01: EquipmentPanelWindow::Initialize @ 0x0044e720
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: EquipmentPanelWindow::CreateImage @ 0x0044e77b
//   05: EquipmentPanelWindow::DestroyImage @ 0x0044e94b
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: EquipmentPanelWindow::DoCursorDown @ 0x0044f1ff
//   36: EquipmentPanelWindow::DoCursorUp @ 0x0044f64e
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: EquipmentPanelWindow::`scalar deleting destructor' @ 0x0044ff00
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: EquipmentPanelWindow::DrawSelf @ 0x0044ea5d
//   48: EquipmentPanelWindow::DoesWindowNeedUpdating @ 0x0044eaa7
//   49: EquipmentPanelWindow::InitializeCachedSettings @ 0x0044e74b
//   50: EquipmentPanelWindow::DrawButton @ 0x0044eb6a
//   51 entries



// Contribution: 3:00001f58-000020e0 Module: 47, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598f58
char * SZ_RADIO_COMPASS_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f5c
char * SZ_COMPASS_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f60
char * SZ_DIAL_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f64
char * SZ_DIAL_WINDOW_DAMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f68
char * SZ_DIAL_WINDOW_FUEL_LIGHT_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f6c
char * SZ_DIAL_WINDOW_MONEY_FONT_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f70
char * SZ_DIAL_WINDOW_MANA_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f74
char * SZ_DIAL_WINDOW_ALTITUDE_NBR_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f78
char * SZ_DIAL_WINDOW_BOOT_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598f7c
char * SZ_DIAL_WINDOW_BOOT_BACK_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fb8
char * SZ_PASSENGER_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fbc
char * SZ_PASSENGER_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fc0
char * SZ_MAP_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fc4
char * SZ_MAP_WINDOW_BUTTON_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fcc
char * SZ_BUCKET_WATER_GUAGE_IMAGE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fd0
char * SZ_EQUIPMENT_BUTTON_IMAGE_0 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fd4
char * SZ_EQUIPMENT_BUTTON_IMAGE_1 = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00598fd8
char * SZ_EQUIPMENT_BUTTON_IMAGE_2 = { 0 /* todo */ };

