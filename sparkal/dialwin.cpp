// Module: Dialwin.obj
// Source: C:\Copter\source\sparkal\Dialwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class RadioCompassWindow (forward reference);
class RadioCompassWindow : public GraphicWindow
{
public:
	void RadioCompassWindow(class MRect&, long, class GraphicWindow*, class Radio*, class GraphicWindowOwner*, int32_t);
	virtual void ~RadioCompassWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	int32_t GetCurrentCompassPosition();
	void SetNewRadioStation(int32_t);
	void SetNewRadioStationVolume(long);
	void CheckForRadioChange();
protected:
	long lFrameCount;
	class Radio* myRadio;
	int32_t nRadioStationIndex;
	long lRadioStationVolume;
	class CBackBuffer* myCompassImage;
	class basic_string<char> sCompassFile;
	int32_t nLastCompassPosition;
	class MRect rectRadioStations;
	class MRect rectRadioStationVolume;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: long;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: class Radio (forward reference);
// Radio Class implementation not found

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: int32_t;

// Type: void;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: class DialWindow (forward reference);
class DialWindow : public GraphicWindow
{
public:
	void DialWindow(class MRect&, long, struct CommandSystem*, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~DialWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t DoesWindowNeedUpdating();
	void SetNewDialPositions();
	void DrawCurrentDamage();
	void CheckForChangedDamage();
	void TurnOffSpotlightCommand(int32_t);
	void TurnOnSpotlightCommand(int32_t);
protected:
	struct CommandSystem* myCommandSystem;
	class BitmappedFont* myMoneyGuageFont;
	class CBackBuffer* mySecondImage;
	class CBackBuffer* myDamageImage;
	class CBackBuffer* myFuelLightImage;
	class CBackBuffer* myPointsLightImage;
	class CBackBuffer* myAltitudeHundredsImage;
	class CBackBuffer* mySpotlightBootImage;
	class CBackBuffer* mySpotlightBootBackImage;
	int32_t nCurrentDamage;
	long lCurrentFuelPercentage;
	long lCurrentFuelLight;
	class DialHand dials[3];
	class MRect rectDials[3];
	class MRect rectMoneyFont;
	long lCurrentMoney;
	long lCurrentPoints;
	int32_t bCurrentPointsOverLimit;
	class MPoint ptLastSpotlightPosition;
	class MRect rectSpotlightControl;
	class MRect rectSpotlightControlSet[4];
	long lSpotlightControlCurrent;
};

// Type: struct CommandSystem (forward reference);
struct CommandSystem{
	struct Command keyboardCommands[100];
	class CharList keyboardCommandList;
	class list<Shortcut> commandShortcuts;
	unsigned char chCommandKeyboardArray[2048];
	unsigned char chCommandJoystickArray[4][14];
	long joystickCommands[100];
	void CommandSystem();
	void Initialize();
	void ClearAllCommands();
	void ClearAllCommandsDevice(long);
	void TurnOnCommand(int32_t);
	void TurnOffCommand(int32_t);
	void TurnOnCommandDevice(int32_t, long);
	void TurnOffCommandDevice(int32_t, long);
	int32_t IsCommandSet(int32_t);
	int32_t IsCommandPush(int32_t);
	void SetUpCommandArraysFromShortcuts();
	// calltype: NearC
	static int32_t GetKeystateIndexForChar(long, char);
	long GetJoystickCommandValue(int32_t);
	void PollJoysticksForCommands();
};

// Type: char[260];

// Type: int32_t[2][6];

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: char[16];

// Type: class PassengerWindow (forward reference);
class PassengerWindow : public GraphicWindow
{
	enum Position {
		nPositionUp = 0,
		nPositionDown = 1,
	};
	enum PositionChangeDirection {
		nPositionChangeDirectionDown = -1,
		nPositionChangeDirectionNone = 0,
		nPositionChangeDirectionUp = 1,
	};
public:
	void PassengerWindow(class MRect&, long, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~PassengerWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual int32_t DoesWindowNeedUpdating();
	// vtable: 200
	intro void MoveToUpPosition();
	// vtable: 204
	intro void MoveToDownPosition();
	// vtable: 208
	intro void TogglePosition();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	void DrawPassengers();
	void GetRectOfPassengerGraphic(int32_t, int32_t, class MRect&);
	int32_t DoesPositionHitPassenger(long, long, long&);
	enum PassengerWindow::Position nPositionCurrent;
	int32_t nHeightOfWindowToShow;
	int32_t nYPositionOfWindowWhenDown;
	class MTimer timerForPositionChange;
	int32_t nChangingPosition;
	long lPassengerDraggedID;
	class MPoint ptLastCursorPosition;
	class CBackBuffer* myPassengerImage;
	class basic_string<char> sPassengerFile;
};

// Type: struct tagHeliPassengerData (forward reference);
// tagHeliPassengerData Class implementation not found

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t[16];

// Type: class MapWindow (forward reference);
class MapWindow : public GraphicWindow
{
public:
	void MapWindow(class MRect&, long, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~MapWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	// vtable: 200
	intro void DrawButton(int32_t, int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	// vtable: 204
	intro void CreateAutoMessageSelectionPopupWindow(int32_t, int32_t, class MPoint&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 208
	intro int32_t GetStringIDForVehicleName(int32_t);
	class CBackBuffer* myButtonImage;
	int32_t bCurrentMissionFilter;
	int32_t bOtherMissionFilter;
	int32_t nTrackingButton;
	int32_t nCurrentAutoID;
	long lCurrentMissionID;
	class MFont fontText;
	class MRect rectButtons[6];
	class MRect rectMissionText;
};

// Type: struct MISSION_DATA (forward reference);
// MISSION_DATA Class implementation not found

// Type: void * __ptr32;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class PopupMenuWindow (forward reference);
class PopupMenuWindow : public ListBoxWindow
{
public:
	void PopupMenuWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	// vtable: 344
	intro void ResizeWindowToFitMenuItems();
	virtual int32_t RemoveStringAtIndex(long);
	virtual int32_t InsertStringAtIndex(long, class basic_string<char>&);
};

// Type: class EquipmentPanelWindow (forward reference);
class EquipmentPanelWindow : public GraphicWindow
{
public:
	void EquipmentPanelWindow(char *, class MRect&, long, struct CommandSystem*, class GraphicWindow*, class GraphicWindowOwner*);
	virtual void ~EquipmentPanelWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
	// vtable: 200
	intro void DrawButton(int32_t, int32_t);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	void CreateMegaphoneSelectionPopupWindow();
	virtual int32_t DoesWindowNeedUpdating();
protected:
	void DoCurrentControlStart();
	void DoCurrentControlEnd();
	void DrawBucketWaterGuage();
	void DrawTeargasUsage();
	class MRect rectControls[4];
	long lCurrentSelectedControl;
	struct CommandSystem* myCommandSystem;
	class CBackBuffer* myBucketWaterGuageImage;
	class CBackBuffer* myButtonImage;
	long lLastBucketWaterGuageLevel;
	long lLastTeargasCount;
};

// Type: uint32_t;

// Type: class DialHand (forward reference);
class DialHand{
	enum DialDirection {
		nDialDirectionClockwise = -1,
		nDialDirectionCounterClockwise = 1,
	};
public:
	void DialHand();
	int32_t SetCurrentValue(long);
	int32_t GetCurrentValue();
	int32_t SetPercent(long);
	void SetMaxValue(long);
	void SetAnglePerValue(float);
	void SetStartAngle(long);
	void SetDialPosition(long, long);
	void SetDialDirection(enum DialHand::DialDirection);
	void SetDialLength(long);
	void SetDialWidth(long);
	void DrawSelf(class CBackBuffer*);
	void SetDialColor(int32_t);
	int32_t HasChangedSinceLastDraw();
	void GetBoundingRect(class MRect&);
	void CalculateCurrentPosition();
	int32_t bHasChangedSinceLastDraw;
	long lCurrentValue;
	enum DialHand::DialDirection nDialDirection;
	long lMaxValue;
	long lStartAngle;
	long lDialLength;
	long lDialWidth;
	float fAnglePerValue;
	class MPoint ptPosition;
	class MPoint ptEndPosition;
	int32_t nColorDial;
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: class ListBoxWindow;
class ListBoxWindow : public GraphicWindow
{
public:
	void ListBoxWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t RemoveString(long);
	// vtable: 200
	intro int32_t RemoveString(class basic_string<char>&);
	// vtable: 204
	intro void RemoveAllStrings();
	// vtable: 208
	intro int32_t InsertString(long, long);
	// vtable: 212
	intro int32_t InsertString(class basic_string<char>&, long);
	// vtable: 216
	intro int32_t ResizeWindowForExactLineHeights();
	// vtable: 220
	intro int32_t SetSelection(long);
	// vtable: 224
	intro long GetSelection();
	// vtable: 228
	intro void SetShouldSort();
	// vtable: 232
	intro void Sort();
	// vtable: 236
	intro int32_t MoveLineUp();
	// vtable: 240
	intro int32_t MoveLineDown();
	// vtable: 244
	intro int32_t ScrollToStart();
	// vtable: 248
	intro int32_t ScrollToEnd();
	// vtable: 252
	intro int32_t ScrollPageUp();
	// vtable: 256
	intro int32_t ScrollPageDown();
	// vtable: 260
	intro int32_t IsIndexInView(long);
	// vtable: 264
	intro void PutIndexInView(long);
	// vtable: 268
	intro int32_t ScrollToFirstLetter(char);
	// vtable: 272
	intro void SetIndexOfTopLine(long);
	// vtable: 276
	intro long GetLineCount();
	// vtable: 280
	intro long GetIndexOfTopLine();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 284
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 288
	intro void SetBackgroundPaletteIndex(int32_t, int32_t);
	// vtable: 292
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	// vtable: 296
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 300
	intro int32_t AddScrollBar(int32_t, int32_t, char *);
	// vtable: 304
	intro void RemoveScrollBar(int32_t, int32_t);
protected:
	// vtable: 308
	intro void CalculateAllMetrics();
	// vtable: 312
	intro int32_t GetStringAddressFromIndex(long, class basic_string<char>*&);
	// vtable: 316
	intro int32_t GetStringFromIndex(long, class basic_string<char>&);
	// vtable: 320
	intro int32_t GetIndexFromString(long&, class basic_string<char>&);
	// vtable: 324
	intro int32_t RemoveStringAtIndex(long);
	// vtable: 328
	intro int32_t InsertStringAtIndex(long, class basic_string<char>&);
	// vtable: 332
	intro int32_t ModifyString(long, class basic_string<char>&);
	// vtable: 336
	intro void SetScrollBarValue();
	// vtable: 340
	intro void SetScrollBarSizes();
	class list<basic_string<char>> myStringList;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	int32_t nBackgroundIndex;
	int32_t nBackgroundIndexHighlighted;
	class MFont fontText;
	unsigned long nTextDrawStyle;
	long lCurrentSelection;
	long lVisibleLines;
	long lFirstVisibleLine;
	long lLineHeight;
	int32_t bAlwaysSort;
	class ScrollBarWindow* myVerticalScrollBarWindow;
	class ScrollBarWindow* myHorizontalScrollBarWindow;
	int32_t bBusySettingSelection;
};



// Contribution: 1:00047270-0004ec1a Module: 47, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00448270
void RadioCompassWindow::RadioCompassWindow(class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class Radio* myNewRadio, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, SZ_RADIO_COMPASS_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x2A;
	__asm        mov    eax, myNewRadio;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, SZ_COMPASS_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T10f;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004482FA;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Te6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00448351;

	__asm        jmp    _Tef;
_Te6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_Tef:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044836E;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T11c;
_T10f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
_T11c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        jmp    near ptr 0x0044839E;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004483B0;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0x10;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0x56;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0x22;
	__asm        jmp    near ptr 0x004483E9;

	__asm        jmp    near ptr 0x004483EE;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0x62;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x6E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x26;
	__asm        jmp    near ptr 0x00448427;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F650;
// LINE 76:
	__asm        jmp    near ptr 0x00448435;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044843f
void RadioCompassWindow::~RadioCompassWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F650;
// LINE 83:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::DestroyImage;
// LINE 84:
	__asm        jmp    near ptr 0x00448461;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    near ptr 0x004484DB;

	__asm        jmp    near ptr 0x004484E0;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004484F1;

	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    near ptr 0x004484FB;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	__asm        jmp    near ptr 0x0044852E;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044853b
int32_t RadioCompassWindow::Initialize() {
// LINE 93:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 94:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T30;
// LINE 95:
	__asm        xor    eax, eax;
	__asm        jmp    _T93;
// LINE 98:
_T30:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T89;
// LINE 99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x0044858C;
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x004485B2;
// LINE 103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 106:
_T89:
	__asm        mov    eax, 1;
	__asm        jmp    _T93;
// LINE 107:
_T93:
}

// FUNCTION: COPTER_D 0x004485d3
void RadioCompassWindow::InitializeCachedSettings() {
// LINE 114:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 115:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0xFFFFFFFF;
// LINE 116:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xF4240;
// LINE 117:
	__asm        jmp    near ptr 0x00448608;
}

// FUNCTION: COPTER_D 0x0044860d
void RadioCompassWindow::DestroyImage() {
// LINE 126:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 128:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T6b;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00448666;

	__asm        jmp    _T5e;
// LINE 130:
_T5e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 132:
_T6b:
	__asm        jmp    near ptr 0x0044867D;
}

// FUNCTION: COPTER_D 0x00448682
int32_t RadioCompassWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sCompassPath;

// LINE 141:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004486D3;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sCompassPath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	__asm        mov    sCompassPath.reference, 0;
_T63:
	__asm        mov    sCompassPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004486F1;
// LINE 144:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 146:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    _T1ce;
// LINE 147:
	__asm        lea    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x88;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0044872D;
// LINE 148:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1c1;

	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     _Te7;

	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Te7:
	__asm        jmp    near ptr 0x0044876E;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sCompassPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00448786;

	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T16e;

	__asm        jmp    near ptr 0x00448798;

	__asm        jmp    near ptr 0x0044879D;

	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13a;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T146;

	__asm        jmp    _T146;
_T13a:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T146;
_T146:
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T16e;
_T16e:
	__asm        jmp    near ptr 0x004487F5;

	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x004487FE;

	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00448809;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00448824;

	__asm        jmp    near ptr 0x00448829;

	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T1ce;
_T1c1:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 150:
_T1ce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 151:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sCompassPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T26b;

	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T26b;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T24b;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T24b:
	__asm        jmp    near ptr 0x004488D2;

	__asm        jmp    near ptr 0x004488D7;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004488E8;

	__asm        jmp    _T26b;
_T26b:
	__asm        jmp    near ptr 0x004488F2;

	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     _T292;

	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T292:
	__asm        jmp    near ptr 0x00448919;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x00448921;
// LINE 152:
}

// FUNCTION: COPTER_D 0x00448928
int32_t RadioCompassWindow::ComposeSelf() {
	int32_t nCurrentCompassPosition;

// LINE 169:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 170:
	__asm        xor    eax, eax;
	__asm        jmp    _T118;
// LINE 172:
_T20:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x74];
// LINE 173:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T3e;
// LINE 174:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::CheckForRadioChange;
// LINE 175:
_T3e:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x74], 1;
	__asm        je     _Tc6;
// LINE 176:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x10C];
	__asm        mov    nCurrentCompassPosition, eax;
	__asm        jmp    near ptr 0x00448986;
// LINE 177:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCurrentCompassPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        je     _Tc6;
// LINE 183:
	__asm        mov    ecx, 0x1E0000;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nCurrentCompassPosition, eax;
// LINE 186:
	__asm        push   0x10;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        push   0x190;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 187:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x10C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
// LINE 191:
_Tc6:
	__asm        jmp    near ptr 0x004489F3;

	__asm        jmp    near ptr 0x004489F8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 192:
	__asm        mov    eax, 1;
	__asm        jmp    _T118;
// LINE 193:
_T118:
}

// FUNCTION: COPTER_D 0x00448a45
long RadioCompassWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t nNewRadioStationIndex;
	long lNewRadioStationVolume;

// LINE 205:
	__asm        jmp    near ptr 0x00448A56;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00448A67;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    _T6f;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    _T6f;

	__asm        jmp    _T74;
_T6f:
	__asm        jmp    _Tce;
_T74:
	__asm        jmp    _T83;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _Tce;
// LINE 206:
_T83:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    ecx, nCursorX;
	__asm        sub    ecx, 0x14;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, 0x42;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nNewRadioStationIndex, eax;
// LINE 207:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x34];
// LINE 208:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 210:
	__asm        jmp    _T261;
_Tce:
	__asm        jmp    near ptr 0x00448B18;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00448B29;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    _T131;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _T131;

	__asm        jmp    _T136;
_T131:
	__asm        jmp    _T261;
_T136:
	__asm        jmp    _T145;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T261;
// LINE 211:
_T145:
	__asm        mov    eax, 0x26;
	__asm        sub    eax, nCursorY;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, 0x12;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 212:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSliderValueToSoundValue;
	__asm        add    esp, 4;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 214:
	__asm        cmp    lNewRadioStationVolume, 0x9C4;
	__asm        jg     _T1e4;
// LINE 215:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x24], eax;
// LINE 216:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T1bb;

	__asm        jmp    _T1da;
_T1bb:
	__asm        jmp    near ptr 0x00448C05;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T1da;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+0x1C];
_T1da:
	__asm        jmp    near ptr 0x00448C24;
// LINE 218:
	__asm        jmp    _T255;
_T1e4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x28], eax;
// LINE 219:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x18], 1;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     _T209;

	__asm        jmp    _T228;
_T209:
	__asm        jmp    near ptr 0x00448C53;

	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     _T228;

	__asm        push   0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   dword ptr [eax+0x1C];
_T228:
	__asm        jmp    near ptr 0x00448C72;
// LINE 220:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x1C];
// LINE 221:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
// LINE 223:
_T255:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 225:
_T261:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00448CB0;
// LINE 226:
}

// FUNCTION: COPTER_D 0x00448cb7
void RadioCompassWindow::SetNewRadioStation(int32_t nNewRadioStationIndex) {
	int32_t nRadioStationCount;
	int32_t nStationXPosition;

// LINE 242:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _T1e0;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    nRadioStationCount, eax;
// LINE 248:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    _T60;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 250:
	__asm        jmp    _T67;
// LINE 251:
_T60:
	__asm        mov    nStationXPosition, 0x14;
_T67:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 252:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D46;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 253:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D71;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 254:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D95;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 255:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448DBC;
// LINE 258:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    _T12a;
// LINE 259:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 260:
	__asm        jmp    _T131;
// LINE 261:
_T12a:
	__asm        mov    nStationXPosition, 0x14;
_T131:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 262:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E10;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 263:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E3B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 264:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E5F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x28], eax;
// LINE 265:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E86;
// LINE 267:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 269:
_T1e0:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 270:
	__asm        jmp    near ptr 0x00448EA5;
}

// FUNCTION: COPTER_D 0x00448eac
void RadioCompassWindow::SetNewRadioStationVolume(long lNewRadioStationVolume) {
	int32_t nVolumeYPosition;

// LINE 286:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSoundValueToSliderValue;
	__asm        add    esp, 4;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _T1a2;
// LINE 289:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
// LINE 290:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    near ptr 0x00448F22;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 291:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    near ptr 0x00448F45;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 292:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    near ptr 0x00448F6B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 293:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    near ptr 0x00448F91;
// LINE 296:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 297:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    near ptr 0x00448FCE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 298:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    near ptr 0x00448FF1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 299:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    near ptr 0x00449017;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 300:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    near ptr 0x0044903D;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 304:
_T1a2:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 305:
	__asm        jmp    near ptr 0x0044905F;
}

// FUNCTION: COPTER_D 0x00449066
void RadioCompassWindow::CheckForRadioChange() {
	int32_t nNewRadioStationIndex;
	long lNewRadioStationVolume;

// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    nNewRadioStationIndex, eax;
	__asm        jmp    near ptr 0x00449083;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    lNewRadioStationVolume, eax;
	__asm        jmp    near ptr 0x00449094;
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewRadioStationIndex;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        je     _T49;
// LINE 318:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 320:
_T49:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewRadioStationVolume;
	__asm        cmp    [eax+0x80], ecx;
	__asm        je     _T67;
// LINE 321:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 322:
_T67:
	__asm        jmp    near ptr 0x004490D2;
}

// FUNCTION: COPTER_D 0x004490d7
void DialWindow::DialWindow(class MRect& rectNewWindow, long lNewID, struct CommandSystem* myNewCommandSystem, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, myNewCommandSystem;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0xFFFFFC18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        mov    [ebp-8], eax;
_Td7:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _Tf1;

	__asm        mov    ecx, [ebp-8];
	__asm        call   DialHand::DialHand;
	__asm        add    dword ptr [ebp-8], 0x34;
	__asm        jmp    _Td7;
_Tf1:
	__asm        jmp    near ptr 0x004491CD;

	__asm        mov    dword ptr [ebp-0xC], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x140;
	__asm        mov    [ebp-0x10], eax;
_T108:
	__asm        dec    dword ptr [ebp-0xC];
	__asm        js     _T122;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x10], 0x10;
	__asm        jmp    _T108;
_T122:
	__asm        jmp    near ptr 0x004491FE;

	__asm        jmp    near ptr 0x00449203;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x170], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x174], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x178], 0x5E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17C], 0x1A;
	__asm        jmp    near ptr 0x0044923C;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x180], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0;
	__asm        jmp    near ptr 0x0044925B;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18C], 0x2710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x190], 0x2710;
	__asm        jmp    near ptr 0x0044927A;

	__asm        jmp    near ptr 0x0044927F;

	__asm        jmp    near ptr 0x00449284;

	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1A4;
	__asm        mov    [ebp-0x18], eax;
_T1bf:
	__asm        dec    dword ptr [ebp-0x14];
	__asm        js     _T1d9;

	__asm        mov    ecx, [ebp-0x18];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x18], 0x10;
	__asm        jmp    _T1bf;
_T1d9:
	__asm        jmp    near ptr 0x004492B5;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F738;
// LINE 367:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0xA1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0x2F;
	__asm        jmp    near ptr 0x004492EA;
// LINE 368:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004492FC;
// LINE 369:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jle    _T25c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
_T25c:
	__asm        jmp    near ptr 0x00449338;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0x102;
	__asm        jmp    near ptr 0x0044934A;
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x40566666;
	__asm        jmp    near ptr 0x0044935C;
// LINE 372:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0x1C;
	__asm        jmp    near ptr 0x0044936E;
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 2;
	__asm        jmp    near ptr 0x00449380;
// LINE 374:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x48], eax;
	__asm        fimul  dword ptr [ebp-0x48];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x34], ecx;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x50], eax;
	__asm        fimul  dword ptr [ebp-0x50];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x54], eax;
	__asm        fild   dword ptr [ebp-0x54];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x58], eax;
	__asm        fimul  dword ptr [ebp-0x58];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    near ptr 0x00449449;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x140;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x20], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x20];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x1C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    near ptr 0x004494F4;

	__asm        jmp    near ptr 0x004494F9;
// LINE 377:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF8], 0x13C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFC], 0x26;
	__asm        jmp    near ptr 0x00449518;
// LINE 378:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE0], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044952A;
// LINE 379:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE4], 0x186A0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jle    _T48a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
_T48a:
	__asm        jmp    near ptr 0x00449566;
// LINE 380:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE8], 0x5A;
	__asm        jmp    near ptr 0x00449578;
// LINE 381:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF4], 0x40666666;
	__asm        jmp    near ptr 0x0044958A;
// LINE 382:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEC], 0x18;
	__asm        jmp    near ptr 0x0044959C;
// LINE 383:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF0], 2;
	__asm        jmp    near ptr 0x004495AE;
// LINE 384:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0x5C], eax;
	__asm        fild   dword ptr [ebp-0x5C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0x60], eax;
	__asm        fimul  dword ptr [ebp-0x60];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x38], ecx;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x64], eax;
	__asm        fild   dword ptr [ebp-0x64];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x68], eax;
	__asm        fimul  dword ptr [ebp-0x68];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x6C], eax;
	__asm        fild   dword ptr [ebp-0x6C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x70], eax;
	__asm        fimul  dword ptr [ebp-0x70];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    near ptr 0x00449677;
// LINE 385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x150;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x28], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x28];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x24];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    near ptr 0x00449722;

	__asm        jmp    near ptr 0x00449727;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12C], 0x18E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 0x20;
	__asm        jmp    near ptr 0x00449746;
// LINE 388:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00449758;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x118], 0x19;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jle    _T6b8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
_T6b8:
	__asm        jmp    near ptr 0x00449794;
// LINE 390:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11C], 0x5A;
	__asm        jmp    near ptr 0x004497A6;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0x41600000;
	__asm        jmp    near ptr 0x004497B8;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 0x1A;
	__asm        jmp    near ptr 0x004497CA;
// LINE 393:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 2;
	__asm        jmp    near ptr 0x004497DC;
// LINE 394:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x74], eax;
	__asm        fild   dword ptr [ebp-0x74];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0x78], eax;
	__asm        fimul  dword ptr [ebp-0x78];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        fild   dword ptr [ebp-0x7C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x80], eax;
	__asm        fimul  dword ptr [ebp-0x80];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x84], eax;
	__asm        fild   dword ptr [ebp-0x84];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x88], eax;
	__asm        fimul  dword ptr [ebp-0x88];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    near ptr 0x004498B1;
// LINE 395:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x160;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x30], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x30];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    near ptr 0x0044995C;

	__asm        jmp    near ptr 0x00449961;
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A4], 0xDE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A8], 7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AC], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B0], 0x12;
	__asm        jmp    near ptr 0x0044999A;
// LINE 398:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B4], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B8], 0x12;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BC], 0x10C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C0], 0x3D;
	__asm        jmp    near ptr 0x004499D3;
// LINE 399:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C4], 0xDD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C8], 0x3C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CC], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D0], 0x47;
	__asm        jmp    near ptr 0x00449A0C;
// LINE 400:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D4], 0xD2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D8], 0x11;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DC], 0xDD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E0], 0x46;
	__asm        jmp    near ptr 0x00449A45;
// LINE 401:
	__asm        jmp    near ptr 0x00449A4A;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00449a54
void DialWindow::~DialWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F738;
// LINE 408:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DestroyImage;
// LINE 409:
	__asm        jmp    near ptr 0x00449A76;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00449a83
int32_t DialWindow::Initialize() {
// LINE 419:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 420:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x00449AA9;
// LINE 421:
}

// FUNCTION: COPTER_D 0x00449aae
void DialWindow::InitializeCachedSettings() {
// LINE 431:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0xFFFFFC18;
// LINE 432:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0xFFFFFC18;
// LINE 433:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0xFFFFFC18;
// LINE 434:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x180], 0xFFFFFC18;
// LINE 435:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0xFFFFFC18;
// LINE 436:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x188], 0;
// LINE 437:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18C], 0xFFFFFC18;
// LINE 438:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x190], 0xFFFFFC18;
// LINE 439:
	__asm        jmp    near ptr 0x00449B27;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jne    _Tf0;
// LINE 440:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _Tb6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-4], eax;
_Tb6:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _Te6;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _Teb;
_Te6:
	__asm        jmp    _Teb;
// LINE 441:
_Teb:
	__asm        jmp    _T14f;
// LINE 442:
_Tf0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _T11a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
_T11a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _T14a;

	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _T14f;
_T14a:
	__asm        jmp    _T14f;
// LINE 444:
_T14f:
	__asm        jmp    near ptr 0x00449C02;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jne    _T1cb;
// LINE 445:
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T191;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0xC], eax;
_T191:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T1c1;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T1c6;
_T1c1:
	__asm        jmp    _T1c6;
// LINE 446:
_T1c6:
	__asm        jmp    _T22a;
// LINE 447:
_T1cb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T1f5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
_T1f5:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T225;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T22a;
_T225:
	__asm        jmp    _T22a;
// LINE 449:
_T22a:
	__asm        jmp    near ptr 0x00449CDD;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jne    _T2a6;
// LINE 450:
	__asm        mov    dword ptr [ebp-0x14], 2;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T26c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x14], eax;
_T26c:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T29c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T2a1;
_T29c:
	__asm        jmp    _T2a1;
// LINE 451:
_T2a1:
	__asm        jmp    _T305;
// LINE 452:
_T2a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T2d0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
_T2d0:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T300;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T305;
_T300:
	__asm        jmp    _T305;
// LINE 453:
_T305:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 454:
	__asm        jmp    near ptr 0x00449DC5;
}

// FUNCTION: COPTER_D 0x00449dca
void DialWindow::DestroyImage() {
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 465:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T62;
// LINE 466:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T58;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449E1D;

	__asm        jmp    _T58;
// LINE 467:
_T58:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 469:
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _Tb9;
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tac;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449E71;

	__asm        jmp    _Tac;
// LINE 471:
_Tac:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 473:
_Tb9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T110;
// LINE 474:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T103;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449EC8;

	__asm        jmp    _T103;
// LINE 475:
_T103:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 477:
_T110:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T15e;
// LINE 478:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T154;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   BitmappedFont::~BitmappedFont;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449F19;

	__asm        jmp    _T154;
// LINE 479:
_T154:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 481:
_T15e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T1b5;
// LINE 482:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T1a8;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449F6D;

	__asm        jmp    _T1a8;
// LINE 483:
_T1a8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 485:
_T1b5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     _T20c;
// LINE 486:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1ff;

	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449FC4;

	__asm        jmp    _T1ff;
// LINE 487:
_T1ff:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 489:
_T20c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T263;
// LINE 490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T256;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044A01B;

	__asm        jmp    _T256;
// LINE 491:
_T256:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 493:
_T263:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T2ba;
// LINE 494:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T2ad;

	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044A072;

	__asm        jmp    _T2ad;
// LINE 495:
_T2ad:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 497:
_T2ba:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T322;
// LINE 498:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T2dd;

	__asm        jmp    _T2e2;
_T2dd:
	__asm        jmp    _T303;
_T2e2:
	__asm        jmp    _T2f1;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T303;
// LINE 499:
_T2f1:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 500:
_T303:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 501:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 503:
_T322:
	__asm        jmp    near ptr 0x0044A0F1;
}

// FUNCTION: COPTER_D 0x0044a0f6
void DialWindow::TurnOffSpotlightCommand(int32_t nIndex) {
// LINE 510:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    _T40;
// LINE 511:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    near ptr 0x0044A131;
// LINE 512:
	__asm        jmp    _Td7;
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    _T74;
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    near ptr 0x0044A165;
// LINE 514:
	__asm        jmp    _Td7;
_T74:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    _Ta8;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    near ptr 0x0044A199;
// LINE 516:
	__asm        jmp    _Td7;
_Ta8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    _Td7;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    _Td7;
// LINE 518:
_Td7:
	__asm        jmp    near ptr 0x0044A1D2;
}

// FUNCTION: COPTER_D 0x0044a1d9
void DialWindow::TurnOnSpotlightCommand(int32_t nIndex) {
// LINE 526:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    _T40;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    near ptr 0x0044A214;
// LINE 528:
	__asm        jmp    _Td7;
_T40:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    _T74;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    near ptr 0x0044A248;
// LINE 530:
	__asm        jmp    _Td7;
_T74:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    _Ta8;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    near ptr 0x0044A27C;
// LINE 532:
	__asm        jmp    _Td7;
_Ta8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    _Td7;
// LINE 533:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    _Td7;
// LINE 534:
_Td7:
	__asm        jmp    near ptr 0x0044A2B5;
}

// FUNCTION: COPTER_D 0x0044a2bc
int32_t DialWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szFullPath[260];

// LINE 546:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 550:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    _Td0;
// LINE 551:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T90;

	__asm        jmp    near ptr 0x0044A312;

	__asm        jmp    near ptr 0x0044A317;

	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T9d;
_T90:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 552:
_T9d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _Td0;
// LINE 554:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x34];
// LINE 557:
_Td0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T174;
// LINE 558:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_DAMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 559:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T13f;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T14f;
_T13f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 560:
_T14f:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+8];
// LINE 562:
_T174:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    _T1f3;
// LINE 563:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_FUEL_LIGHT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 564:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T1e3;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T1f3;
_T1e3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 566:
_T1f3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        jne    _T272;
// LINE 567:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_MANA_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 568:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _T262;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T272;
_T262:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 570:
_T272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T2fd;
// LINE 571:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_MONEY_FONT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   8;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 572:
	__asm        push   0x54;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x118], eax;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     _T2da;

	__asm        push   1;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x118];
	__asm        call   BitmappedFont::BitmappedFont;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T2e7;
_T2da:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 573:
_T2e7:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx];
// LINE 575:
_T2fd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        jne    _T37c;
// LINE 576:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_ALTITUDE_NBR_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 577:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _T36c;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T37c;
_T36c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 579:
_T37c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T420;
// LINE 580:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_BOOT_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 581:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T3eb;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x120];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    _T3fb;
_T3eb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 582:
_T3fb:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+8];
// LINE 584:
_T420:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        jne    _T49f;
// LINE 585:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_DIAL_WINDOW_BOOT_BACK_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 586:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x124], eax;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T48f;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    _T49f;
_T48f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 588:
_T49f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 590:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    near ptr 0x0044A77D;
// LINE 591:
}

// FUNCTION: COPTER_D 0x0044a784
void DialWindow::DrawCurrentDamage() {
	int32_t nSourceImageX;
	int32_t i;
	static const int32_t nDamageArray[6][2] = { /* <data@0x00598f80> */ };
	int32_t nDamageInRangeOf0to15;

// LINE 618:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x98];
	__asm        lea    ebx, [ebx+ebx*2];
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumDamage;
	__asm        add    esp, 4;
	__asm        mov    ecx, eax;
	__asm        mov    eax, ebx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nDamageInRangeOf0to15, eax;
// LINE 619:
	__asm        mov    i, 0;
	__asm        jmp    _T42;
_T3f:
	__asm        inc    i;
_T42:
	__asm        cmp    i, 6;
	__asm        jge    _Td5;
// LINE 620:
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    nDamageArray[0][eax*8], ecx;
	__asm        jg     _T6b;
// LINE 621:
	__asm        mov    nSourceImageX, 0;
// LINE 622:
	__asm        jmp    _T91;
_T6b:
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    nDamageArray[0][1][eax*8], ecx;
	__asm        jg     _T8a;
// LINE 623:
	__asm        mov    nSourceImageX, 0xF;
// LINE 624:
	__asm        jmp    _T91;
// LINE 625:
_T8a:
	__asm        mov    nSourceImageX, 0x1E;
// LINE 629:
_T91:
	__asm        push   0xE;
	__asm        mov    eax, nSourceImageX;
	__asm        add    eax, 0xF;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nSourceImageX;
	__asm        push   eax;
	__asm        push   0x3F;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, 0xB;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 630:
	__asm        jmp    _T3f;
// LINE 631:
_Td5:
	__asm        jmp    near ptr 0x0044A85E;
}

// FUNCTION: COPTER_D 0x0044a863
long DialWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t i;

// LINE 640:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     _T106;
// LINE 641:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T48;
// LINE 642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 643:
_T48:
	__asm        mov    i, 0;
	__asm        jmp    _T57;
_T54:
	__asm        inc    i;
_T57:
	__asm        cmp    i, 4;
	__asm        jge    _T106;
// LINE 644:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    _Tca;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    _Tca;

	__asm        jmp    _Tcf;
_Tca:
	__asm        jmp    _T101;
_Tcf:
	__asm        jmp    _Tde;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T101;
// LINE 645:
_Tde:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1E4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 646:
	__asm        jmp    _T106;
// LINE 648:
_T101:
	__asm        jmp    _T54;
// LINE 650:
_T106:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044A973;
// LINE 651:
}

// FUNCTION: COPTER_D 0x0044a97a
long DialWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 658:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 659:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 660:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T74;
// LINE 661:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 664:
_T74:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044A9F8;
// LINE 665:
}

// FUNCTION: COPTER_D 0x0044a9ff
long DialWindow::DoCursorMove(long nCursorX, long nCursorY) {
	int32_t i;
	long lNewSpotlightCommand;

// LINE 676:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     _T10f;
// LINE 677:
	__asm        mov    i, 0;
	__asm        mov    lNewSpotlightCommand, 0xFFFFFFFF;
	__asm        jmp    _T32;
_T2f:
	__asm        inc    i;
_T32:
	__asm        cmp    i, 4;
	__asm        jge    _Tc9;
// LINE 678:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    _Ta5;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    _Ta5;

	__asm        jmp    _Taa;
_Ta5:
	__asm        jmp    _Tc4;
_Taa:
	__asm        jmp    _Tb9;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tc4;
// LINE 679:
_Tb9:
	__asm        mov    eax, i;
	__asm        mov    lNewSpotlightCommand, eax;
// LINE 680:
	__asm        jmp    _Tc9;
// LINE 682:
_Tc4:
	__asm        jmp    _T2f;
// LINE 683:
_Tc9:
	__asm        cmp    lNewSpotlightCommand, 0;
	__asm        jl     _T10f;

	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSpotlightCommand;
	__asm        cmp    [eax+0x1E4], ecx;
	__asm        je     _T10f;
// LINE 684:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 685:
	__asm        mov    eax, lNewSpotlightCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 686:
	__asm        mov    eax, lNewSpotlightCommand;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1E4], eax;
// LINE 689:
_T10f:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044AB18;
// LINE 690:
}

// FUNCTION: COPTER_D 0x0044ab1f
int32_t DialWindow::ComposeSelf() {
	class MPoint ptSpotLightPositionLocalCoordinates;
	long lStringLength;
	static const long lFrameCounter = { /* <data@0x00598fb0> */ };
	class MPoint ptSpotLightBackPositionCoordinates;
	char szMoneyString[16];

// LINE 700:
	__asm        jmp    near ptr 0x0044AB36;

	__asm        jmp    near ptr 0x0044AB3B;
// LINE 701:
	__asm        jmp    near ptr 0x0044AB40;

	__asm        jmp    near ptr 0x0044AB45;
// LINE 704:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T3d;
// LINE 705:
	__asm        xor    eax, eax;
	__asm        jmp    _Tebc;
// LINE 707:
_T3d:
	__asm        inc    lFrameCounter;
// LINE 708:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 1;
	__asm        je     _Te55;
// LINE 709:
	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        cmp    [eax+0xD0], ecx;
	__asm        je     _T8f;

	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DrawCurrentDamage;
_T8f:
	__asm        jmp    near ptr 0x0044ABB3;
// LINE 712:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::SetNewDialPositions;
// LINE 715:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tc7;

	__asm        jmp    near ptr 0x0044ABD3;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T3d5;
_Tc7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x5C], eax;
// LINE 716:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        fimul  dword ptr [ebp-0xA4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x58], ecx;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xA8], eax;
	__asm        fild   dword ptr [ebp-0xA8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        fimul  dword ptr [ebp-0xAC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xB0], eax;
	__asm        fild   dword ptr [ebp-0xB0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        fimul  dword ptr [ebp-0xB4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    near ptr 0x0044ACFD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044AD1A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        jmp    near ptr 0x0044AD7B;
// LINE 717:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x140];
	__asm        cmp    [eax+0x148], ecx;
	__asm        jge    _T310;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
_T310:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14C];
	__asm        cmp    [eax+0x144], ecx;
	__asm        jle    _T364;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
_T364:
	__asm        jmp    near ptr 0x0044AE88;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x7C], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x7C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x78];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    near ptr 0x0044AEEF;

	__asm        jmp    _T3d5;
// LINE 719:
_T3d5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T3fd;

	__asm        jmp    near ptr 0x0044AF09;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        je     _T729;
_T3fd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x68], eax;
// LINE 720:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        fild   dword ptr [ebp-0xB8];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0xBC], eax;
	__asm        fimul  dword ptr [ebp-0xBC];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x64], ecx;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC0], eax;
	__asm        fild   dword ptr [ebp-0xC0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        fimul  dword ptr [ebp-0xC4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        fild   dword ptr [ebp-0xC8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xCC], eax;
	__asm        fimul  dword ptr [ebp-0xCC];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    near ptr 0x0044B033;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044B050;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 0;
	__asm        jmp    near ptr 0x0044B0B1;
// LINE 721:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x150];
	__asm        cmp    [eax+0x158], ecx;
	__asm        jge    _T64c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
_T64c:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x154];
	__asm        cmp    [eax+0x15C], ecx;
	__asm        jge    _T6a6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
_T6a6:
	__asm        jmp    near ptr 0x0044B1CA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x88], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x88];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x84];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    near ptr 0x0044B243;

	__asm        jmp    _T729;
// LINE 723:
_T729:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T751;

	__asm        jmp    near ptr 0x0044B25D;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        je     _Ta7d;
_T751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x74], eax;
// LINE 724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0xD0], eax;
	__asm        fild   dword ptr [ebp-0xD0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0xD4], eax;
	__asm        fimul  dword ptr [ebp-0xD4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x70], ecx;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xD8], eax;
	__asm        fild   dword ptr [ebp-0xD8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xDC], eax;
	__asm        fimul  dword ptr [ebp-0xDC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xE0], eax;
	__asm        fild   dword ptr [ebp-0xE0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xE4], eax;
	__asm        fimul  dword ptr [ebp-0xE4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    near ptr 0x0044B387;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x13C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044B3A4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0;
	__asm        jmp    near ptr 0x0044B405;
// LINE 725:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x160];
	__asm        cmp    [eax+0x168], ecx;
	__asm        jge    _T9a0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
_T9a0:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x16C];
	__asm        cmp    [eax+0x164], ecx;
	__asm        jle    _T9fa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
_T9fa:
	__asm        jmp    near ptr 0x0044B51E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x94], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x94];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x90];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    near ptr 0x0044B597;

	__asm        jmp    _Ta7d;
// LINE 727:
_Ta7d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Taa4;

	__asm        call   GetUserMoney;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x180];
	__asm        je     _Tb04;
// LINE 728:
_Taa4:
	__asm        call   GetUserMoney;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x180], eax;
// LINE 729:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x180];
	__asm        push   eax;
	__asm        push   0x59906C;
	__asm        lea    eax, szMoneyString[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
	__asm        mov    lStringLength, eax;
// LINE 731:
	__asm        push   8;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        lea    eax, szMoneyString[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x170;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   BitmappedFont::DrawTextLineFormatNoClip;
// LINE 734:
_Tb04:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tb44;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_SpotLiteXRotation;
	__asm        cmp    [eax+0x190], ecx;
	__asm        jne    _Tb44;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_SpotLiteYRotation;
	__asm        cmp    [eax+0x18C], ecx;
	__asm        je     _Tcb3;
// LINE 736:
_Tb44:
	__asm        mov    eax, G_SpotLiteXRotation;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x190], eax;
// LINE 737:
	__asm        mov    eax, G_SpotLiteYRotation;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18C], eax;
// LINE 742:
	__asm        mov    eax, G_SpotLiteYRotation;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.x, eax;
// LINE 743:
	__asm        mov    eax, G_SpotLiteXRotation;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.y, eax;
// LINE 744:
	__asm        mov    eax, 0xA;
	__asm        sub    eax, ptSpotLightPositionLocalCoordinates.x;
	__asm        mov    ptSpotLightBackPositionCoordinates.x, eax;
// LINE 745:
	__asm        mov    eax, 0xE;
	__asm        sub    eax, ptSpotLightPositionLocalCoordinates.y;
	__asm        mov    ptSpotLightBackPositionCoordinates.y, eax;
// LINE 746:
	__asm        add    ptSpotLightPositionLocalCoordinates.x, 0xE1;
// LINE 747:
	__asm        add    ptSpotLightPositionLocalCoordinates.y, 0x21;
// LINE 748:
	__asm        push   0x4B;
	__asm        push   0x104;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 751:
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        add    eax, 0x25;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        add    eax, 0x1F;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        push   0xDF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x94];
	__asm        call   dword ptr [edx+0xC];
// LINE 753:
	__asm        jmp    near ptr 0x0044B756;

	__asm        jmp    near ptr 0x0044B75B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0044B784;

	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0044B7A3;

	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        lea    eax, ptSpotLightPositionLocalCoordinates.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0x2C];
// LINE 756:
_Tcb3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _Tced;

	__asm        call   GetUserPoints;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x184];
	__asm        je     _Te55;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x188], 0;
	__asm        jne    _Te55;
// LINE 757:
// Block start:
	const int32_t iGuageEnd;
	int32_t nXPosition;
	int32_t i;
	const int32_t nYPosition;
	int32_t iLitEnd;
_Tced:
	__asm        mov    nXPosition, 0x14;
// LINE 758:
	__asm        mov    iGuageEnd, 0xF;
	__asm        mov    nYPosition, 0x25;
// LINE 760:
	__asm        call   GetUserPoints;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x184], eax;
// LINE 761:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x184], 0x3E8;
	__asm        jle    _Td49;
// LINE 762:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0x3E8;
// LINE 763:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x188], 1;
// LINE 765:
_Td49:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x184];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iLitEnd, eax;
// LINE 767:
	__asm        mov    i, 0;
	__asm        jmp    _Td79;
_Td72:
	__asm        inc    i;
	__asm        add    nXPosition, 5;
_Td79:
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    _Tdbf;
// LINE 768:
	__asm        push   0xD;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Td72;
// LINE 769:
_Tdbf:
	__asm        cmp    i, 0xF;
	__asm        jge    _Te55;
// LINE 771:
	__asm        push   0xD;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
// LINE 772:
	__asm        inc    i;
// LINE 773:
	__asm        add    nXPosition, 5;
// LINE 776:
	__asm        jmp    _Te11;
_Te0a:
	__asm        inc    i;
	__asm        add    nXPosition, 5;
_Te11:
	__asm        cmp    i, 0xF;
	__asm        jge    _Te55;
// LINE 777:
	__asm        push   0xD;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Te0a;
// LINE 784:
// Block end:
_Te55:
	__asm        jmp    near ptr 0x0044B979;

	__asm        jmp    near ptr 0x0044B97E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xC];
// LINE 786:
	__asm        mov    eax, 1;
	__asm        jmp    _Tebc;
// LINE 787:
_Tebc:
}

// FUNCTION: COPTER_D 0x0044b9e0
int32_t DialWindow::DoesWindowNeedUpdating() {
// LINE 798:
	__asm        jmp    near ptr 0x0044B9F1;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        jne    _T65;

	__asm        jmp    near ptr 0x0044BA06;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        jne    _T65;

	__asm        jmp    near ptr 0x0044BA1B;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T65;

	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        cmp    [eax+0xD0], ecx;
	__asm        je     _T6f;
_T65:
	__asm        mov    eax, 1;
	__asm        jmp    _T71;
_T6f:
	__asm        xor    eax, eax;
_T71:
	__asm        jmp    near ptr 0x0044BA56;
// LINE 799:
}

// FUNCTION: COPTER_D 0x0044ba5b
void DialWindow::SetNewDialPositions() {
	long lNewFuelLight;
	static const long lFrameCounter = { /* <data@0x00598fb4> */ };
	long lNewAltitude;

// LINE 816:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T1d7;
// LINE 817:
	__asm        push   0x640000;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    eax, S_helitype_data[0].fuel_capacity[eax*8];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x320];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x10], eax;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    _T8a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-0x10], eax;
_T8a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     _Tba;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    _Tce;
_Tba:
	__asm        jmp    _T1d7;

	__asm        jmp    _Tce;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1d7;
// LINE 819:
_Tce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 820:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jle    _T13e;
// LINE 821:
	__asm        mov    lNewFuelLight, 0;
// LINE 822:
	__asm        jmp    _T161;
_T13e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xA;
	__asm        jle    _T15a;
// LINE 823:
	__asm        mov    lNewFuelLight, 1;
// LINE 824:
	__asm        jmp    _T161;
// LINE 825:
_T15a:
	__asm        mov    lNewFuelLight, 2;
// LINE 826:
_T161:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewFuelLight;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jne    _T183;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jge    _T1d7;
// LINE 827:
_T183:
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
// LINE 828:
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    [ebp-0xC], eax;
	__asm        inc    lNewFuelLight;
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x3B;
	__asm        push   0x88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 832:
_T1d7:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    _T3df;
// LINE 833:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, G_uheli;
	__asm        sub    eax, [ecx+0x150];
	__asm        sar    eax, 0x10;
	__asm        mov    lNewAltitude, eax;
	__asm        mov    eax, lNewAltitude;
	__asm        mov    [ebp-0x18], eax;
// LINE 834:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    _T22a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x18], eax;
_T22a:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     _T25a;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    _T26e;
_T25a:
	__asm        jmp    _T30f;

	__asm        jmp    _T26e;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T30f;
// LINE 835:
_T26e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 836:
	__asm        mov    eax, lNewAltitude;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, 0x5A;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewAltitude, edx;
// LINE 839:
	__asm        mov    eax, lNewAltitude;
	__asm        add    eax, 9;
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    eax, lNewAltitude;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x22;
	__asm        push   0x12C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC];
// LINE 841:
_T30f:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x128];
	__asm        sar    eax, 0x14;
	__asm        push   eax;
	__asm        call   abs;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    _T347;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x20], eax;
_T347:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     _T377;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    _T38b;
_T377:
	__asm        jmp    _T3df;

	__asm        jmp    _T38b;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T3df;
// LINE 842:
_T38b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 845:
_T3df:
	__asm        inc    lFrameCounter;
// LINE 846:
	__asm        jmp    near ptr 0x0044BE45;
}

// FUNCTION: COPTER_D 0x0044be4a
void PassengerWindow::PassengerWindow(class MRect& rectNewPosition, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_PASSENGER_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x2B;
	__asm        mov    eax, rectNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb5;

	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _Tb5;
_Tb5:
	__asm        jmp    near ptr 0x0044BF04;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044BF23;

	__asm        jmp    near ptr 0x0044BF28;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, SZ_PASSENGER_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1a6;

	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0044BF6B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T17d;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0044BFC2;

	__asm        jmp    _T186;
_T17d:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T186:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044BFDF;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T1b3;
_T1a6:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
_T1b3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        jmp    near ptr 0x0044C00F;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F800;
// LINE 911:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 912:
	__asm        jmp    near ptr 0x0044C028;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044c032
void PassengerWindow::~PassengerWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F800;
// LINE 920:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DestroyImage;
// LINE 921:
	__asm        jmp    near ptr 0x0044C054;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    near ptr 0x0044C0CE;

	__asm        jmp    near ptr 0x0044C0D3;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C0E4;

	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    near ptr 0x0044C0EE;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	__asm        jmp    near ptr 0x0044C121;

	__asm        jmp    near ptr 0x0044C126;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044c133
int32_t PassengerWindow::Initialize() {
// LINE 931:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 932:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0044C159;
// LINE 933:
}

// FUNCTION: COPTER_D 0x0044c15e
void PassengerWindow::InitializeCachedSettings() {
// LINE 941:
	__asm        cmp    G_uheli, 0;
	__asm        je     _T2c;
// LINE 942:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerSetChanged;
	__asm        add    esp, 4;
// LINE 943:
_T2c:
	__asm        jmp    near ptr 0x0044C18F;
}

// FUNCTION: COPTER_D 0x0044c194
int32_t PassengerWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sPassengerPath;

// LINE 951:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044C1E5;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sPassengerPath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	__asm        mov    sPassengerPath.reference, 0;
_T63:
	__asm        mov    sPassengerPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0044C203;
// LINE 954:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 955:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _Ta2;
// LINE 956:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 958:
_Ta2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        jne    _T222;
// LINE 959:
	__asm        lea    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0044C266;
// LINE 960:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1e8;

	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     _T10e;

	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T10e:
	__asm        jmp    near ptr 0x0044C2A7;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sPassengerPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0044C2BF;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T195;

	__asm        jmp    near ptr 0x0044C2D1;

	__asm        jmp    near ptr 0x0044C2D6;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T161;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T16d;

	__asm        jmp    _T16d;
_T161:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T16d;
_T16d:
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T195;
_T195:
	__asm        jmp    near ptr 0x0044C32E;

	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0044C337;

	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0044C342;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0044C35D;

	__asm        jmp    near ptr 0x0044C362;

	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    _T1f5;
_T1e8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 961:
_T1f5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T222;
// LINE 962:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+8];
// LINE 964:
_T222:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 966:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2bf;

	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T2bf;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T29f;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T29f:
	__asm        jmp    near ptr 0x0044C438;

	__asm        jmp    near ptr 0x0044C43D;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C44E;

	__asm        jmp    _T2bf;
_T2bf:
	__asm        jmp    near ptr 0x0044C458;

	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     _T2e6;

	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e6:
	__asm        jmp    near ptr 0x0044C47F;

	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0044C487;
// LINE 967:
}

// FUNCTION: COPTER_D 0x0044c48e
void PassengerWindow::DestroyImage() {
// LINE 975:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     _T6b;
// LINE 977:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C4E7;

	__asm        jmp    _T5e;
// LINE 978:
_T5e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 980:
_T6b:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T7e;

	__asm        jmp    _T83;
_T7e:
	__asm        jmp    _Tb1;
_T83:
	__asm        jmp    _T92;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb1;
// LINE 981:
_T92:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 982:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 984:
_Tb1:
	__asm        jmp    near ptr 0x0044C544;
}

// FUNCTION: COPTER_D 0x0044c549
int32_t PassengerWindow::ComposeSelf() {
// LINE 991:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 992:
	__asm        xor    eax, eax;
	__asm        jmp    _T419;
// LINE 997:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        jne    _T3d;
// LINE 998:
	__asm        xor    eax, eax;
	__asm        jmp    _T419;
// LINE 999:
_T3d:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1001:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T222;
// LINE 1002:
// Block start:
	unsigned long lTimeElapsed;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0044C5B6;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _Tfc;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _Ta0;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;

	__asm        jmp    _Te7;
_Ta0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Td0;

	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;

	__asm        jmp    _Te7;
_Td0:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        add    [ebp-0x48], eax;
_Tfc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T143;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     _T143;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    _T14e;
_T143:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    _T14e;
// LINE 1004:
_T14e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 1;
	__asm        jne    _T17e;
// LINE 1006:
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        add    eax, 0x2B;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 1008:
	__asm        jmp    _T19d;
// LINE 1010:
_T17e:
	__asm        mov    ecx, 0x73;
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        sub    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x78], ecx;
// LINE 1013:
_T19d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x2B;
	__asm        jg     _T1d0;
// LINE 1014:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x2B;
// LINE 1015:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1016:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 1018:
	__asm        jmp    _T1fe;
_T1d0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x73;
	__asm        jl     _T1fe;
// LINE 1019:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x73;
// LINE 1020:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1021:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1024:
_T1fe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        sub    ecx, 0x2B;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1028:
// Block end:
_T222:
	__asm        jmp    near ptr 0x0044C770;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1031:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DrawPassengers;
// LINE 1033:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     _T40f;
// LINE 1034:
// Block start:
	struct tagHeliPassengerData* tempHeliPassengerData;
	class MRect rectSource;
	class MPoint ptGraphicIconPosition;
	long lPassengerIndex;
	__asm        jmp    near ptr 0x0044C7C8;

	__asm        jmp    near ptr 0x0044C7CD;
// LINE 1035:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1036:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    eax, tempHeliPassengerData;
	__asm        push   eax;
	__asm        call   HeliPassengerGetIndexInHeli;
	__asm        add    esp, 8;
	__asm        mov    lPassengerIndex, eax;
// LINE 1037:
	__asm        jmp    near ptr 0x0044C7F8;

	__asm        mov    dword ptr [ebp-0x2C], 0xD;
	__asm        mov    dword ptr [ebp-0x28], 0x10;
	__asm        jmp    near ptr 0x0044C80B;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        sub    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        sub    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0044C83A;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ptGraphicIconPosition.x, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ptGraphicIconPosition.y, eax;
	__asm        jmp    near ptr 0x0044C84B;

	__asm        jmp    near ptr 0x0044C850;
// LINE 1039:
	__asm        cmp    lPassengerIndex, 0xFFFFFFFF;
	__asm        je     _T3c9;
// LINE 1040:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, G_uheli;
	__asm        sub    eax, [ecx+0x154];
	__asm        cmp    eax, 0x50000;
	__asm        jle    _T35a;
// LINE 1041:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1043:
	__asm        jmp    _T388;
// LINE 1045:
_T35a:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1047:
_T388:
	__asm        lea    eax, ptGraphicIconPosition.y;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1048:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1050:
	__asm        jmp    _T40f;
// LINE 1051:
_T3c9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 1052:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T3e9;

	__asm        jmp    _T3ee;
_T3e9:
	__asm        jmp    _T40f;
_T3ee:
	__asm        jmp    _T3fd;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T40f;
// LINE 1053:
_T3fd:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1056:
// Block end:
_T40f:
	__asm        mov    eax, 1;
	__asm        jmp    _T419;
// LINE 1057:
_T419:
}

// FUNCTION: COPTER_D 0x0044c967
void PassengerWindow::DrawPassengers() {
	class MRect rectDestination;
	int32_t i;
	struct tagHeliPassengerData* tempHeliPassengerData;
	int32_t nCurrentSeat;
	class MRect rectSource;
	int32_t bSeats[16];

// LINE 1064:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1067:
	__asm        jmp    near ptr 0x0044C985;

	__asm        jmp    near ptr 0x0044C98A;
// LINE 1068:
	__asm        jmp    near ptr 0x0044C98F;

	__asm        jmp    near ptr 0x0044C994;
// LINE 1071:
	__asm        mov    i, 0;
	__asm        jmp    _T3c;
_T39:
	__asm        inc    i;
_T3c:
	__asm        cmp    i, 0x10;
	__asm        jge    _T56;
// LINE 1072:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jmp    _T39;
// LINE 1074:
_T56:
	__asm        mov    i, 0;
	__asm        jmp    _T65;
_T62:
	__asm        inc    i;
_T65:
	__asm        cmp    i, 0x10;
	__asm        jge    _T1b6;
// LINE 1075:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    _T8b;
// LINE 1076:
	__asm        jmp    _T62;
// LINE 1077:
_T8b:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1079:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1080:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1081:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1083:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    _T1a6;
// LINE 1084:
	__asm        jmp    near ptr 0x0044CA84;

	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    _T141;
// LINE 1085:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, rectDestination.top;
	__asm        add    eax, rectSource.top;
	__asm        mov    rectSource.bottom, eax;
// LINE 1086:
_T141:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x94];
	__asm        cmp    [eax+ecx+0x28], edx;
	__asm        jne    _T170;
// LINE 1087:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1089:
_T170:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1092:
_T1a6:
	__asm        mov    eax, nCurrentSeat;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 1;
// LINE 1093:
	__asm        jmp    _T62;
// LINE 1096:
_T1b6:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1097:
	__asm        mov    nCurrentSeat, 0;
	__asm        jmp    _T1d5;
_T1d2:
	__asm        inc    nCurrentSeat;
_T1d5:
	__asm        mov    eax, tempHeliPassengerData;
	__asm        mov    ecx, nCurrentSeat;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    _T2a2;
// LINE 1098:
	__asm        mov    eax, nCurrentSeat;
	__asm        cmp    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jne    _T29d;
// LINE 1099:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1100:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    _T29d;
// LINE 1102:
	__asm        jmp    near ptr 0x0044CBAA;

	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    _T267;
// LINE 1103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, rectDestination.top;
	__asm        add    eax, rectSource.top;
	__asm        mov    rectSource.bottom, eax;
// LINE 1105:
_T267:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1108:
_T29d:
	__asm        jmp    _T1d2;
// LINE 1109:
_T2a2:
	__asm        mov    eax, tempHeliPassengerData;
	__asm        push   eax;
	__asm        call   HeliPassengerClearChanged;
	__asm        add    esp, 4;
// LINE 1110:
	__asm        jmp    near ptr 0x0044CC1A;
}

// FUNCTION: COPTER_D 0x0044cc1f
void PassengerWindow::GetRectOfPassengerGraphic(int32_t face, int32_t nPassengerExpression, class MRect& rectPosition) {
// LINE 1129:
	__asm        mov    eax, face;
	__asm        lea    eax, [eax+eax*2+3];
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx], eax;
// LINE 1130:
	__asm        mov    eax, nPassengerExpression;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+4], eax;
// LINE 1131:
	__asm        mov    eax, rectPosition;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x1B;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+8], eax;
// LINE 1132:
	__asm        mov    eax, rectPosition;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, 0x21;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+0xC], eax;
// LINE 1133:
	__asm        jmp    near ptr 0x0044CC6C;
}

// FUNCTION: COPTER_D 0x0044cc73
int32_t PassengerWindow::DoesWindowNeedUpdating() {
// LINE 1146:
	__asm        jmp    near ptr 0x0044CC84;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T56;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T56;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T56;

	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerHasChanged;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T60;
_T56:
	__asm        mov    eax, 1;
	__asm        jmp    _T62;
_T60:
	__asm        xor    eax, eax;
_T62:
	__asm        jmp    near ptr 0x0044CCDA;
// LINE 1147:
}

// FUNCTION: COPTER_D 0x0044ccdf
void PassengerWindow::MoveToUpPosition() {
// LINE 1155:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T21;
// LINE 1156:
	__asm        jmp    _Ted;
// LINE 1158:
_T21:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x0044CD1F;
// LINE 1159:
	__asm        jmp    near ptr 0x0044CD24;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T5a;

	__asm        jmp    _Tdb;
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T83;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_T83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb9;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_Tb9:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
// LINE 1160:
_Tdb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 1;
// LINE 1161:
	__asm        jmp    _Ted;
_Ted:
}

// FUNCTION: COPTER_D 0x0044cdd1
void PassengerWindow::MoveToDownPosition() {
// LINE 1168:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     _T21;
// LINE 1169:
	__asm        jmp    _Ted;
// LINE 1171:
_T21:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x0044CE11;
// LINE 1172:
	__asm        jmp    near ptr 0x0044CE16;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     _T5a;

	__asm        jmp    _Tdb;
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T83;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_T83:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Tb9;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;

	__asm        jmp    _Td6;
_Tb9:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
// LINE 1173:
_Tdb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xFFFFFFFF;
// LINE 1174:
	__asm        jmp    _Ted;
_Ted:
}

// FUNCTION: COPTER_D 0x0044cec3
void PassengerWindow::TogglePosition() {
// LINE 1181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _T2c;
// LINE 1182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1183:
	__asm        jmp    _T3a;
// LINE 1184:
_T2c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1185:
_T3a:
	__asm        jmp    near ptr 0x0044CF02;
}

// FUNCTION: COPTER_D 0x0044cf07
long PassengerWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lPassengerID;
	class MRect rectButtonPositionUp;
	class MRect rectButtonPositionDown;

// LINE 1193:
	__asm        jmp    near ptr 0x0044CF18;

	__asm        mov    rectButtonPositionUp.left, 0xAD;
	__asm        mov    rectButtonPositionUp.top, 4;
	__asm        mov    rectButtonPositionUp.right, 0xBA;
	__asm        mov    rectButtonPositionUp.bottom, 0xE;
	__asm        jmp    near ptr 0x0044CF39;
// LINE 1194:
	__asm        jmp    near ptr 0x0044CF3E;

	__asm        mov    rectButtonPositionDown.left, 0xAD;
	__asm        mov    rectButtonPositionDown.top, 0xE;
	__asm        mov    rectButtonPositionDown.right, 0xBA;
	__asm        mov    rectButtonPositionDown.bottom, 0x1A;
	__asm        jmp    near ptr 0x0044CF5F;
// LINE 1197:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.left, eax;
	__asm        jg     _T8d;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.top, eax;
	__asm        jg     _T8d;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.right, eax;
	__asm        jle    _T8d;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.bottom, eax;
	__asm        jle    _T8d;

	__asm        jmp    _T92;
_T8d:
	__asm        jmp    _Tc1;
_T92:
	__asm        jmp    _Ta1;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _Tc1;
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    _Tc1;
// LINE 1198:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1199:
	__asm        jmp    _T1ab;
_Tc1:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.left, eax;
	__asm        jg     _Tf6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.top, eax;
	__asm        jg     _Tf6;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.right, eax;
	__asm        jle    _Tf6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.bottom, eax;
	__asm        jle    _Tf6;

	__asm        jmp    _Tfb;
_Tf6:
	__asm        jmp    _T12a;
_Tfb:
	__asm        jmp    _T10a;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T12a;
_T10a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T12a;
// LINE 1200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1201:
	__asm        jmp    _T1ab;
_T12a:
	__asm        lea    eax, lPassengerID;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DoesPositionHitPassenger;
	__asm        test   eax, eax;
	__asm        je     _T1ab;
// LINE 1203:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T15e;

	__asm        jmp    _T1ab;

	__asm        jmp    _T15e;
_T15e:
	__asm        jmp    _T16d;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T1ab;
_T16d:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     _T1ab;
// LINE 1205:
	__asm        mov    eax, lPassengerID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 1206:
	__asm        mov    eax, nCursorX;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 1207:
	__asm        mov    eax, nCursorY;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 1214:
_T1ab:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D0BC;
// LINE 1215:
}

// FUNCTION: COPTER_D 0x0044d0c3
long PassengerWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1222:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 1223:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1225:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     _T92;
// LINE 1226:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        jne    _T85;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        call   GetOutOfHeli;
	__asm        add    esp, 4;
// LINE 1228:
_T85:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 1231:
_T92:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D15F;
// LINE 1232:
}

// FUNCTION: COPTER_D 0x0044d166
long PassengerWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1239:
	__asm        mov    eax, nCursorX;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 1240:
	__asm        mov    eax, nCursorY;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 1241:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D194;
// LINE 1242:
}

// FUNCTION: COPTER_D 0x0044d19b
int32_t PassengerWindow::DoesPositionHitPassenger(long nCursorX, long nCursorY, long& lPassengerID) {
	int32_t i;
	int32_t nCurrentSeat;
	struct tagHeliPassengerData* tempHeliPassengerData;
	class MRect rectCurrent;

// LINE 1251:
	__asm        jmp    near ptr 0x0044D1AC;

	__asm        jmp    near ptr 0x0044D1B1;
// LINE 1253:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1255:
	__asm        mov    i, 0;
	__asm        jmp    _T32;
_T2f:
	__asm        inc    i;
_T32:
	__asm        cmp    i, 0x10;
	__asm        jge    _T11b;
// LINE 1256:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    _T58;
// LINE 1257:
	__asm        jmp    _T2f;
// LINE 1258:
_T58:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1259:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        add    eax, 0xE;
	__asm        mov    rectCurrent.left, eax;
// LINE 1260:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        add    ecx, 6;
	__asm        mov    rectCurrent.top, ecx;
// LINE 1261:
	__asm        mov    eax, rectCurrent.left;
	__asm        add    eax, 0x1B;
	__asm        mov    rectCurrent.right, eax;
// LINE 1262:
	__asm        mov    eax, rectCurrent.top;
	__asm        add    eax, 0x21;
	__asm        mov    rectCurrent.bottom, eax;
// LINE 1263:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.left, eax;
	__asm        jg     _Te3;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.top, eax;
	__asm        jg     _Te3;

	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.right, eax;
	__asm        jle    _Te3;

	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.bottom, eax;
	__asm        jle    _Te3;

	__asm        jmp    _Te8;
_Te3:
	__asm        jmp    _T116;
_Te8:
	__asm        jmp    _Tf7;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T116;
// LINE 1264:
_Tf7:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x28];
	__asm        mov    ecx, lPassengerID;
	__asm        mov    [ecx], eax;
// LINE 1265:
	__asm        mov    eax, 1;
	__asm        jmp    _T122;
// LINE 1267:
_T116:
	__asm        jmp    _T2f;
// LINE 1268:
_T11b:
	__asm        xor    eax, eax;
	__asm        jmp    _T122;
// LINE 1269:
_T122:
}

// FUNCTION: COPTER_D 0x0044d2c4
void MapWindow::MapWindow(class MRect& rectNewPosition, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_MAP_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::MFont;
	__asm        mov    dword ptr [ebp-4], 6;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        mov    [ebp-8], eax;
_T88:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _Ta2;

	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    _T88;
_Ta2:
	__asm        jmp    near ptr 0x0044D36B;

	__asm        jmp    near ptr 0x0044D370;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0x1E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0x7E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0xAF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0x8B;
	__asm        jmp    near ptr 0x0044D3A9;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F8D8;
// LINE 1308:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x36;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0x45;
	__asm        jmp    near ptr 0x0044D3EB;
// LINE 1309:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0x36;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0x45;
	__asm        jmp    near ptr 0x0044D424;
// LINE 1310:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0x49;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0x58;
	__asm        jmp    near ptr 0x0044D45D;
// LINE 1311:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDC], 0x49;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE0], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE4], 0x58;
	__asm        jmp    near ptr 0x0044D496;
// LINE 1312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEC], 0x5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF4], 0x6B;
	__asm        jmp    near ptr 0x0044D4CF;
// LINE 1313:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFC], 0x5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x100], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x104], 0x6B;
	__asm        jmp    near ptr 0x0044D508;
// LINE 1315:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 1316:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::SetFontCharacteristics;
// LINE 1317:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 1319:
	__asm        jmp    near ptr 0x0044D540;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044d54a
void MapWindow::~MapWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F8D8;
// LINE 1326:
	__asm        mov    ecx, this;
	__asm        call   MapWindow::DestroyImage;
// LINE 1327:
	__asm        jmp    near ptr 0x0044D56C;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::~MFont;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044d587
int32_t MapWindow::Initialize() {
// LINE 1338:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 1339:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0044D5AD;
// LINE 1340:
}

// FUNCTION: COPTER_D 0x0044d5b2
void MapWindow::InitializeCachedSettings() {
// LINE 1347:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
// LINE 1348:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFF;
// LINE 1350:
	__asm        jmp    near ptr 0x0044D5E4;
}

// FUNCTION: COPTER_D 0x0044d5e9
int32_t MapWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szFullPath[260];

// LINE 1362:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 1363:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T54;
// LINE 1364:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 1365:
_T54:
	__asm        mov    byte ptr [ebp-0x108], 0x6F;
	__asm        mov    byte ptr [ebp-0x107], 0xDA;
	__asm        mov    byte ptr [ebp-0x106], 0xFF;
	__asm        jmp    near ptr 0x0044D657;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0044D67A;
// LINE 1366:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    _T107;
// LINE 1367:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_MAP_WINDOW_BUTTON_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1368:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _Tfa;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T107;
_Tfa:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1370:
_T107:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1371:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x0044D712;
// LINE 1372:
}

// FUNCTION: COPTER_D 0x0044d719
void MapWindow::DestroyImage() {
// LINE 1382:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T5a;
// LINE 1383:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044D764;

	__asm        jmp    _T50;
// LINE 1384:
_T50:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1386:
_T5a:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1387:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T75;

	__asm        jmp    _T7a;
_T75:
	__asm        jmp    _Ta8;
_T7a:
	__asm        jmp    _T89;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta8;
// LINE 1388:
_T89:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 1391:
_Ta8:
	__asm        jmp    near ptr 0x0044D7C6;
}

// FUNCTION: COPTER_D 0x0044d7cb
int32_t MapWindow::ComposeSelf() {
	struct MISSION_DATA* md;
	static const int32_t lFrameCounter = { /* <data@0x00598fc8> */ };
	long lNewMissionID;

// LINE 1405:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T20;
// LINE 1406:
	__asm        xor    eax, eax;
	__asm        jmp    _T17c;
// LINE 1408:
_T20:
	__asm        inc    lFrameCounter;
// LINE 1409:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 1;
	__asm        je     _T7a;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
// LINE 1411:
	__asm        jmp    near ptr 0x0044D813;

	__asm        jmp    near ptr 0x0044D818;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   S3MapBlit;
	__asm        add    esp, 8;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 1414:
_T7a:
	__asm        mov    eax, lFrameCounter;
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    _T12a;
// LINE 1415:
	__asm        call   S3MissionGetCurr;
	__asm        mov    md, eax;
	__asm        cmp    md, 0;
	__asm        je     _Ta9;
// LINE 1416:
	__asm        mov    eax, md;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lNewMissionID, eax;
// LINE 1418:
	__asm        jmp    _Tb0;
// LINE 1419:
_Ta9:
	__asm        mov    lNewMissionID, 0xFFFFFFFF;
// LINE 1421:
_Tb0:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewMissionID;
	__asm        cmp    [eax+0x88], ecx;
	__asm        je     _T12a;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0x31;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 1424:
	__asm        cmp    md, 0;
	__asm        je     _T11e;
// LINE 1425:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 1426:
_T11e:
	__asm        mov    eax, lNewMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 1431:
_T12a:
	__asm        jmp    near ptr 0x0044D8FA;

	__asm        jmp    near ptr 0x0044D8FF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1433:
	__asm        mov    eax, 1;
	__asm        jmp    _T17c;
// LINE 1434:
_T17c:
}

// FUNCTION: COPTER_D 0x0044d94c
void MapWindow::DrawButton(int32_t nButton, int32_t nState) {
	class MPoint ptDestination;
	class MRect rectSource;

// LINE 1441:
	__asm        jmp    near ptr 0x0044D95D;

	__asm        jmp    near ptr 0x0044D962;
// LINE 1442:
	__asm        jmp    near ptr 0x0044D967;

	__asm        jmp    near ptr 0x0044D96C;
// LINE 1445:
	__asm        cmp    nButton, 0;
	__asm        jne    _T8e;
// LINE 1446:
	__asm        mov    ptDestination.x, 9;
// LINE 1447:
	__asm        mov    ptDestination.y, 0x36;
// LINE 1448:
	__asm        cmp    nState, 0;
	__asm        je     _T68;

	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044D9AF;

	__asm        jmp    _T89;
_T68:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    _T89;
// LINE 1450:
_T89:
	__asm        jmp    _T2af;
_T8e:
	__asm        cmp    nButton, 1;
	__asm        jne    _Tfc;
// LINE 1451:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1452:
	__asm        mov    ptDestination.y, 0x36;
// LINE 1453:
	__asm        cmp    nState, 0;
	__asm        je     _Td6;

	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044DA1D;

	__asm        jmp    _Tf7;
_Td6:
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    _Tf7;
// LINE 1455:
_Tf7:
	__asm        jmp    _T2af;
_Tfc:
	__asm        cmp    nButton, 2;
	__asm        jne    _T16a;
// LINE 1456:
	__asm        mov    ptDestination.x, 9;
// LINE 1457:
	__asm        mov    ptDestination.y, 0x49;
// LINE 1458:
	__asm        cmp    nState, 0;
	__asm        je     _T144;

	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DA8B;

	__asm        jmp    _T165;
_T144:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    _T165;
// LINE 1460:
_T165:
	__asm        jmp    _T2af;
_T16a:
	__asm        cmp    nButton, 3;
	__asm        jne    _T1d8;
// LINE 1461:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1462:
	__asm        mov    ptDestination.y, 0x49;
// LINE 1463:
	__asm        cmp    nState, 0;
	__asm        je     _T1b2;

	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DAF9;

	__asm        jmp    _T1d3;
_T1b2:
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    _T1d3;
// LINE 1465:
_T1d3:
	__asm        jmp    _T2af;
_T1d8:
	__asm        cmp    nButton, 4;
	__asm        jne    _T246;
// LINE 1466:
	__asm        mov    ptDestination.x, 9;
// LINE 1467:
	__asm        mov    ptDestination.y, 0x5C;
// LINE 1468:
	__asm        cmp    nState, 0;
	__asm        je     _T220;

	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DB67;

	__asm        jmp    _T241;
_T220:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    _T241;
// LINE 1470:
_T241:
	__asm        jmp    _T2af;
_T246:
	__asm        cmp    nButton, 5;
	__asm        jne    _T2af;
// LINE 1471:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1472:
	__asm        mov    ptDestination.y, 0x5C;
// LINE 1473:
	__asm        cmp    nState, 0;
	__asm        je     _T28e;

	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DBD5;

	__asm        jmp    _T2af;
_T28e:
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    _T2af;
// LINE 1475:
_T2af:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1476:
	__asm        jmp    near ptr 0x0044DC20;
}

// FUNCTION: COPTER_D 0x0044dc27
long MapWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long __formal) {
	int32_t i;

// LINE 1490:
	__asm        mov    eax, nCursorX;
	__asm        cmp    S_bordermin.x, eax;
	__asm        jg     _Tb6;

	__asm        mov    eax, nCursorX;
	__asm        cmp    S_bordermax.x, eax;
	__asm        jl     _Tb6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    S_bordermin.y, eax;
	__asm        jg     _Tb6;

	__asm        mov    eax, nCursorY;
	__asm        cmp    S_bordermax.y, eax;
	__asm        jl     _Tb6;
// LINE 1492:
	__asm        mov    eax, nCursorY;
	__asm        sub    eax, S_bordermin.y;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        sub    eax, S_bordermin.x;
	__asm        push   eax;
	__asm        call   S3MapCursorDown;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jl     _Tb1;
// LINE 1494:
	__asm        jmp    near ptr 0x0044DCA9;

	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0044DCBA;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1496:
_Tb1:
	__asm        jmp    _T2f1;
_Tb6:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE8], ecx;
	__asm        jg     _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xEC], ecx;
	__asm        jg     _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF0], ecx;
	__asm        jle    _T103;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xF4], ecx;
	__asm        jle    _T103;

	__asm        jmp    _T108;
_T103:
	__asm        jmp    _T168;
_T108:
	__asm        jmp    _T117;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T168;
// LINE 1497:
_T117:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T133;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        jmp    _T13d;
_T133:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1498:
_T13d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1499:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        call   S3MapCommandCurrentMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1501:
	__asm        jmp    _T2f1;
_T168:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF8], ecx;
	__asm        jg     _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xFC], ecx;
	__asm        jg     _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x100], ecx;
	__asm        jle    _T1b5;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x104], ecx;
	__asm        jle    _T1b5;

	__asm        jmp    _T1ba;
_T1b5:
	__asm        jmp    _T21a;
_T1ba:
	__asm        jmp    _T1c9;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T21a;
// LINE 1502:
_T1c9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    _T1e5;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 1;
	__asm        jmp    _T1ef;
_T1e5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1503:
_T1ef:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1504:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        call   S3MapCommandOtherMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1506:
	__asm        jmp    _T2f1;
// LINE 1507:
_T21a:
	__asm        mov    i, 0;
	__asm        jmp    _T229;
_T226:
	__asm        inc    i;
_T229:
	__asm        cmp    i, 4;
	__asm        jge    _T2f1;
// LINE 1508:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xA8], edx;
	__asm        jg     _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xAC], edx;
	__asm        jg     _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xB0], edx;
	__asm        jle    _T29c;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xB4], edx;
	__asm        jle    _T29c;

	__asm        jmp    _T2a1;
_T29c:
	__asm        jmp    _T2ec;
_T2a1:
	__asm        jmp    _T2b0;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T2ec;
// LINE 1509:
_T2b0:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1510:
	__asm        push   1;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1511:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 1512:
	__asm        mov    eax, 1;
	__asm        jmp    _T2fb;
// LINE 1514:
_T2ec:
	__asm        jmp    _T226;
// LINE 1516:
_T2f1:
	__asm        mov    eax, 1;
	__asm        jmp    _T2fb;
// LINE 1517:
_T2fb:
}

// FUNCTION: COPTER_D 0x0044df29
long MapWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long __formal) {
// LINE 1528:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T27d;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T27d;
// LINE 1529:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jl     _T27d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 4;
	__asm        jge    _T27d;
// LINE 1531:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _Te0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jg     _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _Tc2;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    _Tc2;

	__asm        jmp    _Tc7;
_Tc2:
	__asm        jmp    _Te0;
_Tc7:
	__asm        jmp    _Td6;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Te0;
// LINE 1532:
_Td6:
	__asm        call   S3MapCommandZoomOut;
// LINE 1533:
	__asm        jmp    _T24c;
_Te0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    _T15b;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jg     _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xBC], ecx;
	__asm        jg     _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC0], ecx;
	__asm        jle    _T13d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jle    _T13d;

	__asm        jmp    _T142;
_T13d:
	__asm        jmp    _T15b;
_T142:
	__asm        jmp    _T151;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T15b;
// LINE 1534:
_T151:
	__asm        call   S3MapCommandZoomIn;
// LINE 1535:
	__asm        jmp    _T24c;
_T15b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 2;
	__asm        jne    _T1d6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC8], ecx;
	__asm        jg     _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xCC], ecx;
	__asm        jg     _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD0], ecx;
	__asm        jle    _T1b8;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jle    _T1b8;

	__asm        jmp    _T1bd;
_T1b8:
	__asm        jmp    _T1d6;
_T1bd:
	__asm        jmp    _T1cc;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1d6;
// LINE 1536:
_T1cc:
	__asm        call   S3MapCommandPreviousMission;
// LINE 1537:
	__asm        jmp    _T24c;
_T1d6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 3;
	__asm        jne    _T24c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD8], ecx;
	__asm        jg     _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jg     _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE0], ecx;
	__asm        jle    _T233;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jle    _T233;

	__asm        jmp    _T238;
_T233:
	__asm        jmp    _T24c;
_T238:
	__asm        jmp    _T247;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T24c;
// LINE 1538:
_T247:
	__asm        call   S3MapCommandNextMission;
// LINE 1539:
_T24c:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1540:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 1541:
	__asm        mov    eax, 1;
	__asm        jmp    _T287;
// LINE 1550:
_T27d:
	__asm        mov    eax, 1;
	__asm        jmp    _T287;
// LINE 1551:
_T287:
}

// FUNCTION: COPTER_D 0x0044e1b7
int32_t MapWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lMessageData;

// LINE 1560:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T49;

	__asm        cmp    lMessage, 0x10003;
	__asm        jne    _T49;
// LINE 1561:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lMessageData, eax;
// LINE 1562:
	__asm        cmp    lMessageData, 1;
	__asm        jne    _T49;
// LINE 1563:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        call   AutomobileClass::S3AutoMessage;
	__asm        add    esp, 8;
// LINE 1565:
_T49:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044E20A;
// LINE 1566:
}

// FUNCTION: COPTER_D 0x0044e211
void MapWindow::CreateAutoMessageSelectionPopupWindow(int32_t nAutoID, int32_t nType, class MPoint& ptPosition) {
	int32_t StringID;
	class PopupMenuWindow* tempPopupMenuWindow;

// LINE 1575:
	__asm        mov    eax, ptPosition;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, ptPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1578:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta9;

	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        inc    eax;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0044E279;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0044E296;

	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::screenWindow;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    _Tb0;
_Ta9:
	__asm        mov    tempPopupMenuWindow, 0;
// LINE 1579:
_Tb0:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1580:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 1582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    StringID, eax;
// LINE 1583:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, StringID;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1584:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x60;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1586:
	__asm        jmp    near ptr 0x0044E326;
}

// FUNCTION: COPTER_D 0x0044e32d
int32_t MapWindow::GetStringIDForVehicleName(int32_t nAutoID) {
	long lCarModel;

// LINE 1595:
	__asm        cmp    nAutoID, 0x46;
	__asm        jl     _T1d;
// LINE 1596:
	__asm        xor    eax, eax;
	__asm        jmp    _T116;
// LINE 1598:
_T1d:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, cars[0][eax*4];
	__asm        mov    eax, [eax+4];
	__asm        mov    lCarModel, eax;
	__asm        jmp    near ptr 0x0044E35F;
// LINE 1604:
	__asm        cmp    lCarModel, 0x7A;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x7D;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x7E;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12A;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12B;
	__asm        je     _T77;

	__asm        cmp    lCarModel, 0x12C;
	__asm        jne    _Ta4;
// LINE 1606:
_T77:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, cars[0][eax*4];
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     _T95;
// LINE 1607:
	__asm        mov    eax, 0x5B;
	__asm        jmp    _T116;
// LINE 1608:
_T95:
	__asm        mov    eax, 0x5A;
	__asm        jmp    _T116;
// LINE 1610:
	__asm        jmp    _T10f;
_Ta4:
	__asm        cmp    lCarModel, 0x11E;
	__asm        jne    _Tc0;
// LINE 1611:
	__asm        mov    eax, 0x5C;
	__asm        jmp    _T116;
// LINE 1612:
	__asm        jmp    _T10f;
_Tc0:
	__asm        cmp    lCarModel, 0x11F;
	__asm        jne    _Tdc;
// LINE 1613:
	__asm        mov    eax, 0x5E;
	__asm        jmp    _T116;
// LINE 1614:
	__asm        jmp    _T10f;
_Tdc:
	__asm        cmp    lCarModel, 0x11C;
	__asm        jne    _Tf8;
// LINE 1615:
	__asm        mov    eax, 0x5F;
	__asm        jmp    _T116;
// LINE 1616:
	__asm        jmp    _T10f;
_Tf8:
	__asm        cmp    lCarModel, 0x11D;
	__asm        jne    _T10f;
// LINE 1617:
	__asm        mov    eax, 0x5D;
	__asm        jmp    _T116;
// LINE 1618:
_T10f:
	__asm        xor    eax, eax;
	__asm        jmp    _T116;
// LINE 1619:
_T116:
}

// FUNCTION: COPTER_D 0x0044e44a
void EquipmentPanelWindow::EquipmentPanelWindow(char * szImageFileName, class MRect& rectNewPosition, long lNewID, struct CommandSystem* myNewCommandSystem, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner) {

	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    dword ptr [ebp-4], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        mov    [ebp-8], eax;
_T3c:
	__asm        dec    dword ptr [ebp-4];
	__asm        js     _T56;

	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    _T3c;
_T56:
	__asm        jmp    near ptr 0x0044E4A5;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, myNewCommandSystem;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F9B0;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T19e;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x77;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x18;
	__asm        jmp    near ptr 0x0044E538;
// LINE 1670:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x77;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x27;
	__asm        jmp    near ptr 0x0044E571;
// LINE 1671:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0x62;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0x1A;
	__asm        jmp    near ptr 0x0044E5AA;
// LINE 1672:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0xE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x20;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x24;
	__asm        jmp    near ptr 0x0044E5E3;
// LINE 1674:
	__asm        jmp    _T298;
_T19e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T1e0;
// LINE 1675:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x28;
	__asm        jmp    near ptr 0x0044E625;
// LINE 1677:
	__asm        jmp    _T298;
_T1e0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T25b;
// LINE 1678:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x19;
	__asm        jmp    near ptr 0x0044E667;
// LINE 1679:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x19;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x29;
	__asm        jmp    near ptr 0x0044E6A0;
// LINE 1681:
	__asm        jmp    _T298;
_T25b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T298;
// LINE 1682:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x28;
	__asm        jmp    _T298;
// LINE 1684:
_T298:
	__asm        jmp    near ptr 0x0044E6E7;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044e6f1
void EquipmentPanelWindow::~EquipmentPanelWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F9B0;
// LINE 1691:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DestroyImage;
// LINE 1692:
	__asm        jmp    near ptr 0x0044E713;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044e720
int32_t EquipmentPanelWindow::Initialize() {
// LINE 1700:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1701:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
	__asm        jmp    near ptr 0x0044E746;
// LINE 1702:
}

// FUNCTION: COPTER_D 0x0044e74b
void EquipmentPanelWindow::InitializeCachedSettings() {
// LINE 1708:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 1710:
	__asm        jmp    near ptr 0x0044E776;
}

// FUNCTION: COPTER_D 0x0044e77b
int32_t EquipmentPanelWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szPath[260];

// LINE 1720:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _Ta1;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    _Ta1;
// LINE 1722:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_BUCKET_WATER_GUAGE_IMAGE;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1723:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T91;

	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC], eax;
	__asm        jmp    _Ta1;
_T91:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 1726:
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        jne    _T1a1;
// LINE 1727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _Te2;
// LINE 1728:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_0;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1729:
	__asm        jmp    _T129;
_Te2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T110;
// LINE 1730:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_2;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1731:
	__asm        jmp    _T129;
// LINE 1732:
_T110:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_EQUIPMENT_BUTTON_IMAGE_1;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1733:
_T129:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     _T16c;

	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T17c;
_T16c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 1734:
_T17c:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+8];
// LINE 1736:
_T1a1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1738:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
	__asm        jmp    near ptr 0x0044E944;
// LINE 1739:
}

// FUNCTION: COPTER_D 0x0044e94b
void EquipmentPanelWindow::DestroyImage() {
// LINE 1746:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     _T63;
// LINE 1747:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044E99C;

	__asm        jmp    _T56;
// LINE 1748:
_T56:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 1750:
_T63:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _Tba;
// LINE 1751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tad;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044E9F3;

	__asm        jmp    _Tad;
// LINE 1752:
_Tad:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 1754:
_Tba:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1755:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _Td5;

	__asm        jmp    _Tda;
_Td5:
	__asm        jmp    _T108;
_Tda:
	__asm        jmp    _Te9;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T108;
// LINE 1756:
_Te9:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1757:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1759:
_T108:
	__asm        jmp    near ptr 0x0044EA58;
}

// FUNCTION: COPTER_D 0x0044ea5d
int32_t EquipmentPanelWindow::DrawSelf() {
// LINE 1766:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T26;
// LINE 1767:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawBucketWaterGuage;
// LINE 1768:
	__asm        jmp    _T3b;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T3b;
// LINE 1769:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawTeargasUsage;
// LINE 1770:
_T3b:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044EAA2;
// LINE 1771:
}

// FUNCTION: COPTER_D 0x0044eaa7
int32_t EquipmentPanelWindow::DoesWindowNeedUpdating() {
	static const long lFrameCounter = { /* <data@0x00598fdc> */ };

// LINE 1780:
	__asm        test   reinterpret_cast<uint8_t>(lFrameCounter), 4;
	__asm        je     _Tab;
// LINE 1781:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T76;
// LINE 1782:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   S_helitype_data[0].max_load[ecx*8];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xC4];
	__asm        je     _T6a;

	__asm        mov    eax, 1;
	__asm        jmp    _T6c;
_T6a:
	__asm        xor    eax, eax;
_T6c:
	__asm        jmp    _Tbe;
// LINE 1783:
	__asm        jmp    _Tab;
_T76:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _Tab;
// LINE 1784:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        cmp    [eax+0x54], ecx;
	__asm        je     _Ta4;

	__asm        mov    eax, 1;
	__asm        jmp    _Ta6;
_Ta4:
	__asm        xor    eax, eax;
_Ta6:
	__asm        jmp    _Tbe;
// LINE 1786:
_Tab:
	__asm        inc    lFrameCounter;
// LINE 1788:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DoesWindowNeedUpdating;
	__asm        jmp    _Tbe;
// LINE 1789:
_Tbe:
}

// FUNCTION: COPTER_D 0x0044eb6a
void EquipmentPanelWindow::DrawButton(int32_t nButton, int32_t nState) {
	class MPoint ptDestination;
	class MRect rectSource;

// LINE 1797:
	__asm        jmp    near ptr 0x0044EB7B;

	__asm        jmp    near ptr 0x0044EB80;
// LINE 1798:
	__asm        jmp    near ptr 0x0044EB85;

	__asm        jmp    near ptr 0x0044EB8A;
// LINE 1800:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T1fd;
// LINE 1801:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _Ta1;
// LINE 1802:
	__asm        mov    ptDestination.x, 0x66;
// LINE 1803:
	__asm        mov    ptDestination.y, 0xA;
// LINE 1804:
	__asm        cmp    nState, 0;
	__asm        jne    _T7b;
// LINE 1805:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EBE0;
// LINE 1806:
	__asm        jmp    _T9c;
// LINE 1807:
_T7b:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    _T9c;
// LINE 1809:
_T9c:
	__asm        jmp    _T1f8;
_Ta1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T115;
// LINE 1810:
	__asm        mov    ptDestination.x, 0x66;
// LINE 1811:
	__asm        mov    ptDestination.y, 0x18;
// LINE 1812:
	__asm        cmp    nState, 0;
	__asm        jne    _Tef;
// LINE 1813:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EC54;
// LINE 1814:
	__asm        jmp    _T110;
// LINE 1815:
_Tef:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    _T110;
// LINE 1817:
_T110:
	__asm        jmp    _T1f8;
_T115:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _T189;
// LINE 1818:
	__asm        mov    ptDestination.x, 0x4D;
// LINE 1819:
	__asm        mov    ptDestination.y, 5;
// LINE 1820:
	__asm        cmp    nState, 0;
	__asm        jne    _T163;
// LINE 1821:
	__asm        mov    rectSource.left, 0x22;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x36;
	__asm        mov    rectSource.bottom, 0x15;
	__asm        jmp    near ptr 0x0044ECC8;
// LINE 1822:
	__asm        jmp    _T184;
// LINE 1823:
_T163:
	__asm        mov    rectSource.left, 0x36;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x4A;
	__asm        mov    rectSource.bottom, 0x14;
	__asm        jmp    _T184;
// LINE 1825:
_T184:
	__asm        jmp    _T1f8;
_T189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T1f8;
// LINE 1826:
	__asm        mov    ptDestination.x, 0xB;
// LINE 1827:
	__asm        mov    ptDestination.y, 0xF;
// LINE 1828:
	__asm        cmp    nState, 0;
	__asm        jne    _T1d7;
// LINE 1829:
	__asm        mov    rectSource.left, 0x22;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x36;
	__asm        mov    rectSource.bottom, 0x15;
	__asm        jmp    near ptr 0x0044ED3C;
// LINE 1830:
	__asm        jmp    _T1f8;
// LINE 1831:
_T1d7:
	__asm        mov    rectSource.left, 0x36;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x4A;
	__asm        mov    rectSource.bottom, 0x14;
	__asm        jmp    _T1f8;
// LINE 1834:
_T1f8:
	__asm        jmp    _T36b;
_T1fd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T2f2;
// LINE 1835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T27e;
// LINE 1836:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1837:
	__asm        mov    ptDestination.y, 0xB;
// LINE 1838:
	__asm        cmp    nState, 0;
	__asm        jne    _T258;
// LINE 1839:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EDBD;
// LINE 1840:
	__asm        jmp    _T279;
// LINE 1841:
_T258:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    _T279;
// LINE 1843:
_T279:
	__asm        jmp    _T2ed;
_T27e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T2ed;
// LINE 1844:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1845:
	__asm        mov    ptDestination.y, 0x19;
// LINE 1846:
	__asm        cmp    nState, 0;
	__asm        jne    _T2cc;
// LINE 1847:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EE31;
// LINE 1848:
	__asm        jmp    _T2ed;
// LINE 1849:
_T2cc:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    _T2ed;
// LINE 1852:
_T2ed:
	__asm        jmp    _T36b;
_T2f2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        je     _T30c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T36b;
// LINE 1853:
_T30c:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1854:
	__asm        mov    ptDestination.y, 0xC;
// LINE 1855:
	__asm        cmp    nState, 0;
	__asm        jne    _T34a;
// LINE 1856:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x18;
	__asm        jmp    near ptr 0x0044EEAF;
// LINE 1857:
	__asm        jmp    _T36b;
// LINE 1858:
_T34a:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x18;
	__asm        jmp    _T36b;
// LINE 1860:
_T36b:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1861:
	__asm        jmp    near ptr 0x0044EF00;
}

// FUNCTION: COPTER_D 0x0044ef07
void EquipmentPanelWindow::DrawBucketWaterGuage() {
	const int32_t iGuageEnd;
	int32_t nXPosition;
	int32_t i;
	const int32_t nYPosition;
	int32_t iLitEnd;

// LINE 1869:
	__asm        mov    nXPosition, 0x10;
// LINE 1870:
	__asm        mov    iGuageEnd, 0xB;
	__asm        mov    nYPosition, 0x2B;
// LINE 1872:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   S_helitype_data[0].max_load[ecx*8];
	__asm        mov    iLitEnd, eax;
// LINE 1873:
	__asm        mov    eax, iLitEnd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC4], eax;
// LINE 1875:
	__asm        mov    i, 0;
	__asm        jmp    _T6e;
_T67:
	__asm        inc    i;
	__asm        add    nXPosition, 5;
_T6e:
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    _Tab;
// LINE 1876:
	__asm        push   0xA;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _T67;
// LINE 1877:
_Tab:
	__asm        cmp    i, 0xB;
	__asm        jge    _T12f;
// LINE 1879:
	__asm        push   0xA;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1880:
	__asm        inc    i;
// LINE 1881:
	__asm        add    nXPosition, 5;
// LINE 1884:
	__asm        jmp    _Tf4;
_Ted:
	__asm        inc    i;
	__asm        add    nXPosition, 5;
_Tf4:
	__asm        cmp    i, 0xB;
	__asm        jge    _T12f;
// LINE 1885:
	__asm        push   0xA;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    _Ted;
// LINE 1887:
_T12f:
	__asm        jmp    near ptr 0x0044F03B;
}

// FUNCTION: COPTER_D 0x0044f040
void EquipmentPanelWindow::DrawTeargasUsage() {
	class MPoint ptDestination;
	class MRect rectSourceDisabled;
	int32_t i;
	class MRect rectSourceEnabled;
	long lTeargasUsed;

// LINE 1894:
	__asm        jmp    near ptr 0x0044F051;

	__asm        mov    rectSourceEnabled.left, 0x22;
	__asm        mov    rectSourceEnabled.top, 0;
	__asm        mov    rectSourceEnabled.right, 0x26;
	__asm        mov    rectSourceEnabled.bottom, 4;
	__asm        jmp    near ptr 0x0044F072;
// LINE 1895:
	__asm        jmp    near ptr 0x0044F077;

	__asm        mov    rectSourceDisabled.left, 0x22;
	__asm        mov    rectSourceDisabled.top, 4;
	__asm        mov    rectSourceDisabled.right, 0x26;
	__asm        mov    rectSourceDisabled.bottom, 8;
	__asm        jmp    near ptr 0x0044F098;
// LINE 1896:
	__asm        jmp    near ptr 0x0044F09D;

	__asm        jmp    near ptr 0x0044F0A2;
// LINE 1900:
	__asm        mov    ebx, 0xA;
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        sub    ebx, [eax+0x54];
	__asm        mov    lTeargasUsed, ebx;
// LINE 1901:
	__asm        cmp    lTeargasUsed, 0;
	__asm        jge    _T83;
// LINE 1902:
	__asm        mov    lTeargasUsed, 0;
// LINE 1903:
_T83:
	__asm        cmp    lTeargasUsed, 0xA;
	__asm        jle    _T94;
// LINE 1904:
	__asm        mov    lTeargasUsed, 0xA;
// LINE 1906:
_T94:
	__asm        mov    i, 0;
	__asm        jmp    _Ta3;
_Ta0:
	__asm        inc    i;
_Ta3:
	__asm        mov    eax, lTeargasUsed;
	__asm        cmp    i, eax;
	__asm        jge    _T108;
// LINE 1907:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1908:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1909:
	__asm        lea    eax, rectSourceDisabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1910:
	__asm        jmp    _Ta0;
// LINE 1911:
_T108:
	__asm        jmp    _T110;
_T10d:
	__asm        inc    i;
_T110:
	__asm        cmp    i, 0xA;
	__asm        jge    _T173;
// LINE 1912:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1913:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1914:
	__asm        lea    eax, rectSourceEnabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1915:
	__asm        jmp    _T10d;
// LINE 1916:
_T173:
	__asm        jmp    near ptr 0x0044F1B8;
}

// FUNCTION: COPTER_D 0x0044f1bd
int32_t EquipmentPanelWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1923:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _T31;

	__asm        cmp    lMessage, 0x10003;
	__asm        jne    _T31;
// LINE 1924:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   S3PlayMegaphoneMessage;
	__asm        add    esp, 4;
// LINE 1925:
_T31:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F1F8;
// LINE 1926:
}

// FUNCTION: COPTER_D 0x0044f1ff
long EquipmentPanelWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T1eb;
// LINE 1934:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T5d;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T5d;

	__asm        jmp    _T62;
_T5d:
	__asm        jmp    _T83;
_T62:
	__asm        jmp    _T71;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T83;
// LINE 1935:
_T71:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 1;
// LINE 1936:
	__asm        jmp    _T1e6;
_T83:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _Td0;

	__asm        jmp    _Td5;
_Td0:
	__asm        jmp    _Tf6;
_Td5:
	__asm        jmp    _Te4;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tf6;
// LINE 1937:
_Te4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 2;
// LINE 1938:
	__asm        jmp    _T1e6;
_Tf6:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    _T143;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    _T143;

	__asm        jmp    _T148;
_T143:
	__asm        jmp    _T169;
_T148:
	__asm        jmp    _T157;

	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T169;
// LINE 1939:
_T157:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 3;
// LINE 1940:
	__asm        jmp    _T1e6;
_T169:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    _T1b6;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _T1b6;

	__asm        jmp    _T1bb;
_T1b6:
	__asm        jmp    _T1dc;
_T1bb:
	__asm        jmp    _T1ca;

	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T1dc;
// LINE 1941:
_T1ca:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 4;
// LINE 1942:
	__asm        jmp    _T1e6;
// LINE 1943:
_T1dc:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1945:
_T1e6:
	__asm        jmp    _T3fa;
_T1eb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    _T2e4;
// LINE 1946:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T23c;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T23c;

	__asm        jmp    _T241;
_T23c:
	__asm        jmp    _T262;
_T241:
	__asm        jmp    _T250;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T262;
// LINE 1947:
_T250:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 6;
// LINE 1948:
	__asm        jmp    _T2df;
_T262:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    _T2af;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    _T2af;

	__asm        jmp    _T2b4;
_T2af:
	__asm        jmp    _T2d5;
_T2b4:
	__asm        jmp    _T2c3;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T2d5;
// LINE 1949:
_T2c3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 7;
// LINE 1950:
	__asm        jmp    _T2df;
// LINE 1951:
_T2d5:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1953:
_T2df:
	__asm        jmp    _T3fa;
_T2e4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    _T36a;
// LINE 1954:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T335;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T335;

	__asm        jmp    _T33a;
_T335:
	__asm        jmp    _T35b;
_T33a:
	__asm        jmp    _T349;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T35b;
// LINE 1955:
_T349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 8;
// LINE 1956:
	__asm        jmp    _T365;
// LINE 1957:
_T35b:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1959:
_T365:
	__asm        jmp    _T3fa;
_T36a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T3f0;
// LINE 1960:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T3bb;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T3bb;

	__asm        jmp    _T3c0;
_T3bb:
	__asm        jmp    _T3e1;
_T3c0:
	__asm        jmp    _T3cf;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T3e1;
// LINE 1961:
_T3cf:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 5;
// LINE 1962:
	__asm        jmp    _T3eb;
// LINE 1963:
_T3e1:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1965:
_T3eb:
	__asm        jmp    _T3fa;
// LINE 1966:
_T3f0:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1968:
_T3fa:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1969:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1970:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        je     _T43e;
// LINE 1971:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1972:
_T43e:
	__asm        mov    eax, 1;
	__asm        jmp    _T448;
// LINE 1973:
_T448:
}

// FUNCTION: COPTER_D 0x0044f64e
long EquipmentPanelWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1981:
	__asm        mov    eax, GraphicWindow::windowCursorCapture;
	__asm        cmp    this, eax;
	__asm        jne    _T1f;

	__asm        jmp    _T24;
_T1f:
	__asm        jmp    _T45;
_T24:
	__asm        jmp    _T33;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T45;
// LINE 1982:
_T33:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1983:
_T45:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        je     _T120;
// LINE 1984:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1987:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    _T10b;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    _T10b;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _Td0;

	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _Td0;

	__asm        jmp    _Td5;
_Td0:
	__asm        jmp    _T10b;
_Td5:
	__asm        jmp    _Te4;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T10b;
// LINE 1989:
_Te4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 5;
// LINE 1990:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1991:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1993:
	__asm        jmp    _T113;
// LINE 1994:
_T10b:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlEnd;
// LINE 1995:
_T113:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1997:
_T120:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F778;
// LINE 1998:
}

// FUNCTION: COPTER_D 0x0044f77f
void EquipmentPanelWindow::DoCurrentControlStart() {
// LINE 2006:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T26;
// LINE 2007:
	__asm        jmp    _T1d6;
// LINE 2008:
	__asm        jmp    _T1d1;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T5d;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    near ptr 0x0044F7D7;
// LINE 2010:
	__asm        jmp    _T1d1;
_T5d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T94;
// LINE 2011:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    near ptr 0x0044F80E;
// LINE 2012:
	__asm        jmp    _T1d1;
_T94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _Tcb;
// LINE 2013:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    near ptr 0x0044F845;
// LINE 2014:
	__asm        jmp    _T1d1;
_Tcb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T102;
// LINE 2015:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    near ptr 0x0044F87C;
// LINE 2016:
	__asm        jmp    _T1d1;
_T102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T139;
// LINE 2017:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    near ptr 0x0044F8B3;
// LINE 2018:
	__asm        jmp    _T1d1;
_T139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T170;
// LINE 2019:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    near ptr 0x0044F8EA;
// LINE 2020:
	__asm        jmp    _T1d1;
_T170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    _T1a7;
// LINE 2021:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    near ptr 0x0044F921;
// LINE 2022:
	__asm        jmp    _T1d1;
_T1a7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    _T1d1;
// LINE 2025:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 2026:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow;
// LINE 2028:
_T1d1:
	__asm        jmp    _T1d6;
_T1d6:
}

// FUNCTION: COPTER_D 0x0044f95a
void EquipmentPanelWindow::DoCurrentControlEnd() {
// LINE 2038:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T26;
// LINE 2039:
	__asm        jmp    _T1a7;
// LINE 2040:
	__asm        jmp    _T1a2;
_T26:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T5d;
// LINE 2041:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    near ptr 0x0044F9B2;
// LINE 2042:
	__asm        jmp    _T1a2;
_T5d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    _T94;
// LINE 2043:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    near ptr 0x0044F9E9;
// LINE 2044:
	__asm        jmp    _T1a2;
_T94:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    _Tcb;
// LINE 2045:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    near ptr 0x0044FA20;
// LINE 2046:
	__asm        jmp    _T1a2;
_Tcb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    _T102;
// LINE 2047:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    near ptr 0x0044FA57;
// LINE 2048:
	__asm        jmp    _T1a2;
_T102:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    _T139;
// LINE 2049:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    near ptr 0x0044FA8E;
// LINE 2050:
	__asm        jmp    _T1a2;
_T139:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    _T170;
// LINE 2051:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    near ptr 0x0044FAC5;
// LINE 2052:
	__asm        jmp    _T1a2;
_T170:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    _T1a2;
// LINE 2053:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    _T1a2;
// LINE 2054:
_T1a2:
	__asm        jmp    _T1a7;
_T1a7:
}

// FUNCTION: COPTER_D 0x0044fb06
void EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow() {
	long nMenuYPosition;
	int32_t i;
	long nMenuXPosition;
	class PopupMenuWindow* tempPopupMenuWindow;

// LINE 2063:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    nMenuXPosition, eax;
// LINE 2064:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    nMenuYPosition, eax;
// LINE 2067:
	__asm        lea    eax, nMenuYPosition;
	__asm        push   eax;
	__asm        lea    eax, nMenuXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 2070:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tae;

	__asm        mov    eax, nMenuYPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, nMenuYPosition;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0044FB73;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0044FB90;

	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, GraphicWindow::screenWindow;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    _Tb5;
_Tae:
	__asm        mov    tempPopupMenuWindow, 0;
// LINE 2071:
_Tb5:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2072:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 2073:
	__asm        mov    i, 0x22;
	__asm        jmp    _Te3;
_Te0:
	__asm        inc    i;
_Te3:
	__asm        cmp    i, 0x25;
	__asm        jg     _T10b;
// LINE 2074:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, i;
	__asm        add    eax, 0x96;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
	__asm        jmp    _Te0;
// LINE 2076:
_T10b:
	__asm        jmp    near ptr 0x0044FC16;
}



// Contribution: 1:0004ec20-0004ec58 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fc20
// RadioCompassWindow::`scalar deleting destructor'



// Contribution: 1:0004ec60-0004ecd2 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ece0-0004ee38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ee40-0004ee78 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe40
// DialWindow::`scalar deleting destructor'



// Contribution: 1:0004ee80-0004eeb8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe80
// PassengerWindow::`scalar deleting destructor'



// Contribution: 1:0004eec0-0004eef8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fec0
// MapWindow::`scalar deleting destructor'



// Contribution: 1:0004ef00-0004ef38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044ff00
// EquipmentPanelWindow::`scalar deleting destructor'



// Contribution: 2:00000650-00000717 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f650
// GLOBAL: COPTER_D 0x0058f650
// ??_7RadioCompassWindow@@6B@


// Contribution: 2:00000718-00000733 Module: 47, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00000738-000007ff Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f738
// GLOBAL: COPTER_D 0x0058f738
// ??_7DialWindow@@6B@


// Contribution: 2:00000800-000008d3 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f800
// GLOBAL: COPTER_D 0x0058f800
// ??_7PassengerWindow@@6B@


// Contribution: 2:000008d8-000009ab Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f8d8
// GLOBAL: COPTER_D 0x0058f8d8
// ??_7MapWindow@@6B@


// Contribution: 2:000009b0-00000a7b Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f9b0
// GLOBAL: COPTER_D 0x0058f9b0
// ??_7EquipmentPanelWindow@@6B@


// Contribution: 3:00001f58-000020e0 Module: 47, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598f58
char * SZ_RADIO_COMPASS_WINDOW_IMAGE_FILE_NAME = { /* <data@0x00598f58> */ };

// GLOBAL: COPTER_D 0x00598f5c
char * SZ_COMPASS_IMAGE_FILE_NAME = { /* <data@0x00598f5c> */ };

// GLOBAL: COPTER_D 0x00598f60
char * SZ_DIAL_WINDOW_IMAGE_FILE_NAME = { /* <data@0x00598f60> */ };

// GLOBAL: COPTER_D 0x00598f64
char * SZ_DIAL_WINDOW_DAMAGE_FILE_NAME = { /* <data@0x00598f64> */ };

// GLOBAL: COPTER_D 0x00598f68
char * SZ_DIAL_WINDOW_FUEL_LIGHT_FILE_NAME = { /* <data@0x00598f68> */ };

// GLOBAL: COPTER_D 0x00598f6c
char * SZ_DIAL_WINDOW_MONEY_FONT_FILE_NAME = { /* <data@0x00598f6c> */ };

// GLOBAL: COPTER_D 0x00598f70
char * SZ_DIAL_WINDOW_MANA_FILE_NAME = { /* <data@0x00598f70> */ };

// GLOBAL: COPTER_D 0x00598f74
char * SZ_DIAL_WINDOW_ALTITUDE_NBR_FILE_NAME = { /* <data@0x00598f74> */ };

// GLOBAL: COPTER_D 0x00598f78
char * SZ_DIAL_WINDOW_BOOT_FILE_NAME = { /* <data@0x00598f78> */ };

// GLOBAL: COPTER_D 0x00598f7c
char * SZ_DIAL_WINDOW_BOOT_BACK_FILE_NAME = { /* <data@0x00598f7c> */ };

// GLOBAL: COPTER_D 0x00598fb8
char * SZ_PASSENGER_WINDOW_IMAGE_FILE_NAME = { /* <data@0x00598fb8> */ };

// GLOBAL: COPTER_D 0x00598fbc
char * SZ_PASSENGER_IMAGE_FILE_NAME = { /* <data@0x00598fbc> */ };

// GLOBAL: COPTER_D 0x00598fc0
char * SZ_MAP_WINDOW_IMAGE_FILE_NAME = { /* <data@0x00598fc0> */ };

// GLOBAL: COPTER_D 0x00598fc4
char * SZ_MAP_WINDOW_BUTTON_FILE_NAME = { /* <data@0x00598fc4> */ };

// GLOBAL: COPTER_D 0x00598fcc
char * SZ_BUCKET_WATER_GUAGE_IMAGE = { /* <data@0x00598fcc> */ };

// GLOBAL: COPTER_D 0x00598fd0
char * SZ_EQUIPMENT_BUTTON_IMAGE_0 = { /* <data@0x00598fd0> */ };

// GLOBAL: COPTER_D 0x00598fd4
char * SZ_EQUIPMENT_BUTTON_IMAGE_1 = { /* <data@0x00598fd4> */ };

// GLOBAL: COPTER_D 0x00598fd8
char * SZ_EQUIPMENT_BUTTON_IMAGE_2 = { /* <data@0x00598fd8> */ };

