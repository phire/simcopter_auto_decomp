// Module: Dialwin.obj
// Source: C:\Copter\source\sparkal\Dialwin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class RadioCompassWindow (forward reference);
class RadioCompassWindow : public GraphicWindow
{
public:
	void RadioCompassWindow(class MRect&, long, class GraphicWindow*, class Radio*, class GraphicWindowOwner*, int32_t);
	virtual void ~RadioCompassWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	int32_t GetCurrentCompassPosition();
	void SetNewRadioStation(int32_t);
	void SetNewRadioStationVolume(long);
	void CheckForRadioChange();
protected:
	long lFrameCount;
	class Radio* myRadio;
	int32_t nRadioStationIndex;
	long lRadioStationVolume;
	class CBackBuffer* myCompassImage;
	class basic_string<char> sCompassFile;
	int32_t nLastCompassPosition;
	class MRect rectRadioStations;
	class MRect rectRadioStationVolume;
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: long;

// Type: class GraphicWindow (forward reference);

// Type: class Radio (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: int32_t;

// Type: void;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: unsigned long;

// Type: class DialWindow (forward reference);
class DialWindow : public GraphicWindow
{
public:
	void DialWindow(class MRect&, long, struct CommandSystem*, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~DialWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t DoesWindowNeedUpdating();
	void SetNewDialPositions();
	void DrawCurrentDamage();
	void CheckForChangedDamage();
	void TurnOffSpotlightCommand(int32_t);
	void TurnOnSpotlightCommand(int32_t);
protected:
	struct CommandSystem* myCommandSystem;
	class BitmappedFont* myMoneyGuageFont;
	class CBackBuffer* mySecondImage;
	class CBackBuffer* myDamageImage;
	class CBackBuffer* myFuelLightImage;
	class CBackBuffer* myPointsLightImage;
	class CBackBuffer* myAltitudeHundredsImage;
	class CBackBuffer* mySpotlightBootImage;
	class CBackBuffer* mySpotlightBootBackImage;
	int32_t nCurrentDamage;
	long lCurrentFuelPercentage;
	long lCurrentFuelLight;
	class DialHand dials[3];
	class MRect rectDials[3];
	class MRect rectMoneyFont;
	long lCurrentMoney;
	long lCurrentPoints;
	int32_t bCurrentPointsOverLimit;
	class MPoint ptLastSpotlightPosition;
	class MRect rectSpotlightControl;
	class MRect rectSpotlightControlSet[4];
	long lSpotlightControlCurrent;
};

// Type: struct CommandSystem (forward reference);
class CommandSystem{
public:
	struct Command keyboardCommands[100];
	class CharList keyboardCommandList;
	class list<Shortcut> commandShortcuts;
	unsigned char chCommandKeyboardArray[2048];
	unsigned char chCommandJoystickArray[4][14];
	long joystickCommands[100];
	void CommandSystem();
	void Initialize();
	void ClearAllCommands();
	void ClearAllCommandsDevice(long);
	void TurnOnCommand(int32_t);
	void TurnOffCommand(int32_t);
	void TurnOnCommandDevice(int32_t, long);
	void TurnOffCommandDevice(int32_t, long);
	int32_t IsCommandSet(int32_t);
	int32_t IsCommandPush(int32_t);
	void SetUpCommandArraysFromShortcuts();
	// calltype: NearC
	static int32_t GetKeystateIndexForChar(long, char);
	long GetJoystickCommandValue(int32_t);
	void PollJoysticksForCommands();
};

// Type: char[260];

// Type: int32_t[2][6];

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: char[16];

// Type: class PassengerWindow (forward reference);
class PassengerWindow : public GraphicWindow
{
		enum Position {
			nPositionUp = 0,
			nPositionDown = 1,
		};
		enum PositionChangeDirection {
			nPositionChangeDirectionDown = -1,
			nPositionChangeDirectionNone = 0,
			nPositionChangeDirectionUp = 1,
		};
public:
	void PassengerWindow(class MRect&, long, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~PassengerWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	virtual int32_t DoesWindowNeedUpdating();
	// vtable: 200
	intro void MoveToUpPosition();
	// vtable: 204
	intro void MoveToDownPosition();
	// vtable: 208
	intro void TogglePosition();
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	void DrawPassengers();
	void GetRectOfPassengerGraphic(int32_t, int32_t, class MRect&);
	int32_t DoesPositionHitPassenger(long, long, long&);
	enum PassengerWindow::Position nPositionCurrent;
	int32_t nHeightOfWindowToShow;
	int32_t nYPositionOfWindowWhenDown;
	class MTimer timerForPositionChange;
	int32_t nChangingPosition;
	long lPassengerDraggedID;
	class MPoint ptLastCursorPosition;
	class CBackBuffer* myPassengerImage;
	class basic_string<char> sPassengerFile;
};

// Type: struct tagHeliPassengerData (forward reference);

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: int32_t[16];

// Type: class MapWindow (forward reference);
class MapWindow : public GraphicWindow
{
public:
	void MapWindow(class MRect&, long, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~MapWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t ComposeSelf();
	// vtable: 200
	intro void DrawButton(int32_t, int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	// vtable: 204
	intro void CreateAutoMessageSelectionPopupWindow(int32_t, int32_t, class MPoint&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 208
	intro int32_t GetStringIDForVehicleName(int32_t);
	class CBackBuffer* myButtonImage;
	int32_t bCurrentMissionFilter;
	int32_t bOtherMissionFilter;
	int32_t nTrackingButton;
	int32_t nCurrentAutoID;
	long lCurrentMissionID;
	class MFont fontText;
	class MRect rectButtons[6];
	class MRect rectMissionText;
};

// Type: struct MISSION_DATA (forward reference);

// Type: void * __ptr32;

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: class PopupMenuWindow (forward reference);
class PopupMenuWindow : public ListBoxWindow
{
public:
	void PopupMenuWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	// vtable: 344
	intro void ResizeWindowToFitMenuItems();
	virtual int32_t RemoveStringAtIndex(long);
	virtual int32_t InsertStringAtIndex(long, class basic_string<char>&);
};

// Type: class EquipmentPanelWindow (forward reference);
class EquipmentPanelWindow : public GraphicWindow
{
public:
	void EquipmentPanelWindow(char *, class MRect&, long, struct CommandSystem*, class GraphicWindow*, class GraphicWindowOwner*);
	virtual void ~EquipmentPanelWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro void InitializeCachedSettings();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
	// vtable: 200
	intro void DrawButton(int32_t, int32_t);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	void CreateMegaphoneSelectionPopupWindow();
	virtual int32_t DoesWindowNeedUpdating();
protected:
	void DoCurrentControlStart();
	void DoCurrentControlEnd();
	void DrawBucketWaterGuage();
	void DrawTeargasUsage();
	class MRect rectControls[4];
	long lCurrentSelectedControl;
	struct CommandSystem* myCommandSystem;
	class CBackBuffer* myBucketWaterGuageImage;
	class CBackBuffer* myButtonImage;
	long lLastBucketWaterGuageLevel;
	long lLastTeargasCount;
};

// Type: char *;

// Type: uint32_t;

// Type: class DialHand (forward reference);
class DialHand{
		enum DialDirection {
			nDialDirectionClockwise = -1,
			nDialDirectionCounterClockwise = 1,
		};
public:
	void DialHand();
	int32_t SetCurrentValue(long);
	int32_t GetCurrentValue();
	int32_t SetPercent(long);
	void SetMaxValue(long);
	void SetAnglePerValue(float);
	void SetStartAngle(long);
	void SetDialPosition(long, long);
	void SetDialDirection(enum DialHand::DialDirection);
	void SetDialLength(long);
	void SetDialWidth(long);
	void DrawSelf(class CBackBuffer*);
	void SetDialColor(int32_t);
	int32_t HasChangedSinceLastDraw();
	void GetBoundingRect(class MRect&);
	void CalculateCurrentPosition();
	int32_t bHasChangedSinceLastDraw;
	long lCurrentValue;
	enum DialHand::DialDirection nDialDirection;
	long lMaxValue;
	long lStartAngle;
	long lDialLength;
	long lDialWidth;
	float fAnglePerValue;
	class MPoint ptPosition;
	class MPoint ptEndPosition;
	int32_t nColorDial;
};

// Type: struct SparkalRect;
class SparkalRect{
public:
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
class SparkalPoint{
public:
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: class ListBoxWindow;
class ListBoxWindow : public GraphicWindow
{
public:
	void ListBoxWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t RemoveString(long);
	// vtable: 200
	intro int32_t RemoveString(class basic_string<char>&);
	// vtable: 204
	intro void RemoveAllStrings();
	// vtable: 208
	intro int32_t InsertString(long, long);
	// vtable: 212
	intro int32_t InsertString(class basic_string<char>&, long);
	// vtable: 216
	intro int32_t ResizeWindowForExactLineHeights();
	// vtable: 220
	intro int32_t SetSelection(long);
	// vtable: 224
	intro long GetSelection();
	// vtable: 228
	intro void SetShouldSort();
	// vtable: 232
	intro void Sort();
	// vtable: 236
	intro int32_t MoveLineUp();
	// vtable: 240
	intro int32_t MoveLineDown();
	// vtable: 244
	intro int32_t ScrollToStart();
	// vtable: 248
	intro int32_t ScrollToEnd();
	// vtable: 252
	intro int32_t ScrollPageUp();
	// vtable: 256
	intro int32_t ScrollPageDown();
	// vtable: 260
	intro int32_t IsIndexInView(long);
	// vtable: 264
	intro void PutIndexInView(long);
	// vtable: 268
	intro int32_t ScrollToFirstLetter(char);
	// vtable: 272
	intro void SetIndexOfTopLine(long);
	// vtable: 276
	intro long GetLineCount();
	// vtable: 280
	intro long GetIndexOfTopLine();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 284
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 288
	intro void SetBackgroundPaletteIndex(int32_t, int32_t);
	// vtable: 292
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	// vtable: 296
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 300
	intro int32_t AddScrollBar(int32_t, int32_t, char *);
	// vtable: 304
	intro void RemoveScrollBar(int32_t, int32_t);
protected:
	// vtable: 308
	intro void CalculateAllMetrics();
	// vtable: 312
	intro int32_t GetStringAddressFromIndex(long, class basic_string<char>*&);
	// vtable: 316
	intro int32_t GetStringFromIndex(long, class basic_string<char>&);
	// vtable: 320
	intro int32_t GetIndexFromString(long&, class basic_string<char>&);
	// vtable: 324
	intro int32_t RemoveStringAtIndex(long);
	// vtable: 328
	intro int32_t InsertStringAtIndex(long, class basic_string<char>&);
	// vtable: 332
	intro int32_t ModifyString(long, class basic_string<char>&);
	// vtable: 336
	intro void SetScrollBarValue();
	// vtable: 340
	intro void SetScrollBarSizes();
	class list<basic_string<char>> myStringList;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	int32_t nBackgroundIndex;
	int32_t nBackgroundIndexHighlighted;
	class MFont fontText;
	unsigned long nTextDrawStyle;
	long lCurrentSelection;
	long lVisibleLines;
	long lFirstVisibleLine;
	long lLineHeight;
	int32_t bAlwaysSort;
	class ScrollBarWindow* myVerticalScrollBarWindow;
	class ScrollBarWindow* myHorizontalScrollBarWindow;
	int32_t bBusySettingSelection;
};



// Contribution: 1:00047270-0004ec1a Module: 47, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00448270
void RadioCompassWindow::RadioCompassWindow(class MRect& rectNewWindow, long lNewID, class GraphicWindow* windowNewParent, class Radio* myNewRadio, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F58];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x2A;
	__asm        mov    eax, myNewRadio;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, ds:[0x598F5C];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044837F;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004482FA;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00448356;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00448351;
	__asm        jmp    near ptr 0x0044835F;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044836E;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x0044838C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        jmp    near ptr 0x0044839E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004483B0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0x10;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0x56;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0x22;
	__asm        jmp    near ptr 0x004483E9;
	__asm        jmp    near ptr 0x004483EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0x62;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x6E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x26;
	__asm        jmp    near ptr 0x00448427;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F650;
// LINE 76:
	__asm        jmp    near ptr 0x00448435;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044843f
void RadioCompassWindow::~RadioCompassWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F650;
// LINE 83:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::DestroyImage;
// LINE 84:
	__asm        jmp    near ptr 0x00448461;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004484F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004484F6;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004484D6;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004484DB;
	__asm        jmp    near ptr 0x004484E0;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004484F1;
	__asm        jmp    near ptr 0x004484F6;
	__asm        jmp    near ptr 0x004484FB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x00448529;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044852E;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044853b
int32_t RadioCompassWindow::Initialize() {
// LINE 93:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 94:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0044856B;
// LINE 95:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004485CE;
// LINE 98:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004485C4;
// LINE 99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x0044858C;
// LINE 100:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 102:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x004485B2;
// LINE 103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 106:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004485CE;
// LINE 107:
}

// FUNCTION: COPTER_D 0x004485d3
void RadioCompassWindow::InitializeCachedSettings() {
// LINE 114:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 115:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0xFFFFFFFF;
// LINE 116:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xF4240;
// LINE 117:
	__asm        jmp    near ptr 0x00448608;
}

// FUNCTION: COPTER_D 0x0044860d
void RadioCompassWindow::DestroyImage() {
// LINE 126:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 128:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x00448678;
// LINE 129:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044866B;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00448666;
	__asm        jmp    near ptr 0x0044866B;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 132:
	__asm        jmp    near ptr 0x0044867D;
}

// FUNCTION: COPTER_D 0x00448682
int32_t RadioCompassWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sCompassPath;

// LINE 141:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x004486DE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004486D3;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sCompassPath.reference, eax;
	__asm        jmp    near ptr 0x004486E5;
	__asm        mov    sCompassPath.reference, 0;
	__asm        mov    sCompassPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004486F1;
// LINE 144:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 146:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    near ptr 0x00448850;
// LINE 147:
	__asm        lea    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x88;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0044872D;
// LINE 148:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00448843;
	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     near ptr 0x00448769;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044876E;
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sCompassPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00448786;
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004487F0;
	__asm        jmp    near ptr 0x00448798;
	__asm        jmp    near ptr 0x0044879D;
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004487BC;
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004487C8;
	__asm        jmp    near ptr 0x004487C8;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x004487C8;
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004487F0;
	__asm        jmp    near ptr 0x004487F5;
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x004487FE;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x00448809;
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00448824;
	__asm        jmp    near ptr 0x00448829;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00448850;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 151:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sCompassPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCompassPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004488ED;
	__asm        mov    eax, sCompassPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004488ED;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004488CD;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004488D2;
	__asm        jmp    near ptr 0x004488D7;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004488E8;
	__asm        jmp    near ptr 0x004488ED;
	__asm        jmp    near ptr 0x004488F2;
	__asm        cmp    sCompassPath.c_str_ptr, 0;
	__asm        je     near ptr 0x00448914;
	__asm        mov    eax, sCompassPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00448919;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x00448921;
// LINE 152:
}

// FUNCTION: COPTER_D 0x00448928
int32_t RadioCompassWindow::ComposeSelf() {
	int32_t nCurrentCompassPosition;

// LINE 169:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00448948;
// LINE 170:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00448A40;
// LINE 172:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x74];
// LINE 173:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    near ptr 0x00448966;
// LINE 174:
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::CheckForRadioChange;
// LINE 175:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x74], 1;
	__asm        je     near ptr 0x004489EE;
// LINE 176:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x10C];
	__asm        mov    nCurrentCompassPosition, eax;
	__asm        jmp    near ptr 0x00448986;
// LINE 177:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCurrentCompassPosition;
	__asm        cmp    [eax+0x90], ecx;
	__asm        je     near ptr 0x004489EE;
// LINE 183:
	__asm        mov    ecx, 0x1E0000;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nCurrentCompassPosition, eax;
// LINE 186:
	__asm        push   0x10;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        add    eax, 0x28;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nCurrentCompassPosition;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        push   0x190;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 187:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x10C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
// LINE 191:
	__asm        jmp    near ptr 0x004489F3;
	__asm        jmp    near ptr 0x004489F8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 192:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00448A40;
// LINE 193:
}

// FUNCTION: COPTER_D 0x00448a45
long RadioCompassWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t nNewRadioStationIndex;
	long lNewRadioStationVolume;

// LINE 205:
	__asm        jmp    near ptr 0x00448A56;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00448A67;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     near ptr 0x00448AB4;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     near ptr 0x00448AB4;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    near ptr 0x00448AB4;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    near ptr 0x00448AB4;
	__asm        jmp    near ptr 0x00448AB9;
	__asm        jmp    near ptr 0x00448B13;
	__asm        jmp    near ptr 0x00448AC8;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00448B13;
// LINE 206:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    ecx, nCursorX;
	__asm        sub    ecx, 0x14;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, 0x42;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nNewRadioStationIndex, eax;
// LINE 207:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x34];
// LINE 208:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 210:
	__asm        jmp    near ptr 0x00448CA6;
	__asm        jmp    near ptr 0x00448B18;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00448B29;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     near ptr 0x00448B76;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     near ptr 0x00448B76;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    near ptr 0x00448B76;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    near ptr 0x00448B76;
	__asm        jmp    near ptr 0x00448B7B;
	__asm        jmp    near ptr 0x00448CA6;
	__asm        jmp    near ptr 0x00448B8A;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00448CA6;
// LINE 211:
	__asm        mov    eax, 0x26;
	__asm        sub    eax, nCursorY;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        shl    eax, 4;
	__asm        mov    ecx, 0x12;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 212:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSliderValueToSoundValue;
	__asm        add    esp, 4;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 214:
	__asm        cmp    lNewRadioStationVolume, 0x9C4;
	__asm        jg     near ptr 0x00448C29;
// LINE 215:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x24], eax;
// LINE 216:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+0x18], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00448C00;
	__asm        jmp    near ptr 0x00448C1F;
	__asm        jmp    near ptr 0x00448C05;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00448C1F;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+0x1C];
	__asm        jmp    near ptr 0x00448C24;
// LINE 218:
	__asm        jmp    near ptr 0x00448C9A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x28], eax;
// LINE 219:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0x18], 1;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00448C4E;
	__asm        jmp    near ptr 0x00448C6D;
	__asm        jmp    near ptr 0x00448C53;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x00448C6D;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   dword ptr [eax+0x1C];
	__asm        jmp    near ptr 0x00448C72;
// LINE 220:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x1C];
// LINE 221:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x2C];
// LINE 223:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 225:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00448CB0;
// LINE 226:
}

// FUNCTION: COPTER_D 0x00448cb7
void RadioCompassWindow::SetNewRadioStation(int32_t nNewRadioStationIndex) {
	int32_t nRadioStationCount;
	int32_t nStationXPosition;

// LINE 242:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00448E97;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+0x3C];
	__asm        mov    nRadioStationCount, eax;
// LINE 248:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    near ptr 0x00448D17;
// LINE 249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 250:
	__asm        jmp    near ptr 0x00448D1E;
// LINE 251:
	__asm        mov    nStationXPosition, 0x14;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 252:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D46;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 253:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D71;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 254:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448D95;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 255:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0x32;
	__asm        jmp    near ptr 0x00448DBC;
// LINE 258:
	__asm        cmp    nRadioStationCount, 0;
	__asm        jle    near ptr 0x00448DE1;
// LINE 259:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 6;
	__asm        add    eax, ecx;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   nRadioStationCount;
	__asm        add    eax, 0x14;
	__asm        mov    nStationXPosition, eax;
// LINE 260:
	__asm        jmp    near ptr 0x00448DE8;
// LINE 261:
	__asm        mov    nStationXPosition, 0x14;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 262:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 263:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E3B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 264:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        add    eax, nStationXPosition;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E5F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x28], eax;
// LINE 265:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 5;
	__asm        mov    ecx, nStationXPosition;
	__asm        inc    ecx;
	__asm        add    eax, ecx;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx], 0xF6;
	__asm        jmp    near ptr 0x00448E86;
// LINE 267:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 269:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 270:
	__asm        jmp    near ptr 0x00448EA5;
}

// FUNCTION: COPTER_D 0x00448eac
void RadioCompassWindow::SetNewRadioStationVolume(long lNewRadioStationVolume) {
	int32_t nVolumeYPosition;

// LINE 286:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSoundValueToSliderValue;
	__asm        add    esp, 4;
	__asm        mov    lNewRadioStationVolume, eax;
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0044904E;
// LINE 289:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-8], eax;
// LINE 290:
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    near ptr 0x00448F22;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0xC], eax;
// LINE 291:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    near ptr 0x00448F45;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x10], eax;
// LINE 292:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0x32;
	__asm        jmp    near ptr 0x00448F6B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x14], eax;
// LINE 293:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0x32;
	__asm        jmp    near ptr 0x00448F91;
// LINE 296:
	__asm        mov    ecx, 0x26;
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        add    eax, eax;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        sub    ecx, eax;
	__asm        mov    nVolumeYPosition, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x18], eax;
// LINE 297:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    near ptr 0x00448FCE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x1C], eax;
// LINE 298:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+0x14];
	__asm        imul   eax, nVolumeYPosition;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    near ptr 0x00448FF1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x20], eax;
// LINE 299:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x63], 0xF6;
	__asm        jmp    near ptr 0x00449017;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
// LINE 300:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, nVolumeYPosition;
	__asm        inc    ecx;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    byte ptr [eax+ecx+0x64], 0xF6;
	__asm        jmp    near ptr 0x0044903D;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 304:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 305:
	__asm        jmp    near ptr 0x0044905F;
}

// FUNCTION: COPTER_D 0x00449066
void RadioCompassWindow::CheckForRadioChange() {
	int32_t nNewRadioStationIndex;
	long lNewRadioStationVolume;

// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    nNewRadioStationIndex, eax;
	__asm        jmp    near ptr 0x00449083;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    lNewRadioStationVolume, eax;
	__asm        jmp    near ptr 0x00449094;
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    ecx, nNewRadioStationIndex;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        je     near ptr 0x004490AF;
// LINE 318:
	__asm        mov    eax, nNewRadioStationIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStation;
// LINE 320:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewRadioStationVolume;
	__asm        cmp    [eax+0x80], ecx;
	__asm        je     near ptr 0x004490CD;
// LINE 321:
	__asm        mov    eax, lNewRadioStationVolume;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RadioCompassWindow::SetNewRadioStationVolume;
// LINE 322:
	__asm        jmp    near ptr 0x004490D2;
}

// FUNCTION: COPTER_D 0x004490d7
void DialWindow::DialWindow(class MRect& rectNewWindow, long lNewID, struct CommandSystem* myNewCommandSystem, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F60];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, myNewCommandSystem;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0xFFFFFC18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    dword ptr [ebp-4], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        mov    [ebp-8], eax;
	__asm        dec    dword ptr [ebp-4];
	__asm        js     near ptr 0x004491C8;
	__asm        mov    ecx, [ebp-8];
	__asm        call   DialHand::DialHand;
	__asm        add    dword ptr [ebp-8], 0x34;
	__asm        jmp    near ptr 0x004491AE;
	__asm        jmp    near ptr 0x004491CD;
	__asm        mov    dword ptr [ebp-0xC], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x140;
	__asm        mov    [ebp-0x10], eax;
	__asm        dec    dword ptr [ebp-0xC];
	__asm        js     near ptr 0x004491F9;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x10], 0x10;
	__asm        jmp    near ptr 0x004491DF;
	__asm        jmp    near ptr 0x004491FE;
	__asm        jmp    near ptr 0x00449203;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x170], 0x14;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x174], 0xC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x178], 0x5E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17C], 0x1A;
	__asm        jmp    near ptr 0x0044923C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x180], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0;
	__asm        jmp    near ptr 0x0044925B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18C], 0x2710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x190], 0x2710;
	__asm        jmp    near ptr 0x0044927A;
	__asm        jmp    near ptr 0x0044927F;
	__asm        jmp    near ptr 0x00449284;
	__asm        mov    dword ptr [ebp-0x14], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1A4;
	__asm        mov    [ebp-0x18], eax;
	__asm        dec    dword ptr [ebp-0x14];
	__asm        js     near ptr 0x004492B0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x18], 0x10;
	__asm        jmp    near ptr 0x00449296;
	__asm        jmp    near ptr 0x004492B5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F738;
// LINE 367:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0xA1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0x2F;
	__asm        jmp    near ptr 0x004492EA;
// LINE 368:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004492FC;
// LINE 369:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jle    near ptr 0x00449333;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x00449338;
// LINE 370:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0x102;
	__asm        jmp    near ptr 0x0044934A;
// LINE 371:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x40566666;
	__asm        jmp    near ptr 0x0044935C;
// LINE 372:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0x1C;
	__asm        jmp    near ptr 0x0044936E;
// LINE 373:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 2;
	__asm        jmp    near ptr 0x00449380;
// LINE 374:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x48], eax;
	__asm        fimul  dword ptr [ebp-0x48];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x34], ecx;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x4C], eax;
	__asm        fild   dword ptr [ebp-0x4C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x50], eax;
	__asm        fimul  dword ptr [ebp-0x50];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x54], eax;
	__asm        fild   dword ptr [ebp-0x54];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x58], eax;
	__asm        fimul  dword ptr [ebp-0x58];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    near ptr 0x00449449;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x140;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x20], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x20];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x1C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    near ptr 0x004494F4;
	__asm        jmp    near ptr 0x004494F9;
// LINE 377:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF8], 0x13C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFC], 0x26;
	__asm        jmp    near ptr 0x00449518;
// LINE 378:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE0], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044952A;
// LINE 379:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE4], 0x186A0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jle    near ptr 0x00449561;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        jmp    near ptr 0x00449566;
// LINE 380:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE8], 0x5A;
	__asm        jmp    near ptr 0x00449578;
// LINE 381:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF4], 0x40666666;
	__asm        jmp    near ptr 0x0044958A;
// LINE 382:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEC], 0x18;
	__asm        jmp    near ptr 0x0044959C;
// LINE 383:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF0], 2;
	__asm        jmp    near ptr 0x004495AE;
// LINE 384:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0x5C], eax;
	__asm        fild   dword ptr [ebp-0x5C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0x60], eax;
	__asm        fimul  dword ptr [ebp-0x60];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x38], ecx;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x64], eax;
	__asm        fild   dword ptr [ebp-0x64];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x68], eax;
	__asm        fimul  dword ptr [ebp-0x68];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x6C], eax;
	__asm        fild   dword ptr [ebp-0x6C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0x70], eax;
	__asm        fimul  dword ptr [ebp-0x70];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    near ptr 0x00449677;
// LINE 385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x150;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x28], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x28];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x24];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    near ptr 0x00449722;
	__asm        jmp    near ptr 0x00449727;
// LINE 387:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x12C], 0x18E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 0x20;
	__asm        jmp    near ptr 0x00449746;
// LINE 388:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00449758;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x118], 0x19;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jle    near ptr 0x0044978F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        jmp    near ptr 0x00449794;
// LINE 390:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11C], 0x5A;
	__asm        jmp    near ptr 0x004497A6;
// LINE 391:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x128], 0x41600000;
	__asm        jmp    near ptr 0x004497B8;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x120], 0x1A;
	__asm        jmp    near ptr 0x004497CA;
// LINE 393:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x124], 2;
	__asm        jmp    near ptr 0x004497DC;
// LINE 394:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0x74], eax;
	__asm        fild   dword ptr [ebp-0x74];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0x78], eax;
	__asm        fimul  dword ptr [ebp-0x78];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x7C], eax;
	__asm        fild   dword ptr [ebp-0x7C];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x80], eax;
	__asm        fimul  dword ptr [ebp-0x80];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x84], eax;
	__asm        fild   dword ptr [ebp-0x84];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0x88], eax;
	__asm        fimul  dword ptr [ebp-0x88];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    near ptr 0x004498B1;
// LINE 395:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x160;
	__asm        call   MRect::NormalizeRect;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x30], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x30];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x2C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    near ptr 0x0044995C;
	__asm        jmp    near ptr 0x00449961;
// LINE 397:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A4], 0xDE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A8], 7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AC], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B0], 0x12;
	__asm        jmp    near ptr 0x0044999A;
// LINE 398:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B4], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B8], 0x12;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BC], 0x10C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C0], 0x3D;
	__asm        jmp    near ptr 0x004499D3;
// LINE 399:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C4], 0xDD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C8], 0x3C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CC], 0x102;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D0], 0x47;
	__asm        jmp    near ptr 0x00449A0C;
// LINE 400:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D4], 0xD2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D8], 0x11;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DC], 0xDD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E0], 0x46;
	__asm        jmp    near ptr 0x00449A45;
// LINE 401:
	__asm        jmp    near ptr 0x00449A4A;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00449a54
void DialWindow::~DialWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F738;
// LINE 408:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DestroyImage;
// LINE 409:
	__asm        jmp    near ptr 0x00449A76;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00449a83
int32_t DialWindow::Initialize() {
// LINE 419:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 420:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x00449AA9;
// LINE 421:
}

// FUNCTION: COPTER_D 0x00449aae
void DialWindow::InitializeCachedSettings() {
// LINE 431:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0xFFFFFC18;
// LINE 432:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0xFFFFFC18;
// LINE 433:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0xFFFFFC18;
// LINE 434:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x180], 0xFFFFFC18;
// LINE 435:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0xFFFFFC18;
// LINE 436:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x188], 0;
// LINE 437:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18C], 0xFFFFFC18;
// LINE 438:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x190], 0xFFFFFC18;
// LINE 439:
	__asm        jmp    near ptr 0x00449B27;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB0];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jne    near ptr 0x00449B9E;
// LINE 440:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    near ptr 0x00449B64;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-4];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     near ptr 0x00449B94;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    near ptr 0x00449B99;
	__asm        jmp    near ptr 0x00449B99;
// LINE 441:
	__asm        jmp    near ptr 0x00449BFD;
// LINE 442:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    near ptr 0x00449BC8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     near ptr 0x00449BF8;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    near ptr 0x00449BFD;
	__asm        jmp    near ptr 0x00449BFD;
// LINE 444:
	__asm        jmp    near ptr 0x00449C02;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE4];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jne    near ptr 0x00449C79;
// LINE 445:
	__asm        mov    dword ptr [ebp-0xC], 1;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    near ptr 0x00449C3F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     near ptr 0x00449C6F;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    near ptr 0x00449C74;
	__asm        jmp    near ptr 0x00449C74;
// LINE 446:
	__asm        jmp    near ptr 0x00449CD8;
// LINE 447:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    near ptr 0x00449CA3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     near ptr 0x00449CD3;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    near ptr 0x00449CD8;
	__asm        jmp    near ptr 0x00449CD8;
// LINE 449:
	__asm        jmp    near ptr 0x00449CDD;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x118];
	__asm        cmp    [eax+0x110], ecx;
	__asm        jne    near ptr 0x00449D54;
// LINE 450:
	__asm        mov    dword ptr [ebp-0x14], 2;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    near ptr 0x00449D1A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x14];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     near ptr 0x00449D4A;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    near ptr 0x00449D4F;
	__asm        jmp    near ptr 0x00449D4F;
// LINE 451:
	__asm        jmp    near ptr 0x00449DB3;
// LINE 452:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    near ptr 0x00449D7E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     near ptr 0x00449DAE;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    near ptr 0x00449DB3;
	__asm        jmp    near ptr 0x00449DB3;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 454:
	__asm        jmp    near ptr 0x00449DC5;
}

// FUNCTION: COPTER_D 0x00449dca
void DialWindow::DestroyImage() {
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 465:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x00449E2C;
// LINE 466:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00449E22;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449E1D;
	__asm        jmp    near ptr 0x00449E22;
// LINE 467:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 469:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x00449E83;
// LINE 470:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00449E76;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449E71;
	__asm        jmp    near ptr 0x00449E76;
// LINE 471:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 473:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x00449EDA;
// LINE 474:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00449ECD;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449EC8;
	__asm        jmp    near ptr 0x00449ECD;
// LINE 475:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 477:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x00449F28;
// LINE 478:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00449F1E;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   BitmappedFont::~BitmappedFont;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449F19;
	__asm        jmp    near ptr 0x00449F1E;
// LINE 479:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 481:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x00449F7F;
// LINE 482:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00449F72;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449F6D;
	__asm        jmp    near ptr 0x00449F72;
// LINE 483:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 485:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     near ptr 0x00449FD6;
// LINE 486:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00449FC9;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00449FC4;
	__asm        jmp    near ptr 0x00449FC9;
// LINE 487:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 489:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     near ptr 0x0044A02D;
// LINE 490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0044A020;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044A01B;
	__asm        jmp    near ptr 0x0044A020;
// LINE 491:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x0044A084;
// LINE 494:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0044A077;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044A072;
	__asm        jmp    near ptr 0x0044A077;
// LINE 495:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 497:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     near ptr 0x0044A0EC;
// LINE 498:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044A0A7;
	__asm        jmp    near ptr 0x0044A0AC;
	__asm        jmp    near ptr 0x0044A0CD;
	__asm        jmp    near ptr 0x0044A0BB;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0044A0CD;
// LINE 499:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 500:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 501:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 503:
	__asm        jmp    near ptr 0x0044A0F1;
}

// FUNCTION: COPTER_D 0x0044a0f6
void DialWindow::TurnOffSpotlightCommand(int32_t nIndex) {
// LINE 510:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    near ptr 0x0044A136;
// LINE 511:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    near ptr 0x0044A131;
// LINE 512:
	__asm        jmp    near ptr 0x0044A1CD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    near ptr 0x0044A16A;
// LINE 513:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    near ptr 0x0044A165;
// LINE 514:
	__asm        jmp    near ptr 0x0044A1CD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    near ptr 0x0044A19E;
// LINE 515:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    near ptr 0x0044A199;
// LINE 516:
	__asm        jmp    near ptr 0x0044A1CD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    near ptr 0x0044A1CD;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    near ptr 0x0044A1CD;
// LINE 518:
	__asm        jmp    near ptr 0x0044A1D2;
}

// FUNCTION: COPTER_D 0x0044a1d9
void DialWindow::TurnOnSpotlightCommand(int32_t nIndex) {
// LINE 526:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jne    near ptr 0x0044A219;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x4C], cl;
	__asm        jmp    near ptr 0x0044A214;
// LINE 528:
	__asm        jmp    near ptr 0x0044A2B0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 1;
	__asm        jne    near ptr 0x0044A24D;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x52];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x52], cl;
	__asm        jmp    near ptr 0x0044A248;
// LINE 530:
	__asm        jmp    near ptr 0x0044A2B0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 2;
	__asm        jne    near ptr 0x0044A281;
// LINE 531:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x4E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x4E], cl;
	__asm        jmp    near ptr 0x0044A27C;
// LINE 532:
	__asm        jmp    near ptr 0x0044A2B0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 3;
	__asm        jne    near ptr 0x0044A2B0;
// LINE 533:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x50];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x50], cl;
	__asm        jmp    near ptr 0x0044A2B0;
// LINE 534:
	__asm        jmp    near ptr 0x0044A2B5;
}

// FUNCTION: COPTER_D 0x0044a2bc
int32_t DialWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szFullPath[260];

// LINE 546:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 550:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    near ptr 0x0044A38C;
// LINE 551:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x0044A34C;
	__asm        jmp    near ptr 0x0044A312;
	__asm        jmp    near ptr 0x0044A317;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x0044A359;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 552:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x0044A38C;
// LINE 554:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x34];
// LINE 557:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044A430;
// LINE 558:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F64];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 559:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x0044A3FB;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x0044A40B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 560:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+8];
// LINE 562:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jne    near ptr 0x0044A4AF;
// LINE 563:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F68];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 564:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     near ptr 0x0044A49F;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044A4AF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 566:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        jne    near ptr 0x0044A52E;
// LINE 567:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F70];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 568:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     near ptr 0x0044A51E;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x0044A52E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 570:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x0044A5B9;
// LINE 571:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F6C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   8;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 572:
	__asm        push   0x54;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x118], eax;
	__asm        cmp    dword ptr [ebp-0x118], 0;
	__asm        je     near ptr 0x0044A596;
	__asm        push   1;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x118];
	__asm        call   BitmappedFont::BitmappedFont;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0044A5A3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 573:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx];
// LINE 575:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        jne    near ptr 0x0044A638;
// LINE 576:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F74];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 577:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x0044A628;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x0044A638;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 579:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0044A6DC;
// LINE 580:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F78];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 581:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     near ptr 0x0044A6A7;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x120];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x0044A6B7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 582:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+8];
// LINE 584:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        jne    near ptr 0x0044A75B;
// LINE 585:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598F7C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 586:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x124], eax;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     near ptr 0x0044A74B;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x124];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x0044A75B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 588:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 590:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    near ptr 0x0044A77D;
// LINE 591:
}

// FUNCTION: COPTER_D 0x0044a784
void DialWindow::DrawCurrentDamage() {
	int32_t nSourceImageX;
	int32_t i;
	static const int32_t nDamageArray[6][2] = { /* <data@0x00598f80> */ };
	int32_t nDamageInRangeOf0to15;

// LINE 618:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x98];
	__asm        lea    ebx, [ebx+ebx*2];
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumDamage;
	__asm        add    esp, 4;
	__asm        mov    ecx, eax;
	__asm        mov    eax, ebx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    nDamageInRangeOf0to15, eax;
// LINE 619:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044A7C6;
	__asm        inc    i;
	__asm        cmp    i, 6;
	__asm        jge    near ptr 0x0044A859;
// LINE 620:
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    [eax*8+0x598F80], ecx;
	__asm        jg     near ptr 0x0044A7EF;
// LINE 621:
	__asm        mov    nSourceImageX, 0;
// LINE 622:
	__asm        jmp    near ptr 0x0044A815;
	__asm        mov    eax, i;
	__asm        mov    ecx, nDamageInRangeOf0to15;
	__asm        cmp    [eax*8+0x598F84], ecx;
	__asm        jg     near ptr 0x0044A80E;
// LINE 623:
	__asm        mov    nSourceImageX, 0xF;
// LINE 624:
	__asm        jmp    near ptr 0x0044A815;
// LINE 625:
	__asm        mov    nSourceImageX, 0x1E;
// LINE 629:
	__asm        push   0xE;
	__asm        mov    eax, nSourceImageX;
	__asm        add    eax, 0xF;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, nSourceImageX;
	__asm        push   eax;
	__asm        push   0x3F;
	__asm        mov    eax, i;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        add    eax, eax;
	__asm        add    eax, 0xB;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 630:
	__asm        jmp    near ptr 0x0044A7C3;
// LINE 631:
	__asm        jmp    near ptr 0x0044A85E;
}

// FUNCTION: COPTER_D 0x0044a863
long DialWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	int32_t i;

// LINE 640:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0044A969;
// LINE 641:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     near ptr 0x0044A8AB;
// LINE 642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 643:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044A8BA;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0044A969;
// LINE 644:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     near ptr 0x0044A92D;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     near ptr 0x0044A92D;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    near ptr 0x0044A92D;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    near ptr 0x0044A92D;
	__asm        jmp    near ptr 0x0044A932;
	__asm        jmp    near ptr 0x0044A964;
	__asm        jmp    near ptr 0x0044A941;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0044A964;
// LINE 645:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1E4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 646:
	__asm        jmp    near ptr 0x0044A969;
// LINE 648:
	__asm        jmp    near ptr 0x0044A8B7;
// LINE 650:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044A973;
// LINE 651:
}

// FUNCTION: COPTER_D 0x0044a97a
long DialWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 658:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044A999;
	__asm        jmp    near ptr 0x0044A99E;
	__asm        jmp    near ptr 0x0044A9BF;
	__asm        jmp    near ptr 0x0044A9AD;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044A9BF;
// LINE 659:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 660:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     near ptr 0x0044A9EE;
// LINE 661:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 662:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E4], 0xFFFFFFFF;
// LINE 664:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044A9F8;
// LINE 665:
}

// FUNCTION: COPTER_D 0x0044a9ff
long DialWindow::DoCursorMove(long nCursorX, long nCursorY) {
	int32_t i;
	long lNewSpotlightCommand;

// LINE 676:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1E4], 0;
	__asm        jl     near ptr 0x0044AB0E;
// LINE 677:
	__asm        mov    i, 0;
	__asm        mov    lNewSpotlightCommand, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044AA31;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0044AAC8;
// LINE 678:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1A4], edx;
	__asm        jg     near ptr 0x0044AAA4;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1A8], edx;
	__asm        jg     near ptr 0x0044AAA4;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0x1AC], edx;
	__asm        jle    near ptr 0x0044AAA4;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0x1B0], edx;
	__asm        jle    near ptr 0x0044AAA4;
	__asm        jmp    near ptr 0x0044AAA9;
	__asm        jmp    near ptr 0x0044AAC3;
	__asm        jmp    near ptr 0x0044AAB8;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044AAC3;
// LINE 679:
	__asm        mov    eax, i;
	__asm        mov    lNewSpotlightCommand, eax;
// LINE 680:
	__asm        jmp    near ptr 0x0044AAC8;
// LINE 682:
	__asm        jmp    near ptr 0x0044AA2E;
// LINE 683:
	__asm        cmp    lNewSpotlightCommand, 0;
	__asm        jl     near ptr 0x0044AB0E;
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewSpotlightCommand;
	__asm        cmp    [eax+0x1E4], ecx;
	__asm        je     near ptr 0x0044AB0E;
// LINE 684:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1E4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOffSpotlightCommand;
// LINE 685:
	__asm        mov    eax, lNewSpotlightCommand;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::TurnOnSpotlightCommand;
// LINE 686:
	__asm        mov    eax, lNewSpotlightCommand;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1E4], eax;
// LINE 689:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044AB18;
// LINE 690:
}

// FUNCTION: COPTER_D 0x0044ab1f
int32_t DialWindow::ComposeSelf() {
	class MPoint ptSpotLightPositionLocalCoordinates;
	long lStringLength;
	static const long lFrameCounter = { /* <data@0x00598fb0> */ };
	class MPoint ptSpotLightBackPositionCoordinates;
	char szMoneyString[16];

// LINE 700:
	__asm        jmp    near ptr 0x0044AB36;
	__asm        jmp    near ptr 0x0044AB3B;
// LINE 701:
	__asm        jmp    near ptr 0x0044AB40;
	__asm        jmp    near ptr 0x0044AB45;
// LINE 704:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x0044AB5C;
// LINE 705:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044B9DB;
// LINE 707:
	__asm        inc    dword ptr ds:[0x598FB0];
// LINE 708:
	__asm        test   byte ptr ds:[0x598FB0], 1;
	__asm        je     near ptr 0x0044B974;
// LINE 709:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        cmp    [eax+0xD0], ecx;
	__asm        je     near ptr 0x0044ABAE;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    ecx, this;
	__asm        call   DialWindow::DrawCurrentDamage;
	__asm        jmp    near ptr 0x0044ABB3;
// LINE 712:
	__asm        mov    ecx, this;
	__asm        call   DialWindow::SetNewDialPositions;
// LINE 715:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044ABE6;
	__asm        jmp    near ptr 0x0044ABD3;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0044AEF4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x5C], eax;
// LINE 716:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0xA4], eax;
	__asm        fimul  dword ptr [ebp-0xA4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xC0];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xB4];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x58], ecx;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xA8], eax;
	__asm        fild   dword ptr [ebp-0xA8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        fimul  dword ptr [ebp-0xAC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC4];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xCC], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xC8];
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xB0], eax;
	__asm        fild   dword ptr [ebp-0xB0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xB4], eax;
	__asm        fimul  dword ptr [ebp-0xB4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD0], ebx;
	__asm        jmp    near ptr 0x0044ACFD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044AD1A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        jmp    near ptr 0x0044AD7B;
// LINE 717:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x140];
	__asm        cmp    [eax+0x148], ecx;
	__asm        jge    near ptr 0x0044AE2F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x148], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14C];
	__asm        cmp    [eax+0x144], ecx;
	__asm        jle    near ptr 0x0044AE83;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14C], eax;
	__asm        jmp    near ptr 0x0044AE88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-0x7C], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x7C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x140], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x148], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x78];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x144], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x14C], eax;
	__asm        jmp    near ptr 0x0044AEEF;
	__asm        jmp    near ptr 0x0044AEF4;
// LINE 719:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044AF1C;
	__asm        jmp    near ptr 0x0044AF09;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        je     near ptr 0x0044B248;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x68], eax;
// LINE 720:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        fild   dword ptr [ebp-0xB8];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    [ebp-0xBC], eax;
	__asm        fimul  dword ptr [ebp-0xBC];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0xF4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE8];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x64], ecx;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC0], eax;
	__asm        fild   dword ptr [ebp-0xC0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xC4], eax;
	__asm        fimul  dword ptr [ebp-0xC4];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF8];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x100], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0xFC];
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xC8], eax;
	__asm        fild   dword ptr [ebp-0xC8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    [ebp-0xCC], eax;
	__asm        fimul  dword ptr [ebp-0xCC];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x104], ebx;
	__asm        jmp    near ptr 0x0044B033;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x108];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044B050;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 0;
	__asm        jmp    near ptr 0x0044B0B1;
// LINE 721:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x150];
	__asm        cmp    [eax+0x158], ecx;
	__asm        jge    near ptr 0x0044B16B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x158], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x154];
	__asm        cmp    [eax+0x15C], ecx;
	__asm        jge    near ptr 0x0044B1C5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15C], eax;
	__asm        jmp    near ptr 0x0044B1CA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    [ebp-0x88], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x88];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x150], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x158], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x84];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x154], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x15C], eax;
	__asm        jmp    near ptr 0x0044B243;
	__asm        jmp    near ptr 0x0044B248;
// LINE 723:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044B270;
	__asm        jmp    near ptr 0x0044B25D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        je     near ptr 0x0044B59C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x74], eax;
// LINE 724:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    [ebp-0xD0], eax;
	__asm        fild   dword ptr [ebp-0xD0];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        mov    [ebp-0xD4], eax;
	__asm        fimul  dword ptr [ebp-0xD4];
	__asm        mov    eax, this;
	__asm        fmul   dword ptr [eax+0x128];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11C];
	__asm        add    ecx, eax;
	__asm        mov    [ebp-0x70], ecx;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xD8], eax;
	__asm        fild   dword ptr [ebp-0xD8];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xDC], eax;
	__asm        fimul  dword ptr [ebp-0xDC];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x12C];
	__asm        add    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x134], ecx;
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x130];
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0xE0], eax;
	__asm        fild   dword ptr [ebp-0xE0];
	__asm        fmul   qword ptr ds:[0x58F720];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x120];
	__asm        mov    [ebp-0xE4], eax;
	__asm        fimul  dword ptr [ebp-0xE4];
	__asm        call   0x0056EBE8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x138], ebx;
	__asm        jmp    near ptr 0x0044B387;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x13C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x74];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x0044B3A4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x74];
	__asm        call   dword ptr [eax+0x54];
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0;
	__asm        jmp    near ptr 0x0044B405;
// LINE 725:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x160];
	__asm        cmp    [eax+0x168], ecx;
	__asm        jge    near ptr 0x0044B4BF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x168], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x16C];
	__asm        cmp    [eax+0x164], ecx;
	__asm        jle    near ptr 0x0044B519;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x16C], eax;
	__asm        jmp    near ptr 0x0044B51E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x124];
	__asm        mov    [ebp-0x94], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x94];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x160], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x168], eax;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x90];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x164], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x16C], eax;
	__asm        jmp    near ptr 0x0044B597;
	__asm        jmp    near ptr 0x0044B59C;
// LINE 727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044B5C3;
	__asm        call   GetUserMoney;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x180];
	__asm        je     near ptr 0x0044B623;
// LINE 728:
	__asm        call   GetUserMoney;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x180], eax;
// LINE 729:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x180];
	__asm        push   eax;
	__asm        push   0x59906C;
	__asm        lea    eax, szMoneyString[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
	__asm        mov    lStringLength, eax;
// LINE 731:
	__asm        push   8;
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        lea    eax, szMoneyString[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x170;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   BitmappedFont::DrawTextLineFormatNoClip;
// LINE 734:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044B663;
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B492C];
	__asm        cmp    [eax+0x190], ecx;
	__asm        jne    near ptr 0x0044B663;
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B4930];
	__asm        cmp    [eax+0x18C], ecx;
	__asm        je     near ptr 0x0044B7D2;
// LINE 736:
	__asm        mov    eax, ds:[0x5B492C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x190], eax;
// LINE 737:
	__asm        mov    eax, ds:[0x5B4930];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18C], eax;
// LINE 742:
	__asm        mov    eax, ds:[0x5B4930];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.x, eax;
// LINE 743:
	__asm        mov    eax, ds:[0x5B492C];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, 0x1F40000;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        neg    eax;
	__asm        mov    ptSpotLightPositionLocalCoordinates.y, eax;
// LINE 744:
	__asm        mov    eax, 0xA;
	__asm        sub    eax, ptSpotLightPositionLocalCoordinates.x;
	__asm        mov    ptSpotLightBackPositionCoordinates.x, eax;
// LINE 745:
	__asm        mov    eax, 0xE;
	__asm        sub    eax, ptSpotLightPositionLocalCoordinates.y;
	__asm        mov    ptSpotLightBackPositionCoordinates.y, eax;
// LINE 746:
	__asm        add    ptSpotLightPositionLocalCoordinates.x, 0xE1;
// LINE 747:
	__asm        add    ptSpotLightPositionLocalCoordinates.y, 0x21;
// LINE 748:
	__asm        push   0x4B;
	__asm        push   0x104;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        push   0x14;
	__asm        push   0xD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 751:
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        add    eax, 0x25;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        add    eax, 0x1F;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.y;
	__asm        push   eax;
	__asm        mov    eax, ptSpotLightBackPositionCoordinates.x;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        push   0xDF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x94];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x94];
	__asm        call   dword ptr [edx+0xC];
// LINE 753:
	__asm        jmp    near ptr 0x0044B756;
	__asm        jmp    near ptr 0x0044B75B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0044B784;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0044B7A3;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        lea    eax, ptSpotLightPositionLocalCoordinates.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0x2C];
// LINE 756:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044B80C;
	__asm        call   GetUserPoints;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x184];
	__asm        je     near ptr 0x0044B974;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x188], 0;
	__asm        jne    near ptr 0x0044B974;
// LINE 757:
// Block start:
	const int32_t iGuageEnd;
	int32_t nXPosition;
	int32_t i;
	const int32_t nYPosition;
	int32_t iLitEnd;
	__asm        mov    nXPosition, 0x14;
// LINE 758:
	__asm        mov    iGuageEnd, 0xF;
	__asm        mov    nYPosition, 0x25;
// LINE 760:
	__asm        call   GetUserPoints;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x184], eax;
// LINE 761:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x184], 0x3E8;
	__asm        jle    near ptr 0x0044B868;
// LINE 762:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x184], 0x3E8;
// LINE 763:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x188], 1;
// LINE 765:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x184];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x3E8;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    iLitEnd, eax;
// LINE 767:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044B898;
	__asm        inc    i;
	__asm        add    nXPosition, 5;
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    near ptr 0x0044B8DE;
// LINE 768:
	__asm        push   0xD;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0044B891;
// LINE 769:
	__asm        cmp    i, 0xF;
	__asm        jge    near ptr 0x0044B974;
// LINE 771:
	__asm        push   0xD;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
// LINE 772:
	__asm        inc    i;
// LINE 773:
	__asm        add    nXPosition, 5;
// LINE 776:
	__asm        jmp    near ptr 0x0044B930;
	__asm        inc    i;
	__asm        add    nXPosition, 5;
	__asm        cmp    i, 0xF;
	__asm        jge    near ptr 0x0044B974;
// LINE 777:
	__asm        push   0xD;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x25;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0044B929;
// LINE 784:
// Block end:
	__asm        jmp    near ptr 0x0044B979;
	__asm        jmp    near ptr 0x0044B97E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xC];
// LINE 786:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044B9DB;
// LINE 787:
}

// FUNCTION: COPTER_D 0x0044b9e0
int32_t DialWindow::DoesWindowNeedUpdating() {
// LINE 798:
	__asm        jmp    near ptr 0x0044B9F1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10C], 0;
	__asm        jne    near ptr 0x0044BA45;
	__asm        jmp    near ptr 0x0044BA06;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD8], 0;
	__asm        jne    near ptr 0x0044BA45;
	__asm        jmp    near ptr 0x0044BA1B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x0044BA45;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        cmp    [eax+0xD0], ecx;
	__asm        je     near ptr 0x0044BA4F;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044BA51;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044BA56;
// LINE 799:
}

// FUNCTION: COPTER_D 0x0044ba5b
void DialWindow::SetNewDialPositions() {
	long lNewFuelLight;
	static const long lFrameCounter = { /* <data@0x00598fb4> */ };
	long lNewAltitude;

// LINE 816:
	__asm        mov    eax, ds:[0x598FB4];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    near ptr 0x0044BC32;
// LINE 817:
	__asm        push   0x640000;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    eax, [eax*8+0x5B49B8];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x320];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x10], eax;
// LINE 818:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jge    near ptr 0x0044BAE5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+0xA8], ecx;
	__asm        je     near ptr 0x0044BB15;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        jmp    near ptr 0x0044BB29;
	__asm        jmp    near ptr 0x0044BC32;
	__asm        jmp    near ptr 0x0044BB29;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044BC32;
// LINE 819:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x148];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x144];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 820:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jle    near ptr 0x0044BB99;
// LINE 821:
	__asm        mov    lNewFuelLight, 0;
// LINE 822:
	__asm        jmp    near ptr 0x0044BBBC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xA;
	__asm        jle    near ptr 0x0044BBB5;
// LINE 823:
	__asm        mov    lNewFuelLight, 1;
// LINE 824:
	__asm        jmp    near ptr 0x0044BBBC;
// LINE 825:
	__asm        mov    lNewFuelLight, 2;
// LINE 826:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewFuelLight;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jne    near ptr 0x0044BBDE;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0x1E;
	__asm        jge    near ptr 0x0044BC32;
// LINE 827:
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
// LINE 828:
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    [ebp-0xC], eax;
	__asm        inc    lNewFuelLight;
	__asm        mov    eax, lNewFuelLight;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x3B;
	__asm        push   0x88;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC];
// LINE 832:
	__asm        mov    eax, ds:[0x598FB4];
	__asm        and    al, 3;
	__asm        cmp    al, 3;
	__asm        jne    near ptr 0x0044BE3A;
// LINE 833:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        sub    eax, [ecx+0x150];
	__asm        sar    eax, 0x10;
	__asm        mov    lNewAltitude, eax;
	__asm        mov    eax, lNewAltitude;
	__asm        mov    [ebp-0x18], eax;
// LINE 834:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jge    near ptr 0x0044BC85;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x18];
	__asm        cmp    [eax+0xDC], ecx;
	__asm        je     near ptr 0x0044BCB5;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 1;
	__asm        jmp    near ptr 0x0044BCC9;
	__asm        jmp    near ptr 0x0044BD6A;
	__asm        jmp    near ptr 0x0044BCC9;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0044BD6A;
// LINE 835:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x158];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x154];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x150];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 836:
	__asm        mov    eax, lNewAltitude;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x64;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, 0x5A;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lNewAltitude, edx;
// LINE 839:
	__asm        mov    eax, lNewAltitude;
	__asm        add    eax, 9;
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    eax, lNewAltitude;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x22;
	__asm        push   0x12C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC];
// LINE 841:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x128];
	__asm        sar    eax, 0x14;
	__asm        push   eax;
	__asm        call   abs;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x118], ecx;
	__asm        jge    near ptr 0x0044BDA2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x118];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+0x110], ecx;
	__asm        je     near ptr 0x0044BDD2;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x110], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 1;
	__asm        jmp    near ptr 0x0044BDE6;
	__asm        jmp    near ptr 0x0044BE3A;
	__asm        jmp    near ptr 0x0044BDE6;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0044BE3A;
// LINE 842:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x168];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x160];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 845:
	__asm        inc    dword ptr ds:[0x598FB4];
// LINE 846:
	__asm        jmp    near ptr 0x0044BE45;
}

// FUNCTION: COPTER_D 0x0044be4a
void PassengerWindow::PassengerWindow(class MRect& rectNewPosition, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FB8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x2B;
	__asm        mov    eax, rectNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044BEFF;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x0044BEFF;
	__asm        jmp    near ptr 0x0044BF04;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0044BF23;
	__asm        jmp    near ptr 0x0044BF28;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, ds:[0x598FBC];
	__asm        mov    [ebp-0x10], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044BFF0;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0044BF6B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0044BFC7;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0044BFC2;
	__asm        jmp    near ptr 0x0044BFD0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044BFDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x0044BFFD;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        jmp    near ptr 0x0044C00F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F800;
// LINE 911:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 912:
	__asm        jmp    near ptr 0x0044C028;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044c032
void PassengerWindow::~PassengerWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F800;
// LINE 920:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DestroyImage;
// LINE 921:
	__asm        jmp    near ptr 0x0044C054;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0044C0E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044C0E9;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0044C0C9;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0044C0CE;
	__asm        jmp    near ptr 0x0044C0D3;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C0E4;
	__asm        jmp    near ptr 0x0044C0E9;
	__asm        jmp    near ptr 0x0044C0EE;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0044C11C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C121;
	__asm        jmp    near ptr 0x0044C126;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044c133
int32_t PassengerWindow::Initialize() {
// LINE 931:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 932:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0044C159;
// LINE 933:
}

// FUNCTION: COPTER_D 0x0044c15e
void PassengerWindow::InitializeCachedSettings() {
// LINE 941:
	__asm        cmp    dword ptr ds:[0x5B4968], 0;
	__asm        je     near ptr 0x0044C18A;
// LINE 942:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerSetChanged;
	__asm        add    esp, 4;
// LINE 943:
	__asm        jmp    near ptr 0x0044C18F;
}

// FUNCTION: COPTER_D 0x0044c194
int32_t PassengerWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	class basic_string<char> sPassengerPath;

// LINE 951:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044C1F0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0044C1E5;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sPassengerPath.reference, eax;
	__asm        jmp    near ptr 0x0044C1F7;
	__asm        mov    sPassengerPath.reference, 0;
	__asm        mov    sPassengerPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0044C203;
// LINE 954:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 955:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x0044C236;
// LINE 956:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 958:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        jne    near ptr 0x0044C3B6;
// LINE 959:
	__asm        lea    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA4;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x0044C266;
// LINE 960:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044C37C;
	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0044C2A2;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C2A7;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sPassengerPath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0044C2BF;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0044C329;
	__asm        jmp    near ptr 0x0044C2D1;
	__asm        jmp    near ptr 0x0044C2D6;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0044C2F5;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0044C301;
	__asm        jmp    near ptr 0x0044C301;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x0044C301;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0044C329;
	__asm        jmp    near ptr 0x0044C32E;
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0044C337;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0044C342;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0044C35D;
	__asm        jmp    near ptr 0x0044C362;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    near ptr 0x0044C389;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 961:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x0044C3B6;
// LINE 962:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+8];
// LINE 964:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 966:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sPassengerPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0044C453;
	__asm        mov    eax, sPassengerPath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0044C453;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0044C433;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0044C438;
	__asm        jmp    near ptr 0x0044C43D;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C44E;
	__asm        jmp    near ptr 0x0044C453;
	__asm        jmp    near ptr 0x0044C458;
	__asm        cmp    sPassengerPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0044C47A;
	__asm        mov    eax, sPassengerPath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C47F;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0044C487;
// LINE 967:
}

// FUNCTION: COPTER_D 0x0044c48e
void PassengerWindow::DestroyImage() {
// LINE 975:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     near ptr 0x0044C4F9;
// LINE 977:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044C4EC;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044C4E7;
	__asm        jmp    near ptr 0x0044C4EC;
// LINE 978:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 980:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044C50C;
	__asm        jmp    near ptr 0x0044C511;
	__asm        jmp    near ptr 0x0044C53F;
	__asm        jmp    near ptr 0x0044C520;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044C53F;
// LINE 981:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 982:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 984:
	__asm        jmp    near ptr 0x0044C544;
}

// FUNCTION: COPTER_D 0x0044c549
int32_t PassengerWindow::ComposeSelf() {
// LINE 991:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x0044C569;
// LINE 992:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044C962;
// LINE 997:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0044C586;
// LINE 998:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044C962;
// LINE 999:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1001:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     near ptr 0x0044C76B;
// LINE 1002:
// Block start:
	unsigned long lTimeElapsed;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0044C5B6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x0044C645;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    near ptr 0x0044C5E9;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0044C630;
	__asm        jmp    near ptr 0x0044C630;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044C619;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0044C630;
	__asm        jmp    near ptr 0x0044C630;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0044C630;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        add    [ebp-0x48], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044C68C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0;
	__asm        je     near ptr 0x0044C68C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    near ptr 0x0044C697;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    lTimeElapsed, eax;
	__asm        jmp    near ptr 0x0044C697;
// LINE 1004:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 1;
	__asm        jne    near ptr 0x0044C6C7;
// LINE 1006:
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        add    eax, 0x2B;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 1008:
	__asm        jmp    near ptr 0x0044C6E6;
// LINE 1010:
	__asm        mov    ecx, 0x73;
	__asm        mov    eax, lTimeElapsed;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ebx, 0x1F4;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        sub    ecx, eax;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x78], ecx;
// LINE 1013:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x2B;
	__asm        jg     near ptr 0x0044C719;
// LINE 1014:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x2B;
// LINE 1015:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1016:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 1018:
	__asm        jmp    near ptr 0x0044C747;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0x73;
	__asm        jl     near ptr 0x0044C747;
// LINE 1019:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x73;
// LINE 1020:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1021:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1024:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        sub    ecx, 0x2B;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1028:
// Block end:
	__asm        jmp    near ptr 0x0044C770;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1031:
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DrawPassengers;
// LINE 1033:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     near ptr 0x0044C958;
// LINE 1034:
// Block start:
	struct tagHeliPassengerData* tempHeliPassengerData;
	class MRect rectSource;
	class MPoint ptGraphicIconPosition;
	long lPassengerIndex;
	__asm        jmp    near ptr 0x0044C7C8;
	__asm        jmp    near ptr 0x0044C7CD;
// LINE 1035:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1036:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    eax, tempHeliPassengerData;
	__asm        push   eax;
	__asm        call   HeliPassengerGetIndexInHeli;
	__asm        add    esp, 8;
	__asm        mov    lPassengerIndex, eax;
// LINE 1037:
	__asm        jmp    near ptr 0x0044C7F8;
	__asm        mov    dword ptr [ebp-0x2C], 0xD;
	__asm        mov    dword ptr [ebp-0x28], 0x10;
	__asm        jmp    near ptr 0x0044C80B;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        sub    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        sub    eax, [ebp-0x40];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0044C83A;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ptGraphicIconPosition.x, eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ptGraphicIconPosition.y, eax;
	__asm        jmp    near ptr 0x0044C84B;
	__asm        jmp    near ptr 0x0044C850;
// LINE 1039:
	__asm        cmp    lPassengerIndex, 0xFFFFFFFF;
	__asm        je     near ptr 0x0044C912;
// LINE 1040:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        sub    eax, [ecx+0x154];
	__asm        cmp    eax, 0x50000;
	__asm        jle    near ptr 0x0044C8A3;
// LINE 1041:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1043:
	__asm        jmp    near ptr 0x0044C8D1;
// LINE 1045:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, lPassengerIndex;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1047:
	__asm        lea    eax, ptGraphicIconPosition.y;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1048:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptGraphicIconPosition.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1050:
	__asm        jmp    near ptr 0x0044C958;
// LINE 1051:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 1052:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044C932;
	__asm        jmp    near ptr 0x0044C937;
	__asm        jmp    near ptr 0x0044C958;
	__asm        jmp    near ptr 0x0044C946;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0044C958;
// LINE 1053:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1056:
// Block end:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044C962;
// LINE 1057:
}

// FUNCTION: COPTER_D 0x0044c967
void PassengerWindow::DrawPassengers() {
	class MRect rectDestination;
	int32_t i;
	struct tagHeliPassengerData* tempHeliPassengerData;
	int32_t nCurrentSeat;
	class MRect rectSource;
	int32_t bSeats[16];

// LINE 1064:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1067:
	__asm        jmp    near ptr 0x0044C985;
	__asm        jmp    near ptr 0x0044C98A;
// LINE 1068:
	__asm        jmp    near ptr 0x0044C98F;
	__asm        jmp    near ptr 0x0044C994;
// LINE 1071:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044C9A3;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0044C9BD;
// LINE 1072:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jmp    near ptr 0x0044C9A0;
// LINE 1074:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044C9CC;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0044CB1D;
// LINE 1075:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0044C9F2;
// LINE 1076:
	__asm        jmp    near ptr 0x0044C9C9;
// LINE 1077:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1079:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x20];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x1C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1080:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1081:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1083:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    near ptr 0x0044CB0D;
// LINE 1084:
	__asm        jmp    near ptr 0x0044CA84;
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    near ptr 0x0044CAA8;
// LINE 1085:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, rectDestination.top;
	__asm        add    eax, rectSource.top;
	__asm        mov    rectSource.bottom, eax;
// LINE 1086:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x94];
	__asm        cmp    [eax+ecx+0x28], edx;
	__asm        jne    near ptr 0x0044CAD7;
// LINE 1087:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1089:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1092:
	__asm        mov    eax, nCurrentSeat;
	__asm        mov    dword ptr [ebp+eax*4-0x40], 1;
// LINE 1093:
	__asm        jmp    near ptr 0x0044C9C9;
// LINE 1096:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::GetRectOfPassengerGraphic;
// LINE 1097:
	__asm        mov    nCurrentSeat, 0;
	__asm        jmp    near ptr 0x0044CB3C;
	__asm        inc    nCurrentSeat;
	__asm        mov    eax, tempHeliPassengerData;
	__asm        mov    ecx, nCurrentSeat;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    near ptr 0x0044CC09;
// LINE 1098:
	__asm        mov    eax, nCurrentSeat;
	__asm        cmp    dword ptr [ebp+eax*4-0x40], 0;
	__asm        jne    near ptr 0x0044CC04;
// LINE 1099:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x20];
	__asm        add    eax, 0xE;
	__asm        mov    rectDestination.left, eax;
// LINE 1100:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, this;
	__asm        add    ecx, [eax+0x24];
	__asm        add    ecx, 6;
	__asm        mov    rectDestination.top, ecx;
// LINE 1101:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectDestination.top;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jle    near ptr 0x0044CC04;
// LINE 1102:
	__asm        jmp    near ptr 0x0044CBAA;
	__asm        mov    eax, rectSource.bottom;
	__asm        sub    eax, rectSource.top;
	__asm        add    eax, rectDestination.top;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x2C];
	__asm        jle    near ptr 0x0044CBCE;
// LINE 1103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, rectDestination.top;
	__asm        add    eax, rectSource.top;
	__asm        mov    rectSource.bottom, eax;
// LINE 1105:
	__asm        mov    eax, rectSource.bottom;
	__asm        push   eax;
	__asm        mov    eax, rectSource.right;
	__asm        push   eax;
	__asm        mov    eax, rectSource.top;
	__asm        push   eax;
	__asm        mov    eax, rectSource.left;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 1108:
	__asm        jmp    near ptr 0x0044CB39;
// LINE 1109:
	__asm        mov    eax, tempHeliPassengerData;
	__asm        push   eax;
	__asm        call   HeliPassengerClearChanged;
	__asm        add    esp, 4;
// LINE 1110:
	__asm        jmp    near ptr 0x0044CC1A;
}

// FUNCTION: COPTER_D 0x0044cc1f
void PassengerWindow::GetRectOfPassengerGraphic(int32_t face, int32_t nPassengerExpression, class MRect& rectPosition) {
// LINE 1129:
	__asm        mov    eax, face;
	__asm        lea    eax, [eax+eax*2+3];
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx], eax;
// LINE 1130:
	__asm        mov    eax, nPassengerExpression;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+4], eax;
// LINE 1131:
	__asm        mov    eax, rectPosition;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x1B;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+8], eax;
// LINE 1132:
	__asm        mov    eax, rectPosition;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, 0x21;
	__asm        mov    ecx, rectPosition;
	__asm        mov    [ecx+0xC], eax;
// LINE 1133:
	__asm        jmp    near ptr 0x0044CC6C;
}

// FUNCTION: COPTER_D 0x0044cc73
int32_t PassengerWindow::DoesWindowNeedUpdating() {
// LINE 1146:
	__asm        jmp    near ptr 0x0044CC84;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0044CCC9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0044CCC9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0044CCC9;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerHasChanged;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0044CCD3;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044CCD5;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044CCDA;
// LINE 1147:
}

// FUNCTION: COPTER_D 0x0044ccdf
void PassengerWindow::MoveToUpPosition() {
// LINE 1155:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     near ptr 0x0044CD00;
// LINE 1156:
	__asm        jmp    near ptr 0x0044CDCC;
// LINE 1158:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x0044CD1F;
// LINE 1159:
	__asm        jmp    near ptr 0x0044CD24;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x0044CD39;
	__asm        jmp    near ptr 0x0044CDBA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    near ptr 0x0044CD62;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CDB5;
	__asm        jmp    near ptr 0x0044CDB5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044CD98;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CDB5;
	__asm        jmp    near ptr 0x0044CDB5;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CDB5;
	__asm        jmp    near ptr 0x0044CDBA;
// LINE 1160:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 1;
// LINE 1161:
	__asm        jmp    near ptr 0x0044CDCC;
}

// FUNCTION: COPTER_D 0x0044cdd1
void PassengerWindow::MoveToDownPosition() {
// LINE 1168:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        je     near ptr 0x0044CDF2;
// LINE 1169:
	__asm        jmp    near ptr 0x0044CEBE;
// LINE 1171:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x0044CE11;
// LINE 1172:
	__asm        jmp    near ptr 0x0044CE16;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        je     near ptr 0x0044CE2B;
	__asm        jmp    near ptr 0x0044CEAC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    near ptr 0x0044CE54;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CEA7;
	__asm        jmp    near ptr 0x0044CEA7;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044CE8A;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CEA7;
	__asm        jmp    near ptr 0x0044CEA7;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0044CEA7;
	__asm        jmp    near ptr 0x0044CEAC;
// LINE 1173:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0xFFFFFFFF;
// LINE 1174:
	__asm        jmp    near ptr 0x0044CEBE;
}

// FUNCTION: COPTER_D 0x0044cec3
void PassengerWindow::TogglePosition() {
// LINE 1181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    near ptr 0x0044CEEF;
// LINE 1182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1183:
	__asm        jmp    near ptr 0x0044CEFD;
// LINE 1184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1185:
	__asm        jmp    near ptr 0x0044CF02;
}

// FUNCTION: COPTER_D 0x0044cf07
long PassengerWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lPassengerID;
	class MRect rectButtonPositionUp;
	class MRect rectButtonPositionDown;

// LINE 1193:
	__asm        jmp    near ptr 0x0044CF18;
	__asm        mov    rectButtonPositionUp.left, 0xAD;
	__asm        mov    rectButtonPositionUp.top, 4;
	__asm        mov    rectButtonPositionUp.right, 0xBA;
	__asm        mov    rectButtonPositionUp.bottom, 0xE;
	__asm        jmp    near ptr 0x0044CF39;
// LINE 1194:
	__asm        jmp    near ptr 0x0044CF3E;
	__asm        mov    rectButtonPositionDown.left, 0xAD;
	__asm        mov    rectButtonPositionDown.top, 0xE;
	__asm        mov    rectButtonPositionDown.right, 0xBA;
	__asm        mov    rectButtonPositionDown.bottom, 0x1A;
	__asm        jmp    near ptr 0x0044CF5F;
// LINE 1197:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.left, eax;
	__asm        jg     near ptr 0x0044CF94;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.top, eax;
	__asm        jg     near ptr 0x0044CF94;
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionUp.right, eax;
	__asm        jle    near ptr 0x0044CF94;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionUp.bottom, eax;
	__asm        jle    near ptr 0x0044CF94;
	__asm        jmp    near ptr 0x0044CF99;
	__asm        jmp    near ptr 0x0044CFC8;
	__asm        jmp    near ptr 0x0044CFA8;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0044CFC8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 1;
	__asm        jne    near ptr 0x0044CFC8;
// LINE 1198:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1199:
	__asm        jmp    near ptr 0x0044D0B2;
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.left, eax;
	__asm        jg     near ptr 0x0044CFFD;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.top, eax;
	__asm        jg     near ptr 0x0044CFFD;
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectButtonPositionDown.right, eax;
	__asm        jle    near ptr 0x0044CFFD;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectButtonPositionDown.bottom, eax;
	__asm        jle    near ptr 0x0044CFFD;
	__asm        jmp    near ptr 0x0044D002;
	__asm        jmp    near ptr 0x0044D031;
	__asm        jmp    near ptr 0x0044D011;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0044D031;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x0044D031;
// LINE 1200:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1201:
	__asm        jmp    near ptr 0x0044D0B2;
	__asm        lea    eax, lPassengerID;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PassengerWindow::DoesPositionHitPassenger;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0044D0B2;
// LINE 1203:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044D065;
	__asm        jmp    near ptr 0x0044D0B2;
	__asm        jmp    near ptr 0x0044D065;
	__asm        jmp    near ptr 0x0044D074;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x0044D0B2;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0044D0B2;
// LINE 1205:
	__asm        mov    eax, lPassengerID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
// LINE 1206:
	__asm        mov    eax, nCursorX;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 1207:
	__asm        mov    eax, nCursorY;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 1214:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D0BC;
// LINE 1215:
}

// FUNCTION: COPTER_D 0x0044d0c3
long PassengerWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1222:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044D0E2;
	__asm        jmp    near ptr 0x0044D0E7;
	__asm        jmp    near ptr 0x0044D108;
	__asm        jmp    near ptr 0x0044D0F6;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044D108;
// LINE 1223:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1225:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0xFFFFFFFF;
	__asm        je     near ptr 0x0044D155;
// LINE 1226:
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0044D148;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        call   GetOutOfHeli;
	__asm        add    esp, 4;
// LINE 1228:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0xFFFFFFFF;
// LINE 1231:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D15F;
// LINE 1232:
}

// FUNCTION: COPTER_D 0x0044d166
long PassengerWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 1239:
	__asm        mov    eax, nCursorX;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 1240:
	__asm        mov    eax, nCursorY;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 1241:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D194;
// LINE 1242:
}

// FUNCTION: COPTER_D 0x0044d19b
int32_t PassengerWindow::DoesPositionHitPassenger(long nCursorX, long nCursorY, long& lPassengerID) {
	int32_t i;
	int32_t nCurrentSeat;
	struct tagHeliPassengerData* tempHeliPassengerData;
	class MRect rectCurrent;

// LINE 1251:
	__asm        jmp    near ptr 0x0044D1AC;
	__asm        jmp    near ptr 0x0044D1B1;
// LINE 1253:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        mov    tempHeliPassengerData, eax;
// LINE 1255:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044D1CD;
	__asm        inc    i;
	__asm        cmp    i, 0x10;
	__asm        jge    near ptr 0x0044D2B6;
// LINE 1256:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        cmp    dword ptr [eax+ecx+0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0044D1F3;
// LINE 1257:
	__asm        jmp    near ptr 0x0044D1CA;
// LINE 1258:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x2C];
	__asm        mov    nCurrentSeat, eax;
// LINE 1259:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        mov    eax, edx;
	__asm        shl    eax, 5;
	__asm        add    eax, 0xE;
	__asm        mov    rectCurrent.left, eax;
// LINE 1260:
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, nCurrentSeat;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x14];
	__asm        lea    ecx, [eax*8];
	__asm        sub    ecx, eax;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        add    ecx, 6;
	__asm        mov    rectCurrent.top, ecx;
// LINE 1261:
	__asm        mov    eax, rectCurrent.left;
	__asm        add    eax, 0x1B;
	__asm        mov    rectCurrent.right, eax;
// LINE 1262:
	__asm        mov    eax, rectCurrent.top;
	__asm        add    eax, 0x21;
	__asm        mov    rectCurrent.bottom, eax;
// LINE 1263:
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.left, eax;
	__asm        jg     near ptr 0x0044D27E;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.top, eax;
	__asm        jg     near ptr 0x0044D27E;
	__asm        mov    eax, nCursorX;
	__asm        cmp    rectCurrent.right, eax;
	__asm        jle    near ptr 0x0044D27E;
	__asm        mov    eax, nCursorY;
	__asm        cmp    rectCurrent.bottom, eax;
	__asm        jle    near ptr 0x0044D27E;
	__asm        jmp    near ptr 0x0044D283;
	__asm        jmp    near ptr 0x0044D2B1;
	__asm        jmp    near ptr 0x0044D292;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0044D2B1;
// LINE 1264:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, tempHeliPassengerData;
	__asm        mov    eax, [eax+ecx+0x28];
	__asm        mov    ecx, lPassengerID;
	__asm        mov    [ecx], eax;
// LINE 1265:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D2BD;
// LINE 1267:
	__asm        jmp    near ptr 0x0044D1CA;
// LINE 1268:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044D2BD;
// LINE 1269:
}

// FUNCTION: COPTER_D 0x0044d2c4
void MapWindow::MapWindow(class MRect& rectNewPosition, long lNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FC0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::MFont;
	__asm        mov    dword ptr [ebp-4], 6;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        mov    [ebp-8], eax;
	__asm        dec    dword ptr [ebp-4];
	__asm        js     near ptr 0x0044D366;
	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    near ptr 0x0044D34C;
	__asm        jmp    near ptr 0x0044D36B;
	__asm        jmp    near ptr 0x0044D370;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0x1E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10C], 0x7E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0xAF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0x8B;
	__asm        jmp    near ptr 0x0044D3A9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F8D8;
// LINE 1308:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x36;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0x45;
	__asm        jmp    near ptr 0x0044D3EB;
// LINE 1309:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0x36;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0x45;
	__asm        jmp    near ptr 0x0044D424;
// LINE 1310:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0x49;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0x58;
	__asm        jmp    near ptr 0x0044D45D;
// LINE 1311:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDC], 0x49;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE0], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE4], 0x58;
	__asm        jmp    near ptr 0x0044D496;
// LINE 1312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE8], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEC], 0x5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF0], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF4], 0x6B;
	__asm        jmp    near ptr 0x0044D4CF;
// LINE 1313:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF8], 0x1B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFC], 0x5C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x100], 0x2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x104], 0x6B;
	__asm        jmp    near ptr 0x0044D508;
// LINE 1315:
	__asm        mov    eax, ds:[0x606988];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 1316:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::SetFontCharacteristics;
// LINE 1317:
	__asm        mov    ecx, this;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        add    ecx, 0x8C;
	__asm        call   dword ptr [eax];
// LINE 1319:
	__asm        jmp    near ptr 0x0044D540;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044d54a
void MapWindow::~MapWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F8D8;
// LINE 1326:
	__asm        mov    ecx, this;
	__asm        call   MapWindow::DestroyImage;
// LINE 1327:
	__asm        jmp    near ptr 0x0044D56C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::~MFont;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044d587
int32_t MapWindow::Initialize() {
// LINE 1338:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 1339:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0044D5AD;
// LINE 1340:
}

// FUNCTION: COPTER_D 0x0044d5b2
void MapWindow::InitializeCachedSettings() {
// LINE 1347:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
// LINE 1348:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0xFFFFFFFF;
// LINE 1350:
	__asm        jmp    near ptr 0x0044D5E4;
}

// FUNCTION: COPTER_D 0x0044d5e9
int32_t MapWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szFullPath[260];

// LINE 1362:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 1363:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x0044D63D;
// LINE 1364:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 1365:
	__asm        mov    byte ptr [ebp-0x108], 0x6F;
	__asm        mov    byte ptr [ebp-0x107], 0xDA;
	__asm        mov    byte ptr [ebp-0x106], 0xFF;
	__asm        jmp    near ptr 0x0044D657;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x110], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ecx, [ebp-0x110];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0044D67A;
// LINE 1366:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        jne    near ptr 0x0044D6F0;
// LINE 1367:
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FC4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1368:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x0044D6E3;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x0044D6F0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1370:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1371:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x0044D712;
// LINE 1372:
}

// FUNCTION: COPTER_D 0x0044d719
void MapWindow::DestroyImage() {
// LINE 1382:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0044D773;
// LINE 1383:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044D769;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044D764;
	__asm        jmp    near ptr 0x0044D769;
// LINE 1384:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1386:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1387:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044D78E;
	__asm        jmp    near ptr 0x0044D793;
	__asm        jmp    near ptr 0x0044D7C1;
	__asm        jmp    near ptr 0x0044D7A2;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044D7C1;
// LINE 1388:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 1391:
	__asm        jmp    near ptr 0x0044D7C6;
}

// FUNCTION: COPTER_D 0x0044d7cb
int32_t MapWindow::ComposeSelf() {
	struct MISSION_DATA* md;
	static const int32_t lFrameCounter = { /* <data@0x00598fc8> */ };
	long lNewMissionID;

// LINE 1405:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x0044D7EB;
// LINE 1406:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044D947;
// LINE 1408:
	__asm        inc    dword ptr ds:[0x598FC8];
// LINE 1409:
	__asm        test   byte ptr ds:[0x598FC8], 1;
	__asm        je     near ptr 0x0044D845;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx];
// LINE 1411:
	__asm        jmp    near ptr 0x0044D813;
	__asm        jmp    near ptr 0x0044D818;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   S3MapBlit;
	__asm        add    esp, 8;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+4];
// LINE 1414:
	__asm        mov    eax, ds:[0x598FC8];
	__asm        and    al, 7;
	__asm        cmp    al, 7;
	__asm        jne    near ptr 0x0044D8F5;
// LINE 1415:
	__asm        call   S3MissionGetCurr;
	__asm        mov    md, eax;
	__asm        cmp    md, 0;
	__asm        je     near ptr 0x0044D874;
// LINE 1416:
	__asm        mov    eax, md;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    lNewMissionID, eax;
// LINE 1418:
	__asm        jmp    near ptr 0x0044D87B;
// LINE 1419:
	__asm        mov    lNewMissionID, 0xFFFFFFFF;
// LINE 1421:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewMissionID;
	__asm        cmp    [eax+0x88], ecx;
	__asm        je     near ptr 0x0044D8F5;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0x31;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 1424:
	__asm        cmp    md, 0;
	__asm        je     near ptr 0x0044D8E9;
// LINE 1425:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x108;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, md;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 1426:
	__asm        mov    eax, lNewMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
// LINE 1431:
	__asm        jmp    near ptr 0x0044D8FA;
	__asm        jmp    near ptr 0x0044D8FF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 1433:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044D947;
// LINE 1434:
}

// FUNCTION: COPTER_D 0x0044d94c
void MapWindow::DrawButton(int32_t nButton, int32_t nState) {
	class MPoint ptDestination;
	class MRect rectSource;

// LINE 1441:
	__asm        jmp    near ptr 0x0044D95D;
	__asm        jmp    near ptr 0x0044D962;
// LINE 1442:
	__asm        jmp    near ptr 0x0044D967;
	__asm        jmp    near ptr 0x0044D96C;
// LINE 1445:
	__asm        cmp    nButton, 0;
	__asm        jne    near ptr 0x0044D9DA;
// LINE 1446:
	__asm        mov    ptDestination.x, 9;
// LINE 1447:
	__asm        mov    ptDestination.y, 0x36;
// LINE 1448:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044D9B4;
	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044D9AF;
	__asm        jmp    near ptr 0x0044D9D5;
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044D9D5;
// LINE 1450:
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        cmp    nButton, 1;
	__asm        jne    near ptr 0x0044DA48;
// LINE 1451:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1452:
	__asm        mov    ptDestination.y, 0x36;
// LINE 1453:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044DA22;
	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044DA1D;
	__asm        jmp    near ptr 0x0044DA43;
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x10;
	__asm        jmp    near ptr 0x0044DA43;
// LINE 1455:
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        cmp    nButton, 2;
	__asm        jne    near ptr 0x0044DAB6;
// LINE 1456:
	__asm        mov    ptDestination.x, 9;
// LINE 1457:
	__asm        mov    ptDestination.y, 0x49;
// LINE 1458:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044DA90;
	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DA8B;
	__asm        jmp    near ptr 0x0044DAB1;
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DAB1;
// LINE 1460:
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        cmp    nButton, 3;
	__asm        jne    near ptr 0x0044DB24;
// LINE 1461:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1462:
	__asm        mov    ptDestination.y, 0x49;
// LINE 1463:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044DAFE;
	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DAF9;
	__asm        jmp    near ptr 0x0044DB1F;
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0x10;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x20;
	__asm        jmp    near ptr 0x0044DB1F;
// LINE 1465:
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        cmp    nButton, 4;
	__asm        jne    near ptr 0x0044DB92;
// LINE 1466:
	__asm        mov    ptDestination.x, 9;
// LINE 1467:
	__asm        mov    ptDestination.y, 0x5C;
// LINE 1468:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044DB6C;
	__asm        mov    rectSource.left, 0x20;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x30;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DB67;
	__asm        jmp    near ptr 0x0044DB8D;
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x10;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DB8D;
// LINE 1470:
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        cmp    nButton, 5;
	__asm        jne    near ptr 0x0044DBFB;
// LINE 1471:
	__asm        mov    ptDestination.x, 0x1B;
// LINE 1472:
	__asm        mov    ptDestination.y, 0x5C;
// LINE 1473:
	__asm        cmp    nState, 0;
	__asm        je     near ptr 0x0044DBDA;
	__asm        mov    rectSource.left, 0x30;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x40;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DBD5;
	__asm        jmp    near ptr 0x0044DBFB;
	__asm        mov    rectSource.left, 0x10;
	__asm        mov    rectSource.top, 0x20;
	__asm        mov    rectSource.right, 0x20;
	__asm        mov    rectSource.bottom, 0x30;
	__asm        jmp    near ptr 0x0044DBFB;
// LINE 1475:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1476:
	__asm        jmp    near ptr 0x0044DC20;
}

// FUNCTION: COPTER_D 0x0044dc27
long MapWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long __formal) {
	int32_t i;

// LINE 1490:
	__asm        mov    eax, nCursorX;
	__asm        cmp    ds:[0x5B5258], eax;
	__asm        jg     near ptr 0x0044DCDD;
	__asm        mov    eax, nCursorX;
	__asm        cmp    ds:[0x5B5260], eax;
	__asm        jl     near ptr 0x0044DCDD;
	__asm        mov    eax, nCursorY;
	__asm        cmp    ds:[0x5B525C], eax;
	__asm        jg     near ptr 0x0044DCDD;
	__asm        mov    eax, nCursorY;
	__asm        cmp    ds:[0x5B5264], eax;
	__asm        jl     near ptr 0x0044DCDD;
// LINE 1492:
	__asm        mov    eax, nCursorY;
	__asm        sub    eax, ds:[0x5B525C];
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        sub    eax, ds:[0x5B5258];
	__asm        push   eax;
	__asm        call   S3MapCursorDown;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jl     near ptr 0x0044DCD8;
// LINE 1494:
	__asm        jmp    near ptr 0x0044DCA9;
	__asm        mov    eax, nCursorX;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, nCursorY;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0044DCBA;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1496:
	__asm        jmp    near ptr 0x0044DF18;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE8], ecx;
	__asm        jg     near ptr 0x0044DD2A;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xEC], ecx;
	__asm        jg     near ptr 0x0044DD2A;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF0], ecx;
	__asm        jle    near ptr 0x0044DD2A;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xF4], ecx;
	__asm        jle    near ptr 0x0044DD2A;
	__asm        jmp    near ptr 0x0044DD2F;
	__asm        jmp    near ptr 0x0044DD8F;
	__asm        jmp    near ptr 0x0044DD3E;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0044DD8F;
// LINE 1497:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x0044DD5A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        jmp    near ptr 0x0044DD64;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1499:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        call   S3MapCommandCurrentMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1501:
	__asm        jmp    near ptr 0x0044DF18;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xF8], ecx;
	__asm        jg     near ptr 0x0044DDDC;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xFC], ecx;
	__asm        jg     near ptr 0x0044DDDC;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x100], ecx;
	__asm        jle    near ptr 0x0044DDDC;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x104], ecx;
	__asm        jle    near ptr 0x0044DDDC;
	__asm        jmp    near ptr 0x0044DDE1;
	__asm        jmp    near ptr 0x0044DE41;
	__asm        jmp    near ptr 0x0044DDF0;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044DE41;
// LINE 1502:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    near ptr 0x0044DE0C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 1;
	__asm        jmp    near ptr 0x0044DE16;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1503:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        push   5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1504:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        call   S3MapCommandOtherMissionVehicleFilter;
	__asm        add    esp, 4;
// LINE 1506:
	__asm        jmp    near ptr 0x0044DF18;
// LINE 1507:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044DE50;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0044DF18;
// LINE 1508:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xA8], edx;
	__asm        jg     near ptr 0x0044DEC3;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xAC], edx;
	__asm        jg     near ptr 0x0044DEC3;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorX;
	__asm        cmp    [eax+ecx+0xB0], edx;
	__asm        jle    near ptr 0x0044DEC3;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    edx, nCursorY;
	__asm        cmp    [eax+ecx+0xB4], edx;
	__asm        jle    near ptr 0x0044DEC3;
	__asm        jmp    near ptr 0x0044DEC8;
	__asm        jmp    near ptr 0x0044DF13;
	__asm        jmp    near ptr 0x0044DED7;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0044DF13;
// LINE 1509:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1510:
	__asm        push   1;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1511:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 1512:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044DF22;
// LINE 1514:
	__asm        jmp    near ptr 0x0044DE4D;
// LINE 1516:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044DF22;
// LINE 1517:
}

// FUNCTION: COPTER_D 0x0044df29
long MapWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long __formal) {
// LINE 1528:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044DF48;
	__asm        jmp    near ptr 0x0044DF4D;
	__asm        jmp    near ptr 0x0044E1A6;
	__asm        jmp    near ptr 0x0044DF5C;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044E1A6;
// LINE 1529:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jl     near ptr 0x0044E1A6;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 4;
	__asm        jge    near ptr 0x0044E1A6;
// LINE 1531:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x0044E009;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     near ptr 0x0044DFEB;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jg     near ptr 0x0044DFEB;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    near ptr 0x0044DFEB;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    near ptr 0x0044DFEB;
	__asm        jmp    near ptr 0x0044DFF0;
	__asm        jmp    near ptr 0x0044E009;
	__asm        jmp    near ptr 0x0044DFFF;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0044E009;
// LINE 1532:
	__asm        call   S3MapCommandZoomOut;
// LINE 1533:
	__asm        jmp    near ptr 0x0044E175;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 1;
	__asm        jne    near ptr 0x0044E084;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jg     near ptr 0x0044E066;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xBC], ecx;
	__asm        jg     near ptr 0x0044E066;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC0], ecx;
	__asm        jle    near ptr 0x0044E066;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jle    near ptr 0x0044E066;
	__asm        jmp    near ptr 0x0044E06B;
	__asm        jmp    near ptr 0x0044E084;
	__asm        jmp    near ptr 0x0044E07A;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044E084;
// LINE 1534:
	__asm        call   S3MapCommandZoomIn;
// LINE 1535:
	__asm        jmp    near ptr 0x0044E175;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 2;
	__asm        jne    near ptr 0x0044E0FF;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xC8], ecx;
	__asm        jg     near ptr 0x0044E0E1;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xCC], ecx;
	__asm        jg     near ptr 0x0044E0E1;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD0], ecx;
	__asm        jle    near ptr 0x0044E0E1;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xD4], ecx;
	__asm        jle    near ptr 0x0044E0E1;
	__asm        jmp    near ptr 0x0044E0E6;
	__asm        jmp    near ptr 0x0044E0FF;
	__asm        jmp    near ptr 0x0044E0F5;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0044E0FF;
// LINE 1536:
	__asm        call   S3MapCommandPreviousMission;
// LINE 1537:
	__asm        jmp    near ptr 0x0044E175;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 3;
	__asm        jne    near ptr 0x0044E175;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xD8], ecx;
	__asm        jg     near ptr 0x0044E15C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xDC], ecx;
	__asm        jg     near ptr 0x0044E15C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xE0], ecx;
	__asm        jle    near ptr 0x0044E15C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xE4], ecx;
	__asm        jle    near ptr 0x0044E15C;
	__asm        jmp    near ptr 0x0044E161;
	__asm        jmp    near ptr 0x0044E175;
	__asm        jmp    near ptr 0x0044E170;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044E175;
// LINE 1538:
	__asm        call   S3MapCommandNextMission;
// LINE 1539:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1540:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0xFFFFFFFF;
// LINE 1541:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044E1B0;
// LINE 1550:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044E1B0;
// LINE 1551:
}

// FUNCTION: COPTER_D 0x0044e1b7
int32_t MapWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lMessageData;

// LINE 1560:
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x0044E200;
	__asm        cmp    lMessage, 0x10003;
	__asm        jne    near ptr 0x0044E200;
// LINE 1561:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    lMessageData, eax;
// LINE 1562:
	__asm        cmp    lMessageData, 1;
	__asm        jne    near ptr 0x0044E200;
// LINE 1563:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        call   AutomobileClass::S3AutoMessage;
	__asm        add    esp, 8;
// LINE 1565:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044E20A;
// LINE 1566:
}

// FUNCTION: COPTER_D 0x0044e211
void MapWindow::CreateAutoMessageSelectionPopupWindow(int32_t nAutoID, int32_t nType, class MPoint& ptPosition) {
	int32_t StringID;
	class PopupMenuWindow* tempPopupMenuWindow;

// LINE 1575:
	__asm        mov    eax, ptPosition;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, ptPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 1578:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044E2BA;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        inc    eax;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, ptPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0044E279;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0044E296;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A968];
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    near ptr 0x0044E2C1;
	__asm        mov    tempPopupMenuWindow, 0;
// LINE 1579:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1580:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 1582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
	__asm        mov    StringID, eax;
// LINE 1583:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, StringID;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1584:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x60;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1586:
	__asm        jmp    near ptr 0x0044E326;
}

// FUNCTION: COPTER_D 0x0044e32d
int32_t MapWindow::GetStringIDForVehicleName(int32_t nAutoID) {
	long lCarModel;

// LINE 1595:
	__asm        cmp    nAutoID, 0x46;
	__asm        jl     near ptr 0x0044E34A;
// LINE 1596:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1598:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    eax, [eax+4];
	__asm        mov    lCarModel, eax;
	__asm        jmp    near ptr 0x0044E35F;
// LINE 1604:
	__asm        cmp    lCarModel, 0x7A;
	__asm        je     near ptr 0x0044E3A4;
	__asm        cmp    lCarModel, 0x7D;
	__asm        je     near ptr 0x0044E3A4;
	__asm        cmp    lCarModel, 0x7E;
	__asm        je     near ptr 0x0044E3A4;
	__asm        cmp    lCarModel, 0x12A;
	__asm        je     near ptr 0x0044E3A4;
	__asm        cmp    lCarModel, 0x12B;
	__asm        je     near ptr 0x0044E3A4;
	__asm        cmp    lCarModel, 0x12C;
	__asm        jne    near ptr 0x0044E3D1;
// LINE 1606:
	__asm        mov    eax, nAutoID;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x0044E3C2;
// LINE 1607:
	__asm        mov    eax, 0x5B;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1608:
	__asm        mov    eax, 0x5A;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1610:
	__asm        jmp    near ptr 0x0044E43C;
	__asm        cmp    lCarModel, 0x11E;
	__asm        jne    near ptr 0x0044E3ED;
// LINE 1611:
	__asm        mov    eax, 0x5C;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1612:
	__asm        jmp    near ptr 0x0044E43C;
	__asm        cmp    lCarModel, 0x11F;
	__asm        jne    near ptr 0x0044E409;
// LINE 1613:
	__asm        mov    eax, 0x5E;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1614:
	__asm        jmp    near ptr 0x0044E43C;
	__asm        cmp    lCarModel, 0x11C;
	__asm        jne    near ptr 0x0044E425;
// LINE 1615:
	__asm        mov    eax, 0x5F;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1616:
	__asm        jmp    near ptr 0x0044E43C;
	__asm        cmp    lCarModel, 0x11D;
	__asm        jne    near ptr 0x0044E43C;
// LINE 1617:
	__asm        mov    eax, 0x5D;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1618:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044E443;
// LINE 1619:
}

// FUNCTION: COPTER_D 0x0044e44a
void EquipmentPanelWindow::EquipmentPanelWindow(char * szImageFileName, class MRect& rectNewPosition, long lNewID, struct CommandSystem* myNewCommandSystem, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner) {
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, lNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    dword ptr [ebp-4], 4;
	__asm        mov    eax, this;
	__asm        add    eax, 0x74;
	__asm        mov    [ebp-8], eax;
	__asm        dec    dword ptr [ebp-4];
	__asm        js     near ptr 0x0044E4A0;
	__asm        mov    ecx, [ebp-8];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-8], 0x10;
	__asm        jmp    near ptr 0x0044E486;
	__asm        jmp    near ptr 0x0044E4A5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, myNewCommandSystem;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F9B0;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044E5E8;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x77;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x18;
	__asm        jmp    near ptr 0x0044E538;
// LINE 1670:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x18;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x77;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x27;
	__asm        jmp    near ptr 0x0044E571;
// LINE 1671:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0x62;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0x1A;
	__asm        jmp    near ptr 0x0044E5AA;
// LINE 1672:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0xE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0x20;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0x24;
	__asm        jmp    near ptr 0x0044E5E3;
// LINE 1674:
	__asm        jmp    near ptr 0x0044E6E2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0044E62A;
// LINE 1675:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x28;
	__asm        jmp    near ptr 0x0044E625;
// LINE 1677:
	__asm        jmp    near ptr 0x0044E6E2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x0044E6A5;
// LINE 1678:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x19;
	__asm        jmp    near ptr 0x0044E667;
// LINE 1679:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x19;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x63;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x29;
	__asm        jmp    near ptr 0x0044E6A0;
// LINE 1681:
	__asm        jmp    near ptr 0x0044E6E2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    near ptr 0x0044E6E2;
// LINE 1682:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x4D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x28;
	__asm        jmp    near ptr 0x0044E6E2;
// LINE 1684:
	__asm        jmp    near ptr 0x0044E6E7;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0044e6f1
void EquipmentPanelWindow::~EquipmentPanelWindow() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58F9B0;
// LINE 1691:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DestroyImage;
// LINE 1692:
	__asm        jmp    near ptr 0x0044E713;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x0044e720
int32_t EquipmentPanelWindow::Initialize() {
// LINE 1700:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 1701:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
	__asm        jmp    near ptr 0x0044E746;
// LINE 1702:
}

// FUNCTION: COPTER_D 0x0044e74b
void EquipmentPanelWindow::InitializeCachedSettings() {
// LINE 1708:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
// LINE 1710:
	__asm        jmp    near ptr 0x0044E776;
}

// FUNCTION: COPTER_D 0x0044e77b
int32_t EquipmentPanelWindow::CreateImage(int32_t bResizeWindowToFitImage) {
	char szPath[260];

// LINE 1720:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044E81C;
// LINE 1721:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        jne    near ptr 0x0044E81C;
// LINE 1722:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FCC];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1723:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x0044E80C;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC], eax;
	__asm        jmp    near ptr 0x0044E81C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 1726:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        jne    near ptr 0x0044E91C;
// LINE 1727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044E85D;
// LINE 1728:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FD0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1729:
	__asm        jmp    near ptr 0x0044E8A4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x0044E88B;
// LINE 1730:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FD8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1731:
	__asm        jmp    near ptr 0x0044E8A4;
// LINE 1732:
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x598FD4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 1733:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10C], eax;
	__asm        cmp    dword ptr [ebp-0x10C], 0;
	__asm        je     near ptr 0x0044E8E7;
	__asm        lea    eax, szPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x0044E8F7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 1734:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+8];
// LINE 1736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC4];
// LINE 1738:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
	__asm        jmp    near ptr 0x0044E944;
// LINE 1739:
}

// FUNCTION: COPTER_D 0x0044e94b
void EquipmentPanelWindow::DestroyImage() {
// LINE 1746:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     near ptr 0x0044E9AE;
// LINE 1747:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044E9A1;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044E99C;
	__asm        jmp    near ptr 0x0044E9A1;
// LINE 1748:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 1750:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x0044EA05;
// LINE 1751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044E9F8;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0044E9F3;
	__asm        jmp    near ptr 0x0044E9F8;
// LINE 1752:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
// LINE 1754:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 1755:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044EA20;
	__asm        jmp    near ptr 0x0044EA25;
	__asm        jmp    near ptr 0x0044EA53;
	__asm        jmp    near ptr 0x0044EA34;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044EA53;
// LINE 1756:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1757:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1759:
	__asm        jmp    near ptr 0x0044EA58;
}

// FUNCTION: COPTER_D 0x0044ea5d
int32_t EquipmentPanelWindow::DrawSelf() {
// LINE 1766:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044EA83;
// LINE 1767:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawBucketWaterGuage;
// LINE 1768:
	__asm        jmp    near ptr 0x0044EA98;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    near ptr 0x0044EA98;
// LINE 1769:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DrawTeargasUsage;
// LINE 1770:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044EAA2;
// LINE 1771:
}

// FUNCTION: COPTER_D 0x0044eaa7
int32_t EquipmentPanelWindow::DoesWindowNeedUpdating() {
	static const long lFrameCounter = { /* <data@0x00598fdc> */ };

// LINE 1780:
	__asm        test   byte ptr ds:[0x598FDC], 4;
	__asm        je     near ptr 0x0044EB52;
// LINE 1781:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044EB1D;
// LINE 1782:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx*8+0x5B4980];
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0xC4];
	__asm        je     near ptr 0x0044EB11;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044EB13;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044EB65;
// LINE 1783:
	__asm        jmp    near ptr 0x0044EB52;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    near ptr 0x0044EB52;
// LINE 1784:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC8];
	__asm        cmp    [eax+0x54], ecx;
	__asm        je     near ptr 0x0044EB4B;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044EB4D;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0044EB65;
// LINE 1786:
	__asm        inc    dword ptr ds:[0x598FDC];
// LINE 1788:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DoesWindowNeedUpdating;
	__asm        jmp    near ptr 0x0044EB65;
// LINE 1789:
}

// FUNCTION: COPTER_D 0x0044eb6a
void EquipmentPanelWindow::DrawButton(int32_t nButton, int32_t nState) {
	class MPoint ptDestination;
	class MRect rectSource;

// LINE 1797:
	__asm        jmp    near ptr 0x0044EB7B;
	__asm        jmp    near ptr 0x0044EB80;
// LINE 1798:
	__asm        jmp    near ptr 0x0044EB85;
	__asm        jmp    near ptr 0x0044EB8A;
// LINE 1800:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044ED67;
// LINE 1801:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x0044EC0B;
// LINE 1802:
	__asm        mov    ptDestination.x, 0x66;
// LINE 1803:
	__asm        mov    ptDestination.y, 0xA;
// LINE 1804:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044EBE5;
// LINE 1805:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EBE0;
// LINE 1806:
	__asm        jmp    near ptr 0x0044EC06;
// LINE 1807:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EC06;
// LINE 1809:
	__asm        jmp    near ptr 0x0044ED62;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    near ptr 0x0044EC7F;
// LINE 1810:
	__asm        mov    ptDestination.x, 0x66;
// LINE 1811:
	__asm        mov    ptDestination.y, 0x18;
// LINE 1812:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044EC59;
// LINE 1813:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EC54;
// LINE 1814:
	__asm        jmp    near ptr 0x0044EC7A;
// LINE 1815:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EC7A;
// LINE 1817:
	__asm        jmp    near ptr 0x0044ED62;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    near ptr 0x0044ECF3;
// LINE 1818:
	__asm        mov    ptDestination.x, 0x4D;
// LINE 1819:
	__asm        mov    ptDestination.y, 5;
// LINE 1820:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044ECCD;
// LINE 1821:
	__asm        mov    rectSource.left, 0x22;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x36;
	__asm        mov    rectSource.bottom, 0x15;
	__asm        jmp    near ptr 0x0044ECC8;
// LINE 1822:
	__asm        jmp    near ptr 0x0044ECEE;
// LINE 1823:
	__asm        mov    rectSource.left, 0x36;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x4A;
	__asm        mov    rectSource.bottom, 0x14;
	__asm        jmp    near ptr 0x0044ECEE;
// LINE 1825:
	__asm        jmp    near ptr 0x0044ED62;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    near ptr 0x0044ED62;
// LINE 1826:
	__asm        mov    ptDestination.x, 0xB;
// LINE 1827:
	__asm        mov    ptDestination.y, 0xF;
// LINE 1828:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044ED41;
// LINE 1829:
	__asm        mov    rectSource.left, 0x22;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x36;
	__asm        mov    rectSource.bottom, 0x15;
	__asm        jmp    near ptr 0x0044ED3C;
// LINE 1830:
	__asm        jmp    near ptr 0x0044ED62;
// LINE 1831:
	__asm        mov    rectSource.left, 0x36;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x4A;
	__asm        mov    rectSource.bottom, 0x14;
	__asm        jmp    near ptr 0x0044ED62;
// LINE 1834:
	__asm        jmp    near ptr 0x0044EED5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x0044EE5C;
// LINE 1835:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    near ptr 0x0044EDE8;
// LINE 1836:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1837:
	__asm        mov    ptDestination.y, 0xB;
// LINE 1838:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044EDC2;
// LINE 1839:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EDBD;
// LINE 1840:
	__asm        jmp    near ptr 0x0044EDE3;
// LINE 1841:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0xE;
	__asm        jmp    near ptr 0x0044EDE3;
// LINE 1843:
	__asm        jmp    near ptr 0x0044EE57;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    near ptr 0x0044EE57;
// LINE 1844:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1845:
	__asm        mov    ptDestination.y, 0x19;
// LINE 1846:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044EE36;
// LINE 1847:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EE31;
// LINE 1848:
	__asm        jmp    near ptr 0x0044EE57;
// LINE 1849:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0xE;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x1D;
	__asm        jmp    near ptr 0x0044EE57;
// LINE 1852:
	__asm        jmp    near ptr 0x0044EED5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        je     near ptr 0x0044EE76;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0044EED5;
// LINE 1853:
	__asm        mov    ptDestination.x, 0x51;
// LINE 1854:
	__asm        mov    ptDestination.y, 0xC;
// LINE 1855:
	__asm        cmp    nState, 0;
	__asm        jne    near ptr 0x0044EEB4;
// LINE 1856:
	__asm        mov    rectSource.left, 0;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x11;
	__asm        mov    rectSource.bottom, 0x18;
	__asm        jmp    near ptr 0x0044EEAF;
// LINE 1857:
	__asm        jmp    near ptr 0x0044EED5;
// LINE 1858:
	__asm        mov    rectSource.left, 0x11;
	__asm        mov    rectSource.top, 0;
	__asm        mov    rectSource.right, 0x22;
	__asm        mov    rectSource.bottom, 0x18;
	__asm        jmp    near ptr 0x0044EED5;
// LINE 1860:
	__asm        lea    eax, rectSource.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1861:
	__asm        jmp    near ptr 0x0044EF00;
}

// FUNCTION: COPTER_D 0x0044ef07
void EquipmentPanelWindow::DrawBucketWaterGuage() {
	const int32_t iGuageEnd;
	int32_t nXPosition;
	int32_t i;
	const int32_t nYPosition;
	int32_t iLitEnd;

// LINE 1869:
	__asm        mov    nXPosition, 0x10;
// LINE 1870:
	__asm        mov    iGuageEnd, 0xB;
	__asm        mov    nYPosition, 0x2B;
// LINE 1872:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x1C0];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx*8+0x5B4980];
	__asm        mov    iLitEnd, eax;
// LINE 1873:
	__asm        mov    eax, iLitEnd;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC4], eax;
// LINE 1875:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044EF75;
	__asm        inc    i;
	__asm        add    nXPosition, 5;
	__asm        mov    eax, i;
	__asm        cmp    iLitEnd, eax;
	__asm        jle    near ptr 0x0044EFB2;
// LINE 1876:
	__asm        push   0xA;
	__asm        push   5;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0044EF6E;
// LINE 1877:
	__asm        cmp    i, 0xB;
	__asm        jge    near ptr 0x0044F036;
// LINE 1879:
	__asm        push   0xA;
	__asm        push   0xA;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1880:
	__asm        inc    i;
// LINE 1881:
	__asm        add    nXPosition, 5;
// LINE 1884:
	__asm        jmp    near ptr 0x0044EFFB;
	__asm        inc    i;
	__asm        add    nXPosition, 5;
	__asm        cmp    i, 0xB;
	__asm        jge    near ptr 0x0044F036;
// LINE 1885:
	__asm        push   0xA;
	__asm        push   0xF;
	__asm        push   0;
	__asm        push   0xA;
	__asm        push   0x2B;
	__asm        mov    eax, nXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xBC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0044EFF4;
// LINE 1887:
	__asm        jmp    near ptr 0x0044F03B;
}

// FUNCTION: COPTER_D 0x0044f040
void EquipmentPanelWindow::DrawTeargasUsage() {
	class MPoint ptDestination;
	class MRect rectSourceDisabled;
	int32_t i;
	class MRect rectSourceEnabled;
	long lTeargasUsed;

// LINE 1894:
	__asm        jmp    near ptr 0x0044F051;
	__asm        mov    rectSourceEnabled.left, 0x22;
	__asm        mov    rectSourceEnabled.top, 0;
	__asm        mov    rectSourceEnabled.right, 0x26;
	__asm        mov    rectSourceEnabled.bottom, 4;
	__asm        jmp    near ptr 0x0044F072;
// LINE 1895:
	__asm        jmp    near ptr 0x0044F077;
	__asm        mov    rectSourceDisabled.left, 0x22;
	__asm        mov    rectSourceDisabled.top, 4;
	__asm        mov    rectSourceDisabled.right, 0x26;
	__asm        mov    rectSourceDisabled.bottom, 8;
	__asm        jmp    near ptr 0x0044F098;
// LINE 1896:
	__asm        jmp    near ptr 0x0044F09D;
	__asm        jmp    near ptr 0x0044F0A2;
// LINE 1900:
	__asm        mov    ebx, 0xA;
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        sub    ebx, [eax+0x54];
	__asm        mov    lTeargasUsed, ebx;
// LINE 1901:
	__asm        cmp    lTeargasUsed, 0;
	__asm        jge    near ptr 0x0044F0C3;
// LINE 1902:
	__asm        mov    lTeargasUsed, 0;
// LINE 1903:
	__asm        cmp    lTeargasUsed, 0xA;
	__asm        jle    near ptr 0x0044F0D4;
// LINE 1904:
	__asm        mov    lTeargasUsed, 0xA;
// LINE 1906:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0044F0E3;
	__asm        inc    i;
	__asm        mov    eax, lTeargasUsed;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0044F148;
// LINE 1907:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1908:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1909:
	__asm        lea    eax, rectSourceDisabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1910:
	__asm        jmp    near ptr 0x0044F0E0;
// LINE 1911:
	__asm        jmp    near ptr 0x0044F150;
	__asm        inc    i;
	__asm        cmp    i, 0xA;
	__asm        jge    near ptr 0x0044F1B3;
// LINE 1912:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+edx*2];
	__asm        shl    eax, 2;
	__asm        add    eax, 0x12;
	__asm        mov    ptDestination.x, eax;
// LINE 1913:
	__asm        mov    ecx, 5;
	__asm        mov    eax, i;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    ecx, [eax+eax*2];
	__asm        lea    ecx, [eax+ecx*4];
	__asm        add    ecx, 0xC;
	__asm        mov    ptDestination.y, ecx;
// LINE 1914:
	__asm        lea    eax, rectSourceEnabled.left;
	__asm        push   eax;
	__asm        lea    eax, ptDestination.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC0];
	__asm        call   dword ptr [edx+0x2C];
// LINE 1915:
	__asm        jmp    near ptr 0x0044F14D;
// LINE 1916:
	__asm        jmp    near ptr 0x0044F1B8;
}

// FUNCTION: COPTER_D 0x0044f1bd
int32_t EquipmentPanelWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1923:
	__asm        cmp    lWindowID, 1;
	__asm        jne    near ptr 0x0044F1EE;
	__asm        cmp    lMessage, 0x10003;
	__asm        jne    near ptr 0x0044F1EE;
// LINE 1924:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   S3PlayMegaphoneMessage;
	__asm        add    esp, 4;
// LINE 1925:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F1F8;
// LINE 1926:
}

// FUNCTION: COPTER_D 0x0044f1ff
long EquipmentPanelWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1933:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0044F3EA;
// LINE 1934:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     near ptr 0x0044F25C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     near ptr 0x0044F25C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x0044F25C;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x0044F25C;
	__asm        jmp    near ptr 0x0044F261;
	__asm        jmp    near ptr 0x0044F282;
	__asm        jmp    near ptr 0x0044F270;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044F282;
// LINE 1935:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 1;
// LINE 1936:
	__asm        jmp    near ptr 0x0044F3E5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     near ptr 0x0044F2CF;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     near ptr 0x0044F2CF;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    near ptr 0x0044F2CF;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    near ptr 0x0044F2CF;
	__asm        jmp    near ptr 0x0044F2D4;
	__asm        jmp    near ptr 0x0044F2F5;
	__asm        jmp    near ptr 0x0044F2E3;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0044F2F5;
// LINE 1937:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 2;
// LINE 1938:
	__asm        jmp    near ptr 0x0044F3E5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x94], ecx;
	__asm        jg     near ptr 0x0044F342;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x98], ecx;
	__asm        jg     near ptr 0x0044F342;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    near ptr 0x0044F342;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA0], ecx;
	__asm        jle    near ptr 0x0044F342;
	__asm        jmp    near ptr 0x0044F347;
	__asm        jmp    near ptr 0x0044F368;
	__asm        jmp    near ptr 0x0044F356;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0044F368;
// LINE 1939:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 3;
// LINE 1940:
	__asm        jmp    near ptr 0x0044F3E5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jg     near ptr 0x0044F3B5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xA8], ecx;
	__asm        jg     near ptr 0x0044F3B5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jle    near ptr 0x0044F3B5;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    near ptr 0x0044F3B5;
	__asm        jmp    near ptr 0x0044F3BA;
	__asm        jmp    near ptr 0x0044F3DB;
	__asm        jmp    near ptr 0x0044F3C9;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0044F3DB;
// LINE 1941:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 4;
// LINE 1942:
	__asm        jmp    near ptr 0x0044F3E5;
// LINE 1943:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1945:
	__asm        jmp    near ptr 0x0044F5F9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 2;
	__asm        jne    near ptr 0x0044F4E3;
// LINE 1946:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     near ptr 0x0044F43B;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     near ptr 0x0044F43B;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x0044F43B;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x0044F43B;
	__asm        jmp    near ptr 0x0044F440;
	__asm        jmp    near ptr 0x0044F461;
	__asm        jmp    near ptr 0x0044F44F;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044F461;
// LINE 1947:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 6;
// LINE 1948:
	__asm        jmp    near ptr 0x0044F4DE;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x84], ecx;
	__asm        jg     near ptr 0x0044F4AE;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x88], ecx;
	__asm        jg     near ptr 0x0044F4AE;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x8C], ecx;
	__asm        jle    near ptr 0x0044F4AE;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x90], ecx;
	__asm        jle    near ptr 0x0044F4AE;
	__asm        jmp    near ptr 0x0044F4B3;
	__asm        jmp    near ptr 0x0044F4D4;
	__asm        jmp    near ptr 0x0044F4C2;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0044F4D4;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 7;
// LINE 1950:
	__asm        jmp    near ptr 0x0044F4DE;
// LINE 1951:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1953:
	__asm        jmp    near ptr 0x0044F5F9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 3;
	__asm        jne    near ptr 0x0044F569;
// LINE 1954:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     near ptr 0x0044F534;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     near ptr 0x0044F534;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x0044F534;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x0044F534;
	__asm        jmp    near ptr 0x0044F539;
	__asm        jmp    near ptr 0x0044F55A;
	__asm        jmp    near ptr 0x0044F548;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0044F55A;
// LINE 1955:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 8;
// LINE 1956:
	__asm        jmp    near ptr 0x0044F564;
// LINE 1957:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1959:
	__asm        jmp    near ptr 0x0044F5F9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0044F5EF;
// LINE 1960:
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     near ptr 0x0044F5BA;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     near ptr 0x0044F5BA;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x0044F5BA;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x0044F5BA;
	__asm        jmp    near ptr 0x0044F5BF;
	__asm        jmp    near ptr 0x0044F5E0;
	__asm        jmp    near ptr 0x0044F5CE;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0044F5E0;
// LINE 1961:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 5;
// LINE 1962:
	__asm        jmp    near ptr 0x0044F5EA;
// LINE 1963:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1965:
	__asm        jmp    near ptr 0x0044F5F9;
// LINE 1966:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1968:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x98];
// LINE 1969:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1970:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        je     near ptr 0x0044F63D;
// LINE 1971:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1972:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F647;
// LINE 1973:
}

// FUNCTION: COPTER_D 0x0044f64e
long EquipmentPanelWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 1981:
	__asm        mov    eax, ds:[0x59A960];
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x0044F66D;
	__asm        jmp    near ptr 0x0044F672;
	__asm        jmp    near ptr 0x0044F693;
	__asm        jmp    near ptr 0x0044F681;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0044F693;
// LINE 1982:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 1983:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        je     near ptr 0x0044F76E;
// LINE 1984:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1987:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        jne    near ptr 0x0044F759;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    near ptr 0x0044F759;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     near ptr 0x0044F71E;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     near ptr 0x0044F71E;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorX;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    near ptr 0x0044F71E;
	__asm        mov    eax, this;
	__asm        mov    ecx, nCursorY;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    near ptr 0x0044F71E;
	__asm        jmp    near ptr 0x0044F723;
	__asm        jmp    near ptr 0x0044F759;
	__asm        jmp    near ptr 0x0044F732;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0044F759;
// LINE 1989:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 5;
// LINE 1990:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlStart;
// LINE 1991:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1993:
	__asm        jmp    near ptr 0x0044F761;
// LINE 1994:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::DoCurrentControlEnd;
// LINE 1995:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 1997:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0044F778;
// LINE 1998:
}

// FUNCTION: COPTER_D 0x0044f77f
void EquipmentPanelWindow::DoCurrentControlStart() {
// LINE 2006:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0044F7A5;
// LINE 2007:
	__asm        jmp    near ptr 0x0044F955;
// LINE 2008:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x0044F7DC;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    near ptr 0x0044F7D7;
// LINE 2010:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    near ptr 0x0044F813;
// LINE 2011:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    near ptr 0x0044F80E;
// LINE 2012:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    near ptr 0x0044F84A;
// LINE 2013:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    near ptr 0x0044F845;
// LINE 2014:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    near ptr 0x0044F881;
// LINE 2015:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    near ptr 0x0044F87C;
// LINE 2016:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    near ptr 0x0044F8B8;
// LINE 2017:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    near ptr 0x0044F8B3;
// LINE 2018:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    near ptr 0x0044F8EF;
// LINE 2019:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    near ptr 0x0044F8EA;
// LINE 2020:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    near ptr 0x0044F926;
// LINE 2021:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        or     cl, 0x20;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    near ptr 0x0044F921;
// LINE 2022:
	__asm        jmp    near ptr 0x0044F950;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 5;
	__asm        jne    near ptr 0x0044F950;
// LINE 2025:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x9C];
// LINE 2026:
	__asm        mov    ecx, this;
	__asm        call   EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow;
// LINE 2028:
	__asm        jmp    near ptr 0x0044F955;
}

// FUNCTION: COPTER_D 0x0044f95a
void EquipmentPanelWindow::DoCurrentControlEnd() {
// LINE 2038:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0044F980;
// LINE 2039:
	__asm        jmp    near ptr 0x0044FB01;
// LINE 2040:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x0044F9B7;
// LINE 2041:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1E];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [eax+0x1E], cl;
	__asm        jmp    near ptr 0x0044F9B2;
// LINE 2042:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 2;
	__asm        jne    near ptr 0x0044F9EE;
// LINE 2043:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x1C];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [eax+0x1C], cl;
	__asm        jmp    near ptr 0x0044F9E9;
// LINE 2044:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 3;
	__asm        jne    near ptr 0x0044FA25;
// LINE 2045:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x20];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [eax+0x20], cl;
	__asm        jmp    near ptr 0x0044FA20;
// LINE 2046:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 4;
	__asm        jne    near ptr 0x0044FA5C;
// LINE 2047:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x26];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [eax+0x26], cl;
	__asm        jmp    near ptr 0x0044FA57;
// LINE 2048:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 6;
	__asm        jne    near ptr 0x0044FA93;
// LINE 2049:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x24];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [eax+0x24], cl;
	__asm        jmp    near ptr 0x0044FA8E;
// LINE 2050:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 7;
	__asm        jne    near ptr 0x0044FACA;
// LINE 2051:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x22];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [eax+0x22], cl;
	__asm        jmp    near ptr 0x0044FAC5;
// LINE 2052:
	__asm        jmp    near ptr 0x0044FAFC;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 8;
	__asm        jne    near ptr 0x0044FAFC;
// LINE 2053:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+4];
	__asm        and    cl, 0xDF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [eax+4], cl;
	__asm        jmp    near ptr 0x0044FAFC;
// LINE 2054:
	__asm        jmp    near ptr 0x0044FB01;
}

// FUNCTION: COPTER_D 0x0044fb06
void EquipmentPanelWindow::CreateMegaphoneSelectionPopupWindow() {
	long nMenuYPosition;
	int32_t i;
	long nMenuXPosition;
	class PopupMenuWindow* tempPopupMenuWindow;

// LINE 2063:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    nMenuXPosition, eax;
// LINE 2064:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    nMenuYPosition, eax;
// LINE 2067:
	__asm        lea    eax, nMenuYPosition;
	__asm        push   eax;
	__asm        lea    eax, nMenuXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xA0];
// LINE 2070:
	__asm        push   0xD8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0044FBB4;
	__asm        mov    eax, nMenuYPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        inc    eax;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, nMenuYPosition;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, nMenuXPosition;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0044FB73;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0044FB90;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59A968];
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   PopupMenuExtra::PopupMenuExtra;
	__asm        mov    tempPopupMenuWindow, eax;
	__asm        jmp    near ptr 0x0044FBBB;
	__asm        mov    tempPopupMenuWindow, 0;
// LINE 2071:
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2072:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x14;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0x128];
// LINE 2073:
	__asm        mov    i, 0x22;
	__asm        jmp    near ptr 0x0044FBE9;
	__asm        inc    i;
	__asm        cmp    i, 0x25;
	__asm        jg     near ptr 0x0044FC11;
// LINE 2074:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, i;
	__asm        add    eax, 0x96;
	__asm        push   eax;
	__asm        mov    eax, tempPopupMenuWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempPopupMenuWindow;
	__asm        call   dword ptr [eax+0xD0];
	__asm        jmp    near ptr 0x0044FBE6;
// LINE 2076:
	__asm        jmp    near ptr 0x0044FC16;
}



// Contribution: 1:0004ec20-0004ec58 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fc20
// RadioCompassWindow::`scalar deleting destructor'



// Contribution: 1:0004ec60-0004ecd2 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ece0-0004ee38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0004ee40-0004ee78 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe40
// DialWindow::`scalar deleting destructor'



// Contribution: 1:0004ee80-0004eeb8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fe80
// PassengerWindow::`scalar deleting destructor'



// Contribution: 1:0004eec0-0004eef8 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044fec0
// MapWindow::`scalar deleting destructor'



// Contribution: 1:0004ef00-0004ef38 Module: 47, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0044ff00
// EquipmentPanelWindow::`scalar deleting destructor'



// Contribution: 2:00000650-00000717 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f650
// ??_7RadioCompassWindow@@6B@


// Contribution: 2:00000718-00000733 Module: 47, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00000738-000007ff Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f738
// ??_7DialWindow@@6B@


// Contribution: 2:00000800-000008d3 Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f800
// ??_7PassengerWindow@@6B@


// Contribution: 2:000008d8-000009ab Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f8d8
// ??_7MapWindow@@6B@


// Contribution: 2:000009b0-00000a7b Module: 47, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058f9b0
// ??_7EquipmentPanelWindow@@6B@


// Contribution: 3:00001f58-000020e0 Module: 47, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00598f58
// SZ_RADIO_COMPASS_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598f5c
// SZ_COMPASS_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598f60
// SZ_DIAL_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598f64
// SZ_DIAL_WINDOW_DAMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598f68
// SZ_DIAL_WINDOW_FUEL_LIGHT_FILE_NAME
// GLOBAL: COPTER_D 0x00598f6c
// SZ_DIAL_WINDOW_MONEY_FONT_FILE_NAME
// GLOBAL: COPTER_D 0x00598f70
// SZ_DIAL_WINDOW_MANA_FILE_NAME
// GLOBAL: COPTER_D 0x00598f74
// SZ_DIAL_WINDOW_ALTITUDE_NBR_FILE_NAME
// GLOBAL: COPTER_D 0x00598f78
// SZ_DIAL_WINDOW_BOOT_FILE_NAME
// GLOBAL: COPTER_D 0x00598f7c
// SZ_DIAL_WINDOW_BOOT_BACK_FILE_NAME
// GLOBAL: COPTER_D 0x00598fb8
// SZ_PASSENGER_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598fbc
// SZ_PASSENGER_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598fc0
// SZ_MAP_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00598fc4
// SZ_MAP_WINDOW_BUTTON_FILE_NAME
// GLOBAL: COPTER_D 0x00598fcc
// SZ_BUCKET_WATER_GUAGE_IMAGE
// GLOBAL: COPTER_D 0x00598fd0
// SZ_EQUIPMENT_BUTTON_IMAGE_0
// GLOBAL: COPTER_D 0x00598fd4
// SZ_EQUIPMENT_BUTTON_IMAGE_1
// GLOBAL: COPTER_D 0x00598fd8
// SZ_EQUIPMENT_BUTTON_IMAGE_2
