// Module: invntory.obj
// Source: C:\Copter\source\sparkal\invntory.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class InventoryWindow (forward reference);
class InventoryWindow : public GraphicWindow
{
public:
	void InventoryWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~InventoryWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	int32_t ReadPalette(struct SparkalColor*);
	void DrawTitleText();
	void DrawInventory();
protected:
	int32_t GetRectFromID(long, class MRect&);
	void LoadHotSpots();
	long GetColumnStartPixel(long);
	long GetRowStartPixel(long);
	void GetEquipmentTextPosition(long, class MPoint&);
	void GetTitleAndAddressRects(class MRect&, class MRect&, class MRect&);
	class list<HotSpot> myHotSpots;
	class CBackBuffer* mySecondImage;
	class CBackBuffer* myCheckmarkImage;
	class DigitalSound mySound;
	class basic_string<char> sHelicopterNames[9];
	class basic_string<char> sEquipmentNames[5];
	class basic_string<char> sCheckmarkFileName;
	class basic_string<char> sTitle;
	class basic_string<char> sAddress1;
	class basic_string<char> sAddress2;
	class MFont myFont;
	class MFont myTitleFont;
	class MFont myAddressFont;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: void;

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class MRect[3];

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: long;

// Type: struct tagUserPersonalInfo (forward reference);

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char;

// Type: unsigned long;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class list<HotSpot>::iterator;
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator operator++(int32_t);
	class list<HotSpot>::iterator& operator++();
	class list<HotSpot>::iterator operator--(int32_t);
	class list<HotSpot>::iterator& operator--();
};

// Type: const long[6];

// Type: const long[11];

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: const long[5];

// Type: uint32_t;

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: struct bidirectional_iterator<HotSpot,int>;
struct bidirectional_iterator<HotSpot,int>{
};



// Contribution: 1:000a7360-000a97bd Module: 8, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004a8360
void InventoryWindow::InventoryWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {

	__asm        jmp    near ptr 0x004A8377;

	__asm        jmp    near ptr 0x004A837C;

	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004A839F;

	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A83BE;

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    list<HotSpot>::number_of_lists;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    list<HotSpot>::free_list, 0;
	__asm        je     _Tbf;

	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T2ce;
_Tbf:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        cmp    list<HotSpot>::last, eax;
	__asm        jne    _T2b6;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        jne    _T12a;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8480;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T12a:
	__asm        jmp    near ptr 0x004A848F;

	__asm        jmp    near ptr 0x004A8494;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x5C], 0x92;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T172;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T178;
_T172:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
_T178:
	__asm        jmp    near ptr 0x004A84DD;

	__asm        jmp    near ptr 0x004A84E2;

	__asm        jmp    near ptr 0x004A84E7;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        jne    _T1fb;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8551;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T1fb:
	__asm        jmp    near ptr 0x004A8560;

	__asm        jmp    near ptr 0x004A8565;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    list<HotSpot>::buffer_list, eax;
	__asm        mov    eax, list<HotSpot>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<HotSpot>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x70], 0x92;
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    dword ptr [ebp-0x74], 1;
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T265;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T26b;
_T265:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
_T26b:
	__asm        jmp    near ptr 0x004A85D0;

	__asm        jmp    near ptr 0x004A85D5;

	__asm        jmp    near ptr 0x004A85DA;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, list<HotSpot>::next_avail;
	__asm        mov    list<HotSpot>::last, eax;
	__asm        jmp    near ptr 0x004A85F9;

	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x50], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T2ce;
_T2b6:
	__asm        mov    eax, list<HotSpot>::next_avail;
	__asm        mov    [ebp-0x54], eax;
	__asm        add    list<HotSpot>::next_avail, 0x1C;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x98], eax;
_T2ce:
	__asm        jmp    near ptr 0x004A8633;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A8670;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    dword ptr [ebp-0x18], 9;
	__asm        mov    eax, this;
	__asm        add    eax, 0xFE;
	__asm        mov    [ebp-0x1C], eax;
_T353:
	__asm        dec    dword ptr [ebp-0x18];
	__asm        js     _T36d;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    _T353;
_T36d:
	__asm        jmp    near ptr 0x004A86D2;

	__asm        mov    dword ptr [ebp-0x20], 5;
	__asm        mov    eax, this;
	__asm        add    eax, 0x146;
	__asm        mov    [ebp-0x24], eax;
_T387:
	__asm        dec    dword ptr [ebp-0x20];
	__asm        js     _T3a1;

	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    _T387;
_T3a1:
	__asm        jmp    near ptr 0x004A8706;

	__asm        mov    eax, SZ_INVENTORY_CHECKMARK_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x40], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T464;

	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A873C;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T438;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A8793;

	__asm        jmp    _T441;
_T438:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
_T441:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A87B0;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x172], eax;
	__asm        jmp    _T474;
_T464:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x172], 0;
_T474:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16E], 0;
	__asm        jmp    near ptr 0x004A87E9;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T4e2;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A882E;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x17A], eax;
	__asm        jmp    _T4f2;
_T4e2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17A], 0;
_T4f2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x176], 0;
	__asm        jmp    near ptr 0x004A8867;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T560;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A88AC;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x182], eax;
	__asm        jmp    _T570;
_T560:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x182], 0;
_T570:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17E], 0;
	__asm        jmp    near ptr 0x004A88E5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T5de;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A892A;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18A], eax;
	__asm        jmp    _T5ee;
_T5de:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18A], 0;
_T5ee:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x186], 0;
	__asm        jmp    near ptr 0x004A8963;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, SZ_INVENTORY_WINDOW_HELICOPTER_TEXT_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18E;
	__asm        call   MFont::MFont;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1C;
	__asm        mov    eax, SZ_INVENTORY_WINDOW_TITLE_TEXT_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1AA;
	__asm        call   MFont::MFont;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    eax, SZ_INVENTORY_WINDOW_ADDRESS_TEXT_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1C6;
	__asm        call   MFont::MFont;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591888;
	__asm        mov    eax, SZ_INVENTORY_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x14], eax;
// LINE 54:
	__asm        jmp    near ptr 0x004A89D9;

	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A89FD;
// LINE 55:
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::LoadHotSpots;
// LINE 56:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::CreateImage;
// LINE 57:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 58:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeModal;
	__asm        add    esp, 4;
// LINE 59:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 60:
	__asm        jmp    near ptr 0x004A8A43;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004a8a50
void InventoryWindow::~InventoryWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591888;
// LINE 67:
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::DestroyImage;
// LINE 68:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveFocus;
	__asm        add    esp, 4;
// LINE 69:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveModal;
	__asm        add    esp, 4;
// LINE 70:
	__asm        jmp    near ptr 0x004A8A8A;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1C6;
	__asm        call   MFont::~MFont;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1AA;
	__asm        call   MFont::~MFont;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18E;
	__asm        call   MFont::~MFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tc2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tc2;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A8AFC;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8B0D;

	__asm        jmp    _Tc2;
_Tc2:
	__asm        jmp    near ptr 0x004A8B17;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x186], 0;
	__asm        je     _Tf5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x186];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tf5:
	__asm        jmp    near ptr 0x004A8B4A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T158;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T158;

	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A8B92;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8BA3;

	__asm        jmp    _T158;
_T158:
	__asm        jmp    near ptr 0x004A8BAD;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17E], 0;
	__asm        je     _T18b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17E];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T18b:
	__asm        jmp    near ptr 0x004A8BE0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ee;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1ee;

	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004A8C28;

	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8C39;

	__asm        jmp    _T1ee;
_T1ee:
	__asm        jmp    near ptr 0x004A8C43;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x176], 0;
	__asm        je     _T221;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x176];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T221:
	__asm        jmp    near ptr 0x004A8C76;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T270;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T270;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T270;
_T270:
	__asm        jmp    near ptr 0x004A8CC5;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x16E], 0;
	__asm        je     _T2a3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16E];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2a3:
	__asm        jmp    near ptr 0x004A8CF8;

	__asm        mov    dword ptr [ebp-0x44], 5;
	__asm        mov    eax, this;
	__asm        add    eax, 0x146;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x48], eax;
_T2c3:
	__asm        dec    dword ptr [ebp-0x44];
	__asm        js     _T2dd;

	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T2c3;
_T2dd:
	__asm        jmp    near ptr 0x004A8D32;

	__asm        mov    dword ptr [ebp-0x4C], 9;
	__asm        mov    eax, this;
	__asm        add    eax, 0xFE;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x50], eax;
_T2fd:
	__asm        dec    dword ptr [ebp-0x4C];
	__asm        js     _T317;

	__asm        sub    dword ptr [ebp-0x50], 8;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T2fd;
_T317:
	__asm        jmp    near ptr 0x004A8D6C;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004A8D8E;

	__asm        jmp    near ptr 0x004A8D93;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004A8DA9;

	__asm        jmp    near ptr 0x004A8DAE;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x78], eax;
_T36a:
	__asm        mov    eax, [ebp-0x74];
	__asm        cmp    [ebp-0x78], eax;
	__asm        jne    _T380;

	__asm        jmp    _T394;

	__asm        jmp    _T380;
_T380:
	__asm        jmp    _T38f;

	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    _T394;
_T38f:
	__asm        jmp    _T399;
_T394:
	__asm        jmp    _T3c9;
_T399:
	__asm        jmp    _T3a8;

	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T3c9;
_T3a8:
	__asm        push   0;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x78];
	__asm        call   list<HotSpot>::iterator::operator++;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   list<HotSpot>::erase;
	__asm        jmp    _T36a;
_T3c9:
	__asm        jmp    near ptr 0x004A8E1E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, list<HotSpot>::free_list;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    list<HotSpot>::free_list, eax;
	__asm        jmp    near ptr 0x004A8E3E;

	__asm        dec    list<HotSpot>::number_of_lists;
	__asm        jne    _T405;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   list<HotSpot>::deallocate_buffers;
_T405:
	__asm        jmp    near ptr 0x004A8E5A;

	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x004a8e67
int32_t InventoryWindow::Initialize() {
	int32_t nReturnValue;
	int32_t i;
	int32_t nFullStringID;

// LINE 81:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
	__asm        mov    nReturnValue, eax;
// LINE 87:
	__asm        mov    i, 0;
	__asm        jmp    _T33;
_T30:
	__asm        inc    i;
_T33:
	__asm        cmp    i, 9;
	__asm        jge    _T2bd;
// LINE 88:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x190;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 89:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        jne    _T11a;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1010], eax;
	__asm        jmp    near ptr 0x004A8F19;

	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A8F4A;

	__asm        jmp    near ptr 0x004A8F4F;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004A8F7C;

	__asm        jmp    _T2b8;
_T11a:
	__asm        jmp    near ptr 0x004A8F86;

	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    _T179;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8FD1;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T179;
_T179:
	__asm        jmp    near ptr 0x004A8FE5;

	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1c9;

	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     _T244;

	__asm        jmp    near ptr 0x004A9011;

	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T244;
_T1c9:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1018], eax;
	__asm        cmp    dword ptr [ebp-0x1018], 0;
	__asm        je     _T20a;

	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1018];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1014], eax;
	__asm        jmp    _T214;
_T20a:
	__asm        mov    dword ptr [ebp-0x1014], 0;
_T214:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1014];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x102], eax;
	__asm        jmp    _T290;
_T244:
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     _T290;

	__asm        jmp    near ptr 0x004A90BD;

	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x101C], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x101C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T290;
_T290:
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*8+0x102];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A9115;

	__asm        jmp    near ptr 0x004A911A;

	__asm        jmp    _T2b8;
// LINE 90:
_T2b8:
	__asm        jmp    _T30;
// LINE 92:
_T2bd:
	__asm        push   0;
	__asm        push   0x1A4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 93:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2028], eax;
	__asm        cmp    dword ptr [ebp-0x2028], 0;
	__asm        jne    _T38e;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2028], eax;
	__asm        jmp    near ptr 0x004A9195;

	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A91C2;

	__asm        jmp    near ptr 0x004A91C7;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004A91F0;

	__asm        jmp    _T514;
_T38e:
	__asm        jmp    near ptr 0x004A91FA;

	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x203C], eax;
	__asm        cmp    dword ptr [ebp-0x203C], 0xFFFFFFFF;
	__asm        jne    _T3ed;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2038], eax;
	__asm        mov    eax, [ebp-0x2038];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9245;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3ed;
_T3ed:
	__asm        jmp    near ptr 0x004A9259;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T435;

	__asm        cmp    dword ptr [ebp-0x203C], 0;
	__asm        je     _T4a8;

	__asm        jmp    near ptr 0x004A9281;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    ecx, [ebp-0x203C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T4a8;
_T435:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2030], eax;
	__asm        cmp    dword ptr [ebp-0x2030], 0;
	__asm        je     _T476;

	__asm        mov    eax, [ebp-0x203C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2030];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x202C], eax;
	__asm        jmp    _T480;
_T476:
	__asm        mov    dword ptr [ebp-0x202C], 0;
_T480:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x202C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x17A], eax;
	__asm        jmp    _T4f0;
_T4a8:
	__asm        cmp    dword ptr [ebp-0x203C], 0;
	__asm        je     _T4f0;

	__asm        jmp    near ptr 0x004A9321;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2034], eax;
	__asm        mov    eax, [ebp-0x203C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2034];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4f0;
_T4f0:
	__asm        mov    eax, [ebp-0x203C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x17A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A9371;

	__asm        jmp    near ptr 0x004A9376;

	__asm        jmp    _T514;
// LINE 95:
_T514:
	__asm        push   0;
	__asm        push   0x1A5;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 96:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3040], eax;
	__asm        cmp    dword ptr [ebp-0x3040], 0;
	__asm        jne    _T5e5;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3040], eax;
	__asm        jmp    near ptr 0x004A93EC;

	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A9419;

	__asm        jmp    near ptr 0x004A941E;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004A9447;

	__asm        jmp    _T61c;
_T5e5:
	__asm        jmp    near ptr 0x004A9451;

	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A947E;

	__asm        jmp    _T61c;
// LINE 98:
_T61c:
	__asm        push   0;
	__asm        push   0x1A6;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 99:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4044], eax;
	__asm        cmp    dword ptr [ebp-0x4044], 0;
	__asm        jne    _T6ed;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4044], eax;
	__asm        jmp    near ptr 0x004A94F4;

	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A9521;

	__asm        jmp    near ptr 0x004A9526;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004A954F;

	__asm        jmp    _T873;
_T6ed:
	__asm        jmp    near ptr 0x004A9559;

	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4058], eax;
	__asm        cmp    dword ptr [ebp-0x4058], 0xFFFFFFFF;
	__asm        jne    _T74c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4054], eax;
	__asm        mov    eax, [ebp-0x4054];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A95A4;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T74c;
_T74c:
	__asm        jmp    near ptr 0x004A95B8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T794;

	__asm        cmp    dword ptr [ebp-0x4058], 0;
	__asm        je     _T807;

	__asm        jmp    near ptr 0x004A95E0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    ecx, [ebp-0x4058];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T807;
_T794:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x404C], eax;
	__asm        cmp    dword ptr [ebp-0x404C], 0;
	__asm        je     _T7d5;

	__asm        mov    eax, [ebp-0x4058];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x404C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x4048], eax;
	__asm        jmp    _T7df;
_T7d5:
	__asm        mov    dword ptr [ebp-0x4048], 0;
_T7df:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x4048];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18A], eax;
	__asm        jmp    _T84f;
_T807:
	__asm        cmp    dword ptr [ebp-0x4058], 0;
	__asm        je     _T84f;

	__asm        jmp    near ptr 0x004A9680;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4050], eax;
	__asm        mov    eax, [ebp-0x4058];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4050];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T84f;
_T84f:
	__asm        mov    eax, [ebp-0x4058];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A96D0;

	__asm        jmp    near ptr 0x004A96D5;

	__asm        jmp    _T873;
// LINE 101:
_T873:
	__asm        mov    i, 0;
	__asm        jmp    _T882;
_T87f:
	__asm        inc    i;
_T882:
	__asm        cmp    i, 5;
	__asm        jge    _T9a9;
// LINE 102:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x19A;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 103:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x505C], eax;
	__asm        cmp    dword ptr [ebp-0x505C], 0;
	__asm        jne    _T969;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x505C], eax;
	__asm        jmp    near ptr 0x004A9768;

	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A9799;

	__asm        jmp    near ptr 0x004A979E;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004A97CB;

	__asm        jmp    _T9a4;
_T969:
	__asm        jmp    near ptr 0x004A97D5;

	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004A9806;

	__asm        jmp    _T9a4;
// LINE 104:
_T9a4:
	__asm        jmp    _T87f;
// LINE 105:
_T9a9:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A9818;
// LINE 106:
}

// FUNCTION: COPTER_D 0x004a981d
int32_t InventoryWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    near ptr 0x004A9856;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A9874;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    near ptr 0x004A9889;

	__asm        jmp    near ptr 0x004A988E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    near ptr 0x004A98F2;

	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x004A98FB;

	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A9906;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9927;

	__asm        jmp    near ptr 0x004A992C;

	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T134;

	__asm        mov    eax, 1;
	__asm        jmp    _T136;
_T134:
	__asm        xor    eax, eax;
_T136:
	__asm        jmp    near ptr 0x004A9958;
// LINE 114:
}

// FUNCTION: COPTER_D 0x004a995f
int32_t InventoryWindow::CreateImage(int32_t __formal) {
// LINE 124:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    _T17b;
// LINE 125:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x004A9999;
// LINE 126:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T171;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T7c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7c:
	__asm        jmp    near ptr 0x004A99E0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A99FE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T118;

	__asm        jmp    near ptr 0x004A9A13;

	__asm        jmp    near ptr 0x004A9A18;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tde;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Tea;

	__asm        jmp    _Tea;
_Tde:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _Tea;
_Tea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T118;
_T118:
	__asm        jmp    near ptr 0x004A9A7C;

	__asm        mov    byte ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x004A9A85;

	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A9A90;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9AB1;

	__asm        jmp    near ptr 0x004A9AB6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T17b;
_T171:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 128:
_T17b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T314;
// LINE 129:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x16E;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x004A9B0D;
// LINE 130:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T2e8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1f0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1f0:
	__asm        jmp    near ptr 0x004A9B54;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A9B72;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T28c;

	__asm        jmp    near ptr 0x004A9B87;

	__asm        jmp    near ptr 0x004A9B8C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T252;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T25e;

	__asm        jmp    _T25e;
_T252:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    _T25e;
_T25e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T28c;
_T28c:
	__asm        jmp    near ptr 0x004A9BF0;

	__asm        mov    byte ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x004A9BF9;

	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A9C04;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9C25;

	__asm        jmp    near ptr 0x004A9C2A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T2f5;
_T2e8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 131:
_T2f5:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+8];
// LINE 133:
_T314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    near ptr 0x004A9C7E;
// LINE 134:
}

// FUNCTION: COPTER_D 0x004a9c85
void InventoryWindow::DestroyImage() {
// LINE 141:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T5a;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T50;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9CD0;

	__asm        jmp    _T50;
// LINE 143:
_T50:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 145:
_T5a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _Tb1;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta4;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9D24;

	__asm        jmp    _Ta4;
// LINE 147:
_Ta4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 149:
_Tb1:
	__asm        jmp    near ptr 0x004A9D3B;
}

// FUNCTION: COPTER_D 0x004a9d40
int32_t InventoryWindow::ComposeSelf() {
// LINE 156:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T2d;
// LINE 157:
_T26:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc3;
// LINE 163:
_T2d:
	__asm        jmp    near ptr 0x004A9D72;

	__asm        jmp    near ptr 0x004A9D77;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xC];
// LINE 164:
	__asm        mov    byte ptr [ebp-4], 0x2F;
	__asm        mov    byte ptr [ebp-3], 0x2F;
	__asm        mov    byte ptr [ebp-2], 0x2F;
	__asm        jmp    near ptr 0x004A9DD2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004A9DE9;
// LINE 165:
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::DrawTitleText;
// LINE 166:
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::DrawInventory;
// LINE 167:
	__asm        mov    eax, 1;
	__asm        jmp    _Tc3;
// LINE 168:
_Tc3:
}

// FUNCTION: COPTER_D 0x004a9e08
void InventoryWindow::DrawTitleText() {
	class MRect rectText[3];
	int32_t i;
	class MPoint ptText;


	__asm        mov    dword ptr [ebp-0x60], 3;
	__asm        lea    eax, rectText[0].left;
	__asm        mov    [ebp-0x64], eax;
// LINE 175:
_T1f:
	__asm        dec    dword ptr [ebp-0x60];
	__asm        js     _T39;

	__asm        mov    ecx, [ebp-0x64];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x64], 0x10;
	__asm        jmp    _T1f;
_T39:
	__asm        jmp    near ptr 0x004A9E46;
// LINE 176:
	__asm        jmp    near ptr 0x004A9E4B;

	__asm        jmp    near ptr 0x004A9E50;
// LINE 179:
	__asm        lea    eax, rectText[2].left;
	__asm        push   eax;
	__asm        lea    eax, rectText[1].left;
	__asm        push   eax;
	__asm        lea    eax, rectText[0].left;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetTitleAndAddressRects;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x6C], eax;
// LINE 180:
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    rectText[0].left, eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    rectText[0].right, eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    rectText[0].top, eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    rectText[0].bottom, eax;
	__asm        jmp    near ptr 0x004A9E9C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x74], eax;
// LINE 181:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    rectText[1].left, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    rectText[1].right, eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    rectText[1].top, eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    rectText[1].bottom, eax;
	__asm        jmp    near ptr 0x004A9ED1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x7C], eax;
// LINE 182:
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    rectText[2].left, eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    rectText[2].right, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        add    rectText[2].top, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        add    rectText[2].bottom, eax;
	__asm        jmp    near ptr 0x004A9F06;
// LINE 185:
	__asm        jmp    near ptr 0x004A9F0B;

	__asm        jmp    near ptr 0x004A9F10;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T139;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T145;

	__asm        jmp    _T145;
_T139:
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    _T145;
_T145:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1AA;
	__asm        push   eax;
	__asm        lea    eax, rectText[0].left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 187:
	__asm        jmp    near ptr 0x004A9F8F;

	__asm        jmp    near ptr 0x004A9F94;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1bd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T1c9;

	__asm        jmp    _T1c9;
_T1bd:
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        jmp    _T1c9;
_T1c9:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C6;
	__asm        push   eax;
	__asm        lea    eax, rectText[1].left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 189:
	__asm        jmp    near ptr 0x004AA013;

	__asm        jmp    near ptr 0x004AA018;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T241;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T24d;

	__asm        jmp    _T24d;
_T241:
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    _T24d;
_T24d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C6;
	__asm        push   eax;
	__asm        lea    eax, rectText[2].left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 191:
	__asm        mov    i, 0;
	__asm        jmp    _T299;
_T296:
	__asm        inc    i;
_T299:
	__asm        cmp    i, 5;
	__asm        jge    _T3bf;
// LINE 192:
	__asm        lea    eax, ptText.x;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetEquipmentTextPosition;
// LINE 195:
	__asm        jmp    near ptr 0x004AA0C3;

	__asm        jmp    near ptr 0x004AA0C8;

	__asm        jmp    near ptr 0x004AA0CD;

	__asm        jmp    near ptr 0x004AA0D2;

	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T303;

	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T30f;

	__asm        jmp    _T30f;
_T303:
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    _T30f;
_T30f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, ptText.y;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, ptText.x;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004AA15B;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004AA181;

	__asm        mov    eax, this;
	__asm        add    eax, 0x18E;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 196:
	__asm        jmp    _T296;
// LINE 197:
_T3bf:
	__asm        jmp    near ptr 0x004AA1CC;
}

// FUNCTION: COPTER_D 0x004aa1d1
void InventoryWindow::DrawInventory() {
	long lCurrentHeliType;
	const long lCheckmarkWidth;
	const long lCheckmarkHeight;
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	class MRect rectDestination;
	long lCurrentRow;

// LINE 208:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax+8];
	__asm        mov    lCheckmarkWidth, eax;
	__asm        jmp    near ptr 0x004AA1F1;
// LINE 209:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCheckmarkHeight, eax;
	__asm        jmp    near ptr 0x004AA205;
// LINE 210:
	__asm        jmp    near ptr 0x004AA20A;

	__asm        jmp    near ptr 0x004AA20F;
// LINE 213:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 214:
	__asm        mov    lCurrentHeliType, 0;
	__asm        mov    lCurrentRow, 0;
	__asm        jmp    _T5c;
_T59:
	__asm        inc    lCurrentHeliType;
_T5c:
	__asm        cmp    lCurrentHeliType, 9;
	__asm        jge    _T313;
// LINE 215:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        mov    edx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHeliType);
	__asm        shl    edx, cl;
	__asm        test   [eax+0x44], edx;
	__asm        je     _T30e;
// LINE 217:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        add    ecx, 3;
	__asm        mov    rectDestination.left, ecx;
// LINE 218:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        dec    ecx;
	__asm        mov    rectDestination.right, ecx;
// LINE 219:
	__asm        mov    eax, lCurrentRow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetRowStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        add    ecx, 2;
	__asm        mov    rectDestination.top, ecx;
// LINE 220:
	__asm        mov    eax, lCurrentRow;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetRowStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 2;
	__asm        mov    rectDestination.bottom, ecx;
// LINE 222:
	__asm        jmp    near ptr 0x004AA2B5;

	__asm        jmp    near ptr 0x004AA2BA;

	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T11c;

	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T128;

	__asm        jmp    _T128;
_T11c:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T128;
_T128:
	__asm        mov    eax, this;
	__asm        add    eax, 0x18E;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 225:
	__asm        add    rectDestination.left, 3;
// LINE 226:
	__asm        sub    rectDestination.top, 4;
// LINE 227:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 4;
	__asm        je     _T1bc;
// LINE 228:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 231:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 233:
_T1bc:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 1;
	__asm        je     _T25d;
// LINE 235:
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 238:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 240:
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 243:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 245:
_T25d:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     _T2b4;
// LINE 246:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 249:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 251:
_T2b4:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _T30b;
// LINE 252:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        call   InventoryWindow::GetColumnStartPixel;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 255:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 257:
_T30b:
	__asm        inc    lCurrentRow;
// LINE 259:
_T30e:
	__asm        jmp    _T59;
// LINE 260:
_T313:
	__asm        jmp    near ptr 0x004AA4E9;
}

// FUNCTION: COPTER_D 0x004aa4ee
long InventoryWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 269:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AA501;
// LINE 270:
}

// FUNCTION: COPTER_D 0x004aa508
long InventoryWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 278:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA51E;
// LINE 279:
}

// FUNCTION: COPTER_D 0x004aa525
long InventoryWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 286:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA53B;
// LINE 287:
}

// FUNCTION: COPTER_D 0x004aa542
long InventoryWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 294:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA558;
// LINE 295:
}

// FUNCTION: COPTER_D 0x004aa55f
int32_t InventoryWindow::GetRectFromID(long lID, class MRect& rectHotSpot) {
	class list<HotSpot>::iterator i;

// LINE 303:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004AA581;

	__asm        jmp    _T27;
// LINE 304:
_T27:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004AA59A;

	__asm        jmp    near ptr 0x004AA59F;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    _T56;

	__asm        jmp    _T6a;

	__asm        jmp    _T56;
_T56:
	__asm        jmp    _T65;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T6a;
_T65:
	__asm        jmp    _T6f;
_T6a:
	__asm        jmp    _Td3;
_T6f:
	__asm        jmp    _T7e;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Td3;
// LINE 305:
_T7e:
	__asm        jmp    near ptr 0x004AA5E2;

	__asm        mov    eax, i.node;
	__asm        mov    ecx, lID;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tb0;
// LINE 306:
	__asm        jmp    near ptr 0x004AA5F6;

	__asm        mov    eax, rectHotSpot;
	__asm        push   eax;
	__asm        mov    ecx, i.node;
	__asm        add    ecx, 8;
	__asm        call   HotSpot::GetBoundingRect;
// LINE 307:
	__asm        mov    eax, 1;
	__asm        jmp    _Tda;
// LINE 309:
_Tb0:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004AA622;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004AA62D;
// LINE 310:
	__asm        jmp    _T27;
// LINE 311:
_Td3:
	__asm        xor    eax, eax;
	__asm        jmp    _Tda;
// LINE 312:
_Tda:
}

// FUNCTION: COPTER_D 0x004aa640
void InventoryWindow::LoadHotSpots() {
// LINE 323:
	__asm        jmp    near ptr 0x004AA651;
}

// FUNCTION: COPTER_D 0x004aa656
long InventoryWindow::GetColumnStartPixel(long lColumn) {
	static const const long lColumnStart[6] = { /* <data@0x00591810> */ };

// LINE 334:
	__asm        cmp    lColumn, 6;
	__asm        jge    _T20;

	__asm        cmp    lColumn, 0;
	__asm        jge    _T27;
// LINE 335:
_T20:
	__asm        xor    eax, eax;
	__asm        jmp    _T36;
// LINE 336:
_T27:
	__asm        mov    eax, lColumn;
	__asm        mov    eax, lColumnStart[eax*4];
	__asm        jmp    _T36;
// LINE 337:
_T36:
}

// FUNCTION: COPTER_D 0x004aa693
long InventoryWindow::GetRowStartPixel(long lRow) {
	static const const long lRowStart[11] = { /* <data@0x00591828> */ };

// LINE 348:
	__asm        cmp    lRow, 0xB;
	__asm        jge    _T20;

	__asm        cmp    lRow, 0;
	__asm        jge    _T27;
// LINE 349:
_T20:
	__asm        xor    eax, eax;
	__asm        jmp    _T36;
// LINE 350:
_T27:
	__asm        mov    eax, lRow;
	__asm        mov    eax, lRowStart[eax*4];
	__asm        jmp    _T36;
// LINE 351:
_T36:
}

// FUNCTION: COPTER_D 0x004aa6d0
void InventoryWindow::GetEquipmentTextPosition(long lEquipmentIndex, class MPoint& ptEquipment) {
	static const const long lXPositions[5] = { /* <data@0x00591858> */ };
	static const const long lYPositions[5] = { /* <data@0x00591870> */ };

// LINE 363:
	__asm        cmp    lEquipmentIndex, 5;
	__asm        jge    _T20;

	__asm        cmp    lEquipmentIndex, 0;
	__asm        jge    _T27;
// LINE 364:
_T20:
	__asm        mov    lEquipmentIndex, 0;
// LINE 365:
_T27:
	__asm        mov    eax, lEquipmentIndex;
	__asm        mov    eax, lXPositions[eax*4];
	__asm        mov    ecx, ptEquipment;
	__asm        mov    [ecx], eax;
// LINE 366:
	__asm        mov    eax, lEquipmentIndex;
	__asm        mov    eax, lYPositions[eax*4];
	__asm        mov    ecx, ptEquipment;
	__asm        mov    [ecx+4], eax;
// LINE 367:
	__asm        jmp    near ptr 0x004AA71B;
}

// FUNCTION: COPTER_D 0x004aa722
void InventoryWindow::GetTitleAndAddressRects(class MRect& rectTitle, class MRect& rectAddress1, class MRect& rectAddress2) {
// LINE 378:
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax], 0xE8;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+4], 0x68;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+8], 0x1A6;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+0xC], 0x9C;
	__asm        jmp    near ptr 0x004AA75A;
// LINE 379:
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax], 0xAE;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+4], 0x6C;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+8], 0xFE;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+0xC], 0xA2;
	__asm        jmp    near ptr 0x004AA786;
// LINE 380:
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax], 0x184;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+4], 0x6C;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+8], 0x1D4;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+0xC], 0xA2;
	__asm        jmp    near ptr 0x004AA7B2;
// LINE 381:
	__asm        jmp    near ptr 0x004AA7B7;
}



// Contribution: 1:000a97c0-000a97f8 Module: 8, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004aa7c0
// InventoryWindow::`scalar deleting destructor'



// Contribution: 2:00002810-00002883 Module: 8, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00002888-0000294b Module: 8, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591888
// GLOBAL: COPTER_D 0x00591888
// ??_7InventoryWindow@@6B@


// Contribution: 3:00003984-000039d1 Module: 8, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a984
char * SZ_INVENTORY_IMAGE_FILE_NAME = { /* <data@0x0059a984> */ };

// GLOBAL: COPTER_D 0x0059a988
char * SZ_INVENTORY_CHECKMARK_IMAGE_FILE_NAME = { /* <data@0x0059a988> */ };

// GLOBAL: COPTER_D 0x0059a98c
char * SZ_INVENTORY_WINDOW_HELICOPTER_TEXT_NAME = { /* <data@0x0059a98c> */ };

// GLOBAL: COPTER_D 0x0059a990
char * SZ_INVENTORY_WINDOW_TITLE_TEXT_NAME = { /* <data@0x0059a990> */ };

// GLOBAL: COPTER_D 0x0059a994
char * SZ_INVENTORY_WINDOW_ADDRESS_TEXT_NAME = { /* <data@0x0059a994> */ };

