// Module: invntory.obj
// Source: C:\Copter\source\sparkal\invntory.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class InventoryWindow (forward reference);
class InventoryWindow : public GraphicWindow
{
public:
	void InventoryWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~InventoryWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	int32_t ReadPalette(struct SparkalColor*);
	void DrawTitleText();
	void DrawInventory();
protected:
	int32_t GetRectFromID(long, class MRect&);
	void LoadHotSpots();
	long GetColumnStartPixel(long);
	long GetRowStartPixel(long);
	void GetEquipmentTextPosition(long, class MPoint&);
	void GetTitleAndAddressRects(class MRect&, class MRect&, class MRect&);
	class list<HotSpot> myHotSpots;
	class CBackBuffer* mySecondImage;
	class CBackBuffer* myCheckmarkImage;
	class DigitalSound mySound;
	class basic_string<char>[9] sHelicopterNames;
	class basic_string<char>[5] sEquipmentNames;
	class basic_string<char> sCheckmarkFileName;
	class basic_string<char> sTitle;
	class basic_string<char> sAddress1;
	class basic_string<char> sAddress2;
	class MFont myFont;
	class MFont myTitleFont;
	class MFont myAddressFont;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: void;

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class MRect[3];

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	long x;
	long y;
	void MPoint(long, long);
	void MPoint();
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MPoint MPoint(struct SparkalPoint);
	class MPoint MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MSize MPoint(struct SparkalPoint);
	class MPoint MPoint();
	class MPoint MPoint(struct SparkalSize);
};

// Type: long;

// Type: struct tagUserPersonalInfo (forward reference);

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: char;

// Type: unsigned long;

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class list<HotSpot>::iterator;
class list<HotSpot>::iterator : public bidirectional_iterator<HotSpot,int>
{
protected:
	struct list<HotSpot>::list_node* node;
public:
	void list<HotSpot>::iterator();
protected:
	void list<HotSpot>::iterator(struct list<HotSpot>::list_node*);
public:
	int32_t operator==(const class list<HotSpot>::iterator&);
	class HotSpot& operator*();
	class list<HotSpot>::iterator list<HotSpot>::iterator(int32_t);
	class list<HotSpot>::iterator& list<HotSpot>::iterator();
	class list<HotSpot>::iterator list<HotSpot>::iterator(int32_t);
	class list<HotSpot>::iterator& list<HotSpot>::iterator();
};

// Type: const long[6];

// Type: const long[11];

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	long x;
	long y;
	void MPoint(long, long);
	void MPoint();
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MPoint MPoint(struct SparkalPoint);
	class MPoint MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MSize MPoint(struct SparkalPoint);
	class MPoint MPoint();
	class MPoint MPoint(struct SparkalSize);
};

// Type: const long[5];

// Type: uint32_t;



// Contribution: 1:000a7360-000a97bd Module: 8, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004a8360
void InventoryWindow::InventoryWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 53:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x9C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x004A8377;
	__asm        jmp    near ptr 0x004A837C;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004A839F;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004A83BE;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        inc    dword ptr ds:[0x5971CC];
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    [ebp-0x4C], eax;
	__asm        cmp    dword ptr ds:[0x5971D8], 0;
	__asm        je     near ptr 0x004A841F;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004A862E;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        cmp    ds:[0x5971D0], eax;
	__asm        jne    near ptr 0x004A8616;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        jne    near ptr 0x004A848A;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8480;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A848F;
	__asm        jmp    near ptr 0x004A8494;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    dword ptr [ebp-0x5C], 0x92;
	__asm        lea    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        lea    eax, [ebp-0x60];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A84D2;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004A84D8;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004A84DD;
	__asm        jmp    near ptr 0x004A84E2;
	__asm        jmp    near ptr 0x004A84E7;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        push   0;
	__asm        call   0x0056A620;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        jne    near ptr 0x004A855B;
	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8551;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8560;
	__asm        jmp    near ptr 0x004A8565;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ds:[0x5971DC], eax;
	__asm        mov    eax, ds:[0x5971DC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ds:[0x5971D4], eax;
	__asm        mov    dword ptr [ebp-0x70], 0x92;
	__asm        lea    eax, [ebp-0x70];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    dword ptr [ebp-0x74], 1;
	__asm        lea    eax, [ebp-0x74];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x78];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     near ptr 0x004A85C5;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004A85CB;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004A85D0;
	__asm        jmp    near ptr 0x004A85D5;
	__asm        jmp    near ptr 0x004A85DA;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 2;
	__asm        add    eax, ds:[0x5971D4];
	__asm        mov    ds:[0x5971D0], eax;
	__asm        jmp    near ptr 0x004A85F9;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x50], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004A862E;
	__asm        mov    eax, ds:[0x5971D4];
	__asm        mov    [ebp-0x54], eax;
	__asm        add    dword ptr ds:[0x5971D4], 0x1C;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004A8633;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A8670;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0042EF87;
	__asm        mov    dword ptr [ebp-0x18], 9;
	__asm        mov    eax, this;
	__asm        add    eax, 0xFE;
	__asm        mov    [ebp-0x1C], eax;
	__asm        dec    dword ptr [ebp-0x18];
	__asm        js     near ptr 0x004A86CD;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x00411EE0;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x004A86B3;
	__asm        jmp    near ptr 0x004A86D2;
	__asm        mov    dword ptr [ebp-0x20], 5;
	__asm        mov    eax, this;
	__asm        add    eax, 0x146;
	__asm        mov    [ebp-0x24], eax;
	__asm        dec    dword ptr [ebp-0x20];
	__asm        js     near ptr 0x004A8701;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x00411EE0;
	__asm        add    dword ptr [ebp-0x24], 8;
	__asm        jmp    near ptr 0x004A86E7;
	__asm        jmp    near ptr 0x004A8706;
	__asm        mov    eax, ds:[0x59A988];
	__asm        mov    [ebp-0x40], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004A87C4;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A873C;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004A8798;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A8793;
	__asm        jmp    near ptr 0x004A87A1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A87B0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x172], eax;
	__asm        jmp    near ptr 0x004A87D4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x172], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16E], 0;
	__asm        jmp    near ptr 0x004A87E9;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004A8842;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A882E;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x17A], eax;
	__asm        jmp    near ptr 0x004A8852;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x176], 0;
	__asm        jmp    near ptr 0x004A8867;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A88C0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A88AC;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x182], eax;
	__asm        jmp    near ptr 0x004A88D0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x182], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17E], 0;
	__asm        jmp    near ptr 0x004A88E5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004A893E;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004A892A;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18A], eax;
	__asm        jmp    near ptr 0x004A894E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18A], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x186], 0;
	__asm        jmp    near ptr 0x004A8963;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, ds:[0x59A98C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18E;
	__asm        call   0x0049F937;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1C;
	__asm        mov    eax, ds:[0x59A990];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1AA;
	__asm        call   0x0049F937;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    eax, ds:[0x59A994];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1C6;
	__asm        call   0x0049F937;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591888;
	__asm        mov    eax, ds:[0x59A984];
	__asm        mov    [ebp-0x14], eax;
// LINE 54:
	__asm        jmp    near ptr 0x004A89D9;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A89FD;
// LINE 55:
	__asm        mov    ecx, this;
	__asm        call   0x004AA640;
// LINE 56:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A995F;
// LINE 57:
	__asm        mov    ecx, this;
	__asm        call   0x004A6BCD;
// LINE 58:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 59:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 60:
	__asm        jmp    near ptr 0x004A8A43;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004a8a50
void InventoryWindow::~InventoryWindow() {
// LINE 66:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591888;
// LINE 67:
	__asm        mov    ecx, this;
	__asm        call   0x004A9C85;
// LINE 68:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A773B;
	__asm        add    esp, 4;
// LINE 69:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7340;
	__asm        add    esp, 4;
// LINE 70:
	__asm        jmp    near ptr 0x004A8A8A;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1C6;
	__asm        call   0x0049FC4E;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x1AA;
	__asm        call   0x0049FC4E;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x18E;
	__asm        call   0x0049FC4E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A8B12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004A8B12;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A8AFC;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8B0D;
	__asm        jmp    near ptr 0x004A8B12;
	__asm        jmp    near ptr 0x004A8B17;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x186], 0;
	__asm        je     near ptr 0x004A8B45;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x186];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8B4A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A8BA8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004A8BA8;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A8B92;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8BA3;
	__asm        jmp    near ptr 0x004A8BA8;
	__asm        jmp    near ptr 0x004A8BAD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17E], 0;
	__asm        je     near ptr 0x004A8BDB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17E];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8BE0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A8C3E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x004A8C3E;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004A8C28;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8C39;
	__asm        jmp    near ptr 0x004A8C3E;
	__asm        jmp    near ptr 0x004A8C43;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x176], 0;
	__asm        je     near ptr 0x004A8C71;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x176];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8C76;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004A8CC0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x172];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x004A8CC0;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004A8CC0;
	__asm        jmp    near ptr 0x004A8CC5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x16E], 0;
	__asm        je     near ptr 0x004A8CF3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x16E];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8CF8;
	__asm        mov    dword ptr [ebp-0x44], 5;
	__asm        mov    eax, this;
	__asm        add    eax, 0x146;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x48], eax;
	__asm        dec    dword ptr [ebp-0x44];
	__asm        js     near ptr 0x004A8D2D;
	__asm        sub    dword ptr [ebp-0x48], 8;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x004A8D13;
	__asm        jmp    near ptr 0x004A8D32;
	__asm        mov    dword ptr [ebp-0x4C], 9;
	__asm        mov    eax, this;
	__asm        add    eax, 0xFE;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x50], eax;
	__asm        dec    dword ptr [ebp-0x4C];
	__asm        js     near ptr 0x004A8D67;
	__asm        sub    dword ptr [ebp-0x50], 8;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x00412130;
	__asm        jmp    near ptr 0x004A8D4D;
	__asm        jmp    near ptr 0x004A8D6C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0042F2E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004A8D8E;
	__asm        jmp    near ptr 0x004A8D93;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004A8DA9;
	__asm        jmp    near ptr 0x004A8DAE;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        cmp    [ebp-0x78], eax;
	__asm        jne    near ptr 0x004A8DD0;
	__asm        jmp    near ptr 0x004A8DE4;
	__asm        jmp    near ptr 0x004A8DD0;
	__asm        jmp    near ptr 0x004A8DDF;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        jne    near ptr 0x004A8DE4;
	__asm        jmp    near ptr 0x004A8DE9;
	__asm        jmp    near ptr 0x004A8E19;
	__asm        jmp    near ptr 0x004A8DF8;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x004A8E19;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        lea    ecx, [ebp-0x78];
	__asm        call   0x0040DB10;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x0040DB50;
	__asm        jmp    near ptr 0x004A8DBA;
	__asm        jmp    near ptr 0x004A8E1E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, ds:[0x5971D8];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ds:[0x5971D8], eax;
	__asm        jmp    near ptr 0x004A8E3E;
	__asm        dec    dword ptr ds:[0x5971CC];
	__asm        jne    near ptr 0x004A8E55;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x0041BBD0;
	__asm        jmp    near ptr 0x004A8E5A;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a8e67
int32_t InventoryWindow::Initialize() {
	int32_t nReturnValue;
	int32_t i;
	int32_t nFullStringID;

// LINE 76:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x5060;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 81:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
	__asm        mov    nReturnValue, eax;
// LINE 87:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004A8E9A;
	__asm        inc    i;
	__asm        cmp    i, 9;
	__asm        jge    near ptr 0x004A9124;
// LINE 88:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x190;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 89:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1010], eax;
	__asm        cmp    dword ptr [ebp-0x1010], 0;
	__asm        jne    near ptr 0x004A8F81;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1010], eax;
	__asm        jmp    near ptr 0x004A8F19;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A8F4A;
	__asm        jmp    near ptr 0x004A8F4F;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004A8F7C;
	__asm        jmp    near ptr 0x004A911F;
	__asm        jmp    near ptr 0x004A8F86;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1024], eax;
	__asm        cmp    dword ptr [ebp-0x1024], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A8FE0;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1020], eax;
	__asm        mov    eax, [ebp-0x1020];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8FD1;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A8FE0;
	__asm        jmp    near ptr 0x004A8FE5;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004A9030;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x004A90AB;
	__asm        jmp    near ptr 0x004A9011;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    ecx, [ebp-0x1024];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004A90AB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1018], eax;
	__asm        cmp    dword ptr [ebp-0x1018], 0;
	__asm        je     near ptr 0x004A9071;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1018];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1014], eax;
	__asm        jmp    near ptr 0x004A907B;
	__asm        mov    dword ptr [ebp-0x1014], 0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0xFE];
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1014];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x102], eax;
	__asm        jmp    near ptr 0x004A90F7;
	__asm        cmp    dword ptr [ebp-0x1024], 0;
	__asm        je     near ptr 0x004A90F7;
	__asm        jmp    near ptr 0x004A90BD;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x101C], eax;
	__asm        mov    eax, [ebp-0x1024];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x100C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x101C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A90F7;
	__asm        mov    eax, [ebp-0x1024];
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    ecx, [edx+ecx*8+0x102];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A9115;
	__asm        jmp    near ptr 0x004A911A;
	__asm        jmp    near ptr 0x004A911F;
// LINE 90:
	__asm        jmp    near ptr 0x004A8E97;
// LINE 92:
	__asm        push   0;
	__asm        push   0x1A4;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 93:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2028], eax;
	__asm        cmp    dword ptr [ebp-0x2028], 0;
	__asm        jne    near ptr 0x004A91F5;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2028], eax;
	__asm        jmp    near ptr 0x004A9195;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A91C2;
	__asm        jmp    near ptr 0x004A91C7;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004A91F0;
	__asm        jmp    near ptr 0x004A937B;
	__asm        jmp    near ptr 0x004A91FA;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x203C], eax;
	__asm        cmp    dword ptr [ebp-0x203C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A9254;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2038], eax;
	__asm        mov    eax, [ebp-0x2038];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9245;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9254;
	__asm        jmp    near ptr 0x004A9259;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004A929C;
	__asm        cmp    dword ptr [ebp-0x203C], 0;
	__asm        je     near ptr 0x004A930F;
	__asm        jmp    near ptr 0x004A9281;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    ecx, [ebp-0x203C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004A930F;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2030], eax;
	__asm        cmp    dword ptr [ebp-0x2030], 0;
	__asm        je     near ptr 0x004A92DD;
	__asm        mov    eax, [ebp-0x203C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2030];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x202C], eax;
	__asm        jmp    near ptr 0x004A92E7;
	__asm        mov    dword ptr [ebp-0x202C], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x176;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x202C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x17A], eax;
	__asm        jmp    near ptr 0x004A9357;
	__asm        cmp    dword ptr [ebp-0x203C], 0;
	__asm        je     near ptr 0x004A9357;
	__asm        jmp    near ptr 0x004A9321;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2034], eax;
	__asm        mov    eax, [ebp-0x203C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2024];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2034];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A9357;
	__asm        mov    eax, [ebp-0x203C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x17A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A9371;
	__asm        jmp    near ptr 0x004A9376;
	__asm        jmp    near ptr 0x004A937B;
// LINE 95:
	__asm        push   0;
	__asm        push   0x1A5;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 96:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3040], eax;
	__asm        cmp    dword ptr [ebp-0x3040], 0;
	__asm        jne    near ptr 0x004A944C;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3040], eax;
	__asm        jmp    near ptr 0x004A93EC;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A9419;
	__asm        jmp    near ptr 0x004A941E;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004A9447;
	__asm        jmp    near ptr 0x004A9483;
	__asm        jmp    near ptr 0x004A9451;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x303C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x17E;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A947E;
	__asm        jmp    near ptr 0x004A9483;
// LINE 98:
	__asm        push   0;
	__asm        push   0x1A6;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 99:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4044], eax;
	__asm        cmp    dword ptr [ebp-0x4044], 0;
	__asm        jne    near ptr 0x004A9554;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4044], eax;
	__asm        jmp    near ptr 0x004A94F4;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A9521;
	__asm        jmp    near ptr 0x004A9526;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004A954F;
	__asm        jmp    near ptr 0x004A96DA;
	__asm        jmp    near ptr 0x004A9559;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4058], eax;
	__asm        cmp    dword ptr [ebp-0x4058], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004A95B3;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x4054], eax;
	__asm        mov    eax, [ebp-0x4054];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A95A4;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A95B3;
	__asm        jmp    near ptr 0x004A95B8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004A95FB;
	__asm        cmp    dword ptr [ebp-0x4058], 0;
	__asm        je     near ptr 0x004A966E;
	__asm        jmp    near ptr 0x004A95E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    ecx, [ebp-0x4058];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004A966E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x404C], eax;
	__asm        cmp    dword ptr [ebp-0x404C], 0;
	__asm        je     near ptr 0x004A963C;
	__asm        mov    eax, [ebp-0x4058];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x404C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x4048], eax;
	__asm        jmp    near ptr 0x004A9646;
	__asm        mov    dword ptr [ebp-0x4048], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x186;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x4048];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18A], eax;
	__asm        jmp    near ptr 0x004A96B6;
	__asm        cmp    dword ptr [ebp-0x4058], 0;
	__asm        je     near ptr 0x004A96B6;
	__asm        jmp    near ptr 0x004A9680;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4050], eax;
	__asm        mov    eax, [ebp-0x4058];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4040];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4050];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A96B6;
	__asm        mov    eax, [ebp-0x4058];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004A96D0;
	__asm        jmp    near ptr 0x004A96D5;
	__asm        jmp    near ptr 0x004A96DA;
// LINE 101:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004A96E9;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x004A9810;
// LINE 102:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x19A;
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 103:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x505C], eax;
	__asm        cmp    dword ptr [ebp-0x505C], 0;
	__asm        jne    near ptr 0x004A97D0;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x505C], eax;
	__asm        jmp    near ptr 0x004A9768;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A9799;
	__asm        jmp    near ptr 0x004A979E;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004A97CB;
	__asm        jmp    near ptr 0x004A980B;
	__asm        jmp    near ptr 0x004A97D5;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5058];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        lea    ecx, [ecx+eax*8+0x146];
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x004A9806;
	__asm        jmp    near ptr 0x004A980B;
// LINE 104:
	__asm        jmp    near ptr 0x004A96E6;
// LINE 105:
	__asm        mov    eax, nReturnValue;
	__asm        jmp    near ptr 0x004A9818;
// LINE 106:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a981d
int32_t InventoryWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 112:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 113:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004A9851;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9856;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A9874;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A98ED;
	__asm        jmp    near ptr 0x004A9889;
	__asm        jmp    near ptr 0x004A988E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A98B3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A98BF;
	__asm        jmp    near ptr 0x004A98BF;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x004A98BF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A98ED;
	__asm        jmp    near ptr 0x004A98F2;
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x004A98FB;
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004A9906;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9927;
	__asm        jmp    near ptr 0x004A992C;
	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   0x004704DB;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004A9951;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A9953;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A9958;
// LINE 114:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a995f
int32_t InventoryWindow::CreateImage(int32_t __formal) {
// LINE 120:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 124:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        jne    near ptr 0x004A9ADA;
// LINE 125:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004A9999;
// LINE 126:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A9AD0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004A99DB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A99E0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A99FE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9A77;
	__asm        jmp    near ptr 0x004A9A13;
	__asm        jmp    near ptr 0x004A9A18;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9A3D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004A9A49;
	__asm        jmp    near ptr 0x004A9A49;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x004A9A49;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A9A77;
	__asm        jmp    near ptr 0x004A9A7C;
	__asm        mov    byte ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x004A9A85;
	__asm        lea    eax, [ebp-0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004A9A90;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9AB1;
	__asm        jmp    near ptr 0x004A9AB6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x004A9ADA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 128:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x004A9C73;
// LINE 129:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x16E;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x004A9B0D;
// LINE 130:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004A9C47;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     near ptr 0x004A9B4F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9B54;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004A9B72;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9BEB;
	__asm        jmp    near ptr 0x004A9B87;
	__asm        jmp    near ptr 0x004A9B8C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9BB1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004A9BBD;
	__asm        jmp    near ptr 0x004A9BBD;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x004A9BBD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004A9BEB;
	__asm        jmp    near ptr 0x004A9BF0;
	__asm        mov    byte ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x004A9BF9;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004A9C04;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004A9C25;
	__asm        jmp    near ptr 0x004A9C2A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x004A9C54;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 131:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+8];
// LINE 133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        jmp    near ptr 0x004A9C7E;
// LINE 134:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004a9c85
void InventoryWindow::DestroyImage() {
// LINE 140:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 141:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x004A9CDF;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x004A9CD5;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9CD0;
	__asm        jmp    near ptr 0x004A9CD5;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 145:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x004A9D36;
// LINE 146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x004A9D29;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004A9D24;
	__asm        jmp    near ptr 0x004A9D29;
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 149:
	__asm        jmp    near ptr 0x004A9D3B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a9d40
int32_t InventoryWindow::ComposeSelf() {
// LINE 155:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 156:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x004A9D66;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x004A9D6D;
// LINE 157:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004A9E03;
// LINE 163:
	__asm        jmp    near ptr 0x004A9D72;
	__asm        jmp    near ptr 0x004A9D77;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+0xC];
// LINE 164:
	__asm        mov    byte ptr [ebp-4], 0x2F;
	__asm        mov    byte ptr [ebp-3], 0x2F;
	__asm        mov    byte ptr [ebp-2], 0x2F;
	__asm        jmp    near ptr 0x004A9DD2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x004A9DE9;
// LINE 165:
	__asm        mov    ecx, this;
	__asm        call   0x004A9E08;
// LINE 166:
	__asm        mov    ecx, this;
	__asm        call   0x004AA1D1;
// LINE 167:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004A9E03;
// LINE 168:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004a9e08
void InventoryWindow::DrawTitleText() {
	class MRect[3] rectText;
	int32_t i;
	class MPoint ptText;

// LINE 174:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x90;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    dword ptr [ebp-0x60], 3;
	__asm        lea    eax, rectText[0].left;
	__asm        mov    [ebp-0x64], eax;
// LINE 175:
	__asm        dec    dword ptr [ebp-0x60];
	__asm        js     near ptr 0x004A9E41;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x64], 0x10;
	__asm        jmp    near ptr 0x004A9E27;
	__asm        jmp    near ptr 0x004A9E46;
// LINE 176:
	__asm        jmp    near ptr 0x004A9E4B;
	__asm        jmp    near ptr 0x004A9E50;
// LINE 179:
	__asm        lea    eax, rectText[2].left;
	__asm        push   eax;
	__asm        lea    eax, rectText[1].left;
	__asm        push   eax;
	__asm        lea    eax, rectText[0].left;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AA722;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x6C], eax;
// LINE 180:
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    rectText[0].left, eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    rectText[0].right, eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    rectText[0].top, eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    rectText[0].bottom, eax;
	__asm        jmp    near ptr 0x004A9E9C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x74], eax;
// LINE 181:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    rectText[1].left, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    rectText[1].right, eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    rectText[1].top, eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    rectText[1].bottom, eax;
	__asm        jmp    near ptr 0x004A9ED1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    [ebp-0x7C], eax;
// LINE 182:
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    rectText[2].left, eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    rectText[2].right, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        add    rectText[2].top, eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        add    rectText[2].bottom, eax;
	__asm        jmp    near ptr 0x004A9F06;
// LINE 185:
	__asm        jmp    near ptr 0x004A9F0B;
	__asm        jmp    near ptr 0x004A9F10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9F41;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004A9F4D;
	__asm        jmp    near ptr 0x004A9F4D;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x004A9F4D;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1AA;
	__asm        push   eax;
	__asm        lea    eax, rectText[0].left;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 187:
	__asm        jmp    near ptr 0x004A9F8F;
	__asm        jmp    near ptr 0x004A9F94;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004A9FC5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004A9FD1;
	__asm        jmp    near ptr 0x004A9FD1;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        jmp    near ptr 0x004A9FD1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C6;
	__asm        push   eax;
	__asm        lea    eax, rectText[1].left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x182];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 189:
	__asm        jmp    near ptr 0x004AA013;
	__asm        jmp    near ptr 0x004AA018;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AA049;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x004AA055;
	__asm        jmp    near ptr 0x004AA055;
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x004AA055;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1C6;
	__asm        push   eax;
	__asm        lea    eax, rectText[2].left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 191:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004AA0A1;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x004AA1C7;
// LINE 192:
	__asm        lea    eax, ptText.x;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AA6D0;
// LINE 195:
	__asm        jmp    near ptr 0x004AA0C3;
	__asm        jmp    near ptr 0x004AA0C8;
	__asm        jmp    near ptr 0x004AA0CD;
	__asm        jmp    near ptr 0x004AA0D2;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AA10B;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004AA117;
	__asm        jmp    near ptr 0x004AA117;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    near ptr 0x004AA117;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, ptText.y;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, ptText.x;
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004AA15B;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004AA181;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18E;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x14A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 196:
	__asm        jmp    near ptr 0x004AA09E;
// LINE 197:
	__asm        jmp    near ptr 0x004AA1CC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aa1d1
void InventoryWindow::DrawInventory() {
	long lCurrentHeliType;
	const long lCheckmarkWidth;
	const long lCheckmarkHeight;
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	class MRect rectDestination;
	long lCurrentRow;

// LINE 205:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 208:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax+8];
	__asm        mov    lCheckmarkWidth, eax;
	__asm        jmp    near ptr 0x004AA1F1;
// LINE 209:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    lCheckmarkHeight, eax;
	__asm        jmp    near ptr 0x004AA205;
// LINE 210:
	__asm        jmp    near ptr 0x004AA20A;
	__asm        jmp    near ptr 0x004AA20F;
// LINE 213:
	__asm        call   0x00428F4A;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 214:
	__asm        mov    lCurrentHeliType, 0;
	__asm        mov    lCurrentRow, 0;
	__asm        jmp    near ptr 0x004AA22D;
	__asm        inc    lCurrentHeliType;
	__asm        cmp    lCurrentHeliType, 9;
	__asm        jge    near ptr 0x004AA4E4;
// LINE 215:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        mov    edx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHeliType);
	__asm        shl    edx, cl;
	__asm        test   [eax+0x44], edx;
	__asm        je     near ptr 0x004AA4DF;
// LINE 217:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        add    ecx, 3;
	__asm        mov    rectDestination.left, ecx;
// LINE 218:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        dec    ecx;
	__asm        mov    rectDestination.right, ecx;
// LINE 219:
	__asm        mov    eax, lCurrentRow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AA693;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        add    ecx, 2;
	__asm        mov    rectDestination.top, ecx;
// LINE 220:
	__asm        mov    eax, lCurrentRow;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AA693;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 2;
	__asm        mov    rectDestination.bottom, ecx;
// LINE 222:
	__asm        jmp    near ptr 0x004AA2B5;
	__asm        jmp    near ptr 0x004AA2BA;
	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004AA2ED;
	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x004AA2F9;
	__asm        jmp    near ptr 0x004AA2F9;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x004AA2F9;
	__asm        mov    eax, this;
	__asm        add    eax, 0x18E;
	__asm        push   eax;
	__asm        lea    eax, rectDestination.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lCurrentHeliType;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x102];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 225:
	__asm        add    rectDestination.left, 3;
// LINE 226:
	__asm        sub    rectDestination.top, 4;
// LINE 227:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 4;
	__asm        je     near ptr 0x004AA38D;
// LINE 228:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 231:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 233:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 1;
	__asm        je     near ptr 0x004AA42E;
// LINE 235:
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 238:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 240:
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 243:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 245:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 2;
	__asm        je     near ptr 0x004AA485;
// LINE 246:
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 249:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 251:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     near ptr 0x004AA4DC;
// LINE 252:
	__asm        push   5;
	__asm        mov    ecx, this;
	__asm        call   0x004AA656;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        sub    ecx, 4;
	__asm        mov    rectDestination.left, ecx;
// LINE 255:
	__asm        mov    eax, lCheckmarkHeight;
	__asm        push   eax;
	__asm        mov    eax, lCheckmarkWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, rectDestination.top;
	__asm        push   eax;
	__asm        mov    eax, rectDestination.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC];
// LINE 257:
	__asm        inc    lCurrentRow;
// LINE 259:
	__asm        jmp    near ptr 0x004AA22A;
// LINE 260:
	__asm        jmp    near ptr 0x004AA4E9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aa4ee
long InventoryWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 267:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 269:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AA501;
// LINE 270:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004aa508
long InventoryWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 276:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 278:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA51E;
// LINE 279:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004aa525
long InventoryWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 285:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 286:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA53B;
// LINE 287:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x004aa542
long InventoryWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 291:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 294:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA558;
// LINE 295:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004aa55f
int32_t InventoryWindow::GetRectFromID(long lID, class MRect& rectHotSpot) {
	class list<HotSpot>::iterator i;

// LINE 302:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 303:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004AA581;
	__asm        jmp    near ptr 0x004AA586;
// LINE 304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004AA59A;
	__asm        jmp    near ptr 0x004AA59F;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    i.node, eax;
	__asm        jne    near ptr 0x004AA5B5;
	__asm        jmp    near ptr 0x004AA5C9;
	__asm        jmp    near ptr 0x004AA5B5;
	__asm        jmp    near ptr 0x004AA5C4;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x004AA5C9;
	__asm        jmp    near ptr 0x004AA5CE;
	__asm        jmp    near ptr 0x004AA632;
	__asm        jmp    near ptr 0x004AA5DD;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004AA632;
// LINE 305:
	__asm        jmp    near ptr 0x004AA5E2;
	__asm        mov    eax, i.node;
	__asm        mov    ecx, lID;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x004AA60F;
// LINE 306:
	__asm        jmp    near ptr 0x004AA5F6;
	__asm        mov    eax, rectHotSpot;
	__asm        push   eax;
	__asm        mov    ecx, i.node;
	__asm        add    ecx, 8;
	__asm        call   0x004BB0D2;
// LINE 307:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004AA639;
// LINE 309:
	__asm        mov    eax, i.node;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, i.node;
	__asm        mov    eax, [eax];
	__asm        mov    i.node, eax;
	__asm        jmp    near ptr 0x004AA622;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004AA62D;
// LINE 310:
	__asm        jmp    near ptr 0x004AA586;
// LINE 311:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AA639;
// LINE 312:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004aa640
void InventoryWindow::LoadHotSpots() {
// LINE 317:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 323:
	__asm        jmp    near ptr 0x004AA651;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004aa656
long InventoryWindow::GetColumnStartPixel(long lColumn) {
	static const const long[6] lColumnStart = { /* <data@0x00591810> */ };

// LINE 330:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 334:
	__asm        cmp    lColumn, 6;
	__asm        jge    near ptr 0x004AA676;
	__asm        cmp    lColumn, 0;
	__asm        jge    near ptr 0x004AA67D;
// LINE 335:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AA68C;
// LINE 336:
	__asm        mov    eax, lColumn;
	__asm        mov    eax, [eax*4+0x591810];
	__asm        jmp    near ptr 0x004AA68C;
// LINE 337:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004aa693
long InventoryWindow::GetRowStartPixel(long lRow) {
	static const const long[11] lRowStart = { /* <data@0x00591828> */ };

// LINE 344:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 348:
	__asm        cmp    lRow, 0xB;
	__asm        jge    near ptr 0x004AA6B3;
	__asm        cmp    lRow, 0;
	__asm        jge    near ptr 0x004AA6BA;
// LINE 349:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004AA6C9;
// LINE 350:
	__asm        mov    eax, lRow;
	__asm        mov    eax, [eax*4+0x591828];
	__asm        jmp    near ptr 0x004AA6C9;
// LINE 351:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004aa6d0
void InventoryWindow::GetEquipmentTextPosition(long lEquipmentIndex, class MPoint& ptEquipment) {
	static const const long[5] lXPositions = { /* <data@0x00591858> */ };
	static const const long[5] lYPositions = { /* <data@0x00591870> */ };

// LINE 359:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 363:
	__asm        cmp    lEquipmentIndex, 5;
	__asm        jge    near ptr 0x004AA6F0;
	__asm        cmp    lEquipmentIndex, 0;
	__asm        jge    near ptr 0x004AA6F7;
// LINE 364:
	__asm        mov    lEquipmentIndex, 0;
// LINE 365:
	__asm        mov    eax, lEquipmentIndex;
	__asm        mov    eax, [eax*4+0x591858];
	__asm        mov    ecx, ptEquipment;
	__asm        mov    [ecx], eax;
// LINE 366:
	__asm        mov    eax, lEquipmentIndex;
	__asm        mov    eax, [eax*4+0x591870];
	__asm        mov    ecx, ptEquipment;
	__asm        mov    [ecx+4], eax;
// LINE 367:
	__asm        jmp    near ptr 0x004AA71B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004aa722
void InventoryWindow::GetTitleAndAddressRects(class MRect& rectTitle, class MRect& rectAddress1, class MRect& rectAddress2) {
// LINE 377:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 378:
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax], 0xE8;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+4], 0x68;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+8], 0x1A6;
	__asm        mov    eax, rectTitle;
	__asm        mov    dword ptr [eax+0xC], 0x9C;
	__asm        jmp    near ptr 0x004AA75A;
// LINE 379:
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax], 0xAE;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+4], 0x6C;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+8], 0xFE;
	__asm        mov    eax, rectAddress1;
	__asm        mov    dword ptr [eax+0xC], 0xA2;
	__asm        jmp    near ptr 0x004AA786;
// LINE 380:
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax], 0x184;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+4], 0x6C;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+8], 0x1D4;
	__asm        mov    eax, rectAddress2;
	__asm        mov    dword ptr [eax+0xC], 0xA2;
	__asm        jmp    near ptr 0x004AA7B2;
// LINE 381:
	__asm        jmp    near ptr 0x004AA7B7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}



// Contribution: 1:000a97c0-000a97f8 Module: 8, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004aa7c0
// InventoryWindow::`scalar deleting destructor'



// Contribution: 2:00002810-00002883 Module: 8, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00002888-0000294b Module: 8, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591888
// ??_7InventoryWindow@@6B@


// Contribution: 3:00003984-000039d1 Module: 8, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a984
// SZ_INVENTORY_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a988
// SZ_INVENTORY_CHECKMARK_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a98c
// SZ_INVENTORY_WINDOW_HELICOPTER_TEXT_NAME
// GLOBAL: COPTER_D 0x0059a990
// SZ_INVENTORY_WINDOW_TITLE_TEXT_NAME
// GLOBAL: COPTER_D 0x0059a994
// SZ_INVENTORY_WINDOW_ADDRESS_TEXT_NAME
