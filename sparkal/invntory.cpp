// Module: invntory.obj
// Source: C:\Copter\source\sparkal\invntory.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:000a7360-000a97bd Module: 8, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004a8360
void InventoryWindow::InventoryWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 53:
	asm( 
"	      004a8360    push ebp"
"	      004a8361    mov ebp,esp"
"	      004a8363    sub esp,9Ch"
"	      004a8369    push ebx"
"	      004a836a    push esi"
"	      004a836b    push edi"
"	      004a836c    mov this,ecx"
"	      004a8372    jmp near ptr 004A8377h"
"	      004a8377    jmp near ptr 004A837Ch"
"	      004a837c    mov eax,windowNewParent"
"	      004a837f    mov eax,[eax+1Ch]"
"	      004a8382    mov ecx,windowNewParent"
"	      004a8385    sub eax,[ecx+14h]"
"	      004a8388    mov [ebp-44h],eax"
"	      004a838b    mov eax,windowNewParent"
"	      004a838e    mov eax,[eax+18h]"
"	      004a8391    mov ecx,windowNewParent"
"	      004a8394    sub eax,[ecx+10h]"
"	      004a8397    mov [ebp-48h],eax"
"	      004a839a    jmp near ptr 004A839Fh"
"	      004a839f    mov dword ptr [ebp-10h],0"
"	      004a83a6    mov dword ptr [ebp-0Ch],0"
"	      004a83ad    mov eax,[ebp-48h]"
"	      004a83b0    mov [ebp-8],eax"
"	      004a83b3    mov eax,[ebp-44h]"
"	      004a83b6    mov [ebp-4],eax"
"	      004a83b9    jmp near ptr 004A83BEh"
"	      004a83be    mov eax,bAddToParentList"
"	      004a83c1    push eax"
"	      004a83c2    mov eax,myNewOwner"
"	      004a83c5    push eax"
"	      004a83c6    mov eax,windowNewParent"
"	      004a83c9    push eax"
"	      004a83ca    mov eax,nNewID"
"	      004a83cd    push eax"
"	      004a83ce    lea eax,[ebp-10h]"
"	      004a83d1    push eax"
"	      004a83d2    mov ecx,this"
"	      004a83d8    call 004A33EEh"
"	      004a83dd    mov eax,this"
"	      004a83e3    mov dword ptr [eax+78h],0"
"	      004a83ea    inc dword ptr ds:[5971CCh]"
"	      004a83f0    mov eax,ds:[5971D8h]"
"	      004a83f5    mov [ebp-4Ch],eax"
"	      004a83f8    cmp dword ptr ds:[5971D8h],0"
"	      004a83ff    je near ptr 004A841Fh"
"	      004a8405    mov eax,ds:[5971D8h]"
"	      004a840a    mov eax,[eax]"
"	      004a840c    mov ds:[5971D8h],eax"
"	      004a8411    mov eax,[ebp-4Ch]"
"	      004a8414    mov [ebp-98h],eax"
"	      004a841a    jmp near ptr 004A862Eh"
"	      004a841f    mov eax,ds:[5971D4h]"
"	      004a8424    cmp ds:[5971D0h],eax"
"	      004a842a    jne near ptr 004A8616h"
"	      004a8430    push 0"
"	      004a8432    call 0056A620h"
"	      004a8437    add esp,4"
"	      004a843a    push 8"
"	      004a843c    call 0056A600h"
"	      004a8441    add esp,4"
"	      004a8444    mov [ebp-84h],eax"
"	      004a844a    cmp dword ptr [ebp-84h],0"
"	      004a8451    jne near ptr 004A848Ah"
"	      004a8457    push 5971ACh"
"	      004a845c    mov ecx,638BA0h"
"	      004a8461    call 00569960h"
"	      004a8466    mov [ebp-88h],eax"
"	      004a846c    mov eax,[ebp-88h]"
"	      004a8472    push eax"
"	      004a8473    call 004011B0h"
"	      004a8478    add esp,4"
"	      004a847b    jmp near ptr 004A8480h"
"	      004a8480    push 1"
"	      004a8482    call 00569430h"
"	      004a8487    add esp,4"
"	      004a848a    jmp near ptr 004A848Fh"
"	      004a848f    jmp near ptr 004A8494h"
"	      004a8494    mov eax,[ebp-84h]"
"	      004a849a    mov [ebp-58h],eax"
"	      004a849d    mov dword ptr [ebp-5Ch],92h"
"	      004a84a4    lea eax,[ebp-5Ch]"
"	      004a84a7    mov [ebp-64h],eax"
"	      004a84aa    mov dword ptr [ebp-60h],1"
"	      004a84b1    lea eax,[ebp-60h]"
"	      004a84b4    mov [ebp-68h],eax"
"	      004a84b7    mov eax,[ebp-68h]"
"	      004a84ba    mov ecx,[ebp-64h]"
"	      004a84bd    mov ecx,[ecx]"
"	      004a84bf    cmp [eax],ecx"
"	      004a84c1    jb near ptr 004A84D2h"
"	      004a84c7    mov eax,[ebp-68h]"
"	      004a84ca    mov [ebp-6Ch],eax"
"	      004a84cd    jmp near ptr 004A84D8h"
"	      004a84d2    mov eax,[ebp-64h]"
"	      004a84d5    mov [ebp-6Ch],eax"
"	      004a84d8    jmp near ptr 004A84DDh"
"	      004a84dd    jmp near ptr 004A84E2h"
"	      004a84e2    jmp near ptr 004A84E7h"
"	      004a84e7    mov eax,[ebp-6Ch]"
"	      004a84ea    mov eax,[eax]"
"	      004a84ec    mov [ebp-94h],eax"
"	      004a84f2    push 0"
"	      004a84f4    call 0056A620h"
"	      004a84f9    add esp,4"
"	      004a84fc    mov eax,[ebp-94h]"
"	      004a8502    mov ecx,eax"
"	      004a8504    shl eax,3"
"	      004a8507    sub eax,ecx"
"	      004a8509    shl eax,2"
"	      004a850c    push eax"
"	      004a850d    call 0056A600h"
"	      004a8512    add esp,4"
"	      004a8515    mov [ebp-8Ch],eax"
"	      004a851b    cmp dword ptr [ebp-8Ch],0"
"	      004a8522    jne near ptr 004A855Bh"
"	      004a8528    push 5971ACh"
"	      004a852d    mov ecx,638BA0h"
"	      004a8532    call 00569960h"
"	      004a8537    mov [ebp-90h],eax"
"	      004a853d    mov eax,[ebp-90h]"
"	      004a8543    push eax"
"	      004a8544    call 004011B0h"
"	      004a8549    add esp,4"
"	      004a854c    jmp near ptr 004A8551h"
"	      004a8551    push 1"
"	      004a8553    call 00569430h"
"	      004a8558    add esp,4"
"	      004a855b    jmp near ptr 004A8560h"
"	      004a8560    jmp near ptr 004A8565h"
"	      004a8565    mov eax,[ebp-8Ch]"
"	      004a856b    mov ecx,[ebp-58h]"
"	      004a856e    mov [ecx+4],eax"
"	      004a8571    mov eax,ds:[5971DCh]"
"	      004a8576    mov ecx,[ebp-58h]"
"	      004a8579    mov [ecx],eax"
"	      004a857b    mov eax,[ebp-58h]"
"	      004a857e    mov ds:[5971DCh],eax"
"	      004a8583    mov eax,ds:[5971DCh]"
"	      004a8588    mov eax,[eax+4]"
"	      004a858b    mov ds:[5971D4h],eax"
"	      004a8590    mov dword ptr [ebp-70h],92h"
"	      004a8597    lea eax,[ebp-70h]"
"	      004a859a    mov [ebp-78h],eax"
"	      004a859d    mov dword ptr [ebp-74h],1"
"	      004a85a4    lea eax,[ebp-74h]"
"	      004a85a7    mov [ebp-7Ch],eax"
"	      004a85aa    mov eax,[ebp-7Ch]"
"	      004a85ad    mov ecx,[ebp-78h]"
"	      004a85b0    mov ecx,[ecx]"
"	      004a85b2    cmp [eax],ecx"
"	      004a85b4    jb near ptr 004A85C5h"
"	      004a85ba    mov eax,[ebp-7Ch]"
"	      004a85bd    mov [ebp-80h],eax"
"	      004a85c0    jmp near ptr 004A85CBh"
"	      004a85c5    mov eax,[ebp-78h]"
"	      004a85c8    mov [ebp-80h],eax"
"	      004a85cb    jmp near ptr 004A85D0h"
"	      004a85d0    jmp near ptr 004A85D5h"
"	      004a85d5    jmp near ptr 004A85DAh"
"	      004a85da    mov eax,[ebp-80h]"
"	      004a85dd    mov eax,[eax]"
"	      004a85df    mov ecx,eax"
"	      004a85e1    shl eax,3"
"	      004a85e4    sub eax,ecx"
"	      004a85e6    shl eax,2"
"	      004a85e9    add eax,ds:[5971D4h]"
"	      004a85ef    mov ds:[5971D0h],eax"
"	      004a85f4    jmp near ptr 004A85F9h"
"	      004a85f9    mov eax,ds:[5971D4h]"
"	      004a85fe    mov [ebp-50h],eax"
"	      004a8601    add dword ptr ds:[5971D4h],1Ch"
"	      004a8608    mov eax,[ebp-50h]"
"	      004a860b    mov [ebp-98h],eax"
"	      004a8611    jmp near ptr 004A862Eh"
"	      004a8616    mov eax,ds:[5971D4h]"
"	      004a861b    mov [ebp-54h],eax"
"	      004a861e    add dword ptr ds:[5971D4h],1Ch"
"	      004a8625    mov eax,[ebp-54h]"
"	      004a8628    mov [ebp-98h],eax"
"	      004a862e    jmp near ptr 004A8633h"
"	      004a8633    mov eax,[ebp-98h]"
"	      004a8639    mov ecx,this"
"	      004a863f    mov [ecx+74h],eax"
"	      004a8642    mov eax,this"
"	      004a8648    mov eax,[eax+74h]"
"	      004a864b    mov ecx,this"
"	      004a8651    mov ecx,[ecx+74h]"
"	      004a8654    mov [ecx],eax"
"	      004a8656    mov eax,this"
"	      004a865c    mov eax,[eax+74h]"
"	      004a865f    mov ecx,this"
"	      004a8665    mov ecx,[ecx+74h]"
"	      004a8668    mov [ecx+4],eax"
"	      004a866b    jmp near ptr 004A8670h"
"	      004a8670    mov eax,this"
"	      004a8676    mov dword ptr [eax+7Ch],0"
"	      004a867d    mov eax,this"
"	      004a8683    mov dword ptr [eax+80h],0"
"	      004a868d    mov ecx,this"
"	      004a8693    add ecx,84h"
"	      004a8699    call 0042EF87h"
"	      004a869e    mov dword ptr [ebp-18h],9"
"	      004a86a5    mov eax,this"
"	      004a86ab    add eax,0FEh"
"	      004a86b0    mov [ebp-1Ch],eax"
"	      004a86b3    dec dword ptr [ebp-18h]"
"	      004a86b6    js near ptr 004A86CDh"
"	      004a86bc    mov ecx,[ebp-1Ch]"
"	      004a86bf    call 00411EE0h"
"	      004a86c4    add dword ptr [ebp-1Ch],8"
"	      004a86c8    jmp near ptr 004A86B3h"
"	      004a86cd    jmp near ptr 004A86D2h"
"	      004a86d2    mov dword ptr [ebp-20h],5"
"	      004a86d9    mov eax,this"
"	      004a86df    add eax,146h"
"	      004a86e4    mov [ebp-24h],eax"
"	      004a86e7    dec dword ptr [ebp-20h]"
"	      004a86ea    js near ptr 004A8701h"
"	      004a86f0    mov ecx,[ebp-24h]"
"	      004a86f3    call 00411EE0h"
"	      004a86f8    add dword ptr [ebp-24h],8"
"	      004a86fc    jmp near ptr 004A86E7h"
"	      004a8701    jmp near ptr 004A8706h"
"	      004a8706    mov eax,ds:[59A988h]"
"	      004a870b    mov [ebp-40h],eax"
"	      004a870e    push 10h"
"	      004a8710    call 0056A600h"
"	      004a8715    add esp,4"
"	      004a8718    mov [ebp-34h],eax"
"	      004a871b    cmp dword ptr [ebp-34h],0"
"	      004a871f    je near ptr 004A87C4h"
"	      004a8725    mov eax,[ebp-40h]"
"	      004a8728    push eax"
"	      004a8729    call 0056ABE0h"
"	      004a872e    add esp,4"
"	      004a8731    mov ecx,[ebp-34h]"
"	      004a8734    mov [ecx+4],eax"
"	      004a8737    jmp near ptr 004A873Ch"
"	      004a873c    mov eax,[ebp-34h]"
"	      004a873f    mov eax,[eax+4]"
"	      004a8742    mov ecx,[ebp-34h]"
"	      004a8745    mov [ecx+8],eax"
"	      004a8748    mov eax,[ebp-34h]"
"	      004a874b    cmp dword ptr [eax+8],0"
"	      004a874f    je near ptr 004A8798h"
"	      004a8755    mov eax,[ebp-34h]"
"	      004a8758    mov eax,[eax+8]"
"	      004a875b    push eax"
"	      004a875c    call 0056A600h"
"	      004a8761    add esp,4"
"	      004a8764    mov ecx,[ebp-34h]"
"	      004a8767    mov [ecx],eax"
"	      004a8769    mov eax,[ebp-34h]"
"	      004a876c    mov eax,[eax+4]"
"	      004a876f    mov [ebp-38h],eax"
"	      004a8772    mov eax,[ebp-34h]"
"	      004a8775    mov eax,[eax]"
"	      004a8777    mov [ebp-3Ch],eax"
"	      004a877a    mov eax,[ebp-38h]"
"	      004a877d    push eax"
"	      004a877e    mov eax,[ebp-40h]"
"	      004a8781    push eax"
"	      004a8782    mov eax,[ebp-3Ch]"
"	      004a8785    push eax"
"	      004a8786    call 0056A800h"
"	      004a878b    add esp,0Ch"
"	      004a878e    jmp near ptr 004A8793h"
"	      004a8793    jmp near ptr 004A87A1h"
"	      004a8798    mov eax,[ebp-34h]"
"	      004a879b    mov dword ptr [eax],0"
"	      004a87a1    mov eax,[ebp-34h]"
"	      004a87a4    mov dword ptr [eax+0Ch],1"
"	      004a87ab    jmp near ptr 004A87B0h"
"	      004a87b0    mov eax,[ebp-34h]"
"	      004a87b3    mov ecx,this"
"	      004a87b9    mov [ecx+172h],eax"
"	      004a87bf    jmp near ptr 004A87D4h"
"	      004a87c4    mov eax,this"
"	      004a87ca    mov dword ptr [eax+172h],0"
"	      004a87d4    mov eax,this"
"	      004a87da    mov dword ptr [eax+16Eh],0"
"	      004a87e4    jmp near ptr 004A87E9h"
"	      004a87e9    push 10h"
"	      004a87eb    call 0056A600h"
"	      004a87f0    add esp,4"
"	      004a87f3    mov [ebp-28h],eax"
"	      004a87f6    cmp dword ptr [ebp-28h],0"
"	      004a87fa    je near ptr 004A8842h"
"	      004a8800    mov eax,[ebp-28h]"
"	      004a8803    mov dword ptr [eax+4],0"
"	      004a880a    mov eax,[ebp-28h]"
"	      004a880d    mov eax,[eax+4]"
"	      004a8810    mov ecx,[ebp-28h]"
"	      004a8813    mov [ecx+8],eax"
"	      004a8816    mov eax,[ebp-28h]"
"	      004a8819    mov dword ptr [eax],0"
"	      004a881f    mov eax,[ebp-28h]"
"	      004a8822    mov dword ptr [eax+0Ch],1"
"	      004a8829    jmp near ptr 004A882Eh"
"	      004a882e    mov eax,[ebp-28h]"
"	      004a8831    mov ecx,this"
"	      004a8837    mov [ecx+17Ah],eax"
"	      004a883d    jmp near ptr 004A8852h"
"	      004a8842    mov eax,this"
"	      004a8848    mov dword ptr [eax+17Ah],0"
"	      004a8852    mov eax,this"
"	      004a8858    mov dword ptr [eax+176h],0"
"	      004a8862    jmp near ptr 004A8867h"
"	      004a8867    push 10h"
"	      004a8869    call 0056A600h"
"	      004a886e    add esp,4"
"	      004a8871    mov [ebp-2Ch],eax"
"	      004a8874    cmp dword ptr [ebp-2Ch],0"
"	      004a8878    je near ptr 004A88C0h"
"	      004a887e    mov eax,[ebp-2Ch]"
"	      004a8881    mov dword ptr [eax+4],0"
"	      004a8888    mov eax,[ebp-2Ch]"
"	      004a888b    mov eax,[eax+4]"
"	      004a888e    mov ecx,[ebp-2Ch]"
"	      004a8891    mov [ecx+8],eax"
"	      004a8894    mov eax,[ebp-2Ch]"
"	      004a8897    mov dword ptr [eax],0"
"	      004a889d    mov eax,[ebp-2Ch]"
"	      004a88a0    mov dword ptr [eax+0Ch],1"
"	      004a88a7    jmp near ptr 004A88ACh"
"	      004a88ac    mov eax,[ebp-2Ch]"
"	      004a88af    mov ecx,this"
"	      004a88b5    mov [ecx+182h],eax"
"	      004a88bb    jmp near ptr 004A88D0h"
"	      004a88c0    mov eax,this"
"	      004a88c6    mov dword ptr [eax+182h],0"
"	      004a88d0    mov eax,this"
"	      004a88d6    mov dword ptr [eax+17Eh],0"
"	      004a88e0    jmp near ptr 004A88E5h"
"	      004a88e5    push 10h"
"	      004a88e7    call 0056A600h"
"	      004a88ec    add esp,4"
"	      004a88ef    mov [ebp-30h],eax"
"	      004a88f2    cmp dword ptr [ebp-30h],0"
"	      004a88f6    je near ptr 004A893Eh"
"	      004a88fc    mov eax,[ebp-30h]"
"	      004a88ff    mov dword ptr [eax+4],0"
"	      004a8906    mov eax,[ebp-30h]"
"	      004a8909    mov eax,[eax+4]"
"	      004a890c    mov ecx,[ebp-30h]"
"	      004a890f    mov [ecx+8],eax"
"	      004a8912    mov eax,[ebp-30h]"
"	      004a8915    mov dword ptr [eax],0"
"	      004a891b    mov eax,[ebp-30h]"
"	      004a891e    mov dword ptr [eax+0Ch],1"
"	      004a8925    jmp near ptr 004A892Ah"
"	      004a892a    mov eax,[ebp-30h]"
"	      004a892d    mov ecx,this"
"	      004a8933    mov [ecx+18Ah],eax"
"	      004a8939    jmp near ptr 004A894Eh"
"	      004a893e    mov eax,this"
"	      004a8944    mov dword ptr [eax+18Ah],0"
"	      004a894e    mov eax,this"
"	      004a8954    mov dword ptr [eax+186h],0"
"	      004a895e    jmp near ptr 004A8963h"
"	      004a8963    push 1"
"	      004a8965    push 0"
"	      004a8967    push 0"
"	      004a8969    push 10h"
"	      004a896b    mov eax,ds:[59A98Ch]"
"	      004a8970    push eax"
"	      004a8971    mov ecx,this"
"	      004a8977    add ecx,18Eh"
"	      004a897d    call 0049F937h"
"	      004a8982    push 1"
"	      004a8984    push 0"
"	      004a8986    push 0"
"	      004a8988    push 1Ch"
"	      004a898a    mov eax,ds:[59A990h]"
"	      004a898f    push eax"
"	      004a8990    mov ecx,this"
"	      004a8996    add ecx,1AAh"
"	      004a899c    call 0049F937h"
"	      004a89a1    push 1"
"	      004a89a3    push 0"
"	      004a89a5    push 0"
"	      004a89a7    push 0Ch"
"	      004a89a9    mov eax,ds:[59A994h]"
"	      004a89ae    push eax"
"	      004a89af    mov ecx,this"
"	      004a89b5    add ecx,1C6h"
"	      004a89bb    call 0049F937h"
"	      004a89c0    mov eax,this"
"	      004a89c6    mov dword ptr [eax],591888h"
"	      004a89cc    mov eax,ds:[59A984h]"
"	      004a89d1    mov [ebp-14h],eax"
);
// LINE 54:
	asm( 
"	      004a89d4    jmp near ptr 004A89D9h"
"	      004a89d9    mov eax,[ebp-14h]"
"	      004a89dc    push eax"
"	      004a89dd    call 0056ABE0h"
"	      004a89e2    add esp,4"
"	      004a89e5    push eax"
"	      004a89e6    mov eax,[ebp-14h]"
"	      004a89e9    push eax"
"	      004a89ea    mov ecx,this"
"	      004a89f0    add ecx,5Ch"
"	      004a89f3    call 0040FEE0h"
"	      004a89f8    jmp near ptr 004A89FDh"
);
// LINE 55:
	asm( 
"	      004a89fd    mov ecx,this"
"	      004a8a03    call 004AA640h"
);
// LINE 56:
	asm( 
"	      004a8a08    push 1"
"	      004a8a0a    mov ecx,this"
"	      004a8a10    call 004A995Fh"
);
// LINE 57:
	asm( 
"	      004a8a15    mov ecx,this"
"	      004a8a1b    call 004A6BCDh"
);
// LINE 58:
	asm( 
"	      004a8a20    mov eax,this"
"	      004a8a26    push eax"
"	      004a8a27    call 004A7075h"
"	      004a8a2c    add esp,4"
);
// LINE 59:
	asm( 
"	      004a8a2f    mov eax,this"
"	      004a8a35    push eax"
"	      004a8a36    call 004A7470h"
"	      004a8a3b    add esp,4"
);
// LINE 60:
	asm( 
"	      004a8a3e    jmp near ptr 004A8A43h"
"	      004a8a43    mov eax,this"
"	      004a8a49    pop edi"
"	      004a8a4a    pop esi"
"	      004a8a4b    pop ebx"
"	      004a8a4c    leave"
"	      004a8a4d    ret 10h"
);
}

// FUNCTION: COPTER_D 0x004a8a50
void InventoryWindow::~InventoryWindow() {
// LINE 66:
	asm( 
"	      004a8a50    push ebp"
"	      004a8a51    mov ebp,esp"
"	      004a8a53    sub esp,7Ch"
"	      004a8a56    push ebx"
"	      004a8a57    push esi"
"	      004a8a58    push edi"
"	      004a8a59    mov this,ecx"
"	      004a8a5c    mov eax,this"
"	      004a8a5f    mov dword ptr [eax],591888h"
);
// LINE 67:
	asm( 
"	      004a8a65    mov ecx,this"
"	      004a8a68    call 004A9C85h"
);
// LINE 68:
	asm( 
"	      004a8a6d    mov eax,this"
"	      004a8a70    push eax"
"	      004a8a71    call 004A773Bh"
"	      004a8a76    add esp,4"
);
// LINE 69:
	asm( 
"	      004a8a79    mov eax,this"
"	      004a8a7c    push eax"
"	      004a8a7d    call 004A7340h"
"	      004a8a82    add esp,4"
);
// LINE 70:
	asm( 
"	      004a8a85    jmp near ptr 004A8A8Ah"
"	      004a8a8a    mov ecx,this"
"	      004a8a8d    add ecx,1C6h"
"	      004a8a93    call 0049FC4Eh"
"	      004a8a98    mov ecx,this"
"	      004a8a9b    add ecx,1AAh"
"	      004a8aa1    call 0049FC4Eh"
"	      004a8aa6    mov ecx,this"
"	      004a8aa9    add ecx,18Eh"
"	      004a8aaf    call 0049FC4Eh"
"	      004a8ab4    mov eax,this"
"	      004a8ab7    mov eax,[eax+18Ah]"
"	      004a8abd    dec dword ptr [eax+0Ch]"
"	      004a8ac0    mov eax,this"
"	      004a8ac3    mov eax,[eax+18Ah]"
"	      004a8ac9    cmp dword ptr [eax+0Ch],0"
"	      004a8acd    jne near ptr 004A8B12h"
"	      004a8ad3    mov eax,this"
"	      004a8ad6    mov eax,[eax+18Ah]"
"	      004a8adc    mov [ebp-10h],eax"
"	      004a8adf    mov eax,[ebp-10h]"
"	      004a8ae2    mov [ebp-0Ch],eax"
"	      004a8ae5    cmp dword ptr [ebp-0Ch],0"
"	      004a8ae9    je near ptr 004A8B12h"
"	      004a8aef    mov ecx,[ebp-0Ch]"
"	      004a8af2    call 0041F4B0h"
"	      004a8af7    jmp near ptr 004A8AFCh"
"	      004a8afc    mov eax,[ebp-0Ch]"
"	      004a8aff    push eax"
"	      004a8b00    call 0056A740h"
"	      004a8b05    add esp,4"
"	      004a8b08    jmp near ptr 004A8B0Dh"
"	      004a8b0d    jmp near ptr 004A8B12h"
"	      004a8b12    jmp near ptr 004A8B17h"
"	      004a8b17    mov eax,this"
"	      004a8b1a    cmp dword ptr [eax+186h],0"
"	      004a8b21    je near ptr 004A8B45h"
"	      004a8b27    mov eax,this"
"	      004a8b2a    mov eax,[eax+186h]"
"	      004a8b30    mov [ebp-4],eax"
"	      004a8b33    mov eax,[ebp-4]"
"	      004a8b36    mov [ebp-8],eax"
"	      004a8b39    mov eax,[ebp-8]"
"	      004a8b3c    push eax"
"	      004a8b3d    call 0056A740h"
"	      004a8b42    add esp,4"
"	      004a8b45    jmp near ptr 004A8B4Ah"
"	      004a8b4a    mov eax,this"
"	      004a8b4d    mov eax,[eax+182h]"
"	      004a8b53    dec dword ptr [eax+0Ch]"
"	      004a8b56    mov eax,this"
"	      004a8b59    mov eax,[eax+182h]"
"	      004a8b5f    cmp dword ptr [eax+0Ch],0"
"	      004a8b63    jne near ptr 004A8BA8h"
"	      004a8b69    mov eax,this"
"	      004a8b6c    mov eax,[eax+182h]"
"	      004a8b72    mov [ebp-20h],eax"
"	      004a8b75    mov eax,[ebp-20h]"
"	      004a8b78    mov [ebp-1Ch],eax"
"	      004a8b7b    cmp dword ptr [ebp-1Ch],0"
"	      004a8b7f    je near ptr 004A8BA8h"
"	      004a8b85    mov ecx,[ebp-1Ch]"
"	      004a8b88    call 0041F4B0h"
"	      004a8b8d    jmp near ptr 004A8B92h"
"	      004a8b92    mov eax,[ebp-1Ch]"
"	      004a8b95    push eax"
"	      004a8b96    call 0056A740h"
"	      004a8b9b    add esp,4"
"	      004a8b9e    jmp near ptr 004A8BA3h"
"	      004a8ba3    jmp near ptr 004A8BA8h"
"	      004a8ba8    jmp near ptr 004A8BADh"
"	      004a8bad    mov eax,this"
"	      004a8bb0    cmp dword ptr [eax+17Eh],0"
"	      004a8bb7    je near ptr 004A8BDBh"
"	      004a8bbd    mov eax,this"
"	      004a8bc0    mov eax,[eax+17Eh]"
"	      004a8bc6    mov [ebp-14h],eax"
"	      004a8bc9    mov eax,[ebp-14h]"
"	      004a8bcc    mov [ebp-18h],eax"
"	      004a8bcf    mov eax,[ebp-18h]"
"	      004a8bd2    push eax"
"	      004a8bd3    call 0056A740h"
"	      004a8bd8    add esp,4"
"	      004a8bdb    jmp near ptr 004A8BE0h"
"	      004a8be0    mov eax,this"
"	      004a8be3    mov eax,[eax+17Ah]"
"	      004a8be9    dec dword ptr [eax+0Ch]"
"	      004a8bec    mov eax,this"
"	      004a8bef    mov eax,[eax+17Ah]"
"	      004a8bf5    cmp dword ptr [eax+0Ch],0"
"	      004a8bf9    jne near ptr 004A8C3Eh"
"	      004a8bff    mov eax,this"
"	      004a8c02    mov eax,[eax+17Ah]"
"	      004a8c08    mov [ebp-30h],eax"
"	      004a8c0b    mov eax,[ebp-30h]"
"	      004a8c0e    mov [ebp-2Ch],eax"
"	      004a8c11    cmp dword ptr [ebp-2Ch],0"
"	      004a8c15    je near ptr 004A8C3Eh"
"	      004a8c1b    mov ecx,[ebp-2Ch]"
"	      004a8c1e    call 0041F4B0h"
"	      004a8c23    jmp near ptr 004A8C28h"
"	      004a8c28    mov eax,[ebp-2Ch]"
"	      004a8c2b    push eax"
"	      004a8c2c    call 0056A740h"
"	      004a8c31    add esp,4"
"	      004a8c34    jmp near ptr 004A8C39h"
"	      004a8c39    jmp near ptr 004A8C3Eh"
"	      004a8c3e    jmp near ptr 004A8C43h"
"	      004a8c43    mov eax,this"
"	      004a8c46    cmp dword ptr [eax+176h],0"
"	      004a8c4d    je near ptr 004A8C71h"
"	      004a8c53    mov eax,this"
"	      004a8c56    mov eax,[eax+176h]"
"	      004a8c5c    mov [ebp-24h],eax"
"	      004a8c5f    mov eax,[ebp-24h]"
"	      004a8c62    mov [ebp-28h],eax"
"	      004a8c65    mov eax,[ebp-28h]"
"	      004a8c68    push eax"
"	      004a8c69    call 0056A740h"
"	      004a8c6e    add esp,4"
"	      004a8c71    jmp near ptr 004A8C76h"
"	      004a8c76    mov eax,this"
"	      004a8c79    mov eax,[eax+172h]"
"	      004a8c7f    dec dword ptr [eax+0Ch]"
"	      004a8c82    mov eax,this"
"	      004a8c85    mov eax,[eax+172h]"
"	      004a8c8b    cmp dword ptr [eax+0Ch],0"
"	      004a8c8f    jne near ptr 004A8CC0h"
"	      004a8c95    mov eax,this"
"	      004a8c98    mov eax,[eax+172h]"
"	      004a8c9e    mov [ebp-40h],eax"
"	      004a8ca1    mov eax,[ebp-40h]"
"	      004a8ca4    mov [ebp-3Ch],eax"
"	      004a8ca7    cmp dword ptr [ebp-3Ch],0"
"	      004a8cab    je near ptr 004A8CC0h"
"	      004a8cb1    push 1"
"	      004a8cb3    mov ecx,[ebp-3Ch]"
"	      004a8cb6    call 0041DD70h"
"	      004a8cbb    jmp near ptr 004A8CC0h"
"	      004a8cc0    jmp near ptr 004A8CC5h"
"	      004a8cc5    mov eax,this"
"	      004a8cc8    cmp dword ptr [eax+16Eh],0"
"	      004a8ccf    je near ptr 004A8CF3h"
"	      004a8cd5    mov eax,this"
"	      004a8cd8    mov eax,[eax+16Eh]"
"	      004a8cde    mov [ebp-34h],eax"
"	      004a8ce1    mov eax,[ebp-34h]"
"	      004a8ce4    mov [ebp-38h],eax"
"	      004a8ce7    mov eax,[ebp-38h]"
"	      004a8cea    push eax"
"	      004a8ceb    call 0056A740h"
"	      004a8cf0    add esp,4"
"	      004a8cf3    jmp near ptr 004A8CF8h"
"	      004a8cf8    mov dword ptr [ebp-44h],5"
"	      004a8cff    mov eax,this"
"	      004a8d02    add eax,146h"
"	      004a8d07    mov [ebp-48h],eax"
"	      004a8d0a    mov eax,[ebp-44h]"
"	      004a8d0d    shl eax,3"
"	      004a8d10    add [ebp-48h],eax"
"	      004a8d13    dec dword ptr [ebp-44h]"
"	      004a8d16    js near ptr 004A8D2Dh"
"	      004a8d1c    sub dword ptr [ebp-48h],8"
"	      004a8d20    mov ecx,[ebp-48h]"
"	      004a8d23    call 00412130h"
"	      004a8d28    jmp near ptr 004A8D13h"
"	      004a8d2d    jmp near ptr 004A8D32h"
"	      004a8d32    mov dword ptr [ebp-4Ch],9"
"	      004a8d39    mov eax,this"
"	      004a8d3c    add eax,0FEh"
"	      004a8d41    mov [ebp-50h],eax"
"	      004a8d44    mov eax,[ebp-4Ch]"
"	      004a8d47    shl eax,3"
"	      004a8d4a    add [ebp-50h],eax"
"	      004a8d4d    dec dword ptr [ebp-4Ch]"
"	      004a8d50    js near ptr 004A8D67h"
"	      004a8d56    sub dword ptr [ebp-50h],8"
"	      004a8d5a    mov ecx,[ebp-50h]"
"	      004a8d5d    call 00412130h"
"	      004a8d62    jmp near ptr 004A8D4Dh"
"	      004a8d67    jmp near ptr 004A8D6Ch"
"	      004a8d6c    mov ecx,this"
"	      004a8d6f    add ecx,84h"
"	      004a8d75    call 0042F2E9h"
"	      004a8d7a    mov eax,this"
"	      004a8d7d    mov eax,[eax+74h]"
"	      004a8d80    mov [ebp-60h],eax"
"	      004a8d83    mov eax,[ebp-60h]"
"	      004a8d86    mov [ebp-54h],eax"
"	      004a8d89    jmp near ptr 004A8D8Eh"
"	      004a8d8e    jmp near ptr 004A8D93h"
"	      004a8d93    mov eax,this"
"	      004a8d96    mov eax,[eax+74h]"
"	      004a8d99    mov eax,[eax]"
"	      004a8d9b    mov [ebp-64h],eax"
"	      004a8d9e    mov eax,[ebp-64h]"
"	      004a8da1    mov [ebp-58h],eax"
"	      004a8da4    jmp near ptr 004A8DA9h"
"	      004a8da9    jmp near ptr 004A8DAEh"
"	      004a8dae    mov eax,[ebp-54h]"
"	      004a8db1    mov [ebp-74h],eax"
"	      004a8db4    mov eax,[ebp-58h]"
"	      004a8db7    mov [ebp-78h],eax"
"	      004a8dba    mov eax,[ebp-74h]"
"	      004a8dbd    cmp [ebp-78h],eax"
"	      004a8dc0    jne near ptr 004A8DD0h"
"	      004a8dc6    jmp near ptr 004A8DE4h"
"	      004a8dcb    jmp near ptr 004A8DD0h"
"	      004a8dd0    jmp near ptr 004A8DDFh"
"	      004a8dd5    cmp dword ptr [ebp-6Ch],0"
"	      004a8dd9    jne near ptr 004A8DE4h"
"	      004a8ddf    jmp near ptr 004A8DE9h"
"	      004a8de4    jmp near ptr 004A8E19h"
"	      004a8de9    jmp near ptr 004A8DF8h"
"	      004a8dee    cmp dword ptr [ebp-70h],0"
"	      004a8df2    je near ptr 004A8E19h"
"	      004a8df8    push 0"
"	      004a8dfa    lea eax,[ebp-68h]"
"	      004a8dfd    push eax"
"	      004a8dfe    lea ecx,[ebp-78h]"
"	      004a8e01    call 0040DB10h"
"	      004a8e06    mov eax,[eax]"
"	      004a8e08    push eax"
"	      004a8e09    mov ecx,this"
"	      004a8e0c    add ecx,74h"
"	      004a8e0f    call 0040DB50h"
"	      004a8e14    jmp near ptr 004A8DBAh"
"	      004a8e19    jmp near ptr 004A8E1Eh"
"	      004a8e1e    mov eax,this"
"	      004a8e21    mov eax,[eax+74h]"
"	      004a8e24    mov [ebp-5Ch],eax"
"	      004a8e27    mov eax,ds:[5971D8h]"
"	      004a8e2c    mov ecx,[ebp-5Ch]"
"	      004a8e2f    mov [ecx],eax"
"	      004a8e31    mov eax,[ebp-5Ch]"
"	      004a8e34    mov ds:[5971D8h],eax"
"	      004a8e39    jmp near ptr 004A8E3Eh"
"	      004a8e3e    dec dword ptr ds:[5971CCh]"
"	      004a8e44    jne near ptr 004A8E55h"
"	      004a8e4a    mov ecx,this"
"	      004a8e4d    add ecx,74h"
"	      004a8e50    call 0041BBD0h"
"	      004a8e55    jmp near ptr 004A8E5Ah"
"	      004a8e5a    mov ecx,this"
"	      004a8e5d    call 004A4045h"
"	      004a8e62    pop edi"
"	      004a8e63    pop esi"
"	      004a8e64    pop ebx"
"	      004a8e65    leave"
"	      004a8e66    ret"
);
}

// FUNCTION: COPTER_D 0x004a8e67
int32_t InventoryWindow::Initialize() {
	int32_t nReturnValue;
	int32_t i;
	int32_t nFullStringID;

// LINE 76:
	asm( 
"	      004a8e67    push ebp"
"	      004a8e68    mov ebp,esp"
"	      004a8e6a    mov eax,5060h"
"	      004a8e6f    call 0056AC60h"
"	      004a8e74    push ebx"
"	      004a8e75    push esi"
"	      004a8e76    push edi"
"	      004a8e77    mov this,ecx"
);
// LINE 81:
	asm( 
"	      004a8e7d    mov ecx,this"
"	      004a8e83    call 004A44D4h"
"	      004a8e88    mov nReturnValue,eax"
);
// LINE 87:
	asm( 
"	      004a8e8b    mov i,0"
"	      004a8e92    jmp near ptr 004A8E9Ah"
"	      004a8e97    inc i"
"	      004a8e9a    cmp i,9"
"	      004a8e9e    jge near ptr 004A9124h"
);
// LINE 88:
	asm( 
"	      004a8ea4    push 0"
"	      004a8ea6    mov eax,i"
"	      004a8ea9    add eax,190h"
"	      004a8eae    push eax"
"	      004a8eaf    call 0042B15Fh"
"	      004a8eb4    add esp,8"
"	      004a8eb7    mov nFullStringID,eax"
);
// LINE 89:
	asm( 
"	      004a8eba    push 0FFFh"
"	      004a8ebf    lea eax,[ebp-100Ch]"
"	      004a8ec5    push eax"
"	      004a8ec6    mov eax,nFullStringID"
"	      004a8ec9    push eax"
"	      004a8eca    mov eax,ds:[5C28C8h]"
"	      004a8ecf    push eax"
"	      004a8ed0    call dword ptr ds:[6C38B4h]"
"	      004a8ed6    mov [ebp-1010h],eax"
"	      004a8edc    cmp dword ptr [ebp-1010h],0"
"	      004a8ee3    jne near ptr 004A8F81h"
"	      004a8ee9    push 0FFFh"
"	      004a8eee    lea eax,[ebp-100Ch]"
"	      004a8ef4    push eax"
"	      004a8ef5    mov ecx,3E8h"
"	      004a8efa    mov eax,nFullStringID"
"	      004a8efd    sub edx,edx"
"	      004a8eff    div ecx"
"	      004a8f01    push edx"
"	      004a8f02    mov eax,ds:[5C28C8h]"
"	      004a8f07    push eax"
"	      004a8f08    call dword ptr ds:[6C38B4h]"
"	      004a8f0e    mov [ebp-1010h],eax"
"	      004a8f14    jmp near ptr 004A8F19h"
"	      004a8f19    lea eax,[ebp-100Ch]"
"	      004a8f1f    push eax"
"	      004a8f20    call 0056ABE0h"
"	      004a8f25    add esp,4"
"	      004a8f28    push eax"
"	      004a8f29    lea eax,[ebp-100Ch]"
"	      004a8f2f    push eax"
"	      004a8f30    mov eax,i"
"	      004a8f33    mov ecx,this"
"	      004a8f39    lea ecx,[ecx+eax*8+0FEh]"
"	      004a8f40    call 0040FEE0h"
"	      004a8f45    jmp near ptr 004A8F4Ah"
"	      004a8f4a    jmp near ptr 004A8F4Fh"
"	      004a8f4f    push 597200h"
"	      004a8f54    call 0056ABE0h"
"	      004a8f59    add esp,4"
"	      004a8f5c    push eax"
"	      004a8f5d    push 597200h"
"	      004a8f62    mov eax,i"
"	      004a8f65    mov ecx,this"
"	      004a8f6b    lea ecx,[ecx+eax*8+0FEh]"
"	      004a8f72    call 00410130h"
"	      004a8f77    jmp near ptr 004A8F7Ch"
"	      004a8f7c    jmp near ptr 004A911Fh"
"	      004a8f81    jmp near ptr 004A8F86h"
"	      004a8f86    lea eax,[ebp-100Ch]"
"	      004a8f8c    push eax"
"	      004a8f8d    call 0056ABE0h"
"	      004a8f92    add esp,4"
"	      004a8f95    mov [ebp-1024h],eax"
"	      004a8f9b    cmp dword ptr [ebp-1024h],0FFFFFFFFh"
"	      004a8fa2    jne near ptr 004A8FE0h"
"	      004a8fa8    push 5971E4h"
"	      004a8fad    mov ecx,638C00h"
"	      004a8fb2    call 00569960h"
"	      004a8fb7    mov [ebp-1020h],eax"
"	      004a8fbd    mov eax,[ebp-1020h]"
"	      004a8fc3    push eax"
"	      004a8fc4    call 004011B0h"
"	      004a8fc9    add esp,4"
"	      004a8fcc    jmp near ptr 004A8FD1h"
"	      004a8fd1    push 1"
"	      004a8fd3    call 00569430h"
"	      004a8fd8    add esp,4"
"	      004a8fdb    jmp near ptr 004A8FE0h"
"	      004a8fe0    jmp near ptr 004A8FE5h"
"	      004a8fe5    mov eax,i"
"	      004a8fe8    mov ecx,this"
"	      004a8fee    mov eax,[ecx+eax*8+102h]"
"	      004a8ff5    cmp dword ptr [eax+0Ch],1"
"	      004a8ff9    ja near ptr 004A9030h"
"	      004a8fff    cmp dword ptr [ebp-1024h],0"
"	      004a9006    je near ptr 004A90ABh"
"	      004a900c    jmp near ptr 004A9011h"
"	      004a9011    mov eax,i"
"	      004a9014    mov ecx,this"
"	      004a901a    mov eax,[ecx+eax*8+102h]"
"	      004a9021    mov ecx,[ebp-1024h]"
"	      004a9027    cmp [eax+8],ecx"
"	      004a902a    jae near ptr 004A90ABh"
"	      004a9030    push 10h"
"	      004a9032    call 0056A600h"
"	      004a9037    add esp,4"
"	      004a903a    mov [ebp-1018h],eax"
"	      004a9040    cmp dword ptr [ebp-1018h],0"
"	      004a9047    je near ptr 004A9071h"
"	      004a904d    mov eax,[ebp-1024h]"
"	      004a9053    push eax"
"	      004a9054    lea eax,[ebp-100Ch]"
"	      004a905a    push eax"
"	      004a905b    mov ecx,[ebp-1018h]"
"	      004a9061    call 0041E090h"
"	      004a9066    mov [ebp-1014h],eax"
"	      004a906c    jmp near ptr 004A907Bh"
"	      004a9071    mov dword ptr [ebp-1014h],0"
"	      004a907b    mov eax,i"
"	      004a907e    mov ecx,this"
"	      004a9084    lea ecx,[ecx+eax*8+0FEh]"
"	      004a908b    call 00412080h"
"	      004a9090    mov eax,[ebp-1014h]"
"	      004a9096    mov ecx,i"
"	      004a9099    mov edx,this"
"	      004a909f    mov [edx+ecx*8+102h],eax"
"	      004a90a6    jmp near ptr 004A90F7h"
"	      004a90ab    cmp dword ptr [ebp-1024h],0"
"	      004a90b2    je near ptr 004A90F7h"
"	      004a90b8    jmp near ptr 004A90BDh"
"	      004a90bd    mov eax,i"
"	      004a90c0    mov ecx,this"
"	      004a90c6    mov eax,[ecx+eax*8+102h]"
"	      004a90cd    mov eax,[eax]"
"	      004a90cf    mov [ebp-101Ch],eax"
"	      004a90d5    mov eax,[ebp-1024h]"
"	      004a90db    push eax"
"	      004a90dc    lea eax,[ebp-100Ch]"
"	      004a90e2    push eax"
"	      004a90e3    mov eax,[ebp-101Ch]"
"	      004a90e9    push eax"
"	      004a90ea    call 0056A800h"
"	      004a90ef    add esp,0Ch"
"	      004a90f2    jmp near ptr 004A90F7h"
"	      004a90f7    mov eax,[ebp-1024h]"
"	      004a90fd    mov ecx,i"
"	      004a9100    mov edx,this"
"	      004a9106    mov ecx,[edx+ecx*8+102h]"
"	      004a910d    mov [ecx+4],eax"
"	      004a9110    jmp near ptr 004A9115h"
"	      004a9115    jmp near ptr 004A911Ah"
"	      004a911a    jmp near ptr 004A911Fh"
);
// LINE 90:
	asm( 
"	      004a911f    jmp near ptr 004A8E97h"
);
// LINE 92:
	asm( 
"	      004a9124    push 0"
"	      004a9126    push 1A4h"
"	      004a912b    call 0042B15Fh"
"	      004a9130    add esp,8"
"	      004a9133    mov nFullStringID,eax"
);
// LINE 93:
	asm( 
"	      004a9136    push 0FFFh"
"	      004a913b    lea eax,[ebp-2024h]"
"	      004a9141    push eax"
"	      004a9142    mov eax,nFullStringID"
"	      004a9145    push eax"
"	      004a9146    mov eax,ds:[5C28C8h]"
"	      004a914b    push eax"
"	      004a914c    call dword ptr ds:[6C38B4h]"
"	      004a9152    mov [ebp-2028h],eax"
"	      004a9158    cmp dword ptr [ebp-2028h],0"
"	      004a915f    jne near ptr 004A91F5h"
"	      004a9165    push 0FFFh"
"	      004a916a    lea eax,[ebp-2024h]"
"	      004a9170    push eax"
"	      004a9171    mov ecx,3E8h"
"	      004a9176    mov eax,nFullStringID"
"	      004a9179    sub edx,edx"
"	      004a917b    div ecx"
"	      004a917d    push edx"
"	      004a917e    mov eax,ds:[5C28C8h]"
"	      004a9183    push eax"
"	      004a9184    call dword ptr ds:[6C38B4h]"
"	      004a918a    mov [ebp-2028h],eax"
"	      004a9190    jmp near ptr 004A9195h"
"	      004a9195    lea eax,[ebp-2024h]"
"	      004a919b    push eax"
"	      004a919c    call 0056ABE0h"
"	      004a91a1    add esp,4"
"	      004a91a4    push eax"
"	      004a91a5    lea eax,[ebp-2024h]"
"	      004a91ab    push eax"
"	      004a91ac    mov ecx,this"
"	      004a91b2    add ecx,176h"
"	      004a91b8    call 0040FEE0h"
"	      004a91bd    jmp near ptr 004A91C2h"
"	      004a91c2    jmp near ptr 004A91C7h"
"	      004a91c7    push 597200h"
"	      004a91cc    call 0056ABE0h"
"	      004a91d1    add esp,4"
"	      004a91d4    push eax"
"	      004a91d5    push 597200h"
"	      004a91da    mov ecx,this"
"	      004a91e0    add ecx,176h"
"	      004a91e6    call 00410130h"
"	      004a91eb    jmp near ptr 004A91F0h"
"	      004a91f0    jmp near ptr 004A937Bh"
"	      004a91f5    jmp near ptr 004A91FAh"
"	      004a91fa    lea eax,[ebp-2024h]"
"	      004a9200    push eax"
"	      004a9201    call 0056ABE0h"
"	      004a9206    add esp,4"
"	      004a9209    mov [ebp-203Ch],eax"
"	      004a920f    cmp dword ptr [ebp-203Ch],0FFFFFFFFh"
"	      004a9216    jne near ptr 004A9254h"
"	      004a921c    push 5971E4h"
"	      004a9221    mov ecx,638C00h"
"	      004a9226    call 00569960h"
"	      004a922b    mov [ebp-2038h],eax"
"	      004a9231    mov eax,[ebp-2038h]"
"	      004a9237    push eax"
"	      004a9238    call 004011B0h"
"	      004a923d    add esp,4"
"	      004a9240    jmp near ptr 004A9245h"
"	      004a9245    push 1"
"	      004a9247    call 00569430h"
"	      004a924c    add esp,4"
"	      004a924f    jmp near ptr 004A9254h"
"	      004a9254    jmp near ptr 004A9259h"
"	      004a9259    mov eax,this"
"	      004a925f    mov eax,[eax+17Ah]"
"	      004a9265    cmp dword ptr [eax+0Ch],1"
"	      004a9269    ja near ptr 004A929Ch"
"	      004a926f    cmp dword ptr [ebp-203Ch],0"
"	      004a9276    je near ptr 004A930Fh"
"	      004a927c    jmp near ptr 004A9281h"
"	      004a9281    mov eax,this"
"	      004a9287    mov eax,[eax+17Ah]"
"	      004a928d    mov ecx,[ebp-203Ch]"
"	      004a9293    cmp [eax+8],ecx"
"	      004a9296    jae near ptr 004A930Fh"
"	      004a929c    push 10h"
"	      004a929e    call 0056A600h"
"	      004a92a3    add esp,4"
"	      004a92a6    mov [ebp-2030h],eax"
"	      004a92ac    cmp dword ptr [ebp-2030h],0"
"	      004a92b3    je near ptr 004A92DDh"
"	      004a92b9    mov eax,[ebp-203Ch]"
"	      004a92bf    push eax"
"	      004a92c0    lea eax,[ebp-2024h]"
"	      004a92c6    push eax"
"	      004a92c7    mov ecx,[ebp-2030h]"
"	      004a92cd    call 0041E090h"
"	      004a92d2    mov [ebp-202Ch],eax"
"	      004a92d8    jmp near ptr 004A92E7h"
"	      004a92dd    mov dword ptr [ebp-202Ch],0"
"	      004a92e7    mov ecx,this"
"	      004a92ed    add ecx,176h"
"	      004a92f3    call 00412080h"
"	      004a92f8    mov eax,[ebp-202Ch]"
"	      004a92fe    mov ecx,this"
"	      004a9304    mov [ecx+17Ah],eax"
"	      004a930a    jmp near ptr 004A9357h"
"	      004a930f    cmp dword ptr [ebp-203Ch],0"
"	      004a9316    je near ptr 004A9357h"
"	      004a931c    jmp near ptr 004A9321h"
"	      004a9321    mov eax,this"
"	      004a9327    mov eax,[eax+17Ah]"
"	      004a932d    mov eax,[eax]"
"	      004a932f    mov [ebp-2034h],eax"
"	      004a9335    mov eax,[ebp-203Ch]"
"	      004a933b    push eax"
"	      004a933c    lea eax,[ebp-2024h]"
"	      004a9342    push eax"
"	      004a9343    mov eax,[ebp-2034h]"
"	      004a9349    push eax"
"	      004a934a    call 0056A800h"
"	      004a934f    add esp,0Ch"
"	      004a9352    jmp near ptr 004A9357h"
"	      004a9357    mov eax,[ebp-203Ch]"
"	      004a935d    mov ecx,this"
"	      004a9363    mov ecx,[ecx+17Ah]"
"	      004a9369    mov [ecx+4],eax"
"	      004a936c    jmp near ptr 004A9371h"
"	      004a9371    jmp near ptr 004A9376h"
"	      004a9376    jmp near ptr 004A937Bh"
);
// LINE 95:
	asm( 
"	      004a937b    push 0"
"	      004a937d    push 1A5h"
"	      004a9382    call 0042B15Fh"
"	      004a9387    add esp,8"
"	      004a938a    mov nFullStringID,eax"
);
// LINE 96:
	asm( 
"	      004a938d    push 0FFFh"
"	      004a9392    lea eax,[ebp-303Ch]"
"	      004a9398    push eax"
"	      004a9399    mov eax,nFullStringID"
"	      004a939c    push eax"
"	      004a939d    mov eax,ds:[5C28C8h]"
"	      004a93a2    push eax"
"	      004a93a3    call dword ptr ds:[6C38B4h]"
"	      004a93a9    mov [ebp-3040h],eax"
"	      004a93af    cmp dword ptr [ebp-3040h],0"
"	      004a93b6    jne near ptr 004A944Ch"
"	      004a93bc    push 0FFFh"
"	      004a93c1    lea eax,[ebp-303Ch]"
"	      004a93c7    push eax"
"	      004a93c8    mov ecx,3E8h"
"	      004a93cd    mov eax,nFullStringID"
"	      004a93d0    sub edx,edx"
"	      004a93d2    div ecx"
"	      004a93d4    push edx"
"	      004a93d5    mov eax,ds:[5C28C8h]"
"	      004a93da    push eax"
"	      004a93db    call dword ptr ds:[6C38B4h]"
"	      004a93e1    mov [ebp-3040h],eax"
"	      004a93e7    jmp near ptr 004A93ECh"
"	      004a93ec    lea eax,[ebp-303Ch]"
"	      004a93f2    push eax"
"	      004a93f3    call 0056ABE0h"
"	      004a93f8    add esp,4"
"	      004a93fb    push eax"
"	      004a93fc    lea eax,[ebp-303Ch]"
"	      004a9402    push eax"
"	      004a9403    mov ecx,this"
"	      004a9409    add ecx,17Eh"
"	      004a940f    call 0040FEE0h"
"	      004a9414    jmp near ptr 004A9419h"
"	      004a9419    jmp near ptr 004A941Eh"
"	      004a941e    push 597200h"
"	      004a9423    call 0056ABE0h"
"	      004a9428    add esp,4"
"	      004a942b    push eax"
"	      004a942c    push 597200h"
"	      004a9431    mov ecx,this"
"	      004a9437    add ecx,17Eh"
"	      004a943d    call 00410130h"
"	      004a9442    jmp near ptr 004A9447h"
"	      004a9447    jmp near ptr 004A9483h"
"	      004a944c    jmp near ptr 004A9451h"
"	      004a9451    lea eax,[ebp-303Ch]"
"	      004a9457    push eax"
"	      004a9458    call 0056ABE0h"
"	      004a945d    add esp,4"
"	      004a9460    push eax"
"	      004a9461    lea eax,[ebp-303Ch]"
"	      004a9467    push eax"
"	      004a9468    mov ecx,this"
"	      004a946e    add ecx,17Eh"
"	      004a9474    call 0040FEE0h"
"	      004a9479    jmp near ptr 004A947Eh"
"	      004a947e    jmp near ptr 004A9483h"
);
// LINE 98:
	asm( 
"	      004a9483    push 0"
"	      004a9485    push 1A6h"
"	      004a948a    call 0042B15Fh"
"	      004a948f    add esp,8"
"	      004a9492    mov nFullStringID,eax"
);
// LINE 99:
	asm( 
"	      004a9495    push 0FFFh"
"	      004a949a    lea eax,[ebp-4040h]"
"	      004a94a0    push eax"
"	      004a94a1    mov eax,nFullStringID"
"	      004a94a4    push eax"
"	      004a94a5    mov eax,ds:[5C28C8h]"
"	      004a94aa    push eax"
"	      004a94ab    call dword ptr ds:[6C38B4h]"
"	      004a94b1    mov [ebp-4044h],eax"
"	      004a94b7    cmp dword ptr [ebp-4044h],0"
"	      004a94be    jne near ptr 004A9554h"
"	      004a94c4    push 0FFFh"
"	      004a94c9    lea eax,[ebp-4040h]"
"	      004a94cf    push eax"
"	      004a94d0    mov ecx,3E8h"
"	      004a94d5    mov eax,nFullStringID"
"	      004a94d8    sub edx,edx"
"	      004a94da    div ecx"
"	      004a94dc    push edx"
"	      004a94dd    mov eax,ds:[5C28C8h]"
"	      004a94e2    push eax"
"	      004a94e3    call dword ptr ds:[6C38B4h]"
"	      004a94e9    mov [ebp-4044h],eax"
"	      004a94ef    jmp near ptr 004A94F4h"
"	      004a94f4    lea eax,[ebp-4040h]"
"	      004a94fa    push eax"
"	      004a94fb    call 0056ABE0h"
"	      004a9500    add esp,4"
"	      004a9503    push eax"
"	      004a9504    lea eax,[ebp-4040h]"
"	      004a950a    push eax"
"	      004a950b    mov ecx,this"
"	      004a9511    add ecx,186h"
"	      004a9517    call 0040FEE0h"
"	      004a951c    jmp near ptr 004A9521h"
"	      004a9521    jmp near ptr 004A9526h"
"	      004a9526    push 597200h"
"	      004a952b    call 0056ABE0h"
"	      004a9530    add esp,4"
"	      004a9533    push eax"
"	      004a9534    push 597200h"
"	      004a9539    mov ecx,this"
"	      004a953f    add ecx,186h"
"	      004a9545    call 00410130h"
"	      004a954a    jmp near ptr 004A954Fh"
"	      004a954f    jmp near ptr 004A96DAh"
"	      004a9554    jmp near ptr 004A9559h"
"	      004a9559    lea eax,[ebp-4040h]"
"	      004a955f    push eax"
"	      004a9560    call 0056ABE0h"
"	      004a9565    add esp,4"
"	      004a9568    mov [ebp-4058h],eax"
"	      004a956e    cmp dword ptr [ebp-4058h],0FFFFFFFFh"
"	      004a9575    jne near ptr 004A95B3h"
"	      004a957b    push 5971E4h"
"	      004a9580    mov ecx,638C00h"
"	      004a9585    call 00569960h"
"	      004a958a    mov [ebp-4054h],eax"
"	      004a9590    mov eax,[ebp-4054h]"
"	      004a9596    push eax"
"	      004a9597    call 004011B0h"
"	      004a959c    add esp,4"
"	      004a959f    jmp near ptr 004A95A4h"
"	      004a95a4    push 1"
"	      004a95a6    call 00569430h"
"	      004a95ab    add esp,4"
"	      004a95ae    jmp near ptr 004A95B3h"
"	      004a95b3    jmp near ptr 004A95B8h"
"	      004a95b8    mov eax,this"
"	      004a95be    mov eax,[eax+18Ah]"
"	      004a95c4    cmp dword ptr [eax+0Ch],1"
"	      004a95c8    ja near ptr 004A95FBh"
"	      004a95ce    cmp dword ptr [ebp-4058h],0"
"	      004a95d5    je near ptr 004A966Eh"
"	      004a95db    jmp near ptr 004A95E0h"
"	      004a95e0    mov eax,this"
"	      004a95e6    mov eax,[eax+18Ah]"
"	      004a95ec    mov ecx,[ebp-4058h]"
"	      004a95f2    cmp [eax+8],ecx"
"	      004a95f5    jae near ptr 004A966Eh"
"	      004a95fb    push 10h"
"	      004a95fd    call 0056A600h"
"	      004a9602    add esp,4"
"	      004a9605    mov [ebp-404Ch],eax"
"	      004a960b    cmp dword ptr [ebp-404Ch],0"
"	      004a9612    je near ptr 004A963Ch"
"	      004a9618    mov eax,[ebp-4058h]"
"	      004a961e    push eax"
"	      004a961f    lea eax,[ebp-4040h]"
"	      004a9625    push eax"
"	      004a9626    mov ecx,[ebp-404Ch]"
"	      004a962c    call 0041E090h"
"	      004a9631    mov [ebp-4048h],eax"
"	      004a9637    jmp near ptr 004A9646h"
"	      004a963c    mov dword ptr [ebp-4048h],0"
"	      004a9646    mov ecx,this"
"	      004a964c    add ecx,186h"
"	      004a9652    call 00412080h"
"	      004a9657    mov eax,[ebp-4048h]"
"	      004a965d    mov ecx,this"
"	      004a9663    mov [ecx+18Ah],eax"
"	      004a9669    jmp near ptr 004A96B6h"
"	      004a966e    cmp dword ptr [ebp-4058h],0"
"	      004a9675    je near ptr 004A96B6h"
"	      004a967b    jmp near ptr 004A9680h"
"	      004a9680    mov eax,this"
"	      004a9686    mov eax,[eax+18Ah]"
"	      004a968c    mov eax,[eax]"
"	      004a968e    mov [ebp-4050h],eax"
"	      004a9694    mov eax,[ebp-4058h]"
"	      004a969a    push eax"
"	      004a969b    lea eax,[ebp-4040h]"
"	      004a96a1    push eax"
"	      004a96a2    mov eax,[ebp-4050h]"
"	      004a96a8    push eax"
"	      004a96a9    call 0056A800h"
"	      004a96ae    add esp,0Ch"
"	      004a96b1    jmp near ptr 004A96B6h"
"	      004a96b6    mov eax,[ebp-4058h]"
"	      004a96bc    mov ecx,this"
"	      004a96c2    mov ecx,[ecx+18Ah]"
"	      004a96c8    mov [ecx+4],eax"
"	      004a96cb    jmp near ptr 004A96D0h"
"	      004a96d0    jmp near ptr 004A96D5h"
"	      004a96d5    jmp near ptr 004A96DAh"
);
// LINE 101:
	asm( 
"	      004a96da    mov i,0"
"	      004a96e1    jmp near ptr 004A96E9h"
"	      004a96e6    inc i"
"	      004a96e9    cmp i,5"
"	      004a96ed    jge near ptr 004A9810h"
);
// LINE 102:
	asm( 
"	      004a96f3    push 0"
"	      004a96f5    mov eax,i"
"	      004a96f8    add eax,19Ah"
"	      004a96fd    push eax"
"	      004a96fe    call 0042B15Fh"
"	      004a9703    add esp,8"
"	      004a9706    mov nFullStringID,eax"
);
// LINE 103:
	asm( 
"	      004a9709    push 0FFFh"
"	      004a970e    lea eax,[ebp-5058h]"
"	      004a9714    push eax"
"	      004a9715    mov eax,nFullStringID"
"	      004a9718    push eax"
"	      004a9719    mov eax,ds:[5C28C8h]"
"	      004a971e    push eax"
"	      004a971f    call dword ptr ds:[6C38B4h]"
"	      004a9725    mov [ebp-505Ch],eax"
"	      004a972b    cmp dword ptr [ebp-505Ch],0"
"	      004a9732    jne near ptr 004A97D0h"
"	      004a9738    push 0FFFh"
"	      004a973d    lea eax,[ebp-5058h]"
"	      004a9743    push eax"
"	      004a9744    mov ecx,3E8h"
"	      004a9749    mov eax,nFullStringID"
"	      004a974c    sub edx,edx"
"	      004a974e    div ecx"
"	      004a9750    push edx"
"	      004a9751    mov eax,ds:[5C28C8h]"
"	      004a9756    push eax"
"	      004a9757    call dword ptr ds:[6C38B4h]"
"	      004a975d    mov [ebp-505Ch],eax"
"	      004a9763    jmp near ptr 004A9768h"
"	      004a9768    lea eax,[ebp-5058h]"
"	      004a976e    push eax"
"	      004a976f    call 0056ABE0h"
"	      004a9774    add esp,4"
"	      004a9777    push eax"
"	      004a9778    lea eax,[ebp-5058h]"
"	      004a977e    push eax"
"	      004a977f    mov eax,i"
"	      004a9782    mov ecx,this"
"	      004a9788    lea ecx,[ecx+eax*8+146h]"
"	      004a978f    call 0040FEE0h"
"	      004a9794    jmp near ptr 004A9799h"
"	      004a9799    jmp near ptr 004A979Eh"
"	      004a979e    push 597200h"
"	      004a97a3    call 0056ABE0h"
"	      004a97a8    add esp,4"
"	      004a97ab    push eax"
"	      004a97ac    push 597200h"
"	      004a97b1    mov eax,i"
"	      004a97b4    mov ecx,this"
"	      004a97ba    lea ecx,[ecx+eax*8+146h]"
"	      004a97c1    call 00410130h"
"	      004a97c6    jmp near ptr 004A97CBh"
"	      004a97cb    jmp near ptr 004A980Bh"
"	      004a97d0    jmp near ptr 004A97D5h"
"	      004a97d5    lea eax,[ebp-5058h]"
"	      004a97db    push eax"
"	      004a97dc    call 0056ABE0h"
"	      004a97e1    add esp,4"
"	      004a97e4    push eax"
"	      004a97e5    lea eax,[ebp-5058h]"
"	      004a97eb    push eax"
"	      004a97ec    mov eax,i"
"	      004a97ef    mov ecx,this"
"	      004a97f5    lea ecx,[ecx+eax*8+146h]"
"	      004a97fc    call 0040FEE0h"
"	      004a9801    jmp near ptr 004A9806h"
"	      004a9806    jmp near ptr 004A980Bh"
);
// LINE 104:
	asm( 
"	      004a980b    jmp near ptr 004A96E6h"
);
// LINE 105:
	asm( 
"	      004a9810    mov eax,nReturnValue"
"	      004a9813    jmp near ptr 004A9818h"
);
// LINE 106:
	asm( 
"	      004a9818    pop edi"
"	      004a9819    pop esi"
"	      004a981a    pop ebx"
"	      004a981b    leave"
"	      004a981c    ret"
);
}

// FUNCTION: COPTER_D 0x004a981d
int32_t InventoryWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 112:
	asm( 
"	      004a981d    push ebp"
"	      004a981e    mov ebp,esp"
"	      004a9820    sub esp,24h"
"	      004a9823    push ebx"
"	      004a9824    push esi"
"	      004a9825    push edi"
"	      004a9826    mov this,ecx"
);
// LINE 113:
	asm( 
"	      004a9829    mov eax,this"
"	      004a982c    cmp dword ptr [eax+64h],0"
"	      004a9830    je near ptr 004A9851h"
"	      004a9836    mov eax,this"
"	      004a9839    mov eax,[eax+64h]"
"	      004a983c    mov [ebp-4],eax"
"	      004a983f    mov eax,[ebp-4]"
"	      004a9842    mov [ebp-0Ch],eax"
"	      004a9845    mov eax,[ebp-0Ch]"
"	      004a9848    push eax"
"	      004a9849    call 0056A740h"
"	      004a984e    add esp,4"
"	      004a9851    jmp near ptr 004A9856h"
"	      004a9856    mov eax,this"
"	      004a9859    mov eax,[eax+68h]"
"	      004a985c    mov eax,[eax+4]"
"	      004a985f    inc eax"
"	      004a9860    push eax"
"	      004a9861    call 0056A600h"
"	      004a9866    add esp,4"
"	      004a9869    mov ecx,this"
"	      004a986c    mov [ecx+64h],eax"
"	      004a986f    jmp near ptr 004A9874h"
"	      004a9874    mov eax,this"
"	      004a9877    mov eax,[eax+68h]"
"	      004a987a    cmp dword ptr [eax+4],0"
"	      004a987e    je near ptr 004A98EDh"
"	      004a9884    jmp near ptr 004A9889h"
"	      004a9889    jmp near ptr 004A988Eh"
"	      004a988e    mov eax,this"
"	      004a9891    mov eax,[eax+68h]"
"	      004a9894    cmp dword ptr [eax+4],0"
"	      004a9898    je near ptr 004A98B3h"
"	      004a989e    mov eax,this"
"	      004a98a1    mov eax,[eax+68h]"
"	      004a98a4    mov eax,[eax]"
"	      004a98a6    mov [ebp-18h],eax"
"	      004a98a9    jmp near ptr 004A98BFh"
"	      004a98ae    jmp near ptr 004A98BFh"
"	      004a98b3    mov dword ptr [ebp-18h],0"
"	      004a98ba    jmp near ptr 004A98BFh"
"	      004a98bf    mov eax,this"
"	      004a98c2    mov eax,[eax+68h]"
"	      004a98c5    mov eax,[eax+4]"
"	      004a98c8    mov [ebp-1Ch],eax"
"	      004a98cb    mov eax,this"
"	      004a98ce    mov eax,[eax+64h]"
"	      004a98d1    mov [ebp-20h],eax"
"	      004a98d4    mov eax,[ebp-1Ch]"
"	      004a98d7    push eax"
"	      004a98d8    mov eax,[ebp-18h]"
"	      004a98db    push eax"
"	      004a98dc    mov eax,[ebp-20h]"
"	      004a98df    push eax"
"	      004a98e0    call 0056A800h"
"	      004a98e5    add esp,0Ch"
"	      004a98e8    jmp near ptr 004A98EDh"
"	      004a98ed    jmp near ptr 004A98F2h"
"	      004a98f2    mov byte ptr [ebp-8],0"
"	      004a98f6    jmp near ptr 004A98FBh"
"	      004a98fb    lea eax,[ebp-8]"
"	      004a98fe    mov [ebp-10h],eax"
"	      004a9901    jmp near ptr 004A9906h"
"	      004a9906    mov eax,this"
"	      004a9909    mov eax,[eax+68h]"
"	      004a990c    mov eax,[eax+4]"
"	      004a990f    mov ecx,this"
"	      004a9912    add eax,[ecx+64h]"
"	      004a9915    mov [ebp-14h],eax"
"	      004a9918    mov eax,[ebp-10h]"
"	      004a991b    mov al,[eax]"
"	      004a991d    mov ecx,[ebp-14h]"
"	      004a9920    mov [ecx],al"
"	      004a9922    jmp near ptr 004A9927h"
"	      004a9927    jmp near ptr 004A992Ch"
"	      004a992c    mov eax,pColorTable"
"	      004a992f    push eax"
"	      004a9930    mov eax,this"
"	      004a9933    mov eax,[eax+64h]"
"	      004a9936    push eax"
"	      004a9937    call 004704DBh"
"	      004a993c    add esp,8"
"	      004a993f    test eax,eax"
"	      004a9941    jne near ptr 004A9951h"
"	      004a9947    mov eax,1"
"	      004a994c    jmp near ptr 004A9953h"
"	      004a9951    xor eax,eax"
"	      004a9953    jmp near ptr 004A9958h"
);
// LINE 114:
	asm( 
"	      004a9958    pop edi"
"	      004a9959    pop esi"
"	      004a995a    pop ebx"
"	      004a995b    leave"
"	      004a995c    ret 4"
);
}

// FUNCTION: COPTER_D 0x004a995f
int32_t InventoryWindow::CreateImage(int32_t __formal) {
// LINE 120:
	asm( 
"	      004a995f    push ebp"
"	      004a9960    mov ebp,esp"
"	      004a9962    sub esp,4Ch"
"	      004a9965    push ebx"
"	      004a9966    push esi"
"	      004a9967    push edi"
"	      004a9968    mov this,ecx"
);
// LINE 124:
	asm( 
"	      004a996b    mov eax,this"
"	      004a996e    cmp dword ptr [eax+7Ch],0"
"	      004a9972    jne near ptr 004A9ADAh"
);
// LINE 125:
	asm( 
"	      004a9978    mov eax,this"
"	      004a997b    add eax,64h"
"	      004a997e    push eax"
"	      004a997f    mov eax,this"
"	      004a9982    add eax,5Ch"
"	      004a9985    push eax"
"	      004a9986    push 0"
"	      004a9988    push 6"
"	      004a998a    mov ecx,604C00h"
"	      004a998f    call 00494F82h"
"	      004a9994    jmp near ptr 004A9999h"
);
// LINE 126:
	asm( 
"	      004a9999    push 134h"
"	      004a999e    call 0056A600h"
"	      004a99a3    add esp,4"
"	      004a99a6    mov [ebp-4],eax"
"	      004a99a9    cmp dword ptr [ebp-4],0"
"	      004a99ad    je near ptr 004A9AD0h"
"	      004a99b3    mov eax,this"
"	      004a99b6    cmp dword ptr [eax+64h],0"
"	      004a99ba    je near ptr 004A99DBh"
"	      004a99c0    mov eax,this"
"	      004a99c3    mov eax,[eax+64h]"
"	      004a99c6    mov [ebp-0Ch],eax"
"	      004a99c9    mov eax,[ebp-0Ch]"
"	      004a99cc    mov [ebp-14h],eax"
"	      004a99cf    mov eax,[ebp-14h]"
"	      004a99d2    push eax"
"	      004a99d3    call 0056A740h"
"	      004a99d8    add esp,4"
"	      004a99db    jmp near ptr 004A99E0h"
"	      004a99e0    mov eax,this"
"	      004a99e3    mov eax,[eax+68h]"
"	      004a99e6    mov eax,[eax+4]"
"	      004a99e9    inc eax"
"	      004a99ea    push eax"
"	      004a99eb    call 0056A600h"
"	      004a99f0    add esp,4"
"	      004a99f3    mov ecx,this"
"	      004a99f6    mov [ecx+64h],eax"
"	      004a99f9    jmp near ptr 004A99FEh"
"	      004a99fe    mov eax,this"
"	      004a9a01    mov eax,[eax+68h]"
"	      004a9a04    cmp dword ptr [eax+4],0"
"	      004a9a08    je near ptr 004A9A77h"
"	      004a9a0e    jmp near ptr 004A9A13h"
"	      004a9a13    jmp near ptr 004A9A18h"
"	      004a9a18    mov eax,this"
"	      004a9a1b    mov eax,[eax+68h]"
"	      004a9a1e    cmp dword ptr [eax+4],0"
"	      004a9a22    je near ptr 004A9A3Dh"
"	      004a9a28    mov eax,this"
"	      004a9a2b    mov eax,[eax+68h]"
"	      004a9a2e    mov eax,[eax]"
"	      004a9a30    mov [ebp-20h],eax"
"	      004a9a33    jmp near ptr 004A9A49h"
"	      004a9a38    jmp near ptr 004A9A49h"
"	      004a9a3d    mov dword ptr [ebp-20h],0"
"	      004a9a44    jmp near ptr 004A9A49h"
"	      004a9a49    mov eax,this"
"	      004a9a4c    mov eax,[eax+68h]"
"	      004a9a4f    mov eax,[eax+4]"
"	      004a9a52    mov [ebp-24h],eax"
"	      004a9a55    mov eax,this"
"	      004a9a58    mov eax,[eax+64h]"
"	      004a9a5b    mov [ebp-28h],eax"
"	      004a9a5e    mov eax,[ebp-24h]"
"	      004a9a61    push eax"
"	      004a9a62    mov eax,[ebp-20h]"
"	      004a9a65    push eax"
"	      004a9a66    mov eax,[ebp-28h]"
"	      004a9a69    push eax"
"	      004a9a6a    call 0056A800h"
"	      004a9a6f    add esp,0Ch"
"	      004a9a72    jmp near ptr 004A9A77h"
"	      004a9a77    jmp near ptr 004A9A7Ch"
"	      004a9a7c    mov byte ptr [ebp-10h],0"
"	      004a9a80    jmp near ptr 004A9A85h"
"	      004a9a85    lea eax,[ebp-10h]"
"	      004a9a88    mov [ebp-18h],eax"
"	      004a9a8b    jmp near ptr 004A9A90h"
"	      004a9a90    mov eax,this"
"	      004a9a93    mov eax,[eax+68h]"
"	      004a9a96    mov eax,[eax+4]"
"	      004a9a99    mov ecx,this"
"	      004a9a9c    add eax,[ecx+64h]"
"	      004a9a9f    mov [ebp-1Ch],eax"
"	      004a9aa2    mov eax,[ebp-18h]"
"	      004a9aa5    mov al,[eax]"
"	      004a9aa7    mov ecx,[ebp-1Ch]"
"	      004a9aaa    mov [ecx],al"
"	      004a9aac    jmp near ptr 004A9AB1h"
"	      004a9ab1    jmp near ptr 004A9AB6h"
"	      004a9ab6    mov eax,this"
"	      004a9ab9    mov eax,[eax+64h]"
"	      004a9abc    push eax"
"	      004a9abd    mov ecx,[ebp-4]"
"	      004a9ac0    call 0046E6DFh"
"	      004a9ac5    mov ecx,this"
"	      004a9ac8    mov [ecx+7Ch],eax"
"	      004a9acb    jmp near ptr 004A9ADAh"
"	      004a9ad0    mov eax,this"
"	      004a9ad3    mov dword ptr [eax+7Ch],0"
);
// LINE 128:
	asm( 
"	      004a9ada    mov eax,this"
"	      004a9add    cmp dword ptr [eax+80h],0"
"	      004a9ae4    jne near ptr 004A9C73h"
);
// LINE 129:
	asm( 
"	      004a9aea    mov eax,this"
"	      004a9aed    add eax,64h"
"	      004a9af0    push eax"
"	      004a9af1    mov eax,this"
"	      004a9af4    add eax,16Eh"
"	      004a9af9    push eax"
"	      004a9afa    push 0"
"	      004a9afc    push 6"
"	      004a9afe    mov ecx,604C00h"
"	      004a9b03    call 00494F82h"
"	      004a9b08    jmp near ptr 004A9B0Dh"
);
// LINE 130:
	asm( 
"	      004a9b0d    push 134h"
"	      004a9b12    call 0056A600h"
"	      004a9b17    add esp,4"
"	      004a9b1a    mov [ebp-8],eax"
"	      004a9b1d    cmp dword ptr [ebp-8],0"
"	      004a9b21    je near ptr 004A9C47h"
"	      004a9b27    mov eax,this"
"	      004a9b2a    cmp dword ptr [eax+64h],0"
"	      004a9b2e    je near ptr 004A9B4Fh"
"	      004a9b34    mov eax,this"
"	      004a9b37    mov eax,[eax+64h]"
"	      004a9b3a    mov [ebp-2Ch],eax"
"	      004a9b3d    mov eax,[ebp-2Ch]"
"	      004a9b40    mov [ebp-34h],eax"
"	      004a9b43    mov eax,[ebp-34h]"
"	      004a9b46    push eax"
"	      004a9b47    call 0056A740h"
"	      004a9b4c    add esp,4"
"	      004a9b4f    jmp near ptr 004A9B54h"
"	      004a9b54    mov eax,this"
"	      004a9b57    mov eax,[eax+68h]"
"	      004a9b5a    mov eax,[eax+4]"
"	      004a9b5d    inc eax"
"	      004a9b5e    push eax"
"	      004a9b5f    call 0056A600h"
"	      004a9b64    add esp,4"
"	      004a9b67    mov ecx,this"
"	      004a9b6a    mov [ecx+64h],eax"
"	      004a9b6d    jmp near ptr 004A9B72h"
"	      004a9b72    mov eax,this"
"	      004a9b75    mov eax,[eax+68h]"
"	      004a9b78    cmp dword ptr [eax+4],0"
"	      004a9b7c    je near ptr 004A9BEBh"
"	      004a9b82    jmp near ptr 004A9B87h"
"	      004a9b87    jmp near ptr 004A9B8Ch"
"	      004a9b8c    mov eax,this"
"	      004a9b8f    mov eax,[eax+68h]"
"	      004a9b92    cmp dword ptr [eax+4],0"
"	      004a9b96    je near ptr 004A9BB1h"
"	      004a9b9c    mov eax,this"
"	      004a9b9f    mov eax,[eax+68h]"
"	      004a9ba2    mov eax,[eax]"
"	      004a9ba4    mov [ebp-40h],eax"
"	      004a9ba7    jmp near ptr 004A9BBDh"
"	      004a9bac    jmp near ptr 004A9BBDh"
"	      004a9bb1    mov dword ptr [ebp-40h],0"
"	      004a9bb8    jmp near ptr 004A9BBDh"
"	      004a9bbd    mov eax,this"
"	      004a9bc0    mov eax,[eax+68h]"
"	      004a9bc3    mov eax,[eax+4]"
"	      004a9bc6    mov [ebp-44h],eax"
"	      004a9bc9    mov eax,this"
"	      004a9bcc    mov eax,[eax+64h]"
"	      004a9bcf    mov [ebp-48h],eax"
"	      004a9bd2    mov eax,[ebp-44h]"
"	      004a9bd5    push eax"
"	      004a9bd6    mov eax,[ebp-40h]"
"	      004a9bd9    push eax"
"	      004a9bda    mov eax,[ebp-48h]"
"	      004a9bdd    push eax"
"	      004a9bde    call 0056A800h"
"	      004a9be3    add esp,0Ch"
"	      004a9be6    jmp near ptr 004A9BEBh"
"	      004a9beb    jmp near ptr 004A9BF0h"
"	      004a9bf0    mov byte ptr [ebp-30h],0"
"	      004a9bf4    jmp near ptr 004A9BF9h"
"	      004a9bf9    lea eax,[ebp-30h]"
"	      004a9bfc    mov [ebp-38h],eax"
"	      004a9bff    jmp near ptr 004A9C04h"
"	      004a9c04    mov eax,this"
"	      004a9c07    mov eax,[eax+68h]"
"	      004a9c0a    mov eax,[eax+4]"
"	      004a9c0d    mov ecx,this"
"	      004a9c10    add eax,[ecx+64h]"
"	      004a9c13    mov [ebp-3Ch],eax"
"	      004a9c16    mov eax,[ebp-38h]"
"	      004a9c19    mov al,[eax]"
"	      004a9c1b    mov ecx,[ebp-3Ch]"
"	      004a9c1e    mov [ecx],al"
"	      004a9c20    jmp near ptr 004A9C25h"
"	      004a9c25    jmp near ptr 004A9C2Ah"
"	      004a9c2a    mov eax,this"
"	      004a9c2d    mov eax,[eax+64h]"
"	      004a9c30    push eax"
"	      004a9c31    mov ecx,[ebp-8]"
"	      004a9c34    call 0046E6DFh"
"	      004a9c39    mov ecx,this"
"	      004a9c3c    mov [ecx+80h],eax"
"	      004a9c42    jmp near ptr 004A9C54h"
"	      004a9c47    mov eax,this"
"	      004a9c4a    mov dword ptr [eax+80h],0"
);
// LINE 131:
	asm( 
"	      004a9c54    mov eax,ds:[606988h]"
"	      004a9c59    push eax"
"	      004a9c5a    push 1"
"	      004a9c5c    mov eax,this"
"	      004a9c5f    mov ecx,this"
"	      004a9c62    mov ecx,[ecx+80h]"
"	      004a9c68    mov edx,[ecx]"
"	      004a9c6a    mov ecx,[eax+80h]"
"	      004a9c70    call dword ptr [edx+8]"
);
// LINE 133:
	asm( 
"	      004a9c73    mov eax,this"
"	      004a9c76    mov eax,[eax+7Ch]"
"	      004a9c79    jmp near ptr 004A9C7Eh"
);
// LINE 134:
	asm( 
"	      004a9c7e    pop edi"
"	      004a9c7f    pop esi"
"	      004a9c80    pop ebx"
"	      004a9c81    leave"
"	      004a9c82    ret 4"
);
}

// FUNCTION: COPTER_D 0x004a9c85
void InventoryWindow::DestroyImage() {
// LINE 140:
	asm( 
"	      004a9c85    push ebp"
"	      004a9c86    mov ebp,esp"
"	      004a9c88    sub esp,14h"
"	      004a9c8b    push ebx"
"	      004a9c8c    push esi"
"	      004a9c8d    push edi"
"	      004a9c8e    mov this,ecx"
);
// LINE 141:
	asm( 
"	      004a9c91    mov eax,this"
"	      004a9c94    cmp dword ptr [eax+7Ch],0"
"	      004a9c98    je near ptr 004A9CDFh"
);
// LINE 142:
	asm( 
"	      004a9c9e    mov eax,this"
"	      004a9ca1    mov eax,[eax+7Ch]"
"	      004a9ca4    mov [ebp-8],eax"
"	      004a9ca7    mov eax,[ebp-8]"
"	      004a9caa    mov [ebp-4],eax"
"	      004a9cad    cmp dword ptr [ebp-4],0"
"	      004a9cb1    je near ptr 004A9CD5h"
"	      004a9cb7    mov ecx,[ebp-4]"
"	      004a9cba    call 0046EC7Ah"
"	      004a9cbf    mov eax,[ebp-4]"
"	      004a9cc2    push eax"
"	      004a9cc3    call 0056A740h"
"	      004a9cc8    add esp,4"
"	      004a9ccb    jmp near ptr 004A9CD0h"
"	      004a9cd0    jmp near ptr 004A9CD5h"
);
// LINE 143:
	asm( 
"	      004a9cd5    mov eax,this"
"	      004a9cd8    mov dword ptr [eax+7Ch],0"
);
// LINE 145:
	asm( 
"	      004a9cdf    mov eax,this"
"	      004a9ce2    cmp dword ptr [eax+80h],0"
"	      004a9ce9    je near ptr 004A9D36h"
);
// LINE 146:
	asm( 
"	      004a9cef    mov eax,this"
"	      004a9cf2    mov eax,[eax+80h]"
"	      004a9cf8    mov [ebp-10h],eax"
"	      004a9cfb    mov eax,[ebp-10h]"
"	      004a9cfe    mov [ebp-0Ch],eax"
"	      004a9d01    cmp dword ptr [ebp-0Ch],0"
"	      004a9d05    je near ptr 004A9D29h"
"	      004a9d0b    mov ecx,[ebp-0Ch]"
"	      004a9d0e    call 0046EC7Ah"
"	      004a9d13    mov eax,[ebp-0Ch]"
"	      004a9d16    push eax"
"	      004a9d17    call 0056A740h"
"	      004a9d1c    add esp,4"
"	      004a9d1f    jmp near ptr 004A9D24h"
"	      004a9d24    jmp near ptr 004A9D29h"
);
// LINE 147:
	asm( 
"	      004a9d29    mov eax,this"
"	      004a9d2c    mov dword ptr [eax+80h],0"
);
// LINE 149:
	asm( 
"	      004a9d36    jmp near ptr 004A9D3Bh"
"	      004a9d3b    pop edi"
"	      004a9d3c    pop esi"
"	      004a9d3d    pop ebx"
"	      004a9d3e    leave"
"	      004a9d3f    ret"
);
}

// FUNCTION: COPTER_D 0x004a9d40
int32_t InventoryWindow::ComposeSelf() {
// LINE 155:
	asm( 
"	      004a9d40    push ebp"
"	      004a9d41    mov ebp,esp"
"	      004a9d43    sub esp,0Ch"
"	      004a9d46    push ebx"
"	      004a9d47    push esi"
"	      004a9d48    push edi"
"	      004a9d49    mov this,ecx"
);
// LINE 156:
	asm( 
"	      004a9d4c    mov eax,this"
"	      004a9d4f    cmp dword ptr [eax+44h],0"
"	      004a9d53    je near ptr 004A9D66h"
"	      004a9d59    mov eax,this"
"	      004a9d5c    cmp dword ptr [eax+54h],0"
"	      004a9d60    jne near ptr 004A9D6Dh"
);
// LINE 157:
	asm( 
"	      004a9d66    xor eax,eax"
"	      004a9d68    jmp near ptr 004A9E03h"
);
// LINE 163:
	asm( 
"	      004a9d6d    jmp near ptr 004A9D72h"
"	      004a9d72    jmp near ptr 004A9D77h"
"	      004a9d77    mov eax,this"
"	      004a9d7a    mov eax,[eax+7Ch]"
"	      004a9d7d    mov eax,[eax+0Ch]"
"	      004a9d80    push eax"
"	      004a9d81    mov eax,this"
"	      004a9d84    mov eax,[eax+7Ch]"
"	      004a9d87    mov eax,[eax+8]"
"	      004a9d8a    push eax"
"	      004a9d8b    push 0"
"	      004a9d8d    push 0"
"	      004a9d8f    mov eax,this"
"	      004a9d92    mov eax,[eax+24h]"
"	      004a9d95    mov ecx,this"
"	      004a9d98    add eax,[ecx+14h]"
"	      004a9d9b    push eax"
"	      004a9d9c    mov eax,this"
"	      004a9d9f    mov eax,[eax+20h]"
"	      004a9da2    mov ecx,this"
"	      004a9da5    add eax,[ecx+10h]"
"	      004a9da8    push eax"
"	      004a9da9    mov eax,this"
"	      004a9dac    mov eax,[eax+44h]"
"	      004a9daf    push eax"
"	      004a9db0    mov eax,this"
"	      004a9db3    mov ecx,this"
"	      004a9db6    mov ecx,[ecx+7Ch]"
"	      004a9db9    mov edx,[ecx]"
"	      004a9dbb    mov ecx,[eax+7Ch]"
"	      004a9dbe    call dword ptr [edx+0Ch]"
);
// LINE 164:
	asm( 
"	      004a9dc1    mov byte ptr [ebp-4],2Fh"
"	      004a9dc5    mov byte ptr [ebp-3],2Fh"
"	      004a9dc9    mov byte ptr [ebp-2],2Fh"
"	      004a9dcd    jmp near ptr 004A9DD2h"
"	      004a9dd2    mov eax,this"
"	      004a9dd5    mov eax,[eax+44h]"
"	      004a9dd8    mov [ebp-8],eax"
"	      004a9ddb    mov eax,[ebp-4]"
"	      004a9dde    mov ecx,[ebp-8]"
"	      004a9de1    mov [ecx+38h],eax"
"	      004a9de4    jmp near ptr 004A9DE9h"
);
// LINE 165:
	asm( 
"	      004a9de9    mov ecx,this"
"	      004a9dec    call 004A9E08h"
);
// LINE 166:
	asm( 
"	      004a9df1    mov ecx,this"
"	      004a9df4    call 004AA1D1h"
);
// LINE 167:
	asm( 
"	      004a9df9    mov eax,1"
"	      004a9dfe    jmp near ptr 004A9E03h"
);
// LINE 168:
	asm( 
"	      004a9e03    pop edi"
"	      004a9e04    pop esi"
"	      004a9e05    pop ebx"
"	      004a9e06    leave"
"	      004a9e07    ret"
);
}

// FUNCTION: COPTER_D 0x004a9e08
void InventoryWindow::DrawTitleText() {
	class MRect[3] rectText;
	int32_t i;
	class MPoint ptText;

// LINE 174:
	asm( 
"	      004a9e08    push ebp"
"	      004a9e09    mov ebp,esp"
"	      004a9e0b    sub esp,90h"
"	      004a9e11    push ebx"
"	      004a9e12    push esi"
"	      004a9e13    push edi"
"	      004a9e14    mov this,ecx"
"	      004a9e1a    mov dword ptr [ebp-60h],3"
"	      004a9e21    lea eax,rectText[0].left"
"	      004a9e24    mov [ebp-64h],eax"
);
// LINE 175:
	asm( 
"	      004a9e27    dec dword ptr [ebp-60h]"
"	      004a9e2a    js near ptr 004A9E41h"
"	      004a9e30    mov ecx,[ebp-64h]"
"	      004a9e33    call 0040DC80h"
"	      004a9e38    add dword ptr [ebp-64h],10h"
"	      004a9e3c    jmp near ptr 004A9E27h"
"	      004a9e41    jmp near ptr 004A9E46h"
);
// LINE 176:
	asm( 
"	      004a9e46    jmp near ptr 004A9E4Bh"
"	      004a9e4b    jmp near ptr 004A9E50h"
);
// LINE 179:
	asm( 
"	      004a9e50    lea eax,rectText[2].left"
"	      004a9e53    push eax"
"	      004a9e54    lea eax,rectText[1].left"
"	      004a9e57    push eax"
"	      004a9e58    lea eax,rectText[0].left"
"	      004a9e5b    push eax"
"	      004a9e5c    mov ecx,this"
"	      004a9e62    call 004AA722h"
"	      004a9e67    mov eax,this"
"	      004a9e6d    mov eax,[eax+24h]"
"	      004a9e70    mov [ebp-68h],eax"
"	      004a9e73    mov eax,this"
"	      004a9e79    mov eax,[eax+20h]"
"	      004a9e7c    mov [ebp-6Ch],eax"
);
// LINE 180:
	asm( 
"	      004a9e7f    mov eax,[ebp-6Ch]"
"	      004a9e82    add rectText[0].left,eax"
"	      004a9e85    mov eax,[ebp-6Ch]"
"	      004a9e88    add rectText[0].right,eax"
"	      004a9e8b    mov eax,[ebp-68h]"
"	      004a9e8e    add rectText[0].top,eax"
"	      004a9e91    mov eax,[ebp-68h]"
"	      004a9e94    add rectText[0].bottom,eax"
"	      004a9e97    jmp near ptr 004A9E9Ch"
"	      004a9e9c    mov eax,this"
"	      004a9ea2    mov eax,[eax+24h]"
"	      004a9ea5    mov [ebp-70h],eax"
"	      004a9ea8    mov eax,this"
"	      004a9eae    mov eax,[eax+20h]"
"	      004a9eb1    mov [ebp-74h],eax"
);
// LINE 181:
	asm( 
"	      004a9eb4    mov eax,[ebp-74h]"
"	      004a9eb7    add rectText[1].left,eax"
"	      004a9eba    mov eax,[ebp-74h]"
"	      004a9ebd    add rectText[1].right,eax"
"	      004a9ec0    mov eax,[ebp-70h]"
"	      004a9ec3    add rectText[1].top,eax"
"	      004a9ec6    mov eax,[ebp-70h]"
"	      004a9ec9    add rectText[1].bottom,eax"
"	      004a9ecc    jmp near ptr 004A9ED1h"
"	      004a9ed1    mov eax,this"
"	      004a9ed7    mov eax,[eax+24h]"
"	      004a9eda    mov [ebp-78h],eax"
"	      004a9edd    mov eax,this"
"	      004a9ee3    mov eax,[eax+20h]"
"	      004a9ee6    mov [ebp-7Ch],eax"
);
// LINE 182:
	asm( 
"	      004a9ee9    mov eax,[ebp-7Ch]"
"	      004a9eec    add rectText[2].left,eax"
"	      004a9eef    mov eax,[ebp-7Ch]"
"	      004a9ef2    add rectText[2].right,eax"
"	      004a9ef5    mov eax,[ebp-78h]"
"	      004a9ef8    add rectText[2].top,eax"
"	      004a9efb    mov eax,[ebp-78h]"
"	      004a9efe    add rectText[2].bottom,eax"
"	      004a9f01    jmp near ptr 004A9F06h"
);
// LINE 185:
	asm( 
"	      004a9f06    jmp near ptr 004A9F0Bh"
"	      004a9f0b    jmp near ptr 004A9F10h"
"	      004a9f10    mov eax,this"
"	      004a9f16    mov eax,[eax+17Ah]"
"	      004a9f1c    cmp dword ptr [eax+4],0"
"	      004a9f20    je near ptr 004A9F41h"
"	      004a9f26    mov eax,this"
"	      004a9f2c    mov eax,[eax+17Ah]"
"	      004a9f32    mov eax,[eax]"
"	      004a9f34    mov [ebp-50h],eax"
"	      004a9f37    jmp near ptr 004A9F4Dh"
"	      004a9f3c    jmp near ptr 004A9F4Dh"
"	      004a9f41    mov dword ptr [ebp-50h],0"
"	      004a9f48    jmp near ptr 004A9F4Dh"
"	      004a9f4d    mov eax,this"
"	      004a9f53    add eax,1AAh"
"	      004a9f58    push eax"
"	      004a9f59    lea eax,rectText[0].left"
"	      004a9f5c    push eax"
"	      004a9f5d    push 1"
"	      004a9f5f    mov eax,this"
"	      004a9f65    mov eax,[eax+17Ah]"
"	      004a9f6b    mov eax,[eax+4]"
"	      004a9f6e    push eax"
"	      004a9f6f    mov eax,[ebp-50h]"
"	      004a9f72    push eax"
"	      004a9f73    mov eax,this"
"	      004a9f79    mov ecx,this"
"	      004a9f7f    mov ecx,[ecx+44h]"
"	      004a9f82    mov edx,[ecx]"
"	      004a9f84    mov ecx,[eax+44h]"
"	      004a9f87    call dword ptr [edx+48h]"
);
// LINE 187:
	asm( 
"	      004a9f8a    jmp near ptr 004A9F8Fh"
"	      004a9f8f    jmp near ptr 004A9F94h"
"	      004a9f94    mov eax,this"
"	      004a9f9a    mov eax,[eax+182h]"
"	      004a9fa0    cmp dword ptr [eax+4],0"
"	      004a9fa4    je near ptr 004A9FC5h"
"	      004a9faa    mov eax,this"
"	      004a9fb0    mov eax,[eax+182h]"
"	      004a9fb6    mov eax,[eax]"
"	      004a9fb8    mov [ebp-54h],eax"
"	      004a9fbb    jmp near ptr 004A9FD1h"
"	      004a9fc0    jmp near ptr 004A9FD1h"
"	      004a9fc5    mov dword ptr [ebp-54h],0"
"	      004a9fcc    jmp near ptr 004A9FD1h"
"	      004a9fd1    mov eax,this"
"	      004a9fd7    add eax,1C6h"
"	      004a9fdc    push eax"
"	      004a9fdd    lea eax,rectText[1].left"
"	      004a9fe0    push eax"
"	      004a9fe1    push 0"
"	      004a9fe3    mov eax,this"
"	      004a9fe9    mov eax,[eax+182h]"
"	      004a9fef    mov eax,[eax+4]"
"	      004a9ff2    push eax"
"	      004a9ff3    mov eax,[ebp-54h]"
"	      004a9ff6    push eax"
"	      004a9ff7    mov eax,this"
"	      004a9ffd    mov ecx,this"
"	      004aa003    mov ecx,[ecx+44h]"
"	      004aa006    mov edx,[ecx]"
"	      004aa008    mov ecx,[eax+44h]"
"	      004aa00b    call dword ptr [edx+48h]"
);
// LINE 189:
	asm( 
"	      004aa00e    jmp near ptr 004AA013h"
"	      004aa013    jmp near ptr 004AA018h"
"	      004aa018    mov eax,this"
"	      004aa01e    mov eax,[eax+18Ah]"
"	      004aa024    cmp dword ptr [eax+4],0"
"	      004aa028    je near ptr 004AA049h"
"	      004aa02e    mov eax,this"
"	      004aa034    mov eax,[eax+18Ah]"
"	      004aa03a    mov eax,[eax]"
"	      004aa03c    mov [ebp-58h],eax"
"	      004aa03f    jmp near ptr 004AA055h"
"	      004aa044    jmp near ptr 004AA055h"
"	      004aa049    mov dword ptr [ebp-58h],0"
"	      004aa050    jmp near ptr 004AA055h"
"	      004aa055    mov eax,this"
"	      004aa05b    add eax,1C6h"
"	      004aa060    push eax"
"	      004aa061    lea eax,rectText[2].left"
"	      004aa064    push eax"
"	      004aa065    push 0"
"	      004aa067    mov eax,this"
"	      004aa06d    mov eax,[eax+18Ah]"
"	      004aa073    mov eax,[eax+4]"
"	      004aa076    push eax"
"	      004aa077    mov eax,[ebp-58h]"
"	      004aa07a    push eax"
"	      004aa07b    mov eax,this"
"	      004aa081    mov ecx,this"
"	      004aa087    mov ecx,[ecx+44h]"
"	      004aa08a    mov edx,[ecx]"
"	      004aa08c    mov ecx,[eax+44h]"
"	      004aa08f    call dword ptr [edx+48h]"
);
// LINE 191:
	asm( 
"	      004aa092    mov i,0"
"	      004aa099    jmp near ptr 004AA0A1h"
"	      004aa09e    inc i"
"	      004aa0a1    cmp i,5"
"	      004aa0a5    jge near ptr 004AA1C7h"
);
// LINE 192:
	asm( 
"	      004aa0ab    lea eax,ptText.x"
"	      004aa0ae    push eax"
"	      004aa0af    mov eax,i"
"	      004aa0b2    push eax"
"	      004aa0b3    mov ecx,this"
"	      004aa0b9    call 004AA6D0h"
);
// LINE 195:
	asm( 
"	      004aa0be    jmp near ptr 004AA0C3h"
"	      004aa0c3    jmp near ptr 004AA0C8h"
"	      004aa0c8    jmp near ptr 004AA0CDh"
"	      004aa0cd    jmp near ptr 004AA0D2h"
"	      004aa0d2    mov eax,i"
"	      004aa0d5    mov ecx,this"
"	      004aa0db    mov eax,[ecx+eax*8+14Ah]"
"	      004aa0e2    cmp dword ptr [eax+4],0"
"	      004aa0e6    je near ptr 004AA10Bh"
"	      004aa0ec    mov eax,i"
"	      004aa0ef    mov ecx,this"
"	      004aa0f5    mov eax,[ecx+eax*8+14Ah]"
"	      004aa0fc    mov eax,[eax]"
"	      004aa0fe    mov [ebp-5Ch],eax"
"	      004aa101    jmp near ptr 004AA117h"
"	      004aa106    jmp near ptr 004AA117h"
"	      004aa10b    mov dword ptr [ebp-5Ch],0"
"	      004aa112    jmp near ptr 004AA117h"
"	      004aa117    mov eax,this"
"	      004aa11d    mov eax,[eax+1Ch]"
"	      004aa120    mov ecx,this"
"	      004aa126    sub eax,[ecx+14h]"
"	      004aa129    mov [ebp-80h],eax"
"	      004aa12c    mov eax,this"
"	      004aa132    mov eax,[eax+18h]"
"	      004aa135    mov ecx,this"
"	      004aa13b    sub eax,[ecx+10h]"
"	      004aa13e    mov [ebp-84h],eax"
"	      004aa144    mov eax,ptText.y"
"	      004aa147    mov [ebp-88h],eax"
"	      004aa14d    mov eax,ptText.x"
"	      004aa150    mov [ebp-8Ch],eax"
"	      004aa156    jmp near ptr 004AA15Bh"
"	      004aa15b    mov eax,[ebp-8Ch]"
"	      004aa161    mov [ebp-4Ch],eax"
"	      004aa164    mov eax,[ebp-88h]"
"	      004aa16a    mov [ebp-48h],eax"
"	      004aa16d    mov eax,[ebp-84h]"
"	      004aa173    mov [ebp-44h],eax"
"	      004aa176    mov eax,[ebp-80h]"
"	      004aa179    mov [ebp-40h],eax"
"	      004aa17c    jmp near ptr 004AA181h"
"	      004aa181    mov eax,this"
"	      004aa187    add eax,18Eh"
"	      004aa18c    push eax"
"	      004aa18d    lea eax,[ebp-4Ch]"
"	      004aa190    push eax"
"	      004aa191    push 0"
"	      004aa193    mov eax,i"
"	      004aa196    mov ecx,this"
"	      004aa19c    mov eax,[ecx+eax*8+14Ah]"
"	      004aa1a3    mov eax,[eax+4]"
"	      004aa1a6    push eax"
"	      004aa1a7    mov eax,[ebp-5Ch]"
"	      004aa1aa    push eax"
"	      004aa1ab    mov eax,this"
"	      004aa1b1    mov ecx,this"
"	      004aa1b7    mov ecx,[ecx+44h]"
"	      004aa1ba    mov edx,[ecx]"
"	      004aa1bc    mov ecx,[eax+44h]"
"	      004aa1bf    call dword ptr [edx+48h]"
);
// LINE 196:
	asm( 
"	      004aa1c2    jmp near ptr 004AA09Eh"
);
// LINE 197:
	asm( 
"	      004aa1c7    jmp near ptr 004AA1CCh"
"	      004aa1cc    pop edi"
"	      004aa1cd    pop esi"
"	      004aa1ce    pop ebx"
"	      004aa1cf    leave"
"	      004aa1d0    ret"
);
}

// FUNCTION: COPTER_D 0x004aa1d1
void InventoryWindow::DrawInventory() {
	long lCurrentHeliType;
	const long lCheckmarkWidth;
	const long lCheckmarkHeight;
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	class MRect rectDestination;
	long lCurrentRow;

// LINE 205:
	asm( 
"	      004aa1d1    push ebp"
"	      004aa1d2    mov ebp,esp"
"	      004aa1d4    sub esp,2Ch"
"	      004aa1d7    push ebx"
"	      004aa1d8    push esi"
"	      004aa1d9    push edi"
"	      004aa1da    mov this,ecx"
);
// LINE 208:
	asm( 
"	      004aa1dd    mov eax,this"
"	      004aa1e0    mov eax,[eax+80h]"
"	      004aa1e6    mov eax,[eax+8]"
"	      004aa1e9    mov lCheckmarkWidth,eax"
"	      004aa1ec    jmp near ptr 004AA1F1h"
);
// LINE 209:
	asm( 
"	      004aa1f1    mov eax,this"
"	      004aa1f4    mov eax,[eax+80h]"
"	      004aa1fa    mov eax,[eax+0Ch]"
"	      004aa1fd    mov lCheckmarkHeight,eax"
"	      004aa200    jmp near ptr 004AA205h"
);
// LINE 210:
	asm( 
"	      004aa205    jmp near ptr 004AA20Ah"
"	      004aa20a    jmp near ptr 004AA20Fh"
);
// LINE 213:
	asm( 
"	      004aa20f    call 00428F4Ah"
"	      004aa214    mov currentUserPersonalInfo,eax"
);
// LINE 214:
	asm( 
"	      004aa217    mov lCurrentHeliType,0"
"	      004aa21e    mov lCurrentRow,0"
"	      004aa225    jmp near ptr 004AA22Dh"
"	      004aa22a    inc lCurrentHeliType"
"	      004aa22d    cmp lCurrentHeliType,9"
"	      004aa231    jge near ptr 004AA4E4h"
);
// LINE 215:
	asm( 
"	      004aa237    mov eax,currentUserPersonalInfo"
"	      004aa23a    mov edx,1"
"	      004aa23f    mov cl,reinterpret_cast<uint8_t>(lCurrentHeliType)"
"	      004aa242    shl edx,cl"
"	      004aa244    test [eax+44h],edx"
"	      004aa247    je near ptr 004AA4DFh"
);
// LINE 217:
	asm( 
"	      004aa24d    push 0"
"	      004aa24f    mov ecx,this"
"	      004aa252    call 004AA656h"
"	      004aa257    mov ecx,this"
"	      004aa25a    mov ecx,[ecx+20h]"
"	      004aa25d    add ecx,eax"
"	      004aa25f    add ecx,3"
"	      004aa262    mov rectDestination.left,ecx"
);
// LINE 218:
	asm( 
"	      004aa265    push 1"
"	      004aa267    mov ecx,this"
"	      004aa26a    call 004AA656h"
"	      004aa26f    mov ecx,this"
"	      004aa272    mov ecx,[ecx+20h]"
"	      004aa275    add ecx,eax"
"	      004aa277    dec ecx"
"	      004aa278    mov rectDestination.right,ecx"
);
// LINE 219:
	asm( 
"	      004aa27b    mov eax,lCurrentRow"
"	      004aa27e    push eax"
"	      004aa27f    mov ecx,this"
"	      004aa282    call 004AA693h"
"	      004aa287    mov ecx,this"
"	      004aa28a    mov ecx,[ecx+24h]"
"	      004aa28d    add ecx,eax"
"	      004aa28f    add ecx,2"
"	      004aa292    mov rectDestination.top,ecx"
);
// LINE 220:
	asm( 
"	      004aa295    mov eax,lCurrentRow"
"	      004aa298    inc eax"
"	      004aa299    push eax"
"	      004aa29a    mov ecx,this"
"	      004aa29d    call 004AA693h"
"	      004aa2a2    mov ecx,this"
"	      004aa2a5    mov ecx,[ecx+24h]"
"	      004aa2a8    add ecx,eax"
"	      004aa2aa    sub ecx,2"
"	      004aa2ad    mov rectDestination.bottom,ecx"
);
// LINE 222:
	asm( 
"	      004aa2b0    jmp near ptr 004AA2B5h"
"	      004aa2b5    jmp near ptr 004AA2BAh"
"	      004aa2ba    mov eax,lCurrentHeliType"
"	      004aa2bd    mov ecx,this"
"	      004aa2c0    mov eax,[ecx+eax*8+102h]"
"	      004aa2c7    cmp dword ptr [eax+4],0"
"	      004aa2cb    je near ptr 004AA2EDh"
"	      004aa2d1    mov eax,lCurrentHeliType"
"	      004aa2d4    mov ecx,this"
"	      004aa2d7    mov eax,[ecx+eax*8+102h]"
"	      004aa2de    mov eax,[eax]"
"	      004aa2e0    mov [ebp-28h],eax"
"	      004aa2e3    jmp near ptr 004AA2F9h"
"	      004aa2e8    jmp near ptr 004AA2F9h"
"	      004aa2ed    mov dword ptr [ebp-28h],0"
"	      004aa2f4    jmp near ptr 004AA2F9h"
"	      004aa2f9    mov eax,this"
"	      004aa2fc    add eax,18Eh"
"	      004aa301    push eax"
"	      004aa302    lea eax,rectDestination.left"
"	      004aa305    push eax"
"	      004aa306    push 0"
"	      004aa308    mov eax,lCurrentHeliType"
"	      004aa30b    mov ecx,this"
"	      004aa30e    mov eax,[ecx+eax*8+102h]"
"	      004aa315    mov eax,[eax+4]"
"	      004aa318    push eax"
"	      004aa319    mov eax,[ebp-28h]"
"	      004aa31c    push eax"
"	      004aa31d    mov eax,this"
"	      004aa320    mov ecx,this"
"	      004aa323    mov ecx,[ecx+44h]"
"	      004aa326    mov edx,[ecx]"
"	      004aa328    mov ecx,[eax+44h]"
"	      004aa32b    call dword ptr [edx+48h]"
);
// LINE 225:
	asm( 
"	      004aa32e    add rectDestination.left,3"
);
// LINE 226:
	asm( 
"	      004aa332    sub rectDestination.top,4"
);
// LINE 227:
	asm( 
"	      004aa336    mov eax,currentUserPersonalInfo"
"	      004aa339    test byte ptr [eax+48h],4"
"	      004aa33d    je near ptr 004AA38Dh"
);
// LINE 228:
	asm( 
"	      004aa343    push 1"
"	      004aa345    mov ecx,this"
"	      004aa348    call 004AA656h"
"	      004aa34d    mov ecx,this"
"	      004aa350    mov ecx,[ecx+20h]"
"	      004aa353    add ecx,eax"
"	      004aa355    sub ecx,4"
"	      004aa358    mov rectDestination.left,ecx"
);
// LINE 231:
	asm( 
"	      004aa35b    mov eax,lCheckmarkHeight"
"	      004aa35e    push eax"
"	      004aa35f    mov eax,lCheckmarkWidth"
"	      004aa362    push eax"
"	      004aa363    push 0"
"	      004aa365    push 0"
"	      004aa367    mov eax,rectDestination.top"
"	      004aa36a    push eax"
"	      004aa36b    mov eax,rectDestination.left"
"	      004aa36e    push eax"
"	      004aa36f    mov eax,this"
"	      004aa372    mov eax,[eax+44h]"
"	      004aa375    push eax"
"	      004aa376    mov eax,this"
"	      004aa379    mov ecx,this"
"	      004aa37c    mov ecx,[ecx+80h]"
"	      004aa382    mov edx,[ecx]"
"	      004aa384    mov ecx,[eax+80h]"
"	      004aa38a    call dword ptr [edx+0Ch]"
);
// LINE 233:
	asm( 
"	      004aa38d    mov eax,currentUserPersonalInfo"
"	      004aa390    test byte ptr [eax+48h],1"
"	      004aa394    je near ptr 004AA42Eh"
);
// LINE 235:
	asm( 
"	      004aa39a    push 2"
"	      004aa39c    mov ecx,this"
"	      004aa39f    call 004AA656h"
"	      004aa3a4    mov ecx,this"
"	      004aa3a7    mov ecx,[ecx+20h]"
"	      004aa3aa    add ecx,eax"
"	      004aa3ac    sub ecx,4"
"	      004aa3af    mov rectDestination.left,ecx"
);
// LINE 238:
	asm( 
"	      004aa3b2    mov eax,lCheckmarkHeight"
"	      004aa3b5    push eax"
"	      004aa3b6    mov eax,lCheckmarkWidth"
"	      004aa3b9    push eax"
"	      004aa3ba    push 0"
"	      004aa3bc    push 0"
"	      004aa3be    mov eax,rectDestination.top"
"	      004aa3c1    push eax"
"	      004aa3c2    mov eax,rectDestination.left"
"	      004aa3c5    push eax"
"	      004aa3c6    mov eax,this"
"	      004aa3c9    mov eax,[eax+44h]"
"	      004aa3cc    push eax"
"	      004aa3cd    mov eax,this"
"	      004aa3d0    mov ecx,this"
"	      004aa3d3    mov ecx,[ecx+80h]"
"	      004aa3d9    mov edx,[ecx]"
"	      004aa3db    mov ecx,[eax+80h]"
"	      004aa3e1    call dword ptr [edx+0Ch]"
);
// LINE 240:
	asm( 
"	      004aa3e4    push 3"
"	      004aa3e6    mov ecx,this"
"	      004aa3e9    call 004AA656h"
"	      004aa3ee    mov ecx,this"
"	      004aa3f1    mov ecx,[ecx+20h]"
"	      004aa3f4    add ecx,eax"
"	      004aa3f6    sub ecx,4"
"	      004aa3f9    mov rectDestination.left,ecx"
);
// LINE 243:
	asm( 
"	      004aa3fc    mov eax,lCheckmarkHeight"
"	      004aa3ff    push eax"
"	      004aa400    mov eax,lCheckmarkWidth"
"	      004aa403    push eax"
"	      004aa404    push 0"
"	      004aa406    push 0"
"	      004aa408    mov eax,rectDestination.top"
"	      004aa40b    push eax"
"	      004aa40c    mov eax,rectDestination.left"
"	      004aa40f    push eax"
"	      004aa410    mov eax,this"
"	      004aa413    mov eax,[eax+44h]"
"	      004aa416    push eax"
"	      004aa417    mov eax,this"
"	      004aa41a    mov ecx,this"
"	      004aa41d    mov ecx,[ecx+80h]"
"	      004aa423    mov edx,[ecx]"
"	      004aa425    mov ecx,[eax+80h]"
"	      004aa42b    call dword ptr [edx+0Ch]"
);
// LINE 245:
	asm( 
"	      004aa42e    mov eax,currentUserPersonalInfo"
"	      004aa431    test byte ptr [eax+48h],2"
"	      004aa435    je near ptr 004AA485h"
);
// LINE 246:
	asm( 
"	      004aa43b    push 4"
"	      004aa43d    mov ecx,this"
"	      004aa440    call 004AA656h"
"	      004aa445    mov ecx,this"
"	      004aa448    mov ecx,[ecx+20h]"
"	      004aa44b    add ecx,eax"
"	      004aa44d    sub ecx,4"
"	      004aa450    mov rectDestination.left,ecx"
);
// LINE 249:
	asm( 
"	      004aa453    mov eax,lCheckmarkHeight"
"	      004aa456    push eax"
"	      004aa457    mov eax,lCheckmarkWidth"
"	      004aa45a    push eax"
"	      004aa45b    push 0"
"	      004aa45d    push 0"
"	      004aa45f    mov eax,rectDestination.top"
"	      004aa462    push eax"
"	      004aa463    mov eax,rectDestination.left"
"	      004aa466    push eax"
"	      004aa467    mov eax,this"
"	      004aa46a    mov eax,[eax+44h]"
"	      004aa46d    push eax"
"	      004aa46e    mov eax,this"
"	      004aa471    mov ecx,this"
"	      004aa474    mov ecx,[ecx+80h]"
"	      004aa47a    mov edx,[ecx]"
"	      004aa47c    mov ecx,[eax+80h]"
"	      004aa482    call dword ptr [edx+0Ch]"
);
// LINE 251:
	asm( 
"	      004aa485    mov eax,currentUserPersonalInfo"
"	      004aa488    test byte ptr [eax+48h],8"
"	      004aa48c    je near ptr 004AA4DCh"
);
// LINE 252:
	asm( 
"	      004aa492    push 5"
"	      004aa494    mov ecx,this"
"	      004aa497    call 004AA656h"
"	      004aa49c    mov ecx,this"
"	      004aa49f    mov ecx,[ecx+20h]"
"	      004aa4a2    add ecx,eax"
"	      004aa4a4    sub ecx,4"
"	      004aa4a7    mov rectDestination.left,ecx"
);
// LINE 255:
	asm( 
"	      004aa4aa    mov eax,lCheckmarkHeight"
"	      004aa4ad    push eax"
"	      004aa4ae    mov eax,lCheckmarkWidth"
"	      004aa4b1    push eax"
"	      004aa4b2    push 0"
"	      004aa4b4    push 0"
"	      004aa4b6    mov eax,rectDestination.top"
"	      004aa4b9    push eax"
"	      004aa4ba    mov eax,rectDestination.left"
"	      004aa4bd    push eax"
"	      004aa4be    mov eax,this"
"	      004aa4c1    mov eax,[eax+44h]"
"	      004aa4c4    push eax"
"	      004aa4c5    mov eax,this"
"	      004aa4c8    mov ecx,this"
"	      004aa4cb    mov ecx,[ecx+80h]"
"	      004aa4d1    mov edx,[ecx]"
"	      004aa4d3    mov ecx,[eax+80h]"
"	      004aa4d9    call dword ptr [edx+0Ch]"
);
// LINE 257:
	asm( 
"	      004aa4dc    inc lCurrentRow"
);
// LINE 259:
	asm( 
"	      004aa4df    jmp near ptr 004AA22Ah"
);
// LINE 260:
	asm( 
"	      004aa4e4    jmp near ptr 004AA4E9h"
"	      004aa4e9    pop edi"
"	      004aa4ea    pop esi"
"	      004aa4eb    pop ebx"
"	      004aa4ec    leave"
"	      004aa4ed    ret"
);
}

// FUNCTION: COPTER_D 0x004aa4ee
long InventoryWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 267:
	asm( 
"	      004aa4ee    push ebp"
"	      004aa4ef    mov ebp,esp"
"	      004aa4f1    sub esp,4"
"	      004aa4f4    push ebx"
"	      004aa4f5    push esi"
"	      004aa4f6    push edi"
"	      004aa4f7    mov this,ecx"
);
// LINE 269:
	asm( 
"	      004aa4fa    xor eax,eax"
"	      004aa4fc    jmp near ptr 004AA501h"
);
// LINE 270:
	asm( 
"	      004aa501    pop edi"
"	      004aa502    pop esi"
"	      004aa503    pop ebx"
"	      004aa504    leave"
"	      004aa505    ret 8"
);
}

// FUNCTION: COPTER_D 0x004aa508
long InventoryWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 276:
	asm( 
"	      004aa508    push ebp"
"	      004aa509    mov ebp,esp"
"	      004aa50b    sub esp,4"
"	      004aa50e    push ebx"
"	      004aa50f    push esi"
"	      004aa510    push edi"
"	      004aa511    mov this,ecx"
);
// LINE 278:
	asm( 
"	      004aa514    mov eax,1"
"	      004aa519    jmp near ptr 004AA51Eh"
);
// LINE 279:
	asm( 
"	      004aa51e    pop edi"
"	      004aa51f    pop esi"
"	      004aa520    pop ebx"
"	      004aa521    leave"
"	      004aa522    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x004aa525
long InventoryWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 285:
	asm( 
"	      004aa525    push ebp"
"	      004aa526    mov ebp,esp"
"	      004aa528    sub esp,4"
"	      004aa52b    push ebx"
"	      004aa52c    push esi"
"	      004aa52d    push edi"
"	      004aa52e    mov this,ecx"
);
// LINE 286:
	asm( 
"	      004aa531    mov eax,1"
"	      004aa536    jmp near ptr 004AA53Bh"
);
// LINE 287:
	asm( 
"	      004aa53b    pop edi"
"	      004aa53c    pop esi"
"	      004aa53d    pop ebx"
"	      004aa53e    leave"
"	      004aa53f    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x004aa542
long InventoryWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 291:
	asm( 
"	      004aa542    push ebp"
"	      004aa543    mov ebp,esp"
"	      004aa545    sub esp,4"
"	      004aa548    push ebx"
"	      004aa549    push esi"
"	      004aa54a    push edi"
"	      004aa54b    mov this,ecx"
);
// LINE 294:
	asm( 
"	      004aa54e    mov eax,1"
"	      004aa553    jmp near ptr 004AA558h"
);
// LINE 295:
	asm( 
"	      004aa558    pop edi"
"	      004aa559    pop esi"
"	      004aa55a    pop ebx"
"	      004aa55b    leave"
"	      004aa55c    ret 8"
);
}

// FUNCTION: COPTER_D 0x004aa55f
int32_t InventoryWindow::GetRectFromID(long lID, class MRect& rectHotSpot) {
	class list<HotSpot>::iterator i;

// LINE 302:
	asm( 
"	      004aa55f    push ebp"
"	      004aa560    mov ebp,esp"
"	      004aa562    sub esp,24h"
"	      004aa565    push ebx"
"	      004aa566    push esi"
"	      004aa567    push edi"
"	      004aa568    mov this,ecx"
);
// LINE 303:
	asm( 
"	      004aa56b    mov eax,this"
"	      004aa56e    mov eax,[eax+74h]"
"	      004aa571    mov eax,[eax]"
"	      004aa573    mov [ebp-1Ch],eax"
"	      004aa576    mov eax,[ebp-1Ch]"
"	      004aa579    mov i.node,eax"
"	      004aa57c    jmp near ptr 004AA581h"
"	      004aa581    jmp near ptr 004AA586h"
);
// LINE 304:
	asm( 
"	      004aa586    mov eax,this"
"	      004aa589    mov eax,[eax+74h]"
"	      004aa58c    mov [ebp-10h],eax"
"	      004aa58f    mov eax,[ebp-10h]"
"	      004aa592    mov [ebp-8],eax"
"	      004aa595    jmp near ptr 004AA59Ah"
"	      004aa59a    jmp near ptr 004AA59Fh"
"	      004aa59f    mov eax,[ebp-8]"
"	      004aa5a2    cmp i.node,eax"
"	      004aa5a5    jne near ptr 004AA5B5h"
"	      004aa5ab    jmp near ptr 004AA5C9h"
"	      004aa5b0    jmp near ptr 004AA5B5h"
"	      004aa5b5    jmp near ptr 004AA5C4h"
"	      004aa5ba    cmp dword ptr [ebp-14h],0"
"	      004aa5be    jne near ptr 004AA5C9h"
"	      004aa5c4    jmp near ptr 004AA5CEh"
"	      004aa5c9    jmp near ptr 004AA632h"
"	      004aa5ce    jmp near ptr 004AA5DDh"
"	      004aa5d3    cmp dword ptr [ebp-18h],0"
"	      004aa5d7    je near ptr 004AA632h"
);
// LINE 305:
	asm( 
"	      004aa5dd    jmp near ptr 004AA5E2h"
"	      004aa5e2    mov eax,i.node"
"	      004aa5e5    mov ecx,lID"
"	      004aa5e8    cmp [eax+8],ecx"
"	      004aa5eb    jne near ptr 004AA60Fh"
);
// LINE 306:
	asm( 
"	      004aa5f1    jmp near ptr 004AA5F6h"
"	      004aa5f6    mov eax,rectHotSpot"
"	      004aa5f9    push eax"
"	      004aa5fa    mov ecx,i.node"
"	      004aa5fd    add ecx,8"
"	      004aa600    call 004BB0D2h"
);
// LINE 307:
	asm( 
"	      004aa605    mov eax,1"
"	      004aa60a    jmp near ptr 004AA639h"
);
// LINE 309:
	asm( 
"	      004aa60f    mov eax,i.node"
"	      004aa612    mov [ebp-20h],eax"
"	      004aa615    mov eax,i.node"
"	      004aa618    mov eax,[eax]"
"	      004aa61a    mov i.node,eax"
"	      004aa61d    jmp near ptr 004AA622h"
"	      004aa622    mov eax,[ebp-20h]"
"	      004aa625    mov [ebp-0Ch],eax"
"	      004aa628    jmp near ptr 004AA62Dh"
);
// LINE 310:
	asm( 
"	      004aa62d    jmp near ptr 004AA586h"
);
// LINE 311:
	asm( 
"	      004aa632    xor eax,eax"
"	      004aa634    jmp near ptr 004AA639h"
);
// LINE 312:
	asm( 
"	      004aa639    pop edi"
"	      004aa63a    pop esi"
"	      004aa63b    pop ebx"
"	      004aa63c    leave"
"	      004aa63d    ret 8"
);
}

// FUNCTION: COPTER_D 0x004aa640
void InventoryWindow::LoadHotSpots() {
// LINE 317:
	asm( 
"	      004aa640    push ebp"
"	      004aa641    mov ebp,esp"
"	      004aa643    sub esp,4"
"	      004aa646    push ebx"
"	      004aa647    push esi"
"	      004aa648    push edi"
"	      004aa649    mov this,ecx"
);
// LINE 323:
	asm( 
"	      004aa64c    jmp near ptr 004AA651h"
"	      004aa651    pop edi"
"	      004aa652    pop esi"
"	      004aa653    pop ebx"
"	      004aa654    leave"
"	      004aa655    ret"
);
}

// FUNCTION: COPTER_D 0x004aa656
long InventoryWindow::GetColumnStartPixel(long lColumn) {
	static const const long[6] lColumnStart = { /* <data@0x00591810> */ };

// LINE 330:
	asm( 
"	      004aa656    push ebp"
"	      004aa657    mov ebp,esp"
"	      004aa659    sub esp,4"
"	      004aa65c    push ebx"
"	      004aa65d    push esi"
"	      004aa65e    push edi"
"	      004aa65f    mov this,ecx"
);
// LINE 334:
	asm( 
"	      004aa662    cmp lColumn,6"
"	      004aa666    jge near ptr 004AA676h"
"	      004aa66c    cmp lColumn,0"
"	      004aa670    jge near ptr 004AA67Dh"
);
// LINE 335:
	asm( 
"	      004aa676    xor eax,eax"
"	      004aa678    jmp near ptr 004AA68Ch"
);
// LINE 336:
	asm( 
"	      004aa67d    mov eax,lColumn"
"	      004aa680    mov eax,[eax*4+591810h]"
"	      004aa687    jmp near ptr 004AA68Ch"
);
// LINE 337:
	asm( 
"	      004aa68c    pop edi"
"	      004aa68d    pop esi"
"	      004aa68e    pop ebx"
"	      004aa68f    leave"
"	      004aa690    ret 4"
);
}

// FUNCTION: COPTER_D 0x004aa693
long InventoryWindow::GetRowStartPixel(long lRow) {
	static const const long[11] lRowStart = { /* <data@0x00591828> */ };

// LINE 344:
	asm( 
"	      004aa693    push ebp"
"	      004aa694    mov ebp,esp"
"	      004aa696    sub esp,4"
"	      004aa699    push ebx"
"	      004aa69a    push esi"
"	      004aa69b    push edi"
"	      004aa69c    mov this,ecx"
);
// LINE 348:
	asm( 
"	      004aa69f    cmp lRow,0Bh"
"	      004aa6a3    jge near ptr 004AA6B3h"
"	      004aa6a9    cmp lRow,0"
"	      004aa6ad    jge near ptr 004AA6BAh"
);
// LINE 349:
	asm( 
"	      004aa6b3    xor eax,eax"
"	      004aa6b5    jmp near ptr 004AA6C9h"
);
// LINE 350:
	asm( 
"	      004aa6ba    mov eax,lRow"
"	      004aa6bd    mov eax,[eax*4+591828h]"
"	      004aa6c4    jmp near ptr 004AA6C9h"
);
// LINE 351:
	asm( 
"	      004aa6c9    pop edi"
"	      004aa6ca    pop esi"
"	      004aa6cb    pop ebx"
"	      004aa6cc    leave"
"	      004aa6cd    ret 4"
);
}

// FUNCTION: COPTER_D 0x004aa6d0
void InventoryWindow::GetEquipmentTextPosition(long lEquipmentIndex, class MPoint& ptEquipment) {
	static const const long[5] lXPositions = { /* <data@0x00591858> */ };
	static const const long[5] lYPositions = { /* <data@0x00591870> */ };

// LINE 359:
	asm( 
"	      004aa6d0    push ebp"
"	      004aa6d1    mov ebp,esp"
"	      004aa6d3    sub esp,4"
"	      004aa6d6    push ebx"
"	      004aa6d7    push esi"
"	      004aa6d8    push edi"
"	      004aa6d9    mov this,ecx"
);
// LINE 363:
	asm( 
"	      004aa6dc    cmp lEquipmentIndex,5"
"	      004aa6e0    jge near ptr 004AA6F0h"
"	      004aa6e6    cmp lEquipmentIndex,0"
"	      004aa6ea    jge near ptr 004AA6F7h"
);
// LINE 364:
	asm( 
"	      004aa6f0    mov lEquipmentIndex,0"
);
// LINE 365:
	asm( 
"	      004aa6f7    mov eax,lEquipmentIndex"
"	      004aa6fa    mov eax,[eax*4+591858h]"
"	      004aa701    mov ecx,ptEquipment"
"	      004aa704    mov [ecx],eax"
);
// LINE 366:
	asm( 
"	      004aa706    mov eax,lEquipmentIndex"
"	      004aa709    mov eax,[eax*4+591870h]"
"	      004aa710    mov ecx,ptEquipment"
"	      004aa713    mov [ecx+4],eax"
);
// LINE 367:
	asm( 
"	      004aa716    jmp near ptr 004AA71Bh"
"	      004aa71b    pop edi"
"	      004aa71c    pop esi"
"	      004aa71d    pop ebx"
"	      004aa71e    leave"
"	      004aa71f    ret 8"
);
}

// FUNCTION: COPTER_D 0x004aa722
void InventoryWindow::GetTitleAndAddressRects(class MRect& rectTitle, class MRect& rectAddress1, class MRect& rectAddress2) {
// LINE 377:
	asm( 
"	      004aa722    push ebp"
"	      004aa723    mov ebp,esp"
"	      004aa725    sub esp,4"
"	      004aa728    push ebx"
"	      004aa729    push esi"
"	      004aa72a    push edi"
"	      004aa72b    mov this,ecx"
);
// LINE 378:
	asm( 
"	      004aa72e    mov eax,rectTitle"
"	      004aa731    mov dword ptr [eax],0E8h"
"	      004aa737    mov eax,rectTitle"
"	      004aa73a    mov dword ptr [eax+4],68h"
"	      004aa741    mov eax,rectTitle"
"	      004aa744    mov dword ptr [eax+8],1A6h"
"	      004aa74b    mov eax,rectTitle"
"	      004aa74e    mov dword ptr [eax+0Ch],9Ch"
"	      004aa755    jmp near ptr 004AA75Ah"
);
// LINE 379:
	asm( 
"	      004aa75a    mov eax,rectAddress1"
"	      004aa75d    mov dword ptr [eax],0AEh"
"	      004aa763    mov eax,rectAddress1"
"	      004aa766    mov dword ptr [eax+4],6Ch"
"	      004aa76d    mov eax,rectAddress1"
"	      004aa770    mov dword ptr [eax+8],0FEh"
"	      004aa777    mov eax,rectAddress1"
"	      004aa77a    mov dword ptr [eax+0Ch],0A2h"
"	      004aa781    jmp near ptr 004AA786h"
);
// LINE 380:
	asm( 
"	      004aa786    mov eax,rectAddress2"
"	      004aa789    mov dword ptr [eax],184h"
"	      004aa78f    mov eax,rectAddress2"
"	      004aa792    mov dword ptr [eax+4],6Ch"
"	      004aa799    mov eax,rectAddress2"
"	      004aa79c    mov dword ptr [eax+8],1D4h"
"	      004aa7a3    mov eax,rectAddress2"
"	      004aa7a6    mov dword ptr [eax+0Ch],0A2h"
"	      004aa7ad    jmp near ptr 004AA7B2h"
);
// LINE 381:
	asm( 
"	      004aa7b2    jmp near ptr 004AA7B7h"
"	      004aa7b7    pop edi"
"	      004aa7b8    pop esi"
"	      004aa7b9    pop ebx"
"	      004aa7ba    leave"
"	      004aa7bb    ret 0Ch"
);
}



// Contribution: 1:000a97c0-000a97f8 Module: 8, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x004aa7c0
// InventoryWindow::`scalar deleting destructor'



// Contribution: 2:00002810-00002883 Module: 8, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00002888-0000294b Module: 8, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591888
// ??_7InventoryWindow@@6B@


// Contribution: 3:00003984-000039d1 Module: 8, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059a984
// SZ_INVENTORY_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a988
// SZ_INVENTORY_CHECKMARK_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059a98c
// SZ_INVENTORY_WINDOW_HELICOPTER_TEXT_NAME
// GLOBAL: COPTER_D 0x0059a990
// SZ_INVENTORY_WINDOW_TITLE_TEXT_NAME
// GLOBAL: COPTER_D 0x0059a994
// SZ_INVENTORY_WINDOW_ADDRESS_TEXT_NAME
