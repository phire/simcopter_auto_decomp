// Module: Catalog.obj
// Source: C:\Copter\source\sparkal\Catalog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ class CatalogWindow (forward reference);
// VTABLE: COPTER_D 0x00590ce8
class CatalogWindow : public GraphicWindow
{ // packed(0x2b6 bytes) TI: 0x487c
public:
	void CatalogWindow(int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~CatalogWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	int32_t ReadPalette(/*packed*/ struct SparkalColor*);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
protected:
	void SwitchGraphicsForTab(long);
	void GetCurrentGraphicsFileNames(/*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&);
	int32_t DoesCursorHitEquipmentSelection(long, long, long&);
	int32_t DoesCursorHitTab(long, long, long&);
	int32_t DoesTabHaveAnyStains(long);
	int32_t DoesTabHaveAnyPaperClips(long);
	void DrawCurrentEquipmentSelection();
	void SetNewEquipmentSelection(long);
	int32_t CanUserBuy();
	int32_t CanUserSell();
	int32_t DoCatalogWindowBuy();
	int32_t DoCatalogWindowSell();
	void SetButtonStates();
	long GetHelicopterFromTab(long);
	long GetEquipmentFromSelectionIndex(long);
	/*+0x74*/  /*packed*/ class MRect rectTabs; // 0x10 bytes
	/*+0x84*/  /*packed*/ class MPoint ptHelicopterMainGraphic; // 0x8 bytes
	/*+0x8c*/  long lStainImageTabs[3]; // 0xc bytes
	/*+0x98*/  /*packed*/ class MPoint ptStainImage[3]; // 0x18 bytes
	/*+0xb0*/  long lPaperClipImageTabs[3]; // 0xc bytes
	/*+0xbc*/  /*packed*/ class MPoint ptPaperClipImage[3]; // 0x18 bytes
	/*+0xd4*/  /*packed*/ class DigitalSound mySound; // 0x7a bytes
	/*+0x14e*/ long lCurrentTab;
	/*+0x152*/ long lCurrentEquipmentSelection;
	/*+0x156*/ /*packed*/ class basic_string<char> sCurrentFunds; // 0x8 bytes
	/*+0x15e*/ /*packed*/ class basic_string<char> sItemCost; // 0x8 bytes
	/*+0x166*/ /*packed*/ class MFont myFont; // 0x1c bytes
	/*+0x182*/ /*packed*/ class MRect rectHistoryText; // 0x10 bytes
	/*+0x192*/ /*packed*/ class MRect rectSpecialtiesText; // 0x10 bytes
	/*+0x1a2*/ /*packed*/ class MRect rectDescriptionText; // 0x10 bytes
	/*+0x1b2*/ /*packed*/ class MRect rectCostText; // 0x10 bytes
	/*+0x1c2*/ /*packed*/ class SoundButtonWindow *buttonWindowBuy;
	/*+0x1c6*/ /*packed*/ class SoundButtonWindow *buttonWindowSell;
	/*+0x1ca*/ /*packed*/ class SoundButtonWindow *buttonWindowDone;
	/*+0x1ce*/ /*packed*/ class MRect rectHelicopterHistoryTitle; // 0x10 bytes
	/*+0x1de*/ /*packed*/ class MRect rectHelicopterSpecialtiesTitle; // 0x10 bytes
	/*+0x1ee*/ /*packed*/ class MRect rectHelicopterDescriptionTitle; // 0x10 bytes
	/*+0x1fe*/ /*packed*/ class MRect rectHelicopterCurrentFundsTitle; // 0x10 bytes
	/*+0x20e*/ /*packed*/ class MRect rectHelicopterItemCostTitle; // 0x10 bytes
	/*+0x21e*/ /*packed*/ class basic_string<char> sHelicopterHistoryTitle; // 0x8 bytes
	/*+0x226*/ /*packed*/ class basic_string<char> sHelicopterHistory; // 0x8 bytes
	/*+0x22e*/ /*packed*/ class basic_string<char> sHelicopterSpecialtiesTitle; // 0x8 bytes
	/*+0x236*/ /*packed*/ class basic_string<char> sHelicopterSpecialties; // 0x8 bytes
	/*+0x23e*/ /*packed*/ class basic_string<char> sHelicopterDescriptionTitle; // 0x8 bytes
	/*+0x246*/ /*packed*/ class basic_string<char> sHelicopterDescription; // 0x8 bytes
	/*+0x24e*/ /*packed*/ class basic_string<char> sHelicopterCurrentFundsTitle; // 0x8 bytes
	/*+0x256*/ /*packed*/ class basic_string<char> sHelicopterItemCostTitle; // 0x8 bytes
	/*+0x25e*/ /*packed*/ class MRect rectEquipmentCurrentFundsTitle; // 0x10 bytes
	/*+0x26e*/ /*packed*/ class MRect rectEquipmentItemCostTitle; // 0x10 bytes
	/*+0x27e*/ /*packed*/ class basic_string<char> sEquipmentTab; // 0x8 bytes
	/*+0x286*/ /*packed*/ class basic_string<char> sEquipmentDescriptionTitle; // 0x8 bytes
	/*+0x28e*/ /*packed*/ class basic_string<char> sEquipmentCurrentFundsTitle; // 0x8 bytes
	/*+0x296*/ /*packed*/ class basic_string<char> sEquipmentItemCostTitle; // 0x8 bytes
	/*+0x29e*/ /*packed*/ class basic_string<char> sEquipmentTitle; // 0x8 bytes
	/*+0x2a6*/ /*packed*/ class basic_string<char> sEquipmentAddress1; // 0x8 bytes
	/*+0x2ae*/ /*packed*/ class basic_string<char> sEquipmentAddress2; // 0x8 bytes
};

// Type: int32_t;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: /*packed*/ class Random;
class Random{ // packed(0xe4 bytes) TI: 0x20ab
public:
	void Random(unsigned long);
	unsigned long operator()(unsigned long);
	void seed(unsigned long);
protected:
	/*+0x0*/   unsigned long table[55]; // 0xdc bytes
	/*+0xdc*/  uint32_t index1;
	/*+0xe0*/  uint32_t index2;
};

// Type: void;

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: /*packed*/ struct tagUserPersonalInfo (forward reference);
struct tagUserPersonalInfo{ // packed(0x58 bytes) TI: 0x1a2a
	/*+0x0*/   char szUserName[64]; // 0x40 bytes
	/*+0x40*/  long lMoney;
	/*+0x44*/  long lHelicopters;
	/*+0x48*/  long lEquipment;
	/*+0x4c*/  long lTrophies;
	/*+0x50*/  long lPoints;
	/*+0x54*/  long lTeargasCount;
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char;

// Type: /*unpacked*/ class CBackBuffer (forward reference);
// CBackBuffer Class implementation not found

// Type: unsigned long;

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: void * __ptr32;

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: uint32_t;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};



// Contribution: 1:00073960-0007a5d0 Module: 34, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00474960
void CatalogWindow::CatalogWindow(int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0x8*/   int32_t i;
	/*bp-0xec*/  /*packed*/ class Random tempRandom; // 0xe4 bytes


	__asm        jmp    _T1b;
_T1b:
	__asm        jmp    _T20;
_T20:
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    _T49;
_T49:
	__asm        mov    dword ptr [ebp-0xFC], 0;
	__asm        mov    dword ptr [ebp-0xF8], 0;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    _T7a;
_T7a:
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        jmp    _Ta1;
_Ta1:
	this->rectTabs.left = 0x50;
	this->rectTabs.top = 0x1a4;
	this->rectTabs.right = 0x226;
	this->rectTabs.bottom = 0x1cc;
	__asm        jmp    _Tdd;
_Tdd:
	__asm        jmp    _Te2;
_Te2:
	this->ptHelicopterMainGraphic.x = 0x3c;
	this->ptHelicopterMainGraphic.y = 0x42;
	__asm        jmp    _T107;
_T107:
	__asm        mov    dword ptr [ebp-0x110], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x98;
	__asm        mov    [ebp-0x114], eax;
_T122:
	__asm        dec    dword ptr [ebp-0x110];
	__asm        js     _T145;

	__asm        mov    ecx, [ebp-0x114];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x114], 8;
	__asm        jmp    _T122;
_T145:
	__asm        jmp    _T14a;
_T14a:
	__asm        mov    dword ptr [ebp-0x118], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-0x11C], eax;
_T165:
	__asm        dec    dword ptr [ebp-0x118];
	__asm        js     _T188;

	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x11C], 8;
	__asm        jmp    _T165;
_T188:
	__asm        jmp    _T18d;
_T18d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD4;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14E], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x15C], eax;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     _T1fc;

	__asm        push   0x599884;
	__asm        mov    ecx, [ebp-0x15C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], eax;
	__asm        jmp    _T20c;
_T1fc:
	this->sCurrentFunds.reference = 0x0;
_T20c:
	this->sCurrentFunds.c_str_ptr = 0x0;
	__asm        jmp    _T221;
_T221:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x160], eax;
	__asm        cmp    dword ptr [ebp-0x160], 0;
	__asm        je     _T25f;

	__asm        push   0x599894;
	__asm        mov    ecx, [ebp-0x160];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x162], eax;
	__asm        jmp    _T26f;
_T25f:
	this->sItemCost.reference = 0x0;
_T26f:
	this->sItemCost.c_str_ptr = 0x0;
	__asm        jmp    _T284;
_T284:
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, SZ_CATALOG_WINDOW_TEXT_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x166;
	__asm        call   MFont::MFont;
	__asm        jmp    _T2a8;
_T2a8:
	this->rectHistoryText.left = 0x46;
	this->rectHistoryText.top = 0x140;
	this->rectHistoryText.right = 0x138;
	this->rectHistoryText.bottom = 0x168;
	__asm        jmp    _T2ed;
_T2ed:
	__asm        jmp    _T2f2;
_T2f2:
	this->rectSpecialtiesText.left = 0x46;
	this->rectSpecialtiesText.top = 0x176;
	this->rectSpecialtiesText.right = 0xc28;
	this->rectSpecialtiesText.bottom = 0x19a;
	__asm        jmp    _T337;
_T337:
	__asm        jmp    _T33c;
_T33c:
	this->rectDescriptionText.left = 0x14e;
	this->rectDescriptionText.top = 0x140;
	this->rectDescriptionText.right = 0x24e;
	this->rectDescriptionText.bottom = 0x19a;
	__asm        jmp    _T381;
_T381:
	__asm        jmp    _T386;
_T386:
	__asm        jmp    _T38b;
_T38b:
	this->buttonWindowBuy = 0x0;
	this->buttonWindowSell = 0x0;
	this->buttonWindowDone = 0x0;
	__asm        jmp    _T3c0;
_T3c0:
	this->rectHelicopterHistoryTitle.left = 0x4a;
	this->rectHelicopterHistoryTitle.top = 0x12e;
	this->rectHelicopterHistoryTitle.right = 0x138;
	this->rectHelicopterHistoryTitle.bottom = 0x140;
	__asm        jmp    _T405;
_T405:
	__asm        jmp    _T40a;
_T40a:
	this->rectHelicopterSpecialtiesTitle.left = 0x4a;
	this->rectHelicopterSpecialtiesTitle.top = 0x166;
	this->rectHelicopterSpecialtiesTitle.right = 0x138;
	this->rectHelicopterSpecialtiesTitle.bottom = 0x178;
	__asm        jmp    _T44f;
_T44f:
	__asm        jmp    _T454;
_T454:
	this->rectHelicopterDescriptionTitle.left = 0x150;
	this->rectHelicopterDescriptionTitle.top = 0x12e;
	this->rectHelicopterDescriptionTitle.right = 0x24e;
	this->rectHelicopterDescriptionTitle.bottom = 0x140;
	__asm        jmp    _T499;
_T499:
	__asm        jmp    _T49e;
_T49e:
	this->rectHelicopterCurrentFundsTitle.left = 0x200;
	this->rectHelicopterCurrentFundsTitle.top = 0x48;
	this->rectHelicopterCurrentFundsTitle.right = 0x24e;
	this->rectHelicopterCurrentFundsTitle.bottom = 0x6a;
	__asm        jmp    _T4e3;
_T4e3:
	__asm        jmp    _T4e8;
_T4e8:
	this->rectHelicopterItemCostTitle.left = 0x200;
	this->rectHelicopterItemCostTitle.top = 0x8c;
	this->rectHelicopterItemCostTitle.right = 0x24e;
	this->rectHelicopterItemCostTitle.bottom = 0xb2;
	__asm        jmp    _T52d;
_T52d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T59e;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T587;
_T587:
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x222], eax;
	__asm        jmp    _T5ae;
_T59e:
	this->sHelicopterHistoryTitle.reference = 0x0;
_T5ae:
	this->sHelicopterHistoryTitle.c_str_ptr = 0x0;
	__asm        jmp    _T5c3;
_T5c3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x124], eax;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T634;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x124];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T61d;
_T61d:
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x22A], eax;
	__asm        jmp    _T644;
_T634:
	this->sHelicopterHistory.reference = 0x0;
_T644:
	this->sHelicopterHistory.c_str_ptr = 0x0;
	__asm        jmp    _T659;
_T659:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _T6ca;

	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T6b3;
_T6b3:
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x232], eax;
	__asm        jmp    _T6da;
_T6ca:
	this->sHelicopterSpecialtiesTitle.reference = 0x0;
_T6da:
	this->sHelicopterSpecialtiesTitle.c_str_ptr = 0x0;
	__asm        jmp    _T6ef;
_T6ef:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     _T760;

	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x12C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T749;
_T749:
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x23A], eax;
	__asm        jmp    _T770;
_T760:
	this->sHelicopterSpecialties.reference = 0x0;
_T770:
	this->sHelicopterSpecialties.c_str_ptr = 0x0;
	__asm        jmp    _T785;
_T785:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _T7f6;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T7df;
_T7df:
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x242], eax;
	__asm        jmp    _T806;
_T7f6:
	this->sHelicopterDescriptionTitle.reference = 0x0;
_T806:
	this->sHelicopterDescriptionTitle.c_str_ptr = 0x0;
	__asm        jmp    _T81b;
_T81b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x134], eax;
	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     _T88c;

	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T875;
_T875:
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24A], eax;
	__asm        jmp    _T89c;
_T88c:
	this->sHelicopterDescription.reference = 0x0;
_T89c:
	this->sHelicopterDescription.c_str_ptr = 0x0;
	__asm        jmp    _T8b1;
_T8b1:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T922;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T90b;
_T90b:
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x252], eax;
	__asm        jmp    _T932;
_T922:
	this->sHelicopterCurrentFundsTitle.reference = 0x0;
_T932:
	this->sHelicopterCurrentFundsTitle.c_str_ptr = 0x0;
	__asm        jmp    _T947;
_T947:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _T9b8;

	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T9a1;
_T9a1:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x25A], eax;
	__asm        jmp    _T9c8;
_T9b8:
	this->sHelicopterItemCostTitle.reference = 0x0;
_T9c8:
	this->sHelicopterItemCostTitle.c_str_ptr = 0x0;
	__asm        jmp    _T9dd;
_T9dd:
	__asm        jmp    _T9e2;
_T9e2:
	__asm        jmp    _T9e7;
_T9e7:
	__asm        jmp    _T9ec;
_T9ec:
	__asm        jmp    _T9f1;
_T9f1:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _Ta62;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Ta4b;
_Ta4b:
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x282], eax;
	__asm        jmp    _Ta72;
_Ta62:
	this->sEquipmentTab.reference = 0x0;
_Ta72:
	this->sEquipmentTab.c_str_ptr = 0x0;
	__asm        jmp    _Ta87;
_Ta87:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     _Taf8;

	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tae1;
_Tae1:
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28A], eax;
	__asm        jmp    _Tb08;
_Taf8:
	this->sEquipmentDescriptionTitle.reference = 0x0;
_Tb08:
	this->sEquipmentDescriptionTitle.c_str_ptr = 0x0;
	__asm        jmp    _Tb1d;
_Tb1d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _Tb8e;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tb77;
_Tb77:
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x292], eax;
	__asm        jmp    _Tb9e;
_Tb8e:
	this->sEquipmentCurrentFundsTitle.reference = 0x0;
_Tb9e:
	this->sEquipmentCurrentFundsTitle.c_str_ptr = 0x0;
	__asm        jmp    _Tbb3;
_Tbb3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14C], eax;
	__asm        cmp    dword ptr [ebp-0x14C], 0;
	__asm        je     _Tc24;

	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tc0d;
_Tc0d:
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x29A], eax;
	__asm        jmp    _Tc34;
_Tc24:
	this->sEquipmentItemCostTitle.reference = 0x0;
_Tc34:
	this->sEquipmentItemCostTitle.c_str_ptr = 0x0;
	__asm        jmp    _Tc49;
_Tc49:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Tcba;

	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x150];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tca3;
_Tca3:
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A2], eax;
	__asm        jmp    _Tcca;
_Tcba:
	this->sEquipmentTitle.reference = 0x0;
_Tcca:
	this->sEquipmentTitle.c_str_ptr = 0x0;
	__asm        jmp    _Tcdf;
_Tcdf:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x154], eax;
	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _Td50;

	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Td39;
_Td39:
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2AA], eax;
	__asm        jmp    _Td60;
_Td50:
	this->sEquipmentAddress1.reference = 0x0;
_Td60:
	this->sEquipmentAddress1.c_str_ptr = 0x0;
	__asm        jmp    _Td75;
_Td75:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _Tde6;

	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tdcf;
_Tdcf:
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2B2], eax;
	__asm        jmp    _Tdf6;
_Tde6:
	this->sEquipmentAddress2.reference = 0x0;
_Tdf6:
	this->sEquipmentAddress2.c_str_ptr = 0x0;
	__asm        jmp    _Te0b;
_Te0b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590CE8;
	__asm        call   clock;
	__asm        mov    [ebp-0x100], eax;
// LINE 66:
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::seed;
	__asm        jmp    _Te39;
_Te39:
	__asm        mov    eax, SZ_CATALOG_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x104], eax;
// LINE 70:
	__asm        jmp    _Te49;
_Te49:
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Te73;
// LINE 74:
_Te73:
	__asm        jmp    _Te78;
_Te78:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Teac;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    _Tebb;

	__asm        jmp    _Tebb;
_Teac:
	__asm        mov    dword ptr [ebp-0x108], 0;
	__asm        jmp    _Tebb;
_Tebb:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998A4;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 75:
	__asm        jmp    _Teda;
_Teda:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf0e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    _Tf1d;

	__asm        jmp    _Tf1d;
_Tf0e:
	__asm        mov    dword ptr [ebp-0x10C], 0;
	__asm        jmp    _Tf1d;
_Tf1d:
	__asm        push   0;
	__asm        push   0x5998A8;
	__asm        mov    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 77:
	i = 0x0;
	__asm        jmp    _Tf42;
_Tf3f:
	i++;
_Tf42:
	__asm        cmp    i, 3;
	__asm        jge    _Tfb4;
// LINE 78:
	__asm        push   9;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x8C], eax;
// LINE 79:
	__asm        push   0x1A6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x98], eax;
// LINE 80:
	__asm        push   0xE6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x42;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x9C], eax;
// LINE 81:
	__asm        jmp    _Tf3f;
// LINE 82:
_Tfb4:
	i = 0x0;
	__asm        jmp    _Tfc3;
_Tfc0:
	i++;
_Tfc3:
	__asm        cmp    i, 3;
	__asm        jge    _T1035;
// LINE 83:
	__asm        push   9;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0xB0], eax;
// LINE 84:
	__asm        push   0x1A6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0xBC], eax;
// LINE 85:
	__asm        push   0xE6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x42;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0xC0], eax;
// LINE 86:
	__asm        jmp    _Tfc0;
// LINE 87:
_T1035:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1ae);
// LINE 88:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        cmp    dword ptr [ebp-0x116C], 0;
	__asm        jne    _T1106;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        jmp    _T10a6;
_T10a6:
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T10d3;
_T10d3:
	__asm        jmp    _T10d8;
_T10d8:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1101;
_T1101:
	__asm        jmp    _T113d;
_T1106:
	__asm        jmp    _T110b;
_T110b:
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1138;
_T1138:
	__asm        jmp    _T113d;
// LINE 89:
_T113d:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1af);
// LINE 90:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2170], eax;
	__asm        cmp    dword ptr [ebp-0x2170], 0;
	__asm        jne    _T120e;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2170], eax;
	__asm        jmp    _T11ae;
_T11ae:
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T11db;
_T11db:
	__asm        jmp    _T11e0;
_T11e0:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1209;
_T1209:
	__asm        jmp    _T1245;
_T120e:
	__asm        jmp    _T1213;
_T1213:
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1240;
_T1240:
	__asm        jmp    _T1245;
// LINE 91:
_T1245:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b0);
// LINE 92:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3174], eax;
	__asm        cmp    dword ptr [ebp-0x3174], 0;
	__asm        jne    _T1316;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3174], eax;
	__asm        jmp    _T12b6;
_T12b6:
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T12e3;
_T12e3:
	__asm        jmp    _T12e8;
_T12e8:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1311;
_T1311:
	__asm        jmp    _T134d;
_T1316:
	__asm        jmp    _T131b;
_T131b:
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1348;
_T1348:
	__asm        jmp    _T134d;
// LINE 93:
_T134d:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b1);
// LINE 94:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4178], eax;
	__asm        cmp    dword ptr [ebp-0x4178], 0;
	__asm        jne    _T141e;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4178], eax;
	__asm        jmp    _T13be;
_T13be:
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T13eb;
_T13eb:
	__asm        jmp    _T13f0;
_T13f0:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1419;
_T1419:
	__asm        jmp    _T1455;
_T141e:
	__asm        jmp    _T1423;
_T1423:
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1450;
_T1450:
	__asm        jmp    _T1455;
// LINE 95:
_T1455:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b2);
// LINE 96:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x256;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 97:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b3);
// LINE 98:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x27E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 99:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b4);
// LINE 100:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x286;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 101:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b5);
// LINE 102:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x28E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 103:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b6);
// LINE 104:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x296;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 105:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b7);
// LINE 106:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x29E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 107:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b8);
// LINE 108:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2A6;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 109:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1b9);
// LINE 110:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2AE;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 112:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CreateImage;
// LINE 113:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 114:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeModal;
	__asm        add    esp, 4;
// LINE 115:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 116:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00475f4d
void CatalogWindow::~CatalogWindow() {

	this-><CatalogWindow+0x00> = 0x590ce8;
// LINE 123:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 124:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveFocus;
	__asm        add    esp, 4;
// LINE 125:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveModal;
	__asm        add    esp, 4;
// LINE 126:
	__asm        jmp    _T4c;
_T4c:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2AE;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2AE], 0;
	__asm        je     _T91;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2AE];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T91:
	__asm        jmp    _T96;
_T96:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2A6;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A6], 0;
	__asm        je     _Tdb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A6];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x29E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x29E], 0;
	__asm        je     _T125;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29E];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T125:
	__asm        jmp    _T12a;
_T12a:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x296;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x296], 0;
	__asm        je     _T16f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x296];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T16f:
	__asm        jmp    _T174;
_T174:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x28E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28E], 0;
	__asm        je     _T1b9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28E];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b9:
	__asm        jmp    _T1be;
_T1be:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x286;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x286], 0;
	__asm        je     _T203;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x286];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T203:
	__asm        jmp    _T208;
_T208:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x27E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x27E], 0;
	__asm        je     _T24d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x27E];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T24d:
	__asm        jmp    _T252;
_T252:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x256;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x256], 0;
	__asm        je     _T297;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x256];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24E], 0;
	__asm        je     _T2e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24E];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e1:
	__asm        jmp    _T2e6;
_T2e6:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x246], 0;
	__asm        je     _T32b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x246];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T32b:
	__asm        jmp    _T330;
_T330:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x23E], 0;
	__asm        je     _T375;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23E];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T375:
	__asm        jmp    _T37a;
_T37a:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x236], 0;
	__asm        je     _T3bf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x236];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3bf:
	__asm        jmp    _T3c4;
_T3c4:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x22E], 0;
	__asm        je     _T409;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22E];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T409:
	__asm        jmp    _T40e;
_T40e:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x226], 0;
	__asm        je     _T453;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x226];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T453:
	__asm        jmp    _T458;
_T458:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x21E], 0;
	__asm        je     _T49d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x21E];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49d:
	__asm        jmp    _T4a2;
_T4a2:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x166;
	__asm        call   MFont::~MFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T515;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T515;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T515;
_T515:
	__asm        jmp    _T51a;
_T51a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        je     _T54e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15E];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T54e:
	__asm        jmp    _T553;
_T553:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x156;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        je     _T5a4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5a4:
	return;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD4;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00476517
int32_t CatalogWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes

// LINE 134:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T5b;
_T5b:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T6d;
_T66:
	sText.reference = 0x0;
_T6d:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T79;
// LINE 136:
_T79:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 139:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tf9;

	__asm        jmp    _Ta3;
_Ta3:
	__asm        mov    dword ptr [ebp-0x20], 0x1FC;
	__asm        mov    dword ptr [ebp-0x1C], 0xCE;
	__asm        mov    dword ptr [ebp-0x18], 0x1FE;
	__asm        mov    dword ptr [ebp-0x14], 0xD0;
	__asm        jmp    _Tc4;
_Tc4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C2], eax;
	__asm        jmp    _T109;
_Tf9:
	this->buttonWindowBuy = 0x0;
// LINE 140:
_T109:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1ba);
// LINE 141:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        cmp    dword ptr [ebp-0x1064], 0;
	__asm        jne    _T1c8;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        jmp    _T17a;
_T17a:
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T19e;
_T19e:
	__asm        jmp    _T1a3;
_T1a3:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T1c3;
_T1c3:
	__asm        jmp    _T1f6;
_T1c8:
	__asm        jmp    _T1cd;
_T1cd:
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1f1;
_T1f1:
	__asm        jmp    _T1f6;
// LINE 142:
_T1f6:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x48];
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+4];
// LINE 146:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T2a9;

	__asm        jmp    _T253;
_T253:
	__asm        mov    dword ptr [ebp-0x34], 0x1FC;
	__asm        mov    dword ptr [ebp-0x30], 0xEC;
	__asm        mov    dword ptr [ebp-0x2C], 0x1FE;
	__asm        mov    dword ptr [ebp-0x28], 0xEE;
	__asm        jmp    _T274;
_T274:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C6], eax;
	__asm        jmp    _T2b9;
_T2a9:
	this->buttonWindowSell = 0x0;
// LINE 147:
_T2b9:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1bb);
// LINE 148:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2068], eax;
	__asm        cmp    dword ptr [ebp-0x2068], 0;
	__asm        jne    _T378;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2068], eax;
	__asm        jmp    _T32a;
_T32a:
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T34e;
_T34e:
	__asm        jmp    _T353;
_T353:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T373;
_T373:
	__asm        jmp    _T4c8;
_T378:
	__asm        jmp    _T37d;
_T37d:
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x207C], eax;
	__asm        cmp    dword ptr [ebp-0x207C], 0xFFFFFFFF;
	__asm        jne    _T3d7;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2078], eax;
	__asm        mov    eax, [ebp-0x2078];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3c8;
_T3c8:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3d7;
_T3d7:
	__asm        jmp    _T3dc;
_T3dc:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T40d;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        je     _T46e;

	__asm        jmp    _T3fb;
_T3fb:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x207C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T46e;
_T40d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2070], eax;
	__asm        cmp    dword ptr [ebp-0x2070], 0;
	__asm        je     _T44e;

	__asm        mov    eax, [ebp-0x207C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2070];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x206C], eax;
	__asm        jmp    _T458;
_T44e:
	__asm        mov    dword ptr [ebp-0x206C], 0;
_T458:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x206C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T4ad;
_T46e:
	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        je     _T4ad;

	__asm        jmp    _T480;
_T480:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2074], eax;
	__asm        mov    eax, [ebp-0x207C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4ad;
_T4ad:
	__asm        mov    eax, [ebp-0x207C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4be;
_T4be:
	__asm        jmp    _T4c3;
_T4c3:
	__asm        jmp    _T4c8;
// LINE 149:
_T4c8:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x48];
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+4];
// LINE 153:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T57b;

	__asm        jmp    _T525;
_T525:
	__asm        mov    dword ptr [ebp-0x48], 0x1FC;
	__asm        mov    dword ptr [ebp-0x44], 0x10A;
	__asm        mov    dword ptr [ebp-0x40], 0x1FE;
	__asm        mov    dword ptr [ebp-0x3C], 0x10C;
	__asm        jmp    _T546;
_T546:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1CA], eax;
	__asm        jmp    _T58b;
_T57b:
	this->buttonWindowDone = 0x0;
// LINE 154:
_T58b:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x1bc);
// LINE 155:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3080], eax;
	__asm        cmp    dword ptr [ebp-0x3080], 0;
	__asm        jne    _T64a;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3080], eax;
	__asm        jmp    _T5fc;
_T5fc:
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T620;
_T620:
	__asm        jmp    _T625;
_T625:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T645;
_T645:
	__asm        jmp    _T678;
_T64a:
	__asm        jmp    _T64f;
_T64f:
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T673;
_T673:
	__asm        jmp    _T678;
// LINE 156:
_T678:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x48];
// LINE 157:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+4];
// LINE 159:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 160:
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T714;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T714;

	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T6fe;
_T6fe:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T70f;
_T70f:
	__asm        jmp    _T714;
_T714:
	__asm        jmp    _T719;
_T719:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T73b;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T73b:
	__asm        jmp    _T740;
_T740:
	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    __RETURN;
// LINE 161:
__RETURN:
}

// FUNCTION: COPTER_D 0x00476c64
void CatalogWindow::SwitchGraphicsForTab(long lNewTab) {
	/*bp-0x104*/ char szFilePath[260]; // 0x104 bytes
	/*bp-0x154*/ /*packed*/ class MRect rectEquipmentDescriptionTitles[5]; // 0x50 bytes
	/*bp-0x17c*/ /*packed*/ class basic_string<char> sEquipmentDescriptions[5]; // 0x28 bytes
	/*bp-0x180*/ int32_t nFullStringID;
	/*bp-0x188*/ /*packed*/ class basic_string<char> sTempTabFileName; // 0x8 bytes
	/*bp-0x190*/ /*packed*/ class basic_string<char> sTempTabFilePath; // 0x8 bytes
	/*bp-0x1a0*/ /*packed*/ class MRect rectFundsText; // 0x10 bytes
	/*bp-0x1f0*/ /*packed*/ class MRect rectEquipmentDescriptions[5]; // 0x50 bytes
	/*bp-0x1f4*/ int32_t i;
	/*bp-0x1fc*/ /*packed*/ class basic_string<char> sTempMainGraphicFileName; // 0x8 bytes
	/*bp-0x200*/ /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;
	/*bp-0x208*/ /*packed*/ class basic_string<char> sTempMainGraphicFilePath; // 0x8 bytes

// LINE 168:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E0], eax;
	__asm        cmp    dword ptr [ebp-0x8E0], 0;
	__asm        je     _T81;

	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    sTempMainGraphicFilePath.reference, eax;
	__asm        jmp    _T8b;
_T81:
	sTempMainGraphicFilePath.reference = 0x0;
_T8b:
	sTempMainGraphicFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T9a;
// LINE 169:
_T9a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E4], eax;
	__asm        cmp    dword ptr [ebp-0x8E4], 0;
	__asm        je     _T105;

	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tf4;
_Tf4:
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    sTempTabFilePath.reference, eax;
	__asm        jmp    _T10f;
_T105:
	sTempTabFilePath.reference = 0x0;
_T10f:
	sTempTabFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T11e;
// LINE 170:
_T11e:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E8], eax;
	__asm        cmp    dword ptr [ebp-0x8E8], 0;
	__asm        je     _T189;

	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T178;
_T178:
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    sTempMainGraphicFileName.reference, eax;
	__asm        jmp    _T193;
_T189:
	sTempMainGraphicFileName.reference = 0x0;
_T193:
	sTempMainGraphicFileName.c_str_ptr = 0x0;
	__asm        jmp    _T1a2;
// LINE 171:
_T1a2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8EC], eax;
	__asm        cmp    dword ptr [ebp-0x8EC], 0;
	__asm        je     _T20d;

	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8EC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1fc;
_T1fc:
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    sTempTabFileName.reference, eax;
	__asm        jmp    _T217;
_T20d:
	sTempTabFileName.reference = 0x0;
_T217:
	sTempTabFileName.c_str_ptr = 0x0;
	__asm        jmp    _T226;
_T226:
	__asm        mov    dword ptr [ebp-0x8C8], 5;
	__asm        lea    eax, sEquipmentDescriptions[0].c_str_ptr;
	__asm        mov    [ebp-0x8CC], eax;
// LINE 175:
_T23c:
	__asm        dec    dword ptr [ebp-0x8C8];
	__asm        js     _T25f;

	__asm        mov    ecx, [ebp-0x8CC];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x8CC], 8;
	__asm        jmp    _T23c;
_T25f:
	__asm        jmp    _T264;
_T264:
	__asm        mov    dword ptr [ebp-0x8D0], 5;
	__asm        lea    eax, rectEquipmentDescriptions[0].left;
	__asm        mov    [ebp-0x8D4], eax;
// LINE 176:
_T27a:
	__asm        dec    dword ptr [ebp-0x8D0];
	__asm        js     _T29d;

	__asm        mov    ecx, [ebp-0x8D4];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x8D4], 0x10;
	__asm        jmp    _T27a;
_T29d:
	__asm        jmp    _T2a2;
_T2a2:
	__asm        mov    dword ptr [ebp-0x8D8], 5;
	__asm        lea    eax, rectEquipmentDescriptionTitles[0].left;
	__asm        mov    [ebp-0x8DC], eax;
// LINE 177:
_T2b8:
	__asm        dec    dword ptr [ebp-0x8D8];
	__asm        js     _T2db;

	__asm        mov    ecx, [ebp-0x8DC];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x8DC], 0x10;
	__asm        jmp    _T2b8;
_T2db:
	__asm        jmp    _T2e0;
// LINE 178:
_T2e0:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 179:
	__asm        jmp    _T2f0;
_T2f0:
	__asm        jmp    _T2f5;
// LINE 181:
_T2f5:
	__asm        mov    byte ptr [ebp-0x810], 0x2F;
	__asm        mov    byte ptr [ebp-0x80F], 0x2F;
	__asm        mov    byte ptr [ebp-0x80E], 0x2F;
	__asm        jmp    _T30f;
_T30f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x8C4], eax;
	__asm        mov    eax, [ebp-0x810];
	__asm        mov    ecx, [ebp-0x8C4];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T332;
// LINE 182:
_T332:
	__asm        cmp    lNewTab, 0;
	__asm        jl     _T1a43;

	__asm        cmp    lNewTab, 7;
	__asm        jg     _T1a43;
// LINE 184:
// Block start:
	/*bp-0x33c*/ /*unpacked*/ class CBackBuffer tempTabBuffer;
	/*bp-0x470*/ /*unpacked*/ class CBackBuffer tempHelicopterBuffer;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T3a2;
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x818], eax;
	__asm        mov    eax, [ebp-0x818];
	__asm        mov    [ebp-0x814], eax;
	__asm        cmp    dword ptr [ebp-0x814], 0;
	__asm        je     _T3a2;

	__asm        mov    ecx, [ebp-0x814];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x814];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T39d;
_T39d:
	__asm        jmp    _T3a2;
// LINE 186:
_T3a2:
	__asm        mov    eax, SZ_CATALOG_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x84C], eax;
	__asm        jmp    _T3b2;
_T3b2:
	__asm        mov    eax, [ebp-0x84C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T3dc;
// LINE 187:
_T3dc:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T403;
// LINE 188:
_T403:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x81C], eax;
	__asm        cmp    dword ptr [ebp-0x81C], 0;
	__asm        je     _T59d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T45d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x49B8], eax;
	__asm        mov    eax, [ebp-0x49B8];
	__asm        mov    [ebp-0x49C0], eax;
	__asm        mov    eax, [ebp-0x49C0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T45d:
	__asm        jmp    _T462;
_T462:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T486;
_T486:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T523;

	__asm        jmp    _T49e;
_T49e:
	__asm        jmp    _T4a3;
_T4a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4d1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49CC], eax;
	__asm        jmp    _T4e0;

	__asm        jmp    _T4e0;
_T4d1:
	__asm        mov    dword ptr [ebp-0x49CC], 0;
	__asm        jmp    _T4e0;
_T4e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x49D0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x49D4], eax;
	__asm        mov    eax, [ebp-0x49D0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49CC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49D4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T523;
_T523:
	__asm        jmp    _T528;
_T528:
	__asm        mov    byte ptr [ebp-0x49BC], 0;
	__asm        jmp    _T534;
_T534:
	__asm        lea    eax, [ebp-0x49BC];
	__asm        mov    [ebp-0x49C4], eax;
	__asm        jmp    _T545;
_T545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x49C8], eax;
	__asm        mov    eax, [ebp-0x49C4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x49C8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T575;
_T575:
	__asm        jmp    _T57a;
_T57a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x81C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T5aa;
_T59d:
	this-><CatalogWindow+0x40> = 0x0;
// LINE 190:
_T5aa:
	this->lCurrentTab = lNewTab;
// LINE 191:
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetCurrentGraphicsFileNames;
// LINE 192:
	__asm        lea    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T5f3;
// LINE 193:
_T5f3:
	__asm        lea    eax, sTempTabFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T614;
// LINE 195:
_T614:
	__asm        cmp    sTempMainGraphicFilePath.c_str_ptr, 0;
	__asm        je     _T648;

	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49D8], eax;
	__asm        mov    eax, [ebp-0x49D8];
	__asm        mov    [ebp-0x49E0], eax;
	__asm        mov    eax, [ebp-0x49E0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T648:
	__asm        jmp    _T64d;
_T64d:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sTempMainGraphicFilePath.c_str_ptr, eax;
	__asm        jmp    _T66b;
_T66b:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6f9;

	__asm        jmp    _T680;
_T680:
	__asm        jmp    _T685;
_T685:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6ad;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49EC], eax;
	__asm        jmp    _T6bc;

	__asm        jmp    _T6bc;
_T6ad:
	__asm        mov    dword ptr [ebp-0x49EC], 0;
	__asm        jmp    _T6bc;
_T6bc:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x49F0], eax;
	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49F4], eax;
	__asm        mov    eax, [ebp-0x49F0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49EC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49F4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T6f9;
_T6f9:
	__asm        jmp    _T6fe;
_T6fe:
	__asm        mov    byte ptr [ebp-0x49DC], 0;
	__asm        jmp    _T70a;
_T70a:
	__asm        lea    eax, [ebp-0x49DC];
	__asm        mov    [ebp-0x49E4], eax;
	__asm        jmp    _T71b;
_T71b:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49E8], eax;
	__asm        mov    eax, [ebp-0x49E4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x49E8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T745;
_T745:
	__asm        jmp    _T74a;
_T74a:
	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 196:
	__asm        cmp    sTempTabFilePath.c_str_ptr, 0;
	__asm        je     _T790;

	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49F8], eax;
	__asm        mov    eax, [ebp-0x49F8];
	__asm        mov    [ebp-0x4A00], eax;
	__asm        mov    eax, [ebp-0x4A00];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T790:
	__asm        jmp    _T795;
_T795:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sTempTabFilePath.c_str_ptr, eax;
	__asm        jmp    _T7b3;
_T7b3:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T841;

	__asm        jmp    _T7c8;
_T7c8:
	__asm        jmp    _T7cd;
_T7cd:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T7f5;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A0C], eax;
	__asm        jmp    _T804;

	__asm        jmp    _T804;
_T7f5:
	__asm        mov    dword ptr [ebp-0x4A0C], 0;
	__asm        jmp    _T804;
_T804:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A10], eax;
	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x4A14], eax;
	__asm        mov    eax, [ebp-0x4A10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A0C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A14];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T841;
_T841:
	__asm        jmp    _T846;
_T846:
	__asm        mov    byte ptr [ebp-0x49FC], 0;
	__asm        jmp    _T852;
_T852:
	__asm        lea    eax, [ebp-0x49FC];
	__asm        mov    [ebp-0x4A04], eax;
	__asm        jmp    _T863;
_T863:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x4A08], eax;
	__asm        mov    eax, [ebp-0x4A04];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A08];
	__asm        mov    [ecx], al;
	__asm        jmp    _T88d;
_T88d:
	__asm        jmp    _T892;
_T892:
	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 199:
	__asm        jmp    _T8a9;
_T8a9:
	__asm        jmp    _T8ae;
_T8ae:
	__asm        mov    eax, [ebp-0x464];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x468];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 202:
	__asm        jmp    _T8f4;
_T8f4:
	__asm        jmp    _T8f9;
_T8f9:
	__asm        mov    eax, [ebp-0x330];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x334];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 205:
	nFullStringID = LanguageManager::GetFullStringID(0x0, (this->lCurrentTab + 0x1cc));
// LINE 206:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1958], eax;
	__asm        cmp    dword ptr [ebp-0x1958], 0;
	__asm        jne    _Ta1b;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1958], eax;
	__asm        jmp    _T9bb;
_T9bb:
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T9e8;
_T9e8:
	__asm        jmp    _T9ed;
_T9ed:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Ta16;
_Ta16:
	__asm        jmp    _Tba1;
_Ta1b:
	__asm        jmp    _Ta20;
_Ta20:
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x196C], eax;
	__asm        cmp    dword ptr [ebp-0x196C], 0xFFFFFFFF;
	__asm        jne    _Ta7a;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1968], eax;
	__asm        mov    eax, [ebp-0x1968];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Ta6b;
_Ta6b:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Ta7a;
_Ta7a:
	__asm        jmp    _Ta7f;
_Ta7f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tac2;

	__asm        cmp    dword ptr [ebp-0x196C], 0;
	__asm        je     _Tb35;

	__asm        jmp    _Taa7;
_Taa7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    ecx, [ebp-0x196C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tb35;
_Tac2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1960], eax;
	__asm        cmp    dword ptr [ebp-0x1960], 0;
	__asm        je     _Tb03;

	__asm        mov    eax, [ebp-0x196C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1960];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x195C], eax;
	__asm        jmp    _Tb0d;
_Tb03:
	__asm        mov    dword ptr [ebp-0x195C], 0;
_Tb0d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x195C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x22A], eax;
	__asm        jmp    _Tb7d;
_Tb35:
	__asm        cmp    dword ptr [ebp-0x196C], 0;
	__asm        je     _Tb7d;

	__asm        jmp    _Tb47;
_Tb47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1964], eax;
	__asm        mov    eax, [ebp-0x196C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1964];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tb7d;
_Tb7d:
	__asm        mov    eax, [ebp-0x196C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x22A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tb97;
_Tb97:
	__asm        jmp    _Tb9c;
_Tb9c:
	__asm        jmp    _Tba1;
// LINE 207:
_Tba1:
	nFullStringID = LanguageManager::GetFullStringID(0x0, (this->lCurrentTab + 0x1d6));
// LINE 208:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2970], eax;
	__asm        cmp    dword ptr [ebp-0x2970], 0;
	__asm        jne    _Tc88;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2970], eax;
	__asm        jmp    _Tc28;
_Tc28:
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Tc55;
_Tc55:
	__asm        jmp    _Tc5a;
_Tc5a:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Tc83;
_Tc83:
	__asm        jmp    _Te0e;
_Tc88:
	__asm        jmp    _Tc8d;
_Tc8d:
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2984], eax;
	__asm        cmp    dword ptr [ebp-0x2984], 0xFFFFFFFF;
	__asm        jne    _Tce7;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2980], eax;
	__asm        mov    eax, [ebp-0x2980];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tcd8;
_Tcd8:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tce7;
_Tce7:
	__asm        jmp    _Tcec;
_Tcec:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Td2f;

	__asm        cmp    dword ptr [ebp-0x2984], 0;
	__asm        je     _Tda2;

	__asm        jmp    _Td14;
_Td14:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    ecx, [ebp-0x2984];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tda2;
_Td2f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2978], eax;
	__asm        cmp    dword ptr [ebp-0x2978], 0;
	__asm        je     _Td70;

	__asm        mov    eax, [ebp-0x2984];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2978];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2974], eax;
	__asm        jmp    _Td7a;
_Td70:
	__asm        mov    dword ptr [ebp-0x2974], 0;
_Td7a:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x23A], eax;
	__asm        jmp    _Tdea;
_Tda2:
	__asm        cmp    dword ptr [ebp-0x2984], 0;
	__asm        je     _Tdea;

	__asm        jmp    _Tdb4;
_Tdb4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x297C], eax;
	__asm        mov    eax, [ebp-0x2984];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x297C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tdea;
_Tdea:
	__asm        mov    eax, [ebp-0x2984];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x23A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Te04;
_Te04:
	__asm        jmp    _Te09;
_Te09:
	__asm        jmp    _Te0e;
// LINE 209:
_Te0e:
	nFullStringID = LanguageManager::GetFullStringID(0x0, (this->lCurrentTab + 0x1e0));
// LINE 210:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3988], eax;
	__asm        cmp    dword ptr [ebp-0x3988], 0;
	__asm        jne    _Tef5;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3988], eax;
	__asm        jmp    _Te95;
_Te95:
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Tec2;
_Tec2:
	__asm        jmp    _Tec7;
_Tec7:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Tef0;
_Tef0:
	__asm        jmp    _T107b;
_Tef5:
	__asm        jmp    _Tefa;
_Tefa:
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x399C], eax;
	__asm        cmp    dword ptr [ebp-0x399C], 0xFFFFFFFF;
	__asm        jne    _Tf54;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3998], eax;
	__asm        mov    eax, [ebp-0x3998];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tf45;
_Tf45:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tf54;
_Tf54:
	__asm        jmp    _Tf59;
_Tf59:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tf9c;

	__asm        cmp    dword ptr [ebp-0x399C], 0;
	__asm        je     _T100f;

	__asm        jmp    _Tf81;
_Tf81:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    ecx, [ebp-0x399C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T100f;
_Tf9c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3990], eax;
	__asm        cmp    dword ptr [ebp-0x3990], 0;
	__asm        je     _Tfdd;

	__asm        mov    eax, [ebp-0x399C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3990];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x398C], eax;
	__asm        jmp    _Tfe7;
_Tfdd:
	__asm        mov    dword ptr [ebp-0x398C], 0;
_Tfe7:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x398C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24A], eax;
	__asm        jmp    _T1057;
_T100f:
	__asm        cmp    dword ptr [ebp-0x399C], 0;
	__asm        je     _T1057;

	__asm        jmp    _T1021;
_T1021:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3994], eax;
	__asm        mov    eax, [ebp-0x399C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3994];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1057;
_T1057:
	__asm        mov    eax, [ebp-0x399C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1071;
_T1071:
	__asm        jmp    _T1076;
_T1076:
	__asm        jmp    _T107b;
// LINE 213:
_T107b:
	__asm        jmp    _T1080;
_T1080:
	__asm        jmp    _T1085;
_T1085:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10b9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x854], eax;
	__asm        jmp    _T10c8;

	__asm        jmp    _T10c8;
_T10b9:
	__asm        mov    dword ptr [ebp-0x854], 0;
	__asm        jmp    _T10c8;
_T10c8:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1CE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x854];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 215:
	__asm        jmp    _T1115;
_T1115:
	__asm        jmp    _T111a;
_T111a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T114e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x858], eax;
	__asm        jmp    _T115d;

	__asm        jmp    _T115d;
_T114e:
	__asm        mov    dword ptr [ebp-0x858], 0;
	__asm        jmp    _T115d;
_T115d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x182;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x858];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 218:
	__asm        jmp    _T11aa;
_T11aa:
	__asm        jmp    _T11af;
_T11af:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T11e3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x85C], eax;
	__asm        jmp    _T11f2;

	__asm        jmp    _T11f2;
_T11e3:
	__asm        mov    dword ptr [ebp-0x85C], 0;
	__asm        jmp    _T11f2;
_T11f2:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1DE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x85C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 220:
	__asm        jmp    _T123f;
_T123f:
	__asm        jmp    _T1244;
_T1244:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1278;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x860], eax;
	__asm        jmp    _T1287;

	__asm        jmp    _T1287;
_T1278:
	__asm        mov    dword ptr [ebp-0x860], 0;
	__asm        jmp    _T1287;
_T1287:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x192;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x860];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 223:
	__asm        jmp    _T12d4;
_T12d4:
	__asm        jmp    _T12d9;
_T12d9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T130d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x864], eax;
	__asm        jmp    _T131c;

	__asm        jmp    _T131c;
_T130d:
	__asm        mov    dword ptr [ebp-0x864], 0;
	__asm        jmp    _T131c;
_T131c:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1EE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x864];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 225:
	__asm        jmp    _T1369;
_T1369:
	__asm        jmp    _T136e;
_T136e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13a2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x868], eax;
	__asm        jmp    _T13b1;

	__asm        jmp    _T13b1;
_T13a2:
	__asm        mov    dword ptr [ebp-0x868], 0;
	__asm        jmp    _T13b1;
_T13b1:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1A2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x868];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 228:
	__asm        jmp    _T13fe;
_T13fe:
	__asm        jmp    _T1403;
_T1403:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1437;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x86C], eax;
	__asm        jmp    _T1446;

	__asm        jmp    _T1446;
_T1437:
	__asm        mov    dword ptr [ebp-0x86C], 0;
	__asm        jmp    _T1446;
_T1446:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1FE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x86C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 229:
	rectFundsText.left = 0x206;
	rectFundsText.top = 0x6a;
	rectFundsText.right = 0x250;
	rectFundsText.bottom = 0x86;
	__asm        jmp    _T14bb;
// LINE 230:
_T14bb:
	__asm        jmp    _T14c0;
_T14c0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T14f4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x870], eax;
	__asm        jmp    _T1503;

	__asm        jmp    _T1503;
_T14f4:
	__asm        mov    dword ptr [ebp-0x870], 0;
	__asm        jmp    _T1503;
_T1503:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998AC;
	__asm        mov    eax, [ebp-0x870];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 232:
	__asm        jmp    _T1522;
_T1522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1556;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x874], eax;
	__asm        jmp    _T1565;

	__asm        jmp    _T1565;
_T1556:
	__asm        mov    dword ptr [ebp-0x874], 0;
	__asm        jmp    _T1565;
_T1565:
	__asm        jmp    _T156a;
_T156a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T159e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x878], eax;
	__asm        jmp    _T15ad;

	__asm        jmp    _T15ad;
_T159e:
	__asm        mov    dword ptr [ebp-0x878], 0;
	__asm        jmp    _T15ad;
_T15ad:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, rectFundsText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x874];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x878];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 236:
	__asm        jmp    _T15f5;
_T15f5:
	__asm        jmp    _T15fa;
_T15fa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T162e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x87C], eax;
	__asm        jmp    _T163d;

	__asm        jmp    _T163d;
_T162e:
	__asm        mov    dword ptr [ebp-0x87C], 0;
	__asm        jmp    _T163d;
_T163d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x87C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 237:
	this->rectCostText.left = 0x206;
	this->rectCostText.top = 0xb0;
	this->rectCostText.right = 0x250;
	this->rectCostText.bottom = 0xcc;
	__asm        jmp    _T16ca;
// LINE 238:
_T16ca:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x44], ebx;
	__asm        je     _T177d;
// LINE 241:
	__asm        jmp    _T16ff;
_T16ff:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1733;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x880], eax;
	__asm        jmp    _T1742;

	__asm        jmp    _T1742;
_T1733:
	__asm        mov    dword ptr [ebp-0x880], 0;
	__asm        jmp    _T1742;
_T1742:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B0;
	__asm        mov    eax, [ebp-0x880];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 243:
	__asm        jmp    _T17fb;
// LINE 244:
_T177d:
	__asm        jmp    _T1782;
_T1782:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17b6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x884], eax;
	__asm        jmp    _T17c5;

	__asm        jmp    _T17c5;
_T17b6:
	__asm        mov    dword ptr [ebp-0x884], 0;
	__asm        jmp    _T17c5;
_T17c5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B4;
	__asm        mov    eax, [ebp-0x884];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 247:
_T17fb:
	__asm        jmp    _T1800;
_T1800:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1834;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x888], eax;
	__asm        jmp    _T1843;

	__asm        jmp    _T1843;
_T1834:
	__asm        mov    dword ptr [ebp-0x888], 0;
	__asm        jmp    _T1843;
_T1843:
	__asm        jmp    _T1848;
_T1848:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T187c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88C], eax;
	__asm        jmp    _T188b;

	__asm        jmp    _T188b;
_T187c:
	__asm        mov    dword ptr [ebp-0x88C], 0;
	__asm        jmp    _T188b;
_T188b:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x888];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 250:
	__asm        jmp    _T18d8;
_T18d8:
	__asm        jmp    _T18dd;
_T18dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1911;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x890], eax;
	__asm        jmp    _T1920;

	__asm        jmp    _T1920;
_T1911:
	__asm        mov    dword ptr [ebp-0x890], 0;
	__asm        jmp    _T1920;
_T1920:
	__asm        jmp    _T1925;
_T1925:
	__asm        mov    dword ptr [ebp-0x82C], 0x8E;
	__asm        mov    dword ptr [ebp-0x828], 0x1BA;
	__asm        mov    dword ptr [ebp-0x824], 0x133;
	__asm        mov    dword ptr [ebp-0x820], 0x1C7;
	__asm        jmp    _T1952;
_T1952:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x82C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x890];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 262:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C2], 0;
	__asm        je     _T1a28;
// LINE 263:
	__asm        push   0xCE;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x34];
// LINE 264:
	__asm        push   0xEC;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x34];
// LINE 265:
	__asm        push   0x10A;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x34];
// LINE 266:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 268:
_T1a28:
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 269:
// Block end:
	__asm        jmp    _T2b1e;
// LINE 271:
// Block start:
	/*bp-0x5a4*/ /*unpacked*/ class CBackBuffer tempTabBuffer;
_T1a43:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T1a9f;
// LINE 272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x834], eax;
	__asm        mov    eax, [ebp-0x834];
	__asm        mov    [ebp-0x830], eax;
	__asm        cmp    dword ptr [ebp-0x830], 0;
	__asm        je     _T1a9f;

	__asm        mov    ecx, [ebp-0x830];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x830];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1a9a;
_T1a9a:
	__asm        jmp    _T1a9f;
// LINE 273:
_T1a9f:
	__asm        mov    eax, SZ_CATALOG_EQUIPMENT_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x850], eax;
	__asm        jmp    _T1aaf;
_T1aaf:
	__asm        mov    eax, [ebp-0x850];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x850];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T1ad9;
// LINE 274:
_T1ad9:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T1b00;
// LINE 275:
_T1b00:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x838], eax;
	__asm        cmp    dword ptr [ebp-0x838], 0;
	__asm        je     _T1c9a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1b5a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A18], eax;
	__asm        mov    eax, [ebp-0x4A18];
	__asm        mov    [ebp-0x4A20], eax;
	__asm        mov    eax, [ebp-0x4A20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b5a:
	__asm        jmp    _T1b5f;
_T1b5f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T1b83;
_T1b83:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c20;

	__asm        jmp    _T1b9b;
_T1b9b:
	__asm        jmp    _T1ba0;
_T1ba0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1bce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A2C], eax;
	__asm        jmp    _T1bdd;

	__asm        jmp    _T1bdd;
_T1bce:
	__asm        mov    dword ptr [ebp-0x4A2C], 0;
	__asm        jmp    _T1bdd;
_T1bdd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A34], eax;
	__asm        mov    eax, [ebp-0x4A30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1c20;
_T1c20:
	__asm        jmp    _T1c25;
_T1c25:
	__asm        mov    byte ptr [ebp-0x4A1C], 0;
	__asm        jmp    _T1c31;
_T1c31:
	__asm        lea    eax, [ebp-0x4A1C];
	__asm        mov    [ebp-0x4A24], eax;
	__asm        jmp    _T1c42;
_T1c42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x4A28], eax;
	__asm        mov    eax, [ebp-0x4A24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A28];
	__asm        mov    [ecx], al;
	__asm        jmp    _T1c72;
_T1c72:
	__asm        jmp    _T1c77;
_T1c77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x838];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T1ca7;
_T1c9a:
	this-><CatalogWindow+0x40> = 0x0;
// LINE 277:
_T1ca7:
	this->lCurrentTab = lNewTab;
// LINE 278:
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetCurrentGraphicsFileNames;
// LINE 279:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T1cf3;
// LINE 280:
_T1cf3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1d2d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A38], eax;
	__asm        mov    eax, [ebp-0x4A38];
	__asm        mov    [ebp-0x4A40], eax;
	__asm        mov    eax, [ebp-0x4A40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1d2d:
	__asm        jmp    _T1d32;
_T1d32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T1d56;
_T1d56:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1df3;

	__asm        jmp    _T1d6e;
_T1d6e:
	__asm        jmp    _T1d73;
_T1d73:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1da1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A4C], eax;
	__asm        jmp    _T1db0;

	__asm        jmp    _T1db0;
_T1da1:
	__asm        mov    dword ptr [ebp-0x4A4C], 0;
	__asm        jmp    _T1db0;
_T1db0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A54], eax;
	__asm        mov    eax, [ebp-0x4A50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1df3;
_T1df3:
	__asm        jmp    _T1df8;
_T1df8:
	__asm        mov    byte ptr [ebp-0x4A3C], 0;
	__asm        jmp    _T1e04;
_T1e04:
	__asm        lea    eax, [ebp-0x4A3C];
	__asm        mov    [ebp-0x4A44], eax;
	__asm        jmp    _T1e15;
_T1e15:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x4A48], eax;
	__asm        mov    eax, [ebp-0x4A44];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A48];
	__asm        mov    [ecx], al;
	__asm        jmp    _T1e45;
_T1e45:
	__asm        jmp    _T1e4a;
_T1e4a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 283:
	__asm        jmp    _T1e64;
_T1e64:
	__asm        jmp    _T1e69;
_T1e69:
	__asm        mov    eax, [ebp-0x598];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x59C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 285:
	rectEquipmentDescriptionTitles[0].left = 0xa2;
	rectEquipmentDescriptionTitles[0].top = 0x62;
	rectEquipmentDescriptionTitles[0].right = 0x144;
	rectEquipmentDescriptionTitles[0].bottom = 0x70;
	__asm        jmp    _T1ed1;
// LINE 286:
_T1ed1:
	rectEquipmentDescriptionTitles[1].left = 0xa2;
	rectEquipmentDescriptionTitles[1].top = 0xcf;
	rectEquipmentDescriptionTitles[1].right = 0x144;
	rectEquipmentDescriptionTitles[1].bottom = 0xde;
	__asm        jmp    _T1efe;
// LINE 287:
_T1efe:
	rectEquipmentDescriptionTitles[2].left = 0xa2;
	rectEquipmentDescriptionTitles[2].top = 0x136;
	rectEquipmentDescriptionTitles[2].right = 0x144;
	rectEquipmentDescriptionTitles[2].bottom = 0x144;
	__asm        jmp    _T1f2b;
// LINE 288:
_T1f2b:
	rectEquipmentDescriptionTitles[3].left = 0x1b6;
	rectEquipmentDescriptionTitles[3].top = 0x62;
	rectEquipmentDescriptionTitles[3].right = 0x24a;
	rectEquipmentDescriptionTitles[3].bottom = 0x70;
	__asm        jmp    _T1f58;
// LINE 289:
_T1f58:
	rectEquipmentDescriptionTitles[4].left = 0x1b6;
	rectEquipmentDescriptionTitles[4].top = 0xcf;
	rectEquipmentDescriptionTitles[4].right = 0x24a;
	rectEquipmentDescriptionTitles[4].bottom = 0xde;
	__asm        jmp    _T1f85;
// LINE 290:
_T1f85:
	i = 0x0;
	__asm        jmp    _T1f9a;
_T1f94:
	i++;
_T1f9a:
	__asm        cmp    i, 5;
	__asm        jge    _T2046;
// LINE 293:
	__asm        jmp    _T1fac;
_T1fac:
	__asm        jmp    _T1fb1;
_T1fb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1fe5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x894], eax;
	__asm        jmp    _T1ff4;

	__asm        jmp    _T1ff4;
_T1fe5:
	__asm        mov    dword ptr [ebp-0x894], 0;
	__asm        jmp    _T1ff4;
_T1ff4:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        lea    eax, [ebp+eax-0x154];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x894];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 294:
	__asm        jmp    _T1f94;
// LINE 295:
_T2046:
	rectEquipmentDescriptions[0].left = 0xa6;
	rectEquipmentDescriptions[0].top = 0x72;
	rectEquipmentDescriptions[0].right = 0x148;
	rectEquipmentDescriptions[0].bottom = 0xb8;
	__asm        jmp    _T2073;
// LINE 296:
_T2073:
	rectEquipmentDescriptions[1].left = 0xa6;
	rectEquipmentDescriptions[1].top = 0xdc;
	rectEquipmentDescriptions[1].right = 0x148;
	rectEquipmentDescriptions[1].bottom = 0x122;
	__asm        jmp    _T20a0;
// LINE 297:
_T20a0:
	rectEquipmentDescriptions[2].left = 0xa6;
	rectEquipmentDescriptions[2].top = 0x146;
	rectEquipmentDescriptions[2].right = 0x148;
	rectEquipmentDescriptions[2].bottom = 0x18e;
	__asm        jmp    _T20cd;
// LINE 298:
_T20cd:
	rectEquipmentDescriptions[3].left = 0x1b8;
	rectEquipmentDescriptions[3].top = 0x72;
	rectEquipmentDescriptions[3].right = 0x24c;
	rectEquipmentDescriptions[3].bottom = 0xb8;
	__asm        jmp    _T20fa;
// LINE 299:
_T20fa:
	rectEquipmentDescriptions[4].left = 0x1b8;
	rectEquipmentDescriptions[4].top = 0xdc;
	rectEquipmentDescriptions[4].right = 0x24c;
	rectEquipmentDescriptions[4].bottom = 0x122;
	__asm        jmp    _T2127;
// LINE 300:
_T2127:
	i = 0x0;
	__asm        jmp    _T213c;
_T2136:
	i++;
_T213c:
	__asm        cmp    i, 5;
	__asm        jge    _T245a;
// LINE 301:
	nFullStringID = LanguageManager::GetFullStringID(0x0, (i + 0x1ea));
// LINE 302:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x49A0], eax;
	__asm        cmp    dword ptr [ebp-0x49A0], 0;
	__asm        jne    _T222c;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x49A0], eax;
	__asm        jmp    _T21ca;
_T21ca:
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T21f8;
_T21f8:
	__asm        jmp    _T21fd;
_T21fd:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T2227;
_T2227:
	__asm        jmp    _T23b8;
_T222c:
	__asm        jmp    _T2231;
_T2231:
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x49B4], eax;
	__asm        cmp    dword ptr [ebp-0x49B4], 0xFFFFFFFF;
	__asm        jne    _T228b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x49B0], eax;
	__asm        mov    eax, [ebp-0x49B0];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T227c;
_T227c:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T228b;
_T228b:
	__asm        jmp    _T2290;
_T2290:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T22d5;

	__asm        cmp    dword ptr [ebp-0x49B4], 0;
	__asm        je     _T234a;

	__asm        jmp    _T22b9;
_T22b9:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    ecx, [ebp-0x49B4];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T234a;
_T22d5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x49A8], eax;
	__asm        cmp    dword ptr [ebp-0x49A8], 0;
	__asm        je     _T2316;

	__asm        mov    eax, [ebp-0x49B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x49A8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x49A4], eax;
	__asm        jmp    _T2320;
_T2316:
	__asm        mov    dword ptr [ebp-0x49A4], 0;
_T2320:
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x49A4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*8-0x178], eax;
	__asm        jmp    _T2393;
_T234a:
	__asm        cmp    dword ptr [ebp-0x49B4], 0;
	__asm        je     _T2393;

	__asm        jmp    _T235c;
_T235c:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49AC], eax;
	__asm        mov    eax, [ebp-0x49B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49AC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2393;
_T2393:
	__asm        mov    eax, [ebp-0x49B4];
	__asm        mov    ecx, i;
	__asm        mov    ecx, [ebp+ecx*8-0x178];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T23ae;
_T23ae:
	__asm        jmp    _T23b3;
_T23b3:
	__asm        jmp    _T23b8;
// LINE 306:
_T23b8:
	__asm        jmp    _T23bd;
_T23bd:
	__asm        jmp    _T23c2;
_T23c2:
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T23f8;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x898], eax;
	__asm        jmp    _T2407;

	__asm        jmp    _T2407;
_T23f8:
	__asm        mov    dword ptr [ebp-0x898], 0;
	__asm        jmp    _T2407;
_T2407:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        lea    eax, [ebp+eax-0x1F0];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x898];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 307:
	__asm        jmp    _T2136;
// LINE 309:
_T245a:
	this->rectEquipmentCurrentFundsTitle.left = 0x152;
	this->rectEquipmentCurrentFundsTitle.top = 0x13a;
	this->rectEquipmentCurrentFundsTitle.right = 0x1ca;
	this->rectEquipmentCurrentFundsTitle.bottom = 0x14c;
	__asm        jmp    _T249f;
// LINE 312:
_T249f:
	__asm        jmp    _T24a4;
_T24a4:
	__asm        jmp    _T24a9;
_T24a9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T24dd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x89C], eax;
	__asm        jmp    _T24ec;

	__asm        jmp    _T24ec;
_T24dd:
	__asm        mov    dword ptr [ebp-0x89C], 0;
	__asm        jmp    _T24ec;
_T24ec:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x25E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x89C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 315:
	this->rectEquipmentItemCostTitle.left = 0x152;
	this->rectEquipmentItemCostTitle.top = 0x14a;
	this->rectEquipmentItemCostTitle.right = 0x1ca;
	this->rectEquipmentItemCostTitle.bottom = 0x156;
	__asm        jmp    _T2579;
// LINE 318:
_T2579:
	__asm        jmp    _T257e;
_T257e:
	__asm        jmp    _T2583;
_T2583:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T25b7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A0], eax;
	__asm        jmp    _T25c6;

	__asm        jmp    _T25c6;
_T25b7:
	__asm        mov    dword ptr [ebp-0x8A0], 0;
	__asm        jmp    _T25c6;
_T25c6:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x26E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8A0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 319:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _T26c1;
// LINE 322:
	__asm        jmp    _T2643;
_T2643:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2677;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A4], eax;
	__asm        jmp    _T2686;

	__asm        jmp    _T2686;
_T2677:
	__asm        mov    dword ptr [ebp-0x8A4], 0;
	__asm        jmp    _T2686;
_T2686:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B8;
	__asm        mov    eax, [ebp-0x8A4];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 324:
	__asm        jmp    _T273f;
// LINE 325:
_T26c1:
	__asm        jmp    _T26c6;
_T26c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T26fa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A8], eax;
	__asm        jmp    _T2709;

	__asm        jmp    _T2709;
_T26fa:
	__asm        mov    dword ptr [ebp-0x8A8], 0;
	__asm        jmp    _T2709;
_T2709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998BC;
	__asm        mov    eax, [ebp-0x8A8];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 327:
_T273f:
	this->rectCostText.left = 0x1cc;
	this->rectCostText.top = 0x14a;
	this->rectCostText.right = 0x244;
	this->rectCostText.bottom = 0x15a;
	__asm        jmp    _T2784;
// LINE 329:
_T2784:
	__asm        jmp    _T2789;
_T2789:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T27bd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8AC], eax;
	__asm        jmp    _T27cc;

	__asm        jmp    _T27cc;
_T27bd:
	__asm        mov    dword ptr [ebp-0x8AC], 0;
	__asm        jmp    _T27cc;
_T27cc:
	__asm        jmp    _T27d1;
_T27d1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2805;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B0], eax;
	__asm        jmp    _T2814;

	__asm        jmp    _T2814;
_T2805:
	__asm        mov    dword ptr [ebp-0x8B0], 0;
	__asm        jmp    _T2814;
_T2814:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x8AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8B0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 331:
	rectFundsText.left = 0x1cc;
	rectFundsText.top = 0x13a;
	rectFundsText.right = 0x244;
	rectFundsText.bottom = 0x14c;
	__asm        jmp    _T2889;
// LINE 332:
_T2889:
	__asm        jmp    _T288e;
_T288e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T28c2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B4], eax;
	__asm        jmp    _T28d1;

	__asm        jmp    _T28d1;
_T28c2:
	__asm        mov    dword ptr [ebp-0x8B4], 0;
	__asm        jmp    _T28d1;
_T28d1:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998C0;
	__asm        mov    eax, [ebp-0x8B4];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 334:
	__asm        jmp    _T28f0;
_T28f0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2924;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B8], eax;
	__asm        jmp    _T2933;

	__asm        jmp    _T2933;
_T2924:
	__asm        mov    dword ptr [ebp-0x8B8], 0;
	__asm        jmp    _T2933;
_T2933:
	__asm        jmp    _T2938;
_T2938:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T296c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8BC], eax;
	__asm        jmp    _T297b;

	__asm        jmp    _T297b;
_T296c:
	__asm        mov    dword ptr [ebp-0x8BC], 0;
	__asm        jmp    _T297b;
_T297b:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, rectFundsText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x8B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8BC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 337:
	__asm        jmp    _T29c3;
_T29c3:
	__asm        jmp    _T29c8;
_T29c8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T29fc;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C0], eax;
	__asm        jmp    _T2a0b;

	__asm        jmp    _T2a0b;
_T29fc:
	__asm        mov    dword ptr [ebp-0x8C0], 0;
	__asm        jmp    _T2a0b;
_T2a0b:
	__asm        jmp    _T2a10;
_T2a10:
	__asm        mov    dword ptr [ebp-0x848], 0x8E;
	__asm        mov    dword ptr [ebp-0x844], 0x1BA;
	__asm        mov    dword ptr [ebp-0x840], 0x133;
	__asm        mov    dword ptr [ebp-0x83C], 0x1C7;
	__asm        jmp    _T2a3d;
_T2a3d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x848];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C2], 0;
	__asm        je     _T2b13;
// LINE 357:
	__asm        push   0x15C;
	__asm        push   0x152;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x34];
// LINE 358:
	__asm        push   0x17A;
	__asm        push   0x152;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x34];
// LINE 359:
	__asm        push   0x168;
	__asm        push   0x1F0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x34];
// LINE 360:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 362:
_T2b13:
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 365:
// Block end:
_T2b1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesTabHaveAnyStains;
	__asm        test   eax, eax;
	__asm        je     _T2c2c;
// LINE 366:
// Block start:
	/*bp-0x6d8*/ /*unpacked*/ class CBackBuffer tempStainImage;
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_STAIN_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 367:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 368:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::SetTransparentColor;
// LINE 369:
	i = 0x0;
	__asm        jmp    _T2b91;
_T2b8b:
	i++;
_T2b91:
	__asm        cmp    i, 3;
	__asm        jge    _T2c21;
// LINE 370:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x14E];
	__asm        cmp    [ecx+eax*4+0x8C], edx;
	__asm        jne    _T2c1c;
// LINE 372:
	__asm        jmp    _T2bc8;
_T2bc8:
	__asm        jmp    _T2bcd;
_T2bcd:
	__asm        mov    eax, [ebp-0x6CC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6D0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x9C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 374:
_T2c1c:
	__asm        jmp    _T2b8b;
// LINE 375:
_T2c21:
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 376:
// Block end:
_T2c2c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesTabHaveAnyPaperClips;
	__asm        test   eax, eax;
	__asm        je     _T2d3a;
// LINE 377:
// Block start:
	/*bp-0x80c*/ /*unpacked*/ class CBackBuffer tempPaperClipImage;
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_PAPER_CLIP_IMAGEFILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 378:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 379:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::SetTransparentColor;
// LINE 380:
	i = 0x0;
	__asm        jmp    _T2c9f;
_T2c99:
	i++;
_T2c9f:
	__asm        cmp    i, 3;
	__asm        jge    _T2d2f;
// LINE 381:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x14E];
	__asm        cmp    [ecx+eax*4+0xB0], edx;
	__asm        jne    _T2d2a;
// LINE 383:
	__asm        jmp    _T2cd6;
_T2cd6:
	__asm        jmp    _T2cdb;
_T2cdb:
	__asm        mov    eax, [ebp-0x800];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x804];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0xC0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0xBC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 385:
_T2d2a:
	__asm        jmp    _T2c99;
// LINE 386:
_T2d2f:
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 387:
// Block end:
_T2d3a:
	__asm        mov    dword ptr [ebp-0x950], 5;
	__asm        lea    eax, sEquipmentDescriptions[0].c_str_ptr;
	__asm        mov    [ebp-0x954], eax;
	__asm        mov    eax, [ebp-0x950];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x954], eax;
_T2d5f:
	__asm        dec    dword ptr [ebp-0x950];
	__asm        js     _T2d82;

	__asm        sub    dword ptr [ebp-0x954], 8;
	__asm        mov    ecx, [ebp-0x954];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T2d5f;
_T2d82:
	__asm        jmp    _T2d87;
_T2d87:
	__asm        mov    eax, sTempTabFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempTabFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2e3a;

	__asm        mov    eax, sTempTabFileName.reference;
	__asm        mov    [ebp-0x8FC], eax;
	__asm        mov    eax, [ebp-0x8FC];
	__asm        mov    [ebp-0x8F8], eax;
	__asm        cmp    dword ptr [ebp-0x8F8], 0;
	__asm        je     _T2e3a;

	__asm        mov    eax, [ebp-0x8F8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2e17;

	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x900], eax;
	__asm        mov    eax, [ebp-0x900];
	__asm        mov    [ebp-0x904], eax;
	__asm        mov    eax, [ebp-0x904];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    dword ptr [eax], 0;
_T2e17:
	__asm        jmp    _T2e1c;
_T2e1c:
	__asm        jmp    _T2e21;
_T2e21:
	__asm        mov    eax, [ebp-0x8F8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2e35;
_T2e35:
	__asm        jmp    _T2e3a;
_T2e3a:
	__asm        jmp    _T2e3f;
_T2e3f:
	__asm        cmp    sTempTabFileName.c_str_ptr, 0;
	__asm        je     _T2e73;

	__asm        mov    eax, sTempTabFileName.c_str_ptr;
	__asm        mov    [ebp-0x8F0], eax;
	__asm        mov    eax, [ebp-0x8F0];
	__asm        mov    [ebp-0x8F4], eax;
	__asm        mov    eax, [ebp-0x8F4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e73:
	__asm        jmp    _T2e78;
_T2e78:
	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2f2b;

	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        mov    [ebp-0x914], eax;
	__asm        mov    eax, [ebp-0x914];
	__asm        mov    [ebp-0x910], eax;
	__asm        cmp    dword ptr [ebp-0x910], 0;
	__asm        je     _T2f2b;

	__asm        mov    eax, [ebp-0x910];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2f08;

	__asm        mov    eax, [ebp-0x910];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x918], eax;
	__asm        mov    eax, [ebp-0x918];
	__asm        mov    [ebp-0x91C], eax;
	__asm        mov    eax, [ebp-0x91C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x910];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x910];
	__asm        mov    dword ptr [eax], 0;
_T2f08:
	__asm        jmp    _T2f0d;
_T2f0d:
	__asm        jmp    _T2f12;
_T2f12:
	__asm        mov    eax, [ebp-0x910];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2f26;
_T2f26:
	__asm        jmp    _T2f2b;
_T2f2b:
	__asm        jmp    _T2f30;
_T2f30:
	__asm        cmp    sTempMainGraphicFileName.c_str_ptr, 0;
	__asm        je     _T2f64;

	__asm        mov    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        mov    [ebp-0x908], eax;
	__asm        mov    eax, [ebp-0x908];
	__asm        mov    [ebp-0x90C], eax;
	__asm        mov    eax, [ebp-0x90C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2f64:
	__asm        jmp    _T2f69;
_T2f69:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T301c;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    [ebp-0x92C], eax;
	__asm        mov    eax, [ebp-0x92C];
	__asm        mov    [ebp-0x928], eax;
	__asm        cmp    dword ptr [ebp-0x928], 0;
	__asm        je     _T301c;

	__asm        mov    eax, [ebp-0x928];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ff9;

	__asm        mov    eax, [ebp-0x928];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x930], eax;
	__asm        mov    eax, [ebp-0x930];
	__asm        mov    [ebp-0x934], eax;
	__asm        mov    eax, [ebp-0x934];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x928];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x928];
	__asm        mov    dword ptr [eax], 0;
_T2ff9:
	__asm        jmp    _T2ffe;
_T2ffe:
	__asm        jmp    _T3003;
_T3003:
	__asm        mov    eax, [ebp-0x928];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3017;
_T3017:
	__asm        jmp    _T301c;
_T301c:
	__asm        jmp    _T3021;
_T3021:
	__asm        cmp    sTempTabFilePath.c_str_ptr, 0;
	__asm        je     _T3055;

	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x920], eax;
	__asm        mov    eax, [ebp-0x920];
	__asm        mov    [ebp-0x924], eax;
	__asm        mov    eax, [ebp-0x924];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3055:
	__asm        jmp    _T305a;
_T305a:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T310d;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    [ebp-0x944], eax;
	__asm        mov    eax, [ebp-0x944];
	__asm        mov    [ebp-0x940], eax;
	__asm        cmp    dword ptr [ebp-0x940], 0;
	__asm        je     _T310d;

	__asm        mov    eax, [ebp-0x940];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T30ea;

	__asm        mov    eax, [ebp-0x940];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x948], eax;
	__asm        mov    eax, [ebp-0x948];
	__asm        mov    [ebp-0x94C], eax;
	__asm        mov    eax, [ebp-0x94C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x940];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x940];
	__asm        mov    dword ptr [eax], 0;
_T30ea:
	__asm        jmp    _T30ef;
_T30ef:
	__asm        jmp    _T30f4;
_T30f4:
	__asm        mov    eax, [ebp-0x940];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3108;
_T3108:
	__asm        jmp    _T310d;
_T310d:
	__asm        jmp    _T3112;
_T3112:
	__asm        cmp    sTempMainGraphicFilePath.c_str_ptr, 0;
	__asm        je     _T3146;

	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x938], eax;
	__asm        mov    eax, [ebp-0x938];
	__asm        mov    [ebp-0x93C], eax;
	__asm        mov    eax, [ebp-0x93C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3146:
	__asm        jmp    _T314b;
_T314b:
	return;
}

// FUNCTION: COPTER_D 0x00479dbb
void CatalogWindow::DrawCurrentEquipmentSelection() {
	/*bp-0x18*/  unsigned long lIndexArray[6]; // 0x18 bytes
	// StaticLocal: 0x00599834
	static int32_t nColorArrayCurrentIndex = 0;
	;
	/*bp-0x1c*/  const int32_t nColorArraySize;
	// StaticLocal: 0x00599838
	static int32_t nColorDirection = 1;
	;
	/*bp-0x2c*/  /*packed*/ class MRect rectOutline; // 0x10 bytes

// LINE 397:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 398:
_T1c:
	nColorArraySize = 0x6;
// LINE 399:
	lIndexArray[0] = 0x4f;
	lIndexArray[1] = 0x5b;
	lIndexArray[2] = 0x90;
	lIndexArray[3] = 0x54;
	lIndexArray[4] = 0x9f;
	lIndexArray[5] = 0xc7;
// LINE 404:
	nColorArrayCurrentIndex += nColorDirection;
// LINE 405:
	__asm        cmp    nColorArrayCurrentIndex, 5;
	__asm        je     _T72;

	__asm        cmp    nColorArrayCurrentIndex, 0;
	__asm        jne    _T7e;
// LINE 406:
_T72:
	__asm        mov    eax, nColorDirection;
	__asm        neg    eax;
	__asm        mov    nColorDirection, eax;
// LINE 407:
_T7e:
	__asm        mov    eax, nColorArrayCurrentIndex;
	__asm        mov    eax, [ebp+eax*4-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    _Ta4;
// LINE 409:
_Ta4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        je     _Tca;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 3;
	__asm        jne    _T1c5;
// LINE 411:
_Tca:
	rectOutline.left = 0x3d;
	rectOutline.top = 0x65;
	rectOutline.right = 0x140;
	rectOutline.bottom = 0xc3;
	__asm        jmp    _Teb;
_Teb:
	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x74], eax;
// LINE 414:
	__asm        jmp    _T108;
_T108:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T125;
_T125:
	__asm        push   3;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 415:
	rectOutline.left = 0x149;
	rectOutline.top = 0x65;
	rectOutline.right = 0x24e;
	rectOutline.bottom = 0xc3;
	__asm        jmp    _T163;
_T163:
	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x84], eax;
// LINE 418:
	__asm        jmp    _T183;
_T183:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T1a3;
_T1a3:
	__asm        push   3;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 421:
	__asm        jmp    _T26b;
_T1c5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 1;
	__asm        jne    _T1fe;
// LINE 422:
	rectOutline.left = 0x3d;
	rectOutline.top = 0xcf;
	rectOutline.right = 0x140;
	rectOutline.bottom = 0x12d;
	__asm        jmp    _T1f9;
// LINE 423:
_T1f9:
	__asm        jmp    _T26b;
_T1fe:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 2;
	__asm        jne    _T237;
// LINE 424:
	rectOutline.left = 0x3d;
	rectOutline.top = 0x137;
	rectOutline.right = 0x140;
	rectOutline.bottom = 0x199;
	__asm        jmp    _T232;
// LINE 425:
_T232:
	__asm        jmp    _T26b;
_T237:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 4;
	__asm        jne    _T26b;
// LINE 426:
	rectOutline.left = 0x149;
	rectOutline.top = 0xcf;
	rectOutline.right = 0x24e;
	rectOutline.bottom = 0x12d;
	__asm        jmp    _T26b;
// LINE 428:
_T26b:
	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x94], eax;
// LINE 430:
	__asm        jmp    _T294;
_T294:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T2bd;
_T2bd:
	__asm        push   3;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 431:
	return;
}

// FUNCTION: COPTER_D 0x0047a09f
void CatalogWindow::SetNewEquipmentSelection(long lNewEquipmentSelection) {
	/*bp-0x10*/  /*packed*/ class MRect rectFill; // 0x10 bytes
	/*bp-0x14*/  /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;

// LINE 443:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 444:
	__asm        jmp    _T19;
_T19:
	__asm        jmp    _T1e;
// LINE 446:
_T1e:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewEquipmentSelection;
	__asm        cmp    [eax+0x152], ecx;
	__asm        je     _T263;
// LINE 447:
	this->lCurrentEquipmentSelection = lNewEquipmentSelection;
// LINE 448:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _Td1;
// LINE 451:
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T93;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9f;

	__asm        jmp    _T9f;
_T93:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998C4;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 453:
	__asm        jmp    _T13a;
// LINE 454:
_Td1:
	__asm        jmp    _Td6;
_Td6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T101;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T10d;

	__asm        jmp    _T10d;
_T101:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T10d;
_T10d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998C8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 456:
_T13a:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        lea    ecx, rectFill.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 457:
	rectFill.bottom -= 0x2;
// LINE 458:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0x15;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 459:
	__asm        mov    byte ptr [ebp-0x18], 0x2F;
	__asm        mov    byte ptr [ebp-0x17], 0x2F;
	__asm        mov    byte ptr [ebp-0x16], 0x2F;
	__asm        jmp    _T187;
_T187:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T19e;
// LINE 461:
_T19e:
	__asm        jmp    _T1a3;
_T1a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1da;

	__asm        jmp    _T1da;
_T1ce:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T1da;
_T1da:
	__asm        jmp    _T1df;
_T1df:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T20a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T216;

	__asm        jmp    _T216;
_T20a:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T216;
_T216:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 464:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 466:
_T263:
	return;
}

// FUNCTION: COPTER_D 0x0047a30e
int32_t CatalogWindow::DoesTabHaveAnyStains(long lTab) {
	/*bp-0x4*/   int32_t i;

// LINE 477:
	i = 0x0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 3;
	__asm        jge    _T4a;
// LINE 478:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, lTab;
	__asm        cmp    [ecx+eax*4+0x8C], edx;
	__asm        jne    _T45;
// LINE 479:
	return 0x1;
// LINE 480:
_T45:
	__asm        jmp    _T18;
// LINE 481:
_T4a:
	return 0x0;
// LINE 482:
}

// FUNCTION: COPTER_D 0x0047a366
int32_t CatalogWindow::DoesTabHaveAnyPaperClips(long lTab) {
	/*bp-0x4*/   int32_t i;

// LINE 491:
	i = 0x0;
	__asm        jmp    _T1b;
_T18:
	i++;
_T1b:
	__asm        cmp    i, 3;
	__asm        jge    _T4a;
// LINE 492:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, lTab;
	__asm        cmp    [ecx+eax*4+0xB0], edx;
	__asm        jne    _T45;
// LINE 493:
	return 0x1;
// LINE 494:
_T45:
	__asm        jmp    _T18;
// LINE 495:
_T4a:
	return 0x0;
// LINE 496:
}

// FUNCTION: COPTER_D 0x0047a3be
void CatalogWindow::GetCurrentGraphicsFileNames(/*packed*/ class basic_string<char>& sMainGraphicFileName, /*packed*/ class basic_string<char>& sTabFileName) {
	/*bp-0x24*/  char * szHelicopterFileNames[9]; // 0x24 bytes
	/*bp-0x48*/  char * szTabFileNames[9]; // 0x24 bytes

// LINE 506:
	szHelicopterFileNames[0] = 0x5998cc;
	szHelicopterFileNames[1] = 0x5998dc;
	szHelicopterFileNames[2] = 0x5998e8;
	szHelicopterFileNames[3] = 0x5998f8;
// LINE 507:
	szHelicopterFileNames[4] = 0x599908;
	szHelicopterFileNames[5] = 0x599914;
	szHelicopterFileNames[6] = 0x599924;
	szHelicopterFileNames[7] = 0x599930;
	szHelicopterFileNames[8] = 0x59993c;
// LINE 509:
	szTabFileNames[0] = 0x599940;
	szTabFileNames[1] = 0x599950;
	szTabFileNames[2] = 0x599960;
	szTabFileNames[3] = 0x599970;
// LINE 510:
	__asm        mov    szTabFileNames[4], 0x599980;
	__asm        mov    szTabFileNames[5], 0x599990;
	__asm        mov    szTabFileNames[6], 0x5999A0;
	__asm        mov    szTabFileNames[7], 0x5999B0;
	__asm        mov    szTabFileNames[8], 0x5999C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        mov    eax, [ebp+eax*4-0x24];
	__asm        mov    [ebp-0x7C], eax;
// LINE 512:
	__asm        jmp    _Ta8;
_Ta8:
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0xFFFFFFFF;
	__asm        jne    _Tf3;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Te4;
_Te4:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tf3;
_Tf3:
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T129;

	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T2aa;

	__asm        jmp    _T117;
_T117:
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2aa;
_T129:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T204;

	__asm        cmp    dword ptr [ebp-0x78], 0xFFFFFFFF;
	__asm        jne    _T17c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16d;
_T16d:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e1;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1dc;
_T1dc:
	__asm        jmp    _T1ea;
_T1e1:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T1ea:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1f9;
_T1f9:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T20b;
_T204:
	__asm        mov    dword ptr [ebp-0x4C], 0;
_T20b:
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T297;

	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T297;

	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T277;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax], 0;
_T277:
	__asm        jmp    _T27c;
_T27c:
	__asm        jmp    _T281;
_T281:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T292;
_T292:
	__asm        jmp    _T297;
_T297:
	__asm        jmp    _T29c;
_T29c:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, sMainGraphicFileName;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2dd;
_T2aa:
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T2dd;

	__asm        jmp    _T2b9;
_T2b9:
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2dd;
_T2dd:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, sMainGraphicFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2ee;
_T2ee:
	__asm        jmp    _T2f3;
_T2f3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        mov    eax, [ebp+eax*4-0x48];
	__asm        mov    [ebp-0xB0], eax;
// LINE 513:
	__asm        jmp    _T30e;
_T30e:
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0xFFFFFFFF;
	__asm        jne    _T368;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T359;
_T359:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T368;
_T368:
	__asm        jmp    _T36d;
_T36d:
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3a4;

	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T58e;

	__asm        jmp    _T38f;
_T38f:
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T58e;
_T3a4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T4c1;

	__asm        cmp    dword ptr [ebp-0xAC], 0xFFFFFFFF;
	__asm        jne    _T406;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3f7;
_T3f7:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T406;
_T406:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T495;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T490;
_T490:
	__asm        jmp    _T4a1;
_T495:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax], 0;
_T4a1:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T4b3;
_T4b3:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T4c8;
_T4c1:
	__asm        mov    dword ptr [ebp-0x80], 0;
_T4c8:
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T57b;

	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T57b;

	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T558;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax], 0;
_T558:
	__asm        jmp    _T55d;
_T55d:
	__asm        jmp    _T562;
_T562:
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T576;
_T576:
	__asm        jmp    _T57b;
_T57b:
	__asm        jmp    _T580;
_T580:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, sTabFileName;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5d0;
_T58e:
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T5d0;

	__asm        jmp    _T5a0;
_T5a0:
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5d0;
_T5d0:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    ecx, sTabFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5e4;
_T5e4:
	__asm        jmp    _T5e9;
// LINE 514:
_T5e9:
	return;
}

// FUNCTION: COPTER_D 0x0047a9b3
int32_t CatalogWindow::ReadPalette(/*packed*/ struct SparkalColor *pColorTable) {
// LINE 522:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    _T6c;
_T6c:
	__asm        jmp    _T71;
_T71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Td5;
_Td5:
	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    _Tde;
_Tde:
	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
_T134:
_T136:
	return (CBackBuffer::GetPaletteFromImage(pColorTable, this-><CatalogWindow+0x64>) != 0x0);
// LINE 523:
}

// FUNCTION: COPTER_D 0x0047aaf5
int32_t CatalogWindow::CreateImage(int32_t __formal) {
// LINE 530:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 531:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 0xFFFFFFFF;
	__asm        jne    _T35;
// LINE 532:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 533:
	__asm        jmp    _T47;
// LINE 534:
_T35:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 535:
_T47:
	return this-><CatalogWindow+0x40>;
// LINE 536:
}

// FUNCTION: COPTER_D 0x0047ab4e
int32_t CatalogWindow::ComposeSelf() {
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::ComposeSelf;
// LINE 547:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T2c;
// LINE 548:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DrawCurrentEquipmentSelection;
// LINE 549:
_T2c:
	return 0x1;
// LINE 550:
}

// FUNCTION: COPTER_D 0x0047ab89
int32_t CatalogWindow::DoesCursorHitEquipmentSelection(long lXPosition, long lYPosition, long& lEquipment) {
	/*bp-0x50*/  const /*packed*/ class MRect rectEquipment[5]; // 0x50 bytes
	/*bp-0x54*/  int32_t i;

// LINE 560:
	__asm        jmp    _T11;
_T11:
	rectEquipment[0].left = 0x3a;
	rectEquipment[0].top = 0x62;
	rectEquipment[0].right = 0x146;
	rectEquipment[0].bottom = 0xc8;
	__asm        jmp    _T32;
_T32:
	__asm        jmp    _T37;
_T37:
	rectEquipment[1].left = 0x3a;
	rectEquipment[1].top = 0xcd;
	rectEquipment[1].right = 0x146;
	rectEquipment[1].bottom = 0x12f;
	__asm        jmp    _T58;
_T58:
	__asm        jmp    _T5d;
_T5d:
	rectEquipment[2].left = 0x3a;
	rectEquipment[2].top = 0x136;
	rectEquipment[2].right = 0x146;
	rectEquipment[2].bottom = 0x19a;
	__asm        jmp    _T7e;
// LINE 561:
_T7e:
	__asm        jmp    _T83;
_T83:
	rectEquipment[3].left = 0x148;
	rectEquipment[3].top = 0x62;
	rectEquipment[3].right = 0x250;
	rectEquipment[3].bottom = 0xc8;
	__asm        jmp    _Ta4;
_Ta4:
	__asm        jmp    _Ta9;
_Ta9:
	rectEquipment[4].left = 0x148;
	rectEquipment[4].top = 0xcd;
	rectEquipment[4].right = 0x250;
	rectEquipment[4].bottom = 0x12f;
	__asm        jmp    _Tca;
// LINE 563:
_Tca:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        je     _Te1;
// LINE 564:
	return 0x0;
// LINE 566:
_Te1:
	i = 0x0;
	__asm        jmp    _Tf0;
_Ted:
	i++;
_Tf0:
	__asm        cmp    i, 5;
	__asm        jge    _T176;
// LINE 567:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [ebp+eax-0x50], ecx;
	__asm        jg     _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [ebp+eax-0x4C], ecx;
	__asm        jg     _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [ebp+eax-0x48], ecx;
	__asm        jle    _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [ebp+eax-0x44], ecx;
	__asm        jle    _T14b;

	__asm        jmp    _T150;
_T14b:
	__asm        jmp    _T171;
_T150:
	__asm        jmp    _T15f;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T171;
// LINE 568:
_T15f:
	lEquipment. = i;
// LINE 569:
	return 0x1;
// LINE 571:
_T171:
	__asm        jmp    _Ted;
// LINE 572:
_T176:
	return 0x0;
// LINE 573:
}

// FUNCTION: COPTER_D 0x0047ad0d
int32_t CatalogWindow::DoesCursorHitTab(long lXPosition, long lYPosition, long& lTab) {
// LINE 581:
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T50;

	__asm        jmp    _T55;
_T50:
	__asm        jmp    _Tb3;
_T55:
	__asm        jmp    _T64;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tb3;
// LINE 582:
_T64:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x17;
	__asm        cmp    eax, lYPosition;
	__asm        jg     _T84;
// LINE 583:
	lTab. = 0x8;
// LINE 584:
	__asm        jmp    _Ta9;
// LINE 585:
_T84:
	__asm        jmp    _T89;
_T89:
	__asm        mov    eax, lXPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+0x74];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, lTab;
	__asm        mov    [ecx], eax;
// LINE 586:
_Ta9:
	return 0x1;
// LINE 588:
_Tb3:
	return 0x0;
// LINE 589:
}

// FUNCTION: COPTER_D 0x0047adce
long CatalogWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 600:
	__asm        cmp    lKey, 0x31;
	__asm        jl     _T2f;

	__asm        cmp    lKey, 0x39;
	__asm        jg     _T2f;
// LINE 601:
	__asm        mov    eax, lKey;
	__asm        sub    eax, 0x31;
	__asm        push   eax;
	__asm        call   S3HeliMakeHelicopter;
	__asm        add    esp, 4;
// LINE 608:
_T2f:
	return 0x1;
// LINE 609:
}

// FUNCTION: COPTER_D 0x0047ae0e
long CatalogWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	/*bp-0x4*/   long lTab;
	/*bp-0x8*/   long lEquipment;

// LINE 619:
	__asm        lea    eax, lTab;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesCursorHitTab;
	__asm        test   eax, eax;
	__asm        je     _T55;
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    ecx, lTab;
	__asm        cmp    [eax+0x14E], ecx;
	__asm        je     _T55;
// LINE 621:
	__asm        mov    eax, lTab;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 622:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 625:
_T55:
	__asm        lea    eax, lEquipment;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesCursorHitEquipmentSelection;
	__asm        test   eax, eax;
	__asm        je     _T7d;
// LINE 626:
	__asm        mov    eax, lEquipment;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetNewEquipmentSelection;
// LINE 627:
_T7d:
	return 0x1;
// LINE 628:
}

// FUNCTION: COPTER_D 0x0047ae9c
long CatalogWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 636:
	return 0x1;
// LINE 637:
}

// FUNCTION: COPTER_D 0x0047aeb9
long CatalogWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 646:
	return 0x1;
// LINE 647:
}

// FUNCTION: COPTER_D 0x0047aed6
void CatalogWindow::SetButtonStates() {
	/*bp-0x4*/   const /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;

// LINE 655:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 657:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T164;
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        cmp    eax, 3;
	__asm        jne    _Tcb;
// LINE 664:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _T59;

	__asm        mov    eax, currentUserPersonalInfo;
	__asm        cmp    dword ptr [eax+0x48], 0xA;
	__asm        jge    _T92;
// LINE 666:
_T59:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 667:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 669:
	__asm        jmp    _Tc6;
// LINE 670:
_T92:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 671:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 674:
_Tc6:
	__asm        jmp    _T15f;
_Tcb:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _T12b;
// LINE 675:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 676:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 678:
	__asm        jmp    _T15f;
// LINE 679:
_T12b:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 683:
_T15f:
	__asm        jmp    _T1f8;
// LINE 684:
_T164:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x44], ebx;
	__asm        je     _T1c4;
// LINE 685:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 686:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 688:
	__asm        jmp    _T1f8;
// LINE 689:
_T1c4:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 690:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 693:
_T1f8:
	return;
}

// FUNCTION: COPTER_D 0x0047b0d8
int32_t CatalogWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	/*bp-0x8*/   long lMyMessage[2]; // 0x8 bytes

// LINE 704:
	__asm        cmp    lWindowID, 1;
	__asm        je     _T20;

	__asm        cmp    lWindowID, 2;
	__asm        jne    _T118;
// LINE 706:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 7;
	__asm        jle    _T3c;

	lMyMessage[0] = 0x1;
	__asm        jmp    _T43;
_T3c:
	lMyMessage[0] = 0x0;
// LINE 707:
_T43:
	__asm        cmp    lMyMessage[0], 1;
	__asm        jne    _T70;
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lMyMessage[1], eax;
// LINE 709:
	__asm        jmp    _T8e;
// LINE 710:
_T70:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lMyMessage[1], eax;
// LINE 712:
_T8e:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _Td8;
// LINE 713:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoCatalogWindowBuy;
	__asm        test   eax, eax;
	__asm        je     _Tc9;
// LINE 714:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 715:
_Tc9:
	return 0x1;
// LINE 717:
	__asm        jmp    _T113;
// LINE 718:
_Td8:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoCatalogWindowSell;
	__asm        test   eax, eax;
	__asm        je     _T109;
// LINE 719:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 720:
_T109:
	return 0x1;
// LINE 723:
_T113:
	__asm        jmp    _T14d;
_T118:
	__asm        cmp    lWindowID, 3;
	__asm        jne    _T14d;
// LINE 724:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 725:
	return 0x1;
// LINE 727:
_T14d:
	return 0x0;
// LINE 728:
}

// FUNCTION: COPTER_D 0x0047b233
long CatalogWindow::GetHelicopterFromTab(long lTab) {
	/*bp-0x20*/  const long lHelicopterTabs[8]; // 0x20 bytes

// LINE 736:
	lHelicopterTabs[0] = 0x3;
	lHelicopterTabs[1] = 0x5;
	lHelicopterTabs[2] = 0x1;
	lHelicopterTabs[3] = 0x6;
// LINE 737:
	lHelicopterTabs[4] = 0x8;
	lHelicopterTabs[5] = 0x4;
	lHelicopterTabs[6] = 0x7;
	lHelicopterTabs[7] = 0x0;
// LINE 738:
	__asm        mov    eax, lTab;
	__asm        mov    eax, [ebp+eax*4-0x20];
	__asm        jmp    __RETURN;
// LINE 739:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047b28a
long CatalogWindow::GetEquipmentFromSelectionIndex(long lSelectionIndex) {
	/*bp-0x14*/  const long lEquipmentChoices[5]; // 0x14 bytes

// LINE 747:
	lEquipmentChoices[0] = 0x0;
	lEquipmentChoices[1] = 0x1;
	lEquipmentChoices[2] = 0x3;
// LINE 748:
	lEquipmentChoices[3] = 0x0;
	lEquipmentChoices[4] = 0x2;
// LINE 749:
	__asm        mov    eax, lSelectionIndex;
	__asm        mov    eax, [ebp+eax*4-0x14];
	__asm        jmp    __RETURN;
// LINE 750:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047b2cc
int32_t CatalogWindow::CanUserBuy() {
	/*bp-0x4*/   long lCurrentFunds;
	/*bp-0x8*/   long lCurrentValue;

// LINE 766:
	lCurrentFunds = GetUserMoney();
// LINE 767:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T47;
// LINE 768:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 769:
	__asm        jmp    _T65;
// LINE 770:
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 771:
_T65:
_T7b:
_T7d:
	return (lCurrentFunds < lCurrentValue);
// LINE 772:
}

// FUNCTION: COPTER_D 0x0047b353
int32_t CatalogWindow::CanUserSell() {
	/*bp-0x4*/   const /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;

// LINE 784:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 786:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T51;
// LINE 787:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        and    ebx, [eax+0x48];
	__asm        mov    eax, ebx;
	__asm        jmp    __RETURN;
// LINE 788:
	__asm        jmp    __RETURN;
// LINE 789:
_T51:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        and    ebx, [eax+0x44];
	__asm        mov    eax, ebx;
	__asm        jmp    __RETURN;
// LINE 790:
__RETURN:
}

// FUNCTION: COPTER_D 0x0047b3d1
int32_t CatalogWindow::DoCatalogWindowBuy() {
	/*bp-0x4*/   long lFixedCurrentEquipmentSelection;
	/*bp-0x8*/   long lCurrentFunds;
	/*bp-0xc*/   long lCurrentHelicopter;
	/*bp-0x10*/  long lCurrentValue;
	/*bp-0x14*/  /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;

// LINE 804:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 807:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CanUserBuy;
	__asm        test   eax, eax;
	__asm        jne    _T2b;
// LINE 808:
	return 0x0;
// LINE 810:
_T2b:
	lCurrentFunds = GetUserMoney();
// LINE 811:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lFixedCurrentEquipmentSelection, eax;
// LINE 812:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T90;
// LINE 813:
	lCurrentValue = S3HeliGetEquipmentNewValue(lFixedCurrentEquipmentSelection);
// LINE 814:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lFixedCurrentEquipmentSelection);
	__asm        shl    eax, cl;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        or     [ecx+0x48], eax;
// LINE 815:
	__asm        cmp    lFixedCurrentEquipmentSelection, 3;
	__asm        jne    _T8b;
// LINE 816:
	currentUserPersonalInfo->lTeargasCount = 0xa;
// LINE 818:
_T8b:
	__asm        jmp    _Td0;
// LINE 819:
_T90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lCurrentHelicopter, eax;
// LINE 820:
	lCurrentValue = S3HeliGetNewValue(lCurrentHelicopter);
// LINE 821:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliMakeHelicopter;
	__asm        add    esp, 4;
// LINE 822:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHelicopter);
	__asm        shl    eax, cl;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        or     [ecx+0x44], eax;
// LINE 824:
_Td0:
	__asm        mov    eax, lCurrentValue;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 825:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 826:
	return 0x1;
// LINE 827:
}

// FUNCTION: COPTER_D 0x0047b4d0
int32_t CatalogWindow::DoCatalogWindowSell() {
	/*bp-0x4*/   long lFixedCurrentEquipmentSelection;
	/*bp-0x8*/   long lCurrentFunds;
	/*bp-0xc*/   long lCurrentHelicopter;
	/*bp-0x10*/  long lCurrentValue;
	/*bp-0x14*/  /*packed*/ struct tagUserPersonalInfo *currentUserPersonalInfo;

// LINE 836:
	currentUserPersonalInfo = GetCurrentUserPersonalInfo();
// LINE 840:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CanUserSell;
	__asm        test   eax, eax;
	__asm        jne    _T2b;
// LINE 841:
	return 0x0;
// LINE 843:
_T2b:
	lCurrentFunds = GetUserMoney();
// LINE 844:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lFixedCurrentEquipmentSelection, eax;
// LINE 846:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T92;
// LINE 847:
	lCurrentValue = S3HeliGetEquipmentCurrentValue(lFixedCurrentEquipmentSelection);
// LINE 848:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lFixedCurrentEquipmentSelection);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        and    [ecx+0x48], eax;
// LINE 849:
	__asm        cmp    lFixedCurrentEquipmentSelection, 3;
	__asm        jne    _T8d;
// LINE 850:
	currentUserPersonalInfo->lTeargasCount = 0x0;
// LINE 852:
_T8d:
	__asm        jmp    _Td4;
// LINE 853:
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lCurrentHelicopter, eax;
// LINE 854:
	lCurrentValue = S3HeliGetCurrentValue(lCurrentHelicopter);
// LINE 855:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliRemoveHelicopter;
	__asm        add    esp, 4;
// LINE 856:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHelicopter);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        and    [ecx+0x44], eax;
// LINE 858:
_Td4:
	__asm        mov    eax, lCurrentValue;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 859:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 860:
	return 0x1;
// LINE 861:
}



// Contribution: 1:0007a5e0-0007a5fd Module: 34, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0007a600-0007a638 Module: 34, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047b600
// CatalogWindow::`scalar deleting destructor'



// Contribution: 2:00001ce8-00001dab Module: 34, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CatalogWindow @ 0x00590ce8
//   00: CatalogWindow::DoMessage @ 0x0047b0d8
//   01: CatalogWindow::Initialize @ 0x00476517
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: CatalogWindow::CreateImage @ 0x0047aaf5
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: CatalogWindow::ComposeSelf @ 0x0047ab4e
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: CatalogWindow::DoKeyDown @ 0x0047adce
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: CatalogWindow::DoCursorDown @ 0x0047ae0e
//   36: CatalogWindow::DoCursorUp @ 0x0047ae9c
//   37: CatalogWindow::DoCursorMove @ 0x0047aeb9
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CatalogWindow::`scalar deleting destructor' @ 0x0047b600
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 3:0000281c-000029cc Module: 34, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059981c
char * SZ_CATALOG_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599820
char * SZ_CATALOG_EQUIPMENT_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599824
char * SZ_STAIN_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599828
char * SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059982c
char * SZ_CATALOG_WINDOW_PAPER_CLIP_IMAGEFILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599830
char * SZ_CATALOG_WINDOW_TEXT_NAME = { 0 /* todo */ };

