// Module: Catalog.obj
// Source: C:\Copter\source\sparkal\Catalog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: class CatalogWindow (forward reference);
class CatalogWindow : public GraphicWindow
{
public:
	void CatalogWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~CatalogWindow();
	virtual int32_t Initialize();
	virtual int32_t ComposeSelf();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	virtual int32_t CreateImage(int32_t);
	int32_t ReadPalette(struct SparkalColor*);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
protected:
	void SwitchGraphicsForTab(long);
	void GetCurrentGraphicsFileNames(class basic_string<char>&, class basic_string<char>&);
	int32_t DoesCursorHitEquipmentSelection(long, long, long&);
	int32_t DoesCursorHitTab(long, long, long&);
	int32_t DoesTabHaveAnyStains(long);
	int32_t DoesTabHaveAnyPaperClips(long);
	void DrawCurrentEquipmentSelection();
	void SetNewEquipmentSelection(long);
	int32_t CanUserBuy();
	int32_t CanUserSell();
	int32_t DoCatalogWindowBuy();
	int32_t DoCatalogWindowSell();
	void SetButtonStates();
	long GetHelicopterFromTab(long);
	long GetEquipmentFromSelectionIndex(long);
	class MRect rectTabs;
	class MPoint ptHelicopterMainGraphic;
	long lStainImageTabs[3];
	class MPoint ptStainImage[3];
	long lPaperClipImageTabs[3];
	class MPoint ptPaperClipImage[3];
	class DigitalSound mySound;
	long lCurrentTab;
	long lCurrentEquipmentSelection;
	class basic_string<char> sCurrentFunds;
	class basic_string<char> sItemCost;
	class MFont myFont;
	class MRect rectHistoryText;
	class MRect rectSpecialtiesText;
	class MRect rectDescriptionText;
	class MRect rectCostText;
	class SoundButtonWindow* buttonWindowBuy;
	class SoundButtonWindow* buttonWindowSell;
	class SoundButtonWindow* buttonWindowDone;
	class MRect rectHelicopterHistoryTitle;
	class MRect rectHelicopterSpecialtiesTitle;
	class MRect rectHelicopterDescriptionTitle;
	class MRect rectHelicopterCurrentFundsTitle;
	class MRect rectHelicopterItemCostTitle;
	class basic_string<char> sHelicopterHistoryTitle;
	class basic_string<char> sHelicopterHistory;
	class basic_string<char> sHelicopterSpecialtiesTitle;
	class basic_string<char> sHelicopterSpecialties;
	class basic_string<char> sHelicopterDescriptionTitle;
	class basic_string<char> sHelicopterDescription;
	class basic_string<char> sHelicopterCurrentFundsTitle;
	class basic_string<char> sHelicopterItemCostTitle;
	class MRect rectEquipmentCurrentFundsTitle;
	class MRect rectEquipmentItemCostTitle;
	class basic_string<char> sEquipmentTab;
	class basic_string<char> sEquipmentDescriptionTitle;
	class basic_string<char> sEquipmentCurrentFundsTitle;
	class basic_string<char> sEquipmentItemCostTitle;
	class basic_string<char> sEquipmentTitle;
	class basic_string<char> sEquipmentAddress1;
	class basic_string<char> sEquipmentAddress2;
};

// Type: int32_t;

// Type: class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: class Random;
class Random{
public:
	void Random(unsigned long);
	unsigned long operator()(unsigned long);
	void seed(unsigned long);
protected:
	unsigned long table[55];
	uint32_t index1;
	uint32_t index2;
};

// Type: void;

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: long;

// Type: struct tagUserPersonalInfo (forward reference);
// tagUserPersonalInfo Class implementation not found

// Type: class MRect[5];

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& TopLeft();
	class MPoint& TopLeft();
	const class MPoint& BottomRight();
	class MPoint& BottomRight();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void SetRect(struct SparkalPoint, struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(class MRect*);
	void InflateRect(struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(class MRect*);
	void DeflateRect(struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(struct SparkalPoint);
	void OffsetRect(struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void operator+=(class MRect*);
	void operator+=(struct SparkalSize);
	void operator+=(struct SparkalPoint);
	void operator-=(class MRect*);
	void operator-=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect operator+(struct SparkalSize);
	class MRect operator+(class MRect*);
	class MRect operator+(struct SparkalPoint);
	class MRect operator-(class MRect*);
	class MRect operator-(struct SparkalSize);
	class MRect operator-(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class basic_string<char>[5];

// Type: char[260];

// Type: class CBackBuffer (forward reference);
// CBackBuffer Class implementation not found

// Type: unsigned long[6];

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: char *[9];

// Type: struct SparkalColor (forward reference);
struct SparkalColor{
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: const class MRect[5];

// Type: char;

// Type: unsigned long;

// Type: void * __ptr32;

// Type: long[2];

// Type: const long[8];

// Type: const long[5];

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(struct SparkalSize);
	void Offset(struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void operator+=(struct SparkalPoint);
	void operator+=(struct SparkalSize);
	void operator-=(struct SparkalPoint);
	void operator-=(struct SparkalSize);
	class MRect operator+(const struct SparkalRect*);
	class MPoint operator+(struct SparkalPoint);
	class MPoint operator+(struct SparkalSize);
	class MRect operator-(const struct SparkalRect*);
	class MSize operator-(struct SparkalPoint);
	class MPoint operator-();
	class MPoint operator-(struct SparkalSize);
};

// Type: uint32_t;

// Type: struct SparkalPoint;
struct SparkalPoint{
	long x;
	long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: struct SparkalRect;
struct SparkalRect{
	long left;
	long top;
	long right;
	long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};



// Contribution: 1:00073960-0007a5d0 Module: 34, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00474960
void CatalogWindow::CatalogWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	class Random tempRandom;
	int32_t i;
	int32_t nFullStringID;


	__asm        jmp    near ptr 0x0047497B;

	__asm        jmp    near ptr 0x00474980;

	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x168], eax;
	__asm        jmp    near ptr 0x004749A9;

	__asm        mov    dword ptr [ebp-0xFC], 0;
	__asm        mov    dword ptr [ebp-0xF8], 0;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    [ebp-0xF4], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0xF0], eax;
	__asm        jmp    near ptr 0x004749DA;

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        jmp    near ptr 0x00474A01;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0x50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0x1A4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x226;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0x1CC;
	__asm        jmp    near ptr 0x00474A3D;

	__asm        jmp    near ptr 0x00474A42;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x3C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x42;
	__asm        jmp    near ptr 0x00474A67;

	__asm        mov    dword ptr [ebp-0x110], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0x98;
	__asm        mov    [ebp-0x114], eax;
_T122:
	__asm        dec    dword ptr [ebp-0x110];
	__asm        js     _T145;

	__asm        mov    ecx, [ebp-0x114];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x114], 8;
	__asm        jmp    _T122;
_T145:
	__asm        jmp    near ptr 0x00474AAA;

	__asm        mov    dword ptr [ebp-0x118], 3;
	__asm        mov    eax, this;
	__asm        add    eax, 0xBC;
	__asm        mov    [ebp-0x11C], eax;
_T165:
	__asm        dec    dword ptr [ebp-0x118];
	__asm        js     _T188;

	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   MPoint::MPoint;
	__asm        add    dword ptr [ebp-0x11C], 8;
	__asm        jmp    _T165;
_T188:
	__asm        jmp    near ptr 0x00474AED;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD4;
	__asm        call   DigitalSound::DigitalSound;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14E], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x152], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x15C], eax;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     _T1fc;

	__asm        push   0x599884;
	__asm        mov    ecx, [ebp-0x15C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], eax;
	__asm        jmp    _T20c;
_T1fc:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15A], 0;
_T20c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x156], 0;
	__asm        jmp    near ptr 0x00474B81;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x160], eax;
	__asm        cmp    dword ptr [ebp-0x160], 0;
	__asm        je     _T25f;

	__asm        push   0x599894;
	__asm        mov    ecx, [ebp-0x160];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x162], eax;
	__asm        jmp    _T26f;
_T25f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x162], 0;
_T26f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x15E], 0;
	__asm        jmp    near ptr 0x00474BE4;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, SZ_CATALOG_WINDOW_TEXT_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x166;
	__asm        call   MFont::MFont;
	__asm        jmp    near ptr 0x00474C08;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x182], 0x46;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x186], 0x140;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18A], 0x138;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18E], 0x168;
	__asm        jmp    near ptr 0x00474C4D;

	__asm        jmp    near ptr 0x00474C52;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x192], 0x46;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x196], 0x176;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x19A], 0xC28;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x19E], 0x19A;
	__asm        jmp    near ptr 0x00474C97;

	__asm        jmp    near ptr 0x00474C9C;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A2], 0x14E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1A6], 0x140;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AA], 0x24E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1AE], 0x19A;
	__asm        jmp    near ptr 0x00474CE1;

	__asm        jmp    near ptr 0x00474CE6;

	__asm        jmp    near ptr 0x00474CEB;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C2], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C6], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CA], 0;
	__asm        jmp    near ptr 0x00474D20;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CE], 0x4A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D2], 0x12E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1D6], 0x138;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DA], 0x140;
	__asm        jmp    near ptr 0x00474D65;

	__asm        jmp    near ptr 0x00474D6A;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1DE], 0x4A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E2], 0x166;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1E6], 0x138;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1EA], 0x178;
	__asm        jmp    near ptr 0x00474DAF;

	__asm        jmp    near ptr 0x00474DB4;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1EE], 0x150;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1F2], 0x12E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1F6], 0x24E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1FA], 0x140;
	__asm        jmp    near ptr 0x00474DF9;

	__asm        jmp    near ptr 0x00474DFE;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1FE], 0x200;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x202], 0x48;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x206], 0x24E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20A], 0x6A;
	__asm        jmp    near ptr 0x00474E43;

	__asm        jmp    near ptr 0x00474E48;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20E], 0x200;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x212], 0x8C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x216], 0x24E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x21A], 0xB2;
	__asm        jmp    near ptr 0x00474E8D;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x120], eax;
	__asm        cmp    dword ptr [ebp-0x120], 0;
	__asm        je     _T59e;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x120];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x120];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474EE7;

	__asm        mov    eax, [ebp-0x120];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x222], eax;
	__asm        jmp    _T5ae;
_T59e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x222], 0;
_T5ae:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x21E], 0;
	__asm        jmp    near ptr 0x00474F23;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x124], eax;
	__asm        cmp    dword ptr [ebp-0x124], 0;
	__asm        je     _T634;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x124];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00474F7D;

	__asm        mov    eax, [ebp-0x124];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x22A], eax;
	__asm        jmp    _T644;
_T634:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x22A], 0;
_T644:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x226], 0;
	__asm        jmp    near ptr 0x00474FB9;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _T6ca;

	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x128];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00475013;

	__asm        mov    eax, [ebp-0x128];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x232], eax;
	__asm        jmp    _T6da;
_T6ca:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x232], 0;
_T6da:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x22E], 0;
	__asm        jmp    near ptr 0x0047504F;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x12C], eax;
	__asm        cmp    dword ptr [ebp-0x12C], 0;
	__asm        je     _T760;

	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x12C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004750A9;

	__asm        mov    eax, [ebp-0x12C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x23A], eax;
	__asm        jmp    _T770;
_T760:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x23A], 0;
_T770:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x236], 0;
	__asm        jmp    near ptr 0x004750E5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _T7f6;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x130];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047513F;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x242], eax;
	__asm        jmp    _T806;
_T7f6:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x242], 0;
_T806:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x23E], 0;
	__asm        jmp    near ptr 0x0047517B;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x134], eax;
	__asm        cmp    dword ptr [ebp-0x134], 0;
	__asm        je     _T88c;

	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x134];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004751D5;

	__asm        mov    eax, [ebp-0x134];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24A], eax;
	__asm        jmp    _T89c;
_T88c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24A], 0;
_T89c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x246], 0;
	__asm        jmp    near ptr 0x00475211;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x138], eax;
	__asm        cmp    dword ptr [ebp-0x138], 0;
	__asm        je     _T922;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x138];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047526B;

	__asm        mov    eax, [ebp-0x138];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x252], eax;
	__asm        jmp    _T932;
_T922:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x252], 0;
_T932:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24E], 0;
	__asm        jmp    near ptr 0x004752A7;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _T9b8;

	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x13C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00475301;

	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x25A], eax;
	__asm        jmp    _T9c8;
_T9b8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x25A], 0;
_T9c8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x256], 0;
	__asm        jmp    near ptr 0x0047533D;

	__asm        jmp    near ptr 0x00475342;

	__asm        jmp    near ptr 0x00475347;

	__asm        jmp    near ptr 0x0047534C;

	__asm        jmp    near ptr 0x00475351;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x140], eax;
	__asm        cmp    dword ptr [ebp-0x140], 0;
	__asm        je     _Ta62;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x140];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004753AB;

	__asm        mov    eax, [ebp-0x140];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x282], eax;
	__asm        jmp    _Ta72;
_Ta62:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x282], 0;
_Ta72:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x27E], 0;
	__asm        jmp    near ptr 0x004753E7;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     _Taf8;

	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x144];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00475441;

	__asm        mov    eax, [ebp-0x144];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28A], eax;
	__asm        jmp    _Tb08;
_Taf8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28A], 0;
_Tb08:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x286], 0;
	__asm        jmp    near ptr 0x0047547D;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x148], eax;
	__asm        cmp    dword ptr [ebp-0x148], 0;
	__asm        je     _Tb8e;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x148];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004754D7;

	__asm        mov    eax, [ebp-0x148];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x292], eax;
	__asm        jmp    _Tb9e;
_Tb8e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x292], 0;
_Tb9e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28E], 0;
	__asm        jmp    near ptr 0x00475513;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14C], eax;
	__asm        cmp    dword ptr [ebp-0x14C], 0;
	__asm        je     _Tc24;

	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047556D;

	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x29A], eax;
	__asm        jmp    _Tc34;
_Tc24:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29A], 0;
_Tc34:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x296], 0;
	__asm        jmp    near ptr 0x004755A9;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Tcba;

	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x150];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x150];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00475603;

	__asm        mov    eax, [ebp-0x150];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A2], eax;
	__asm        jmp    _Tcca;
_Tcba:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2A2], 0;
_Tcca:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29E], 0;
	__asm        jmp    near ptr 0x0047563F;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x154], eax;
	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _Td50;

	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x154];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x154];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00475699;

	__asm        mov    eax, [ebp-0x154];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2AA], eax;
	__asm        jmp    _Td60;
_Td50:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2AA], 0;
_Td60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2A6], 0;
	__asm        jmp    near ptr 0x004756D5;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _Tde6;

	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x158];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047572F;

	__asm        mov    eax, [ebp-0x158];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2B2], eax;
	__asm        jmp    _Tdf6;
_Tde6:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2B2], 0;
_Tdf6:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2AE], 0;
	__asm        jmp    near ptr 0x0047576B;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590CE8;
	__asm        call   clock;
	__asm        mov    [ebp-0x100], eax;
// LINE 66:
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::seed;
	__asm        jmp    near ptr 0x00475799;

	__asm        mov    eax, SZ_CATALOG_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x104], eax;
// LINE 70:
	__asm        jmp    near ptr 0x004757A9;

	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004757D3;
// LINE 74:
	__asm        jmp    near ptr 0x004757D8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Teac;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x108], eax;
	__asm        jmp    _Tebb;

	__asm        jmp    _Tebb;
_Teac:
	__asm        mov    dword ptr [ebp-0x108], 0;
	__asm        jmp    _Tebb;
_Tebb:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998A4;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 75:
	__asm        jmp    near ptr 0x0047583A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf0e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    _Tf1d;

	__asm        jmp    _Tf1d;
_Tf0e:
	__asm        mov    dword ptr [ebp-0x10C], 0;
	__asm        jmp    _Tf1d;
_Tf1d:
	__asm        push   0;
	__asm        push   0x5998A8;
	__asm        mov    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 77:
	__asm        mov    i, 0;
	__asm        jmp    _Tf42;
_Tf3f:
	__asm        inc    i;
_Tf42:
	__asm        cmp    i, 3;
	__asm        jge    _Tfb4;
// LINE 78:
	__asm        push   9;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0x8C], eax;
// LINE 79:
	__asm        push   0x1A6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x98], eax;
// LINE 80:
	__asm        push   0xE6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x42;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0x9C], eax;
// LINE 81:
	__asm        jmp    _Tf3f;
// LINE 82:
_Tfb4:
	__asm        mov    i, 0;
	__asm        jmp    _Tfc3;
_Tfc0:
	__asm        inc    i;
_Tfc3:
	__asm        cmp    i, 3;
	__asm        jge    _T1035;
// LINE 83:
	__asm        push   9;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*4+0xB0], eax;
// LINE 84:
	__asm        push   0x1A6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0xBC], eax;
// LINE 85:
	__asm        push   0xE6;
	__asm        lea    ecx, tempRandom.table[0];
	__asm        call   Random::operator();
	__asm        add    eax, 0x42;
	__asm        mov    ecx, i;
	__asm        mov    edx, this;
	__asm        mov    [edx+ecx*8+0xC0], eax;
// LINE 86:
	__asm        jmp    _Tfc0;
// LINE 87:
_T1035:
	__asm        push   0;
	__asm        push   0x1AE;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 88:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        cmp    dword ptr [ebp-0x116C], 0;
	__asm        jne    _T1106;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x116C], eax;
	__asm        jmp    near ptr 0x00475A06;

	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475A33;

	__asm        jmp    near ptr 0x00475A38;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00475A61;

	__asm        jmp    _T113d;
_T1106:
	__asm        jmp    near ptr 0x00475A6B;

	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1168];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475A98;

	__asm        jmp    _T113d;
// LINE 89:
_T113d:
	__asm        push   0;
	__asm        push   0x1AF;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 90:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2170], eax;
	__asm        cmp    dword ptr [ebp-0x2170], 0;
	__asm        jne    _T120e;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2170], eax;
	__asm        jmp    near ptr 0x00475B0E;

	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475B3B;

	__asm        jmp    near ptr 0x00475B40;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00475B69;

	__asm        jmp    _T1245;
_T120e:
	__asm        jmp    near ptr 0x00475B73;

	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475BA0;

	__asm        jmp    _T1245;
// LINE 91:
_T1245:
	__asm        push   0;
	__asm        push   0x1B0;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 92:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3174], eax;
	__asm        cmp    dword ptr [ebp-0x3174], 0;
	__asm        jne    _T1316;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3174], eax;
	__asm        jmp    near ptr 0x00475C16;

	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475C43;

	__asm        jmp    near ptr 0x00475C48;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00475C71;

	__asm        jmp    _T134d;
_T1316:
	__asm        jmp    near ptr 0x00475C7B;

	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3170];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475CA8;

	__asm        jmp    _T134d;
// LINE 93:
_T134d:
	__asm        push   0;
	__asm        push   0x1B1;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 94:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4178], eax;
	__asm        cmp    dword ptr [ebp-0x4178], 0;
	__asm        jne    _T141e;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x4178], eax;
	__asm        jmp    near ptr 0x00475D1E;

	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475D4B;

	__asm        jmp    near ptr 0x00475D50;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00475D79;

	__asm        jmp    _T1455;
_T141e:
	__asm        jmp    near ptr 0x00475D83;

	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4174];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00475DB0;

	__asm        jmp    _T1455;
// LINE 95:
_T1455:
	__asm        push   0;
	__asm        push   0x1B2;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 96:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x256;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 97:
	__asm        push   0;
	__asm        push   0x1B3;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 98:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x27E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 99:
	__asm        push   0;
	__asm        push   0x1B4;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 100:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x286;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 101:
	__asm        push   0;
	__asm        push   0x1B5;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 102:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x28E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 103:
	__asm        push   0;
	__asm        push   0x1B6;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 104:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x296;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 105:
	__asm        push   0;
	__asm        push   0x1B7;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 106:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x29E;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 107:
	__asm        push   0;
	__asm        push   0x1B8;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 108:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2A6;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 109:
	__asm        push   0;
	__asm        push   0x1B9;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 110:
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2AE;
	__asm        push   eax;
	__asm        call   SetStringFromStringResource;
	__asm        add    esp, 8;
// LINE 112:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CreateImage;
// LINE 113:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::SetImageToDrawOnto;
// LINE 114:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeModal;
	__asm        add    esp, 4;
// LINE 115:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::MakeFocus;
	__asm        add    esp, 4;
// LINE 116:
	__asm        jmp    near ptr 0x00475F40;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00475f4d
void CatalogWindow::~CatalogWindow() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x590CE8;
// LINE 123:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::DestroyImage;
// LINE 124:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveFocus;
	__asm        add    esp, 4;
// LINE 125:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   GraphicWindow::RemoveModal;
	__asm        add    esp, 4;
// LINE 126:
	__asm        jmp    near ptr 0x00475F99;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2AE;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2AE], 0;
	__asm        je     _T91;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2AE];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T91:
	__asm        jmp    near ptr 0x00475FE3;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x2A6;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2A6], 0;
	__asm        je     _Tdb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A6];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	__asm        jmp    near ptr 0x0047602D;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x29E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x29E], 0;
	__asm        je     _T125;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29E];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T125:
	__asm        jmp    near ptr 0x00476077;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x296;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x296], 0;
	__asm        je     _T16f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x296];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T16f:
	__asm        jmp    near ptr 0x004760C1;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x28E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x28E], 0;
	__asm        je     _T1b9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28E];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b9:
	__asm        jmp    near ptr 0x0047610B;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x286;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x286], 0;
	__asm        je     _T203;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x286];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T203:
	__asm        jmp    near ptr 0x00476155;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x27E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x27E], 0;
	__asm        je     _T24d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x27E];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T24d:
	__asm        jmp    near ptr 0x0047619F;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x256;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x256], 0;
	__asm        je     _T297;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x256];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T297:
	__asm        jmp    near ptr 0x004761E9;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x24E], 0;
	__asm        je     _T2e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24E];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e1:
	__asm        jmp    near ptr 0x00476233;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x246], 0;
	__asm        je     _T32b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x246];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T32b:
	__asm        jmp    near ptr 0x0047627D;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x23E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x23E], 0;
	__asm        je     _T375;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23E];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T375:
	__asm        jmp    near ptr 0x004762C7;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x236], 0;
	__asm        je     _T3bf;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x236];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3bf:
	__asm        jmp    near ptr 0x00476311;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x22E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x22E], 0;
	__asm        je     _T409;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22E];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T409:
	__asm        jmp    near ptr 0x0047635B;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x226], 0;
	__asm        je     _T453;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x226];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T453:
	__asm        jmp    near ptr 0x004763A5;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x21E;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x21E], 0;
	__asm        je     _T49d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x21E];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T49d:
	__asm        jmp    near ptr 0x004763EF;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x166;
	__asm        call   MFont::~MFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T515;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T515;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T515;
_T515:
	__asm        jmp    near ptr 0x00476467;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x15E], 0;
	__asm        je     _T54e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15E];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T54e:
	__asm        jmp    near ptr 0x004764A0;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0x156;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x156], 0;
	__asm        je     _T5a4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x156];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T5a4:
	__asm        jmp    near ptr 0x004764F6;

	__asm        mov    ecx, this;
	__asm        add    ecx, 0xD4;
	__asm        call   DigitalSound::~DigitalSound;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::~GraphicWindow;
}

// FUNCTION: COPTER_D 0x00476517
int32_t CatalogWindow::Initialize() {
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 134:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T66;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00476572;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T6d;
_T66:
	__asm        mov    sText.reference, 0;
_T6d:
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00476590;
// LINE 136:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::Initialize;
// LINE 139:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Tf9;

	__asm        jmp    near ptr 0x004765BA;

	__asm        mov    dword ptr [ebp-0x20], 0x1FC;
	__asm        mov    dword ptr [ebp-0x1C], 0xCE;
	__asm        mov    dword ptr [ebp-0x18], 0x1FE;
	__asm        mov    dword ptr [ebp-0x14], 0xD0;
	__asm        jmp    near ptr 0x004765DB;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C2], eax;
	__asm        jmp    _T109;
_Tf9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C2], 0;
// LINE 140:
_T109:
	__asm        push   0;
	__asm        push   0x1BA;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 141:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        cmp    dword ptr [ebp-0x1064], 0;
	__asm        jne    _T1c8;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        jmp    near ptr 0x00476691;

	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004766B5;

	__asm        jmp    near ptr 0x004766BA;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004766DA;

	__asm        jmp    _T1f6;
_T1c8:
	__asm        jmp    near ptr 0x004766E4;

	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00476708;

	__asm        jmp    _T1f6;
// LINE 142:
_T1f6:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x48];
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+4];
// LINE 146:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T2a9;

	__asm        jmp    near ptr 0x0047676A;

	__asm        mov    dword ptr [ebp-0x34], 0x1FC;
	__asm        mov    dword ptr [ebp-0x30], 0xEC;
	__asm        mov    dword ptr [ebp-0x2C], 0x1FE;
	__asm        mov    dword ptr [ebp-0x28], 0xEE;
	__asm        jmp    near ptr 0x0047678B;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C6], eax;
	__asm        jmp    _T2b9;
_T2a9:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C6], 0;
// LINE 147:
_T2b9:
	__asm        push   0;
	__asm        push   0x1BB;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 148:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2068], eax;
	__asm        cmp    dword ptr [ebp-0x2068], 0;
	__asm        jne    _T378;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2068], eax;
	__asm        jmp    near ptr 0x00476841;

	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00476865;

	__asm        jmp    near ptr 0x0047686A;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047688A;

	__asm        jmp    _T4c8;
_T378:
	__asm        jmp    near ptr 0x00476894;

	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x207C], eax;
	__asm        cmp    dword ptr [ebp-0x207C], 0xFFFFFFFF;
	__asm        jne    _T3d7;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2078], eax;
	__asm        mov    eax, [ebp-0x2078];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004768DF;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T3d7;
_T3d7:
	__asm        jmp    near ptr 0x004768F3;

	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T40d;

	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        je     _T46e;

	__asm        jmp    near ptr 0x00476912;

	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x207C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T46e;
_T40d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2070], eax;
	__asm        cmp    dword ptr [ebp-0x2070], 0;
	__asm        je     _T44e;

	__asm        mov    eax, [ebp-0x207C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2070];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x206C], eax;
	__asm        jmp    _T458;
_T44e:
	__asm        mov    dword ptr [ebp-0x206C], 0;
_T458:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x206C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T4ad;
_T46e:
	__asm        cmp    dword ptr [ebp-0x207C], 0;
	__asm        je     _T4ad;

	__asm        jmp    near ptr 0x00476997;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2074], eax;
	__asm        mov    eax, [ebp-0x207C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2064];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2074];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4ad;
_T4ad:
	__asm        mov    eax, [ebp-0x207C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004769D5;

	__asm        jmp    near ptr 0x004769DA;

	__asm        jmp    _T4c8;
// LINE 149:
_T4c8:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x48];
// LINE 150:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+4];
// LINE 153:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T57b;

	__asm        jmp    near ptr 0x00476A3C;

	__asm        mov    dword ptr [ebp-0x48], 0x1FC;
	__asm        mov    dword ptr [ebp-0x44], 0x10A;
	__asm        mov    dword ptr [ebp-0x40], 0x1FE;
	__asm        mov    dword ptr [ebp-0x3C], 0x10C;
	__asm        jmp    near ptr 0x00476A5D;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1CA], eax;
	__asm        jmp    _T58b;
_T57b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1CA], 0;
// LINE 154:
_T58b:
	__asm        push   0;
	__asm        push   0x1BC;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 155:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3080], eax;
	__asm        cmp    dword ptr [ebp-0x3080], 0;
	__asm        jne    _T64a;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3080], eax;
	__asm        jmp    near ptr 0x00476B13;

	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00476B37;

	__asm        jmp    near ptr 0x00476B3C;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00476B5C;

	__asm        jmp    _T678;
_T64a:
	__asm        jmp    near ptr 0x00476B66;

	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x307C];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00476B8A;

	__asm        jmp    _T678;
// LINE 156:
_T678:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x48];
// LINE 157:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+4];
// LINE 159:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 160:
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T714;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T714;

	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x00476C15;

	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00476C26;

	__asm        jmp    _T714;
_T714:
	__asm        jmp    near ptr 0x00476C30;

	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T73b;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T73b:
	__asm        jmp    near ptr 0x00476C57;

	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    near ptr 0x00476C5F;
// LINE 161:
}

// FUNCTION: COPTER_D 0x00476c64
void CatalogWindow::SwitchGraphicsForTab(long lNewTab) {
	class basic_string<char> sTempMainGraphicFilePath;
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	class basic_string<char> sTempMainGraphicFileName;
	int32_t i;
	class MRect rectEquipmentDescriptions[5];
	class MRect rectFundsText;
	class basic_string<char> sTempTabFilePath;
	class basic_string<char> sTempTabFileName;
	int32_t nFullStringID;
	class basic_string<char> sEquipmentDescriptions[5];
	class MRect rectEquipmentDescriptionTitles[5];
	char szFilePath[260];

// LINE 168:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E0], eax;
	__asm        cmp    dword ptr [ebp-0x8E0], 0;
	__asm        je     _T81;

	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00476CD4;

	__asm        mov    eax, [ebp-0x8E0];
	__asm        mov    sTempMainGraphicFilePath.reference, eax;
	__asm        jmp    _T8b;
_T81:
	__asm        mov    sTempMainGraphicFilePath.reference, 0;
_T8b:
	__asm        mov    sTempMainGraphicFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00476CFE;
// LINE 169:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E4], eax;
	__asm        cmp    dword ptr [ebp-0x8E4], 0;
	__asm        je     _T105;

	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00476D58;

	__asm        mov    eax, [ebp-0x8E4];
	__asm        mov    sTempTabFilePath.reference, eax;
	__asm        jmp    _T10f;
_T105:
	__asm        mov    sTempTabFilePath.reference, 0;
_T10f:
	__asm        mov    sTempTabFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00476D82;
// LINE 170:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8E8], eax;
	__asm        cmp    dword ptr [ebp-0x8E8], 0;
	__asm        je     _T189;

	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8E8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00476DDC;

	__asm        mov    eax, [ebp-0x8E8];
	__asm        mov    sTempMainGraphicFileName.reference, eax;
	__asm        jmp    _T193;
_T189:
	__asm        mov    sTempMainGraphicFileName.reference, 0;
_T193:
	__asm        mov    sTempMainGraphicFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00476E06;
// LINE 171:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x8EC], eax;
	__asm        cmp    dword ptr [ebp-0x8EC], 0;
	__asm        je     _T20d;

	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x8EC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00476E60;

	__asm        mov    eax, [ebp-0x8EC];
	__asm        mov    sTempTabFileName.reference, eax;
	__asm        jmp    _T217;
_T20d:
	__asm        mov    sTempTabFileName.reference, 0;
_T217:
	__asm        mov    sTempTabFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00476E8A;

	__asm        mov    dword ptr [ebp-0x8C8], 5;
	__asm        lea    eax, sEquipmentDescriptions[0].c_str_ptr;
	__asm        mov    [ebp-0x8CC], eax;
// LINE 175:
_T23c:
	__asm        dec    dword ptr [ebp-0x8C8];
	__asm        js     _T25f;

	__asm        mov    ecx, [ebp-0x8CC];
	__asm        call   basic_string<char>::basic_string<char>;
	__asm        add    dword ptr [ebp-0x8CC], 8;
	__asm        jmp    _T23c;
_T25f:
	__asm        jmp    near ptr 0x00476EC8;

	__asm        mov    dword ptr [ebp-0x8D0], 5;
	__asm        lea    eax, rectEquipmentDescriptions[0].left;
	__asm        mov    [ebp-0x8D4], eax;
// LINE 176:
_T27a:
	__asm        dec    dword ptr [ebp-0x8D0];
	__asm        js     _T29d;

	__asm        mov    ecx, [ebp-0x8D4];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x8D4], 0x10;
	__asm        jmp    _T27a;
_T29d:
	__asm        jmp    near ptr 0x00476F06;

	__asm        mov    dword ptr [ebp-0x8D8], 5;
	__asm        lea    eax, rectEquipmentDescriptionTitles[0].left;
	__asm        mov    [ebp-0x8DC], eax;
// LINE 177:
_T2b8:
	__asm        dec    dword ptr [ebp-0x8D8];
	__asm        js     _T2db;

	__asm        mov    ecx, [ebp-0x8DC];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x8DC], 0x10;
	__asm        jmp    _T2b8;
_T2db:
	__asm        jmp    near ptr 0x00476F44;
// LINE 178:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 179:
	__asm        jmp    near ptr 0x00476F54;

	__asm        jmp    near ptr 0x00476F59;
// LINE 181:
	__asm        mov    byte ptr [ebp-0x810], 0x2F;
	__asm        mov    byte ptr [ebp-0x80F], 0x2F;
	__asm        mov    byte ptr [ebp-0x80E], 0x2F;
	__asm        jmp    near ptr 0x00476F73;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x8C4], eax;
	__asm        mov    eax, [ebp-0x810];
	__asm        mov    ecx, [ebp-0x8C4];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00476F96;
// LINE 182:
	__asm        cmp    lNewTab, 0;
	__asm        jl     _T1a43;

	__asm        cmp    lNewTab, 7;
	__asm        jg     _T1a43;
// LINE 184:
// Block start:
	class CBackBuffer tempHelicopterBuffer;
	class CBackBuffer tempTabBuffer;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T3a2;
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x818], eax;
	__asm        mov    eax, [ebp-0x818];
	__asm        mov    [ebp-0x814], eax;
	__asm        cmp    dword ptr [ebp-0x814], 0;
	__asm        je     _T3a2;

	__asm        mov    ecx, [ebp-0x814];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x814];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00477001;

	__asm        jmp    _T3a2;
// LINE 186:
_T3a2:
	__asm        mov    eax, SZ_CATALOG_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x84C], eax;
	__asm        jmp    near ptr 0x00477016;

	__asm        mov    eax, [ebp-0x84C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00477040;
// LINE 187:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00477067;
// LINE 188:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x81C], eax;
	__asm        cmp    dword ptr [ebp-0x81C], 0;
	__asm        je     _T59d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T45d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x49B8], eax;
	__asm        mov    eax, [ebp-0x49B8];
	__asm        mov    [ebp-0x49C0], eax;
	__asm        mov    eax, [ebp-0x49C0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T45d:
	__asm        jmp    near ptr 0x004770C6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004770EA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T523;

	__asm        jmp    near ptr 0x00477102;

	__asm        jmp    near ptr 0x00477107;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4d1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49CC], eax;
	__asm        jmp    _T4e0;

	__asm        jmp    _T4e0;
_T4d1:
	__asm        mov    dword ptr [ebp-0x49CC], 0;
	__asm        jmp    _T4e0;
_T4e0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x49D0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x49D4], eax;
	__asm        mov    eax, [ebp-0x49D0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49CC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49D4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T523;
_T523:
	__asm        jmp    near ptr 0x0047718C;

	__asm        mov    byte ptr [ebp-0x49BC], 0;
	__asm        jmp    near ptr 0x00477198;

	__asm        lea    eax, [ebp-0x49BC];
	__asm        mov    [ebp-0x49C4], eax;
	__asm        jmp    near ptr 0x004771A9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x49C8], eax;
	__asm        mov    eax, [ebp-0x49C4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x49C8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004771D9;

	__asm        jmp    near ptr 0x004771DE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x81C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T5aa;
_T59d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 190:
_T5aa:
	__asm        mov    eax, lNewTab;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14E], eax;
// LINE 191:
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetCurrentGraphicsFileNames;
// LINE 192:
	__asm        lea    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00477257;
// LINE 193:
	__asm        lea    eax, sTempTabFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00477278;
// LINE 195:
	__asm        cmp    sTempMainGraphicFilePath.c_str_ptr, 0;
	__asm        je     _T648;

	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49D8], eax;
	__asm        mov    eax, [ebp-0x49D8];
	__asm        mov    [ebp-0x49E0], eax;
	__asm        mov    eax, [ebp-0x49E0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T648:
	__asm        jmp    near ptr 0x004772B1;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sTempMainGraphicFilePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x004772CF;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6f9;

	__asm        jmp    near ptr 0x004772E4;

	__asm        jmp    near ptr 0x004772E9;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T6ad;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49EC], eax;
	__asm        jmp    _T6bc;

	__asm        jmp    _T6bc;
_T6ad:
	__asm        mov    dword ptr [ebp-0x49EC], 0;
	__asm        jmp    _T6bc;
_T6bc:
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x49F0], eax;
	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49F4], eax;
	__asm        mov    eax, [ebp-0x49F0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49EC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49F4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T6f9;
_T6f9:
	__asm        jmp    near ptr 0x00477362;

	__asm        mov    byte ptr [ebp-0x49DC], 0;
	__asm        jmp    near ptr 0x0047736E;

	__asm        lea    eax, [ebp-0x49DC];
	__asm        mov    [ebp-0x49E4], eax;
	__asm        jmp    near ptr 0x0047737F;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49E8], eax;
	__asm        mov    eax, [ebp-0x49E4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x49E8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004773A9;

	__asm        jmp    near ptr 0x004773AE;

	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 196:
	__asm        cmp    sTempTabFilePath.c_str_ptr, 0;
	__asm        je     _T790;

	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x49F8], eax;
	__asm        mov    eax, [ebp-0x49F8];
	__asm        mov    [ebp-0x4A00], eax;
	__asm        mov    eax, [ebp-0x4A00];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T790:
	__asm        jmp    near ptr 0x004773F9;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sTempTabFilePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00477417;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T841;

	__asm        jmp    near ptr 0x0047742C;

	__asm        jmp    near ptr 0x00477431;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T7f5;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A0C], eax;
	__asm        jmp    _T804;

	__asm        jmp    _T804;
_T7f5:
	__asm        mov    dword ptr [ebp-0x4A0C], 0;
	__asm        jmp    _T804;
_T804:
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A10], eax;
	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x4A14], eax;
	__asm        mov    eax, [ebp-0x4A10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A0C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A14];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T841;
_T841:
	__asm        jmp    near ptr 0x004774AA;

	__asm        mov    byte ptr [ebp-0x49FC], 0;
	__asm        jmp    near ptr 0x004774B6;

	__asm        lea    eax, [ebp-0x49FC];
	__asm        mov    [ebp-0x4A04], eax;
	__asm        jmp    near ptr 0x004774C7;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x4A08], eax;
	__asm        mov    eax, [ebp-0x4A04];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A08];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004774F1;

	__asm        jmp    near ptr 0x004774F6;

	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 199:
	__asm        jmp    near ptr 0x0047750D;

	__asm        jmp    near ptr 0x00477512;

	__asm        mov    eax, tempHelicopterBuffer.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempHelicopterBuffer.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::Compose;
// LINE 202:
	__asm        jmp    near ptr 0x00477558;

	__asm        jmp    near ptr 0x0047755D;

	__asm        mov    eax, tempTabBuffer.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempTabBuffer.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::Compose;
// LINE 205:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        add    eax, 0x1CC;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 206:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1958], eax;
	__asm        cmp    dword ptr [ebp-0x1958], 0;
	__asm        jne    _Ta1b;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1958], eax;
	__asm        jmp    near ptr 0x0047761F;

	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047764C;

	__asm        jmp    near ptr 0x00477651;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x0047767A;

	__asm        jmp    _Tba1;
_Ta1b:
	__asm        jmp    near ptr 0x00477684;

	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x196C], eax;
	__asm        cmp    dword ptr [ebp-0x196C], 0xFFFFFFFF;
	__asm        jne    _Ta7a;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1968], eax;
	__asm        mov    eax, [ebp-0x1968];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004776CF;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Ta7a;
_Ta7a:
	__asm        jmp    near ptr 0x004776E3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tac2;

	__asm        cmp    dword ptr [ebp-0x196C], 0;
	__asm        je     _Tb35;

	__asm        jmp    near ptr 0x0047770B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    ecx, [ebp-0x196C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tb35;
_Tac2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1960], eax;
	__asm        cmp    dword ptr [ebp-0x1960], 0;
	__asm        je     _Tb03;

	__asm        mov    eax, [ebp-0x196C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1960];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x195C], eax;
	__asm        jmp    _Tb0d;
_Tb03:
	__asm        mov    dword ptr [ebp-0x195C], 0;
_Tb0d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x226;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x195C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x22A], eax;
	__asm        jmp    _Tb7d;
_Tb35:
	__asm        cmp    dword ptr [ebp-0x196C], 0;
	__asm        je     _Tb7d;

	__asm        jmp    near ptr 0x004777AB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1964], eax;
	__asm        mov    eax, [ebp-0x196C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1954];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1964];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tb7d;
_Tb7d:
	__asm        mov    eax, [ebp-0x196C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x22A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004777FB;

	__asm        jmp    near ptr 0x00477800;

	__asm        jmp    _Tba1;
// LINE 207:
_Tba1:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        add    eax, 0x1D6;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 208:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2970], eax;
	__asm        cmp    dword ptr [ebp-0x2970], 0;
	__asm        jne    _Tc88;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2970], eax;
	__asm        jmp    near ptr 0x0047788C;

	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004778B9;

	__asm        jmp    near ptr 0x004778BE;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004778E7;

	__asm        jmp    _Te0e;
_Tc88:
	__asm        jmp    near ptr 0x004778F1;

	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2984], eax;
	__asm        cmp    dword ptr [ebp-0x2984], 0xFFFFFFFF;
	__asm        jne    _Tce7;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2980], eax;
	__asm        mov    eax, [ebp-0x2980];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047793C;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tce7;
_Tce7:
	__asm        jmp    near ptr 0x00477950;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Td2f;

	__asm        cmp    dword ptr [ebp-0x2984], 0;
	__asm        je     _Tda2;

	__asm        jmp    near ptr 0x00477978;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    ecx, [ebp-0x2984];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tda2;
_Td2f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2978], eax;
	__asm        cmp    dword ptr [ebp-0x2978], 0;
	__asm        je     _Td70;

	__asm        mov    eax, [ebp-0x2984];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2978];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2974], eax;
	__asm        jmp    _Td7a;
_Td70:
	__asm        mov    dword ptr [ebp-0x2974], 0;
_Td7a:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x236;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2974];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x23A], eax;
	__asm        jmp    _Tdea;
_Tda2:
	__asm        cmp    dword ptr [ebp-0x2984], 0;
	__asm        je     _Tdea;

	__asm        jmp    near ptr 0x00477A18;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x297C], eax;
	__asm        mov    eax, [ebp-0x2984];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x296C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x297C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tdea;
_Tdea:
	__asm        mov    eax, [ebp-0x2984];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x23A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00477A68;

	__asm        jmp    near ptr 0x00477A6D;

	__asm        jmp    _Te0e;
// LINE 209:
_Te0e:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        add    eax, 0x1E0;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 210:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3988], eax;
	__asm        cmp    dword ptr [ebp-0x3988], 0;
	__asm        jne    _Tef5;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x3988], eax;
	__asm        jmp    near ptr 0x00477AF9;

	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00477B26;

	__asm        jmp    near ptr 0x00477B2B;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00477B54;

	__asm        jmp    _T107b;
_Tef5:
	__asm        jmp    near ptr 0x00477B5E;

	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x399C], eax;
	__asm        cmp    dword ptr [ebp-0x399C], 0xFFFFFFFF;
	__asm        jne    _Tf54;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3998], eax;
	__asm        mov    eax, [ebp-0x3998];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00477BA9;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tf54;
_Tf54:
	__asm        jmp    near ptr 0x00477BBD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tf9c;

	__asm        cmp    dword ptr [ebp-0x399C], 0;
	__asm        je     _T100f;

	__asm        jmp    near ptr 0x00477BE5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    ecx, [ebp-0x399C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T100f;
_Tf9c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3990], eax;
	__asm        cmp    dword ptr [ebp-0x3990], 0;
	__asm        je     _Tfdd;

	__asm        mov    eax, [ebp-0x399C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3990];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x398C], eax;
	__asm        jmp    _Tfe7;
_Tfdd:
	__asm        mov    dword ptr [ebp-0x398C], 0;
_Tfe7:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x246;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x398C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24A], eax;
	__asm        jmp    _T1057;
_T100f:
	__asm        cmp    dword ptr [ebp-0x399C], 0;
	__asm        je     _T1057;

	__asm        jmp    near ptr 0x00477C85;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3994], eax;
	__asm        mov    eax, [ebp-0x399C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x3984];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3994];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1057;
_T1057:
	__asm        mov    eax, [ebp-0x399C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24A];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00477CD5;

	__asm        jmp    near ptr 0x00477CDA;

	__asm        jmp    _T107b;
// LINE 213:
_T107b:
	__asm        jmp    near ptr 0x00477CE4;

	__asm        jmp    near ptr 0x00477CE9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T10b9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x854], eax;
	__asm        jmp    _T10c8;

	__asm        jmp    _T10c8;
_T10b9:
	__asm        mov    dword ptr [ebp-0x854], 0;
	__asm        jmp    _T10c8;
_T10c8:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1CE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x222];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x854];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 215:
	__asm        jmp    near ptr 0x00477D79;

	__asm        jmp    near ptr 0x00477D7E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T114e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x858], eax;
	__asm        jmp    _T115d;

	__asm        jmp    _T115d;
_T114e:
	__asm        mov    dword ptr [ebp-0x858], 0;
	__asm        jmp    _T115d;
_T115d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x182;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x22A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x858];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 218:
	__asm        jmp    near ptr 0x00477E0E;

	__asm        jmp    near ptr 0x00477E13;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T11e3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x85C], eax;
	__asm        jmp    _T11f2;

	__asm        jmp    _T11f2;
_T11e3:
	__asm        mov    dword ptr [ebp-0x85C], 0;
	__asm        jmp    _T11f2;
_T11f2:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1DE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x232];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x85C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 220:
	__asm        jmp    near ptr 0x00477EA3;

	__asm        jmp    near ptr 0x00477EA8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1278;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x860], eax;
	__asm        jmp    _T1287;

	__asm        jmp    _T1287;
_T1278:
	__asm        mov    dword ptr [ebp-0x860], 0;
	__asm        jmp    _T1287;
_T1287:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x192;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x23A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x860];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 223:
	__asm        jmp    near ptr 0x00477F38;

	__asm        jmp    near ptr 0x00477F3D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T130d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x864], eax;
	__asm        jmp    _T131c;

	__asm        jmp    _T131c;
_T130d:
	__asm        mov    dword ptr [ebp-0x864], 0;
	__asm        jmp    _T131c;
_T131c:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1EE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x242];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x864];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 225:
	__asm        jmp    near ptr 0x00477FCD;

	__asm        jmp    near ptr 0x00477FD2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13a2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x868], eax;
	__asm        jmp    _T13b1;

	__asm        jmp    _T13b1;
_T13a2:
	__asm        mov    dword ptr [ebp-0x868], 0;
	__asm        jmp    _T13b1;
_T13b1:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1A2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x868];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 228:
	__asm        jmp    near ptr 0x00478062;

	__asm        jmp    near ptr 0x00478067;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1437;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x86C], eax;
	__asm        jmp    _T1446;

	__asm        jmp    _T1446;
_T1437:
	__asm        mov    dword ptr [ebp-0x86C], 0;
	__asm        jmp    _T1446;
_T1446:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1FE;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x252];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x86C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 229:
	__asm        mov    rectFundsText.left, 0x206;
	__asm        mov    rectFundsText.top, 0x6A;
	__asm        mov    rectFundsText.right, 0x250;
	__asm        mov    rectFundsText.bottom, 0x86;
	__asm        jmp    near ptr 0x0047811F;
// LINE 230:
	__asm        jmp    near ptr 0x00478124;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T14f4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x870], eax;
	__asm        jmp    _T1503;

	__asm        jmp    _T1503;
_T14f4:
	__asm        mov    dword ptr [ebp-0x870], 0;
	__asm        jmp    _T1503;
_T1503:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998AC;
	__asm        mov    eax, [ebp-0x870];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 232:
	__asm        jmp    near ptr 0x00478186;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1556;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x874], eax;
	__asm        jmp    _T1565;

	__asm        jmp    _T1565;
_T1556:
	__asm        mov    dword ptr [ebp-0x874], 0;
	__asm        jmp    _T1565;
_T1565:
	__asm        jmp    near ptr 0x004781CE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T159e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x878], eax;
	__asm        jmp    _T15ad;

	__asm        jmp    _T15ad;
_T159e:
	__asm        mov    dword ptr [ebp-0x878], 0;
	__asm        jmp    _T15ad;
_T15ad:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, rectFundsText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x874];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x878];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 236:
	__asm        jmp    near ptr 0x00478259;

	__asm        jmp    near ptr 0x0047825E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T162e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x87C], eax;
	__asm        jmp    _T163d;

	__asm        jmp    _T163d;
_T162e:
	__asm        mov    dword ptr [ebp-0x87C], 0;
	__asm        jmp    _T163d;
_T163d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x25A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x87C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 237:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B2], 0x206;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B6], 0xB0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BA], 0x250;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BE], 0xCC;
	__asm        jmp    near ptr 0x0047832E;
// LINE 238:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x44], ebx;
	__asm        je     _T177d;
// LINE 241:
	__asm        jmp    near ptr 0x00478363;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1733;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x880], eax;
	__asm        jmp    _T1742;

	__asm        jmp    _T1742;
_T1733:
	__asm        mov    dword ptr [ebp-0x880], 0;
	__asm        jmp    _T1742;
_T1742:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B0;
	__asm        mov    eax, [ebp-0x880];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 243:
	__asm        jmp    _T17fb;
// LINE 244:
_T177d:
	__asm        jmp    near ptr 0x004783E6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T17b6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x884], eax;
	__asm        jmp    _T17c5;

	__asm        jmp    _T17c5;
_T17b6:
	__asm        mov    dword ptr [ebp-0x884], 0;
	__asm        jmp    _T17c5;
_T17c5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B4;
	__asm        mov    eax, [ebp-0x884];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 247:
_T17fb:
	__asm        jmp    near ptr 0x00478464;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1834;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x888], eax;
	__asm        jmp    _T1843;

	__asm        jmp    _T1843;
_T1834:
	__asm        mov    dword ptr [ebp-0x888], 0;
	__asm        jmp    _T1843;
_T1843:
	__asm        jmp    near ptr 0x004784AC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T187c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88C], eax;
	__asm        jmp    _T188b;

	__asm        jmp    _T188b;
_T187c:
	__asm        mov    dword ptr [ebp-0x88C], 0;
	__asm        jmp    _T188b;
_T188b:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x888];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 250:
	__asm        jmp    near ptr 0x0047853C;

	__asm        jmp    near ptr 0x00478541;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1911;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x890], eax;
	__asm        jmp    _T1920;

	__asm        jmp    _T1920;
_T1911:
	__asm        mov    dword ptr [ebp-0x890], 0;
	__asm        jmp    _T1920;
_T1920:
	__asm        jmp    near ptr 0x00478589;

	__asm        mov    dword ptr [ebp-0x82C], 0x8E;
	__asm        mov    dword ptr [ebp-0x828], 0x1BA;
	__asm        mov    dword ptr [ebp-0x824], 0x133;
	__asm        mov    dword ptr [ebp-0x820], 0x1C7;
	__asm        jmp    near ptr 0x004785B6;

	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x82C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x890];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 262:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C2], 0;
	__asm        je     _T1a28;
// LINE 263:
	__asm        push   0xCE;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x34];
// LINE 264:
	__asm        push   0xEC;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x34];
// LINE 265:
	__asm        push   0x10A;
	__asm        push   0x1FC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x34];
// LINE 266:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 268:
_T1a28:
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        lea    ecx, tempHelicopterBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 269:
// Block end:
	__asm        jmp    _T2b1e;
// LINE 271:
// Block start:
	class CBackBuffer tempTabBuffer;
_T1a43:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x40], 0;
	__asm        je     _T1a9f;
// LINE 272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x834], eax;
	__asm        mov    eax, [ebp-0x834];
	__asm        mov    [ebp-0x830], eax;
	__asm        cmp    dword ptr [ebp-0x830], 0;
	__asm        je     _T1a9f;

	__asm        mov    ecx, [ebp-0x830];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x830];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004786FE;

	__asm        jmp    _T1a9f;
// LINE 273:
_T1a9f:
	__asm        mov    eax, SZ_CATALOG_EQUIPMENT_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x850], eax;
	__asm        jmp    near ptr 0x00478713;

	__asm        mov    eax, [ebp-0x850];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x850];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x5C;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x0047873D;
// LINE 274:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00478764;
// LINE 275:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x838], eax;
	__asm        cmp    dword ptr [ebp-0x838], 0;
	__asm        je     _T1c9a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1b5a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A18], eax;
	__asm        mov    eax, [ebp-0x4A18];
	__asm        mov    [ebp-0x4A20], eax;
	__asm        mov    eax, [ebp-0x4A20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b5a:
	__asm        jmp    near ptr 0x004787C3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004787E7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1c20;

	__asm        jmp    near ptr 0x004787FF;

	__asm        jmp    near ptr 0x00478804;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1bce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A2C], eax;
	__asm        jmp    _T1bdd;

	__asm        jmp    _T1bdd;
_T1bce:
	__asm        mov    dword ptr [ebp-0x4A2C], 0;
	__asm        jmp    _T1bdd;
_T1bdd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A30], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A34], eax;
	__asm        mov    eax, [ebp-0x4A30];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1c20;
_T1c20:
	__asm        jmp    near ptr 0x00478889;

	__asm        mov    byte ptr [ebp-0x4A1C], 0;
	__asm        jmp    near ptr 0x00478895;

	__asm        lea    eax, [ebp-0x4A1C];
	__asm        mov    [ebp-0x4A24], eax;
	__asm        jmp    near ptr 0x004788A6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x4A28], eax;
	__asm        mov    eax, [ebp-0x4A24];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A28];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004788D6;

	__asm        jmp    near ptr 0x004788DB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x838];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    _T1ca7;
_T1c9a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0;
// LINE 277:
_T1ca7:
	__asm        mov    eax, lNewTab;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14E], eax;
// LINE 278:
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetCurrentGraphicsFileNames;
// LINE 279:
	__asm        mov    eax, this;
	__asm        add    eax, 0x64;
	__asm        push   eax;
	__asm        lea    eax, sTempTabFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    near ptr 0x00478957;
// LINE 280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T1d2d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A38], eax;
	__asm        mov    eax, [ebp-0x4A38];
	__asm        mov    [ebp-0x4A40], eax;
	__asm        mov    eax, [ebp-0x4A40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1d2d:
	__asm        jmp    near ptr 0x00478996;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x004789BA;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1df3;

	__asm        jmp    near ptr 0x004789D2;

	__asm        jmp    near ptr 0x004789D7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1da1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4A4C], eax;
	__asm        jmp    _T1db0;

	__asm        jmp    _T1db0;
_T1da1:
	__asm        mov    dword ptr [ebp-0x4A4C], 0;
	__asm        jmp    _T1db0;
_T1db0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4A50], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x4A54], eax;
	__asm        mov    eax, [ebp-0x4A50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4A54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1df3;
_T1df3:
	__asm        jmp    near ptr 0x00478A5C;

	__asm        mov    byte ptr [ebp-0x4A3C], 0;
	__asm        jmp    near ptr 0x00478A68;

	__asm        lea    eax, [ebp-0x4A3C];
	__asm        mov    [ebp-0x4A44], eax;
	__asm        jmp    near ptr 0x00478A79;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x4A48], eax;
	__asm        mov    eax, [ebp-0x4A44];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x4A48];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00478AA9;

	__asm        jmp    near ptr 0x00478AAE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 283:
	__asm        jmp    near ptr 0x00478AC8;

	__asm        jmp    near ptr 0x00478ACD;

	__asm        mov    eax, tempTabBuffer.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempTabBuffer.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::Compose;
// LINE 285:
	__asm        mov    rectEquipmentDescriptionTitles[0].left, 0xA2;
	__asm        mov    rectEquipmentDescriptionTitles[0].top, 0x62;
	__asm        mov    rectEquipmentDescriptionTitles[0].right, 0x144;
	__asm        mov    rectEquipmentDescriptionTitles[0].bottom, 0x70;
	__asm        jmp    near ptr 0x00478B35;
// LINE 286:
	__asm        mov    rectEquipmentDescriptionTitles[1].left, 0xA2;
	__asm        mov    rectEquipmentDescriptionTitles[1].top, 0xCF;
	__asm        mov    rectEquipmentDescriptionTitles[1].right, 0x144;
	__asm        mov    rectEquipmentDescriptionTitles[1].bottom, 0xDE;
	__asm        jmp    near ptr 0x00478B62;
// LINE 287:
	__asm        mov    rectEquipmentDescriptionTitles[2].left, 0xA2;
	__asm        mov    rectEquipmentDescriptionTitles[2].top, 0x136;
	__asm        mov    rectEquipmentDescriptionTitles[2].right, 0x144;
	__asm        mov    rectEquipmentDescriptionTitles[2].bottom, 0x144;
	__asm        jmp    near ptr 0x00478B8F;
// LINE 288:
	__asm        mov    rectEquipmentDescriptionTitles[3].left, 0x1B6;
	__asm        mov    rectEquipmentDescriptionTitles[3].top, 0x62;
	__asm        mov    rectEquipmentDescriptionTitles[3].right, 0x24A;
	__asm        mov    rectEquipmentDescriptionTitles[3].bottom, 0x70;
	__asm        jmp    near ptr 0x00478BBC;
// LINE 289:
	__asm        mov    rectEquipmentDescriptionTitles[4].left, 0x1B6;
	__asm        mov    rectEquipmentDescriptionTitles[4].top, 0xCF;
	__asm        mov    rectEquipmentDescriptionTitles[4].right, 0x24A;
	__asm        mov    rectEquipmentDescriptionTitles[4].bottom, 0xDE;
	__asm        jmp    near ptr 0x00478BE9;
// LINE 290:
	__asm        mov    i, 0;
	__asm        jmp    _T1f9a;
_T1f94:
	__asm        inc    i;
_T1f9a:
	__asm        cmp    i, 5;
	__asm        jge    _T2046;
// LINE 293:
	__asm        jmp    near ptr 0x00478C10;

	__asm        jmp    near ptr 0x00478C15;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1fe5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x894], eax;
	__asm        jmp    _T1ff4;

	__asm        jmp    _T1ff4;
_T1fe5:
	__asm        mov    dword ptr [ebp-0x894], 0;
	__asm        jmp    _T1ff4;
_T1ff4:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        lea    eax, [ebp+eax-0x154];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x894];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 294:
	__asm        jmp    _T1f94;
// LINE 295:
_T2046:
	__asm        mov    rectEquipmentDescriptions[0].left, 0xA6;
	__asm        mov    rectEquipmentDescriptions[0].top, 0x72;
	__asm        mov    rectEquipmentDescriptions[0].right, 0x148;
	__asm        mov    rectEquipmentDescriptions[0].bottom, 0xB8;
	__asm        jmp    near ptr 0x00478CD7;
// LINE 296:
	__asm        mov    rectEquipmentDescriptions[1].left, 0xA6;
	__asm        mov    rectEquipmentDescriptions[1].top, 0xDC;
	__asm        mov    rectEquipmentDescriptions[1].right, 0x148;
	__asm        mov    rectEquipmentDescriptions[1].bottom, 0x122;
	__asm        jmp    near ptr 0x00478D04;
// LINE 297:
	__asm        mov    rectEquipmentDescriptions[2].left, 0xA6;
	__asm        mov    rectEquipmentDescriptions[2].top, 0x146;
	__asm        mov    rectEquipmentDescriptions[2].right, 0x148;
	__asm        mov    rectEquipmentDescriptions[2].bottom, 0x18E;
	__asm        jmp    near ptr 0x00478D31;
// LINE 298:
	__asm        mov    rectEquipmentDescriptions[3].left, 0x1B8;
	__asm        mov    rectEquipmentDescriptions[3].top, 0x72;
	__asm        mov    rectEquipmentDescriptions[3].right, 0x24C;
	__asm        mov    rectEquipmentDescriptions[3].bottom, 0xB8;
	__asm        jmp    near ptr 0x00478D5E;
// LINE 299:
	__asm        mov    rectEquipmentDescriptions[4].left, 0x1B8;
	__asm        mov    rectEquipmentDescriptions[4].top, 0xDC;
	__asm        mov    rectEquipmentDescriptions[4].right, 0x24C;
	__asm        mov    rectEquipmentDescriptions[4].bottom, 0x122;
	__asm        jmp    near ptr 0x00478D8B;
// LINE 300:
	__asm        mov    i, 0;
	__asm        jmp    _T213c;
_T2136:
	__asm        inc    i;
_T213c:
	__asm        cmp    i, 5;
	__asm        jge    _T245a;
// LINE 301:
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        add    eax, 0x1EA;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 302:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x49A0], eax;
	__asm        cmp    dword ptr [ebp-0x49A0], 0;
	__asm        jne    _T222c;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x49A0], eax;
	__asm        jmp    near ptr 0x00478E2E;

	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x00478E5C;

	__asm        jmp    near ptr 0x00478E61;

	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x00478E8B;

	__asm        jmp    _T23b8;
_T222c:
	__asm        jmp    near ptr 0x00478E95;

	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x49B4], eax;
	__asm        cmp    dword ptr [ebp-0x49B4], 0xFFFFFFFF;
	__asm        jne    _T228b;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x49B0], eax;
	__asm        mov    eax, [ebp-0x49B0];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00478EE0;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T228b;
_T228b:
	__asm        jmp    near ptr 0x00478EF4;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T22d5;

	__asm        cmp    dword ptr [ebp-0x49B4], 0;
	__asm        je     _T234a;

	__asm        jmp    near ptr 0x00478F1D;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    ecx, [ebp-0x49B4];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T234a;
_T22d5:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x49A8], eax;
	__asm        cmp    dword ptr [ebp-0x49A8], 0;
	__asm        je     _T2316;

	__asm        mov    eax, [ebp-0x49B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x49A8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x49A4], eax;
	__asm        jmp    _T2320;
_T2316:
	__asm        mov    dword ptr [ebp-0x49A4], 0;
_T2320:
	__asm        mov    eax, i;
	__asm        lea    ecx, [ebp+eax*8-0x17C];
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x49A4];
	__asm        mov    ecx, i;
	__asm        mov    [ebp+ecx*8-0x178], eax;
	__asm        jmp    _T2393;
_T234a:
	__asm        cmp    dword ptr [ebp-0x49B4], 0;
	__asm        je     _T2393;

	__asm        jmp    near ptr 0x00478FC0;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x49AC], eax;
	__asm        mov    eax, [ebp-0x49B4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x499C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x49AC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2393;
_T2393:
	__asm        mov    eax, [ebp-0x49B4];
	__asm        mov    ecx, i;
	__asm        mov    ecx, [ebp+ecx*8-0x178];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00479012;

	__asm        jmp    near ptr 0x00479017;

	__asm        jmp    _T23b8;
// LINE 306:
_T23b8:
	__asm        jmp    near ptr 0x00479021;

	__asm        jmp    near ptr 0x00479026;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T23f8;

	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x898], eax;
	__asm        jmp    _T2407;

	__asm        jmp    _T2407;
_T23f8:
	__asm        mov    dword ptr [ebp-0x898], 0;
	__asm        jmp    _T2407;
_T2407:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        lea    eax, [ebp+eax-0x1F0];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    eax, [ebp+eax*8-0x178];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x898];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 307:
	__asm        jmp    _T2136;
// LINE 309:
_T245a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x25E], 0x152;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x262], 0x13A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x266], 0x1CA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x26A], 0x14C;
	__asm        jmp    near ptr 0x00479103;
// LINE 312:
	__asm        jmp    near ptr 0x00479108;

	__asm        jmp    near ptr 0x0047910D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T24dd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x89C], eax;
	__asm        jmp    _T24ec;

	__asm        jmp    _T24ec;
_T24dd:
	__asm        mov    dword ptr [ebp-0x89C], 0;
	__asm        jmp    _T24ec;
_T24ec:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x25E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x292];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x89C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x26E], 0x152;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x272], 0x14A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x276], 0x1CA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x27A], 0x156;
	__asm        jmp    near ptr 0x004791DD;
// LINE 318:
	__asm        jmp    near ptr 0x004791E2;

	__asm        jmp    near ptr 0x004791E7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T25b7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A0], eax;
	__asm        jmp    _T25c6;

	__asm        jmp    _T25c6;
_T25b7:
	__asm        mov    dword ptr [ebp-0x8A0], 0;
	__asm        jmp    _T25c6;
_T25c6:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x26E;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29A];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8A0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 319:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _T26c1;
// LINE 322:
	__asm        jmp    near ptr 0x004792A7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2677;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A4], eax;
	__asm        jmp    _T2686;

	__asm        jmp    _T2686;
_T2677:
	__asm        mov    dword ptr [ebp-0x8A4], 0;
	__asm        jmp    _T2686;
_T2686:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998B8;
	__asm        mov    eax, [ebp-0x8A4];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 324:
	__asm        jmp    _T273f;
// LINE 325:
_T26c1:
	__asm        jmp    near ptr 0x0047932A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T26fa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8A8], eax;
	__asm        jmp    _T2709;

	__asm        jmp    _T2709;
_T26fa:
	__asm        mov    dword ptr [ebp-0x8A8], 0;
	__asm        jmp    _T2709;
_T2709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998BC;
	__asm        mov    eax, [ebp-0x8A8];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 327:
_T273f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B2], 0x1CC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1B6], 0x14A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BA], 0x244;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1BE], 0x15A;
	__asm        jmp    near ptr 0x004793E8;
// LINE 329:
	__asm        jmp    near ptr 0x004793ED;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T27bd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8AC], eax;
	__asm        jmp    _T27cc;

	__asm        jmp    _T27cc;
_T27bd:
	__asm        mov    dword ptr [ebp-0x8AC], 0;
	__asm        jmp    _T27cc;
_T27cc:
	__asm        jmp    near ptr 0x00479435;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2805;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B0], eax;
	__asm        jmp    _T2814;

	__asm        jmp    _T2814;
_T2805:
	__asm        mov    dword ptr [ebp-0x8B0], 0;
	__asm        jmp    _T2814;
_T2814:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x8AC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8B0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 331:
	__asm        mov    rectFundsText.left, 0x1CC;
	__asm        mov    rectFundsText.top, 0x13A;
	__asm        mov    rectFundsText.right, 0x244;
	__asm        mov    rectFundsText.bottom, 0x14C;
	__asm        jmp    near ptr 0x004794ED;
// LINE 332:
	__asm        jmp    near ptr 0x004794F2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T28c2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B4], eax;
	__asm        jmp    _T28d1;

	__asm        jmp    _T28d1;
_T28c2:
	__asm        mov    dword ptr [ebp-0x8B4], 0;
	__asm        jmp    _T28d1;
_T28d1:
	__asm        call   GetUserMoney;
	__asm        push   eax;
	__asm        push   0x5998C0;
	__asm        mov    eax, [ebp-0x8B4];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 334:
	__asm        jmp    near ptr 0x00479554;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2924;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8B8], eax;
	__asm        jmp    _T2933;

	__asm        jmp    _T2933;
_T2924:
	__asm        mov    dword ptr [ebp-0x8B8], 0;
	__asm        jmp    _T2933;
_T2933:
	__asm        jmp    near ptr 0x0047959C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T296c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15A];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8BC], eax;
	__asm        jmp    _T297b;

	__asm        jmp    _T297b;
_T296c:
	__asm        mov    dword ptr [ebp-0x8BC], 0;
	__asm        jmp    _T297b;
_T297b:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, rectFundsText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x8B8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8BC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 337:
	__asm        jmp    near ptr 0x00479627;

	__asm        jmp    near ptr 0x0047962C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T29fc;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x8C0], eax;
	__asm        jmp    _T2a0b;

	__asm        jmp    _T2a0b;
_T29fc:
	__asm        mov    dword ptr [ebp-0x8C0], 0;
	__asm        jmp    _T2a0b;
_T2a0b:
	__asm        jmp    near ptr 0x00479674;

	__asm        mov    dword ptr [ebp-0x848], 0x8E;
	__asm        mov    dword ptr [ebp-0x844], 0x1BA;
	__asm        mov    dword ptr [ebp-0x840], 0x133;
	__asm        mov    dword ptr [ebp-0x83C], 0x1C7;
	__asm        jmp    near ptr 0x004796A1;

	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x848];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x282];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C2], 0;
	__asm        je     _T2b13;
// LINE 357:
	__asm        push   0x15C;
	__asm        push   0x152;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0x34];
// LINE 358:
	__asm        push   0x17A;
	__asm        push   0x152;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0x34];
// LINE 359:
	__asm        push   0x168;
	__asm        push   0x1F0;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CA];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1CA];
	__asm        call   dword ptr [edx+0x34];
// LINE 360:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 362:
_T2b13:
	__asm        lea    ecx, tempTabBuffer<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 365:
// Block end:
_T2b1e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesTabHaveAnyStains;
	__asm        test   eax, eax;
	__asm        je     _T2c2c;
// LINE 366:
// Block start:
	class CBackBuffer tempStainImage;
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_STAIN_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 367:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 368:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::SetTransparentColor;
// LINE 369:
	__asm        mov    i, 0;
	__asm        jmp    _T2b91;
_T2b8b:
	__asm        inc    i;
_T2b91:
	__asm        cmp    i, 3;
	__asm        jge    _T2c21;
// LINE 370:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x14E];
	__asm        cmp    [ecx+eax*4+0x8C], edx;
	__asm        jne    _T2c1c;
// LINE 372:
	__asm        jmp    near ptr 0x0047982C;

	__asm        jmp    near ptr 0x00479831;

	__asm        mov    eax, tempStainImage.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempStainImage.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x9C];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0x98];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::Compose;
// LINE 374:
_T2c1c:
	__asm        jmp    _T2b8b;
// LINE 375:
_T2c21:
	__asm        lea    ecx, tempStainImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 376:
// Block end:
_T2c2c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesTabHaveAnyPaperClips;
	__asm        test   eax, eax;
	__asm        je     _T2d3a;
// LINE 377:
// Block start:
	class CBackBuffer tempPaperClipImage;
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        mov    eax, SZ_CATALOG_WINDOW_PAPER_CLIP_IMAGEFILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 378:
	__asm        lea    eax, szFilePath[0];
	__asm        push   eax;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 379:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::SetTransparentColor;
// LINE 380:
	__asm        mov    i, 0;
	__asm        jmp    _T2c9f;
_T2c99:
	__asm        inc    i;
_T2c9f:
	__asm        cmp    i, 3;
	__asm        jge    _T2d2f;
// LINE 381:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x14E];
	__asm        cmp    [ecx+eax*4+0xB0], edx;
	__asm        jne    _T2d2a;
// LINE 383:
	__asm        jmp    near ptr 0x0047993A;

	__asm        jmp    near ptr 0x0047993F;

	__asm        mov    eax, tempPaperClipImage.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempPaperClipImage.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0xC0];
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    eax, [ecx+eax*8+0xBC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::Compose;
// LINE 385:
_T2d2a:
	__asm        jmp    _T2c99;
// LINE 386:
_T2d2f:
	__asm        lea    ecx, tempPaperClipImage<CBackBuffer+0x00>;
	__asm        call   CBackBuffer::~CBackBuffer;
// LINE 387:
// Block end:
_T2d3a:
	__asm        mov    dword ptr [ebp-0x950], 5;
	__asm        lea    eax, sEquipmentDescriptions[0].c_str_ptr;
	__asm        mov    [ebp-0x954], eax;
	__asm        mov    eax, [ebp-0x950];
	__asm        shl    eax, 3;
	__asm        add    [ebp-0x954], eax;
_T2d5f:
	__asm        dec    dword ptr [ebp-0x950];
	__asm        js     _T2d82;

	__asm        sub    dword ptr [ebp-0x954], 8;
	__asm        mov    ecx, [ebp-0x954];
	__asm        call   basic_string<char>::~basic_string<char>;
	__asm        jmp    _T2d5f;
_T2d82:
	__asm        jmp    near ptr 0x004799EB;

	__asm        mov    eax, sTempTabFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempTabFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2e3a;

	__asm        mov    eax, sTempTabFileName.reference;
	__asm        mov    [ebp-0x8FC], eax;
	__asm        mov    eax, [ebp-0x8FC];
	__asm        mov    [ebp-0x8F8], eax;
	__asm        cmp    dword ptr [ebp-0x8F8], 0;
	__asm        je     _T2e3a;

	__asm        mov    eax, [ebp-0x8F8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2e17;

	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x900], eax;
	__asm        mov    eax, [ebp-0x900];
	__asm        mov    [ebp-0x904], eax;
	__asm        mov    eax, [ebp-0x904];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x8F8];
	__asm        mov    dword ptr [eax], 0;
_T2e17:
	__asm        jmp    near ptr 0x00479A80;

	__asm        jmp    near ptr 0x00479A85;

	__asm        mov    eax, [ebp-0x8F8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00479A99;

	__asm        jmp    _T2e3a;
_T2e3a:
	__asm        jmp    near ptr 0x00479AA3;

	__asm        cmp    sTempTabFileName.c_str_ptr, 0;
	__asm        je     _T2e73;

	__asm        mov    eax, sTempTabFileName.c_str_ptr;
	__asm        mov    [ebp-0x8F0], eax;
	__asm        mov    eax, [ebp-0x8F0];
	__asm        mov    [ebp-0x8F4], eax;
	__asm        mov    eax, [ebp-0x8F4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2e73:
	__asm        jmp    near ptr 0x00479ADC;

	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2f2b;

	__asm        mov    eax, sTempMainGraphicFileName.reference;
	__asm        mov    [ebp-0x914], eax;
	__asm        mov    eax, [ebp-0x914];
	__asm        mov    [ebp-0x910], eax;
	__asm        cmp    dword ptr [ebp-0x910], 0;
	__asm        je     _T2f2b;

	__asm        mov    eax, [ebp-0x910];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2f08;

	__asm        mov    eax, [ebp-0x910];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x918], eax;
	__asm        mov    eax, [ebp-0x918];
	__asm        mov    [ebp-0x91C], eax;
	__asm        mov    eax, [ebp-0x91C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x910];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x910];
	__asm        mov    dword ptr [eax], 0;
_T2f08:
	__asm        jmp    near ptr 0x00479B71;

	__asm        jmp    near ptr 0x00479B76;

	__asm        mov    eax, [ebp-0x910];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00479B8A;

	__asm        jmp    _T2f2b;
_T2f2b:
	__asm        jmp    near ptr 0x00479B94;

	__asm        cmp    sTempMainGraphicFileName.c_str_ptr, 0;
	__asm        je     _T2f64;

	__asm        mov    eax, sTempMainGraphicFileName.c_str_ptr;
	__asm        mov    [ebp-0x908], eax;
	__asm        mov    eax, [ebp-0x908];
	__asm        mov    [ebp-0x90C], eax;
	__asm        mov    eax, [ebp-0x90C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2f64:
	__asm        jmp    near ptr 0x00479BCD;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T301c;

	__asm        mov    eax, sTempTabFilePath.reference;
	__asm        mov    [ebp-0x92C], eax;
	__asm        mov    eax, [ebp-0x92C];
	__asm        mov    [ebp-0x928], eax;
	__asm        cmp    dword ptr [ebp-0x928], 0;
	__asm        je     _T301c;

	__asm        mov    eax, [ebp-0x928];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ff9;

	__asm        mov    eax, [ebp-0x928];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x930], eax;
	__asm        mov    eax, [ebp-0x930];
	__asm        mov    [ebp-0x934], eax;
	__asm        mov    eax, [ebp-0x934];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x928];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x928];
	__asm        mov    dword ptr [eax], 0;
_T2ff9:
	__asm        jmp    near ptr 0x00479C62;

	__asm        jmp    near ptr 0x00479C67;

	__asm        mov    eax, [ebp-0x928];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00479C7B;

	__asm        jmp    _T301c;
_T301c:
	__asm        jmp    near ptr 0x00479C85;

	__asm        cmp    sTempTabFilePath.c_str_ptr, 0;
	__asm        je     _T3055;

	__asm        mov    eax, sTempTabFilePath.c_str_ptr;
	__asm        mov    [ebp-0x920], eax;
	__asm        mov    eax, [ebp-0x920];
	__asm        mov    [ebp-0x924], eax;
	__asm        mov    eax, [ebp-0x924];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3055:
	__asm        jmp    near ptr 0x00479CBE;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T310d;

	__asm        mov    eax, sTempMainGraphicFilePath.reference;
	__asm        mov    [ebp-0x944], eax;
	__asm        mov    eax, [ebp-0x944];
	__asm        mov    [ebp-0x940], eax;
	__asm        cmp    dword ptr [ebp-0x940], 0;
	__asm        je     _T310d;

	__asm        mov    eax, [ebp-0x940];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T30ea;

	__asm        mov    eax, [ebp-0x940];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x948], eax;
	__asm        mov    eax, [ebp-0x948];
	__asm        mov    [ebp-0x94C], eax;
	__asm        mov    eax, [ebp-0x94C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x940];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x940];
	__asm        mov    dword ptr [eax], 0;
_T30ea:
	__asm        jmp    near ptr 0x00479D53;

	__asm        jmp    near ptr 0x00479D58;

	__asm        mov    eax, [ebp-0x940];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00479D6C;

	__asm        jmp    _T310d;
_T310d:
	__asm        jmp    near ptr 0x00479D76;

	__asm        cmp    sTempMainGraphicFilePath.c_str_ptr, 0;
	__asm        je     _T3146;

	__asm        mov    eax, sTempMainGraphicFilePath.c_str_ptr;
	__asm        mov    [ebp-0x938], eax;
	__asm        mov    eax, [ebp-0x938];
	__asm        mov    [ebp-0x93C], eax;
	__asm        mov    eax, [ebp-0x93C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T3146:
	__asm        jmp    near ptr 0x00479DAF;

	__asm        jmp    near ptr 0x00479DB4;
}

// FUNCTION: COPTER_D 0x00479dbb
void CatalogWindow::DrawCurrentEquipmentSelection() {
	class MRect rectOutline;
	static const int32_t nColorDirection = { /* <data@0x00599838> */ };
	const int32_t nColorArraySize;
	static const int32_t nColorArrayCurrentIndex = { /* <data@0x00599834> */ };
	unsigned long lIndexArray[6];

// LINE 397:
	__asm        jmp    near ptr 0x00479DD2;

	__asm        jmp    near ptr 0x00479DD7;
// LINE 398:
	__asm        mov    nColorArraySize, 6;
// LINE 399:
	__asm        mov    lIndexArray[0], 0x4F;
	__asm        mov    lIndexArray[1], 0x5B;
	__asm        mov    lIndexArray[2], 0x90;
	__asm        mov    lIndexArray[3], 0x54;
	__asm        mov    lIndexArray[4], 0x9F;
	__asm        mov    lIndexArray[5], 0xC7;
// LINE 404:
	__asm        mov    eax, nColorDirection;
	__asm        add    nColorArrayCurrentIndex, eax;
// LINE 405:
	__asm        cmp    nColorArrayCurrentIndex, 5;
	__asm        je     _T72;

	__asm        cmp    nColorArrayCurrentIndex, 0;
	__asm        jne    _T7e;
// LINE 406:
_T72:
	__asm        mov    eax, nColorDirection;
	__asm        neg    eax;
	__asm        mov    nColorDirection, eax;
// LINE 407:
_T7e:
	__asm        mov    eax, nColorArrayCurrentIndex;
	__asm        mov    eax, [ebp+eax*4-0x18];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx+0x44], eax;
	__asm        jmp    near ptr 0x00479E5F;
// LINE 409:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 0;
	__asm        je     _Tca;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 3;
	__asm        jne    _T1c5;
// LINE 411:
_Tca:
	__asm        mov    rectOutline.left, 0x3D;
	__asm        mov    rectOutline.top, 0x65;
	__asm        mov    rectOutline.right, 0x140;
	__asm        mov    rectOutline.bottom, 0xC3;
	__asm        jmp    near ptr 0x00479EA6;

	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x74], eax;
// LINE 414:
	__asm        jmp    near ptr 0x00479EC3;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00479EE0;

	__asm        push   3;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 415:
	__asm        mov    rectOutline.left, 0x149;
	__asm        mov    rectOutline.top, 0x65;
	__asm        mov    rectOutline.right, 0x24E;
	__asm        mov    rectOutline.bottom, 0xC3;
	__asm        jmp    near ptr 0x00479F1E;

	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x84], eax;
// LINE 418:
	__asm        jmp    near ptr 0x00479F3E;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x00479F5E;

	__asm        push   3;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 421:
	__asm        jmp    _T26b;
_T1c5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 1;
	__asm        jne    _T1fe;
// LINE 422:
	__asm        mov    rectOutline.left, 0x3D;
	__asm        mov    rectOutline.top, 0xCF;
	__asm        mov    rectOutline.right, 0x140;
	__asm        mov    rectOutline.bottom, 0x12D;
	__asm        jmp    near ptr 0x00479FB4;
// LINE 423:
	__asm        jmp    _T26b;
_T1fe:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 2;
	__asm        jne    _T237;
// LINE 424:
	__asm        mov    rectOutline.left, 0x3D;
	__asm        mov    rectOutline.top, 0x137;
	__asm        mov    rectOutline.right, 0x140;
	__asm        mov    rectOutline.bottom, 0x199;
	__asm        jmp    near ptr 0x00479FED;
// LINE 425:
	__asm        jmp    _T26b;
_T237:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x152], 4;
	__asm        jne    _T26b;
// LINE 426:
	__asm        mov    rectOutline.left, 0x149;
	__asm        mov    rectOutline.top, 0xCF;
	__asm        mov    rectOutline.right, 0x24E;
	__asm        mov    rectOutline.bottom, 0x12D;
	__asm        jmp    _T26b;
// LINE 428:
_T26b:
	__asm        mov    eax, rectOutline.bottom;
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, rectOutline.right;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, rectOutline.top;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, rectOutline.left;
	__asm        mov    [ebp-0x94], eax;
// LINE 430:
	__asm        jmp    near ptr 0x0047A04F;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x0047A078;

	__asm        push   3;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x5C];
// LINE 431:
	__asm        jmp    near ptr 0x0047A09A;
}

// FUNCTION: COPTER_D 0x0047a09f
void CatalogWindow::SetNewEquipmentSelection(long lNewEquipmentSelection) {
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	class MRect rectFill;

// LINE 443:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 444:
	__asm        jmp    near ptr 0x0047A0B8;

	__asm        jmp    near ptr 0x0047A0BD;
// LINE 446:
	__asm        mov    eax, this;
	__asm        mov    ecx, lNewEquipmentSelection;
	__asm        cmp    [eax+0x152], ecx;
	__asm        je     _T263;
// LINE 447:
	__asm        mov    eax, lNewEquipmentSelection;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x152], eax;
// LINE 448:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _Td1;
// LINE 451:
	__asm        jmp    near ptr 0x0047A107;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T93;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9f;

	__asm        jmp    _T9f;
_T93:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentCurrentValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998C4;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 453:
	__asm        jmp    _T13a;
// LINE 454:
_Td1:
	__asm        jmp    near ptr 0x0047A175;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T101;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T10d;

	__asm        jmp    _T10d;
_T101:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T10d;
_T10d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x5998C8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 456:
_T13a:
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        lea    ecx, rectFill.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 457:
	__asm        sub    rectFill.bottom, 2;
// LINE 458:
	__asm        lea    eax, rectFill.left;
	__asm        push   eax;
	__asm        push   0x15;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 459:
	__asm        mov    byte ptr [ebp-0x18], 0x2F;
	__asm        mov    byte ptr [ebp-0x17], 0x2F;
	__asm        mov    byte ptr [ebp-0x16], 0x2F;
	__asm        jmp    near ptr 0x0047A226;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0047A23D;
// LINE 461:
	__asm        jmp    near ptr 0x0047A242;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1da;

	__asm        jmp    _T1da;
_T1ce:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T1da;
_T1da:
	__asm        jmp    near ptr 0x0047A27E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T20a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x162];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T216;

	__asm        jmp    _T216;
_T20a:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T216;
_T216:
	__asm        mov    eax, this;
	__asm        add    eax, 0x166;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x1B2;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x48];
// LINE 463:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetButtonStates;
// LINE 464:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 466:
_T263:
	__asm        jmp    near ptr 0x0047A307;
}

// FUNCTION: COPTER_D 0x0047a30e
int32_t CatalogWindow::DoesTabHaveAnyStains(long lTab) {
	int32_t i;

// LINE 477:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 3;
	__asm        jge    _T4a;
// LINE 478:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, lTab;
	__asm        cmp    [ecx+eax*4+0x8C], edx;
	__asm        jne    _T45;
// LINE 479:
	__asm        mov    eax, 1;
	__asm        jmp    _T51;
// LINE 480:
_T45:
	__asm        jmp    _T18;
// LINE 481:
_T4a:
	__asm        xor    eax, eax;
	__asm        jmp    _T51;
// LINE 482:
_T51:
}

// FUNCTION: COPTER_D 0x0047a366
int32_t CatalogWindow::DoesTabHaveAnyPaperClips(long lTab) {
	int32_t i;

// LINE 491:
	__asm        mov    i, 0;
	__asm        jmp    _T1b;
_T18:
	__asm        inc    i;
_T1b:
	__asm        cmp    i, 3;
	__asm        jge    _T4a;
// LINE 492:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    edx, lTab;
	__asm        cmp    [ecx+eax*4+0xB0], edx;
	__asm        jne    _T45;
// LINE 493:
	__asm        mov    eax, 1;
	__asm        jmp    _T51;
// LINE 494:
_T45:
	__asm        jmp    _T18;
// LINE 495:
_T4a:
	__asm        xor    eax, eax;
	__asm        jmp    _T51;
// LINE 496:
_T51:
}

// FUNCTION: COPTER_D 0x0047a3be
void CatalogWindow::GetCurrentGraphicsFileNames(class basic_string<char>& sMainGraphicFileName, class basic_string<char>& sTabFileName) {
	char * szTabFileNames[9];
	char * szHelicopterFileNames[9];

// LINE 506:
	__asm        mov    szHelicopterFileNames[0], 0x5998CC;
	__asm        mov    szHelicopterFileNames[1], 0x5998DC;
	__asm        mov    szHelicopterFileNames[2], 0x5998E8;
	__asm        mov    szHelicopterFileNames[3], 0x5998F8;
// LINE 507:
	__asm        mov    szHelicopterFileNames[4], 0x599908;
	__asm        mov    szHelicopterFileNames[5], 0x599914;
	__asm        mov    szHelicopterFileNames[6], 0x599924;
	__asm        mov    szHelicopterFileNames[7], 0x599930;
	__asm        mov    szHelicopterFileNames[8], 0x59993C;
// LINE 509:
	__asm        mov    szTabFileNames[0], 0x599940;
	__asm        mov    szTabFileNames[1], 0x599950;
	__asm        mov    szTabFileNames[2], 0x599960;
	__asm        mov    szTabFileNames[3], 0x599970;
// LINE 510:
	__asm        mov    szTabFileNames[4], 0x599980;
	__asm        mov    szTabFileNames[5], 0x599990;
	__asm        mov    szTabFileNames[6], 0x5999A0;
	__asm        mov    szTabFileNames[7], 0x5999B0;
	__asm        mov    szTabFileNames[8], 0x5999C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        mov    eax, [ebp+eax*4-0x24];
	__asm        mov    [ebp-0x7C], eax;
// LINE 512:
	__asm        jmp    near ptr 0x0047A466;

	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x78], eax;
	__asm        cmp    dword ptr [ebp-0x78], 0xFFFFFFFF;
	__asm        jne    _Tf3;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A4A2;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _Tf3;
_Tf3:
	__asm        jmp    near ptr 0x0047A4B6;

	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T129;

	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T2aa;

	__asm        jmp    near ptr 0x0047A4D5;

	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x78];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2aa;
_T129:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T204;

	__asm        cmp    dword ptr [ebp-0x78], 0xFFFFFFFF;
	__asm        jne    _T17c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A52B;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T17c;
_T17c:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1e1;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0047A59A;

	__asm        jmp    _T1ea;
_T1e1:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0;
_T1ea:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047A5B7;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T20b;
_T204:
	__asm        mov    dword ptr [ebp-0x4C], 0;
_T20b:
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T297;

	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T297;

	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T277;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax], 0;
_T277:
	__asm        jmp    near ptr 0x0047A63A;

	__asm        jmp    near ptr 0x0047A63F;

	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A650;

	__asm        jmp    _T297;
_T297:
	__asm        jmp    near ptr 0x0047A65A;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, sMainGraphicFileName;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T2dd;
_T2aa:
	__asm        cmp    dword ptr [ebp-0x78], 0;
	__asm        je     _T2dd;

	__asm        jmp    near ptr 0x0047A677;

	__asm        mov    eax, sMainGraphicFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2dd;
_T2dd:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    ecx, sMainGraphicFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047A6AC;

	__asm        jmp    near ptr 0x0047A6B1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        mov    eax, [ebp+eax*4-0x48];
	__asm        mov    [ebp-0xB0], eax;
// LINE 513:
	__asm        jmp    near ptr 0x0047A6CC;

	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0xFFFFFFFF;
	__asm        jne    _T368;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A717;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T368;
_T368:
	__asm        jmp    near ptr 0x0047A72B;

	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3a4;

	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T58e;

	__asm        jmp    near ptr 0x0047A74D;

	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xAC];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T58e;
_T3a4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T4c1;

	__asm        cmp    dword ptr [ebp-0xAC], 0xFFFFFFFF;
	__asm        jne    _T406;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A7B5;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T406;
_T406:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T495;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0047A84E;

	__asm        jmp    _T4a1;
_T495:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax], 0;
_T4a1:
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0047A871;

	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T4c8;
_T4c1:
	__asm        mov    dword ptr [ebp-0x80], 0;
_T4c8:
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T57b;

	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T57b;

	__asm        mov    eax, [ebp-0x90];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T558;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    dword ptr [eax], 0;
_T558:
	__asm        jmp    near ptr 0x0047A91B;

	__asm        jmp    near ptr 0x0047A920;

	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0047A934;

	__asm        jmp    _T57b;
_T57b:
	__asm        jmp    near ptr 0x0047A93E;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, sTabFileName;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5d0;
_T58e:
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T5d0;

	__asm        jmp    near ptr 0x0047A95E;

	__asm        mov    eax, sTabFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5d0;
_T5d0:
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    ecx, sTabFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0047A9A2;

	__asm        jmp    near ptr 0x0047A9A7;
// LINE 514:
	__asm        jmp    near ptr 0x0047A9AC;
}

// FUNCTION: COPTER_D 0x0047a9b3
int32_t CatalogWindow::ReadPalette(struct SparkalColor* pColorTable) {
// LINE 522:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x64], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T34:
	__asm        jmp    near ptr 0x0047A9EC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x64], eax;
	__asm        jmp    near ptr 0x0047AA0A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Td0;

	__asm        jmp    near ptr 0x0047AA1F;

	__asm        jmp    near ptr 0x0047AA24;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T96;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta2;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    near ptr 0x0047AA88;

	__asm        mov    byte ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0047AA91;

	__asm        lea    eax, [ebp-8];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0047AA9C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x64];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0047AABD;

	__asm        jmp    near ptr 0x0047AAC2;

	__asm        mov    eax, pColorTable;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x64];
	__asm        push   eax;
	__asm        call   CBackBuffer::GetPaletteFromImage;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T134;

	__asm        mov    eax, 1;
	__asm        jmp    _T136;
_T134:
	__asm        xor    eax, eax;
_T136:
	__asm        jmp    near ptr 0x0047AAEE;
// LINE 523:
}

// FUNCTION: COPTER_D 0x0047aaf5
int32_t CatalogWindow::CreateImage(int32_t __formal) {
// LINE 530:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 531:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 0xFFFFFFFF;
	__asm        jne    _T35;
// LINE 532:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 533:
	__asm        jmp    _T47;
// LINE 534:
_T35:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 535:
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x0047AB47;
// LINE 536:
}

// FUNCTION: COPTER_D 0x0047ab4e
int32_t CatalogWindow::ComposeSelf() {
// LINE 544:
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::ComposeSelf;
// LINE 547:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T2c;
// LINE 548:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DrawCurrentEquipmentSelection;
// LINE 549:
_T2c:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047AB84;
// LINE 550:
}

// FUNCTION: COPTER_D 0x0047ab89
int32_t CatalogWindow::DoesCursorHitEquipmentSelection(long lXPosition, long lYPosition, long& lEquipment) {
	int32_t i;
	const class MRect rectEquipment[5];

// LINE 560:
	__asm        jmp    near ptr 0x0047AB9A;

	__asm        mov    rectEquipment[0].left, 0x3A;
	__asm        mov    rectEquipment[0].top, 0x62;
	__asm        mov    rectEquipment[0].right, 0x146;
	__asm        mov    rectEquipment[0].bottom, 0xC8;
	__asm        jmp    near ptr 0x0047ABBB;

	__asm        jmp    near ptr 0x0047ABC0;

	__asm        mov    rectEquipment[1].left, 0x3A;
	__asm        mov    rectEquipment[1].top, 0xCD;
	__asm        mov    rectEquipment[1].right, 0x146;
	__asm        mov    rectEquipment[1].bottom, 0x12F;
	__asm        jmp    near ptr 0x0047ABE1;

	__asm        jmp    near ptr 0x0047ABE6;

	__asm        mov    rectEquipment[2].left, 0x3A;
	__asm        mov    rectEquipment[2].top, 0x136;
	__asm        mov    rectEquipment[2].right, 0x146;
	__asm        mov    rectEquipment[2].bottom, 0x19A;
	__asm        jmp    near ptr 0x0047AC07;
// LINE 561:
	__asm        jmp    near ptr 0x0047AC0C;

	__asm        mov    rectEquipment[3].left, 0x148;
	__asm        mov    rectEquipment[3].top, 0x62;
	__asm        mov    rectEquipment[3].right, 0x250;
	__asm        mov    rectEquipment[3].bottom, 0xC8;
	__asm        jmp    near ptr 0x0047AC2D;

	__asm        jmp    near ptr 0x0047AC32;

	__asm        mov    rectEquipment[4].left, 0x148;
	__asm        mov    rectEquipment[4].top, 0xCD;
	__asm        mov    rectEquipment[4].right, 0x250;
	__asm        mov    rectEquipment[4].bottom, 0x12F;
	__asm        jmp    near ptr 0x0047AC53;
// LINE 563:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        je     _Te1;
// LINE 564:
	__asm        xor    eax, eax;
	__asm        jmp    _T17d;
// LINE 566:
_Te1:
	__asm        mov    i, 0;
	__asm        jmp    _Tf0;
_Ted:
	__asm        inc    i;
_Tf0:
	__asm        cmp    i, 5;
	__asm        jge    _T176;
// LINE 567:
	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [ebp+eax-0x50], ecx;
	__asm        jg     _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [ebp+eax-0x4C], ecx;
	__asm        jg     _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [ebp+eax-0x48], ecx;
	__asm        jle    _T14b;

	__asm        mov    eax, i;
	__asm        shl    eax, 4;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [ebp+eax-0x44], ecx;
	__asm        jle    _T14b;

	__asm        jmp    _T150;
_T14b:
	__asm        jmp    _T171;
_T150:
	__asm        jmp    _T15f;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T171;
// LINE 568:
_T15f:
	__asm        mov    eax, i;
	__asm        mov    ecx, lEquipment;
	__asm        mov    [ecx], eax;
// LINE 569:
	__asm        mov    eax, 1;
	__asm        jmp    _T17d;
// LINE 571:
_T171:
	__asm        jmp    _Ted;
// LINE 572:
_T176:
	__asm        xor    eax, eax;
	__asm        jmp    _T17d;
// LINE 573:
_T17d:
}

// FUNCTION: COPTER_D 0x0047ad0d
int32_t CatalogWindow::DoesCursorHitTab(long lXPosition, long lYPosition, long& lTab) {
// LINE 581:
	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x74], ecx;
	__asm        jg     _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x78], ecx;
	__asm        jg     _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lXPosition;
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jle    _T50;

	__asm        mov    eax, this;
	__asm        mov    ecx, lYPosition;
	__asm        cmp    [eax+0x80], ecx;
	__asm        jle    _T50;

	__asm        jmp    _T55;
_T50:
	__asm        jmp    _Tb3;
_T55:
	__asm        jmp    _T64;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tb3;
// LINE 582:
_T64:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        add    eax, 0x17;
	__asm        cmp    eax, lYPosition;
	__asm        jg     _T84;
// LINE 583:
	__asm        mov    eax, lTab;
	__asm        mov    dword ptr [eax], 8;
// LINE 584:
	__asm        jmp    _Ta9;
// LINE 585:
_T84:
	__asm        jmp    near ptr 0x0047AD96;

	__asm        mov    eax, lXPosition;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, this;
	__asm        sub    ecx, [edx+0x74];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, lTab;
	__asm        mov    [ecx], eax;
// LINE 586:
_Ta9:
	__asm        mov    eax, 1;
	__asm        jmp    _Tba;
// LINE 588:
_Tb3:
	__asm        xor    eax, eax;
	__asm        jmp    _Tba;
// LINE 589:
_Tba:
}

// FUNCTION: COPTER_D 0x0047adce
long CatalogWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 600:
	__asm        cmp    lKey, 0x31;
	__asm        jl     _T2f;

	__asm        cmp    lKey, 0x39;
	__asm        jg     _T2f;
// LINE 601:
	__asm        mov    eax, lKey;
	__asm        sub    eax, 0x31;
	__asm        push   eax;
	__asm        call   S3HeliMakeHelicopter;
	__asm        add    esp, 4;
// LINE 608:
_T2f:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047AE07;
// LINE 609:
}

// FUNCTION: COPTER_D 0x0047ae0e
long CatalogWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
	long lEquipment;
	long lTab;

// LINE 619:
	__asm        lea    eax, lTab;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesCursorHitTab;
	__asm        test   eax, eax;
	__asm        je     _T55;
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    ecx, lTab;
	__asm        cmp    [eax+0x14E], ecx;
	__asm        je     _T55;
// LINE 621:
	__asm        mov    eax, lTab;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 622:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 625:
_T55:
	__asm        lea    eax, lEquipment;
	__asm        push   eax;
	__asm        mov    eax, nCursorY;
	__asm        push   eax;
	__asm        mov    eax, nCursorX;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoesCursorHitEquipmentSelection;
	__asm        test   eax, eax;
	__asm        je     _T7d;
// LINE 626:
	__asm        mov    eax, lEquipment;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SetNewEquipmentSelection;
// LINE 627:
_T7d:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047AE95;
// LINE 628:
}

// FUNCTION: COPTER_D 0x0047ae9c
long CatalogWindow::DoCursorUp(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 636:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047AEB2;
// LINE 637:
}

// FUNCTION: COPTER_D 0x0047aeb9
long CatalogWindow::DoCursorMove(long nCursorX, long nCursorY) {
// LINE 646:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0047AECF;
// LINE 647:
}

// FUNCTION: COPTER_D 0x0047aed6
void CatalogWindow::SetButtonStates() {
	const struct tagUserPersonalInfo* currentUserPersonalInfo;

// LINE 655:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 657:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T164;
// LINE 658:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        cmp    eax, 3;
	__asm        jne    _Tcb;
// LINE 664:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _T59;

	__asm        mov    eax, currentUserPersonalInfo;
	__asm        cmp    dword ptr [eax+0x48], 0xA;
	__asm        jge    _T92;
// LINE 666:
_T59:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 667:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 669:
	__asm        jmp    _Tc6;
// LINE 670:
_T92:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 671:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 674:
_Tc6:
	__asm        jmp    _T15f;
_Tcb:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x48], ebx;
	__asm        je     _T12b;
// LINE 675:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 676:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 678:
	__asm        jmp    _T15f;
// LINE 679:
_T12b:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 683:
_T15f:
	__asm        jmp    _T1f8;
// LINE 684:
_T164:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        test   [eax+0x44], ebx;
	__asm        je     _T1c4;
// LINE 685:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD4];
// LINE 686:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD0];
// LINE 688:
	__asm        jmp    _T1f8;
// LINE 689:
_T1c4:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C2];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C2];
	__asm        call   dword ptr [edx+0xD0];
// LINE 690:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1C6];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C6];
	__asm        call   dword ptr [edx+0xD4];
// LINE 693:
_T1f8:
	__asm        jmp    near ptr 0x0047B0D3;
}

// FUNCTION: COPTER_D 0x0047b0d8
int32_t CatalogWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
	long lMyMessage[2];

// LINE 704:
	__asm        cmp    lWindowID, 1;
	__asm        je     _T20;

	__asm        cmp    lWindowID, 2;
	__asm        jne    _T118;
// LINE 706:
_T20:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 7;
	__asm        jle    _T3c;

	__asm        mov    lMyMessage[0], 1;
	__asm        jmp    _T43;
_T3c:
	__asm        mov    lMyMessage[0], 0;
// LINE 707:
_T43:
	__asm        cmp    lMyMessage[0], 1;
	__asm        jne    _T70;
// LINE 708:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lMyMessage[1], eax;
// LINE 709:
	__asm        jmp    _T8e;
// LINE 710:
_T70:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lMyMessage[1], eax;
// LINE 712:
_T8e:
	__asm        cmp    lWindowID, 1;
	__asm        jne    _Td8;
// LINE 713:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoCatalogWindowBuy;
	__asm        test   eax, eax;
	__asm        je     _Tc9;
// LINE 714:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 715:
_Tc9:
	__asm        mov    eax, 1;
	__asm        jmp    _T154;
// LINE 717:
	__asm        jmp    _T113;
// LINE 718:
_Td8:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::DoCatalogWindowSell;
	__asm        test   eax, eax;
	__asm        je     _T109;
// LINE 719:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 720:
_T109:
	__asm        mov    eax, 1;
	__asm        jmp    _T154;
// LINE 723:
_T113:
	__asm        jmp    _T14d;
_T118:
	__asm        cmp    lWindowID, 3;
	__asm        jne    _T14d;
// LINE 724:
	__asm        lea    eax, lMyMessage[0];
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 725:
	__asm        mov    eax, 1;
	__asm        jmp    _T154;
// LINE 727:
_T14d:
	__asm        xor    eax, eax;
	__asm        jmp    _T154;
// LINE 728:
_T154:
}

// FUNCTION: COPTER_D 0x0047b233
long CatalogWindow::GetHelicopterFromTab(long lTab) {
	const long lHelicopterTabs[8];

// LINE 736:
	__asm        mov    lHelicopterTabs[0], 3;
	__asm        mov    lHelicopterTabs[1], 5;
	__asm        mov    lHelicopterTabs[2], 1;
	__asm        mov    lHelicopterTabs[3], 6;
// LINE 737:
	__asm        mov    lHelicopterTabs[4], 8;
	__asm        mov    lHelicopterTabs[5], 4;
	__asm        mov    lHelicopterTabs[6], 7;
	__asm        mov    lHelicopterTabs[7], 0;
// LINE 738:
	__asm        mov    eax, lTab;
	__asm        mov    eax, [ebp+eax*4-0x20];
	__asm        jmp    near ptr 0x0047B283;
// LINE 739:
}

// FUNCTION: COPTER_D 0x0047b28a
long CatalogWindow::GetEquipmentFromSelectionIndex(long lSelectionIndex) {
	const long lEquipmentChoices[5];

// LINE 747:
	__asm        mov    lEquipmentChoices[0], 0;
	__asm        mov    lEquipmentChoices[1], 1;
	__asm        mov    lEquipmentChoices[2], 3;
// LINE 748:
	__asm        mov    lEquipmentChoices[3], 0;
	__asm        mov    lEquipmentChoices[4], 2;
// LINE 749:
	__asm        mov    eax, lSelectionIndex;
	__asm        mov    eax, [ebp+eax*4-0x14];
	__asm        jmp    near ptr 0x0047B2C5;
// LINE 750:
}

// FUNCTION: COPTER_D 0x0047b2cc
int32_t CatalogWindow::CanUserBuy() {
	long lCurrentValue;
	long lCurrentFunds;

// LINE 766:
	__asm        call   GetUserMoney;
	__asm        mov    lCurrentFunds, eax;
// LINE 767:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T47;
// LINE 768:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 769:
	__asm        jmp    _T65;
// LINE 770:
_T47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        push   eax;
	__asm        call   S3HeliGetNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 771:
_T65:
	__asm        mov    eax, lCurrentValue;
	__asm        cmp    lCurrentFunds, eax;
	__asm        jl     _T7b;

	__asm        mov    eax, 1;
	__asm        jmp    _T7d;
_T7b:
	__asm        xor    eax, eax;
_T7d:
	__asm        jmp    near ptr 0x0047B34E;
// LINE 772:
}

// FUNCTION: COPTER_D 0x0047b353
int32_t CatalogWindow::CanUserSell() {
	const struct tagUserPersonalInfo* currentUserPersonalInfo;

// LINE 784:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 786:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T51;
// LINE 787:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        and    ebx, [eax+0x48];
	__asm        mov    eax, ebx;
	__asm        jmp    _T79;
// LINE 788:
	__asm        jmp    _T79;
// LINE 789:
_T51:
	__asm        mov    ebx, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    cl, al;
	__asm        shl    ebx, cl;
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        and    ebx, [eax+0x44];
	__asm        mov    eax, ebx;
	__asm        jmp    _T79;
// LINE 790:
_T79:
}

// FUNCTION: COPTER_D 0x0047b3d1
int32_t CatalogWindow::DoCatalogWindowBuy() {
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	long lCurrentValue;
	long lCurrentHelicopter;
	long lCurrentFunds;
	long lFixedCurrentEquipmentSelection;

// LINE 804:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 807:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CanUserBuy;
	__asm        test   eax, eax;
	__asm        jne    _T2b;
// LINE 808:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfa;
// LINE 810:
_T2b:
	__asm        call   GetUserMoney;
	__asm        mov    lCurrentFunds, eax;
// LINE 811:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lFixedCurrentEquipmentSelection, eax;
// LINE 812:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T90;
// LINE 813:
	__asm        mov    eax, lFixedCurrentEquipmentSelection;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 814:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lFixedCurrentEquipmentSelection);
	__asm        shl    eax, cl;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        or     [ecx+0x48], eax;
// LINE 815:
	__asm        cmp    lFixedCurrentEquipmentSelection, 3;
	__asm        jne    _T8b;
// LINE 816:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        mov    dword ptr [eax+0x54], 0xA;
// LINE 818:
_T8b:
	__asm        jmp    _Td0;
// LINE 819:
_T90:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lCurrentHelicopter, eax;
// LINE 820:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliGetNewValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 821:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliMakeHelicopter;
	__asm        add    esp, 4;
// LINE 822:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHelicopter);
	__asm        shl    eax, cl;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        or     [ecx+0x44], eax;
// LINE 824:
_Td0:
	__asm        mov    eax, lCurrentValue;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 825:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 826:
	__asm        mov    eax, 1;
	__asm        jmp    _Tfa;
// LINE 827:
_Tfa:
}

// FUNCTION: COPTER_D 0x0047b4d0
int32_t CatalogWindow::DoCatalogWindowSell() {
	struct tagUserPersonalInfo* currentUserPersonalInfo;
	long lCurrentValue;
	long lCurrentHelicopter;
	long lCurrentFunds;
	long lFixedCurrentEquipmentSelection;

// LINE 836:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    currentUserPersonalInfo, eax;
// LINE 840:
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::CanUserSell;
	__asm        test   eax, eax;
	__asm        jne    _T2b;
// LINE 841:
	__asm        xor    eax, eax;
	__asm        jmp    _Tfc;
// LINE 843:
_T2b:
	__asm        call   GetUserMoney;
	__asm        mov    lCurrentFunds, eax;
// LINE 844:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x152];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetEquipmentFromSelectionIndex;
	__asm        mov    lFixedCurrentEquipmentSelection, eax;
// LINE 846:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14E], 8;
	__asm        jne    _T92;
// LINE 847:
	__asm        mov    eax, lFixedCurrentEquipmentSelection;
	__asm        push   eax;
	__asm        call   S3HeliGetEquipmentCurrentValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 848:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lFixedCurrentEquipmentSelection);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        and    [ecx+0x48], eax;
// LINE 849:
	__asm        cmp    lFixedCurrentEquipmentSelection, 3;
	__asm        jne    _T8d;
// LINE 850:
	__asm        mov    eax, currentUserPersonalInfo;
	__asm        mov    dword ptr [eax+0x54], 0;
// LINE 852:
_T8d:
	__asm        jmp    _Td4;
// LINE 853:
_T92:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::GetHelicopterFromTab;
	__asm        mov    lCurrentHelicopter, eax;
// LINE 854:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliGetCurrentValue;
	__asm        add    esp, 4;
	__asm        mov    lCurrentValue, eax;
// LINE 855:
	__asm        mov    eax, lCurrentHelicopter;
	__asm        push   eax;
	__asm        call   S3HeliRemoveHelicopter;
	__asm        add    esp, 4;
// LINE 856:
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(lCurrentHelicopter);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, currentUserPersonalInfo;
	__asm        and    [ecx+0x44], eax;
// LINE 858:
_Td4:
	__asm        mov    eax, lCurrentValue;
	__asm        push   eax;
	__asm        call   ChangeUserMoney;
	__asm        add    esp, 4;
// LINE 859:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CatalogWindow::SwitchGraphicsForTab;
// LINE 860:
	__asm        mov    eax, 1;
	__asm        jmp    _Tfc;
// LINE 861:
_Tfc:
}



// Contribution: 1:0007a5e0-0007a5fd Module: 34, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0007a600-0007a638 Module: 34, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0047b600
// CatalogWindow::`scalar deleting destructor'



// Contribution: 2:00001ce8-00001dab Module: 34, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00590ce8
// GLOBAL: COPTER_D 0x00590ce8
// ??_7CatalogWindow@@6B@


// Contribution: 3:0000281c-000029cc Module: 34, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059981c
char * SZ_CATALOG_IMAGE_FILE_NAME = { /* <data@0x0059981c> */ };

// GLOBAL: COPTER_D 0x00599820
char * SZ_CATALOG_EQUIPMENT_IMAGE_FILE_NAME = { /* <data@0x00599820> */ };

// GLOBAL: COPTER_D 0x00599824
char * SZ_STAIN_IMAGE_FILE_NAME = { /* <data@0x00599824> */ };

// GLOBAL: COPTER_D 0x00599828
char * SZ_CATALOG_WINDOW_BUTTON_IMAGE_FILE_NAME = { /* <data@0x00599828> */ };

// GLOBAL: COPTER_D 0x0059982c
char * SZ_CATALOG_WINDOW_PAPER_CLIP_IMAGEFILE_NAME = { /* <data@0x0059982c> */ };

// GLOBAL: COPTER_D 0x00599830
char * SZ_CATALOG_WINDOW_TEXT_NAME = { /* <data@0x00599830> */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x00638ed4
int32_t clone_flag = { /* <data@0x00638ed4> */ };

