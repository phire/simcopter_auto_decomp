// Module: Extrawin.obj
// Source: C:\Copter\source\sparkal\Extrawin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class MessageBoxWindow (forward reference);
class MessageBoxWindow : public GraphicWindow
{
public:
	void MessageBoxWindow(class MPoint&, unsigned long, class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(class MPoint&, unsigned long, unsigned long, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 200
	intro void SetButtonTextColor(const struct SparkalColor*, const struct SparkalColor*);
protected:
	// vtable: 204
	intro int32_t ConvertTypeToStringID(long);
	// vtable: 208
	intro void DrawTextOntoBox();
	long lMessageID;
	class basic_string<char> sMessage;
	class basic_string<char> sButtonImageFileName;
	class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	struct SparkalColor colorFont;
	struct SparkalColor colorButtonFont;
	struct SparkalColor colorButtonFontHighlighted;
};

// Type: class MPoint (forward reference);
class MPoint : public SparkalPoint
{
public:
	long x;
	long y;
	void MPoint(long, long);
	void MPoint();
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MPoint MPoint(struct SparkalPoint);
	class MPoint MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MSize MPoint(struct SparkalPoint);
	class MPoint MPoint();
	class MPoint MPoint(struct SparkalSize);
};

// Type: unsigned long;

// Type: int32_t;

// Type: class GraphicWindow (forward reference);

// Type: class GraphicWindowOwner (forward reference);
class GraphicWindowOwner{
public:
	// vtable: 0
	intro int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
};

// Type: char *;

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: int32_t[2];

// Type: class ButtonWindow (forward reference);
class ButtonWindow : public GraphicWindow
{
		enum ButtonState {
			nButtonStateDisabled = 0,
			nButtonStateOff = 1,
			nButtonStateOn = 2,
		};
public:
	void ButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
};

// Type: class MRect[2];

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class basic_string<char>& basic_string<char>(char);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(char, uint32_t);
	class basic_string<char>& basic_string<char>(char *);
	class basic_string<char>& basic_string<char>(char *, uint32_t);
	class basic_string<char>& basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& basic_string<char>(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& basic_string<char>(uint32_t);
	char basic_string<char>(uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void basic_string<char>(uint32_t);
	void basic_string<char>(uint32_t, char);
	void basic_string<char>(uint32_t);
	uint32_t basic_string<char>();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	uint32_t basic_string<char>(char, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t);
	uint32_t basic_string<char>(char *, uint32_t, uint32_t);
	uint32_t basic_string<char>(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t basic_string<char>(char, uint32_t, uint32_t);
	int32_t basic_string<char>(char *, uint32_t);
	int32_t basic_string<char>(char *, uint32_t, uint32_t);
	int32_t basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class AnimationWindow (forward reference);
class AnimationWindow : public GraphicWindow
{
		enum AnimationLoopType {
			nAnimationLoopTypeOnce = 0,
			nAnimationLoopTypeCircular = 1,
			nAnimationLoopTypeBackAndForth = 2,
		};
		enum AnimationDirection {
			nAnimationDirectionForward = 1,
			nAnimationDirectionBackward = -1,
		};
public:
	void AnimationWindow(char *, class MRect&, long, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, long, enum AnimationWindow::AnimationLoopType);
	void AnimationWindow();
	void Start();
	void Stop();
	int32_t IsRunning();
	void ResetFramePosition();
	void ReverseAnimationDirection();
	void SetAnimationFrameTime(long);
	void SetAnimationFrameRate(long);
	void SetAnimationDirection(enum AnimationWindow::AnimationDirection);
	void SetAnimationLoopType(enum AnimationWindow::AnimationLoopType);
	void GotoFirstFrame();
	void GotoNextFrame();
	void GotoPreviousFrame();
	void GotoNthFrame(int32_t);
	virtual int32_t ComposeSelf();
	virtual int32_t DoesWindowNeedUpdating();
protected:
	long bRunning;
	long bManualFrameIncrementing;
	long lMillisecondsBetweenFrames;
	long lMillisecondsOfLastFrame;
	long lMillisecondsSinceLastFrame;
	enum AnimationWindow::AnimationLoopType nAnimationLoopType;
	enum AnimationWindow::AnimationDirection nAnimationDirection;
	long lCurrentFrame;
	long bPreserveTiming;
	long lWidthOfSingleFrame;
	long lFrameCount;
	long lTransparentIndex;
};

// Type: long;

// Type: char;

// Type: void * __ptr32;

// Type: class MRect;
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: class MFont (forward reference);
class MFont{
public:
	class basic_string<char> sName;
	unsigned long lHeight;
	unsigned long lWidth;
	unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const class MFont&);
	void MFont();
	void ~MFont();
	class MFont& operator=(const class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	// vtable: 0
	intro int32_t CreateFontA();
	// vtable: 4
	intro void DestroyFont();
	void * __ptr32 operator void *();
protected:
	void * __ptr32 hFont;
};

// Type: char[64];

// Type: struct SparkalColor (forward reference);
class SparkalColor{
public:
	unsigned char Blue;
	unsigned char Green;
	unsigned char Red;
	unsigned char Padding;
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: class MRect (forward reference);
class MRect : public SparkalRect
{
public:
	long left;
	long top;
	long right;
	long bottom;
	void MRect(long, long, long, long);
	void MRect();
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(struct SparkalPoint, struct SparkalSize);
	void MRect(struct SparkalRect*);
	void MRect(class MRect*);
	void MRect(const struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	class MSize Size();
	const class MPoint& MRect();
	class MPoint& MRect();
	const class MPoint& MRect();
	class MPoint& MRect();
	class MPoint CenterPoint();
	struct SparkalRect* operator struct SparkalRect *();
	class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t MRect(struct SparkalPoint);
	int32_t MRect(long, long);
	int32_t DoesRectOverlap(struct SparkalRect*);
	void MRect(struct SparkalPoint, struct SparkalPoint);
	void MRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(class MRect*);
	int32_t EqualRect(class MRect*);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(long, long, long, long);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(long, long);
	void MRect(struct SparkalPoint);
	void MRect(struct SparkalSize);
	void MRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(class MRect*, class MRect*);
	int32_t UnionRect(class MRect*, class MRect*);
	int32_t SubtractRect(class MRect*, class MRect*);
	int32_t operator==(const struct SparkalRect&);
	int32_t operator!=(const struct SparkalRect&);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void MRect(class MRect*);
	void MRect(struct SparkalSize);
	void MRect(struct SparkalPoint);
	void operator&=(const struct SparkalRect&);
	void operator|=(const struct SparkalRect&);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalPoint);
	class MRect MRect(class MRect*);
	class MRect MRect(struct SparkalSize);
	class MRect MRect(struct SparkalPoint);
	class MRect operator&(const struct SparkalRect&);
	class MRect operator|(const struct SparkalRect&);
};

// Type: enum AnimationWindow::AnimationLoopType;

// Type: class RenderSettingsWindow (forward reference);
class RenderSettingsWindow : public GraphicWindow
{
public:
	void RenderSettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~RenderSettingsWindow();
	virtual int32_t Initialize();
	virtual int32_t CreateImage(int32_t);
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
	int32_t SetCurrentSettings(long, long, long, long, long);
	void GetCurrentSettings(long&, long&, long&, long&, long&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	long bShowBuildingTextures;
	long bShowGroundTextures;
	long bShowSkyAndClouds;
	long lQuadPixelType;
	long lFogCloseness;
protected:
	void SetControlsBasedOnCurrentSettings();
	void DrawPreviewBasedOnCurrentSettings();
	void GetPreviewFileNames(class basic_string<char>&, class basic_string<char>&, class basic_string<char>&);
	class CheckBoxWindow* myBuildingTexturesCheckBoxWindow;
	class CheckBoxWindow* myObjectTexturesCheckBoxWindow;
	class CheckBoxWindow* mySkyDisplayCheckBoxWindow;
	class ButtonGroup* myDisplayResolutionButtonGroup;
	class SliderWindow* myFogSliderWindow;
	class CBackBuffer* mySkyImage;
	class CBackBuffer* myBuildingImage;
	class MTimer mySkyTimer;
	long lSkyImagePanX;
};

// Type: class TextWindow (forward reference);
class TextWindow : public GraphicWindow
{
public:
	void TextWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro void TextWindow(const class basic_string<char>&);
	// vtable: 200
	intro void TextWindow(int32_t);
	// vtable: 204
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 208
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 212
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 216
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 220
	intro void LoadStrings();
	// vtable: 224
	intro void FitWindowToText();
	// vtable: 228
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
};

// Type: class RadioButtonWindow (forward reference);
class RadioButtonWindow : public GraphicWindow, public ButtonWindow
{
public:
	void RadioButtonWindow(class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual int32_t Initialize();
	// vtable: 196
	intro int32_t GetImageCount();
	// vtable: 200
	intro void SetState(int32_t);
	// vtable: 204
	intro int32_t GetState();
	// vtable: 208
	intro void Enable();
	// vtable: 212
	intro void Disable();
	virtual int32_t ComposeSelf();
	virtual int32_t CreateImage(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
	// vtable: 216
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	virtual int32_t CanWeRespondToMessage();
protected:
	int32_t nButtonState;
	int32_t bEnabled;
	int32_t nButtonTextHeight;
	class MSize sizeTextOffset;
	int32_t bBusySettingState;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
public:
	void RadioButtonWindow(class ButtonGroup*, class MRect&, int32_t, class GraphicWindow*, char *, class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual void ~RadioButtonWindow();
	virtual int32_t Initialize();
	virtual int32_t GetImageCount();
	virtual int32_t ComposeSelf();
	// vtable: 220
	intro void AddToGroup(class ButtonGroup*);
	// vtable: 224
	intro int32_t RemoveFromGroup();
	virtual void SetState(int32_t);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	class ButtonGroup* myRadioButtonGroup;
};

// Type: class CBackBuffer (forward reference);

// Type: class SoundSettingsWindow (forward reference);
class SoundSettingsWindow : public GraphicWindow
{
public:
	void SoundSettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	int32_t SetCurrentVolumeSettings(struct SoundPreferences&);
	int32_t SetCurrentRadioSettings(struct RadioPreferences&, long);
	void GetCurrentVolumeSettings(struct SoundPreferences&);
	void GetCurrentRadioSettings(struct RadioPreferences&);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	// calltype: NearC
	static long ConvertSoundValueToSliderValue(long);
	// calltype: NearC
	static long ConvertSliderValueToSoundValue(long);
protected:
	class SliderWindow* myMasterVolumeSliderWindow;
	class SliderWindow* myRadioStationSliderWindow;
	class SliderWindow* myRadioVolumeSliderWindow;
	class CheckBoxWindow* myDJCheckBoxWindow;
	class CheckBoxWindow* myCommercialCheckBoxWindow;
};

// Type: struct SoundPreferences (forward reference);

// Type: struct RadioPreferences (forward reference);

// Type: class CitySettingsWindow (forward reference);
class CitySettingsWindow : public GraphicWindow
{
public:
	void CitySettingsWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	void SetCurrentCitySettings(struct tagCitySettings*);
	void GetCurrentCitySettings(struct tagCitySettings*);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
protected:
	Ptr to: class SliderWindow[8] mySliderWindows;
};

// Type: struct tagCitySettings (forward reference);

// Type: class PopupMenuExtra (forward reference);
class PopupMenuExtra : public GraphicWindow, public ListBoxWindow, public PopupMenuWindow
{
public:
	void PopupMenuExtra(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void PopupMenuExtra();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 196
	intro int32_t PopupMenuExtra(long);
	// vtable: 200
	intro int32_t PopupMenuExtra(class basic_string<char>&);
	// vtable: 204
	intro void RemoveAllStrings();
	// vtable: 208
	intro int32_t PopupMenuExtra(long, long);
	// vtable: 212
	intro int32_t PopupMenuExtra(class basic_string<char>&, long);
	// vtable: 216
	intro int32_t ResizeWindowForExactLineHeights();
	// vtable: 220
	intro int32_t SetSelection(long);
	// vtable: 224
	intro long GetSelection();
	// vtable: 228
	intro void SetShouldSort();
	// vtable: 232
	intro void Sort();
	// vtable: 236
	intro int32_t MoveLineUp();
	// vtable: 240
	intro int32_t MoveLineDown();
	// vtable: 244
	intro int32_t ScrollToStart();
	// vtable: 248
	intro int32_t ScrollToEnd();
	// vtable: 252
	intro int32_t ScrollPageUp();
	// vtable: 256
	intro int32_t ScrollPageDown();
	// vtable: 260
	intro int32_t IsIndexInView(long);
	// vtable: 264
	intro void PutIndexInView(long);
	// vtable: 268
	intro int32_t ScrollToFirstLetter(char);
	// vtable: 272
	intro void SetIndexOfTopLine(long);
	// vtable: 276
	intro long GetLineCount();
	// vtable: 280
	intro long GetIndexOfTopLine();
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 284
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 288
	intro void SetBackgroundPaletteIndex(int32_t, int32_t);
	// vtable: 292
	intro void SetTextColor(const struct SparkalColor*, const struct SparkalColor*);
	// vtable: 296
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 300
	intro int32_t AddScrollBar(int32_t, int32_t, char *);
	// vtable: 304
	intro void RemoveScrollBar(int32_t, int32_t);
protected:
	// vtable: 308
	intro void CalculateAllMetrics();
	// vtable: 312
	intro int32_t GetStringAddressFromIndex(long, class basic_string<char>*&);
	// vtable: 316
	intro int32_t GetStringFromIndex(long, class basic_string<char>&);
	// vtable: 320
	intro int32_t GetIndexFromString(long&, class basic_string<char>&);
	// vtable: 324
	intro int32_t RemoveStringAtIndex(long);
	// vtable: 328
	intro int32_t InsertStringAtIndex(long, class basic_string<char>&);
	// vtable: 332
	intro int32_t ModifyString(long, class basic_string<char>&);
	// vtable: 336
	intro void SetScrollBarValue();
	// vtable: 340
	intro void SetScrollBarSizes();
	class list<basic_string<char>> myStringList;
	struct SparkalColor colorFont;
	struct SparkalColor colorFontHighlighted;
	int32_t nBackgroundIndex;
	int32_t nBackgroundIndexHighlighted;
	class MFont fontText;
	unsigned long nTextDrawStyle;
	long lCurrentSelection;
	long lVisibleLines;
	long lFirstVisibleLine;
	long lLineHeight;
	int32_t bAlwaysSort;
	class ScrollBarWindow* myVerticalScrollBarWindow;
	class ScrollBarWindow* myHorizontalScrollBarWindow;
	int32_t bBusySettingSelection;
public:
	void PopupMenuWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	virtual long DoCursorUp(long, long, unsigned long);
	virtual long DoCursorMove(long, long);
protected:
	// vtable: 344
	intro void ResizeWindowToFitMenuItems();
	virtual int32_t RemoveStringAtIndex(long);
	virtual int32_t InsertStringAtIndex(long, class basic_string<char>&);
public:
	void PopupMenuExtra(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	virtual void ~PopupMenuExtra();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	// vtable: 348
	intro int32_t CreateImage();
	virtual void DestroyImage();
	virtual void CalculateAllMetrics();
protected:
	virtual void ResizeWindowToFitMenuItems();
	class CBackBuffer* myBackgroundImage;
	class basic_string<char> myBackgroundImageFileName;
};

// Type: class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{
protected:
	struct list<basic_string<char>>::list_node* node;
public:
	void list<basic_string<char>>::iterator();
protected:
	void list<basic_string<char>>::iterator(struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const class list<basic_string<char>>::iterator&);
	class basic_string<char>& operator*();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
	class list<basic_string<char>>::iterator list<basic_string<char>>::iterator(int32_t);
	class list<basic_string<char>>::iterator& list<basic_string<char>>::iterator();
};

// Type: class MPoint;
class MPoint : public SparkalPoint
{
public:
	long x;
	long y;
	void MPoint(long, long);
	void MPoint();
	void MPoint(unsigned long);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(long, long);
	int32_t operator==(struct SparkalPoint);
	int32_t operator!=(struct SparkalPoint);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	void MPoint(struct SparkalPoint);
	void MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MPoint MPoint(struct SparkalPoint);
	class MPoint MPoint(struct SparkalSize);
	class MRect MPoint(const struct SparkalRect*);
	class MSize MPoint(struct SparkalPoint);
	class MPoint MPoint();
	class MPoint MPoint(struct SparkalSize);
};

// Type: class TooltipWindow (forward reference);
class TooltipWindow : public GraphicWindow, public TextWindow
{
public:
	void TooltipWindow(class MRect&, int32_t, class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TooltipWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void TooltipWindow();
	virtual int32_t DrawSelf();
	virtual void TooltipWindow(class basic_string<char>&);
	// vtable: 196
	intro void TooltipWindow(int32_t);
	// vtable: 200
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 204
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 208
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 212
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 216
	intro void LoadStrings();
	// vtable: 220
	intro void FitWindowToText();
	// vtable: 224
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
public:
	void TooltipWindow(class MRect&, int32_t, class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void TooltipWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	virtual void ~TooltipWindow();
	virtual int32_t Initialize();
	virtual void TooltipWindow(class basic_string<char>&);
	virtual void TooltipWindow(int32_t);
	virtual int32_t DrawSelf();
	// vtable: 232
	intro int32_t CreateImage();
	virtual void DestroyImage();
	// vtable: 236
	intro void TooltipWindow(class MPoint&, int32_t);
	// vtable: 240
	intro void TooltipWindow(class MPoint&, class basic_string<char>&);
protected:
	class CBackBuffer* myBackgroundImage;
	class basic_string<char> myBackgroundImageFileName;
};

// Type: class BoneheadTextEditWindow (forward reference);
class BoneheadTextEditWindow : public GraphicWindow, public TextWindow
{
public:
	void BoneheadTextEditWindow(class MRect&, int32_t, class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void BoneheadTextEditWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	void BoneheadTextEditWindow();
	virtual int32_t DrawSelf();
	virtual void BoneheadTextEditWindow(class basic_string<char>&);
	// vtable: 196
	intro void BoneheadTextEditWindow(int32_t);
	// vtable: 200
	intro void SetFontCharacteristics(long, long, long);
	// vtable: 204
	intro void SetTextDrawStyle(unsigned long);
	// vtable: 208
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 212
	intro void SetBackgroundDrawing(int32_t);
	// vtable: 216
	intro void LoadStrings();
	// vtable: 220
	intro void FitWindowToText();
	// vtable: 224
	intro int32_t ResizeWindowForExactLineHeights();
protected:
	int32_t bDrawOpaqueBackground;
	struct SparkalColor colorFont;
	int32_t nBackgroundPaletteIndex;
	int32_t nWindowTitleTextID;
	class MFont fontText;
	unsigned long nTextDrawStyle;
public:
	void BoneheadTextEditWindow(class MRect&, int32_t, const class basic_string<char>&, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void BoneheadTextEditWindow(class MRect&, int32_t, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, char *);
	void BoneheadTextEditWindow();
	virtual void ~BoneheadTextEditWindow();
	virtual int32_t Initialize();
	// vtable: 232
	intro int32_t CreateImage();
	virtual void DestroyImage();
	virtual int32_t DrawSelf();
	// vtable: 236
	intro int32_t SetCaretPeriod(unsigned long);
	virtual long DoCharacter(long);
	virtual long DoKeyDown(long, char);
	virtual long DoCursorDown(long, long, unsigned long);
	// vtable: 240
	intro void SetCharacterCountLimit(unsigned long);
	// vtable: 244
	intro void BoneheadTextEditWindow(char *, unsigned long);
	// vtable: 248
	intro void BoneheadTextEditWindow(class basic_string<char>&);
protected:
	virtual int32_t DoesWindowNeedUpdating();
	// vtable: 252
	intro int32_t ProcessBackspace();
	// vtable: 256
	intro int32_t ProcessReturn();
	class CBackBuffer* mySecondImage;
	class MTimer myCaretTimer;
	unsigned long lCaretTimerPeriod;
	int32_t bCaretTimerExpired;
	unsigned long lCharacterCountLimit;
};

// Type: char[260];

// Type: unsigned char *;

// Type: class MessageBoxWindowEdit (forward reference);
class MessageBoxWindowEdit : public GraphicWindow, public MessageBoxWindow
{
public:
	void MessageBoxWindowEdit(class MPoint&, unsigned long, class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindowEdit(class MPoint&, unsigned long, unsigned long, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize();
	virtual long DoKeyDown(long, char);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	// vtable: 196
	intro void SetTextColor(const struct SparkalColor&);
	// vtable: 200
	intro void SetButtonTextColor(const struct SparkalColor*, const struct SparkalColor*);
protected:
	// vtable: 204
	intro int32_t ConvertTypeToStringID(long);
	// vtable: 208
	intro void DrawTextOntoBox();
	long lMessageID;
	class basic_string<char> sMessage;
	class basic_string<char> sButtonImageFileName;
	class basic_string<char> sAnimationImageFileName;
	long lType;
	int32_t bSelfDeleting;
	struct SparkalColor colorFont;
	struct SparkalColor colorButtonFont;
	struct SparkalColor colorButtonFontHighlighted;
public:
	void MessageBoxWindowEdit(class MPoint&, unsigned long, class basic_string<char>&, const class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	void MessageBoxWindowEdit(class MPoint&, unsigned long, unsigned long, const class basic_string<char>&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	virtual int32_t Initialize();
	// vtable: 212
	intro void MessageBoxWindowEdit(char *, unsigned long);
	// vtable: 216
	intro void MessageBoxWindowEdit(class basic_string<char>&);
protected:
	class BoneheadTextEditWindow* myTextEditWindow;
};

// Type: class ScrollingCreditWindow (forward reference);
class ScrollingCreditWindow : public GraphicWindow
{
public:
	void ScrollingCreditWindow(int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual void ~ScrollingCreditWindow();
	virtual int32_t Initialize();
	virtual int32_t DrawSelf();
	void RestartCreditDisplay();
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	int32_t ReadPalette(struct SparkalColor*);
protected:
	virtual int32_t DoesWindowNeedUpdating();
	int32_t LoadCreditStringArray();
	int32_t Scroll();
	class vector<basic_string<char>> myCreditStringArray;
	long lFirstStringToDraw;
	long lTopOfVisibleTextArea;
	class MRect rectVisibleTextArea;
	class MFont fontCreditText;
	class MTimer myScrollTimer;
	unsigned long lScrollTimerPeriod;
	int32_t bScrollTimerExpired;
};

// Type: class CheckupWindow (forward reference);
class CheckupWindow : public GraphicWindow
{
public:
	void CheckupWindow(class MRect&, int32_t, class GraphicWindow*, class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize();
	void SetCurrentSettings(long *);
	void GetCurrentSettings(long *);
	virtual int32_t DoMessage(class GraphicWindow*, long, long, void * __ptr32);
	virtual long DoKeyDown(long, char);
	void SetTextControlsBasedOnCurrentSliderValues();
	void SetAllControlValuesToDefaults();
	// calltype: NearC
	static int32_t ShouldWeDisplayCheckupWindow();
	int32_t CanUserAffordCurrentSliderValues();
protected:
	Ptr to: class SliderWindow[3] mySliderWindows;
	Ptr to: class TextWindow[5] myTextWindows;
};

// Type: long *;

// Type: long[3];

// Type: char[32];

// Type: uint32_t;



// Contribution: 1:0004f050-0005f979 Module: 45, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00450050
// $E66

// FUNCTION: COPTER_D 0x00450065
// $E65

// FUNCTION: COPTER_D 0x0045008f
// $E69

// FUNCTION: COPTER_D 0x004500a4
// $E68

// FUNCTION: COPTER_D 0x004500ce
void MessageBoxWindow::MessageBoxWindow(class MPoint& ptNewPosition, unsigned long lNewType, unsigned long lNewMessageID, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {
// LINE 47:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x5C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x004500EF;
	__asm        mov    eax, szImageFileName;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004500F7;
	__asm        mov    eax, ds:[0x59913C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0045011E;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045013B;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, lNewMessageID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004501BD;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004501AF;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x004501C7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        jmp    near ptr 0x004501D6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0045022C;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045021B;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00450239;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        jmp    near ptr 0x0045024B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004502A1;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00450290;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x004502AE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        jmp    near ptr 0x004502C0;
	__asm        mov    eax, lNewType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x004502DD;
	__asm        jmp    near ptr 0x004502E2;
	__asm        jmp    near ptr 0x004502E7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FA80;
// LINE 48:
	__asm        cmp    szButtonImageFileName, 0;
	__asm        je     near ptr 0x0045042A;
// LINE 49:
	__asm        jmp    near ptr 0x004502FF;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045034A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045033B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045034A;
	__asm        jmp    near ptr 0x0045034F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00450386;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004503DB;
	__asm        jmp    near ptr 0x00450371;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004503DB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x004503B5;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004503BC;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00450411;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00450411;
	__asm        jmp    near ptr 0x004503EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00450411;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00450425;
	__asm        jmp    near ptr 0x0045042A;
// LINE 50:
	__asm        cmp    szAnimationImageFileName, 0;
	__asm        je     near ptr 0x00450564;
// LINE 51:
	__asm        jmp    near ptr 0x00450439;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00450484;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450475;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450484;
	__asm        jmp    near ptr 0x00450489;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004504C0;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00450515;
	__asm        jmp    near ptr 0x004504AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00450515;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004504EF;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004504F6;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x0045054B;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0045054B;
	__asm        jmp    near ptr 0x00450524;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045054B;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045055F;
	__asm        jmp    near ptr 0x00450564;
// LINE 52:
	__asm        jmp    near ptr 0x00450569;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x2C;
}

// FUNCTION: COPTER_D 0x00450573
void MessageBoxWindow::MessageBoxWindow(class MPoint& ptNewPosition, unsigned long lNewType, class basic_string<char>& sNewMessage, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {
// LINE 70:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        cmp    szImageFileName, 0;
	__asm        je     near ptr 0x00450594;
	__asm        mov    eax, szImageFileName;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0045059C;
	__asm        mov    eax, ds:[0x59913C];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004505C3;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004505E0;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    near ptr 0x00450615;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    near ptr 0x00450657;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450648;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450657;
	__asm        jmp    near ptr 0x0045065C;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    near ptr 0x00450682;
	__asm        jmp    near ptr 0x00450671;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00450689;
	__asm        mov    dword ptr [ebp-0x58], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x0045068E;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x004506CF;
	__asm        jmp    near ptr 0x004506A5;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x004506CF;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x004507B1;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x004507A7;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00450781;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00450721;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00450746;
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00450752;
	__asm        jmp    near ptr 0x00450752;
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x00450752;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045077C;
	__asm        jmp    near ptr 0x0045078A;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00450799;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x004507B1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        jmp    near ptr 0x004507C0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00450816;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00450805;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00450823;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        jmp    near ptr 0x00450835;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0045088B;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045087A;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x00450898;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        jmp    near ptr 0x004508AA;
	__asm        mov    eax, lNewType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x004508C7;
	__asm        jmp    near ptr 0x004508CC;
	__asm        jmp    near ptr 0x004508D1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FA80;
// LINE 71:
	__asm        cmp    szButtonImageFileName, 0;
	__asm        je     near ptr 0x00450A14;
// LINE 72:
	__asm        jmp    near ptr 0x004508E9;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00450934;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450925;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450934;
	__asm        jmp    near ptr 0x00450939;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00450970;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004509C5;
	__asm        jmp    near ptr 0x0045095B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004509C5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045099F;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004509A6;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x004509FB;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x004509FB;
	__asm        jmp    near ptr 0x004509D4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004509FB;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00450A0F;
	__asm        jmp    near ptr 0x00450A14;
// LINE 73:
	__asm        cmp    szAnimationImageFileName, 0;
	__asm        je     near ptr 0x00450B4E;
// LINE 74:
	__asm        jmp    near ptr 0x00450A23;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00450A6E;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450A5F;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450A6E;
	__asm        jmp    near ptr 0x00450A73;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00450AAA;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00450AFF;
	__asm        jmp    near ptr 0x00450A95;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00450AFF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00450AD9;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00450AE0;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x00450B35;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00450B35;
	__asm        jmp    near ptr 0x00450B0E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00450B35;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00450B49;
	__asm        jmp    near ptr 0x00450B4E;
// LINE 75:
	__asm        jmp    near ptr 0x00450B53;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x2C;
}

// FUNCTION: COPTER_D 0x00450b5d
int32_t MessageBoxWindow::Initialize() {
	int32_t[2] nButtonID;
	class ButtonWindow* tempButtonWindow;
	unsigned long i;
	int32_t nButtonCount;
	class MRect[2] rectButtons;
	class basic_string<char> sText;
	int32_t nFullStringID;
	int32_t[2] nButtonStringID;

// LINE 82:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x20F0;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    dword ptr [ebp-0x78], 2;
	__asm        lea    eax, rectButtons[0].left;
	__asm        mov    [ebp-0x7C], eax;
// LINE 87:
	__asm        dec    dword ptr [ebp-0x78];
	__asm        js     near ptr 0x00450B9A;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   0x0040DC80;
	__asm        add    dword ptr [ebp-0x7C], 0x10;
	__asm        jmp    near ptr 0x00450B80;
	__asm        jmp    near ptr 0x00450B9F;
// LINE 89:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00450BEF;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00450BE4;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00450BF6;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00450C02;
// LINE 92:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 94:
	__asm        mov    nButtonCount, 0;
// LINE 95:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x00450C24;
	__asm        shl    i, 1;
	__asm        cmp    i, 0x80000000;
	__asm        jae    near ptr 0x00450C86;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        test   i, eax;
	__asm        je     near ptr 0x00450C81;
// LINE 97:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
	__asm        mov    ecx, nButtonCount;
	__asm        mov    [ebp+ecx*4-8], eax;
// LINE 98:
	__asm        mov    eax, i;
	__asm        mov    ecx, nButtonCount;
	__asm        mov    [ebp+ecx*4-0x48], eax;
// LINE 99:
	__asm        inc    nButtonCount;
// LINE 100:
	__asm        cmp    nButtonCount, 2;
	__asm        jne    near ptr 0x00450C81;
// LINE 101:
	__asm        jmp    near ptr 0x00450C86;
// LINE 103:
	__asm        jmp    near ptr 0x00450C20;
// LINE 105:
	__asm        cmp    nButtonCount, 0;
	__asm        jne    near ptr 0x00450CC7;
// LINE 106:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 1;
// LINE 107:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
	__asm        mov    nButtonStringID[0], eax;
// LINE 108:
	__asm        mov    nButtonID[0], 1;
// LINE 109:
	__asm        mov    nButtonCount, 1;
// LINE 112:
	__asm        cmp    nButtonCount, 1;
	__asm        jne    near ptr 0x00450CF7;
// LINE 113:
	__asm        mov    rectButtons[0].left, 0xF4;
	__asm        mov    rectButtons[0].top, 0x100;
	__asm        mov    rectButtons[0].right, 0xF5;
	__asm        mov    rectButtons[0].bottom, 0x101;
	__asm        jmp    near ptr 0x00450CF2;
// LINE 114:
	__asm        jmp    near ptr 0x00450D39;
// LINE 115:
	__asm        mov    rectButtons[0].left, 0xC2;
	__asm        mov    rectButtons[0].top, 0x100;
	__asm        mov    rectButtons[0].right, 0xC3;
	__asm        mov    rectButtons[0].bottom, 0x101;
	__asm        jmp    near ptr 0x00450D18;
// LINE 116:
	__asm        mov    rectButtons[1].left, 0x126;
	__asm        mov    rectButtons[1].top, 0x100;
	__asm        mov    rectButtons[1].right, 0x127;
	__asm        mov    rectButtons[1].bottom, 0x101;
	__asm        jmp    near ptr 0x00450D39;
// LINE 121:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00450F2D;
	__asm        jmp    near ptr 0x00450D58;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00450EFA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x00450DAE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20B0], eax;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        mov    [ebp-0x20B8], eax;
	__asm        mov    eax, [ebp-0x20B8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00450DB3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x00450DDD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00450E89;
	__asm        jmp    near ptr 0x00450DF8;
	__asm        jmp    near ptr 0x00450DFD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00450E31;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20C4], eax;
	__asm        jmp    near ptr 0x00450E40;
	__asm        jmp    near ptr 0x00450E40;
	__asm        mov    dword ptr [ebp-0x20C4], 0;
	__asm        jmp    near ptr 0x00450E40;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20C8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20CC], eax;
	__asm        mov    eax, [ebp-0x20C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20C4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20CC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00450E89;
	__asm        jmp    near ptr 0x00450E8E;
	__asm        mov    byte ptr [ebp-0x20B4], 0;
	__asm        jmp    near ptr 0x00450E9A;
	__asm        lea    eax, [ebp-0x20B4];
	__asm        mov    [ebp-0x20BC], eax;
	__asm        jmp    near ptr 0x00450EAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x80];
	__asm        mov    [ebp-0x20C0], eax;
	__asm        mov    eax, [ebp-0x20BC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x20C0];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00450EE1;
	__asm        jmp    near ptr 0x00450EE6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    near ptr 0x00450F01;
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, nButtonID[0];
	__asm        push   eax;
	__asm        lea    eax, rectButtons[0].left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00450F34;
	__asm        mov    tempButtonWindow, 0;
// LINE 122:
	__asm        push   0;
	__asm        mov    eax, nButtonStringID[0];
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 123:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        jne    near ptr 0x00450FF2;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1094], eax;
	__asm        jmp    near ptr 0x00450FA4;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00450FC8;
	__asm        jmp    near ptr 0x00450FCD;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00450FED;
	__asm        jmp    near ptr 0x00451142;
	__asm        jmp    near ptr 0x00450FF7;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10A8], eax;
	__asm        cmp    dword ptr [ebp-0x10A8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00451051;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10A4], eax;
	__asm        mov    eax, [ebp-0x10A4];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451042;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451051;
	__asm        jmp    near ptr 0x00451056;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00451087;
	__asm        cmp    dword ptr [ebp-0x10A8], 0;
	__asm        je     near ptr 0x004510E8;
	__asm        jmp    near ptr 0x00451075;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x10A8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004510E8;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x109C], eax;
	__asm        cmp    dword ptr [ebp-0x109C], 0;
	__asm        je     near ptr 0x004510C8;
	__asm        mov    eax, [ebp-0x10A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x109C];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1098], eax;
	__asm        jmp    near ptr 0x004510D2;
	__asm        mov    dword ptr [ebp-0x1098], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1098];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00451127;
	__asm        cmp    dword ptr [ebp-0x10A8], 0;
	__asm        je     near ptr 0x00451127;
	__asm        jmp    near ptr 0x004510FA;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10A0], eax;
	__asm        mov    eax, [ebp-0x10A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10A0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00451127;
	__asm        mov    eax, [ebp-0x10A8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00451138;
	__asm        jmp    near ptr 0x0045113D;
	__asm        jmp    near ptr 0x00451142;
// LINE 124:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 125:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 126:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 128:
	__asm        cmp    nButtonCount, 1;
	__asm        jle    near ptr 0x004514B3;
// LINE 130:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x00451380;
	__asm        jmp    near ptr 0x004511AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045134D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     near ptr 0x00451201;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20D0], eax;
	__asm        mov    eax, [ebp-0x20D0];
	__asm        mov    [ebp-0x20D8], eax;
	__asm        mov    eax, [ebp-0x20D8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451206;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x00451230;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x004512DC;
	__asm        jmp    near ptr 0x0045124B;
	__asm        jmp    near ptr 0x00451250;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00451284;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20E4], eax;
	__asm        jmp    near ptr 0x00451293;
	__asm        jmp    near ptr 0x00451293;
	__asm        mov    dword ptr [ebp-0x20E4], 0;
	__asm        jmp    near ptr 0x00451293;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20E8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20EC], eax;
	__asm        mov    eax, [ebp-0x20E8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20EC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004512DC;
	__asm        jmp    near ptr 0x004512E1;
	__asm        mov    byte ptr [ebp-0x20D4], 0;
	__asm        jmp    near ptr 0x004512ED;
	__asm        lea    eax, [ebp-0x20D4];
	__asm        mov    [ebp-0x20DC], eax;
	__asm        jmp    near ptr 0x004512FE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x80];
	__asm        mov    [ebp-0x20E0], eax;
	__asm        mov    eax, [ebp-0x20DC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x20E0];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00451334;
	__asm        jmp    near ptr 0x00451339;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x00451354;
	__asm        mov    dword ptr [ebp-0x74], 0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, nButtonID[1];
	__asm        push   eax;
	__asm        lea    eax, rectButtons[1].left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00451387;
	__asm        mov    tempButtonWindow, 0;
// LINE 131:
	__asm        push   0;
	__asm        mov    eax, nButtonStringID[1];
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 132:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20AC], eax;
	__asm        cmp    dword ptr [ebp-0x20AC], 0;
	__asm        jne    near ptr 0x00451445;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20AC], eax;
	__asm        jmp    near ptr 0x004513F7;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0045141B;
	__asm        jmp    near ptr 0x00451420;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00451440;
	__asm        jmp    near ptr 0x00451473;
	__asm        jmp    near ptr 0x0045144A;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0045146E;
	__asm        jmp    near ptr 0x00451473;
// LINE 133:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 134:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 135:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 138:
	__asm        jmp    near ptr 0x004514B8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045157F;
// LINE 141:
// Block start:
	class AnimationWindow* tempAnimationWindow;
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x0045154F;
	__asm        jmp    near ptr 0x004514ED;
	__asm        mov    dword ptr [ebp-0x68], 0x34;
	__asm        mov    dword ptr [ebp-0x64], 0xD3;
	__asm        mov    dword ptr [ebp-0x60], 0xC9;
	__asm        mov    dword ptr [ebp-0x5C], 0x130;
	__asm        jmp    near ptr 0x0045150E;
	__asm        push   2;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x95;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x00451FDE;
	__asm        mov    tempAnimationWindow, eax;
	__asm        jmp    near ptr 0x00451556;
	__asm        mov    tempAnimationWindow, 0;
// LINE 142:
	__asm        mov    eax, tempAnimationWindow;
	__asm        mov    dword ptr [eax+0x7C], 0x37;
	__asm        jmp    near ptr 0x00451565;
// LINE 143:
	__asm        mov    eax, tempAnimationWindow;
	__asm        mov    dword ptr [eax+0x88], 2;
	__asm        jmp    near ptr 0x00451577;
// LINE 144:
	__asm        mov    ecx, tempAnimationWindow;
	__asm        call   0x004523DB;
// LINE 147:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
// LINE 149:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 150:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 151:
	__asm        mov    dword ptr [ebp-0x6C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00451616;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     near ptr 0x00451616;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004515FD;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451611;
	__asm        jmp    near ptr 0x00451616;
	__asm        jmp    near ptr 0x0045161B;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x00451649;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045164E;
	__asm        mov    eax, [ebp-0x6C];
	__asm        jmp    near ptr 0x00451656;
// LINE 152:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045165b
long MessageBoxWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 166:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00451709;
// LINE 167:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004516EE;
// LINE 168:
	__asm        mov    eax, this;
	__asm        test   dword ptr [eax+0x90], 0xFFFF0000;
	__asm        je     near ptr 0x004516C2;
// LINE 169:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        and    eax, 0xFFFF0000;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 170:
	__asm        jmp    near ptr 0x004516EE;
// LINE 171:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 173:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x00451709;
// LINE 174:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 176:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00451713;
// LINE 177:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045171a
int32_t MessageBoxWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 186:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 187:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00451759;
// LINE 191:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 193:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x00451774;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 195:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045177E;
// LINE 196:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00451785
int32_t MessageBoxWindow::ConvertTypeToStringID(long lType) {
// LINE 207:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 208:
	__asm        test   reinterpret_cast<uint8_t>(lType), 1;
	__asm        je     near ptr 0x004517A5;
// LINE 209:
	__asm        mov    eax, 0x14;
	__asm        jmp    near ptr 0x00451810;
// LINE 210:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 1;
	__asm        je     near ptr 0x004517B9;
// LINE 211:
	__asm        mov    eax, 0x15;
	__asm        jmp    near ptr 0x00451810;
// LINE 212:
	__asm        test   reinterpret_cast<uint8_t>(lType), 2;
	__asm        je     near ptr 0x004517CD;
// LINE 213:
	__asm        mov    eax, 0x16;
	__asm        jmp    near ptr 0x00451810;
// LINE 214:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 2;
	__asm        je     near ptr 0x004517E1;
// LINE 215:
	__asm        mov    eax, 0x17;
	__asm        jmp    near ptr 0x00451810;
// LINE 216:
	__asm        test   reinterpret_cast<uint8_t>(lType), 4;
	__asm        je     near ptr 0x004517F5;
// LINE 217:
	__asm        mov    eax, 0x18;
	__asm        jmp    near ptr 0x00451810;
// LINE 218:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 4;
	__asm        je     near ptr 0x00451809;
// LINE 219:
	__asm        mov    eax, 0x19;
	__asm        jmp    near ptr 0x00451810;
// LINE 220:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00451810;
// LINE 221:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00451817
void MessageBoxWindow::DrawTextOntoBox() {
	class MRect rectText;
	class MFont* fontText;
	char[64] szTypeface;
	int32_t nFullStringID;

// LINE 232:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x10B8;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 236:
	__asm        jmp    near ptr 0x00451832;
	__asm        mov    rectText.left, 0x62;
	__asm        mov    rectText.top, 0x4E;
	__asm        mov    rectText.right, 0x170;
	__asm        mov    rectText.bottom, 0xC8;
	__asm        jmp    near ptr 0x00451853;
// LINE 238:
	__asm        jmp    near ptr 0x00451858;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00451C8F;
// LINE 239:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        push   eax;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 240:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        cmp    dword ptr [ebp-0x1064], 0;
	__asm        jne    near ptr 0x00451ACB;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        jmp    near ptr 0x004518E1;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0045190B;
	__asm        jmp    near ptr 0x00451910;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1078], eax;
	__asm        jmp    near ptr 0x00451928;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1078];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045197D;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1074], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045196E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045197D;
	__asm        jmp    near ptr 0x00451982;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004519C3;
	__asm        jmp    near ptr 0x0045199A;
	__asm        jmp    near ptr 0x0045199F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1078];
	__asm        jae    near ptr 0x00451A56;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     near ptr 0x00451A2F;
	__asm        jmp    near ptr 0x004519E5;
	__asm        jmp    near ptr 0x004519EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1078];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1068], eax;
	__asm        jmp    near ptr 0x00451A39;
	__asm        mov    dword ptr [ebp-0x1068], 0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x1078], 0;
	__asm        je     near ptr 0x00451AAA;
	__asm        jmp    near ptr 0x00451A68;
	__asm        jmp    near ptr 0x00451A6D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1078];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1070];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00451AAA;
	__asm        mov    eax, [ebp-0x1078];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00451AC1;
	__asm        jmp    near ptr 0x00451AC6;
	__asm        jmp    near ptr 0x00451C8F;
	__asm        jmp    near ptr 0x00451AD0;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00451B2A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1088], eax;
	__asm        mov    eax, [ebp-0x1088];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451B1B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451B2A;
	__asm        jmp    near ptr 0x00451B2F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00451B6C;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     near ptr 0x00451C29;
	__asm        jmp    near ptr 0x00451B54;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x1094];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00451C29;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1080], eax;
	__asm        cmp    dword ptr [ebp-0x1080], 0;
	__asm        je     near ptr 0x00451BAD;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1080];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x107C], eax;
	__asm        jmp    near ptr 0x00451BB7;
	__asm        mov    dword ptr [ebp-0x107C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00451C10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x1090], eax;
	__asm        mov    eax, [ebp-0x1090];
	__asm        mov    [ebp-0x108C], eax;
	__asm        cmp    dword ptr [ebp-0x108C], 0;
	__asm        je     near ptr 0x00451C10;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x108C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00451C10;
	__asm        jmp    near ptr 0x00451C15;
	__asm        mov    eax, [ebp-0x107C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x00451C6E;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     near ptr 0x00451C6E;
	__asm        jmp    near ptr 0x00451C3B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1084], eax;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1084];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00451C6E;
	__asm        mov    eax, [ebp-0x1094];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00451C85;
	__asm        jmp    near ptr 0x00451C8A;
	__asm        jmp    near ptr 0x00451C8F;
// LINE 242:
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        call   0x0042CE0E;
	__asm        add    esp, 0xC;
// LINE 243:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x00451CD2;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x0049F937;
	__asm        mov    fontText, eax;
	__asm        jmp    near ptr 0x00451CD9;
	__asm        mov    fontText, 0;
// LINE 244:
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x40];
	__asm        call   0x00470440;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x60], eax;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x00451D0E;
// LINE 247:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x00451D48;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x1098], eax;
	__asm        mov    eax, [ebp-0x1098];
	__asm        mov    [ebp-0x10A0], eax;
	__asm        mov    eax, [ebp-0x10A0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00451D4D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x00451D71;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00451E0E;
	__asm        jmp    near ptr 0x00451D89;
	__asm        jmp    near ptr 0x00451D8E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00451DBC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10AC], eax;
	__asm        jmp    near ptr 0x00451DCB;
	__asm        jmp    near ptr 0x00451DCB;
	__asm        mov    dword ptr [ebp-0x10AC], 0;
	__asm        jmp    near ptr 0x00451DCB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10B0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x10B4], eax;
	__asm        mov    eax, [ebp-0x10B0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10B4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00451E0E;
	__asm        jmp    near ptr 0x00451E13;
	__asm        mov    byte ptr [ebp-0x109C], 0;
	__asm        jmp    near ptr 0x00451E1F;
	__asm        lea    eax, [ebp-0x109C];
	__asm        mov    [ebp-0x10A4], eax;
	__asm        jmp    near ptr 0x00451E30;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        mov    [ebp-0x10A8], eax;
	__asm        mov    eax, [ebp-0x10A4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x10A8];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00451E60;
	__asm        jmp    near ptr 0x00451E65;
	__asm        push   0;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 248:
	__asm        jmp    near ptr 0x00451E9F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00451ea4
void MessageBoxWindow::SetTextColor(const struct SparkalColor& colorNewFont) {
// LINE 254:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 255:
	__asm        mov    eax, colorNewFont;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
// LINE 256:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 257:
	__asm        jmp    near ptr 0x00451ED2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00451ed9
void MessageBoxWindow::SetButtonTextColor(const struct SparkalColor* colorNewFont, const struct SparkalColor* colorNewFontHighlighted) {
// LINE 263:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 264:
	__asm        cmp    colorNewFont, 0;
	__asm        je     near ptr 0x00451EFD;
// LINE 265:
	__asm        mov    eax, colorNewFont;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 266:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     near ptr 0x00451F15;
// LINE 267:
	__asm        mov    eax, colorNewFontHighlighted;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
// LINE 268:
	__asm        jmp    near ptr 0x00451F1A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00451f21
void AnimationWindow::AnimationWindow() {
// LINE 282:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004A2A3F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FB58;
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 284:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 285:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x53;
// LINE 286:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 288:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 1;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 1;
// LINE 290:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 291:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 292:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 1;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0xFFFFFFFF;
// LINE 294:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0xFFFFFFFF;
// LINE 295:
	__asm        jmp    near ptr 0x00451FD6;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00451fde
void AnimationWindow::AnimationWindow(char * szImageFileName, class MRect& rectNewWindow, long lNewWidthOfSingleFrame, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, long lNewTransparentIndex, enum AnimationWindow::AnimationLoopType nNewAnimationLoopType) {
// LINE 311:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, lNewWidthOfSingleFrame;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, lNewTransparentIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FB58;
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0x53;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 316:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 317:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 1;
// LINE 318:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 1;
// LINE 319:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 320:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 321:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0xFFFFFFFF;
// LINE 323:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0xFFFFFFFF;
	__asm        je     near ptr 0x004520D3;
// LINE 324:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 331:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 333:
	__asm        jmp    near ptr 0x00452102;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x24;
}

// FUNCTION: COPTER_D 0x0045210c
int32_t AnimationWindow::ComposeSelf() {
	long lFramesToShift;
	long lSourceLeft;
	long lMillisecondsCurrent;
	long lSourceRight;

// LINE 341:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 347:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     near ptr 0x00452132;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00452139;
// LINE 348:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045224D;
// LINE 350:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x98];
	__asm        mov    lSourceLeft, eax;
// LINE 351:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        add    eax, lSourceLeft;
	__asm        mov    lSourceRight, eax;
// LINE 353:
	__asm        jmp    near ptr 0x00452163;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceRight;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceLeft;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 355:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    near ptr 0x00452246;
// LINE 356:
	__asm        call   0x0043D8C6;
	__asm        mov    lMillisecondsCurrent, eax;
// LINE 358:
	__asm        mov    eax, lMillisecondsCurrent;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x80];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 359:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x00452246;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    near ptr 0x00452246;
// LINE 360:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     near ptr 0x00452228;
// LINE 364:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x7C];
	__asm        mov    lFramesToShift, eax;
// LINE 365:
	__asm        cmp    lFramesToShift, 0;
	__asm        je     near ptr 0x00452223;
// LINE 366:
	__asm        mov    ecx, this;
	__asm        call   0x00452252;
	__asm        jmp    near ptr 0x0045220C;
// LINE 368:
	__asm        jmp    near ptr 0x00452230;
// LINE 369:
	__asm        mov    ecx, this;
	__asm        call   0x00452252;
// LINE 372:
	__asm        mov    eax, lMillisecondsCurrent;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 373:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045224D;
// LINE 376:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045224D;
// LINE 377:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00452252
void AnimationWindow::GotoNextFrame() {
// LINE 384:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x90], eax;
// LINE 389:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    near ptr 0x00452298;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    near ptr 0x004522B8;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00452392;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jge    near ptr 0x00452392;
// LINE 391:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 2;
	__asm        jne    near ptr 0x0045231E;
// LINE 392:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    near ptr 0x004522EF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0xFFFFFFFF;
	__asm        jmp    near ptr 0x004522EA;
	__asm        jmp    near ptr 0x00452301;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 1;
	__asm        jmp    near ptr 0x00452301;
	__asm        jmp    near ptr 0x00452306;
// LINE 393:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 1;
	__asm        jle    near ptr 0x0045231E;
// LINE 394:
	__asm        mov    ecx, this;
	__asm        call   0x00452252;
// LINE 396:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     near ptr 0x0045236D;
// LINE 397:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    near ptr 0x00452350;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        jmp    near ptr 0x00452363;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x00452368;
// LINE 398:
	__asm        jmp    near ptr 0x00452392;
// LINE 399:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x8C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x00452388;
// LINE 400:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 403:
	__asm        jmp    near ptr 0x00452397;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045239c
int32_t AnimationWindow::DoesWindowNeedUpdating() {
// LINE 411:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 413:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x80];
	__asm        mov    eax, this;
	__asm        add    ebx, [eax+0x7C];
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        cmp    ebx, eax;
	__asm        jae    near ptr 0x004523CF;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004523D1;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004523D6;
// LINE 417:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004523db
void AnimationWindow::Start() {
// LINE 423:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 424:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00452418;
// LINE 425:
	__asm        jmp    near ptr 0x004523FC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 426:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 427:
	__asm        jmp    near ptr 0x00452427;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045242c
void AnimationWindow::ResetFramePosition() {
// LINE 433:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 434:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00452469;
// LINE 435:
	__asm        jmp    near ptr 0x0045244D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 436:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    near ptr 0x0045248B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        jmp    near ptr 0x0045249E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x004524A3;
// LINE 437:
	__asm        jmp    near ptr 0x004524A8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004524ad
void RenderSettingsWindow::RenderSettingsWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 503:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599140];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x004525D9;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        jmp    near ptr 0x004525D9;
	__asm        jmp    near ptr 0x004525DE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FC20;
// LINE 504:
	__asm        jmp    near ptr 0x004525F9;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00452603
void RenderSettingsWindow::~RenderSettingsWindow() {
// LINE 511:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FC20;
// LINE 512:
	__asm        mov    ecx, this;
	__asm        call   0x004541BC;
// LINE 513:
	__asm        jmp    near ptr 0x00452625;
	__asm        jmp    near ptr 0x0045262A;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00452637
int32_t RenderSettingsWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class TextWindow* tempTextWindow;
	class RadioButtonWindow* tempRadioButtonWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 520:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x227C;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 525:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x19C], eax;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     near ptr 0x004526B5;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x19C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004526A7;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x004526BC;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004526C8;
// LINE 527:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 528:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00452793;
// LINE 529:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00452753;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        cmp    dword ptr [ebp-0x1A8], 0;
	__asm        je     near ptr 0x00452753;
	__asm        mov    ecx, [ebp-0x1A8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045273A;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045274E;
	__asm        jmp    near ptr 0x00452753;
	__asm        jmp    near ptr 0x00452758;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x00452786;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045278B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0045415E;
// LINE 533:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x004527FB;
	__asm        jmp    near ptr 0x004527B2;
	__asm        mov    dword ptr [ebp-0x30], 0x8A;
	__asm        mov    dword ptr [ebp-0x2C], 0x46;
	__asm        mov    dword ptr [ebp-0x28], 0x114;
	__asm        mov    dword ptr [ebp-0x24], 0x5A;
	__asm        jmp    near ptr 0x004527D3;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x47;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452802;
	__asm        mov    tempTextWindow, 0;
// LINE 534:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 535:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 538:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00452891;
	__asm        jmp    near ptr 0x00452848;
	__asm        mov    dword ptr [ebp-0x44], 0x8A;
	__asm        mov    dword ptr [ebp-0x40], 0x70;
	__asm        mov    dword ptr [ebp-0x3C], 0x114;
	__asm        mov    dword ptr [ebp-0x38], 0x84;
	__asm        jmp    near ptr 0x00452869;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x48;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452898;
	__asm        mov    tempTextWindow, 0;
// LINE 539:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 540:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 543:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00452927;
	__asm        jmp    near ptr 0x004528DE;
	__asm        mov    dword ptr [ebp-0x58], 0x8A;
	__asm        mov    dword ptr [ebp-0x54], 0x9C;
	__asm        mov    dword ptr [ebp-0x50], 0x114;
	__asm        mov    dword ptr [ebp-0x4C], 0xB0;
	__asm        jmp    near ptr 0x004528FF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x49;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045292E;
	__asm        mov    tempTextWindow, 0;
// LINE 544:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 545:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 548:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x004529BD;
	__asm        jmp    near ptr 0x00452974;
	__asm        mov    dword ptr [ebp-0x6C], 0x4A;
	__asm        mov    dword ptr [ebp-0x68], 0x125;
	__asm        mov    dword ptr [ebp-0x64], 0xFC;
	__asm        mov    dword ptr [ebp-0x60], 0x13C;
	__asm        jmp    near ptr 0x00452995;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4B;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x004529C4;
	__asm        mov    tempTextWindow, 0;
// LINE 549:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 550:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 551:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 554:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x00452A63;
	__asm        jmp    near ptr 0x00452A1A;
	__asm        mov    dword ptr [ebp-0x80], 0x4A;
	__asm        mov    dword ptr [ebp-0x7C], 0x142;
	__asm        mov    dword ptr [ebp-0x78], 0xFC;
	__asm        mov    dword ptr [ebp-0x74], 0x156;
	__asm        jmp    near ptr 0x00452A3B;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4C;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452A6A;
	__asm        mov    tempTextWindow, 0;
// LINE 555:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 556:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 557:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 560:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     near ptr 0x00452B21;
	__asm        jmp    near ptr 0x00452AC6;
	__asm        mov    dword ptr [ebp-0x94], 0x4A;
	__asm        mov    dword ptr [ebp-0x90], 0x160;
	__asm        mov    dword ptr [ebp-0x8C], 0xFC;
	__asm        mov    dword ptr [ebp-0x88], 0x174;
	__asm        jmp    near ptr 0x00452AF3;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4D;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452B28;
	__asm        mov    tempTextWindow, 0;
// LINE 561:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 562:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 563:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 566:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x00452BDF;
	__asm        jmp    near ptr 0x00452B84;
	__asm        mov    dword ptr [ebp-0xA8], 0x4C;
	__asm        mov    dword ptr [ebp-0xA4], 0xF5;
	__asm        mov    dword ptr [ebp-0xA0], 0x8A;
	__asm        mov    dword ptr [ebp-0x9C], 0x105;
	__asm        jmp    near ptr 0x00452BB1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4E;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452BE6;
	__asm        mov    tempTextWindow, 0;
// LINE 567:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 568:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 571:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     near ptr 0x00452C8D;
	__asm        jmp    near ptr 0x00452C32;
	__asm        mov    dword ptr [ebp-0xBC], 0xDE;
	__asm        mov    dword ptr [ebp-0xB8], 0xF5;
	__asm        mov    dword ptr [ebp-0xB4], 0x120;
	__asm        mov    dword ptr [ebp-0xB0], 0x105;
	__asm        jmp    near ptr 0x00452C5F;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4F;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452C94;
	__asm        mov    tempTextWindow, 0;
// LINE 572:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 573:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 574:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 577:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC0], eax;
	__asm        cmp    dword ptr [ebp-0xC0], 0;
	__asm        je     near ptr 0x00452D4B;
	__asm        jmp    near ptr 0x00452CF0;
	__asm        mov    dword ptr [ebp-0xD0], 0x8E;
	__asm        mov    dword ptr [ebp-0xCC], 0xF5;
	__asm        mov    dword ptr [ebp-0xC8], 0xDA;
	__asm        mov    dword ptr [ebp-0xC4], 0x105;
	__asm        jmp    near ptr 0x00452D1D;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x50;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00452D52;
	__asm        mov    tempTextWindow, 0;
// LINE 578:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 579:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 580:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 584:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     near ptr 0x00452E12;
	__asm        jmp    near ptr 0x00452DAE;
	__asm        mov    dword ptr [ebp-0xE4], 0x4E;
	__asm        mov    dword ptr [ebp-0xE0], 0x40;
	__asm        mov    dword ptr [ebp-0xDC], 0x51;
	__asm        mov    dword ptr [ebp-0xD8], 0x43;
	__asm        jmp    near ptr 0x00452DDB;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD4];
	__asm        call   0x00471A8C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x00452E22;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 585:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+4];
// LINE 588:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x00452EC8;
	__asm        jmp    near ptr 0x00452E64;
	__asm        mov    dword ptr [ebp-0xF8], 0x4E;
	__asm        mov    dword ptr [ebp-0xF4], 0x68;
	__asm        mov    dword ptr [ebp-0xF0], 0x51;
	__asm        mov    dword ptr [ebp-0xEC], 0x6B;
	__asm        jmp    near ptr 0x00452E91;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   0x00471A8C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x00452ED8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 589:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+4];
// LINE 592:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xFC], eax;
	__asm        cmp    dword ptr [ebp-0xFC], 0;
	__asm        je     near ptr 0x00452F7E;
	__asm        jmp    near ptr 0x00452F1A;
	__asm        mov    dword ptr [ebp-0x10C], 0x4E;
	__asm        mov    dword ptr [ebp-0x108], 0x92;
	__asm        mov    dword ptr [ebp-0x104], 0x51;
	__asm        mov    dword ptr [ebp-0x100], 0x95;
	__asm        jmp    near ptr 0x00452F47;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   5;
	__asm        lea    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xFC];
	__asm        call   0x00471A8C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x00452F8E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 593:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+4];
// LINE 596:
	__asm        push   0x84;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     near ptr 0x00452FF9;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   6;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   0x004B030D;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    near ptr 0x00453009;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
// LINE 600:
	__asm        push   0x98;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     near ptr 0x00453096;
	__asm        jmp    near ptr 0x0045302E;
	__asm        mov    dword ptr [ebp-0x124], 0x10A;
	__asm        mov    dword ptr [ebp-0x120], 0x124;
	__asm        mov    dword ptr [ebp-0x11C], 0x10D;
	__asm        mov    dword ptr [ebp-0x118], 0x127;
	__asm        jmp    near ptr 0x0045305B;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   0x00471945;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    near ptr 0x0045309D;
	__asm        mov    tempRadioButtonWindow, 0;
// LINE 601:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 602:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 606:
	__asm        push   0x98;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     near ptr 0x00453145;
	__asm        jmp    near ptr 0x004530DD;
	__asm        mov    dword ptr [ebp-0x138], 0x10A;
	__asm        mov    dword ptr [ebp-0x134], 0x140;
	__asm        mov    dword ptr [ebp-0x130], 0x10D;
	__asm        mov    dword ptr [ebp-0x12C], 0x143;
	__asm        jmp    near ptr 0x0045310A;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x128];
	__asm        call   0x00471945;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    near ptr 0x0045314C;
	__asm        mov    tempRadioButtonWindow, 0;
// LINE 607:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 608:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 612:
	__asm        push   0x98;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     near ptr 0x004531F4;
	__asm        jmp    near ptr 0x0045318C;
	__asm        mov    dword ptr [ebp-0x14C], 0x10A;
	__asm        mov    dword ptr [ebp-0x148], 0x15C;
	__asm        mov    dword ptr [ebp-0x144], 0x10D;
	__asm        mov    dword ptr [ebp-0x140], 0x15F;
	__asm        jmp    near ptr 0x004531B9;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   9;
	__asm        lea    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x13C];
	__asm        call   0x00471945;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    near ptr 0x004531FB;
	__asm        mov    tempRadioButtonWindow, 0;
// LINE 613:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 614:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 619:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     near ptr 0x004532A9;
	__asm        jmp    near ptr 0x0045323B;
	__asm        mov    dword ptr [ebp-0x160], 0x48;
	__asm        mov    dword ptr [ebp-0x15C], 0xD5;
	__asm        mov    dword ptr [ebp-0x158], 0x4B;
	__asm        mov    dword ptr [ebp-0x154], 0xD8;
	__asm        jmp    near ptr 0x00453268;
	__asm        push   8;
	__asm        mov    eax, ds:[0x599168];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        jmp    near ptr 0x004532B9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
// LINE 620:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x98];
	__asm        call   dword ptr [edx+4];
// LINE 621:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   0x004B2834;
// LINE 622:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   0x004B2872;
// LINE 626:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x164], eax;
	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     near ptr 0x0045337C;
	__asm        jmp    near ptr 0x00453321;
	__asm        mov    dword ptr [ebp-0x174], 0x148;
	__asm        mov    dword ptr [ebp-0x170], 0x13E;
	__asm        mov    dword ptr [ebp-0x16C], 0x14B;
	__asm        mov    dword ptr [ebp-0x168], 0x141;
	__asm        jmp    near ptr 0x0045334E;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x164];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x00453383;
	__asm        mov    tempButtonWindow, 0;
// LINE 627:
	__asm        push   0;
	__asm        push   0x51;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 628:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        cmp    dword ptr [ebp-0x11CC], 0;
	__asm        jne    near ptr 0x0045376B;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        jmp    near ptr 0x004533F1;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E8], eax;
	__asm        cmp    dword ptr [ebp-0x11E8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045344B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045343C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045344B;
	__asm        jmp    near ptr 0x00453450;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00453481;
	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     near ptr 0x00453526;
	__asm        jmp    near ptr 0x0045346F;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11E8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00453526;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11D4], eax;
	__asm        cmp    dword ptr [ebp-0x11D4], 0;
	__asm        je     near ptr 0x004534C2;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11D4];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x11D0], eax;
	__asm        jmp    near ptr 0x004534CC;
	__asm        mov    dword ptr [ebp-0x11D0], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00453513;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        cmp    dword ptr [ebp-0x11E0], 0;
	__asm        je     near ptr 0x00453513;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11E0];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00453513;
	__asm        jmp    near ptr 0x00453518;
	__asm        mov    eax, [ebp-0x11D0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00453565;
	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     near ptr 0x00453565;
	__asm        jmp    near ptr 0x00453538;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00453565;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00453576;
	__asm        jmp    near ptr 0x0045357B;
	__asm        jmp    near ptr 0x00453580;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1208], eax;
	__asm        jmp    near ptr 0x00453598;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1208];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004535E7;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11FC], eax;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004535D8;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004535E7;
	__asm        jmp    near ptr 0x004535EC;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045361B;
	__asm        jmp    near ptr 0x004535FE;
	__asm        jmp    near ptr 0x00453603;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1208];
	__asm        jae    near ptr 0x00453708;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11F0], eax;
	__asm        cmp    dword ptr [ebp-0x11F0], 0;
	__asm        je     near ptr 0x004536A9;
	__asm        jmp    near ptr 0x0045363D;
	__asm        jmp    near ptr 0x00453642;
	__asm        jmp    near ptr 0x00453647;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00453669;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11F8], eax;
	__asm        jmp    near ptr 0x00453678;
	__asm        jmp    near ptr 0x00453678;
	__asm        mov    dword ptr [ebp-0x11F8], 0;
	__asm        jmp    near ptr 0x00453678;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11F8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x11EC], eax;
	__asm        jmp    near ptr 0x004536B3;
	__asm        mov    dword ptr [ebp-0x11EC], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004536FA;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1204], eax;
	__asm        mov    eax, [ebp-0x1204];
	__asm        mov    [ebp-0x1200], eax;
	__asm        cmp    dword ptr [ebp-0x1200], 0;
	__asm        je     near ptr 0x004536FA;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1200];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004536FA;
	__asm        jmp    near ptr 0x004536FF;
	__asm        mov    eax, [ebp-0x11EC];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x1208], 0;
	__asm        je     near ptr 0x00453750;
	__asm        jmp    near ptr 0x0045371A;
	__asm        jmp    near ptr 0x0045371F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11F4], eax;
	__asm        mov    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11F4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00453750;
	__asm        mov    eax, [ebp-0x1208];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00453761;
	__asm        jmp    near ptr 0x00453766;
	__asm        jmp    near ptr 0x004538FF;
	__asm        jmp    near ptr 0x00453770;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1224], eax;
	__asm        cmp    dword ptr [ebp-0x1224], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004537CA;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1218], eax;
	__asm        mov    eax, [ebp-0x1218];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004537BB;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004537CA;
	__asm        jmp    near ptr 0x004537CF;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00453800;
	__asm        cmp    dword ptr [ebp-0x1224], 0;
	__asm        je     near ptr 0x004538A5;
	__asm        jmp    near ptr 0x004537EE;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1224];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004538A5;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1210], eax;
	__asm        cmp    dword ptr [ebp-0x1210], 0;
	__asm        je     near ptr 0x00453841;
	__asm        mov    eax, [ebp-0x1224];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1210];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x120C], eax;
	__asm        jmp    near ptr 0x0045384B;
	__asm        mov    dword ptr [ebp-0x120C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00453892;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1220], eax;
	__asm        mov    eax, [ebp-0x1220];
	__asm        mov    [ebp-0x121C], eax;
	__asm        cmp    dword ptr [ebp-0x121C], 0;
	__asm        je     near ptr 0x00453892;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x121C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00453892;
	__asm        jmp    near ptr 0x00453897;
	__asm        mov    eax, [ebp-0x120C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x004538E4;
	__asm        cmp    dword ptr [ebp-0x1224], 0;
	__asm        je     near ptr 0x004538E4;
	__asm        jmp    near ptr 0x004538B7;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1214], eax;
	__asm        mov    eax, [ebp-0x1224];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1214];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004538E4;
	__asm        mov    eax, [ebp-0x1224];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004538F5;
	__asm        jmp    near ptr 0x004538FA;
	__asm        jmp    near ptr 0x004538FF;
// LINE 629:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 630:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 631:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 634:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x178], eax;
	__asm        cmp    dword ptr [ebp-0x178], 0;
	__asm        je     near ptr 0x004539B1;
	__asm        jmp    near ptr 0x00453956;
	__asm        mov    dword ptr [ebp-0x188], 0x1B0;
	__asm        mov    dword ptr [ebp-0x184], 0x13E;
	__asm        mov    dword ptr [ebp-0x180], 0x1B3;
	__asm        mov    dword ptr [ebp-0x17C], 0x141;
	__asm        jmp    near ptr 0x00453983;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x178];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x004539B8;
	__asm        mov    tempButtonWindow, 0;
// LINE 635:
	__asm        push   0;
	__asm        push   0x52;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 636:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2228], eax;
	__asm        cmp    dword ptr [ebp-0x2228], 0;
	__asm        jne    near ptr 0x00453D5C;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2228], eax;
	__asm        jmp    near ptr 0x00453A26;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2244], eax;
	__asm        cmp    dword ptr [ebp-0x2244], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00453A80;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2238], eax;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453A71;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453A80;
	__asm        jmp    near ptr 0x00453A85;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00453AB6;
	__asm        cmp    dword ptr [ebp-0x2244], 0;
	__asm        je     near ptr 0x00453B5B;
	__asm        jmp    near ptr 0x00453AA4;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2244];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00453B5B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2230], eax;
	__asm        cmp    dword ptr [ebp-0x2230], 0;
	__asm        je     near ptr 0x00453AF7;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2230];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x222C], eax;
	__asm        jmp    near ptr 0x00453B01;
	__asm        mov    dword ptr [ebp-0x222C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00453B48;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2240], eax;
	__asm        mov    eax, [ebp-0x2240];
	__asm        mov    [ebp-0x223C], eax;
	__asm        cmp    dword ptr [ebp-0x223C], 0;
	__asm        je     near ptr 0x00453B48;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x223C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00453B48;
	__asm        jmp    near ptr 0x00453B4D;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00453B9A;
	__asm        cmp    dword ptr [ebp-0x2244], 0;
	__asm        je     near ptr 0x00453B9A;
	__asm        jmp    near ptr 0x00453B6D;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00453B9A;
	__asm        mov    eax, [ebp-0x2244];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00453BAB;
	__asm        jmp    near ptr 0x00453BB0;
	__asm        jmp    near ptr 0x00453BB5;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x225C], eax;
	__asm        jmp    near ptr 0x00453BCD;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x225C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00453C1C;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2258], eax;
	__asm        mov    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453C0D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453C1C;
	__asm        jmp    near ptr 0x00453C21;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00453C50;
	__asm        jmp    near ptr 0x00453C33;
	__asm        jmp    near ptr 0x00453C38;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x225C];
	__asm        jae    near ptr 0x00453CF9;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x224C], eax;
	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     near ptr 0x00453CDE;
	__asm        jmp    near ptr 0x00453C72;
	__asm        jmp    near ptr 0x00453C77;
	__asm        jmp    near ptr 0x00453C7C;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00453C9E;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2254], eax;
	__asm        jmp    near ptr 0x00453CAD;
	__asm        jmp    near ptr 0x00453CAD;
	__asm        mov    dword ptr [ebp-0x2254], 0;
	__asm        jmp    near ptr 0x00453CAD;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x225C];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2254];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x224C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x2248], eax;
	__asm        jmp    near ptr 0x00453CE8;
	__asm        mov    dword ptr [ebp-0x2248], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x2248];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x225C], 0;
	__asm        je     near ptr 0x00453D41;
	__asm        jmp    near ptr 0x00453D0B;
	__asm        jmp    near ptr 0x00453D10;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2250], eax;
	__asm        mov    eax, [ebp-0x225C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2250];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00453D41;
	__asm        mov    eax, [ebp-0x225C];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00453D52;
	__asm        jmp    near ptr 0x00453D57;
	__asm        jmp    near ptr 0x00453F07;
	__asm        jmp    near ptr 0x00453D61;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2278], eax;
	__asm        cmp    dword ptr [ebp-0x2278], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00453DBB;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x226C], eax;
	__asm        mov    eax, [ebp-0x226C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453DAC;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453DBB;
	__asm        jmp    near ptr 0x00453DC0;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00453DF1;
	__asm        cmp    dword ptr [ebp-0x2278], 0;
	__asm        je     near ptr 0x00453EAD;
	__asm        jmp    near ptr 0x00453DDF;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2278];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00453EAD;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2264], eax;
	__asm        cmp    dword ptr [ebp-0x2264], 0;
	__asm        je     near ptr 0x00453E32;
	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2264];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2260], eax;
	__asm        jmp    near ptr 0x00453E3C;
	__asm        mov    dword ptr [ebp-0x2260], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00453E9A;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2274], eax;
	__asm        mov    eax, [ebp-0x2274];
	__asm        mov    [ebp-0x2270], eax;
	__asm        cmp    dword ptr [ebp-0x2270], 0;
	__asm        je     near ptr 0x00453E9A;
	__asm        mov    ecx, [ebp-0x2270];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00453E81;
	__asm        mov    eax, [ebp-0x2270];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00453E95;
	__asm        jmp    near ptr 0x00453E9A;
	__asm        jmp    near ptr 0x00453E9F;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00453EEC;
	__asm        cmp    dword ptr [ebp-0x2278], 0;
	__asm        je     near ptr 0x00453EEC;
	__asm        jmp    near ptr 0x00453EBF;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2268], eax;
	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2268];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00453EEC;
	__asm        mov    eax, [ebp-0x2278];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00453EFD;
	__asm        jmp    near ptr 0x00453F02;
	__asm        jmp    near ptr 0x00453F07;
// LINE 637:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 638:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 639:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 645:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        je     near ptr 0x00453FD7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00453FB2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        jne    near ptr 0x00453FB2;
	__asm        lea    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        jmp    near ptr 0x00453FB2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x00453FD7;
	__asm        jmp    near ptr 0x00453FDC;
// LINE 646:
	__asm        jmp    near ptr 0x00453FE1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x00453FF9;
	__asm        jmp    near ptr 0x00454095;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    near ptr 0x00454028;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x00454090;
	__asm        jmp    near ptr 0x00454090;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00454070;
	__asm        lea    eax, [ebp-0x198];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x00454090;
	__asm        jmp    near ptr 0x00454090;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x00454090;
	__asm        jmp    near ptr 0x00454095;
// LINE 648:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 649:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 651:
	__asm        mov    dword ptr [ebp-0x18C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045411B;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     near ptr 0x0045411B;
	__asm        mov    ecx, [ebp-0x1B8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00454102;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454116;
	__asm        jmp    near ptr 0x0045411B;
	__asm        jmp    near ptr 0x00454120;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x0045414E;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454153;
	__asm        mov    eax, [ebp-0x18C];
	__asm        jmp    near ptr 0x0045415E;
// LINE 652:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00454163
int32_t RenderSettingsWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 659:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 661:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
// LINE 662:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     near ptr 0x004541A2;
// LINE 663:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 665:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 666:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x004541B5;
// LINE 667:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004541bc
void RenderSettingsWindow::DestroyImage() {
// LINE 674:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 676:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        je     near ptr 0x00454227;
// LINE 679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045421A;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454215;
	__asm        jmp    near ptr 0x0045421A;
// LINE 680:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 682:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     near ptr 0x0045427E;
// LINE 683:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00454271;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045426C;
	__asm        jmp    near ptr 0x00454271;
// LINE 684:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 686:
	__asm        jmp    near ptr 0x00454283;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00454288
int32_t RenderSettingsWindow::DrawSelf() {
// LINE 693:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 694:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004542A5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x00454334;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    near ptr 0x004542D8;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0045431F;
	__asm        jmp    near ptr 0x0045431F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00454308;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0045431F;
	__asm        jmp    near ptr 0x0045431F;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0045431F;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    [ebp-0x14], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x00454382;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        je     near ptr 0x00454382;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0x96;
	__asm        jbe    near ptr 0x00454518;
	__asm        jmp    near ptr 0x004543A1;
	__asm        cmp    dword ptr [ebp-0x14], 0x96;
	__asm        jbe    near ptr 0x00454518;
	__asm        jmp    near ptr 0x004543A1;
	__asm        cmp    dword ptr [ebp-0x28], 0x96;
	__asm        jbe    near ptr 0x00454518;
// LINE 695:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xB4];
// LINE 696:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0xC8;
	__asm        jle    near ptr 0x004543CA;
// LINE 697:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
// LINE 701:
	__asm        push   0x42;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        add    eax, 0xC8;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0x38;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 703:
	__asm        jmp    near ptr 0x00454411;
	__asm        jmp    near ptr 0x00454416;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x6C;
	__asm        push   0x159;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 705:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x00454478;
	__asm        jmp    near ptr 0x0045447D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x00454492;
	__asm        jmp    near ptr 0x00454513;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    near ptr 0x004544BB;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x0045450E;
	__asm        jmp    near ptr 0x0045450E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x004544F1;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x0045450E;
	__asm        jmp    near ptr 0x0045450E;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    near ptr 0x0045450E;
	__asm        jmp    near ptr 0x00454513;
	__asm        jmp    near ptr 0x00454518;
// LINE 707:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00454522;
// LINE 708:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00454527
long RenderSettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 715:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 716:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x0045456C;
// LINE 717:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0045456C;
// LINE 718:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 720:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00454576;
// LINE 721:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045457d
int32_t RenderSettingsWindow::SetCurrentSettings(long bNewShowBuildingTextures, long bNewShowGroundTextures, long bNewShowSkyAndClouds, long lNewQuadPixelType, long lNewFogCloseness) {
// LINE 737:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 738:
	__asm        mov    eax, bNewShowBuildingTextures;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 739:
	__asm        mov    eax, bNewShowGroundTextures;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 740:
	__asm        mov    eax, bNewShowSkyAndClouds;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
// LINE 741:
	__asm        mov    eax, lNewQuadPixelType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 742:
	__asm        mov    eax, lNewFogCloseness;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 743:
	__asm        mov    ecx, this;
	__asm        call   0x00454632;
// LINE 744:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 746:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004545D6;
// LINE 747:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004545dd
void RenderSettingsWindow::GetCurrentSettings(long& bGetShowBuildingTextures, long& bGetShowGroundTextures, long& bGetShowSkyAndClouds, long& lGetQuadPixelType, long& lGetFogCloseness) {
// LINE 762:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 763:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    ecx, bGetShowBuildingTextures;
	__asm        mov    [ecx], eax;
// LINE 764:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, bGetShowGroundTextures;
	__asm        mov    [ecx], eax;
// LINE 765:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, bGetShowSkyAndClouds;
	__asm        mov    [ecx], eax;
// LINE 766:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, lGetQuadPixelType;
	__asm        mov    [ecx], eax;
// LINE 767:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, lGetFogCloseness;
	__asm        mov    [ecx], eax;
// LINE 768:
	__asm        jmp    near ptr 0x0045462B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00454632
void RenderSettingsWindow::SetControlsBasedOnCurrentSettings() {
// LINE 776:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 777:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0045466C;
// LINE 778:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC8];
// LINE 779:
	__asm        jmp    near ptr 0x00454688;
// LINE 780:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC8];
// LINE 782:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x004546B6;
// LINE 783:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC8];
// LINE 784:
	__asm        jmp    near ptr 0x004546D2;
// LINE 785:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC8];
// LINE 787:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x00454700;
// LINE 788:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC8];
// LINE 789:
	__asm        jmp    near ptr 0x0045471C;
// LINE 790:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC8];
// LINE 792:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jge    near ptr 0x00454739;
// LINE 793:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 794:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 2;
	__asm        jle    near ptr 0x00454756;
// LINE 795:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 2;
// LINE 796:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   0x004B0CD4;
// LINE 798:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jge    near ptr 0x0045478B;
// LINE 799:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 800:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0x64;
	__asm        jle    near ptr 0x004547A8;
// LINE 801:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0x64;
// LINE 802:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   0x004B273A;
// LINE 803:
	__asm        jmp    near ptr 0x004547C5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004547ca
void RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings() {
	class basic_string<char> sGroundPreviewFileName;
	class basic_string<char> sGroundPreviewFilePath;
	class basic_string<char> sSkyPreviewFilePath;
	class CBackBuffer tempGroundImage;
	class basic_string<char> sBuildingPreviewFilePath;
	class basic_string<char> sSkyPreviewFileName;
	class basic_string<char> sBuildingPreviewFileName;

// LINE 814:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1EC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 815:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x184], eax;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     near ptr 0x00454844;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00454836;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    sSkyPreviewFileName.reference, eax;
	__asm        jmp    near ptr 0x0045484B;
	__asm        mov    sSkyPreviewFileName.reference, 0;
	__asm        mov    sSkyPreviewFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00454857;
// LINE 816:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x188], eax;
	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        je     near ptr 0x004548C2;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004548B1;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    sSkyPreviewFilePath.reference, eax;
	__asm        jmp    near ptr 0x004548CC;
	__asm        mov    sSkyPreviewFilePath.reference, 0;
	__asm        mov    sSkyPreviewFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004548DB;
// LINE 817:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     near ptr 0x00454946;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00454935;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    sGroundPreviewFileName.reference, eax;
	__asm        jmp    near ptr 0x00454950;
	__asm        mov    sGroundPreviewFileName.reference, 0;
	__asm        mov    sGroundPreviewFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0045495F;
// LINE 818:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     near ptr 0x004549CA;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004549B9;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    sGroundPreviewFilePath.reference, eax;
	__asm        jmp    near ptr 0x004549D4;
	__asm        mov    sGroundPreviewFilePath.reference, 0;
	__asm        mov    sGroundPreviewFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004549E3;
// LINE 819:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x194], eax;
	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     near ptr 0x00454A4B;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x194];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00454A3D;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    sBuildingPreviewFileName.reference, eax;
	__asm        jmp    near ptr 0x00454A52;
	__asm        mov    sBuildingPreviewFileName.reference, 0;
	__asm        mov    sBuildingPreviewFileName.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00454A5E;
// LINE 820:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x198], eax;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     near ptr 0x00454AC6;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00454AB8;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    sBuildingPreviewFilePath.reference, eax;
	__asm        jmp    near ptr 0x00454ACD;
	__asm        mov    sBuildingPreviewFilePath.reference, 0;
	__asm        mov    sBuildingPreviewFilePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00454AD9;
// LINE 822:
	__asm        lea    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004550CF;
// LINE 823:
	__asm        lea    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x00454B11;
// LINE 824:
	__asm        lea    eax, sGroundPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x00454B32;
// LINE 825:
	__asm        lea    eax, sBuildingPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x00454B4D;
// LINE 828:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        je     near ptr 0x00454BAF;
// LINE 829:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x168], eax;
	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        je     near ptr 0x00454BAF;
	__asm        mov    ecx, [ebp-0x168];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454BAA;
	__asm        jmp    near ptr 0x00454BAF;
// LINE 830:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x170], eax;
	__asm        cmp    dword ptr [ebp-0x170], 0;
	__asm        je     near ptr 0x00454CFD;
	__asm        cmp    sSkyPreviewFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00454C03;
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1D4], eax;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454C08;
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sSkyPreviewFilePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x00454C26;
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00454C89;
	__asm        jmp    near ptr 0x00454C3B;
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        mov    [ebp-0x1E4], eax;
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00454C89;
	__asm        jmp    near ptr 0x00454C8E;
	__asm        mov    byte ptr [ebp-0x1D0], 0;
	__asm        jmp    near ptr 0x00454C9A;
	__asm        lea    eax, [ebp-0x1D0];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    near ptr 0x00454CAB;
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1DC];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00454CD5;
	__asm        jmp    near ptr 0x00454CDA;
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x170];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        jmp    near ptr 0x00454D0D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 831:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     near ptr 0x00454D6F;
// LINE 832:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x174], eax;
	__asm        cmp    dword ptr [ebp-0x174], 0;
	__asm        je     near ptr 0x00454D6F;
	__asm        mov    ecx, [ebp-0x174];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454D6A;
	__asm        jmp    near ptr 0x00454D6F;
// LINE 833:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x17C], eax;
	__asm        cmp    dword ptr [ebp-0x17C], 0;
	__asm        je     near ptr 0x00454DB7;
	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x17C];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        jmp    near ptr 0x00454DC7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
// LINE 834:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x180], eax;
	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     near ptr 0x00454E0C;
	__asm        lea    ecx, sBuildingPreviewFilePath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x180];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    near ptr 0x00454E1C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
// LINE 835:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+8];
// LINE 836:
	__asm        lea    ecx, sGroundPreviewFilePath.c_str_ptr;
	__asm        call   0x00417AE0;
	__asm        push   eax;
	__asm        lea    ecx, tempGroundImage.<vftable>;
	__asm        call   0x0046E6DF;
// LINE 842:
	__asm        push   0x42;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        add    eax, 0xC8;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0x38;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 844:
	__asm        jmp    near ptr 0x00454EAE;
	__asm        jmp    near ptr 0x00454EB3;
	__asm        mov    eax, tempGroundImage.mHeight;
	__asm        push   eax;
	__asm        mov    eax, tempGroundImage.mWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x78;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempGroundImage.<vftable>;
	__asm        call   0x0046F948;
// LINE 846:
	__asm        jmp    near ptr 0x00454EE6;
	__asm        jmp    near ptr 0x00454EEB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x6C;
	__asm        push   0x159;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 847:
	__asm        lea    ecx, tempGroundImage.<vftable>;
	__asm        call   0x0046EC7A;
	__asm        lea    ecx, sBuildingPreviewFilePath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sBuildingPreviewFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00454F7E;
	__asm        mov    eax, sBuildingPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454F83;
	__asm        lea    ecx, sBuildingPreviewFileName.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sBuildingPreviewFileName.c_str_ptr, 0;
	__asm        je     near ptr 0x00454FB9;
	__asm        mov    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00454FBE;
	__asm        lea    ecx, sGroundPreviewFilePath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sGroundPreviewFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00454FFD;
	__asm        mov    eax, sGroundPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455002;
	__asm        lea    ecx, sGroundPreviewFileName.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sGroundPreviewFileName.c_str_ptr, 0;
	__asm        je     near ptr 0x00455041;
	__asm        mov    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455046;
	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sSkyPreviewFilePath.c_str_ptr, 0;
	__asm        je     near ptr 0x00455085;
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045508A;
	__asm        lea    ecx, sSkyPreviewFileName.c_str_ptr;
	__asm        call   0x00412080;
	__asm        cmp    sSkyPreviewFileName.c_str_ptr, 0;
	__asm        je     near ptr 0x004550C0;
	__asm        mov    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004550C5;
	__asm        jmp    near ptr 0x004550CA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004550cf
void RenderSettingsWindow::GetPreviewFileNames(class basic_string<char>& sSkyPreviewFileName, class basic_string<char>& sGroundPreviewFileName, class basic_string<char>& sBuildingPreviewFileName) {
// LINE 857:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x599144];
	__asm        mov    [ebp-4], eax;
// LINE 858:
	__asm        jmp    near ptr 0x004550EE;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x0045510C;
	__asm        mov    eax, ds:[0x599148];
	__asm        mov    [ebp-8], eax;
// LINE 859:
	__asm        jmp    near ptr 0x00455119;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00455137;
	__asm        mov    eax, ds:[0x59914C];
	__asm        mov    [ebp-0xC], eax;
// LINE 860:
	__asm        jmp    near ptr 0x00455144;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x0040FEE0;
	__asm        jmp    near ptr 0x00455162;
// LINE 861:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    near ptr 0x004551D0;
	__asm        mov    eax, ds:[0x599150];
	__asm        mov    [ebp-0x10], eax;
// LINE 862:
	__asm        jmp    near ptr 0x00455182;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004551A0;
	__asm        mov    eax, ds:[0x599150];
	__asm        mov    [ebp-0x14], eax;
// LINE 863:
	__asm        jmp    near ptr 0x004551AD;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004551CB;
// LINE 865:
	__asm        jmp    near ptr 0x00455226;
	__asm        mov    eax, ds:[0x599154];
	__asm        mov    [ebp-0x18], eax;
// LINE 866:
	__asm        jmp    near ptr 0x004551DD;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x004551FB;
	__asm        mov    eax, ds:[0x599154];
	__asm        mov    [ebp-0x1C], eax;
// LINE 867:
	__asm        jmp    near ptr 0x00455208;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00455226;
// LINE 869:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x00455266;
// LINE 870:
	__asm        mov    eax, ds:[0x599158];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00455243;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x00410130;
	__asm        jmp    near ptr 0x00455261;
// LINE 871:
	__asm        jmp    near ptr 0x004553CA;
// LINE 872:
	__asm        mov    eax, ds:[0x59915C];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00455273;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00455287;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004552D0;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004552C1;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004552D0;
	__asm        jmp    near ptr 0x004552D5;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045530A;
	__asm        jmp    near ptr 0x004552EA;
	__asm        jmp    near ptr 0x004552EF;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    near ptr 0x00455373;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0045535B;
	__asm        jmp    near ptr 0x00455326;
	__asm        jmp    near ptr 0x0045532B;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00455362;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x004553B4;
	__asm        jmp    near ptr 0x00455382;
	__asm        jmp    near ptr 0x00455387;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004553B4;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x004553C5;
	__asm        jmp    near ptr 0x004553CA;
// LINE 873:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     near ptr 0x00455543;
// LINE 874:
	__asm        mov    eax, ds:[0x599158];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004553E7;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004553FB;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x4C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00455444;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455435;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455444;
	__asm        jmp    near ptr 0x00455449;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045547E;
	__asm        jmp    near ptr 0x0045545E;
	__asm        jmp    near ptr 0x00455463;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x4C];
	__asm        jae    near ptr 0x004554E7;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004554CF;
	__asm        jmp    near ptr 0x0045549A;
	__asm        jmp    near ptr 0x0045549F;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004554D6;
	__asm        mov    dword ptr [ebp-0x3C], 0;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x00455528;
	__asm        jmp    near ptr 0x004554F6;
	__asm        jmp    near ptr 0x004554FB;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00455528;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00455539;
	__asm        jmp    near ptr 0x0045553E;
// LINE 875:
	__asm        jmp    near ptr 0x004556A7;
// LINE 876:
	__asm        mov    eax, ds:[0x59915C];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00455550;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00455564;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x64];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004555AD;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045559E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004555AD;
	__asm        jmp    near ptr 0x004555B2;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004555E7;
	__asm        jmp    near ptr 0x004555C7;
	__asm        jmp    near ptr 0x004555CC;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x64];
	__asm        jae    near ptr 0x00455650;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00455638;
	__asm        jmp    near ptr 0x00455603;
	__asm        jmp    near ptr 0x00455608;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0045563F;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x00455691;
	__asm        jmp    near ptr 0x0045565F;
	__asm        jmp    near ptr 0x00455664;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00455691;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x004556A2;
	__asm        jmp    near ptr 0x004556A7;
// LINE 877:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     near ptr 0x00455820;
// LINE 878:
	__asm        mov    eax, ds:[0x599160];
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004556C4;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    near ptr 0x004556D8;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x7C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00455721;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455712;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00455721;
	__asm        jmp    near ptr 0x00455726;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045575B;
	__asm        jmp    near ptr 0x0045573B;
	__asm        jmp    near ptr 0x00455740;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x7C];
	__asm        jae    near ptr 0x004557C4;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x004557AC;
	__asm        jmp    near ptr 0x00455777;
	__asm        jmp    near ptr 0x0045577C;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x004557B3;
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     near ptr 0x00455805;
	__asm        jmp    near ptr 0x004557D3;
	__asm        jmp    near ptr 0x004557D8;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00455805;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00455816;
	__asm        jmp    near ptr 0x0045581B;
// LINE 879:
	__asm        jmp    near ptr 0x004559FA;
// LINE 880:
	__asm        mov    eax, ds:[0x599164];
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    near ptr 0x00455830;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x0045584A;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x98];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045589C;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045588D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045589C;
	__asm        jmp    near ptr 0x004558A1;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004558D9;
	__asm        jmp    near ptr 0x004558B6;
	__asm        jmp    near ptr 0x004558BB;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x98];
	__asm        jae    near ptr 0x00455991;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x00455973;
	__asm        jmp    near ptr 0x004558FB;
	__asm        jmp    near ptr 0x00455900;
	__asm        jmp    near ptr 0x00455905;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045592D;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0045593C;
	__asm        jmp    near ptr 0x0045593C;
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x0045593C;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    near ptr 0x0045597D;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    [ecx+4], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x004559E1;
	__asm        jmp    near ptr 0x004559A3;
	__asm        jmp    near ptr 0x004559A8;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004559E1;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x004559F5;
	__asm        jmp    near ptr 0x004559FA;
// LINE 881:
	__asm        jmp    near ptr 0x004559FF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00455a06
int32_t RenderSettingsWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 889:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 890:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00455BAE;
// LINE 892:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00455A4C;
// LINE 893:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 894:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 897:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00455A85;
// LINE 898:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 899:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 902:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00455ABB;
// LINE 903:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   0x004B0F79;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
// LINE 904:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 906:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 909:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00455AFF;
// LINE 910:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    near ptr 0x00455AED;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
	__asm        jmp    near ptr 0x00455AF7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 911:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 913:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 916:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00455B43;
// LINE 917:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    near ptr 0x00455B31;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 1;
	__asm        jmp    near ptr 0x00455B3B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 918:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 920:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 923:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00455B87;
// LINE 924:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    near ptr 0x00455B75;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 1;
	__asm        jmp    near ptr 0x00455B7F;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 925:
	__asm        mov    ecx, this;
	__asm        call   0x004547CA;
// LINE 927:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 931:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 932:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 933:
	__asm        jmp    near ptr 0x00455BED;
	__asm        dec    dword ptr [ebp-8];
	__asm        cmp    dword ptr [ebp-8], 9;
	__asm        ja     near ptr 0x00455BED;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x455BC5];
	__asm        sbb    eax, 0x5600455A;
	__asm        pop    edx;
	__asm        inc    ebp;
	__asm        add    ch, al;
	__asm        pop    edx;
	__asm        inc    ebp;
	__asm        add    [ecx], cl;
	__asm        pop    ebx;
	__asm        inc    ebp;
	__asm        add    [ebp+0x5B], cl;
	__asm        inc    ebp;
	__asm        add    [edi-0x12FFBAA6], cl;
	__asm        pop    ebx;
	__asm        inc    ebp;
	__asm        add    ch, ch;
	__asm        pop    ebx;
	__asm        inc    ebp;
	__asm        add    ch, ch;
	__asm        pop    ebx;
	__asm        inc    ebp;
	__asm        (bad);
// LINE 935:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00455BF4;
// LINE 936:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00455bfb
void SoundSettingsWindow::SoundSettingsWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 990:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x59916C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FCE8;
// LINE 991:
	__asm        jmp    near ptr 0x00455C75;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00455c7f
int32_t SoundSettingsWindow::Initialize() {
	class TextWindow* tempTextWindow;
	class ButtonWindow* tempButtonWindow2;
	class ButtonWindow* tempButtonWindow1;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 999:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x2198;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1002:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xFC], eax;
	__asm        cmp    dword ptr [ebp-0xFC], 0;
	__asm        je     near ptr 0x00455CFD;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00455CEF;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00455D04;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x00455D10;
// LINE 1004:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1007:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00455D86;
	__asm        jmp    near ptr 0x00455D3A;
	__asm        mov    dword ptr [ebp-0x2C], 0x96;
	__asm        mov    dword ptr [ebp-0x28], 0x170;
	__asm        mov    dword ptr [ebp-0x24], 0x118;
	__asm        mov    dword ptr [ebp-0x20], 0x17E;
	__asm        jmp    near ptr 0x00455D5B;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x82;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00455D8D;
	__asm        mov    tempTextWindow, 0;
// LINE 1008:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1009:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1010:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1024:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00455E2F;
	__asm        jmp    near ptr 0x00455DE3;
	__asm        mov    dword ptr [ebp-0x40], 0x71;
	__asm        mov    dword ptr [ebp-0x3C], 0x11F;
	__asm        mov    dword ptr [ebp-0x38], 0xD2;
	__asm        mov    dword ptr [ebp-0x34], 0x12D;
	__asm        jmp    near ptr 0x00455E04;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x8A;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00455E36;
	__asm        mov    tempTextWindow, 0;
// LINE 1025:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1026:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1027:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1029:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00455ED8;
	__asm        jmp    near ptr 0x00455E8C;
	__asm        mov    dword ptr [ebp-0x54], 0xD6;
	__asm        mov    dword ptr [ebp-0x50], 0x11F;
	__asm        mov    dword ptr [ebp-0x4C], 0x13C;
	__asm        mov    dword ptr [ebp-0x48], 0x12D;
	__asm        jmp    near ptr 0x00455EAD;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x89;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00455EDF;
	__asm        mov    tempTextWindow, 0;
// LINE 1030:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1031:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1032:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1039:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x00455F81;
	__asm        jmp    near ptr 0x00455F35;
	__asm        mov    dword ptr [ebp-0x68], 0x15C;
	__asm        mov    dword ptr [ebp-0x64], 0x11F;
	__asm        mov    dword ptr [ebp-0x60], 0x17E;
	__asm        mov    dword ptr [ebp-0x5C], 0x12C;
	__asm        jmp    near ptr 0x00455F56;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x8C;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00455F88;
	__asm        mov    tempTextWindow, 0;
// LINE 1040:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1041:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1042:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1046:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x00456030;
	__asm        jmp    near ptr 0x00455FDE;
	__asm        mov    dword ptr [ebp-0x7C], 0x8F;
	__asm        mov    dword ptr [ebp-0x78], 0xFD;
	__asm        mov    dword ptr [ebp-0x74], 0x90;
	__asm        mov    dword ptr [ebp-0x70], 0xFE;
	__asm        jmp    near ptr 0x00455FFF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        call   0x00471A8C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00456040;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 1047:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+4];
// LINE 1050:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x004560DD;
	__asm        jmp    near ptr 0x0045607C;
	__asm        mov    dword ptr [ebp-0x90], 0xFB;
	__asm        mov    dword ptr [ebp-0x8C], 0xFD;
	__asm        mov    dword ptr [ebp-0x88], 0xFC;
	__asm        mov    dword ptr [ebp-0x84], 0xFE;
	__asm        jmp    near ptr 0x004560A9;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   0x00471A8C;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x004560ED;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 1051:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+4];
// LINE 1059:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     near ptr 0x00456196;
	__asm        jmp    near ptr 0x0045612F;
	__asm        mov    dword ptr [ebp-0xA4], 0x78;
	__asm        mov    dword ptr [ebp-0xA0], 0x14E;
	__asm        mov    dword ptr [ebp-0x9C], 0x138;
	__asm        mov    dword ptr [ebp-0x98], 0x16E;
	__asm        jmp    near ptr 0x0045615C;
	__asm        push   8;
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x004561A3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1060:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 1061:
	__asm        push   0x140;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2834;
// LINE 1062:
	__asm        push   0x2710;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2872;
// LINE 1083:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     near ptr 0x0045626C;
	__asm        jmp    near ptr 0x00456205;
	__asm        mov    dword ptr [ebp-0xB8], 0x15E;
	__asm        mov    dword ptr [ebp-0xB4], 0x4E;
	__asm        mov    dword ptr [ebp-0xB0], 0x17E;
	__asm        mov    dword ptr [ebp-0xAC], 0x10E;
	__asm        jmp    near ptr 0x00456232;
	__asm        push   8;
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xB;
	__asm        lea    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA8];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x00456279;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1084:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1085:
	__asm        push   0x140;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2834;
// LINE 1086:
	__asm        push   0x2710;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2872;
// LINE 1090:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xBC], eax;
	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     near ptr 0x0045634A;
	__asm        jmp    near ptr 0x004562DB;
	__asm        mov    dword ptr [ebp-0xCC], 0x189;
	__asm        mov    dword ptr [ebp-0xC8], 0x5B;
	__asm        mov    dword ptr [ebp-0xC4], 0x1B7;
	__asm        mov    dword ptr [ebp-0xC0], 0x117;
	__asm        jmp    near ptr 0x00456308;
	__asm        push   8;
	__asm        mov    eax, ds:[0x599170];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599174];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xBC];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x00456357;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1091:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1092:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2834;
// LINE 1093:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2872;
// LINE 1097:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD0], eax;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     near ptr 0x0045640E;
	__asm        jmp    near ptr 0x004563B3;
	__asm        mov    dword ptr [ebp-0xE0], 0x14E;
	__asm        mov    dword ptr [ebp-0xDC], 0x14B;
	__asm        mov    dword ptr [ebp-0xD8], 0x14F;
	__asm        mov    dword ptr [ebp-0xD4], 0x14C;
	__asm        jmp    near ptr 0x004563E0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    near ptr 0x00456415;
	__asm        mov    tempButtonWindow1, 0;
// LINE 1098:
	__asm        push   0;
	__asm        push   0x8D;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1099:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1110], eax;
	__asm        cmp    dword ptr [ebp-0x1110], 0;
	__asm        jne    near ptr 0x00456744;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1110], eax;
	__asm        jmp    near ptr 0x00456486;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1124], eax;
	__asm        cmp    dword ptr [ebp-0x1124], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004564E0;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1120], eax;
	__asm        mov    eax, [ebp-0x1120];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004564D1;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004564E0;
	__asm        jmp    near ptr 0x004564E5;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00456516;
	__asm        cmp    dword ptr [ebp-0x1124], 0;
	__asm        je     near ptr 0x00456577;
	__asm        jmp    near ptr 0x00456504;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1124];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00456577;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1118], eax;
	__asm        cmp    dword ptr [ebp-0x1118], 0;
	__asm        je     near ptr 0x00456557;
	__asm        mov    eax, [ebp-0x1124];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1118];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x1114], eax;
	__asm        jmp    near ptr 0x00456561;
	__asm        mov    dword ptr [ebp-0x1114], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1114];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x004565B6;
	__asm        cmp    dword ptr [ebp-0x1124], 0;
	__asm        je     near ptr 0x004565B6;
	__asm        jmp    near ptr 0x00456589;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x111C], eax;
	__asm        mov    eax, [ebp-0x1124];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x111C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004565B6;
	__asm        mov    eax, [ebp-0x1124];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004565C7;
	__asm        jmp    near ptr 0x004565CC;
	__asm        jmp    near ptr 0x004565D1;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1138], eax;
	__asm        jmp    near ptr 0x004565E9;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1138];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00456638;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1134], eax;
	__asm        mov    eax, [ebp-0x1134];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456629;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456638;
	__asm        jmp    near ptr 0x0045663D;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045666C;
	__asm        jmp    near ptr 0x0045664F;
	__asm        jmp    near ptr 0x00456654;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1138];
	__asm        jae    near ptr 0x004566E1;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x112C], eax;
	__asm        cmp    dword ptr [ebp-0x112C], 0;
	__asm        je     near ptr 0x004566C6;
	__asm        jmp    near ptr 0x0045668E;
	__asm        jmp    near ptr 0x00456693;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1138];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x112C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1128], eax;
	__asm        jmp    near ptr 0x004566D0;
	__asm        mov    dword ptr [ebp-0x1128], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x1128];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x1138], 0;
	__asm        je     near ptr 0x00456729;
	__asm        jmp    near ptr 0x004566F3;
	__asm        jmp    near ptr 0x004566F8;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1130], eax;
	__asm        mov    eax, [ebp-0x1138];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1130];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00456729;
	__asm        mov    eax, [ebp-0x1138];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045673A;
	__asm        jmp    near ptr 0x0045673F;
	__asm        jmp    near ptr 0x004568D8;
	__asm        jmp    near ptr 0x00456749;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1154], eax;
	__asm        cmp    dword ptr [ebp-0x1154], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004567A3;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1148], eax;
	__asm        mov    eax, [ebp-0x1148];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456794;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004567A3;
	__asm        jmp    near ptr 0x004567A8;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004567D9;
	__asm        cmp    dword ptr [ebp-0x1154], 0;
	__asm        je     near ptr 0x0045687E;
	__asm        jmp    near ptr 0x004567C7;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1154];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045687E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1140], eax;
	__asm        cmp    dword ptr [ebp-0x1140], 0;
	__asm        je     near ptr 0x0045681A;
	__asm        mov    eax, [ebp-0x1154];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1140];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x113C], eax;
	__asm        jmp    near ptr 0x00456824;
	__asm        mov    dword ptr [ebp-0x113C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045686B;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1150], eax;
	__asm        mov    eax, [ebp-0x1150];
	__asm        mov    [ebp-0x114C], eax;
	__asm        cmp    dword ptr [ebp-0x114C], 0;
	__asm        je     near ptr 0x0045686B;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x114C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045686B;
	__asm        jmp    near ptr 0x00456870;
	__asm        mov    eax, [ebp-0x113C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x004568BD;
	__asm        cmp    dword ptr [ebp-0x1154], 0;
	__asm        je     near ptr 0x004568BD;
	__asm        jmp    near ptr 0x00456890;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1144], eax;
	__asm        mov    eax, [ebp-0x1154];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1144];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004568BD;
	__asm        mov    eax, [ebp-0x1154];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004568CE;
	__asm        jmp    near ptr 0x004568D3;
	__asm        jmp    near ptr 0x004568D8;
// LINE 1100:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 1101:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1102:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 1105:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE4], eax;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        je     near ptr 0x0045698A;
	__asm        jmp    near ptr 0x0045692F;
	__asm        mov    dword ptr [ebp-0xF4], 0x14E;
	__asm        mov    dword ptr [ebp-0xF0], 0x167;
	__asm        mov    dword ptr [ebp-0xEC], 0x14F;
	__asm        mov    dword ptr [ebp-0xE8], 0x168;
	__asm        jmp    near ptr 0x0045695C;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow2, eax;
	__asm        jmp    near ptr 0x00456991;
	__asm        mov    tempButtonWindow2, 0;
// LINE 1106:
	__asm        push   0;
	__asm        push   0x8E;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1107:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2158], eax;
	__asm        cmp    dword ptr [ebp-0x2158], 0;
	__asm        jne    near ptr 0x00456CC0;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2158], eax;
	__asm        jmp    near ptr 0x00456A02;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x216C], eax;
	__asm        cmp    dword ptr [ebp-0x216C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00456A5C;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2168], eax;
	__asm        mov    eax, [ebp-0x2168];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456A4D;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456A5C;
	__asm        jmp    near ptr 0x00456A61;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00456A92;
	__asm        cmp    dword ptr [ebp-0x216C], 0;
	__asm        je     near ptr 0x00456AF3;
	__asm        jmp    near ptr 0x00456A80;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x216C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00456AF3;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2160], eax;
	__asm        cmp    dword ptr [ebp-0x2160], 0;
	__asm        je     near ptr 0x00456AD3;
	__asm        mov    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2160];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x215C], eax;
	__asm        jmp    near ptr 0x00456ADD;
	__asm        mov    dword ptr [ebp-0x215C], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x215C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00456B32;
	__asm        cmp    dword ptr [ebp-0x216C], 0;
	__asm        je     near ptr 0x00456B32;
	__asm        jmp    near ptr 0x00456B05;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2164], eax;
	__asm        mov    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2164];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00456B32;
	__asm        mov    eax, [ebp-0x216C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00456B43;
	__asm        jmp    near ptr 0x00456B48;
	__asm        jmp    near ptr 0x00456B4D;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2180], eax;
	__asm        jmp    near ptr 0x00456B65;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2180];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00456BB4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x217C], eax;
	__asm        mov    eax, [ebp-0x217C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456BA5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456BB4;
	__asm        jmp    near ptr 0x00456BB9;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00456BE8;
	__asm        jmp    near ptr 0x00456BCB;
	__asm        jmp    near ptr 0x00456BD0;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2180];
	__asm        jae    near ptr 0x00456C5D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2174], eax;
	__asm        cmp    dword ptr [ebp-0x2174], 0;
	__asm        je     near ptr 0x00456C42;
	__asm        jmp    near ptr 0x00456C0A;
	__asm        jmp    near ptr 0x00456C0F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2180];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00417C00;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2174];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x2170], eax;
	__asm        jmp    near ptr 0x00456C4C;
	__asm        mov    dword ptr [ebp-0x2170], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x2170];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x2180], 0;
	__asm        je     near ptr 0x00456CA5;
	__asm        jmp    near ptr 0x00456C6F;
	__asm        jmp    near ptr 0x00456C74;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2178], eax;
	__asm        mov    eax, [ebp-0x2180];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2178];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00456CA5;
	__asm        mov    eax, [ebp-0x2180];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00456CB6;
	__asm        jmp    near ptr 0x00456CBB;
	__asm        jmp    near ptr 0x00456E10;
	__asm        jmp    near ptr 0x00456CC5;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2194], eax;
	__asm        cmp    dword ptr [ebp-0x2194], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00456D1F;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2190], eax;
	__asm        mov    eax, [ebp-0x2190];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456D10;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456D1F;
	__asm        jmp    near ptr 0x00456D24;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00456D55;
	__asm        cmp    dword ptr [ebp-0x2194], 0;
	__asm        je     near ptr 0x00456DB6;
	__asm        jmp    near ptr 0x00456D43;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2194];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00456DB6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2188], eax;
	__asm        cmp    dword ptr [ebp-0x2188], 0;
	__asm        je     near ptr 0x00456D96;
	__asm        mov    eax, [ebp-0x2194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2188];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2184], eax;
	__asm        jmp    near ptr 0x00456DA0;
	__asm        mov    dword ptr [ebp-0x2184], 0;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   0x00412080;
	__asm        mov    eax, [ebp-0x2184];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00456DF5;
	__asm        cmp    dword ptr [ebp-0x2194], 0;
	__asm        je     near ptr 0x00456DF5;
	__asm        jmp    near ptr 0x00456DC8;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x218C], eax;
	__asm        mov    eax, [ebp-0x2194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x218C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00456DF5;
	__asm        mov    eax, [ebp-0x2194];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00456E06;
	__asm        jmp    near ptr 0x00456E0B;
	__asm        jmp    near ptr 0x00456E10;
// LINE 1108:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0x48];
// LINE 1109:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1110:
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+4];
// LINE 1112:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 1113:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1115:
	__asm        mov    dword ptr [ebp-0xF8], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00456EC8;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x00456EC8;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00456EAF;
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456EC3;
	__asm        jmp    near ptr 0x00456EC8;
	__asm        jmp    near ptr 0x00456ECD;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x00456EFB;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00456F00;
	__asm        mov    eax, [ebp-0xF8];
	__asm        jmp    near ptr 0x00456F0B;
// LINE 1116:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00456f10
long SoundSettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1123:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1124:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00456F55;
// LINE 1125:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00456F55;
// LINE 1126:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1128:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00456F5F;
// LINE 1129:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00456f66
int32_t SoundSettingsWindow::SetCurrentVolumeSettings(struct SoundPreferences& newSoundPreferences) {
// LINE 1136:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1137:
	__asm        mov    eax, newSoundPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004572A2;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B273A;
// LINE 1141:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00456F96;
// LINE 1142:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00456f9d
int32_t SoundSettingsWindow::SetCurrentRadioSettings(struct RadioPreferences& newRadioPreferences, long lCurrentStations) {
// LINE 1149:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1151:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004572A2;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 1152:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00456FDD;
// LINE 1153:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 1156:
	__asm        mov    eax, lCurrentStations;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2872;
// LINE 1157:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B273A;
// LINE 1160:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0045702D;
// LINE 1161:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1162:
	__asm        jmp    near ptr 0x00457049;
// LINE 1163:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1166:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00457077;
// LINE 1167:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1168:
	__asm        jmp    near ptr 0x00457093;
// LINE 1169:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1179:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045709D;
// LINE 1180:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x004570a4
void SoundSettingsWindow::GetCurrentVolumeSettings(struct SoundPreferences& currentSoundPreferences) {
// LINE 1186:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1187:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentSoundPreferences;
	__asm        mov    [ecx], eax;
// LINE 1189:
	__asm        mov    eax, currentSoundPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004572EA;
	__asm        add    esp, 4;
	__asm        mov    ecx, currentSoundPreferences;
	__asm        mov    [ecx], eax;
// LINE 1193:
	__asm        jmp    near ptr 0x004570D8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004570df
void SoundSettingsWindow::GetCurrentRadioSettings(struct RadioPreferences& currentRadioPreferences) {
// LINE 1199:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1200:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx], eax;
// LINE 1201:
	__asm        mov    eax, currentRadioPreferences;
	__asm        cmp    dword ptr [eax], 0x258;
	__asm        jge    near ptr 0x00457113;
// LINE 1202:
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax], 0x140;
// LINE 1203:
	__asm        mov    eax, currentRadioPreferences;
	__asm        cmp    dword ptr [eax], 0x140;
	__asm        je     near ptr 0x00457131;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+4], 1;
	__asm        jmp    near ptr 0x0045713B;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1205:
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004572EA;
	__asm        add    esp, 4;
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx], eax;
// LINE 1206:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentRadioPreferences;
	__asm        mov    [ecx+8], eax;
// LINE 1207:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    near ptr 0x00457191;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045719B;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 1208:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    near ptr 0x004571CD;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+0x10], 1;
	__asm        jmp    near ptr 0x004571D7;
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 1210:
	__asm        mov    eax, currentRadioPreferences;
	__asm        mov    dword ptr [eax+0x18], 1;
// LINE 1211:
	__asm        jmp    near ptr 0x004571E6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004571ed
int32_t SoundSettingsWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1219:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1220:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045727B;
// LINE 1222:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00457233;
// LINE 1223:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1224:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045729B;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0045726C;
// LINE 1228:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1229:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045729B;
// LINE 1230:
	__asm        jmp    near ptr 0x00457294;
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     near ptr 0x00457204;
	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     near ptr 0x0045723D;
	__asm        jmp    near ptr 0x00457294;
// LINE 1232:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045729B;
// LINE 1233:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x004572a2
long SoundSettingsWindow::ConvertSoundValueToSliderValue(long lSoundValue) {
// LINE 1243:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1247:
	__asm        fld    qword ptr ds:[0x58FDB0];
	__asm        mov    eax, lSoundValue;
	__asm        mov    [ebp-4], eax;
	__asm        fisub  dword ptr [ebp-4];
	__asm        fdiv   qword ptr ds:[0x58FDB8];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        push   0x40000000;
	__asm        push   0;
	__asm        call   0x0056F380;
	__asm        add    esp, 0x10;
	__asm        fdivr  qword ptr ds:[0x58FDB0];
	__asm        call   0x0056EBE8;
	__asm        jmp    near ptr 0x004572E5;
// LINE 1254:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004572ea
long SoundSettingsWindow::ConvertSliderValueToSoundValue(long lSliderValue) {
// LINE 1272:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1276:
	__asm        fld    qword ptr ds:[0x58FDB0];
	__asm        mov    eax, lSliderValue;
	__asm        mov    [ebp-4], eax;
	__asm        fidiv  dword ptr [ebp-4];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F38A;
	__asm        add    esp, 8;
	__asm        fdiv   qword ptr ds:[0x58FDC8];
	__asm        fmul   qword ptr ds:[0x58FDB8];
	__asm        fsubr  qword ptr ds:[0x58FDB0];
	__asm        call   0x0056EBE8;
	__asm        jmp    near ptr 0x0045732C;
// LINE 1283:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00457331
void CitySettingsWindow::CitySettingsWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	int32_t i;

// LINE 1321:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599178];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FDD0;
// LINE 1324:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0045737D;
	__asm        inc    i;
	__asm        cmp    i, 8;
	__asm        jge    near ptr 0x0045739A;
// LINE 1325:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x74], 0;
	__asm        jmp    near ptr 0x0045737A;
// LINE 1326:
	__asm        jmp    near ptr 0x0045739F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x004573a9
int32_t CitySettingsWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class TextWindow* tempTextWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 1332:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x228C;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1335:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x184], eax;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     near ptr 0x00457427;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00457419;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045742E;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0045743A;
// LINE 1338:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 1345:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x004574B0;
	__asm        jmp    near ptr 0x00457464;
	__asm        mov    dword ptr [ebp-0x28], 0x2A;
	__asm        mov    dword ptr [ebp-0x24], 0x2F;
	__asm        mov    dword ptr [ebp-0x20], 0x80;
	__asm        mov    dword ptr [ebp-0x1C], 0x46;
	__asm        jmp    near ptr 0x00457485;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14D;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x004574B7;
	__asm        mov    tempTextWindow, 0;
// LINE 1346:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1347:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1348:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1350:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x00457559;
	__asm        jmp    near ptr 0x0045750D;
	__asm        mov    dword ptr [ebp-0x3C], 0x34;
	__asm        mov    dword ptr [ebp-0x38], 0x147;
	__asm        mov    dword ptr [ebp-0x34], 0x88;
	__asm        mov    dword ptr [ebp-0x30], 0x15E;
	__asm        jmp    near ptr 0x0045752E;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14E;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00457560;
	__asm        mov    tempTextWindow, 0;
// LINE 1351:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1352:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1353:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1355:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00457602;
	__asm        jmp    near ptr 0x004575B6;
	__asm        mov    dword ptr [ebp-0x50], 0xB3;
	__asm        mov    dword ptr [ebp-0x4C], 0x147;
	__asm        mov    dword ptr [ebp-0x48], 0x109;
	__asm        mov    dword ptr [ebp-0x44], 0x15E;
	__asm        jmp    near ptr 0x004575D7;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14F;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00457609;
	__asm        mov    tempTextWindow, 0;
// LINE 1356:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1357:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1358:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1360:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x004576AB;
	__asm        jmp    near ptr 0x0045765F;
	__asm        mov    dword ptr [ebp-0x64], 0xBB;
	__asm        mov    dword ptr [ebp-0x60], 0x2F;
	__asm        mov    dword ptr [ebp-0x5C], 0x111;
	__asm        mov    dword ptr [ebp-0x58], 0x45;
	__asm        jmp    near ptr 0x00457680;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x150;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x004576B2;
	__asm        mov    tempTextWindow, 0;
// LINE 1361:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1362:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1363:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1365:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x00457754;
	__asm        jmp    near ptr 0x00457708;
	__asm        mov    dword ptr [ebp-0x78], 0x13A;
	__asm        mov    dword ptr [ebp-0x74], 0x2F;
	__asm        mov    dword ptr [ebp-0x70], 0x190;
	__asm        mov    dword ptr [ebp-0x6C], 0x45;
	__asm        jmp    near ptr 0x00457729;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x151;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045775B;
	__asm        mov    tempTextWindow, 0;
// LINE 1366:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1367:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1368:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1370:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     near ptr 0x00457809;
	__asm        jmp    near ptr 0x004577B1;
	__asm        mov    dword ptr [ebp-0x8C], 0x143;
	__asm        mov    dword ptr [ebp-0x88], 0x147;
	__asm        mov    dword ptr [ebp-0x84], 0x198;
	__asm        mov    dword ptr [ebp-0x80], 0x15E;
	__asm        jmp    near ptr 0x004577DB;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x152;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00457810;
	__asm        mov    tempTextWindow, 0;
// LINE 1371:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1372:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1373:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1375:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x004578CA;
	__asm        jmp    near ptr 0x0045786C;
	__asm        mov    dword ptr [ebp-0xA0], 0x1C4;
	__asm        mov    dword ptr [ebp-0x9C], 0x147;
	__asm        mov    dword ptr [ebp-0x98], 0x218;
	__asm        mov    dword ptr [ebp-0x94], 0x15E;
	__asm        jmp    near ptr 0x00457899;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x153;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x004578D1;
	__asm        mov    tempTextWindow, 0;
// LINE 1376:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1377:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1378:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1380:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     near ptr 0x0045798B;
	__asm        jmp    near ptr 0x0045792D;
	__asm        mov    dword ptr [ebp-0xB4], 0x1CD;
	__asm        mov    dword ptr [ebp-0xB0], 0x2F;
	__asm        mov    dword ptr [ebp-0xAC], 0x220;
	__asm        mov    dword ptr [ebp-0xA8], 0x46;
	__asm        jmp    near ptr 0x0045795A;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x154;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x00457992;
	__asm        mov    tempTextWindow, 0;
// LINE 1381:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1382:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1383:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1388:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x00457A59;
	__asm        jmp    near ptr 0x004579EE;
	__asm        mov    dword ptr [ebp-0xC8], 0x2A;
	__asm        mov    dword ptr [ebp-0xC4], 0x60;
	__asm        mov    dword ptr [ebp-0xC0], 0x44;
	__asm        mov    dword ptr [ebp-0xBC], 0x12A;
	__asm        jmp    near ptr 0x00457A1B;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x00457A66;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 1389:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 1390:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2834;
// LINE 1391:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2872;
// LINE 1395:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     near ptr 0x00457B2D;
	__asm        jmp    near ptr 0x00457AC2;
	__asm        mov    dword ptr [ebp-0xDC], 0x6F;
	__asm        mov    dword ptr [ebp-0xD8], 0x60;
	__asm        mov    dword ptr [ebp-0xD4], 0x89;
	__asm        mov    dword ptr [ebp-0xD0], 0x12A;
	__asm        jmp    near ptr 0x00457AEF;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   4;
	__asm        lea    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xCC];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x00457B3A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 1396:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1397:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2834;
// LINE 1398:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2872;
// LINE 1402:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE0], eax;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     near ptr 0x00457C01;
	__asm        jmp    near ptr 0x00457B96;
	__asm        mov    dword ptr [ebp-0xF0], 0xB3;
	__asm        mov    dword ptr [ebp-0xEC], 0x60;
	__asm        mov    dword ptr [ebp-0xE8], 0xCD;
	__asm        mov    dword ptr [ebp-0xE4], 0x12A;
	__asm        jmp    near ptr 0x00457BC3;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   5;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE0];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x00457C0E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 1403:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1404:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2834;
// LINE 1405:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2872;
// LINE 1409:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xF4], eax;
	__asm        cmp    dword ptr [ebp-0xF4], 0;
	__asm        je     near ptr 0x00457CD8;
	__asm        jmp    near ptr 0x00457C6A;
	__asm        mov    dword ptr [ebp-0x104], 0xF8;
	__asm        mov    dword ptr [ebp-0x100], 0x60;
	__asm        mov    dword ptr [ebp-0xFC], 0x112;
	__asm        mov    dword ptr [ebp-0xF8], 0x12A;
	__asm        jmp    near ptr 0x00457C97;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   6;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF4];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x00457CE8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+4];
// LINE 1411:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   0x004B2834;
// LINE 1412:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   0x004B2872;
// LINE 1416:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x00457DBE;
	__asm        jmp    near ptr 0x00457D50;
	__asm        mov    dword ptr [ebp-0x118], 0x13C;
	__asm        mov    dword ptr [ebp-0x114], 0x60;
	__asm        mov    dword ptr [ebp-0x110], 0x156;
	__asm        mov    dword ptr [ebp-0x10C], 0x12A;
	__asm        jmp    near ptr 0x00457D7D;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x00457DCE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 1417:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+4];
// LINE 1418:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   0x004B2834;
// LINE 1419:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   0x004B2872;
// LINE 1423:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x00457EA4;
	__asm        jmp    near ptr 0x00457E36;
	__asm        mov    dword ptr [ebp-0x12C], 0x181;
	__asm        mov    dword ptr [ebp-0x128], 0x60;
	__asm        mov    dword ptr [ebp-0x124], 0x19B;
	__asm        mov    dword ptr [ebp-0x120], 0x12A;
	__asm        jmp    near ptr 0x00457E63;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   8;
	__asm        lea    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x00457EB4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 1424:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+4];
// LINE 1425:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   0x004B2834;
// LINE 1426:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   0x004B2872;
// LINE 1430:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     near ptr 0x00457F8A;
	__asm        jmp    near ptr 0x00457F1C;
	__asm        mov    dword ptr [ebp-0x140], 0x1C6;
	__asm        mov    dword ptr [ebp-0x13C], 0x60;
	__asm        mov    dword ptr [ebp-0x138], 0x1E0;
	__asm        mov    dword ptr [ebp-0x134], 0x12A;
	__asm        jmp    near ptr 0x00457F49;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   9;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x00457F9A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 1431:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+4];
// LINE 1432:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   0x004B2834;
// LINE 1433:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   0x004B2872;
// LINE 1437:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     near ptr 0x00458070;
	__asm        jmp    near ptr 0x00458002;
	__asm        mov    dword ptr [ebp-0x154], 0x20A;
	__asm        mov    dword ptr [ebp-0x150], 0x60;
	__asm        mov    dword ptr [ebp-0x14C], 0x224;
	__asm        mov    dword ptr [ebp-0x148], 0x12A;
	__asm        jmp    near ptr 0x0045802F;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59917C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x144];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x00458080;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 1438:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+4];
// LINE 1439:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x004B2834;
// LINE 1440:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x004B2872;
// LINE 1443:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     near ptr 0x00458143;
	__asm        jmp    near ptr 0x004580E8;
	__asm        mov    dword ptr [ebp-0x168], 0x82;
	__asm        mov    dword ptr [ebp-0x164], 0x178;
	__asm        mov    dword ptr [ebp-0x160], 0x83;
	__asm        mov    dword ptr [ebp-0x15C], 0x179;
	__asm        jmp    near ptr 0x00458115;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x158];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0045814A;
	__asm        mov    tempButtonWindow, 0;
// LINE 1444:
	__asm        push   0;
	__asm        push   0x14B;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1445:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        cmp    dword ptr [ebp-0x11A0], 0;
	__asm        jne    near ptr 0x0045862B;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        jmp    near ptr 0x004581BB;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C8], eax;
	__asm        cmp    dword ptr [ebp-0x11C8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00458215;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11B0], eax;
	__asm        mov    eax, [ebp-0x11B0];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458206;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458215;
	__asm        jmp    near ptr 0x0045821A;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045824B;
	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     near ptr 0x004583E6;
	__asm        jmp    near ptr 0x00458239;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11C8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004583E6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11A8], eax;
	__asm        cmp    dword ptr [ebp-0x11A8], 0;
	__asm        je     near ptr 0x0045836B;
	__asm        cmp    dword ptr [ebp-0x11C8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x004582AD;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045829E;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004582AD;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045833C;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11BC], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458337;
	__asm        jmp    near ptr 0x00458348;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045835A;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        jmp    near ptr 0x00458375;
	__asm        mov    dword ptr [ebp-0x11A4], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004583D3;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11B8], eax;
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    [ebp-0x11B4], eax;
	__asm        cmp    dword ptr [ebp-0x11B4], 0;
	__asm        je     near ptr 0x004583D3;
	__asm        mov    ecx, [ebp-0x11B4];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004583BA;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004583CE;
	__asm        jmp    near ptr 0x004583D3;
	__asm        jmp    near ptr 0x004583D8;
	__asm        mov    eax, [ebp-0x11A4];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00458425;
	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     near ptr 0x00458425;
	__asm        jmp    near ptr 0x004583F8;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11AC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458425;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00458436;
	__asm        jmp    near ptr 0x0045843B;
	__asm        jmp    near ptr 0x00458440;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E8], eax;
	__asm        jmp    near ptr 0x00458458;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x11E8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x004584A7;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458498;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004584A7;
	__asm        jmp    near ptr 0x004584AC;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004584DB;
	__asm        jmp    near ptr 0x004584BE;
	__asm        jmp    near ptr 0x004584C3;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x11E8];
	__asm        jae    near ptr 0x004585C8;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11D0], eax;
	__asm        cmp    dword ptr [ebp-0x11D0], 0;
	__asm        je     near ptr 0x00458569;
	__asm        jmp    near ptr 0x004584FD;
	__asm        jmp    near ptr 0x00458502;
	__asm        jmp    near ptr 0x00458507;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00458529;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        jmp    near ptr 0x00458538;
	__asm        jmp    near ptr 0x00458538;
	__asm        mov    dword ptr [ebp-0x11D8], 0;
	__asm        jmp    near ptr 0x00458538;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11D0];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x11CC], eax;
	__asm        jmp    near ptr 0x00458573;
	__asm        mov    dword ptr [ebp-0x11CC], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004585BA;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        cmp    dword ptr [ebp-0x11E0], 0;
	__asm        je     near ptr 0x004585BA;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11E0];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004585BA;
	__asm        jmp    near ptr 0x004585BF;
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     near ptr 0x00458610;
	__asm        jmp    near ptr 0x004585DA;
	__asm        jmp    near ptr 0x004585DF;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458610;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00458621;
	__asm        jmp    near ptr 0x00458626;
	__asm        jmp    near ptr 0x00458901;
	__asm        jmp    near ptr 0x00458630;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1218], eax;
	__asm        cmp    dword ptr [ebp-0x1218], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045868A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11F8], eax;
	__asm        mov    eax, [ebp-0x11F8];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045867B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045868A;
	__asm        jmp    near ptr 0x0045868F;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004586C0;
	__asm        cmp    dword ptr [ebp-0x1218], 0;
	__asm        je     near ptr 0x004588A7;
	__asm        jmp    near ptr 0x004586AE;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1218];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004588A7;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11F0], eax;
	__asm        cmp    dword ptr [ebp-0x11F0], 0;
	__asm        je     near ptr 0x004587E0;
	__asm        cmp    dword ptr [ebp-0x1218], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00458722;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1214], eax;
	__asm        mov    eax, [ebp-0x1214];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458713;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458722;
	__asm        mov    eax, [ebp-0x1218];
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004587B1;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x120C], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1210], eax;
	__asm        mov    eax, [ebp-0x120C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1210];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004587AC;
	__asm        jmp    near ptr 0x004587BD;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004587CF;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    [ebp-0x11EC], eax;
	__asm        jmp    near ptr 0x004587EA;
	__asm        mov    dword ptr [ebp-0x11EC], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00458894;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1200], eax;
	__asm        mov    eax, [ebp-0x1200];
	__asm        mov    [ebp-0x11FC], eax;
	__asm        cmp    dword ptr [ebp-0x11FC], 0;
	__asm        je     near ptr 0x00458894;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00458871;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1204], eax;
	__asm        mov    eax, [ebp-0x1204];
	__asm        mov    [ebp-0x1208], eax;
	__asm        mov    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x00458876;
	__asm        jmp    near ptr 0x0045887B;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045888F;
	__asm        jmp    near ptr 0x00458894;
	__asm        jmp    near ptr 0x00458899;
	__asm        mov    eax, [ebp-0x11EC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x004588E6;
	__asm        cmp    dword ptr [ebp-0x1218], 0;
	__asm        je     near ptr 0x004588E6;
	__asm        jmp    near ptr 0x004588B9;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11F4], eax;
	__asm        mov    eax, [ebp-0x1218];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11F4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004588E6;
	__asm        mov    eax, [ebp-0x1218];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004588F7;
	__asm        jmp    near ptr 0x004588FC;
	__asm        jmp    near ptr 0x00458901;
// LINE 1446:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1447:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1448:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1450:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x16C], eax;
	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        je     near ptr 0x004589B3;
	__asm        jmp    near ptr 0x00458958;
	__asm        mov    dword ptr [ebp-0x17C], 0x16C;
	__asm        mov    dword ptr [ebp-0x178], 0x178;
	__asm        mov    dword ptr [ebp-0x174], 0x16D;
	__asm        mov    dword ptr [ebp-0x170], 0x179;
	__asm        jmp    near ptr 0x00458985;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x16C];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x004589BA;
	__asm        mov    tempButtonWindow, 0;
// LINE 1451:
	__asm        push   0;
	__asm        push   0x14C;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 1452:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x221C], eax;
	__asm        cmp    dword ptr [ebp-0x221C], 0;
	__asm        jne    near ptr 0x00458DD3;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x221C], eax;
	__asm        jmp    near ptr 0x00458A2B;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2238], eax;
	__asm        cmp    dword ptr [ebp-0x2238], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00458A85;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x222C], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458A76;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458A85;
	__asm        jmp    near ptr 0x00458A8A;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00458ABB;
	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     near ptr 0x00458B77;
	__asm        jmp    near ptr 0x00458AA9;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2238];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00458B77;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2224], eax;
	__asm        cmp    dword ptr [ebp-0x2224], 0;
	__asm        je     near ptr 0x00458AFC;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2224];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x2220], eax;
	__asm        jmp    near ptr 0x00458B06;
	__asm        mov    dword ptr [ebp-0x2220], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00458B64;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        mov    [ebp-0x2230], eax;
	__asm        cmp    dword ptr [ebp-0x2230], 0;
	__asm        je     near ptr 0x00458B64;
	__asm        mov    ecx, [ebp-0x2230];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00458B4B;
	__asm        mov    eax, [ebp-0x2230];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458B5F;
	__asm        jmp    near ptr 0x00458B64;
	__asm        jmp    near ptr 0x00458B69;
	__asm        mov    eax, [ebp-0x2220];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x00458BB6;
	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     near ptr 0x00458BB6;
	__asm        jmp    near ptr 0x00458B89;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2228], eax;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2228];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458BB6;
	__asm        mov    eax, [ebp-0x2238];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00458BC7;
	__asm        jmp    near ptr 0x00458BCC;
	__asm        jmp    near ptr 0x00458BD1;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2258], eax;
	__asm        jmp    near ptr 0x00458BE9;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2258];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x00458C38;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x224C], eax;
	__asm        mov    eax, [ebp-0x224C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458C29;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458C38;
	__asm        jmp    near ptr 0x00458C3D;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00458C6C;
	__asm        jmp    near ptr 0x00458C4F;
	__asm        jmp    near ptr 0x00458C54;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2258];
	__asm        jae    near ptr 0x00458D70;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2240], eax;
	__asm        cmp    dword ptr [ebp-0x2240], 0;
	__asm        je     near ptr 0x00458CFA;
	__asm        jmp    near ptr 0x00458C8E;
	__asm        jmp    near ptr 0x00458C93;
	__asm        jmp    near ptr 0x00458C98;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00458CBA;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2248], eax;
	__asm        jmp    near ptr 0x00458CC9;
	__asm        jmp    near ptr 0x00458CC9;
	__asm        mov    dword ptr [ebp-0x2248], 0;
	__asm        jmp    near ptr 0x00458CC9;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2248];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2240];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x223C], eax;
	__asm        jmp    near ptr 0x00458D04;
	__asm        mov    dword ptr [ebp-0x223C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00458D62;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2254], eax;
	__asm        mov    eax, [ebp-0x2254];
	__asm        mov    [ebp-0x2250], eax;
	__asm        cmp    dword ptr [ebp-0x2250], 0;
	__asm        je     near ptr 0x00458D62;
	__asm        mov    ecx, [ebp-0x2250];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x00458D49;
	__asm        mov    eax, [ebp-0x2250];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458D5D;
	__asm        jmp    near ptr 0x00458D62;
	__asm        jmp    near ptr 0x00458D67;
	__asm        mov    eax, [ebp-0x223C];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x2258], 0;
	__asm        je     near ptr 0x00458DB8;
	__asm        jmp    near ptr 0x00458D82;
	__asm        jmp    near ptr 0x00458D87;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2244], eax;
	__asm        mov    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458DB8;
	__asm        mov    eax, [ebp-0x2258];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x00458DC9;
	__asm        jmp    near ptr 0x00458DCE;
	__asm        jmp    near ptr 0x004590A9;
	__asm        jmp    near ptr 0x00458DD8;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2288], eax;
	__asm        cmp    dword ptr [ebp-0x2288], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00458E32;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2268], eax;
	__asm        mov    eax, [ebp-0x2268];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458E23;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458E32;
	__asm        jmp    near ptr 0x00458E37;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00458E68;
	__asm        cmp    dword ptr [ebp-0x2288], 0;
	__asm        je     near ptr 0x0045904F;
	__asm        jmp    near ptr 0x00458E56;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2288];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045904F;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2260], eax;
	__asm        cmp    dword ptr [ebp-0x2260], 0;
	__asm        je     near ptr 0x00458F88;
	__asm        cmp    dword ptr [ebp-0x2288], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00458ECA;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2284], eax;
	__asm        mov    eax, [ebp-0x2284];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458EBB;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00458ECA;
	__asm        mov    eax, [ebp-0x2288];
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00458F59;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x227C], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2280], eax;
	__asm        mov    eax, [ebp-0x227C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2280];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00458F54;
	__asm        jmp    near ptr 0x00458F65;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x00458F77;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    [ebp-0x225C], eax;
	__asm        jmp    near ptr 0x00458F92;
	__asm        mov    dword ptr [ebp-0x225C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045903C;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2270], eax;
	__asm        mov    eax, [ebp-0x2270];
	__asm        mov    [ebp-0x226C], eax;
	__asm        cmp    dword ptr [ebp-0x226C], 0;
	__asm        je     near ptr 0x0045903C;
	__asm        mov    eax, [ebp-0x226C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00459019;
	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2274], eax;
	__asm        mov    eax, [ebp-0x2274];
	__asm        mov    [ebp-0x2278], eax;
	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045901E;
	__asm        jmp    near ptr 0x00459023;
	__asm        mov    eax, [ebp-0x226C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459037;
	__asm        jmp    near ptr 0x0045903C;
	__asm        jmp    near ptr 0x00459041;
	__asm        mov    eax, [ebp-0x225C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045908E;
	__asm        cmp    dword ptr [ebp-0x2288], 0;
	__asm        je     near ptr 0x0045908E;
	__asm        jmp    near ptr 0x00459061;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2264], eax;
	__asm        mov    eax, [ebp-0x2288];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2264];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045908E;
	__asm        mov    eax, [ebp-0x2288];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045909F;
	__asm        jmp    near ptr 0x004590A4;
	__asm        jmp    near ptr 0x004590A9;
// LINE 1453:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1454:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1455:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1457:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 1458:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 1460:
	__asm        mov    dword ptr [ebp-0x180], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004591AD;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x194], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     near ptr 0x004591AD;
	__asm        mov    eax, [ebp-0x190];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045918A;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045918F;
	__asm        jmp    near ptr 0x00459194;
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004591A8;
	__asm        jmp    near ptr 0x004591AD;
	__asm        jmp    near ptr 0x004591B2;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x004591E0;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004591E5;
	__asm        mov    eax, [ebp-0x180];
	__asm        jmp    near ptr 0x004591F0;
// LINE 1461:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x004591f5
void CitySettingsWindow::SetCurrentCitySettings(struct tagCitySettings* newCitySettings) {
// LINE 1469:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1470:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B273A;
// LINE 1471:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B273A;
// LINE 1472:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 1473:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   0x004B273A;
// LINE 1474:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   0x004B273A;
// LINE 1475:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   0x004B273A;
// LINE 1476:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   0x004B273A;
// LINE 1477:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x004B273A;
// LINE 1478:
	__asm        jmp    near ptr 0x004592A4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x004592ab
void CitySettingsWindow::GetCurrentCitySettings(struct tagCitySettings* currentCitySettings) {
// LINE 1485:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1486:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx], eax;
// LINE 1487:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+4], eax;
// LINE 1488:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+8], eax;
// LINE 1489:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+0xC], eax;
// LINE 1490:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+0x10], eax;
// LINE 1491:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+0x14], eax;
// LINE 1492:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+0x18], eax;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x004B271B;
	__asm        mov    ecx, currentCitySettings;
	__asm        mov    [ecx+0x1C], eax;
// LINE 1494:
	__asm        jmp    near ptr 0x00459352;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00459359
int32_t CitySettingsWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1503:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1504:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004593E7;
// LINE 1506:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x0045939F;
// LINE 1507:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1508:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00459407;
// LINE 1511:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x004593D8;
// LINE 1512:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1513:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00459407;
// LINE 1514:
	__asm        jmp    near ptr 0x00459400;
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     near ptr 0x00459370;
	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     near ptr 0x004593A9;
	__asm        jmp    near ptr 0x00459400;
// LINE 1516:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00459407;
// LINE 1517:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0045940e
long CitySettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1522:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1523:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00459453;
// LINE 1524:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00459453;
// LINE 1525:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1527:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045945D;
// LINE 1528:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00459464
void PopupMenuExtra::PopupMenuExtra(class MRect& rectNewWindow, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {
// LINE 1550:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004B7C25;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x004594EF;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004594DE;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    near ptr 0x004594FC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD0], 0;
	__asm        jmp    near ptr 0x0045950E;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FE98;
// LINE 1551:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    ecx, this;
	__asm        call   0x004B4A55;
// LINE 1552:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     near ptr 0x004596BD;
// LINE 1553:
	__asm        jmp    near ptr 0x00459538;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00459583;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459574;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459583;
	__asm        jmp    near ptr 0x00459588;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x004595BF;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00459669;
	__asm        jmp    near ptr 0x004595AA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x00459669;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x004595EE;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004595F5;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00459653;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00459653;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045963D;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045964E;
	__asm        jmp    near ptr 0x00459653;
	__asm        jmp    near ptr 0x00459658;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    near ptr 0x0045969F;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045969F;
	__asm        jmp    near ptr 0x00459678;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045969F;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004596B3;
	__asm        jmp    near ptr 0x004596B8;
// LINE 1554:
	__asm        jmp    near ptr 0x0045984A;
// LINE 1555:
	__asm        mov    eax, ds:[0x599180];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x004596CA;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00459715;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459706;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459715;
	__asm        jmp    near ptr 0x0045971A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x00459751;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x004597FB;
	__asm        jmp    near ptr 0x0045973C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x004597FB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00459780;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00459787;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004597E5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x004597E5;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x004597CF;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004597E0;
	__asm        jmp    near ptr 0x004597E5;
	__asm        jmp    near ptr 0x004597EA;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    near ptr 0x00459831;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00459831;
	__asm        jmp    near ptr 0x0045980A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00459831;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00459845;
	__asm        jmp    near ptr 0x0045984A;
// LINE 1556:
	__asm        jmp    near ptr 0x0045984F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00459859
void PopupMenuExtra::~PopupMenuExtra() {
// LINE 1562:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FE98;
// LINE 1563:
	__asm        mov    ecx, this;
	__asm        call   0x0045A8BD;
// LINE 1564:
	__asm        jmp    near ptr 0x0045987B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00459910;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00459910;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004598F0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x004598F5;
	__asm        jmp    near ptr 0x004598FA;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045990B;
	__asm        jmp    near ptr 0x00459910;
	__asm        jmp    near ptr 0x00459915;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD0], 0;
	__asm        je     near ptr 0x00459943;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459948;
	__asm        jmp    near ptr 0x0045994D;
	__asm        jmp    near ptr 0x00459952;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   0x0049FC4E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x00459974;
	__asm        jmp    near ptr 0x00459979;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045998F;
	__asm        jmp    near ptr 0x00459994;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        cmp    [ebp-0x2C], eax;
	__asm        jne    near ptr 0x004599B6;
	__asm        jmp    near ptr 0x004599CA;
	__asm        jmp    near ptr 0x004599B6;
	__asm        jmp    near ptr 0x004599C5;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x004599CA;
	__asm        jmp    near ptr 0x004599CF;
	__asm        jmp    near ptr 0x00459A10;
	__asm        jmp    near ptr 0x004599DE;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00459A10;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x004599F1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004599FC;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x74;
	__asm        call   0x0043A310;
	__asm        jmp    near ptr 0x004599A0;
	__asm        jmp    near ptr 0x00459A15;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, ds:[0x59856C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ds:[0x59856C], eax;
	__asm        jmp    near ptr 0x00459A35;
	__asm        dec    dword ptr ds:[0x598560];
	__asm        jne    near ptr 0x00459ABF;
	__asm        cmp    dword ptr ds:[0x598570], 0;
	__asm        je     near ptr 0x00459A9C;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, ds:[0x598570];
	__asm        mov    eax, [eax];
	__asm        mov    ds:[0x598570], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459A7C;
	__asm        jmp    near ptr 0x00459A81;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00459A92;
	__asm        jmp    near ptr 0x00459A97;
	__asm        jmp    near ptr 0x00459A41;
	__asm        mov    dword ptr ds:[0x59856C], 0;
	__asm        mov    dword ptr ds:[0x598568], 0;
	__asm        mov    dword ptr ds:[0x598564], 0;
	__asm        jmp    near ptr 0x00459ABF;
	__asm        jmp    near ptr 0x00459AC4;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00459ad1
int32_t PopupMenuExtra::Initialize() {
// LINE 1570:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1571:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x15C];
// LINE 1572:
	__asm        mov    ecx, this;
	__asm        call   0x004B7C65;
	__asm        jmp    near ptr 0x00459AF8;
// LINE 1573:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00459afd
int32_t PopupMenuExtra::DrawSelf() {
	long lCurrentXPosition;
	int32_t j;
	long lEndXPosition;
	int32_t i;
	class list<basic_string<char>>::iterator tempStringListIterator;
	class MRect rectHighlighted;
	long lSourceWidth;
	class MRect rectCurrentText;

// LINE 1580:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x00459B28;
	__asm        jmp    near ptr 0x00459B2D;
// LINE 1586:
	__asm        jmp    near ptr 0x00459B32;
	__asm        jmp    near ptr 0x00459B37;
// LINE 1587:
	__asm        jmp    near ptr 0x00459B3C;
	__asm        jmp    near ptr 0x00459B41;
// LINE 1591:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    near ptr 0x00459B58;
// LINE 1592:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045A5F3;
// LINE 1603:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    lEndXPosition, eax;
// LINE 1604:
	__asm        jmp    near ptr 0x00459B69;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lSourceWidth, eax;
// LINE 1605:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    lCurrentXPosition, eax;
// LINE 1607:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1608:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1609:
	__asm        mov    eax, lEndXPosition;
	__asm        sub    eax, lSourceWidth;
	__asm        cmp    eax, lCurrentXPosition;
	__asm        jle    near ptr 0x00459C48;
// LINE 1611:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1612:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1613:
	__asm        jmp    near ptr 0x00459BDF;
// LINE 1615:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1617:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x00459CAC;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    near ptr 0x00459E56;
// LINE 1618:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    lCurrentXPosition, eax;
// LINE 1620:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1621:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1622:
	__asm        mov    eax, lEndXPosition;
	__asm        sub    eax, lSourceWidth;
	__asm        cmp    eax, lCurrentXPosition;
	__asm        jle    near ptr 0x00459DD5;
// LINE 1624:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1625:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1626:
	__asm        jmp    near ptr 0x00459D45;
// LINE 1628:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1629:
	__asm        jmp    near ptr 0x00459CA9;
// LINE 1630:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    lCurrentXPosition, eax;
// LINE 1632:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1633:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1634:
	__asm        mov    eax, lEndXPosition;
	__asm        sub    eax, lSourceWidth;
	__asm        cmp    eax, lCurrentXPosition;
	__asm        jle    near ptr 0x00459F99;
// LINE 1636:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1637:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1638:
	__asm        jmp    near ptr 0x00459EF1;
// LINE 1640:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1645:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        add    eax, 0xA;
	__asm        mov    rectCurrentText.left, eax;
// LINE 1646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    rectCurrentText.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x6C], eax;
// LINE 1648:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0045A068;
// LINE 1651:
	__asm        mov    i, 0;
// LINE 1652:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xB4], ecx;
	__asm        jle    near ptr 0x0045A104;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0045A09B;
	__asm        jmp    near ptr 0x0045A0A0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x0045A0B6;
	__asm        jmp    near ptr 0x0045A0CA;
	__asm        jmp    near ptr 0x0045A0B6;
	__asm        jmp    near ptr 0x0045A0C5;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        jne    near ptr 0x0045A0CA;
	__asm        jmp    near ptr 0x0045A0CF;
	__asm        jmp    near ptr 0x0045A104;
	__asm        jmp    near ptr 0x0045A0DE;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0045A104;
// LINE 1653:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x0045A0F1;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0045A0FC;
// LINE 1654:
	__asm        inc    i;
// LINE 1655:
	__asm        jmp    near ptr 0x0045A06F;
// LINE 1658:
	__asm        mov    j, 0;
// LINE 23:
	__asm        jmp    near ptr 0x0045A113;
// LINE 1658:
	__asm        inc    j;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0045A12A;
	__asm        jmp    near ptr 0x0045A12F;
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    near ptr 0x0045A145;
	__asm        jmp    near ptr 0x0045A159;
	__asm        jmp    near ptr 0x0045A145;
	__asm        jmp    near ptr 0x0045A154;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    near ptr 0x0045A159;
	__asm        jmp    near ptr 0x0045A15E;
	__asm        jmp    near ptr 0x0045A5E9;
	__asm        jmp    near ptr 0x0045A16D;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     near ptr 0x0045A5E9;
	__asm        mov    eax, this;
	__asm        mov    ecx, j;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    near ptr 0x0045A5E9;
// LINE 1659:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    near ptr 0x0045A3CB;
// LINE 1660:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, j;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    rectCurrentText.top, eax;
// LINE 1661:
	__asm        mov    eax, rectCurrentText.top;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 1662:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    near ptr 0x0045A1E3;
// LINE 1663:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 1664:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0045A206;
// LINE 1667:
	__asm        jmp    near ptr 0x0045A20B;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0045A249;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A24E;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0045A271;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A30D;
	__asm        jmp    near ptr 0x0045A289;
	__asm        jmp    near ptr 0x0045A28E;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A2BC;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x0045A2CB;
	__asm        jmp    near ptr 0x0045A2CB;
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x0045A2CB;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045A30D;
	__asm        jmp    near ptr 0x0045A312;
	__asm        mov    byte ptr [ebp-0x80], 0;
	__asm        jmp    near ptr 0x0045A31B;
	__asm        lea    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    near ptr 0x0045A329;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045A358;
	__asm        jmp    near ptr 0x0045A35D;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x50], eax;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0045A3C6;
// LINE 1670:
	__asm        jmp    near ptr 0x0045A5C3;
// LINE 1671:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, j;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    rectCurrentText.top, eax;
// LINE 1672:
	__asm        mov    eax, rectCurrentText.top;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 1673:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    near ptr 0x0045A417;
// LINE 1674:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    rectCurrentText.bottom, eax;
// LINE 1677:
	__asm        jmp    near ptr 0x0045A41C;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0045A460;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A465;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0045A488;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A524;
	__asm        jmp    near ptr 0x0045A4A0;
	__asm        jmp    near ptr 0x0045A4A5;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A4D3;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    near ptr 0x0045A4E2;
	__asm        jmp    near ptr 0x0045A4E2;
	__asm        mov    dword ptr [ebp-0xB4], 0;
	__asm        jmp    near ptr 0x0045A4E2;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045A524;
	__asm        jmp    near ptr 0x0045A529;
	__asm        mov    byte ptr [ebp-0xA4], 0;
	__asm        jmp    near ptr 0x0045A535;
	__asm        lea    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x0045A546;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045A575;
	__asm        jmp    near ptr 0x0045A57A;
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 1679:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    near ptr 0x0045A5D6;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0045A5E1;
// LINE 1680:
	__asm        inc    i;
// LINE 1681:
	__asm        jmp    near ptr 0x0045A110;
// LINE 1683:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045A5F3;
// LINE 1684:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045a5f8
int32_t PopupMenuExtra::CreateImage() {
	class basic_string<char> sImagePath;

// LINE 1690:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1691:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045A654;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045A649;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    near ptr 0x0045A65B;
	__asm        mov    sImagePath.reference, 0;
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0045A667;
// LINE 1693:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        jne    near ptr 0x0045A7F4;
// LINE 1694:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xD0;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0045A697;
// LINE 1695:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0045A7AD;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0045A6D3;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A6D8;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0045A6F0;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A75A;
	__asm        jmp    near ptr 0x0045A702;
	__asm        jmp    near ptr 0x0045A707;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045A726;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0045A732;
	__asm        jmp    near ptr 0x0045A732;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x0045A732;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045A75A;
	__asm        jmp    near ptr 0x0045A75F;
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0045A768;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0045A773;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045A78E;
	__asm        jmp    near ptr 0x0045A793;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCC], eax;
	__asm        jmp    near ptr 0x0045A7BA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
// LINE 1696:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+8];
// LINE 1697:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 1698:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 1700:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045A884;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0045A884;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045A864;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045A869;
	__asm        jmp    near ptr 0x0045A86E;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A87F;
	__asm        jmp    near ptr 0x0045A884;
	__asm        jmp    near ptr 0x0045A889;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0045A8AB;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A8B0;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0045A8B8;
// LINE 1701:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045a8bd
void PopupMenuExtra::DestroyImage() {
// LINE 1707:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1708:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        je     near ptr 0x0045A920;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045A913;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045A90E;
	__asm        jmp    near ptr 0x0045A913;
// LINE 1710:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
// LINE 1712:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 1713:
	__asm        jmp    near ptr 0x0045A92D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045a932
void PopupMenuExtra::CalculateAllMetrics() {
// LINE 1719:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1720:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        je     near ptr 0x0045A975;
// LINE 1721:
	__asm        jmp    near ptr 0x0045A953;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 1722:
	__asm        jmp    near ptr 0x0045A982;
// LINE 1723:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xA;
// LINE 1724:
	__asm        jmp    near ptr 0x0045A987;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 1725:
	__asm        jmp    near ptr 0x0045A9AB;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045a9b0
void PopupMenuExtra::ResizeWindowToFitMenuItems() {
	long lCurrentWidth;
	class MRect rectSelf;
	long lTileWidth;
	class MPoint ptSelf;
	class MPoint ptParentWindowCenter;

// LINE 1737:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1738:
	__asm        jmp    near ptr 0x0045A9C1;
	__asm        jmp    near ptr 0x0045A9C6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x30], eax;
// LINE 1739:
	__asm        jmp    near ptr 0x0045A9DD;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ptSelf.x, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ptSelf.y, eax;
	__asm        jmp    near ptr 0x0045A9EE;
// LINE 1740:
	__asm        jmp    near ptr 0x0045A9F3;
	__asm        jmp    near ptr 0x0045A9F8;
// LINE 1745:
	__asm        mov    ecx, this;
	__asm        call   0x004B7F9E;
// LINE 1750:
	__asm        jmp    near ptr 0x0045AA05;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lTileWidth, eax;
// LINE 1751:
	__asm        jmp    near ptr 0x0045AA21;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    lCurrentWidth, eax;
// LINE 1752:
	__asm        mov    eax, lTileWidth;
	__asm        dec    eax;
	__asm        add    lCurrentWidth, eax;
// LINE 1753:
	__asm        mov    eax, lCurrentWidth;
	__asm        cdq;
	__asm        idiv   lTileWidth;
	__asm        mov    lCurrentWidth, eax;
// LINE 1754:
	__asm        mov    eax, lCurrentWidth;
	__asm        imul   eax, lTileWidth;
	__asm        mov    lCurrentWidth, eax;
// LINE 1755:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, lCurrentWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1757:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     near ptr 0x0045AAAA;
// LINE 1758:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectSelf.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1759:
	__asm        lea    eax, rectSelf.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   0x004A4F5C;
// LINE 1760:
	__asm        mov    eax, rectSelf.top;
	__asm        push   eax;
	__asm        mov    eax, rectSelf.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1771:
	__asm        jmp    near ptr 0x0045AAAF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045aab4
void TooltipWindow::TooltipWindow(class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {
// LINE 1798:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004ACCE6;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0045AB36;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045AB25;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045AB43;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x0045AB55;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FFF8;
// LINE 1799:
	__asm        push   0x603AB8;
	__asm        mov    ecx, this;
	__asm        call   0x004ADD6F;
// LINE 1800:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     near ptr 0x0045ACFF;
// LINE 1801:
	__asm        jmp    near ptr 0x0045AB7A;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045ABC5;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045ABB6;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045ABC5;
	__asm        jmp    near ptr 0x0045ABCA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045AC01;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045ACAB;
	__asm        jmp    near ptr 0x0045ABEC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045ACAB;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0045AC30;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045AC37;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045AC95;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045AC95;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045AC7F;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AC90;
	__asm        jmp    near ptr 0x0045AC95;
	__asm        jmp    near ptr 0x0045AC9A;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045ACE1;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045ACE1;
	__asm        jmp    near ptr 0x0045ACBA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045ACE1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045ACF5;
	__asm        jmp    near ptr 0x0045ACFA;
// LINE 1802:
	__asm        jmp    near ptr 0x0045AE8C;
// LINE 1803:
	__asm        mov    eax, ds:[0x599180];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0045AD0C;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045AD57;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AD48;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AD57;
	__asm        jmp    near ptr 0x0045AD5C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045AD93;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0045AE3D;
	__asm        jmp    near ptr 0x0045AD7E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045AE3D;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0045ADC2;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0045ADC9;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045AE27;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0045AE27;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045AE11;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AE22;
	__asm        jmp    near ptr 0x0045AE27;
	__asm        jmp    near ptr 0x0045AE2C;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045AE73;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0045AE73;
	__asm        jmp    near ptr 0x0045AE4C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045AE73;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045AE87;
	__asm        jmp    near ptr 0x0045AE8C;
// LINE 1804:
	__asm        jmp    near ptr 0x0045AE91;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0045ae9b
void TooltipWindow::TooltipWindow(class MRect& rectNewWindow, int32_t nNewID, class basic_string<char>& sNewWindowTitle, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {
// LINE 1815:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004ACDA2;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x0045AF1D;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045AF0C;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045AF2A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        jmp    near ptr 0x0045AF3C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FFF8;
// LINE 1816:
	__asm        mov    byte ptr [ebp-4], 0x6F;
	__asm        mov    byte ptr [ebp-3], 0xDA;
	__asm        mov    byte ptr [ebp-2], 0xFF;
	__asm        jmp    near ptr 0x0045AF56;
	__asm        lea    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004ADD6F;
// LINE 1817:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     near ptr 0x0045B0E2;
// LINE 1818:
	__asm        jmp    near ptr 0x0045AF71;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045AFBC;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AFAD;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045AFBC;
	__asm        jmp    near ptr 0x0045AFC1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045AFF8;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0045B08E;
	__asm        jmp    near ptr 0x0045AFE3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045B08E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0045B027;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045B02E;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045B078;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0045B078;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045B078;
	__asm        jmp    near ptr 0x0045B07D;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045B0C4;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0045B0C4;
	__asm        jmp    near ptr 0x0045B09D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045B0C4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045B0D8;
	__asm        jmp    near ptr 0x0045B0DD;
// LINE 1819:
	__asm        jmp    near ptr 0x0045B25B;
// LINE 1820:
	__asm        mov    eax, ds:[0x599180];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0045B0EF;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045B13A;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B12B;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B13A;
	__asm        jmp    near ptr 0x0045B13F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045B176;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0045B20C;
	__asm        jmp    near ptr 0x0045B161;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045B20C;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0045B1A5;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0045B1AC;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045B1F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x0045B1F6;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045B1F6;
	__asm        jmp    near ptr 0x0045B1FB;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045B242;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0045B242;
	__asm        jmp    near ptr 0x0045B21B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045B242;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045B256;
	__asm        jmp    near ptr 0x0045B25B;
// LINE 1821:
	__asm        jmp    near ptr 0x0045B260;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0045b26a
void TooltipWindow::~TooltipWindow() {
// LINE 1827:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FFF8;
// LINE 1828:
	__asm        mov    ecx, this;
	__asm        call   0x0045B981;
// LINE 1829:
	__asm        jmp    near ptr 0x0045B28C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045B321;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0045B321;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045B301;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045B306;
	__asm        jmp    near ptr 0x0045B30B;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B31C;
	__asm        jmp    near ptr 0x0045B321;
	__asm        jmp    near ptr 0x0045B326;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     near ptr 0x0045B354;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B359;
	__asm        jmp    near ptr 0x0045B35E;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0049FC4E;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045b379
int32_t TooltipWindow::Initialize() {
// LINE 1835:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1836:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1837:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
	__asm        jmp    near ptr 0x0045B3A0;
// LINE 1838:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045b3a5
void TooltipWindow::SetWindowTitle(int32_t nNewWindowTitleTextID) {
// LINE 1845:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1846:
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AD775;
// LINE 1847:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1848:
	__asm        jmp    near ptr 0x0045B3D0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045b3d7
void TooltipWindow::SetWindowTitle(class basic_string<char>& sNewWindowTitle) {
// LINE 1855:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1856:
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004AD7B6;
// LINE 1857:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1858:
	__asm        jmp    near ptr 0x0045B403;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045b40a
int32_t TooltipWindow::DrawSelf() {
	class MRect rectText;
	long lCurrentXPosition;
	long lEndXPosition;
	long lSourceWidth;

// LINE 1865:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1866:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        lea    ecx, rectText.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1869:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    lEndXPosition, eax;
// LINE 1870:
	__asm        jmp    near ptr 0x0045B443;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lSourceWidth, eax;
// LINE 1871:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        mov    lCurrentXPosition, eax;
// LINE 1873:
	__asm        jmp    near ptr 0x0045B468;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1874:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1875:
	__asm        mov    eax, lEndXPosition;
	__asm        sub    eax, lSourceWidth;
	__asm        cmp    eax, lCurrentXPosition;
	__asm        jle    near ptr 0x0045B50E;
// LINE 1877:
	__asm        jmp    near ptr 0x0045B4C0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1878:
	__asm        mov    eax, lSourceWidth;
	__asm        add    lCurrentXPosition, eax;
// LINE 1879:
	__asm        jmp    near ptr 0x0045B4AC;
// LINE 1881:
	__asm        jmp    near ptr 0x0045B513;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1883:
	__asm        add    rectText.left, 5;
// LINE 1884:
	__asm        inc    rectText.top;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x20], eax;
// LINE 1885:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    near ptr 0x0045B57D;
// LINE 1887:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045B5A5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B5AA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0045B5C8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045B641;
	__asm        jmp    near ptr 0x0045B5DD;
	__asm        jmp    near ptr 0x0045B5E2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045B607;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0045B613;
	__asm        jmp    near ptr 0x0045B613;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x0045B613;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045B641;
	__asm        jmp    near ptr 0x0045B646;
	__asm        mov    byte ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0045B64F;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0045B65A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045B67B;
	__asm        jmp    near ptr 0x0045B680;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 1888:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045B6C5;
// LINE 1889:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045b6ca
int32_t TooltipWindow::CreateImage() {
	class basic_string<char> sImagePath;

// LINE 1896:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1897:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045B726;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045B71B;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    near ptr 0x0045B72D;
	__asm        mov    sImagePath.reference, 0;
	__asm        mov    sImagePath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0045B739;
// LINE 1899:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x0045B8B8;
// LINE 1900:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0045B769;
// LINE 1901:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0045B87F;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0045B7A5;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B7AA;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    near ptr 0x0045B7C2;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045B82C;
	__asm        jmp    near ptr 0x0045B7D4;
	__asm        jmp    near ptr 0x0045B7D9;
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045B7F8;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0045B804;
	__asm        jmp    near ptr 0x0045B804;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x0045B804;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045B82C;
	__asm        jmp    near ptr 0x0045B831;
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0045B83A;
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0045B845;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045B860;
	__asm        jmp    near ptr 0x0045B865;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    near ptr 0x0045B88C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 1902:
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+8];
// LINE 1903:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 1905:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x004A4AA0;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045B948;
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0045B948;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045B928;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045B92D;
	__asm        jmp    near ptr 0x0045B932;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B943;
	__asm        jmp    near ptr 0x0045B948;
	__asm        jmp    near ptr 0x0045B94D;
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     near ptr 0x0045B96F;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B974;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0045B97C;
// LINE 1906:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045b981
void TooltipWindow::DestroyImage() {
// LINE 1913:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1914:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0045B9E4;
// LINE 1915:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045B9D7;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045B9D2;
	__asm        jmp    near ptr 0x0045B9D7;
// LINE 1916:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 1918:
	__asm        mov    ecx, this;
	__asm        call   0x004A4CAB;
// LINE 1919:
	__asm        jmp    near ptr 0x0045B9F1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045b9f6
void TooltipWindow::SetTextAndShow(class MPoint& ptNewPosition, class basic_string<char>& sNewText) {
// LINE 1926:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1927:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1928:
	__asm        mov    eax, sNewText;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1929:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x0045BA38;
// LINE 1930:
	__asm        jmp    near ptr 0x0045BA3D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045ba44
void TooltipWindow::SetTextAndShow(class MPoint& ptNewPosition, int32_t nNewWindowTitleTextID) {
// LINE 1936:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1937:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1938:
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1939:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 1;
	__asm        jmp    near ptr 0x0045BA89;
// LINE 1940:
	__asm        jmp    near ptr 0x0045BA8E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045ba95
void BoneheadTextEditWindow::BoneheadTextEditWindow() {
// LINE 1963:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ecx, this;
	__asm        call   0x004ACC43;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045BB1B;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    near ptr 0x0045BB1B;
	__asm        jmp    near ptr 0x0045BB20;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xAAE60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5900F0;
// LINE 1964:
	__asm        jmp    near ptr 0x0045BB48;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045bb50
void BoneheadTextEditWindow::BoneheadTextEditWindow(class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szNewImageFileName) {
// LINE 1977:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004ACCE6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045BBEE;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    near ptr 0x0045BBEE;
	__asm        jmp    near ptr 0x0045BBF3;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xAAE60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x100;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5900F0;
// LINE 1978:
	__asm        cmp    szNewImageFileName, 0;
	__asm        je     near ptr 0x0045BE87;
// LINE 1979:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 1980:
	__asm        jmp    near ptr 0x0045BC3C;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045BC87;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BC78;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BC87;
	__asm        jmp    near ptr 0x0045BC8C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045BCBD;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0045BE3E;
	__asm        jmp    near ptr 0x0045BCAB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045BE3E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0045BD98;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045BD10;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BD01;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BD10;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045BD75;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045BD70;
	__asm        jmp    near ptr 0x0045BD7E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045BD8D;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045BD9F;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045BE2B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045BE2B;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045BE0B;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045BE10;
	__asm        jmp    near ptr 0x0045BE15;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BE26;
	__asm        jmp    near ptr 0x0045BE2B;
	__asm        jmp    near ptr 0x0045BE30;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x0045BE71;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0045BE71;
	__asm        jmp    near ptr 0x0045BE4D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045BE71;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045BE82;
	__asm        jmp    near ptr 0x0045BE87;
// LINE 1982:
	__asm        jmp    near ptr 0x0045BE8C;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0045be96
void BoneheadTextEditWindow::BoneheadTextEditWindow(class MRect& rectNewWindow, int32_t nNewID, const class basic_string<char>& sNewWindowTitle, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, char * szNewImageFileName) {
// LINE 1997:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004ACDA2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045BF34;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    near ptr 0x0045BF34;
	__asm        jmp    near ptr 0x0045BF39;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xAAE60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x100;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5900F0;
	__asm        mov    byte ptr [ebp-0x60], 0x5F;
// LINE 1998:
	__asm        jmp    near ptr 0x0045BF72;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     near ptr 0x0045BFB4;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BFA5;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045BFB4;
	__asm        jmp    near ptr 0x0045BFB9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    near ptr 0x0045BFEB;
	__asm        jmp    near ptr 0x0045BFCE;
	__asm        jmp    near ptr 0x0045BFD3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045C18E;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0045C0ED;
	__asm        jmp    near ptr 0x0045C007;
	__asm        jmp    near ptr 0x0045C00C;
	__asm        jmp    near ptr 0x0045C011;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C036;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0045C042;
	__asm        jmp    near ptr 0x0045C042;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x0045C042;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045C0CA;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C0C5;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045C0C5;
	__asm        jmp    near ptr 0x0045C0D3;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045C0E2;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0045C0F4;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045C180;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0045C180;
	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045C160;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045C165;
	__asm        jmp    near ptr 0x0045C16A;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C17B;
	__asm        jmp    near ptr 0x0045C180;
	__asm        jmp    near ptr 0x0045C185;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0045C193;
	__asm        jmp    near ptr 0x0045C198;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    al, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045C1B9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    near ptr 0x0045C1C7;
// LINE 1999:
	__asm        cmp    szNewImageFileName, 0;
	__asm        je     near ptr 0x0045C348;
// LINE 2000:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 1;
// LINE 2001:
	__asm        jmp    near ptr 0x0045C1E0;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045C22B;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C21C;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C22B;
	__asm        jmp    near ptr 0x0045C230;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045C261;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045C2FF;
	__asm        jmp    near ptr 0x0045C24F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045C2FF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0045C290;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045C297;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045C2EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045C2EC;
	__asm        mov    ecx, [ebp-0x14];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045C2D6;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C2E7;
	__asm        jmp    near ptr 0x0045C2EC;
	__asm        jmp    near ptr 0x0045C2F1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    near ptr 0x0045C332;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0045C332;
	__asm        jmp    near ptr 0x0045C30E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045C332;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045C343;
	__asm        jmp    near ptr 0x0045C348;
// LINE 2003:
	__asm        jmp    near ptr 0x0045C34D;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0045c357
void BoneheadTextEditWindow::~BoneheadTextEditWindow() {
// LINE 2009:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5900F0;
// LINE 2010:
	__asm        mov    ecx, this;
	__asm        call   0x0045C689;
// LINE 2011:
	__asm        jmp    near ptr 0x0045C379;
	__asm        jmp    near ptr 0x0045C37E;
	__asm        jmp    near ptr 0x0045C383;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x84;
	__asm        call   0x0049FC4E;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045c39e
int32_t BoneheadTextEditWindow::Initialize() {
// LINE 2017:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2018:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 2019:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 2020:
	__asm        jmp    near ptr 0x0045C3C5;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     near ptr 0x0045C3DA;
	__asm        jmp    near ptr 0x0045C45B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    near ptr 0x0045C403;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C456;
	__asm        jmp    near ptr 0x0045C456;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045C439;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C456;
	__asm        jmp    near ptr 0x0045C456;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C456;
	__asm        jmp    near ptr 0x0045C45B;
// LINE 2021:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 2022:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045C471;
// LINE 2023:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045c476
int32_t BoneheadTextEditWindow::CreateImage() {
	char[260] szFullPath;

// LINE 2029:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x12C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2032:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    near ptr 0x0045C67A;
	__asm        jmp    near ptr 0x0045C4A0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C67A;
// LINE 2033:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     near ptr 0x0045C4ED;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C4F2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    near ptr 0x0045C516;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C5B3;
	__asm        jmp    near ptr 0x0045C52E;
	__asm        jmp    near ptr 0x0045C533;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C561;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    near ptr 0x0045C570;
	__asm        jmp    near ptr 0x0045C570;
	__asm        mov    dword ptr [ebp-0x120], 0;
	__asm        jmp    near ptr 0x0045C570;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045C5B3;
	__asm        jmp    near ptr 0x0045C5B8;
	__asm        mov    byte ptr [ebp-0x110], 0;
	__asm        jmp    near ptr 0x0045C5C4;
	__asm        lea    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x0045C5D5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x5C];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11C];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045C605;
	__asm        jmp    near ptr 0x0045C60A;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 2034:
	__asm        push   0x134;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x0045C66A;
	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x0046E6DF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    near ptr 0x0045C67A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 2036:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045C684;
// LINE 2037:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045c689
void BoneheadTextEditWindow::DestroyImage() {
// LINE 2042:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2043:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0045C6EC;
// LINE 2044:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045C6DF;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0046EC7A;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045C6DA;
	__asm        jmp    near ptr 0x0045C6DF;
// LINE 2045:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 2047:
	__asm        jmp    near ptr 0x0045C6F1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045c6f6
int32_t BoneheadTextEditWindow::DrawSelf() {
	char * chCaret;

// LINE 2053:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2056:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     near ptr 0x0045C859;
// LINE 2062:
	__asm        jmp    near ptr 0x0045C717;
	__asm        jmp    near ptr 0x0045C71C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C74B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCaret, eax;
	__asm        jmp    near ptr 0x0045C76D;
	__asm        jmp    near ptr 0x0045C75D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    chCaret, eax;
	__asm        jmp    near ptr 0x0045C76D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        add    eax, [ebp-0x14];
	__asm        mov    chCaret, eax;
// LINE 2063:
	__asm        mov    eax, chCaret;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 0x20;
	__asm        jne    near ptr 0x0045C787;
// LINE 2064:
	__asm        mov    eax, chCaret;
	__asm        mov    byte ptr [eax], 0x5F;
// LINE 2065:
	__asm        jmp    near ptr 0x0045C78D;
// LINE 2066:
	__asm        mov    eax, chCaret;
	__asm        mov    byte ptr [eax], 0x20;
// LINE 2067:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        jmp    near ptr 0x0045C7AC;
	__asm        jmp    near ptr 0x0045C7B1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     near ptr 0x0045C7C6;
	__asm        jmp    near ptr 0x0045C847;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    near ptr 0x0045C7EF;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C842;
	__asm        jmp    near ptr 0x0045C842;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045C825;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C842;
	__asm        jmp    near ptr 0x0045C842;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    near ptr 0x0045C842;
	__asm        jmp    near ptr 0x0045C847;
	__asm        jmp    near ptr 0x0045C84C;
// LINE 2068:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
// LINE 2071:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     near ptr 0x0045C8EE;
// LINE 2072:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     near ptr 0x0045C8CF;
// LINE 2074:
	__asm        jmp    near ptr 0x0045C87B;
	__asm        jmp    near ptr 0x0045C880;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 2076:
	__asm        jmp    near ptr 0x0045C8EE;
// LINE 2077:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2082:
	__asm        jmp    near ptr 0x0045C8F3;
	__asm        jmp    near ptr 0x0045C8F8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C91D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045C929;
	__asm        jmp    near ptr 0x0045C929;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0045C929;
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 2085:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     near ptr 0x0045C97C;
// LINE 2086:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 2087:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045C986;
// LINE 2088:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045c98b
long BoneheadTextEditWindow::DoCharacter(long lCharacter) {
	unsigned char * chCharacter;

// LINE 2095:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2098:
	__asm        cmp    lCharacter, 0x20;
	__asm        jge    near ptr 0x0045C9A8;
// LINE 2099:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045CCF6;
// LINE 2101:
	__asm        jmp    near ptr 0x0045C9AD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045C9CC;
// LINE 2102:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045CCF6;
// LINE 2105:
	__asm        jmp    near ptr 0x0045C9D1;
	__asm        jmp    near ptr 0x0045C9D6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045C9FB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045CA07;
	__asm        jmp    near ptr 0x0045CA07;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x0045CA07;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    [ebp-0x44], al;
	__asm        jmp    near ptr 0x0045CA1F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     near ptr 0x0045CA61;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045CA52;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045CA61;
	__asm        jmp    near ptr 0x0045CA66;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    near ptr 0x0045CA98;
	__asm        jmp    near ptr 0x0045CA7B;
	__asm        jmp    near ptr 0x0045CA80;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045CC3B;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0045CB9A;
	__asm        jmp    near ptr 0x0045CAB4;
	__asm        jmp    near ptr 0x0045CAB9;
	__asm        jmp    near ptr 0x0045CABE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045CAE3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0045CAEF;
	__asm        jmp    near ptr 0x0045CAEF;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0045CAEF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045CB77;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045CB72;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045CB72;
	__asm        jmp    near ptr 0x0045CB80;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045CB8F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0045CBA1;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045CC2D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0045CC2D;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045CC0D;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045CC12;
	__asm        jmp    near ptr 0x0045CC17;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045CC28;
	__asm        jmp    near ptr 0x0045CC2D;
	__asm        jmp    near ptr 0x0045CC32;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0045CC40;
	__asm        jmp    near ptr 0x0045CC45;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    al, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045CC66;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    near ptr 0x0045CC74;
// LINE 2106:
	__asm        jmp    near ptr 0x0045CC79;
	__asm        jmp    near ptr 0x0045CC7E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045CCAF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCharacter, eax;
	__asm        jmp    near ptr 0x0045CCD5;
	__asm        jmp    near ptr 0x0045CCC3;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    chCharacter, eax;
	__asm        jmp    near ptr 0x0045CCD5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    chCharacter, eax;
// LINE 2107:
	__asm        mov    al, reinterpret_cast<uint8_t>(lCharacter);
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
// LINE 2108:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2109:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045CCF6;
// LINE 2110:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045ccfd
long BoneheadTextEditWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2117:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2118:
	__asm        cmp    lKey, 8;
	__asm        je     near ptr 0x0045CD1D;
	__asm        cmp    lKey, 0x2E;
	__asm        jne    near ptr 0x0045CD30;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xFC];
// LINE 2120:
	__asm        jmp    near ptr 0x0045CD48;
	__asm        cmp    lKey, 0xD;
	__asm        jne    near ptr 0x0045CD48;
// LINE 2121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x100];
// LINE 2122:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2123:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045CD61;
// LINE 2124:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045cd68
long BoneheadTextEditWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 2131:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2132:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045CD85;
// LINE 2133:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0045cd8c
int32_t BoneheadTextEditWindow::DoesWindowNeedUpdating() {
// LINE 2140:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2141:
	__asm        jmp    near ptr 0x0045CD9D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0045CEF5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045CDBB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     near ptr 0x0045CE4A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    near ptr 0x0045CDEE;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045CE35;
	__asm        jmp    near ptr 0x0045CE35;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045CE1E;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045CE35;
	__asm        jmp    near ptr 0x0045CE35;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045CE35;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xAC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        add    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    near ptr 0x0045CE9D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        je     near ptr 0x0045CE9D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    near ptr 0x0045CED8;
	__asm        jmp    near ptr 0x0045CEC6;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    near ptr 0x0045CED8;
	__asm        jmp    near ptr 0x0045CEC6;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    near ptr 0x0045CED8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 1;
	__asm        jmp    near ptr 0x0045CEE5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     near ptr 0x0045CEFF;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045CF01;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045CF06;
// LINE 2142:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045cf0b
int32_t BoneheadTextEditWindow::SetCaretPeriod(unsigned long lMicrosecondsBetweenCaretChanges) {
// LINE 2149:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2150:
	__asm        mov    eax, lMicrosecondsBetweenCaretChanges;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 2151:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045CF2D;
// LINE 2152:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045cf34
void BoneheadTextEditWindow::SetCharacterCountLimit(unsigned long lNewCharacterCountLimit) {
// LINE 2159:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2160:
	__asm        mov    eax, lNewCharacterCountLimit;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
// LINE 2161:
	__asm        jmp    near ptr 0x0045CF51;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045cf58
int32_t BoneheadTextEditWindow::ProcessBackspace() {
	unsigned char * chCharacter;

// LINE 2169:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x5C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2172:
	__asm        jmp    near ptr 0x0045CF69;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        ja     near ptr 0x0045CF80;
// LINE 2173:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045D3E9;
// LINE 2175:
	__asm        jmp    near ptr 0x0045CF85;
	__asm        jmp    near ptr 0x0045CF8A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045CFBB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCharacter, eax;
	__asm        jmp    near ptr 0x0045CFE1;
	__asm        jmp    near ptr 0x0045CFCF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    chCharacter, eax;
	__asm        jmp    near ptr 0x0045CFE1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        add    eax, [ebp-8];
	__asm        mov    chCharacter, eax;
// LINE 2176:
	__asm        jmp    near ptr 0x0045CFE6;
	__asm        jmp    near ptr 0x0045CFEB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D01F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045D04A;
	__asm        jmp    near ptr 0x0045D035;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    al, [eax-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x0045D04A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
// LINE 2177:
	__asm        jmp    near ptr 0x0045D04F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x0045D061;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x0045D0A5;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D096;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D0A5;
	__asm        jmp    near ptr 0x0045D0AA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x58];
	__asm        cmp    eax, 1;
	__asm        jae    near ptr 0x0045D0D8;
	__asm        jmp    near ptr 0x0045D0C4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0045D0DF;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x0045D0E4;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x0045D318;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0045D1E4;
	__asm        jmp    near ptr 0x0045D110;
	__asm        jmp    near ptr 0x0045D115;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D13A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0045D146;
	__asm        jmp    near ptr 0x0045D146;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0045D146;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045D1C1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D1BC;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D1BC;
	__asm        jmp    near ptr 0x0045D1CA;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045D1D9;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0045D1EB;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0045D1F0;
	__asm        jmp    near ptr 0x0045D1F5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D21A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0045D226;
	__asm        jmp    near ptr 0x0045D226;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0045D226;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, [ebp-0x58];
	__asm        add    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D262;
	__asm        jmp    near ptr 0x0045D267;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045D305;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0045D305;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045D2E5;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045D2EA;
	__asm        jmp    near ptr 0x0045D2EF;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D300;
	__asm        jmp    near ptr 0x0045D305;
	__asm        jmp    near ptr 0x0045D30A;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x0045D3DA;
	__asm        jmp    near ptr 0x0045D31D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0045D341;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0045D3DA;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0045D3DA;
	__asm        jmp    near ptr 0x0045D350;
	__asm        jmp    near ptr 0x0045D355;
	__asm        jmp    near ptr 0x0045D35A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D37F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0045D38B;
	__asm        jmp    near ptr 0x0045D38B;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0045D38B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, [ebp-0x58];
	__asm        add    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D3CA;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x10];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        sub    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045D3DF;
// LINE 2178:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045D3E9;
// LINE 2179:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045d3ee
int32_t BoneheadTextEditWindow::ProcessReturn() {
// LINE 2186:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2187:
	__asm        push   0xA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x80];
	__asm        jmp    near ptr 0x0045D40F;
// LINE 2188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045d414
void BoneheadTextEditWindow::GetEditText(class basic_string<char>& sText) {
// LINE 2195:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2196:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sText;
	__asm        je     near ptr 0x0045D5E2;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045D4BB;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0045D4BB;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045D49B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045D4A0;
	__asm        jmp    near ptr 0x0045D4A5;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D4B6;
	__asm        jmp    near ptr 0x0045D4BB;
	__asm        jmp    near ptr 0x0045D4C0;
	__asm        jmp    near ptr 0x0045D4C5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     near ptr 0x0045D4EF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, sText;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+0xC];
	__asm        jmp    near ptr 0x0045D5E2;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045D5D8;
	__asm        jmp    near ptr 0x0045D50B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045D5B2;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0045D552;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D577;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045D583;
	__asm        jmp    near ptr 0x0045D583;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x0045D583;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D5AD;
	__asm        jmp    near ptr 0x0045D5BB;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045D5CA;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, sText;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045D5E2;
	__asm        mov    eax, sText;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0045D5E7;
// LINE 2197:
	__asm        jmp    near ptr 0x0045D5EC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x0045D5FE;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x0045D642;
	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D633;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045D642;
	__asm        jmp    near ptr 0x0045D647;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x5C];
	__asm        cmp    eax, 1;
	__asm        jae    near ptr 0x0045D675;
	__asm        jmp    near ptr 0x0045D661;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0045D67C;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x0045D681;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    near ptr 0x0045D7EE;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0045D705;
	__asm        jmp    near ptr 0x0045D6AD;
	__asm        jmp    near ptr 0x0045D6B2;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D6D7;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x0045D6E3;
	__asm        jmp    near ptr 0x0045D6E3;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x0045D6E3;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0045D70C;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0045D711;
	__asm        jmp    near ptr 0x0045D716;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D73B;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0045D747;
	__asm        jmp    near ptr 0x0045D747;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x0045D747;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, [ebp-0x5C];
	__asm        add    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D783;
	__asm        jmp    near ptr 0x0045D788;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045D7DB;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x0045D7DB;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045D7DB;
	__asm        jmp    near ptr 0x0045D7E0;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, sText;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045D8B0;
	__asm        jmp    near ptr 0x0045D7F3;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0045D817;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    near ptr 0x0045D8B0;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0045D8B0;
	__asm        jmp    near ptr 0x0045D826;
	__asm        jmp    near ptr 0x0045D82B;
	__asm        jmp    near ptr 0x0045D830;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D855;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0045D861;
	__asm        jmp    near ptr 0x0045D861;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0045D861;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, [ebp-0x5C];
	__asm        add    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045D8A0;
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x28];
	__asm        neg    eax;
	__asm        mov    ecx, sText;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045D8B5;
// LINE 2198:
	__asm        jmp    near ptr 0x0045D8BA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045d8c1
void BoneheadTextEditWindow::GetEditText(char * szText, unsigned long lLength) {
// LINE 2204:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2205:
	__asm        jmp    near ptr 0x0045D8D2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, lLength;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    near ptr 0x0045D8F5;
// LINE 2206:
	__asm        jmp    near ptr 0x0045D8E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    lLength, eax;
// LINE 2207:
	__asm        jmp    near ptr 0x0045D8FA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045D91F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045D92B;
	__asm        jmp    near ptr 0x0045D92B;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    near ptr 0x0045D92B;
	__asm        mov    eax, lLength;
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    eax, szText;
	__asm        push   eax;
	__asm        call   0x0056AD40;
	__asm        add    esp, 0xC;
// LINE 2208:
	__asm        mov    eax, lLength;
	__asm        mov    ecx, szText;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 2209:
	__asm        jmp    near ptr 0x0045D94E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0045d955
void MessageBoxWindowEdit::MessageBoxWindowEdit(class MPoint& ptNewPosition, unsigned long lNewType, unsigned long lNewMessageID, const class basic_string<char>& sNewInitialEditText, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szTextEditBackgroundImageFileName, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {
// LINE 2244:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, lNewMessageID;
	__asm        push   eax;
	__asm        mov    eax, lNewType;
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004500CE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5901F8;
// LINE 2246:
	__asm        push   0xC4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045DA19;
	__asm        jmp    near ptr 0x0045D9CA;
	__asm        mov    dword ptr [ebp-0x14], 0x64;
	__asm        mov    dword ptr [ebp-0x10], 0x64;
	__asm        mov    dword ptr [ebp-0xC], 0x172;
	__asm        mov    dword ptr [ebp-8], 0xC8;
	__asm        jmp    near ptr 0x0045D9EB;
	__asm        mov    eax, szTextEditBackgroundImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, sNewInitialEditText;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0045BE96;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    near ptr 0x0045DA26;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 2247:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2248:
	__asm        jmp    near ptr 0x0045DA4B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x34;
}

// FUNCTION: COPTER_D 0x0045da55
void MessageBoxWindowEdit::MessageBoxWindowEdit(class MPoint& ptNewPosition, unsigned long lNewType, class basic_string<char>& sNewMessage, const class basic_string<char>& sNewInitialEditText, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szTextEditBackgroundImageFileName, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {
// LINE 2273:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, sNewMessage;
	__asm        push   eax;
	__asm        mov    eax, lNewType;
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00450573;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5901F8;
// LINE 2275:
	__asm        push   0xC4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0045DB19;
	__asm        jmp    near ptr 0x0045DACA;
	__asm        mov    dword ptr [ebp-0x14], 0x64;
	__asm        mov    dword ptr [ebp-0x10], 0x64;
	__asm        mov    dword ptr [ebp-0xC], 0x172;
	__asm        mov    dword ptr [ebp-8], 0xC8;
	__asm        jmp    near ptr 0x0045DAEB;
	__asm        mov    eax, szTextEditBackgroundImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, sNewInitialEditText;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0045BE96;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    near ptr 0x0045DB26;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
// LINE 2276:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2277:
	__asm        jmp    near ptr 0x0045DB4B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x34;
}

// FUNCTION: COPTER_D 0x0045db55
int32_t MessageBoxWindowEdit::Initialize() {
// LINE 2284:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2285:
	__asm        mov    ecx, this;
	__asm        call   0x00450B5D;
// LINE 2286:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+4];
// LINE 2287:
	__asm        push   0x80;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xF0];
// LINE 2288:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045DBA9;
// LINE 2289:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045dbae
void ScrollingCreditWindow::ScrollingCreditWindow(int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
// LINE 2318:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        jmp    near ptr 0x0045DBBF;
	__asm        jmp    near ptr 0x0045DBC4;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045DBE7;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0045DC06;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A33EE;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        jmp    near ptr 0x0045DC45;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        jmp    near ptr 0x0045DC64;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0x28;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0x28;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0x1F4;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0x1CC;
	__asm        jmp    near ptr 0x0045DC9D;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x98;
	__asm        call   0x0049F780;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0045DD10;
	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    near ptr 0x0045DD10;
	__asm        jmp    near ptr 0x0045DD15;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC4], 0x2710;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5902D8;
// LINE 2320:
	__asm        jmp    near ptr 0x0045DD3D;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0045dd47
void ScrollingCreditWindow::~ScrollingCreditWindow() {
// LINE 2326:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5902D8;
// LINE 2328:
	__asm        jmp    near ptr 0x0045DD61;
	__asm        jmp    near ptr 0x0045DD66;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x98;
	__asm        call   0x0049FC4E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    [ebp-0x1C], eax;
	__asm        je     near ptr 0x0045DE3B;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045DDE7;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0045DDE7;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045DDD1;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045DDE2;
	__asm        jmp    near ptr 0x0045DDE7;
	__asm        jmp    near ptr 0x0045DDEC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0045DE12;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045DE17;
	__asm        jmp    near ptr 0x0045DE28;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045DE2D;
	__asm        jmp    near ptr 0x0045DE32;
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    near ptr 0x0045DD86;
	__asm        jmp    near ptr 0x0045DE40;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045DE5A;
	__asm        jmp    near ptr 0x0045DE5F;
	__asm        jmp    near ptr 0x0045DE64;
	__asm        mov    ecx, this;
	__asm        call   0x004A4045;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045de71
int32_t ScrollingCreditWindow::Initialize() {
// LINE 2334:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2335:
	__asm        mov    ecx, this;
	__asm        call   0x0045E0DC;
// LINE 2336:
	__asm        jmp    near ptr 0x0045DE8A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     near ptr 0x0045DE9F;
	__asm        jmp    near ptr 0x0045DF20;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x0045DEC8;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    near ptr 0x0045DF1B;
	__asm        jmp    near ptr 0x0045DF1B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0045DEFE;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    near ptr 0x0045DF1B;
	__asm        jmp    near ptr 0x0045DF1B;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    near ptr 0x0045DF1B;
	__asm        jmp    near ptr 0x0045DF20;
// LINE 2337:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045DF2A;
// LINE 2338:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045df2f
int32_t ScrollingCreditWindow::DrawSelf() {
// LINE 2343:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2344:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045DF42;
// LINE 2345:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045df47
void ScrollingCreditWindow::RestartCreditDisplay() {
// LINE 2350:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2352:
	__asm        jmp    near ptr 0x0045DF58;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045df5d
int32_t ScrollingCreditWindow::DoesWindowNeedUpdating() {
// LINE 2357:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2358:
	__asm        jmp    near ptr 0x0045DF6E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    near ptr 0x0045E0C6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0045DF8C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     near ptr 0x0045E01B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    near ptr 0x0045DFBF;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045E006;
	__asm        jmp    near ptr 0x0045E006;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0045DFEF;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045E006;
	__asm        jmp    near ptr 0x0045E006;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0045E006;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        add    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    near ptr 0x0045E06E;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     near ptr 0x0045E06E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    near ptr 0x0045E0A9;
	__asm        jmp    near ptr 0x0045E097;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    near ptr 0x0045E0A9;
	__asm        jmp    near ptr 0x0045E097;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    near ptr 0x0045E0A9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 1;
	__asm        jmp    near ptr 0x0045E0B6;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC8], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC8], 0;
	__asm        je     near ptr 0x0045E0D0;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0045E0D2;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045E0D7;
// LINE 2359:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045e0dc
int32_t ScrollingCreditWindow::LoadCreditStringArray() {
// LINE 2364:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2366:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045E0EF;
// LINE 2367:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045e0f4
int32_t ScrollingCreditWindow::Scroll() {
// LINE 2372:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2373:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045E107;
// LINE 2374:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045e10c
int32_t ScrollingCreditWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2380:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2381:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0045E11F;
// LINE 2382:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0045e126
// $E72

// FUNCTION: COPTER_D 0x0045e13b
// $E71

// FUNCTION: COPTER_D 0x0045e165
// $E75

// FUNCTION: COPTER_D 0x0045e17a
// $E74

// FUNCTION: COPTER_D 0x0045e1a4
void CheckupWindow::CheckupWindow(class MRect& rectNewPosition, int32_t nNewID, class GraphicWindow* windowNewParent, class GraphicWindowOwner* myNewOwner, int32_t bAddToParentList) {
	int32_t i;

// LINE 2418:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, ds:[0x606988];
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x599188];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x004A393D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5903A0;
// LINE 2421:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0045E1F0;
	__asm        inc    i;
	__asm        cmp    i, 3;
	__asm        jge    near ptr 0x0045E20D;
// LINE 2422:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x74], 0;
	__asm        jmp    near ptr 0x0045E1ED;
// LINE 2423:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0045E21C;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x0045E23C;
// LINE 2424:
	__asm        mov    eax, i;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x80], 0;
	__asm        jmp    near ptr 0x0045E219;
// LINE 2425:
	__asm        jmp    near ptr 0x0045E241;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0045e24b
int32_t CheckupWindow::Initialize() {
	class ButtonWindow* tempButtonWindow;
	class TextWindow* tempTextWindow;
	class basic_string<char> sText;
	int32_t nFullStringID;

// LINE 2431:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        mov    eax, 0x2250;
	__asm        call   0x0056AC60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2434:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x15C], eax;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     near ptr 0x0045E2C9;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045E2BB;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045E2D0;
	__asm        mov    sText.reference, 0;
	__asm        mov    sText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0045E2DC;
// LINE 2437:
	__asm        mov    ecx, this;
	__asm        call   0x004A44D4;
// LINE 2440:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0045E352;
	__asm        jmp    near ptr 0x0045E306;
	__asm        mov    dword ptr [ebp-0x28], 0x70;
	__asm        mov    dword ptr [ebp-0x24], 0x24;
	__asm        mov    dword ptr [ebp-0x20], 0x158;
	__asm        mov    dword ptr [ebp-0x1C], 0x42;
	__asm        jmp    near ptr 0x0045E327;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x244;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E359;
	__asm        mov    tempTextWindow, 0;
// LINE 2441:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1E;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2442:
	__asm        push   0x603AB4;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2443:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2445:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0045E3FB;
	__asm        jmp    near ptr 0x0045E3AF;
	__asm        mov    dword ptr [ebp-0x3C], 0x48;
	__asm        mov    dword ptr [ebp-0x38], 0x5A;
	__asm        mov    dword ptr [ebp-0x34], 0x94;
	__asm        mov    dword ptr [ebp-0x30], 0x68;
	__asm        jmp    near ptr 0x0045E3D0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x245;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E402;
	__asm        mov    tempTextWindow, 0;
// LINE 2446:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2447:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2448:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2450:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x0045E4A4;
	__asm        jmp    near ptr 0x0045E458;
	__asm        mov    dword ptr [ebp-0x50], 0xEC;
	__asm        mov    dword ptr [ebp-0x4C], 0x5A;
	__asm        mov    dword ptr [ebp-0x48], 0x148;
	__asm        mov    dword ptr [ebp-0x44], 0x68;
	__asm        jmp    near ptr 0x0045E479;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x246;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E4AB;
	__asm        mov    tempTextWindow, 0;
// LINE 2451:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2452:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2453:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2455:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     near ptr 0x0045E54D;
	__asm        jmp    near ptr 0x0045E501;
	__asm        mov    dword ptr [ebp-0x64], 0x3E;
	__asm        mov    dword ptr [ebp-0x60], 0x14E;
	__asm        mov    dword ptr [ebp-0x5C], 0xA4;
	__asm        mov    dword ptr [ebp-0x58], 0x162;
	__asm        jmp    near ptr 0x0045E522;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x247;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E554;
	__asm        mov    tempTextWindow, 0;
// LINE 2456:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2457:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2458:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2460:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0045E5F6;
	__asm        jmp    near ptr 0x0045E5AA;
	__asm        mov    dword ptr [ebp-0x78], 0xA4;
	__asm        mov    dword ptr [ebp-0x74], 0x14E;
	__asm        mov    dword ptr [ebp-0x70], 0x118;
	__asm        mov    dword ptr [ebp-0x6C], 0x162;
	__asm        jmp    near ptr 0x0045E5CB;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x248;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E5FD;
	__asm        mov    tempTextWindow, 0;
// LINE 2461:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2462:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2463:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2465:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     near ptr 0x0045E6AB;
	__asm        jmp    near ptr 0x0045E653;
	__asm        mov    dword ptr [ebp-0x8C], 0x118;
	__asm        mov    dword ptr [ebp-0x88], 0x14E;
	__asm        mov    dword ptr [ebp-0x84], 0x18E;
	__asm        mov    dword ptr [ebp-0x80], 0x162;
	__asm        jmp    near ptr 0x0045E67D;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x249;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   0x004ACCE6;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    near ptr 0x0045E6B2;
	__asm        mov    tempTextWindow, 0;
// LINE 2466:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2467:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2468:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2471:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     near ptr 0x0045E772;
	__asm        jmp    near ptr 0x0045E70E;
	__asm        mov    dword ptr [ebp-0xA0], 0xA4;
	__asm        mov    dword ptr [ebp-0x9C], 0x5A;
	__asm        mov    dword ptr [ebp-0x98], 0xD8;
	__asm        mov    dword ptr [ebp-0x94], 0x66;
	__asm        jmp    near ptr 0x0045E73B;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   0x004ACCE6;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    near ptr 0x0045E782;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
// LINE 2472:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2473:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2475:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     near ptr 0x0045E856;
	__asm        jmp    near ptr 0x0045E7F2;
	__asm        mov    dword ptr [ebp-0xB4], 0x156;
	__asm        mov    dword ptr [ebp-0xB0], 0x5A;
	__asm        mov    dword ptr [ebp-0xAC], 0x186;
	__asm        mov    dword ptr [ebp-0xA8], 0x66;
	__asm        jmp    near ptr 0x0045E81F;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        call   0x004ACCE6;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    near ptr 0x0045E866;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
// LINE 2476:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2477:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2479:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x0045E93A;
	__asm        jmp    near ptr 0x0045E8D6;
	__asm        mov    dword ptr [ebp-0xC8], 0x48;
	__asm        mov    dword ptr [ebp-0xC4], 0x70;
	__asm        mov    dword ptr [ebp-0xC0], 0x98;
	__asm        mov    dword ptr [ebp-0xBC], 0x7E;
	__asm        jmp    near ptr 0x0045E903;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x004ACCE6;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    near ptr 0x0045E94A;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
// LINE 2480:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2481:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2482:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2484:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     near ptr 0x0045EA40;
	__asm        jmp    near ptr 0x0045E9DC;
	__asm        mov    dword ptr [ebp-0xDC], 0xBA;
	__asm        mov    dword ptr [ebp-0xD8], 0x70;
	__asm        mov    dword ptr [ebp-0xD4], 0x10E;
	__asm        mov    dword ptr [ebp-0xD0], 0x7E;
	__asm        jmp    near ptr 0x0045EA09;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xCC];
	__asm        call   0x004ACCE6;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    near ptr 0x0045EA50;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
// LINE 2485:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2486:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2487:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2489:
	__asm        push   0xA4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE0], eax;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     near ptr 0x0045EB46;
	__asm        jmp    near ptr 0x0045EAE2;
	__asm        mov    dword ptr [ebp-0xF0], 0x12A;
	__asm        mov    dword ptr [ebp-0xEC], 0x70;
	__asm        mov    dword ptr [ebp-0xE8], 0x17E;
	__asm        mov    dword ptr [ebp-0xE4], 0x7E;
	__asm        jmp    near ptr 0x0045EB0F;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE0];
	__asm        call   0x004ACCE6;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    near ptr 0x0045EB56;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 2490:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2491:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2492:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2497:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xF4], eax;
	__asm        cmp    dword ptr [ebp-0xF4], 0;
	__asm        je     near ptr 0x0045EC53;
	__asm        jmp    near ptr 0x0045EBE8;
	__asm        mov    dword ptr [ebp-0x104], 0x62;
	__asm        mov    dword ptr [ebp-0x100], 0x84;
	__asm        mov    dword ptr [ebp-0xFC], 0x7C;
	__asm        mov    dword ptr [ebp-0xF8], 0x14E;
	__asm        jmp    near ptr 0x0045EC15;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59918C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF4];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    near ptr 0x0045EC60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
// LINE 2498:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 2499:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2834;
// LINE 2500:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2872;
// LINE 2504:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     near ptr 0x0045ED27;
	__asm        jmp    near ptr 0x0045ECBC;
	__asm        mov    dword ptr [ebp-0x118], 0xD6;
	__asm        mov    dword ptr [ebp-0x114], 0x84;
	__asm        mov    dword ptr [ebp-0x110], 0xF0;
	__asm        mov    dword ptr [ebp-0x10C], 0x14E;
	__asm        jmp    near ptr 0x0045ECE9;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59918C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    near ptr 0x0045ED34;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
// LINE 2505:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 2506:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2834;
// LINE 2507:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2872;
// LINE 2511:
	__asm        push   0xB4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x0045EDFB;
	__asm        jmp    near ptr 0x0045ED90;
	__asm        mov    dword ptr [ebp-0x12C], 0x14A;
	__asm        mov    dword ptr [ebp-0x128], 0x84;
	__asm        mov    dword ptr [ebp-0x124], 0x164;
	__asm        mov    dword ptr [ebp-0x120], 0x14E;
	__asm        jmp    near ptr 0x0045EDBD;
	__asm        push   8;
	__asm        mov    eax, ds:[0x59918C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   5;
	__asm        lea    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   0x004B1256;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    near ptr 0x0045EE08;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
// LINE 2512:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 2513:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2834;
// LINE 2514:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2872;
// LINE 2518:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     near ptr 0x0045EEBF;
	__asm        jmp    near ptr 0x0045EE64;
	__asm        mov    dword ptr [ebp-0x140], 0xC6;
	__asm        mov    dword ptr [ebp-0x13C], 0x186;
	__asm        mov    dword ptr [ebp-0x138], 0xC7;
	__asm        mov    dword ptr [ebp-0x134], 0x187;
	__asm        jmp    near ptr 0x0045EE91;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0045EEC6;
	__asm        mov    tempButtonWindow, 0;
// LINE 2519:
	__asm        push   0;
	__asm        push   0x24A;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2520:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1178], eax;
	__asm        cmp    dword ptr [ebp-0x1178], 0;
	__asm        jne    near ptr 0x0045F2C8;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1178], eax;
	__asm        jmp    near ptr 0x0045EF37;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1194], eax;
	__asm        cmp    dword ptr [ebp-0x1194], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045EF91;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x1188], eax;
	__asm        mov    eax, [ebp-0x1188];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045EF82;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045EF91;
	__asm        jmp    near ptr 0x0045EF96;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045EFC7;
	__asm        cmp    dword ptr [ebp-0x1194], 0;
	__asm        je     near ptr 0x0045F083;
	__asm        jmp    near ptr 0x0045EFB5;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1194];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045F083;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1180], eax;
	__asm        cmp    dword ptr [ebp-0x1180], 0;
	__asm        je     near ptr 0x0045F008;
	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1180];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x117C], eax;
	__asm        jmp    near ptr 0x0045F012;
	__asm        mov    dword ptr [ebp-0x117C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045F070;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1190], eax;
	__asm        mov    eax, [ebp-0x1190];
	__asm        mov    [ebp-0x118C], eax;
	__asm        cmp    dword ptr [ebp-0x118C], 0;
	__asm        je     near ptr 0x0045F070;
	__asm        mov    ecx, [ebp-0x118C];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045F057;
	__asm        mov    eax, [ebp-0x118C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F06B;
	__asm        jmp    near ptr 0x0045F070;
	__asm        jmp    near ptr 0x0045F075;
	__asm        mov    eax, [ebp-0x117C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045F0C2;
	__asm        cmp    dword ptr [ebp-0x1194], 0;
	__asm        je     near ptr 0x0045F0C2;
	__asm        jmp    near ptr 0x0045F095;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1184], eax;
	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1184];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045F0C2;
	__asm        mov    eax, [ebp-0x1194];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045F0D3;
	__asm        jmp    near ptr 0x0045F0D8;
	__asm        jmp    near ptr 0x0045F0DD;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11B4], eax;
	__asm        jmp    near ptr 0x0045F0F5;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x11B4];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045F144;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11A8], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F135;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F144;
	__asm        jmp    near ptr 0x0045F149;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045F178;
	__asm        jmp    near ptr 0x0045F15B;
	__asm        jmp    near ptr 0x0045F160;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x11B4];
	__asm        jae    near ptr 0x0045F265;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x119C], eax;
	__asm        cmp    dword ptr [ebp-0x119C], 0;
	__asm        je     near ptr 0x0045F206;
	__asm        jmp    near ptr 0x0045F19A;
	__asm        jmp    near ptr 0x0045F19F;
	__asm        jmp    near ptr 0x0045F1A4;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045F1C6;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        jmp    near ptr 0x0045F1D5;
	__asm        jmp    near ptr 0x0045F1D5;
	__asm        mov    dword ptr [ebp-0x11A4], 0;
	__asm        jmp    near ptr 0x0045F1D5;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x119C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x1198], eax;
	__asm        jmp    near ptr 0x0045F210;
	__asm        mov    dword ptr [ebp-0x1198], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045F257;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11B0], eax;
	__asm        mov    eax, [ebp-0x11B0];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        cmp    dword ptr [ebp-0x11AC], 0;
	__asm        je     near ptr 0x0045F257;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11AC];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045F257;
	__asm        jmp    near ptr 0x0045F25C;
	__asm        mov    eax, [ebp-0x1198];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x11B4], 0;
	__asm        je     near ptr 0x0045F2AD;
	__asm        jmp    near ptr 0x0045F277;
	__asm        jmp    near ptr 0x0045F27C;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11A0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045F2AD;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045F2BE;
	__asm        jmp    near ptr 0x0045F2C3;
	__asm        jmp    near ptr 0x0045F59E;
	__asm        jmp    near ptr 0x0045F2CD;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        cmp    dword ptr [ebp-0x11E4], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045F327;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F318;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F327;
	__asm        jmp    near ptr 0x0045F32C;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045F35D;
	__asm        cmp    dword ptr [ebp-0x11E4], 0;
	__asm        je     near ptr 0x0045F544;
	__asm        jmp    near ptr 0x0045F34B;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11E4];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045F544;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11BC], eax;
	__asm        cmp    dword ptr [ebp-0x11BC], 0;
	__asm        je     near ptr 0x0045F47D;
	__asm        cmp    dword ptr [ebp-0x11E4], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045F3BF;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x11E0], eax;
	__asm        mov    eax, [ebp-0x11E0];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F3B0;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F3BF;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045F44E;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045F449;
	__asm        jmp    near ptr 0x0045F45A;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045F46C;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    [ebp-0x11B8], eax;
	__asm        jmp    near ptr 0x0045F487;
	__asm        mov    dword ptr [ebp-0x11B8], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045F531;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11CC], eax;
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    [ebp-0x11C8], eax;
	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     near ptr 0x0045F531;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045F50E;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D0], eax;
	__asm        mov    eax, [ebp-0x11D0];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045F513;
	__asm        jmp    near ptr 0x0045F518;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F52C;
	__asm        jmp    near ptr 0x0045F531;
	__asm        jmp    near ptr 0x0045F536;
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045F583;
	__asm        cmp    dword ptr [ebp-0x11E4], 0;
	__asm        je     near ptr 0x0045F583;
	__asm        jmp    near ptr 0x0045F556;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045F583;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045F594;
	__asm        jmp    near ptr 0x0045F599;
	__asm        jmp    near ptr 0x0045F59E;
// LINE 2521:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 2522:
	__asm        push   0x603AB4;
	__asm        push   0x603ABC;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 2523:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2526:
	__asm        push   0x94;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     near ptr 0x0045F650;
	__asm        jmp    near ptr 0x0045F5F5;
	__asm        mov    dword ptr [ebp-0x154], 0x12C;
	__asm        mov    dword ptr [ebp-0x150], 0x186;
	__asm        mov    dword ptr [ebp-0x14C], 0x12D;
	__asm        mov    dword ptr [ebp-0x148], 0x187;
	__asm        jmp    near ptr 0x0045F622;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x144];
	__asm        call   0x00471847;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    near ptr 0x0045F657;
	__asm        mov    tempButtonWindow, 0;
// LINE 2527:
	__asm        push   0;
	__asm        push   0x24B;
	__asm        call   0x0042B15F;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 2528:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21E8], eax;
	__asm        cmp    dword ptr [ebp-0x21E8], 0;
	__asm        jne    near ptr 0x0045FA42;
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, ds:[0x5C28C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21E8], eax;
	__asm        jmp    near ptr 0x0045F6C8;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2204], eax;
	__asm        cmp    dword ptr [ebp-0x2204], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045F722;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x21F8], eax;
	__asm        mov    eax, [ebp-0x21F8];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F713;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F722;
	__asm        jmp    near ptr 0x0045F727;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045F758;
	__asm        cmp    dword ptr [ebp-0x2204], 0;
	__asm        je     near ptr 0x0045F7FD;
	__asm        jmp    near ptr 0x0045F746;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2204];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045F7FD;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x21F0], eax;
	__asm        cmp    dword ptr [ebp-0x21F0], 0;
	__asm        je     near ptr 0x0045F799;
	__asm        mov    eax, [ebp-0x2204];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x21F0];
	__asm        call   0x0041E090;
	__asm        mov    [ebp-0x21EC], eax;
	__asm        jmp    near ptr 0x0045F7A3;
	__asm        mov    dword ptr [ebp-0x21EC], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045F7EA;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2200], eax;
	__asm        mov    eax, [ebp-0x2200];
	__asm        mov    [ebp-0x21FC], eax;
	__asm        cmp    dword ptr [ebp-0x21FC], 0;
	__asm        je     near ptr 0x0045F7EA;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x21FC];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045F7EA;
	__asm        jmp    near ptr 0x0045F7EF;
	__asm        mov    eax, [ebp-0x21EC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045F83C;
	__asm        cmp    dword ptr [ebp-0x2204], 0;
	__asm        je     near ptr 0x0045F83C;
	__asm        jmp    near ptr 0x0045F80F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x21F4], eax;
	__asm        mov    eax, [ebp-0x2204];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x21F4];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045F83C;
	__asm        mov    eax, [ebp-0x2204];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045F84D;
	__asm        jmp    near ptr 0x0045F852;
	__asm        jmp    near ptr 0x0045F857;
	__asm        push   0x597200;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2224], eax;
	__asm        jmp    near ptr 0x0045F86F;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2224];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     near ptr 0x0045F8BE;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2218], eax;
	__asm        mov    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F8AF;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045F8BE;
	__asm        jmp    near ptr 0x0045F8C3;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045F8F2;
	__asm        jmp    near ptr 0x0045F8D5;
	__asm        jmp    near ptr 0x0045F8DA;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2224];
	__asm        jae    near ptr 0x0045F9DF;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220C], eax;
	__asm        cmp    dword ptr [ebp-0x220C], 0;
	__asm        je     near ptr 0x0045F980;
	__asm        jmp    near ptr 0x0045F914;
	__asm        jmp    near ptr 0x0045F919;
	__asm        jmp    near ptr 0x0045F91E;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0045F940;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2214], eax;
	__asm        jmp    near ptr 0x0045F94F;
	__asm        jmp    near ptr 0x0045F94F;
	__asm        mov    dword ptr [ebp-0x2214], 0;
	__asm        jmp    near ptr 0x0045F94F;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2214];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x220C];
	__asm        call   0x0041E160;
	__asm        mov    [ebp-0x2208], eax;
	__asm        jmp    near ptr 0x0045F98A;
	__asm        mov    dword ptr [ebp-0x2208], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045F9D1;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2220], eax;
	__asm        mov    eax, [ebp-0x2220];
	__asm        mov    [ebp-0x221C], eax;
	__asm        cmp    dword ptr [ebp-0x221C], 0;
	__asm        je     near ptr 0x0045F9D1;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x221C];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x0045F9D1;
	__asm        jmp    near ptr 0x0045F9D6;
	__asm        mov    eax, [ebp-0x2208];
	__asm        mov    sText.reference, eax;
	__asm        cmp    dword ptr [ebp-0x2224], 0;
	__asm        je     near ptr 0x0045FA27;
	__asm        jmp    near ptr 0x0045F9F1;
	__asm        jmp    near ptr 0x0045F9F6;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2210], eax;
	__asm        mov    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2210];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045FA27;
	__asm        mov    eax, [ebp-0x2224];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045FA38;
	__asm        jmp    near ptr 0x0045FA3D;
	__asm        jmp    near ptr 0x0045FCCC;
	__asm        jmp    near ptr 0x0045FA47;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x224C], eax;
	__asm        cmp    dword ptr [ebp-0x224C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045FAA1;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FA92;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FAA1;
	__asm        jmp    near ptr 0x0045FAA6;
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     near ptr 0x0045FAD7;
	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     near ptr 0x0045FC72;
	__asm        jmp    near ptr 0x0045FAC5;
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x224C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    near ptr 0x0045FC72;
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x222C], eax;
	__asm        cmp    dword ptr [ebp-0x222C], 0;
	__asm        je     near ptr 0x0045FBF7;
	__asm        cmp    dword ptr [ebp-0x224C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0045FB39;
	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   0x00569960;
	__asm        mov    [ebp-0x2248], eax;
	__asm        mov    eax, [ebp-0x2248];
	__asm        push   eax;
	__asm        call   0x004011B0;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FB2A;
	__asm        push   1;
	__asm        call   0x00569430;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FB39;
	__asm        mov    eax, [ebp-0x224C];
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045FBC8;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2240], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2244], eax;
	__asm        mov    eax, [ebp-0x2240];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045FBC3;
	__asm        jmp    near ptr 0x0045FBD4;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0045FBE6;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    [ebp-0x2228], eax;
	__asm        jmp    near ptr 0x0045FC01;
	__asm        mov    dword ptr [ebp-0x2228], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045FC5F;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x223C], eax;
	__asm        mov    eax, [ebp-0x223C];
	__asm        mov    [ebp-0x2238], eax;
	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     near ptr 0x0045FC5F;
	__asm        mov    ecx, [ebp-0x2238];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0045FC46;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FC5A;
	__asm        jmp    near ptr 0x0045FC5F;
	__asm        jmp    near ptr 0x0045FC64;
	__asm        mov    eax, [ebp-0x2228];
	__asm        mov    sText.reference, eax;
	__asm        jmp    near ptr 0x0045FCB1;
	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     near ptr 0x0045FCB1;
	__asm        jmp    near ptr 0x0045FC84;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2230], eax;
	__asm        mov    eax, [ebp-0x224C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2230];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0045FCB1;
	__asm        mov    eax, [ebp-0x224C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0045FCC2;
	__asm        jmp    near ptr 0x0045FCC7;
	__asm        jmp    near ptr 0x0045FCCC;
// LINE 2529:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 2530:
	__asm        push   0x603AB4;
	__asm        push   0x603ABC;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 2531:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2533:
	__asm        mov    ecx, this;
	__asm        call   0x0045FEC2;
// LINE 2535:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7075;
	__asm        add    esp, 4;
// LINE 2536:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x004A7470;
	__asm        add    esp, 4;
// LINE 2538:
	__asm        mov    dword ptr [ebp-0x158], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0045FDDB;
	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x168], eax;
	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        je     near ptr 0x0045FDDB;
	__asm        mov    eax, [ebp-0x168];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0045FDB8;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    dword ptr [eax], 0;
	__asm        jmp    near ptr 0x0045FDBD;
	__asm        jmp    near ptr 0x0045FDC2;
	__asm        mov    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FDD6;
	__asm        jmp    near ptr 0x0045FDDB;
	__asm        jmp    near ptr 0x0045FDE0;
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     near ptr 0x0045FE0E;
	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0045FE13;
	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    near ptr 0x0045FE1E;
// LINE 2539:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045fe23
void CheckupWindow::SetCurrentSettings(long * lNewSettings) {
// LINE 2550:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2551:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B273A;
// LINE 2552:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B273A;
// LINE 2553:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 2554:
	__asm        mov    ecx, this;
	__asm        call   0x00460077;
// LINE 2555:
	__asm        jmp    near ptr 0x0045FE71;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045fe78
void CheckupWindow::GetCurrentSettings(long * lCurrentSettings) {
// LINE 2562:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2563:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B271B;
	__asm        mov    ecx, lCurrentSettings;
	__asm        mov    [ecx], eax;
// LINE 2564:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B271B;
	__asm        mov    ecx, lCurrentSettings;
	__asm        mov    [ecx+4], eax;
// LINE 2565:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B271B;
	__asm        mov    ecx, lCurrentSettings;
	__asm        mov    [ecx+8], eax;
// LINE 2566:
	__asm        jmp    near ptr 0x0045FEBB;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0045fec2
void CheckupWindow::SetAllControlValuesToDefaults() {
	long lValue;

// LINE 2573:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2576:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F741D;
	__asm        add    esp, 4;
	__asm        mov    lValue, eax;
// LINE 2577:
	__asm        cmp    lValue, 0;
	__asm        jge    near ptr 0x0045FEF0;
// LINE 2578:
	__asm        mov    lValue, 0;
// LINE 2579:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B2872;
// LINE 2580:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   0x004B273A;
// LINE 2582:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F74EB;
	__asm        add    esp, 4;
	__asm        mov    lValue, eax;
// LINE 2583:
	__asm        cmp    lValue, 0;
	__asm        jge    near ptr 0x0045FF30;
// LINE 2584:
	__asm        mov    lValue, 0;
// LINE 2585:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B2872;
// LINE 2586:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   0x004B273A;
// LINE 2588:
	__asm        call   0x00428F4A;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     near ptr 0x0045FF8D;
// LINE 2589:
	__asm        push   3;
	__asm        call   0x004F83A8;
	__asm        add    esp, 4;
	__asm        mov    lValue, eax;
// LINE 2590:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2872;
// LINE 2591:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 2593:
	__asm        jmp    near ptr 0x0045FFA7;
// LINE 2594:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B2872;
// LINE 2595:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   0x004B273A;
// LINE 2597:
	__asm        mov    ecx, this;
	__asm        call   0x00460077;
// LINE 2598:
	__asm        jmp    near ptr 0x0045FFB4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0045ffb9
int32_t CheckupWindow::ShouldWeDisplayCheckupWindow() {
// LINE 2604:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2608:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F75B5;
	__asm        add    esp, 4;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        cmp    eax, [ecx+0xD0];
	__asm        jne    near ptr 0x0046001D;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F75FE;
	__asm        add    esp, 4;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        cmp    eax, [ecx+0x320];
	__asm        jne    near ptr 0x0046001D;
	__asm        call   0x00428F4A;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     near ptr 0x00460027;
	__asm        call   0x00428F4A;
	__asm        cmp    dword ptr [eax+0x54], 0xA;
	__asm        jge    near ptr 0x00460027;
// LINE 2610:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046002E;
// LINE 2612:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046002E;
// LINE 2613:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00460033
int32_t CheckupWindow::CanUserAffordCurrentSliderValues() {
	long[3] lSliderValues;

// LINE 2620:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2623:
	__asm        lea    eax, lSliderValues[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0045FE78;
// LINE 2624:
	__asm        mov    ebx, lSliderValues[1];
	__asm        add    ebx, lSliderValues[2];
	__asm        add    ebx, lSliderValues[0];
	__asm        call   0x00428FB5;
	__asm        cmp    ebx, eax;
	__asm        jg     near ptr 0x0046006B;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046006D;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00460072;
// LINE 2625:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00460077
void CheckupWindow::SetTextControlsBasedOnCurrentSliderValues() {
	char[32] szCurrentText;
	long lCurrentValue;
	class MRect rectWindowTemp;
	long[3] lSliderValues;

// LINE 2632:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xEC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2636:
	__asm        jmp    near ptr 0x0046008E;
	__asm        jmp    near ptr 0x00460093;
// LINE 2638:
	__asm        lea    eax, lSliderValues[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0045FE78;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x6C], eax;
// LINE 2640:
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004600D5;
// LINE 2641:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2642:
	__asm        call   0x00428FB5;
	__asm        push   eax;
	__asm        push   0x599270;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 2643:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD0], eax;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     near ptr 0x0046013D;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x00460144;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x00460150;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x44];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004601BB;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     near ptr 0x004601BB;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004601BB;
	__asm        jmp    near ptr 0x004601C0;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x004601E8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004601ED;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x70], eax;
// LINE 2645:
	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00460220;
// LINE 2646:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2647:
	__asm        mov    eax, lSliderValues[1];
	__asm        add    eax, lSliderValues[2];
	__asm        add    eax, lSliderValues[0];
	__asm        mov    lCurrentValue, eax;
// LINE 2648:
	__asm        mov    eax, lCurrentValue;
	__asm        push   eax;
	__asm        push   0x599274;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 2649:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     near ptr 0x00460292;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD4];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x00460299;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x004602A5;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x4C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00460310;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x00460310;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00460310;
	__asm        jmp    near ptr 0x00460315;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00460343;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00460348;
// LINE 2650:
	__asm        call   0x00428FB5;
	__asm        cmp    eax, lCurrentValue;
	__asm        jge    near ptr 0x00460380;
// LINE 2651:
	__asm        push   0x603AB4;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2652:
	__asm        jmp    near ptr 0x004603A5;
// LINE 2653:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x74], eax;
// LINE 2655:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004603D8;
// LINE 2656:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2657:
	__asm        mov    eax, lSliderValues[0];
	__asm        push   eax;
	__asm        push   0x599278;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 2658:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD8], eax;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     near ptr 0x004604EA;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x00460441;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x004604BE;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x004604B9;
	__asm        jmp    near ptr 0x004604CA;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004604DC;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x004604F1;
	__asm        mov    dword ptr [ebp-0x54], 0;
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    near ptr 0x004604FD;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x54];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00460568;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     near ptr 0x00460568;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0xA8];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00460568;
	__asm        jmp    near ptr 0x0046056D;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x0046059B;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004605A0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x78], eax;
// LINE 2660:
	__asm        mov    eax, [ebp-0x78];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x004605D3;
// LINE 2661:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2662:
	__asm        mov    eax, lSliderValues[1];
	__asm        push   eax;
	__asm        push   0x59927C;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 2663:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE4], eax;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        je     near ptr 0x00460639;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00460640;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x0046064C;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x5C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004606B7;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     near ptr 0x004606B7;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x004606B7;
	__asm        jmp    near ptr 0x004606BC;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x004606EA;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004606EF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x7C], eax;
// LINE 2665:
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    near ptr 0x00460722;
// LINE 2666:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2667:
	__asm        mov    eax, lSliderValues[2];
	__asm        push   eax;
	__asm        push   0x599280;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 2668:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x00460788;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   0x0041DFE0;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x0046078F;
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x0046079B;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x64];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00460806;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC8], eax;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        je     near ptr 0x00460806;
	__asm        push   1;
	__asm        mov    ecx, [ebp-0xC8];
	__asm        call   0x0041DD70;
	__asm        jmp    near ptr 0x00460806;
	__asm        jmp    near ptr 0x0046080B;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x00460839;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0046083E;
// LINE 2669:
	__asm        jmp    near ptr 0x00460843;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00460848
int32_t CheckupWindow::DoMessage(class GraphicWindow* gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2679:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2680:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004608EB;
// LINE 2684:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    near ptr 0x00460874;
// LINE 2685:
	__asm        mov    ecx, this;
	__asm        call   0x00460077;
// LINE 2686:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046091D;
// LINE 2689:
	__asm        mov    ecx, this;
	__asm        call   0x00460033;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004608B0;
// LINE 2690:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2692:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046091D;
// LINE 2695:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2696:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0046091D;
// LINE 2697:
	__asm        jmp    near ptr 0x00460916;
	__asm        dec    dword ptr [ebp-8];
	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        ja     near ptr 0x00460916;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x460902];
	__asm        jle    short 0x0046090C;
	__asm        inc    esi;
	__asm        add    [edx+0x5F004608], bh;
	__asm        or     [esi], al;
	__asm        pop    edi;
	__asm        or     [esi], al;
	__asm        pop    edi;
	__asm        or     [esi], al;
// LINE 2699:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0046091D;
// LINE 2700:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00460924
long CheckupWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2708:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2709:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    near ptr 0x00460969;
// LINE 2710:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     near ptr 0x00460969;
// LINE 2711:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2713:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00460973;
// LINE 2714:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}



// Contribution: 1:0005f980-0005fc15 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460980
// MessageBoxWindow::`scalar deleting destructor'



// Contribution: 1:0005fc20-0005fc5d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460c20
// AnimationWindow::`scalar deleting destructor'



// Contribution: 1:0005fc60-0005fc98 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460c60
// RenderSettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fca0-0005fcdd Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460ca0
// SoundSettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fce0-0005fd1d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460ce0
// CitySettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fd20-0005fd58 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460d20
// PopupMenuExtra::`scalar deleting destructor'



// Contribution: 1:0005fd60-0005fd98 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460d60
// TooltipWindow::`scalar deleting destructor'



// Contribution: 1:0005fda0-0005fdd8 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460da0
// BoneheadTextEditWindow::`scalar deleting destructor'



// Contribution: 1:0005fde0-0005fe15 Module: 45, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0005fe20-0005fe59 Module: 45, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0005fe60-000600fa Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460e60
// MessageBoxWindowEdit::`scalar deleting destructor'



// Contribution: 1:00060100-00060138 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00461100
// ScrollingCreditWindow::`scalar deleting destructor'



// Contribution: 1:00060140-0006017d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00461140
// CheckupWindow::`scalar deleting destructor'



// Contribution: 2:00000a80-00000b53 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fa80
// ??_7MessageBoxWindow@@6B@


// Contribution: 2:00000b58-00000c1b Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fb58
// ??_7AnimationWindow@@6B@


// Contribution: 2:00000c20-00000ce3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fc20
// ??_7RenderSettingsWindow@@6B@


// Contribution: 2:00000ce8-00000dab Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fce8
// ??_7SoundSettingsWindow@@6B@


// Contribution: 2:00000db0-00000dcf Module: 45, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00000dd0-00000e93 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fdd0
// ??_7CitySettingsWindow@@6B@


// Contribution: 2:00000e98-00000ff7 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fe98
// ??_7PopupMenuExtra@@6B@


// Contribution: 2:00000ff8-000010eb Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x0058fff8
// ??_7TooltipWindow@@6B@


// Contribution: 2:000010f0-000011f3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005900f0
// ??_7BoneheadTextEditWindow@@6B@


// Contribution: 2:000011f8-000012d3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005901f8
// ??_7MessageBoxWindowEdit@@6B@


// Contribution: 2:000012d8-0000139b Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005902d8
// ??_7ScrollingCreditWindow@@6B@


// Contribution: 2:000013a0-00001463 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005903a0
// ??_7CheckupWindow@@6B@


// Contribution: 3:00000044-00000053 Module: 45, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597044
// $S67
// LOCAL: COPTER_D 0x00597048
// $S70
// LOCAL: COPTER_D 0x0059704c
// $S73
// LOCAL: COPTER_D 0x00597050
// $S76


// Contribution: 3:0000213c-00002283 Module: 45, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059913c
// SZ_MESSAGE_BOX_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599140
// SZ_RENDER_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599144
// SZ_SKY_FILE_NAME_BASE
// GLOBAL: COPTER_D 0x00599148
// SZ_GROUND_FILE_NAME_BASE
// GLOBAL: COPTER_D 0x0059914c
// SZ_BUILDING_FILE_NAME_BASE
// GLOBAL: COPTER_D 0x00599150
// SZ_LO_RES
// GLOBAL: COPTER_D 0x00599154
// SZ_HI_RES
// GLOBAL: COPTER_D 0x00599158
// SZ_TEXTURE
// GLOBAL: COPTER_D 0x0059915c
// SZ_NO_TEXTURE
// GLOBAL: COPTER_D 0x00599160
// SZ_SKY_COOL
// GLOBAL: COPTER_D 0x00599164
// SZ_SKY_GRAY
// GLOBAL: COPTER_D 0x00599168
// SZ_RENDER_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059916c
// SZ_SOUND_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599170
// SZ_SOUND_WINDOW_STATION_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599174
// SZ_SOUND_WINDOW_STATION_THUMB_FILE_NAME
// GLOBAL: COPTER_D 0x00599178
// SZ_CITY_SETTINGS_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059917c
// SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599180
// SZ_POPUP_EXTRA_BACKGROUND_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599184
// SZ_TOOLTIP_BACKGROUND_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x00599188
// SZ_CHECKUP_WINDOW_IMAGE_FILE_NAME
// GLOBAL: COPTER_D 0x0059918c
// SZ_CHECKUP_SLIDER_IMAGE_FILE_NAME


// Contribution: 3:0006cab0-0006cabf Module: 45, 4 byte alignment, uninitialized_data, read, write, 
// LOCAL: COPTER_D 0x00603ab0
// colorTextGamePaletteNormal
// LOCAL: COPTER_D 0x00603ab4
// colorTextCheckupHighlighted
// LOCAL: COPTER_D 0x00603ab8
// colorTextGamePaletteHighlighted
// LOCAL: COPTER_D 0x00603abc
// colorTextCheckupNormal
