// Module: Extrawin.obj
// Source: C:\Copter\source\sparkal\Extrawin.cpp
// autogenerated by simcopter_tool from PDB file

// Type: char *;

// Type: /*packed*/ struct SparkalColor;
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: void ();

// Type: void;

// Type: /*packed*/ class MessageBoxWindow (forward reference);
// VTABLE: COPTER_D 0x0058fa80
class MessageBoxWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x2a45
public:
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, unsigned long, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xc4
	virtual void SetButtonTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xc8
protected:
	virtual int32_t ConvertTypeToStringID(long); // vtable+0xcc
	virtual void DrawTextOntoBox(); // vtable+0xd0
	/*+0x74*/  long lMessageID;
	/*+0x78*/  /*packed*/ class basic_string<char> sMessage; // 0x8 bytes
	/*+0x80*/  /*packed*/ class basic_string<char> sButtonImageFileName; // 0x8 bytes
	/*+0x88*/  /*packed*/ class basic_string<char> sAnimationImageFileName; // 0x8 bytes
	/*+0x90*/  long lType;
	/*+0x94*/  int32_t bSelfDeleting;
	/*+0x98*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x9c*/  /*packed*/ struct SparkalColor colorButtonFont;
	/*+0xa0*/  /*packed*/ struct SparkalColor colorButtonFontHighlighted;
};

// Type: /*packed*/ class MPoint (forward reference);
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: unsigned long;

// Type: int32_t;

// Type: /*unpacked*/ class GraphicWindow (forward reference);
// GraphicWindow Class implementation not found

// Type: /*packed*/ class GraphicWindowOwner (forward reference);
// VTABLE: COPTER_D 0x00590f2c
class GraphicWindowOwner{ // packed(0x4 bytes) TI: 0x1647
public:
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32); // vtable+0x0
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class ButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: /*packed*/ class MRect (forward reference);
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class AnimationWindow (forward reference);
// VTABLE: COPTER_D 0x0058fb58
class AnimationWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x41ff
	enum AnimationLoopType {
		nAnimationLoopTypeOnce = 0,
		nAnimationLoopTypeCircular = 1,
		nAnimationLoopTypeBackAndForth = 2,
	};
	enum AnimationDirection {
		nAnimationDirectionForward = 1,
		nAnimationDirectionBackward = -1,
	};
public:
	void AnimationWindow(char *, /*packed*/ class MRect&, long, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, long, enum AnimationWindow::AnimationLoopType);
	void AnimationWindow();
	void Start();
	void Stop();
	int32_t IsRunning();
	void ResetFramePosition();
	void ReverseAnimationDirection();
	void SetAnimationFrameTime(long);
	void SetAnimationFrameRate(long);
	void SetAnimationDirection(enum AnimationWindow::AnimationDirection);
	void SetAnimationLoopType(enum AnimationWindow::AnimationLoopType);
	void GotoFirstFrame();
	void GotoNextFrame();
	void GotoPreviousFrame();
	void GotoNthFrame(int32_t);
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t DoesWindowNeedUpdating() /* override */;
protected:
	/*+0x74*/  long bRunning;
	/*+0x78*/  long bManualFrameIncrementing;
	/*+0x7c*/  long lMillisecondsBetweenFrames;
	/*+0x80*/  long lMillisecondsOfLastFrame;
	/*+0x84*/  long lMillisecondsSinceLastFrame;
	/*+0x88*/  enum AnimationWindow::AnimationLoopType nAnimationLoopType;
	/*+0x8c*/  enum AnimationWindow::AnimationDirection nAnimationDirection;
	/*+0x90*/  long lCurrentFrame;
	/*+0x94*/  long bPreserveTiming;
	/*+0x98*/  long lWidthOfSingleFrame;
	/*+0x9c*/  long lFrameCount;
	/*+0xa0*/  long lTransparentIndex;
};

// Type: long;

// Type: char;

// Type: void * __ptr32;

// Type: /*packed*/ class MRect;
class MRect : public SparkalRect
{ // packed(0x10 bytes) TI: 0x1067
public:
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void MRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalSize);
	void MRect(/*packed*/ struct SparkalRect*);
	void MRect(/*packed*/ class MRect*);
	void MRect(const /*packed*/ struct SparkalRect&);
	void MRect(long, long, long, long);
	void MRect();
	long Width();
	long Height();
	/*packed*/ class MSize Size();
	const /*packed*/ class MPoint& TopLeft();
	/*packed*/ class MPoint& TopLeft();
	const /*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint& BottomRight();
	/*packed*/ class MPoint CenterPoint();
	/*packed*/ struct SparkalRect* operator struct SparkalRect *();
	/*packed*/ class MRect* operator class MRect *();
	int32_t IsRectEmpty();
	int32_t IsRectNull();
	int32_t PtInRect(/*packed*/ struct SparkalPoint);
	int32_t PtInRect(long, long);
	int32_t DoesRectOverlap(/*packed*/ struct SparkalRect*);
	void SetRect(/*packed*/ struct SparkalPoint, /*packed*/ struct SparkalPoint);
	void SetRect(long, long, long, long);
	void SetRectEmpty();
	void CopyRect(/*packed*/ class MRect*);
	int32_t EqualRect(/*packed*/ class MRect*);
	void InflateRect(long, long, long, long);
	void InflateRect(/*packed*/ class MRect*);
	void InflateRect(/*packed*/ struct SparkalSize);
	void InflateRect(long, long);
	void DeflateRect(long, long, long, long);
	void DeflateRect(/*packed*/ class MRect*);
	void DeflateRect(/*packed*/ struct SparkalSize);
	void DeflateRect(long, long);
	void MoveRect(/*packed*/ struct SparkalPoint);
	void MoveRect(long, long);
	void OffsetRect(/*packed*/ struct SparkalPoint);
	void OffsetRect(/*packed*/ struct SparkalSize);
	void OffsetRect(long, long);
	void NormalizeRect();
	int32_t IntersectRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t UnionRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t SubtractRect(/*packed*/ class MRect*, /*packed*/ class MRect*);
	int32_t operator==(const /*packed*/ struct SparkalRect&);
	int32_t operator!=(const /*packed*/ struct SparkalRect&);
	void operator+=(/*packed*/ class MRect*);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ class MRect*);
	void operator-=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator&=(const /*packed*/ struct SparkalRect&);
	void operator|=(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(/*packed*/ class MRect*);
	/*packed*/ class MRect operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator-(/*packed*/ class MRect*);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MRect operator&(const /*packed*/ struct SparkalRect&);
	/*packed*/ class MRect operator|(const /*packed*/ struct SparkalRect&);
};

// Type: /*packed*/ class MFont (forward reference);
// VTABLE: COPTER_D 0x00591640
class MFont{ // packed(0x1c bytes) TI: 0x1a6c
public:
	/*+0x4*/   /*packed*/ class basic_string<char> sName; // 0x8 bytes
	/*+0xc*/   unsigned long lHeight;
	/*+0x10*/  unsigned long lWidth;
	/*+0x14*/  unsigned long lAttributes;
	void MFont(char *, unsigned long, unsigned long, unsigned long, int32_t);
	void MFont(const /*packed*/ class MFont&);
	void MFont();
	void ~MFont();
	/*packed*/ class MFont& operator=(const /*packed*/ class MFont&);
	// calltype: NearC
	static int32_t IsFontAvailable(char *, unsigned long, unsigned long, unsigned long);
	// calltype: NearC
	static int32_t LoadFont(char *);
	// calltype: NearC
	static int32_t UnloadFont(char *);
	void SetFontCharacteristics(long, long, long);
	int32_t GetTextDimensions(char *, long&, long&);
	virtual int32_t CreateFontA(); // vtable+0x0
	virtual void DestroyFont(); // vtable+0x4
	void * __ptr32 operator void *();
protected:
	/*+0x18*/  void * __ptr32 hFont;
};

// Type: /*packed*/ struct SparkalColor (forward reference);
struct SparkalColor{ // packed(0x4 bytes) TI: 0x12ee
	/*+0x0*/   unsigned char Blue; // 0x1 bytes
	/*+0x1*/   unsigned char Green; // 0x1 bytes
	/*+0x2*/   unsigned char Red; // 0x1 bytes
	/*+0x3*/   unsigned char Padding; // 0x1 bytes
	void SparkalColor(unsigned char, unsigned char, unsigned char);
	void SparkalColor();
};

// Type: enum AnimationWindow::AnimationLoopType;
enum AnimationLoopType {
	nAnimationLoopTypeOnce = 0,
	nAnimationLoopTypeCircular = 1,
	nAnimationLoopTypeBackAndForth = 2,
};

// Type: /*packed*/ class RenderSettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fc20
class RenderSettingsWindow : public GraphicWindow
{ // packed(0xb8 bytes) TI: 0x2add
public:
	void RenderSettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~RenderSettingsWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
	int32_t SetCurrentSettings(long, long, long, long, long);
	void GetCurrentSettings(long&, long&, long&, long&, long&);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	/*+0x74*/  long bShowBuildingTextures;
	/*+0x78*/  long bShowGroundTextures;
	/*+0x7c*/  long bShowSkyAndClouds;
	/*+0x80*/  long lQuadPixelType;
	/*+0x84*/  long lFogCloseness;
protected:
	void SetControlsBasedOnCurrentSettings();
	void DrawPreviewBasedOnCurrentSettings();
	void GetPreviewFileNames(/*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&, /*packed*/ class basic_string<char>&);
	/*+0x88*/  /*packed*/ class CheckBoxWindow *myBuildingTexturesCheckBoxWindow;
	/*+0x8c*/  /*packed*/ class CheckBoxWindow *myObjectTexturesCheckBoxWindow;
	/*+0x90*/  /*packed*/ class CheckBoxWindow *mySkyDisplayCheckBoxWindow;
	/*+0x94*/  /*unpacked*/ class ButtonGroup *myDisplayResolutionButtonGroup;
	/*+0x98*/  /*packed*/ class SliderWindow *myFogSliderWindow;
	/*+0x9c*/  /*packed*/ class CBackBuffer *mySkyImage;
	/*+0xa0*/  /*packed*/ class CBackBuffer *myBuildingImage;
	/*+0xa4*/  /*packed*/ class MTimer mySkyTimer; // 0x10 bytes
	/*+0xb4*/  long lSkyImagePanX;
};

// Type: /*packed*/ class TextWindow (forward reference);
// VTABLE: COPTER_D 0x00591a90
class TextWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x4411
public:
	void TextWindow(/*packed*/ class MRect&, int32_t, const /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf() /* override */;
	virtual void SetWindowTitle(const /*packed*/ class basic_string<char>&); // vtable+0xc4
	virtual void SetWindowTitle(int32_t); // vtable+0xc8
	virtual void SetFontCharacteristics(long, long, long); // vtable+0xcc
	virtual void SetTextDrawStyle(unsigned long); // vtable+0xd0
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xd4
	virtual void SetBackgroundDrawing(int32_t); // vtable+0xd8
	virtual void LoadStrings(); // vtable+0xdc
	virtual void FitWindowToText(); // vtable+0xe0
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xe4
protected:
	/*+0x74*/  int32_t bDrawOpaqueBackground;
	/*+0x78*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x7c*/  int32_t nBackgroundPaletteIndex;
	/*+0x80*/  int32_t nWindowTitleTextID;
	/*+0x84*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa0*/  unsigned long nTextDrawStyle;
};

// Type: /*packed*/ class RadioButtonWindow (forward reference);
// VTABLE: COPTER_D 0x00591d38
class RadioButtonWindow : public ButtonWindow
{ // packed(0x98 bytes) TI: 0x1554
public:
	void RadioButtonWindow(/*unpacked*/ class ButtonGroup*, /*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void RadioButtonWindow();
	virtual void ~RadioButtonWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount() /* override */;
	virtual int32_t ComposeSelf() /* override */;
	virtual void AddToGroup(/*unpacked*/ class ButtonGroup*); // vtable+0xdc
	virtual int32_t RemoveFromGroup(); // vtable+0xe0
	virtual void SetState(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	/*+0x94*/  /*unpacked*/ class ButtonGroup *myRadioButtonGroup;
};

// Type: /*unpacked*/ class CBackBuffer (forward reference);
// CBackBuffer Class implementation not found

// Type: /*packed*/ class SoundSettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fce8
class SoundSettingsWindow : public GraphicWindow
{ // packed(0x88 bytes) TI: 0x2a87
public:
	void SoundSettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	int32_t SetCurrentVolumeSettings(/*unpacked*/ struct SoundPreferences&);
	int32_t SetCurrentRadioSettings(/*packed*/ struct RadioPreferences&, long);
	void GetCurrentVolumeSettings(/*unpacked*/ struct SoundPreferences&);
	void GetCurrentRadioSettings(/*packed*/ struct RadioPreferences&);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	// calltype: NearC
	static long ConvertSoundValueToSliderValue(long);
	// calltype: NearC
	static long ConvertSliderValueToSoundValue(long);
protected:
	/*+0x74*/  /*packed*/ class SliderWindow *myMasterVolumeSliderWindow;
	/*+0x78*/  /*packed*/ class SliderWindow *myRadioStationSliderWindow;
	/*+0x7c*/  /*packed*/ class SliderWindow *myRadioVolumeSliderWindow;
	/*+0x80*/  /*packed*/ class CheckBoxWindow *myDJCheckBoxWindow;
	/*+0x84*/  /*packed*/ class CheckBoxWindow *myCommercialCheckBoxWindow;
};

// Type: /*packed*/ struct SoundPreferences (forward reference);
struct SoundPreferences{ // packed(0x10 bytes) TI: 0x2845
	/*+0x0*/   long lMasterVolume;
	/*+0x4*/   long lDispatchVolume;
	/*+0x8*/   long lSoundEffectsVolume;
	/*+0xc*/   long lVehicleVolume;
};

// Type: /*packed*/ struct RadioPreferences (forward reference);
struct RadioPreferences{ // packed(0x1c bytes) TI: 0x2a39
	/*+0x0*/   long lVolume;
	/*+0x4*/   int32_t bPreferToBeOn;
	/*+0x8*/   long lCurrentStation;
	/*+0xc*/   int32_t bOptionDJ;
	/*+0x10*/  int32_t bOptionCommercials;
	/*+0x14*/  int32_t bAutoMute;
	/*+0x18*/  int32_t bOptionPlayEnglishIfDefaultLanguageNotFound;
};

// Type: /*packed*/ class CitySettingsWindow (forward reference);
// VTABLE: COPTER_D 0x0058fdd0
class CitySettingsWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x2a34
public:
	void CitySettingsWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	void SetCurrentCitySettings(/*packed*/ struct tagCitySettings*);
	void GetCurrentCitySettings(/*packed*/ struct tagCitySettings*);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
protected:
	/*+0x74*/  /*packed*/ class SliderWindow *mySliderWindows[8]; // 0x20 bytes
};

// Type: /*packed*/ struct tagCitySettings (forward reference);
struct tagCitySettings{ // packed(0x24 bytes) TI: 0x26eb
	/*+0x0*/   long lDifficulty;
	/*+0x4*/   long lMissionFrequencyFire;
	/*+0x8*/   long lMissionFrequencyCrime;
	/*+0xc*/   long lMissionFrequencyRescue;
	/*+0x10*/  long lMissionFrequencyRiot;
	/*+0x14*/  long lMissionFrequencyTraffic;
	/*+0x18*/  long lMissionFrequencyMedEvac;
	/*+0x1c*/  long lMissionFrequencyTransport;
	/*+0x20*/  long lDaytime;
};

// Type: /*packed*/ class PopupMenuExtra (forward reference);
// VTABLE: COPTER_D 0x0058fe98
class PopupMenuExtra : public PopupMenuWindow
{ // packed(0xd8 bytes) TI: 0x2a3c
public:
	void PopupMenuExtra(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	virtual void ~PopupMenuExtra() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t CreateImage(); // vtable+0x15c
	virtual void DestroyImage() /* override */;
	virtual void CalculateAllMetrics() /* override */;
protected:
	virtual void ResizeWindowToFitMenuItems() /* override */;
	/*+0xcc*/  /*unpacked*/ class CBackBuffer *myBackgroundImage;
	/*+0xd0*/  /*packed*/ class basic_string<char> myBackgroundImageFileName; // 0x8 bytes
};

// Type: /*packed*/ class list<basic_string<char>>::iterator;
class list<basic_string<char>>::iterator : public bidirectional_iterator<basic_string<char>,int>
{ // packed(0x4 bytes) TI: 0x1cd3
protected:
	/*+0x0*/   /*packed*/ struct list<basic_string<char>>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<basic_string<char>>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<basic_string<char>>::iterator&);
	/*packed*/ class basic_string<char>& operator*();
	/*packed*/ class list<basic_string<char>>::iterator operator++(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator++();
	/*packed*/ class list<basic_string<char>>::iterator operator--(int32_t);
	/*packed*/ class list<basic_string<char>>::iterator& operator--();
};

// Type: /*packed*/ class MPoint;
class MPoint : public SparkalPoint
{ // packed(0x8 bytes) TI: 0x159a
public:
	void MPoint(unsigned long);
	void MPoint(/*packed*/ struct SparkalSize);
	void MPoint(/*packed*/ struct SparkalPoint);
	void MPoint(long, long);
	void MPoint();
	void Offset(/*packed*/ struct SparkalSize);
	void Offset(/*packed*/ struct SparkalPoint);
	void Offset(long, long);
	int32_t operator==(/*packed*/ struct SparkalPoint);
	int32_t operator!=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalPoint);
	void operator+=(/*packed*/ struct SparkalSize);
	void operator-=(/*packed*/ struct SparkalPoint);
	void operator-=(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator+(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator+(/*packed*/ struct SparkalSize);
	/*packed*/ class MRect operator-(const /*packed*/ struct SparkalRect*);
	/*packed*/ class MSize operator-(/*packed*/ struct SparkalPoint);
	/*packed*/ class MPoint operator-();
	/*packed*/ class MPoint operator-(/*packed*/ struct SparkalSize);
};

// Type: /*packed*/ class TooltipWindow (forward reference);
// VTABLE: COPTER_D 0x0058fff8
class TooltipWindow : public TextWindow
{ // packed(0xb0 bytes) TI: 0x4449
public:
	void TooltipWindow(/*packed*/ class MRect&, int32_t, /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	void TooltipWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	virtual void ~TooltipWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual void SetWindowTitle(/*packed*/ class basic_string<char>&) /* override */;
	virtual void SetWindowTitle(int32_t) /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t CreateImage(); // vtable+0xe8
	virtual void DestroyImage() /* override */;
	virtual void SetTextAndShow(/*packed*/ class MPoint&, int32_t); // vtable+0xec
	virtual void SetTextAndShow(/*packed*/ class MPoint&, /*packed*/ class basic_string<char>&); // vtable+0xf0
protected:
	/*+0xa4*/  /*unpacked*/ class CBackBuffer *myBackgroundImage;
	/*+0xa8*/  /*packed*/ class basic_string<char> myBackgroundImageFileName; // 0x8 bytes
};

// Type: /*packed*/ class BoneheadTextEditWindow (forward reference);
// VTABLE: COPTER_D 0x005900f0
class BoneheadTextEditWindow : public TextWindow
{ // packed(0xc4 bytes) TI: 0x444b
public:
	void BoneheadTextEditWindow(/*packed*/ class MRect&, int32_t, const /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	void BoneheadTextEditWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, char *);
	void BoneheadTextEditWindow();
	virtual void ~BoneheadTextEditWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t CreateImage(); // vtable+0xe8
	virtual void DestroyImage() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t SetCaretPeriod(unsigned long); // vtable+0xec
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual void SetCharacterCountLimit(unsigned long); // vtable+0xf0
	virtual void GetEditText(char *, unsigned long); // vtable+0xf4
	virtual void GetEditText(/*packed*/ class basic_string<char>&); // vtable+0xf8
protected:
	virtual int32_t DoesWindowNeedUpdating() /* override */;
	virtual int32_t ProcessBackspace(); // vtable+0xfc
	virtual int32_t ProcessReturn(); // vtable+0x100
	/*+0xa4*/  /*unpacked*/ class CBackBuffer *mySecondImage;
	/*+0xa8*/  /*packed*/ class MTimer myCaretTimer; // 0x10 bytes
	/*+0xb8*/  unsigned long lCaretTimerPeriod;
	/*+0xbc*/  int32_t bCaretTimerExpired;
	/*+0xc0*/  unsigned long lCharacterCountLimit;
};

// Type: unsigned char *;

// Type: /*packed*/ class MessageBoxWindowEdit (forward reference);
// VTABLE: COPTER_D 0x005901f8
class MessageBoxWindowEdit : public MessageBoxWindow
{ // packed(0xa8 bytes) TI: 0x442a
public:
	void MessageBoxWindowEdit(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, const /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	void MessageBoxWindowEdit(/*packed*/ class MPoint&, unsigned long, unsigned long, const /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual void GetEditText(char *, unsigned long); // vtable+0xd4
	virtual void GetEditText(/*packed*/ class basic_string<char>&); // vtable+0xd8
protected:
	/*+0xa4*/  /*packed*/ class BoneheadTextEditWindow *myTextEditWindow;
};

// Type: /*packed*/ class ScrollingCreditWindow (forward reference);
// VTABLE: COPTER_D 0x005902d8
class ScrollingCreditWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x4445
public:
	void ScrollingCreditWindow(int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual void ~ScrollingCreditWindow() /* override */;
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	void RestartCreditDisplay();
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	int32_t ReadPalette(/*packed*/ struct SparkalColor*);
protected:
	virtual int32_t DoesWindowNeedUpdating() /* override */;
	int32_t LoadCreditStringArray();
	int32_t Scroll();
	/*+0x74*/  /*packed*/ class vector<basic_string<char>> myCreditStringArray; // 0xc bytes
	/*+0x80*/  long lFirstStringToDraw;
	/*+0x84*/  long lTopOfVisibleTextArea;
	/*+0x88*/  /*packed*/ class MRect rectVisibleTextArea; // 0x10 bytes
	/*+0x98*/  /*packed*/ class MFont fontCreditText; // 0x1c bytes
	/*+0xb4*/  /*packed*/ class MTimer myScrollTimer; // 0x10 bytes
	/*+0xc4*/  unsigned long lScrollTimerPeriod;
	/*+0xc8*/  int32_t bScrollTimerExpired;
};

// Type: /*packed*/ class CheckupWindow (forward reference);
// VTABLE: COPTER_D 0x005903a0
class CheckupWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x486b
public:
	void CheckupWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	void SetCurrentSettings(long *);
	void GetCurrentSettings(long *);
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	void SetTextControlsBasedOnCurrentSliderValues();
	void SetAllControlValuesToDefaults();
	// calltype: NearC
	static int32_t ShouldWeDisplayCheckupWindow();
	int32_t CanUserAffordCurrentSliderValues();
protected:
	/*+0x74*/  /*packed*/ class SliderWindow *mySliderWindows[3]; // 0xc bytes
	/*+0x80*/  /*packed*/ class TextWindow *myTextWindows[5]; // 0x14 bytes
};

// Type: long *;

// Type: uint32_t;

// Type: /*packed*/ struct SparkalRect;
struct SparkalRect{ // packed(0x10 bytes) TI: 0x155f
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
	void SparkalRect(long, long, long, long);
	void SparkalRect();
};

// Type: /*packed*/ struct SparkalPoint;
struct SparkalPoint{ // packed(0x8 bytes) TI: 0x1a54
	/*+0x0*/   long x;
	/*+0x4*/   long y;
	void SparkalPoint(long, long);
	void SparkalPoint();
};

// Type: /*packed*/ class MessageBoxWindow;
// VTABLE: COPTER_D 0x0058fa80
class MessageBoxWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x2a45
public:
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, /*packed*/ class basic_string<char>&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	void MessageBoxWindow(/*packed*/ class MPoint&, unsigned long, unsigned long, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t, int32_t, char *, char *, char *);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xc4
	virtual void SetButtonTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xc8
protected:
	virtual int32_t ConvertTypeToStringID(long); // vtable+0xcc
	virtual void DrawTextOntoBox(); // vtable+0xd0
	/*+0x74*/  long lMessageID;
	/*+0x78*/  /*packed*/ class basic_string<char> sMessage; // 0x8 bytes
	/*+0x80*/  /*packed*/ class basic_string<char> sButtonImageFileName; // 0x8 bytes
	/*+0x88*/  /*packed*/ class basic_string<char> sAnimationImageFileName; // 0x8 bytes
	/*+0x90*/  long lType;
	/*+0x94*/  int32_t bSelfDeleting;
	/*+0x98*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x9c*/  /*packed*/ struct SparkalColor colorButtonFont;
	/*+0xa0*/  /*packed*/ struct SparkalColor colorButtonFontHighlighted;
};

// Type: /*packed*/ class PopupMenuWindow;
// VTABLE: COPTER_D 0x00592220
class PopupMenuWindow : public ListBoxWindow
{ // packed(0xcc bytes) TI: 0x215d
public:
	void PopupMenuWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	virtual int32_t Initialize() /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
protected:
	virtual void ResizeWindowToFitMenuItems(); // vtable+0x158
	virtual int32_t RemoveStringAtIndex(long) /* override */;
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&) /* override */;
};

// Type: /*packed*/ class TextWindow;
// VTABLE: COPTER_D 0x00591a90
class TextWindow : public GraphicWindow
{ // packed(0xa4 bytes) TI: 0x4411
public:
	void TextWindow(/*packed*/ class MRect&, int32_t, const /*packed*/ class basic_string<char>&, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow(/*packed*/ class MRect&, int32_t, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void TextWindow();
	virtual int32_t DrawSelf() /* override */;
	virtual void SetWindowTitle(const /*packed*/ class basic_string<char>&); // vtable+0xc4
	virtual void SetWindowTitle(int32_t); // vtable+0xc8
	virtual void SetFontCharacteristics(long, long, long); // vtable+0xcc
	virtual void SetTextDrawStyle(unsigned long); // vtable+0xd0
	virtual void SetTextColor(const /*packed*/ struct SparkalColor&); // vtable+0xd4
	virtual void SetBackgroundDrawing(int32_t); // vtable+0xd8
	virtual void LoadStrings(); // vtable+0xdc
	virtual void FitWindowToText(); // vtable+0xe0
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xe4
protected:
	/*+0x74*/  int32_t bDrawOpaqueBackground;
	/*+0x78*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x7c*/  int32_t nBackgroundPaletteIndex;
	/*+0x80*/  int32_t nWindowTitleTextID;
	/*+0x84*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa0*/  unsigned long nTextDrawStyle;
};

// Type: /*packed*/ class ButtonWindow;
// VTABLE: COPTER_D 0x00591b78
class ButtonWindow : public GraphicWindow
{ // packed(0x94 bytes) TI: 0x1a48
	enum ButtonState {
		nButtonStateDisabled = 0,
		nButtonStateOff = 1,
		nButtonStateOn = 2,
	};
public:
	void ButtonWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, char *, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ButtonWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t GetImageCount(); // vtable+0xc4
	virtual void SetState(int32_t); // vtable+0xc8
	virtual int32_t GetState(); // vtable+0xcc
	virtual void Enable(); // vtable+0xd0
	virtual void Disable(); // vtable+0xd4
	virtual int32_t ComposeSelf() /* override */;
	virtual int32_t CreateImage(int32_t) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual long DoCursorUp(long, long, unsigned long) /* override */;
	virtual long DoCursorMove(long, long) /* override */;
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0xd8
	virtual int32_t CanWeRespondToMessage() /* override */;
protected:
	/*+0x74*/  int32_t nButtonState;
	/*+0x78*/  int32_t bEnabled;
	/*+0x7c*/  int32_t nButtonTextHeight;
	/*+0x80*/  /*packed*/ class MSize sizeTextOffset; // 0x8 bytes
	/*+0x88*/  int32_t bBusySettingState;
	/*+0x8c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x90*/  /*packed*/ struct SparkalColor colorFontHighlighted;
};

// Type: /*packed*/ struct bidirectional_iterator<basic_string<char>,int>;
struct bidirectional_iterator<basic_string<char>,int>{ // packed(0x1 bytes) TI: 0x1847
};

// Type: /*packed*/ class ListBoxWindow;
// VTABLE: COPTER_D 0x005920c8
class ListBoxWindow : public GraphicWindow
{ // packed(0xcc bytes) TI: 0x17a0
public:
	void ListBoxWindow(/*packed*/ class MRect&, int32_t, /*unpacked*/ class GraphicWindow*, /*packed*/ class GraphicWindowOwner*, int32_t);
	void ListBoxWindow();
	virtual int32_t Initialize() /* override */;
	virtual int32_t DrawSelf() /* override */;
	virtual int32_t RemoveString(long); // vtable+0xc4
	virtual int32_t RemoveString(/*packed*/ class basic_string<char>&); // vtable+0xc8
	virtual void RemoveAllStrings(); // vtable+0xcc
	virtual int32_t InsertString(long, long); // vtable+0xd0
	virtual int32_t InsertString(/*packed*/ class basic_string<char>&, long); // vtable+0xd4
	virtual int32_t ResizeWindowForExactLineHeights(); // vtable+0xd8
	virtual int32_t SetSelection(long); // vtable+0xdc
	virtual long GetSelection(); // vtable+0xe0
	virtual void SetShouldSort(); // vtable+0xe4
	virtual void Sort(); // vtable+0xe8
	virtual int32_t MoveLineUp(); // vtable+0xec
	virtual int32_t MoveLineDown(); // vtable+0xf0
	virtual int32_t ScrollToStart(); // vtable+0xf4
	virtual int32_t ScrollToEnd(); // vtable+0xf8
	virtual int32_t ScrollPageUp(); // vtable+0xfc
	virtual int32_t ScrollPageDown(); // vtable+0x100
	virtual int32_t IsIndexInView(long); // vtable+0x104
	virtual void PutIndexInView(long); // vtable+0x108
	virtual int32_t ScrollToFirstLetter(char); // vtable+0x10c
	virtual void SetIndexOfTopLine(long); // vtable+0x110
	virtual long GetLineCount(); // vtable+0x114
	virtual long GetIndexOfTopLine(); // vtable+0x118
	virtual long DoCharacter(long) /* override */;
	virtual long DoKeyDown(long, char) /* override */;
	virtual long DoCursorDown(long, long, unsigned long) /* override */;
	virtual int32_t DoMessage(/*unpacked*/ class GraphicWindow*, long, long, void * __ptr32) /* override */;
	virtual void SetBackgroundDrawing(int32_t); // vtable+0x11c
	virtual void SetBackgroundPaletteIndex(int32_t, int32_t); // vtable+0x120
	virtual void SetTextColor(const /*packed*/ struct SparkalColor*, const /*packed*/ struct SparkalColor*); // vtable+0x124
	virtual void SetFontCharacteristics(long, long, long); // vtable+0x128
	virtual int32_t AddScrollBar(int32_t, int32_t, char *); // vtable+0x12c
	virtual void RemoveScrollBar(int32_t, int32_t); // vtable+0x130
protected:
	virtual void CalculateAllMetrics(); // vtable+0x134
	virtual int32_t GetStringAddressFromIndex(long, /*packed*/ class basic_string<char>*&); // vtable+0x138
	virtual int32_t GetStringFromIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x13c
	virtual int32_t GetIndexFromString(long&, /*packed*/ class basic_string<char>&); // vtable+0x140
	virtual int32_t RemoveStringAtIndex(long); // vtable+0x144
	virtual int32_t InsertStringAtIndex(long, /*packed*/ class basic_string<char>&); // vtable+0x148
	virtual int32_t ModifyString(long, /*packed*/ class basic_string<char>&); // vtable+0x14c
	virtual void SetScrollBarValue(); // vtable+0x150
	virtual void SetScrollBarSizes(); // vtable+0x154
	/*+0x74*/  /*packed*/ class list<basic_string<char>> myStringList; // 0x8 bytes
	/*+0x7c*/  /*packed*/ struct SparkalColor colorFont;
	/*+0x80*/  /*packed*/ struct SparkalColor colorFontHighlighted;
	/*+0x84*/  int32_t nBackgroundIndex;
	/*+0x88*/  int32_t nBackgroundIndexHighlighted;
	/*+0x8c*/  /*packed*/ class MFont fontText; // 0x1c bytes
	/*+0xa8*/  unsigned long nTextDrawStyle;
	/*+0xac*/  long lCurrentSelection;
	/*+0xb0*/  long lVisibleLines;
	/*+0xb4*/  long lFirstVisibleLine;
	/*+0xb8*/  long lLineHeight;
	/*+0xbc*/  int32_t bAlwaysSort;
	/*+0xc0*/  /*packed*/ class ScrollBarWindow *myVerticalScrollBarWindow;
	/*+0xc4*/  /*packed*/ class ScrollBarWindow *myHorizontalScrollBarWindow;
	/*+0xc8*/  int32_t bBusySettingSelection;
};



// Contribution: 1:0004f050-0005f979 Module: 45, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00450050
static void $E66() {

	$E65();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x00450065
static void $E65() {

	colorTextGamePaletteNormal.Blue = 0xa;
	colorTextGamePaletteNormal.Green = 0x85;
	colorTextGamePaletteNormal.Red = 0xda;
	__asm        jmp    _T20;
_T20:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0045008f
static void $E69() {

	$E68();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004500a4
static void $E68() {

	colorTextGamePaletteHighlighted.Blue = 0x6f;
	colorTextGamePaletteHighlighted.Green = 0xda;
	colorTextGamePaletteHighlighted.Red = 0xff;
	__asm        jmp    _T20;
_T20:
	return;
}

// FUNCTION: COPTER_D 0x004500ce
void MessageBoxWindow::MessageBoxWindow(/*packed*/ class MPoint& ptNewPosition, unsigned long lNewType, unsigned long lNewMessageID, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {

	__asm        cmp    szImageFileName, 0;
	__asm        je     _T21;

	__asm        mov    eax, szImageFileName;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T29;
_T21:
	__asm        mov    eax, SZ_MESSAGE_BOX_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x14], eax;
_T29:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T50;
_T50:
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, lNewMessageID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _Tef;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Te1;
_Te1:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _Tf9;
_Tef:
	this->sMessage.reference = 0x0;
_Tf9:
	this->sMessage.c_str_ptr = 0x0;
	__asm        jmp    _T108;
_T108:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T15e;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T14d;
_T14d:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T16b;
_T15e:
	this->sButtonImageFileName.reference = 0x0;
_T16b:
	this->sButtonImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T17d;
_T17d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T1d3;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x48];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1c2;
_T1c2:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T1e0;
_T1d3:
	this->sAnimationImageFileName.reference = 0x0;
_T1e0:
	this->sAnimationImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T1f2;
_T1f2:
	this->lType = lNewType;
	this->bSelfDeleting = bNewSelfDeleting;
	__asm        jmp    _T20f;
_T20f:
	__asm        jmp    _T214;
_T214:
	__asm        jmp    _T219;
_T219:
	this-><MessageBoxWindow+0x00> = 0x58fa80;
// LINE 48:
	__asm        cmp    szButtonImageFileName, 0;
	__asm        je     _T35c;
// LINE 49:
	__asm        jmp    _T231;
_T231:
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    _T27c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T26d;
_T26d:
	exit(0x1);
	__asm        jmp    _T27c;
_T27c:
	__asm        jmp    _T281;
_T281:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2b8;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T30d;

	__asm        jmp    _T2a3;
_T2a3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T30d;
_T2b8:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T2e7;

	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T2ee;
_T2e7:
	__asm        mov    dword ptr [ebp-0x18], 0;
_T2ee:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T343;
_T30d:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T343;

	__asm        jmp    _T31c;
_T31c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T343;
_T343:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T357;
_T357:
	__asm        jmp    _T35c;
// LINE 50:
_T35c:
	__asm        cmp    szAnimationImageFileName, 0;
	__asm        je     _T496;
// LINE 51:
	__asm        jmp    _T36b;
_T36b:
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    _T3b6;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3a7;
_T3a7:
	exit(0x1);
	__asm        jmp    _T3b6;
_T3b6:
	__asm        jmp    _T3bb;
_T3bb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3f2;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T447;

	__asm        jmp    _T3dd;
_T3dd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T447;
_T3f2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T421;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T428;
_T421:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T428:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T47d;
_T447:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T47d;

	__asm        jmp    _T456;
_T456:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T47d;
_T47d:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T491;
_T491:
	__asm        jmp    _T496;
// LINE 52:
_T496:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00450573
void MessageBoxWindow::MessageBoxWindow(/*packed*/ class MPoint& ptNewPosition, unsigned long lNewType, /*packed*/ class basic_string<char>& sNewMessage, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {

	__asm        cmp    szImageFileName, 0;
	__asm        je     _T21;

	__asm        mov    eax, szImageFileName;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T29;
_T21:
	__asm        mov    eax, SZ_MESSAGE_BOX_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x14], eax;
_T29:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T50;
_T50:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T6d;
_T6d:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jae    _Te4;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Td5;
_Td5:
	exit(0x1);
	__asm        jmp    _Te4;
_Te4:
	__asm        jmp    _Te9;
_Te9:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jae    _T10f;

	__asm        jmp    _Tfe;
_Tfe:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T116;
_T10f:
	__asm        mov    dword ptr [ebp-0x58], 0xFFFFFFFF;
_T116:
	__asm        jmp    _T11b;
_T11b:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T15c;

	__asm        jmp    _T132;
_T132:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _T15c;

	this->sMessage.reference = sNewMessage.reference;
	this->sMessage.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T23e;
_T15c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T234;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T20e;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1ae;
_T1ae:
	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1d3;

	__asm        mov    eax, sNewMessage;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T1df;

	__asm        jmp    _T1df;
_T1d3:
	__asm        mov    dword ptr [ebp-0x64], 0;
	__asm        jmp    _T1df;
_T1df:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T209;
_T209:
	__asm        jmp    _T217;
_T20e:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax], 0;
_T217:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T226;
_T226:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T23e;
_T234:
	this->sMessage.reference = 0x0;
_T23e:
	this->sMessage.c_str_ptr = 0x0;
	__asm        jmp    _T24d;
_T24d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2a3;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T292;
_T292:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T2b0;
_T2a3:
	this->sButtonImageFileName.reference = 0x0;
_T2b0:
	this->sButtonImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T2c2;
_T2c2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T318;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T307;
_T307:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T325;
_T318:
	this->sAnimationImageFileName.reference = 0x0;
_T325:
	this->sAnimationImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _T337;
_T337:
	this->lType = lNewType;
	this->bSelfDeleting = bNewSelfDeleting;
	__asm        jmp    _T354;
_T354:
	__asm        jmp    _T359;
_T359:
	__asm        jmp    _T35e;
_T35e:
	this-><MessageBoxWindow+0x00> = 0x58fa80;
// LINE 71:
	__asm        cmp    szButtonImageFileName, 0;
	__asm        je     _T4a1;
// LINE 72:
	__asm        jmp    _T376;
_T376:
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0xFFFFFFFF;
	__asm        jne    _T3c1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T3b2;
_T3b2:
	exit(0x1);
	__asm        jmp    _T3c1;
_T3c1:
	__asm        jmp    _T3c6;
_T3c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3fd;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T452;

	__asm        jmp    _T3e8;
_T3e8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T452;
_T3fd:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T42c;

	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T433;
_T42c:
	__asm        mov    dword ptr [ebp-0x18], 0;
_T433:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x80;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T488;
_T452:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T488;

	__asm        jmp    _T461;
_T461:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T488;
_T488:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T49c;
_T49c:
	__asm        jmp    _T4a1;
// LINE 73:
_T4a1:
	__asm        cmp    szAnimationImageFileName, 0;
	__asm        je     _T5db;
// LINE 74:
	__asm        jmp    _T4b0;
_T4b0:
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    _T4fb;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4ec;
_T4ec:
	exit(0x1);
	__asm        jmp    _T4fb;
_T4fb:
	__asm        jmp    _T500;
_T500:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T537;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T58c;

	__asm        jmp    _T522;
_T522:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T58c;
_T537:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T566;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T56d;
_T566:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T56d:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T5c2;
_T58c:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T5c2;

	__asm        jmp    _T59b;
_T59b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5c2;
_T5c2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5d6;
_T5d6:
	__asm        jmp    _T5db;
// LINE 75:
_T5db:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00450b5d
int32_t MessageBoxWindow::Initialize() {
	/*bp-0x8*/   int32_t nButtonStringID[2]; // 0x8 bytes
	/*bp-0xc*/   int32_t nFullStringID;
	/*bp-0x14*/  /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x34*/  /*packed*/ class MRect rectButtons[2]; // 0x20 bytes
	/*bp-0x38*/  int32_t nButtonCount;
	/*bp-0x3c*/  unsigned long i;
	/*bp-0x40*/  /*packed*/ class ButtonWindow *tempButtonWindow;
	/*bp-0x48*/  int32_t nButtonID[2]; // 0x8 bytes


	__asm        mov    dword ptr [ebp-0x78], 2;
	__asm        lea    eax, rectButtons[0].left;
	__asm        mov    [ebp-0x7C], eax;
// LINE 87:
__WHILE_23:
	__asm        dec    dword ptr [ebp-0x78];
	__asm        js     _T3d;

	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   MRect::MRect;
	__asm        add    dword ptr [ebp-0x7C], 0x10;
	__asm        jmp    __WHILE_23;
_T3d:
	__asm        jmp    _T42;
// LINE 89:
_T42:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T92;

	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T87;
_T87:
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T99;
_T92:
	sText.reference = 0x0;
_T99:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _Ta5;
// LINE 92:
_Ta5:
	this->GraphicWindow::Initialize();
// LINE 94:
	nButtonCount = 0x0;
// LINE 95:
_FOR_c3:
	i = 0x1;
	__asm        jmp    _FOR_COND_c3;
_FOR_NEXT_c3:
	__asm        shl    i, 1;
_FOR_COND_c3:
	__asm        cmp    i, 0x80000000;
	__asm        jae    _T129;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        test   i, eax;
	__asm        je     _T124;
// LINE 97:
	__asm        mov    eax, i;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
	__asm        mov    ecx, nButtonCount;
	__asm        mov    [ebp+ecx*4-8], eax;
// LINE 98:
	__asm        mov    eax, i;
	__asm        mov    ecx, nButtonCount;
	__asm        mov    [ebp+ecx*4-0x48], eax;
// LINE 99:
	nButtonCount++;
// LINE 100:
	__asm        cmp    nButtonCount, 2;
	__asm        jne    _T124;
// LINE 101:
	__asm        jmp    _T129;
// LINE 103:
_T124:
	__asm        jmp    _FOR_NEXT_c3;
// LINE 105:
_T129:
	__asm        cmp    nButtonCount, 0;
	__asm        jne    _T16a;
// LINE 106:
	this->lType = 0x1;
// LINE 107:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xCC];
	__asm        mov    nButtonStringID[0], eax;
// LINE 108:
	nButtonID[0] = 0x1;
// LINE 109:
	nButtonCount = 0x1;
// LINE 112:
_T16a:
	__asm        cmp    nButtonCount, 1;
	__asm        jne    _T19a;
// LINE 113:
	rectButtons[0].left = 0xf4;
	rectButtons[0].top = 0x100;
	rectButtons[0].right = 0xf5;
	rectButtons[0].bottom = 0x101;
	__asm        jmp    _T195;
// LINE 114:
_T195:
	__asm        jmp    _T1dc;
// LINE 115:
_T19a:
	rectButtons[0].left = 0xc2;
	rectButtons[0].top = 0x100;
	rectButtons[0].right = 0xc3;
	rectButtons[0].bottom = 0x101;
	__asm        jmp    _T1bb;
// LINE 116:
_T1bb:
	rectButtons[1].left = 0x126;
	rectButtons[1].top = 0x100;
	rectButtons[1].right = 0x127;
	rectButtons[1].bottom = 0x101;
	__asm        jmp    _T1dc;
// LINE 121:
_T1dc:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3d0;

	__asm        jmp    _T1fb;
_T1fb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T39d;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _T251;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20B0], eax;
	__asm        mov    eax, [ebp-0x20B0];
	__asm        mov    [ebp-0x20B8], eax;
	__asm        mov    eax, [ebp-0x20B8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T251:
	__asm        jmp    _T256;
_T256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T280;
_T280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T32c;

	__asm        jmp    _T29b;
_T29b:
	__asm        jmp    _T2a0;
_T2a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2d4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20C4], eax;
	__asm        jmp    _T2e3;

	__asm        jmp    _T2e3;
_T2d4:
	__asm        mov    dword ptr [ebp-0x20C4], 0;
	__asm        jmp    _T2e3;
_T2e3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20C8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20CC], eax;
	__asm        mov    eax, [ebp-0x20C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20C4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20CC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T32c;
_T32c:
	__asm        jmp    _T331;
_T331:
	__asm        mov    byte ptr [ebp-0x20B4], 0;
	__asm        jmp    _T33d;
_T33d:
	__asm        lea    eax, [ebp-0x20B4];
	__asm        mov    [ebp-0x20BC], eax;
	__asm        jmp    _T34e;
_T34e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x80];
	__asm        mov    [ebp-0x20C0], eax;
	__asm        mov    eax, [ebp-0x20BC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x20C0];
	__asm        mov    [ecx], al;
	__asm        jmp    _T384;
_T384:
	__asm        jmp    _T389;
_T389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x70], eax;
	__asm        jmp    _T3a4;
_T39d:
	__asm        mov    dword ptr [ebp-0x70], 0;
_T3a4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, nButtonID[0];
	__asm        push   eax;
	__asm        lea    eax, rectButtons[0].left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T3d7;
_T3d0:
	tempButtonWindow = 0x0;
// LINE 122:
_T3d7:
	nFullStringID = LanguageManager::GetFullStringID(0x0, nButtonStringID[0]);
// LINE 123:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        jne    _T495;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1094], eax;
	__asm        jmp    _T447;
_T447:
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T46b;
_T46b:
	__asm        jmp    _T470;
_T470:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T490;
_T490:
	__asm        jmp    _T5e5;
_T495:
	__asm        jmp    _T49a;
_T49a:
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10A8], eax;
	__asm        cmp    dword ptr [ebp-0x10A8], 0xFFFFFFFF;
	__asm        jne    _T4f4;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10A4], eax;
	__asm        mov    eax, [ebp-0x10A4];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4e5;
_T4e5:
	exit(0x1);
	__asm        jmp    _T4f4;
_T4f4:
	__asm        jmp    _T4f9;
_T4f9:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T52a;

	__asm        cmp    dword ptr [ebp-0x10A8], 0;
	__asm        je     _T58b;

	__asm        jmp    _T518;
_T518:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x10A8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T58b;
_T52a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x109C], eax;
	__asm        cmp    dword ptr [ebp-0x109C], 0;
	__asm        je     _T56b;

	__asm        mov    eax, [ebp-0x10A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x109C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1098], eax;
	__asm        jmp    _T575;
_T56b:
	__asm        mov    dword ptr [ebp-0x1098], 0;
_T575:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1098];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T5ca;
_T58b:
	__asm        cmp    dword ptr [ebp-0x10A8], 0;
	__asm        je     _T5ca;

	__asm        jmp    _T59d;
_T59d:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10A0], eax;
	__asm        mov    eax, [ebp-0x10A8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1090];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10A0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5ca;
_T5ca:
	__asm        mov    eax, [ebp-0x10A8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5db;
_T5db:
	__asm        jmp    _T5e0;
_T5e0:
	__asm        jmp    _T5e5;
// LINE 124:
_T5e5:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 125:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 126:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 128:
	__asm        cmp    nButtonCount, 1;
	__asm        jle    _T956;
// LINE 130:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T823;

	__asm        jmp    _T64e;
_T64e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T7f0;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        je     _T6a4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20D0], eax;
	__asm        mov    eax, [ebp-0x20D0];
	__asm        mov    [ebp-0x20D8], eax;
	__asm        mov    eax, [ebp-0x20D8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T6a4:
	__asm        jmp    _T6a9;
_T6a9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T6d3;
_T6d3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T77f;

	__asm        jmp    _T6ee;
_T6ee:
	__asm        jmp    _T6f3;
_T6f3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T727;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20E4], eax;
	__asm        jmp    _T736;

	__asm        jmp    _T736;
_T727:
	__asm        mov    dword ptr [ebp-0x20E4], 0;
	__asm        jmp    _T736;
_T736:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20E8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x20EC], eax;
	__asm        mov    eax, [ebp-0x20E8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20EC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T77f;
_T77f:
	__asm        jmp    _T784;
_T784:
	__asm        mov    byte ptr [ebp-0x20D4], 0;
	__asm        jmp    _T790;
_T790:
	__asm        lea    eax, [ebp-0x20D4];
	__asm        mov    [ebp-0x20DC], eax;
	__asm        jmp    _T7a1;
_T7a1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x80];
	__asm        mov    [ebp-0x20E0], eax;
	__asm        mov    eax, [ebp-0x20DC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x20E0];
	__asm        mov    [ecx], al;
	__asm        jmp    _T7d7;
_T7d7:
	__asm        jmp    _T7dc;
_T7dc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T7f7;
_T7f0:
	__asm        mov    dword ptr [ebp-0x74], 0;
_T7f7:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, nButtonID[1];
	__asm        push   eax;
	__asm        lea    eax, rectButtons[1].left;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T82a;
_T823:
	tempButtonWindow = 0x0;
// LINE 131:
_T82a:
	nFullStringID = LanguageManager::GetFullStringID(0x0, nButtonStringID[1]);
// LINE 132:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20AC], eax;
	__asm        cmp    dword ptr [ebp-0x20AC], 0;
	__asm        jne    _T8e8;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x20AC], eax;
	__asm        jmp    _T89a;
_T89a:
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T8be;
_T8be:
	__asm        jmp    _T8c3;
_T8c3:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T8e3;
_T8e3:
	__asm        jmp    _T916;
_T8e8:
	__asm        jmp    _T8ed;
_T8ed:
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x20A8];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T911;
_T911:
	__asm        jmp    _T916;
// LINE 133:
_T916:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 134:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA0;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x9C;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 135:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 138:
_T956:
	__asm        jmp    _T95b;
_T95b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Ta22;
// LINE 141:
// Block start:
	/*bp-0x4c*/  /*packed*/ class AnimationWindow *tempAnimationWindow;
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T9f2;

	__asm        jmp    _T990;
_T990:
	__asm        mov    dword ptr [ebp-0x68], 0x34;
	__asm        mov    dword ptr [ebp-0x64], 0xD3;
	__asm        mov    dword ptr [ebp-0x60], 0xC9;
	__asm        mov    dword ptr [ebp-0x5C], 0x130;
	__asm        jmp    _T9b1;
_T9b1:
	__asm        push   2;
	__asm        push   0xFFFFFFFF;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0x95;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x88;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   AnimationWindow::AnimationWindow;
	__asm        mov    tempAnimationWindow, eax;
	__asm        jmp    _T9f9;
_T9f2:
	tempAnimationWindow = 0x0;
// LINE 142:
_T9f9:
	tempAnimationWindow->lMillisecondsBetweenFrames = 0x37;
	__asm        jmp    _Ta08;
// LINE 143:
_Ta08:
	tempAnimationWindow->nAnimationLoopType = 0x2;
	__asm        jmp    _Ta1a;
// LINE 144:
_Ta1a:
	tempAnimationWindow->AnimationWindow::Start();
// LINE 147:
// Block end:
_Ta22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xD0];
// LINE 149:
	GraphicWindow::MakeModal(this);
// LINE 150:
	GraphicWindow::MakeFocus(this);
// LINE 151:
	__asm        mov    dword ptr [ebp-0x6C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tab9;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x8C], eax;
	__asm        cmp    dword ptr [ebp-0x8C], 0;
	__asm        je     _Tab9;

	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _Taa0;
_Taa0:
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tab4;
_Tab4:
	__asm        jmp    _Tab9;
_Tab9:
	__asm        jmp    _Tabe;
_Tabe:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _Taec;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Taec:
	__asm        jmp    _Taf1;
_Taf1:
	__asm        mov    eax, [ebp-0x6C];
	__asm        jmp    __RETURN;
// LINE 152:
__RETURN:
}

// FUNCTION: COPTER_D 0x0045165b
long MessageBoxWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 166:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _Tae;
// LINE 167:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T93;
// LINE 168:
	__asm        mov    eax, this;
	__asm        test   dword ptr [eax+0x90], 0xFFFF0000;
	__asm        je     _T67;
// LINE 169:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        and    eax, 0xFFFF0000;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 170:
	__asm        jmp    _T93;
// LINE 171:
_T67:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 173:
_T93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _Tae;
// LINE 174:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 176:
_Tae:
	return 0x1;
// LINE 177:
}

// FUNCTION: COPTER_D 0x0045171a
int32_t MessageBoxWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 187:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T3f;
// LINE 191:
	__asm        mov    eax, pMessageData;
	__asm        push   eax;
	__asm        mov    eax, gwSource;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 193:
_T3f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T5a;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x6C];
// LINE 195:
_T5a:
	return 0x1;
// LINE 196:
}

// FUNCTION: COPTER_D 0x00451785
int32_t MessageBoxWindow::ConvertTypeToStringID(long lType) {
// LINE 208:
	__asm        test   reinterpret_cast<uint8_t>(lType), 1;
	__asm        je     _T20;
// LINE 209:
	return 0x14;
// LINE 210:
_T20:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 1;
	__asm        je     _T34;
// LINE 211:
	return 0x15;
// LINE 212:
_T34:
	__asm        test   reinterpret_cast<uint8_t>(lType), 2;
	__asm        je     _T48;
// LINE 213:
	return 0x16;
// LINE 214:
_T48:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 2;
	__asm        je     _T5c;
// LINE 215:
	return 0x17;
// LINE 216:
_T5c:
	__asm        test   reinterpret_cast<uint8_t>(lType), 4;
	__asm        je     _T70;
// LINE 217:
	return 0x18;
// LINE 218:
_T70:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&lType) + 2), 4;
	__asm        je     _T84;
// LINE 219:
	return 0x19;
// LINE 220:
_T84:
	return 0x0;
// LINE 221:
}

// FUNCTION: COPTER_D 0x00451817
void MessageBoxWindow::DrawTextOntoBox() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0x44*/  char szTypeface[64]; // 0x40 bytes
	/*bp-0x48*/  /*packed*/ class MFont *fontText;
	/*bp-0x58*/  /*packed*/ class MRect rectText; // 0x10 bytes

// LINE 236:
	__asm        jmp    _T1b;
_T1b:
	rectText.left = 0x62;
	rectText.top = 0x4e;
	rectText.right = 0x170;
	rectText.bottom = 0xc8;
	__asm        jmp    _T3c;
// LINE 238:
_T3c:
	__asm        jmp    _T41;
_T41:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T478;
// LINE 239:
	nFullStringID = LanguageManager::GetFullStringID(0x0, this->lMessageID);
// LINE 240:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        cmp    dword ptr [ebp-0x1064], 0;
	__asm        jne    _T2b4;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1064], eax;
	__asm        jmp    _Tca;
_Tca:
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1078], eax;
	__asm        jmp    _T111;
_T111:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1078];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T166;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1074], eax;
	__asm        mov    eax, [ebp-0x1074];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T157;
_T157:
	exit(0x1);
	__asm        jmp    _T166;
_T166:
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1ac;

	__asm        jmp    _T183;
_T183:
	__asm        jmp    _T188;
_T188:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1078];
	__asm        jae    _T23f;
_T1ac:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x106C], eax;
	__asm        cmp    dword ptr [ebp-0x106C], 0;
	__asm        je     _T218;

	__asm        jmp    _T1ce;
_T1ce:
	__asm        jmp    _T1d3;
_T1d3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1078];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x106C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1068], eax;
	__asm        jmp    _T222;
_T218:
	__asm        mov    dword ptr [ebp-0x1068], 0;
_T222:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x78;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1068];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
_T23f:
	__asm        cmp    dword ptr [ebp-0x1078], 0;
	__asm        je     _T293;

	__asm        jmp    _T251;
_T251:
	__asm        jmp    _T256;
_T256:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1070], eax;
	__asm        mov    eax, [ebp-0x1078];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1070];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T293;
_T293:
	__asm        mov    eax, [ebp-0x1078];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T2aa;
_T2aa:
	__asm        jmp    _T2af;
_T2af:
	__asm        jmp    _T478;
_T2b4:
	__asm        jmp    _T2b9;
_T2b9:
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1094], eax;
	__asm        cmp    dword ptr [ebp-0x1094], 0xFFFFFFFF;
	__asm        jne    _T313;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1088], eax;
	__asm        mov    eax, [ebp-0x1088];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T304;
_T304:
	exit(0x1);
	__asm        jmp    _T313;
_T313:
	__asm        jmp    _T318;
_T318:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T355;

	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     _T412;

	__asm        jmp    _T33d;
_T33d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x1094];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T412;
_T355:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1080], eax;
	__asm        cmp    dword ptr [ebp-0x1080], 0;
	__asm        je     _T396;

	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1080];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x107C], eax;
	__asm        jmp    _T3a0;
_T396:
	__asm        mov    dword ptr [ebp-0x107C], 0;
_T3a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3f9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    [ebp-0x1090], eax;
	__asm        mov    eax, [ebp-0x1090];
	__asm        mov    [ebp-0x108C], eax;
	__asm        cmp    dword ptr [ebp-0x108C], 0;
	__asm        je     _T3f9;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x108C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T3f9;
_T3f9:
	__asm        jmp    _T3fe;
_T3fe:
	__asm        mov    eax, [ebp-0x107C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T457;
_T412:
	__asm        cmp    dword ptr [ebp-0x1094], 0;
	__asm        je     _T457;

	__asm        jmp    _T424;
_T424:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1084], eax;
	__asm        mov    eax, [ebp-0x1094];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1060];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1084];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T457;
_T457:
	__asm        mov    eax, [ebp-0x1094];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T46e;
_T46e:
	__asm        jmp    _T473;
_T473:
	__asm        jmp    _T478;
// LINE 242:
_T478:
	LanguageManager::GetTypefaceForLanguage(szTypeface[0], 0x0, 0x0);
// LINE 243:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T4bb;

	__asm        push   1;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        lea    eax, szTypeface[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   MFont::MFont;
	__asm        mov    fontText, eax;
	__asm        jmp    _T4c2;
_T4bb:
	fontText = 0x0;
// LINE 244:
_T4c2:
	__asm        mov    eax, fontText;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x40];
	__asm        call   CBackBuffer::SetFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x60], eax;
// LINE 245:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T4f7;
// LINE 247:
_T4f7:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T531;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x1098], eax;
	__asm        mov    eax, [ebp-0x1098];
	__asm        mov    [ebp-0x10A0], eax;
	__asm        mov    eax, [ebp-0x10A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T531:
	__asm        jmp    _T536;
_T536:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T55a;
_T55a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5f7;

	__asm        jmp    _T572;
_T572:
	__asm        jmp    _T577;
_T577:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5a5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10AC], eax;
	__asm        jmp    _T5b4;

	__asm        jmp    _T5b4;
_T5a5:
	__asm        mov    dword ptr [ebp-0x10AC], 0;
	__asm        jmp    _T5b4;
_T5b4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10B0], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x10B4], eax;
	__asm        mov    eax, [ebp-0x10B0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10AC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10B4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5f7;
_T5f7:
	__asm        jmp    _T5fc;
_T5fc:
	__asm        mov    byte ptr [ebp-0x109C], 0;
	__asm        jmp    _T608;
_T608:
	__asm        lea    eax, [ebp-0x109C];
	__asm        mov    [ebp-0x10A4], eax;
	__asm        jmp    _T619;
_T619:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        mov    [ebp-0x10A8], eax;
	__asm        mov    eax, [ebp-0x10A4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x10A8];
	__asm        mov    [ecx], al;
	__asm        jmp    _T649;
_T649:
	__asm        jmp    _T64e;
_T64e:
	__asm        push   0;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x4C];
// LINE 248:
	return;
}

// FUNCTION: COPTER_D 0x00451ea4
void MessageBoxWindow::SetTextColor(const /*packed*/ struct SparkalColor& colorNewFont) {
// LINE 255:
	reinterpret_cast<uint32_t>(this->colorFont.Blue) = reinterpret_cast<uint32_t>(colorNewFont.Blue);
// LINE 256:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 257:
	return;
}

// FUNCTION: COPTER_D 0x00451ed9
void MessageBoxWindow::SetButtonTextColor(const /*packed*/ struct SparkalColor *colorNewFont, const /*packed*/ struct SparkalColor *colorNewFontHighlighted) {
// LINE 264:
	__asm        cmp    colorNewFont, 0;
	__asm        je     _T24;
// LINE 265:
	reinterpret_cast<uint32_t>(this->colorButtonFont.Blue) = reinterpret_cast<uint32_t>(colorNewFont->Blue);
// LINE 266:
_T24:
	__asm        cmp    colorNewFontHighlighted, 0;
	__asm        je     _T3c;
// LINE 267:
	reinterpret_cast<uint32_t>(this->colorButtonFontHighlighted.Blue) = reinterpret_cast<uint32_t>(colorNewFontHighlighted->Blue);
// LINE 268:
_T3c:
	return;
}

// FUNCTION: COPTER_D 0x00451f21
void AnimationWindow::AnimationWindow() {

	this->GraphicWindow::GraphicWindow();
	this-><AnimationWindow+0x00> = 0x58fb58;
// LINE 283:
	this->bRunning = 0x0;
// LINE 284:
	this->bManualFrameIncrementing = 0x0;
// LINE 285:
	this->lMillisecondsBetweenFrames = 0x53;
// LINE 286:
	this->lMillisecondsOfLastFrame = 0x0;
// LINE 287:
	this->lMillisecondsSinceLastFrame = 0x0;
// LINE 288:
	this->nAnimationLoopType = 0x1;
// LINE 289:
	this->nAnimationDirection = 0x1;
// LINE 290:
	this->lCurrentFrame = 0x0;
// LINE 291:
	this->bPreserveTiming = 0x0;
// LINE 292:
	this->lWidthOfSingleFrame = 0x1;
// LINE 293:
	this->lFrameCount = 0xffffffff;
// LINE 294:
	this->lTransparentIndex = 0xffffffff;
// LINE 295:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00451fde
void AnimationWindow::AnimationWindow(char * szImageFileName, /*packed*/ class MRect& rectNewWindow, long lNewWidthOfSingleFrame, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, long lNewTransparentIndex, enum AnimationWindow::AnimationLoopType nNewAnimationLoopType) {

	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, lNewWidthOfSingleFrame;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, lNewTransparentIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FB58;
// LINE 312:
	this->bRunning = 0x0;
// LINE 313:
	this->bManualFrameIncrementing = 0x0;
// LINE 314:
	this->lMillisecondsBetweenFrames = 0x53;
// LINE 315:
	this->lMillisecondsOfLastFrame = 0x0;
// LINE 316:
	this->lMillisecondsSinceLastFrame = 0x0;
// LINE 317:
	this->nAnimationLoopType = 0x1;
// LINE 318:
	this->nAnimationDirection = 0x1;
// LINE 319:
	this->lCurrentFrame = 0x0;
// LINE 320:
	this->bPreserveTiming = 0x0;
// LINE 321:
	this->lFrameCount = 0xffffffff;
// LINE 323:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0xFFFFFFFF;
	__asm        je     _Tf5;
// LINE 324:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 331:
_Tf5:
	this-><AnimationWindow+0x18> = (this-><AnimationWindow+0x10> + this->lWidthOfSingleFrame);
// LINE 332:
	this-><AnimationWindow+0x28> = (this-><AnimationWindow+0x20> + this->lWidthOfSingleFrame);
// LINE 333:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045210c
int32_t AnimationWindow::ComposeSelf() {
	/*bp-0x4*/   long lSourceRight;
	/*bp-0x8*/   long lMillisecondsCurrent;
	/*bp-0xc*/   long lSourceLeft;
	/*bp-0x10*/  long lFramesToShift;

// LINE 347:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x44], 0;
	__asm        je     _T26;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T2d;
// LINE 348:
_T26:
	return 0x0;
// LINE 350:
_T2d:
	lSourceLeft = (this->lCurrentFrame * this->lWidthOfSingleFrame);
// LINE 351:
	lSourceRight = (this->lWidthOfSingleFrame + lSourceLeft);
// LINE 353:
	__asm        jmp    _T57;
_T57:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceRight;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceLeft;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0xC];
// LINE 355:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        jne    _T13a;
// LINE 356:
	lMillisecondsCurrent = GetMillisecondTimeLong();
// LINE 358:
	this->lMillisecondsSinceLastFrame = (lMillisecondsCurrent - this->lMillisecondsOfLastFrame);
// LINE 359:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T13a;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        cmp    [eax+0x7C], ecx;
	__asm        jge    _T13a;
// LINE 360:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x94], 0;
	__asm        je     _T11c;
// LINE 364:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+0x84];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x7C];
	__asm        mov    lFramesToShift, eax;
// LINE 365:
__WHILE_100:
	while ((lFramesToShift != 0x0)) {
		// LINE 366:
			this->AnimationWindow::GotoNextFrame();
	}
// LINE 368:
_T117:
	__asm        jmp    _T124;
// LINE 369:
_T11c:
	this->AnimationWindow::GotoNextFrame();
// LINE 372:
_T124:
	this->lMillisecondsOfLastFrame = lMillisecondsCurrent;
// LINE 373:
	return 0x1;
// LINE 376:
_T13a:
	return 0x0;
// LINE 377:
}

// FUNCTION: COPTER_D 0x00452252
void AnimationWindow::GotoNextFrame() {
// LINE 385:
	this->lCurrentFrame += this->nAnimationDirection;
// LINE 389:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    _T46;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        cmp    [eax+0x9C], ecx;
	__asm        jle    _T66;
_T46:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 0xFFFFFFFF;
	__asm        jne    _T140;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jge    _T140;
// LINE 391:
_T66:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 2;
	__asm        jne    _Tcc;
// LINE 392:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    _T9d;

	this->nAnimationDirection = 0xffffffff;
	__asm        jmp    _T98;
_T98:
	__asm        jmp    _Taf;
_T9d:
	this->nAnimationDirection = 0x1;
	__asm        jmp    _Taf;
_Taf:
	__asm        jmp    _Tb4;
// LINE 393:
_Tb4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 1;
	__asm        jle    _Tcc;
// LINE 394:
	this->AnimationWindow::GotoNextFrame();
// LINE 396:
_Tcc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x88], 0;
	__asm        je     _T11b;
// LINE 397:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    _Tfe;

	this->lCurrentFrame = 0x0;
	__asm        jmp    _T111;
_Tfe:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
_T111:
	__asm        jmp    _T116;
// LINE 398:
_T116:
	__asm        jmp    _T140;
// LINE 399:
_T11b:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x8C];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x90], eax;
	__asm        jmp    _T136;
// LINE 400:
_T136:
	this->bRunning = 0x0;
// LINE 403:
_T140:
	return;
}

// FUNCTION: COPTER_D 0x0045239c
int32_t AnimationWindow::DoesWindowNeedUpdating() {
// LINE 413:
	__asm        mov    eax, this;
	__asm        mov    ebx, [eax+0x80];
	__asm        mov    eax, this;
	__asm        add    ebx, [eax+0x7C];
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        cmp    ebx, eax;
	__asm        jae    _T33;

	__asm        mov    eax, 1;
	__asm        jmp    _T35;
_T33:
	__asm        xor    eax, eax;
_T35:
	__asm        jmp    __RETURN;
// LINE 417:
__RETURN:
}

// FUNCTION: COPTER_D 0x004523db
void AnimationWindow::Start() {
// LINE 424:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xFFFFFFFF;
	__asm        jne    _T3d;
// LINE 425:
	__asm        jmp    _T21;
_T21:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 426:
_T3d:
	this->bRunning = 0x1;
// LINE 427:
	return;
}

// FUNCTION: COPTER_D 0x0045242c
void AnimationWindow::ResetFramePosition() {
// LINE 434:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0xFFFFFFFF;
	__asm        jne    _T3d;
// LINE 435:
	__asm        jmp    _T21;
_T21:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    ecx, this;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
// LINE 436:
_T3d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8C], 1;
	__asm        jne    _T5f;

	this->lCurrentFrame = 0x0;
	__asm        jmp    _T72;
_T5f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
_T72:
	__asm        jmp    _T77;
// LINE 437:
_T77:
	return;
}

// FUNCTION: COPTER_D 0x004524ad
void RenderSettingsWindow::RenderSettingsWindow(/*packed*/ class MRect& rectNewPosition, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_RENDER_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x88], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x8C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x94], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T12c;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        jmp    _T12c;
_T12c:
	__asm        jmp    _T131;
_T131:
	this->lSkyImagePanX = 0x0;
	this-><RenderSettingsWindow+0x00> = 0x58fc20;
// LINE 504:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00452603
void RenderSettingsWindow::~RenderSettingsWindow() {

	this-><RenderSettingsWindow+0x00> = 0x58fc20;
// LINE 512:
	this->RenderSettingsWindow::DestroyImage();
// LINE 513:
	__asm        jmp    _T22;
_T22:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x00452637
int32_t RenderSettingsWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class RadioButtonWindow *tempRadioButtonWindow;
	/*bp-0x14*/  /*packed*/ class TextWindow *tempTextWindow;
	/*bp-0x18*/  /*packed*/ class ButtonWindow *tempButtonWindow;

// LINE 525:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x19C], eax;
	__asm        cmp    dword ptr [ebp-0x19C], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x19C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T91;
// LINE 527:
_T91:
	this->GraphicWindow::Initialize();
// LINE 528:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T15c;
// LINE 529:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T11c;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        cmp    dword ptr [ebp-0x1A8], 0;
	__asm        je     _T11c;

	__asm        mov    ecx, [ebp-0x1A8];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T103;
_T103:
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T117;
_T117:
	__asm        jmp    _T11c;
_T11c:
	__asm        jmp    _T121;
_T121:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T14f;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x1A0], eax;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T14f:
	__asm        jmp    _T154;
_T154:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 533:
_T15c:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1c4;

	__asm        jmp    _T17b;
_T17b:
	__asm        mov    dword ptr [ebp-0x30], 0x8A;
	__asm        mov    dword ptr [ebp-0x2C], 0x46;
	__asm        mov    dword ptr [ebp-0x28], 0x114;
	__asm        mov    dword ptr [ebp-0x24], 0x5A;
	__asm        jmp    _T19c;
_T19c:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x47;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T1cb;
_T1c4:
	tempTextWindow = 0x0;
// LINE 534:
_T1cb:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 535:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 538:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T25a;

	__asm        jmp    _T211;
_T211:
	__asm        mov    dword ptr [ebp-0x44], 0x8A;
	__asm        mov    dword ptr [ebp-0x40], 0x70;
	__asm        mov    dword ptr [ebp-0x3C], 0x114;
	__asm        mov    dword ptr [ebp-0x38], 0x84;
	__asm        jmp    _T232;
_T232:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x48;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T261;
_T25a:
	tempTextWindow = 0x0;
// LINE 539:
_T261:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 540:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 543:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T2f0;

	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    dword ptr [ebp-0x58], 0x8A;
	__asm        mov    dword ptr [ebp-0x54], 0x9C;
	__asm        mov    dword ptr [ebp-0x50], 0x114;
	__asm        mov    dword ptr [ebp-0x4C], 0xB0;
	__asm        jmp    _T2c8;
_T2c8:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x49;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T2f7;
_T2f0:
	tempTextWindow = 0x0;
// LINE 544:
_T2f7:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 545:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 548:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x5C], eax;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T386;

	__asm        jmp    _T33d;
_T33d:
	__asm        mov    dword ptr [ebp-0x6C], 0x4A;
	__asm        mov    dword ptr [ebp-0x68], 0x125;
	__asm        mov    dword ptr [ebp-0x64], 0xFC;
	__asm        mov    dword ptr [ebp-0x60], 0x13C;
	__asm        jmp    _T35e;
_T35e:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4B;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T38d;
_T386:
	tempTextWindow = 0x0;
// LINE 549:
_T38d:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 550:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 551:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 554:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T42c;

	__asm        jmp    _T3e3;
_T3e3:
	__asm        mov    dword ptr [ebp-0x80], 0x4A;
	__asm        mov    dword ptr [ebp-0x7C], 0x142;
	__asm        mov    dword ptr [ebp-0x78], 0xFC;
	__asm        mov    dword ptr [ebp-0x74], 0x156;
	__asm        jmp    _T404;
_T404:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4C;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T433;
_T42c:
	tempTextWindow = 0x0;
// LINE 555:
_T433:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 556:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 557:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 560:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x84], eax;
	__asm        cmp    dword ptr [ebp-0x84], 0;
	__asm        je     _T4ea;

	__asm        jmp    _T48f;
_T48f:
	__asm        mov    dword ptr [ebp-0x94], 0x4A;
	__asm        mov    dword ptr [ebp-0x90], 0x160;
	__asm        mov    dword ptr [ebp-0x8C], 0xFC;
	__asm        mov    dword ptr [ebp-0x88], 0x174;
	__asm        jmp    _T4bc;
_T4bc:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4D;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x84];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T4f1;
_T4ea:
	tempTextWindow = 0x0;
// LINE 561:
_T4f1:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x10;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 562:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 563:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 566:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T5a8;

	__asm        jmp    _T54d;
_T54d:
	__asm        mov    dword ptr [ebp-0xA8], 0x4C;
	__asm        mov    dword ptr [ebp-0xA4], 0xF5;
	__asm        mov    dword ptr [ebp-0xA0], 0x8A;
	__asm        mov    dword ptr [ebp-0x9C], 0x105;
	__asm        jmp    _T57a;
_T57a:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4E;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T5af;
_T5a8:
	tempTextWindow = 0x0;
// LINE 567:
_T5af:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 568:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 571:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xAC], eax;
	__asm        cmp    dword ptr [ebp-0xAC], 0;
	__asm        je     _T656;

	__asm        jmp    _T5fb;
_T5fb:
	__asm        mov    dword ptr [ebp-0xBC], 0xDE;
	__asm        mov    dword ptr [ebp-0xB8], 0xF5;
	__asm        mov    dword ptr [ebp-0xB4], 0x120;
	__asm        mov    dword ptr [ebp-0xB0], 0x105;
	__asm        jmp    _T628;
_T628:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x4F;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xAC];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T65d;
_T656:
	tempTextWindow = 0x0;
// LINE 572:
_T65d:
	__asm        push   8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 573:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 574:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 577:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC0], eax;
	__asm        cmp    dword ptr [ebp-0xC0], 0;
	__asm        je     _T714;

	__asm        jmp    _T6b9;
_T6b9:
	__asm        mov    dword ptr [ebp-0xD0], 0x8E;
	__asm        mov    dword ptr [ebp-0xCC], 0xF5;
	__asm        mov    dword ptr [ebp-0xC8], 0xDA;
	__asm        mov    dword ptr [ebp-0xC4], 0x105;
	__asm        jmp    _T6e6;
_T6e6:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x50;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xD0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T71b;
_T714:
	tempTextWindow = 0x0;
// LINE 578:
_T71b:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 579:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 580:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 584:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     _T7db;

	__asm        jmp    _T777;
_T777:
	__asm        mov    dword ptr [ebp-0xE4], 0x4E;
	__asm        mov    dword ptr [ebp-0xE0], 0x40;
	__asm        mov    dword ptr [ebp-0xDC], 0x51;
	__asm        mov    dword ptr [ebp-0xD8], 0x43;
	__asm        jmp    _T7a4;
_T7a4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xE4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD4];
	__asm        call   SoundCheckBoxWindow::SoundCheckBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T7eb;
_T7db:
	this->myBuildingTexturesCheckBoxWindow = 0x0;
// LINE 585:
_T7eb:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+4];
// LINE 588:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T891;

	__asm        jmp    _T82d;
_T82d:
	__asm        mov    dword ptr [ebp-0xF8], 0x4E;
	__asm        mov    dword ptr [ebp-0xF4], 0x68;
	__asm        mov    dword ptr [ebp-0xF0], 0x51;
	__asm        mov    dword ptr [ebp-0xEC], 0x6B;
	__asm        jmp    _T85a;
_T85a:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0xF8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   SoundCheckBoxWindow::SoundCheckBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T8a1;
_T891:
	this->myObjectTexturesCheckBoxWindow = 0x0;
// LINE 589:
_T8a1:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+4];
// LINE 592:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xFC], eax;
	__asm        cmp    dword ptr [ebp-0xFC], 0;
	__asm        je     _T947;

	__asm        jmp    _T8e3;
_T8e3:
	__asm        mov    dword ptr [ebp-0x10C], 0x4E;
	__asm        mov    dword ptr [ebp-0x108], 0x92;
	__asm        mov    dword ptr [ebp-0x104], 0x51;
	__asm        mov    dword ptr [ebp-0x100], 0x95;
	__asm        jmp    _T910;
_T910:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   5;
	__asm        lea    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xFC];
	__asm        call   SoundCheckBoxWindow::SoundCheckBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    _T957;
_T947:
	this->mySkyDisplayCheckBoxWindow = 0x0;
// LINE 593:
_T957:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+4];
// LINE 596:
	__asm        push   0x84;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x110], eax;
	__asm        cmp    dword ptr [ebp-0x110], 0;
	__asm        je     _T9c2;

	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   6;
	__asm        mov    ecx, [ebp-0x110];
	__asm        call   ButtonGroup::ButtonGroup;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x94], eax;
	__asm        jmp    _T9d2;
_T9c2:
	this->myDisplayResolutionButtonGroup = 0x0;
// LINE 600:
_T9d2:
	__asm        push   0x98;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x114], eax;
	__asm        cmp    dword ptr [ebp-0x114], 0;
	__asm        je     _Ta5f;

	__asm        jmp    _T9f7;
_T9f7:
	__asm        mov    dword ptr [ebp-0x124], 0x10A;
	__asm        mov    dword ptr [ebp-0x120], 0x124;
	__asm        mov    dword ptr [ebp-0x11C], 0x10D;
	__asm        mov    dword ptr [ebp-0x118], 0x127;
	__asm        jmp    _Ta24;
_Ta24:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x114];
	__asm        call   SoundRadioButtonWindow::SoundRadioButtonWindow;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    _Ta66;
_Ta5f:
	tempRadioButtonWindow = 0x0;
// LINE 601:
_Ta66:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 602:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 606:
	__asm        push   0x98;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x128], eax;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     _Tb0e;

	__asm        jmp    _Taa6;
_Taa6:
	__asm        mov    dword ptr [ebp-0x138], 0x10A;
	__asm        mov    dword ptr [ebp-0x134], 0x140;
	__asm        mov    dword ptr [ebp-0x130], 0x10D;
	__asm        mov    dword ptr [ebp-0x12C], 0x143;
	__asm        jmp    _Tad3;
_Tad3:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, [ebp-0x138];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x128];
	__asm        call   SoundRadioButtonWindow::SoundRadioButtonWindow;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    _Tb15;
_Tb0e:
	tempRadioButtonWindow = 0x0;
// LINE 607:
_Tb15:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 608:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 612:
	__asm        push   0x98;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x13C], eax;
	__asm        cmp    dword ptr [ebp-0x13C], 0;
	__asm        je     _Tbbd;

	__asm        jmp    _Tb55;
_Tb55:
	__asm        mov    dword ptr [ebp-0x14C], 0x10A;
	__asm        mov    dword ptr [ebp-0x148], 0x15C;
	__asm        mov    dword ptr [ebp-0x144], 0x10D;
	__asm        mov    dword ptr [ebp-0x140], 0x15F;
	__asm        jmp    _Tb82;
_Tb82:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   9;
	__asm        lea    eax, [ebp-0x14C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x94];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x13C];
	__asm        call   SoundRadioButtonWindow::SoundRadioButtonWindow;
	__asm        mov    tempRadioButtonWindow, eax;
	__asm        jmp    _Tbc4;
_Tbbd:
	tempRadioButtonWindow = 0x0;
// LINE 613:
_Tbc4:
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 614:
	__asm        push   1;
	__asm        mov    eax, tempRadioButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempRadioButtonWindow;
	__asm        call   dword ptr [eax+0xC8];
// LINE 619:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x150], eax;
	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        je     _Tc72;

	__asm        jmp    _Tc04;
_Tc04:
	__asm        mov    dword ptr [ebp-0x160], 0x48;
	__asm        mov    dword ptr [ebp-0x15C], 0xD5;
	__asm        mov    dword ptr [ebp-0x158], 0x4B;
	__asm        mov    dword ptr [ebp-0x154], 0xD8;
	__asm        jmp    _Tc31;
_Tc31:
	__asm        push   8;
	__asm        mov    eax, SZ_RENDER_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0x160];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x150];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        jmp    _Tc82;
_Tc72:
	this->myFogSliderWindow = 0x0;
// LINE 620:
_Tc82:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x98];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x98];
	__asm        call   dword ptr [edx+4];
// LINE 621:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 622:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 626:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x164], eax;
	__asm        cmp    dword ptr [ebp-0x164], 0;
	__asm        je     _Td45;

	__asm        jmp    _Tcea;
_Tcea:
	__asm        mov    dword ptr [ebp-0x174], 0x148;
	__asm        mov    dword ptr [ebp-0x170], 0x13E;
	__asm        mov    dword ptr [ebp-0x16C], 0x14B;
	__asm        mov    dword ptr [ebp-0x168], 0x141;
	__asm        jmp    _Td17;
_Td17:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x164];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _Td4c;
_Td45:
	tempButtonWindow = 0x0;
// LINE 627:
_Td4c:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x51);
// LINE 628:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        cmp    dword ptr [ebp-0x11CC], 0;
	__asm        jne    _T1134;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11CC], eax;
	__asm        jmp    _Tdba;
_Tdba:
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E8], eax;
	__asm        cmp    dword ptr [ebp-0x11E8], 0xFFFFFFFF;
	__asm        jne    _Te14;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Te05;
_Te05:
	exit(0x1);
	__asm        jmp    _Te14;
_Te14:
	__asm        jmp    _Te19;
_Te19:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Te4a;

	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     _Teef;

	__asm        jmp    _Te38;
_Te38:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11E8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Teef;
_Te4a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11D4], eax;
	__asm        cmp    dword ptr [ebp-0x11D4], 0;
	__asm        je     _Te8b;

	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11D4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x11D0], eax;
	__asm        jmp    _Te95;
_Te8b:
	__asm        mov    dword ptr [ebp-0x11D0], 0;
_Te95:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tedc;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        cmp    dword ptr [ebp-0x11E0], 0;
	__asm        je     _Tedc;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11E0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _Tedc;
_Tedc:
	__asm        jmp    _Tee1;
_Tee1:
	__asm        mov    eax, [ebp-0x11D0];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Tf2e;
_Teef:
	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     _Tf2e;

	__asm        jmp    _Tf01;
_Tf01:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf2e;
_Tf2e:
	__asm        mov    eax, [ebp-0x11E8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tf3f;
_Tf3f:
	__asm        jmp    _Tf44;
_Tf44:
	__asm        jmp    _Tf49;
_Tf49:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1208], eax;
	__asm        jmp    _Tf61;
_Tf61:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1208];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _Tfb0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11FC], eax;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tfa1;
_Tfa1:
	exit(0x1);
	__asm        jmp    _Tfb0;
_Tfb0:
	__asm        jmp    _Tfb5;
_Tfb5:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tfe4;

	__asm        jmp    _Tfc7;
_Tfc7:
	__asm        jmp    _Tfcc;
_Tfcc:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1208];
	__asm        jae    _T10d1;
_Tfe4:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11F0], eax;
	__asm        cmp    dword ptr [ebp-0x11F0], 0;
	__asm        je     _T1072;

	__asm        jmp    _T1006;
_T1006:
	__asm        jmp    _T100b;
_T100b:
	__asm        jmp    _T1010;
_T1010:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1032;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11F8], eax;
	__asm        jmp    _T1041;

	__asm        jmp    _T1041;
_T1032:
	__asm        mov    dword ptr [ebp-0x11F8], 0;
	__asm        jmp    _T1041;
_T1041:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11F8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x11EC], eax;
	__asm        jmp    _T107c;
_T1072:
	__asm        mov    dword ptr [ebp-0x11EC], 0;
_T107c:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T10c3;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1204], eax;
	__asm        mov    eax, [ebp-0x1204];
	__asm        mov    [ebp-0x1200], eax;
	__asm        cmp    dword ptr [ebp-0x1200], 0;
	__asm        je     _T10c3;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x1200];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T10c3;
_T10c3:
	__asm        jmp    _T10c8;
_T10c8:
	__asm        mov    eax, [ebp-0x11EC];
	__asm        mov    sText.reference, eax;
_T10d1:
	__asm        cmp    dword ptr [ebp-0x1208], 0;
	__asm        je     _T1119;

	__asm        jmp    _T10e3;
_T10e3:
	__asm        jmp    _T10e8;
_T10e8:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11F4], eax;
	__asm        mov    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11F4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1119;
_T1119:
	__asm        mov    eax, [ebp-0x1208];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T112a;
_T112a:
	__asm        jmp    _T112f;
_T112f:
	__asm        jmp    _T12c8;
_T1134:
	__asm        jmp    _T1139;
_T1139:
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1224], eax;
	__asm        cmp    dword ptr [ebp-0x1224], 0xFFFFFFFF;
	__asm        jne    _T1193;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1218], eax;
	__asm        mov    eax, [ebp-0x1218];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1184;
_T1184:
	exit(0x1);
	__asm        jmp    _T1193;
_T1193:
	__asm        jmp    _T1198;
_T1198:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T11c9;

	__asm        cmp    dword ptr [ebp-0x1224], 0;
	__asm        je     _T126e;

	__asm        jmp    _T11b7;
_T11b7:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1224];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T126e;
_T11c9:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1210], eax;
	__asm        cmp    dword ptr [ebp-0x1210], 0;
	__asm        je     _T120a;

	__asm        mov    eax, [ebp-0x1224];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1210];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x120C], eax;
	__asm        jmp    _T1214;
_T120a:
	__asm        mov    dword ptr [ebp-0x120C], 0;
_T1214:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T125b;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1220], eax;
	__asm        mov    eax, [ebp-0x1220];
	__asm        mov    [ebp-0x121C], eax;
	__asm        cmp    dword ptr [ebp-0x121C], 0;
	__asm        je     _T125b;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x121C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T125b;
_T125b:
	__asm        jmp    _T1260;
_T1260:
	__asm        mov    eax, [ebp-0x120C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T12ad;
_T126e:
	__asm        cmp    dword ptr [ebp-0x1224], 0;
	__asm        je     _T12ad;

	__asm        jmp    _T1280;
_T1280:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1214], eax;
	__asm        mov    eax, [ebp-0x1224];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1214];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T12ad;
_T12ad:
	__asm        mov    eax, [ebp-0x1224];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T12be;
_T12be:
	__asm        jmp    _T12c3;
_T12c3:
	__asm        jmp    _T12c8;
// LINE 629:
_T12c8:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 630:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 631:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 634:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x178], eax;
	__asm        cmp    dword ptr [ebp-0x178], 0;
	__asm        je     _T137a;

	__asm        jmp    _T131f;
_T131f:
	__asm        mov    dword ptr [ebp-0x188], 0x1B0;
	__asm        mov    dword ptr [ebp-0x184], 0x13E;
	__asm        mov    dword ptr [ebp-0x180], 0x1B3;
	__asm        mov    dword ptr [ebp-0x17C], 0x141;
	__asm        jmp    _T134c;
_T134c:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x188];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x178];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T1381;
_T137a:
	tempButtonWindow = 0x0;
// LINE 635:
_T1381:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x52);
// LINE 636:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2228], eax;
	__asm        cmp    dword ptr [ebp-0x2228], 0;
	__asm        jne    _T1725;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2228], eax;
	__asm        jmp    _T13ef;
_T13ef:
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2244], eax;
	__asm        cmp    dword ptr [ebp-0x2244], 0xFFFFFFFF;
	__asm        jne    _T1449;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2238], eax;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T143a;
_T143a:
	exit(0x1);
	__asm        jmp    _T1449;
_T1449:
	__asm        jmp    _T144e;
_T144e:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T147f;

	__asm        cmp    dword ptr [ebp-0x2244], 0;
	__asm        je     _T1524;

	__asm        jmp    _T146d;
_T146d:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2244];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1524;
_T147f:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2230], eax;
	__asm        cmp    dword ptr [ebp-0x2230], 0;
	__asm        je     _T14c0;

	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2230];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x222C], eax;
	__asm        jmp    _T14ca;
_T14c0:
	__asm        mov    dword ptr [ebp-0x222C], 0;
_T14ca:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1511;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2240], eax;
	__asm        mov    eax, [ebp-0x2240];
	__asm        mov    [ebp-0x223C], eax;
	__asm        cmp    dword ptr [ebp-0x223C], 0;
	__asm        je     _T1511;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x223C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1511;
_T1511:
	__asm        jmp    _T1516;
_T1516:
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T1563;
_T1524:
	__asm        cmp    dword ptr [ebp-0x2244], 0;
	__asm        je     _T1563;

	__asm        jmp    _T1536;
_T1536:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1563;
_T1563:
	__asm        mov    eax, [ebp-0x2244];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1574;
_T1574:
	__asm        jmp    _T1579;
_T1579:
	__asm        jmp    _T157e;
_T157e:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x225C], eax;
	__asm        jmp    _T1596;
_T1596:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x225C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T15e5;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2258], eax;
	__asm        mov    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T15d6;
_T15d6:
	exit(0x1);
	__asm        jmp    _T15e5;
_T15e5:
	__asm        jmp    _T15ea;
_T15ea:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1619;

	__asm        jmp    _T15fc;
_T15fc:
	__asm        jmp    _T1601;
_T1601:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x225C];
	__asm        jae    _T16c2;
_T1619:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x224C], eax;
	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     _T16a7;

	__asm        jmp    _T163b;
_T163b:
	__asm        jmp    _T1640;
_T1640:
	__asm        jmp    _T1645;
_T1645:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1667;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2254], eax;
	__asm        jmp    _T1676;

	__asm        jmp    _T1676;
_T1667:
	__asm        mov    dword ptr [ebp-0x2254], 0;
	__asm        jmp    _T1676;
_T1676:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x225C];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2254];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x224C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2248], eax;
	__asm        jmp    _T16b1;
_T16a7:
	__asm        mov    dword ptr [ebp-0x2248], 0;
_T16b1:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2248];
	__asm        mov    sText.reference, eax;
_T16c2:
	__asm        cmp    dword ptr [ebp-0x225C], 0;
	__asm        je     _T170a;

	__asm        jmp    _T16d4;
_T16d4:
	__asm        jmp    _T16d9;
_T16d9:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2250], eax;
	__asm        mov    eax, [ebp-0x225C];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2250];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T170a;
_T170a:
	__asm        mov    eax, [ebp-0x225C];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T171b;
_T171b:
	__asm        jmp    _T1720;
_T1720:
	__asm        jmp    _T18d0;
_T1725:
	__asm        jmp    _T172a;
_T172a:
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2278], eax;
	__asm        cmp    dword ptr [ebp-0x2278], 0xFFFFFFFF;
	__asm        jne    _T1784;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x226C], eax;
	__asm        mov    eax, [ebp-0x226C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1775;
_T1775:
	exit(0x1);
	__asm        jmp    _T1784;
_T1784:
	__asm        jmp    _T1789;
_T1789:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T17ba;

	__asm        cmp    dword ptr [ebp-0x2278], 0;
	__asm        je     _T1876;

	__asm        jmp    _T17a8;
_T17a8:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2278];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1876;
_T17ba:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2264], eax;
	__asm        cmp    dword ptr [ebp-0x2264], 0;
	__asm        je     _T17fb;

	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2264];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2260], eax;
	__asm        jmp    _T1805;
_T17fb:
	__asm        mov    dword ptr [ebp-0x2260], 0;
_T1805:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1863;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2274], eax;
	__asm        mov    eax, [ebp-0x2274];
	__asm        mov    [ebp-0x2270], eax;
	__asm        cmp    dword ptr [ebp-0x2270], 0;
	__asm        je     _T1863;

	__asm        mov    ecx, [ebp-0x2270];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T184a;
_T184a:
	__asm        mov    eax, [ebp-0x2270];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T185e;
_T185e:
	__asm        jmp    _T1863;
_T1863:
	__asm        jmp    _T1868;
_T1868:
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T18b5;
_T1876:
	__asm        cmp    dword ptr [ebp-0x2278], 0;
	__asm        je     _T18b5;

	__asm        jmp    _T1888;
_T1888:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2268], eax;
	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2268];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T18b5;
_T18b5:
	__asm        mov    eax, [ebp-0x2278];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T18c6;
_T18c6:
	__asm        jmp    _T18cb;
_T18cb:
	__asm        jmp    _T18d0;
// LINE 637:
_T18d0:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 638:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 639:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 645:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        je     _T19a0;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T197b;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        jne    _T197b;

	__asm        lea    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x1C8];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
	__asm        jmp    _T197b;
_T197b:
	this->mySkyTimer.lTotalElapsedTime = 0x0;
	this->mySkyTimer.lStartTime = 0x0;
	__asm        jmp    _T19a0;
_T19a0:
	__asm        jmp    _T19a5;
// LINE 646:
_T19a5:
	__asm        jmp    _T19aa;
_T19aa:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _T19c2;

	__asm        jmp    _T1a5e;
_T19c2:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    _T19f1;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T1a59;

	__asm        jmp    _T1a59;
_T19f1:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T1a39;

	__asm        lea    eax, [ebp-0x198];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x190], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T1a59;

	__asm        jmp    _T1a59;
_T1a39:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T1a59;
_T1a59:
	__asm        jmp    _T1a5e;
// LINE 648:
_T1a5e:
	GraphicWindow::MakeModal(this);
// LINE 649:
	GraphicWindow::MakeFocus(this);
// LINE 651:
	__asm        mov    dword ptr [ebp-0x18C], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ae4;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        cmp    dword ptr [ebp-0x1B8], 0;
	__asm        je     _T1ae4;

	__asm        mov    ecx, [ebp-0x1B8];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1acb;
_T1acb:
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1adf;
_T1adf:
	__asm        jmp    _T1ae4;
_T1ae4:
	__asm        jmp    _T1ae9;
_T1ae9:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T1b17;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1b17:
	__asm        jmp    _T1b1c;
_T1b1c:
	__asm        mov    eax, [ebp-0x18C];
	__asm        jmp    __RETURN;
// LINE 652:
__RETURN:
}

// FUNCTION: COPTER_D 0x00454163
int32_t RenderSettingsWindow::CreateImage(int32_t bResizeWindowToFitImage) {
// LINE 661:
	__asm        mov    eax, bResizeWindowToFitImage;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
// LINE 662:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x58], 0xFFFFFFFF;
	__asm        je     _T3f;
// LINE 663:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+8];
// LINE 665:
_T3f:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 666:
	return this-><RenderSettingsWindow+0x40>;
// LINE 667:
}

// FUNCTION: COPTER_D 0x004541bc
void RenderSettingsWindow::DestroyImage() {
// LINE 676:
	this->GraphicWindow::DestroyImage();
// LINE 678:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        je     _T6b;
// LINE 679:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T5e;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T59;
_T59:
	__asm        jmp    _T5e;
// LINE 680:
_T5e:
	this->mySkyImage = 0x0;
// LINE 682:
_T6b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     _Tc2;
// LINE 683:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb5;

	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb0;
_Tb0:
	__asm        jmp    _Tb5;
// LINE 684:
_Tb5:
	this->myBuildingImage = 0x0;
// LINE 686:
_Tc2:
	return;
}

// FUNCTION: COPTER_D 0x00454288
int32_t RenderSettingsWindow::DrawSelf() {
// LINE 694:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T1d;
_T1d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _Tac;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    _T50;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T97;

	__asm        jmp    _T97;
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T80;

	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T97;

	__asm        jmp    _T97;
_T80:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T97;
_T97:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    [ebp-0x14], eax;
_Tac:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _Tfa;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB0], 0;
	__asm        je     _Tfa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0x96;
	__asm        jbe    _T290;

	__asm        jmp    _T119;
_Tfa:
	__asm        cmp    dword ptr [ebp-0x14], 0x96;
	__asm        jbe    _T290;

	__asm        jmp    _T119;

	__asm        cmp    dword ptr [ebp-0x28], 0x96;
	__asm        jbe    _T290;
// LINE 695:
_T119:
	this->lSkyImagePanX++;
// LINE 696:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0xC8;
	__asm        jle    _T142;
// LINE 697:
	this->lSkyImagePanX = 0x0;
// LINE 701:
_T142:
	__asm        push   0x42;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        add    eax, 0xC8;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0x38;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 703:
	__asm        jmp    _T189;
_T189:
	__asm        jmp    _T18e;
_T18e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x6C;
	__asm        push   0x159;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 705:
	this->mySkyTimer.lTotalElapsedTime = 0x0;
	this->mySkyTimer.lStartTime = 0x0;
	__asm        jmp    _T1f0;
_T1f0:
	__asm        jmp    _T1f5;
_T1f5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _T20a;

	__asm        jmp    _T28b;
_T20a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 1;
	__asm        jne    _T233;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T286;

	__asm        jmp    _T286;
_T233:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T269;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T286;

	__asm        jmp    _T286;
_T269:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA8], eax;
	__asm        jmp    _T286;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        jmp    _T290;
// LINE 707:
_T290:
	return 0x1;
// LINE 708:
}

// FUNCTION: COPTER_D 0x00454527
long RenderSettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 716:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T45;
// LINE 717:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T45;
// LINE 718:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 720:
_T45:
	return 0x1;
// LINE 721:
}

// FUNCTION: COPTER_D 0x0045457d
int32_t RenderSettingsWindow::SetCurrentSettings(long bNewShowBuildingTextures, long bNewShowGroundTextures, long bNewShowSkyAndClouds, long lNewQuadPixelType, long lNewFogCloseness) {
// LINE 738:
	this->bShowBuildingTextures = bNewShowBuildingTextures;
// LINE 739:
	this->bShowGroundTextures = bNewShowGroundTextures;
// LINE 740:
	this->bShowSkyAndClouds = bNewShowSkyAndClouds;
// LINE 741:
	this->lQuadPixelType = lNewQuadPixelType;
// LINE 742:
	this->lFogCloseness = lNewFogCloseness;
// LINE 743:
	this->RenderSettingsWindow::SetControlsBasedOnCurrentSettings();
// LINE 744:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 746:
	return 0x1;
// LINE 747:
}

// FUNCTION: COPTER_D 0x004545dd
void RenderSettingsWindow::GetCurrentSettings(long& bGetShowBuildingTextures, long& bGetShowGroundTextures, long& bGetShowSkyAndClouds, long& lGetQuadPixelType, long& lGetFogCloseness) {
// LINE 763:
	bGetShowBuildingTextures. = this->bShowBuildingTextures;
// LINE 764:
	bGetShowGroundTextures. = this->bShowGroundTextures;
// LINE 765:
	bGetShowSkyAndClouds. = this->bShowSkyAndClouds;
// LINE 766:
	lGetQuadPixelType. = this->lQuadPixelType;
// LINE 767:
	lGetFogCloseness. = this->lFogCloseness;
// LINE 768:
	return;
}

// FUNCTION: COPTER_D 0x00454632
void RenderSettingsWindow::SetControlsBasedOnCurrentSettings() {
// LINE 777:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T3a;
// LINE 778:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC8];
// LINE 779:
	__asm        jmp    _T56;
// LINE 780:
_T3a:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC8];
// LINE 782:
_T56:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T84;
// LINE 783:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC8];
// LINE 784:
	__asm        jmp    _Ta0;
// LINE 785:
_T84:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC8];
// LINE 787:
_Ta0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _Tce;
// LINE 788:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC8];
// LINE 789:
	__asm        jmp    _Tea;
// LINE 790:
_Tce:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC8];
// LINE 792:
_Tea:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jge    _T107;
// LINE 793:
	this->lQuadPixelType = 0x0;
// LINE 794:
_T107:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 2;
	__asm        jle    _T124;
// LINE 795:
	this->lQuadPixelType = 0x2;
// LINE 796:
_T124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x94];
	__asm        call   ButtonGroup::SetSelectionIndex;
// LINE 798:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0;
	__asm        jge    _T159;
// LINE 799:
	this->lFogCloseness = 0x0;
// LINE 800:
_T159:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x84], 0x64;
	__asm        jle    _T176;
// LINE 801:
	this->lFogCloseness = 0x64;
// LINE 802:
_T176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x98];
	__asm        call   SliderWindow::SetValue;
// LINE 803:
	return;
}

// FUNCTION: COPTER_D 0x004547ca
void RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sBuildingPreviewFileName; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class basic_string<char> sSkyPreviewFileName; // 0x8 bytes
	/*bp-0x18*/  /*packed*/ class basic_string<char> sBuildingPreviewFilePath; // 0x8 bytes
	/*bp-0x14c*/ /*unpacked*/ class CBackBuffer tempGroundImage;
	/*bp-0x154*/ /*packed*/ class basic_string<char> sSkyPreviewFilePath; // 0x8 bytes
	/*bp-0x15c*/ /*packed*/ class basic_string<char> sGroundPreviewFilePath; // 0x8 bytes
	/*bp-0x164*/ /*packed*/ class basic_string<char> sGroundPreviewFileName; // 0x8 bytes

// LINE 815:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x184], eax;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     _T7a;

	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T6c;
_T6c:
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    sSkyPreviewFileName.reference, eax;
	__asm        jmp    _T81;
_T7a:
	sSkyPreviewFileName.reference = 0x0;
_T81:
	sSkyPreviewFileName.c_str_ptr = 0x0;
	__asm        jmp    _T8d;
// LINE 816:
_T8d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x188], eax;
	__asm        cmp    dword ptr [ebp-0x188], 0;
	__asm        je     _Tf8;

	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x188];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Te7;
_Te7:
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    sSkyPreviewFilePath.reference, eax;
	__asm        jmp    _T102;
_Tf8:
	sSkyPreviewFilePath.reference = 0x0;
_T102:
	sSkyPreviewFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T111;
// LINE 817:
_T111:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18C], eax;
	__asm        cmp    dword ptr [ebp-0x18C], 0;
	__asm        je     _T17c;

	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T16b;
_T16b:
	__asm        mov    eax, [ebp-0x18C];
	__asm        mov    sGroundPreviewFileName.reference, eax;
	__asm        jmp    _T186;
_T17c:
	sGroundPreviewFileName.reference = 0x0;
_T186:
	sGroundPreviewFileName.c_str_ptr = 0x0;
	__asm        jmp    _T195;
// LINE 818:
_T195:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     _T200;

	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x190];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1ef;
_T1ef:
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    sGroundPreviewFilePath.reference, eax;
	__asm        jmp    _T20a;
_T200:
	sGroundPreviewFilePath.reference = 0x0;
_T20a:
	sGroundPreviewFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T219;
// LINE 819:
_T219:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x194], eax;
	__asm        cmp    dword ptr [ebp-0x194], 0;
	__asm        je     _T281;

	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x194];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T273;
_T273:
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    sBuildingPreviewFileName.reference, eax;
	__asm        jmp    _T288;
_T281:
	sBuildingPreviewFileName.reference = 0x0;
_T288:
	sBuildingPreviewFileName.c_str_ptr = 0x0;
	__asm        jmp    _T294;
// LINE 820:
_T294:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x198], eax;
	__asm        cmp    dword ptr [ebp-0x198], 0;
	__asm        je     _T2fc;

	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x198];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T2ee;
_T2ee:
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    sBuildingPreviewFilePath.reference, eax;
	__asm        jmp    _T303;
_T2fc:
	sBuildingPreviewFilePath.reference = 0x0;
_T303:
	sBuildingPreviewFilePath.c_str_ptr = 0x0;
	__asm        jmp    _T30f;
// LINE 822:
_T30f:
	__asm        lea    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   RenderSettingsWindow::GetPreviewFileNames;
// LINE 823:
	__asm        lea    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T347;
// LINE 824:
_T347:
	__asm        lea    eax, sGroundPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T368;
// LINE 825:
_T368:
	__asm        lea    eax, sBuildingPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T383;
// LINE 828:
_T383:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9C], 0;
	__asm        je     _T3e5;
// LINE 829:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9C];
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x168], eax;
	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        je     _T3e5;

	__asm        mov    ecx, [ebp-0x168];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3e0;
_T3e0:
	__asm        jmp    _T3e5;
// LINE 830:
_T3e5:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x170], eax;
	__asm        cmp    dword ptr [ebp-0x170], 0;
	__asm        je     _T533;

	__asm        cmp    sSkyPreviewFilePath.c_str_ptr, 0;
	__asm        je     _T439;

	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1CC], eax;
	__asm        mov    eax, [ebp-0x1CC];
	__asm        mov    [ebp-0x1D4], eax;
	__asm        mov    eax, [ebp-0x1D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T439:
	__asm        jmp    _T43e;
_T43e:
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sSkyPreviewFilePath.c_str_ptr, eax;
	__asm        jmp    _T45c;
_T45c:
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T4bf;

	__asm        jmp    _T471;
_T471:
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        mov    [ebp-0x1E4], eax;
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1E8], eax;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T4bf;
_T4bf:
	__asm        jmp    _T4c4;
_T4c4:
	__asm        mov    byte ptr [ebp-0x1D0], 0;
	__asm        jmp    _T4d0;
_T4d0:
	__asm        lea    eax, [ebp-0x1D0];
	__asm        mov    [ebp-0x1D8], eax;
	__asm        jmp    _T4e1;
_T4e1:
	__asm        mov    eax, sSkyPreviewFilePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1DC], eax;
	__asm        mov    eax, [ebp-0x1D8];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x1DC];
	__asm        mov    [ecx], al;
	__asm        jmp    _T50b;
_T50b:
	__asm        jmp    _T510;
_T510:
	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x170];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        jmp    _T543;
_T533:
	this->mySkyImage = 0x0;
// LINE 831:
_T543:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA0], 0;
	__asm        je     _T5a5;
// LINE 832:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x174], eax;
	__asm        cmp    dword ptr [ebp-0x174], 0;
	__asm        je     _T5a5;

	__asm        mov    ecx, [ebp-0x174];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T5a0;
_T5a0:
	__asm        jmp    _T5a5;
// LINE 833:
_T5a5:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x17C], eax;
	__asm        cmp    dword ptr [ebp-0x17C], 0;
	__asm        je     _T5ed;

	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x17C];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], eax;
	__asm        jmp    _T5fd;
_T5ed:
	this->mySkyImage = 0x0;
// LINE 834:
_T5fd:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x180], eax;
	__asm        cmp    dword ptr [ebp-0x180], 0;
	__asm        je     _T642;

	__asm        lea    ecx, sBuildingPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x180];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA0], eax;
	__asm        jmp    _T652;
_T642:
	this->myBuildingImage = 0x0;
// LINE 835:
_T652:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+8];
// LINE 836:
	__asm        lea    ecx, sGroundPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::c_str;
	__asm        push   eax;
	__asm        lea    ecx, tempGroundImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::CBackBuffer;
// LINE 842:
	__asm        push   0x42;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        add    eax, 0xC8;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0x38;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x9C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x9C];
	__asm        call   dword ptr [edx+0xC];
// LINE 844:
	__asm        jmp    _T6e4;
_T6e4:
	__asm        jmp    _T6e9;
_T6e9:
	__asm        mov    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x78;
	__asm        push   0x14B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        lea    ecx, tempGroundImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::Compose;
// LINE 846:
	__asm        jmp    _T71c;
_T71c:
	__asm        jmp    _T721;
_T721:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x6C;
	__asm        push   0x159;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA0];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA0];
	__asm        call   dword ptr [edx+0xC];
// LINE 847:
	__asm        lea    ecx, tempGroundImage<CBackBuffer+0x00:None>;
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        lea    ecx, sBuildingPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sBuildingPreviewFilePath.c_str_ptr, 0;
	__asm        je     _T7b4;

	__asm        mov    eax, sBuildingPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        mov    [ebp-0x1A0], eax;
	__asm        mov    eax, [ebp-0x1A0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7b4:
	__asm        jmp    _T7b9;
_T7b9:
	__asm        lea    ecx, sBuildingPreviewFileName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sBuildingPreviewFileName.c_str_ptr, 0;
	__asm        je     _T7ef;

	__asm        mov    eax, sBuildingPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1A4], eax;
	__asm        mov    eax, [ebp-0x1A4];
	__asm        mov    [ebp-0x1A8], eax;
	__asm        mov    eax, [ebp-0x1A8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7ef:
	__asm        jmp    _T7f4;
_T7f4:
	__asm        lea    ecx, sGroundPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sGroundPreviewFilePath.c_str_ptr, 0;
	__asm        je     _T833;

	__asm        mov    eax, sGroundPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1AC], eax;
	__asm        mov    eax, [ebp-0x1AC];
	__asm        mov    [ebp-0x1B0], eax;
	__asm        mov    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T833:
	__asm        jmp    _T838;
_T838:
	__asm        lea    ecx, sGroundPreviewFileName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sGroundPreviewFileName.c_str_ptr, 0;
	__asm        je     _T877;

	__asm        mov    eax, sGroundPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1B4], eax;
	__asm        mov    eax, [ebp-0x1B4];
	__asm        mov    [ebp-0x1B8], eax;
	__asm        mov    eax, [ebp-0x1B8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T877:
	__asm        jmp    _T87c;
_T87c:
	__asm        lea    ecx, sSkyPreviewFilePath.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sSkyPreviewFilePath.c_str_ptr, 0;
	__asm        je     _T8bb;

	__asm        mov    eax, sSkyPreviewFilePath.c_str_ptr;
	__asm        mov    [ebp-0x1BC], eax;
	__asm        mov    eax, [ebp-0x1BC];
	__asm        mov    [ebp-0x1C0], eax;
	__asm        mov    eax, [ebp-0x1C0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T8bb:
	__asm        jmp    _T8c0;
_T8c0:
	__asm        lea    ecx, sSkyPreviewFileName.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        cmp    sSkyPreviewFileName.c_str_ptr, 0;
	__asm        je     _T8f6;

	__asm        mov    eax, sSkyPreviewFileName.c_str_ptr;
	__asm        mov    [ebp-0x1C4], eax;
	__asm        mov    eax, [ebp-0x1C4];
	__asm        mov    [ebp-0x1C8], eax;
	__asm        mov    eax, [ebp-0x1C8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T8f6:
	__asm        jmp    _T8fb;
_T8fb:
	return;
}

// FUNCTION: COPTER_D 0x004550cf
void RenderSettingsWindow::GetPreviewFileNames(/*packed*/ class basic_string<char>& sSkyPreviewFileName, /*packed*/ class basic_string<char>& sGroundPreviewFileName, /*packed*/ class basic_string<char>& sBuildingPreviewFileName) {

	__asm        mov    eax, SZ_SKY_FILE_NAME_BASE;
	__asm        mov    [ebp-4], eax;
// LINE 858:
	__asm        jmp    _T1f;
_T1f:
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T3d;
_T3d:
	__asm        mov    eax, SZ_GROUND_FILE_NAME_BASE;
	__asm        mov    [ebp-8], eax;
// LINE 859:
	__asm        jmp    _T4a;
_T4a:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T68;
_T68:
	__asm        mov    eax, SZ_BUILDING_FILE_NAME_BASE;
	__asm        mov    [ebp-0xC], eax;
// LINE 860:
	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _T93;
// LINE 861:
_T93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x80], 0;
	__asm        jne    _T101;

	__asm        mov    eax, SZ_LO_RES;
	__asm        mov    [ebp-0x10], eax;
// LINE 862:
	__asm        jmp    _Tb3;
_Tb3:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Td1;
_Td1:
	__asm        mov    eax, SZ_LO_RES;
	__asm        mov    [ebp-0x14], eax;
// LINE 863:
	__asm        jmp    _Tde;
_Tde:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _Tfc;
// LINE 865:
_Tfc:
	__asm        jmp    _T157;
_T101:
	__asm        mov    eax, SZ_HI_RES;
	__asm        mov    [ebp-0x18], eax;
// LINE 866:
	__asm        jmp    _T10e;
_T10e:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T12c;
_T12c:
	__asm        mov    eax, SZ_HI_RES;
	__asm        mov    [ebp-0x1C], eax;
// LINE 867:
	__asm        jmp    _T139;
_T139:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T157;
// LINE 869:
_T157:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T197;
// LINE 870:
	__asm        mov    eax, SZ_TEXTURE;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T174;
_T174:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T192;
// LINE 871:
_T192:
	__asm        jmp    _T2fb;
// LINE 872:
_T197:
	__asm        mov    eax, SZ_NO_TEXTURE;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1b8;
_T1b8:
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x34];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T201;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1f2;
_T1f2:
	exit(0x1);
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T23b;

	__asm        jmp    _T21b;
_T21b:
	__asm        jmp    _T220;
_T220:
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x34];
	__asm        jae    _T2a4;
_T23b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T28c;

	__asm        jmp    _T257;
_T257:
	__asm        jmp    _T25c;
_T25c:
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T293;
_T28c:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T293:
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    [ecx+4], eax;
_T2a4:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T2e5;

	__asm        jmp    _T2b3;
_T2b3:
	__asm        jmp    _T2b8;
_T2b8:
	__asm        mov    eax, sBuildingPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2e5;
_T2e5:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, sBuildingPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T2f6;
_T2f6:
	__asm        jmp    _T2fb;
// LINE 873:
_T2fb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x78], 0;
	__asm        je     _T474;
// LINE 874:
	__asm        mov    eax, SZ_TEXTURE;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T318;
_T318:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T32c;
_T32c:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x4C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T375;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T366;
_T366:
	exit(0x1);
	__asm        jmp    _T375;
_T375:
	__asm        jmp    _T37a;
_T37a:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3af;

	__asm        jmp    _T38f;
_T38f:
	__asm        jmp    _T394;
_T394:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x4C];
	__asm        jae    _T418;
_T3af:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T400;

	__asm        jmp    _T3cb;
_T3cb:
	__asm        jmp    _T3d0;
_T3d0:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T407;
_T400:
	__asm        mov    dword ptr [ebp-0x3C], 0;
_T407:
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    [ecx+4], eax;
_T418:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T459;

	__asm        jmp    _T427;
_T427:
	__asm        jmp    _T42c;
_T42c:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T459;
_T459:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T46a;
_T46a:
	__asm        jmp    _T46f;
// LINE 875:
_T46f:
	__asm        jmp    _T5d8;
// LINE 876:
_T474:
	__asm        mov    eax, SZ_NO_TEXTURE;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T481;
_T481:
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T495;
_T495:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x64];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T4de;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T4cf;
_T4cf:
	exit(0x1);
	__asm        jmp    _T4de;
_T4de:
	__asm        jmp    _T4e3;
_T4e3:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T518;

	__asm        jmp    _T4f8;
_T4f8:
	__asm        jmp    _T4fd;
_T4fd:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x64];
	__asm        jae    _T581;
_T518:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T569;

	__asm        jmp    _T534;
_T534:
	__asm        jmp    _T539;
_T539:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T570;
_T569:
	__asm        mov    dword ptr [ebp-0x54], 0;
_T570:
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    [ecx+4], eax;
_T581:
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T5c2;

	__asm        jmp    _T590;
_T590:
	__asm        jmp    _T595;
_T595:
	__asm        mov    eax, sGroundPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5c2;
_T5c2:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ecx, sGroundPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T5d3;
_T5d3:
	__asm        jmp    _T5d8;
// LINE 877:
_T5d8:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7C], 0;
	__asm        je     _T751;
// LINE 878:
	__asm        mov    eax, SZ_SKY_COOL;
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T5f5;
_T5f5:
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        jmp    _T609;
_T609:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x7C];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T652;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T643;
_T643:
	exit(0x1);
	__asm        jmp    _T652;
_T652:
	__asm        jmp    _T657;
_T657:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T68c;

	__asm        jmp    _T66c;
_T66c:
	__asm        jmp    _T671;
_T671:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x7C];
	__asm        jae    _T6f5;
_T68c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x70], eax;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T6dd;

	__asm        jmp    _T6a8;
_T6a8:
	__asm        jmp    _T6ad;
_T6ad:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _T6e4;
_T6dd:
	__asm        mov    dword ptr [ebp-0x6C], 0;
_T6e4:
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    [ecx+4], eax;
_T6f5:
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T736;

	__asm        jmp    _T704;
_T704:
	__asm        jmp    _T709;
_T709:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T736;
_T736:
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T747;
_T747:
	__asm        jmp    _T74c;
// LINE 879:
_T74c:
	__asm        jmp    _T92b;
// LINE 880:
_T751:
	__asm        mov    eax, SZ_SKY_GRAY;
	__asm        mov    [ebp-0x9C], eax;
	__asm        jmp    _T761;
_T761:
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T77b;
_T77b:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x98];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T7cd;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T7be;
_T7be:
	exit(0x1);
	__asm        jmp    _T7cd;
_T7cd:
	__asm        jmp    _T7d2;
_T7d2:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T80a;

	__asm        jmp    _T7e7;
_T7e7:
	__asm        jmp    _T7ec;
_T7ec:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x98];
	__asm        jae    _T8c2;
_T80a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T8a4;

	__asm        jmp    _T82c;
_T82c:
	__asm        jmp    _T831;
_T831:
	__asm        jmp    _T836;
_T836:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T85e;

	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T86d;

	__asm        jmp    _T86d;
_T85e:
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    _T86d;
_T86d:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x84], eax;
	__asm        jmp    _T8ae;
_T8a4:
	__asm        mov    dword ptr [ebp-0x84], 0;
_T8ae:
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    [ecx+4], eax;
_T8c2:
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T912;

	__asm        jmp    _T8d4;
_T8d4:
	__asm        jmp    _T8d9;
_T8d9:
	__asm        mov    eax, sSkyPreviewFileName;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T912;
_T912:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, sSkyPreviewFileName;
	__asm        mov    ecx, [ecx+4];
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T926;
_T926:
	__asm        jmp    _T92b;
// LINE 881:
_T92b:
	return;
}

// FUNCTION: COPTER_D 0x00455a06
int32_t RenderSettingsWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 890:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T1a8;
// LINE 892:
_T17:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T46;
// LINE 893:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 894:
_T46:
	return 0x1;
// LINE 897:
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T7f;
// LINE 898:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 899:
_T7f:
	return 0x1;
// LINE 902:
_T89:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _Tb5;
// LINE 903:
	this->lQuadPixelType = this->myDisplayResolutionButtonGroup->ButtonGroup::GetSelectionIndex();
// LINE 904:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 906:
_Tb5:
	return 0x1;
// LINE 909:
_Tbf:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _Tf9;
// LINE 910:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _Te7;

	this->bShowBuildingTextures = 0x1;
	__asm        jmp    _Tf1;
_Te7:
	this->bShowBuildingTextures = 0x0;
// LINE 911:
_Tf1:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 913:
_Tf9:
	return 0x1;
// LINE 916:
_T103:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _T13d;
// LINE 917:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T12b;

	this->bShowGroundTextures = 0x1;
	__asm        jmp    _T135;
_T12b:
	this->bShowGroundTextures = 0x0;
// LINE 918:
_T135:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 920:
_T13d:
	return 0x1;
// LINE 923:
_T147:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _T181;
// LINE 924:
	__asm        mov    eax, pMessageData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T16f;

	this->bShowSkyAndClouds = 0x1;
	__asm        jmp    _T179;
_T16f:
	this->bShowSkyAndClouds = 0x0;
// LINE 925:
_T179:
	this->RenderSettingsWindow::DrawPreviewBasedOnCurrentSettings();
// LINE 927:
_T181:
	return 0x1;
// LINE 931:
_T18b:
	__asm        mov    eax, pMessageData;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
// LINE 932:
	return 0x1;
// LINE 933:
	__asm        jmp    _T1e7;
_T1a8:
	__asm        dec    dword ptr [ebp-8];
	__asm        cmp    dword ptr [ebp-8], 9;
	__asm        ja     _T1e7;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    _Switch_1bf[0][eax*4];
// Switch pointers:
//   _T17
//   _T50
//   _Tbf
//   _T103
//   _T147
//   _T89
//   _T1e7
//   _T1e7
//   _T1e7
//   _T18b
// LINE 935:
_T1e7:
	return 0x0;
// LINE 936:
}

// FUNCTION: COPTER_D 0x00455bfb
void SoundSettingsWindow::SoundSettingsWindow(/*packed*/ class MRect& rectNewPosition, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_SOUND_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x80], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x84], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FCE8;
// LINE 991:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00455c7f
int32_t SoundSettingsWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class ButtonWindow *tempButtonWindow1;
	/*bp-0x14*/  /*packed*/ class ButtonWindow *tempButtonWindow2;
	/*bp-0x18*/  /*packed*/ class TextWindow *tempTextWindow;

// LINE 1002:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xFC], eax;
	__asm        cmp    dword ptr [ebp-0xFC], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xFC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0xFC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T91;
// LINE 1004:
_T91:
	this->GraphicWindow::Initialize();
// LINE 1007:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T107;

	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    dword ptr [ebp-0x2C], 0x96;
	__asm        mov    dword ptr [ebp-0x28], 0x170;
	__asm        mov    dword ptr [ebp-0x24], 0x118;
	__asm        mov    dword ptr [ebp-0x20], 0x17E;
	__asm        jmp    _Tdc;
_Tdc:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x82;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T10e;
_T107:
	tempTextWindow = 0x0;
// LINE 1008:
_T10e:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1009:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1010:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1024:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T1b0;

	__asm        jmp    _T164;
_T164:
	__asm        mov    dword ptr [ebp-0x40], 0x71;
	__asm        mov    dword ptr [ebp-0x3C], 0x11F;
	__asm        mov    dword ptr [ebp-0x38], 0xD2;
	__asm        mov    dword ptr [ebp-0x34], 0x12D;
	__asm        jmp    _T185;
_T185:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x8A;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T1b7;
_T1b0:
	tempTextWindow = 0x0;
// LINE 1025:
_T1b7:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1026:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1027:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1029:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T259;

	__asm        jmp    _T20d;
_T20d:
	__asm        mov    dword ptr [ebp-0x54], 0xD6;
	__asm        mov    dword ptr [ebp-0x50], 0x11F;
	__asm        mov    dword ptr [ebp-0x4C], 0x13C;
	__asm        mov    dword ptr [ebp-0x48], 0x12D;
	__asm        jmp    _T22e;
_T22e:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x89;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x44];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T260;
_T259:
	tempTextWindow = 0x0;
// LINE 1030:
_T260:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1031:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1032:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1039:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T302;

	__asm        jmp    _T2b6;
_T2b6:
	__asm        mov    dword ptr [ebp-0x68], 0x15C;
	__asm        mov    dword ptr [ebp-0x64], 0x11F;
	__asm        mov    dword ptr [ebp-0x60], 0x17E;
	__asm        mov    dword ptr [ebp-0x5C], 0x12C;
	__asm        jmp    _T2d7;
_T2d7:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x8C;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T309;
_T302:
	tempTextWindow = 0x0;
// LINE 1040:
_T309:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1041:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1042:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1046:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T3b1;

	__asm        jmp    _T35f;
_T35f:
	__asm        mov    dword ptr [ebp-0x7C], 0x8F;
	__asm        mov    dword ptr [ebp-0x78], 0xFD;
	__asm        mov    dword ptr [ebp-0x74], 0x90;
	__asm        mov    dword ptr [ebp-0x70], 0xFE;
	__asm        jmp    _T380;
_T380:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x6C];
	__asm        call   SoundCheckBoxWindow::SoundCheckBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T3c1;
_T3b1:
	this->myCommercialCheckBoxWindow = 0x0;
// LINE 1047:
_T3c1:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+4];
// LINE 1050:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x80], eax;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T45e;

	__asm        jmp    _T3fd;
_T3fd:
	__asm        mov    dword ptr [ebp-0x90], 0xFB;
	__asm        mov    dword ptr [ebp-0x8C], 0xFD;
	__asm        mov    dword ptr [ebp-0x88], 0xFC;
	__asm        mov    dword ptr [ebp-0x84], 0xFE;
	__asm        jmp    _T42a;
_T42a:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x80];
	__asm        call   SoundCheckBoxWindow::SoundCheckBoxWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T46e;
_T45e:
	this->myDJCheckBoxWindow = 0x0;
// LINE 1051:
_T46e:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+4];
// LINE 1059:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x94], eax;
	__asm        cmp    dword ptr [ebp-0x94], 0;
	__asm        je     _T517;

	__asm        jmp    _T4b0;
_T4b0:
	__asm        mov    dword ptr [ebp-0xA4], 0x78;
	__asm        mov    dword ptr [ebp-0xA0], 0x14E;
	__asm        mov    dword ptr [ebp-0x9C], 0x138;
	__asm        mov    dword ptr [ebp-0x98], 0x16E;
	__asm        jmp    _T4dd;
_T4dd:
	__asm        push   8;
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        lea    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x94];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T524;
_T517:
	this->myMasterVolumeSliderWindow = 0x0;
// LINE 1060:
_T524:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 1061:
	__asm        push   0x140;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1062:
	__asm        push   0x2710;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1083:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     _T5ed;

	__asm        jmp    _T586;
_T586:
	__asm        mov    dword ptr [ebp-0xB8], 0x15E;
	__asm        mov    dword ptr [ebp-0xB4], 0x4E;
	__asm        mov    dword ptr [ebp-0xB0], 0x17E;
	__asm        mov    dword ptr [ebp-0xAC], 0x10E;
	__asm        jmp    _T5b3;
_T5b3:
	__asm        push   8;
	__asm        push   0;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xB;
	__asm        lea    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA8];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T5fa;
_T5ed:
	this->myRadioVolumeSliderWindow = 0x0;
// LINE 1084:
_T5fa:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1085:
	__asm        push   0x140;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1086:
	__asm        push   0x2710;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1090:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xBC], eax;
	__asm        cmp    dword ptr [ebp-0xBC], 0;
	__asm        je     _T6cb;

	__asm        jmp    _T65c;
_T65c:
	__asm        mov    dword ptr [ebp-0xCC], 0x189;
	__asm        mov    dword ptr [ebp-0xC8], 0x5B;
	__asm        mov    dword ptr [ebp-0xC4], 0x1B7;
	__asm        mov    dword ptr [ebp-0xC0], 0x117;
	__asm        jmp    _T689;
_T689:
	__asm        push   8;
	__asm        mov    eax, SZ_SOUND_WINDOW_STATION_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    eax, SZ_SOUND_WINDOW_STATION_THUMB_FILE_NAME;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0xCC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xBC];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T6d8;
_T6cb:
	this->myRadioStationSliderWindow = 0x0;
// LINE 1091:
_T6d8:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1092:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1093:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1097:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD0], eax;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _T78f;

	__asm        jmp    _T734;
_T734:
	__asm        mov    dword ptr [ebp-0xE0], 0x14E;
	__asm        mov    dword ptr [ebp-0xDC], 0x14B;
	__asm        mov    dword ptr [ebp-0xD8], 0x14F;
	__asm        mov    dword ptr [ebp-0xD4], 0x14C;
	__asm        jmp    _T761;
_T761:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow1, eax;
	__asm        jmp    _T796;
_T78f:
	tempButtonWindow1 = 0x0;
// LINE 1098:
_T796:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x8d);
// LINE 1099:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1110], eax;
	__asm        cmp    dword ptr [ebp-0x1110], 0;
	__asm        jne    _Tac5;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1110], eax;
	__asm        jmp    _T807;
_T807:
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1124], eax;
	__asm        cmp    dword ptr [ebp-0x1124], 0xFFFFFFFF;
	__asm        jne    _T861;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1120], eax;
	__asm        mov    eax, [ebp-0x1120];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T852;
_T852:
	exit(0x1);
	__asm        jmp    _T861;
_T861:
	__asm        jmp    _T866;
_T866:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T897;

	__asm        cmp    dword ptr [ebp-0x1124], 0;
	__asm        je     _T8f8;

	__asm        jmp    _T885;
_T885:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1124];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T8f8;
_T897:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1118], eax;
	__asm        cmp    dword ptr [ebp-0x1118], 0;
	__asm        je     _T8d8;

	__asm        mov    eax, [ebp-0x1124];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1118];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1114], eax;
	__asm        jmp    _T8e2;
_T8d8:
	__asm        mov    dword ptr [ebp-0x1114], 0;
_T8e2:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1114];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T937;
_T8f8:
	__asm        cmp    dword ptr [ebp-0x1124], 0;
	__asm        je     _T937;

	__asm        jmp    _T90a;
_T90a:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x111C], eax;
	__asm        mov    eax, [ebp-0x1124];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x111C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T937;
_T937:
	__asm        mov    eax, [ebp-0x1124];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T948;
_T948:
	__asm        jmp    _T94d;
_T94d:
	__asm        jmp    _T952;
_T952:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1138], eax;
	__asm        jmp    _T96a;
_T96a:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x1138];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T9b9;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1134], eax;
	__asm        mov    eax, [ebp-0x1134];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T9aa;
_T9aa:
	exit(0x1);
	__asm        jmp    _T9b9;
_T9b9:
	__asm        jmp    _T9be;
_T9be:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T9ed;

	__asm        jmp    _T9d0;
_T9d0:
	__asm        jmp    _T9d5;
_T9d5:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x1138];
	__asm        jae    _Ta62;
_T9ed:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x112C], eax;
	__asm        cmp    dword ptr [ebp-0x112C], 0;
	__asm        je     _Ta47;

	__asm        jmp    _Ta0f;
_Ta0f:
	__asm        jmp    _Ta14;
_Ta14:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x1138];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x112C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1128], eax;
	__asm        jmp    _Ta51;
_Ta47:
	__asm        mov    dword ptr [ebp-0x1128], 0;
_Ta51:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x1128];
	__asm        mov    sText.reference, eax;
_Ta62:
	__asm        cmp    dword ptr [ebp-0x1138], 0;
	__asm        je     _Taaa;

	__asm        jmp    _Ta74;
_Ta74:
	__asm        jmp    _Ta79;
_Ta79:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x1130], eax;
	__asm        mov    eax, [ebp-0x1138];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x1130];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Taaa;
_Taaa:
	__asm        mov    eax, [ebp-0x1138];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _Tabb;
_Tabb:
	__asm        jmp    _Tac0;
_Tac0:
	__asm        jmp    _Tc59;
_Tac5:
	__asm        jmp    _Taca;
_Taca:
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1154], eax;
	__asm        cmp    dword ptr [ebp-0x1154], 0xFFFFFFFF;
	__asm        jne    _Tb24;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1148], eax;
	__asm        mov    eax, [ebp-0x1148];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tb15;
_Tb15:
	exit(0x1);
	__asm        jmp    _Tb24;
_Tb24:
	__asm        jmp    _Tb29;
_Tb29:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tb5a;

	__asm        cmp    dword ptr [ebp-0x1154], 0;
	__asm        je     _Tbff;

	__asm        jmp    _Tb48;
_Tb48:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1154];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Tbff;
_Tb5a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1140], eax;
	__asm        cmp    dword ptr [ebp-0x1140], 0;
	__asm        je     _Tb9b;

	__asm        mov    eax, [ebp-0x1154];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1140];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x113C], eax;
	__asm        jmp    _Tba5;
_Tb9b:
	__asm        mov    dword ptr [ebp-0x113C], 0;
_Tba5:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tbec;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1150], eax;
	__asm        mov    eax, [ebp-0x1150];
	__asm        mov    [ebp-0x114C], eax;
	__asm        cmp    dword ptr [ebp-0x114C], 0;
	__asm        je     _Tbec;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x114C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _Tbec;
_Tbec:
	__asm        jmp    _Tbf1;
_Tbf1:
	__asm        mov    eax, [ebp-0x113C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Tc3e;
_Tbff:
	__asm        cmp    dword ptr [ebp-0x1154], 0;
	__asm        je     _Tc3e;

	__asm        jmp    _Tc11;
_Tc11:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1144], eax;
	__asm        mov    eax, [ebp-0x1154];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x110C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1144];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tc3e;
_Tc3e:
	__asm        mov    eax, [ebp-0x1154];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tc4f;
_Tc4f:
	__asm        jmp    _Tc54;
_Tc54:
	__asm        jmp    _Tc59;
// LINE 1100:
_Tc59:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0x48];
// LINE 1101:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1102:
	__asm        mov    eax, tempButtonWindow1;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow1;
	__asm        call   dword ptr [eax+4];
// LINE 1105:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE4], eax;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        je     _Td0b;

	__asm        jmp    _Tcb0;
_Tcb0:
	__asm        mov    dword ptr [ebp-0xF4], 0x14E;
	__asm        mov    dword ptr [ebp-0xF0], 0x167;
	__asm        mov    dword ptr [ebp-0xEC], 0x14F;
	__asm        mov    dword ptr [ebp-0xE8], 0x168;
	__asm        jmp    _Tcdd;
_Tcdd:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0xF4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow2, eax;
	__asm        jmp    _Td12;
_Td0b:
	tempButtonWindow2 = 0x0;
// LINE 1106:
_Td12:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x8e);
// LINE 1107:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2158], eax;
	__asm        cmp    dword ptr [ebp-0x2158], 0;
	__asm        jne    _T1041;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x2158], eax;
	__asm        jmp    _Td83;
_Td83:
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x216C], eax;
	__asm        cmp    dword ptr [ebp-0x216C], 0xFFFFFFFF;
	__asm        jne    _Tddd;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2168], eax;
	__asm        mov    eax, [ebp-0x2168];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tdce;
_Tdce:
	exit(0x1);
	__asm        jmp    _Tddd;
_Tddd:
	__asm        jmp    _Tde2;
_Tde2:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Te13;

	__asm        cmp    dword ptr [ebp-0x216C], 0;
	__asm        je     _Te74;

	__asm        jmp    _Te01;
_Te01:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x216C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Te74;
_Te13:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2160], eax;
	__asm        cmp    dword ptr [ebp-0x2160], 0;
	__asm        je     _Te54;

	__asm        mov    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2160];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x215C], eax;
	__asm        jmp    _Te5e;
_Te54:
	__asm        mov    dword ptr [ebp-0x215C], 0;
_Te5e:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x215C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Teb3;
_Te74:
	__asm        cmp    dword ptr [ebp-0x216C], 0;
	__asm        je     _Teb3;

	__asm        jmp    _Te86;
_Te86:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2164], eax;
	__asm        mov    eax, [ebp-0x216C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2164];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Teb3;
_Teb3:
	__asm        mov    eax, [ebp-0x216C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tec4;
_Tec4:
	__asm        jmp    _Tec9;
_Tec9:
	__asm        jmp    _Tece;
_Tece:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2180], eax;
	__asm        jmp    _Tee6;
_Tee6:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2180];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _Tf35;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x217C], eax;
	__asm        mov    eax, [ebp-0x217C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tf26;
_Tf26:
	exit(0x1);
	__asm        jmp    _Tf35;
_Tf35:
	__asm        jmp    _Tf3a;
_Tf3a:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tf69;

	__asm        jmp    _Tf4c;
_Tf4c:
	__asm        jmp    _Tf51;
_Tf51:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2180];
	__asm        jae    _Tfde;
_Tf69:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2174], eax;
	__asm        cmp    dword ptr [ebp-0x2174], 0;
	__asm        je     _Tfc3;

	__asm        jmp    _Tf8b;
_Tf8b:
	__asm        jmp    _Tf90;
_Tf90:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2180];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::data;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2174];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2170], eax;
	__asm        jmp    _Tfcd;
_Tfc3:
	__asm        mov    dword ptr [ebp-0x2170], 0;
_Tfcd:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2170];
	__asm        mov    sText.reference, eax;
_Tfde:
	__asm        cmp    dword ptr [ebp-0x2180], 0;
	__asm        je     _T1026;

	__asm        jmp    _Tff0;
_Tff0:
	__asm        jmp    _Tff5;
_Tff5:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2178], eax;
	__asm        mov    eax, [ebp-0x2180];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2178];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1026;
_T1026:
	__asm        mov    eax, [ebp-0x2180];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T1037;
_T1037:
	__asm        jmp    _T103c;
_T103c:
	__asm        jmp    _T1191;
_T1041:
	__asm        jmp    _T1046;
_T1046:
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2194], eax;
	__asm        cmp    dword ptr [ebp-0x2194], 0xFFFFFFFF;
	__asm        jne    _T10a0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2190], eax;
	__asm        mov    eax, [ebp-0x2190];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1091;
_T1091:
	exit(0x1);
	__asm        jmp    _T10a0;
_T10a0:
	__asm        jmp    _T10a5;
_T10a5:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T10d6;

	__asm        cmp    dword ptr [ebp-0x2194], 0;
	__asm        je     _T1137;

	__asm        jmp    _T10c4;
_T10c4:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2194];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1137;
_T10d6:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2188], eax;
	__asm        cmp    dword ptr [ebp-0x2188], 0;
	__asm        je     _T1117;

	__asm        mov    eax, [ebp-0x2194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2188];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2184], eax;
	__asm        jmp    _T1121;
_T1117:
	__asm        mov    dword ptr [ebp-0x2184], 0;
_T1121:
	__asm        lea    ecx, sText.c_str_ptr;
	__asm        call   basic_string<char>::delete_ref;
	__asm        mov    eax, [ebp-0x2184];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T1176;
_T1137:
	__asm        cmp    dword ptr [ebp-0x2194], 0;
	__asm        je     _T1176;

	__asm        jmp    _T1149;
_T1149:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x218C], eax;
	__asm        mov    eax, [ebp-0x2194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2154];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x218C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1176;
_T1176:
	__asm        mov    eax, [ebp-0x2194];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1187;
_T1187:
	__asm        jmp    _T118c;
_T118c:
	__asm        jmp    _T1191;
// LINE 1108:
_T1191:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0x48];
// LINE 1109:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1110:
	__asm        mov    eax, tempButtonWindow2;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow2;
	__asm        call   dword ptr [eax+4];
// LINE 1112:
	GraphicWindow::MakeModal(this);
// LINE 1113:
	GraphicWindow::MakeFocus(this);
// LINE 1115:
	__asm        mov    dword ptr [ebp-0xF8], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1249;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T1249;

	__asm        mov    ecx, [ebp-0x108];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1230;
_T1230:
	__asm        mov    eax, [ebp-0x108];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1244;
_T1244:
	__asm        jmp    _T1249;
_T1249:
	__asm        jmp    _T124e;
_T124e:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T127c;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x100], eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T127c:
	__asm        jmp    _T1281;
_T1281:
	__asm        mov    eax, [ebp-0xF8];
	__asm        jmp    __RETURN;
// LINE 1116:
__RETURN:
}

// FUNCTION: COPTER_D 0x00456f10
long SoundSettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1124:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T45;
// LINE 1125:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T45;
// LINE 1126:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1128:
_T45:
	return 0x1;
// LINE 1129:
}

// FUNCTION: COPTER_D 0x00456f66
int32_t SoundSettingsWindow::SetCurrentVolumeSettings(/*packed*/ struct SoundPreferences& newSoundPreferences) {
// LINE 1137:
	__asm        mov    eax, newSoundPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSoundValueToSliderValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetValue;
// LINE 1141:
	return 0x1;
// LINE 1142:
}

// FUNCTION: COPTER_D 0x00456f9d
int32_t SoundSettingsWindow::SetCurrentRadioSettings(/*packed*/ struct RadioPreferences& newRadioPreferences, long lCurrentStations) {
// LINE 1151:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   SoundSettingsWindow::ConvertSoundValueToSliderValue;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 1152:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T40;
// LINE 1153:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 1156:
_T40:
	__asm        mov    eax, lCurrentStations;
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1157:
	__asm        mov    eax, newRadioPreferences;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetValue;
// LINE 1160:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T90;
// LINE 1161:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1162:
	__asm        jmp    _Tac;
// LINE 1163:
_T90:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1166:
_Tac:
	__asm        mov    eax, newRadioPreferences;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     _Tda;
// LINE 1167:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1168:
	__asm        jmp    _Tf6;
// LINE 1169:
_Tda:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC8];
// LINE 1179:
_Tf6:
	return 0x1;
// LINE 1180:
}

// FUNCTION: COPTER_D 0x004570a4
void SoundSettingsWindow::GetCurrentVolumeSettings(/*packed*/ struct SoundPreferences& currentSoundPreferences) {
// LINE 1187:
	currentSoundPreferences.lMasterVolume = this->myMasterVolumeSliderWindow->SliderWindow::GetValue();
// LINE 1189:
	currentSoundPreferences.lMasterVolume = SoundSettingsWindow::ConvertSliderValueToSoundValue(currentSoundPreferences.lMasterVolume);
// LINE 1193:
	return;
}

// FUNCTION: COPTER_D 0x004570df
void SoundSettingsWindow::GetCurrentRadioSettings(/*packed*/ struct RadioPreferences& currentRadioPreferences) {
// LINE 1200:
	currentRadioPreferences.lVolume = this->myRadioVolumeSliderWindow->SliderWindow::GetValue();
// LINE 1201:
	__asm        mov    eax, currentRadioPreferences;
	__asm        cmp    dword ptr [eax], 0x258;
	__asm        jge    _T34;
// LINE 1202:
	currentRadioPreferences.lVolume = 0x140;
// LINE 1203:
_T34:
	__asm        mov    eax, currentRadioPreferences;
	__asm        cmp    dword ptr [eax], 0x140;
	__asm        je     _T52;

	currentRadioPreferences.bPreferToBeOn = 0x1;
	__asm        jmp    _T5c;
_T52:
	currentRadioPreferences.bPreferToBeOn = 0x0;
// LINE 1205:
_T5c:
	currentRadioPreferences.lVolume = SoundSettingsWindow::ConvertSliderValueToSoundValue(currentRadioPreferences.lVolume);
// LINE 1206:
	currentRadioPreferences.lCurrentStation = this->myRadioStationSliderWindow->SliderWindow::GetValue();
// LINE 1207:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    _Tb2;

	currentRadioPreferences.bOptionDJ = 0x1;
	__asm        jmp    _Tbc;
_Tb2:
	currentRadioPreferences.bOptionDJ = 0x0;
// LINE 1208:
_Tbc:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xCC];
	__asm        cmp    eax, 2;
	__asm        jne    _Tee;

	currentRadioPreferences.bOptionCommercials = 0x1;
	__asm        jmp    _Tf8;
_Tee:
	currentRadioPreferences.bOptionCommercials = 0x0;
// LINE 1210:
_Tf8:
	currentRadioPreferences.bOptionPlayEnglishIfDefaultLanguageNotFound = 0x1;
// LINE 1211:
	return;
}

// FUNCTION: COPTER_D 0x004571ed
int32_t SoundSettingsWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1220:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T8e;
// LINE 1222:
_T17:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T46;
// LINE 1223:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1224:
_T46:
	return 0x1;
// LINE 1227:
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T7f;
// LINE 1228:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1229:
_T7f:
	return 0x1;
// LINE 1230:
	__asm        jmp    _Ta7;
_T8e:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     _T17;

	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     _T50;

	__asm        jmp    _Ta7;
// LINE 1232:
_Ta7:
	return 0x0;
// LINE 1233:
}

// FUNCTION: COPTER_D 0x004572a2
long SoundSettingsWindow::ConvertSoundValueToSliderValue(long lSoundValue) {
// LINE 1247:
	__asm        fld    qword ptr ds:[0x58FDB0];
	__asm        mov    eax, lSoundValue;
	__asm        mov    [ebp-4], eax;
	__asm        fisub  dword ptr [ebp-4];
	__asm        fdiv   qword ptr ds:[0x58FDB8];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        push   0x40000000;
	__asm        push   0;
	__asm        call   0x0056F380;
	__asm        add    esp, 0x10;
	__asm        fdivr  qword ptr ds:[0x58FDB0];
	__asm        call   0x0056EBE8;
	__asm        jmp    __RETURN;
// LINE 1254:
__RETURN:
}

// FUNCTION: COPTER_D 0x004572ea
long SoundSettingsWindow::ConvertSliderValueToSoundValue(long lSliderValue) {
// LINE 1276:
	__asm        fld    qword ptr ds:[0x58FDB0];
	__asm        mov    eax, lSliderValue;
	__asm        mov    [ebp-4], eax;
	__asm        fidiv  dword ptr [ebp-4];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F38A;
	__asm        add    esp, 8;
	__asm        fdiv   qword ptr ds:[0x58FDC8];
	__asm        fmul   qword ptr ds:[0x58FDB8];
	__asm        fsubr  qword ptr ds:[0x58FDB0];
	__asm        call   0x0056EBE8;
	__asm        jmp    __RETURN;
// LINE 1283:
__RETURN:
}

// FUNCTION: COPTER_D 0x00457331
void CitySettingsWindow::CitySettingsWindow(/*packed*/ class MRect& rectNewPosition, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {
	/*bp-0x4*/   int32_t i;


	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_CITY_SETTINGS_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x58FDD0;
// LINE 1324:
_FOR_49:
	for (i = 0x0; (i < 0x8); i++) {
		// LINE 1325:
			__asm        mov    eax, i;
			__asm        mov    ecx, this;
			__asm        mov    dword ptr [ecx+eax*4+0x74], 0;
			__asm        jmp    _FOR_NEXT_49;
	}
// LINE 1326:
_T69:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004573a9
int32_t CitySettingsWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class TextWindow *tempTextWindow;
	/*bp-0x14*/  /*packed*/ class ButtonWindow *tempButtonWindow;

// LINE 1335:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x184], eax;
	__asm        cmp    dword ptr [ebp-0x184], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x184];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0x184];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T91;
// LINE 1338:
_T91:
	this->GraphicWindow::Initialize();
// LINE 1345:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T107;

	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    dword ptr [ebp-0x28], 0x2A;
	__asm        mov    dword ptr [ebp-0x24], 0x2F;
	__asm        mov    dword ptr [ebp-0x20], 0x80;
	__asm        mov    dword ptr [ebp-0x1C], 0x46;
	__asm        jmp    _Tdc;
_Tdc:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14D;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T10e;
_T107:
	tempTextWindow = 0x0;
// LINE 1346:
_T10e:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1347:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1348:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1350:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1b0;

	__asm        jmp    _T164;
_T164:
	__asm        mov    dword ptr [ebp-0x3C], 0x34;
	__asm        mov    dword ptr [ebp-0x38], 0x147;
	__asm        mov    dword ptr [ebp-0x34], 0x88;
	__asm        mov    dword ptr [ebp-0x30], 0x15E;
	__asm        jmp    _T185;
_T185:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14E;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T1b7;
_T1b0:
	tempTextWindow = 0x0;
// LINE 1351:
_T1b7:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1352:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1353:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1355:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T259;

	__asm        jmp    _T20d;
_T20d:
	__asm        mov    dword ptr [ebp-0x50], 0xB3;
	__asm        mov    dword ptr [ebp-0x4C], 0x147;
	__asm        mov    dword ptr [ebp-0x48], 0x109;
	__asm        mov    dword ptr [ebp-0x44], 0x15E;
	__asm        jmp    _T22e;
_T22e:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x14F;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T260;
_T259:
	tempTextWindow = 0x0;
// LINE 1356:
_T260:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1357:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1358:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1360:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T302;

	__asm        jmp    _T2b6;
_T2b6:
	__asm        mov    dword ptr [ebp-0x64], 0xBB;
	__asm        mov    dword ptr [ebp-0x60], 0x2F;
	__asm        mov    dword ptr [ebp-0x5C], 0x111;
	__asm        mov    dword ptr [ebp-0x58], 0x45;
	__asm        jmp    _T2d7;
_T2d7:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x150;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T309;
_T302:
	tempTextWindow = 0x0;
// LINE 1361:
_T309:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1362:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1363:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1365:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T3ab;

	__asm        jmp    _T35f;
_T35f:
	__asm        mov    dword ptr [ebp-0x78], 0x13A;
	__asm        mov    dword ptr [ebp-0x74], 0x2F;
	__asm        mov    dword ptr [ebp-0x70], 0x190;
	__asm        mov    dword ptr [ebp-0x6C], 0x45;
	__asm        jmp    _T380;
_T380:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x151;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T3b2;
_T3ab:
	tempTextWindow = 0x0;
// LINE 1366:
_T3b2:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1367:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1368:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1370:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T460;

	__asm        jmp    _T408;
_T408:
	__asm        mov    dword ptr [ebp-0x8C], 0x143;
	__asm        mov    dword ptr [ebp-0x88], 0x147;
	__asm        mov    dword ptr [ebp-0x84], 0x198;
	__asm        mov    dword ptr [ebp-0x80], 0x15E;
	__asm        jmp    _T432;
_T432:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x152;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T467;
_T460:
	tempTextWindow = 0x0;
// LINE 1371:
_T467:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1372:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1373:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1375:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T521;

	__asm        jmp    _T4c3;
_T4c3:
	__asm        mov    dword ptr [ebp-0xA0], 0x1C4;
	__asm        mov    dword ptr [ebp-0x9C], 0x147;
	__asm        mov    dword ptr [ebp-0x98], 0x218;
	__asm        mov    dword ptr [ebp-0x94], 0x15E;
	__asm        jmp    _T4f0;
_T4f0:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x153;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T528;
_T521:
	tempTextWindow = 0x0;
// LINE 1376:
_T528:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1377:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1378:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1380:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     _T5e2;

	__asm        jmp    _T584;
_T584:
	__asm        mov    dword ptr [ebp-0xB4], 0x1CD;
	__asm        mov    dword ptr [ebp-0xB0], 0x2F;
	__asm        mov    dword ptr [ebp-0xAC], 0x220;
	__asm        mov    dword ptr [ebp-0xA8], 0x46;
	__asm        jmp    _T5b1;
_T5b1:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x154;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T5e9;
_T5e2:
	tempTextWindow = 0x0;
// LINE 1381:
_T5e9:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 1382:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 1383:
	__asm        push   0x603AB8;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 1388:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     _T6b0;

	__asm        jmp    _T645;
_T645:
	__asm        mov    dword ptr [ebp-0xC8], 0x2A;
	__asm        mov    dword ptr [ebp-0xC4], 0x60;
	__asm        mov    dword ptr [ebp-0xC0], 0x44;
	__asm        mov    dword ptr [ebp-0xBC], 0x12A;
	__asm        jmp    _T672;
_T672:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _T6bd;
_T6b0:
	this->mySliderWindows[0] = 0x0;
// LINE 1389:
_T6bd:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 1390:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1391:
	__asm        push   3;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1395:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     _T784;

	__asm        jmp    _T719;
_T719:
	__asm        mov    dword ptr [ebp-0xDC], 0x6F;
	__asm        mov    dword ptr [ebp-0xD8], 0x60;
	__asm        mov    dword ptr [ebp-0xD4], 0x89;
	__asm        mov    dword ptr [ebp-0xD0], 0x12A;
	__asm        jmp    _T746;
_T746:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   4;
	__asm        lea    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xCC];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _T791;
_T784:
	this->mySliderWindows[1] = 0x0;
// LINE 1396:
_T791:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 1397:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1398:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1402:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE0], eax;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     _T858;

	__asm        jmp    _T7ed;
_T7ed:
	__asm        mov    dword ptr [ebp-0xF0], 0xB3;
	__asm        mov    dword ptr [ebp-0xEC], 0x60;
	__asm        mov    dword ptr [ebp-0xE8], 0xCD;
	__asm        mov    dword ptr [ebp-0xE4], 0x12A;
	__asm        jmp    _T81a;
_T81a:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   5;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE0];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _T865;
_T858:
	this->mySliderWindows[2] = 0x0;
// LINE 1403:
_T865:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 1404:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1405:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1409:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xF4], eax;
	__asm        cmp    dword ptr [ebp-0xF4], 0;
	__asm        je     _T92f;

	__asm        jmp    _T8c1;
_T8c1:
	__asm        mov    dword ptr [ebp-0x104], 0xF8;
	__asm        mov    dword ptr [ebp-0x100], 0x60;
	__asm        mov    dword ptr [ebp-0xFC], 0x112;
	__asm        mov    dword ptr [ebp-0xF8], 0x12A;
	__asm        jmp    _T8ee;
_T8ee:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   6;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF4];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T93f;
_T92f:
	this->mySliderWindows[3] = 0x0;
// LINE 1410:
_T93f:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+4];
// LINE 1411:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1412:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1416:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _Ta15;

	__asm        jmp    _T9a7;
_T9a7:
	__asm        mov    dword ptr [ebp-0x118], 0x13C;
	__asm        mov    dword ptr [ebp-0x114], 0x60;
	__asm        mov    dword ptr [ebp-0x110], 0x156;
	__asm        mov    dword ptr [ebp-0x10C], 0x12A;
	__asm        jmp    _T9d4;
_T9d4:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   7;
	__asm        lea    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _Ta25;
_Ta15:
	this->mySliderWindows[4] = 0x0;
// LINE 1417:
_Ta25:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+4];
// LINE 1418:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1419:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1423:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _Tafb;

	__asm        jmp    _Ta8d;
_Ta8d:
	__asm        mov    dword ptr [ebp-0x12C], 0x181;
	__asm        mov    dword ptr [ebp-0x128], 0x60;
	__asm        mov    dword ptr [ebp-0x124], 0x19B;
	__asm        mov    dword ptr [ebp-0x120], 0x12A;
	__asm        jmp    _Taba;
_Taba:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   8;
	__asm        lea    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _Tb0b;
_Tafb:
	this->mySliderWindows[5] = 0x0;
// LINE 1424:
_Tb0b:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+4];
// LINE 1425:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1426:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1430:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _Tbe1;

	__asm        jmp    _Tb73;
_Tb73:
	__asm        mov    dword ptr [ebp-0x140], 0x1C6;
	__asm        mov    dword ptr [ebp-0x13C], 0x60;
	__asm        mov    dword ptr [ebp-0x138], 0x1E0;
	__asm        mov    dword ptr [ebp-0x134], 0x12A;
	__asm        jmp    _Tba0;
_Tba0:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   9;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _Tbf1;
_Tbe1:
	this->mySliderWindows[6] = 0x0;
// LINE 1431:
_Tbf1:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+4];
// LINE 1432:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1433:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1437:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     _Tcc7;

	__asm        jmp    _Tc59;
_Tc59:
	__asm        mov    dword ptr [ebp-0x154], 0x20A;
	__asm        mov    dword ptr [ebp-0x150], 0x60;
	__asm        mov    dword ptr [ebp-0x14C], 0x224;
	__asm        mov    dword ptr [ebp-0x148], 0x12A;
	__asm        jmp    _Tc86;
_Tc86:
	__asm        push   8;
	__asm        mov    eax, SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xA;
	__asm        lea    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x144];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    _Tcd7;
_Tcc7:
	this->mySliderWindows[7] = 0x0;
// LINE 1438:
_Tcd7:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+4];
// LINE 1439:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 1440:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 1443:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x158], eax;
	__asm        cmp    dword ptr [ebp-0x158], 0;
	__asm        je     _Td9a;

	__asm        jmp    _Td3f;
_Td3f:
	__asm        mov    dword ptr [ebp-0x168], 0x82;
	__asm        mov    dword ptr [ebp-0x164], 0x178;
	__asm        mov    dword ptr [ebp-0x160], 0x83;
	__asm        mov    dword ptr [ebp-0x15C], 0x179;
	__asm        jmp    _Td6c;
_Td6c:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x158];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _Tda1;
_Td9a:
	tempButtonWindow = 0x0;
// LINE 1444:
_Tda1:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x14b);
// LINE 1445:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        cmp    dword ptr [ebp-0x11A0], 0;
	__asm        jne    _T1282;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        jmp    _Te12;
_Te12:
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C8], eax;
	__asm        cmp    dword ptr [ebp-0x11C8], 0xFFFFFFFF;
	__asm        jne    _Te6c;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11B0], eax;
	__asm        mov    eax, [ebp-0x11B0];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Te5d;
_Te5d:
	exit(0x1);
	__asm        jmp    _Te6c;
_Te6c:
	__asm        jmp    _Te71;
_Te71:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tea2;

	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     _T103d;

	__asm        jmp    _Te90;
_Te90:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11C8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T103d;
_Tea2:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11A8], eax;
	__asm        cmp    dword ptr [ebp-0x11A8], 0;
	__asm        je     _Tfc2;

	__asm        cmp    dword ptr [ebp-0x11C8], 0xFFFFFFFF;
	__asm        jne    _Tf04;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tef5;
_Tef5:
	exit(0x1);
	__asm        jmp    _Tf04;
_Tf04:
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tf93;

	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11A8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11BC], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tf8e;
_Tf8e:
	__asm        jmp    _Tf9f;
_Tf93:
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    dword ptr [eax], 0;
_Tf9f:
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _Tfb1;
_Tfb1:
	__asm        mov    eax, [ebp-0x11A8];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        jmp    _Tfcc;
_Tfc2:
	__asm        mov    dword ptr [ebp-0x11A4], 0;
_Tfcc:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T102a;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11B8], eax;
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    [ebp-0x11B4], eax;
	__asm        cmp    dword ptr [ebp-0x11B4], 0;
	__asm        je     _T102a;

	__asm        mov    ecx, [ebp-0x11B4];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1011;
_T1011:
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1025;
_T1025:
	__asm        jmp    _T102a;
_T102a:
	__asm        jmp    _T102f;
_T102f:
	__asm        mov    eax, [ebp-0x11A4];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T107c;
_T103d:
	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     _T107c;

	__asm        jmp    _T104f;
_T104f:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11AC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T107c;
_T107c:
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T108d;
_T108d:
	__asm        jmp    _T1092;
_T1092:
	__asm        jmp    _T1097;
_T1097:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E8], eax;
	__asm        jmp    _T10af;
_T10af:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x11E8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T10fe;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T10ef;
_T10ef:
	exit(0x1);
	__asm        jmp    _T10fe;
_T10fe:
	__asm        jmp    _T1103;
_T1103:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1132;

	__asm        jmp    _T1115;
_T1115:
	__asm        jmp    _T111a;
_T111a:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x11E8];
	__asm        jae    _T121f;
_T1132:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11D0], eax;
	__asm        cmp    dword ptr [ebp-0x11D0], 0;
	__asm        je     _T11c0;

	__asm        jmp    _T1154;
_T1154:
	__asm        jmp    _T1159;
_T1159:
	__asm        jmp    _T115e;
_T115e:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1180;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        jmp    _T118f;

	__asm        jmp    _T118f;
_T1180:
	__asm        mov    dword ptr [ebp-0x11D8], 0;
	__asm        jmp    _T118f;
_T118f:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11D0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x11CC], eax;
	__asm        jmp    _T11ca;
_T11c0:
	__asm        mov    dword ptr [ebp-0x11CC], 0;
_T11ca:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1211;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    [ebp-0x11E0], eax;
	__asm        cmp    dword ptr [ebp-0x11E0], 0;
	__asm        je     _T1211;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11E0];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1211;
_T1211:
	__asm        jmp    _T1216;
_T1216:
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    sText.reference, eax;
_T121f:
	__asm        cmp    dword ptr [ebp-0x11E8], 0;
	__asm        je     _T1267;

	__asm        jmp    _T1231;
_T1231:
	__asm        jmp    _T1236;
_T1236:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11E8];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1267;
_T1267:
	__asm        mov    eax, [ebp-0x11E8];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T1278;
_T1278:
	__asm        jmp    _T127d;
_T127d:
	__asm        jmp    _T1558;
_T1282:
	__asm        jmp    _T1287;
_T1287:
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1218], eax;
	__asm        cmp    dword ptr [ebp-0x1218], 0xFFFFFFFF;
	__asm        jne    _T12e1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11F8], eax;
	__asm        mov    eax, [ebp-0x11F8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T12d2;
_T12d2:
	exit(0x1);
	__asm        jmp    _T12e1;
_T12e1:
	__asm        jmp    _T12e6;
_T12e6:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1317;

	__asm        cmp    dword ptr [ebp-0x1218], 0;
	__asm        je     _T14fe;

	__asm        jmp    _T1305;
_T1305:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1218];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T14fe;
_T1317:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11F0], eax;
	__asm        cmp    dword ptr [ebp-0x11F0], 0;
	__asm        je     _T1437;

	__asm        cmp    dword ptr [ebp-0x1218], 0xFFFFFFFF;
	__asm        jne    _T1379;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1214], eax;
	__asm        mov    eax, [ebp-0x1214];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T136a;
_T136a:
	exit(0x1);
	__asm        jmp    _T1379;
_T1379:
	__asm        mov    eax, [ebp-0x1218];
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1408;

	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11F0];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x120C], eax;
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1210], eax;
	__asm        mov    eax, [ebp-0x120C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1210];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1403;
_T1403:
	__asm        jmp    _T1414;
_T1408:
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    dword ptr [eax], 0;
_T1414:
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1426;
_T1426:
	__asm        mov    eax, [ebp-0x11F0];
	__asm        mov    [ebp-0x11EC], eax;
	__asm        jmp    _T1441;
_T1437:
	__asm        mov    dword ptr [ebp-0x11EC], 0;
_T1441:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T14eb;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1200], eax;
	__asm        mov    eax, [ebp-0x1200];
	__asm        mov    [ebp-0x11FC], eax;
	__asm        cmp    dword ptr [ebp-0x11FC], 0;
	__asm        je     _T14eb;

	__asm        mov    eax, [ebp-0x11FC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T14c8;

	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1204], eax;
	__asm        mov    eax, [ebp-0x1204];
	__asm        mov    [ebp-0x1208], eax;
	__asm        mov    eax, [ebp-0x1208];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11FC];
	__asm        mov    dword ptr [eax], 0;
_T14c8:
	__asm        jmp    _T14cd;
_T14cd:
	__asm        jmp    _T14d2;
_T14d2:
	__asm        mov    eax, [ebp-0x11FC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T14e6;
_T14e6:
	__asm        jmp    _T14eb;
_T14eb:
	__asm        jmp    _T14f0;
_T14f0:
	__asm        mov    eax, [ebp-0x11EC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T153d;
_T14fe:
	__asm        cmp    dword ptr [ebp-0x1218], 0;
	__asm        je     _T153d;

	__asm        jmp    _T1510;
_T1510:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11F4], eax;
	__asm        mov    eax, [ebp-0x1218];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x119C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11F4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T153d;
_T153d:
	__asm        mov    eax, [ebp-0x1218];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T154e;
_T154e:
	__asm        jmp    _T1553;
_T1553:
	__asm        jmp    _T1558;
// LINE 1446:
_T1558:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1447:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1448:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1450:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x16C], eax;
	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        je     _T160a;

	__asm        jmp    _T15af;
_T15af:
	__asm        mov    dword ptr [ebp-0x17C], 0x16C;
	__asm        mov    dword ptr [ebp-0x178], 0x178;
	__asm        mov    dword ptr [ebp-0x174], 0x16D;
	__asm        mov    dword ptr [ebp-0x170], 0x179;
	__asm        jmp    _T15dc;
_T15dc:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x17C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x16C];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T1611;
_T160a:
	tempButtonWindow = 0x0;
// LINE 1451:
_T1611:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x14c);
// LINE 1452:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x221C], eax;
	__asm        cmp    dword ptr [ebp-0x221C], 0;
	__asm        jne    _T1a2a;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x221C], eax;
	__asm        jmp    _T1682;
_T1682:
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2238], eax;
	__asm        cmp    dword ptr [ebp-0x2238], 0xFFFFFFFF;
	__asm        jne    _T16dc;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x222C], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T16cd;
_T16cd:
	exit(0x1);
	__asm        jmp    _T16dc;
_T16dc:
	__asm        jmp    _T16e1;
_T16e1:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1712;

	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     _T17ce;

	__asm        jmp    _T1700;
_T1700:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2238];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T17ce;
_T1712:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2224], eax;
	__asm        cmp    dword ptr [ebp-0x2224], 0;
	__asm        je     _T1753;

	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2224];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2220], eax;
	__asm        jmp    _T175d;
_T1753:
	__asm        mov    dword ptr [ebp-0x2220], 0;
_T175d:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T17bb;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        mov    [ebp-0x2230], eax;
	__asm        cmp    dword ptr [ebp-0x2230], 0;
	__asm        je     _T17bb;

	__asm        mov    ecx, [ebp-0x2230];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T17a2;
_T17a2:
	__asm        mov    eax, [ebp-0x2230];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T17b6;
_T17b6:
	__asm        jmp    _T17bb;
_T17bb:
	__asm        jmp    _T17c0;
_T17c0:
	__asm        mov    eax, [ebp-0x2220];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T180d;
_T17ce:
	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     _T180d;

	__asm        jmp    _T17e0;
_T17e0:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2228], eax;
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2228];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T180d;
_T180d:
	__asm        mov    eax, [ebp-0x2238];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T181e;
_T181e:
	__asm        jmp    _T1823;
_T1823:
	__asm        jmp    _T1828;
_T1828:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2258], eax;
	__asm        jmp    _T1840;
_T1840:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2258];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T188f;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x224C], eax;
	__asm        mov    eax, [ebp-0x224C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1880;
_T1880:
	exit(0x1);
	__asm        jmp    _T188f;
_T188f:
	__asm        jmp    _T1894;
_T1894:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T18c3;

	__asm        jmp    _T18a6;
_T18a6:
	__asm        jmp    _T18ab;
_T18ab:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2258];
	__asm        jae    _T19c7;
_T18c3:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2240], eax;
	__asm        cmp    dword ptr [ebp-0x2240], 0;
	__asm        je     _T1951;

	__asm        jmp    _T18e5;
_T18e5:
	__asm        jmp    _T18ea;
_T18ea:
	__asm        jmp    _T18ef;
_T18ef:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1911;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2248], eax;
	__asm        jmp    _T1920;

	__asm        jmp    _T1920;
_T1911:
	__asm        mov    dword ptr [ebp-0x2248], 0;
	__asm        jmp    _T1920;
_T1920:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2248];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2240];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x223C], eax;
	__asm        jmp    _T195b;
_T1951:
	__asm        mov    dword ptr [ebp-0x223C], 0;
_T195b:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T19b9;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2254], eax;
	__asm        mov    eax, [ebp-0x2254];
	__asm        mov    [ebp-0x2250], eax;
	__asm        cmp    dword ptr [ebp-0x2250], 0;
	__asm        je     _T19b9;

	__asm        mov    ecx, [ebp-0x2250];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T19a0;
_T19a0:
	__asm        mov    eax, [ebp-0x2250];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T19b4;
_T19b4:
	__asm        jmp    _T19b9;
_T19b9:
	__asm        jmp    _T19be;
_T19be:
	__asm        mov    eax, [ebp-0x223C];
	__asm        mov    sText.reference, eax;
_T19c7:
	__asm        cmp    dword ptr [ebp-0x2258], 0;
	__asm        je     _T1a0f;

	__asm        jmp    _T19d9;
_T19d9:
	__asm        jmp    _T19de;
_T19de:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2244], eax;
	__asm        mov    eax, [ebp-0x2258];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1a0f;
_T1a0f:
	__asm        mov    eax, [ebp-0x2258];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T1a20;
_T1a20:
	__asm        jmp    _T1a25;
_T1a25:
	__asm        jmp    _T1d00;
_T1a2a:
	__asm        jmp    _T1a2f;
_T1a2f:
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2288], eax;
	__asm        cmp    dword ptr [ebp-0x2288], 0xFFFFFFFF;
	__asm        jne    _T1a89;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2268], eax;
	__asm        mov    eax, [ebp-0x2268];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1a7a;
_T1a7a:
	exit(0x1);
	__asm        jmp    _T1a89;
_T1a89:
	__asm        jmp    _T1a8e;
_T1a8e:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1abf;

	__asm        cmp    dword ptr [ebp-0x2288], 0;
	__asm        je     _T1ca6;

	__asm        jmp    _T1aad;
_T1aad:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2288];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1ca6;
_T1abf:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2260], eax;
	__asm        cmp    dword ptr [ebp-0x2260], 0;
	__asm        je     _T1bdf;

	__asm        cmp    dword ptr [ebp-0x2288], 0xFFFFFFFF;
	__asm        jne    _T1b21;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2284], eax;
	__asm        mov    eax, [ebp-0x2284];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1b12;
_T1b12:
	exit(0x1);
	__asm        jmp    _T1b21;
_T1b21:
	__asm        mov    eax, [ebp-0x2288];
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1bb0;

	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x2260];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x227C], eax;
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2280], eax;
	__asm        mov    eax, [ebp-0x227C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2280];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1bab;
_T1bab:
	__asm        jmp    _T1bbc;
_T1bb0:
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    dword ptr [eax], 0;
_T1bbc:
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1bce;
_T1bce:
	__asm        mov    eax, [ebp-0x2260];
	__asm        mov    [ebp-0x225C], eax;
	__asm        jmp    _T1be9;
_T1bdf:
	__asm        mov    dword ptr [ebp-0x225C], 0;
_T1be9:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1c93;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2270], eax;
	__asm        mov    eax, [ebp-0x2270];
	__asm        mov    [ebp-0x226C], eax;
	__asm        cmp    dword ptr [ebp-0x226C], 0;
	__asm        je     _T1c93;

	__asm        mov    eax, [ebp-0x226C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1c70;

	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2274], eax;
	__asm        mov    eax, [ebp-0x2274];
	__asm        mov    [ebp-0x2278], eax;
	__asm        mov    eax, [ebp-0x2278];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x226C];
	__asm        mov    dword ptr [eax], 0;
_T1c70:
	__asm        jmp    _T1c75;
_T1c75:
	__asm        jmp    _T1c7a;
_T1c7a:
	__asm        mov    eax, [ebp-0x226C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1c8e;
_T1c8e:
	__asm        jmp    _T1c93;
_T1c93:
	__asm        jmp    _T1c98;
_T1c98:
	__asm        mov    eax, [ebp-0x225C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T1ce5;
_T1ca6:
	__asm        cmp    dword ptr [ebp-0x2288], 0;
	__asm        je     _T1ce5;

	__asm        jmp    _T1cb8;
_T1cb8:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2264], eax;
	__asm        mov    eax, [ebp-0x2288];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2264];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ce5;
_T1ce5:
	__asm        mov    eax, [ebp-0x2288];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1cf6;
_T1cf6:
	__asm        jmp    _T1cfb;
_T1cfb:
	__asm        jmp    _T1d00;
// LINE 1453:
_T1d00:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 1454:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 1455:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 1457:
	GraphicWindow::MakeModal(this);
// LINE 1458:
	GraphicWindow::MakeFocus(this);
// LINE 1460:
	__asm        mov    dword ptr [ebp-0x180], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1e04;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x194], eax;
	__asm        mov    eax, [ebp-0x194];
	__asm        mov    [ebp-0x190], eax;
	__asm        cmp    dword ptr [ebp-0x190], 0;
	__asm        je     _T1e04;

	__asm        mov    eax, [ebp-0x190];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1de1;

	__asm        mov    eax, [ebp-0x190];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x198], eax;
	__asm        mov    eax, [ebp-0x198];
	__asm        mov    [ebp-0x19C], eax;
	__asm        mov    eax, [ebp-0x19C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x190];
	__asm        mov    dword ptr [eax], 0;
_T1de1:
	__asm        jmp    _T1de6;
_T1de6:
	__asm        jmp    _T1deb;
_T1deb:
	__asm        mov    eax, [ebp-0x190];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1dff;
_T1dff:
	__asm        jmp    _T1e04;
_T1e04:
	__asm        jmp    _T1e09;
_T1e09:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T1e37;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x188], eax;
	__asm        mov    eax, [ebp-0x188];
	__asm        mov    [ebp-0x18C], eax;
	__asm        mov    eax, [ebp-0x18C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1e37:
	__asm        jmp    _T1e3c;
_T1e3c:
	__asm        mov    eax, [ebp-0x180];
	__asm        jmp    __RETURN;
// LINE 1461:
__RETURN:
}

// FUNCTION: COPTER_D 0x004591f5
void CitySettingsWindow::SetCurrentCitySettings(/*packed*/ struct tagCitySettings *newCitySettings) {
// LINE 1470:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetValue;
// LINE 1471:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetValue;
// LINE 1472:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 1473:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x80];
	__asm        call   SliderWindow::SetValue;
// LINE 1474:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x84];
	__asm        call   SliderWindow::SetValue;
// LINE 1475:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x88];
	__asm        call   SliderWindow::SetValue;
// LINE 1476:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   SliderWindow::SetValue;
// LINE 1477:
	__asm        mov    eax, newCitySettings;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   SliderWindow::SetValue;
// LINE 1478:
	return;
}

// FUNCTION: COPTER_D 0x004592ab
void CitySettingsWindow::GetCurrentCitySettings(/*packed*/ struct tagCitySettings *currentCitySettings) {
// LINE 1486:
	currentCitySettings->lDifficulty = this->mySliderWindows[0]->SliderWindow::GetValue();
// LINE 1487:
	currentCitySettings->lMissionFrequencyFire = this->mySliderWindows[1]->SliderWindow::GetValue();
// LINE 1488:
	currentCitySettings->lMissionFrequencyCrime = this->mySliderWindows[2]->SliderWindow::GetValue();
// LINE 1489:
	currentCitySettings->lMissionFrequencyRescue = this->mySliderWindows[3]->SliderWindow::GetValue();
// LINE 1490:
	currentCitySettings->lMissionFrequencyRiot = this->mySliderWindows[4]->SliderWindow::GetValue();
// LINE 1491:
	currentCitySettings->lMissionFrequencyTraffic = this->mySliderWindows[5]->SliderWindow::GetValue();
// LINE 1492:
	currentCitySettings->lMissionFrequencyMedEvac = this->mySliderWindows[6]->SliderWindow::GetValue();
// LINE 1493:
	currentCitySettings->lMissionFrequencyTransport = this->mySliderWindows[7]->SliderWindow::GetValue();
// LINE 1494:
	return;
}

// FUNCTION: COPTER_D 0x00459359
int32_t CitySettingsWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 1504:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T8e;
// LINE 1506:
_T17:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T46;
// LINE 1507:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1508:
_T46:
	return 0x1;
// LINE 1511:
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T7f;
// LINE 1512:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1513:
_T7f:
	return 0x1;
// LINE 1514:
	__asm        jmp    _Ta7;
_T8e:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     _T17;

	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     _T50;

	__asm        jmp    _Ta7;
// LINE 1516:
_Ta7:
	return 0x0;
// LINE 1517:
}

// FUNCTION: COPTER_D 0x0045940e
long CitySettingsWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 1523:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T45;
// LINE 1524:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T45;
// LINE 1525:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 1527:
_T45:
	return 0x1;
// LINE 1528:
}

// FUNCTION: COPTER_D 0x00459464
void PopupMenuExtra::PopupMenuExtra(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PopupMenuWindow::PopupMenuWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCC], 0;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T8b;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T7a;
_T7a:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    _T98;
_T8b:
	this->myBackgroundImageFileName.reference = 0x0;
_T98:
	this->myBackgroundImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _Taa;
_Taa:
	this-><PopupMenuExtra+0x00> = 0x58fe98;
// LINE 1551:
	__asm        push   0x603AB8;
	__asm        push   0x603AB0;
	__asm        mov    ecx, this;
	__asm        call   ListBoxWindow::SetTextColor;
// LINE 1552:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     _T259;
// LINE 1553:
	__asm        jmp    _Td4;
_Td4:
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T11f;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T110;
_T110:
	exit(0x1);
	__asm        jmp    _T11f;
_T11f:
	__asm        jmp    _T124;
_T124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T15b;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T205;

	__asm        jmp    _T146;
_T146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T205;
_T15b:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T18a;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T191;
_T18a:
	__asm        mov    dword ptr [ebp-4], 0;
_T191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1ef;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1ef;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1d9;
_T1d9:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1ea;
_T1ea:
	__asm        jmp    _T1ef;
_T1ef:
	__asm        jmp    _T1f4;
_T1f4:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    _T23b;
_T205:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T23b;

	__asm        jmp    _T214;
_T214:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T23b;
_T23b:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T24f;
_T24f:
	__asm        jmp    _T254;
// LINE 1554:
_T254:
	__asm        jmp    _T3e6;
// LINE 1555:
_T259:
	__asm        mov    eax, SZ_POPUP_EXTRA_BACKGROUND_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T266;
_T266:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    _T2b1;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T2a2;
_T2a2:
	exit(0x1);
	__asm        jmp    _T2b1;
_T2b1:
	__asm        jmp    _T2b6;
_T2b6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2ed;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T397;

	__asm        jmp    _T2d8;
_T2d8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T397;
_T2ed:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T31c;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T323;
_T31c:
	__asm        mov    dword ptr [ebp-0x20], 0;
_T323:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T381;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T381;

	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T36b;
_T36b:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T37c;
_T37c:
	__asm        jmp    _T381;
_T381:
	__asm        jmp    _T386;
_T386:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], eax;
	__asm        jmp    _T3cd;
_T397:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3cd;

	__asm        jmp    _T3a6;
_T3a6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3cd;
_T3cd:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xD4];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3e1;
_T3e1:
	__asm        jmp    _T3e6;
// LINE 1556:
_T3e6:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00459859
void PopupMenuExtra::~PopupMenuExtra() {

	this-><PopupMenuExtra+0x00> = 0x58fe98;
// LINE 1563:
	this->PopupMenuExtra::DestroyImage();
// LINE 1564:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xD0], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xD0];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	__asm        jmp    _Tef;
_Tef:
	__asm        jmp    _Tf4;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x8C;
	__asm        call   MFont::~MFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T11b;
_T11b:
	__asm        jmp    _T120;
_T120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T136;
_T136:
	__asm        jmp    _T13b;
_T13b:
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x2C], eax;
_LOOP_147:
	for (;;) {
		_LOOP_147:
			__asm        mov    eax, [ebp-0x28];
			__asm        cmp    [ebp-0x2C], eax;
			__asm        jne    _T15d;

			__asm        jmp    _T171;

			__asm        jmp    _T15d;
		_T15d:
			__asm        jmp    _T16c;

			__asm        cmp    dword ptr [ebp-0x20], 0;
			__asm        jne    _T171;
		_T16c:
			__asm        jmp    _T176;
		_T171:
			__asm        jmp    _T1b7;
		_T176:
			__asm        jmp    _T185;

			__asm        cmp    dword ptr [ebp-0x24], 0;
			__asm        je     _T1b7;
		_T185:
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    [ebp-0x1C], eax;
			__asm        mov    eax, [ebp-0x2C];
			__asm        mov    eax, [eax];
			__asm        mov    [ebp-0x2C], eax;
			__asm        jmp    _T198;
		_T198:
			__asm        mov    eax, [ebp-0x1C];
			__asm        mov    [ebp-0x18], eax;
			__asm        jmp    _T1a3;
		_T1a3:
			__asm        mov    eax, [ebp-0x18];
			__asm        push   eax;
			__asm        mov    ecx, this;
			__asm        add    ecx, 0x74;
			__asm        call   list<basic_string<char>>::erase;
			__asm        jmp    _LOOP_147;
	}
_T1b7:
	__asm        jmp    _T1bc;
_T1bc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, list<basic_string<char>>::free_list;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    list<basic_string<char>>::free_list, eax;
	__asm        jmp    _T1dc;
_T1dc:
	__asm        dec    list<basic_string<char>>::number_of_lists;
	__asm        jne    _T266;
__WHILE_1e8:
	while ((list<basic_string<char>>::buffer_list != 0x0)) {

			__asm        mov    eax, list<basic_string<char>>::buffer_list;
			__asm        mov    [ebp-0x30], eax;
			__asm        mov    eax, list<basic_string<char>>::buffer_list;
			__asm        mov    eax, [eax];
			__asm        mov    list<basic_string<char>>::buffer_list, eax;
			__asm        mov    eax, [ebp-0x30];
			__asm        mov    eax, [eax+4];
			__asm        mov    [ebp-0x34], eax;
			__asm        mov    eax, [ebp-0x34];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T223;
		_T223:
			__asm        jmp    _T228;
		_T228:
			__asm        mov    eax, [ebp-0x30];
			__asm        push   eax;
			__asm        call   operator delete;
			__asm        add    esp, 4;
			__asm        jmp    _T239;
		_T239:
			__asm        jmp    _T23e;
		_T23e:
	}
_T243:
	list<basic_string<char>>::free_list = 0x0;
	list<basic_string<char>>::next_avail = 0x0;
	list<basic_string<char>>::last = 0x0;
	__asm        jmp    _T266;
_T266:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x00459ad1
int32_t PopupMenuExtra::Initialize() {
// LINE 1571:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x15C];
// LINE 1572:
	return this->PopupMenuWindow::Initialize();
// LINE 1573:
}

// FUNCTION: COPTER_D 0x00459afd
int32_t PopupMenuExtra::DrawSelf() {
	/*bp-0x10*/  /*packed*/ class MRect rectCurrentText; // 0x10 bytes
	/*bp-0x14*/  long lSourceWidth;
	/*bp-0x24*/  /*packed*/ class MRect rectHighlighted; // 0x10 bytes
	/*bp-0x28*/  /*packed*/ class list<basic_string<char>>::iterator tempStringListIterator;
	/*bp-0x2c*/  int32_t i;
	/*bp-0x30*/  long lEndXPosition;
	/*bp-0x34*/  int32_t j;
	/*bp-0x38*/  long lCurrentXPosition;

// LINE 1585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _T2b;
_T2b:
	__asm        jmp    _T30;
// LINE 1586:
_T30:
	__asm        jmp    _T35;
_T35:
	__asm        jmp    _T3a;
// LINE 1587:
_T3a:
	__asm        jmp    _T3f;
_T3f:
	__asm        jmp    _T44;
// LINE 1591:
_T44:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0;
	__asm        jne    _T5b;
// LINE 1592:
	return 0x0;
// LINE 1603:
_T5b:
	lEndXPosition = this-><PopupMenuExtra+0x28>;
// LINE 1604:
	__asm        jmp    _T6c;
_T6c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lSourceWidth, eax;
// LINE 1605:
	lCurrentXPosition = this-><PopupMenuExtra+0x20>;
// LINE 1607:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1608:
	lCurrentXPosition += lSourceWidth;
// LINE 1609:
__WHILE_e2:
	while (((lEndXPosition - lSourceWidth) > lCurrentXPosition)) {
		// LINE 1611:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        add    eax, lSourceWidth;
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x24];
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xCC];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0xCC];
			__asm        call   dword ptr [edx+0xC];
		// LINE 1612:
			lCurrentXPosition += lSourceWidth;
	}
// LINE 1615:
_T14b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1617:
_FOR_1ac:
	i = 0x1;
	__asm        jmp    _FOR_COND_1ac;
_FOR_NEXT_1ac:
	i++;
_FOR_COND_1ac:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        dec    eax;
	__asm        cmp    eax, i;
	__asm        jle    _T359;
// LINE 1618:
	lCurrentXPosition = this-><PopupMenuExtra+0x20>;
// LINE 1620:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1621:
	lCurrentXPosition += lSourceWidth;
// LINE 1622:
__WHILE_248:
	while (((lEndXPosition - lSourceWidth) > lCurrentXPosition)) {
		// LINE 1624:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0xB8];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        add    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        imul   eax, i;
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x24];
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xCC];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0xCC];
			__asm        call   dword ptr [edx+0xC];
		// LINE 1625:
			lCurrentXPosition += lSourceWidth;
	}
// LINE 1628:
_T2d8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1629:
	__asm        jmp    _FOR_NEXT_1ac;
// LINE 1630:
_T359:
	lCurrentXPosition = this-><PopupMenuExtra+0x20>;
// LINE 1632:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1633:
	lCurrentXPosition += lSourceWidth;
// LINE 1634:
__WHILE_3f4:
	while (((lEndXPosition - lSourceWidth) > lCurrentXPosition)) {
		// LINE 1636:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0xB8];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0xB8];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        add    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0xB8];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xB8];
			__asm        imul   eax, i;
			__asm        mov    ecx, this;
			__asm        add    eax, [ecx+0x24];
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xCC];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0xCC];
			__asm        call   dword ptr [edx+0xC];
		// LINE 1637:
			lCurrentXPosition += lSourceWidth;
	}
// LINE 1640:
_T49c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xB8];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB8];
	__asm        imul   eax, i;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+0xC];
// LINE 1645:
	rectCurrentText.left = (this-><PopupMenuExtra+0x20> + 0xa);
// LINE 1646:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    rectCurrentText.right, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x6C], eax;
// LINE 1648:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T56b;
// LINE 1651:
_T56b:
	i = 0x0;
// LINE 1652:
__WHILE_572:
	while ((this->lFirstVisibleLine > i)) {

			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x74];
			__asm        mov    [ebp-0x60], eax;
			__asm        mov    eax, [ebp-0x60];
			__asm        mov    [ebp-0x3C], eax;
			__asm        jmp    _T59e;
		_T59e:
			__asm        jmp    _T5a3;
		_T5a3:
			__asm        mov    eax, [ebp-0x3C];
			__asm        cmp    tempStringListIterator.node, eax;
			__asm        jne    _T5b9;

			__asm        jmp    _T5cd;

			__asm        jmp    _T5b9;
		_T5b9:
			__asm        jmp    _T5c8;

			__asm        cmp    dword ptr [ebp-0x64], 0;
			__asm        jne    _T5cd;
		_T5c8:
			__asm        jmp    _T5d2;
		_T5cd:
			__asm        jmp    _T607;
		_T5d2:
			__asm        jmp    _T5e1;

			__asm        cmp    dword ptr [ebp-0x68], 0;
			__asm        je     _T607;
		// LINE 1653:
		_T5e1:
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    [ebp-0x74], eax;
			__asm        mov    eax, tempStringListIterator.node;
			__asm        mov    eax, [eax];
			__asm        mov    tempStringListIterator.node, eax;
			__asm        jmp    _T5f4;
		_T5f4:
			__asm        mov    eax, [ebp-0x74];
			__asm        mov    [ebp-0x40], eax;
			__asm        jmp    _T5ff;
		// LINE 1654:
		_T5ff:
			i++;
	}
// LINE 1658:
_T607:
	j = 0x0;
// LINE 23:
_FOR_613:
	__asm        jmp    _FOR_COND_613;
// LINE 1658:
_FOR_NEXT_613:
	j++;
_FOR_COND_613:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T62d;
_T62d:
	__asm        jmp    _T632;
_T632:
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    tempStringListIterator.node, eax;
	__asm        jne    _T648;

	__asm        jmp    _T65c;

	__asm        jmp    _T648;
_T648:
	__asm        jmp    _T657;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T65c;
_T657:
	__asm        jmp    _T661;
_T65c:
	__asm        jmp    _Taec;
_T661:
	__asm        jmp    _T670;

	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _Taec;
_T670:
	__asm        mov    eax, this;
	__asm        mov    ecx, j;
	__asm        cmp    [eax+0xB0], ecx;
	__asm        jle    _Taec;
// LINE 1659:
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        jne    _T8ce;
// LINE 1660:
	rectCurrentText.top = ((this->lLineHeight * j) + this-><PopupMenuExtra+0x24>);
// LINE 1661:
	rectCurrentText.bottom = (rectCurrentText.top + this->lLineHeight);
// LINE 1662:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    _T6e6;
// LINE 1663:
	rectCurrentText.bottom = this-><PopupMenuExtra+0x2c>;
// LINE 1664:
_T6e6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T709;
// LINE 1667:
_T709:
	__asm        jmp    _T70e;
_T70e:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T74c;

	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T74c:
	__asm        jmp    _T751;
_T751:
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T774;
_T774:
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T810;

	__asm        jmp    _T78c;
_T78c:
	__asm        jmp    _T791;
_T791:
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T7bf;

	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T7ce;

	__asm        jmp    _T7ce;
_T7bf:
	__asm        mov    dword ptr [ebp-0x90], 0;
	__asm        jmp    _T7ce;
_T7ce:
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T810;
_T810:
	__asm        jmp    _T815;
_T815:
	__asm        mov    byte ptr [ebp-0x80], 0;
	__asm        jmp    _T81e;
_T81e:
	__asm        lea    eax, [ebp-0x80];
	__asm        mov    [ebp-0x88], eax;
	__asm        jmp    _T82c;
_T82c:
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T85b;
_T85b:
	__asm        jmp    _T860;
_T860:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x50], eax;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T8c9;
// LINE 1670:
_T8c9:
	__asm        jmp    _Tac6;
// LINE 1671:
_T8ce:
	rectCurrentText.top = ((this->lLineHeight * j) + this-><PopupMenuExtra+0x24>);
// LINE 1672:
	rectCurrentText.bottom = (rectCurrentText.top + this->lLineHeight);
// LINE 1673:
	__asm        mov    eax, this;
	__asm        mov    ecx, rectCurrentText.bottom;
	__asm        cmp    [eax+0x2C], ecx;
	__asm        jge    _T91a;
// LINE 1674:
	rectCurrentText.bottom = this-><PopupMenuExtra+0x2c>;
// LINE 1677:
_T91a:
	__asm        jmp    _T91f;
_T91f:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T963;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T963:
	__asm        jmp    _T968;
_T968:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xC0];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T98b;
_T98b:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Ta27;

	__asm        jmp    _T9a3;
_T9a3:
	__asm        jmp    _T9a8;
_T9a8:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T9d6;

	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB4], eax;
	__asm        jmp    _T9e5;

	__asm        jmp    _T9e5;
_T9d6:
	__asm        mov    dword ptr [ebp-0xB4], 0;
	__asm        jmp    _T9e5;
_T9e5:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xB8], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xB8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Ta27;
_Ta27:
	__asm        jmp    _Ta2c;
_Ta2c:
	__asm        mov    byte ptr [ebp-0xA4], 0;
	__asm        jmp    _Ta38;
_Ta38:
	__asm        lea    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _Ta49;
_Ta49:
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC0];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0xB0];
	__asm        mov    [ecx], al;
	__asm        jmp    _Ta78;
_Ta78:
	__asm        jmp    _Ta7d;
_Ta7d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8C;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.right;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.top;
	__asm        push   eax;
	__asm        lea    eax, rectCurrentText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 1679:
_Tac6:
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, tempStringListIterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    tempStringListIterator.node, eax;
	__asm        jmp    _Tad9;
_Tad9:
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _Tae4;
// LINE 1680:
_Tae4:
	i++;
// LINE 1681:
	__asm        jmp    _FOR_NEXT_613;
// LINE 1683:
_Taec:
	return 0x1;
// LINE 1684:
}

// FUNCTION: COPTER_D 0x0045a5f8
int32_t PopupMenuExtra::CreateImage() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sImagePath; // 0x8 bytes

// LINE 1691:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sImagePath.reference = 0x0;
_T63:
	sImagePath.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 1693:
_T6f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        jne    _T1fc;
// LINE 1694:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xD0;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T9f;
// LINE 1695:
_T9f:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1b5;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _Tdb;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T162;

	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T12e;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T13a;

	__asm        jmp    _T13a;
_T12e:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T13a;
_T13a:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T162;
_T162:
	__asm        jmp    _T167;
_T167:
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    _T170;
_T170:
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    _T196;
_T196:
	__asm        jmp    _T19b;
_T19b:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCC], eax;
	__asm        jmp    _T1c2;
_T1b5:
	this->myBackgroundImage = 0x0;
// LINE 1696:
_T1c2:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xCC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xCC];
	__asm        call   dword ptr [edx+8];
// LINE 1697:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x134];
// LINE 1698:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 1700:
_T1fc:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T28c;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T28c;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T26c;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T26c:
	__asm        jmp    _T271;
_T271:
	__asm        jmp    _T276;
_T276:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T287;
_T287:
	__asm        jmp    _T28c;
_T28c:
	__asm        jmp    _T291;
_T291:
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T2b3;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2b3:
	__asm        jmp    _T2b8;
_T2b8:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 1701:
__RETURN:
}

// FUNCTION: COPTER_D 0x0045a8bd
void PopupMenuExtra::DestroyImage() {
// LINE 1708:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        je     _T63;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 1710:
_T56:
	this->myBackgroundImage = 0x0;
// LINE 1712:
_T63:
	this->GraphicWindow::DestroyImage();
// LINE 1713:
	return;
}

// FUNCTION: COPTER_D 0x0045a932
void PopupMenuExtra::CalculateAllMetrics() {
// LINE 1720:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xCC], 0;
	__asm        je     _T43;
// LINE 1721:
	__asm        jmp    _T21;
_T21:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 1722:
	__asm        jmp    _T50;
// LINE 1723:
_T43:
	this->lLineHeight = 0xa;
// LINE 1724:
_T50:
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        cdq;
	__asm        idiv   dword ptr [ecx+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB0], eax;
// LINE 1725:
	return;
}

// FUNCTION: COPTER_D 0x0045a9b0
void PopupMenuExtra::ResizeWindowToFitMenuItems() {
	/*bp-0x8*/   /*packed*/ class MPoint ptParentWindowCenter; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class MPoint ptSelf; // 0x8 bytes
	/*bp-0x14*/  long lTileWidth;
	/*bp-0x24*/  /*packed*/ class MRect rectSelf; // 0x10 bytes
	/*bp-0x28*/  long lCurrentWidth;

// LINE 1738:
	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x30], eax;
// LINE 1739:
	__asm        jmp    _T2d;
_T2d:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ptSelf.x, eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ptSelf.y, eax;
	__asm        jmp    _T3e;
// LINE 1740:
_T3e:
	__asm        jmp    _T43;
_T43:
	__asm        jmp    _T48;
// LINE 1745:
_T48:
	this->PopupMenuWindow::ResizeWindowToFitMenuItems();
// LINE 1750:
	__asm        jmp    _T55;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCC];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lTileWidth, eax;
// LINE 1751:
	__asm        jmp    _T71;
_T71:
	lCurrentWidth = (this-><PopupMenuExtra+0x18> - this-><PopupMenuExtra+0x10>);
// LINE 1752:
	__asm        mov    eax, lTileWidth;
	__asm        dec    eax;
	__asm        add    lCurrentWidth, eax;
// LINE 1753:
	__asm        mov    eax, lCurrentWidth;
	__asm        cdq;
	__asm        idiv   lTileWidth;
	__asm        mov    lCurrentWidth, eax;
// LINE 1754:
	lCurrentWidth = (lCurrentWidth * lTileWidth);
// LINE 1755:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, lCurrentWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x38];
// LINE 1757:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x3C], 0;
	__asm        je     _Tfa;
// LINE 1758:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectSelf.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1759:
	__asm        lea    eax, rectSelf.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x3C];
	__asm        call   GraphicWindow::FitRectToWindow;
// LINE 1760:
	__asm        mov    eax, rectSelf.top;
	__asm        push   eax;
	__asm        mov    eax, rectSelf.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1771:
_Tfa:
	return;
}

// FUNCTION: COPTER_D 0x0045aab4
void TooltipWindow::TooltipWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::TextWindow;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T82;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T71;
_T71:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T8f;
_T82:
	this->myBackgroundImageFileName.reference = 0x0;
_T8f:
	this->myBackgroundImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _Ta1;
_Ta1:
	this-><TooltipWindow+0x00> = 0x58fff8;
// LINE 1799:
	__asm        push   0x603AB8;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::SetTextColor;
// LINE 1800:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     _T24b;
// LINE 1801:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T111;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T102;
_T102:
	exit(0x1);
	__asm        jmp    _T111;
_T111:
	__asm        jmp    _T116;
_T116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T14d;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1f7;

	__asm        jmp    _T138;
_T138:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1f7;
_T14d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T17c;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T183;
_T17c:
	__asm        mov    dword ptr [ebp-4], 0;
_T183:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1e1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T1e1;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T1cb;
_T1cb:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1dc;
_T1dc:
	__asm        jmp    _T1e1;
_T1e1:
	__asm        jmp    _T1e6;
_T1e6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T22d;
_T1f7:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T22d;

	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22d;
_T22d:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T241;
_T241:
	__asm        jmp    _T246;
// LINE 1802:
_T246:
	__asm        jmp    _T3d8;
// LINE 1803:
_T24b:
	__asm        mov    eax, SZ_POPUP_EXTRA_BACKGROUND_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T258;
_T258:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0xFFFFFFFF;
	__asm        jne    _T2a3;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T294;
_T294:
	exit(0x1);
	__asm        jmp    _T2a3;
_T2a3:
	__asm        jmp    _T2a8;
_T2a8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2df;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T389;

	__asm        jmp    _T2ca;
_T2ca:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x38];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T389;
_T2df:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T30e;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T315;
_T30e:
	__asm        mov    dword ptr [ebp-0x20], 0;
_T315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T373;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T373;

	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T35d;
_T35d:
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T36e;
_T36e:
	__asm        jmp    _T373;
_T373:
	__asm        jmp    _T378;
_T378:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T3bf;
_T389:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T3bf;

	__asm        jmp    _T398;
_T398:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3bf;
_T3bf:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3d3;
_T3d3:
	__asm        jmp    _T3d8;
// LINE 1804:
_T3d8:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045ae9b
void TooltipWindow::TooltipWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, /*packed*/ class basic_string<char>& sNewWindowTitle, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szNewBackgroundImageFileName) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::TextWindow;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T82;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x44];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T71;
_T71:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T8f;
_T82:
	this->myBackgroundImageFileName.reference = 0x0;
_T8f:
	this->myBackgroundImageFileName.c_str_ptr = 0x0;
	__asm        jmp    _Ta1;
_Ta1:
	this-><TooltipWindow+0x00> = 0x58fff8;
// LINE 1816:
	__asm        mov    byte ptr [ebp-4], 0x6F;
	__asm        mov    byte ptr [ebp-3], 0xDA;
	__asm        mov    byte ptr [ebp-2], 0xFF;
	__asm        jmp    _Tbb;
_Tbb:
	__asm        lea    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::SetTextColor;
// LINE 1817:
	__asm        cmp    szNewBackgroundImageFileName, 0;
	__asm        je     _T247;
// LINE 1818:
	__asm        jmp    _Td6;
_Td6:
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0xFFFFFFFF;
	__asm        jne    _T121;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T112;
_T112:
	exit(0x1);
	__asm        jmp    _T121;
_T121:
	__asm        jmp    _T126;
_T126:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T15d;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1f3;

	__asm        jmp    _T148;
_T148:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x20];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1f3;
_T15d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T18c;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T193;
_T18c:
	__asm        mov    dword ptr [ebp-8], 0;
_T193:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1dd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T1dd;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1dd;
_T1dd:
	__asm        jmp    _T1e2;
_T1e2:
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T229;
_T1f3:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T229;

	__asm        jmp    _T202;
_T202:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, szNewBackgroundImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T229;
_T229:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T23d;
_T23d:
	__asm        jmp    _T242;
// LINE 1819:
_T242:
	__asm        jmp    _T3c0;
// LINE 1820:
_T247:
	__asm        mov    eax, SZ_POPUP_EXTRA_BACKGROUND_IMAGE_FILE_NAME;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T254;
_T254:
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0xFFFFFFFF;
	__asm        jne    _T29f;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T290;
_T290:
	exit(0x1);
	__asm        jmp    _T29f;
_T29f:
	__asm        jmp    _T2a4;
_T2a4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T2db;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T371;

	__asm        jmp    _T2c6;
_T2c6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T371;
_T2db:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T30a;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T311;
_T30a:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T35b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T35b;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T35b;
_T35b:
	__asm        jmp    _T360;
_T360:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T3a7;
_T371:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T3a7;

	__asm        jmp    _T380;
_T380:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3a7;
_T3a7:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xAC];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3bb;
_T3bb:
	__asm        jmp    _T3c0;
// LINE 1821:
_T3c0:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045b26a
void TooltipWindow::~TooltipWindow() {

	this-><TooltipWindow+0x00> = 0x58fff8;
// LINE 1828:
	this->TooltipWindow::DestroyImage();
// LINE 1829:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Tb7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0;
_T97:
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
_Ta1:
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tb2;
_Tb2:
	__asm        jmp    _Tb7;
_Tb7:
	__asm        jmp    _Tbc;
_Tbc:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        je     _Tea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tea:
	__asm        jmp    _Tef;
_Tef:
	return;

	(this + 0x84)->MFont::~MFont();
	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x0045b379
int32_t TooltipWindow::Initialize() {
// LINE 1836:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 1837:
	return this->GraphicWindow::Initialize();
// LINE 1838:
}

// FUNCTION: COPTER_D 0x0045b3a5
void TooltipWindow::SetWindowTitle(int32_t nNewWindowTitleTextID) {
// LINE 1846:
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::SetWindowTitle;
// LINE 1847:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE0];
// LINE 1848:
	return;
}

// FUNCTION: COPTER_D 0x0045b3d7
void TooltipWindow::SetWindowTitle(/*packed*/ class basic_string<char>& sNewWindowTitle) {
// LINE 1856:
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::SetWindowTitle;
// LINE 1857:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 1858:
	return;
}

// FUNCTION: COPTER_D 0x0045b40a
int32_t TooltipWindow::DrawSelf() {
	/*bp-0x4*/   long lSourceWidth;
	/*bp-0x8*/   long lEndXPosition;
	/*bp-0xc*/   long lCurrentXPosition;
	/*bp-0x1c*/  /*packed*/ class MRect rectText; // 0x10 bytes

// LINE 1866:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        lea    ecx, rectText.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 1869:
	lEndXPosition = this-><TooltipWindow+0x28>;
// LINE 1870:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, 3;
	__asm        mov    eax, [eax+8];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    lSourceWidth, eax;
// LINE 1871:
	lCurrentXPosition = this-><TooltipWindow+0x20>;
// LINE 1873:
	__asm        jmp    _T5e;
_T5e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1874:
	lCurrentXPosition += lSourceWidth;
// LINE 1875:
__WHILE_a2:
	while (((lEndXPosition - lSourceWidth) > lCurrentXPosition)) {
		// LINE 1877:
			__asm        jmp    _Tb6;
		_Tb6:
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0xA4];
			__asm        mov    eax, [eax+0xC];
			__asm        push   eax;
			__asm        mov    eax, lSourceWidth;
			__asm        add    eax, lSourceWidth;
			__asm        push   eax;
			__asm        push   0;
			__asm        mov    eax, lSourceWidth;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x24];
			__asm        push   eax;
			__asm        mov    eax, lCurrentXPosition;
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    eax, [eax+0x44];
			__asm        push   eax;
			__asm        mov    eax, this;
			__asm        mov    ecx, this;
			__asm        mov    ecx, [ecx+0xA4];
			__asm        mov    edx, [ecx];
			__asm        mov    ecx, [eax+0xA4];
			__asm        call   dword ptr [edx+0xC];
		// LINE 1878:
			lCurrentXPosition += lSourceWidth;
	}
// LINE 1881:
_T104:
	__asm        jmp    _T109;
_T109:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, lSourceWidth;
	__asm        add    eax, lSourceWidth;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, lCurrentXPosition;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 1883:
	rectText.left += 0x5;
// LINE 1884:
	__asm        inc    rectText.top;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x20], eax;
// LINE 1885:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    [ecx+0x38], eax;
	__asm        jmp    _T173;
// LINE 1887:
_T173:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T19b:
	__asm        jmp    _T1a0;
_T1a0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T1be;
_T1be:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T237;

	__asm        jmp    _T1d3;
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1fd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T209;

	__asm        jmp    _T209;
_T1fd:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T209;
_T209:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T237;
_T237:
	__asm        jmp    _T23c;
_T23c:
	__asm        mov    byte ptr [ebp-0x28], 0;
	__asm        jmp    _T245;
_T245:
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T250;
_T250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], al;
	__asm        jmp    _T271;
_T271:
	__asm        jmp    _T276;
_T276:
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        lea    eax, rectText.bottom;
	__asm        push   eax;
	__asm        lea    eax, rectText.right;
	__asm        push   eax;
	__asm        lea    eax, rectText.top;
	__asm        push   eax;
	__asm        lea    eax, rectText.left;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x4C];
// LINE 1888:
	return 0x1;
// LINE 1889:
}

// FUNCTION: COPTER_D 0x0045b6ca
int32_t TooltipWindow::CreateImage() {
	/*bp-0x8*/   /*packed*/ class basic_string<char> sImagePath; // 0x8 bytes

// LINE 1897:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T5c;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T51;
_T51:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    sImagePath.reference, eax;
	__asm        jmp    _T63;
_T5c:
	sImagePath.reference = 0x0;
_T63:
	sImagePath.c_str_ptr = 0x0;
	__asm        jmp    _T6f;
// LINE 1899:
_T6f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T1ee;
// LINE 1900:
	__asm        lea    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xA8;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, 0x604C00;
	__asm        call   FileServices::GetPathForFileString;
	__asm        jmp    _T9f;
// LINE 1901:
_T9f:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1b5;

	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _Tdb;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tdb:
	__asm        jmp    _Te0;
_Te0:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    sImagePath.c_str_ptr, eax;
	__asm        jmp    _Tf8;
_Tf8:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T162;

	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T10f;
_T10f:
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T12e;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T13a;

	__asm        jmp    _T13a;
_T12e:
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    _T13a;
_T13a:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T162;
_T162:
	__asm        jmp    _T167;
_T167:
	__asm        mov    byte ptr [ebp-0x34], 0;
	__asm        jmp    _T170;
_T170:
	__asm        lea    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, sImagePath.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x40];
	__asm        mov    [ecx], al;
	__asm        jmp    _T196;
_T196:
	__asm        jmp    _T19b;
_T19b:
	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    _T1c2;
_T1b5:
	this->myBackgroundImage = 0x0;
// LINE 1902:
_T1c2:
	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+8];
// LINE 1903:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x28];
// LINE 1905:
_T1ee:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::CreateImage;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, sImagePath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sImagePath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T27e;

	__asm        mov    eax, sImagePath.reference;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T27e;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T25e;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    dword ptr [eax], 0;
_T25e:
	__asm        jmp    _T263;
_T263:
	__asm        jmp    _T268;
_T268:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T279;
_T279:
	__asm        jmp    _T27e;
_T27e:
	__asm        jmp    _T283;
_T283:
	__asm        cmp    sImagePath.c_str_ptr, 0;
	__asm        je     _T2a5;

	__asm        mov    eax, sImagePath.c_str_ptr;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2a5:
	__asm        jmp    _T2aa;
_T2aa:
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    __RETURN;
// LINE 1906:
__RETURN:
}

// FUNCTION: COPTER_D 0x0045b981
void TooltipWindow::DestroyImage() {
// LINE 1914:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T63;
// LINE 1915:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 1916:
_T56:
	this->myBackgroundImage = 0x0;
// LINE 1918:
_T63:
	this->GraphicWindow::DestroyImage();
// LINE 1919:
	return;
}

// FUNCTION: COPTER_D 0x0045b9f6
void TooltipWindow::SetTextAndShow(/*packed*/ class MPoint& ptNewPosition, /*packed*/ class basic_string<char>& sNewText) {
// LINE 1927:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1928:
	__asm        mov    eax, sNewText;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x48];
// LINE 1929:
	this-><TooltipWindow+0x54> = 0x1;
	__asm        jmp    _T42;
// LINE 1930:
_T42:
	return;
}

// FUNCTION: COPTER_D 0x0045ba44
void TooltipWindow::SetTextAndShow(/*packed*/ class MPoint& ptNewPosition, int32_t nNewWindowTitleTextID) {
// LINE 1937:
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x34];
// LINE 1938:
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC8];
// LINE 1939:
	this-><TooltipWindow+0x54> = 0x1;
	__asm        jmp    _T45;
// LINE 1940:
_T45:
	return;
}

// FUNCTION: COPTER_D 0x0045ba95
void BoneheadTextEditWindow::BoneheadTextEditWindow() {

	__asm        mov    ecx, this;
	__asm        call   TextWindow::TextWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T86;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    _T86;
_T86:
	__asm        jmp    _T8b;
_T8b:
	this->lCaretTimerPeriod = 0xaae60;
	this->bCaretTimerExpired = 0x0;
	this-><BoneheadTextEditWindow+0x00> = 0x5900f0;
// LINE 1964:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045bb50
void BoneheadTextEditWindow::BoneheadTextEditWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, int32_t nNewWindowTitleTextID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szNewImageFileName) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewWindowTitleTextID;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::TextWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T9e;

	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    _T9e;
_T9e:
	__asm        jmp    _Ta3;
_Ta3:
	this->lCaretTimerPeriod = 0xaae60;
	this->bCaretTimerExpired = 0x0;
	this->lCharacterCountLimit = 0x100;
	this-><BoneheadTextEditWindow+0x00> = 0x5900f0;
// LINE 1978:
	__asm        cmp    szNewImageFileName, 0;
	__asm        je     _T337;
// LINE 1979:
	this->bDrawOpaqueBackground = 0x1;
// LINE 1980:
	__asm        jmp    _Tec;
_Tec:
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T137;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T128;
_T128:
	exit(0x1);
	__asm        jmp    _T137;
_T137:
	__asm        jmp    _T13c;
_T13c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T16d;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ee;

	__asm        jmp    _T15b;
_T15b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x30];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T2ee;
_T16d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T248;

	__asm        cmp    dword ptr [ebp-0x30], 0xFFFFFFFF;
	__asm        jne    _T1c0;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1b1;
_T1b1:
	exit(0x1);
	__asm        jmp    _T1c0;
_T1c0:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T225;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T220;
_T220:
	__asm        jmp    _T22e;
_T225:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T22e:
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T23d;
_T23d:
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T24f;
_T248:
	__asm        mov    dword ptr [ebp-4], 0;
_T24f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2db;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T2db;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2bb;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T2bb:
	__asm        jmp    _T2c0;
_T2c0:
	__asm        jmp    _T2c5;
_T2c5:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2d6;
_T2d6:
	__asm        jmp    _T2db;
_T2db:
	__asm        jmp    _T2e0;
_T2e0:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T321;
_T2ee:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T321;

	__asm        jmp    _T2fd;
_T2fd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T321;
_T321:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T332;
_T332:
	__asm        jmp    _T337;
// LINE 1982:
_T337:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045be96
void BoneheadTextEditWindow::BoneheadTextEditWindow(/*packed*/ class MRect& rectNewWindow, int32_t nNewID, const /*packed*/ class basic_string<char>& sNewWindowTitle, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, char * szNewImageFileName) {

	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, sNewWindowTitle;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewWindow;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TextWindow::TextWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xAC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB0], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T9e;

	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
	__asm        jmp    _T9e;
_T9e:
	__asm        jmp    _Ta3;
_Ta3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0xAAE60;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0x100;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5900F0;
	__asm        mov    byte ptr [ebp-0x60], 0x5F;
// LINE 1998:
	__asm        jmp    _Tdc;
_Tdc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     _T11e;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T10f;
_T10f:
	exit(0x1);
	__asm        jmp    _T11e;
_T11e:
	__asm        jmp    _T123;
_T123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    _T155;

	__asm        jmp    _T138;
_T138:
	__asm        jmp    _T13d;
_T13d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T2f8;
_T155:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T257;

	__asm        jmp    _T171;
_T171:
	__asm        jmp    _T176;
_T176:
	__asm        jmp    _T17b;
_T17b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1a0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T1ac;

	__asm        jmp    _T1ac;
_T1a0:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T1ac;
_T1ac:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T234;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T22f;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T22f;
_T22f:
	__asm        jmp    _T23d;
_T234:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0;
_T23d:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T24c;
_T24c:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T25e;
_T257:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T25e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2ea;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2ea;

	__asm        mov    eax, [ebp-0x40];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T2ca;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    dword ptr [eax], 0;
_T2ca:
	__asm        jmp    _T2cf;
_T2cf:
	__asm        jmp    _T2d4;
_T2d4:
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T2e5;
_T2e5:
	__asm        jmp    _T2ea;
_T2ea:
	__asm        jmp    _T2ef;
_T2ef:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        jmp    _T302;
_T302:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    al, [ebp-0x60];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    [ecx], al;
	__asm        jmp    _T323;
_T323:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    _T331;
// LINE 1999:
_T331:
	__asm        cmp    szNewImageFileName, 0;
	__asm        je     _T4b2;
// LINE 2000:
	this->bDrawOpaqueBackground = 0x1;
// LINE 2001:
	__asm        jmp    _T34a;
_T34a:
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0xFFFFFFFF;
	__asm        jne    _T395;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T386;
_T386:
	exit(0x1);
	__asm        jmp    _T395;
_T395:
	__asm        jmp    _T39a;
_T39a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T3cb;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T469;

	__asm        jmp    _T3b9;
_T3b9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T469;
_T3cb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3fa;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T401;
_T3fa:
	__asm        mov    dword ptr [ebp-4], 0;
_T401:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T456;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T456;

	__asm        mov    ecx, [ebp-0x14];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T440;
_T440:
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T451;
_T451:
	__asm        jmp    _T456;
_T456:
	__asm        jmp    _T45b;
_T45b:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
	__asm        jmp    _T49c;
_T469:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T49c;

	__asm        jmp    _T478;
_T478:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, szNewImageFileName;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T49c;
_T49c:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x60];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T4ad;
_T4ad:
	__asm        jmp    _T4b2;
// LINE 2003:
_T4b2:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045c357
void BoneheadTextEditWindow::~BoneheadTextEditWindow() {

	this-><BoneheadTextEditWindow+0x00> = 0x5900f0;
// LINE 2010:
	this->BoneheadTextEditWindow::DestroyImage();
// LINE 2011:
	__asm        jmp    _T22;
_T22:
	__asm        jmp    _T27;
_T27:
	return;

	(this + 0x84)->MFont::~MFont();
	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x0045c39e
int32_t BoneheadTextEditWindow::Initialize() {
// LINE 2018:
	this->GraphicWindow::Initialize();
// LINE 2019:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xE8];
// LINE 2020:
	__asm        jmp    _T27;
_T27:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     _T3c;

	__asm        jmp    _Tbd;
_T3c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    _T65;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _Tb8;

	__asm        jmp    _Tb8;
_T65:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T9b;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _Tb8;

	__asm        jmp    _Tb8;
_T9b:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _Tb8;
_Tb8:
	__asm        jmp    _Tbd;
// LINE 2021:
_Tbd:
	GraphicWindow::MakeFocus(this);
// LINE 2022:
	return 0x1;
// LINE 2023:
}

// FUNCTION: COPTER_D 0x0045c476
int32_t BoneheadTextEditWindow::CreateImage() {
	/*bp-0x104*/ char szFullPath[260]; // 0x104 bytes

// LINE 2032:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        jne    _T204;

	__asm        jmp    _T2a;
_T2a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T204;
// LINE 2033:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x5C], 0;
	__asm        je     _T77;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x10C], eax;
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x114], eax;
	__asm        mov    eax, [ebp-0x114];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T77:
	__asm        jmp    _T7c;
_T7c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x5C], eax;
	__asm        jmp    _Ta0;
_Ta0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T13d;

	__asm        jmp    _Tb8;
_Tb8:
	__asm        jmp    _Tbd;
_Tbd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Teb;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x120], eax;
	__asm        jmp    _Tfa;

	__asm        jmp    _Tfa;
_Teb:
	__asm        mov    dword ptr [ebp-0x120], 0;
	__asm        jmp    _Tfa;
_Tfa:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x5C];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, [ebp-0x124];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x120];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    _T142;
_T142:
	__asm        mov    byte ptr [ebp-0x110], 0;
	__asm        jmp    _T14e;
_T14e:
	__asm        lea    eax, [ebp-0x110];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    _T15f;
_T15f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x5C];
	__asm        mov    [ebp-0x11C], eax;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    al, [eax];
	__asm        mov    ecx, [ebp-0x11C];
	__asm        mov    [ecx], al;
	__asm        jmp    _T18f;
_T18f:
	__asm        jmp    _T194;
_T194:
	GetPathForFile(szFullPath[0], this-><BoneheadTextEditWindow+0x5c>, 0x0, 0x6);
// LINE 2034:
	__asm        push   0x134;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _T1f4;

	__asm        lea    eax, szFullPath[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   CBackBuffer::CBackBuffer;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    _T204;
_T1f4:
	this->mySecondImage = 0x0;
// LINE 2036:
_T204:
	return 0x1;
// LINE 2037:
}

// FUNCTION: COPTER_D 0x0045c689
void BoneheadTextEditWindow::DestroyImage() {
// LINE 2043:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T63;
// LINE 2044:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T56;

	__asm        mov    ecx, [ebp-4];
	__asm        call   CBackBuffer::~CBackBuffer;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T51;
_T51:
	__asm        jmp    _T56;
// LINE 2045:
_T56:
	this->mySecondImage = 0x0;
// LINE 2047:
_T63:
	return;
}

// FUNCTION: COPTER_D 0x0045c6f6
int32_t BoneheadTextEditWindow::DrawSelf() {
	/*bp-0x4*/   char * chCaret;

// LINE 2056:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xBC], 0;
	__asm        je     _T163;
// LINE 2062:
	__asm        jmp    _T21;
_T21:
	__asm        jmp    _T26;
_T26:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T55;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCaret, eax;
	__asm        jmp    _T77;

	__asm        jmp    _T67;
_T55:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    chCaret, eax;
	__asm        jmp    _T77;
_T67:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        add    eax, [ebp-0x14];
	__asm        mov    chCaret, eax;
// LINE 2063:
_T77:
	__asm        mov    eax, chCaret;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 0x20;
	__asm        jne    _T91;
// LINE 2064:
	chCaret[0] = 0x5f;
// LINE 2065:
	__asm        jmp    _T97;
// LINE 2066:
_T91:
	chCaret[0] = 0x20;
// LINE 2067:
_T97:
	this->myCaretTimer.lTotalElapsedTime = 0x0;
	this->myCaretTimer.lStartTime = 0x0;
	__asm        jmp    _Tb6;
_Tb6:
	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     _Td0;

	__asm        jmp    _T151;
_Td0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    _Tf9;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T14c;

	__asm        jmp    _T14c;
_Tf9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T12f;

	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T14c;

	__asm        jmp    _T14c;
_T12f:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
	__asm        jmp    _T14c;
_T14c:
	__asm        jmp    _T151;
_T151:
	__asm        jmp    _T156;
// LINE 2068:
_T156:
	this->bCaretTimerExpired = 0x0;
// LINE 2071:
_T163:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x74], 0;
	__asm        je     _T1f8;
// LINE 2072:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA4], 0;
	__asm        je     _T1d9;
// LINE 2074:
	__asm        jmp    _T185;
_T185:
	__asm        jmp    _T18a;
_T18a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x20];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xC];
// LINE 2076:
	__asm        jmp    _T1f8;
// LINE 2077:
_T1d9:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x44];
// LINE 2082:
_T1f8:
	__asm        jmp    _T1fd;
_T1fd:
	__asm        jmp    _T202;
_T202:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T227;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T233;

	__asm        jmp    _T233;
_T227:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T233;
_T233:
	__asm        mov    eax, this;
	__asm        add    eax, 0x84;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x44];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x44];
	__asm        call   dword ptr [edx+0x48];
// LINE 2085:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6C], 0;
	__asm        je     _T286;
// LINE 2086:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x2C];
// LINE 2087:
_T286:
	return 0x1;
// LINE 2088:
}

// FUNCTION: COPTER_D 0x0045c98b
long BoneheadTextEditWindow::DoCharacter(long lCharacter) {
	/*bp-0x4*/   unsigned char * chCharacter;

// LINE 2098:
	__asm        cmp    lCharacter, 0x20;
	__asm        jge    _T1d;
// LINE 2099:
	return 0x0;
// LINE 2101:
_T1d:
	__asm        jmp    _T22;
_T22:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T41;
// LINE 2102:
	return 0x0;
// LINE 2105:
_T41:
	__asm        jmp    _T46;
_T46:
	__asm        jmp    _T4b;
_T4b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T70;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T7c;

	__asm        jmp    _T7c;
_T70:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T7c;
_T7c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-8];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    [ebp-0x44], al;
	__asm        jmp    _T94;
_T94:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     _Td6;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc7;
_Tc7:
	exit(0x1);
	__asm        jmp    _Td6;
_Td6:
	__asm        jmp    _Tdb;
_Tdb:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    _T10d;

	__asm        jmp    _Tf0;
_Tf0:
	__asm        jmp    _Tf5;
_Tf5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T2b0;
_T10d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T20f;

	__asm        jmp    _T129;
_T129:
	__asm        jmp    _T12e;
_T12e:
	__asm        jmp    _T133;
_T133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T158;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T164;

	__asm        jmp    _T164;
_T158:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T164;
_T164:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1ec;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1e7;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1e7;
_T1e7:
	__asm        jmp    _T1f5;
_T1ec:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax], 0;
_T1f5:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T204;
_T204:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T216;
_T20f:
	__asm        mov    dword ptr [ebp-0x10], 0;
_T216:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T2a2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T2a2;

	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T282;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    dword ptr [eax], 0;
_T282:
	__asm        jmp    _T287;
_T287:
	__asm        jmp    _T28c;
_T28c:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T29d;
_T29d:
	__asm        jmp    _T2a2;
_T2a2:
	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
_T2b0:
	__asm        jmp    _T2b5;
_T2b5:
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    al, [ebp-0x44];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], al;
	__asm        jmp    _T2db;
_T2db:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    _T2e9;
// LINE 2106:
_T2e9:
	__asm        jmp    _T2ee;
_T2ee:
	__asm        jmp    _T2f3;
_T2f3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T324;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCharacter, eax;
	__asm        jmp    _T34a;

	__asm        jmp    _T338;
_T324:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    chCharacter, eax;
	__asm        jmp    _T34a;
_T338:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        add    eax, [ebp-0xC];
	__asm        mov    chCharacter, eax;
// LINE 2107:
_T34a:
	__asm        mov    al, reinterpret_cast<uint8_t>(lCharacter);
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
// LINE 2108:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2109:
	return 0x1;
// LINE 2110:
}

// FUNCTION: COPTER_D 0x0045ccfd
long BoneheadTextEditWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2118:
	__asm        cmp    lKey, 8;
	__asm        je     _T20;

	__asm        cmp    lKey, 0x2E;
	__asm        jne    _T33;
// LINE 2119:
_T20:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xFC];
// LINE 2120:
	__asm        jmp    _T4b;
_T33:
	__asm        cmp    lKey, 0xD;
	__asm        jne    _T4b;
// LINE 2121:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x100];
// LINE 2122:
_T4b:
	__asm        push   1;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x30];
// LINE 2123:
	return 0x1;
// LINE 2124:
}

// FUNCTION: COPTER_D 0x0045cd68
long BoneheadTextEditWindow::DoCursorDown(long nCursorX, long nCursorY, unsigned long nButton) {
// LINE 2132:
	return GraphicWindow::MakeFocus(this);
// LINE 2133:
}

// FUNCTION: COPTER_D 0x0045cd8c
int32_t BoneheadTextEditWindow::DoesWindowNeedUpdating() {
// LINE 2141:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T169;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2f;
_T2f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 0;
	__asm        je     _Tbe;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 1;
	__asm        jne    _T62;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;

	__asm        jmp    _Ta9;
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T92;

	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;

	__asm        jmp    _Ta9;
_T92:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;
_Ta9:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xAC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        add    [ebp-8], eax;
_Tbe:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xA8], 0;
	__asm        jne    _T111;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        je     _T111;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    _T14c;

	__asm        jmp    _T13a;
_T111:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    _T14c;

	__asm        jmp    _T13a;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+0xB8], ecx;
	__asm        jae    _T14c;
_T13a:
	this->bCaretTimerExpired = 0x1;
	__asm        jmp    _T159;
_T14c:
	this->bCaretTimerExpired = 0x0;
_T159:
_T169:
_T173:
_T175:
	return (this->bCaretTimerExpired == 0x0);
// LINE 2142:
}

// FUNCTION: COPTER_D 0x0045cf0b
int32_t BoneheadTextEditWindow::SetCaretPeriod(unsigned long lMicrosecondsBetweenCaretChanges) {
// LINE 2150:
	this->lCaretTimerPeriod = lMicrosecondsBetweenCaretChanges;
// LINE 2151:
	return 0x1;
// LINE 2152:
}

// FUNCTION: COPTER_D 0x0045cf34
void BoneheadTextEditWindow::SetCharacterCountLimit(unsigned long lNewCharacterCountLimit) {
// LINE 2160:
	this->lCharacterCountLimit = lNewCharacterCountLimit;
// LINE 2161:
	return;
}

// FUNCTION: COPTER_D 0x0045cf58
int32_t BoneheadTextEditWindow::ProcessBackspace() {
	/*bp-0x4*/   unsigned char * chCharacter;

// LINE 2172:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 1;
	__asm        ja     _T28;
// LINE 2173:
	return 0x0;
// LINE 2175:
_T28:
	__asm        jmp    _T2d;
_T2d:
	__asm        jmp    _T32;
_T32:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T63;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        add    eax, [ecx];
	__asm        mov    chCharacter, eax;
	__asm        jmp    _T89;

	__asm        jmp    _T77;
_T63:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        mov    chCharacter, eax;
	__asm        jmp    _T89;
_T77:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, 2;
	__asm        add    eax, [ebp-8];
	__asm        mov    chCharacter, eax;
// LINE 2176:
_T89:
	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _T93;
_T93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tc7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    ecx, [ecx];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
	__asm        jmp    _Tf2;

	__asm        jmp    _Tdd;
_Tc7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    al, [eax-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
	__asm        jmp    _Tf2;
_Tdd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    al, [eax+ecx-1];
	__asm        mov    ecx, chCharacter;
	__asm        mov    [ecx], al;
// LINE 2177:
_Tf2:
	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T109;
_T109:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x58];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T14d;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T13e;
_T13e:
	exit(0x1);
	__asm        jmp    _T14d;
_T14d:
	__asm        jmp    _T152;
_T152:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x58];
	__asm        cmp    eax, 1;
	__asm        jae    _T180;

	__asm        jmp    _T16c;
_T16c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T187;
_T180:
	__asm        mov    dword ptr [ebp-0x10], 1;
_T187:
	__asm        jmp    _T18c;
_T18c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T3c0;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T28c;

	__asm        jmp    _T1b8;
_T1b8:
	__asm        jmp    _T1bd;
_T1bd:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1e2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T1ee;

	__asm        jmp    _T1ee;
_T1e2:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T1ee;
_T1ee:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T269;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T264;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T264;
_T264:
	__asm        jmp    _T272;
_T269:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax], 0;
_T272:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T281;
_T281:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T293;
_T28c:
	__asm        mov    dword ptr [ebp-0x14], 0;
_T293:
	__asm        jmp    _T298;
_T298:
	__asm        jmp    _T29d;
_T29d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2c2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T2ce;

	__asm        jmp    _T2ce;
_T2c2:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T2ce;
_T2ce:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, [ebp-0x58];
	__asm        add    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T30a;
_T30a:
	__asm        jmp    _T30f;
_T30f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3ad;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T3ad;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T38d;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0;
_T38d:
	__asm        jmp    _T392;
_T392:
	__asm        jmp    _T397;
_T397:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T3a8;
_T3a8:
	__asm        jmp    _T3ad;
_T3ad:
	__asm        jmp    _T3b2;
_T3b2:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T482;
_T3c0:
	__asm        jmp    _T3c5;
_T3c5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T3e9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        jmp    _T482;
_T3e9:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T482;

	__asm        jmp    _T3f8;
_T3f8:
	__asm        jmp    _T3fd;
_T3fd:
	__asm        jmp    _T402;
_T402:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T427;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T433;

	__asm        jmp    _T433;
_T427:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T433;
_T433:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x10];
	__asm        sub    eax, [ebp-0x58];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    eax, [ebp-0x58];
	__asm        add    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T472;
_T472:
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x10];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        sub    [ecx+4], eax;
_T482:
	__asm        jmp    _T487;
// LINE 2178:
_T487:
	return 0x1;
// LINE 2179:
}

// FUNCTION: COPTER_D 0x0045d3ee
int32_t BoneheadTextEditWindow::ProcessReturn() {
// LINE 2187:
	__asm        push   0xA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x80];
	__asm        jmp    __RETURN;
// LINE 2188:
__RETURN:
}

// FUNCTION: COPTER_D 0x0045d414
void BoneheadTextEditWindow::GetEditText(/*packed*/ class basic_string<char>& sText) {
// LINE 2196:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        cmp    eax, sText;
	__asm        je     _T1ce;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta7;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta7;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T87;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    dword ptr [eax], 0;
_T87:
	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Ta2;
_Ta2:
	__asm        jmp    _Ta7;
_Ta7:
	__asm        jmp    _Tac;
_Tac:
	__asm        jmp    _Tb1;
_Tb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+0xC], 0xFFFFFFFF;
	__asm        je     _Tdb;

	sText.reference = this-><BoneheadTextEditWindow+0x0c>;
	sText.reference-><basic_string_ref<char>+0x0c:4>++;
	__asm        jmp    _T1ce;
_Tdb:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1c4;

	__asm        jmp    _Tf7;
_Tf7:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T19e;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T13e;
_T13e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T163;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T16f;

	__asm        jmp    _T16f;
_T163:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    _T16f;
_T16f:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T199;
_T199:
	__asm        jmp    _T1a7;
_T19e:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax], 0;
_T1a7:
	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1b6;
_T1b6:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, sText;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1ce;
_T1c4:
	sText.reference = 0x0;
_T1ce:
	__asm        jmp    _T1d3;
// LINE 2197:
_T1d3:
	__asm        jmp    _T1d8;
_T1d8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T1ea;
_T1ea:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x5C];
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T22e;

	__asm        push   0x59722C;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T21f;
_T21f:
	exit(0x1);
	__asm        jmp    _T22e;
_T22e:
	__asm        jmp    _T233;
_T233:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x5C];
	__asm        cmp    eax, 1;
	__asm        jae    _T261;

	__asm        jmp    _T24d;
_T24d:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T268;
_T261:
	__asm        mov    dword ptr [ebp-0x28], 1;
_T268:
	__asm        jmp    _T26d;
_T26d:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jbe    _T3da;

	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2f1;

	__asm        jmp    _T299;
_T299:
	__asm        jmp    _T29e;
_T29e:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T2c3;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T2cf;

	__asm        jmp    _T2cf;
_T2c3:
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    _T2cf;
_T2cf:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T2f8;
_T2f1:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        jmp    _T302;
_T302:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T327;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T333;

	__asm        jmp    _T333;
_T327:
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        jmp    _T333;
_T333:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, [ebp-0x5C];
	__asm        add    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T36f;
_T36f:
	__asm        jmp    _T374;
_T374:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T3c7;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T3c7;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T3c7;
_T3c7:
	__asm        jmp    _T3cc;
_T3cc:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, sText;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T49c;
_T3da:
	__asm        jmp    _T3df;
_T3df:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T403;

	sText.reference-><basic_string_ref<char>+0x04:4> = 0x0;
	__asm        jmp    _T49c;
_T403:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T49c;

	__asm        jmp    _T412;
_T412:
	__asm        jmp    _T417;
_T417:
	__asm        jmp    _T41c;
_T41c:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T441;

	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T44d;

	__asm        jmp    _T44d;
_T441:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T44d;
_T44d:
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sub    eax, [ebp-0x28];
	__asm        sub    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, sText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, [ebp-0x5C];
	__asm        add    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48c;
_T48c:
	__asm        xor    eax, eax;
	__asm        sub    eax, [ebp-0x28];
	__asm        neg    eax;
	__asm        mov    ecx, sText;
	__asm        mov    ecx, [ecx+4];
	__asm        sub    [ecx+4], eax;
_T49c:
	__asm        jmp    _T4a1;
// LINE 2198:
_T4a1:
	return;
}

// FUNCTION: COPTER_D 0x0045d8c1
void BoneheadTextEditWindow::GetEditText(char * szText, unsigned long lLength) {
// LINE 2205:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, lLength;
	__asm        cmp    [eax+4], ecx;
	__asm        jae    _T34;
// LINE 2206:
	__asm        jmp    _T28;
_T28:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    lLength, eax;
// LINE 2207:
_T34:
	__asm        jmp    _T39;
_T39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T5e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T6a;

	__asm        jmp    _T6a;
_T5e:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    _T6a;
_T6a:
	__asm        mov    eax, lLength;
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    eax, szText;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 2208:
	__asm        mov    eax, lLength;
	__asm        mov    ecx, szText;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 2209:
	return;
}

// FUNCTION: COPTER_D 0x0045d955
void MessageBoxWindowEdit::MessageBoxWindowEdit(/*packed*/ class MPoint& ptNewPosition, unsigned long lNewType, unsigned long lNewMessageID, const /*packed*/ class basic_string<char>& sNewInitialEditText, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szTextEditBackgroundImageFileName, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {

	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, lNewMessageID;
	__asm        push   eax;
	__asm        mov    eax, lNewType;
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MessageBoxWindow::MessageBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5901F8;
// LINE 2246:
	__asm        push   0xC4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tc4;

	__asm        jmp    _T75;
_T75:
	__asm        mov    dword ptr [ebp-0x14], 0x64;
	__asm        mov    dword ptr [ebp-0x10], 0x64;
	__asm        mov    dword ptr [ebp-0xC], 0x172;
	__asm        mov    dword ptr [ebp-8], 0xC8;
	__asm        jmp    _T96;
_T96:
	__asm        mov    eax, szTextEditBackgroundImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, sNewInitialEditText;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   BoneheadTextEditWindow::BoneheadTextEditWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    _Td1;
_Tc4:
	this->myTextEditWindow = 0x0;
// LINE 2247:
_Td1:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2248:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045da55
void MessageBoxWindowEdit::MessageBoxWindowEdit(/*packed*/ class MPoint& ptNewPosition, unsigned long lNewType, /*packed*/ class basic_string<char>& sNewMessage, const /*packed*/ class basic_string<char>& sNewInitialEditText, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList, int32_t bNewSelfDeleting, char * szTextEditBackgroundImageFileName, char * szImageFileName, char * szButtonImageFileName, char * szAnimationImageFileName) {

	__asm        mov    eax, szAnimationImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szButtonImageFileName;
	__asm        push   eax;
	__asm        mov    eax, szImageFileName;
	__asm        push   eax;
	__asm        mov    eax, bNewSelfDeleting;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, sNewMessage;
	__asm        push   eax;
	__asm        mov    eax, lNewType;
	__asm        push   eax;
	__asm        mov    eax, ptNewPosition;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   MessageBoxWindow::MessageBoxWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5901F8;
// LINE 2275:
	__asm        push   0xC4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Tc4;

	__asm        jmp    _T75;
_T75:
	__asm        mov    dword ptr [ebp-0x14], 0x64;
	__asm        mov    dword ptr [ebp-0x10], 0x64;
	__asm        mov    dword ptr [ebp-0xC], 0x172;
	__asm        mov    dword ptr [ebp-8], 0xC8;
	__asm        jmp    _T96;
_T96:
	__asm        mov    eax, szTextEditBackgroundImageFileName;
	__asm        push   eax;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, sNewInitialEditText;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-4];
	__asm        call   BoneheadTextEditWindow::BoneheadTextEditWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA4], eax;
	__asm        jmp    _Td1;
_Tc4:
	this->myTextEditWindow = 0x0;
// LINE 2276:
_Td1:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2277:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045db55
int32_t MessageBoxWindowEdit::Initialize() {
// LINE 2285:
	this->MessageBoxWindow::Initialize();
// LINE 2286:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+4];
// LINE 2287:
	__asm        push   0x80;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xA4];
	__asm        call   dword ptr [edx+0xF0];
// LINE 2288:
	return 0x1;
// LINE 2289:
}

// FUNCTION: COPTER_D 0x0045dbae
void ScrollingCreditWindow::ScrollingCreditWindow(int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {

	__asm        jmp    _T11;
_T11:
	__asm        jmp    _T16;
_T16:
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x14];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, windowNewParent;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, windowNewParent;
	__asm        sub    eax, [ecx+0x10];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T39;
_T39:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _T58;
_T58:
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x74], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x78], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x7C], 0;
	__asm        jmp    _T97;
_T97:
	this->lFirstStringToDraw = 0x0;
	this->lTopOfVisibleTextArea = 0x0;
	__asm        jmp    _Tb6;
_Tb6:
	this->rectVisibleTextArea.left = 0x28;
	this->rectVisibleTextArea.top = 0x28;
	this->rectVisibleTextArea.right = 0x1f4;
	this->rectVisibleTextArea.bottom = 0x1cc;
	__asm        jmp    _Tef;
_Tef:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x98;
	__asm        call   MFont::MFont;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xB8], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC0], 0;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T162;

	__asm        lea    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC0], eax;
	__asm        jmp    _T162;
_T162:
	__asm        jmp    _T167;
_T167:
	this->lScrollTimerPeriod = 0x2710;
	this->bScrollTimerExpired = 0x0;
	this-><ScrollingCreditWindow+0x00> = 0x5902d8;
// LINE 2320:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045dd47
void ScrollingCreditWindow::~ScrollingCreditWindow() {

	this-><ScrollingCreditWindow+0x00> = 0x5902d8;
// LINE 2328:
	__asm        jmp    _T1a;
_T1a:
	__asm        jmp    _T1f;
_T1f:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x98;
	__asm        call   MFont::~MFont;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x78];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-0x1C], eax;
__WHILE_3f:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    [ebp-0x1C], eax;
	__asm        je     _Tf4;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta0;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Ta0;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T8a;
_T8a:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T9b;
_T9b:
	__asm        jmp    _Ta0;
_Ta0:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Tcb;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Tcb:
	__asm        jmp    _Td0;
_Td0:
	__asm        jmp    _Te1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_Te1:
	__asm        jmp    _Te6;
_Te6:
	__asm        jmp    _Teb;
_Teb:
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    __WHILE_3f;
_Teb:
	__asm        add    dword ptr [ebp-0x1C], 8;
	__asm        jmp    __WHILE_3f;
_Tf4:
	__asm        jmp    _Tf9;
_Tf9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x74];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T113;
_T113:
	__asm        jmp    _T118;
_T118:
	return;

	this->GraphicWindow::~GraphicWindow();
}

// FUNCTION: COPTER_D 0x0045de71
int32_t ScrollingCreditWindow::Initialize() {
// LINE 2335:
	this->ScrollingCreditWindow::LoadCreditStringArray();
// LINE 2336:
	__asm        jmp    _T19;
_T19:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _T2e;

	__asm        jmp    _Taf;
_T2e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T57;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    _Taa;

	__asm        jmp    _Taa;
_T57:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T8d;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    _Taa;

	__asm        jmp    _Taa;
_T8d:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
	__asm        jmp    _Taa;
_Taa:
	__asm        jmp    _Taf;
// LINE 2337:
_Taf:
	return 0x1;
// LINE 2338:
}

// FUNCTION: COPTER_D 0x0045df2f
int32_t ScrollingCreditWindow::DrawSelf() {
// LINE 2344:
	return 0x0;
// LINE 2345:
}

// FUNCTION: COPTER_D 0x0045df47
void ScrollingCreditWindow::RestartCreditDisplay() {
// LINE 2352:
	return;
}

// FUNCTION: COPTER_D 0x0045df5d
int32_t ScrollingCreditWindow::DoesWindowNeedUpdating() {
// LINE 2358:
	__asm        jmp    _T11;
_T11:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jne    _T169;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T2f;
_T2f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB8], 0;
	__asm        je     _Tbe;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 1;
	__asm        jne    _T62;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;

	__asm        jmp    _Ta9;
_T62:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T92;

	__asm        lea    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;

	__asm        jmp    _Ta9;
_T92:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Ta9;
_Ta9:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        add    [ebp-8], eax;
_Tbe:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xB4], 0;
	__asm        jne    _T111;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC0], 0;
	__asm        je     _T111;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC0];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    _T14c;

	__asm        jmp    _T13a;
_T111:
	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-8];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    _T14c;

	__asm        jmp    _T13a;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        cmp    [eax+0xC4], ecx;
	__asm        jae    _T14c;
_T13a:
	this->bScrollTimerExpired = 0x1;
	__asm        jmp    _T159;
_T14c:
	this->bScrollTimerExpired = 0x0;
_T159:
_T169:
_T173:
_T175:
	return (this->bScrollTimerExpired == 0x0);
// LINE 2359:
}

// FUNCTION: COPTER_D 0x0045e0dc
int32_t ScrollingCreditWindow::LoadCreditStringArray() {
// LINE 2366:
	return 0x0;
// LINE 2367:
}

// FUNCTION: COPTER_D 0x0045e0f4
int32_t ScrollingCreditWindow::Scroll() {
// LINE 2373:
	return 0x0;
// LINE 2374:
}

// FUNCTION: COPTER_D 0x0045e10c
int32_t ScrollingCreditWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2381:
	return 0x0;
// LINE 2382:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0045e126
static void $E72() {

	$E71();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0045e13b
static void $E71() {

	colorTextCheckupNormal.Blue = 0x40;
	colorTextCheckupNormal.Green = 0x0;
	colorTextCheckupNormal.Red = 0x0;
	__asm        jmp    _T20;
_T20:
	return;
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0045e165
static void $E75() {

	$E74();
	__asm        jmp    __RETURN;
__RETURN:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x0045e17a
static void $E74() {

	colorTextCheckupHighlighted.Blue = 0xef;
	colorTextCheckupHighlighted.Green = 0xc5;
	colorTextCheckupHighlighted.Red = 0xc5;
	__asm        jmp    _T20;
_T20:
	return;
}

// FUNCTION: COPTER_D 0x0045e1a4
void CheckupWindow::CheckupWindow(/*packed*/ class MRect& rectNewPosition, int32_t nNewID, /*unpacked*/ class GraphicWindow *windowNewParent, /*packed*/ class GraphicWindowOwner *myNewOwner, int32_t bAddToParentList) {
	/*bp-0x4*/   int32_t i;


	__asm        mov    eax, GraphicWindow::colorConstants.nPaletteIndexTransparent;
	__asm        push   eax;
	__asm        mov    eax, bAddToParentList;
	__asm        push   eax;
	__asm        mov    eax, myNewOwner;
	__asm        push   eax;
	__asm        mov    eax, windowNewParent;
	__asm        push   eax;
	__asm        mov    eax, nNewID;
	__asm        push   eax;
	__asm        mov    eax, rectNewPosition;
	__asm        push   eax;
	__asm        mov    eax, SZ_CHECKUP_WINDOW_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   GraphicWindow::GraphicWindow;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5903A0;
// LINE 2421:
_FOR_49:
	for (i = 0x0; (i < 0x3); i++) {
		// LINE 2422:
			__asm        mov    eax, i;
			__asm        mov    ecx, this;
			__asm        mov    dword ptr [ecx+eax*4+0x74], 0;
			__asm        jmp    _FOR_NEXT_49;
	}
// LINE 2423:
_FOR_75:
	for (i = 0x0; (i < 0x5); i++) {
		// LINE 2424:
			__asm        mov    eax, i;
			__asm        mov    ecx, this;
			__asm        mov    dword ptr [ecx+eax*4+0x80], 0;
			__asm        jmp    _FOR_NEXT_75;
	}
// LINE 2425:
_T98:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0045e24b
int32_t CheckupWindow::Initialize() {
	/*bp-0x4*/   int32_t nFullStringID;
	/*bp-0xc*/   /*packed*/ class basic_string<char> sText; // 0x8 bytes
	/*bp-0x10*/  /*packed*/ class TextWindow *tempTextWindow;
	/*bp-0x14*/  /*packed*/ class ButtonWindow *tempButtonWindow;

// LINE 2434:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x15C], eax;
	__asm        cmp    dword ptr [ebp-0x15C], 0;
	__asm        je     _T7e;

	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x15C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T70;
_T70:
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T85;
_T7e:
	sText.reference = 0x0;
_T85:
	sText.c_str_ptr = 0x0;
	__asm        jmp    _T91;
// LINE 2437:
_T91:
	this->GraphicWindow::Initialize();
// LINE 2440:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T107;

	__asm        jmp    _Tbb;
_Tbb:
	__asm        mov    dword ptr [ebp-0x28], 0x70;
	__asm        mov    dword ptr [ebp-0x24], 0x24;
	__asm        mov    dword ptr [ebp-0x20], 0x158;
	__asm        mov    dword ptr [ebp-0x1C], 0x42;
	__asm        jmp    _Tdc;
_Tdc:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x244;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T10e;
_T107:
	tempTextWindow = 0x0;
// LINE 2441:
_T10e:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x1E;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2442:
	__asm        push   0x603AB4;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2443:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2445:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T1b0;

	__asm        jmp    _T164;
_T164:
	__asm        mov    dword ptr [ebp-0x3C], 0x48;
	__asm        mov    dword ptr [ebp-0x38], 0x5A;
	__asm        mov    dword ptr [ebp-0x34], 0x94;
	__asm        mov    dword ptr [ebp-0x30], 0x68;
	__asm        jmp    _T185;
_T185:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x245;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T1b7;
_T1b0:
	tempTextWindow = 0x0;
// LINE 2446:
_T1b7:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2447:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2448:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2450:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T259;

	__asm        jmp    _T20d;
_T20d:
	__asm        mov    dword ptr [ebp-0x50], 0xEC;
	__asm        mov    dword ptr [ebp-0x4C], 0x5A;
	__asm        mov    dword ptr [ebp-0x48], 0x148;
	__asm        mov    dword ptr [ebp-0x44], 0x68;
	__asm        jmp    _T22e;
_T22e:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x246;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x40];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T260;
_T259:
	tempTextWindow = 0x0;
// LINE 2451:
_T260:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2452:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2453:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2455:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        je     _T302;

	__asm        jmp    _T2b6;
_T2b6:
	__asm        mov    dword ptr [ebp-0x64], 0x3E;
	__asm        mov    dword ptr [ebp-0x60], 0x14E;
	__asm        mov    dword ptr [ebp-0x5C], 0xA4;
	__asm        mov    dword ptr [ebp-0x58], 0x162;
	__asm        jmp    _T2d7;
_T2d7:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x247;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x54];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T309;
_T302:
	tempTextWindow = 0x0;
// LINE 2456:
_T309:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2457:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2458:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2460:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T3ab;

	__asm        jmp    _T35f;
_T35f:
	__asm        mov    dword ptr [ebp-0x78], 0xA4;
	__asm        mov    dword ptr [ebp-0x74], 0x14E;
	__asm        mov    dword ptr [ebp-0x70], 0x118;
	__asm        mov    dword ptr [ebp-0x6C], 0x162;
	__asm        jmp    _T380;
_T380:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x248;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x68];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T3b2;
_T3ab:
	tempTextWindow = 0x0;
// LINE 2461:
_T3b2:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2462:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2463:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2465:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        je     _T460;

	__asm        jmp    _T408;
_T408:
	__asm        mov    dword ptr [ebp-0x8C], 0x118;
	__asm        mov    dword ptr [ebp-0x88], 0x14E;
	__asm        mov    dword ptr [ebp-0x84], 0x18E;
	__asm        mov    dword ptr [ebp-0x80], 0x162;
	__asm        jmp    _T432;
_T432:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0x249;
	__asm        push   0;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x7C];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    tempTextWindow, eax;
	__asm        jmp    _T467;
_T460:
	tempTextWindow = 0x0;
// LINE 2466:
_T467:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xCC];
// LINE 2467:
	__asm        push   1;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD0];
// LINE 2468:
	__asm        push   0x603ABC;
	__asm        mov    eax, tempTextWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempTextWindow;
	__asm        call   dword ptr [eax+0xD4];
// LINE 2471:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x90], eax;
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T527;

	__asm        jmp    _T4c3;
_T4c3:
	__asm        mov    dword ptr [ebp-0xA0], 0xA4;
	__asm        mov    dword ptr [ebp-0x9C], 0x5A;
	__asm        mov    dword ptr [ebp-0x98], 0xD8;
	__asm        mov    dword ptr [ebp-0x94], 0x66;
	__asm        jmp    _T4f0;
_T4f0:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xA0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x90];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x80], eax;
	__asm        jmp    _T537;
_T527:
	this->myTextWindows[0] = 0x0;
// LINE 2472:
_T537:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2473:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2475:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     _T60b;

	__asm        jmp    _T5a7;
_T5a7:
	__asm        mov    dword ptr [ebp-0xB4], 0x156;
	__asm        mov    dword ptr [ebp-0xB0], 0x5A;
	__asm        mov    dword ptr [ebp-0xAC], 0x186;
	__asm        mov    dword ptr [ebp-0xA8], 0x66;
	__asm        jmp    _T5d4;
_T5d4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xA4];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x84], eax;
	__asm        jmp    _T61b;
_T60b:
	this->myTextWindows[1] = 0x0;
// LINE 2476:
_T61b:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2477:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2479:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     _T6ef;

	__asm        jmp    _T68b;
_T68b:
	__asm        mov    dword ptr [ebp-0xC8], 0x48;
	__asm        mov    dword ptr [ebp-0xC4], 0x70;
	__asm        mov    dword ptr [ebp-0xC0], 0x98;
	__asm        mov    dword ptr [ebp-0xBC], 0x7E;
	__asm        jmp    _T6b8;
_T6b8:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], eax;
	__asm        jmp    _T6ff;
_T6ef:
	this->myTextWindows[2] = 0x0;
// LINE 2480:
_T6ff:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2481:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2482:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2484:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        je     _T7f5;

	__asm        jmp    _T791;
_T791:
	__asm        mov    dword ptr [ebp-0xDC], 0xBA;
	__asm        mov    dword ptr [ebp-0xD8], 0x70;
	__asm        mov    dword ptr [ebp-0xD4], 0x10E;
	__asm        mov    dword ptr [ebp-0xD0], 0x7E;
	__asm        jmp    _T7be;
_T7be:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xCC];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8C], eax;
	__asm        jmp    _T805;
_T7f5:
	this->myTextWindows[3] = 0x0;
// LINE 2485:
_T805:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2486:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2487:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2489:
	__asm        push   0xA4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE0], eax;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     _T8fb;

	__asm        jmp    _T897;
_T897:
	__asm        mov    dword ptr [ebp-0xF0], 0x12A;
	__asm        mov    dword ptr [ebp-0xEC], 0x70;
	__asm        mov    dword ptr [ebp-0xE8], 0x17E;
	__asm        mov    dword ptr [ebp-0xE4], 0x7E;
	__asm        jmp    _T8c4;
_T8c4:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, [ebp-0xF0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE0];
	__asm        call   TextWindow::TextWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        jmp    _T90b;
_T8fb:
	this->myTextWindows[4] = 0x0;
// LINE 2490:
_T90b:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xCC];
// LINE 2491:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xD0];
// LINE 2492:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2497:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xF4], eax;
	__asm        cmp    dword ptr [ebp-0xF4], 0;
	__asm        je     _Ta08;

	__asm        jmp    _T99d;
_T99d:
	__asm        mov    dword ptr [ebp-0x104], 0x62;
	__asm        mov    dword ptr [ebp-0x100], 0x84;
	__asm        mov    dword ptr [ebp-0xFC], 0x7C;
	__asm        mov    dword ptr [ebp-0xF8], 0x14E;
	__asm        jmp    _T9ca;
_T9ca:
	__asm        push   8;
	__asm        mov    eax, SZ_CHECKUP_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xF4];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
	__asm        jmp    _Ta15;
_Ta08:
	this->mySliderWindows[0] = 0x0;
// LINE 2498:
_Ta15:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x74];
	__asm        call   dword ptr [edx+4];
// LINE 2499:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 2500:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2504:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x108], eax;
	__asm        cmp    dword ptr [ebp-0x108], 0;
	__asm        je     _Tadc;

	__asm        jmp    _Ta71;
_Ta71:
	__asm        mov    dword ptr [ebp-0x118], 0xD6;
	__asm        mov    dword ptr [ebp-0x114], 0x84;
	__asm        mov    dword ptr [ebp-0x110], 0xF0;
	__asm        mov    dword ptr [ebp-0x10C], 0x14E;
	__asm        jmp    _Ta9e;
_Ta9e:
	__asm        push   8;
	__asm        mov    eax, SZ_CHECKUP_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   4;
	__asm        lea    eax, [ebp-0x118];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x108];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
	__asm        jmp    _Tae9;
_Tadc:
	this->mySliderWindows[1] = 0x0;
// LINE 2505:
_Tae9:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x78];
	__asm        call   dword ptr [edx+4];
// LINE 2506:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 2507:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2511:
	__asm        push   0xB4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11C], eax;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     _Tbb0;

	__asm        jmp    _Tb45;
_Tb45:
	__asm        mov    dword ptr [ebp-0x12C], 0x14A;
	__asm        mov    dword ptr [ebp-0x128], 0x84;
	__asm        mov    dword ptr [ebp-0x124], 0x164;
	__asm        mov    dword ptr [ebp-0x120], 0x14E;
	__asm        jmp    _Tb72;
_Tb72:
	__asm        push   8;
	__asm        mov    eax, SZ_CHECKUP_SLIDER_IMAGE_FILE_NAME;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        push   5;
	__asm        lea    eax, [ebp-0x12C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x11C];
	__asm        call   SliderWindow::SliderWindow;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7C], eax;
	__asm        jmp    _Tbbd;
_Tbb0:
	this->mySliderWindows[2] = 0x0;
// LINE 2512:
_Tbbd:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   dword ptr [edx+4];
// LINE 2513:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMinimumValue;
// LINE 2514:
	__asm        push   0x64;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2518:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x130], eax;
	__asm        cmp    dword ptr [ebp-0x130], 0;
	__asm        je     _Tc74;

	__asm        jmp    _Tc19;
_Tc19:
	__asm        mov    dword ptr [ebp-0x140], 0xC6;
	__asm        mov    dword ptr [ebp-0x13C], 0x186;
	__asm        mov    dword ptr [ebp-0x138], 0xC7;
	__asm        mov    dword ptr [ebp-0x134], 0x187;
	__asm        jmp    _Tc46;
_Tc46:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, [ebp-0x140];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x130];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _Tc7b;
_Tc74:
	tempButtonWindow = 0x0;
// LINE 2519:
_Tc7b:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x24a);
// LINE 2520:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1178], eax;
	__asm        cmp    dword ptr [ebp-0x1178], 0;
	__asm        jne    _T107d;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x1178], eax;
	__asm        jmp    _Tcec;
_Tcec:
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1194], eax;
	__asm        cmp    dword ptr [ebp-0x1194], 0xFFFFFFFF;
	__asm        jne    _Td46;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x1188], eax;
	__asm        mov    eax, [ebp-0x1188];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Td37;
_Td37:
	exit(0x1);
	__asm        jmp    _Td46;
_Td46:
	__asm        jmp    _Td4b;
_Td4b:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Td7c;

	__asm        cmp    dword ptr [ebp-0x1194], 0;
	__asm        je     _Te38;

	__asm        jmp    _Td6a;
_Td6a:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x1194];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _Te38;
_Td7c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x1180], eax;
	__asm        cmp    dword ptr [ebp-0x1180], 0;
	__asm        je     _Tdbd;

	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x1180];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x117C], eax;
	__asm        jmp    _Tdc7;
_Tdbd:
	__asm        mov    dword ptr [ebp-0x117C], 0;
_Tdc7:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Te25;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x1190], eax;
	__asm        mov    eax, [ebp-0x1190];
	__asm        mov    [ebp-0x118C], eax;
	__asm        cmp    dword ptr [ebp-0x118C], 0;
	__asm        je     _Te25;

	__asm        mov    ecx, [ebp-0x118C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _Te0c;
_Te0c:
	__asm        mov    eax, [ebp-0x118C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Te20;
_Te20:
	__asm        jmp    _Te25;
_Te25:
	__asm        jmp    _Te2a;
_Te2a:
	__asm        mov    eax, [ebp-0x117C];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _Te77;
_Te38:
	__asm        cmp    dword ptr [ebp-0x1194], 0;
	__asm        je     _Te77;

	__asm        jmp    _Te4a;
_Te4a:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1184], eax;
	__asm        mov    eax, [ebp-0x1194];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x1184];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _Te77;
_Te77:
	__asm        mov    eax, [ebp-0x1194];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Te88;
_Te88:
	__asm        jmp    _Te8d;
_Te8d:
	__asm        jmp    _Te92;
_Te92:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11B4], eax;
	__asm        jmp    _Teaa;
_Teaa:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x11B4];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _Tef9;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11A8], eax;
	__asm        mov    eax, [ebp-0x11A8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Teea;
_Teea:
	exit(0x1);
	__asm        jmp    _Tef9;
_Tef9:
	__asm        jmp    _Tefe;
_Tefe:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _Tf2d;

	__asm        jmp    _Tf10;
_Tf10:
	__asm        jmp    _Tf15;
_Tf15:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x11B4];
	__asm        jae    _T101a;
_Tf2d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x119C], eax;
	__asm        cmp    dword ptr [ebp-0x119C], 0;
	__asm        je     _Tfbb;

	__asm        jmp    _Tf4f;
_Tf4f:
	__asm        jmp    _Tf54;
_Tf54:
	__asm        jmp    _Tf59;
_Tf59:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _Tf7b;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11A4], eax;
	__asm        jmp    _Tf8a;

	__asm        jmp    _Tf8a;
_Tf7b:
	__asm        mov    dword ptr [ebp-0x11A4], 0;
	__asm        jmp    _Tf8a;
_Tf8a:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11A4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x119C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x1198], eax;
	__asm        jmp    _Tfc5;
_Tfbb:
	__asm        mov    dword ptr [ebp-0x1198], 0;
_Tfc5:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T100c;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11B0], eax;
	__asm        mov    eax, [ebp-0x11B0];
	__asm        mov    [ebp-0x11AC], eax;
	__asm        cmp    dword ptr [ebp-0x11AC], 0;
	__asm        je     _T100c;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x11AC];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T100c;
_T100c:
	__asm        jmp    _T1011;
_T1011:
	__asm        mov    eax, [ebp-0x1198];
	__asm        mov    sText.reference, eax;
_T101a:
	__asm        cmp    dword ptr [ebp-0x11B4], 0;
	__asm        je     _T1062;

	__asm        jmp    _T102c;
_T102c:
	__asm        jmp    _T1031;
_T1031:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x11A0], eax;
	__asm        mov    eax, [ebp-0x11B4];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x11A0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1062;
_T1062:
	__asm        mov    eax, [ebp-0x11B4];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T1073;
_T1073:
	__asm        jmp    _T1078;
_T1078:
	__asm        jmp    _T1353;
_T107d:
	__asm        jmp    _T1082;
_T1082:
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11E4], eax;
	__asm        cmp    dword ptr [ebp-0x11E4], 0xFFFFFFFF;
	__asm        jne    _T10dc;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11C4], eax;
	__asm        mov    eax, [ebp-0x11C4];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T10cd;
_T10cd:
	exit(0x1);
	__asm        jmp    _T10dc;
_T10dc:
	__asm        jmp    _T10e1;
_T10e1:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T1112;

	__asm        cmp    dword ptr [ebp-0x11E4], 0;
	__asm        je     _T12f9;

	__asm        jmp    _T1100;
_T1100:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x11E4];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T12f9;
_T1112:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x11BC], eax;
	__asm        cmp    dword ptr [ebp-0x11BC], 0;
	__asm        je     _T1232;

	__asm        cmp    dword ptr [ebp-0x11E4], 0xFFFFFFFF;
	__asm        jne    _T1174;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x11E0], eax;
	__asm        mov    eax, [ebp-0x11E0];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1165;
_T1165:
	exit(0x1);
	__asm        jmp    _T1174;
_T1174:
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1203;

	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x11BC];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x11D8], eax;
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11DC], eax;
	__asm        mov    eax, [ebp-0x11D8];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11DC];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T11fe;
_T11fe:
	__asm        jmp    _T120f;
_T1203:
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    dword ptr [eax], 0;
_T120f:
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T1221;
_T1221:
	__asm        mov    eax, [ebp-0x11BC];
	__asm        mov    [ebp-0x11B8], eax;
	__asm        jmp    _T123c;
_T1232:
	__asm        mov    dword ptr [ebp-0x11B8], 0;
_T123c:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T12e6;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x11CC], eax;
	__asm        mov    eax, [ebp-0x11CC];
	__asm        mov    [ebp-0x11C8], eax;
	__asm        cmp    dword ptr [ebp-0x11C8], 0;
	__asm        je     _T12e6;

	__asm        mov    eax, [ebp-0x11C8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T12c3;

	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11D0], eax;
	__asm        mov    eax, [ebp-0x11D0];
	__asm        mov    [ebp-0x11D4], eax;
	__asm        mov    eax, [ebp-0x11D4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x11C8];
	__asm        mov    dword ptr [eax], 0;
_T12c3:
	__asm        jmp    _T12c8;
_T12c8:
	__asm        jmp    _T12cd;
_T12cd:
	__asm        mov    eax, [ebp-0x11C8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T12e1;
_T12e1:
	__asm        jmp    _T12e6;
_T12e6:
	__asm        jmp    _T12eb;
_T12eb:
	__asm        mov    eax, [ebp-0x11B8];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T1338;
_T12f9:
	__asm        cmp    dword ptr [ebp-0x11E4], 0;
	__asm        je     _T1338;

	__asm        jmp    _T130b;
_T130b:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x11C0], eax;
	__asm        mov    eax, [ebp-0x11E4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1174];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x11C0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1338;
_T1338:
	__asm        mov    eax, [ebp-0x11E4];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1349;
_T1349:
	__asm        jmp    _T134e;
_T134e:
	__asm        jmp    _T1353;
// LINE 2521:
_T1353:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 2522:
	__asm        push   0x603AB4;
	__asm        push   0x603ABC;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 2523:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2526:
	__asm        push   0x94;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x144], eax;
	__asm        cmp    dword ptr [ebp-0x144], 0;
	__asm        je     _T1405;

	__asm        jmp    _T13aa;
_T13aa:
	__asm        mov    dword ptr [ebp-0x154], 0x12C;
	__asm        mov    dword ptr [ebp-0x150], 0x186;
	__asm        mov    dword ptr [ebp-0x14C], 0x12D;
	__asm        mov    dword ptr [ebp-0x148], 0x187;
	__asm        jmp    _T13d7;
_T13d7:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, [ebp-0x154];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x144];
	__asm        call   SoundButtonWindow::SoundButtonWindow;
	__asm        mov    tempButtonWindow, eax;
	__asm        jmp    _T140c;
_T1405:
	tempButtonWindow = 0x0;
// LINE 2527:
_T140c:
	nFullStringID = LanguageManager::GetFullStringID(0x0, 0x24b);
// LINE 2528:
	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21E8], eax;
	__asm        cmp    dword ptr [ebp-0x21E8], 0;
	__asm        jne    _T17f7;

	__asm        push   0xFFF;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x21E8], eax;
	__asm        jmp    _T147d;
_T147d:
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2204], eax;
	__asm        cmp    dword ptr [ebp-0x2204], 0xFFFFFFFF;
	__asm        jne    _T14d7;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x21F8], eax;
	__asm        mov    eax, [ebp-0x21F8];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T14c8;
_T14c8:
	exit(0x1);
	__asm        jmp    _T14d7;
_T14d7:
	__asm        jmp    _T14dc;
_T14dc:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T150d;

	__asm        cmp    dword ptr [ebp-0x2204], 0;
	__asm        je     _T15b2;

	__asm        jmp    _T14fb;
_T14fb:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x2204];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T15b2;
_T150d:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x21F0], eax;
	__asm        cmp    dword ptr [ebp-0x21F0], 0;
	__asm        je     _T154e;

	__asm        mov    eax, [ebp-0x2204];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x21F0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x21EC], eax;
	__asm        jmp    _T1558;
_T154e:
	__asm        mov    dword ptr [ebp-0x21EC], 0;
_T1558:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T159f;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2200], eax;
	__asm        mov    eax, [ebp-0x2200];
	__asm        mov    [ebp-0x21FC], eax;
	__asm        cmp    dword ptr [ebp-0x21FC], 0;
	__asm        je     _T159f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x21FC];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T159f;
_T159f:
	__asm        jmp    _T15a4;
_T15a4:
	__asm        mov    eax, [ebp-0x21EC];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T15f1;
_T15b2:
	__asm        cmp    dword ptr [ebp-0x2204], 0;
	__asm        je     _T15f1;

	__asm        jmp    _T15c4;
_T15c4:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x21F4], eax;
	__asm        mov    eax, [ebp-0x2204];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x21F4];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T15f1;
_T15f1:
	__asm        mov    eax, [ebp-0x2204];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1602;
_T1602:
	__asm        jmp    _T1607;
_T1607:
	__asm        jmp    _T160c;
_T160c:
	__asm        push   0x597200;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2224], eax;
	__asm        jmp    _T1624;
_T1624:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    ecx, [ebp-0x2224];
	__asm        cmp    [eax+4], ecx;
	__asm        jb     _T1673;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2218], eax;
	__asm        mov    eax, [ebp-0x2218];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1664;
_T1664:
	exit(0x1);
	__asm        jmp    _T1673;
_T1673:
	__asm        jmp    _T1678;
_T1678:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T16a7;

	__asm        jmp    _T168a;
_T168a:
	__asm        jmp    _T168f;
_T168f:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sText.reference;
	__asm        sub    eax, [ecx+4];
	__asm        cmp    eax, [ebp-0x2224];
	__asm        jae    _T1794;
_T16a7:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220C], eax;
	__asm        cmp    dword ptr [ebp-0x220C], 0;
	__asm        je     _T1735;

	__asm        jmp    _T16c9;
_T16c9:
	__asm        jmp    _T16ce;
_T16ce:
	__asm        jmp    _T16d3;
_T16d3:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T16f5;

	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2214], eax;
	__asm        jmp    _T1704;

	__asm        jmp    _T1704;
_T16f5:
	__asm        mov    dword ptr [ebp-0x2214], 0;
	__asm        jmp    _T1704;
_T1704:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        add    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2214];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x220C];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x2208], eax;
	__asm        jmp    _T173f;
_T1735:
	__asm        mov    dword ptr [ebp-0x2208], 0;
_T173f:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1786;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x2220], eax;
	__asm        mov    eax, [ebp-0x2220];
	__asm        mov    [ebp-0x221C], eax;
	__asm        cmp    dword ptr [ebp-0x221C], 0;
	__asm        je     _T1786;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x221C];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T1786;
_T1786:
	__asm        jmp    _T178b;
_T178b:
	__asm        mov    eax, [ebp-0x2208];
	__asm        mov    sText.reference, eax;
_T1794:
	__asm        cmp    dword ptr [ebp-0x2224], 0;
	__asm        je     _T17dc;

	__asm        jmp    _T17a6;
_T17a6:
	__asm        jmp    _T17ab;
_T17ab:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sText.reference;
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x2210], eax;
	__asm        mov    eax, [ebp-0x2224];
	__asm        push   eax;
	__asm        push   0x597200;
	__asm        mov    eax, [ebp-0x2210];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T17dc;
_T17dc:
	__asm        mov    eax, [ebp-0x2224];
	__asm        mov    ecx, sText.reference;
	__asm        add    [ecx+4], eax;
	__asm        jmp    _T17ed;
_T17ed:
	__asm        jmp    _T17f2;
_T17f2:
	__asm        jmp    _T1a81;
_T17f7:
	__asm        jmp    _T17fc;
_T17fc:
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x224C], eax;
	__asm        cmp    dword ptr [ebp-0x224C], 0xFFFFFFFF;
	__asm        jne    _T1856;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2234], eax;
	__asm        mov    eax, [ebp-0x2234];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T1847;
_T1847:
	exit(0x1);
	__asm        jmp    _T1856;
_T1856:
	__asm        jmp    _T185b;
_T185b:
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        ja     _T188c;

	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     _T1a27;

	__asm        jmp    _T187a;
_T187a:
	__asm        mov    eax, sText.reference;
	__asm        mov    ecx, [ebp-0x224C];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T1a27;
_T188c:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x222C], eax;
	__asm        cmp    dword ptr [ebp-0x222C], 0;
	__asm        je     _T19ac;

	__asm        cmp    dword ptr [ebp-0x224C], 0xFFFFFFFF;
	__asm        jne    _T18ee;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x2248], eax;
	__asm        mov    eax, [ebp-0x2248];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T18df;
_T18df:
	exit(0x1);
	__asm        jmp    _T18ee;
_T18ee:
	__asm        mov    eax, [ebp-0x224C];
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T197d;

	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x222C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2240], eax;
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2244], eax;
	__asm        mov    eax, [ebp-0x2240];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2244];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1978;
_T1978:
	__asm        jmp    _T1989;
_T197d:
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    dword ptr [eax], 0;
_T1989:
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T199b;
_T199b:
	__asm        mov    eax, [ebp-0x222C];
	__asm        mov    [ebp-0x2228], eax;
	__asm        jmp    _T19b6;
_T19ac:
	__asm        mov    dword ptr [ebp-0x2228], 0;
_T19b6:
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1a14;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x223C], eax;
	__asm        mov    eax, [ebp-0x223C];
	__asm        mov    [ebp-0x2238], eax;
	__asm        cmp    dword ptr [ebp-0x2238], 0;
	__asm        je     _T1a14;

	__asm        mov    ecx, [ebp-0x2238];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T19fb;
_T19fb:
	__asm        mov    eax, [ebp-0x2238];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1a0f;
_T1a0f:
	__asm        jmp    _T1a14;
_T1a14:
	__asm        jmp    _T1a19;
_T1a19:
	__asm        mov    eax, [ebp-0x2228];
	__asm        mov    sText.reference, eax;
	__asm        jmp    _T1a66;
_T1a27:
	__asm        cmp    dword ptr [ebp-0x224C], 0;
	__asm        je     _T1a66;

	__asm        jmp    _T1a39;
_T1a39:
	__asm        mov    eax, sText.reference;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2230], eax;
	__asm        mov    eax, [ebp-0x224C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x21E4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2230];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1a66;
_T1a66:
	__asm        mov    eax, [ebp-0x224C];
	__asm        mov    ecx, sText.reference;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1a77;
_T1a77:
	__asm        jmp    _T1a7c;
_T1a7c:
	__asm        jmp    _T1a81;
// LINE 2529:
_T1a81:
	__asm        lea    eax, sText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0x48];
// LINE 2530:
	__asm        push   0x603AB4;
	__asm        push   0x603ABC;
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+0xD8];
// LINE 2531:
	__asm        mov    eax, tempButtonWindow;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, tempButtonWindow;
	__asm        call   dword ptr [eax+4];
// LINE 2533:
	this->CheckupWindow::SetAllControlValuesToDefaults();
// LINE 2535:
	GraphicWindow::MakeModal(this);
// LINE 2536:
	GraphicWindow::MakeFocus(this);
// LINE 2538:
	__asm        mov    dword ptr [ebp-0x158], 1;
	__asm        mov    eax, sText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T1b90;

	__asm        mov    eax, sText.reference;
	__asm        mov    [ebp-0x16C], eax;
	__asm        mov    eax, [ebp-0x16C];
	__asm        mov    [ebp-0x168], eax;
	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        je     _T1b90;

	__asm        mov    eax, [ebp-0x168];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T1b6d;

	__asm        mov    eax, [ebp-0x168];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x174];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, [ebp-0x168];
	__asm        mov    dword ptr [eax], 0;
_T1b6d:
	__asm        jmp    _T1b72;
_T1b72:
	__asm        jmp    _T1b77;
_T1b77:
	__asm        mov    eax, [ebp-0x168];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1b8b;
_T1b8b:
	__asm        jmp    _T1b90;
_T1b90:
	__asm        jmp    _T1b95;
_T1b95:
	__asm        cmp    sText.c_str_ptr, 0;
	__asm        je     _T1bc3;

	__asm        mov    eax, sText.c_str_ptr;
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x164];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T1bc3:
	__asm        jmp    _T1bc8;
_T1bc8:
	__asm        mov    eax, [ebp-0x158];
	__asm        jmp    __RETURN;
// LINE 2539:
__RETURN:
}

// FUNCTION: COPTER_D 0x0045fe23
void CheckupWindow::SetCurrentSettings(long * lNewSettings) {
// LINE 2551:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetValue;
// LINE 2552:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetValue;
// LINE 2553:
	__asm        mov    eax, lNewSettings;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 2554:
	this->CheckupWindow::SetTextControlsBasedOnCurrentSliderValues();
// LINE 2555:
	return;
}

// FUNCTION: COPTER_D 0x0045fe78
void CheckupWindow::GetCurrentSettings(long * lCurrentSettings) {
// LINE 2563:
	lCurrentSettings[0] = this->mySliderWindows[0]->SliderWindow::GetValue();
// LINE 2564:
	lCurrentSettings[4] = this->mySliderWindows[1]->SliderWindow::GetValue();
// LINE 2565:
	lCurrentSettings[8] = this->mySliderWindows[2]->SliderWindow::GetValue();
// LINE 2566:
	return;
}

// FUNCTION: COPTER_D 0x0045fec2
void CheckupWindow::SetAllControlValuesToDefaults() {
	/*bp-0x4*/   long lValue;

// LINE 2576:
	lValue = S3GetFullRepairCost(G_uheli);
// LINE 2577:
	__asm        cmp    lValue, 0;
	__asm        jge    _T2e;
// LINE 2578:
	lValue = 0x0;
// LINE 2579:
_T2e:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2580:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x74];
	__asm        call   SliderWindow::SetValue;
// LINE 2582:
	lValue = S3GetFullRefuelCost(G_uheli);
// LINE 2583:
	__asm        cmp    lValue, 0;
	__asm        jge    _T6e;
// LINE 2584:
	lValue = 0x0;
// LINE 2585:
_T6e:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2586:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x78];
	__asm        call   SliderWindow::SetValue;
// LINE 2588:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _Tcb;
// LINE 2589:
	lValue = S3HeliGetEquipmentNewValue(0x3);
// LINE 2590:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2591:
	__asm        mov    eax, lValue;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 2593:
	__asm        jmp    _Te5;
// LINE 2594:
_Tcb:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetMaximumValue;
// LINE 2595:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x7C];
	__asm        call   SliderWindow::SetValue;
// LINE 2597:
_Te5:
	this->CheckupWindow::SetTextControlsBasedOnCurrentSliderValues();
// LINE 2598:
	return;
}

// FUNCTION: COPTER_D 0x0045ffb9
int32_t CheckupWindow::ShouldWeDisplayCheckupWindow() {
// LINE 2608:
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumDamage;
	__asm        add    esp, 4;
	__asm        mov    ecx, G_uheli;
	__asm        cmp    eax, [ecx+0xD0];
	__asm        jne    _T64;

	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumFuel;
	__asm        add    esp, 4;
	__asm        mov    ecx, G_uheli;
	__asm        cmp    eax, [ecx+0x320];
	__asm        jne    _T64;

	__asm        call   GetCurrentUserPersonalInfo;
	__asm        test   byte ptr [eax+0x48], 8;
	__asm        je     _T6e;

	__asm        call   GetCurrentUserPersonalInfo;
	__asm        cmp    dword ptr [eax+0x54], 0xA;
	__asm        jge    _T6e;
// LINE 2610:
_T64:
	return 0x1;
// LINE 2612:
_T6e:
	return 0x0;
// LINE 2613:
}

// FUNCTION: COPTER_D 0x00460033
int32_t CheckupWindow::CanUserAffordCurrentSliderValues() {
	/*bp-0xc*/   long lSliderValues[3]; // 0xc bytes

// LINE 2623:
	__asm        lea    eax, lSliderValues[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckupWindow::GetCurrentSettings;
// LINE 2624:
	__asm        mov    ebx, lSliderValues[1];
	__asm        add    ebx, lSliderValues[2];
	__asm        add    ebx, lSliderValues[0];
	__asm        call   GetUserMoney;
	__asm        cmp    ebx, eax;
	__asm        jg     _T38;

	__asm        mov    eax, 1;
	__asm        jmp    _T3a;
_T38:
	__asm        xor    eax, eax;
_T3a:
	__asm        jmp    __RETURN;
// LINE 2625:
__RETURN:
}

// FUNCTION: COPTER_D 0x00460077
void CheckupWindow::SetTextControlsBasedOnCurrentSliderValues() {
	/*bp-0xc*/   long lSliderValues[3]; // 0xc bytes
	/*bp-0x1c*/  /*packed*/ class MRect rectWindowTemp; // 0x10 bytes
	/*bp-0x20*/  long lCurrentValue;
	/*bp-0x40*/  char szCurrentText[32]; // 0x20 bytes

// LINE 2636:
	__asm        jmp    _T17;
_T17:
	__asm        jmp    _T1c;
// LINE 2638:
_T1c:
	__asm        lea    eax, lSliderValues[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   CheckupWindow::GetCurrentSettings;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x80];
	__asm        mov    [ebp-0x6C], eax;
// LINE 2640:
	__asm        mov    eax, [ebp-0x6C];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T5e;
// LINE 2641:
_T5e:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2642:
	sprintf(GetUserMoney(), 0x599270, szCurrentText[0]);
// LINE 2643:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD0], eax;
	__asm        cmp    dword ptr [ebp-0xD0], 0;
	__asm        je     _Tc6;

	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD0];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _Tcd;
_Tc6:
	__asm        mov    dword ptr [ebp-0x44], 0;
_Tcd:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    _Td9;
_Td9:
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x80];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x44];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x44];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T144;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        je     _T144;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T144;
_T144:
	__asm        jmp    _T149;
_T149:
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     _T171;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T171:
	__asm        jmp    _T176;
_T176:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x84];
	__asm        mov    [ebp-0x70], eax;
// LINE 2645:
	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T1a9;
// LINE 2646:
_T1a9:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2647:
	lCurrentValue = ((lSliderValues[1] + lSliderValues[2]) + lSliderValues[0]);
// LINE 2648:
	sprintf(lCurrentValue, 0x599274, szCurrentText[0]);
// LINE 2649:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        je     _T21b;

	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xD4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T222;
_T21b:
	__asm        mov    dword ptr [ebp-0x4C], 0;
_T222:
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    _T22e;
_T22e:
	__asm        lea    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x4C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x4C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T299;

	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    [ebp-0x98], eax;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T299;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0x98];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T299;
_T299:
	__asm        jmp    _T29e;
_T29e:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T2cc;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T2cc:
	__asm        jmp    _T2d1;
// LINE 2650:
_T2d1:
	__asm        call   GetUserMoney;
	__asm        cmp    eax, lCurrentValue;
	__asm        jge    _T309;
// LINE 2651:
	__asm        push   0x603AB4;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
// LINE 2652:
	__asm        jmp    _T32e;
// LINE 2653:
_T309:
	__asm        push   0x603ABC;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x84];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x84];
	__asm        call   dword ptr [edx+0xD4];
_T32e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x88];
	__asm        mov    [ebp-0x74], eax;
// LINE 2655:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T361;
// LINE 2656:
_T361:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2657:
	sprintf(lSliderValues[0], 0x599278, szCurrentText[0]);
// LINE 2658:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xD8], eax;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        je     _T473;

	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T3ca;
_T3ca:
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T447;

	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0xD8];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xDC], eax;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xE0], eax;
	__asm        mov    eax, [ebp-0xDC];
	__asm        push   eax;
	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        jmp    _T442;
_T442:
	__asm        jmp    _T453;
_T447:
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    dword ptr [eax], 0;
_T453:
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T465;
_T465:
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T47a;
_T473:
	__asm        mov    dword ptr [ebp-0x54], 0;
_T47a:
	__asm        mov    dword ptr [ebp-0x58], 0;
	__asm        jmp    _T486;
_T486:
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x88];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x88];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x54];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x54];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T4f1;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        mov    [ebp-0xA8], eax;
	__asm        cmp    dword ptr [ebp-0xA8], 0;
	__asm        je     _T4f1;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0xA8];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T4f1;
_T4f1:
	__asm        jmp    _T4f6;
_T4f6:
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T524;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T524:
	__asm        jmp    _T529;
_T529:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8C];
	__asm        mov    [ebp-0x78], eax;
// LINE 2660:
	__asm        mov    eax, [ebp-0x78];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T55c;
// LINE 2661:
_T55c:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2662:
	sprintf(lSliderValues[1], 0x59927c, szCurrentText[0]);
// LINE 2663:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE4], eax;
	__asm        cmp    dword ptr [ebp-0xE4], 0;
	__asm        je     _T5c2;

	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE4];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T5c9;
_T5c2:
	__asm        mov    dword ptr [ebp-0x5C], 0;
_T5c9:
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    _T5d5;
_T5d5:
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x8C];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x5C];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x5C];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T640;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0xBC], eax;
	__asm        mov    eax, [ebp-0xBC];
	__asm        mov    [ebp-0xB8], eax;
	__asm        cmp    dword ptr [ebp-0xB8], 0;
	__asm        je     _T640;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0xB8];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T640;
_T640:
	__asm        jmp    _T645;
_T645:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T673;

	__asm        mov    eax, [ebp-0x60];
	__asm        mov    [ebp-0xB0], eax;
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T673:
	__asm        jmp    _T678;
_T678:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x7C], eax;
// LINE 2665:
	__asm        mov    eax, [ebp-0x7C];
	__asm        add    eax, 0x10;
	__asm        lea    ecx, rectWindowTemp.left;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        jmp    _T6ab;
// LINE 2666:
_T6ab:
	__asm        lea    eax, rectWindowTemp.left;
	__asm        push   eax;
	__asm        push   0x3B;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x40];
	__asm        call   dword ptr [edx+0x44];
// LINE 2667:
	sprintf(lSliderValues[2], 0x599280, szCurrentText[0]);
// LINE 2668:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xE8], eax;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     _T711;

	__asm        lea    eax, szCurrentText[0];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xE8];
	__asm        call   basic_string_ref<char>::basic_string_ref<char>;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    _T718;
_T711:
	__asm        mov    dword ptr [ebp-0x64], 0;
_T718:
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        jmp    _T724;
_T724:
	__asm        lea    eax, [ebp-0x68];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x90];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x90];
	__asm        call   dword ptr [edx+0xC4];
	__asm        mov    eax, [ebp-0x64];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T78f;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0xCC], eax;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    [ebp-0xC8], eax;
	__asm        cmp    dword ptr [ebp-0xC8], 0;
	__asm        je     _T78f;

	__asm        push   1;
	__asm        mov    ecx, [ebp-0xC8];
	__asm        call   basic_string_ref<char>::`scalar deleting destructor';
	__asm        jmp    _T78f;
_T78f:
	__asm        jmp    _T794;
_T794:
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T7c2;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0xC0], eax;
	__asm        mov    eax, [ebp-0xC0];
	__asm        mov    [ebp-0xC4], eax;
	__asm        mov    eax, [ebp-0xC4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T7c2:
	__asm        jmp    _T7c7;
// LINE 2669:
_T7c7:
	return;
}

// FUNCTION: COPTER_D 0x00460848
int32_t CheckupWindow::DoMessage(/*unpacked*/ class GraphicWindow *gwSource, long lWindowID, long lMessage, void * __ptr32 pMessageData) {
// LINE 2680:
	__asm        mov    eax, lWindowID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Ta3;
// LINE 2684:
_T17:
	__asm        cmp    lMessage, 0x10001;
	__asm        jne    _T2c;
// LINE 2685:
	this->CheckupWindow::SetTextControlsBasedOnCurrentSliderValues();
// LINE 2686:
_T2c:
	return 0x1;
// LINE 2689:
_T36:
	__asm        mov    ecx, this;
	__asm        call   CheckupWindow::CanUserAffordCurrentSliderValues;
	__asm        test   eax, eax;
	__asm        je     _T68;
// LINE 2690:
	__asm        push   0;
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2692:
_T68:
	return 0x1;
// LINE 2695:
_T72:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2696:
	return 0x1;
// LINE 2697:
	__asm        jmp    _Tce;
_Ta3:
	__asm        dec    dword ptr [ebp-8];
	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        ja     _Tce;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    _Switch_ba[0][eax*4];
// Switch pointers:
//   _T36
//   _T72
//   _T17
//   _T17
//   _T17
// LINE 2699:
_Tce:
	return 0x0;
// LINE 2700:
}

// FUNCTION: COPTER_D 0x00460924
long CheckupWindow::DoKeyDown(long lKey, char chModifiers) {
// LINE 2709:
	__asm        cmp    lKey, 0x1B;
	__asm        jne    _T45;
// LINE 2710:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x38], 0;
	__asm        je     _T45;
// LINE 2711:
	__asm        push   0;
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x38];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x38];
	__asm        call   dword ptr [edx];
// LINE 2713:
_T45:
	return 0x1;
// LINE 2714:
}



// Contribution: 1:0005f980-0005fc15 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460980
// MessageBoxWindow::`scalar deleting destructor'



// Contribution: 1:0005fc20-0005fc5d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460c20
// AnimationWindow::`scalar deleting destructor'



// Contribution: 1:0005fc60-0005fc98 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460c60
// RenderSettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fca0-0005fcdd Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460ca0
// SoundSettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fce0-0005fd1d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460ce0
// CitySettingsWindow::`scalar deleting destructor'



// Contribution: 1:0005fd20-0005fd58 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460d20
// PopupMenuExtra::`scalar deleting destructor'



// Contribution: 1:0005fd60-0005fd98 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460d60
// TooltipWindow::`scalar deleting destructor'



// Contribution: 1:0005fda0-0005fdd8 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460da0
// BoneheadTextEditWindow::`scalar deleting destructor'



// Contribution: 1:0005fde0-0005fe15 Module: 45, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0005fe20-0005fe59 Module: 45, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0005fe60-000600fa Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00460e60
// MessageBoxWindowEdit::`scalar deleting destructor'



// Contribution: 1:00060100-00060138 Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00461100
// ScrollingCreditWindow::`scalar deleting destructor'



// Contribution: 1:00060140-0006017d Module: 45, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00461140
// CheckupWindow::`scalar deleting destructor'



// Contribution: 2:00000a80-00000b53 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MessageBoxWindow @ 0x0058fa80
//   00: MessageBoxWindow::DoMessage @ 0x0045171a
//   01: MessageBoxWindow::Initialize @ 0x00450b5d
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: MessageBoxWindow::DoKeyDown @ 0x0045165b
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: MessageBoxWindow::`scalar deleting destructor' @ 0x00460980
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: MessageBoxWindow::SetTextColor @ 0x00451ea4
//   50: MessageBoxWindow::SetButtonTextColor @ 0x00451ed9
//   51: MessageBoxWindow::ConvertTypeToStringID @ 0x00451785
//   52: MessageBoxWindow::DrawTextOntoBox @ 0x00451817
//   53 entries



// Contribution: 2:00000b58-00000c1b Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for AnimationWindow @ 0x0058fb58
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: GraphicWindow::Initialize @ 0x004a44d4
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: AnimationWindow::ComposeSelf @ 0x0045210c
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: AnimationWindow::`scalar deleting destructor' @ 0x00460c20
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: AnimationWindow::DoesWindowNeedUpdating @ 0x0045239c
//   49 entries



// Contribution: 2:00000c20-00000ce3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for RenderSettingsWindow @ 0x0058fc20
//   00: RenderSettingsWindow::DoMessage @ 0x00455a06
//   01: RenderSettingsWindow::Initialize @ 0x00452637
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: RenderSettingsWindow::CreateImage @ 0x00454163
//   05: RenderSettingsWindow::DestroyImage @ 0x004541bc
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: RenderSettingsWindow::DoKeyDown @ 0x00454527
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: RenderSettingsWindow::`scalar deleting destructor' @ 0x00460c60
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: RenderSettingsWindow::DrawSelf @ 0x00454288
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00000ce8-00000dab Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for SoundSettingsWindow @ 0x0058fce8
//   00: SoundSettingsWindow::DoMessage @ 0x004571ed
//   01: SoundSettingsWindow::Initialize @ 0x00455c7f
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: SoundSettingsWindow::DoKeyDown @ 0x00456f10
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: SoundSettingsWindow::`scalar deleting destructor' @ 0x00460ca0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00000db0-00000dcf Module: 45, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00000dd0-00000e93 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CitySettingsWindow @ 0x0058fdd0
//   00: CitySettingsWindow::DoMessage @ 0x00459359
//   01: CitySettingsWindow::Initialize @ 0x004573a9
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: CitySettingsWindow::DoKeyDown @ 0x0045940e
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CitySettingsWindow::`scalar deleting destructor' @ 0x00460ce0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 2:00000e98-00000ff7 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for PopupMenuExtra @ 0x0058fe98
//   00: ListBoxWindow::DoMessage @ 0x004b4822
//   01: PopupMenuExtra::Initialize @ 0x00459ad1
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: PopupMenuExtra::DestroyImage @ 0x0045a8bd
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: ListBoxWindow::DoCharacter @ 0x004b6aaf
//   33: PopupMenuWindow::DoKeyDown @ 0x004b7cc1
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: PopupMenuWindow::DoCursorDown @ 0x004b7d92
//   36: PopupMenuWindow::DoCursorUp @ 0x004b7e63
//   37: PopupMenuWindow::DoCursorMove @ 0x004b7edf
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: PopupMenuExtra::`scalar deleting destructor' @ 0x00460d20
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: PopupMenuExtra::DrawSelf @ 0x00459afd
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: ListBoxWindow::RemoveString @ 0x004b5262
//   50: ListBoxWindow::RemoveString @ 0x004b520e
//   51: ListBoxWindow::RemoveAllStrings @ 0x004b5347
//   52: ListBoxWindow::InsertString @ 0x004b55ee
//   53: ListBoxWindow::InsertString @ 0x004b550e
//   54: ListBoxWindow::ResizeWindowForExactLineHeights @ 0x004b4921
//   55: ListBoxWindow::SetSelection @ 0x004b6c11
//   56: ListBoxWindow::GetSelection @ 0x004b6d4e
//   57: ListBoxWindow::SetShouldSort @ 0x004b73e9
//   58: ListBoxWindow::Sort @ 0x004b742a
//   59: ListBoxWindow::MoveLineUp @ 0x004b6ffd
//   60: ListBoxWindow::MoveLineDown @ 0x004b706a
//   61: ListBoxWindow::ScrollToStart @ 0x004b6f47
//   62: ListBoxWindow::ScrollToEnd @ 0x004b6f85
//   63: ListBoxWindow::ScrollPageUp @ 0x004b70da
//   64: ListBoxWindow::ScrollPageDown @ 0x004b714e
//   65: ListBoxWindow::IsIndexInView @ 0x004b6d6d
//   66: ListBoxWindow::PutIndexInView @ 0x004b6dbe
//   67: ListBoxWindow::ScrollToFirstLetter @ 0x004b71f4
//   68: ListBoxWindow::SetIndexOfTopLine @ 0x004b6e56
//   69: ListBoxWindow::GetLineCount @ 0x004b78e5
//   70: ListBoxWindow::GetIndexOfTopLine @ 0x004b7906
//   71: ListBoxWindow::SetBackgroundDrawing @ 0x004b49b6
//   72: ListBoxWindow::SetBackgroundPaletteIndex @ 0x004b4a11
//   73: ListBoxWindow::SetTextColor @ 0x004b4a55
//   74: ListBoxWindow::SetFontCharacteristics @ 0x004b48d2
//   75: ListBoxWindow::AddScrollBar @ 0x004b7925
//   76: ListBoxWindow::RemoveScrollBar @ 0x004b7a29
//   77: PopupMenuExtra::CalculateAllMetrics @ 0x0045a932
//   78: ListBoxWindow::GetStringAddressFromIndex @ 0x004b5e21
//   79: ListBoxWindow::GetStringFromIndex @ 0x004b5edc
//   80: ListBoxWindow::GetIndexFromString @ 0x004b60de
//   81: PopupMenuWindow::RemoveStringAtIndex @ 0x004b7f18
//   82: PopupMenuWindow::InsertStringAtIndex @ 0x004b7f59
//   83: ListBoxWindow::ModifyString @ 0x004b5c06
//   84: ListBoxWindow::SetScrollBarValue @ 0x004b7a99
//   85: ListBoxWindow::SetScrollBarSizes @ 0x004b7b61
//   86: PopupMenuExtra::ResizeWindowToFitMenuItems @ 0x0045a9b0
//   87: PopupMenuExtra::CreateImage @ 0x0045a5f8
//   88 entries



// Contribution: 2:00000ff8-000010eb Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for TooltipWindow @ 0x0058fff8
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: TooltipWindow::Initialize @ 0x0045b379
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: TooltipWindow::DestroyImage @ 0x0045b981
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: TooltipWindow::SetWindowTitle @ 0x0045b3d7
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: TooltipWindow::`scalar deleting destructor' @ 0x00460d60
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: TooltipWindow::DrawSelf @ 0x0045b40a
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: TextWindow::SetWindowTitle @ 0x004ad7b6
//   50: TooltipWindow::SetWindowTitle @ 0x0045b3a5
//   51: TextWindow::SetFontCharacteristics @ 0x004adba4
//   52: TextWindow::SetTextDrawStyle @ 0x004adbe5
//   53: TextWindow::SetTextColor @ 0x004add6f
//   54: TextWindow::SetBackgroundDrawing @ 0x004adb83
//   55: TextWindow::LoadStrings @ 0x004ad01e
//   56: TextWindow::FitWindowToText @ 0x004adc18
//   57: TextWindow::ResizeWindowForExactLineHeights @ 0x004adda1
//   58: TooltipWindow::CreateImage @ 0x0045b6ca
//   59: TooltipWindow::SetTextAndShow @ 0x0045ba44
//   60: TooltipWindow::SetTextAndShow @ 0x0045b9f6
//   61 entries



// Contribution: 2:000010f0-000011f3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for BoneheadTextEditWindow @ 0x005900f0
//   00: GraphicWindowOwner::DoMessage @ 0x004a17be
//   01: BoneheadTextEditWindow::Initialize @ 0x0045c39e
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: BoneheadTextEditWindow::DestroyImage @ 0x0045c689
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: BoneheadTextEditWindow::DoCharacter @ 0x0045c98b
//   33: BoneheadTextEditWindow::DoKeyDown @ 0x0045ccfd
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: BoneheadTextEditWindow::DoCursorDown @ 0x0045cd68
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: BoneheadTextEditWindow::`scalar deleting destructor' @ 0x00460da0
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: BoneheadTextEditWindow::DrawSelf @ 0x0045c6f6
//   48: BoneheadTextEditWindow::DoesWindowNeedUpdating @ 0x0045cd8c
//   49: TextWindow::SetWindowTitle @ 0x004ad7b6
//   50: TextWindow::SetWindowTitle @ 0x004ad775
//   51: TextWindow::SetFontCharacteristics @ 0x004adba4
//   52: TextWindow::SetTextDrawStyle @ 0x004adbe5
//   53: TextWindow::SetTextColor @ 0x004add6f
//   54: TextWindow::SetBackgroundDrawing @ 0x004adb83
//   55: TextWindow::LoadStrings @ 0x004ad01e
//   56: TextWindow::FitWindowToText @ 0x004adc18
//   57: TextWindow::ResizeWindowForExactLineHeights @ 0x004adda1
//   58: BoneheadTextEditWindow::CreateImage @ 0x0045c476
//   59: BoneheadTextEditWindow::SetCaretPeriod @ 0x0045cf0b
//   60: BoneheadTextEditWindow::SetCharacterCountLimit @ 0x0045cf34
//   61: BoneheadTextEditWindow::GetEditText @ 0x0045d8c1
//   62: BoneheadTextEditWindow::GetEditText @ 0x0045d414
//   63: BoneheadTextEditWindow::ProcessBackspace @ 0x0045cf58
//   64: BoneheadTextEditWindow::ProcessReturn @ 0x0045d3ee
//   65 entries



// Contribution: 2:000011f8-000012d3 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for MessageBoxWindowEdit @ 0x005901f8
//   00: MessageBoxWindow::DoMessage @ 0x0045171a
//   01: MessageBoxWindowEdit::Initialize @ 0x0045db55
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: MessageBoxWindow::DoKeyDown @ 0x0045165b
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: MessageBoxWindowEdit::`scalar deleting destructor' @ 0x00460e60
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49: MessageBoxWindow::SetTextColor @ 0x00451ea4
//   50: MessageBoxWindow::SetButtonTextColor @ 0x00451ed9
//   51: MessageBoxWindow::ConvertTypeToStringID @ 0x00451785
//   52: MessageBoxWindow::DrawTextOntoBox @ 0x00451817
//   53: MessageBoxWindowEdit::GetEditText @ 0x00460e20
//   54: MessageBoxWindowEdit::GetEditText @ 0x00460de0
//   55 entries



// Contribution: 2:000012d8-0000139b Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for ScrollingCreditWindow @ 0x005902d8
//   00: ScrollingCreditWindow::DoMessage @ 0x0045e10c
//   01: ScrollingCreditWindow::Initialize @ 0x0045de71
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: GraphicWindow::DoKeyDown @ 0x004a6582
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: ScrollingCreditWindow::`scalar deleting destructor' @ 0x00461100
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: ScrollingCreditWindow::DrawSelf @ 0x0045df2f
//   48: ScrollingCreditWindow::DoesWindowNeedUpdating @ 0x0045df5d
//   49 entries



// Contribution: 2:000013a0-00001463 Module: 45, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CheckupWindow @ 0x005903a0
//   00: CheckupWindow::DoMessage @ 0x00460848
//   01: CheckupWindow::Initialize @ 0x0045e24b
//   02: GraphicWindow::CreateAllImages @ 0x004a6dc5
//   03: GraphicWindow::DestroyAllImages @ 0x004a6ea7
//   04: GraphicWindow::CreateImage @ 0x004a4aa0
//   05: GraphicWindow::DestroyImage @ 0x004a4cab
//   06: GraphicWindow::ComposeSelf @ 0x004a60a3
//   07: GraphicWindow::SetImageToDrawOnto @ 0x004a6bcd
//   08: GraphicWindow::SetAllImagesToDrawOnto @ 0x004a6cf0
//   09: GraphicWindow::SetTransparentColor @ 0x004a4d1c
//   10: GraphicWindow::SetBorderDrawing @ 0x0040d810
//   11: GraphicWindow::DrawBorder @ 0x004a6f7c
//   12: GraphicWindow::SetChanged @ 0x004a50e0
//   13: GraphicWindow::MoveWindow @ 0x004a4d7e
//   14: GraphicWindow::SetWidthAndHeight @ 0x004a4df1
//   15: GraphicWindow::CenterWindow @ 0x004a4ea8
//   16: GraphicWindow::CenterWindow @ 0x004a4e55
//   17: GraphicWindow::SetWindowPosition @ 0x0040d840
//   18: GraphicWindow::SetWindowTitle @ 0x004a51d0
//   19: GraphicWindow::InvalidateAllOverlaps @ 0x004a6256
//   20: GraphicWindow::InvalidateAllChildren @ 0x004a6399
//   21: GraphicWindow::AddChild @ 0x004a53be
//   22: GraphicWindow::DeleteChild @ 0x004a5837
//   23: GraphicWindow::DeleteChild @ 0x004a569a
//   24: GraphicWindow::RemoveChild @ 0x004a5a11
//   25: GraphicWindow::DeleteAllChildren @ 0x004a5b58
//   26: GraphicWindow::RemoveAllChildren @ 0x004a5cd8
//   27: GraphicWindow::DeleteSelf @ 0x004a603c
//   28: GraphicWindow::RemoveSelf @ 0x004a606b
//   29: GraphicWindow::FindChild @ 0x004a5dd1
//   30: GraphicWindow::SetParent @ 0x0040d7e0
//   31: GraphicWindow::CanWeRespondToMessage @ 0x004a786b
//   32: GraphicWindow::DoCharacter @ 0x004a6568
//   33: CheckupWindow::DoKeyDown @ 0x00460924
//   34: GraphicWindow::DoKeyUp @ 0x004a659c
//   35: GraphicWindow::DoCursorDown @ 0x004a65b6
//   36: GraphicWindow::DoCursorUp @ 0x004a65d0
//   37: GraphicWindow::DoCursorMove @ 0x004a65ed
//   38: GraphicWindow::CaptureCursorStart @ 0x004a6607
//   39: GraphicWindow::CaptureCursorEnd @ 0x004a6640
//   40: GraphicWindow::WindowToScreenCoordinates @ 0x004a667d
//   41: GraphicWindow::ScreenToWindowCoordinates @ 0x004a66cc
//   42: GraphicWindow::IsPointInWindow @ 0x0040d8b0
//   43: CheckupWindow::`scalar deleting destructor' @ 0x00461140
//   44: GraphicWindow::GetImage @ 0x004a6720
//   45: GraphicWindow::GetImagePath @ 0x004a673c
//   46: GraphicWindow::DrawChildren @ 0x004a6180
//   47: GraphicWindow::DrawSelf @ 0x004a6168
//   48: GraphicWindow::DoesWindowNeedUpdating @ 0x004a646b
//   49 entries



// Contribution: 3:00000044-00000053 Module: 45, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x00597044
static void (*$S67)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597048
static void (*$S70)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059704c
static void (*$S73)() = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00597050
static void (*$S76)() = { 0 /* todo */ };



// Contribution: 3:0000213c-00002283 Module: 45, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x0059913c
char * SZ_MESSAGE_BOX_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599140
char * SZ_RENDER_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599144
char * SZ_SKY_FILE_NAME_BASE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599148
char * SZ_GROUND_FILE_NAME_BASE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059914c
char * SZ_BUILDING_FILE_NAME_BASE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599150
char * SZ_LO_RES = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599154
char * SZ_HI_RES = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599158
char * SZ_TEXTURE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059915c
char * SZ_NO_TEXTURE = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599160
char * SZ_SKY_COOL = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599164
char * SZ_SKY_GRAY = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599168
char * SZ_RENDER_WINDOW_SCROLL_BAR_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059916c
char * SZ_SOUND_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599170
char * SZ_SOUND_WINDOW_STATION_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599174
char * SZ_SOUND_WINDOW_STATION_THUMB_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599178
char * SZ_CITY_SETTINGS_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059917c
char * SZ_CITY_SETTINGS_SLIDER_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599180
char * SZ_POPUP_EXTRA_BACKGROUND_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599184
char * SZ_TOOLTIP_BACKGROUND_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x00599188
char * SZ_CHECKUP_WINDOW_IMAGE_FILE_NAME = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x0059918c
char * SZ_CHECKUP_SLIDER_IMAGE_FILE_NAME = { 0 /* todo */ };



// Contribution: 3:0006cab0-0006cabf Module: 45, 4 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00603ab0
static /*packed*/ struct SparkalColor colorTextGamePaletteNormal;

// GLOBAL: COPTER_D 0x00603ab4
static /*packed*/ struct SparkalColor colorTextCheckupHighlighted;

// GLOBAL: COPTER_D 0x00603ab8
static /*packed*/ struct SparkalColor colorTextGamePaletteHighlighted;

// GLOBAL: COPTER_D 0x00603abc
static /*packed*/ struct SparkalColor colorTextCheckupNormal;

