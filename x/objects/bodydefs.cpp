// Module: Bodydefs.obj
// Source: C:\Copter\Source\X\Objects\Bodydefs.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0015c950-0015d654 Module: 192, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0055d950
void SwizzlePrivAnimPartInfo(void * __ptr32 val, long size) {
	struct PrivAnimPartInfo* pinfo;

// LINE 109:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 111:
	__asm        cmp    size, 8;
	__asm        je     near ptr 0x0055D97C;
	__asm        push   0x8C085;
	__asm        push   0x5BE00C;
	__asm        push   0x6F;
	__asm        push   0x5BE038;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 112:
	__asm        mov    eax, val;
	__asm        mov    pinfo, eax;
// LINE 125:
	__asm        jmp    near ptr 0x0055D987;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d98c
struct TinyXZY DXZY_2_TinyXZY(struct DXZY dxzy) {
	struct TinyXZY txzy;

// LINE 128:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 130:
	__asm        mov    eax, dxzy.x;
	__asm        push   eax;
	__asm        call   0x0055DA4B;
	__asm        add    esp, 4;
	__asm        mov    txzy.x, al;
// LINE 131:
	__asm        mov    eax, dxzy.z;
	__asm        push   eax;
	__asm        call   0x0055DA4B;
	__asm        add    esp, 4;
	__asm        mov    txzy.z, al;
// LINE 132:
	__asm        mov    eax, dxzy.y;
	__asm        push   eax;
	__asm        call   0x0055DA4B;
	__asm        add    esp, 4;
	__asm        mov    txzy.y, al;
// LINE 133:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.x);
	__asm        jmp    near ptr 0x0055D9CA;
// LINE 134:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d9cf
struct DXZY TinyXZY_2_DXZY(struct TinyXZY txzy) {
	struct DXZY dxzy;

// LINE 137:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 139:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.x);
	__asm        push   eax;
	__asm        call   0x0055DA2E;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.x;
// LINE 140:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.z);
	__asm        push   eax;
	__asm        call   0x0055DA2E;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.z;
// LINE 141:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.y);
	__asm        push   eax;
	__asm        call   0x0055DA2E;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.y;
// LINE 142:
	__asm        lea    eax, dxzy.x;
	__asm        mov    ecx, [ebp+8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp+8];
	__asm        jmp    near ptr 0x0055DA29;
// LINE 146:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055da2e
float Byte_2_Float(char byte) {
// LINE 151:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 152:
	__asm        movsx  eax, byte;
	__asm        mov    [ebp-4], eax;
	__asm        fild   dword ptr [ebp-4];
	__asm        jmp    near ptr 0x0055DA46;
// LINE 153:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055da4b
char Float_2_Byte(float flt) {
// LINE 156:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 157:
	__asm        fld    flt;
	__asm        fcomp  qword ptr ds:[0x593640];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     near ptr 0x0055DA79;
	__asm        fld    flt;
	__asm        fcomp  qword ptr ds:[0x593648];
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        je     near ptr 0x0055DA95;
	__asm        push   0x8C085;
	__asm        push   0x5BE060;
	__asm        push   0x9D;
	__asm        push   0x5BE084;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 160:
	__asm        fld    flt;
	__asm        call   0x0056EBE8;
	__asm        jmp    near ptr 0x0055DAA2;
// LINE 161:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055daa7
void SwizzlePoint(void * __ptr32 val, long size) {
	struct Point* pt;

// LINE 165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 167:
	__asm        cmp    size, 4;
	__asm        je     near ptr 0x0055DAD6;
	__asm        push   0x8C085;
	__asm        push   0x5BE0AC;
	__asm        push   0xA7;
	__asm        push   0x5BE0D4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 168:
	__asm        mov    eax, val;
	__asm        mov    pt, eax;
// LINE 169:
	__asm        mov    eax, pt;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 170:
	__asm        mov    eax, pt;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 172:
	__asm        jmp    near ptr 0x0055DAFC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055db01
void InitBodiesAndAnimations() {
	char[260] animpath;
	unsigned char[256] privname;

// LINE 175:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x55E286;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x25C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 199:
	__asm        lea    eax, animpath[0];
	__asm        push   eax;
	__asm        push   0x5BE0FC;
	__asm        push   0;
	__asm        push   0xA;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 200:
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        lea    eax, animpath[0];
	__asm        push   eax;
	__asm        call   0x00566266;
	__asm        add    esp, 8;
// LINE 203:
	__asm        push   0x14;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x218], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x218], 0;
	__asm        je     near ptr 0x0055DBF6;
	__asm        mov    eax, [ebp-0x218];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    word ptr [eax+8], 0;
	__asm        jmp    near ptr 0x0055DB9E;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax], 0x593650;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x0055DBCD;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x21C], eax;
	__asm        jmp    near ptr 0x0055DBF1;
_L39430:
	__asm        mov    ecx, [ebp-0x230];
	__asm        add    ecx, 4;
	__asm        call   0x0055FCB0;
	__asm        ret;
	__asm        jmp    near ptr 0x0055DC00;
	__asm        mov    dword ptr [ebp-0x21C], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x21C];
	__asm        mov    [ebp-0x214], eax;
	__asm        push   0x11C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220], eax;
	__asm        mov    dword ptr [ebp-4], 2;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     near ptr 0x0055DCE2;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    [ebp-0x22C], eax;
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   0x0055C270;
	__asm        mov    byte ptr [ebp-4], 3;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax], 0x593508;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax+0x110], 0;
	__asm        jmp    near ptr 0x0055DC86;
	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    [ebp-0x228], eax;
	__asm        jmp    near ptr 0x0055DCA7;
_L39423:
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   0x0055C2BB;
	__asm        ret;
	__asm        mov    byte ptr [ebp-4], 4;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax], 0x593518;
	__asm        jmp    near ptr 0x0055DCBC;
	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    near ptr 0x0055DCDD;
_L39421:
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   0x0055301B;
	__asm        ret;
	__asm        jmp    near ptr 0x0055DCEC;
	__asm        mov    dword ptr [ebp-0x224], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055DD37;
	__asm        push   0x8C085;
	__asm        push   0x5BE1BC;
	__asm        push   0xA5;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+4];
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055DD8A;
	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xA7;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055DDB2;
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        call   0x0058E320;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    dword ptr [eax+0x10], 0x424F4443;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ds:[0x5BE630], eax;
	__asm        jmp    near ptr 0x0055DE11;
	__asm        mov    eax, [ebp-0x234];
	__asm        mov    ds:[0x5BE630], eax;
_L39417:
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L39414:
	__asm        mov    eax, [ebp-0x218];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x268], eax;
// LINE 204:
	__asm        mov    eax, [ebp-0x268];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0055DE48;
	__asm        push   0x8C085;
	__asm        push   0x5BE188;
	__asm        push   0xB5;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x005674E0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x260], ax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055DE96;
	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xB7;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x268];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0055DEC2;
	__asm        push   0x8C085;
	__asm        push   0x5BE168;
	__asm        push   0xB8;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x264], eax;
	__asm        push   0x56240B;
	__asm        push   0x28;
	__asm        push   0x41524350;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   0x00569095;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055DEF1;
	__asm        push   0x56249B;
	__asm        push   8;
	__asm        push   0x41524C55;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   0x00569095;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055DF11;
	__asm        jmp    near ptr 0x0055DF16;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055319A;
	__asm        mov    [ebp-0x254], ax;
	__asm        mov    word ptr [ebp-0x258], 1;
	__asm        jmp    near ptr 0x0055DF4A;
	__asm        inc    word ptr [ebp-0x258];
	__asm        movsx  eax, word ptr [ebp-0x254];
	__asm        movsx  ecx, word ptr [ebp-0x258];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0055DFC7;
	__asm        push   0x55E6F0;
	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553452;
	__asm        mov    [ebp-0x25C], eax;
	__asm        cmp    dword ptr [ebp-0x25C], 0;
	__asm        jne    near ptr 0x0055DFB3;
	__asm        push   0x8C085;
	__asm        push   0x5BE148;
	__asm        push   0xC1;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x25C];
	__asm        push   eax;
	__asm        call   0x0055F920;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055DF43;
	__asm        test   dword ptr [ebp-0x260], 0xFFFF;
	__asm        je     near ptr 0x0055DFEE;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
	__asm        jmp    near ptr 0x0055DFF3;
// LINE 205:
	__asm        push   0x14;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    dword ptr [ebp-4], 5;
	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     near ptr 0x0055E02D;
	__asm        mov    ecx, [ebp-0x23C];
	__asm        call   0x0055E830;
	__asm        mov    [ebp-0x240], eax;
	__asm        jmp    near ptr 0x0055E037;
	__asm        mov    dword ptr [ebp-0x240], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x240];
	__asm        mov    [ebp-0x238], eax;
	__asm        push   0x11C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    dword ptr [ebp-4], 6;
	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     near ptr 0x0055E0C3;
	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x24C], eax;
	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   0x0055E660;
	__asm        mov    byte ptr [ebp-4], 7;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    dword ptr [eax], 0x593518;
	__asm        jmp    near ptr 0x0055E09D;
	__asm        mov    byte ptr [ebp-4], 6;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    [ebp-0x248], eax;
	__asm        jmp    near ptr 0x0055E0BE;
_L39460:
	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   0x0055301B;
	__asm        ret;
	__asm        jmp    near ptr 0x0055E0CD;
	__asm        mov    dword ptr [ebp-0x248], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055E118;
	__asm        push   0x8C085;
	__asm        push   0x5BE1BC;
	__asm        push   0xA5;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+4];
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055E16B;
	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xA7;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055E193;
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        call   0x0058E320;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x10], 0x414E4950;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ds:[0x5BF6D4], eax;
	__asm        jmp    near ptr 0x0055E1F2;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    ds:[0x5BF6D4], eax;
_L39456:
	__asm        mov    eax, [ebp-0x244];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L39453:
	__asm        mov    eax, [ebp-0x23C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 206:
	__asm        mov    ecx, ds:[0x5BF6D4];
	__asm        call   0x0055ED00;
// LINE 209:
	__asm        mov    word ptr ds:[0x6376B0], 4;
// LINE 210:
	__asm        mov    word ptr ds:[0x6376B2], 5;
// LINE 211:
	__asm        mov    word ptr ds:[0x6376B4], 0x2C;
// LINE 212:
	__asm        mov    word ptr ds:[0x6376B6], 0x2D;
// LINE 213:
	__asm        mov    word ptr ds:[0x6376B8], 0x2E;
// LINE 214:
	__asm        mov    word ptr ds:[0x6376BC], 0x2F;
// LINE 215:
	__asm        mov    word ptr ds:[0x6376C0], 0x30;
// LINE 216:
	__asm        mov    word ptr ds:[0x6376C2], 0x31;
// LINE 217:
	__asm        mov    word ptr ds:[0x6376BA], 0x41;
// LINE 218:
	__asm        mov    word ptr ds:[0x6376BE], 0x42;
// LINE 219:
	__asm        mov    word ptr ds:[0x6376C4], 0x43;
// LINE 220:
	__asm        jmp    near ptr 0x0055E281;
	__asm        push   0x8C085;
	__asm        push   0x5BE108;
	__asm        push   0xDC;
	__asm        push   0x5BE120;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 225:
	__asm        jmp    near ptr 0x0055E290;
_L39413:
	__asm        mov    eax, 0x595FA8;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055e29e
void DeleteBodiesAndAnimations() {
// LINE 229:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x70;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    eax, ds:[0x5BF6D4];
	__asm        mov    [ebp-0x38], eax;
// LINE 233:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x0055E2C7;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0055E2CE;
	__asm        mov    dword ptr [ebp-0xC], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        lea    ecx, [ebp-8];
	__asm        call   0x0055E7F0;
	__asm        jmp    near ptr 0x0055E2E1;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0055E301;
	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x0055E315;
	__asm        jmp    near ptr 0x0055E310;
	__asm        jmp    near ptr 0x0055E306;
	__asm        jmp    near ptr 0x0055E310;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x0055E315;
	__asm        jmp    near ptr 0x0055E386;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0055E331;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0055E33D;
	__asm        jmp    near ptr 0x0055E33D;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x0055E33D;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+4];
	__asm        lea    ecx, [eax+4];
	__asm        call   0x0055E740;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0055E37C;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0055E37C;
	__asm        jmp    near ptr 0x0055E381;
	__asm        jmp    near ptr 0x0055E2AF;
	__asm        jmp    near ptr 0x0055E38B;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x0055E3A9;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0055E3BB;
	__asm        inc    dword ptr [ebp-0x34];
	__asm        jmp    near ptr 0x0055E3A0;
	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x34];
	__asm        je     near ptr 0x0055E3E4;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055E3E9;
	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055E411;
	__asm        push   0x8C085;
	__asm        push   0x5BE210;
	__asm        push   0x32;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0055E43B;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0055E43B;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0055E46F;
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   0x0055E9B0;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055E46A;
	__asm        jmp    near ptr 0x0055E46F;
	__asm        jmp    near ptr 0x0055E474;
	__asm        jmp    near ptr 0x0055E479;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x70], eax;
// LINE 234:
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     near ptr 0x0055E499;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x0055E4A0;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        lea    ecx, [ebp-0x40];
	__asm        call   0x0055FD90;
	__asm        jmp    near ptr 0x0055E4B3;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0055E4D3;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x0055E4E7;
	__asm        jmp    near ptr 0x0055E4E2;
	__asm        jmp    near ptr 0x0055E4D8;
	__asm        jmp    near ptr 0x0055E4E2;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    near ptr 0x0055E4E7;
	__asm        jmp    near ptr 0x0055E558;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0055E503;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x0055E50F;
	__asm        jmp    near ptr 0x0055E50F;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x0055E50F;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   dword ptr [eax+4];
	__asm        lea    ecx, [eax+4];
	__asm        call   0x0055E740;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0055E54E;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0055E54E;
	__asm        jmp    near ptr 0x0055E553;
	__asm        jmp    near ptr 0x0055E481;
	__asm        jmp    near ptr 0x0055E55D;
	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x0055E57B;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     near ptr 0x0055E58D;
	__asm        inc    dword ptr [ebp-0x6C];
	__asm        jmp    near ptr 0x0055E572;
	__asm        mov    eax, [ebp-0x70];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x6C];
	__asm        je     near ptr 0x0055E5B6;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055E5BB;
	__asm        mov    eax, [ebp-0x70];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055E5E3;
	__asm        push   0x8C085;
	__asm        push   0x5BE210;
	__asm        push   0x32;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     near ptr 0x0055E60D;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0055E60D;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x0055E641;
	__asm        mov    ecx, [ebp-0x60];
	__asm        call   0x0055FDD0;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055E63C;
	__asm        jmp    near ptr 0x0055E641;
	__asm        jmp    near ptr 0x0055E646;
	__asm        jmp    near ptr 0x0055E64B;
// LINE 247:
	__asm        jmp    near ptr 0x0055E650;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:0015d660-0015d6e8 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d6f0-0015d73d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d740-0015d7ea Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d7f0-0015d82d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d830-0015d8c5 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d8d0-0015d9a7 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d9b0-0015dabc Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015dac0-0015dcfb Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015dd00-0015e1d7 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e1e0-0015e210 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e220-0015e250 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e260-0015e279 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e280-0015e2b0 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e2c0-0015e309 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e310-0015e4d8 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e4e0-0015e4fe Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e500-0015e51c Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e520-0015e535 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e540-0015e5a9 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0055f540
// cBBase::`scalar deleting destructor'



// Contribution: 1:0015e5b0-0015e5e1 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e5f0-0015e61a Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e620-0015e654 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e660-0015e693 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e6a0-0015e6ba Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e6c0-0015e77e Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e780-0015e82d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e830-0015e918 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0055f830
// cCopterAnim::`scalar deleting destructor'



// Contribution: 1:0015e920-0015ec6e Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ec70-0015ec85 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ec90-0015ecaa Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ecb0-0015ed87 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ed90-0015edcd Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015edd0-0015eedc Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015eee0-0015f11b Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015f120-0015f282 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00560120
// cCopterBody::`scalar deleting destructor'



// Contribution: 2:00004640-0000464f Module: 192, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004650-00004653 Module: 192, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593650
// ??_7?$cBList@VcCopterBody@@@@6B@


// Contribution: 2:00004654-00004657 Module: 192, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593654
// ??_7?$cBList@VcCopterAnim@@@@6B@


// Contribution: 2:00004658-00004683 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593658
// ??_7cCopterAnim@@6B@


// Contribution: 2:00004688-000046ab Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593688
// ??_7cBBase@@6B@


// Contribution: 2:000046b0-000046d3 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005936b0
// ??_7cCopterBody@@6B@


// Contribution: 2:00006fa8-00007007 Module: 192, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00007008-0000702f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007030-00007057 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007058-0000707f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007080-000070af Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000070b0-000070df Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000070e0-0000710f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007110-00007137 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007138-0000716f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:0002700c-00027147 Module: 192, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00027148-00027165 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be148
// ??_C@_0BO@NBMC@couldn?8t?5load?5an?5indexed?5body?$AA@


// Contribution: 3:00027168-00027184 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be168
// ??_C@_0BN@NCLL@must?5set?5type?5before?5loading?$AA@


// Contribution: 3:00027188-000271a5 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be188
// ??_C@_0BO@DKFM@must?5load?5bodies?5from?5a?5file?$DP?$AA@


// Contribution: 3:000271a8-000271ba Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be1a8
// ??_C@_0BD@JOEE@couldn?8t?5open?5file?$AA@


// Contribution: 3:000271bc-000271eb Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be1bc
// ??_C@_0DA@MJOK@make?5a?5new?5resfile?5and?5then?5it?8s@


// Contribution: 3:000271ec-0002720e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be1ec
// ??_C@_0CD@JLCJ@C?3?2Copter?2Source?2X?2Objects?2bList@


// Contribution: 3:00027210-0002722d Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be210
// ??_C@_0BO@ELJL@count?5not?50?5in?5cBList?5delete?$CB?$AA@


// Contribution: 3:00027230-00027255 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be230
// ??_C@_0CG@OOAA@bad?5size?5passed?5to?5SwizzleBBaseH@


// Contribution: 3:00027258-0002727a Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be258
// ??_C@_0CD@DJLO@C?3?2Copter?2Source?2X?2Objects?2bBase@


// Contribution: 3:0002727c-0002729d Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be27c
// ??_C@_0CC@HJGL@count?5not?50?5in?5cBList?5destructor@


// Contribution: 3:000272a0-000272d3 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be2a0
// ??_C@_0DE@JMMG@the?5first?53?5letters?5of?5a?5body?8s?5@


// Contribution: 3:000272d4-000272f8 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be2d4
// ??_C@_0CF@OINM@somehow?0?5blank?5name?5on?5disk?5in?5b@


// Contribution: 3:000272fc-0002730c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be2fc
// ??_C@_0BB@FDOF@whoops?0?5bad?5type?$AA@


// Contribution: 3:00027310-0002731e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be310
// ??_C@_0P@PBGB@file?5not?5newed?$AA@


// Contribution: 3:00027320-0002732e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be320
// ??_C@_0P@JNMJ@must?5have?5list?$AA@


// Contribution: 3:00027330-00027354 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be330
// ??_C@_0CF@MIO@GetBodyType?5undefined?5for?5this?5c@


// Contribution: 3:00027358-0002737a Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be358
// ??_C@_0CD@ENGP@got?5down?5to?5base?5list?5in?5basecla@


// Contribution: 3:0002737c-000273aa Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be37c
// ??_C@_0CP@JKCB@got?5down?5to?5base?5class?5in?5Instal@


// Contribution: 3:000273ac-000273d6 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be3ac
// ??_C@_0CL@KPEF@resID?5in?5anim?5but?5no?5resource?5of@


// Contribution: 3:000273d8-000273f9 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be3d8
// ??_C@_0CC@KAHE@C?3?2Copter?2Source?2X?2Objects?2Anim?4@


// Contribution: 3:000273fc-0002744b Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be3fc
// ??_C@_0FA@GBAP@shouldn?8t?5destroy?5privanims?5one?5@


// Contribution: 3:0002744c-0002746c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be44c
// ??_C@_0CB@EMHA@don?8t?5call?5IsDirty?5for?5privanims@


// Contribution: 3:00027470-00027499 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be470
// ??_C@_0CK@JLOF@can?8t?5ask?5for?5body?5type?5of?5a?5pri@


// Contribution: 3:0002749c-000274b4 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be49c
// ??_C@_0BJ@BNBN@array?5read?5out?5of?5bounds?$AA@


// Contribution: 3:000274b8-000274ee Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be4b8
// ??_C@_0DH@OICG@fData?5is?5no?5longer?5pointing?5to?5o@


// Contribution: 3:000274f0-0002750c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005be4f0
// ??_C@_0BN@MICO@c?3?2copter?2source?2x?2Array2d?4h?$AA@


// Contribution: 3:000a06b0-000a06c5 Module: 192, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006376b0
// PersonFaceNums
