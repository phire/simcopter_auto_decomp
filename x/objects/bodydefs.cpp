// Module: Bodydefs.obj
// Source: C:\Copter\Source\X\Objects\Bodydefs.cpp
// autogenerated by simcopter_tool from PDB file

// Type: short;

// Type: void * __ptr32;

// Type: long;

// Type: struct PrivAnimPartInfo (forward reference);
struct PrivAnimPartInfo{
	struct TinyXZY start;
	struct TinyXZY end;
};

// Type: void;

// Type: struct DXZY;
struct DXZY{
	float x;
	float z;
	float y;
	float info;
};

// Type: struct TinyXZY;
struct TinyXZY{
	char x;
	char y;
	char z;
	char info;
};

// Type: struct TinyXZY (forward reference);
struct TinyXZY{
	char x;
	char y;
	char z;
	char info;
};

// Type: struct DXZY (forward reference);
struct DXZY{
	float x;
	float z;
	float y;
	float info;
};

// Type: char;

// Type: float;

// Type: struct Point (forward reference);
struct Point{
	short v;
	short h;
};

// Type: char;

// Type: unsigned char;

// Type: class FlatResFile (forward reference);
// VTABLE: COPTER_D 0x00593508
class FlatResFile : public FlatFile
{
protected:
	class ResMap *fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile() /* override */;
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *) /* override */;
	virtual long Open(char *) /* override */;
	long OpenFromName();
	virtual long Close() /* override */;
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: class cBBase (forward reference);
// VTABLE: COPTER_D 0x00593688
class cBBase{
public:
	virtual unsigned long GetBodyType(); // vtable+0x0
	unsigned long GetName();
	unsigned long GetResType();
	virtual class cBList<cBBase>* GetList(); // vtable+0x4
	unsigned long operator unsigned long();
	virtual unsigned short CanDestroy(); // vtable+0x8
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	virtual void InstallArrayPointers(unsigned short); // vtable+0xc
	void FinishMake(unsigned short);
	void Delete();
	virtual void ~cBBase(); // vtable+0x10
	virtual void Destroy(); // vtable+0x14
	virtual void Dirty(); // vtable+0x18
	virtual unsigned short IsDirty(); // vtable+0x1c
	virtual void WriteToDisk(); // vtable+0x20
	void cBBase();
	void Init(void * __ptr32);
	void Init(unsigned char *);
	void Init(unsigned long);
	void * __ptr32 fDataHandle;
	unsigned long fDataHandleSize;
	unsigned char fName[16];
	unsigned long fTinyName;
	short fResID;
	unsigned short fDataChanged;
	struct cBBase::BBaseHeader{
		unsigned long bodyType;
		long _win8pad[15];
	};
public:
	struct cBBase::BBaseHeader *fHeader;
	// calltype: NearC
	static void SwizzleBBaseHeader(void * __ptr32, long);
};

// Type: class PtrList<cBBase> (forward reference);
class PtrList<cBBase>{
	class PtrList<cBBase>::Iter{
	private:
		class PtrList<cBBase> *fObject;
		struct PtrList<cBBase>::PtrNode *fCur;
	public:
		void Iter(class PtrList<cBBase>*);
		class cBBase* Current();
		void Next();
		void Reset();
		class cBBase* First();
	};
	struct PtrList<cBBase>::PtrNode{
		class cBBase *data;
		struct PtrList<cBBase>::PtrNode *next;
	};
private:
	struct PtrList<cBBase>::PtrNode *fFirst;
	short fCount;
public:
	void PtrList<cBBase>();
	void ~PtrList<cBBase>();
	unsigned short Contains(class cBBase*);
	void RemoveAll();
	void Remove(class cBBase*);
	long Count();
	void Add(class cBBase*);
	class cBBase* GetByIndex(long);
	class cBBase* GetByOrder(long);
};

// Type: struct PtrList<cBBase>::PtrNode (forward reference);
struct PtrList<cBBase>::PtrNode{
	class cBBase *data;
	struct PtrList<cBBase>::PtrNode *next;
};

// Type: class PtrList<cCopterAnim>::Iter (forward reference);
class PtrList<cCopterAnim>::Iter{
private:
	class PtrList<cCopterAnim> *fObject;
	struct PtrList<cCopterAnim>::PtrNode *fCur;
public:
	void Iter(class PtrList<cCopterAnim>*);
	class cCopterAnim* Current();
	void Next();
	void Reset();
	class cCopterAnim* First();
};

// Type: class cBList<cCopterAnim> (forward reference);
// cBList<cCopterAnim> Class implementation not found

// Type: class PtrList<cCopterAnim> (forward reference);
class PtrList<cCopterAnim>{
	class PtrList<cCopterAnim>::Iter{
	private:
		class PtrList<cCopterAnim> *fObject;
		struct PtrList<cCopterAnim>::PtrNode *fCur;
	public:
		void Iter(class PtrList<cCopterAnim>*);
		class cCopterAnim* Current();
		void Next();
		void Reset();
		class cCopterAnim* First();
	};
	struct PtrList<cCopterAnim>::PtrNode{
		class cCopterAnim *data;
		struct PtrList<cCopterAnim>::PtrNode *next;
	};
private:
	struct PtrList<cCopterAnim>::PtrNode *fFirst;
	short fCount;
public:
	void PtrList<cCopterAnim>();
	void ~PtrList<cCopterAnim>();
	unsigned short Contains(class cCopterAnim*);
	void RemoveAll();
	void Remove(class cCopterAnim*);
	long Count();
	void Add(class cCopterAnim*);
	class cCopterAnim* GetByIndex(long);
	class cCopterAnim* GetByOrder(long);
};

// Type: class cCopterAnim (forward reference);
// VTABLE: COPTER_D 0x00593658
class cCopterAnim : public cBBase
{
public:
	void cCopterAnim();
	virtual void ~cCopterAnim() /* override */;
	virtual void Destroy() /* override */;
	virtual void WriteToDisk() /* override */;
	virtual unsigned short IsDirty() /* override */;
	virtual unsigned long GetBodyType() /* override */;
	virtual void InstallArrayPointers(unsigned short) /* override */;
	static class cBList<cCopterAnim> *fsList;
	virtual class cBList<cBBase>* GetList() /* override */;
	virtual struct PrivAnimPartInfo* GetPartInfo(short, short); // vtable+0x24
	virtual struct PrivAnimPartInfo* GetPartInfoBasePtr(short); // vtable+0x28
	class cArray<PrivAnimPartInfo> *fPrivPartInfo;
	short GetNumParts();
	short GetNumFrames();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static class cCopterAnim* MakeNew(unsigned long, class cCopterBody*);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// calltype: NearC
	static void DestroyAll();
};

// Type: unsigned short;

// Type: unsigned long;

// Type: class cBList<cBBase> (forward reference);
// cBList<cBBase> Class implementation not found

// Type: uint32_t;

// Type: class cCopterBody (forward reference);
// cCopterBody Class implementation not found

// Type: class PtrList<cCopterBody> (forward reference);
class PtrList<cCopterBody>{
	class PtrList<cCopterBody>::Iter{
	private:
		class PtrList<cCopterBody> *fObject;
		struct PtrList<cCopterBody>::PtrNode *fCur;
	public:
		void Iter(class PtrList<cCopterBody>*);
		class cCopterBody* Current();
		void Next();
		void Reset();
		class cCopterBody* First();
	};
	struct PtrList<cCopterBody>::PtrNode{
		class cCopterBody *data;
		struct PtrList<cCopterBody>::PtrNode *next;
	};
private:
	struct PtrList<cCopterBody>::PtrNode *fFirst;
	short fCount;
public:
	void PtrList<cCopterBody>();
	void ~PtrList<cCopterBody>();
	unsigned short Contains(class cCopterBody*);
	void RemoveAll();
	void Remove(class cCopterBody*);
	long Count();
	void Add(class cCopterBody*);
	class cCopterBody* GetByIndex(long);
	class cCopterBody* GetByOrder(long);
};

// Type: class PtrList<cCopterBody>::Iter (forward reference);
class PtrList<cCopterBody>::Iter{
private:
	class PtrList<cCopterBody> *fObject;
	struct PtrList<cCopterBody>::PtrNode *fCur;
public:
	void Iter(class PtrList<cCopterBody>*);
	class cCopterBody* Current();
	void Next();
	void Reset();
	class cCopterBody* First();
};

// Type: class cBList<cCopterBody> (forward reference);
class cBList<cCopterBody> : public PtrList<cCopterBody>
{
public:
	long GetIndex(unsigned long);
	long GetIndex(class cCopterBody*);
	void cBList<cCopterBody>();
	void ~cBList<cCopterBody>();
	void Delete();
	void DeletePointers();
	void DeletePointersAndSelf();
	long CountByBodyType(unsigned long);
	class cCopterBody* GetByBodyType(unsigned long, long);
	long GetIndexInBodyType(class cCopterBody*);
	class cCopterBody* GetByName(unsigned long, long);
	virtual void Add(class cCopterBody*); // vtable+0x0
	void WriteToDisk();
	void WriteToDiskIfDirty();
	class ResFile *fFile;
	unsigned long fType;
	void CompactFile();
	// calltype: NearC
	static class cBList<cCopterBody>* MakeNew(unsigned char *, unsigned long);
	void LoadAll();
};

// Type: class cBBase;
// VTABLE: COPTER_D 0x00593688
class cBBase{
public:
	virtual unsigned long GetBodyType(); // vtable+0x0
	unsigned long GetName();
	unsigned long GetResType();
	virtual class cBList<cBBase>* GetList(); // vtable+0x4
	unsigned long operator unsigned long();
	virtual unsigned short CanDestroy(); // vtable+0x8
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	virtual void InstallArrayPointers(unsigned short); // vtable+0xc
	void FinishMake(unsigned short);
	void Delete();
	virtual void ~cBBase(); // vtable+0x10
	virtual void Destroy(); // vtable+0x14
	virtual void Dirty(); // vtable+0x18
	virtual unsigned short IsDirty(); // vtable+0x1c
	virtual void WriteToDisk(); // vtable+0x20
	void cBBase();
	void Init(void * __ptr32);
	void Init(unsigned char *);
	void Init(unsigned long);
	void * __ptr32 fDataHandle;
	unsigned long fDataHandleSize;
	unsigned char fName[16];
	unsigned long fTinyName;
	short fResID;
	unsigned short fDataChanged;
	struct cBBase::BBaseHeader{
		unsigned long bodyType;
		long _win8pad[15];
	};
public:
	struct cBBase::BBaseHeader *fHeader;
	// calltype: NearC
	static void SwizzleBBaseHeader(void * __ptr32, long);
};

// Type: class PtrList<cCopterBody>;
class PtrList<cCopterBody>{
	class PtrList<cCopterBody>::Iter{
	private:
		class PtrList<cCopterBody> *fObject;
		struct PtrList<cCopterBody>::PtrNode *fCur;
	public:
		void Iter(class PtrList<cCopterBody>*);
		class cCopterBody* Current();
		void Next();
		void Reset();
		class cCopterBody* First();
	};
	struct PtrList<cCopterBody>::PtrNode{
		class cCopterBody *data;
		struct PtrList<cCopterBody>::PtrNode *next;
	};
private:
	struct PtrList<cCopterBody>::PtrNode *fFirst;
	short fCount;
public:
	void PtrList<cCopterBody>();
	void ~PtrList<cCopterBody>();
	unsigned short Contains(class cCopterBody*);
	void RemoveAll();
	void Remove(class cCopterBody*);
	long Count();
	void Add(class cCopterBody*);
	class cCopterBody* GetByIndex(long);
	class cCopterBody* GetByOrder(long);
};

// Type: class FlatFile;
// VTABLE: COPTER_D 0x00593620
class FlatFile{
	enum /* __unnamed */ {
		kMaxNameLen = 255,
	};
protected:
	class FlatFile *fNext;
	unsigned char fName[256];
	long fFileID;
	struct _iobuf *fFile;
	long UniqueID();
private:
	static class FlatFile *sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	virtual void ~FlatFile(); // vtable+0x0
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	virtual long Open(unsigned char *); // vtable+0x4
	virtual long Open(char *); // vtable+0x8
	virtual long Close(); // vtable+0xc
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
};



// Contribution: 1:0015c950-0015d654 Module: 192, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0055d950
void SwizzlePrivAnimPartInfo(void * __ptr32 val, long size) {
	struct PrivAnimPartInfo *pinfo;

// LINE 111:
	__asm        cmp    size, 8;
	__asm        je     _T2c;

	__asm        push   0x8C085;
	__asm        push   0x5BE00C;
	__asm        push   0x6F;
	__asm        push   0x5BE038;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 112:
_T2c:
	pinfo = val;
// LINE 125:
	__asm        jmp    near ptr 0x0055D987;
}

// FUNCTION: COPTER_D 0x0055d98c
struct TinyXZY DXZY_2_TinyXZY(struct DXZY dxzy) {
	struct TinyXZY txzy;

// LINE 130:
	__asm        mov    eax, dxzy.x;
	__asm        push   eax;
	__asm        call   Float_2_Byte;
	__asm        add    esp, 4;
	__asm        mov    txzy.x, al;
// LINE 131:
	__asm        mov    eax, dxzy.z;
	__asm        push   eax;
	__asm        call   Float_2_Byte;
	__asm        add    esp, 4;
	__asm        mov    txzy.z, al;
// LINE 132:
	__asm        mov    eax, dxzy.y;
	__asm        push   eax;
	__asm        call   Float_2_Byte;
	__asm        add    esp, 4;
	__asm        mov    txzy.y, al;
// LINE 133:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.x);
	__asm        jmp    near ptr 0x0055D9CA;
// LINE 134:
}

// FUNCTION: COPTER_D 0x0055d9cf
struct DXZY TinyXZY_2_DXZY(struct TinyXZY txzy) {
	struct DXZY dxzy;

// LINE 139:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.x);
	__asm        push   eax;
	__asm        call   Byte_2_Float;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.x;
// LINE 140:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.z);
	__asm        push   eax;
	__asm        call   Byte_2_Float;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.z;
// LINE 141:
	__asm        mov    eax, reinterpret_cast<uint32_t>(txzy.y);
	__asm        push   eax;
	__asm        call   Byte_2_Float;
	__asm        add    esp, 4;
	__asm        fstp   dxzy.y;
// LINE 142:
	__asm        lea    eax, dxzy.x;
	__asm        mov    ecx, [ebp+8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp+8];
	__asm        jmp    near ptr 0x0055DA29;
// LINE 146:
}

// FUNCTION: COPTER_D 0x0055da2e
float Byte_2_Float(char byte) {
// LINE 152:
	__asm        movsx  eax, byte;
	__asm        mov    [ebp-4], eax;
	__asm        fild   dword ptr [ebp-4];
	__asm        jmp    near ptr 0x0055DA46;
// LINE 153:
}

// FUNCTION: COPTER_D 0x0055da4b
char Float_2_Byte(float flt) {
// LINE 157:
	__asm        fld    flt;
	__asm        fcomp  qword ptr ds:[0x593640];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T2e;

	__asm        fld    flt;
	__asm        fcomp  qword ptr ds:[0x593648];
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        je     _T4a;
_T2e:
	__asm        push   0x8C085;
	__asm        push   0x5BE060;
	__asm        push   0x9D;
	__asm        push   0x5BE084;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 160:
_T4a:
	__asm        fld    flt;
	__asm        call   0x0056EBE8;
	__asm        jmp    near ptr 0x0055DAA2;
// LINE 161:
}

// FUNCTION: COPTER_D 0x0055daa7
void SwizzlePoint(void * __ptr32 val, long size) {
	struct Point *pt;

// LINE 167:
	__asm        cmp    size, 4;
	__asm        je     _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5BE0AC;
	__asm        push   0xA7;
	__asm        push   0x5BE0D4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 168:
_T2f:
	pt = val;
// LINE 169:
	__asm        mov    eax, pt;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 170:
	__asm        mov    eax, pt;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 172:
	__asm        jmp    near ptr 0x0055DAFC;
}

// FUNCTION: COPTER_D 0x0055db01
void InitBodiesAndAnimations() {
	char animpath[260];
	unsigned char privname[256];

	// Function registers exception cleanup function at 0x0055e286
// LINE 199:
	__asm        lea    eax, animpath[0];
	__asm        push   eax;
	__asm        push   0x5BE0FC;
	__asm        push   0;
	__asm        push   0xA;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 200:
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        lea    eax, animpath[0];
	__asm        push   eax;
	__asm        call   CToPString;
	__asm        add    esp, 8;
// LINE 203:
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x218], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x218], 0;
	__asm        je     _Tf5;

	__asm        mov    eax, [ebp-0x218];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    word ptr [eax+8], 0;
	__asm        jmp    near ptr 0x0055DB9E;

	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax], 0x593650;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        jmp    near ptr 0x0055DBCD;

	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x230];
	__asm        mov    [ebp-0x21C], eax;
	__asm        jmp    _Tf0;
_L39430:
	__asm        mov    ecx, [ebp-0x230];
	__asm        add    ecx, 4;
	__asm        call   PtrList<cCopterBody>::~PtrList<cCopterBody>;
	__asm        ret;
_Tf0:
	__asm        jmp    _Tff;
_Tf5:
	None = 0x0;
_Tff:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x21C];
	__asm        mov    [ebp-0x214], eax;
	__asm        push   0x11C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220], eax;
	__asm        mov    dword ptr [ebp-4], 2;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     _T1e1;

	__asm        mov    eax, [ebp-0x220];
	__asm        mov    [ebp-0x22C], eax;
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   FlatFile::FlatFile;
	__asm        mov    byte ptr [ebp-4], 3;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax], 0x593508;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax+0x110], 0;
	__asm        jmp    near ptr 0x0055DC86;

	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    [ebp-0x228], eax;
	__asm        jmp    _T1a6;
_L39423:
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   FlatFile::~FlatFile;
	__asm        ret;
_T1a6:
	__asm        mov    byte ptr [ebp-4], 4;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    dword ptr [eax], 0x593518;
	__asm        jmp    near ptr 0x0055DCBC;

	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    [ebp-0x224], eax;
	__asm        jmp    _T1dc;
_L39421:
	__asm        mov    ecx, [ebp-0x22C];
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_T1dc:
	__asm        jmp    _T1eb;
_T1e1:
	None = 0x0;
_T1eb:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T236;

	__asm        push   0x8C085;
	__asm        push   0x5BE1BC;
	__asm        push   0xA5;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T236:
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+4];
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T289;

	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xA7;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T289:
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T2b1;

	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        call   ERexit;
	__asm        add    esp, 4;
_T2b1:
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    ecx, [ebp-0x214];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    dword ptr [eax+0x10], 0x424F4443;
	__asm        mov    eax, [ebp-0x214];
	__asm        mov    cCopterBody::fsList, eax;
	__asm        jmp    _T310;

	cCopterBody::fsList = None;
_L39417:
	__asm        mov    eax, [ebp-0x220];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L39414:
	__asm        mov    eax, [ebp-0x218];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_T310:
	None = cCopterBody::fsList;
// LINE 204:
	__asm        mov    eax, [ebp-0x268];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T347;

	__asm        push   0x8C085;
	__asm        push   0x5BE188;
	__asm        push   0xB5;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T347:
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   OpenFile;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x260], ax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T395;

	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xB7;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T395:
	__asm        mov    eax, [ebp-0x268];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T3c1;

	__asm        push   0x8C085;
	__asm        push   0x5BE168;
	__asm        push   0xB8;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3c1:
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x264], eax;
	__asm        push   0x56240B;
	__asm        push   0x28;
	__asm        push   0x41524350;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   _cArray::LoadAllArrays;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055DEF1;

	__asm        push   0x56249B;
	__asm        push   8;
	__asm        push   0x41524C55;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        call   _cArray::LoadAllArrays;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055DF11;

	__asm        jmp    near ptr 0x0055DF16;

	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatResFile::Count;
	__asm        mov    [ebp-0x254], ax;
	__asm        mov    word ptr [ebp-0x258], 1;
	__asm        jmp    _T449;
_T442:
	__asm        inc    word ptr [ebp-0x258];
_T449:
	__asm        movsx  eax, word ptr [ebp-0x254];
	__asm        movsx  ecx, word ptr [ebp-0x258];
	__asm        cmp    eax, ecx;
	__asm        jl     _T4c6;

	__asm        push   0x55E6F0;
	__asm        mov    eax, [ebp-0x258];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatResFile::GetByIndex;
	__asm        mov    [ebp-0x25C], eax;
	__asm        cmp    dword ptr [ebp-0x25C], 0;
	__asm        jne    _T4b2;

	__asm        push   0x8C085;
	__asm        push   0x5BE148;
	__asm        push   0xC1;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4b2:
	__asm        mov    eax, [ebp-0x25C];
	__asm        push   eax;
	__asm        call   cCopterBody::MakeNew;
	__asm        add    esp, 4;
	__asm        jmp    _T442;
_T4c6:
	__asm        test   dword ptr [ebp-0x260], 0xFFFF;
	__asm        je     _T4ed;

	__asm        mov    eax, [ebp-0x268];
	__asm        mov    ecx, [ebp-0x268];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
_T4ed:
	__asm        jmp    near ptr 0x0055DFF3;
// LINE 205:
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    dword ptr [ebp-4], 5;
	__asm        cmp    dword ptr [ebp-0x23C], 0;
	__asm        je     _T52c;

	__asm        mov    ecx, [ebp-0x23C];
	__asm        call   cBList<cCopterAnim>::cBList<cCopterAnim>;
	__asm        mov    [ebp-0x240], eax;
	__asm        jmp    _T536;
_T52c:
	None = 0x0;
_T536:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x240];
	__asm        mov    [ebp-0x238], eax;
	__asm        push   0x11C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x244], eax;
	__asm        mov    dword ptr [ebp-4], 6;
	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     _T5c2;

	__asm        mov    eax, [ebp-0x244];
	__asm        mov    [ebp-0x24C], eax;
	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   FlatResFile::FlatResFile;
	__asm        mov    byte ptr [ebp-4], 7;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    dword ptr [eax], 0x593518;
	__asm        jmp    near ptr 0x0055E09D;

	__asm        mov    byte ptr [ebp-4], 6;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    [ebp-0x248], eax;
	__asm        jmp    _T5bd;
_L39460:
	__asm        mov    ecx, [ebp-0x24C];
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_T5bd:
	__asm        jmp    _T5cc;
_T5c2:
	None = 0x0;
_T5cc:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T617;

	__asm        push   0x8C085;
	__asm        push   0x5BE1BC;
	__asm        push   0xA5;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T617:
	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+4];
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T66a;

	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xA7;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T66a:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T692;

	__asm        lea    eax, privname[0];
	__asm        push   eax;
	__asm        call   ERexit;
	__asm        add    esp, 4;
_T692:
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    ecx, [ebp-0x238];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    dword ptr [eax+0x10], 0x414E4950;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    cCopterAnim::fsList, eax;
	__asm        jmp    _T6f1;

	cCopterAnim::fsList = None;
_L39456:
	__asm        mov    eax, [ebp-0x244];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L39453:
	__asm        mov    eax, [ebp-0x23C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 206:
_T6f1:
	__asm        mov    ecx, cCopterAnim::fsList;
	__asm        call   cBList<cCopterAnim>::LoadAll;
// LINE 209:
	PersonFaceNums[0] = 0x4;
// LINE 210:
	PersonFaceNums[1] = 0x5;
// LINE 211:
	PersonFaceNums[2] = 0x2c;
// LINE 212:
	PersonFaceNums[3] = 0x2d;
// LINE 213:
	PersonFaceNums[4] = 0x2e;
// LINE 214:
	PersonFaceNums[6] = 0x2f;
// LINE 215:
	PersonFaceNums[8] = 0x30;
// LINE 216:
	PersonFaceNums[9] = 0x31;
// LINE 217:
	PersonFaceNums[5] = 0x41;
// LINE 218:
	PersonFaceNums[7] = 0x42;
// LINE 219:
	PersonFaceNums[10] = 0x43;
// LINE 220:
	__asm        jmp    _T780;

	__asm        push   0x8C085;
	__asm        push   0x5BE108;
	__asm        push   0xDC;
	__asm        push   0x5BE120;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 225:
_T780:
	__asm        jmp    _T78f;
_L39413:
	__asm        mov    eax, 0x595FA8;
	__asm        jmp    near ptr 0x0056F590;
_T78f:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x0055e29e
void DeleteBodiesAndAnimations() {

	None = cCopterAnim::fsList;
// LINE 233:
_T11:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T29;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T30;
_T29:
	None = 0x0;
_T30:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        lea    ecx, [ebp-8];
	__asm        call   PtrList<cCopterAnim>::Iter::Reset;
	__asm        jmp    near ptr 0x0055E2E1;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T63;

	__asm        mov    eax, [ebp-4];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T77;

	__asm        jmp    _T72;

	__asm        jmp    _T68;
_T63:
	__asm        jmp    _T72;
_T68:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T77;
_T72:
	__asm        jmp    _Te8;
_T77:
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T93;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T9f;

	__asm        jmp    _T9f;
_T93:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T9f;
_T9f:
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   dword ptr [eax+4];
	__asm        lea    ecx, [eax+4];
	__asm        call   PtrList<cBBase>::Remove;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tde;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    _Tde;
_Tde:
	__asm        jmp    near ptr 0x0055E381;

	__asm        jmp    _T11;
_Te8:
	__asm        jmp    near ptr 0x0055E38B;

	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T10b;
_T102:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
_T10b:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T11d;

	__asm        inc    dword ptr [ebp-0x34];
	__asm        jmp    _T102;
_T11d:
	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x34];
	__asm        je     _T146;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T146:
	__asm        jmp    near ptr 0x0055E3E9;

	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     _T173;

	__asm        push   0x8C085;
	__asm        push   0x5BE210;
	__asm        push   0x32;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T173:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T19d;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T19d;
_T19d:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T1d1;

	__asm        mov    ecx, [ebp-0x28];
	__asm        call   cBList<cCopterAnim>::~cBList<cCopterAnim>;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055E46A;

	__asm        jmp    _T1d1;
_T1d1:
	__asm        jmp    near ptr 0x0055E474;

	__asm        jmp    near ptr 0x0055E479;

	None = cCopterBody::fsList;
// LINE 234:
_T1e3:
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        je     _T1fb;

	__asm        mov    eax, [ebp-0x70];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T202;
_T1fb:
	None = 0x0;
_T202:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x40], eax;
	__asm        lea    ecx, [ebp-0x40];
	__asm        call   PtrList<cCopterBody>::Iter::Reset;
	__asm        jmp    near ptr 0x0055E4B3;

	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T235;

	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T249;

	__asm        jmp    _T244;

	__asm        jmp    _T23a;
_T235:
	__asm        jmp    _T244;
_T23a:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _T249;
_T244:
	__asm        jmp    _T2ba;
_T249:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T265;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T271;

	__asm        jmp    _T271;
_T265:
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    _T271;
_T271:
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x48];
	__asm        call   dword ptr [eax+4];
	__asm        lea    ecx, [eax+4];
	__asm        call   PtrList<cBBase>::Remove;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T2b0;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    _T2b0;
_T2b0:
	__asm        jmp    near ptr 0x0055E553;

	__asm        jmp    _T1e3;
_T2ba:
	__asm        jmp    near ptr 0x0055E55D;

	__asm        mov    dword ptr [ebp-0x6C], 0;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T2dd;
_T2d4:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
_T2dd:
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        je     _T2ef;

	__asm        inc    dword ptr [ebp-0x6C];
	__asm        jmp    _T2d4;
_T2ef:
	__asm        mov    eax, [ebp-0x70];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x6C];
	__asm        je     _T318;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T318:
	__asm        jmp    near ptr 0x0055E5BB;

	__asm        mov    eax, [ebp-0x70];
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     _T345;

	__asm        push   0x8C085;
	__asm        push   0x5BE210;
	__asm        push   0x32;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T345:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T36f;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T36f;
_T36f:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T3a3;

	__asm        mov    ecx, [ebp-0x60];
	__asm        call   cBList<cCopterBody>::~cBList<cCopterBody>;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055E63C;

	__asm        jmp    _T3a3;
_T3a3:
	__asm        jmp    near ptr 0x0055E646;

	__asm        jmp    near ptr 0x0055E64B;
// LINE 247:
	__asm        jmp    near ptr 0x0055E650;
}



// Contribution: 1:0015d660-0015d6e8 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d6f0-0015d73d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d740-0015d7ea Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d7f0-0015d82d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d830-0015d8c5 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d8d0-0015d9a7 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015d9b0-0015dabc Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015dac0-0015dcfb Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015dd00-0015e1d7 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e1e0-0015e210 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e220-0015e250 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e260-0015e279 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e280-0015e2b0 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e2c0-0015e309 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e310-0015e4d8 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e4e0-0015e4fe Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e500-0015e51c Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e520-0015e535 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e540-0015e5a9 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0055f540
// cBBase::`scalar deleting destructor'



// Contribution: 1:0015e5b0-0015e5e1 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e5f0-0015e61a Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e620-0015e654 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e660-0015e693 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e6a0-0015e6ba Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e6c0-0015e77e Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e780-0015e82d Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015e830-0015e918 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0055f830
// cCopterAnim::`scalar deleting destructor'



// Contribution: 1:0015e920-0015ec6e Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ec70-0015ec85 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ec90-0015ecaa Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ecb0-0015ed87 Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015ed90-0015edcd Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015edd0-0015eedc Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015eee0-0015f11b Module: 192, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015f120-0015f282 Module: 192, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00560120
// cCopterBody::`scalar deleting destructor'



// Contribution: 2:00004640-0000464f Module: 192, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004650-00004653 Module: 192, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for cCopterBody> @ 0x00593650
//   00: cBList<cCopterBody>::Add @ 0x0055fee0
//   1 entries



// Contribution: 2:00004654-00004657 Module: 192, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for cCopterAnim> @ 0x00593654
//   00: cBList<cCopterAnim>::Add @ 0x0055eac0
//   1 entries



// Contribution: 2:00004658-00004683 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for cCopterAnim @ 0x00593658
//   00: cCopterAnim::GetBodyType @ 0x0055f660
//   01: cCopterAnim::GetList @ 0x0055f6a0
//   02: cBBase::CanDestroy @ 0x0055f260
//   03: cCopterAnim::InstallArrayPointers @ 0x00567200
//   04: cCopterAnim::`scalar deleting destructor' @ 0x0055f830
//   05: cCopterAnim::Destroy @ 0x0055f5b0
//   06: cBBase::Dirty @ 0x0055f4e0
//   07: cCopterAnim::IsDirty @ 0x0055f620
//   08: cCopterAnim::WriteToDisk @ 0x0055f5f0
//   09: cCopterAnim::GetPartInfo @ 0x0055f6c0
//   10: cCopterAnim::GetPartInfoBasePtr @ 0x0055f780
//   11 entries



// Contribution: 2:00004688-000046ab Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for cBBase @ 0x00593688
//   00: cBBase::GetBodyType @ 0x0055f1e0
//   01: cBBase::GetList @ 0x0055f220
//   02: cBBase::CanDestroy @ 0x0055f260
//   03: cBBase::InstallArrayPointers @ 0x0055f280
//   04: cBBase::`scalar deleting destructor' @ 0x0055f540
//   05: cBBase::Destroy @ 0x0055f310
//   06: cBBase::Dirty @ 0x0055f4e0
//   07: cBBase::IsDirty @ 0x0055f500
//   08: cBBase::WriteToDisk @ 0x0055f520
//   9 entries



// Contribution: 2:000046b0-000046d3 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for cCopterBody @ 0x005936b0
//   00: cBBase::GetBodyType @ 0x0055f1e0
//   01: cCopterBody::GetList @ 0x0055fc90
//   02: cBBase::CanDestroy @ 0x0055f260
//   03: cCopterBody::InstallArrayPointers @ 0x00561b74
//   04: cCopterBody::`scalar deleting destructor' @ 0x00560120
//   05: cBBase::Destroy @ 0x0055f310
//   06: cBBase::Dirty @ 0x0055f4e0
//   07: cBBase::IsDirty @ 0x0055f500
//   08: cCopterBody::WriteToDisk @ 0x0055fc70
//   9 entries



// Contribution: 2:00006fa8-00007007 Module: 192, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00007008-0000702f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007030-00007057 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007058-0000707f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007080-000070af Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000070b0-000070df Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000070e0-0000710f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007110-00007137 Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00007138-0000716f Module: 192, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:0002700c-00027147 Module: 192, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:00027148-00027165 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "couldn't load an indexed body"


// Contribution: 3:00027168-00027184 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "must set type before loading"


// Contribution: 3:00027188-000271a5 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "must load bodies from a file?"


// Contribution: 3:000271a8-000271ba Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "couldn't open file"


// Contribution: 3:000271bc-000271eb Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "make a new resfile and then it's valid already?"


// Contribution: 3:000271ec-0002720e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "C:\Copter\Source\X\Objects\bList.h"


// Contribution: 3:00027210-0002722d Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "count not 0 in cBList delete!"


// Contribution: 3:00027230-00027255 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "bad size passed to SwizzleBBaseHeader"


// Contribution: 3:00027258-0002727a Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "C:\Copter\Source\X\Objects\bBase.h"


// Contribution: 3:0002727c-0002729d Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "count not 0 in cBList destructor!"


// Contribution: 3:000272a0-000272d3 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "the first 3 letters of a body's name must be unique"


// Contribution: 3:000272d4-000272f8 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "somehow, blank name on disk in bbase"


// Contribution: 3:000272fc-0002730c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "whoops, bad type"


// Contribution: 3:00027310-0002731e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "file not newed"


// Contribution: 3:00027320-0002732e Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "must have list"


// Contribution: 3:00027330-00027354 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "GetBodyType undefined for this class"


// Contribution: 3:00027358-0002737a Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "got down to base list in baseclass"


// Contribution: 3:0002737c-000273aa Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "got down to base class in InstallArrayPointers"


// Contribution: 3:000273ac-000273d6 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "resID in anim but no resource of its type?"


// Contribution: 3:000273d8-000273f9 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "C:\Copter\Source\X\Objects\Anim.h"


// Contribution: 3:000273fc-0002744b Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "shouldn't destroy privanims one by one--clean them all out and then start fresh"


// Contribution: 3:0002744c-0002746c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "don't call IsDirty for privanims"


// Contribution: 3:00027470-00027499 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "can't ask for body type of a private anim"


// Contribution: 3:0002749c-000274b4 Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "array read out of bounds"


// Contribution: 3:000274b8-000274ee Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "fData is no longer pointing to offset from fDataHandle"


// Contribution: 3:000274f0-0002750c Module: 192, 4 byte alignment, initialized_data, (comdat), read, write, 
// string literal: "c:\copter\source\x\Array2d.h"


// Contribution: 3:000a06b0-000a06c5 Module: 192, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006376b0
short PersonFaceNums[11];

