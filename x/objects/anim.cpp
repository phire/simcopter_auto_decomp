// Module: Anim.obj
// Source: C:\Copter\Source\X\Objects\Anim.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class cCopterAnim (forward reference);
class cCopterAnim : public cBBase
{
public:
	void cCopterAnim();
	virtual void ~cCopterAnim();
	virtual void Destroy();
	virtual void WriteToDisk();
	virtual unsigned short IsDirty();
	virtual unsigned long GetBodyType();
	virtual void InstallArrayPointers(unsigned short);
	static class cBList<cCopterAnim>* fsList;
	virtual class cBList<cBBase>* GetList();
	// vtable: 36
	intro struct PrivAnimPartInfo* GetPartInfo(short, short);
	// vtable: 40
	intro struct PrivAnimPartInfo* GetPartInfoBasePtr(short);
	class cArray<PrivAnimPartInfo>* fPrivPartInfo;
	short GetNumParts();
	short GetNumFrames();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static class cCopterAnim* MakeNew(unsigned long, class cCopterBody*);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// calltype: NearC
	static void DestroyAll();
};

// Type: unsigned short;

// Type: unsigned char[16];

// Type: void;

// Type: class cBBase;
class cBBase{
public:
	// vtable: 0
	intro unsigned long GetBodyType();
	unsigned long GetName();
	unsigned long GetResType();
	// vtable: 4
	intro class cBList<cBBase>* GetList();
	unsigned long operator unsigned long();
	// vtable: 8
	intro unsigned short CanDestroy();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// vtable: 12
	intro void InstallArrayPointers(unsigned short);
	void FinishMake(unsigned short);
	void Delete();
	// vtable: 16
	intro void ~cBBase();
	// vtable: 20
	intro void Destroy();
	// vtable: 24
	intro void Dirty();
	// vtable: 28
	intro unsigned short IsDirty();
	// vtable: 32
	intro void WriteToDisk();
	void cBBase();
	void Init(void * __ptr32);
	void Init(unsigned char *);
	void Init(unsigned long);
	void * __ptr32 fDataHandle;
	unsigned long fDataHandleSize;
	unsigned char fName[16];
	unsigned long fTinyName;
	short fResID;
	unsigned short fDataChanged;
	class cBBase::BBaseHeader{
	public:
		unsigned long bodyType;
		long _win8pad[15];
	};
public:
	struct cBBase::BBaseHeader* fHeader;
	// calltype: NearC
	static void SwizzleBBaseHeader(void * __ptr32, long);
};



// Contribution: 1:00166200-001664d4 Module: 181, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00567200
void cCopterAnim::InstallArrayPointers(unsigned short expectondisk) {
	unsigned char tmp[16];

// LINE 37:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x5674BB;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 38:
	__asm        cmp    dword ptr ds:[0x5BF6D4], 0;
	__asm        jne    near ptr 0x00567247;
	__asm        push   0x8C085;
	__asm        push   0x5BF6D8;
	__asm        push   0x26;
	__asm        push   0x5BF6E0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 39:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x0056726D;
	__asm        push   0x8C085;
	__asm        push   0x5BF704;
	__asm        push   0x27;
	__asm        push   0x5BF728;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 43:
	__asm        push   0x10;
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 44:
	__asm        mov    tmp[4], 0x69;
	__asm        mov    ax, expectondisk;
	__asm        mov    [ebp-0x50], ax;
	__asm        mov    eax, ds:[0x5BF6D4];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x54], eax;
// LINE 45:
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        call   0x00568DB1;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x005672E8;
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax+0x18], 8;
	__asm        jne    near ptr 0x005672DC;
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        jmp    near ptr 0x005672E3;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x005672EF;
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    near ptr 0x00567315;
	__asm        push   0x8C085;
	__asm        push   0x5BEB8C;
	__asm        push   0x11E;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0056731A;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x20], eax;
	__asm        test   dword ptr [ebp-0x50], 0xFFFF;
	__asm        je     near ptr 0x00567358;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00567353;
	__asm        push   0x8C085;
	__asm        push   0x5BEB58;
	__asm        push   0x131;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0056737E;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0056737E;
	__asm        push   0x8C085;
	__asm        push   0x5BEB1C;
	__asm        push   0x132;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x0056746C;
	__asm        jmp    near ptr 0x005673A9;
	__asm        push   0x8C085;
	__asm        push   0x5BEAF0;
	__asm        push   0x134;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0x50;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00567458;
	__asm        mov    dword ptr [ebp-0x38], 0x41525050;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x3C], eax;
	__asm        lea    eax, tmp[0];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00567406;
	__asm        call   0x00567B1B;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   0x00567900;
	__asm        jmp    near ptr 0x00567429;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    dword ptr [eax], 0x593A30;
	__asm        jmp    near ptr 0x0056743B;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00567453;
_L31083:
	__asm        mov    ecx, [ebp-0x4C];
	__asm        call   0x005679EB;
	__asm        ret;
	__asm        jmp    near ptr 0x0056745F;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00567492;
	__asm        push   0x8C085;
	__asm        push   0x5BEAD4;
	__asm        push   0x137;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
	__asm        jmp    near ptr 0x005674B6;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
_L31071:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 47:
	__asm        jmp    near ptr 0x005674C5;
_L31070:
	__asm        mov    eax, 0x5961B0;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 2:00004a30-00004a33 Module: 181, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593a30
// ??_7?$cArray@UPrivAnimPartInfo@@@@6B@


// Contribution: 2:000071b0-000071df Module: 181, 8 byte alignment, initialized_data, read, 


// Contribution: 3:000286d4-0002874b Module: 181, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bf6d4
// cCopterAnim::fsList
