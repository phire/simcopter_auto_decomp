// Module: Bods.obj
// Source: C:\Copter\Source\X\Objects\Bods.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class cCopterBody (forward reference);

// Type: unsigned long;

// Type: short;

// Type: struct AnimLookup (forward reference);

// Type: class cCopterAnim (forward reference);
class cCopterAnim : public cBBase
{
public:
	void cCopterAnim();
	virtual void ~cCopterAnim();
	virtual void Destroy();
	virtual void WriteToDisk();
	virtual unsigned short IsDirty();
	virtual unsigned long GetBodyType();
	virtual void InstallArrayPointers(unsigned short);
	static class cBList<cCopterAnim>* fsList;
	virtual class cBList<cBBase>* GetList();
	// vtable: 36
	intro struct PrivAnimPartInfo* GetPartInfo(short, short);
	// vtable: 40
	intro struct PrivAnimPartInfo* GetPartInfoBasePtr(short);
	class cArray<PrivAnimPartInfo>* fPrivPartInfo;
	short GetNumParts();
	short GetNumFrames();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static class cCopterAnim* MakeNew(unsigned long, class cCopterBody*);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// calltype: NearC
	static void DestroyAll();
};

// Type: unsigned short;

// Type: struct cCopterBody::Part (forward reference);

// Type: unsigned char *;

// Type: float;

// Type: struct TransformedInfo;
class TransformedInfo{
public:
	struct Point startPoint;
	struct Point endPoint;
	short startDepth;
	short endDepth;
	unsigned char bStartTransformed;
	unsigned char bEndTransformed;
	float info;
};

// Type: struct Point;
class Point{
public:
	short v;
	short h;
};

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: enum SPHERE_SHADE_FLAG;

// Type: struct PrivAnimPartInfo (forward reference);

// Type: int32_t;

// Type: long;

// Type: struct TransformedInfo (forward reference);

// Type: struct DXZY;
class DXZY{
public:
	float x;
	float z;
	float y;
	float info;
};

// Type: unsigned char[16];

// Type: void * __ptr32;

// Type: void;

// Type: class cBBase;
class cBBase{
public:
	// vtable: 0
	intro unsigned long GetBodyType();
	unsigned long GetName();
	unsigned long GetResType();
	// vtable: 4
	intro class cBList<cBBase>* GetList();
	unsigned long operator unsigned long();
	// vtable: 8
	intro unsigned short CanDestroy();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// vtable: 12
	intro void InstallArrayPointers(unsigned short);
	void FinishMake(unsigned short);
	void Delete();
	// vtable: 16
	intro void ~cBBase();
	// vtable: 20
	intro void Destroy();
	// vtable: 24
	intro void Dirty();
	// vtable: 28
	intro unsigned short IsDirty();
	// vtable: 32
	intro void WriteToDisk();
	void cBBase();
	void Init(void * __ptr32);
	void Init(unsigned char *);
	void Init(unsigned long);
	void * __ptr32 fDataHandle;
	unsigned long fDataHandleSize;
	unsigned char fName[16];
	unsigned long fTinyName;
	short fResID;
	unsigned short fDataChanged;
	class cBBase::BBaseHeader{
	public:
		unsigned long bodyType;
		long _win8pad[15];
	};
public:
	struct cBBase::BBaseHeader* fHeader;
	// calltype: NearC
	static void SwizzleBBaseHeader(void * __ptr32, long);
};



// Contribution: 1:0015fbf0-001614f4 Module: 189, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00560bf0
class cCopterAnim *  cCopterBody::GetPrivateAnim(unsigned long animName) {
	short count;

// LINE 1943:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00560C0B;
	__asm        inc    count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00560E6A;
// Block start:
	struct AnimLookup* al;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x10], eax;
// LINE 1944:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x00560C58;
	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    near ptr 0x00560C81;
	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00560C81;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00560C9D;
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00560CA2;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    al, eax;
// LINE 1945:
	__asm        mov    eax, al;
	__asm        mov    ecx, animName;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00560E65;
// Block start:
	class cCopterAnim* privanim;
	__asm        mov    eax, al;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, ds:[0x5BF6D4];
	__asm        mov    [ebp-0x38], eax;
// LINE 1946:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jl     near ptr 0x00560CEE;
	__asm        cmp    dword ptr [ebp-0x14], 0x20;
	__asm        jb     near ptr 0x00560D07;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00560D1F;
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00560D26;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00560D43;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00560D4A;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        jmp    near ptr 0x00560D4F;
	__asm        jmp    near ptr 0x00560D54;
	__asm        jmp    near ptr 0x00560D71;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00560D6C;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00560D71;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00560D91;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00560E25;
	__asm        jmp    near ptr 0x00560DA5;
	__asm        jmp    near ptr 0x00560D9B;
	__asm        jmp    near ptr 0x00560E25;
	__asm        jmp    near ptr 0x00560DA5;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00560E25;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00560DC1;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00560DCD;
	__asm        jmp    near ptr 0x00560DCD;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00560DCD;
	__asm        jmp    near ptr 0x00560DD2;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x14];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x34];
	__asm        mov    cl, [ebp-0x14];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x00560E20;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00560E09;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00560E1B;
	__asm        jmp    near ptr 0x00560E15;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00560E1B;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00560E31;
	__asm        jmp    near ptr 0x00560D59;
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x00560E31;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    privanim, eax;
// LINE 1947:
	__asm        cmp    privanim, 0;
	__asm        jne    near ptr 0x00560E5D;
	__asm        push   0x8C085;
	__asm        push   0x5BE638;
	__asm        push   0x79B;
	__asm        push   0x5BE658;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1948:
	__asm        mov    eax, privanim;
	__asm        jmp    near ptr 0x00560E71;
// LINE 1950:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x00560C07;
// LINE 1951:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00560E71;
// LINE 1952:
}

// FUNCTION: COPTER_D 0x00560e78
void  cCopterBody::ActivateAllPartPointers(unsigned short activated) {
	short count;

// LINE 2062:
	__asm        cmp    this, 0;
	__asm        jne    near ptr 0x00560EAA;
	__asm        push   0x8C085;
	__asm        push   0x5BE67C;
	__asm        push   0x80E;
	__asm        push   0x5BE6CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2063:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00560EB9;
	__asm        inc    count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00560FF9;
// Block start:
	struct cCopterBody::Part* part;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
// LINE 2064:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x00560F06;
	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    near ptr 0x00560F2F;
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00560F2F;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00560F4B;
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00560F50;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2065:
	__asm        jmp    near ptr 0x00560F86;
	__asm        push   0x8C085;
	__asm        push   0x5BE6F0;
	__asm        push   0x811;
	__asm        push   0x5BE71C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2066:
	__asm        test   reinterpret_cast<uint32_t>(activated), 0xFFFF;
	__asm        je     near ptr 0x00560FC9;
// LINE 2067:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00560FBA;
// LINE 2068:
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00561190;
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0xC], eax;
// LINE 2071:
	__asm        jmp    near ptr 0x00560FC4;
// LINE 2072:
	__asm        mov    eax, part;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 2074:
	__asm        jmp    near ptr 0x00560FF4;
// LINE 2075:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x00560FEA;
// LINE 2076:
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0xC], eax;
// LINE 2077:
	__asm        jmp    near ptr 0x00560FF4;
// LINE 2078:
	__asm        mov    eax, part;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 2080:
// Block end:
	__asm        jmp    near ptr 0x00560EB5;
// LINE 2081:
	__asm        jmp    near ptr 0x00560FFE;
}

// FUNCTION: COPTER_D 0x00561005
class cCopterBody *  cCopterBody::GetCopterBody(unsigned char * name) {
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x28], eax;
// LINE 2086:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jl     near ptr 0x00561040;
	__asm        cmp    dword ptr [ebp-4], 0x20;
	__asm        jb     near ptr 0x00561059;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00561071;
	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00561078;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00561095;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0056109C;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x005610A1;
	__asm        jmp    near ptr 0x005610A6;
	__asm        jmp    near ptr 0x005610C3;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x005610BE;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x005610C3;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x005610E3;
	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00561177;
	__asm        jmp    near ptr 0x005610F7;
	__asm        jmp    near ptr 0x005610ED;
	__asm        jmp    near ptr 0x00561177;
	__asm        jmp    near ptr 0x005610F7;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00561177;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00561113;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0056111F;
	__asm        jmp    near ptr 0x0056111F;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0056111F;
	__asm        jmp    near ptr 0x00561124;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-4];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    cl, [ebp-4];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x00561172;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0056115B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0056116D;
	__asm        jmp    near ptr 0x00561167;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0056116D;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00561183;
	__asm        jmp    near ptr 0x005610AB;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x00561183;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x0056118B;
// LINE 2088:
}

// FUNCTION: COPTER_D 0x00561190
struct cCopterBody::Part *  cCopterBody::GetPartByName(unsigned long partname) {
	struct cCopterBody::Part* part;
	short count;

// LINE 2093:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x005611AB;
	__asm        inc    count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00561273;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
// LINE 2094:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x005611F8;
	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    near ptr 0x00561221;
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00561221;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0056123D;
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00561242;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2095:
	__asm        mov    eax, part;
	__asm        mov    ecx, partname;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x0056126E;
// LINE 2096:
	__asm        mov    eax, part;
	__asm        jmp    near ptr 0x0056127A;
// LINE 2097:
	__asm        jmp    near ptr 0x005611A7;
// LINE 2098:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0056127A;
// LINE 2099:
}

// FUNCTION: COPTER_D 0x00561281
void  cCopterBody::DrawSwitch(float phiOff, float psiOff, struct cCopterBody::Part* part, short screenx, short screeny, float scale, short colorIndexShift) {
	struct TransformedInfo transinfo;
	struct Point cpt;
	struct Point ept;
	struct Point3d ePt;
	short color;
	struct Point3d sPt;

// LINE 2103:
	__asm        cmp    part, 0;
	__asm        jne    near ptr 0x005612B3;
	__asm        push   0x8C085;
	__asm        push   0x5BE740;
	__asm        push   0x837;
	__asm        push   0x5BE774;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2104:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    edi, transinfo.startPoint.v;
	__asm        lea    esi, [eax+eax*4+0x6376D0];
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 2105:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005612EF;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        cmp    eax, 0xC8;
	__asm        jl     near ptr 0x0056130B;
	__asm        push   0x8C085;
	__asm        push   0x5BE798;
	__asm        push   0x839;
	__asm        push   0x5BE7B8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2106:
	__asm        mov    eax, reinterpret_cast<uint32_t>(transinfo.startPoint.v);
	__asm        mov    reinterpret_cast<uint32_t>(cpt.v), eax;
// LINE 2107:
	__asm        movsx  eax, cpt.h;
	__asm        movsx  ecx, screenx;
	__asm        add    eax, ecx;
	__asm        mov    cpt.h, ax;
	__asm        movsx  eax, cpt.v;
	__asm        movsx  ecx, screeny;
	__asm        add    eax, ecx;
	__asm        mov    cpt.v, ax;
// LINE 2108:
	__asm        mov    eax, reinterpret_cast<uint32_t>(transinfo.endPoint.v);
	__asm        mov    reinterpret_cast<uint32_t>(ept.v), eax;
// LINE 2109:
	__asm        movsx  eax, ept.h;
	__asm        movsx  ecx, screenx;
	__asm        add    eax, ecx;
	__asm        mov    ept.h, ax;
	__asm        movsx  eax, ept.v;
	__asm        movsx  ecx, screeny;
	__asm        add    eax, ecx;
	__asm        mov    ept.v, ax;
// LINE 2112:
	__asm        movsx  eax, cpt.h;
	__asm        mov    sPt.x, eax;
// LINE 2113:
	__asm        movsx  eax, cpt.v;
	__asm        mov    sPt.y, eax;
// LINE 2114:
	__asm        movsx  eax, ept.h;
	__asm        mov    ePt.x, eax;
// LINE 2115:
	__asm        movsx  eax, ept.v;
	__asm        mov    ePt.y, eax;
// LINE 2122:
	__asm        mov    eax, part;
	__asm        movsx  ax, byte ptr [eax+3];
	__asm        mov    color, ax;
// LINE 2124:
	__asm        movsx  eax, colorIndexShift;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005613A8;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005613A8;
// LINE 2126:
	__asm        movsx  eax, colorIndexShift;
	__asm        movsx  ecx, color;
	__asm        mov    ebx, 0xE;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        mov    color, dx;
// LINE 2128:
	__asm        movsx  eax, color;
	__asm        add    eax, 2;
	__asm        shl    eax, 4;
	__asm        add    eax, 4;
	__asm        mov    color, ax;
// LINE 2130:
	__asm        movsx  eax, color;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005613D4;
	__asm        movsx  eax, color;
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x005613F0;
	__asm        push   0x8C085;
	__asm        push   0x5BE7DC;
	__asm        push   0x852;
	__asm        push   0x5BE7F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2131:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x005615D1;
// LINE 2133:
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x20];
	__asm        fmul   scale;
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, ePt.z;
	__asm        push   eax;
	__asm        mov    eax, ePt.y;
	__asm        push   eax;
	__asm        mov    eax, ePt.x;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   0x00565225;
	__asm        add    esp, 0x20;
// LINE 2134:
	__asm        jmp    near ptr 0x00561605;
// LINE 2137:
// Block start:
	float drawwidth;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x20];
	__asm        fmul   scale;
	__asm        fst    drawwidth;
// LINE 2138:
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        fld    drawwidth;
	__asm        fdiv   dword ptr ds:[0x593718];
	__asm        mov    eax, part;
	__asm        fmul   dword ptr [eax+0x24];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, ePt.z;
	__asm        push   eax;
	__asm        mov    eax, ePt.y;
	__asm        push   eax;
	__asm        mov    eax, ePt.x;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   0x00564D8D;
	__asm        add    esp, 0x24;
// LINE 2139:
	__asm        jmp    near ptr 0x00561605;
// LINE 2142:
// Block end:
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   0x00563EB5;
	__asm        add    esp, 0xC;
// LINE 2143:
	__asm        jmp    near ptr 0x00561605;
// LINE 2149:
// Block start:
	enum SPHERE_SHADE_FLAG flag;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x005614D6;
// LINE 2151:
	__asm        mov    flag, 1;
	__asm        jmp    near ptr 0x005614F9;
// LINE 2153:
	__asm        mov    flag, 2;
	__asm        jmp    near ptr 0x005614F9;
// LINE 2155:
	__asm        mov    flag, 0;
	__asm        jmp    near ptr 0x005614F9;
// LINE 2156:
	__asm        jmp    near ptr 0x005614F9;
	__asm        cmp    dword ptr [ebp-0x50], 8;
	__asm        je     near ptr 0x005614AD;
	__asm        cmp    dword ptr [ebp-0x50], 0xD;
	__asm        je     near ptr 0x005614B9;
	__asm        cmp    dword ptr [ebp-0x50], 0xE;
	__asm        je     near ptr 0x005614C5;
	__asm        jmp    near ptr 0x005614F9;
// LINE 2157:
	__asm        mov    eax, flag;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x1C];
	__asm        fmul   scale;
	__asm        fmul   qword ptr ds:[0x593720];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   0x00563FD1;
	__asm        add    esp, 0x18;
// LINE 2158:
	__asm        jmp    near ptr 0x00561605;
// LINE 2162:
// Block start:
	float smallPsi;
// Block end:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x30];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0056155B;
	__asm        push   0x8C085;
	__asm        push   0x5BE814;
	__asm        push   0x872;
	__asm        push   0x5BE834;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2164:
	__asm        fld    transinfo.info;
	__asm        fadd   psiOff;
	__asm        fstp   dword ptr [ebp-0x44];
// LINE 2165:
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x00562BDB;
	__asm        add    esp, 4;
// LINE 2166:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x30];
	__asm        push   eax;
	__asm        push   0x3FF00000;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x1C];
	__asm        fmul   scale;
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   0x00564770;
	__asm        add    esp, 0x20;
// LINE 2170:
	__asm        jmp    near ptr 0x00561605;
// LINE 2173:
// Block end:
	__asm        push   0x8C085;
	__asm        push   0x5BE858;
	__asm        push   0x87D;
	__asm        push   0x5BE884;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2174:
	__asm        jmp    near ptr 0x00561605;
// LINE 2175:
	__asm        jmp    near ptr 0x00561605;
	__asm        sub    dword ptr [ebp-0x4C], 8;
	__asm        cmp    dword ptr [ebp-0x4C], 6;
	__asm        ja     near ptr 0x005615AB;
	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    dword ptr [eax*4+0x5615E9];
	__asm        lahf;
	__asm        adc    al, 0x56;
	__asm        add    [edi], ch;
	__asm        adc    eax, 0x14360056;
	__asm        push   esi;
	__asm        add    dh, bh;
	__asm        adc    edx, [esi];
	__asm        xchg   dl, [esi+edx*2];
	__asm        add    [edi-0x60FFA9EC], bl;
	__asm        adc    al, 0x56;
	__asm        (bad);
// LINE 2176:
	__asm        jmp    near ptr 0x0056160A;
}

// FUNCTION: COPTER_D 0x00561611
void  cCopterBody::Draw(float xOff, float yOff, class cCopterAnim* privanim, short framenum, short screenx, short screeny, float scale, short nearMedFar, short colorIndexShift) {
	float cosY;
	float cosX;
	struct PrivAnimPartInfo* privpartinfos;
	int32_t drawordercount;
	struct cCopterBody::Part* part;
	long numParts;
	short orderID;
	short count;
	float sinY;
	float sinX;

// LINE 2181:
	__asm        jmp    near ptr 0x00561628;
	__asm        mov    eax, privanim;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0056163F;
	__asm        jmp    near ptr 0x00561B6D;
// LINE 2182:
	__asm        jmp    near ptr 0x00561644;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0056165E;
	__asm        jmp    near ptr 0x00561B6D;
// LINE 2184:
	__asm        mov    eax, reinterpret_cast<uint32_t>(framenum);
	__asm        push   eax;
	__asm        mov    eax, privanim;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, privanim;
	__asm        call   dword ptr [eax+0x28];
	__asm        mov    privpartinfos, eax;
// LINE 2187:
	__asm        jmp    near ptr 0x00561675;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        mov    numParts, eax;
// LINE 2188:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00561694;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, numParts;
	__asm        jge    near ptr 0x005616D1;
// LINE 2189:
	__asm        movsx  eax, count;
	__asm        shl    eax, 2;
	__asm        mov    byte ptr [eax+eax*4+0x6376DD], 0;
	__asm        movsx  eax, count;
	__asm        shl    eax, 2;
	__asm        mov    al, [eax+eax*4+0x6376DD];
	__asm        movsx  ecx, count;
	__asm        shl    ecx, 2;
	__asm        mov    [ecx+ecx*4+0x6376DC], al;
	__asm        jmp    near ptr 0x00561690;
// LINE 2196:
	__asm        fld    xOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   sinX;
// LINE 2197:
	__asm        fld    xOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fstp   cosX;
// LINE 2198:
	__asm        fld    yOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   sinY;
// LINE 2199:
	__asm        fld    yOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fstp   cosY;
// LINE 2213:
	__asm        mov    drawordercount, 0;
// LINE 2214:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00561737;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, numParts;
	__asm        jge    near ptr 0x00561AB7;
// Block start:
	short drawProc;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xA0], eax;
// LINE 2215:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x0056178A;
	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    near ptr 0x005617B9;
	__asm        mov    eax, [ebp-0xA0];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x005617B9;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x005617D5;
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005617DA;
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2216:
	__asm        mov    eax, part;
	__asm        movsx  ax, byte ptr [eax];
	__asm        mov    drawProc, ax;
// LINE 2217:
	__asm        movsx  eax, drawProc;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00561AB2;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        movsx  ecx, nearMedFar;
	__asm        test   ecx, eax;
	__asm        je     near ptr 0x00561AB2;
// LINE 2218:
// Block start:
	struct TransformedInfo* transinfo;
	struct DXZY start;
	struct DXZY end;
	struct PrivAnimPartInfo* partinfo;
	unsigned short parentendtransformed;
	__asm        cmp    part, 0;
	__asm        je     near ptr 0x00561835;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00561851;
	__asm        push   0x8C085;
	__asm        push   0x5BE8A8;
	__asm        push   0x8AA;
	__asm        push   0x5BE8B0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2219:
	__asm        movsx  eax, count;
	__asm        shl    eax, 3;
	__asm        add    eax, privpartinfos;
	__asm        mov    partinfo, eax;
// LINE 2222:
	__asm        mov    eax, partinfo;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   0x0055D9CF;
	__asm        add    esp, 8;
	__asm        lea    ecx, [ebp-0x6C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x6C];
	__asm        lea    ecx, start.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 2223:
	__asm        mov    eax, partinfo;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   0x0055D9CF;
	__asm        add    esp, 8;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x7C];
	__asm        lea    ecx, end.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 2224:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x6376D0;
	__asm        mov    transinfo, eax;
// LINE 2225:
	__asm        mov    parentendtransformed, 0;
// LINE 2226:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0056196C;
// LINE 2227:
// Block start:
	struct TransformedInfo* parenttransinfo;
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x6376D0;
	__asm        mov    parenttransinfo, eax;
// LINE 2228:
	__asm        mov    eax, parenttransinfo;
	__asm        movzx  ax, byte ptr [eax+0xD];
	__asm        mov    parentendtransformed, ax;
	__asm        test   reinterpret_cast<uint32_t>(parentendtransformed), 0xFFFF;
	__asm        je     near ptr 0x0056196C;
// LINE 2229:
	__asm        mov    eax, parenttransinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, transinfo;
	__asm        mov    [ecx], eax;
// LINE 2230:
	__asm        mov    eax, parenttransinfo;
	__asm        mov    ax, [eax+0xA];
	__asm        mov    ecx, transinfo;
	__asm        mov    [ecx+8], ax;
// LINE 2231:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xC], 1;
// LINE 2234:
// Block end:
	__asm        test   reinterpret_cast<uint32_t>(parentendtransformed), 0xFFFF;
	__asm        jne    near ptr 0x005619C0;
// LINE 2240:
	__asm        push   1;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, start.info;
	__asm        push   eax;
	__asm        mov    eax, start.y;
	__asm        push   eax;
	__asm        mov    eax, start.z;
	__asm        push   eax;
	__asm        mov    eax, start.x;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, cosY;
	__asm        push   eax;
	__asm        mov    eax, sinY;
	__asm        push   eax;
	__asm        mov    eax, cosX;
	__asm        push   eax;
	__asm        mov    eax, sinX;
	__asm        push   eax;
	__asm        call   0x00562AC5;
	__asm        add    esp, 0x34;
// LINE 2241:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xC], 1;
// LINE 2243:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 9;
	__asm        jne    near ptr 0x005619E4;
// LINE 2244:
	__asm        mov    eax, partinfo;
	__asm        mov    al, [eax+3];
	__asm        push   eax;
	__asm        call   0x0055DA2E;
	__asm        add    esp, 4;
	__asm        mov    eax, transinfo;
	__asm        fstp   dword ptr [eax+0x10];
// LINE 2251:
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 9;
	__asm        je     near ptr 0x00561A6F;
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xC;
	__asm        je     near ptr 0x00561A6F;
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xE;
	__asm        je     near ptr 0x00561A6F;
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 8;
	__asm        je     near ptr 0x00561A6F;
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xD;
	__asm        je     near ptr 0x00561A6F;
// LINE 2258:
	__asm        push   1;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 0xA;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        mov    eax, end.info;
	__asm        push   eax;
	__asm        mov    eax, end.y;
	__asm        push   eax;
	__asm        mov    eax, end.z;
	__asm        push   eax;
	__asm        mov    eax, end.x;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, cosY;
	__asm        push   eax;
	__asm        mov    eax, sinY;
	__asm        push   eax;
	__asm        mov    eax, cosX;
	__asm        push   eax;
	__asm        mov    eax, sinX;
	__asm        push   eax;
	__asm        call   0x00562AC5;
	__asm        add    esp, 0x34;
// LINE 2259:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xD], 1;
// LINE 2263:
	__asm        mov    eax, transinfo;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x10], eax;
// LINE 2264:
	__asm        mov    eax, transinfo;
	__asm        mov    ax, [eax+8];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x18], ax;
// LINE 2265:
	__asm        mov    eax, transinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x14], eax;
// LINE 2266:
	__asm        mov    eax, transinfo;
	__asm        mov    ax, [eax+0xA];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x1A], ax;
// LINE 2268:
	__asm        mov    eax, part;
	__asm        mov    ecx, drawordercount;
	__asm        mov    [ecx*4+0x638670], eax;
	__asm        inc    drawordercount;
// LINE 2270:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x00561733;
// LINE 2271:
	__asm        cmp    drawordercount, 0;
	__asm        je     near ptr 0x00561AD9;
// LINE 2272:
	__asm        push   0x5623CD;
	__asm        push   4;
	__asm        mov    eax, drawordercount;
	__asm        push   eax;
	__asm        push   0x638670;
	__asm        call   0x00575470;
	__asm        add    esp, 0x10;
// LINE 2276:
	__asm        mov    orderID, 0;
	__asm        jmp    near ptr 0x00561AE8;
	__asm        inc    orderID;
	__asm        movsx  eax, orderID;
	__asm        cmp    eax, drawordercount;
	__asm        jge    near ptr 0x00561B68;
// LINE 2277:
	__asm        movsx  eax, orderID;
	__asm        mov    eax, [eax*4+0x638670];
	__asm        mov    part, eax;
// LINE 2278:
	__asm        cmp    part, 0;
	__asm        jne    near ptr 0x00561B29;
	__asm        push   0x8C085;
	__asm        push   0x5BE8D4;
	__asm        push   0x8E6;
	__asm        push   0x5BE8F4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2279:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        movsx  ecx, nearMedFar;
	__asm        test   ecx, eax;
	__asm        je     near ptr 0x00561B63;
// LINE 2280:
	__asm        mov    eax, reinterpret_cast<uint32_t>(colorIndexShift);
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(screeny);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(screenx);
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        push   eax;
	__asm        mov    eax, yOff;
	__asm        push   eax;
	__asm        mov    eax, xOff;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00561281;
// LINE 2281:
	__asm        jmp    near ptr 0x00561AE4;
// LINE 2282:
	__asm        jmp    near ptr 0x00561B6D;
}

// FUNCTION: COPTER_D 0x00561b74
void  cCopterBody::InstallArrayPointers(unsigned short expectondisk) {
	short numRealAnims;
	unsigned char tmp[16];

	// Function registers exception cleanup function at 0x00562095
// LINE 2286:
	__asm        cmp    dword ptr ds:[0x5BE630], 0;
	__asm        jne    near ptr 0x00561BC4;
	__asm        push   0x8C085;
	__asm        push   0x5BE918;
	__asm        push   0x8EE;
	__asm        push   0x5BE920;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2290:
	__asm        push   0x10;
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 2291:
	__asm        mov    tmp[4], 0x63;
	__asm        mov    ax, expectondisk;
	__asm        mov    [ebp-0x54], ax;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
// LINE 2292:
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x00568DB1;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00561C42;
	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+0x18], 0x28;
	__asm        jne    near ptr 0x00561C36;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    near ptr 0x00561C3D;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00561C49;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    near ptr 0x00561C6F;
	__asm        push   0x8C085;
	__asm        push   0x5BEB8C;
	__asm        push   0x11E;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00561C74;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        test   dword ptr [ebp-0x54], 0xFFFF;
	__asm        je     near ptr 0x00561CB2;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00561CAD;
	__asm        push   0x8C085;
	__asm        push   0x5BEB58;
	__asm        push   0x131;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00561CD8;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00561CD8;
	__asm        push   0x8C085;
	__asm        push   0x5BEB1C;
	__asm        push   0x132;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00561DC6;
	__asm        jmp    near ptr 0x00561D03;
	__asm        push   0x8C085;
	__asm        push   0x5BEAF0;
	__asm        push   0x134;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0x50;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x00561DB2;
	__asm        mov    dword ptr [ebp-0x3C], 0x41524350;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x40], eax;
	__asm        lea    eax, tmp[0];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00561D60;
	__asm        call   0x00567B1B;
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        push   0x28;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x00567900;
	__asm        jmp    near ptr 0x00561D83;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0x593734;
	__asm        jmp    near ptr 0x00561D95;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00561DAD;
_L31451:
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   0x005679EB;
	__asm        ret;
	__asm        jmp    near ptr 0x00561DB9;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00561DEC;
	__asm        push   0x8C085;
	__asm        push   0x5BEAD4;
	__asm        push   0x137;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
	__asm        jmp    near ptr 0x00561E16;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
_L31439:
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 2293:
	__asm        mov    numRealAnims, 0;
// LINE 2294:
	__asm        mov    tmp[4], 0x4C;
	__asm        mov    ax, expectondisk;
	__asm        mov    [ebp-0x90], ax;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x94], eax;
// LINE 2295:
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   0x00568DB1;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x00561E88;
	__asm        mov    eax, [ebp-0x6C];
	__asm        cmp    dword ptr [eax+0x18], 8;
	__asm        jne    near ptr 0x00561E7C;
	__asm        mov    dword ptr [ebp-0x70], 1;
	__asm        jmp    near ptr 0x00561E83;
	__asm        mov    dword ptr [ebp-0x70], 0;
	__asm        jmp    near ptr 0x00561E8F;
	__asm        mov    dword ptr [ebp-0x70], 1;
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    near ptr 0x00561EB5;
	__asm        push   0x8C085;
	__asm        push   0x5BEB8C;
	__asm        push   0x11E;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00561EBA;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        test   dword ptr [ebp-0x90], 0xFFFF;
	__asm        je     near ptr 0x00561EFB;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x00561EF6;
	__asm        push   0x8C085;
	__asm        push   0x5BEB58;
	__asm        push   0x131;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00561F21;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     near ptr 0x00561F21;
	__asm        push   0x8C085;
	__asm        push   0x5BEB1C;
	__asm        push   0x132;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x00562030;
	__asm        jmp    near ptr 0x00561F4C;
	__asm        push   0x8C085;
	__asm        push   0x5BEAF0;
	__asm        push   0x134;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0x50;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-4], 2;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     near ptr 0x0056201C;
	__asm        mov    dword ptr [ebp-0x78], 0x41524C55;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x7C], eax;
	__asm        lea    eax, tmp[0];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     near ptr 0x00561FB8;
	__asm        call   0x00567B1B;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   0x00567900;
	__asm        jmp    near ptr 0x00561FE4;
	__asm        mov    byte ptr [ebp-4], 3;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0x593730;
	__asm        jmp    near ptr 0x00561FF9;
	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00562017;
_L31498:
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   0x005679EB;
	__asm        ret;
	__asm        jmp    near ptr 0x00562023;
	__asm        mov    dword ptr [ebp-0x68], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x00562056;
	__asm        push   0x8C085;
	__asm        push   0x5BEAD4;
	__asm        push   0x137;
	__asm        push   0x5BE4F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
	__asm        jmp    near ptr 0x00562083;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
_L31486:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 2296:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x00560E78;
// LINE 2297:
	__asm        jmp    near ptr 0x0056209F;
_L31438:
	__asm        mov    eax, 0x596170;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x005620af
void  cCopterBody::DestroyAll() {
	void * __ptr32 h;
	short count;

	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
// LINE 2301:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x005620DA;
// LINE 2303:
	__asm        mov    count, 0;
// LINE 2304:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553452;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     near ptr 0x00562148;
// LINE 2305:
	__asm        jmp    near ptr 0x0056210C;
// LINE 2306:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0xC], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    near ptr 0x00562143;
	__asm        push   0x8C085;
	__asm        push   0x5BE944;
	__asm        push   0x902;
	__asm        push   0x5BE970;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2307:
	__asm        jmp    near ptr 0x005620E0;
// LINE 2308:
	__asm        mov    count, 0;
// LINE 2309:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x41524350;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553452;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     near ptr 0x005621B2;
// LINE 2310:
	__asm        jmp    near ptr 0x00562176;
// LINE 2311:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x10], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    near ptr 0x005621AD;
	__asm        push   0x8C085;
	__asm        push   0x5BE994;
	__asm        push   0x907;
	__asm        push   0x5BE9C0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2312:
	__asm        jmp    near ptr 0x0056214E;
// LINE 2313:
	__asm        mov    count, 0;
// LINE 2314:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x41524C55;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553452;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     near ptr 0x0056221C;
// LINE 2315:
	__asm        jmp    near ptr 0x005621E0;
// LINE 2316:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x14], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    near ptr 0x00562217;
	__asm        push   0x8C085;
	__asm        push   0x5BE9E4;
	__asm        push   0x90C;
	__asm        push   0x5BEA10;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2317:
	__asm        jmp    near ptr 0x005621B8;
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x4C], eax;
// LINE 2318:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     near ptr 0x0056223C;
	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00562243;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00562260;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00562267;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0056226C;
	__asm        jmp    near ptr 0x00562271;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00562291;
	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x005622A5;
	__asm        jmp    near ptr 0x005622A0;
	__asm        jmp    near ptr 0x00562296;
	__asm        jmp    near ptr 0x005622A0;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        jne    near ptr 0x005622A5;
	__asm        jmp    near ptr 0x005623A8;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x005622C1;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x005622CD;
	__asm        jmp    near ptr 0x005622CD;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x005622CD;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   dword ptr [eax+4];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00562371;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00562361;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        dec    word ptr [eax+4];
	__asm        mov    eax, [ebp-0x48];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0056235C;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x32;
	__asm        push   0x59A254;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00562376;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x005622E4;
	__asm        jmp    near ptr 0x00562376;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x0056239E;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    near ptr 0x0056239E;
	__asm        jmp    near ptr 0x005623A3;
	__asm        jmp    near ptr 0x00562224;
	__asm        jmp    near ptr 0x005623AD;
// LINE 2320:
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    ecx, ds:[0x5BE630];
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
// LINE 2321:
	__asm        jmp    near ptr 0x005623C8;
}

// FUNCTION: COPTER_D 0x005623cd
int32_t cCopterBodyCompareDrawOrder(void * __ptr32 p1, void * __ptr32 p2) {
// LINE 2325:
	__asm        mov    eax, p2;
	__asm        mov    eax, [eax];
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        mov    ecx, p1;
	__asm        mov    ecx, [ecx];
	__asm        movsx  ecx, word ptr [ecx+0x1A];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x005623FC;
// LINE 2326:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00562406;
// LINE 2327:
	__asm        jmp    near ptr 0x00562406;
// LINE 2328:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00562406;
// LINE 2329:
}

// FUNCTION: COPTER_D 0x0056240b
void SwizzleCopterBodyPart(void * __ptr32 val, long size) {
	struct cCopterBody::Part* part;
	short debugbodypartsize;

// LINE 2334:
	__asm        mov    debugbodypartsize, 0x28;
// LINE 2335:
	__asm        cmp    size, 0x28;
	__asm        je     near ptr 0x00562440;
	__asm        push   0x8C085;
	__asm        push   0x5BEA34;
	__asm        push   0x91F;
	__asm        push   0x5BEA60;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2336:
	__asm        mov    eax, val;
	__asm        mov    part, eax;
// LINE 2337:
	__asm        mov    eax, part;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 2338:
	__asm        mov    eax, part;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 2339:
	__asm        mov    eax, part;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        call   0x005668EA;
	__asm        add    esp, 4;
// LINE 2340:
	__asm        mov    eax, part;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        call   0x005668EA;
	__asm        add    esp, 4;
// LINE 2341:
	__asm        mov    eax, part;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   0x005668EA;
	__asm        add    esp, 4;
// LINE 2343:
	__asm        jmp    near ptr 0x00562496;
}

// FUNCTION: COPTER_D 0x0056249b
void SwizzleAnimLookup(void * __ptr32 val, long size) {
	struct AnimLookup* al;

// LINE 2348:
	__asm        cmp    size, 8;
	__asm        je     near ptr 0x005624CA;
	__asm        push   0x8C085;
	__asm        push   0x5BEA84;
	__asm        push   0x92C;
	__asm        push   0x5BEAB0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2349:
	__asm        mov    eax, val;
	__asm        mov    al, eax;
// LINE 2350:
	__asm        mov    eax, al;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 2351:
	__asm        mov    eax, al;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 2353:
	__asm        jmp    near ptr 0x005624F0;
}



// Contribution: 2:00004718-0000472f Module: 189, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004730-00004733 Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593730
// ??_7?$cArray@UAnimLookup@@@@6B@


// Contribution: 2:00004734-00004737 Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593734
// ??_7?$cArray@UPart@cCopterBody@@@@6B@


// Contribution: 2:00004738-0000473b Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593738
// ??_7_cArray@@6B@


// Contribution: 2:00007170-000071af Module: 189, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00027628-00027ad3 Module: 189, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005be628
// standardAnimRect
// GLOBAL: COPTER_D 0x005be630
// cCopterBody::fsList
// GLOBAL: COPTER_D 0x005be634
// sTestPersonFrameNum


// Contribution: 3:00027ad4-00027aee Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bead4
// ??_C@_0BL@GEOL@couldn?8t?5get?5or?5make?5array?$AA@


// Contribution: 3:00027af0-00027b18 Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beaf0
// ??_C@_0CJ@IDHA@about?5to?5create?5a?5very?5unfortuna@


// Contribution: 3:00027b1c-00027b57 Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb1c
// ??_C@_0DM@LMC@array?5found?5on?5disk?5even?5though?5@


// Contribution: 3:00027b58-00027b8b Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb58
// ??_C@_0DE@OFFD@didn?8t?5find?5array?5on?5disk?9?9will?5@


// Contribution: 3:00027b8c-00027bab Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb8c
// ??_C@_0CA@LLAI@bad?5entry?5size?5of?5desired?5array?$AA@


// Contribution: 3:000a06c8-000a1991 Module: 189, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006376d0
// sTransformedInfo
// GLOBAL: COPTER_D 0x00638670
// cCopterBody::fsDrawOrderParts
