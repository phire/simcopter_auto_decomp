// Module: Bods.obj
// Source: C:\Copter\Source\X\Objects\Bods.cpp
// autogenerated by simcopter_tool from PDB file

// Type: short;

// Type: struct Rect;
struct Rect{
	short top;
	short left;
	short bottom;
	short right;
};

// Type: struct TransformedInfo[200];

// Type: struct cCopterBody::Part*[200];

// Type: class cBList<cCopterBody> (forward reference);
class cBList<cCopterBody> : public PtrList<cCopterBody>
{
public:
	long GetIndex(unsigned long);
	long GetIndex(class cCopterBody*);
	void cBList<cCopterBody>();
	void ~cBList<cCopterBody>();
	void Delete();
	void DeletePointers();
	void DeletePointersAndSelf();
	long CountByBodyType(unsigned long);
	class cCopterBody* GetByBodyType(unsigned long, long);
	long GetIndexInBodyType(class cCopterBody*);
	class cCopterBody* GetByName(unsigned long, long);
	// vtable: 0
	intro void Add(class cCopterBody*);
	void WriteToDisk();
	void WriteToDiskIfDirty();
	class ResFile* fFile;
	unsigned long fType;
	void CompactFile();
	// calltype: NearC
	static class cBList<cCopterBody>* MakeNew(unsigned char *, unsigned long);
	void LoadAll();
};

// Type: class cCopterBody (forward reference);
// cCopterBody Class implementation not found

// Type: unsigned long;

// Type: struct AnimLookup (forward reference);
// AnimLookup Class implementation not found

// Type: class cCopterAnim (forward reference);
class cCopterAnim : public cBBase
{
public:
	void cCopterAnim();
	virtual void ~cCopterAnim();
	virtual void Destroy();
	virtual void WriteToDisk();
	virtual unsigned short IsDirty();
	virtual unsigned long GetBodyType();
	virtual void InstallArrayPointers(unsigned short);
	static class cBList<cCopterAnim>* fsList;
	virtual class cBList<cBBase>* GetList();
	// vtable: 36
	intro struct PrivAnimPartInfo* GetPartInfo(short, short);
	// vtable: 40
	intro struct PrivAnimPartInfo* GetPartInfoBasePtr(short);
	class cArray<PrivAnimPartInfo>* fPrivPartInfo;
	short GetNumParts();
	short GetNumFrames();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static class cCopterAnim* MakeNew(unsigned long, class cCopterBody*);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// calltype: NearC
	static void DestroyAll();
};

// Type: unsigned short;

// Type: struct cCopterBody::Part (forward reference);
// cCopterBody::Part Class implementation not found

// Type: unsigned char *;

// Type: float;

// Type: struct TransformedInfo;
struct TransformedInfo{
	struct Point startPoint;
	struct Point endPoint;
	short startDepth;
	short endDepth;
	unsigned char bStartTransformed;
	unsigned char bEndTransformed;
	float info;
};

// Type: struct Point;
struct Point{
	short v;
	short h;
};

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: enum SPHERE_SHADE_FLAG;
enum SPHERE_SHADE_FLAG {
	NO_SHADE = 0,
	GRAD_SHADE = 1,
	GRAD_DITHER_SHADE = 2,
};

// Type: struct PrivAnimPartInfo (forward reference);
// PrivAnimPartInfo Class implementation not found

// Type: int32_t;

// Type: long;

// Type: struct TransformedInfo (forward reference);
// TransformedInfo Class implementation not found

// Type: struct DXZY;
struct DXZY{
	float x;
	float z;
	float y;
	float info;
};

// Type: unsigned char[16];

// Type: void * __ptr32;

// Type: void;

// Type: class cBBase;
class cBBase{
public:
	// vtable: 0
	intro unsigned long GetBodyType();
	unsigned long GetName();
	unsigned long GetResType();
	// vtable: 4
	intro class cBList<cBBase>* GetList();
	unsigned long operator unsigned long();
	// vtable: 8
	intro unsigned short CanDestroy();
	// calltype: NearC
	static class cBBase* MakeNew(void * __ptr32);
	// calltype: NearC
	static void LoadAllRelatedArrays(class ResFile*);
	// vtable: 12
	intro void InstallArrayPointers(unsigned short);
	void FinishMake(unsigned short);
	void Delete();
	// vtable: 16
	intro void ~cBBase();
	// vtable: 20
	intro void Destroy();
	// vtable: 24
	intro void Dirty();
	// vtable: 28
	intro unsigned short IsDirty();
	// vtable: 32
	intro void WriteToDisk();
	void cBBase();
	void Init(void * __ptr32);
	void Init(unsigned char *);
	void Init(unsigned long);
	void * __ptr32 fDataHandle;
	unsigned long fDataHandleSize;
	unsigned char fName[16];
	unsigned long fTinyName;
	short fResID;
	unsigned short fDataChanged;
	struct cBBase::BBaseHeader{
		unsigned long bodyType;
		long _win8pad[15];
	};
public:
	struct cBBase::BBaseHeader* fHeader;
	// calltype: NearC
	static void SwizzleBBaseHeader(void * __ptr32, long);
};

// Type: class PtrList<cCopterBody>;
class PtrList<cCopterBody>{
	class PtrList<cCopterBody>::Iter{
	private:
		class PtrList<cCopterBody>* fObject;
		struct PtrList<cCopterBody>::PtrNode* fCur;
	public:
		void Iter(class PtrList<cCopterBody>*);
		class cCopterBody* Current();
		void Next();
		void Reset();
		class cCopterBody* First();
	};
	struct PtrList<cCopterBody>::PtrNode{
		class cCopterBody* data;
		struct PtrList<cCopterBody>::PtrNode* next;
	};
private:
	struct PtrList<cCopterBody>::PtrNode* fFirst;
	short fCount;
public:
	void PtrList<cCopterBody>();
	void ~PtrList<cCopterBody>();
	unsigned short Contains(class cCopterBody*);
	void RemoveAll();
	void Remove(class cCopterBody*);
	long Count();
	void Add(class cCopterBody*);
	class cCopterBody* GetByIndex(long);
	class cCopterBody* GetByOrder(long);
};



// Contribution: 1:0015fbf0-001614f4 Module: 189, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00560bf0
class cCopterAnim *  cCopterBody::GetPrivateAnim(unsigned long animName) {
	short count;

// LINE 1943:
	__asm        mov    count, 0;
	__asm        jmp    _T1b;
_T17:
	__asm        inc    count;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T27a;
// Block start:
	struct AnimLookup* al;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    [ebp-0x10], eax;
// LINE 1944:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0x10];
	__asm        cmp    eax, [ecx+4];
	__asm        je     _T68;

	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T68:
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    _T91;

	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T91;

	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    _Tad;
_T91:
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tad:
	__asm        jmp    near ptr 0x00560CA2;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    al, eax;
// LINE 1945:
	__asm        mov    eax, al;
	__asm        mov    ecx, animName;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T275;
// Block start:
	class cCopterAnim* privanim;
	__asm        mov    eax, al;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, cCopterAnim::fsList;
	__asm        mov    [ebp-0x38], eax;
// LINE 1946:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jl     _Tfe;

	__asm        cmp    dword ptr [ebp-0x14], 0x20;
	__asm        jb     _T117;
_Tfe:
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T117:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T12f;

	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T136;
_T12f:
	__asm        mov    dword ptr [ebp-0x20], 0;
_T136:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T153;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T15a;
_T153:
	__asm        mov    dword ptr [ebp-0x18], 0;
_T15a:
	__asm        jmp    near ptr 0x00560D4F;

	__asm        jmp    near ptr 0x00560D54;

	__asm        jmp    _T181;
_T169:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T17c;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x18], eax;
_T17c:
	__asm        jmp    _T181;
_T181:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T1a1;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T235;

	__asm        jmp    _T1b5;

	__asm        jmp    _T1ab;
_T1a1:
	__asm        jmp    _T235;

	__asm        jmp    _T1b5;
_T1ab:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T235;
_T1b5:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T1d1;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T1dd;

	__asm        jmp    _T1dd;
_T1d1:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T1dd;
_T1dd:
	__asm        jmp    near ptr 0x00560DD2;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x14];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x34];
	__asm        mov    cl, [ebp-0x14];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    _T230;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T219;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T22b;

	__asm        jmp    _T225;
_T219:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T22b;
_T225:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x30], eax;
_T22b:
	__asm        jmp    _T241;
_T230:
	__asm        jmp    _T169;
_T235:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    _T241;
_T241:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    privanim, eax;
// LINE 1947:
	__asm        cmp    privanim, 0;
	__asm        jne    _T26d;

	__asm        push   0x8C085;
	__asm        push   0x5BE638;
	__asm        push   0x79B;
	__asm        push   0x5BE658;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1948:
_T26d:
	__asm        mov    eax, privanim;
	__asm        jmp    _T281;
// LINE 1950:
// Block end:
// Block end:
_T275:
	__asm        jmp    _T17;
// LINE 1951:
_T27a:
	__asm        xor    eax, eax;
	__asm        jmp    _T281;
// LINE 1952:
_T281:
}

// FUNCTION: COPTER_D 0x00560e78
void  cCopterBody::ActivateAllPartPointers(unsigned short activated) {
	short count;

// LINE 2062:
	__asm        cmp    this, 0;
	__asm        jne    _T32;

	__asm        push   0x8C085;
	__asm        push   0x5BE67C;
	__asm        push   0x80E;
	__asm        push   0x5BE6CC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2063:
_T32:
	__asm        mov    count, 0;
	__asm        jmp    _T41;
_T3d:
	__asm        inc    count;
_T41:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T181;
// Block start:
	struct cCopterBody::Part* part;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
// LINE 2064:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    eax, [ecx+4];
	__asm        je     _T8e;

	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8e:
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    _Tb7;

	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _Tb7;

	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    _Td3;
_Tb7:
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td3:
	__asm        jmp    near ptr 0x00560F50;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2065:
	__asm        jmp    _T10e;

	__asm        push   0x8C085;
	__asm        push   0x5BE6F0;
	__asm        push   0x811;
	__asm        push   0x5BE71C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2066:
_T10e:
	__asm        test   reinterpret_cast<uint32_t>(activated), 0xFFFF;
	__asm        je     _T151;
// LINE 2067:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T142;
// LINE 2068:
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cCopterBody::GetPartByName;
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0xC], eax;
// LINE 2071:
	__asm        jmp    _T14c;
// LINE 2072:
_T142:
	__asm        mov    eax, part;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 2074:
_T14c:
	__asm        jmp    _T17c;
// LINE 2075:
_T151:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T172;
// LINE 2076:
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0xC], eax;
// LINE 2077:
	__asm        jmp    _T17c;
// LINE 2078:
_T172:
	__asm        mov    eax, part;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 2080:
// Block end:
_T17c:
	__asm        jmp    _T3d;
// LINE 2081:
_T181:
	__asm        jmp    near ptr 0x00560FFE;
}

// FUNCTION: COPTER_D 0x00561005
class cCopterBody *  cCopterBody::GetCopterBody(unsigned char * name) {

	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        call   PStr2Long;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    [ebp-0x28], eax;
// LINE 2086:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jl     _T3b;

	__asm        cmp    dword ptr [ebp-4], 0x20;
	__asm        jb     _T54;
_T3b:
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T54:
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T6c;

	__asm        mov    eax, [ebp-0x28];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T73;
_T6c:
	__asm        mov    dword ptr [ebp-0x10], 0;
_T73:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T90;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T97;
_T90:
	__asm        mov    dword ptr [ebp-8], 0;
_T97:
	__asm        jmp    near ptr 0x005610A1;

	__asm        jmp    near ptr 0x005610A6;

	__asm        jmp    _Tbe;
_Ta6:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tb9;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
_Tb9:
	__asm        jmp    _Tbe;
_Tbe:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tde;

	__asm        mov    eax, [ebp-8];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T172;

	__asm        jmp    _Tf2;

	__asm        jmp    _Te8;
_Tde:
	__asm        jmp    _T172;

	__asm        jmp    _Tf2;
_Te8:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T172;
_Tf2:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T10e;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T11a;

	__asm        jmp    _T11a;
_T10e:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T11a;
_T11a:
	__asm        jmp    near ptr 0x00561124;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-4];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x24];
	__asm        mov    cl, [ebp-4];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    _T16d;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T156;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T168;

	__asm        jmp    _T162;
_T156:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T168;
_T162:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
_T168:
	__asm        jmp    _T17e;
_T16d:
	__asm        jmp    _Ta6;
_T172:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T17e;
_T17e:
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x0056118B;
// LINE 2088:
}

// FUNCTION: COPTER_D 0x00561190
struct cCopterBody::Part *  cCopterBody::GetPartByName(unsigned long partname) {
	struct cCopterBody::Part* part;
	short count;

// LINE 2093:
	__asm        mov    count, 0;
	__asm        jmp    _T1b;
_T17:
	__asm        inc    count;
_T1b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _Te3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xC], eax;
// LINE 2094:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xC];
	__asm        cmp    eax, [ecx+4];
	__asm        je     _T68;

	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T68:
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    _T91;

	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T91;

	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    _Tad;
_T91:
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tad:
	__asm        jmp    near ptr 0x00561242;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2095:
	__asm        mov    eax, part;
	__asm        mov    ecx, partname;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _Tde;
// LINE 2096:
	__asm        mov    eax, part;
	__asm        jmp    _Tea;
// LINE 2097:
_Tde:
	__asm        jmp    _T17;
// LINE 2098:
_Te3:
	__asm        xor    eax, eax;
	__asm        jmp    _Tea;
// LINE 2099:
_Tea:
}

// FUNCTION: COPTER_D 0x00561281
void  cCopterBody::DrawSwitch(float phiOff, float psiOff, struct cCopterBody::Part* part, short screenx, short screeny, float scale, short colorIndexShift) {
	struct TransformedInfo transinfo;
	struct Point cpt;
	struct Point ept;
	struct Point3d ePt;
	short color;
	struct Point3d sPt;

// LINE 2103:
	__asm        cmp    part, 0;
	__asm        jne    _T32;

	__asm        push   0x8C085;
	__asm        push   0x5BE740;
	__asm        push   0x837;
	__asm        push   0x5BE774;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2104:
_T32:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    edi, transinfo.startPoint.v;
	__asm        lea    esi, sTransformedInfo[0].startPoint.v[eax+eax*4];
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 2105:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        test   eax, eax;
	__asm        jl     _T6e;

	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        cmp    eax, 0xC8;
	__asm        jl     _T8a;
_T6e:
	__asm        push   0x8C085;
	__asm        push   0x5BE798;
	__asm        push   0x839;
	__asm        push   0x5BE7B8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2106:
_T8a:
	__asm        mov    eax, reinterpret_cast<uint32_t>(transinfo.startPoint.v);
	__asm        mov    reinterpret_cast<uint32_t>(cpt.v), eax;
// LINE 2107:
	__asm        movsx  eax, cpt.h;
	__asm        movsx  ecx, screenx;
	__asm        add    eax, ecx;
	__asm        mov    cpt.h, ax;
	__asm        movsx  eax, cpt.v;
	__asm        movsx  ecx, screeny;
	__asm        add    eax, ecx;
	__asm        mov    cpt.v, ax;
// LINE 2108:
	__asm        mov    eax, reinterpret_cast<uint32_t>(transinfo.endPoint.v);
	__asm        mov    reinterpret_cast<uint32_t>(ept.v), eax;
// LINE 2109:
	__asm        movsx  eax, ept.h;
	__asm        movsx  ecx, screenx;
	__asm        add    eax, ecx;
	__asm        mov    ept.h, ax;
	__asm        movsx  eax, ept.v;
	__asm        movsx  ecx, screeny;
	__asm        add    eax, ecx;
	__asm        mov    ept.v, ax;
// LINE 2112:
	__asm        movsx  eax, cpt.h;
	__asm        mov    sPt.x, eax;
// LINE 2113:
	__asm        movsx  eax, cpt.v;
	__asm        mov    sPt.y, eax;
// LINE 2114:
	__asm        movsx  eax, ept.h;
	__asm        mov    ePt.x, eax;
// LINE 2115:
	__asm        movsx  eax, ept.v;
	__asm        mov    ePt.y, eax;
// LINE 2122:
	__asm        mov    eax, part;
	__asm        movsx  ax, byte ptr [eax+3];
	__asm        mov    color, ax;
// LINE 2124:
	__asm        movsx  eax, colorIndexShift;
	__asm        test   eax, eax;
	__asm        je     _T127;

	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T127;
// LINE 2126:
	__asm        movsx  eax, colorIndexShift;
	__asm        movsx  ecx, color;
	__asm        mov    ebx, 0xE;
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        mov    color, dx;
// LINE 2128:
_T127:
	__asm        movsx  eax, color;
	__asm        add    eax, 2;
	__asm        shl    eax, 4;
	__asm        add    eax, 4;
	__asm        mov    color, ax;
// LINE 2130:
	__asm        movsx  eax, color;
	__asm        test   eax, eax;
	__asm        jl     _T153;

	__asm        movsx  eax, color;
	__asm        cmp    eax, 0x100;
	__asm        jl     _T16f;
_T153:
	__asm        push   0x8C085;
	__asm        push   0x5BE7DC;
	__asm        push   0x852;
	__asm        push   0x5BE7F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2131:
_T16f:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T350;
// LINE 2133:
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x20];
	__asm        fmul   scale;
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, ePt.z;
	__asm        push   eax;
	__asm        mov    eax, ePt.y;
	__asm        push   eax;
	__asm        mov    eax, ePt.x;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   DrawLine;
	__asm        add    esp, 0x20;
// LINE 2134:
	__asm        jmp    _T384;
// LINE 2137:
// Block start:
	float drawwidth;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x20];
	__asm        fmul   scale;
	__asm        fst    drawwidth;
// LINE 2138:
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        fld    drawwidth;
	__asm        fdiv   dword ptr ds:[0x593718];
	__asm        mov    eax, part;
	__asm        fmul   dword ptr [eax+0x24];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, ePt.z;
	__asm        push   eax;
	__asm        mov    eax, ePt.y;
	__asm        push   eax;
	__asm        mov    eax, ePt.x;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   DrawTaperedLine;
	__asm        add    esp, 0x24;
// LINE 2139:
	__asm        jmp    _T384;
// LINE 2142:
// Block end:
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   MyPixel;
	__asm        add    esp, 0xC;
// LINE 2143:
	__asm        jmp    _T384;
// LINE 2149:
// Block start:
	enum SPHERE_SHADE_FLAG flag;
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T255;
// LINE 2151:
_T22c:
	__asm        mov    flag, 1;
	__asm        jmp    _T278;
// LINE 2153:
_T238:
	__asm        mov    flag, 2;
	__asm        jmp    _T278;
// LINE 2155:
_T244:
	__asm        mov    flag, 0;
	__asm        jmp    _T278;
// LINE 2156:
	__asm        jmp    _T278;
_T255:
	__asm        cmp    dword ptr [ebp-0x50], 8;
	__asm        je     _T22c;

	__asm        cmp    dword ptr [ebp-0x50], 0xD;
	__asm        je     _T238;

	__asm        cmp    dword ptr [ebp-0x50], 0xE;
	__asm        je     _T244;

	__asm        jmp    _T278;
// LINE 2157:
_T278:
	__asm        mov    eax, flag;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(color);
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x1C];
	__asm        fmul   scale;
	__asm        fmul   qword ptr ds:[0x593720];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   DrawSphere;
	__asm        add    esp, 0x18;
// LINE 2158:
	__asm        jmp    _T384;
// LINE 2162:
// Block end:
// Block start:
	float smallPsi;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x30];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T2da;

	__asm        push   0x8C085;
	__asm        push   0x5BE814;
	__asm        push   0x872;
	__asm        push   0x5BE834;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2164:
_T2da:
	__asm        fld    transinfo.info;
	__asm        fadd   psiOff;
	__asm        fstp   smallPsi;
// LINE 2165:
	__asm        lea    eax, smallPsi;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 2166:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x30];
	__asm        push   eax;
	__asm        push   0x3FF00000;
	__asm        push   0;
	__asm        mov    eax, smallPsi;
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        fld    dword ptr [eax+0x1C];
	__asm        fmul   scale;
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        mov    eax, sPt.z;
	__asm        push   eax;
	__asm        mov    eax, sPt.y;
	__asm        push   eax;
	__asm        mov    eax, sPt.x;
	__asm        push   eax;
	__asm        call   DrawFaceTwo;
	__asm        add    esp, 0x20;
// LINE 2170:
	__asm        jmp    _T384;
// LINE 2173:
// Block end:
_T32a:
	__asm        push   0x8C085;
	__asm        push   0x5BE858;
	__asm        push   0x87D;
	__asm        push   0x5BE884;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2174:
	__asm        jmp    _T384;
// LINE 2175:
	__asm        jmp    _T384;
_T350:
	__asm        sub    dword ptr [ebp-0x4C], 8;
	__asm        cmp    dword ptr [ebp-0x4C], 6;
	__asm        ja     _T32a;

	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    SwitchPointers5641705[0][eax*4];
// Switch pointers
// LINE 2176:
_T384:
	__asm        jmp    near ptr 0x0056160A;
}

// FUNCTION: COPTER_D 0x00561611
void  cCopterBody::Draw(float xOff, float yOff, class cCopterAnim* privanim, short framenum, short screenx, short screeny, float scale, short nearMedFar, short colorIndexShift) {
	float cosY;
	float cosX;
	struct PrivAnimPartInfo* privpartinfos;
	int32_t drawordercount;
	struct cCopterBody::Part* part;
	long numParts;
	short orderID;
	short count;
	float sinY;
	float sinX;

// LINE 2181:
	__asm        jmp    near ptr 0x00561628;

	__asm        mov    eax, privanim;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T2e;

	__asm        jmp    _T55c;
// LINE 2182:
_T2e:
	__asm        jmp    near ptr 0x00561644;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T4d;

	__asm        jmp    _T55c;
// LINE 2184:
_T4d:
	__asm        mov    eax, reinterpret_cast<uint32_t>(framenum);
	__asm        push   eax;
	__asm        mov    eax, privanim;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, privanim;
	__asm        call   dword ptr [eax+0x28];
	__asm        mov    privpartinfos, eax;
// LINE 2187:
	__asm        jmp    near ptr 0x00561675;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        mov    numParts, eax;
// LINE 2188:
	__asm        mov    count, 0;
	__asm        jmp    _T83;
_T7f:
	__asm        inc    count;
_T83:
	__asm        movsx  eax, count;
	__asm        cmp    eax, numParts;
	__asm        jge    _Tc0;
// LINE 2189:
	__asm        movsx  eax, count;
	__asm        shl    eax, 2;
	__asm        mov    sTransformedInfo[0].bEndTransformed[eax+eax*4], 0;
	__asm        movsx  eax, count;
	__asm        shl    eax, 2;
	__asm        mov    al, sTransformedInfo[0].bEndTransformed[eax+eax*4];
	__asm        movsx  ecx, count;
	__asm        shl    ecx, 2;
	__asm        mov    sTransformedInfo[0].bStartTransformed[ecx+ecx*4], al;
	__asm        jmp    _T7f;
// LINE 2196:
_Tc0:
	__asm        fld    xOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   sinX;
// LINE 2197:
	__asm        fld    xOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fstp   cosX;
// LINE 2198:
	__asm        fld    yOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   sinY;
// LINE 2199:
	__asm        fld    yOff;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fstp   cosY;
// LINE 2213:
	__asm        mov    drawordercount, 0;
// LINE 2214:
	__asm        mov    count, 0;
	__asm        jmp    _T126;
_T122:
	__asm        inc    count;
_T126:
	__asm        movsx  eax, count;
	__asm        cmp    eax, numParts;
	__asm        jge    _T4a6;
// Block start:
	short drawProc;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    [ebp-0xA0], eax;
// LINE 2215:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        cmp    eax, [ecx+4];
	__asm        je     _T179;

	__asm        push   0x8C085;
	__asm        push   0x5BE4B8;
	__asm        push   0x1A4;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T179:
	__asm        mov    eax, [ebp-0xA0];
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jle    _T1a8;

	__asm        mov    eax, [ebp-0xA0];
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    _T1a8;

	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    _T1c4;
_T1a8:
	__asm        push   0x8C085;
	__asm        push   0x5BE49C;
	__asm        push   0x1A6;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1c4:
	__asm        jmp    near ptr 0x005617DA;

	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    part, eax;
// LINE 2216:
	__asm        mov    eax, part;
	__asm        movsx  ax, byte ptr [eax];
	__asm        mov    drawProc, ax;
// LINE 2217:
	__asm        movsx  eax, drawProc;
	__asm        test   eax, eax;
	__asm        je     _T4a1;

	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        movsx  ecx, nearMedFar;
	__asm        test   ecx, eax;
	__asm        je     _T4a1;
// LINE 2218:
// Block start:
	struct TransformedInfo* transinfo;
	struct DXZY start;
	struct DXZY end;
	struct PrivAnimPartInfo* partinfo;
	unsigned short parentendtransformed;
	__asm        cmp    part, 0;
	__asm        je     _T224;

	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        test   eax, eax;
	__asm        jge    _T240;
_T224:
	__asm        push   0x8C085;
	__asm        push   0x5BE8A8;
	__asm        push   0x8AA;
	__asm        push   0x5BE8B0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2219:
_T240:
	__asm        movsx  eax, count;
	__asm        shl    eax, 3;
	__asm        add    eax, privpartinfos;
	__asm        mov    partinfo, eax;
// LINE 2222:
	__asm        mov    eax, partinfo;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x8C];
	__asm        push   eax;
	__asm        call   TinyXZY_2_DXZY;
	__asm        add    esp, 8;
	__asm        lea    ecx, [ebp-0x6C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x6C];
	__asm        lea    ecx, start.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 2223:
	__asm        mov    eax, partinfo;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x9C];
	__asm        push   eax;
	__asm        call   TinyXZY_2_DXZY;
	__asm        add    esp, 8;
	__asm        lea    ecx, [ebp-0x7C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
	__asm        lea    eax, [ebp-0x7C];
	__asm        lea    ecx, end.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 2224:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x6376D0;
	__asm        mov    transinfo, eax;
// LINE 2225:
	__asm        mov    parentendtransformed, 0;
// LINE 2226:
	__asm        mov    eax, part;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     _T35b;
// LINE 2227:
// Block start:
	struct TransformedInfo* parenttransinfo;
	__asm        mov    eax, part;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, byte ptr [eax+2];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x6376D0;
	__asm        mov    parenttransinfo, eax;
// LINE 2228:
	__asm        mov    eax, parenttransinfo;
	__asm        movzx  ax, byte ptr [eax+0xD];
	__asm        mov    parentendtransformed, ax;
	__asm        test   reinterpret_cast<uint32_t>(parentendtransformed), 0xFFFF;
	__asm        je     _T35b;
// LINE 2229:
	__asm        mov    eax, parenttransinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, transinfo;
	__asm        mov    [ecx], eax;
// LINE 2230:
	__asm        mov    eax, parenttransinfo;
	__asm        mov    ax, [eax+0xA];
	__asm        mov    ecx, transinfo;
	__asm        mov    [ecx+8], ax;
// LINE 2231:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xC], 1;
// LINE 2234:
// Block end:
_T35b:
	__asm        test   reinterpret_cast<uint32_t>(parentendtransformed), 0xFFFF;
	__asm        jne    _T3af;
// LINE 2240:
	__asm        push   1;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        mov    eax, start.info;
	__asm        push   eax;
	__asm        mov    eax, start.y;
	__asm        push   eax;
	__asm        mov    eax, start.z;
	__asm        push   eax;
	__asm        mov    eax, start.x;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, cosY;
	__asm        push   eax;
	__asm        mov    eax, sinY;
	__asm        push   eax;
	__asm        mov    eax, cosX;
	__asm        push   eax;
	__asm        mov    eax, sinX;
	__asm        push   eax;
	__asm        call   XYTransformToScreen;
	__asm        add    esp, 0x34;
// LINE 2241:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xC], 1;
// LINE 2243:
_T3af:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax];
	__asm        cmp    eax, 9;
	__asm        jne    _T3d3;
// LINE 2244:
	__asm        mov    eax, partinfo;
	__asm        mov    al, [eax+3];
	__asm        push   eax;
	__asm        call   Byte_2_Float;
	__asm        add    esp, 4;
	__asm        mov    eax, transinfo;
	__asm        fstp   dword ptr [eax+0x10];
// LINE 2251:
_T3d3:
	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 9;
	__asm        je     _T45e;

	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xC;
	__asm        je     _T45e;

	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xE;
	__asm        je     _T45e;

	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 8;
	__asm        je     _T45e;

	__asm        movsx  eax, drawProc;
	__asm        cmp    eax, 0xD;
	__asm        je     _T45e;
// LINE 2258:
	__asm        push   1;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 0xA;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, transinfo;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        mov    eax, end.info;
	__asm        push   eax;
	__asm        mov    eax, end.y;
	__asm        push   eax;
	__asm        mov    eax, end.z;
	__asm        push   eax;
	__asm        mov    eax, end.x;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, cosY;
	__asm        push   eax;
	__asm        mov    eax, sinY;
	__asm        push   eax;
	__asm        mov    eax, cosX;
	__asm        push   eax;
	__asm        mov    eax, sinX;
	__asm        push   eax;
	__asm        call   XYTransformToScreen;
	__asm        add    esp, 0x34;
// LINE 2259:
	__asm        mov    eax, transinfo;
	__asm        mov    byte ptr [eax+0xD], 1;
// LINE 2263:
_T45e:
	__asm        mov    eax, transinfo;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x10], eax;
// LINE 2264:
	__asm        mov    eax, transinfo;
	__asm        mov    ax, [eax+8];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x18], ax;
// LINE 2265:
	__asm        mov    eax, transinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x14], eax;
// LINE 2266:
	__asm        mov    eax, transinfo;
	__asm        mov    ax, [eax+0xA];
	__asm        mov    ecx, part;
	__asm        mov    [ecx+0x1A], ax;
// LINE 2268:
	__asm        mov    eax, part;
	__asm        mov    ecx, drawordercount;
	__asm        mov    cCopterBody::fsDrawOrderParts[0][ecx*4], eax;
	__asm        inc    drawordercount;
// LINE 2270:
// Block end:
// Block end:
_T4a1:
	__asm        jmp    _T122;
// LINE 2271:
_T4a6:
	__asm        cmp    drawordercount, 0;
	__asm        je     _T4c8;
// LINE 2272:
	__asm        push   0x5623CD;
	__asm        push   4;
	__asm        mov    eax, drawordercount;
	__asm        push   eax;
	__asm        push   0x638670;
	__asm        call   qsort;
	__asm        add    esp, 0x10;
// LINE 2276:
_T4c8:
	__asm        mov    orderID, 0;
	__asm        jmp    _T4d7;
_T4d3:
	__asm        inc    orderID;
_T4d7:
	__asm        movsx  eax, orderID;
	__asm        cmp    eax, drawordercount;
	__asm        jge    _T557;
// LINE 2277:
	__asm        movsx  eax, orderID;
	__asm        mov    eax, cCopterBody::fsDrawOrderParts[0][eax*4];
	__asm        mov    part, eax;
// LINE 2278:
	__asm        cmp    part, 0;
	__asm        jne    _T518;

	__asm        push   0x8C085;
	__asm        push   0x5BE8D4;
	__asm        push   0x8E6;
	__asm        push   0x5BE8F4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2279:
_T518:
	__asm        mov    eax, part;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        movsx  ecx, nearMedFar;
	__asm        test   ecx, eax;
	__asm        je     _T552;
// LINE 2280:
	__asm        mov    eax, reinterpret_cast<uint32_t>(colorIndexShift);
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(screeny);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(screenx);
	__asm        push   eax;
	__asm        mov    eax, part;
	__asm        push   eax;
	__asm        mov    eax, yOff;
	__asm        push   eax;
	__asm        mov    eax, xOff;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cCopterBody::DrawSwitch;
// LINE 2281:
_T552:
	__asm        jmp    _T4d3;
// LINE 2282:
_T557:
	__asm        jmp    _T55c;
_T55c:
}

// FUNCTION: COPTER_D 0x00561b74
void  cCopterBody::InstallArrayPointers(unsigned short expectondisk) {
	short numRealAnims;
	unsigned char tmp[16];

	// Function registers exception cleanup function at 0x00562095
// LINE 2286:
	__asm        cmp    cCopterBody::fsList, 0;
	__asm        jne    _T50;

	__asm        push   0x8C085;
	__asm        push   0x5BE918;
	__asm        push   0x8EE;
	__asm        push   0x5BE920;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2290:
_T50:
	__asm        push   0x10;
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 2291:
	__asm        mov    tmp[4], 0x63;
	__asm        mov    ax, expectondisk;
	__asm        mov    [ebp-0x54], ax;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x58], eax;
// LINE 2292:
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        call   PStr2Long;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x38], eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        call   _cArray::GetArray;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _Tce;

	__asm        mov    eax, [ebp-0x30];
	__asm        cmp    dword ptr [eax+0x18], 0x28;
	__asm        jne    _Tc2;

	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    _Tc9;
_Tc2:
	__asm        mov    dword ptr [ebp-0x34], 0;
_Tc9:
	__asm        jmp    _Td5;
_Tce:
	__asm        mov    dword ptr [ebp-0x34], 1;
_Td5:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        jne    _Tfb;

	__asm        push   0x8C085;
	__asm        push   0x5BEB8C;
	__asm        push   0x11E;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tfb:
	__asm        jmp    near ptr 0x00561C74;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        test   dword ptr [ebp-0x54], 0xFFFF;
	__asm        je     _T13e;

	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T139;

	__asm        push   0x8C085;
	__asm        push   0x5BEB58;
	__asm        push   0x131;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T139:
	__asm        jmp    _T164;
_T13e:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T164;

	__asm        push   0x8C085;
	__asm        push   0x5BEB1C;
	__asm        push   0x132;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T164:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T252;

	__asm        jmp    _T18f;

	__asm        push   0x8C085;
	__asm        push   0x5BEAF0;
	__asm        push   0x134;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T18f:
	__asm        push   0x50;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     _T23e;

	__asm        mov    dword ptr [ebp-0x3C], 0x41524350;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    [ebp-0x40], eax;
	__asm        lea    eax, tmp[0];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T1ec;

	__asm        call   _cArray::MakeTable;
_T1ec:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        push   0x28;
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   _cArray::BeginCreate;
	__asm        jmp    near ptr 0x00561D83;

	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    dword ptr [eax], 0x593734;
	__asm        jmp    near ptr 0x00561D95;

	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T239;
_L31451:
	__asm        mov    ecx, [ebp-0x50];
	__asm        call   _cArray::~_cArray;
	__asm        ret;
_T239:
	__asm        jmp    _T245;
_T23e:
	__asm        mov    dword ptr [ebp-0x2C], 0;
_T245:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
_T252:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T278;

	__asm        push   0x8C085;
	__asm        push   0x5BEAD4;
	__asm        push   0x137;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T278:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
	__asm        jmp    _T2a2;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
_L31439:
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 2293:
_T2a2:
	__asm        mov    numRealAnims, 0;
// LINE 2294:
	__asm        mov    tmp[4], 0x4C;
	__asm        mov    ax, expectondisk;
	__asm        mov    [ebp-0x90], ax;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x94], eax;
// LINE 2295:
	__asm        lea    eax, tmp[0];
	__asm        push   eax;
	__asm        call   PStr2Long;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x74], eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        call   _cArray::GetArray;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x6C], eax;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T314;

	__asm        mov    eax, [ebp-0x6C];
	__asm        cmp    dword ptr [eax+0x18], 8;
	__asm        jne    _T308;

	__asm        mov    dword ptr [ebp-0x70], 1;
	__asm        jmp    _T30f;
_T308:
	__asm        mov    dword ptr [ebp-0x70], 0;
_T30f:
	__asm        jmp    _T31b;
_T314:
	__asm        mov    dword ptr [ebp-0x70], 1;
_T31b:
	__asm        cmp    dword ptr [ebp-0x70], 0;
	__asm        jne    _T341;

	__asm        push   0x8C085;
	__asm        push   0x5BEB8C;
	__asm        push   0x11E;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T341:
	__asm        jmp    near ptr 0x00561EBA;

	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        test   dword ptr [ebp-0x90], 0xFFFF;
	__asm        je     _T387;

	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    _T382;

	__asm        push   0x8C085;
	__asm        push   0x5BEB58;
	__asm        push   0x131;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T382:
	__asm        jmp    _T3ad;
_T387:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        je     _T3ad;

	__asm        push   0x8C085;
	__asm        push   0x5BEB1C;
	__asm        push   0x132;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3ad:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    _T4bc;

	__asm        jmp    _T3d8;

	__asm        push   0x8C085;
	__asm        push   0x5BEAF0;
	__asm        push   0x134;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3d8:
	__asm        push   0x50;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    dword ptr [ebp-4], 2;
	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _T4a8;

	__asm        mov    dword ptr [ebp-0x78], 0x41524C55;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x7C], eax;
	__asm        lea    eax, tmp[0];
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        cmp    dword ptr [ebp-0x80], 0;
	__asm        je     _T444;

	__asm        call   _cArray::MakeTable;
_T444:
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   _cArray::BeginCreate;
	__asm        jmp    near ptr 0x00561FE4;

	__asm        mov    byte ptr [ebp-4], 3;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    dword ptr [eax], 0x593730;
	__asm        jmp    near ptr 0x00561FF9;

	__asm        mov    byte ptr [ebp-4], 2;
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T4a3;
_L31498:
	__asm        mov    ecx, [ebp-0x8C];
	__asm        call   _cArray::~_cArray;
	__asm        ret;
_T4a3:
	__asm        jmp    _T4af;
_T4a8:
	__asm        mov    dword ptr [ebp-0x68], 0;
_T4af:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
_T4bc:
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    _T4e2;

	__asm        push   0x8C085;
	__asm        push   0x5BEAD4;
	__asm        push   0x137;
	__asm        push   0x5BE4F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4e2:
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
	__asm        jmp    _T50f;

	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
_L31486:
	__asm        mov    eax, [ebp-0x64];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 2296:
_T50f:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   cCopterBody::ActivateAllPartPointers;
// LINE 2297:
	__asm        jmp    _T52b;
_L31438:
	__asm        mov    eax, 0x596170;
	__asm        jmp    near ptr 0x0056F590;
_T52b:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x005620af
void  cCopterBody::DestroyAll() {
	void * __ptr32 h;
	short count;


	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x18], eax;
// LINE 2301:
	__asm        mov    eax, [ebp-0x18];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x005620DA;
// LINE 2303:
	__asm        mov    count, 0;
// LINE 2304:
_T31:
	__asm        push   0;
	__asm        push   1;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatResFile::GetByIndex;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     _T99;
// LINE 2305:
	__asm        jmp    near ptr 0x0056210C;
// LINE 2306:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0xC], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    _T94;

	__asm        push   0x8C085;
	__asm        push   0x5BE944;
	__asm        push   0x902;
	__asm        push   0x5BE970;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2307:
_T94:
	__asm        jmp    _T31;
// LINE 2308:
_T99:
	__asm        mov    count, 0;
// LINE 2309:
_T9f:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x41524350;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatResFile::GetByIndex;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     _T103;
// LINE 2310:
	__asm        jmp    near ptr 0x00562176;
// LINE 2311:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x10], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    _Tfe;

	__asm        push   0x8C085;
	__asm        push   0x5BE994;
	__asm        push   0x907;
	__asm        push   0x5BE9C0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2312:
_Tfe:
	__asm        jmp    _T9f;
// LINE 2313:
_T103:
	__asm        mov    count, 0;
// LINE 2314:
_T109:
	__asm        push   0;
	__asm        push   1;
	__asm        push   0x41524C55;
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   FlatResFile::GetByIndex;
	__asm        mov    h, eax;
	__asm        cmp    h, 0;
	__asm        je     _T16d;
// LINE 2315:
	__asm        jmp    near ptr 0x005621E0;
// LINE 2316:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x14], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x3E8;
	__asm        jle    _T168;

	__asm        push   0x8C085;
	__asm        push   0x5BE9E4;
	__asm        push   0x90C;
	__asm        push   0x5BEA10;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2317:
_T168:
	__asm        jmp    _T109;
_T16d:
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    [ebp-0x4C], eax;
// LINE 2318:
_T175:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T18d;

	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T194;
_T18d:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T194:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1b1;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1b8;
_T1b1:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T1b8:
	__asm        jmp    near ptr 0x0056226C;

	__asm        jmp    near ptr 0x00562271;

	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T1e2;

	__asm        mov    eax, [ebp-0x1C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T1f6;

	__asm        jmp    _T1f1;

	__asm        jmp    _T1e7;
_T1e2:
	__asm        jmp    _T1f1;
_T1e7:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        jne    _T1f6;
_T1f1:
	__asm        jmp    _T2f9;
_T1f6:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T212;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T21e;

	__asm        jmp    _T21e;
_T212:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T21e;
_T21e:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        call   dword ptr [eax+4];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x3C], eax;
_T235:
	__asm        mov    eax, [ebp-0x3C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T2c2;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x28];
	__asm        cmp    [eax], ecx;
	__asm        jne    _T2b2;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x3C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x48];
	__asm        dec    word ptr [eax+4];
	__asm        mov    eax, [ebp-0x48];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jge    _T2ad;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x32;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2ad:
	__asm        jmp    _T2c7;
_T2b2:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T235;
_T2c2:
	__asm        jmp    _T2c7;
_T2c7:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x30], eax;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T2ef;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   dword ptr [eax+0x10];
	__asm        jmp    _T2ef;
_T2ef:
	__asm        jmp    near ptr 0x005623A3;

	__asm        jmp    _T175;
_T2f9:
	__asm        jmp    near ptr 0x005623AD;
// LINE 2320:
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    ecx, cCopterBody::fsList;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
// LINE 2321:
	__asm        jmp    near ptr 0x005623C8;
}

// FUNCTION: COPTER_D 0x005623cd
int32_t cCopterBodyCompareDrawOrder(void * __ptr32 p1, void * __ptr32 p2) {
// LINE 2325:
	__asm        mov    eax, p2;
	__asm        mov    eax, [eax];
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        mov    ecx, p1;
	__asm        mov    ecx, [ecx];
	__asm        movsx  ecx, word ptr [ecx+0x1A];
	__asm        cmp    eax, ecx;
	__asm        jge    _T2f;
// LINE 2326:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    _T39;
// LINE 2327:
	__asm        jmp    _T39;
// LINE 2328:
_T2f:
	__asm        mov    eax, 1;
	__asm        jmp    _T39;
// LINE 2329:
_T39:
}

// FUNCTION: COPTER_D 0x0056240b
void SwizzleCopterBodyPart(void * __ptr32 val, long size) {
	struct cCopterBody::Part* part;
	short debugbodypartsize;

// LINE 2334:
	__asm        mov    debugbodypartsize, 0x28;
// LINE 2335:
	__asm        cmp    size, 0x28;
	__asm        je     _T35;

	__asm        push   0x8C085;
	__asm        push   0x5BEA34;
	__asm        push   0x91F;
	__asm        push   0x5BEA60;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2336:
_T35:
	__asm        mov    eax, val;
	__asm        mov    part, eax;
// LINE 2337:
	__asm        mov    eax, part;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 2338:
	__asm        mov    eax, part;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 2339:
	__asm        mov    eax, part;
	__asm        add    eax, 0x1C;
	__asm        push   eax;
	__asm        call   SwizzleFloat;
	__asm        add    esp, 4;
// LINE 2340:
	__asm        mov    eax, part;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        call   SwizzleFloat;
	__asm        add    esp, 4;
// LINE 2341:
	__asm        mov    eax, part;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   SwizzleFloat;
	__asm        add    esp, 4;
// LINE 2343:
	__asm        jmp    near ptr 0x00562496;
}

// FUNCTION: COPTER_D 0x0056249b
void SwizzleAnimLookup(void * __ptr32 val, long size) {
	struct AnimLookup* al;

// LINE 2348:
	__asm        cmp    size, 8;
	__asm        je     _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5BEA84;
	__asm        push   0x92C;
	__asm        push   0x5BEAB0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2349:
_T2f:
	__asm        mov    eax, val;
	__asm        mov    al, eax;
// LINE 2350:
	__asm        mov    eax, al;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 2351:
	__asm        mov    eax, al;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 2353:
	__asm        jmp    near ptr 0x005624F0;
}



// Contribution: 2:00004718-0000472f Module: 189, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004730-00004733 Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593730
// GLOBAL: COPTER_D 0x00593730
// ??_7?$cArray@UAnimLookup@@@@6B@


// Contribution: 2:00004734-00004737 Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593734
// GLOBAL: COPTER_D 0x00593734
// ??_7?$cArray@UPart@cCopterBody@@@@6B@


// Contribution: 2:00004738-0000473b Module: 189, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593738
// GLOBAL: COPTER_D 0x00593738
// ??_7_cArray@@6B@


// Contribution: 2:00007170-000071af Module: 189, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00027628-00027ad3 Module: 189, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005be628
struct Rect standardAnimRect = { /* <data@0x005be628> */ };

// GLOBAL: COPTER_D 0x005be630
class cBList<cCopterBody>* cCopterBody::fsList = { /* <data@0x005be630> */ };

// GLOBAL: COPTER_D 0x005be634
short sTestPersonFrameNum = { /* <data@0x005be634> */ };



// Contribution: 3:00027ad4-00027aee Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bead4
// GLOBAL: COPTER_D 0x005bead4
// ??_C@_0BL@GEOL@couldn?8t?5get?5or?5make?5array?$AA@


// Contribution: 3:00027af0-00027b18 Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beaf0
// GLOBAL: COPTER_D 0x005beaf0
// ??_C@_0CJ@IDHA@about?5to?5create?5a?5very?5unfortuna@


// Contribution: 3:00027b1c-00027b57 Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb1c
// GLOBAL: COPTER_D 0x005beb1c
// ??_C@_0DM@LMC@array?5found?5on?5disk?5even?5though?5@


// Contribution: 3:00027b58-00027b8b Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb58
// GLOBAL: COPTER_D 0x005beb58
// ??_C@_0DE@OFFD@didn?8t?5find?5array?5on?5disk?9?9will?5@


// Contribution: 3:00027b8c-00027bab Module: 189, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005beb8c
// GLOBAL: COPTER_D 0x005beb8c
// ??_C@_0CA@LLAI@bad?5entry?5size?5of?5desired?5array?$AA@


// Contribution: 3:000a06c8-000a1991 Module: 189, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006376d0
struct TransformedInfo sTransformedInfo[200];

// GLOBAL: COPTER_D 0x00638670
struct cCopterBody::Part* cCopterBody::fsDrawOrderParts[200];

