// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055e830
cBList<class cCopterAnim>::cBList<class cCopterAnim>(void) cBList<cCopterAnim>::cBList<cCopterAnim>() {
// LINE 38:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x55E8AD;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+8], 0;
	__asm        jmp    near ptr 0x0055E869;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593654;
// LINE 39:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 40:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 41:
	__asm        jmp    near ptr 0x0055E892;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x0055E8B7;
_L44596:
	__asm        mov    ecx, this;
	__asm        add    ecx, 4;
	__asm        call   0x0055E8D0;
	__asm        ret;
_L44595:
	__asm        mov    eax, 0x596030;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055e9b0
cBList<class cCopterAnim>::~cBList<class cCopterAnim>(void) cBList<cCopterAnim>::~cBList<cCopterAnim>() {
// LINE 44:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x55EAA5;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593654;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 45:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055E9FF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055EA11;
	__asm        inc    dword ptr [ebp-0x18];
	__asm        jmp    near ptr 0x0055E9F6;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x18];
	__asm        je     near ptr 0x0055EA3A;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055EA3F;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055EA67;
	__asm        push   0x8C085;
	__asm        push   0x5BE27C;
	__asm        push   0x2D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 46:
	__asm        jmp    near ptr 0x0055EA6C;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x0055EA7D;
	__asm        jmp    near ptr 0x0055EAAF;
_L44659:
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0055EA95;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0055EA9C;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0055E8D0;
	__asm        ret;
_L44658:
	__asm        mov    eax, 0x596058;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055eac0
void cBList<class cCopterAnim>::Add(class cCopterAnim *) cBList<cCopterAnim>::Add(class cCopterAnim* thing) {
// LINE 119:
	__asm        jmp    near ptr 0x0055EAD1;
	__asm        mov    eax, thing;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jl     near ptr 0x0055EAF5;
	__asm        cmp    dword ptr [ebp-0x10], 0x20;
	__asm        jb     near ptr 0x0055EB0E;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0055EB26;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055EB2D;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0055EB4A;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055EB51;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0055EB56;
	__asm        jmp    near ptr 0x0055EB5B;
	__asm        jmp    near ptr 0x0055EB78;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055EB73;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055EB78;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055EB98;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0055EC2C;
	__asm        jmp    near ptr 0x0055EBAC;
	__asm        jmp    near ptr 0x0055EBA2;
	__asm        jmp    near ptr 0x0055EC2C;
	__asm        jmp    near ptr 0x0055EBAC;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0055EC2C;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055EBC8;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0055EBD4;
	__asm        jmp    near ptr 0x0055EBD4;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0055EBD4;
	__asm        jmp    near ptr 0x0055EBD9;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x30];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x0055EC27;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055EC10;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0055EC22;
	__asm        jmp    near ptr 0x0055EC1C;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0055EC22;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0055EC38;
	__asm        jmp    near ptr 0x0055EB60;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0055EC38;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0055EC5B;
	__asm        push   0x8C085;
	__asm        push   0x5BE2A0;
	__asm        push   0x77;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 120:
	__asm        cmp    thing, 0;
	__asm        je     near ptr 0x0055ECB5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0055EC7C;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x0055EC9E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, thing;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x0055EC99;
	__asm        jmp    near ptr 0x0055ECB5;
	__asm        jmp    near ptr 0x0055EC73;
	__asm        jmp    near ptr 0x0055ECBA;
	__asm        jmp    near ptr 0x0055ECB5;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        je     near ptr 0x0055ECBA;
	__asm        jmp    near ptr 0x0055ECF0;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, thing;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+8];
	__asm        jmp    near ptr 0x0055ECF0;
// LINE 121:
	__asm        jmp    near ptr 0x0055ECF5;
}

// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055ed00
void cBList<class cCopterAnim>::LoadAll(void) cBList<cCopterAnim>::LoadAll() {
	unsigned short fileOpened;
	void * __ptr32 h;
	short count;
	short numThings;

// LINE 180:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x55F1C0;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x140;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0055ED53;
	__asm        push   0x8C085;
	__asm        push   0x5BE188;
	__asm        push   0xB5;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x005674E0;
	__asm        add    esp, 4;
	__asm        mov    fileOpened, ax;
// LINE 183:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055ED9E;
	__asm        push   0x8C085;
	__asm        push   0x5BE1A8;
	__asm        push   0xB7;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 184:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0055EDCA;
	__asm        push   0x8C085;
	__asm        push   0x5BE168;
	__asm        push   0xB8;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
// LINE 185:
	__asm        push   0x55D950;
	__asm        push   8;
	__asm        push   0x41525050;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x00569095;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055EDF3;
	__asm        jmp    near ptr 0x0055EDF8;
// LINE 189:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055319A;
	__asm        mov    numThings, ax;
// LINE 190:
	__asm        mov    count, 1;
	__asm        jmp    near ptr 0x0055EE23;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, numThings;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0055F197;
// LINE 192:
	__asm        push   0x55E6F0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(count);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553452;
	__asm        mov    h, eax;
// LINE 193:
	__asm        cmp    h, 0;
	__asm        jne    near ptr 0x0055EE7D;
	__asm        push   0x8C085;
	__asm        push   0x5BE148;
	__asm        push   0xC1;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, h;
	__asm        mov    [ebp-0x148], eax;
// LINE 195:
	__asm        push   0x2C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        je     near ptr 0x0055EEE7;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0x593688;
	__asm        jmp    near ptr 0x0055EEB8;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    dword ptr [eax], 0x593658;
	__asm        jmp    near ptr 0x0055EECA;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0055EEE2;
_L45278:
	__asm        mov    ecx, [ebp-0x30];
	__asm        call   0x0055F2C0;
	__asm        ret;
	__asm        jmp    near ptr 0x0055EEEE;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055EF2A;
	__asm        push   0x8C085;
	__asm        push   0x5BE320;
	__asm        push   0xAA;
	__asm        push   0x5BE258;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0055EF5B;
	__asm        push   0x8C085;
	__asm        push   0x5BE310;
	__asm        push   0xAB;
	__asm        push   0x5BE258;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x005674E0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x134], ax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0055EFDF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    ebx, [eax+0x10];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x005536AE;
	__asm        cmp    ebx, eax;
	__asm        je     near ptr 0x0055EFFB;
	__asm        push   0x8C085;
	__asm        push   0x5BE2FC;
	__asm        push   0xB1;
	__asm        push   0x5BE258;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055360D;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    word ptr [eax+0x22], 0;
	__asm        lea    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x00553564;
	__asm        xor    eax, eax;
	__asm        mov    al, [ebp-0x130];
	__asm        cmp    eax, 0x10;
	__asm        jbe    near ptr 0x0055F05E;
	__asm        mov    byte ptr [ebp-0x130], 0x10;
	__asm        push   0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x130];
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
	__asm        mov    eax, [ebp-0x24];
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+0x1C], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        je     near ptr 0x0055F0A8;
	__asm        mov    eax, [ebp-0x24];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xC];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0055F0C4;
	__asm        push   0x8C085;
	__asm        push   0x5BE2D4;
	__asm        push   0xBC;
	__asm        push   0x5BE258;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   0x0055383A;
	__asm        test   dword ptr [ebp-0x134], 0xFFFF;
	__asm        je     near ptr 0x0055F11F;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    ecx, [ebp-0x138];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00554B04;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx+0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    word ptr [eax+0x22], 0;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   dword ptr [eax+4];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    ecx, [ebp-0x140];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x0055F180;
	__asm        jmp    near ptr 0x0055F192;
_L45274:
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
// LINE 196:
	__asm        jmp    near ptr 0x0055EE1F;
// LINE 197:
	__asm        test   reinterpret_cast<uint32_t>(fileOpened), 0xFFFF;
	__asm        je     near ptr 0x0055F1BB;
// LINE 198:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0xC];
	__asm        call   dword ptr [edx+0xC];
// LINE 199:
	__asm        jmp    near ptr 0x0055F1CA;
_L45273:
	__asm        mov    eax, 0x596080;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055fdd0
void cBList<cCopterBody>::~cBList<cCopterBody>() {
// LINE 44:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x55FEC5;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593650;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 45:
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055FE1F;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055FE31;
	__asm        inc    dword ptr [ebp-0x18];
	__asm        jmp    near ptr 0x0055FE16;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, [ebp-0x18];
	__asm        je     near ptr 0x0055FE5A;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x3D;
	__asm        push   0x59A254;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055FE5F;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055FE87;
	__asm        push   0x8C085;
	__asm        push   0x5BE27C;
	__asm        push   0x2D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 46:
	__asm        jmp    near ptr 0x0055FE8C;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x0055FE9D;
	__asm        jmp    near ptr 0x0055FECF;
_L45612:
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0055FEB5;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0055FEBC;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x0055FCB0;
	__asm        ret;
_L45611:
	__asm        mov    eax, 0x596110;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// Function in module: Bodydefs.obj
// FUNCTION: COPTER_D 0x0055fee0
void cBList<cCopterBody>::Add(class cCopterBody* thing) {
// LINE 119:
	__asm        jmp    near ptr 0x0055FEF1;
	__asm        mov    eax, thing;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x10], 8;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jl     near ptr 0x0055FF15;
	__asm        cmp    dword ptr [ebp-0x10], 0x20;
	__asm        jb     near ptr 0x0055FF2E;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x0055FF46;
	__asm        mov    eax, this;
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055FF4D;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x0055FF6A;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055FF71;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0055FF76;
	__asm        jmp    near ptr 0x0055FF7B;
	__asm        jmp    near ptr 0x0055FF98;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055FF93;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055FF98;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055FFB8;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x0056004C;
	__asm        jmp    near ptr 0x0055FFCC;
	__asm        jmp    near ptr 0x0055FFC2;
	__asm        jmp    near ptr 0x0056004C;
	__asm        jmp    near ptr 0x0055FFCC;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0056004C;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x0055FFE8;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0055FFF4;
	__asm        jmp    near ptr 0x0055FFF4;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x0055FFF4;
	__asm        jmp    near ptr 0x0055FFF9;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    eax, cl;
	__asm        mov    edx, [ebp-0x30];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x00560047;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00560030;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00560042;
	__asm        jmp    near ptr 0x0056003C;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x00560042;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00560058;
	__asm        jmp    near ptr 0x0055FF80;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x00560058;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0056007B;
	__asm        push   0x8C085;
	__asm        push   0x5BE2A0;
	__asm        push   0x77;
	__asm        push   0x5BE1EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 120:
	__asm        cmp    thing, 0;
	__asm        je     near ptr 0x005600D5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0056009C;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x005600BE;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, thing;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x005600B9;
	__asm        jmp    near ptr 0x005600D5;
	__asm        jmp    near ptr 0x00560093;
	__asm        jmp    near ptr 0x005600DA;
	__asm        jmp    near ptr 0x005600D5;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        je     near ptr 0x005600DA;
	__asm        jmp    near ptr 0x00560110;
	__asm        push   8;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, thing;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+8];
	__asm        jmp    near ptr 0x00560110;
// LINE 121:
	__asm        jmp    near ptr 0x00560115;
}

