// Module: Porttype.obj
// Source: C:\Copter\Source\X\Porttype.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00165a10-001661fc Module: 182, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00566a10
void GlobalToLocal(struct Point*) {
// LINE 8:
	asm( 
"	      00566a10    push ebp"
"	      00566a11    mov ebp,esp"
"	      00566a13    sub esp,8"
"	      00566a16    push ebx"
"	      00566a17    push esi"
"	      00566a18    push edi"
);
// LINE 10:
	asm( 
"	      00566a19    mov eax,[ebp+8]"
"	      00566a1c    movsx eax,word ptr [eax+2]"
"	      00566a20    mov [ebp-8],eax"
);
// LINE 11:
	asm( 
"	      00566a23    mov eax,[ebp+8]"
"	      00566a26    movsx eax,word ptr [eax]"
"	      00566a29    mov [ebp-4],eax"
);
// LINE 12:
	asm( 
"	      00566a2c    lea eax,[ebp-8]"
"	      00566a2f    push eax"
"	      00566a30    mov eax,ds:[5BF638h]"
"	      00566a35    push eax"
"	      00566a36    call dword ptr ds:[6C37F0h]"
);
// LINE 13:
	asm( 
"	      00566a3c    mov eax,[ebp-8]"
"	      00566a3f    mov ecx,[ebp+8]"
"	      00566a42    mov [ecx+2],ax"
);
// LINE 14:
	asm( 
"	      00566a46    mov eax,[ebp-4]"
"	      00566a49    mov ecx,[ebp+8]"
"	      00566a4c    mov [ecx],ax"
);
// LINE 15:
	asm( 
"	      00566a4f    jmp near ptr 00566A54h"
"	      00566a54    pop edi"
"	      00566a55    pop esi"
"	      00566a56    pop ebx"
"	      00566a57    leave"
"	      00566a58    ret"
);
}

// FUNCTION: COPTER_D 0x00566a59
void LocalToGlobal(struct Point*) {
// LINE 17:
	asm( 
"	      00566a59    push ebp"
"	      00566a5a    mov ebp,esp"
"	      00566a5c    sub esp,8"
"	      00566a5f    push ebx"
"	      00566a60    push esi"
"	      00566a61    push edi"
);
// LINE 19:
	asm( 
"	      00566a62    mov eax,[ebp+8]"
"	      00566a65    movsx eax,word ptr [eax+2]"
"	      00566a69    mov [ebp-8],eax"
);
// LINE 20:
	asm( 
"	      00566a6c    mov eax,[ebp+8]"
"	      00566a6f    movsx eax,word ptr [eax]"
"	      00566a72    mov [ebp-4],eax"
);
// LINE 21:
	asm( 
"	      00566a75    lea eax,[ebp-8]"
"	      00566a78    push eax"
"	      00566a79    mov eax,ds:[5BF638h]"
"	      00566a7e    push eax"
"	      00566a7f    call dword ptr ds:[6C37E0h]"
);
// LINE 22:
	asm( 
"	      00566a85    mov eax,[ebp-8]"
"	      00566a88    mov ecx,[ebp+8]"
"	      00566a8b    mov [ecx+2],ax"
);
// LINE 23:
	asm( 
"	      00566a8f    mov eax,[ebp-4]"
"	      00566a92    mov ecx,[ebp+8]"
"	      00566a95    mov [ecx],ax"
);
// LINE 24:
	asm( 
"	      00566a98    jmp near ptr 00566A9Dh"
"	      00566a9d    pop edi"
"	      00566a9e    pop esi"
"	      00566a9f    pop ebx"
"	      00566aa0    leave"
"	      00566aa1    ret"
);
}

// FUNCTION: COPTER_D 0x00566aa2
long TickCount() {
// LINE 26:
	asm( 
"	      00566aa2    push ebp"
"	      00566aa3    mov ebp,esp"
"	      00566aa5    push ebx"
"	      00566aa6    push esi"
"	      00566aa7    push edi"
);
// LINE 32:
	asm( 
"	      00566aa8    call dword ptr ds:[6C3614h]"
"	      00566aae    shl eax,2"
"	      00566ab1    lea eax,[eax+eax*2]"
"	      00566ab4    lea eax,[eax+eax*4]"
"	      00566ab7    mov ecx,3E8h"
"	      00566abc    sub edx,edx"
"	      00566abe    div ecx"
"	      00566ac0    jmp near ptr 00566AC5h"
);
// LINE 33:
	asm( 
"	      00566ac5    pop edi"
"	      00566ac6    pop esi"
"	      00566ac7    pop ebx"
"	      00566ac8    leave"
"	      00566ac9    ret"
);
}

// FUNCTION: COPTER_D 0x00566aca
short StringWidth(unsigned char *) {
// LINE 35:
	asm( 
"	      00566aca    push ebp"
"	      00566acb    mov ebp,esp"
"	      00566acd    sub esp,8"
"	      00566ad0    push ebx"
"	      00566ad1    push esi"
"	      00566ad2    push edi"
);
// LINE 37:
	asm( 
"	      00566ad3    lea eax,[ebp-8]"
"	      00566ad6    push eax"
"	      00566ad7    mov eax,[ebp+8]"
"	      00566ada    xor ecx,ecx"
"	      00566adc    mov cl,[eax]"
"	      00566ade    push ecx"
"	      00566adf    mov eax,[ebp+8]"
"	      00566ae2    inc eax"
"	      00566ae3    push eax"
"	      00566ae4    mov eax,ds:[5BF63Ch]"
"	      00566ae9    push eax"
"	      00566aea    call dword ptr ds:[6C35C4h]"
"	      00566af0    test eax,eax"
"	      00566af2    jne near ptr 00566B05h"
);
// LINE 38:
	asm( 
"	      00566af8    xor ax,ax"
"	      00566afb    jmp near ptr 00566B0Eh"
);
// LINE 39:
	asm( 
"	      00566b00    jmp near ptr 00566B0Eh"
);
// LINE 40:
	asm( 
"	      00566b05    mov ax,[ebp-8]"
"	      00566b09    jmp near ptr 00566B0Eh"
);
// LINE 41:
	asm( 
"	      00566b0e    pop edi"
"	      00566b0f    pop esi"
"	      00566b10    pop ebx"
"	      00566b11    leave"
"	      00566b12    ret"
);
}

// FUNCTION: COPTER_D 0x00566b13
void PtoCstr(unsigned char *) {
// LINE 44:
	asm( 
"	      00566b13    push ebp"
"	      00566b14    mov ebp,esp"
"	      00566b16    sub esp,4"
"	      00566b19    push ebx"
"	      00566b1a    push esi"
"	      00566b1b    push edi"
);
// LINE 45:
	asm( 
"	      00566b1c    mov eax,[ebp+8]"
"	      00566b1f    movzx ax,byte ptr [eax]"
"	      00566b23    mov [ebp-4],ax"
);
// LINE 46:
	asm( 
"	      00566b27    movsx eax,word ptr [ebp-4]"
"	      00566b2b    push eax"
"	      00566b2c    mov eax,[ebp+8]"
"	      00566b2f    push eax"
"	      00566b30    mov eax,[ebp+8]"
"	      00566b33    inc eax"
"	      00566b34    push eax"
"	      00566b35    call 00554B76h"
"	      00566b3a    add esp,0Ch"
);
// LINE 47:
	asm( 
"	      00566b3d    movsx eax,word ptr [ebp-4]"
"	      00566b41    mov ecx,[ebp+8]"
"	      00566b44    mov byte ptr [eax+ecx],0"
);
// LINE 48:
	asm( 
"	      00566b48    jmp near ptr 00566B4Dh"
"	      00566b4d    pop edi"
"	      00566b4e    pop esi"
"	      00566b4f    pop ebx"
"	      00566b50    leave"
"	      00566b51    ret"
);
}

// FUNCTION: COPTER_D 0x00566b52
void CtoPstr(char *) {
// LINE 52:
	asm( 
"	      00566b52    push ebp"
"	      00566b53    mov ebp,esp"
"	      00566b55    sub esp,4"
"	      00566b58    push ebx"
"	      00566b59    push esi"
"	      00566b5a    push edi"
);
// LINE 53:
	asm( 
"	      00566b5b    mov eax,[ebp+8]"
"	      00566b5e    push eax"
"	      00566b5f    call 0056ABE0h"
"	      00566b64    add esp,4"
"	      00566b67    mov [ebp-4],ax"
);
// LINE 54:
	asm( 
"	      00566b6b    movsx eax,word ptr [ebp-4]"
"	      00566b6f    cmp eax,0FFh"
"	      00566b74    jle near ptr 00566B80h"
"	      00566b7a    mov word ptr [ebp-4],0FFh"
);
// LINE 55:
	asm( 
"	      00566b80    movsx eax,word ptr [ebp-4]"
"	      00566b84    push eax"
"	      00566b85    mov eax,[ebp+8]"
"	      00566b88    inc eax"
"	      00566b89    push eax"
"	      00566b8a    mov eax,[ebp+8]"
"	      00566b8d    push eax"
"	      00566b8e    call 00554B76h"
"	      00566b93    add esp,0Ch"
);
// LINE 56:
	asm( 
"	      00566b96    mov al,[ebp-4]"
"	      00566b99    mov ecx,[ebp+8]"
"	      00566b9c    mov [ecx],al"
);
// LINE 57:
	asm( 
"	      00566b9e    jmp near ptr 00566BA3h"
"	      00566ba3    pop edi"
"	      00566ba4    pop esi"
"	      00566ba5    pop ebx"
"	      00566ba6    leave"
"	      00566ba7    ret"
);
}

// FUNCTION: COPTER_D 0x00566ba8
void OffsetRect(struct Rect*, short, short) {
// LINE 60:
	asm( 
"	      00566ba8    push ebp"
"	      00566ba9    mov ebp,esp"
"	      00566bab    push ebx"
"	      00566bac    push esi"
"	      00566bad    push edi"
);
// LINE 61:
	asm( 
"	      00566bae    mov eax,[ebp+8]"
"	      00566bb1    movsx eax,word ptr [eax]"
"	      00566bb4    movsx ecx,word ptr [ebp+10h]"
"	      00566bb8    add eax,ecx"
"	      00566bba    mov ecx,[ebp+8]"
"	      00566bbd    mov [ecx],ax"
);
// LINE 62:
	asm( 
"	      00566bc0    mov eax,[ebp+8]"
"	      00566bc3    movsx eax,word ptr [eax+4]"
"	      00566bc7    movsx ecx,word ptr [ebp+10h]"
"	      00566bcb    add eax,ecx"
"	      00566bcd    mov ecx,[ebp+8]"
"	      00566bd0    mov [ecx+4],ax"
);
// LINE 63:
	asm( 
"	      00566bd4    mov eax,[ebp+8]"
"	      00566bd7    movsx eax,word ptr [eax+2]"
"	      00566bdb    movsx ecx,word ptr [ebp+0Ch]"
"	      00566bdf    add eax,ecx"
"	      00566be1    mov ecx,[ebp+8]"
"	      00566be4    mov [ecx+2],ax"
);
// LINE 64:
	asm( 
"	      00566be8    mov eax,[ebp+8]"
"	      00566beb    movsx eax,word ptr [eax+6]"
"	      00566bef    movsx ecx,word ptr [ebp+0Ch]"
"	      00566bf3    add eax,ecx"
"	      00566bf5    mov ecx,[ebp+8]"
"	      00566bf8    mov [ecx+6],ax"
);
// LINE 65:
	asm( 
"	      00566bfc    jmp near ptr 00566C01h"
"	      00566c01    pop edi"
"	      00566c02    pop esi"
"	      00566c03    pop ebx"
"	      00566c04    leave"
"	      00566c05    ret"
);
}

// FUNCTION: COPTER_D 0x00566c06
unsigned short SectRect(struct Rect*, struct Rect*, struct Rect*) {
// LINE 74:
	asm( 
"	      00566c06    push ebp"
"	      00566c07    mov ebp,esp"
"	      00566c09    sub esp,34h"
"	      00566c0c    push ebx"
"	      00566c0d    push esi"
"	      00566c0e    push edi"
);
// LINE 76:
	asm( 
"	      00566c0f    mov eax,[ebp+8]"
"	      00566c12    movsx eax,word ptr [eax]"
"	      00566c15    mov [ebp-10h],eax"
"	      00566c18    mov eax,[ebp+8]"
"	      00566c1b    movsx eax,word ptr [eax+4]"
"	      00566c1f    mov [ebp-8],eax"
"	      00566c22    mov eax,[ebp+8]"
"	      00566c25    movsx eax,word ptr [eax+2]"
"	      00566c29    mov [ebp-14h],eax"
"	      00566c2c    mov eax,[ebp+8]"
"	      00566c2f    movsx eax,word ptr [eax+6]"
"	      00566c33    mov [ebp-0Ch],eax"
);
// LINE 77:
	asm( 
"	      00566c36    mov eax,[ebp+0Ch]"
"	      00566c39    movsx eax,word ptr [eax]"
"	      00566c3c    mov [ebp-30h],eax"
"	      00566c3f    mov eax,[ebp+0Ch]"
"	      00566c42    movsx eax,word ptr [eax+4]"
"	      00566c46    mov [ebp-28h],eax"
"	      00566c49    mov eax,[ebp+0Ch]"
"	      00566c4c    movsx eax,word ptr [eax+2]"
"	      00566c50    mov [ebp-34h],eax"
"	      00566c53    mov eax,[ebp+0Ch]"
"	      00566c56    movsx eax,word ptr [eax+6]"
"	      00566c5a    mov [ebp-2Ch],eax"
);
// LINE 78:
	asm( 
"	      00566c5d    lea eax,[ebp-34h]"
"	      00566c60    push eax"
"	      00566c61    lea eax,[ebp-14h]"
"	      00566c64    push eax"
"	      00566c65    lea eax,[ebp-24h]"
"	      00566c68    push eax"
"	      00566c69    call dword ptr ds:[6C37F4h]"
"	      00566c6f    mov [ebp-4],ax"
);
// LINE 79:
	asm( 
"	      00566c73    mov ecx,[ebp-20h]"
"	      00566c76    mov edx,[ebp+10h]"
"	      00566c79    mov [edx],cx"
"	      00566c7c    mov ecx,[ebp-18h]"
"	      00566c7f    mov edx,[ebp+10h]"
"	      00566c82    mov [edx+4],cx"
"	      00566c86    mov ecx,[ebp-24h]"
"	      00566c89    mov edx,[ebp+10h]"
"	      00566c8c    mov [edx+2],cx"
"	      00566c90    mov ecx,[ebp-1Ch]"
"	      00566c93    mov edx,[ebp+10h]"
"	      00566c96    mov [edx+6],cx"
);
// LINE 80:
	asm( 
"	      00566c9a    mov ax,[ebp-4]"
"	      00566c9e    jmp near ptr 00566CA3h"
);
// LINE 81:
	asm( 
"	      00566ca3    pop edi"
"	      00566ca4    pop esi"
"	      00566ca5    pop ebx"
"	      00566ca6    leave"
"	      00566ca7    ret"
);
}

// FUNCTION: COPTER_D 0x00566ca8
void SetPortDC(void * __ptr32) {
// LINE 103:
	asm( 
"	      00566ca8    push ebp"
"	      00566ca9    mov ebp,esp"
"	      00566cab    push ebx"
"	      00566cac    push esi"
"	      00566cad    push edi"
);
// LINE 104:
	asm( 
"	      00566cae    call 00566CCFh"
);
// LINE 105:
	asm( 
"	      00566cb3    mov eax,[ebp+8]"
"	      00566cb6    mov ds:[5BF63Ch],eax"
);
// LINE 106:
	asm( 
"	      00566cbb    mov dword ptr ds:[5BF638h],0"
);
// LINE 107:
	asm( 
"	      00566cc5    jmp near ptr 00566CCAh"
"	      00566cca    pop edi"
"	      00566ccb    pop esi"
"	      00566ccc    pop ebx"
"	      00566ccd    leave"
"	      00566cce    ret"
);
}

// FUNCTION: COPTER_D 0x00566ccf
void CleanUpPort() {
// LINE 84:
	asm( 
"	      00566ccf    push ebp"
"	      00566cd0    mov ebp,esp"
"	      00566cd2    push ebx"
"	      00566cd3    push esi"
"	      00566cd4    push edi"
);
// LINE 85:
	asm( 
"	      00566cd5    cmp dword ptr ds:[5BF638h],0"
"	      00566cdc    je near ptr 00566D1Ah"
);
// LINE 87:
	asm( 
"	      00566ce2    cmp dword ptr ds:[5BF63Ch],0"
"	      00566ce9    jne near ptr 00566D08h"
"	      00566cef    push 8C085h"
"	      00566cf4    push 5BF640h"
"	      00566cf9    push 57h"
"	      00566cfb    push 5BF664h"
"	      00566d00    call 00554F30h"
"	      00566d05    add esp,10h"
);
// LINE 88:
	asm( 
"	      00566d08    mov eax,ds:[5BF63Ch]"
"	      00566d0d    push eax"
"	      00566d0e    mov eax,ds:[5BF638h]"
"	      00566d13    push eax"
"	      00566d14    call dword ptr ds:[6C384Ch]"
);
// LINE 90:
	asm( 
"	      00566d1a    mov dword ptr ds:[5BF638h],0"
);
// LINE 91:
	asm( 
"	      00566d24    mov dword ptr ds:[5BF63Ch],0"
);
// LINE 92:
	asm( 
"	      00566d2e    jmp near ptr 00566D33h"
"	      00566d33    pop edi"
"	      00566d34    pop esi"
"	      00566d35    pop ebx"
"	      00566d36    leave"
"	      00566d37    ret"
);
}

// FUNCTION: COPTER_D 0x00566d38
void SetPort(void * __ptr32) {
// LINE 111:
	asm( 
"	      00566d38    push ebp"
"	      00566d39    mov ebp,esp"
"	      00566d3b    push ebx"
"	      00566d3c    push esi"
"	      00566d3d    push edi"
);
// LINE 112:
	asm( 
"	      00566d3e    call 00566CCFh"
);
// LINE 113:
	asm( 
"	      00566d43    mov eax,[ebp+8]"
"	      00566d46    mov ds:[5BF638h],eax"
);
// LINE 114:
	asm( 
"	      00566d4b    mov eax,ds:[5BF638h]"
"	      00566d50    push eax"
"	      00566d51    call dword ptr ds:[6C3850h]"
"	      00566d57    mov ds:[5BF63Ch],eax"
);
// LINE 115:
	asm( 
"	      00566d5c    jmp near ptr 00566D61h"
"	      00566d61    pop edi"
"	      00566d62    pop esi"
"	      00566d63    pop ebx"
"	      00566d64    leave"
"	      00566d65    ret"
);
}

// FUNCTION: COPTER_D 0x00566d66
void SetPort(struct GrafPtr) {
// LINE 119:
	asm( 
"	      00566d66    push ebp"
"	      00566d67    mov ebp,esp"
"	      00566d69    push ebx"
"	      00566d6a    push esi"
"	      00566d6b    push edi"
);
// LINE 120:
	asm( 
"	      00566d6c    call 00566CCFh"
);
// LINE 121:
	asm( 
"	      00566d71    cmp dword ptr [ebp+8],0"
"	      00566d75    je near ptr 00566D8Ch"
"	      00566d7b    mov eax,[ebp+8]"
"	      00566d7e    push eax"
"	      00566d7f    call 00566D38h"
"	      00566d84    add esp,4"
);
// LINE 122:
	asm( 
"	      00566d87    jmp near ptr 00566D9Dh"
);
// LINE 123:
	asm( 
"	      00566d8c    mov eax,[ebp+8]"
"	      00566d8f    mov ecx,[ebp+0Ch]"
"	      00566d92    mov ds:[5BF638h],eax"
"	      00566d97    mov ds:[5BF63Ch],ecx"
);
// LINE 126:
	asm( 
"	      00566d9d    jmp near ptr 00566DA2h"
"	      00566da2    pop edi"
"	      00566da3    pop esi"
"	      00566da4    pop ebx"
"	      00566da5    leave"
"	      00566da6    ret"
);
}

// FUNCTION: COPTER_D 0x00566da7
void GetPort(struct GrafPtr*) {
// LINE 130:
	asm( 
"	      00566da7    push ebp"
"	      00566da8    mov ebp,esp"
"	      00566daa    push ebx"
"	      00566dab    push esi"
"	      00566dac    push edi"
);
// LINE 131:
	asm( 
"	      00566dad    mov eax,ds:[5BF638h]"
"	      00566db2    mov ecx,ds:[5BF63Ch]"
"	      00566db8    mov edx,[ebp+8]"
"	      00566dbb    mov [edx],eax"
"	      00566dbd    mov [edx+4],ecx"
);
// LINE 132:
	asm( 
"	      00566dc0    jmp near ptr 00566DC5h"
"	      00566dc5    pop edi"
"	      00566dc6    pop esi"
"	      00566dc7    pop ebx"
"	      00566dc8    leave"
"	      00566dc9    ret"
);
}

// FUNCTION: COPTER_D 0x00566dca
void EraseRect(struct tagRECT*) {
// LINE 135:
	asm( 
"	      00566dca    push ebp"
"	      00566dcb    mov ebp,esp"
"	      00566dcd    sub esp,18h"
"	      00566dd0    push ebx"
"	      00566dd1    push esi"
"	      00566dd2    push edi"
);
// LINE 136:
	asm( 
"	      00566dd3    cmp dword ptr ds:[5BF63Ch],0"
"	      00566dda    jne near ptr 00566DFCh"
"	      00566de0    push 8C085h"
"	      00566de5    push 5BF684h"
"	      00566dea    push 88h"
"	      00566def    push 5BF68Ch"
"	      00566df4    call 00554F30h"
"	      00566df9    add esp,10h"
);
// LINE 138:
	asm( 
"	      00566dfc    mov eax,[ebp+8]"
"	      00566dff    movsx eax,word ptr [eax+4]"
"	      00566e03    mov [ebp-0Ch],eax"
"	      00566e06    mov eax,[ebp+8]"
"	      00566e09    movsx eax,word ptr [eax+0Ch]"
"	      00566e0d    mov [ebp-4],eax"
"	      00566e10    mov eax,[ebp+8]"
"	      00566e13    movsx eax,word ptr [eax]"
"	      00566e16    mov [ebp-10h],eax"
"	      00566e19    mov eax,[ebp+8]"
"	      00566e1c    movsx eax,word ptr [eax+8]"
"	      00566e20    mov [ebp-8],eax"
);
// LINE 139:
	asm( 
"	      00566e23    mov eax,ds:[5BF63Ch]"
"	      00566e28    push eax"
"	      00566e29    call dword ptr ds:[6C3548h]"
"	      00566e2f    mov [ebp-18h],eax"
);
// LINE 140:
	asm( 
"	      00566e32    mov eax,[ebp-18h]"
"	      00566e35    push eax"
"	      00566e36    call dword ptr ds:[6C35D0h]"
"	      00566e3c    mov [ebp-14h],eax"
);
// LINE 141:
	asm( 
"	      00566e3f    mov eax,[ebp-14h]"
"	      00566e42    push eax"
"	      00566e43    lea eax,[ebp-10h]"
"	      00566e46    push eax"
"	      00566e47    mov eax,ds:[5BF63Ch]"
"	      00566e4c    push eax"
"	      00566e4d    call dword ptr ds:[6C3888h]"
);
// LINE 142:
	asm( 
"	      00566e53    mov eax,[ebp-14h]"
"	      00566e56    push eax"
"	      00566e57    call dword ptr ds:[6C358Ch]"
);
// LINE 143:
	asm( 
"	      00566e5d    jmp near ptr 00566E62h"
"	      00566e62    pop edi"
"	      00566e63    pop esi"
"	      00566e64    pop ebx"
"	      00566e65    leave"
"	      00566e66    ret"
);
}

// FUNCTION: COPTER_D 0x00566e67
void EraseRect(struct Rect*) {
// LINE 146:
	asm( 
"	      00566e67    push ebp"
"	      00566e68    mov ebp,esp"
"	      00566e6a    sub esp,10h"
"	      00566e6d    push ebx"
"	      00566e6e    push esi"
"	      00566e6f    push edi"
);
// LINE 148:
	asm( 
"	      00566e70    mov eax,[ebp+8]"
"	      00566e73    movsx eax,word ptr [eax]"
"	      00566e76    mov [ebp-0Ch],eax"
"	      00566e79    mov eax,[ebp+8]"
"	      00566e7c    movsx eax,word ptr [eax+4]"
"	      00566e80    mov [ebp-4],eax"
"	      00566e83    mov eax,[ebp+8]"
"	      00566e86    movsx eax,word ptr [eax+2]"
"	      00566e8a    mov [ebp-10h],eax"
"	      00566e8d    mov eax,[ebp+8]"
"	      00566e90    movsx eax,word ptr [eax+6]"
"	      00566e94    mov [ebp-8],eax"
);
// LINE 149:
	asm( 
"	      00566e97    lea eax,[ebp-10h]"
"	      00566e9a    push eax"
"	      00566e9b    call 00566DCAh"
"	      00566ea0    add esp,4"
);
// LINE 150:
	asm( 
"	      00566ea3    jmp near ptr 00566EA8h"
"	      00566ea8    pop edi"
"	      00566ea9    pop esi"
"	      00566eaa    pop ebx"
"	      00566eab    leave"
"	      00566eac    ret"
);
}

// FUNCTION: COPTER_D 0x00566ead
void FrameRect(struct Rect*) {
// LINE 153:
	asm( 
"	      00566ead    push ebp"
"	      00566eae    mov ebp,esp"
"	      00566eb0    sub esp,18h"
"	      00566eb3    push ebx"
"	      00566eb4    push esi"
"	      00566eb5    push edi"
);
// LINE 154:
	asm( 
"	      00566eb6    cmp dword ptr ds:[5BF63Ch],0"
"	      00566ebd    jne near ptr 00566EDFh"
"	      00566ec3    push 8C085h"
"	      00566ec8    push 5BF6ACh"
"	      00566ecd    push 9Ah"
"	      00566ed2    push 5BF6B4h"
"	      00566ed7    call 00554F30h"
"	      00566edc    add esp,10h"
);
// LINE 156:
	asm( 
"	      00566edf    mov eax,[ebp+8]"
"	      00566ee2    movsx eax,word ptr [eax]"
"	      00566ee5    mov [ebp-0Ch],eax"
"	      00566ee8    mov eax,[ebp+8]"
"	      00566eeb    movsx eax,word ptr [eax+4]"
"	      00566eef    mov [ebp-4],eax"
"	      00566ef2    mov eax,[ebp+8]"
"	      00566ef5    movsx eax,word ptr [eax+2]"
"	      00566ef9    mov [ebp-10h],eax"
"	      00566efc    mov eax,[ebp+8]"
"	      00566eff    movsx eax,word ptr [eax+6]"
"	      00566f03    mov [ebp-8],eax"
);
// LINE 157:
	asm( 
"	      00566f06    mov dword ptr [ebp-18h],0"
);
// LINE 158:
	asm( 
"	      00566f0d    mov eax,[ebp-18h]"
"	      00566f10    push eax"
"	      00566f11    call dword ptr ds:[6C35D0h]"
"	      00566f17    mov [ebp-14h],eax"
);
// LINE 159:
	asm( 
"	      00566f1a    mov eax,[ebp-14h]"
"	      00566f1d    push eax"
"	      00566f1e    lea eax,[ebp-10h]"
"	      00566f21    push eax"
"	      00566f22    mov eax,ds:[5BF63Ch]"
"	      00566f27    push eax"
"	      00566f28    call dword ptr ds:[6C37FCh]"
);
// LINE 160:
	asm( 
"	      00566f2e    mov eax,[ebp-14h]"
"	      00566f31    push eax"
"	      00566f32    call dword ptr ds:[6C358Ch]"
);
// LINE 161:
	asm( 
"	      00566f38    jmp near ptr 00566F3Dh"
"	      00566f3d    pop edi"
"	      00566f3e    pop esi"
"	      00566f3f    pop ebx"
"	      00566f40    leave"
"	      00566f41    ret"
);
}

// FUNCTION: COPTER_D 0x00566f42
void SetRect(struct Rect*, short, short, short, short) {
// LINE 164:
	asm( 
"	      00566f42    push ebp"
"	      00566f43    mov ebp,esp"
"	      00566f45    push ebx"
"	      00566f46    push esi"
"	      00566f47    push edi"
);
// LINE 165:
	asm( 
"	      00566f48    mov ax,[ebp+0Ch]"
"	      00566f4c    mov ecx,[ebp+8]"
"	      00566f4f    mov [ecx+2],ax"
);
// LINE 166:
	asm( 
"	      00566f53    mov ax,[ebp+10h]"
"	      00566f57    mov ecx,[ebp+8]"
"	      00566f5a    mov [ecx],ax"
);
// LINE 167:
	asm( 
"	      00566f5d    mov ax,[ebp+14h]"
"	      00566f61    mov ecx,[ebp+8]"
"	      00566f64    mov [ecx+6],ax"
);
// LINE 168:
	asm( 
"	      00566f68    mov ax,[ebp+18h]"
"	      00566f6c    mov ecx,[ebp+8]"
"	      00566f6f    mov [ecx+4],ax"
);
// LINE 169:
	asm( 
"	      00566f73    jmp near ptr 00566F78h"
"	      00566f78    pop edi"
"	      00566f79    pop esi"
"	      00566f7a    pop ebx"
"	      00566f7b    leave"
"	      00566f7c    ret"
);
}

// FUNCTION: COPTER_D 0x00566f7d
void UnionRect(struct Rect*, struct Rect*, struct Rect*) {
// LINE 172:
	asm( 
"	      00566f7d    push ebp"
"	      00566f7e    mov ebp,esp"
"	      00566f80    push ebx"
"	      00566f81    push esi"
"	      00566f82    push edi"
);
// LINE 173:
	asm( 
"	      00566f83    mov eax,[ebp+0Ch]"
"	      00566f86    movsx eax,word ptr [eax]"
"	      00566f89    mov ecx,[ebp+8]"
"	      00566f8c    movsx ecx,word ptr [ecx]"
"	      00566f8f    cmp eax,ecx"
"	      00566f91    jle near ptr 00566FA8h"
);
// LINE 174:
	asm( 
"	      00566f97    mov eax,[ebp+8]"
"	      00566f9a    mov ax,[eax]"
"	      00566f9d    mov ecx,[ebp+10h]"
"	      00566fa0    mov [ecx],ax"
);
// LINE 175:
	asm( 
"	      00566fa3    jmp near ptr 00566FB4h"
);
// LINE 176:
	asm( 
"	      00566fa8    mov eax,[ebp+0Ch]"
"	      00566fab    mov ax,[eax]"
"	      00566fae    mov ecx,[ebp+10h]"
"	      00566fb1    mov [ecx],ax"
);
// LINE 178:
	asm( 
"	      00566fb4    mov eax,[ebp+0Ch]"
"	      00566fb7    movsx eax,word ptr [eax+2]"
"	      00566fbb    mov ecx,[ebp+8]"
"	      00566fbe    movsx ecx,word ptr [ecx+2]"
"	      00566fc2    cmp eax,ecx"
"	      00566fc4    jle near ptr 00566FDDh"
);
// LINE 179:
	asm( 
"	      00566fca    mov eax,[ebp+8]"
"	      00566fcd    mov ax,[eax+2]"
"	      00566fd1    mov ecx,[ebp+10h]"
"	      00566fd4    mov [ecx+2],ax"
);
// LINE 180:
	asm( 
"	      00566fd8    jmp near ptr 00566FEBh"
);
// LINE 181:
	asm( 
"	      00566fdd    mov eax,[ebp+0Ch]"
"	      00566fe0    mov ax,[eax+2]"
"	      00566fe4    mov ecx,[ebp+10h]"
"	      00566fe7    mov [ecx+2],ax"
);
// LINE 183:
	asm( 
"	      00566feb    mov eax,[ebp+0Ch]"
"	      00566fee    movsx eax,word ptr [eax+6]"
"	      00566ff2    mov ecx,[ebp+8]"
"	      00566ff5    movsx ecx,word ptr [ecx+6]"
"	      00566ff9    cmp eax,ecx"
"	      00566ffb    jge near ptr 00567014h"
);
// LINE 184:
	asm( 
"	      00567001    mov eax,[ebp+8]"
"	      00567004    mov ax,[eax+6]"
"	      00567008    mov ecx,[ebp+10h]"
"	      0056700b    mov [ecx+6],ax"
);
// LINE 185:
	asm( 
"	      0056700f    jmp near ptr 00567022h"
);
// LINE 186:
	asm( 
"	      00567014    mov eax,[ebp+0Ch]"
"	      00567017    mov ax,[eax+6]"
"	      0056701b    mov ecx,[ebp+10h]"
"	      0056701e    mov [ecx+6],ax"
);
// LINE 188:
	asm( 
"	      00567022    mov eax,[ebp+0Ch]"
"	      00567025    movsx eax,word ptr [eax+4]"
"	      00567029    mov ecx,[ebp+8]"
"	      0056702c    movsx ecx,word ptr [ecx+4]"
"	      00567030    cmp eax,ecx"
"	      00567032    jge near ptr 0056704Bh"
);
// LINE 189:
	asm( 
"	      00567038    mov eax,[ebp+8]"
"	      0056703b    mov ax,[eax+4]"
"	      0056703f    mov ecx,[ebp+10h]"
"	      00567042    mov [ecx+4],ax"
);
// LINE 190:
	asm( 
"	      00567046    jmp near ptr 00567059h"
);
// LINE 191:
	asm( 
"	      0056704b    mov eax,[ebp+0Ch]"
"	      0056704e    mov ax,[eax+4]"
"	      00567052    mov ecx,[ebp+10h]"
"	      00567055    mov [ecx+4],ax"
);
// LINE 192:
	asm( 
"	      00567059    jmp near ptr 0056705Eh"
"	      0056705e    pop edi"
"	      0056705f    pop esi"
"	      00567060    pop ebx"
"	      00567061    leave"
"	      00567062    ret"
);
}

// FUNCTION: COPTER_D 0x00567063
unsigned short EqualRect(struct Rect*, struct Rect*) {
// LINE 195:
	asm( 
"	      00567063    push ebp"
"	      00567064    mov ebp,esp"
"	      00567066    push ebx"
"	      00567067    push esi"
"	      00567068    push edi"
);
// LINE 196:
	asm( 
"	      00567069    mov eax,[ebp+0Ch]"
"	      0056706c    mov ecx,[ebp+8]"
"	      0056706f    mov ecx,[ecx]"
"	      00567071    cmp [eax],ecx"
"	      00567073    je near ptr 00567081h"
"	      00567079    xor ax,ax"
"	      0056707c    jmp near ptr 005670A4h"
);
// LINE 197:
	asm( 
"	      00567081    mov eax,[ebp+0Ch]"
"	      00567084    mov ecx,[ebp+8]"
"	      00567087    mov ecx,[ecx+4]"
"	      0056708a    cmp [eax+4],ecx"
"	      0056708d    je near ptr 0056709Bh"
"	      00567093    xor ax,ax"
"	      00567096    jmp near ptr 005670A4h"
);
// LINE 198:
	asm( 
"	      0056709b    mov ax,1"
"	      0056709f    jmp near ptr 005670A4h"
);
// LINE 199:
	asm( 
"	      005670a4    pop edi"
"	      005670a5    pop esi"
"	      005670a6    pop ebx"
"	      005670a7    leave"
"	      005670a8    ret"
);
}

// FUNCTION: COPTER_D 0x005670a9
void InsetRect(struct Rect*, short, short) {
// LINE 202:
	asm( 
"	      005670a9    push ebp"
"	      005670aa    mov ebp,esp"
"	      005670ac    push ebx"
"	      005670ad    push esi"
"	      005670ae    push edi"
);
// LINE 203:
	asm( 
"	      005670af    mov eax,[ebp+8]"
"	      005670b2    movsx eax,word ptr [eax]"
"	      005670b5    movsx ecx,word ptr [ebp+10h]"
"	      005670b9    add eax,ecx"
"	      005670bb    mov ecx,[ebp+8]"
"	      005670be    mov [ecx],ax"
);
// LINE 204:
	asm( 
"	      005670c1    mov eax,[ebp+8]"
"	      005670c4    movsx eax,word ptr [eax+4]"
"	      005670c8    movsx ecx,word ptr [ebp+10h]"
"	      005670cc    sub eax,ecx"
"	      005670ce    mov ecx,[ebp+8]"
"	      005670d1    mov [ecx+4],ax"
);
// LINE 205:
	asm( 
"	      005670d5    mov eax,[ebp+8]"
"	      005670d8    movsx eax,word ptr [eax+2]"
"	      005670dc    movsx ecx,word ptr [ebp+0Ch]"
"	      005670e0    add eax,ecx"
"	      005670e2    mov ecx,[ebp+8]"
"	      005670e5    mov [ecx+2],ax"
);
// LINE 206:
	asm( 
"	      005670e9    mov eax,[ebp+8]"
"	      005670ec    movsx eax,word ptr [eax+6]"
"	      005670f0    movsx ecx,word ptr [ebp+0Ch]"
"	      005670f4    sub eax,ecx"
"	      005670f6    mov ecx,[ebp+8]"
"	      005670f9    mov [ecx+6],ax"
);
// LINE 207:
	asm( 
"	      005670fd    jmp near ptr 00567102h"
"	      00567102    pop edi"
"	      00567103    pop esi"
"	      00567104    pop ebx"
"	      00567105    leave"
"	      00567106    ret"
);
}

// FUNCTION: COPTER_D 0x00567107
unsigned short PtInRect(struct Point, struct Rect*) {
// LINE 210:
	asm( 
"	      00567107    push ebp"
"	      00567108    mov ebp,esp"
"	      0056710a    push ebx"
"	      0056710b    push esi"
"	      0056710c    push edi"
);
// LINE 211:
	asm( 
"	      0056710d    mov eax,[ebp+0Ch]"
"	      00567110    movsx eax,word ptr [eax+2]"
"	      00567114    movsx ecx,word ptr [ebp+0Ah]"
"	      00567118    cmp eax,ecx"
"	      0056711a    jg near ptr 00567158h"
"	      00567120    mov eax,[ebp+0Ch]"
"	      00567123    movsx eax,word ptr [eax+6]"
"	      00567127    movsx ecx,word ptr [ebp+0Ah]"
"	      0056712b    cmp eax,ecx"
"	      0056712d    jle near ptr 00567158h"
"	      00567133    mov eax,[ebp+0Ch]"
"	      00567136    movsx eax,word ptr [eax]"
"	      00567139    movsx ecx,word ptr [ebp+8]"
"	      0056713d    cmp eax,ecx"
"	      0056713f    jg near ptr 00567158h"
"	      00567145    mov eax,[ebp+0Ch]"
"	      00567148    movsx eax,word ptr [eax+4]"
"	      0056714c    movsx ecx,word ptr [ebp+8]"
"	      00567150    cmp eax,ecx"
"	      00567152    jg near ptr 00567165h"
"	      00567158    xor ax,ax"
"	      0056715b    jmp near ptr 0056716Eh"
);
// LINE 212:
	asm( 
"	      00567160    jmp near ptr 0056716Eh"
"	      00567165    mov ax,1"
"	      00567169    jmp near ptr 0056716Eh"
);
// LINE 213:
	asm( 
"	      0056716e    pop edi"
"	      0056716f    pop esi"
"	      00567170    pop ebx"
"	      00567171    leave"
"	      00567172    ret"
);
}

// FUNCTION: COPTER_D 0x00567173
unsigned short EmptyRect(struct Rect*) {
// LINE 216:
	asm( 
"	      00567173    push ebp"
"	      00567174    mov ebp,esp"
"	      00567176    push ebx"
"	      00567177    push esi"
"	      00567178    push edi"
);
// LINE 217:
	asm( 
"	      00567179    mov eax,[ebp+8]"
"	      0056717c    movsx eax,word ptr [eax+4]"
"	      00567180    mov ecx,[ebp+8]"
"	      00567183    movsx ecx,word ptr [ecx]"
"	      00567186    cmp eax,ecx"
"	      00567188    jle near ptr 005671A4h"
"	      0056718e    mov eax,[ebp+8]"
"	      00567191    movsx eax,word ptr [eax+2]"
"	      00567195    mov ecx,[ebp+8]"
"	      00567198    movsx ecx,word ptr [ecx+6]"
"	      0056719c    cmp eax,ecx"
"	      0056719e    jl near ptr 005671ADh"
"	      005671a4    mov ax,1"
"	      005671a8    jmp near ptr 005671B5h"
);
// LINE 218:
	asm( 
"	      005671ad    xor ax,ax"
"	      005671b0    jmp near ptr 005671B5h"
);
// LINE 219:
	asm( 
"	      005671b5    pop edi"
"	      005671b6    pop esi"
"	      005671b7    pop ebx"
"	      005671b8    leave"
"	      005671b9    ret"
);
}

// FUNCTION: COPTER_D 0x005671ba
void GetBackColor(unsigned long *) {
// LINE 222:
	asm( 
"	      005671ba    push ebp"
"	      005671bb    mov ebp,esp"
"	      005671bd    push ebx"
"	      005671be    push esi"
"	      005671bf    push edi"
);
// LINE 223:
	asm( 
"	      005671c0    mov eax,ds:[5BF63Ch]"
"	      005671c5    push eax"
"	      005671c6    call dword ptr ds:[6C3548h]"
"	      005671cc    mov ecx,[ebp+8]"
"	      005671cf    mov [ecx],eax"
);
// LINE 224:
	asm( 
"	      005671d1    jmp near ptr 005671D6h"
"	      005671d6    pop edi"
"	      005671d7    pop esi"
"	      005671d8    pop ebx"
"	      005671d9    leave"
"	      005671da    ret"
);
}

// FUNCTION: COPTER_D 0x005671db
void RGBBackColor(unsigned long *) {
// LINE 227:
	asm( 
"	      005671db    push ebp"
"	      005671dc    mov ebp,esp"
"	      005671de    push ebx"
"	      005671df    push esi"
"	      005671e0    push edi"
);
// LINE 228:
	asm( 
"	      005671e1    mov eax,[ebp+8]"
"	      005671e4    mov eax,[eax]"
"	      005671e6    push eax"
"	      005671e7    mov eax,ds:[5BF63Ch]"
"	      005671ec    push eax"
"	      005671ed    call dword ptr ds:[6C3544h]"
);
// LINE 229:
	asm( 
"	      005671f3    jmp near ptr 005671F8h"
"	      005671f8    pop edi"
"	      005671f9    pop esi"
"	      005671fa    pop ebx"
"	      005671fb    leave"
"	      005671fc    ret"
);
}



// Contribution: 3:00028638-000286d3 Module: 182, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bf638
// gPort
