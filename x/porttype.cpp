// Module: Porttype.obj
// Source: C:\Copter\Source\X\Porttype.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct Point (forward reference);
// Type: struct tagPOINT;
class tagPOINT{
public:
	long x;
	long y;
};

// Type: void;
// Type: long;
// Type: unsigned char *;
// Type: struct tagSIZE;
class tagSIZE{
public:
	long cx;
	long cy;
};

// Type: short;
// Type: char *;
// Type: struct Rect (forward reference);
// Type: struct tagRECT;
class tagRECT{
public:
	long left;
	long top;
	long right;
	long bottom;
};

// Type: unsigned short;
// Type: void * __ptr32;
// Type: struct GrafPtr;
class GrafPtr{
public:
	void * __ptr32 window;
	void * __ptr32 dc;
};

// Type: struct GrafPtr (forward reference);
// Type: struct tagRECT (forward reference);
// Type: unsigned long;
// Type: struct Point;
class Point{
public:
	short v;
	short h;
};

// Type: unsigned long *;


// Contribution: 1:00165a10-001661fc Module: 182, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00566a10
void GlobalToLocal(struct Point* pt) {
	struct tagPOINT wpt;

// LINE 8:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 10:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    wpt.x, eax;
// LINE 11:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    wpt.y, eax;
// LINE 12:
	__asm        lea    eax, wpt.x;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF638];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37F0];
// LINE 13:
	__asm        mov    eax, wpt.x;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx+2], ax;
// LINE 14:
	__asm        mov    eax, wpt.y;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx], ax;
// LINE 15:
	__asm        jmp    near ptr 0x00566A54;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566a59
void LocalToGlobal(struct Point* pt) {
	struct tagPOINT wpt;

// LINE 17:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 19:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    wpt.x, eax;
// LINE 20:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    wpt.y, eax;
// LINE 21:
	__asm        lea    eax, wpt.x;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF638];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E0];
// LINE 22:
	__asm        mov    eax, wpt.x;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx+2], ax;
// LINE 23:
	__asm        mov    eax, wpt.y;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx], ax;
// LINE 24:
	__asm        jmp    near ptr 0x00566A9D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566aa2
long TickCount() {
// LINE 26:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 32:
	__asm        call   dword ptr ds:[0x6C3614];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    near ptr 0x00566AC5;
// LINE 33:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566aca
short StringWidth(unsigned char * str) {
	struct tagSIZE textSize;

// LINE 35:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 37:
	__asm        lea    eax, textSize.cx;
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    eax, str;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35C4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00566B05;
// LINE 38:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00566B0E;
// LINE 39:
	__asm        jmp    near ptr 0x00566B0E;
// LINE 40:
	__asm        mov    ax, reinterpret_cast<uint16_t>(textSize.cx);
	__asm        jmp    near ptr 0x00566B0E;
// LINE 41:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566b13
void PtoCstr(unsigned char * pstr) {
	short len;

// LINE 44:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 45:
	__asm        mov    eax, pstr;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    len, ax;
// LINE 46:
	__asm        movsx  eax, len;
	__asm        push   eax;
	__asm        mov    eax, pstr;
	__asm        push   eax;
	__asm        mov    eax, pstr;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 47:
	__asm        movsx  eax, len;
	__asm        mov    ecx, pstr;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 48:
	__asm        jmp    near ptr 0x00566B4D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566b52
void CtoPstr(char * cstr) {
	short len;

// LINE 52:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 53:
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   0x0056ABE0;
	__asm        add    esp, 4;
	__asm        mov    len, ax;
// LINE 54:
	__asm        movsx  eax, len;
	__asm        cmp    eax, 0xFF;
	__asm        jle    near ptr 0x00566B80;
	__asm        mov    len, 0xFF;
// LINE 55:
	__asm        movsx  eax, len;
	__asm        push   eax;
	__asm        mov    eax, cstr;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 56:
	__asm        mov    al, reinterpret_cast<uint8_t>(len);
	__asm        mov    ecx, cstr;
	__asm        mov    [ecx], al;
// LINE 57:
	__asm        jmp    near ptr 0x00566BA3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566ba8
void OffsetRect(struct Rect* rect, short hoff, short voff) {
// LINE 60:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 61:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, voff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx], ax;
// LINE 62:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, voff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+4], ax;
// LINE 63:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, hoff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+2], ax;
// LINE 64:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, hoff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+6], ax;
// LINE 65:
	__asm        jmp    near ptr 0x00566C01;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566c06
unsigned short SectRect(struct Rect* rect1, struct Rect* rect2, struct Rect* result) {
	struct tagRECT lrect2;
	struct tagRECT lresult;
	struct tagRECT lrect1;
	unsigned short sect;

// LINE 74:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 76:
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lrect1.top, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lrect1.bottom, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lrect1.left, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lrect1.right, eax;
// LINE 77:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lrect2.top, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lrect2.bottom, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lrect2.left, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lrect2.right, eax;
// LINE 78:
	__asm        lea    eax, lrect2.left;
	__asm        push   eax;
	__asm        lea    eax, lrect1.left;
	__asm        push   eax;
	__asm        lea    eax, lresult.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37F4];
	__asm        mov    sect, ax;
// LINE 79:
	__asm        mov    ecx, lresult.top;
	__asm        mov    edx, result;
	__asm        mov    [edx], cx;
	__asm        mov    ecx, lresult.bottom;
	__asm        mov    edx, result;
	__asm        mov    [edx+4], cx;
	__asm        mov    ecx, lresult.left;
	__asm        mov    edx, result;
	__asm        mov    [edx+2], cx;
	__asm        mov    ecx, lresult.right;
	__asm        mov    edx, result;
	__asm        mov    [edx+6], cx;
// LINE 80:
	__asm        mov    ax, sect;
	__asm        jmp    near ptr 0x00566CA3;
// LINE 81:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566ca8
void SetPortDC(void * __ptr32 dc) {
// LINE 103:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 104:
	__asm        call   0x00566CCF;
// LINE 105:
	__asm        mov    eax, dc;
	__asm        mov    ds:[0x5BF63C], eax;
// LINE 106:
	__asm        mov    dword ptr ds:[0x5BF638], 0;
// LINE 107:
	__asm        jmp    near ptr 0x00566CCA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566ccf
void CleanUpPort() {
// LINE 84:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 85:
	__asm        cmp    dword ptr ds:[0x5BF638], 0;
	__asm        je     near ptr 0x00566D1A;
// LINE 87:
	__asm        cmp    dword ptr ds:[0x5BF63C], 0;
	__asm        jne    near ptr 0x00566D08;
	__asm        push   0x8C085;
	__asm        push   0x5BF640;
	__asm        push   0x57;
	__asm        push   0x5BF664;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 88:
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF638];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 90:
	__asm        mov    dword ptr ds:[0x5BF638], 0;
// LINE 91:
	__asm        mov    dword ptr ds:[0x5BF63C], 0;
// LINE 92:
	__asm        jmp    near ptr 0x00566D33;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566d38
void SetPort(void * __ptr32 newHWND) {
// LINE 111:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 112:
	__asm        call   0x00566CCF;
// LINE 113:
	__asm        mov    eax, newHWND;
	__asm        mov    ds:[0x5BF638], eax;
// LINE 114:
	__asm        mov    eax, ds:[0x5BF638];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    ds:[0x5BF63C], eax;
// LINE 115:
	__asm        jmp    near ptr 0x00566D61;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566d66
void SetPort(struct GrafPtr newPort) {
// LINE 119:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 120:
	__asm        call   0x00566CCF;
// LINE 121:
	__asm        cmp    newPort.window, 0;
	__asm        je     near ptr 0x00566D8C;
	__asm        mov    eax, newPort.window;
	__asm        push   eax;
	__asm        call   0x00566D38;
	__asm        add    esp, 4;
// LINE 122:
	__asm        jmp    near ptr 0x00566D9D;
// LINE 123:
	__asm        mov    eax, newPort.window;
	__asm        mov    ecx, newPort.dc;
	__asm        mov    ds:[0x5BF638], eax;
	__asm        mov    ds:[0x5BF63C], ecx;
// LINE 126:
	__asm        jmp    near ptr 0x00566DA2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566da7
void GetPort(struct GrafPtr* pPort) {
// LINE 130:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 131:
	__asm        mov    eax, ds:[0x5BF638];
	__asm        mov    ecx, ds:[0x5BF63C];
	__asm        mov    edx, pPort;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 132:
	__asm        jmp    near ptr 0x00566DC5;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566dca
void EraseRect(struct tagRECT* rect) {
	unsigned long bk;
	void * __ptr32 tempBrush;
	struct tagRECT lRect;

// LINE 135:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 136:
	__asm        cmp    dword ptr ds:[0x5BF63C], 0;
	__asm        jne    near ptr 0x00566DFC;
	__asm        push   0x8C085;
	__asm        push   0x5BF684;
	__asm        push   0x88;
	__asm        push   0x5BF68C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 138:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        mov    lRect.right, eax;
// LINE 139:
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3548];
	__asm        mov    bk, eax;
// LINE 140:
	__asm        mov    eax, bk;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35D0];
	__asm        mov    tempBrush, eax;
// LINE 141:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3888];
// LINE 142:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 143:
	__asm        jmp    near ptr 0x00566E62;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566e67
void EraseRect(struct Rect* r) {
	struct tagRECT lRect;

// LINE 146:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 148:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lRect.right, eax;
// LINE 149:
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        call   0x00566DCA;
	__asm        add    esp, 4;
// LINE 150:
	__asm        jmp    near ptr 0x00566EA8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566ead
void FrameRect(struct Rect* rect) {
	unsigned long bk;
	void * __ptr32 tempBrush;
	struct tagRECT lRect;

// LINE 153:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 154:
	__asm        cmp    dword ptr ds:[0x5BF63C], 0;
	__asm        jne    near ptr 0x00566EDF;
	__asm        push   0x8C085;
	__asm        push   0x5BF6AC;
	__asm        push   0x9A;
	__asm        push   0x5BF6B4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 156:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lRect.right, eax;
// LINE 157:
	__asm        mov    bk, 0;
// LINE 158:
	__asm        mov    eax, bk;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35D0];
	__asm        mov    tempBrush, eax;
// LINE 159:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37FC];
// LINE 160:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 161:
	__asm        jmp    near ptr 0x00566F3D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566f42
void SetRect(struct Rect* rect, short left, short top, short right, short bottom) {
// LINE 164:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 165:
	__asm        mov    ax, left;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+2], ax;
// LINE 166:
	__asm        mov    ax, top;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx], ax;
// LINE 167:
	__asm        mov    ax, right;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+6], ax;
// LINE 168:
	__asm        mov    ax, bottom;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+4], ax;
// LINE 169:
	__asm        jmp    near ptr 0x00566F78;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00566f7d
void UnionRect(struct Rect* rect1, struct Rect* rect2, struct Rect* result) {
// LINE 172:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 173:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00566FA8;
// LINE 174:
	__asm        mov    eax, rect1;
	__asm        mov    ax, [eax];
	__asm        mov    ecx, result;
	__asm        mov    [ecx], ax;
// LINE 175:
	__asm        jmp    near ptr 0x00566FB4;
// LINE 176:
	__asm        mov    eax, rect2;
	__asm        mov    ax, [eax];
	__asm        mov    ecx, result;
	__asm        mov    [ecx], ax;
// LINE 178:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00566FDD;
// LINE 179:
	__asm        mov    eax, rect1;
	__asm        mov    ax, [eax+2];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+2], ax;
// LINE 180:
	__asm        jmp    near ptr 0x00566FEB;
// LINE 181:
	__asm        mov    eax, rect2;
	__asm        mov    ax, [eax+2];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+2], ax;
// LINE 183:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00567014;
// LINE 184:
	__asm        mov    eax, rect1;
	__asm        mov    ax, [eax+6];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+6], ax;
// LINE 185:
	__asm        jmp    near ptr 0x00567022;
// LINE 186:
	__asm        mov    eax, rect2;
	__asm        mov    ax, [eax+6];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+6], ax;
// LINE 188:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0056704B;
// LINE 189:
	__asm        mov    eax, rect1;
	__asm        mov    ax, [eax+4];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+4], ax;
// LINE 190:
	__asm        jmp    near ptr 0x00567059;
// LINE 191:
	__asm        mov    eax, rect2;
	__asm        mov    ax, [eax+4];
	__asm        mov    ecx, result;
	__asm        mov    [ecx+4], ax;
// LINE 192:
	__asm        jmp    near ptr 0x0056705E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567063
unsigned short EqualRect(struct Rect* rect1, struct Rect* rect2) {
// LINE 195:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 196:
	__asm        mov    eax, rect2;
	__asm        mov    ecx, rect1;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        je     near ptr 0x00567081;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005670A4;
// LINE 197:
	__asm        mov    eax, rect2;
	__asm        mov    ecx, rect1;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        je     near ptr 0x0056709B;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005670A4;
// LINE 198:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005670A4;
// LINE 199:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005670a9
void InsetRect(struct Rect* r, short hdelta, short vdelta) {
// LINE 202:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 203:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, vdelta;
	__asm        add    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx], ax;
// LINE 204:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, vdelta;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+4], ax;
// LINE 205:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, hdelta;
	__asm        add    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+2], ax;
// LINE 206:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, hdelta;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+6], ax;
// LINE 207:
	__asm        jmp    near ptr 0x00567102;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567107
unsigned short PtInRect(struct Point p, struct Rect* r) {
// LINE 210:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 211:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, p.h;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00567158;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, p.h;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00567158;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, p.v;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00567158;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, p.v;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00567165;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0056716E;
// LINE 212:
	__asm        jmp    near ptr 0x0056716E;
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0056716E;
// LINE 213:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567173
unsigned short EmptyRect(struct Rect* r) {
// LINE 216:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 217:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, r;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x005671A4;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, r;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005671AD;
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005671B5;
// LINE 218:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005671B5;
// LINE 219:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005671ba
void GetBackColor(unsigned long * color) {
// LINE 222:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 223:
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3548];
	__asm        mov    ecx, color;
	__asm        mov    [ecx], eax;
// LINE 224:
	__asm        jmp    near ptr 0x005671D6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005671db
void RGBBackColor(unsigned long * color) {
// LINE 227:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 228:
	__asm        mov    eax, color;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3544];
// LINE 229:
	__asm        jmp    near ptr 0x005671F8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 3:00028638-000286d3 Module: 182, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bf638
// gPort
