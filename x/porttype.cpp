// Module: Porttype.obj
// Source: C:\Copter\Source\X\Porttype.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ struct GrafPtr;
struct GrafPtr{ // not packed(0x8 bytes) TI: 0x344e
	/*+0x0*/   void * __ptr32 window;
	/*+0x4*/   void * __ptr32 dc;
};

// Type: /*unpacked*/ struct Point (forward reference);
struct Point{ // not packed(0x4 bytes) TI: 0x341c
	/*+0x0*/   short v; // 0x2 bytes
	/*+0x2*/   short h; // 0x2 bytes
};

// Type: /*unpacked*/ struct tagPOINT;
struct tagPOINT{ // not packed(0x8 bytes) TI: 0x3269
	/*+0x0*/   long x;
	/*+0x4*/   long y;
};

// Type: void;

// Type: long;

// Type: unsigned char *;

// Type: /*unpacked*/ struct tagSIZE;
struct tagSIZE{ // not packed(0x8 bytes) TI: 0x3441
	/*+0x0*/   long cx;
	/*+0x4*/   long cy;
};

// Type: short;

// Type: char *;

// Type: /*unpacked*/ struct Rect (forward reference);
struct Rect{ // not packed(0x8 bytes) TI: 0x3463
	/*+0x0*/   short top; // 0x2 bytes
	/*+0x2*/   short left; // 0x2 bytes
	/*+0x4*/   short bottom; // 0x2 bytes
	/*+0x6*/   short right; // 0x2 bytes
};

// Type: /*unpacked*/ struct tagRECT;
struct tagRECT{ // not packed(0x10 bytes) TI: 0x3449
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
};

// Type: unsigned short;

// Type: void * __ptr32;

// Type: /*unpacked*/ struct GrafPtr (forward reference);
struct GrafPtr{ // not packed(0x8 bytes) TI: 0x344e
	/*+0x0*/   void * __ptr32 window;
	/*+0x4*/   void * __ptr32 dc;
};

// Type: /*unpacked*/ struct tagRECT (forward reference);
struct tagRECT{ // not packed(0x10 bytes) TI: 0x3449
	/*+0x0*/   long left;
	/*+0x4*/   long top;
	/*+0x8*/   long right;
	/*+0xc*/   long bottom;
};

// Type: unsigned long;

// Type: /*unpacked*/ struct Point;
struct Point{ // not packed(0x4 bytes) TI: 0x341c
	/*+0x0*/   short v; // 0x2 bytes
	/*+0x2*/   short h; // 0x2 bytes
};

// Type: unsigned long *;



// Contribution: 1:00165a10-001661fc Module: 182, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00566a10
void GlobalToLocal(/*unpacked*/ struct Point *pt) {
	/*bp-0x8*/   /*unpacked*/ struct tagPOINT wpt; // 0x8 bytes

// LINE 10:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    wpt.x, eax;
// LINE 11:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    wpt.y, eax;
// LINE 12:
	__asm        lea    eax, wpt.x;
	__asm        push   eax;
	__asm        mov    eax, gPort.window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37F0];
// LINE 13:
	__asm        mov    eax, wpt.x;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx+2], ax;
// LINE 14:
	__asm        mov    eax, wpt.y;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx], ax;
// LINE 15:
	return;
}

// FUNCTION: COPTER_D 0x00566a59
void LocalToGlobal(/*unpacked*/ struct Point *pt) {
	/*bp-0x8*/   /*unpacked*/ struct tagPOINT wpt; // 0x8 bytes

// LINE 19:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    wpt.x, eax;
// LINE 20:
	__asm        mov    eax, pt;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    wpt.y, eax;
// LINE 21:
	__asm        lea    eax, wpt.x;
	__asm        push   eax;
	__asm        mov    eax, gPort.window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37E0];
// LINE 22:
	__asm        mov    eax, wpt.x;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx+2], ax;
// LINE 23:
	__asm        mov    eax, wpt.y;
	__asm        mov    ecx, pt;
	__asm        mov    [ecx], ax;
// LINE 24:
	return;
}

// FUNCTION: COPTER_D 0x00566aa2
long TickCount() {
// LINE 32:
	__asm        call   dword ptr ds:[0x6C3614];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        jmp    __RETURN;
// LINE 33:
__RETURN:
}

// FUNCTION: COPTER_D 0x00566aca
short StringWidth(unsigned char * str) {
	/*bp-0x8*/   /*unpacked*/ struct tagSIZE textSize; // 0x8 bytes

// LINE 37:
	__asm        lea    eax, textSize.cx;
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    eax, str;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35C4];
	__asm        test   eax, eax;
	__asm        jne    _T3b;
// LINE 38:
	return 0x0;
// LINE 39:
	__asm        jmp    __RETURN;
// LINE 40:
_T3b:
	return reinterpret_cast<uint16_t>(textSize.cx);
// LINE 41:
__RETURN:
}

// FUNCTION: COPTER_D 0x00566b13
void PtoCstr(unsigned char * pstr) {
	/*bp-0x4*/   short len;

// LINE 45:
	__asm        mov    eax, pstr;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    len, ax;
// LINE 46:
	__asm        movsx  eax, len;
	__asm        push   eax;
	__asm        mov    eax, pstr;
	__asm        push   eax;
	__asm        mov    eax, pstr;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 47:
	__asm        movsx  eax, len;
	__asm        mov    ecx, pstr;
	__asm        mov    byte ptr [eax+ecx], 0;
// LINE 48:
	return;
}

// FUNCTION: COPTER_D 0x00566b52
void CtoPstr(char * cstr) {
	/*bp-0x4*/   short len;

// LINE 53:
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    len, ax;
// LINE 54:
	__asm        movsx  eax, len;
	__asm        cmp    eax, 0xFF;
	__asm        jle    _T2e;

	len = 0xff;
// LINE 55:
_T2e:
	__asm        movsx  eax, len;
	__asm        push   eax;
	__asm        mov    eax, cstr;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 56:
	cstr[0] = reinterpret_cast<uint8_t>(len);
// LINE 57:
	return;
}

// FUNCTION: COPTER_D 0x00566ba8
void OffsetRect(/*unpacked*/ struct Rect *rect, short hoff, short voff) {
// LINE 61:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, voff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx], ax;
// LINE 62:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, voff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+4], ax;
// LINE 63:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, hoff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+2], ax;
// LINE 64:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, hoff;
	__asm        add    eax, ecx;
	__asm        mov    ecx, rect;
	__asm        mov    [ecx+6], ax;
// LINE 65:
	return;
}

// FUNCTION: COPTER_D 0x00566c06
unsigned short SectRect(/*unpacked*/ struct Rect *rect1, /*unpacked*/ struct Rect *rect2, /*unpacked*/ struct Rect *result) {
	/*bp-0x4*/   unsigned short sect;
	/*bp-0x14*/  /*unpacked*/ struct tagRECT lrect1; // 0x10 bytes
	/*bp-0x24*/  /*unpacked*/ struct tagRECT lresult; // 0x10 bytes
	/*bp-0x34*/  /*unpacked*/ struct tagRECT lrect2; // 0x10 bytes

// LINE 76:
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lrect1.top, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lrect1.bottom, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lrect1.left, eax;
	__asm        mov    eax, rect1;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lrect1.right, eax;
// LINE 77:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lrect2.top, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lrect2.bottom, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lrect2.left, eax;
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lrect2.right, eax;
// LINE 78:
	__asm        lea    eax, lrect2.left;
	__asm        push   eax;
	__asm        lea    eax, lrect1.left;
	__asm        push   eax;
	__asm        lea    eax, lresult.left;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37F4];
	__asm        mov    sect, ax;
// LINE 79:
	__asm        mov    ecx, lresult.top;
	__asm        mov    edx, result;
	__asm        mov    [edx], cx;
	__asm        mov    ecx, lresult.bottom;
	__asm        mov    edx, result;
	__asm        mov    [edx+4], cx;
	__asm        mov    ecx, lresult.left;
	__asm        mov    edx, result;
	__asm        mov    [edx+2], cx;
	__asm        mov    ecx, lresult.right;
	__asm        mov    edx, result;
	__asm        mov    [edx+6], cx;
// LINE 80:
	return sect;
// LINE 81:
}

// FUNCTION: COPTER_D 0x00566ca8
void SetPortDC(void * __ptr32 dc) {
// LINE 104:
	__asm        call   CleanUpPort;
// LINE 105:
	gPort.dc = dc;
// LINE 106:
	gPort.window = 0x0;
// LINE 107:
	return;
}

// FUNCTION: COPTER_D 0x00566ccf
static void CleanUpPort() {
// LINE 85:
	__asm        cmp    gPort.window, 0;
	__asm        je     _T4b;
// LINE 87:
	__asm        cmp    gPort.dc, 0;
	__asm        jne    _T39;

	__asm        push   0x8C085;
	__asm        push   0x5BF640;
	__asm        push   0x57;
	__asm        push   0x5BF664;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 88:
_T39:
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        mov    eax, gPort.window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C384C];
// LINE 90:
_T4b:
	gPort.window = 0x0;
// LINE 91:
	gPort.dc = 0x0;
// LINE 92:
	return;
}

// FUNCTION: COPTER_D 0x00566d38
void SetPort(void * __ptr32 newHWND) {
// LINE 112:
	__asm        call   CleanUpPort;
// LINE 113:
	gPort.window = newHWND;
// LINE 114:
	__asm        mov    eax, gPort.window;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3850];
	__asm        mov    gPort.dc, eax;
// LINE 115:
	return;
}

// FUNCTION: COPTER_D 0x00566d66
void SetPort(/*unpacked*/ struct GrafPtr newPort) {
// LINE 120:
	__asm        call   CleanUpPort;
// LINE 121:
	__asm        cmp    newPort.window, 0;
	__asm        je     _T26;

	__asm        mov    eax, newPort.window;
	__asm        push   eax;
	__asm        call   SetPort;
	__asm        add    esp, 4;
// LINE 122:
	__asm        jmp    _T37;
// LINE 123:
_T26:
	__asm        mov    eax, newPort.window;
	__asm        mov    ecx, newPort.dc;
	__asm        mov    gPort.window, eax;
	__asm        mov    gPort.dc, ecx;
// LINE 126:
_T37:
	return;
}

// FUNCTION: COPTER_D 0x00566da7
void GetPort(/*unpacked*/ struct GrafPtr *pPort) {
// LINE 131:
	__asm        mov    eax, gPort.window;
	__asm        mov    ecx, gPort.dc;
	__asm        mov    edx, pPort;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 132:
	return;
}

// FUNCTION: COPTER_D 0x00566dca
void EraseRect(/*unpacked*/ struct tagRECT *rect) {
	/*bp-0x10*/  /*unpacked*/ struct tagRECT lRect; // 0x10 bytes
	/*bp-0x14*/  void * __ptr32 tempBrush;
	/*bp-0x18*/  unsigned long bk;

// LINE 136:
	__asm        cmp    gPort.dc, 0;
	__asm        jne    _T32;

	__asm        push   0x8C085;
	__asm        push   0x5BF684;
	__asm        push   0x88;
	__asm        push   0x5BF68C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 138:
_T32:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        mov    lRect.right, eax;
// LINE 139:
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3548];
	__asm        mov    bk, eax;
// LINE 140:
	__asm        mov    eax, bk;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35D0];
	__asm        mov    tempBrush, eax;
// LINE 141:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3888];
// LINE 142:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 143:
	return;
}

// FUNCTION: COPTER_D 0x00566e67
void EraseRect(/*unpacked*/ struct Rect *r) {
	/*bp-0x10*/  /*unpacked*/ struct tagRECT lRect; // 0x10 bytes

// LINE 148:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lRect.right, eax;
// LINE 149:
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        call   EraseRect;
	__asm        add    esp, 4;
// LINE 150:
	return;
}

// FUNCTION: COPTER_D 0x00566ead
void FrameRect(/*unpacked*/ struct Rect *rect) {
	/*bp-0x10*/  /*unpacked*/ struct tagRECT lRect; // 0x10 bytes
	/*bp-0x14*/  void * __ptr32 tempBrush;
	/*bp-0x18*/  unsigned long bk;

// LINE 154:
	__asm        cmp    gPort.dc, 0;
	__asm        jne    _T32;

	__asm        push   0x8C085;
	__asm        push   0x5BF6AC;
	__asm        push   0x9A;
	__asm        push   0x5BF6B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 156:
_T32:
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    lRect.top, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    lRect.bottom, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    lRect.left, eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    lRect.right, eax;
// LINE 157:
	bk = 0x0;
// LINE 158:
	__asm        mov    eax, bk;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C35D0];
	__asm        mov    tempBrush, eax;
// LINE 159:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        lea    eax, lRect.left;
	__asm        push   eax;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C37FC];
// LINE 160:
	__asm        mov    eax, tempBrush;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C358C];
// LINE 161:
	return;
}

// FUNCTION: COPTER_D 0x00566f42
void SetRect(/*unpacked*/ struct Rect *rect, short left, short top, short right, short bottom) {
// LINE 165:
	rect->left = left;
// LINE 166:
	rect->top = top;
// LINE 167:
	rect->right = right;
// LINE 168:
	rect->bottom = bottom;
// LINE 169:
	return;
}

// FUNCTION: COPTER_D 0x00566f7d
void UnionRect(/*unpacked*/ struct Rect *rect1, /*unpacked*/ struct Rect *rect2, /*unpacked*/ struct Rect *result) {
// LINE 173:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    _T2b;
// LINE 174:
	result->top = rect1->top;
// LINE 175:
	__asm        jmp    _T37;
// LINE 176:
_T2b:
	result->top = rect2->top;
// LINE 178:
_T37:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        cmp    eax, ecx;
	__asm        jle    _T60;
// LINE 179:
	result->left = rect1->left;
// LINE 180:
	__asm        jmp    _T6e;
// LINE 181:
_T60:
	result->left = rect2->left;
// LINE 183:
_T6e:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        cmp    eax, ecx;
	__asm        jge    _T97;
// LINE 184:
	result->right = rect1->right;
// LINE 185:
	__asm        jmp    _Ta5;
// LINE 186:
_T97:
	result->right = rect2->right;
// LINE 188:
_Ta5:
	__asm        mov    eax, rect2;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, rect1;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        cmp    eax, ecx;
	__asm        jge    _Tce;
// LINE 189:
	result->bottom = rect1->bottom;
// LINE 190:
	__asm        jmp    _Tdc;
// LINE 191:
_Tce:
	result->bottom = rect2->bottom;
// LINE 192:
_Tdc:
	return;
}

// FUNCTION: COPTER_D 0x00567063
unsigned short EqualRect(/*unpacked*/ struct Rect *rect1, /*unpacked*/ struct Rect *rect2) {
// LINE 196:
	__asm        mov    eax, rect2;
	__asm        mov    ecx, rect1;
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        je     _T1e;

	return 0x0;
// LINE 197:
_T1e:
	__asm        mov    eax, rect2;
	__asm        mov    ecx, rect1;
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        je     _T38;

	return 0x0;
// LINE 198:
_T38:
	return 0x1;
// LINE 199:
}

// FUNCTION: COPTER_D 0x005670a9
void InsetRect(/*unpacked*/ struct Rect *r, short hdelta, short vdelta) {
// LINE 203:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, vdelta;
	__asm        add    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx], ax;
// LINE 204:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, vdelta;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+4], ax;
// LINE 205:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, hdelta;
	__asm        add    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+2], ax;
// LINE 206:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, hdelta;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, r;
	__asm        mov    [ecx+6], ax;
// LINE 207:
	return;
}

// FUNCTION: COPTER_D 0x00567107
unsigned short PtInRect(/*unpacked*/ struct Point p, /*unpacked*/ struct Rect *r) {
// LINE 211:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        movsx  ecx, p.h;
	__asm        cmp    eax, ecx;
	__asm        jg     _T51;

	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, p.h;
	__asm        cmp    eax, ecx;
	__asm        jle    _T51;

	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, p.v;
	__asm        cmp    eax, ecx;
	__asm        jg     _T51;

	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, p.v;
	__asm        cmp    eax, ecx;
	__asm        jg     _T5e;
_T51:
	return 0x0;
// LINE 212:
	__asm        jmp    __RETURN;
_T5e:
	return 0x1;
// LINE 213:
__RETURN:
}

// FUNCTION: COPTER_D 0x00567173
unsigned short EmptyRect(/*unpacked*/ struct Rect *r) {
// LINE 217:
	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, r;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jle    _T31;

	__asm        mov    eax, r;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, r;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        cmp    eax, ecx;
	__asm        jl     _T3a;
_T31:
	return 0x1;
// LINE 218:
_T3a:
	return 0x0;
// LINE 219:
}

// FUNCTION: COPTER_D 0x005671ba
void GetBackColor(unsigned long * color) {
// LINE 223:
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3548];
	__asm        mov    ecx, color;
	__asm        mov    [ecx], eax;
// LINE 224:
	return;
}

// FUNCTION: COPTER_D 0x005671db
void RGBBackColor(unsigned long * color) {
// LINE 228:
	__asm        mov    eax, color;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3544];
// LINE 229:
	return;
}



// Contribution: 3:00028638-000286d3 Module: 182, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bf638
/*unpacked*/ struct GrafPtr gPort = { 0 /* todo */ };

