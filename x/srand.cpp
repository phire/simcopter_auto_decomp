// Module: Srand.obj
// Source: C:\Copter\Source\X\Srand.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0015c500-0015c948 Module: 193, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0055d500
void SetRRandSeed(unsigned long n) {
// LINE 33:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    eax, n;
	__asm        mov    ds:[0x5BDFDC], eax;
	__asm        jmp    near ptr 0x0055D513;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d518
unsigned long GetSRandSeed() {
// LINE 45:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    eax, ds:[0x6376A8];
	__asm        jmp    near ptr 0x0055D528;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d52d
void SetSRandSeed(unsigned long theSeed) {
// LINE 48:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    eax, theSeed;
	__asm        mov    ds:[0x6376A8], eax;
	__asm        jmp    near ptr 0x0055D540;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d545
unsigned short RRand(unsigned short lim) {
	unsigned long myRandom4;
	unsigned long myRandom3;
	unsigned long myRandom2;
	unsigned long myRandom1;
	unsigned long myRandom5;
	unsigned long myRandom0;

// LINE 55:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 59:
	__asm        mov    myRandom0, 0x41C64E6D;
// LINE 60:
	__asm        mov    eax, ds:[0x5BDFDC];
	__asm        mov    myRandom1, eax;
// LINE 61:
	__asm        mov    eax, myRandom0;
	__asm        mov    myRandom2, eax;
// LINE 62:
	__asm        mov    eax, myRandom1;
	__asm        mov    myRandom3, eax;
// LINE 66:
	__asm        mov    eax, myRandom2;
	__asm        and    eax, 0xFFFF;
	__asm        shl    eax, 0x10;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom2;
	__asm        and    ecx, 0xFFFF;
	__asm        shr    ecx, 0x10;
	__asm        movzx  ecx, cx;
	__asm        or     eax, ecx;
	__asm        mov    myRandom2, eax;
// LINE 68:
	__asm        mov    eax, myRandom3;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom2;
	__asm        and    ecx, 0xFFFF;
	__asm        movzx  ecx, cx;
	__asm        imul   eax, ecx;
	__asm        mov    myRandom2, eax;
// LINE 70:
	__asm        mov    eax, myRandom0;
	__asm        mov    myRandom4, eax;
// LINE 71:
	__asm        mov    eax, myRandom1;
	__asm        mov    myRandom5, eax;
// LINE 73:
	__asm        mov    eax, myRandom5;
	__asm        and    eax, 0xFFFF;
	__asm        shl    eax, 0x10;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom5;
	__asm        and    ecx, 0xFFFF;
	__asm        shr    ecx, 0x10;
	__asm        movzx  ecx, cx;
	__asm        or     eax, ecx;
	__asm        mov    myRandom5, eax;
// LINE 75:
	__asm        mov    eax, myRandom5;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom4;
	__asm        and    ecx, 0xFFFF;
	__asm        movzx  ecx, cx;
	__asm        imul   eax, ecx;
	__asm        mov    myRandom4, eax;
// LINE 77:
	__asm        mov    eax, myRandom4;
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, myRandom2;
	__asm        and    ecx, 0xFFFF;
	__asm        add    eax, ecx;
	__asm        and    eax, 0xFFFF;
	__asm        mov    myRandom2, eax;
// LINE 79:
	__asm        mov    eax, myRandom2;
	__asm        and    eax, 0xFFFF;
	__asm        shl    eax, 0x10;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom2;
	__asm        and    ecx, 0xFFFF;
	__asm        shr    ecx, 0x10;
	__asm        movzx  ecx, cx;
	__asm        or     eax, ecx;
	__asm        mov    myRandom2, eax;
// LINE 81:
	__asm        and    myRandom2, 0xFFFF0000;
// LINE 83:
	__asm        mov    eax, myRandom1;
	__asm        and    eax, 0xFFFF;
	__asm        movzx  eax, ax;
	__asm        mov    ecx, myRandom0;
	__asm        and    ecx, 0xFFFF;
	__asm        movzx  ecx, cx;
	__asm        imul   eax, ecx;
	__asm        mov    myRandom0, eax;
// LINE 85:
	__asm        mov    eax, myRandom2;
	__asm        add    myRandom0, eax;
// LINE 87:
	__asm        add    myRandom0, 0x3039;
// LINE 89:
	__asm        mov    eax, myRandom0;
	__asm        mov    ds:[0x5BDFDC], eax;
// LINE 91:
	__asm        mov    myRandom0, 0;
// LINE 92:
	__asm        mov    eax, ds:[0x5BDFDC];
	__asm        shr    eax, 0x10;
	__asm        mov    myRandom0, eax;
// LINE 94:
	__asm        and    myRandom0, 0x7FFF;
// LINE 96:
	__asm        mov    eax, myRandom0;
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(lim);
	__asm        and    ecx, 0xFFFF;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ax, dx;
	__asm        jmp    near ptr 0x0055D69E;
// LINE 97:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d6a3
unsigned short GetNextRandomNumber() {
	unsigned short temp;

// LINE 104:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 107:
	__asm        mov    eax, ds:[0x6376A8];
	__asm        mov    temp, ax;
// LINE 109:
	__asm        test   *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(&temp) + 1), 0x80;
	__asm        je     near ptr 0x0055D6D7;
// LINE 110:
	__asm        mov    eax, reinterpret_cast<uint32_t>(temp);
	__asm        and    eax, 0xFFFF;
	__asm        add    eax, eax;
	__asm        xor    eax, 0x1BF5;
	__asm        mov    temp, ax;
// LINE 111:
	__asm        jmp    near ptr 0x0055D6DC;
	__asm        shl    temp, 1;
// LINE 113:
	__asm        mov    eax, reinterpret_cast<uint32_t>(temp);
	__asm        and    eax, 0xFFFF;
	__asm        xor    ds:[0x6376A8], eax;
// LINE 114:
	__asm        jne    near ptr 0x0055D709;
	__asm        push   0x8C085;
	__asm        push   0x5BDFE0;
	__asm        push   0x72;
	__asm        push   0x5BDFEC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 115:
	__asm        mov    ax, temp;
	__asm        jmp    near ptr 0x0055D712;
// LINE 116:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d717
unsigned short SRand(unsigned short lim) {
	unsigned short next;

// LINE 118:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        mov    next, ax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(next);
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(lim);
	__asm        and    ecx, 0xFFFF;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ax, dx;
	__asm        jmp    near ptr 0x0055D745;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d74a
unsigned short SRand2() {
// LINE 119:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 1;
	__asm        jmp    near ptr 0x0055D760;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d765
unsigned short SRand4() {
// LINE 120:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 3;
	__asm        jmp    near ptr 0x0055D77B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d780
unsigned short SRand8() {
// LINE 121:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 7;
	__asm        jmp    near ptr 0x0055D796;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d79b
unsigned short SRand16() {
// LINE 122:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 0xF;
	__asm        jmp    near ptr 0x0055D7B1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d7b6
unsigned short SRand32() {
// LINE 123:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 0x1F;
	__asm        jmp    near ptr 0x0055D7CC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d7d1
unsigned short SRand64() {
// LINE 124:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 0x3F;
	__asm        jmp    near ptr 0x0055D7E7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d7ec
unsigned short SRand128() {
// LINE 125:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 0x7F;
	__asm        jmp    near ptr 0x0055D802;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d807
unsigned short SRand256() {
// LINE 126:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        call   0x0055D6A3;
	__asm        movzx  eax, ax;
	__asm        and    eax, 0xFF;
	__asm        jmp    near ptr 0x0055D81F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d824
unsigned short SGIRand(unsigned short limit) {
	unsigned short z;
	unsigned short x;

// LINE 132:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 135:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    z, ax;
// LINE 136:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    x, ax;
// LINE 137:
	__asm        mov    eax, reinterpret_cast<uint32_t>(z);
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(x);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0055D874;
// LINE 138:
	__asm        mov    ax, z;
	__asm        jmp    near ptr 0x0055D87D;
// LINE 139:
	__asm        jmp    near ptr 0x0055D87D;
// LINE 140:
	__asm        mov    ax, x;
	__asm        jmp    near ptr 0x0055D87D;
// LINE 141:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d882
unsigned short SGRand(unsigned short limit) {
	unsigned short z;
	unsigned short x;

// LINE 147:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 150:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    z, ax;
// LINE 151:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    x, ax;
// LINE 152:
	__asm        mov    eax, reinterpret_cast<uint32_t>(z);
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(x);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055D8D2;
// LINE 153:
	__asm        mov    ax, z;
	__asm        jmp    near ptr 0x0055D8DB;
// LINE 154:
	__asm        jmp    near ptr 0x0055D8DB;
// LINE 155:
	__asm        mov    ax, x;
	__asm        jmp    near ptr 0x0055D8DB;
// LINE 156:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055d8e0
short SGSRand(unsigned short limit) {
	short z;
	short x;

// LINE 162:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 165:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    z, ax;
// LINE 166:
	__asm        mov    eax, reinterpret_cast<uint32_t>(limit);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    x, ax;
// LINE 167:
	__asm        movsx  eax, z;
	__asm        movsx  ecx, x;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055D921;
// LINE 168:
	__asm        mov    ax, z;
	__asm        mov    x, ax;
// LINE 169:
	__asm        call   0x0055D74A;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055D93B;
// LINE 170:
	__asm        movsx  eax, x;
	__asm        neg    eax;
	__asm        mov    x, ax;
// LINE 171:
	__asm        mov    ax, x;
	__asm        jmp    near ptr 0x0055D944;
// LINE 172:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 3:00026fdc-00027008 Module: 193, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x005bdfdc
// rrandSeed


// Contribution: 3:000a06a8-000a06ab Module: 193, 4 byte alignment, uninitialized_data, read, write, 
// LOCAL: COPTER_D 0x006376a8
// srandSeed
