// Module: Utils.obj
// Source: C:\Copter\Source\X\Utils.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned char *;

// Type: void;

// Type: long *;

// Type: unsigned char;

// Type: unsigned short;

// Type: long;

// Type: int32_t;

// Type: unsigned long;

// Type: unsigned long *;

// Type: signed char *;

// Type: float;

// Type: double;

// Type: short;

// Type: char *;

// Type: signed char;

// Type: void * __ptr32;

// Type: /*unpacked*/ struct Rect (forward reference);
struct Rect{ // not packed(0x8 bytes) TI: 0x3463
	/*+0x0*/   short top; // 0x2 bytes
	/*+0x2*/   short left; // 0x2 bytes
	/*+0x4*/   short bottom; // 0x2 bytes
	/*+0x6*/   short right; // 0x2 bytes
};

// Type: /*unpacked*/ struct Point;
struct Point{ // not packed(0x4 bytes) TI: 0x341c
	/*+0x0*/   short v; // 0x2 bytes
	/*+0x2*/   short h; // 0x2 bytes
};

// Type: /*unpacked*/ struct Point (forward reference);
struct Point{ // not packed(0x4 bytes) TI: 0x341c
	/*+0x0*/   short v; // 0x2 bytes
	/*+0x2*/   short h; // 0x2 bytes
};



// Contribution: 1:00164ca0-00165846 Module: 184, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00565ca0
void EmptyPStr(unsigned char * str) {
// LINE 55:
	str[0] = 0x0;
// LINE 56:
	return;
}

// FUNCTION: COPTER_D 0x00565cb6
unsigned short Str2Num(unsigned char * str, long * num) {
	/*bp-0x4*/   unsigned short neg;
	/*bp-0x8*/   unsigned char count;
	/*bp-0xc*/   unsigned char digit;

// LINE 62:
	neg = 0x0;
// LINE 65:
	count = 0x1;
// LINE 66:
_T13:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    _T45;

	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     _T45;
// LINE 67:
	count++;
	__asm        jmp    _T13;
// LINE 68:
_T45:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     _T96;
// LINE 70:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x2D;
	__asm        jne    _T7d;
// LINE 72:
	neg = 0x1;
// LINE 73:
	count++;
// LINE 75:
	__asm        jmp    _T96;
_T7d:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x2B;
	__asm        jne    _T96;
// LINE 77:
	count++;
// LINE 80:
_T96:
	digit = count;
// LINE 81:
_T9c:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     _Te4;

	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     _Te4;

	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     _Te4;
// LINE 82:
	count++;
	__asm        jmp    _T9c;
// LINE 83:
_Te4:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    _T116;

	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     _T116;
// LINE 84:
	count++;
	__asm        jmp    _Te4;
// LINE 86:
_T116:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jle    _T132;

	return 0x0;
// LINE 88:
_T132:
	num[0] = 0x0;
// LINE 89:
_T13b:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     _T1a3;

	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     _T1a3;

	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        cmp    ecx, eax;
	__asm        jl     _T1a3;
// LINE 91:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    eax, num;
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [edx+eax*2];
	__asm        sub    eax, 0x30;
	__asm        mov    ecx, num;
	__asm        mov    [ecx], eax;
// LINE 92:
	digit++;
// LINE 93:
	__asm        jmp    _T13b;
// LINE 94:
_T1a3:
	__asm        test   reinterpret_cast<uint32_t>(neg), 0xFFFF;
	__asm        je     _T1bc;

	__asm        mov    eax, num;
	__asm        mov    eax, [eax];
	__asm        neg    eax;
	__asm        mov    ecx, num;
	__asm        mov    [ecx], eax;
// LINE 95:
_T1bc:
	return 0x1;
// LINE 96:
}

// FUNCTION: COPTER_D 0x00565e80
void Num2Str(long num, unsigned char * str) {
	/*bp-0x4*/   unsigned long tenPower;
	/*bp-0x8*/   unsigned short neg;
	/*bp-0xc*/   int32_t power;

// LINE 100:
	power = 0x0;
// LINE 101:
	tenPower = 0x1;
// LINE 104:
	__asm        cmp    num, 0;
	__asm        jge    _T34;
// LINE 106:
	neg = 0x1;
// LINE 107:
	__asm        mov    eax, num;
	__asm        neg    eax;
	__asm        mov    num, eax;
// LINE 109:
	__asm        jmp    _T3a;
// LINE 110:
_T34:
	neg = 0x0;
// LINE 112:
_T3a:
	__asm        cmp    num, 0;
	__asm        jne    _T56;
// LINE 114:
	str[0] = 0x1;
// LINE 115:
	str[1] = 0x30;
// LINE 116:
	return;
// LINE 119:
_T56:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    tenPower;
	__asm        test   eax, eax;
	__asm        je     _Ta6;
// LINE 121:
	power++;
// LINE 122:
	__asm        cmp    power, 0xA;
	__asm        jle    _T8c;

	__asm        push   0x8C085;
	__asm        push   0x5BF570;
	__asm        push   0x7A;
	__asm        push   0x5BF584;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 124:
_T8c:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx], 0x30;
// LINE 125:
	__asm        mov    eax, tenPower;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    tenPower, eax;
// LINE 126:
	__asm        jmp    _T56;
// LINE 129:
_Ta6:
	__asm        test   reinterpret_cast<uint32_t>(neg), 0xFFFF;
	__asm        je     _Tda;
// LINE 131:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx+1], 0x30;
// LINE 132:
	__asm        mov    eax, power;
	__asm        inc    eax;
	__asm        mov    ecx, str;
	__asm        mov    [ecx], al;
// LINE 133:
	str[1] = 0x2d;
// LINE 134:
	power = 0x2;
// LINE 136:
	__asm        jmp    _Te9;
// LINE 138:
_Tda:
	str[0] = reinterpret_cast<uint8_t>(power);
// LINE 139:
	power = 0x1;
// LINE 142:
_Te9:
	__asm        cmp    num, 0;
	__asm        je     _T133;
// LINE 144:
// Block start:
	/*bp-0x10*/  long digit;
	__asm        mov    ecx, 0xA;
	__asm        mov    eax, tenPower;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    tenPower, eax;
// LINE 145:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    tenPower;
	__asm        mov    digit, eax;
// LINE 146:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 147:
	num = (num - (tenPower * digit));
// LINE 148:
	power++;
// LINE 149:
// Block end:
	__asm        jmp    _Te9;
// LINE 150:
_T133:
	return;
}

// FUNCTION: COPTER_D 0x00565fbd
unsigned short HexStr2Num(unsigned char * str, unsigned long * num) {
	/*bp-0x4*/   unsigned long result;
	/*bp-0x8*/   unsigned char digitval;
	/*bp-0xc*/   unsigned char digit;

// LINE 155:
	digit = 0x1;
// LINE 157:
	result = 0x0;
// LINE 158:
_T14:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        cmp    ecx, eax;
	__asm        jl     _Teb;
// LINE 160:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    _T43;
// LINE 161:
	__asm        jmp    _T14;
// LINE 162:
_T43:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     _T87;

	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     _T87;
// LINE 163:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        sub    edx, 0x30;
	__asm        mov    digitval, dl;
// LINE 164:
	__asm        jmp    _Td3;
_T87:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x41;
	__asm        jl     _Tcb;

	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x46;
	__asm        jg     _Tcb;
// LINE 165:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        sub    edx, 0x37;
	__asm        mov    digitval, dl;
// LINE 166:
	__asm        jmp    _Td3;
// LINE 167:
_Tcb:
	return 0x0;
// LINE 168:
_Td3:
	__asm        xor    eax, eax;
	__asm        mov    al, digitval;
	__asm        mov    ecx, result;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    result, eax;
// LINE 169:
	digit++;
// LINE 170:
	__asm        jmp    _T14;
// LINE 171:
_Teb:
	num[0] = result;
// LINE 172:
	return 0x1;
// LINE 173:
}

// FUNCTION: COPTER_D 0x005660be
void Num2HexStr(unsigned long num, unsigned char * str) {
	/*bp-0x4*/   unsigned long sixteenPower;
	/*bp-0x8*/   int32_t power;

// LINE 177:
	power = 0x0;
// LINE 178:
	sixteenPower = 0x1;
// LINE 180:
	__asm        cmp    num, 0;
	__asm        jne    _T33;
// LINE 182:
	str[0] = 0x1;
// LINE 183:
	str[1] = 0x30;
// LINE 184:
	return;
// LINE 187:
_T33:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    sixteenPower;
	__asm        test   eax, eax;
	__asm        je     _T7f;
// LINE 189:
	power++;
// LINE 190:
	__asm        cmp    power, 7;
	__asm        jle    _T6c;

	__asm        push   0x8C085;
	__asm        push   0x5BF5A4;
	__asm        push   0xBE;
	__asm        push   0x5BF5B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 191:
_T6c:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx], 0x30;
// LINE 192:
	__asm        shl    sixteenPower, 4;
// LINE 193:
	__asm        jmp    _T33;
// LINE 195:
_T7f:
	str[0] = reinterpret_cast<uint8_t>(power);
// LINE 196:
	power = 0x1;
// LINE 197:
_T8e:
	__asm        cmp    num, 0;
	__asm        je     _Tec;
// LINE 199:
// Block start:
	/*bp-0xc*/   long digit;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    sixteenPower;
	__asm        mov    digit, eax;
// LINE 200:
	__asm        shr    sixteenPower, 4;
// LINE 201:
	__asm        cmp    digit, 9;
	__asm        jle    _Tc5;
// LINE 202:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x37;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 203:
	__asm        jmp    _Td4;
// LINE 204:
_Tc5:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 205:
_Td4:
	__asm        xor    eax, eax;
	__asm        mov    ecx, digit;
	__asm        imul   ecx, sixteenPower;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    num, eax;
// LINE 206:
	power++;
// LINE 207:
// Block end:
	__asm        jmp    _T8e;
// LINE 208:
_Tec:
	return;
}

// FUNCTION: COPTER_D 0x005661b4
void Long2PStr(unsigned long namelet, unsigned char * name) {
// LINE 215:
	name[0] = 0x4;
// LINE 216:
	__asm        mov    eax, namelet;
	__asm        shr    eax, 0x18;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+1], al;
// LINE 217:
	__asm        mov    eax, namelet;
	__asm        shr    eax, 0x10;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+2], al;
// LINE 218:
	__asm        mov    eax, namelet;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+3], ah;
// LINE 219:
	name[4] = reinterpret_cast<uint8_t>(namelet);
// LINE 220:
	return;
}

// FUNCTION: COPTER_D 0x005661f4
unsigned long PStr2Long(unsigned char * name) {
// LINE 224:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jne    _T24;
// LINE 225:
	return 0x0;
// LINE 226:
	__asm        jmp    __RETURN;
// LINE 227:
// Block start:
	/*bp-0x4*/   unsigned long name4;
_T24:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 4;
	__asm        jge    _T50;

	__asm        push   0x8C085;
	__asm        push   0x5BF5D4;
	__asm        push   0xE3;
	__asm        push   0x5BF614;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 228:
_T50:
	__asm        mov    eax, name;
	__asm        mov    eax, [eax+1];
	__asm        mov    name4, eax;
// LINE 229:
	__asm        lea    eax, name4;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 230:
	return name4;
// LINE 232:
// Block end:
__RETURN:
}

// FUNCTION: COPTER_D 0x00566266
void CToPString(signed char * cstr, unsigned char * pstr) {
	/*bp-0x4*/   int32_t count;

// LINE 260:
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, pstr;
	__asm        mov    [ecx], al;
// LINE 261:
	count = 0x0;
	__asm        jmp    _T29;
_T26:
	count++;
_T29:
	__asm        mov    eax, pstr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, count;
	__asm        jl     _T51;
// LINE 262:
	__asm        mov    eax, count;
	__asm        mov    ecx, cstr;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, count;
	__asm        mov    edx, pstr;
	__asm        mov    [ecx+edx+1], al;
	__asm        jmp    _T26;
// LINE 263:
_T51:
	return;
}

// FUNCTION: COPTER_D 0x005662c1
short Round(float val) {
	/*bp-0x8*/   double dint; // 0x8 bytes
	/*bp-0xc*/   short intval;
	/*bp-0x14*/  double frac; // 0x8 bytes

// LINE 270:
	__asm        lea    eax, dint;
	__asm        push   eax;
	__asm        fld    val;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x00575810;
	__asm        add    esp, 0xC;
// LINE 271:
	__asm        fcom   qword ptr ds:[0x593A18];
	__asm        fstp   frac;
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        jne    _T43;

	__asm        fld    dint;
	__asm        fadd   qword ptr ds:[0x593A20];
	__asm        fstp   dint;
// LINE 272:
	__asm        jmp    _T63;
_T43:
	__asm        fld    frac;
	__asm        fcomp  qword ptr ds:[0x593A28];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T63;
// LINE 276:
	__asm        fld    dint;
	__asm        fsub   qword ptr ds:[0x593A20];
	__asm        fstp   dint;
// LINE 278:
_T63:
	__asm        fld    dint;
	__asm        call   0x0056EBE8;
	__asm        mov    intval, ax;
// LINE 279:
	return intval;
// LINE 280:
}

// FUNCTION: COPTER_D 0x0056633e
void CToPStr(signed char * cstr, unsigned char * pstr) {
// LINE 366:
	pstr[0] = 0x0;
// LINE 367:
_T0f:
	__asm        mov    eax, cstr;
	__asm        movsx  eax, byte ptr [eax];
	__asm        test   eax, eax;
	__asm        je     _T54;

	__asm        mov    eax, pstr;
	__asm        mov    al, [eax];
	__asm        mov    [ebp-4], al;
	__asm        mov    eax, pstr;
	__asm        inc    byte ptr [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, [ebp-4];
	__asm        cmp    eax, 0xFF;
	__asm        je     _T54;

	__asm        mov    eax, cstr;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pstr;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, pstr;
	__asm        mov    [edx+ecx], al;
	__asm        inc    cstr;
	__asm        jmp    _T0f;
// LINE 368:
_T54:
	return;
}

// FUNCTION: COPTER_D 0x0056639c
void ConcatPStr(unsigned char * str1, unsigned char * str2, short destSize) {
	/*bp-0x4*/   unsigned short copyBytes;

// LINE 445:
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, str1;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        add    ecx, edx;
	__asm        movsx  eax, destSize;
	__asm        cmp    ecx, eax;
	__asm        jl     _T3c;
// LINE 446:
	__asm        movsx  eax, destSize;
	__asm        mov    ecx, str2;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        sub    eax, edx;
	__asm        dec    eax;
	__asm        mov    copyBytes, ax;
// LINE 447:
	__asm        jmp    _T47;
// LINE 448:
_T3c:
	__asm        mov    eax, str1;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    copyBytes, ax;
// LINE 450:
_T47:
	__asm        mov    eax, reinterpret_cast<uint32_t>(copyBytes);
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        add    ecx, str2;
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, str1;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 451:
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, reinterpret_cast<uint32_t>(copyBytes);
	__asm        and    eax, 0xFFFF;
	__asm        add    ecx, eax;
	__asm        mov    eax, str2;
	__asm        mov    [eax], cl;
// LINE 452:
	return;
}

// FUNCTION: COPTER_D 0x00566425
void ConcatCPStr(char * src, unsigned char * dest, short destSize) {
	/*bp-0x100*/ unsigned char buff[256]; // 0x100 bytes

// LINE 456:
	__asm        push   0x100;
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 457:
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        call   CtoPstr;
	__asm        add    esp, 4;
// LINE 459:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destSize);
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        call   ConcatPStr;
	__asm        add    esp, 0xC;
// LINE 460:
	return;
}

// FUNCTION: COPTER_D 0x00566479
void ConcatNum(long number, unsigned char * str, short destSize) {
	/*bp-0x100*/ unsigned char numStr[256]; // 0x100 bytes

// LINE 467:
	__asm        lea    eax, numStr[0];
	__asm        push   eax;
	__asm        mov    eax, number;
	__asm        push   eax;
	__asm        call   Num2Str;
	__asm        add    esp, 8;
// LINE 468:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destSize);
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        lea    eax, numStr[0];
	__asm        push   eax;
	__asm        call   ConcatPStr;
	__asm        add    esp, 0xC;
// LINE 469:
	return;
}

// FUNCTION: COPTER_D 0x005664b9
void HexToString(unsigned long num, unsigned char * str) {
	/*bp-0x4*/   signed char letter;
	/*bp-0x8*/   short position;

// LINE 500:
	position = 0x1c;
// LINE 503:
	str[0] = 0x1;
// LINE 504:
	str[1] = 0x78;
// LINE 506:
_T1c:
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jl     _T51;

	__asm        mov    ebx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    ebx, cl;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        test   eax, eax;
	__asm        jne    _T51;
// LINE 507:
	__asm        movsx  eax, position;
	__asm        sub    eax, 4;
	__asm        mov    position, ax;
	__asm        jmp    _T1c;
// LINE 509:
_T51:
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jge    _T75;
// LINE 511:
	__asm        mov    eax, str;
	__asm        inc    byte ptr [eax];
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, str;
	__asm        mov    byte ptr [ecx+eax], 0x30;
// LINE 512:
	return;
// LINE 515:
_T75:
	__asm        jmp    _T85;
_T7a:
	__asm        movsx  eax, position;
	__asm        sub    eax, 4;
	__asm        mov    position, ax;
_T85:
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jl     _Tf4;
// LINE 517:
	__asm        mov    ebx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    ebx, cl;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    letter, al;
// LINE 518:
	__asm        mov    eax, 0xF;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        and    num, eax;
// LINE 519:
	__asm        movsx  eax, letter;
	__asm        cmp    eax, 9;
	__asm        jle    _Td0;

	__asm        movsx  eax, letter;
	__asm        add    eax, 0x37;
	__asm        mov    letter, al;
// LINE 520:
	__asm        jmp    _Tda;
_Td0:
	__asm        movsx  eax, letter;
	__asm        add    eax, 0x30;
	__asm        mov    letter, al;
// LINE 521:
_Tda:
	__asm        mov    eax, str;
	__asm        inc    byte ptr [eax];
	__asm        mov    al, letter;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, str;
	__asm        mov    [edx+ecx], al;
// LINE 522:
	__asm        jmp    _T7a;
// LINE 523:
_Tf4:
	return;
}

// FUNCTION: COPTER_D 0x005665b7
int32_t PStrCompare(void * __ptr32 voidFirst, void * __ptr32 voidSecond) {
	/*bp-0x4*/   unsigned char * first;
	/*bp-0x8*/   short count;
	/*bp-0xc*/   unsigned char * second;
	/*bp-0x10*/  short numChars;
	/*bp-0x14*/  unsigned char char1;
	/*bp-0x18*/  unsigned char char2;

// LINE 907:
	first = voidFirst;
	second = voidSecond;
// LINE 911:
	__asm        mov    eax, first;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    numChars, ax;
// LINE 912:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        movsx  eax, numChars;
	__asm        cmp    ecx, eax;
	__asm        jge    _T3e;

	__asm        mov    eax, second;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    numChars, ax;
// LINE 913:
_T3e:
	count = 0x1;
	__asm        jmp    _T4d;
_T49:
	count++;
_T4d:
	__asm        movsx  eax, numChars;
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jl     _T102;
// LINE 915:
	__asm        movsx  eax, count;
	__asm        mov    ecx, first;
	__asm        mov    al, [eax+ecx];
	__asm        mov    char1, al;
// LINE 916:
	__asm        movsx  eax, count;
	__asm        mov    ecx, second;
	__asm        mov    al, [eax+ecx];
	__asm        mov    char2, al;
// LINE 917:
	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        cmp    eax, 0x61;
	__asm        jl     _T9e;

	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        cmp    eax, 0x7A;
	__asm        jg     _T9e;

	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        sub    eax, 0x20;
	__asm        mov    char1, al;
// LINE 918:
_T9e:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        cmp    eax, 0x61;
	__asm        jl     _Tc5;

	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        cmp    eax, 0x7A;
	__asm        jg     _Tc5;

	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        sub    eax, 0x20;
	__asm        mov    char2, al;
// LINE 919:
_Tc5:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, char1;
	__asm        cmp    eax, ecx;
	__asm        jge    _Te1;

	return 0x1;
// LINE 920:
_Te1:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, char1;
	__asm        cmp    eax, ecx;
	__asm        jle    _Tfd;

	return 0xffffffff;
// LINE 921:
_Tfd:
	__asm        jmp    _T49;
// LINE 922:
_T102:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, first;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        jge    _T122;

	return 0x1;
// LINE 923:
_T122:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, first;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        jle    _T142;

	return 0xffffffff;
// LINE 924:
_T142:
	return 0x0;
// LINE 925:
}

// FUNCTION: COPTER_D 0x00566705
void ExtractFileName(unsigned char * path, unsigned char * name) {
	/*bp-0x4*/   short place;

// LINE 929:
	__asm        mov    eax, path;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    place, ax;
// LINE 930:
_T14:
	__asm        movsx  eax, place;
	__asm        mov    ecx, path;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x3A;
	__asm        je     _T3e;

	__asm        movsx  eax, place;
	__asm        test   eax, eax;
	__asm        jle    _T3e;
// LINE 931:
	place--;
	__asm        jmp    _T14;
// LINE 933:
_T3e:
	__asm        mov    eax, path;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        movsx  eax, place;
	__asm        sub    ecx, eax;
	__asm        mov    eax, name;
	__asm        mov    [eax], cl;
// LINE 934:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    eax, name;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        movsx  eax, place;
	__asm        add    eax, path;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 935:
	return;
}

// FUNCTION: COPTER_D 0x0056677d
void MyTextBox(char * cString, long strLen, /*unpacked*/ struct Rect *rect, short justType) {
// LINE 1076:
	__asm        movsx  eax, justType;
	__asm        cmp    eax, 1;
	__asm        jne    _T26;
// LINE 1077:
	__asm        push   6;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1078:
	__asm        jmp    _T54;
_T26:
	__asm        movsx  eax, justType;
	__asm        cmp    eax, 0xFFFFFFFE;
	__asm        jne    _T46;
// LINE 1079:
	__asm        push   0;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1080:
	__asm        jmp    _T54;
// LINE 1081:
_T46:
	__asm        push   2;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1082:
_T54:
	__asm        mov    eax, strLen;
	__asm        push   eax;
	__asm        mov    eax, cString;
	__asm        push   eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        push   eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        push   eax;
	__asm        mov    eax, gPort.dc;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3558];
// LINE 1084:
	return;
}

// FUNCTION: COPTER_D 0x005667fe
/*unpacked*/ struct Point center(/*unpacked*/ struct Rect *pRect) {
	/*bp-0x4*/   /*unpacked*/ struct Point tmp;

// LINE 1255:
	__asm        mov    eax, pRect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, pRect;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    tmp.v, ax;
// LINE 1257:
	__asm        mov    eax, pRect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, pRect;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    tmp.h, ax;
// LINE 1258:
	return reinterpret_cast<uint32_t>(tmp.v);
// LINE 1259:
}



// Contribution: 2:00004a18-00004a2f Module: 184, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00028570-00028630 Module: 184, 4 byte alignment, initialized_data, read, write, 
