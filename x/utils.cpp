// Module: Utils.obj
// Source: C:\Copter\Source\X\Utils.cpp
// autogenerated by simcopter_tool from PDB file

// Type: unsigned char *;

// Type: void;

// Type: long *;

// Type: unsigned char;

// Type: unsigned short;

// Type: long;

// Type: int32_t;

// Type: unsigned long;

// Type: unsigned long *;

// Type: char *;

// Type: float;

// Type: double;

// Type: short;

// Type: char *;

// Type: unsigned char[256];

// Type: char;

// Type: void * __ptr32;

// Type: struct Rect (forward reference);

// Type: struct Point;
struct Point{
	short v;
	short h;
};

// Type: struct Point (forward reference);



// Contribution: 1:00164ca0-00165846 Module: 184, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00565ca0
void EmptyPStr(unsigned char * str) {
// LINE 55:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax], 0;
// LINE 56:
	__asm        jmp    near ptr 0x00565CB1;
}

// FUNCTION: COPTER_D 0x00565cb6
unsigned short Str2Num(unsigned char * str, long * num) {
	unsigned char digit;
	unsigned char count;
	unsigned short neg;

// LINE 62:
	__asm        mov    neg, 0;
// LINE 65:
	__asm        mov    count, 1;
// LINE 66:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    near ptr 0x00565CFB;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00565CFB;
// LINE 67:
	__asm        inc    count;
	__asm        jmp    near ptr 0x00565CC9;
// LINE 68:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00565D4C;
// LINE 70:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x2D;
	__asm        jne    near ptr 0x00565D33;
// LINE 72:
	__asm        mov    neg, 1;
// LINE 73:
	__asm        inc    count;
// LINE 75:
	__asm        jmp    near ptr 0x00565D4C;
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x2B;
	__asm        jne    near ptr 0x00565D4C;
// LINE 77:
	__asm        inc    count;
// LINE 80:
	__asm        mov    al, count;
	__asm        mov    digit, al;
// LINE 81:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     near ptr 0x00565D9A;
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     near ptr 0x00565D9A;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00565D9A;
// LINE 82:
	__asm        inc    count;
	__asm        jmp    near ptr 0x00565D52;
// LINE 83:
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    near ptr 0x00565DCC;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00565DCC;
// LINE 84:
	__asm        inc    count;
	__asm        jmp    near ptr 0x00565D9A;
// LINE 86:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, count;
	__asm        cmp    ecx, eax;
	__asm        jle    near ptr 0x00565DE8;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00565E7B;
// LINE 88:
	__asm        mov    eax, num;
	__asm        mov    dword ptr [eax], 0;
// LINE 89:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     near ptr 0x00565E59;
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     near ptr 0x00565E59;
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00565E59;
// LINE 91:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    eax, num;
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [edx+eax*2];
	__asm        sub    eax, 0x30;
	__asm        mov    ecx, num;
	__asm        mov    [ecx], eax;
// LINE 92:
	__asm        inc    digit;
// LINE 93:
	__asm        jmp    near ptr 0x00565DF1;
// LINE 94:
	__asm        test   reinterpret_cast<uint32_t>(neg), 0xFFFF;
	__asm        je     near ptr 0x00565E72;
	__asm        mov    eax, num;
	__asm        mov    eax, [eax];
	__asm        neg    eax;
	__asm        mov    ecx, num;
	__asm        mov    [ecx], eax;
// LINE 95:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x00565E7B;
// LINE 96:
}

// FUNCTION: COPTER_D 0x00565e80
void Num2Str(long num, unsigned char * str) {
	int32_t power;
	unsigned short neg;
	unsigned long tenPower;

// LINE 100:
	__asm        mov    power, 0;
// LINE 101:
	__asm        mov    tenPower, 1;
// LINE 104:
	__asm        cmp    num, 0;
	__asm        jge    near ptr 0x00565EB4;
// LINE 106:
	__asm        mov    neg, 1;
// LINE 107:
	__asm        mov    eax, num;
	__asm        neg    eax;
	__asm        mov    num, eax;
// LINE 109:
	__asm        jmp    near ptr 0x00565EBA;
// LINE 110:
	__asm        mov    neg, 0;
// LINE 112:
	__asm        cmp    num, 0;
	__asm        jne    near ptr 0x00565ED6;
// LINE 114:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax], 1;
// LINE 115:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax+1], 0x30;
// LINE 116:
	__asm        jmp    near ptr 0x00565FB8;
// LINE 119:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    tenPower;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00565F26;
// LINE 121:
	__asm        inc    power;
// LINE 122:
	__asm        cmp    power, 0xA;
	__asm        jle    near ptr 0x00565F0C;
	__asm        push   0x8C085;
	__asm        push   0x5BF570;
	__asm        push   0x7A;
	__asm        push   0x5BF584;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 124:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx], 0x30;
// LINE 125:
	__asm        mov    eax, tenPower;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    tenPower, eax;
// LINE 126:
	__asm        jmp    near ptr 0x00565ED6;
// LINE 129:
	__asm        test   reinterpret_cast<uint32_t>(neg), 0xFFFF;
	__asm        je     near ptr 0x00565F5A;
// LINE 131:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx+1], 0x30;
// LINE 132:
	__asm        mov    eax, power;
	__asm        inc    eax;
	__asm        mov    ecx, str;
	__asm        mov    [ecx], al;
// LINE 133:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax+1], 0x2D;
// LINE 134:
	__asm        mov    power, 2;
// LINE 136:
	__asm        jmp    near ptr 0x00565F69;
// LINE 138:
	__asm        mov    al, reinterpret_cast<uint8_t>(power);
	__asm        mov    ecx, str;
	__asm        mov    [ecx], al;
// LINE 139:
	__asm        mov    power, 1;
// LINE 142:
	__asm        cmp    num, 0;
	__asm        je     near ptr 0x00565FB3;
// LINE 144:
// Block start:
	long digit;
	__asm        mov    ecx, 0xA;
	__asm        mov    eax, tenPower;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    tenPower, eax;
// LINE 145:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    tenPower;
	__asm        mov    digit, eax;
// LINE 146:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 147:
	__asm        mov    eax, num;
	__asm        mov    ecx, tenPower;
	__asm        imul   ecx, digit;
	__asm        sub    eax, ecx;
	__asm        mov    num, eax;
// LINE 148:
	__asm        inc    power;
// LINE 149:
// Block end:
	__asm        jmp    near ptr 0x00565F69;
// LINE 150:
	__asm        jmp    near ptr 0x00565FB8;
}

// FUNCTION: COPTER_D 0x00565fbd
unsigned short HexStr2Num(unsigned char * str, unsigned long * num) {
	unsigned char digit;
	unsigned char digitval;
	unsigned long result;

// LINE 155:
	__asm        mov    digit, 1;
// LINE 157:
	__asm        mov    result, 0;
// LINE 158:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x005660A8;
// LINE 160:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x20;
	__asm        jne    near ptr 0x00566000;
// LINE 161:
	__asm        jmp    near ptr 0x00565FD1;
// LINE 162:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x30;
	__asm        jl     near ptr 0x00566044;
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x39;
	__asm        jg     near ptr 0x00566044;
// LINE 163:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        sub    edx, 0x30;
	__asm        mov    digitval, dl;
// LINE 164:
	__asm        jmp    near ptr 0x00566090;
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x41;
	__asm        jl     near ptr 0x00566088;
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x46;
	__asm        jg     near ptr 0x00566088;
// LINE 165:
	__asm        xor    eax, eax;
	__asm        mov    al, digit;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        sub    edx, 0x37;
	__asm        mov    digitval, dl;
// LINE 166:
	__asm        jmp    near ptr 0x00566090;
// LINE 167:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005660B9;
// LINE 168:
	__asm        xor    eax, eax;
	__asm        mov    al, digitval;
	__asm        mov    ecx, result;
	__asm        shl    ecx, 4;
	__asm        add    eax, ecx;
	__asm        mov    result, eax;
// LINE 169:
	__asm        inc    digit;
// LINE 170:
	__asm        jmp    near ptr 0x00565FD1;
// LINE 171:
	__asm        mov    eax, result;
	__asm        mov    ecx, num;
	__asm        mov    [ecx], eax;
// LINE 172:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005660B9;
// LINE 173:
}

// FUNCTION: COPTER_D 0x005660be
void Num2HexStr(unsigned long num, unsigned char * str) {
	int32_t power;
	unsigned long sixteenPower;

// LINE 177:
	__asm        mov    power, 0;
// LINE 178:
	__asm        mov    sixteenPower, 1;
// LINE 180:
	__asm        cmp    num, 0;
	__asm        jne    near ptr 0x005660F1;
// LINE 182:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax], 1;
// LINE 183:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax+1], 0x30;
// LINE 184:
	__asm        jmp    near ptr 0x005661AF;
// LINE 187:
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    sixteenPower;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0056613D;
// LINE 189:
	__asm        inc    power;
// LINE 190:
	__asm        cmp    power, 7;
	__asm        jle    near ptr 0x0056612A;
	__asm        push   0x8C085;
	__asm        push   0x5BF5A4;
	__asm        push   0xBE;
	__asm        push   0x5BF5B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 191:
	__asm        mov    eax, power;
	__asm        mov    ecx, str;
	__asm        mov    byte ptr [eax+ecx], 0x30;
// LINE 192:
	__asm        shl    sixteenPower, 4;
// LINE 193:
	__asm        jmp    near ptr 0x005660F1;
// LINE 195:
	__asm        mov    al, reinterpret_cast<uint8_t>(power);
	__asm        mov    ecx, str;
	__asm        mov    [ecx], al;
// LINE 196:
	__asm        mov    power, 1;
// LINE 197:
	__asm        cmp    num, 0;
	__asm        je     near ptr 0x005661AA;
// LINE 199:
// Block start:
	long digit;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    sixteenPower;
	__asm        mov    digit, eax;
// LINE 200:
	__asm        shr    sixteenPower, 4;
// LINE 201:
	__asm        cmp    digit, 9;
	__asm        jle    near ptr 0x00566183;
// LINE 202:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x37;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 203:
	__asm        jmp    near ptr 0x00566192;
// LINE 204:
	__asm        mov    eax, digit;
	__asm        add    eax, 0x30;
	__asm        mov    ecx, power;
	__asm        mov    edx, str;
	__asm        mov    [ecx+edx], al;
// LINE 205:
	__asm        xor    eax, eax;
	__asm        mov    ecx, digit;
	__asm        imul   ecx, sixteenPower;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        sub    num, eax;
// LINE 206:
	__asm        inc    power;
// LINE 207:
// Block end:
	__asm        jmp    near ptr 0x0056614C;
// LINE 208:
	__asm        jmp    near ptr 0x005661AF;
}

// FUNCTION: COPTER_D 0x005661b4
void Long2PStr(unsigned long namelet, unsigned char * name) {
// LINE 215:
	__asm        mov    eax, name;
	__asm        mov    byte ptr [eax], 4;
// LINE 216:
	__asm        mov    eax, namelet;
	__asm        shr    eax, 0x18;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+1], al;
// LINE 217:
	__asm        mov    eax, namelet;
	__asm        shr    eax, 0x10;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+2], al;
// LINE 218:
	__asm        mov    eax, namelet;
	__asm        mov    ecx, name;
	__asm        mov    [ecx+3], ah;
// LINE 219:
	__asm        mov    al, reinterpret_cast<uint8_t>(namelet);
	__asm        mov    ecx, name;
	__asm        mov    [ecx+4], al;
// LINE 220:
	__asm        jmp    near ptr 0x005661EF;
}

// FUNCTION: COPTER_D 0x005661f4
unsigned long PStr2Long(unsigned char * name) {
// LINE 224:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x00566218;
// LINE 225:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00566261;
// LINE 226:
	__asm        jmp    near ptr 0x00566261;
// LINE 227:
// Block start:
	unsigned long name4;
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 4;
	__asm        jge    near ptr 0x00566244;
	__asm        push   0x8C085;
	__asm        push   0x5BF5D4;
	__asm        push   0xE3;
	__asm        push   0x5BF614;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 228:
	__asm        mov    eax, name;
	__asm        mov    eax, [eax+1];
	__asm        mov    name4, eax;
// LINE 229:
	__asm        lea    eax, name4;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 230:
	__asm        mov    eax, name4;
	__asm        jmp    near ptr 0x00566261;
// LINE 232:
// Block end:
}

// FUNCTION: COPTER_D 0x00566266
void CToPString(char * cstr, unsigned char * pstr) {
	int32_t count;

// LINE 260:
	__asm        mov    eax, cstr;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, pstr;
	__asm        mov    [ecx], al;
// LINE 261:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0056628F;
	__asm        inc    count;
	__asm        mov    eax, pstr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, count;
	__asm        jl     near ptr 0x005662B7;
// LINE 262:
	__asm        mov    eax, count;
	__asm        mov    ecx, cstr;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, count;
	__asm        mov    edx, pstr;
	__asm        mov    [ecx+edx+1], al;
	__asm        jmp    near ptr 0x0056628C;
// LINE 263:
	__asm        jmp    near ptr 0x005662BC;
}

// FUNCTION: COPTER_D 0x005662c1
short Round(float val) {
	double frac;
	short intval;
	double dint;

// LINE 270:
	__asm        lea    eax, dint;
	__asm        push   eax;
	__asm        fld    val;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x00575810;
	__asm        add    esp, 0xC;
// LINE 271:
	__asm        fcom   qword ptr ds:[0x593A18];
	__asm        fstp   frac;
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        jne    near ptr 0x00566304;
	__asm        fld    dint;
	__asm        fadd   qword ptr ds:[0x593A20];
	__asm        fstp   dint;
// LINE 272:
	__asm        jmp    near ptr 0x00566324;
	__asm        fld    frac;
	__asm        fcomp  qword ptr ds:[0x593A28];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     near ptr 0x00566324;
// LINE 276:
	__asm        fld    dint;
	__asm        fsub   qword ptr ds:[0x593A20];
	__asm        fstp   dint;
// LINE 278:
	__asm        fld    dint;
	__asm        call   0x0056EBE8;
	__asm        mov    intval, ax;
// LINE 279:
	__asm        mov    ax, intval;
	__asm        jmp    near ptr 0x00566339;
// LINE 280:
}

// FUNCTION: COPTER_D 0x0056633e
void CToPStr(char * cstr, unsigned char * pstr) {
// LINE 366:
	__asm        mov    eax, pstr;
	__asm        mov    byte ptr [eax], 0;
// LINE 367:
	__asm        mov    eax, cstr;
	__asm        movsx  eax, byte ptr [eax];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00566392;
	__asm        mov    eax, pstr;
	__asm        mov    al, [eax];
	__asm        mov    [ebp-4], al;
	__asm        mov    eax, pstr;
	__asm        inc    byte ptr [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, [ebp-4];
	__asm        cmp    eax, 0xFF;
	__asm        je     near ptr 0x00566392;
	__asm        mov    eax, cstr;
	__asm        mov    al, [eax];
	__asm        mov    ecx, pstr;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, pstr;
	__asm        mov    [edx+ecx], al;
	__asm        inc    cstr;
	__asm        jmp    near ptr 0x0056634D;
// LINE 368:
	__asm        jmp    near ptr 0x00566397;
}

// FUNCTION: COPTER_D 0x0056639c
void ConcatPStr(unsigned char * str1, unsigned char * str2, short destSize) {
	unsigned short copyBytes;

// LINE 445:
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, str1;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        add    ecx, edx;
	__asm        movsx  eax, destSize;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x005663D8;
// LINE 446:
	__asm        movsx  eax, destSize;
	__asm        mov    ecx, str2;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        sub    eax, edx;
	__asm        dec    eax;
	__asm        mov    copyBytes, ax;
// LINE 447:
	__asm        jmp    near ptr 0x005663E3;
// LINE 448:
	__asm        mov    eax, str1;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    copyBytes, ax;
// LINE 450:
	__asm        mov    eax, reinterpret_cast<uint32_t>(copyBytes);
	__asm        and    eax, 0xFFFF;
	__asm        push   eax;
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        add    ecx, str2;
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, str1;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 451:
	__asm        mov    eax, str2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, reinterpret_cast<uint32_t>(copyBytes);
	__asm        and    eax, 0xFFFF;
	__asm        add    ecx, eax;
	__asm        mov    eax, str2;
	__asm        mov    [eax], cl;
// LINE 452:
	__asm        jmp    near ptr 0x00566420;
}

// FUNCTION: COPTER_D 0x00566425
void ConcatCPStr(char * src, unsigned char * dest, short destSize) {
	unsigned char buff[256];

// LINE 456:
	__asm        push   0x100;
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 457:
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        call   CtoPstr;
	__asm        add    esp, 4;
// LINE 459:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destSize);
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        lea    eax, buff[0];
	__asm        push   eax;
	__asm        call   ConcatPStr;
	__asm        add    esp, 0xC;
// LINE 460:
	__asm        jmp    near ptr 0x00566474;
}

// FUNCTION: COPTER_D 0x00566479
void ConcatNum(long number, unsigned char * str, short destSize) {
	unsigned char numStr[256];

// LINE 467:
	__asm        lea    eax, numStr[0];
	__asm        push   eax;
	__asm        mov    eax, number;
	__asm        push   eax;
	__asm        call   Num2Str;
	__asm        add    esp, 8;
// LINE 468:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destSize);
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        lea    eax, numStr[0];
	__asm        push   eax;
	__asm        call   ConcatPStr;
	__asm        add    esp, 0xC;
// LINE 469:
	__asm        jmp    near ptr 0x005664B4;
}

// FUNCTION: COPTER_D 0x005664b9
void HexToString(unsigned long num, unsigned char * str) {
	short position;
	char letter;

// LINE 500:
	__asm        mov    position, 0x1C;
// LINE 503:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax], 1;
// LINE 504:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax+1], 0x78;
// LINE 506:
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0056650A;
	__asm        mov    ebx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    ebx, cl;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0056650A;
// LINE 507:
	__asm        movsx  eax, position;
	__asm        sub    eax, 4;
	__asm        mov    position, ax;
	__asm        jmp    near ptr 0x005664D5;
// LINE 509:
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0056652E;
// LINE 511:
	__asm        mov    eax, str;
	__asm        inc    byte ptr [eax];
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, str;
	__asm        mov    byte ptr [ecx+eax], 0x30;
// LINE 512:
	__asm        jmp    near ptr 0x005665B2;
// LINE 515:
	__asm        jmp    near ptr 0x0056653E;
	__asm        movsx  eax, position;
	__asm        sub    eax, 4;
	__asm        mov    position, ax;
	__asm        movsx  eax, position;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005665AD;
// LINE 517:
	__asm        mov    ebx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    ebx, cl;
	__asm        mov    eax, num;
	__asm        sub    edx, edx;
	__asm        div    ebx;
	__asm        mov    letter, al;
// LINE 518:
	__asm        mov    eax, 0xF;
	__asm        mov    cl, reinterpret_cast<uint8_t>(position);
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        and    num, eax;
// LINE 519:
	__asm        movsx  eax, letter;
	__asm        cmp    eax, 9;
	__asm        jle    near ptr 0x00566589;
	__asm        movsx  eax, letter;
	__asm        add    eax, 0x37;
	__asm        mov    letter, al;
// LINE 520:
	__asm        jmp    near ptr 0x00566593;
	__asm        movsx  eax, letter;
	__asm        add    eax, 0x30;
	__asm        mov    letter, al;
// LINE 521:
	__asm        mov    eax, str;
	__asm        inc    byte ptr [eax];
	__asm        mov    al, letter;
	__asm        mov    ecx, str;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, str;
	__asm        mov    [edx+ecx], al;
// LINE 522:
	__asm        jmp    near ptr 0x00566533;
// LINE 523:
	__asm        jmp    near ptr 0x005665B2;
}

// FUNCTION: COPTER_D 0x005665b7
int32_t PStrCompare(void * __ptr32 voidFirst, void * __ptr32 voidSecond) {
	unsigned char char2;
	unsigned char char1;
	short numChars;
	unsigned char * second;
	short count;
	unsigned char * first;

// LINE 907:
	__asm        mov    eax, voidFirst;
	__asm        mov    first, eax;
	__asm        mov    eax, voidSecond;
	__asm        mov    second, eax;
// LINE 911:
	__asm        mov    eax, first;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    numChars, ax;
// LINE 912:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        movsx  eax, numChars;
	__asm        cmp    ecx, eax;
	__asm        jge    near ptr 0x005665F5;
	__asm        mov    eax, second;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    numChars, ax;
// LINE 913:
	__asm        mov    count, 1;
	__asm        jmp    near ptr 0x00566604;
	__asm        inc    count;
	__asm        movsx  eax, numChars;
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005666B9;
// LINE 915:
	__asm        movsx  eax, count;
	__asm        mov    ecx, first;
	__asm        mov    al, [eax+ecx];
	__asm        mov    char1, al;
// LINE 916:
	__asm        movsx  eax, count;
	__asm        mov    ecx, second;
	__asm        mov    al, [eax+ecx];
	__asm        mov    char2, al;
// LINE 917:
	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        cmp    eax, 0x61;
	__asm        jl     near ptr 0x00566655;
	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        cmp    eax, 0x7A;
	__asm        jg     near ptr 0x00566655;
	__asm        xor    eax, eax;
	__asm        mov    al, char1;
	__asm        sub    eax, 0x20;
	__asm        mov    char1, al;
// LINE 918:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        cmp    eax, 0x61;
	__asm        jl     near ptr 0x0056667C;
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        cmp    eax, 0x7A;
	__asm        jg     near ptr 0x0056667C;
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        sub    eax, 0x20;
	__asm        mov    char2, al;
// LINE 919:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, char1;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00566698;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00566700;
// LINE 920:
	__asm        xor    eax, eax;
	__asm        mov    al, char2;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, char1;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x005666B4;
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00566700;
// LINE 921:
	__asm        jmp    near ptr 0x00566600;
// LINE 922:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, first;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        jge    near ptr 0x005666D9;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00566700;
// LINE 923:
	__asm        mov    eax, second;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, first;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        cmp    ecx, edx;
	__asm        jle    near ptr 0x005666F9;
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00566700;
// LINE 924:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00566700;
// LINE 925:
}

// FUNCTION: COPTER_D 0x00566705
void ExtractFileName(unsigned char * path, unsigned char * name) {
	short place;

// LINE 929:
	__asm        mov    eax, path;
	__asm        movzx  ax, byte ptr [eax];
	__asm        mov    place, ax;
// LINE 930:
	__asm        movsx  eax, place;
	__asm        mov    ecx, path;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        cmp    edx, 0x3A;
	__asm        je     near ptr 0x00566743;
	__asm        movsx  eax, place;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00566743;
// LINE 931:
	__asm        dec    place;
	__asm        jmp    near ptr 0x00566719;
// LINE 933:
	__asm        mov    eax, path;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        movsx  eax, place;
	__asm        sub    ecx, eax;
	__asm        mov    eax, name;
	__asm        mov    [eax], cl;
// LINE 934:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    eax, name;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        movsx  eax, place;
	__asm        add    eax, path;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 935:
	__asm        jmp    near ptr 0x00566778;
}

// FUNCTION: COPTER_D 0x0056677d
void MyTextBox(char * cString, long strLen, struct Rect* rect, short justType) {
// LINE 1076:
	__asm        movsx  eax, justType;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x005667A3;
// LINE 1077:
	__asm        push   6;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1078:
	__asm        jmp    near ptr 0x005667D1;
	__asm        movsx  eax, justType;
	__asm        cmp    eax, 0xFFFFFFFE;
	__asm        jne    near ptr 0x005667C3;
// LINE 1079:
	__asm        push   0;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1080:
	__asm        jmp    near ptr 0x005667D1;
// LINE 1081:
	__asm        push   2;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3554];
// LINE 1082:
	__asm        mov    eax, strLen;
	__asm        push   eax;
	__asm        mov    eax, cString;
	__asm        push   eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax];
	__asm        push   eax;
	__asm        mov    eax, rect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5BF63C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3558];
// LINE 1084:
	__asm        jmp    near ptr 0x005667F9;
}

// FUNCTION: COPTER_D 0x005667fe
struct Point center(struct Rect* pRect) {
	struct Point tmp;

// LINE 1255:
	__asm        mov    eax, pRect;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, pRect;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    tmp.v, ax;
// LINE 1257:
	__asm        mov    eax, pRect;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, pRect;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        add    eax, ecx;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    tmp.h, ax;
// LINE 1258:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tmp.v);
	__asm        jmp    near ptr 0x00566842;
// LINE 1259:
}



// Contribution: 2:00004a18-00004a2f Module: 184, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00028570-00028630 Module: 184, 4 byte alignment, initialized_data, read, write, 
