// Module: Treesim.obj
// Source: C:\Copter\Source\X\Behavior\Treesim.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class TreeSim (forward reference);
class TreeSim{
		enum __unnamed {
			kNumLocals = 4,
			kMaxIterations = 128,
		};
	class TreeSim::StackElem{
	public:
		short treeID;
		short nodeNum;
		short objectID;
		short _pad;
		unsigned char * objectPtr;
		short[4] locals;
		class Behavior* pBehavior;
		void GetTreeName(unsigned char *);
	};
private:
	struct TreeSim::StackElem* fStack;
	short fStackSize;
	short fMaxStackSize;
	short fIterations;
	short _pad;
	short * fAutoStackArea;
		enum ReturnCode {
			kTrueComplete = 1,
			kFalseComplete = 0,
			kEngaged = 2,
			kError = -1,
			kStackLoaded = 3,
		};
		enum __unnamed {
			kStackErrorBase = 1000,
			kStackOverflow = 1000,
			kUndefinedTransition = 1001,
			kTooManyIterations = 1002,
			kStackUnderflow = 1003,
			kStackErrorMax = 1004,
		};
protected:
	// vtable: 0
	intro enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 4
	intro void Error(short);
	void GetCurrentNode(short *, short *);
	void Reset(class Behavior*, short);
	char NodeComplete(unsigned short);
	unsigned short Gosub(class Behavior*, short *, short);
public:
	void TreeSim(short, short *);
	void TreeSim(short, short, class Behavior*, short *);
	// vtable: 8
	intro void ~TreeSim();
	// vtable: 12
	intro unsigned short Simulate(long, unsigned short);
	struct TreeSim::StackElem* GetHighLevelAction();
	struct TreeSim::StackElem* GetCurElem();
	struct TreeSim::StackElem* GetNthElem(short);
	short GetStackSize();
	short GetMaxStackSize();
};

// Type: short;

// Type: class Behavior (forward reference);
class Behavior{
protected:
	class NResFile* fGlobFile;
	class NResFile* fPrivFile;
	class StdResLoader* fGlobalTrees;
	class StdResLoader* fPrivateTrees;
	class Language* fLanguage;
	void (*)(void * __ptr32, long) fSwizzler;
		enum __unnamed {
			kPrimitiveBase = 0,
			kPrimitiveMax = 255,
			kActionBase = 256,
			kGlobalBase = 256,
			kGlobalMax = 4095,
			kPrivateBase = 4096,
			kPrivateMax = 8191,
			kSemiGlobalBase = 8192,
			kSemiGlobalMax = 30000,
			kTreeMax = 30000,
			kPrimitives = 0,
			kGlobalTrees = 1,
			kPrivateTrees = 2,
			kSemiGlobalTrees = 3,
			kMaxTreeClass = 3,
		};
	class Behavior::NodeParameter{
	public:
		short p1;
		short p2;
		short p3;
		short p4;
	};
	class Behavior::Node{
	public:
		short treeID;
		short primCode;
		char trueTrans;
		char falseTrans;
		struct Behavior::NodeParameter param;
	};
		enum __unnamed {
			kUndefined = -3,
			kPopOutTrue = -2,
			kPopOutFalse = -1,
		};
	class Behavior::Tree{
	public:
		short numNodes;
		struct Behavior::Node[1] nodes;
	};
public:
	void Behavior(class Language*, class NResFile*, class NResFile*);
	void ~Behavior();
	void GetNode(short, short, struct Behavior::Node*);
	// vtable: 0
	intro const struct Behavior::Node* GetNodeRef(short, short);
	// vtable: 4
	intro void Behavior(short, short, unsigned char *);
	void Behavior(struct Behavior::Node*, unsigned char *);
	// vtable: 8
	intro void GetTreeName(short, unsigned char *);
	short CountPrimitives();
	class Language* GetLanguage();
	class ResFile* GetPrivFile();
	class ResFile* GetGlobFile();
	// vtable: 12
	intro class ResFile* GetResFile(short);
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(struct Behavior::Tree*, long, void (*)(short, struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(struct Behavior::NodeParameter*);
};

// Type: short *;

// Type: void;

// Type: struct TreeSim::StackElem (forward reference);
class TreeSim::StackElem{
public:
	short treeID;
	short nodeNum;
	short objectID;
	short _pad;
	unsigned char * objectPtr;
	short[4] locals;
	class Behavior* pBehavior;
	void GetTreeName(unsigned char *);
};

// Type: unsigned short;

// Type: long;

// Type: struct Behavior::Node (forward reference);

// Type: enum TreeSim::ReturnCode;

// Type: char;

// Type: class ExtSim (forward reference);
class ExtSim : public TreeSim
{
private:
	struct TreeSim::StackElem* fStack;
	short fStackSize;
	short fMaxStackSize;
	short fIterations;
	short _pad;
	short * fAutoStackArea;
protected:
	// vtable: 0
	intro enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 4
	intro void Error(short);
	void GetCurrentNode(short *, short *);
	void Reset(class Behavior*, short);
	char NodeComplete(unsigned short);
	unsigned short Gosub(class Behavior*, short *, short);
public:
	void ExtSim(short, short *);
	void ExtSim(short, short, class Behavior*, short *);
	// vtable: 8
	intro void ~TreeSim();
	// vtable: 12
	intro unsigned short Simulate(long, unsigned short);
	struct TreeSim::StackElem* GetHighLevelAction();
	struct TreeSim::StackElem* GetCurElem();
	struct TreeSim::StackElem* GetNthElem(short);
	short GetStackSize();
	short GetMaxStackSize();
private:
	class TreeSim* fExt;
public:
	void ExtSim(class TreeSim*, short);
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	virtual void Error(short);
	virtual unsigned short Simulate(long, unsigned short);
};

// Type: uint32_t;



// Contribution: 1:0015bb10-0015c4b2 Module: 194, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0055cb10
void TreeSim::TreeSim(short maxStackSize, short startTreeID, class Behavior* startBehavior, short * autoStackArea) {
// LINE 11:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ax, maxStackSize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA], ax;
	__asm        mov    eax, autoStackArea;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593630;
// LINE 13:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0055CB61;
	__asm        push   0x8C085;
	__asm        push   0x5BDE9C;
	__asm        push   0xD;
	__asm        push   0x5BDEA8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 14:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 15:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+8], 0;
// LINE 16:
	__asm        mov    eax, reinterpret_cast<uint32_t>(startTreeID);
	__asm        push   eax;
	__asm        mov    eax, startBehavior;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
// LINE 17:
	__asm        jmp    near ptr 0x0055CB9B;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0055cba5
void TreeSim::TreeSim(short maxStackSize, short * autoStackArea) {
// LINE 25:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    ax, maxStackSize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA], ax;
	__asm        mov    eax, autoStackArea;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593630;
// LINE 26:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0055CBF6;
	__asm        push   0x8C085;
	__asm        push   0x5BDED0;
	__asm        push   0x1A;
	__asm        push   0x5BDEDC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 27:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 28:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+8], 0;
// LINE 29:
	__asm        jmp    near ptr 0x0055CC20;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055cc2a
void TreeSim::~TreeSim() {
// LINE 35:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593630;
// LINE 36:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 37:
	__asm        jmp    near ptr 0x0055CC53;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055cc58
void TreeSim::Reset(class Behavior* startBehavior, short startTreeID) {
	struct TreeSim::StackElem* bottom;

// LINE 43:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 44:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x0055CC80;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0055CC99;
	__asm        push   0x8C085;
	__asm        push   0x5BDF04;
	__asm        push   0x2C;
	__asm        push   0x5BDF10;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 45:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+8], 1;
// LINE 47:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    bottom, eax;
// LINE 48:
	__asm        mov    ax, startTreeID;
	__asm        mov    ecx, bottom;
	__asm        mov    [ecx], ax;
// LINE 49:
	__asm        mov    eax, bottom;
	__asm        mov    word ptr [eax+2], 0;
// LINE 50:
	__asm        mov    eax, bottom;
	__asm        mov    word ptr [eax+4], 0;
// LINE 51:
	__asm        mov    eax, bottom;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 52:
	__asm        mov    eax, startBehavior;
	__asm        mov    ecx, bottom;
	__asm        mov    [ecx+0x10], eax;
// LINE 53:
	__asm        mov    eax, bottom;
	__asm        mov    word ptr [eax+4], 0;
// LINE 54:
	__asm        jmp    near ptr 0x0055CCE8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055ccef
struct TreeSim::StackElem* TreeSim::GetHighLevelAction() {
	short stackSize;
	class Behavior* curBeh;

// LINE 62:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 63:
	__asm        jmp    near ptr 0x0055CD00;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        sub    eax, 2;
	__asm        mov    stackSize, ax;
// LINE 64:
	__asm        jmp    near ptr 0x0055CD13;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [eax+ecx+0x10];
	__asm        mov    curBeh, eax;
// LINE 65:
	__asm        movsx  eax, stackSize;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055CE04;
// LINE 66:
	__asm        movsx  eax, stackSize;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055CD5C;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        movsx  ecx, stackSize;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0055CD76;
	__asm        mov    eax, 0x10;
	__asm        mov    ecx, curBeh;
	__asm        cmp    [eax], ecx;
	__asm        je     near ptr 0x0055CDFB;
	__asm        jmp    near ptr 0x0055CDA7;
	__asm        jmp    near ptr 0x0055CD98;
	__asm        movsx  eax, stackSize;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, curBeh;
	__asm        cmp    [eax+ecx+0x10], edx;
	__asm        je     near ptr 0x0055CDFB;
	__asm        jmp    near ptr 0x0055CDA7;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, curBeh;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x0055CDFB;
// LINE 67:
	__asm        movsx  eax, stackSize;
	__asm        inc    eax;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055CDCE;
	__asm        movsx  eax, stackSize;
	__asm        inc    eax;
	__asm        movsx  eax, ax;
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0055CDDA;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055CDF6;
	__asm        jmp    near ptr 0x0055CDF3;
	__asm        movsx  eax, stackSize;
	__asm        inc    eax;
	__asm        movsx  eax, ax;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        jmp    near ptr 0x0055CDF6;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    near ptr 0x0055CE32;
// LINE 68:
	__asm        dec    stackSize;
// LINE 69:
	__asm        jmp    near ptr 0x0055CD31;
// LINE 70:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0055CE1F;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055CE2D;
	__asm        jmp    near ptr 0x0055CE2A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x0055CE2D;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x0055CE32;
// LINE 71:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055ce37
unsigned short TreeSim::Gosub(class Behavior* pTransfer, short * stack, short treeID) {
// LINE 83:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 84:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xA];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055CF18;
// LINE 86:
// Block start:
	struct TreeSim::StackElem* fill;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    fill, eax;
// LINE 87:
	__asm        mov    ax, treeID;
	__asm        mov    ecx, fill;
	__asm        mov    [ecx], ax;
// LINE 88:
	__asm        mov    eax, fill;
	__asm        mov    word ptr [eax+2], 0;
// LINE 89:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    ax, [eax+ecx+4];
	__asm        mov    ecx, fill;
	__asm        mov    [ecx+4], ax;
// LINE 90:
	__asm        cmp    pTransfer, 0;
	__asm        je     near ptr 0x0055CEBD;
// LINE 91:
	__asm        mov    eax, pTransfer;
	__asm        mov    ecx, fill;
	__asm        mov    [ecx+0x10], eax;
// LINE 92:
	__asm        jmp    near ptr 0x0055CEDE;
// LINE 93:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [eax+ecx+0x10];
	__asm        mov    ecx, fill;
	__asm        mov    [ecx+0x10], eax;
// LINE 95:
	__asm        cmp    stack, 0;
	__asm        jne    near ptr 0x0055CEF1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    stack, eax;
// LINE 97:
	__asm        mov    eax, stack;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, fill;
	__asm        mov    [ecx+8], eax;
// LINE 98:
	__asm        mov    eax, stack;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, fill;
	__asm        mov    [ecx+0xC], eax;
// LINE 100:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+8];
// LINE 101:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0055CF30;
// LINE 104:
// Block end:
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 105:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0055CF30;
// LINE 106:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0055cf37
unsigned short TreeSim::Simulate(long ticks, unsigned short bOnceOnly) {
	struct TreeSim::StackElem* elem;
	unsigned short done;
	const struct Behavior::Node* node;
	enum TreeSim::ReturnCode result;

// LINE 114:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 120:
	__asm        mov    done, 0;
// LINE 123:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xC], 0;
// LINE 124:
	__asm        mov    ax, bOnceOnly;
	__asm        mov    done, ax;
// LINE 127:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    elem, eax;
// LINE 128:
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax+2];
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax];
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    ecx, elem;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx];
	__asm        mov    node, eax;
// LINE 129:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0055D04F;
// LINE 130:
// Block start:
	short treeID;
	short * stackPass;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xA];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0055CFD7;
	__asm        push   0x3E8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055D1B7;
	__asm        jmp    near ptr 0x0055D19F;
// LINE 133:
	__asm        mov    stackPass, 0;
// LINE 134:
	__asm        mov    eax, node;
	__asm        mov    ax, [eax];
	__asm        mov    treeID, ax;
// LINE 135:
	__asm        mov    eax, node;
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055D00C;
	__asm        mov    eax, node;
	__asm        cmp    dword ptr [eax+8], 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055D00C;
	__asm        jmp    near ptr 0x0055D027;
	__asm        jmp    near ptr 0x0055D00C;
	__asm        jmp    near ptr 0x0055D01E;
	__asm        test   dword ptr [ebp-0x1C], 0xFFFF;
	__asm        jne    near ptr 0x0055D027;
// LINE 136:
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    stackPass, eax;
// LINE 138:
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, stackPass;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0055CE37;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055D04A;
// LINE 140:
	__asm        mov    done, 1;
// LINE 142:
// Block end:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 144:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        mov    result, eax;
	__asm        mov    eax, result;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0055D120;
// LINE 146:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0055D1C3;
	__asm        movsx  eax, al;
	__asm        cmp    eax, 0xFFFFFFFD;
	__asm        jne    near ptr 0x0055D09F;
// LINE 148:
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055D1B2;
	__asm        jmp    near ptr 0x0055D19F;
// LINE 150:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 152:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0055D1C3;
	__asm        movsx  eax, al;
	__asm        cmp    eax, 0xFFFFFFFD;
	__asm        jne    near ptr 0x0055D0D4;
// LINE 154:
	__asm        push   0x3E9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055D1AD;
	__asm        jmp    near ptr 0x0055D19F;
// LINE 156:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 159:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 161:
	__asm        mov    done, 1;
// LINE 162:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 164:
	__asm        mov    done, 1;
// LINE 165:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 167:
	__asm        mov    done, 1;
// LINE 168:
	__asm        push   0x8C085;
	__asm        push   0x5BDF38;
	__asm        push   0xA8;
	__asm        push   0x5BDF48;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 169:
	__asm        jmp    near ptr 0x0055D14B;
// LINE 170:
	__asm        jmp    near ptr 0x0055D14B;
	__asm        inc    dword ptr [ebp-0x24];
	__asm        cmp    dword ptr [ebp-0x24], 4;
	__asm        ja     near ptr 0x0055D0F4;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    dword ptr [eax*4+0x55D137];
	__asm        jmp    near ptr 0xA456270C;
	__asm        rcl    byte ptr [ebp], 1;
	__asm        outsd;
	__asm        rcl    byte ptr [ebp], 1;
	__asm        fcomp  st(0);
	__asm        push   ebp;
	__asm        add    cl, bl;
	__asm        rcl    byte ptr [ebp], 1;
// LINE 173:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        cmp    eax, 0x80;
	__asm        jle    near ptr 0x0055D177;
// LINE 175:
	__asm        push   0x3EA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055D1A8;
	__asm        jmp    near ptr 0x0055D19F;
// LINE 177:
	__asm        test   reinterpret_cast<uint32_t>(done), 0xFFFF;
	__asm        je     near ptr 0x0055CF5A;
// LINE 179:
	__asm        cmp    result, 2;
	__asm        jne    near ptr 0x0055D197;
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0055D19A;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0055D1BC;
// LINE 188:
tree_error:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0055D1BC;
// LINE 190:
	__asm        jmp    near ptr 0x0055D19F;
	__asm        jmp    near ptr 0x0055D19F;
	__asm        jmp    near ptr 0x0055D19F;
	__asm        jmp    near ptr 0x0055D19F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055d1c3
char TreeSim::NodeComplete(unsigned short success) {
	char trans;
	struct TreeSim::StackElem* elem;
	unsigned short done;
	const struct Behavior::Node* node;

// LINE 198:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 202:
	__asm        mov    done, 0;
// LINE 204:
	__asm        test   reinterpret_cast<uint32_t>(done), 0xFFFF;
	__asm        jne    near ptr 0x0055D2E2;
// LINE 205:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, 1;
	__asm        jge    near ptr 0x0055D20C;
// LINE 207:
	__asm        push   0x3EB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055D2F1;
	__asm        jmp    near ptr 0x0055D2EA;
// LINE 209:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    elem, eax;
// LINE 210:
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax+2];
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax];
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    ecx, elem;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x10];
	__asm        call   dword ptr [edx];
	__asm        mov    node, eax;
// LINE 211:
	__asm        test   reinterpret_cast<uint32_t>(success), 0xFFFF;
	__asm        je     near ptr 0x0055D263;
	__asm        mov    eax, node;
	__asm        mov    al, [eax+2];
	__asm        mov    trans, al;
// LINE 212:
	__asm        jmp    near ptr 0x0055D26C;
	__asm        mov    eax, node;
	__asm        mov    al, [eax+3];
	__asm        mov    trans, al;
// LINE 214:
	__asm        movsx  eax, trans;
	__asm        cmp    eax, 0xFFFFFFFE;
	__asm        jne    near ptr 0x0055D291;
// LINE 215:
	__asm        mov    done, 0;
// LINE 216:
	__asm        mov    eax, this;
	__asm        dec    word ptr [eax+8];
// LINE 217:
	__asm        mov    success, 1;
// LINE 218:
	__asm        jmp    near ptr 0x0055D2DD;
	__asm        movsx  eax, trans;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055D2B6;
// LINE 219:
	__asm        mov    done, 0;
// LINE 220:
	__asm        mov    eax, this;
	__asm        dec    word ptr [eax+8];
// LINE 221:
	__asm        mov    success, 0;
// LINE 222:
	__asm        jmp    near ptr 0x0055D2DD;
// LINE 223:
	__asm        mov    done, 1;
// LINE 224:
	__asm        movsx  ax, trans;
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        lea    ecx, [ecx*4-4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        mov    [ecx+edx+2], ax;
// LINE 226:
	__asm        jmp    near ptr 0x0055D1D5;
// LINE 227:
	__asm        mov    al, trans;
	__asm        jmp    near ptr 0x0055D2F6;
// LINE 231:
tree_error:
	__asm        mov    al, 0xFD;
	__asm        jmp    near ptr 0x0055D2F6;
// LINE 233:
	__asm        jmp    near ptr 0x0055D2EA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055d2fd
void TreeSim::GetCurrentNode(short * treeID, short * nodeNum) {
	struct TreeSim::StackElem* elem;

// LINE 239:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 240:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0055D334;
	__asm        push   0x8C085;
	__asm        push   0x5BDF70;
	__asm        push   0xF0;
	__asm        push   0x5BDF7C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 241:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xA];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0055D366;
	__asm        push   0x8C085;
	__asm        push   0x5BDFA4;
	__asm        push   0xF1;
	__asm        push   0x5BDFB4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 243:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    elem, eax;
// LINE 245:
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax];
	__asm        mov    ecx, treeID;
	__asm        mov    [ecx], ax;
// LINE 246:
	__asm        mov    eax, elem;
	__asm        mov    ax, [eax+2];
	__asm        mov    ecx, nodeNum;
	__asm        mov    [ecx], ax;
// LINE 247:
	__asm        jmp    near ptr 0x0055D39E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055d3a5
enum TreeSim::ReturnCode ExtSim::TryElement(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
// LINE 255:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 256:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx];
	__asm        jmp    near ptr 0x0055D3CE;
// LINE 257:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055d3d5
void ExtSim::Error(short errNum) {
// LINE 262:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 263:
	__asm        mov    eax, reinterpret_cast<uint32_t>(errNum);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 264:
	__asm        jmp    near ptr 0x0055D3FB;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055d402
unsigned short ExtSim::Simulate(long ticks, unsigned short bOnceOnly) {
	struct TreeSim::StackElem* savestack;
	unsigned short ret;
	short savemaxstacksize;
	short savestacksize;

// LINE 271:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    savestack, eax;
// LINE 273:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ax, [eax+8];
	__asm        mov    savestacksize, ax;
// LINE 274:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ax, [eax+0xA];
	__asm        mov    savemaxstacksize, ax;
// LINE 276:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+4], eax;
// LINE 277:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+8], ax;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xA];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+0xA], ax;
// LINE 280:
	__asm        mov    eax, reinterpret_cast<uint32_t>(bOnceOnly);
	__asm        push   eax;
	__asm        mov    eax, ticks;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CF37;
	__asm        mov    ret, ax;
// LINE 282:
	__asm        mov    eax, savestack;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+4], eax;
// LINE 283:
	__asm        mov    ax, savestacksize;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+8], ax;
// LINE 284:
	__asm        mov    ax, savemaxstacksize;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    [ecx+0xA], ax;
// LINE 286:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0055D4AC;
// LINE 287:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}



// Contribution: 1:0015c4c0-0015c4f8 Module: 194, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0055d4c0
// TreeSim::`scalar deleting destructor'



// Contribution: 2:00004630-0000463f Module: 194, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593630
// ??_7TreeSim@@6B@


// Contribution: 3:00026e9c-00026fdb Module: 194, 4 byte alignment, initialized_data, read, write, 
