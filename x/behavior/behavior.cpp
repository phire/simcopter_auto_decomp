// Module: Behavior.obj
// Source: C:\Copter\Source\X\Behavior\Behavior.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ class Language (forward reference);
// Language Class implementation not found

// Type: /*unpacked*/ class NResFile (forward reference);
// VTABLE: COPTER_D 0x00591218
class NResFile : public ResFile
{ // not packed(0x124 bytes) TI: 0x3621
private:
	/*+0x11c*/ /*unpacked*/ class PtrList<StdResLoader> fLoaders; // 0x8 bytes
public:
	virtual void ~NResFile() /* override */;
	/*unpacked*/ class StdResLoader* GetLoader(unsigned long, void (*)(void * __ptr32, long));
	void ReleaseLoader(/*unpacked*/ class StdResLoader*);
};

// Type: void;

// Type: /*unpacked*/ class Behavior (forward reference);
// VTABLE: COPTER_D 0x005936d8
class Behavior{ // not packed(0x1c bytes) TI: 0x35de
protected:
	/*+0x4*/   /*unpacked*/ class NResFile *fGlobFile;
	/*+0x8*/   /*unpacked*/ class NResFile *fPrivFile;
	/*+0xc*/   /*unpacked*/ class StdResLoader *fGlobalTrees;
	/*+0x10*/  /*unpacked*/ class StdResLoader *fPrivateTrees;
	/*+0x14*/  /*unpacked*/ class Language *fLanguage;
	/*+0x18*/  void (*fSwizzler)(void * __ptr32, long);
	enum /* __unnamed */ {
		kPrimitiveBase = 0,
		kPrimitiveMax = 255,
		kActionBase = 256,
		kGlobalBase = 256,
		kGlobalMax = 4095,
		kPrivateBase = 4096,
		kPrivateMax = 8191,
		kSemiGlobalBase = 8192,
		kSemiGlobalMax = 30000,
		kTreeMax = 30000,
		kPrimitives = 0,
		kGlobalTrees = 1,
		kPrivateTrees = 2,
		kSemiGlobalTrees = 3,
		kMaxTreeClass = 3,
	};
	struct Behavior::NodeParameter{ // not packed(0x8 bytes) TI: 0x35e5
		/*+0x0*/   short p1; // 0x2 bytes
		/*+0x2*/   short p2; // 0x2 bytes
		/*+0x4*/   short p3; // 0x2 bytes
		/*+0x6*/   short p4; // 0x2 bytes
	};
	struct Behavior::Node{ // not packed(0xc bytes) TI: 0x35e3
		/*+0x0*/   short treeID; // 0x2 bytes
		/*+0x0*/   short primCode; // 0x2 bytes
		/*+0x2*/   signed char trueTrans; // 0x1 bytes
		/*+0x3*/   signed char falseTrans; // 0x1 bytes
		/*+0x4*/   /*unpacked*/ struct Behavior::NodeParameter param; // 0x8 bytes
	};
	enum /* __unnamed */ {
		kUndefined = -3,
		kPopOutTrue = -2,
		kPopOutFalse = -1,
	};
	struct Behavior::Tree{ // not packed(0xe bytes) TI: 0x35e1
		/*+0x0*/   short numNodes; // 0x2 bytes
		/*+0x2*/   /*unpacked*/ struct Behavior::Node nodes[1]; // 0xc bytes
	};
public:
	void Behavior(/*unpacked*/ class Language*, /*unpacked*/ class NResFile*, /*unpacked*/ class NResFile*);
	void ~Behavior();
	void GetNode(short, short, /*unpacked*/ struct Behavior::Node*);
	virtual const /*unpacked*/ struct Behavior::Node* GetNodeRef(short, short); // vtable+0x0
	virtual void GetNodeText(short, short, unsigned char *); // vtable+0x4
	void GetNodeText(/*unpacked*/ struct Behavior::Node*, unsigned char *);
	virtual void GetTreeName(short, unsigned char *); // vtable+0x8
	short CountPrimitives();
	/*unpacked*/ class Language* GetLanguage();
	/*unpacked*/ class ResFile* GetPrivFile();
	/*unpacked*/ class ResFile* GetGlobFile();
	virtual /*unpacked*/ class ResFile* GetResFile(short); // vtable+0xc
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, /*unpacked*/ struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(/*unpacked*/ struct Behavior::Tree*, long, void (*)(short, /*unpacked*/ struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(/*unpacked*/ struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(/*unpacked*/ struct Behavior::NodeParameter*);
};

// Type: /*unpacked*/ class ResFile (forward reference);
// VTABLE: COPTER_D 0x00593518
class ResFile : public FlatResFile
{ // not packed(0x11c bytes) TI: 0x3334
public:
	long OpenFromOtherFile(/*unpacked*/ class ResFile*);
};

// Type: /*unpacked*/ struct Behavior::Tree (forward reference);
struct Behavior::Tree{ // not packed(0xe bytes) TI: 0x35e1
	/*+0x0*/   short numNodes; // 0x2 bytes
	/*+0x2*/   /*unpacked*/ struct Behavior::Node nodes[1]; // 0xc bytes
};

// Type: long;

// Type: void (short, /*unpacked*/ struct Behavior::NodeParameter*);

// Type: short;

// Type: /*unpacked*/ struct Behavior::Node (forward reference);
struct Behavior::Node{ // not packed(0xc bytes) TI: 0x35e3
	/*+0x0*/   short treeID; // 0x2 bytes
	/*+0x0*/   short primCode; // 0x2 bytes
	/*+0x2*/   signed char trueTrans; // 0x1 bytes
	/*+0x3*/   signed char falseTrans; // 0x1 bytes
	/*+0x4*/   /*unpacked*/ struct Behavior::NodeParameter param; // 0x8 bytes
};

// Type: unsigned char *;

// Type: /*unpacked*/ struct Behavior::Node;
struct Behavior::Node{ // not packed(0xc bytes) TI: 0x35e3
	/*+0x0*/   short treeID; // 0x2 bytes
	/*+0x0*/   short primCode; // 0x2 bytes
	/*+0x2*/   signed char trueTrans; // 0x1 bytes
	/*+0x3*/   signed char falseTrans; // 0x1 bytes
	/*+0x4*/   /*unpacked*/ struct Behavior::NodeParameter param; // 0x8 bytes
};

// Type: void * __ptr32;

// Type: unsigned char;

// Type: char *;

// Type: /*unpacked*/ class FlatResFile;
// VTABLE: COPTER_D 0x00593508
class FlatResFile : public FlatFile
{ // not packed(0x11c bytes) TI: 0x330e
protected:
	/*+0x110*/ /*unpacked*/ class ResMap *fMap;
	/*+0x114*/ long fError;
	/*+0x118*/ short _alignPad; // 0x2 bytes
public:
	void FlatResFile();
	virtual void ~FlatResFile() /* override */;
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(/*unpacked*/ class FlatResFile*);
	virtual long Open(unsigned char *) /* override */;
	virtual long Open(char *) /* override */;
	long OpenFromName();
	virtual long Close() /* override */;
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: /*unpacked*/ class FlatFile;
// VTABLE: COPTER_D 0x00593620
class FlatFile{ // not packed(0x110 bytes) TI: 0x32f4
	enum /* __unnamed */ {
		kMaxNameLen = 255,
	};
protected:
	/*+0x4*/   /*unpacked*/ class FlatFile *fNext;
	/*+0x8*/   unsigned char fName[256]; // 0x100 bytes
	/*+0x108*/ long fFileID;
	/*+0x10c*/ /*unpacked*/ struct _iobuf *fFile;
	long UniqueID();
private:
	static /*unpacked*/ class FlatFile *sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	virtual void ~FlatFile(); // vtable+0x0
	// calltype: NearC
	static /*unpacked*/ class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(/*unpacked*/ class FlatFile*);
	virtual long Open(unsigned char *); // vtable+0x4
	virtual long Open(char *); // vtable+0x8
	virtual long Close(); // vtable+0xc
	void OpenFromOtherFile(/*unpacked*/ class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(signed char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	/*unpacked*/ struct _iobuf* GetFile();
};

// Type: /*unpacked*/ class ResFile;
// VTABLE: COPTER_D 0x00593518
class ResFile : public FlatResFile
{ // not packed(0x11c bytes) TI: 0x3334
public:
	long OpenFromOtherFile(/*unpacked*/ class ResFile*);
};



// Contribution: 1:0015f290-0015f9c8 Module: 191, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00560290
void Behavior::Behavior(/*unpacked*/ class Language *lang, /*unpacked*/ class NResFile *globFile, /*unpacked*/ class NResFile *privFile) {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936D8;
// LINE 17:
	this->fLanguage = lang;
// LINE 18:
	this->fGlobFile = globFile;
// LINE 19:
	this->fPrivFile = privFile;
// LINE 20:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, globFile;
	__asm        call   NResFile::GetLoader;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 24:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, privFile;
	__asm        call   NResFile::GetLoader;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 30:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0056032e
void Behavior::~Behavior() {

	this-><vftable> = 0x5936d8;
// LINE 34:
	return;
}

// FUNCTION: COPTER_D 0x0056034d
/*unpacked*/ class ResFile* Behavior::GetPrivFile() {
// LINE 39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _T17;
// LINE 40:
_T17:
}

// FUNCTION: COPTER_D 0x00560369
/*unpacked*/ class ResFile* Behavior::GetGlobFile() {
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    _T17;
// LINE 45:
_T17:
}

// FUNCTION: COPTER_D 0x00560385
void Behavior::StdTreeSwizzle(/*unpacked*/ struct Behavior::Tree *tree, long size, void (*paramswizzler)(short, /*unpacked*/ struct Behavior::NodeParameter*)) {
	/*bp-0x4*/   short count;

// LINE 49:
	__asm        mov    eax, tree;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 50:
	__asm        mov    count, 0;
	__asm        jmp    _T24;
_T20:
	count++;
_T24:
	__asm        mov    eax, tree;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jle    _T7b;
// LINE 51:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, tree;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 52:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, tree;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, tree;
	__asm        mov    ax, [ecx+eax*4+2];
	__asm        push   eax;
	__asm        call   paramswizzler;
	__asm        add    esp, 8;
// LINE 53:
	__asm        jmp    _T20;
// LINE 54:
_T7b:
	return;
}

// FUNCTION: COPTER_D 0x0056040a
const /*unpacked*/ struct Behavior::Node* Behavior::GetNodeRef(short treeID, short nodeNum) {
	/*bp-0x4*/   /*unpacked*/ struct Behavior::Tree *tree;

// LINE 74:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    _Tad;
// LINE 75:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T3e;
_T37:
	__asm        dec    dword ptr [ebp-0xC];
	__asm        add    dword ptr [ebp-0x10], 0xC;
_T3e:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jle    _T67;

	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  ecx, treeID;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T62;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T79;
_T62:
	__asm        jmp    _T37;
_T67:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T79;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
_T79:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T96;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    tree, eax;
	__asm        jmp    _Ta8;

	__asm        jmp    _Ta2;
_T96:
	__asm        mov    tree, 0;
	__asm        jmp    _Ta8;
_Ta2:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    tree, eax;
// LINE 77:
_Ta8:
	__asm        jmp    _T13a;
// LINE 78:
_Tad:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Td0;
_Tc9:
	__asm        dec    dword ptr [ebp-0x20];
	__asm        add    dword ptr [ebp-0x24], 0xC;
_Td0:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jle    _Tf9;

	__asm        mov    eax, [ebp-0x24];
	__asm        movsx  ecx, treeID;
	__asm        cmp    [eax], ecx;
	__asm        jne    _Tf4;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T10b;
_Tf4:
	__asm        jmp    _Tc9;
_Tf9:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T10b;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
_T10b:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T128;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+8];
	__asm        mov    tree, eax;
	__asm        jmp    _T13a;

	__asm        jmp    _T134;
_T128:
	__asm        mov    tree, 0;
	__asm        jmp    _T13a;
_T134:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tree, eax;
// LINE 81:
_T13a:
	__asm        cmp    tree, 0;
	__asm        jne    _T15d;

	__asm        push   0x8C085;
	__asm        push   0x5BE510;
	__asm        push   0x51;
	__asm        push   0x5BE528;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 82:
_T15d:
	__asm        mov    eax, tree;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, nodeNum;
	__asm        cmp    eax, ecx;
	__asm        jg     _T188;

	__asm        push   0x8C085;
	__asm        push   0x5BE554;
	__asm        push   0x52;
	__asm        push   0x5BE574;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 84:
_T188:
	__asm        movsx  eax, nodeNum;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, tree;
	__asm        lea    eax, [ecx+eax*4+2];
	__asm        jmp    _T19b;
// LINE 85:
_T19b:
}

// FUNCTION: COPTER_D 0x005605ac
void Behavior::GetNodeText(/*unpacked*/ struct Behavior::Node *node, unsigned char * str) {
// LINE 128:
	return;
}

// FUNCTION: COPTER_D 0x005605c4
void Behavior::GetNodeText(short treeID, short nodeNum, unsigned char * TheStr) {
	/*bp-0xc*/   /*unpacked*/ struct Behavior::Node node; // 0xc bytes

// LINE 134:
	__asm        mov    eax, reinterpret_cast<uint32_t>(nodeNum);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        lea    ecx, node.treeID;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T36;
// LINE 135:
_T36:
	__asm        mov    eax, TheStr;
	__asm        push   eax;
	__asm        lea    eax, node.treeID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   Behavior::GetNodeText;
// LINE 136:
	return;
}

// FUNCTION: COPTER_D 0x00560616
short Behavior::CountPrimitives() {
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
	__asm        jmp    _T22;
// LINE 141:
_T22:
}

// FUNCTION: COPTER_D 0x0056063d
void Behavior::GetTreeName(short treeID, unsigned char * name) {
	/*bp-0x4*/   void * __ptr32 tree;
	/*bp-0x8*/   /*unpacked*/ class ResFile *pFile;

// LINE 149:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jge    _T45;
// LINE 151:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 152:
	return;
// LINE 154:
_T45:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    _T65;
// LINE 156:
	pFile = this->fGlobFile;
// LINE 158:
	__asm        jmp    _T71;
// LINE 160:
_T65:
	pFile = this->fPrivFile;
// LINE 163:
_T71:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, pFile;
	__asm        call   FlatResFile::GetByID;
	__asm        mov    tree, eax;
// LINE 164:
	__asm        cmp    tree, 0;
	__asm        jne    _Tb5;

	__asm        push   0x8C085;
	__asm        push   0x5BE5A0;
	__asm        push   0xA4;
	__asm        push   0x5BE5CC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 168:
// Block start:
	/*bp-0x108*/ unsigned char resName[256]; // 0x100 bytes
_Tb5:
	__asm        lea    eax, resName[0];
	__asm        push   eax;
	__asm        mov    eax, tree;
	__asm        push   eax;
	__asm        mov    ecx, pFile;
	__asm        call   FlatResFile::GetName;
// LINE 169:
	name[0] = 0x0;
// LINE 172:
	__asm        push   0x100;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        lea    eax, resName[0];
	__asm        push   eax;
	__asm        call   ConcatPStr;
	__asm        add    esp, 0xC;
// LINE 174:
// Block end:
	return;
}

// FUNCTION: COPTER_D 0x0056072f
/*unpacked*/ class ResFile* Behavior::GetResFile(short treeID) {
// LINE 178:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jge    _T22;
// LINE 180:
	__asm        xor    eax, eax;
	__asm        jmp    _T47;
// LINE 182:
_T22:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    _T3c;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    _T47;
// LINE 186:
_T3c:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    _T47;
// LINE 187:
_T47:
}

// FUNCTION: COPTER_D 0x0056077d
short Behavior::GetBaseID(short treeclass) {
	/*bp-0x4*/   short baseID;

// LINE 190:
	baseID = 0x0;
// LINE 191:
	__asm        movsx  eax, treeclass;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4c;
// LINE 193:
_T1b:
	baseID = 0x0;
// LINE 194:
	__asm        jmp    _T70;
// LINE 196:
_T26:
	baseID = 0x100;
// LINE 197:
	__asm        jmp    _T70;
// LINE 199:
_T31:
	baseID = 0x1000;
// LINE 200:
	__asm        jmp    _T70;
// LINE 202:
_T3c:
	baseID = 0x2000;
// LINE 203:
	__asm        jmp    _T70;
// LINE 204:
	__asm        jmp    _T70;
_T4c:
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     _T70;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    _Switch_60[0][eax*4];
// Switch pointers:
//   _T1b
//   _T26
//   _T31
//   _T3c
// LINE 205:
_T70:
	__asm        mov    ax, baseID;
	__asm        jmp    _T79;
// LINE 206:
_T79:
}

// FUNCTION: COPTER_D 0x005607fb
short Behavior::GetMaxID(short treeclass) {
	/*bp-0x4*/   short maxID;

// LINE 209:
	maxID = 0x0;
// LINE 210:
	__asm        movsx  eax, treeclass;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T4c;
// LINE 212:
_T1b:
	maxID = 0x0;
// LINE 213:
	__asm        jmp    _T70;
// LINE 215:
_T26:
	maxID = 0xfff;
// LINE 216:
	__asm        jmp    _T70;
// LINE 218:
_T31:
	maxID = 0x1fff;
// LINE 219:
	__asm        jmp    _T70;
// LINE 221:
_T3c:
	maxID = 0x7530;
// LINE 222:
	__asm        jmp    _T70;
// LINE 223:
	__asm        jmp    _T70;
_T4c:
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     _T70;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    _Switch_60[0][eax*4];
// Switch pointers:
//   _T1b
//   _T26
//   _T31
//   _T3c
// LINE 224:
_T70:
	__asm        mov    ax, maxID;
	__asm        jmp    _T79;
// LINE 225:
_T79:
}

// FUNCTION: COPTER_D 0x00560879
short Behavior::GetTreeClass(short treeID) {
// LINE 228:
	__asm        movsx  eax, treeID;
	__asm        test   eax, eax;
	__asm        jl     _T29;

	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFF;
	__asm        jg     _T29;
// LINE 229:
	__asm        xor    ax, ax;
	__asm        jmp    _Ta6;
// LINE 230:
_T29:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jl     _T50;

	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jg     _T50;
// LINE 231:
	__asm        mov    ax, 1;
	__asm        jmp    _Ta6;
// LINE 232:
_T50:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x2000;
	__asm        jl     _T77;

	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x7530;
	__asm        jg     _T77;
// LINE 233:
	__asm        mov    ax, 3;
	__asm        jmp    _Ta6;
// LINE 234:
_T77:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x1000;
	__asm        jl     _T9e;

	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x1FFF;
	__asm        jg     _T9e;
// LINE 235:
	__asm        mov    ax, 2;
	__asm        jmp    _Ta6;
// LINE 236:
_T9e:
	__asm        xor    ax, ax;
	__asm        jmp    _Ta6;
// LINE 237:
_Ta6:
}

// FUNCTION: COPTER_D 0x00560924
void Behavior::GetClassNameA(short cl, unsigned char * name) {
	/*bp-0x4*/   char * str;

// LINE 241:
	__asm        movsx  eax, cl;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T56;
// LINE 243:
_T15:
	str = 0x5be5f8;
// LINE 244:
	__asm        jmp    _T7a;
// LINE 246:
_T21:
	str = 0x5be604;
// LINE 247:
	__asm        jmp    _T7a;
// LINE 249:
_T2d:
	str = 0x5be60c;
// LINE 250:
	__asm        jmp    _T7a;
// LINE 252:
_T39:
	str = 0x5be614;
// LINE 253:
	__asm        jmp    _T7a;
// LINE 255:
_T45:
	str = 0x5be620;
// LINE 256:
	__asm        jmp    _T7a;
// LINE 257:
	__asm        jmp    _T7a;
_T56:
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     _T45;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    _Switch_6a[0][eax*4];
// Switch pointers:
//   _T15
//   _T21
//   _T2d
//   _T39
// LINE 258:
_T7a:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        call   EmptyPStr;
	__asm        add    esp, 4;
// LINE 259:
	__asm        push   0x100;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   ConcatCPStr;
	__asm        add    esp, 0xC;
// LINE 260:
	return;
}



// Contribution: 2:000046d8-000046e7 Module: 191, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for Behavior @ 0x005936d8
//   00: Behavior::GetNodeRef @ 0x0056040a
//   01: Behavior::GetNodeText @ 0x005605c4
//   02: Behavior::GetTreeName @ 0x0056063d
//   03: Behavior::GetResFile @ 0x0056072f
//   4 entries



// Contribution: 3:00027510-00027627 Module: 191, 4 byte alignment, initialized_data, read, write, 
