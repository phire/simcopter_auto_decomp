// Module: Behavior.obj
// Source: C:\Copter\Source\X\Behavior\Behavior.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class Behavior (forward reference);
class Behavior{
protected:
	class NResFile* fGlobFile;
	class NResFile* fPrivFile;
	class StdResLoader* fGlobalTrees;
	class StdResLoader* fPrivateTrees;
	class Language* fLanguage;
	void (*fSwizzler)(void * __ptr32, long);
		enum __unnamed {
			kPrimitiveBase = 0,
			kPrimitiveMax = 255,
			kActionBase = 256,
			kGlobalBase = 256,
			kGlobalMax = 4095,
			kPrivateBase = 4096,
			kPrivateMax = 8191,
			kSemiGlobalBase = 8192,
			kSemiGlobalMax = 30000,
			kTreeMax = 30000,
			kPrimitives = 0,
			kGlobalTrees = 1,
			kPrivateTrees = 2,
			kSemiGlobalTrees = 3,
			kMaxTreeClass = 3,
		};
	class Behavior::NodeParameter{
	public:
		short p1;
		short p2;
		short p3;
		short p4;
	};
	class Behavior::Node{
	public:
		short treeID;
		short primCode;
		char trueTrans;
		char falseTrans;
		struct Behavior::NodeParameter param;
	};
		enum __unnamed {
			kUndefined = -3,
			kPopOutTrue = -2,
			kPopOutFalse = -1,
		};
	class Behavior::Tree{
	public:
		short numNodes;
		struct Behavior::Node nodes[1];
	};
public:
	void Behavior(class Language*, class NResFile*, class NResFile*);
	void ~Behavior();
	void GetNode(short, short, struct Behavior::Node*);
	// vtable: 0
	intro const struct Behavior::Node* GetNodeRef(short, short);
	// vtable: 4
	intro void GetNodeText(short, short, unsigned char *);
	void GetNodeText(struct Behavior::Node*, unsigned char *);
	// vtable: 8
	intro void GetTreeName(short, unsigned char *);
	short CountPrimitives();
	class Language* GetLanguage();
	class ResFile* GetPrivFile();
	class ResFile* GetGlobFile();
	// vtable: 12
	intro class ResFile* GetResFile(short);
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(struct Behavior::Tree*, long, void (*)(short, struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(struct Behavior::NodeParameter*);
};

// Type: class Language (forward reference);

// Type: class NResFile (forward reference);
class NResFile : public ResFile
{
private:
	class PtrList<StdResLoader> fLoaders;
public:
	virtual void ~NResFile();
	class StdResLoader* GetLoader(unsigned long, void (*)(void * __ptr32, long));
	void ReleaseLoader(class StdResLoader*);
};

// Type: void;

// Type: class ResFile (forward reference);
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: struct Behavior::Tree (forward reference);

// Type: long;

// Type: void (short, struct Behavior::NodeParameter*);

// Type: short;

// Type: struct Behavior::Node (forward reference);

// Type: unsigned char *;

// Type: struct Behavior::Node;
class Behavior::Node{
public:
	short treeID;
	short primCode;
	char trueTrans;
	char falseTrans;
	struct Behavior::NodeParameter param;
};

// Type: void * __ptr32;

// Type: unsigned char[256];

// Type: char *;

// Type: class FlatResFile;
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: class ResFile;
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: class FlatFile;
class FlatFile{
		enum __unnamed {
			kMaxNameLen = 255,
		};
protected:
	class FlatFile* fNext;
	unsigned char fName[256];
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long Open(unsigned char *);
	// vtable: 8
	intro long Open(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
};



// Contribution: 1:0015f290-0015f9c8 Module: 191, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00560290
void Behavior::Behavior(class Language* lang, class NResFile* globFile, class NResFile* privFile) {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936D8;
// LINE 17:
	__asm        mov    eax, lang;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 18:
	__asm        mov    eax, globFile;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 19:
	__asm        mov    eax, privFile;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 20:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 23:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, globFile;
	__asm        call   0x00499EF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 24:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, privFile;
	__asm        call   0x00499EF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 30:
	__asm        jmp    near ptr 0x00560324;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0056032e
void Behavior::~Behavior() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936D8;
// LINE 34:
	__asm        jmp    near ptr 0x00560348;
}

// FUNCTION: COPTER_D 0x0056034d
class ResFile* Behavior::GetPrivFile() {
// LINE 39:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x00560364;
// LINE 40:
}

// FUNCTION: COPTER_D 0x00560369
class ResFile* Behavior::GetGlobFile() {
// LINE 44:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00560380;
// LINE 45:
}

// FUNCTION: COPTER_D 0x00560385
void Behavior::StdTreeSwizzle(struct Behavior::Tree* tree, long size, void (*paramswizzler)(short, struct Behavior::NodeParameter*)) {
	short count;

// LINE 49:
	__asm        mov    eax, tree;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 50:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x005603A9;
	__asm        inc    count;
	__asm        mov    eax, tree;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00560400;
// LINE 51:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, tree;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 52:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, tree;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, tree;
	__asm        mov    ax, [ecx+eax*4+2];
	__asm        push   eax;
	__asm        call   paramswizzler;
	__asm        add    esp, 8;
// LINE 53:
	__asm        jmp    near ptr 0x005603A5;
// LINE 54:
	__asm        jmp    near ptr 0x00560405;
}

// FUNCTION: COPTER_D 0x0056040a
const struct Behavior::Node* Behavior::GetNodeRef(short treeID, short nodeNum) {
	struct Behavior::Tree* tree;

// LINE 74:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    near ptr 0x005604B7;
// LINE 75:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00560448;
	__asm        dec    dword ptr [ebp-0xC];
	__asm        add    dword ptr [ebp-0x10], 0xC;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jle    near ptr 0x00560471;
	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  ecx, treeID;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x0056046C;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00560483;
	__asm        jmp    near ptr 0x00560441;
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    near ptr 0x00560483;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x005604A0;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+8];
	__asm        mov    tree, eax;
	__asm        jmp    near ptr 0x005604B2;
	__asm        jmp    near ptr 0x005604AC;
	__asm        mov    tree, 0;
	__asm        jmp    near ptr 0x005604B2;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    tree, eax;
// LINE 77:
	__asm        jmp    near ptr 0x00560544;
// LINE 78:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005604DA;
	__asm        dec    dword ptr [ebp-0x20];
	__asm        add    dword ptr [ebp-0x24], 0xC;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jle    near ptr 0x00560503;
	__asm        mov    eax, [ebp-0x24];
	__asm        movsx  ecx, treeID;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x005604FE;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00560515;
	__asm        jmp    near ptr 0x005604D3;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00560515;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00560532;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    eax, [eax+8];
	__asm        mov    tree, eax;
	__asm        jmp    near ptr 0x00560544;
	__asm        jmp    near ptr 0x0056053E;
	__asm        mov    tree, 0;
	__asm        jmp    near ptr 0x00560544;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    tree, eax;
// LINE 81:
	__asm        cmp    tree, 0;
	__asm        jne    near ptr 0x00560567;
	__asm        push   0x8C085;
	__asm        push   0x5BE510;
	__asm        push   0x51;
	__asm        push   0x5BE528;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 82:
	__asm        mov    eax, tree;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, nodeNum;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00560592;
	__asm        push   0x8C085;
	__asm        push   0x5BE554;
	__asm        push   0x52;
	__asm        push   0x5BE574;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 84:
	__asm        movsx  eax, nodeNum;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, tree;
	__asm        lea    eax, [ecx+eax*4+2];
	__asm        jmp    near ptr 0x005605A5;
// LINE 85:
}

// FUNCTION: COPTER_D 0x005605ac
void Behavior::GetNodeText(struct Behavior::Node* node, unsigned char * str) {
// LINE 128:
	__asm        jmp    near ptr 0x005605BD;
}

// FUNCTION: COPTER_D 0x005605c4
void Behavior::GetNodeText(short treeID, short nodeNum, unsigned char * TheStr) {
	struct Behavior::Node node;

// LINE 134:
	__asm        mov    eax, reinterpret_cast<uint32_t>(nodeNum);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax];
	__asm        lea    ecx, node.treeID;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005605FA;
// LINE 135:
	__asm        mov    eax, TheStr;
	__asm        push   eax;
	__asm        lea    eax, node.treeID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005605AC;
// LINE 136:
	__asm        jmp    near ptr 0x0056060F;
}

// FUNCTION: COPTER_D 0x00560616
short Behavior::CountPrimitives() {
// LINE 140:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+8];
	__asm        jmp    near ptr 0x00560638;
// LINE 141:
}

// FUNCTION: COPTER_D 0x0056063d
void Behavior::GetTreeName(short treeID, unsigned char * name) {
	class ResFile* pFile;
	void * __ptr32 tree;

// LINE 149:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jge    near ptr 0x00560682;
// LINE 151:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x14];
	__asm        call   dword ptr [edx+4];
// LINE 152:
	__asm        jmp    near ptr 0x00560728;
// LINE 154:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    near ptr 0x005606A2;
// LINE 156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    pFile, eax;
// LINE 158:
	__asm        jmp    near ptr 0x005606AE;
// LINE 160:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    pFile, eax;
// LINE 163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        push   0x42484156;
	__asm        mov    ecx, pFile;
	__asm        call   0x0055320B;
	__asm        mov    tree, eax;
// LINE 164:
	__asm        cmp    tree, 0;
	__asm        jne    near ptr 0x005606F2;
	__asm        push   0x8C085;
	__asm        push   0x5BE5A0;
	__asm        push   0xA4;
	__asm        push   0x5BE5CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 168:
// Block start:
	unsigned char resName[256];
	__asm        lea    eax, resName[0];
	__asm        push   eax;
	__asm        mov    eax, tree;
	__asm        push   eax;
	__asm        mov    ecx, pFile;
	__asm        call   0x00553564;
// LINE 169:
	__asm        mov    eax, name;
	__asm        mov    byte ptr [eax], 0;
// LINE 172:
	__asm        push   0x100;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        lea    eax, resName[0];
	__asm        push   eax;
	__asm        call   0x0056639C;
	__asm        add    esp, 0xC;
// LINE 174:
// Block end:
	__asm        jmp    near ptr 0x00560728;
}

// FUNCTION: COPTER_D 0x0056072f
class ResFile* Behavior::GetResFile(short treeID) {
// LINE 178:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jge    near ptr 0x00560751;
// LINE 180:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00560776;
// LINE 182:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jge    near ptr 0x0056076B;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        jmp    near ptr 0x00560776;
// LINE 186:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x00560776;
// LINE 187:
}

// FUNCTION: COPTER_D 0x0056077d
short Behavior::GetBaseID(short treeclass) {
	short baseID;

// LINE 190:
	__asm        mov    baseID, 0;
// LINE 191:
	__asm        movsx  eax, treeclass;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x005607C9;
// LINE 193:
	__asm        mov    baseID, 0;
// LINE 194:
	__asm        jmp    near ptr 0x005607ED;
// LINE 196:
	__asm        mov    baseID, 0x100;
// LINE 197:
	__asm        jmp    near ptr 0x005607ED;
// LINE 199:
	__asm        mov    baseID, 0x1000;
// LINE 200:
	__asm        jmp    near ptr 0x005607ED;
// LINE 202:
	__asm        mov    baseID, 0x2000;
// LINE 203:
	__asm        jmp    near ptr 0x005607ED;
// LINE 204:
	__asm        jmp    near ptr 0x005607ED;
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     near ptr 0x005607ED;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x5607DD];
// Switch pointers
// LINE 205:
	__asm        mov    ax, baseID;
	__asm        jmp    near ptr 0x005607F6;
// LINE 206:
}

// FUNCTION: COPTER_D 0x005607fb
short Behavior::GetMaxID(short treeclass) {
	short maxID;

// LINE 209:
	__asm        mov    maxID, 0;
// LINE 210:
	__asm        movsx  eax, treeclass;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00560847;
// LINE 212:
	__asm        mov    maxID, 0;
// LINE 213:
	__asm        jmp    near ptr 0x0056086B;
// LINE 215:
	__asm        mov    maxID, 0xFFF;
// LINE 216:
	__asm        jmp    near ptr 0x0056086B;
// LINE 218:
	__asm        mov    maxID, 0x1FFF;
// LINE 219:
	__asm        jmp    near ptr 0x0056086B;
// LINE 221:
	__asm        mov    maxID, 0x7530;
// LINE 222:
	__asm        jmp    near ptr 0x0056086B;
// LINE 223:
	__asm        jmp    near ptr 0x0056086B;
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     near ptr 0x0056086B;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x56085B];
// Switch pointers
// LINE 224:
	__asm        mov    ax, maxID;
	__asm        jmp    near ptr 0x00560874;
// LINE 225:
}

// FUNCTION: COPTER_D 0x00560879
short Behavior::GetTreeClass(short treeID) {
// LINE 228:
	__asm        movsx  eax, treeID;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005608A2;
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFF;
	__asm        jg     near ptr 0x005608A2;
// LINE 229:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0056091F;
// LINE 230:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x005608C9;
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0xFFF;
	__asm        jg     near ptr 0x005608C9;
// LINE 231:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0056091F;
// LINE 232:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x2000;
	__asm        jl     near ptr 0x005608F0;
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x7530;
	__asm        jg     near ptr 0x005608F0;
// LINE 233:
	__asm        mov    ax, 3;
	__asm        jmp    near ptr 0x0056091F;
// LINE 234:
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x1000;
	__asm        jl     near ptr 0x00560917;
	__asm        movsx  eax, treeID;
	__asm        cmp    eax, 0x1FFF;
	__asm        jg     near ptr 0x00560917;
// LINE 235:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x0056091F;
// LINE 236:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0056091F;
// LINE 237:
}

// FUNCTION: COPTER_D 0x00560924
void Behavior::GetClassNameA(short cl, unsigned char * name) {
	char * str;

// LINE 241:
	__asm        movsx  eax, cl;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0056097A;
// LINE 243:
	__asm        mov    str, 0x5BE5F8;
// LINE 244:
	__asm        jmp    near ptr 0x0056099E;
// LINE 246:
	__asm        mov    str, 0x5BE604;
// LINE 247:
	__asm        jmp    near ptr 0x0056099E;
// LINE 249:
	__asm        mov    str, 0x5BE60C;
// LINE 250:
	__asm        jmp    near ptr 0x0056099E;
// LINE 252:
	__asm        mov    str, 0x5BE614;
// LINE 253:
	__asm        jmp    near ptr 0x0056099E;
// LINE 255:
	__asm        mov    str, 0x5BE620;
// LINE 256:
	__asm        jmp    near ptr 0x0056099E;
// LINE 257:
	__asm        jmp    near ptr 0x0056099E;
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        ja     near ptr 0x00560969;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x56098E];
// Switch pointers
// LINE 258:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        call   0x00565CA0;
	__asm        add    esp, 4;
// LINE 259:
	__asm        push   0x100;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        call   0x00566425;
	__asm        add    esp, 0xC;
// LINE 260:
	__asm        jmp    near ptr 0x005609C4;
}



// Contribution: 2:000046d8-000046e7 Module: 191, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005936d8
// ??_7Behavior@@6B@


// Contribution: 3:00027510-00027627 Module: 191, 4 byte alignment, initialized_data, read, write, 
