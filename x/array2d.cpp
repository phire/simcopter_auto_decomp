// Module: Array2d.obj
// Source: C:\Copter\Source\X\Array2d.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class ResFile (forward reference);
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: unsigned short;

// Type: class _cArray (forward reference);
class _cArray{
	using ArrayName = unsigned char[16];
	using TinyName = unsigned long;
	using FileNameStr = unsigned char[16];
		enum __unnamed {
			kHeaderSize = 8,
			kMaxArrays = 1024,
			kMaxLoadable = 64,
			kFileNameLength = 15,
			kArrayNameLength = 15,
		};
	class _cArray::FileAndType{
	public:
		class ResFile* file;
		unsigned long type;
	};
	class _cArray::Header{
	public:
		short entrySize;
		short xSize;
		short ySize;
		short _pad;
	};
public:
	static class _cArray** sArrayTable;
	// calltype: NearC
	static void MakeTable();
	// calltype: NearC
	static void DeleteTable();
private:
	void CheckIntoTable();
	unsigned short SetSize(long, long);
	void SetXPointers();
	void FillHeader();
	void SetSizeAndHeaders(long, long);
	unsigned char * _GetPointer(long, long);
protected:
	void * __ptr32* fData;
public:
	void * __ptr32 fDataHandle;
	unsigned char * fDataPtr;
	long fySize;
	long fxSize;
	long fEntrySize;
protected:
	unsigned long fDataHandleSize;
	short fResID;
	short _pad;
	class ResFile* fFile;
	unsigned long fType;
	unsigned char fFileName[16];
	unsigned char fName[16];
	unsigned long fTinyName;
	static struct _cArray::FileAndType fsLoaded[64];
public:
	void _cArray(long, long, long, unsigned long, class ResFile*, unsigned long);
	void _cArray(long, long, long, unsigned char *, class ResFile*, unsigned long);
protected:
	void _cArray(void * __ptr32, class ResFile*, long, void (*)(void * __ptr32, long));
private:
	void BeginCreate(long, long, long, unsigned char *, class ResFile*, unsigned long);
	void FromDiskCreate(void * __ptr32, class ResFile*, long, void (*)(void * __ptr32, long));
public:
	unsigned long GetName();
	void GetName(unsigned char *);
	// calltype: NearC
	static class _cArray* GetArray(unsigned long, short);
	// calltype: NearC
	static class _cArray* GetArrayByType(unsigned long, short);
	// calltype: NearC
	static short GetArrayIndexInType(class _cArray*);
	// calltype: NearC
	static short GetNumArraysByType(unsigned long);
	// calltype: NearC
	static short GetLoadedIndex(class ResFile*, unsigned long);
	// calltype: NearC
	static void LoadAllArrays(class ResFile*, unsigned long, short, void (*)(void * __ptr32, long));
	static unsigned short sAllLoaded;
	// calltype: NearC
	static void DeleteAllArrays();
	void ClearBytes(char);
	short InsertRow(short);
	short InsertColumn(short);
	short DeleteRow(short);
	short DeleteColumn(short);
	unsigned short Resize(long, long, char);
	// vtable: 0
	intro void WriteToDisk();
	void CopyFrom(class _cArray*);
	void CopyFrom(unsigned long);
	void CopyFrom(unsigned char *);
	void CopyToByFTN(class ResFile*, unsigned long, unsigned char *);
	void CopyTo(class _cArray*);
	void CopyTo(unsigned long);
	void CopyTo(unsigned char *);
	void ~_cArray();
	void DeleteResource();
	// calltype: NearC
	static unsigned short IsNameTaken(unsigned long, short);
};

// Type: void * __ptr32;

// Type: long;

// Type: void (void * __ptr32, long);

// Type: char *;

// Type: struct _cArray::Header (forward reference);

// Type: unsigned char[256];

// Type: void;

// Type: unsigned char *;

// Type: unsigned long;

// Type: char;

// Type: short;

// Type: class _cArray;
class _cArray{
	using ArrayName = unsigned char[16];
	using TinyName = unsigned long;
	using FileNameStr = unsigned char[16];
		enum __unnamed {
			kHeaderSize = 8,
			kMaxArrays = 1024,
			kMaxLoadable = 64,
			kFileNameLength = 15,
			kArrayNameLength = 15,
		};
	class _cArray::FileAndType{
	public:
		class ResFile* file;
		unsigned long type;
	};
	class _cArray::Header{
	public:
		short entrySize;
		short xSize;
		short ySize;
		short _pad;
	};
public:
	static class _cArray** sArrayTable;
	// calltype: NearC
	static void MakeTable();
	// calltype: NearC
	static void DeleteTable();
private:
	void CheckIntoTable();
	unsigned short SetSize(long, long);
	void SetXPointers();
	void FillHeader();
	void SetSizeAndHeaders(long, long);
	unsigned char * _GetPointer(long, long);
protected:
	void * __ptr32* fData;
public:
	void * __ptr32 fDataHandle;
	unsigned char * fDataPtr;
	long fySize;
	long fxSize;
	long fEntrySize;
protected:
	unsigned long fDataHandleSize;
	short fResID;
	short _pad;
	class ResFile* fFile;
	unsigned long fType;
	unsigned char fFileName[16];
	unsigned char fName[16];
	unsigned long fTinyName;
	static struct _cArray::FileAndType fsLoaded[64];
public:
	void _cArray(long, long, long, unsigned long, class ResFile*, unsigned long);
	void _cArray(long, long, long, unsigned char *, class ResFile*, unsigned long);
protected:
	void _cArray(void * __ptr32, class ResFile*, long, void (*)(void * __ptr32, long));
private:
	void BeginCreate(long, long, long, unsigned char *, class ResFile*, unsigned long);
	void FromDiskCreate(void * __ptr32, class ResFile*, long, void (*)(void * __ptr32, long));
public:
	unsigned long GetName();
	void GetName(unsigned char *);
	// calltype: NearC
	static class _cArray* GetArray(unsigned long, short);
	// calltype: NearC
	static class _cArray* GetArrayByType(unsigned long, short);
	// calltype: NearC
	static short GetArrayIndexInType(class _cArray*);
	// calltype: NearC
	static short GetNumArraysByType(unsigned long);
	// calltype: NearC
	static short GetLoadedIndex(class ResFile*, unsigned long);
	// calltype: NearC
	static void LoadAllArrays(class ResFile*, unsigned long, short, void (*)(void * __ptr32, long));
	static unsigned short sAllLoaded;
	// calltype: NearC
	static void DeleteAllArrays();
	void ClearBytes(char);
	short InsertRow(short);
	short InsertColumn(short);
	short DeleteRow(short);
	short DeleteColumn(short);
	unsigned short Resize(long, long, char);
	// vtable: 0
	intro void WriteToDisk();
	void CopyFrom(class _cArray*);
	void CopyFrom(unsigned long);
	void CopyFrom(unsigned char *);
	void CopyToByFTN(class ResFile*, unsigned long, unsigned char *);
	void CopyTo(class _cArray*);
	void CopyTo(unsigned long);
	void CopyTo(unsigned char *);
	void ~_cArray();
	void DeleteResource();
	// calltype: NearC
	static unsigned short IsNameTaken(unsigned long, short);
};

// Type: struct _cArray::FileAndType;
class _cArray::FileAndType{
public:
	class ResFile* file;
	unsigned long type;
};

// Type: class FlatResFile;
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: class FlatFile;
class FlatFile{
		enum __unnamed {
			kMaxNameLen = 255,
		};
protected:
	class FlatFile* fNext;
	unsigned char fName[256];
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long Open(unsigned char *);
	// vtable: 8
	intro long Open(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
};



// Contribution: 1:001664e0-001683d3 Module: 180, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005674e0
unsigned short OpenFile(class ResFile* pFile) {
// LINE 16:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 17:
	__asm        mov    ecx, pFile;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00567545;
// LINE 18:
	__asm        mov    eax, pFile;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, pFile;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pFile;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x00567510;
// LINE 19:
	__asm        mov    ecx, pFile;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0056753C;
// LINE 20:
	__asm        push   0x8C085;
	__asm        push   0x5BF754;
	__asm        push   0x14;
	__asm        push   0x5BF768;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 21:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0056754D;
// LINE 23:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0056754D;
// LINE 24:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567552
void _cArray::FromDiskCreate(void * __ptr32 hArray, class ResFile* pFile, long entrySize, void (*Swizzler)(void * __ptr32, long)) {
	unsigned short fileOpened;
	char * data;
	struct _cArray::Header* header;
	unsigned char tmpname[256];

// LINE 29:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x118;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 30:
	__asm        mov    eax, pFile;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 31:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        call   0x005674E0;
	__asm        add    esp, 4;
	__asm        mov    fileOpened, ax;
// LINE 33:
	__asm        mov    eax, hArray;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 34:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 37:
	__asm        jmp    near ptr 0x005675CE;
	__asm        push   0x8C085;
	__asm        push   0x5BF788;
	__asm        push   0x25;
	__asm        push   0x5BF7A0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 38:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x24];
	__asm        call   0x005536AE;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 52:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x24];
	__asm        call   0x0055360D;
// LINE 55:
	__asm        lea    eax, tmpname[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x24];
	__asm        call   0x00553564;
// LINE 56:
	__asm        xor    eax, eax;
	__asm        mov    al, tmpname[0];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x00567659;
	__asm        push   0x8C085;
	__asm        push   0x5BF7C0;
	__asm        push   0x38;
	__asm        push   0x5BF7EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 57:
	__asm        xor    eax, eax;
	__asm        mov    al, tmpname[0];
	__asm        cmp    eax, 0xF;
	__asm        jle    near ptr 0x00567671;
// LINE 58:
	__asm        mov    tmpname[0], 0xF;
// LINE 61:
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        lea    eax, tmpname[0];
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 62:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
// LINE 63:
	__asm        mov    ecx, this;
	__asm        call   0x00567BF7;
// LINE 67:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554B04;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 68:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    header, eax;
// LINE 70:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x24];
	__asm        call   0x0055383A;
// LINE 71:
	__asm        test   reinterpret_cast<uint32_t>(fileOpened), 0xFFFF;
	__asm        je     near ptr 0x0056771B;
// LINE 72:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x24];
	__asm        call   dword ptr [edx+0xC];
// LINE 75:
	__asm        mov    eax, header;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 76:
	__asm        mov    eax, this;
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 77:
	__asm        mov    eax, this;
	__asm        mov    ecx, entrySize;
	__asm        cmp    [eax+0x18], ecx;
	__asm        je     near ptr 0x0056776A;
	__asm        push   0x8C085;
	__asm        push   0x5BF80C;
	__asm        push   0x4D;
	__asm        push   0x5BF848;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 79:
	__asm        mov    eax, header;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 80:
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 81:
	__asm        mov    eax, header;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 82:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 84:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        lea    eax, [eax+ecx*4];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x1C];
	__asm        jbe    near ptr 0x00567808;
	__asm        push   0x8C085;
	__asm        push   0x5BF868;
	__asm        push   0x54;
	__asm        push   0x5BF87C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 89:
	__asm        mov    ecx, this;
	__asm        call   0x005689CC;
// LINE 92:
	__asm        cmp    Swizzler, 0;
	__asm        je     near ptr 0x005678F4;
// LINE 94:
// Block start:
	long xcount;
	long ycount;
	__asm        mov    xcount, 0;
	__asm        jmp    near ptr 0x00567832;
	__asm        inc    xcount;
	__asm        mov    eax, this;
	__asm        mov    ecx, xcount;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x005678F4;
// LINE 95:
	__asm        mov    ycount, 0;
	__asm        jmp    near ptr 0x0056785C;
	__asm        inc    ycount;
	__asm        mov    eax, this;
	__asm        mov    ecx, ycount;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x005678EF;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x005678A5;
	__asm        push   0x8C085;
	__asm        push   0x5BF89C;
	__asm        push   0x60;
	__asm        push   0x5BF8D4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 97:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, xcount;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    data, eax;
// LINE 98:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        imul   eax, ycount;
	__asm        add    data, eax;
// LINE 99:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 100:
	__asm        jmp    near ptr 0x00567856;
// LINE 101:
	__asm        jmp    near ptr 0x0056782C;
// LINE 105:
// Block end:
	__asm        jmp    near ptr 0x005678F9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00567900
void _cArray::BeginCreate(long entrySize, long xSize, long ySize, unsigned char * name, class ResFile* pFile, unsigned long rType) {
// LINE 116:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 123:
	__asm        cmp    pFile, 0;
	__asm        jne    near ptr 0x00567920;
	__asm        cmp    rType, 0;
	__asm        je     near ptr 0x00567939;
	__asm        push   0x8C085;
	__asm        push   0x5BF8F4;
	__asm        push   0x7B;
	__asm        push   0x5BF944;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 127:
	__asm        mov    eax, pFile;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 128:
	__asm        mov    eax, rType;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 129:
	__asm        mov    eax, entrySize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 132:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 133:
	__asm        cmp    name, 0;
	__asm        je     near ptr 0x005679AB;
// LINE 135:
	__asm        push   0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 136:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4C], eax;
// LINE 139:
	__asm        mov    ecx, this;
	__asm        call   0x00567BF7;
// LINE 141:
	__asm        jmp    near ptr 0x005679BC;
// LINE 143:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 0;
// LINE 144:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x3C], 0;
// LINE 147:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 0xFFFF;
// LINE 151:
	__asm        mov    eax, ySize;
	__asm        push   eax;
	__asm        mov    eax, xSize;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00567E33;
// LINE 153:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00567E6B;
// LINE 154:
	__asm        jmp    near ptr 0x005679E4;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x005679eb
void _cArray::~_cArray() {
// LINE 158:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593738;
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00567A2B;
// LINE 162:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 163:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 167:
	__asm        cmp    dword ptr ds:[0x5BF74C], 0;
	__asm        je     near ptr 0x00567B11;
// LINE 169:
// Block start:
	long cnt;
	unsigned short bFound;
	__asm        mov    bFound, 0;
// LINE 172:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00567A4D;
	__asm        inc    cnt;
	__asm        cmp    cnt, 0x400;
	__asm        jge    near ptr 0x00567B11;
// LINE 173:
	__asm        mov    eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00567A9F;
	__asm        mov    eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    near ptr 0x00567A9F;
	__asm        push   0x8C085;
	__asm        push   0x5BF964;
	__asm        push   0xAD;
	__asm        push   0x5BF97C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 174:
	__asm        mov    eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00567B0C;
	__asm        mov    eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        cmp    [eax+0x4C], ecx;
	__asm        jne    near ptr 0x00567B0C;
// LINE 176:
	__asm        test   reinterpret_cast<uint32_t>(bFound), 0xFFFF;
	__asm        je     near ptr 0x00567AF6;
	__asm        push   0x8C085;
	__asm        push   0x5BF99C;
	__asm        push   0xB0;
	__asm        push   0x5BF9D8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 179:
	__asm        mov    eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    dword ptr [ecx+eax*4], 0;
// LINE 182:
	__asm        mov    bFound, 1;
// LINE 187:
	__asm        jmp    near ptr 0x00567A4A;
// LINE 190:
// Block end:
	__asm        jmp    near ptr 0x00567B16;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567b1b
void _cArray::MakeTable() {
// LINE 194:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 195:
	__asm        cmp    dword ptr ds:[0x5BF74C], 0;
	__asm        jne    near ptr 0x00567B9D;
// LINE 196:
// Block start:
	long count;
	__asm        push   0x1000;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ds:[0x5BF74C], eax;
// LINE 197:
	__asm        cmp    dword ptr ds:[0x5BF74C], 0;
	__asm        jne    near ptr 0x00567B6C;
	__asm        push   0x8C085;
	__asm        push   0x5BF9F8;
	__asm        push   0xC5;
	__asm        push   0x5BFA18;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 198:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00567B7B;
	__asm        inc    count;
	__asm        cmp    count, 0x400;
	__asm        jge    near ptr 0x00567B9D;
// LINE 199:
	__asm        mov    eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    dword ptr [ecx+eax*4], 0;
// LINE 200:
	__asm        jmp    near ptr 0x00567B78;
// LINE 202:
// Block end:
	__asm        jmp    near ptr 0x00567BA2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567ba7
void _cArray::DeleteTable() {
// LINE 205:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 206:
	__asm        cmp    dword ptr ds:[0x5BF74C], 0;
	__asm        je     near ptr 0x00567BD7;
// LINE 207:
	__asm        mov    eax, ds:[0x5BF74C];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
// LINE 208:
	__asm        jmp    near ptr 0x00567BDC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567be1
void _cArray::WriteToDisk() {
// LINE 214:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 246:
	__asm        jmp    near ptr 0x00567BF2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567bf7
void _cArray::CheckIntoTable() {
// LINE 248:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 249:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     near ptr 0x00567D08;
// LINE 250:
// Block start:
	long foundcount;
	long count;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    near ptr 0x00567C39;
	__asm        push   0x8C085;
	__asm        push   0x5BFA38;
	__asm        push   0xFA;
	__asm        push   0x5BFA60;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 252:
	__asm        call   0x00567B1B;
// LINE 254:
	__asm        mov    foundcount, 0xFFFFFFFF;
// LINE 255:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00567C54;
	__asm        inc    count;
	__asm        cmp    count, 0x400;
	__asm        jge    near ptr 0x00567CD3;
// LINE 256:
	__asm        mov    eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00567CAB;
	__asm        mov    eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4C];
	__asm        cmp    [eax+0x4C], ecx;
	__asm        jne    near ptr 0x00567CAB;
	__asm        push   0x8C085;
	__asm        push   0x5BFA80;
	__asm        push   0x100;
	__asm        push   0x5BFAA0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 257:
	__asm        cmp    foundcount, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00567CCE;
	__asm        mov    eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        jne    near ptr 0x00567CCE;
// LINE 258:
	__asm        mov    eax, count;
	__asm        mov    foundcount, eax;
// LINE 259:
	__asm        jmp    near ptr 0x00567C51;
// LINE 261:
	__asm        cmp    foundcount, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00567CF9;
	__asm        push   0x8C085;
	__asm        push   0x5BFAC0;
	__asm        push   0x105;
	__asm        push   0x5BFAF4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    ecx, foundcount;
	__asm        mov    edx, ds:[0x5BF74C];
	__asm        mov    [edx+ecx*4], eax;
// LINE 264:
// Block end:
	__asm        jmp    near ptr 0x00567D0D;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567d12
void _cArray::FillHeader() {
	unsigned long debugsize;
	struct _cArray::Header* header;

// LINE 303:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        mov    debugsize, eax;
// LINE 306:
	__asm        mov    eax, this;
	__asm        mov    ecx, debugsize;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jbe    near ptr 0x00567D5B;
	__asm        push   0x8C085;
	__asm        push   0x5BFB14;
	__asm        push   0x132;
	__asm        push   0x5BFB30;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 308:
	__asm        jmp    near ptr 0x00567D7C;
	__asm        push   0x8C085;
	__asm        push   0x5BFB50;
	__asm        push   0x134;
	__asm        push   0x5BFB68;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 309:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        lea    eax, [eax+ecx*4];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x1C];
	__asm        je     near ptr 0x00567DC4;
	__asm        push   0x8C085;
	__asm        push   0x5BFB88;
	__asm        push   0x135;
	__asm        push   0x5BFBA8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554DAF;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00567DFA;
	__asm        push   0x8C085;
	__asm        push   0x5BFBC8;
	__asm        push   0x136;
	__asm        push   0x5BFBDC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 312:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    header, eax;
// LINE 313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, header;
	__asm        mov    [ecx+2], ax;
// LINE 314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, header;
	__asm        mov    [ecx+4], ax;
// LINE 315:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, header;
	__asm        mov    [ecx], ax;
// LINE 316:
	__asm        jmp    near ptr 0x00567E2E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00567e33
void _cArray::SetSizeAndHeaders(long newxSize, long newySize) {
// LINE 319:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 320:
	__asm        mov    eax, newySize;
	__asm        push   eax;
	__asm        mov    eax, newxSize;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568879;
// LINE 321:
	__asm        mov    ecx, this;
	__asm        call   0x00567D12;
// LINE 322:
	__asm        mov    ecx, this;
	__asm        call   0x005689CC;
// LINE 323:
	__asm        jmp    near ptr 0x00567E64;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00567e6b
void _cArray::ClearBytes(char zeropad) {
	unsigned char * writeplace;
	unsigned long debugsize;
	unsigned char * begin;
	long numBytes;
	unsigned char * end;
	long cnt;
	char * fillPtr;

// LINE 326:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 327:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x00567E91;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x00567E96;
// LINE 329:
	__asm        jmp    near ptr 0x00567FDF;
// LINE 334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    begin, eax;
// LINE 335:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        mov    debugsize, eax;
// LINE 336:
	__asm        mov    eax, this;
	__asm        mov    ecx, debugsize;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jbe    near ptr 0x00567EDC;
	__asm        push   0x8C085;
	__asm        push   0x5BFBFC;
	__asm        push   0x150;
	__asm        push   0x5BFC04;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 337:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    end, eax;
// LINE 340:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 2;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    fillPtr, eax;
// LINE 341:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, fillPtr;
	__asm        cmp    [eax], ecx;
	__asm        je     near ptr 0x00567F2A;
	__asm        push   0x8C085;
	__asm        push   0x5BFC24;
	__asm        push   0x155;
	__asm        push   0x5BFC58;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    numBytes, eax;
// LINE 343:
	__asm        cmp    numBytes, 0;
	__asm        jle    near ptr 0x00567F58;
	__asm        cmp    numBytes, 0x7A1200;
	__asm        jl     near ptr 0x00567F74;
	__asm        push   0x8C085;
	__asm        push   0x5BFC78;
	__asm        push   0x157;
	__asm        push   0x5BFC9C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 344:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00567F83;
	__asm        inc    cnt;
	__asm        mov    eax, cnt;
	__asm        cmp    numBytes, eax;
	__asm        jle    near ptr 0x00567FDA;
// LINE 346:
	__asm        mov    eax, fillPtr;
	__asm        mov    writeplace, eax;
// LINE 347:
	__asm        mov    eax, begin;
	__asm        cmp    writeplace, eax;
	__asm        jb     near ptr 0x00567FAE;
	__asm        mov    eax, writeplace;
	__asm        inc    eax;
	__asm        cmp    eax, end;
	__asm        jbe    near ptr 0x00567FCA;
// LINE 348:
	__asm        push   0x8C085;
	__asm        push   0x5BFCBC;
	__asm        push   0x15C;
	__asm        push   0x5BFCD8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 350:
	__asm        mov    al, zeropad;
	__asm        mov    ecx, fillPtr;
	__asm        mov    [ecx], al;
// LINE 351:
	__asm        inc    fillPtr;
// LINE 352:
	__asm        jmp    near ptr 0x00567F80;
// LINE 354:
	__asm        jmp    near ptr 0x00567FDF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00567fe6
short _cArray::InsertRow(short afterwhich) {
	short beforewhich;
	long oldxsize;
	long oldysize;

// LINE 358:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 360:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    oldxsize, eax;
// LINE 361:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    oldysize, eax;
// LINE 363:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005686AF;
// LINE 365:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldxsize;
	__asm        inc    ecx;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jne    near ptr 0x0056803C;
	__asm        mov    eax, this;
	__asm        mov    ecx, oldysize;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x00568058;
	__asm        push   0x8C085;
	__asm        push   0x5BFCF8;
	__asm        push   0x16D;
	__asm        push   0x5BFD00;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 367:
	__asm        movsx  eax, afterwhich;
	__asm        inc    eax;
	__asm        mov    beforewhich, ax;
// LINE 368:
	__asm        mov    eax, this;
	__asm        movsx  ecx, beforewhich;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x00568118;
// LINE 369:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00568118;
// LINE 371:
// Block start:
	unsigned char * movefrom;
	unsigned char * moveto;
	short count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    eax;
	__asm        mov    count, ax;
	__asm        jmp    near ptr 0x00568092;
	__asm        dec    count;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, beforewhich;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00568118;
// LINE 373:
	__asm        jmp    near ptr 0x005680A7;
	__asm        movsx  eax, count;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    movefrom, eax;
// LINE 374:
	__asm        jmp    near ptr 0x005680BD;
	__asm        movsx  eax, count;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    moveto, eax;
// LINE 375:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, moveto;
	__asm        push   eax;
	__asm        mov    eax, movefrom;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 378:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00568113;
	__asm        push   0x8C085;
	__asm        push   0x5BFD20;
	__asm        push   0x17A;
	__asm        push   0x5BFD28;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 379:
	__asm        jmp    near ptr 0x0056808E;
// LINE 382:
// Block end:
	__asm        mov    ax, beforewhich;
	__asm        jmp    near ptr 0x00568121;
// LINE 383:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568128
short _cArray::InsertColumn(short afterwhich) {
	short beforewhich;
	long oldxsize;
	long oldysize;

// LINE 386:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 388:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    oldxsize, eax;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    oldysize, eax;
// LINE 391:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005686AF;
// LINE 392:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldxsize;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jne    near ptr 0x0056817E;
	__asm        mov    eax, this;
	__asm        mov    ecx, oldysize;
	__asm        inc    ecx;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x0056819A;
	__asm        push   0x8C085;
	__asm        push   0x5BFD48;
	__asm        push   0x188;
	__asm        push   0x5BFD50;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 394:
	__asm        movsx  eax, afterwhich;
	__asm        inc    eax;
	__asm        mov    beforewhich, ax;
// LINE 395:
	__asm        mov    eax, this;
	__asm        movsx  ecx, beforewhich;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00568284;
// LINE 397:
// Block start:
	unsigned char * movefrom;
	unsigned char * moveto;
	short xcount;
	__asm        mov    xcount, 0;
	__asm        jmp    near ptr 0x005681C2;
	__asm        inc    xcount;
	__asm        mov    eax, this;
	__asm        movsx  ecx, xcount;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x00568284;
// LINE 398:
// Block start:
	short ycount;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    eax;
	__asm        mov    ycount, ax;
	__asm        jmp    near ptr 0x005681E6;
	__asm        dec    ycount;
	__asm        movsx  eax, ycount;
	__asm        movsx  ecx, beforewhich;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0056827F;
// LINE 399:
	__asm        movsx  eax, ycount;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0056821E;
	__asm        push   0x8C085;
	__asm        push   0x5BFD70;
	__asm        push   0x18F;
	__asm        push   0x5BFD78;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 400:
	__asm        jmp    near ptr 0x00568223;
	__asm        movsx  eax, ycount;
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        movsx  ecx, xcount;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        add    eax, [edx+ecx*4];
	__asm        mov    movefrom, eax;
// LINE 401:
	__asm        jmp    near ptr 0x00568244;
	__asm        movsx  eax, xcount;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        movsx  edx, ycount;
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    moveto, eax;
// LINE 402:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, moveto;
	__asm        push   eax;
	__asm        mov    eax, movefrom;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 403:
	__asm        jmp    near ptr 0x005681E2;
// LINE 404:
// Block end:
	__asm        jmp    near ptr 0x005681BE;
// LINE 406:
// Block end:
	__asm        mov    ax, beforewhich;
	__asm        jmp    near ptr 0x0056828D;
// LINE 407:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568294
short _cArray::DeleteRow(short which) {
	unsigned char * movefrom;
	unsigned char * moveto;
	long oldxsize;
	long oldysize;

// LINE 410:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 413:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    oldxsize, eax;
// LINE 414:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    oldysize, eax;
// LINE 415:
	__asm        cmp    oldxsize, 0;
	__asm        jg     near ptr 0x005682D8;
	__asm        push   0x8C085;
	__asm        push   0x5BFD98;
	__asm        push   0x19F;
	__asm        push   0x5BFDA8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 417:
	__asm        mov    eax, this;
	__asm        movsx  ecx, which;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x005682F4;
	__asm        movsx  eax, which;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00568310;
	__asm        push   0x8C085;
	__asm        push   0x5BFDC8;
	__asm        push   0x1A1;
	__asm        push   0x5BFDDC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 418:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x0056838F;
// LINE 419:
// Block start:
	short count;
	__asm        mov    ax, which;
	__asm        mov    count, ax;
	__asm        jmp    near ptr 0x0056832E;
	__asm        inc    count;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    eax;
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0056838F;
// LINE 420:
	__asm        jmp    near ptr 0x00568346;
	__asm        movsx  eax, count;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4+4];
	__asm        mov    movefrom, eax;
// LINE 421:
	__asm        jmp    near ptr 0x0056835C;
	__asm        movsx  eax, count;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    moveto, eax;
// LINE 422:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, moveto;
	__asm        push   eax;
	__asm        mov    eax, movefrom;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 423:
	__asm        jmp    near ptr 0x0056832A;
// LINE 426:
// Block end:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005686AF;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005683CF;
	__asm        push   0x8C085;
	__asm        push   0x5BFDFC;
	__asm        push   0x1AA;
	__asm        push   0x5BFE04;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 427:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldysize;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x005683FA;
	__asm        push   0x8C085;
	__asm        push   0x5BFE24;
	__asm        push   0x1AB;
	__asm        push   0x5BFE2C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 428:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldxsize;
	__asm        dec    ecx;
	__asm        cmp    [eax+0x14], ecx;
	__asm        je     near ptr 0x00568426;
	__asm        push   0x8C085;
	__asm        push   0x5BFE4C;
	__asm        push   0x1AC;
	__asm        push   0x5BFE54;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 429:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x14];
	__asm        jmp    near ptr 0x00568432;
// LINE 430:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568439
short _cArray::DeleteColumn(short which) {
	unsigned char * thisone;
	long oldxsize;
	short xcount;
	unsigned char * nextone;
	long oldysize;

// LINE 433:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 436:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    oldysize, eax;
// LINE 437:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    oldxsize, eax;
// LINE 438:
	__asm        cmp    oldysize, 0;
	__asm        jg     near ptr 0x0056847D;
	__asm        push   0x8C085;
	__asm        push   0x5BFE74;
	__asm        push   0x1B6;
	__asm        push   0x5BFE84;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 440:
	__asm        movsx  eax, which;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00568499;
	__asm        mov    eax, this;
	__asm        movsx  ecx, which;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jg     near ptr 0x005684B5;
	__asm        push   0x8C085;
	__asm        push   0x5BFEA4;
	__asm        push   0x1B8;
	__asm        push   0x5BFEBC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 441:
	__asm        mov    xcount, 0;
	__asm        jmp    near ptr 0x005684C4;
	__asm        inc    xcount;
	__asm        mov    eax, this;
	__asm        movsx  ecx, xcount;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x00568605;
// LINE 442:
// Block start:
	short ycount;
	__asm        mov    ax, which;
	__asm        mov    ycount, ax;
	__asm        jmp    near ptr 0x005684E5;
	__asm        inc    ycount;
	__asm        mov    eax, this;
	__asm        movsx  ecx, ycount;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00568567;
// LINE 443:
	__asm        movsx  eax, ycount;
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+0x10];
	__asm        jge    near ptr 0x00568562;
// LINE 444:
	__asm        jmp    near ptr 0x0056850B;
	__asm        movsx  eax, xcount;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        movsx  edx, ycount;
	__asm        imul   ecx, edx;
	__asm        add    eax, ecx;
	__asm        mov    thisone, eax;
// LINE 445:
	__asm        jmp    near ptr 0x0056852F;
	__asm        movsx  eax, ycount;
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        movsx  ecx, xcount;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        add    eax, [edx+ecx*4];
	__asm        mov    nextone, eax;
// LINE 446:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, thisone;
	__asm        push   eax;
	__asm        mov    eax, nextone;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 448:
	__asm        jmp    near ptr 0x005684E1;
// LINE 450:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    eax;
	__asm        movsx  ecx, which;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00568600;
// LINE 451:
// Block start:
	unsigned char * lastPart;
	unsigned char * nextToLast;
	__asm        jmp    near ptr 0x0056857F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        movsx  ecx, xcount;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        add    eax, [edx+ecx*4];
	__asm        mov    lastPart, eax;
// LINE 452:
	__asm        jmp    near ptr 0x005685A2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        movsx  ecx, xcount;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        add    eax, [edx+ecx*4];
	__asm        mov    nextToLast, eax;
// LINE 453:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, lastPart;
	__asm        push   eax;
	__asm        mov    eax, nextToLast;
	__asm        push   eax;
	__asm        call   0x00554C73;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00568600;
	__asm        push   0x8C085;
	__asm        push   0x5BFEDC;
	__asm        push   0x1C5;
	__asm        push   0x5BFEE4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 456:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x005684C0;
// LINE 457:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005686AF;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00568645;
	__asm        push   0x8C085;
	__asm        push   0x5BFF04;
	__asm        push   0x1C9;
	__asm        push   0x5BFF0C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 458:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldysize;
	__asm        dec    ecx;
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x00568671;
	__asm        push   0x8C085;
	__asm        push   0x5BFF2C;
	__asm        push   0x1CA;
	__asm        push   0x5BFF34;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 459:
	__asm        mov    eax, this;
	__asm        mov    ecx, oldxsize;
	__asm        cmp    [eax+0x14], ecx;
	__asm        je     near ptr 0x0056869C;
	__asm        push   0x8C085;
	__asm        push   0x5BFF54;
	__asm        push   0x1CB;
	__asm        push   0x5BFF5C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 460:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10];
	__asm        jmp    near ptr 0x005686A8;
// LINE 461:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x005686af
unsigned short _cArray::Resize(long newxSize, long newySize, char zeropad) {
	unsigned char * src;
	long ycnt;
	class _cArray temp;
	long xcnt;
	unsigned char * dest;

// LINE 465:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x56885E;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x74], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    [ebp-0x78], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    [ebp-0x7C], eax;
// LINE 468:
	__asm        mov    temp.<vftable>, 0x593738;
	__asm        jmp    near ptr 0x005686FC;
	__asm        call   0x00567B1B;
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x78];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        push   eax;
	__asm        lea    ecx, temp.<vftable>;
	__asm        call   0x00567900;
	__asm        jmp    near ptr 0x0056871B;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 469:
	__asm        lea    eax, temp.<vftable>;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568BE8;
// LINE 471:
	__asm        mov    eax, newySize;
	__asm        push   eax;
	__asm        mov    eax, newxSize;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00567E33;
// LINE 472:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x0056876F;
	__asm        push   0x8C085;
	__asm        push   0x5BFF7C;
	__asm        push   0x1D8;
	__asm        push   0x5BFFB4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 474:
	__asm        mov    eax, reinterpret_cast<uint32_t>(zeropad);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00567E6B;
// LINE 477:
	__asm        mov    xcnt, 0;
	__asm        jmp    near ptr 0x0056878A;
	__asm        inc    xcnt;
	__asm        mov    eax, this;
	__asm        mov    ecx, xcnt;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x0056883A;
// LINE 478:
	__asm        mov    eax, xcnt;
	__asm        cmp    temp.fxSize, eax;
	__asm        jle    near ptr 0x00568835;
// LINE 479:
	__asm        mov    ycnt, 0;
	__asm        jmp    near ptr 0x005687B4;
	__asm        inc    ycnt;
	__asm        mov    eax, this;
	__asm        mov    ecx, ycnt;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jle    near ptr 0x00568835;
// LINE 480:
	__asm        mov    eax, ycnt;
	__asm        cmp    temp.fySize, eax;
	__asm        jle    near ptr 0x0056882B;
// LINE 481:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, xcnt;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        imul   ecx, ycnt;
	__asm        add    eax, ecx;
	__asm        mov    dest, eax;
// LINE 482:
	__asm        mov    eax, temp.fData;
	__asm        mov    ecx, xcnt;
	__asm        mov    eax, [eax+ecx*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        imul   ecx, ycnt;
	__asm        add    eax, ecx;
	__asm        mov    src, eax;
// LINE 483:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x18], 0;
	__asm        je     near ptr 0x00568826;
// LINE 484:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 485:
	__asm        jmp    near ptr 0x00568830;
// LINE 486:
	__asm        jmp    near ptr 0x00568835;
// LINE 487:
	__asm        jmp    near ptr 0x005687B1;
// LINE 488:
	__asm        jmp    near ptr 0x00568787;
// LINE 489:
	__asm        mov    word ptr [ebp-0x70], 1;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x00568855;
	__asm        mov    ax, [ebp-0x70];
	__asm        jmp    near ptr 0x00568868;
// LINE 490:
_L27257:
	__asm        lea    ecx, temp.<vftable>;
	__asm        call   0x005679EB;
	__asm        ret;
_L27256:
	__asm        mov    eax, 0x5961E0;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00568879
unsigned short _cArray::SetSize(long newxSize, long newySize) {
// LINE 493:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 494:
	__asm        mov    eax, this;
	__asm        mov    ecx, newySize;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    near ptr 0x005688AC;
	__asm        mov    eax, this;
	__asm        mov    ecx, newxSize;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jne    near ptr 0x005688AC;
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005689C5;
// LINE 496:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10], 0xFFFFFFFF;
	__asm        je     near ptr 0x005688E2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0xFFFFFFFF;
	__asm        je     near ptr 0x005688E2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x005688E2;
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 501:
	__asm        mov    eax, newySize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
	__asm        mov    eax, newxSize;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 503:
	__asm        jmp    near ptr 0x00568915;
	__asm        push   0x8C085;
	__asm        push   0x5BFFD4;
	__asm        push   0x1F7;
	__asm        push   0x5BFFEC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 504:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x14];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x14];
	__asm        lea    eax, [eax+ecx*4];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 505:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0x7A1200;
	__asm        jb     near ptr 0x00568967;
	__asm        push   0x8C085;
	__asm        push   0x5C000C;
	__asm        push   0x1F9;
	__asm        push   0x5C0024;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 506:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   0x00554759;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 507:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x005689A7;
	__asm        push   0x8C085;
	__asm        push   0x5C0044;
	__asm        push   0x1FB;
	__asm        push   0x5C0054;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 509:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554B04;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 511:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005689C5;
// LINE 512:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005689cc
void _cArray::SetXPointers() {
	short count;

// LINE 515:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 517:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 519:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x005689F9;
	__asm        jmp    near ptr 0x00568A63;
// LINE 521:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        shl    eax, 2;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
// LINE 523:
	__asm        mov    count, 1;
	__asm        jmp    near ptr 0x00568A1F;
	__asm        inc    count;
	__asm        mov    eax, this;
	__asm        movsx  ecx, count;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x00568A5E;
// LINE 524:
	__asm        movsx  eax, count;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    eax, [ecx+eax*4-4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, this;
	__asm        imul   ecx, [edx+0x10];
	__asm        add    eax, ecx;
	__asm        movsx  ecx, count;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+4];
	__asm        mov    [edx+ecx*4], eax;
// LINE 526:
	__asm        jmp    near ptr 0x00568A1B;
// LINE 527:
	__asm        jmp    near ptr 0x00568A63;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00568a68
void _cArray::CopyFrom(unsigned char * fromName) {
// LINE 537:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 538:
	__asm        mov    eax, fromName;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568A95;
// LINE 539:
	__asm        jmp    near ptr 0x00568A8E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568a95
void _cArray::CopyFrom(unsigned long oldname) {
	class _cArray* src;

// LINE 542:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 543:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, oldname;
	__asm        push   eax;
	__asm        call   0x00568DB1;
	__asm        add    esp, 8;
	__asm        mov    src, eax;
// LINE 544:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568ACA;
// LINE 545:
	__asm        jmp    near ptr 0x00568AC3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568aca
void _cArray::CopyFrom(class _cArray* src) {
	long howmuch;

// LINE 548:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 549:
	__asm        cmp    src, 0;
	__asm        jne    near ptr 0x00568AFC;
	__asm        push   0x8C085;
	__asm        push   0x5C0074;
	__asm        push   0x225;
	__asm        push   0x5C0098;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 550:
	__asm        mov    eax, this;
	__asm        mov    ecx, src;
	__asm        mov    ecx, [ecx+0x18];
	__asm        cmp    [eax+0x18], ecx;
	__asm        je     near ptr 0x00568B2A;
	__asm        push   0x8C085;
	__asm        push   0x5C00B8;
	__asm        push   0x226;
	__asm        push   0x5C00E0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 551:
	__asm        mov    eax, this;
	__asm        mov    ecx, src;
	__asm        mov    ecx, [ecx+0x14];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jne    near ptr 0x00568B4E;
	__asm        mov    eax, this;
	__asm        mov    ecx, src;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x00568B6A;
	__asm        push   0x8C085;
	__asm        push   0x5C0100;
	__asm        push   0x227;
	__asm        push   0x5C0124;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 553:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    howmuch, eax;
// LINE 554:
	__asm        cmp    howmuch, 0;
	__asm        jl     near ptr 0x00568B98;
	__asm        cmp    howmuch, 0x7A1200;
	__asm        jl     near ptr 0x00568BB4;
	__asm        push   0x8C085;
	__asm        push   0x5C0144;
	__asm        push   0x22A;
	__asm        push   0x5C0160;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 555:
	__asm        cmp    howmuch, 0;
	__asm        je     near ptr 0x00568BDC;
// LINE 556:
	__asm        mov    eax, howmuch;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, src;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 557:
	__asm        jmp    near ptr 0x00568BE1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568be8
void _cArray::CopyTo(class _cArray* dest) {
	long howmuch;

// LINE 568:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 569:
	__asm        cmp    dest, 0;
	__asm        jne    near ptr 0x00568C1A;
	__asm        push   0x8C085;
	__asm        push   0x5C0180;
	__asm        push   0x239;
	__asm        push   0x5C01A4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 570:
	__asm        mov    eax, dest;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x18];
	__asm        cmp    [eax+0x18], ecx;
	__asm        je     near ptr 0x00568C48;
	__asm        push   0x8C085;
	__asm        push   0x5C01C4;
	__asm        push   0x23A;
	__asm        push   0x5C01EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 571:
	__asm        mov    eax, this;
	__asm        mov    ecx, dest;
	__asm        mov    ecx, [ecx+0x14];
	__asm        cmp    [eax+0x14], ecx;
	__asm        jne    near ptr 0x00568C6C;
	__asm        mov    eax, this;
	__asm        mov    ecx, dest;
	__asm        mov    ecx, [ecx+0x10];
	__asm        cmp    [eax+0x10], ecx;
	__asm        je     near ptr 0x00568C88;
	__asm        push   0x8C085;
	__asm        push   0x5C020C;
	__asm        push   0x23B;
	__asm        push   0x5C022C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 573:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        imul   eax, [ecx+0x18];
	__asm        mov    howmuch, eax;
// LINE 574:
	__asm        cmp    howmuch, 0;
	__asm        jl     near ptr 0x00568CB6;
	__asm        cmp    howmuch, 0x7A1200;
	__asm        jl     near ptr 0x00568CD2;
	__asm        push   0x8C085;
	__asm        push   0x5C024C;
	__asm        push   0x23E;
	__asm        push   0x5C0278;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 575:
	__asm        cmp    howmuch, 0;
	__asm        je     near ptr 0x00568CFA;
// LINE 576:
	__asm        mov    eax, howmuch;
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 577:
	__asm        jmp    near ptr 0x00568CFF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568d06
void _cArray::CopyTo(unsigned long oldname) {
	class _cArray* dest;

// LINE 580:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 581:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, oldname;
	__asm        push   eax;
	__asm        call   0x00568DB1;
	__asm        add    esp, 8;
	__asm        mov    dest, eax;
// LINE 582:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568BE8;
// LINE 583:
	__asm        jmp    near ptr 0x00568D34;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568d3b
void _cArray::CopyTo(unsigned char * toName) {
// LINE 586:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 587:
	__asm        mov    eax, toName;
	__asm        push   eax;
	__asm        call   0x005661F4;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00568D06;
// LINE 588:
	__asm        jmp    near ptr 0x00568D61;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568d68
void _cArray::GetName(unsigned char * name) {
// LINE 591:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 592:
	__asm        push   0x10;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 593:
	__asm        jmp    near ptr 0x00568D8E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00568d95
unsigned long _cArray::GetName() {
// LINE 596:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 597:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4C];
	__asm        jmp    near ptr 0x00568DAC;
// LINE 598:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00568db1
class _cArray* _cArray::GetArray(unsigned long tinyname, short numChars) {
	short cnt;

// LINE 610:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 612:
	__asm        call   0x00567B1B;
// LINE 613:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00568DCE;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x400;
	__asm        jge    near ptr 0x00568F19;
// LINE 614:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00568E24;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    near ptr 0x00568E24;
	__asm        push   0x8C085;
	__asm        push   0x5C0298;
	__asm        push   0x266;
	__asm        push   0x5C02B0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 615:
	__asm        movsx  eax, numChars;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00568E75;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00568E75;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, tinyname;
	__asm        cmp    [eax+0x4C], ecx;
	__asm        jne    near ptr 0x00568E75;
// LINE 616:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        jmp    near ptr 0x00568F20;
// LINE 618:
	__asm        jmp    near ptr 0x00568F14;
	__asm        movsx  eax, numChars;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00568F14;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        cmp    dword ptr [ecx+eax*4], 0;
	__asm        je     near ptr 0x00568F14;
// LINE 619:
// Block start:
	short shiftnum;
	__asm        mov    eax, 4;
	__asm        movsx  ecx, numChars;
	__asm        sub    eax, ecx;
	__asm        shl    eax, 3;
	__asm        mov    shiftnum, ax;
// LINE 620:
	__asm        movsx  eax, shiftnum;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00568EC1;
	__asm        movsx  eax, shiftnum;
	__asm        cmp    eax, 0x20;
	__asm        jb     near ptr 0x00568EDD;
	__asm        push   0x8C085;
	__asm        push   0x5C02D0;
	__asm        push   0x26C;
	__asm        push   0x5C02F8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 621:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    eax, [eax+0x4C];
	__asm        mov    cl, reinterpret_cast<uint8_t>(shiftnum);
	__asm        shr    eax, cl;
	__asm        mov    edx, tinyname;
	__asm        mov    cl, reinterpret_cast<uint8_t>(shiftnum);
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x00568F14;
// LINE 622:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        jmp    near ptr 0x00568F20;
// LINE 624:
// Block end:
	__asm        jmp    near ptr 0x00568DCA;
// LINE 625:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00568F20;
// LINE 626:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00568f25
class _cArray* _cArray::GetArrayByType(unsigned long rType, short which) {
	short found;
	short count;
	class _cArray* arr;

// LINE 629:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 630:
	__asm        call   0x00567B1B;
// LINE 631:
	__asm        mov    found, 0;
// LINE 633:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00568F48;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x400;
	__asm        jge    near ptr 0x00568F9C;
// LINE 634:
	__asm        movsx  eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    arr, eax;
// LINE 635:
	__asm        mov    eax, arr;
	__asm        mov    ecx, rType;
	__asm        cmp    [eax+0x28], ecx;
	__asm        jne    near ptr 0x00568F97;
// LINE 636:
	__asm        movsx  eax, found;
	__asm        movsx  ecx, which;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00568F93;
// LINE 637:
	__asm        mov    eax, arr;
	__asm        jmp    near ptr 0x00568FA3;
// LINE 638:
	__asm        jmp    near ptr 0x00568F97;
// LINE 639:
	__asm        inc    found;
// LINE 641:
	__asm        jmp    near ptr 0x00568F44;
// LINE 642:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00568FA3;
// LINE 643:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00568fa8
short _cArray::GetNumArraysByType(unsigned long rType) {
	short cnt;
	short numByType;

// LINE 646:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 647:
	__asm        call   0x00567B1B;
// LINE 648:
	__asm        mov    numByType, 0;
// LINE 649:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00568FCB;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x400;
	__asm        jge    near ptr 0x00569002;
// LINE 650:
// Block start:
	class _cArray* tmp;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    tmp, eax;
// LINE 651:
	__asm        mov    eax, tmp;
	__asm        mov    ecx, rType;
	__asm        cmp    [eax+0x28], ecx;
	__asm        jne    near ptr 0x00568FFD;
// LINE 652:
	__asm        inc    numByType;
// LINE 653:
// Block end:
	__asm        jmp    near ptr 0x00568FC7;
// LINE 654:
	__asm        mov    ax, numByType;
	__asm        jmp    near ptr 0x0056900B;
// LINE 655:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00569010
short _cArray::GetArrayIndexInType(class _cArray* findarr) {
	short found;
	short count;
	class _cArray* arr;

// LINE 658:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 659:
	__asm        call   0x00567B1B;
// LINE 660:
	__asm        mov    found, 0;
// LINE 662:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00569033;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x400;
	__asm        jge    near ptr 0x00569087;
// LINE 663:
	__asm        movsx  eax, count;
	__asm        mov    ecx, ds:[0x5BF74C];
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    arr, eax;
// LINE 664:
	__asm        mov    eax, arr;
	__asm        mov    ecx, findarr;
	__asm        mov    ecx, [ecx+0x28];
	__asm        cmp    [eax+0x28], ecx;
	__asm        jne    near ptr 0x00569082;
// LINE 665:
	__asm        mov    eax, findarr;
	__asm        cmp    arr, eax;
	__asm        jne    near ptr 0x0056907E;
// LINE 666:
	__asm        mov    ax, found;
	__asm        jmp    near ptr 0x00569090;
// LINE 667:
	__asm        jmp    near ptr 0x00569082;
// LINE 668:
	__asm        inc    found;
// LINE 670:
	__asm        jmp    near ptr 0x0056902F;
// LINE 671:
	__asm        mov    ax, 0xFFFF;
	__asm        jmp    near ptr 0x00569090;
// LINE 672:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00569095
void _cArray::LoadAllArrays(class ResFile* pFile, unsigned long rType, short entrySize, void (*Swizzler)(void * __ptr32, long)) {
	short numArrays;
	short diskEntrySize;
	short foundcount;
	unsigned short fileOpened;
	short count;
	struct _cArray::FileAndType ft;
	struct _cArray::Header* header;

// LINE 705:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x569305;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 706:
	__asm        cmp    pFile, 0;
	__asm        jne    near ptr 0x005690D9;
	__asm        push   0x8C085;
	__asm        push   0x5C0318;
	__asm        push   0x2C2;
	__asm        push   0x5C0338;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 712:
	__asm        push   0;
	__asm        push   0;
	__asm        call   0x0056931D;
	__asm        add    esp, 8;
	__asm        mov    foundcount, ax;
// LINE 713:
	__asm        movsx  eax, foundcount;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00569112;
	__asm        push   0x8C085;
	__asm        push   0x5C0358;
	__asm        push   0x2C9;
	__asm        push   0x5C0378;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 714:
	__asm        mov    eax, pFile;
	__asm        mov    ft.file, eax;
	__asm        mov    eax, rType;
	__asm        mov    ft.type, eax;
// LINE 715:
	__asm        mov    eax, ft.file;
	__asm        mov    ecx, ft.type;
	__asm        movsx  edx, foundcount;
	__asm        lea    edx, [edx*8+0x638998];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 717:
	__asm        mov    eax, pFile;
	__asm        push   eax;
	__asm        call   0x005674E0;
	__asm        add    esp, 4;
	__asm        mov    fileOpened, ax;
// LINE 721:
	__asm        mov    eax, rType;
	__asm        push   eax;
	__asm        mov    ecx, pFile;
	__asm        call   0x0055319A;
	__asm        mov    numArrays, ax;
// LINE 722:
	__asm        mov    count, 1;
	__asm        jmp    near ptr 0x00569163;
	__asm        inc    count;
	__asm        movsx  eax, numArrays;
	__asm        movsx  ecx, count;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005692DB;
// LINE 724:
// Block start:
	unsigned char * dataPtr;
	void * __ptr32 hArray;
	class _cArray* tmp;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(count);
	__asm        push   eax;
	__asm        mov    eax, rType;
	__asm        push   eax;
	__asm        mov    ecx, pFile;
	__asm        call   0x00553452;
	__asm        mov    hArray, eax;
// LINE 725:
	__asm        cmp    hArray, 0;
	__asm        jne    near ptr 0x005691AE;
	__asm        push   0x8C085;
	__asm        push   0x5C0398;
	__asm        push   0x2D5;
	__asm        push   0x5C03C8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 727:
	__asm        mov    eax, hArray;
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    dataPtr, eax;
// LINE 728:
	__asm        mov    eax, dataPtr;
	__asm        mov    header, eax;
// LINE 729:
	__asm        mov    eax, header;
	__asm        mov    ax, [eax];
	__asm        mov    diskEntrySize, ax;
// LINE 730:
	__asm        lea    eax, diskEntrySize;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 731:
	__asm        movsx  eax, entrySize;
	__asm        movsx  ecx, diskEntrySize;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00569205;
	__asm        push   0x8C085;
	__asm        push   0x5C03E8;
	__asm        push   0x2DB;
	__asm        push   0x5C0420;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 733:
	__asm        mov    eax, hArray;
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 736:
	__asm        push   0x50;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00569266;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    dword ptr [eax], 0x593738;
	__asm        call   0x00567B1B;
	__asm        mov    eax, Swizzler;
	__asm        push   eax;
	__asm        movsx  eax, entrySize;
	__asm        push   eax;
	__asm        mov    eax, pFile;
	__asm        push   eax;
	__asm        mov    eax, hArray;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        call   0x00567552;
	__asm        jmp    near ptr 0x0056925B;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x0056926D;
	__asm        mov    dword ptr [ebp-0x40], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    tmp, eax;
// LINE 737:
	__asm        mov    eax, tmp;
	__asm        mov    ecx, rType;
	__asm        cmp    [eax+0x28], ecx;
	__asm        je     near ptr 0x005692A5;
	__asm        push   0x8C085;
	__asm        push   0x5C0440;
	__asm        push   0x2E1;
	__asm        push   0x5C044C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 738:
	__asm        mov    eax, tmp;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 8;
	__asm        mov    ecx, tmp;
	__asm        cmp    eax, [ecx+4];
	__asm        je     near ptr 0x005692D6;
	__asm        push   0x8C085;
	__asm        push   0x5C046C;
	__asm        push   0x2E2;
	__asm        push   0x5C04A4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 755:
// Block end:
	__asm        jmp    near ptr 0x0056915F;
// LINE 756:
	__asm        test   reinterpret_cast<uint32_t>(fileOpened), 0xFFFF;
	__asm        je     near ptr 0x005692F3;
// LINE 757:
	__asm        mov    eax, pFile;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pFile;
	__asm        call   dword ptr [eax+0xC];
// LINE 760:
	__asm        jmp    near ptr 0x0056930F;
_L27272:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L27271:
	__asm        mov    eax, 0x596208;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0056931d
short _cArray::GetLoadedIndex(class ResFile* pFile, unsigned long rType) {
	short foundcount;
	short cnt;
	struct _cArray::FileAndType ft;

// LINE 776:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 779:
	__asm        mov    foundcount, 0xFFFF;
// LINE 780:
	__asm        mov    eax, pFile;
	__asm        mov    ft.file, eax;
	__asm        mov    eax, rType;
	__asm        mov    ft.type, eax;
// LINE 781:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00569347;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x40;
	__asm        jge    near ptr 0x005693C6;
// LINE 782:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ft.file;
	__asm        cmp    [eax*8+0x638998], ecx;
	__asm        jne    near ptr 0x005693C1;
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, ft.type;
	__asm        cmp    [eax*8+0x63899C], ecx;
	__asm        jne    near ptr 0x005693C1;
// LINE 784:
	__asm        cmp    ft.file, 0;
	__asm        je     near ptr 0x005693B9;
	__asm        cmp    ft.type, 0;
	__asm        je     near ptr 0x005693B9;
// LINE 785:
	__asm        movsx  eax, foundcount;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x005693B9;
	__asm        push   0x8C085;
	__asm        push   0x5C04C4;
	__asm        push   0x311;
	__asm        push   0x5C04EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 787:
	__asm        mov    ax, cnt;
	__asm        mov    foundcount, ax;
// LINE 792:
	__asm        jmp    near ptr 0x00569343;
// LINE 793:
	__asm        mov    ax, foundcount;
	__asm        jmp    near ptr 0x005693CF;
// LINE 794:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 2:000071e0-0000722f Module: 180, 8 byte alignment, initialized_data, read, 


// Contribution: 3:0002874c-0002950a Module: 180, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bf74c
// _cArray::sArrayTable
// GLOBAL: COPTER_D 0x005bf750
// _cArray::sAllLoaded


// Contribution: 3:000a1998-000a1b97 Module: 180, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00638998
// _cArray::fsLoaded
