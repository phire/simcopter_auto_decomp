// Module: Array2d.obj
// Source: C:\Copter\Source\X\Array2d.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:001664e0-001683d3 Module: 180, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x005674e0
OpenFile {
// LINE 16:
	asm( 
"	      005674e0    push ebp"
"	      005674e1    mov ebp,esp"
"	      005674e3    push ebx"
"	      005674e4    push esi"
"	      005674e5    push edi"
);
// LINE 17:
	asm( 
"	      005674e6    mov ecx,[ebp+8]"
"	      005674e9    call 0055C7DDh"
"	      005674ee    movzx eax,ax"
"	      005674f1    test eax,eax"
"	      005674f3    jne near ptr 00567545h"
);
// LINE 18:
	asm( 
"	      005674f9    mov eax,[ebp+8]"
"	      005674fc    add eax,8"
"	      005674ff    push eax"
"	      00567500    mov eax,[ebp+8]"
"	      00567503    mov eax,[eax]"
"	      00567505    mov ecx,[ebp+8]"
"	      00567508    call dword ptr [eax+4]"
"	      0056750b    jmp near ptr 00567510h"
);
// LINE 19:
	asm( 
"	      00567510    mov ecx,[ebp+8]"
"	      00567513    call 0055C7DDh"
"	      00567518    movzx eax,ax"
"	      0056751b    test eax,eax"
"	      0056751d    jne near ptr 0056753Ch"
);
// LINE 20:
	asm( 
"	      00567523    push 8C085h"
"	      00567528    push 5BF754h"
"	      0056752d    push 14h"
"	      0056752f    push 5BF768h"
"	      00567534    call 00554F30h"
"	      00567539    add esp,10h"
);
// LINE 21:
	asm( 
"	      0056753c    mov ax,1"
"	      00567540    jmp near ptr 0056754Dh"
);
// LINE 23:
	asm( 
"	      00567545    xor ax,ax"
"	      00567548    jmp near ptr 0056754Dh"
);
// LINE 24:
	asm( 
"	      0056754d    pop edi"
"	      0056754e    pop esi"
"	      0056754f    pop ebx"
"	      00567550    leave"
"	      00567551    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567552
_cArray::FromDiskCreate {
// LINE 29:
	asm( 
"	      00567552    push ebp"
"	      00567553    mov ebp,esp"
"	      00567555    sub esp,118h"
"	      0056755b    push ebx"
"	      0056755c    push esi"
"	      0056755d    push edi"
"	      0056755e    mov [ebp-118h],ecx"
);
// LINE 30:
	asm( 
"	      00567564    mov eax,[ebp+0Ch]"
"	      00567567    mov ecx,[ebp-118h]"
"	      0056756d    mov [ecx+24h],eax"
);
// LINE 31:
	asm( 
"	      00567570    mov eax,[ebp-118h]"
"	      00567576    mov eax,[eax+24h]"
"	      00567579    push eax"
"	      0056757a    call 005674E0h"
"	      0056757f    add esp,4"
"	      00567582    mov [ebp-10Ch],ax"
);
// LINE 33:
	asm( 
"	      00567589    mov eax,[ebp+8]"
"	      0056758c    mov ecx,[ebp-118h]"
"	      00567592    mov [ecx+8],eax"
);
// LINE 34:
	asm( 
"	      00567595    mov eax,[ebp-118h]"
"	      0056759b    mov eax,[eax+8]"
"	      0056759e    push eax"
"	      0056759f    call 00554D05h"
"	      005675a4    add esp,4"
"	      005675a7    mov ecx,[ebp-118h]"
"	      005675ad    mov [ecx+1Ch],eax"
);
// LINE 37:
	asm( 
"	      005675b0    jmp near ptr 005675CEh"
"	      005675b5    push 8C085h"
"	      005675ba    push 5BF788h"
"	      005675bf    push 25h"
"	      005675c1    push 5BF7A0h"
"	      005675c6    call 00554F30h"
"	      005675cb    add esp,10h"
);
// LINE 38:
	asm( 
"	      005675ce    mov eax,[ebp-118h]"
"	      005675d4    mov eax,[eax+8]"
"	      005675d7    push eax"
"	      005675d8    mov eax,[ebp-118h]"
"	      005675de    mov ecx,[eax+24h]"
"	      005675e1    call 005536AEh"
"	      005675e6    mov ecx,[ebp-118h]"
"	      005675ec    mov [ecx+28h],eax"
);
// LINE 52:
	asm( 
"	      005675ef    mov eax,[ebp-118h]"
"	      005675f5    add eax,20h"
"	      005675f8    push eax"
"	      005675f9    mov eax,[ebp-118h]"
"	      005675ff    mov eax,[eax+8]"
"	      00567602    push eax"
"	      00567603    mov eax,[ebp-118h]"
"	      00567609    mov ecx,[eax+24h]"
"	      0056760c    call 0055360Dh"
);
// LINE 55:
	asm( 
"	      00567611    lea eax,[ebp-100h]"
"	      00567617    push eax"
"	      00567618    mov eax,[ebp-118h]"
"	      0056761e    mov eax,[eax+8]"
"	      00567621    push eax"
"	      00567622    mov eax,[ebp-118h]"
"	      00567628    mov ecx,[eax+24h]"
"	      0056762b    call 00553564h"
);
// LINE 56:
	asm( 
"	      00567630    xor eax,eax"
"	      00567632    mov al,[ebp-100h]"
"	      00567638    test eax,eax"
"	      0056763a    jg near ptr 00567659h"
"	      00567640    push 8C085h"
"	      00567645    push 5BF7C0h"
"	      0056764a    push 38h"
"	      0056764c    push 5BF7ECh"
"	      00567651    call 00554F30h"
"	      00567656    add esp,10h"
);
// LINE 57:
	asm( 
"	      00567659    xor eax,eax"
"	      0056765b    mov al,[ebp-100h]"
"	      00567661    cmp eax,0Fh"
"	      00567664    jle near ptr 00567671h"
);
// LINE 58:
	asm( 
"	      0056766a    mov byte ptr [ebp-100h],0Fh"
);
// LINE 61:
	asm( 
"	      00567671    push 10h"
"	      00567673    mov eax,[ebp-118h]"
"	      00567679    add eax,3Ch"
"	      0056767c    push eax"
"	      0056767d    lea eax,[ebp-100h]"
"	      00567683    push eax"
"	      00567684    call 00554B76h"
"	      00567689    add esp,0Ch"
);
// LINE 62:
	asm( 
"	      0056768c    mov eax,[ebp-118h]"
"	      00567692    add eax,3Ch"
"	      00567695    push eax"
"	      00567696    call 005661F4h"
"	      0056769b    add esp,4"
"	      0056769e    mov ecx,[ebp-118h]"
"	      005676a4    mov [ecx+4Ch],eax"
);
// LINE 63:
	asm( 
"	      005676a7    mov ecx,[ebp-118h]"
"	      005676ad    call 00567BF7h"
);
// LINE 67:
	asm( 
"	      005676b2    mov eax,[ebp-118h]"
"	      005676b8    mov eax,[eax+8]"
"	      005676bb    push eax"
"	      005676bc    call 00554B04h"
"	      005676c1    add esp,4"
"	      005676c4    mov ecx,[ebp-118h]"
"	      005676ca    mov [ecx+0Ch],eax"
);
// LINE 68:
	asm( 
"	      005676cd    mov eax,[ebp-118h]"
"	      005676d3    mov eax,[eax+0Ch]"
"	      005676d6    mov [ebp-104h],eax"
);
// LINE 70:
	asm( 
"	      005676dc    mov eax,[ebp-118h]"
"	      005676e2    mov eax,[eax+8]"
"	      005676e5    push eax"
"	      005676e6    mov eax,[ebp-118h]"
"	      005676ec    mov ecx,[eax+24h]"
"	      005676ef    call 0055383Ah"
);
// LINE 71:
	asm( 
"	      005676f4    test dword ptr [ebp-10Ch],0FFFFh"
"	      005676fe    je near ptr 0056771Bh"
);
// LINE 72:
	asm( 
"	      00567704    mov eax,[ebp-118h]"
"	      0056770a    mov ecx,[ebp-118h]"
"	      00567710    mov ecx,[ecx+24h]"
"	      00567713    mov edx,[ecx]"
"	      00567715    mov ecx,[eax+24h]"
"	      00567718    call dword ptr [edx+0Ch]"
);
// LINE 75:
	asm( 
"	      0056771b    mov eax,[ebp-104h]"
"	      00567721    movsx eax,word ptr [eax]"
"	      00567724    mov ecx,[ebp-118h]"
"	      0056772a    mov [ecx+18h],eax"
);
// LINE 76:
	asm( 
"	      0056772d    mov eax,[ebp-118h]"
"	      00567733    add eax,18h"
"	      00567736    push eax"
"	      00567737    call 0056695Bh"
"	      0056773c    add esp,4"
);
// LINE 77:
	asm( 
"	      0056773f    mov eax,[ebp-118h]"
"	      00567745    mov ecx,[ebp+10h]"
"	      00567748    cmp [eax+18h],ecx"
"	      0056774b    je near ptr 0056776Ah"
"	      00567751    push 8C085h"
"	      00567756    push 5BF80Ch"
"	      0056775b    push 4Dh"
"	      0056775d    push 5BF848h"
"	      00567762    call 00554F30h"
"	      00567767    add esp,10h"
);
// LINE 79:
	asm( 
"	      0056776a    mov eax,[ebp-104h]"
"	      00567770    movsx eax,word ptr [eax+2]"
"	      00567774    mov ecx,[ebp-118h]"
"	      0056777a    mov [ecx+14h],eax"
);
// LINE 80:
	asm( 
"	      0056777d    mov eax,[ebp-118h]"
"	      00567783    add eax,14h"
"	      00567786    push eax"
"	      00567787    call 0056695Bh"
"	      0056778c    add esp,4"
);
// LINE 81:
	asm( 
"	      0056778f    mov eax,[ebp-104h]"
"	      00567795    movsx eax,word ptr [eax+4]"
"	      00567799    mov ecx,[ebp-118h]"
"	      0056779f    mov [ecx+10h],eax"
);
// LINE 82:
	asm( 
"	      005677a2    mov eax,[ebp-118h]"
"	      005677a8    add eax,10h"
"	      005677ab    push eax"
"	      005677ac    call 0056695Bh"
"	      005677b1    add esp,4"
);
// LINE 84:
	asm( 
"	      005677b4    mov eax,[ebp-118h]"
"	      005677ba    mov eax,[eax+14h]"
"	      005677bd    mov ecx,[ebp-118h]"
"	      005677c3    imul eax,[ecx+18h]"
"	      005677c7    mov ecx,[ebp-118h]"
"	      005677cd    imul eax,[ecx+10h]"
"	      005677d1    mov ecx,[ebp-118h]"
"	      005677d7    mov ecx,[ecx+14h]"
"	      005677da    lea eax,[eax+ecx*4]"
"	      005677dd    add eax,8"
"	      005677e0    mov ecx,[ebp-118h]"
"	      005677e6    cmp eax,[ecx+1Ch]"
"	      005677e9    jbe near ptr 00567808h"
"	      005677ef    push 8C085h"
"	      005677f4    push 5BF868h"
"	      005677f9    push 54h"
"	      005677fb    push 5BF87Ch"
"	      00567800    call 00554F30h"
"	      00567805    add esp,10h"
);
// LINE 89:
	asm( 
"	      00567808    mov ecx,[ebp-118h]"
"	      0056780e    call 005689CCh"
);
// LINE 92:
	asm( 
"	      00567813    cmp dword ptr [ebp+14h],0"
"	      00567817    je near ptr 005678F4h"
);
// LINE 94:
	asm( 
"	      0056781d    mov dword ptr [ebp-114h],0"
"	      00567827    jmp near ptr 00567832h"
"	      0056782c    inc dword ptr [ebp-114h]"
"	      00567832    mov eax,[ebp-118h]"
"	      00567838    mov ecx,[ebp-114h]"
"	      0056783e    cmp [eax+14h],ecx"
"	      00567841    jle near ptr 005678F4h"
);
// LINE 95:
	asm( 
"	      00567847    mov dword ptr [ebp-110h],0"
"	      00567851    jmp near ptr 0056785Ch"
"	      00567856    inc dword ptr [ebp-110h]"
"	      0056785c    mov eax,[ebp-118h]"
"	      00567862    mov ecx,[ebp-110h]"
"	      00567868    cmp [eax+10h],ecx"
"	      0056786b    jle near ptr 005678EFh"
);
// LINE 96:
	asm( 
"	      00567871    mov eax,[ebp-118h]"
"	      00567877    mov eax,[eax+0Ch]"
"	      0056787a    add eax,8"
"	      0056787d    mov ecx,[ebp-118h]"
"	      00567883    cmp eax,[ecx+4]"
"	      00567886    je near ptr 005678A5h"
"	      0056788c    push 8C085h"
"	      00567891    push 5BF89Ch"
"	      00567896    push 60h"
"	      00567898    push 5BF8D4h"
"	      0056789d    call 00554F30h"
"	      005678a2    add esp,10h"
);
// LINE 97:
	asm( 
"	      005678a5    mov eax,[ebp-118h]"
"	      005678ab    mov eax,[eax+4]"
"	      005678ae    mov ecx,[ebp-114h]"
"	      005678b4    mov eax,[eax+ecx*4]"
"	      005678b7    mov [ebp-108h],eax"
);
// LINE 98:
	asm( 
"	      005678bd    mov eax,[ebp-118h]"
"	      005678c3    mov eax,[eax+18h]"
"	      005678c6    imul eax,[ebp-110h]"
"	      005678cd    add [ebp-108h],eax"
);
// LINE 99:
	asm( 
"	      005678d3    mov eax,[ebp-118h]"
"	      005678d9    mov eax,[eax+18h]"
"	      005678dc    push eax"
"	      005678dd    mov eax,[ebp-108h]"
"	      005678e3    push eax"
"	      005678e4    call dword ptr [ebp+14h]"
"	      005678e7    add esp,8"
);
// LINE 100:
	asm( 
"	      005678ea    jmp near ptr 00567856h"
);
// LINE 101:
	asm( 
"	      005678ef    jmp near ptr 0056782Ch"
);
// LINE 105:
	asm( 
"	      005678f4    jmp near ptr 005678F9h"
"	      005678f9    pop edi"
"	      005678fa    pop esi"
"	      005678fb    pop ebx"
"	      005678fc    leave"
"	      005678fd    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x00567900
_cArray::BeginCreate {
// LINE 116:
	asm( 
"	      00567900    push ebp"
"	      00567901    mov ebp,esp"
"	      00567903    sub esp,4"
"	      00567906    push ebx"
"	      00567907    push esi"
"	      00567908    push edi"
"	      00567909    mov [ebp-4],ecx"
);
// LINE 123:
	asm( 
"	      0056790c    cmp dword ptr [ebp+18h],0"
"	      00567910    jne near ptr 00567920h"
"	      00567916    cmp dword ptr [ebp+1Ch],0"
"	      0056791a    je near ptr 00567939h"
"	      00567920    push 8C085h"
"	      00567925    push 5BF8F4h"
"	      0056792a    push 7Bh"
"	      0056792c    push 5BF944h"
"	      00567931    call 00554F30h"
"	      00567936    add esp,10h"
);
// LINE 127:
	asm( 
"	      00567939    mov eax,[ebp+18h]"
"	      0056793c    mov ecx,[ebp-4]"
"	      0056793f    mov [ecx+24h],eax"
);
// LINE 128:
	asm( 
"	      00567942    mov eax,[ebp+1Ch]"
"	      00567945    mov ecx,[ebp-4]"
"	      00567948    mov [ecx+28h],eax"
);
// LINE 129:
	asm( 
"	      0056794b    mov eax,[ebp+8]"
"	      0056794e    mov ecx,[ebp-4]"
"	      00567951    mov [ecx+18h],eax"
);
// LINE 132:
	asm( 
"	      00567954    mov eax,[ebp-4]"
"	      00567957    mov dword ptr [eax+10h],0FFFFFFFFh"
"	      0056795e    mov eax,[ebp-4]"
"	      00567961    mov eax,[eax+10h]"
"	      00567964    mov ecx,[ebp-4]"
"	      00567967    mov [ecx+14h],eax"
);
// LINE 133:
	asm( 
"	      0056796a    cmp dword ptr [ebp+14h],0"
"	      0056796e    je near ptr 005679ABh"
);
// LINE 135:
	asm( 
"	      00567974    push 10h"
"	      00567976    mov eax,[ebp-4]"
"	      00567979    add eax,3Ch"
"	      0056797c    push eax"
"	      0056797d    mov eax,[ebp+14h]"
"	      00567980    push eax"
"	      00567981    call 00554B76h"
"	      00567986    add esp,0Ch"
);
// LINE 136:
	asm( 
"	      00567989    mov eax,[ebp-4]"
"	      0056798c    add eax,3Ch"
"	      0056798f    push eax"
"	      00567990    call 005661F4h"
"	      00567995    add esp,4"
"	      00567998    mov ecx,[ebp-4]"
"	      0056799b    mov [ecx+4Ch],eax"
);
// LINE 139:
	asm( 
"	      0056799e    mov ecx,[ebp-4]"
"	      005679a1    call 00567BF7h"
);
// LINE 141:
	asm( 
"	      005679a6    jmp near ptr 005679BCh"
);
// LINE 143:
	asm( 
"	      005679ab    mov eax,[ebp-4]"
"	      005679ae    mov dword ptr [eax+4Ch],0"
);
// LINE 144:
	asm( 
"	      005679b5    mov eax,[ebp-4]"
"	      005679b8    mov byte ptr [eax+3Ch],0"
);
// LINE 147:
	asm( 
"	      005679bc    mov eax,[ebp-4]"
"	      005679bf    mov word ptr [eax+20h],0FFFFh"
);
// LINE 151:
	asm( 
"	      005679c5    mov eax,[ebp+10h]"
"	      005679c8    push eax"
"	      005679c9    mov eax,[ebp+0Ch]"
"	      005679cc    push eax"
"	      005679cd    mov ecx,[ebp-4]"
"	      005679d0    call 00567E33h"
);
// LINE 153:
	asm( 
"	      005679d5    push 0"
"	      005679d7    mov ecx,[ebp-4]"
"	      005679da    call 00567E6Bh"
);
// LINE 154:
	asm( 
"	      005679df    jmp near ptr 005679E4h"
"	      005679e4    pop edi"
"	      005679e5    pop esi"
"	      005679e6    pop ebx"
"	      005679e7    leave"
"	      005679e8    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x005679eb
_cArray::~_cArray {
// LINE 158:
	asm( 
"	      005679eb    push ebp"
"	      005679ec    mov ebp,esp"
"	      005679ee    sub esp,0Ch"
"	      005679f1    push ebx"
"	      005679f2    push esi"
"	      005679f3    push edi"
"	      005679f4    mov [ebp-0Ch],ecx"
"	      005679f7    mov eax,[ebp-0Ch]"
"	      005679fa    mov dword ptr [eax],593738h"
);
// LINE 160:
	asm( 
"	      00567a00    mov eax,[ebp-0Ch]"
"	      00567a03    cmp dword ptr [eax+8],0"
"	      00567a07    je near ptr 00567A2Bh"
);
// LINE 162:
	asm( 
"	      00567a0d    mov eax,[ebp-0Ch]"
"	      00567a10    mov eax,[eax+8]"
"	      00567a13    push eax"
"	      00567a14    call 00554A3Dh"
"	      00567a19    add esp,4"
);
// LINE 163:
	asm( 
"	      00567a1c    mov eax,[ebp-0Ch]"
"	      00567a1f    mov eax,[eax+8]"
"	      00567a22    push eax"
"	      00567a23    call 005548C3h"
"	      00567a28    add esp,4"
);
// LINE 167:
	asm( 
"	      00567a2b    cmp dword ptr ds:[5BF74Ch],0"
"	      00567a32    je near ptr 00567B11h"
);
// LINE 169:
	asm( 
"	      00567a38    mov word ptr [ebp-4],0"
);
// LINE 172:
	asm( 
"	      00567a3e    mov dword ptr [ebp-8],0"
"	      00567a45    jmp near ptr 00567A4Dh"
"	      00567a4a    inc dword ptr [ebp-8]"
"	      00567a4d    cmp dword ptr [ebp-8],400h"
"	      00567a54    jge near ptr 00567B11h"
);
// LINE 173:
	asm( 
"	      00567a5a    mov eax,[ebp-8]"
"	      00567a5d    mov ecx,ds:[5BF74Ch]"
"	      00567a63    cmp dword ptr [ecx+eax*4],0"
"	      00567a67    je near ptr 00567A9Fh"
"	      00567a6d    mov eax,[ebp-8]"
"	      00567a70    mov ecx,ds:[5BF74Ch]"
"	      00567a76    mov eax,[ecx+eax*4]"
"	      00567a79    cmp dword ptr [eax+4Ch],0"
"	      00567a7d    jne near ptr 00567A9Fh"
"	      00567a83    push 8C085h"
"	      00567a88    push 5BF964h"
"	      00567a8d    push 0ADh"
"	      00567a92    push 5BF97Ch"
"	      00567a97    call 00554F30h"
"	      00567a9c    add esp,10h"
);
// LINE 174:
	asm( 
"	      00567a9f    mov eax,[ebp-8]"
"	      00567aa2    mov ecx,ds:[5BF74Ch]"
"	      00567aa8    cmp dword ptr [ecx+eax*4],0"
"	      00567aac    je near ptr 00567B0Ch"
"	      00567ab2    mov eax,[ebp-8]"
"	      00567ab5    mov ecx,ds:[5BF74Ch]"
"	      00567abb    mov eax,[ecx+eax*4]"
"	      00567abe    mov ecx,[ebp-0Ch]"
"	      00567ac1    mov ecx,[ecx+4Ch]"
"	      00567ac4    cmp [eax+4Ch],ecx"
"	      00567ac7    jne near ptr 00567B0Ch"
);
// LINE 176:
	asm( 
"	      00567acd    test dword ptr [ebp-4],0FFFFh"
"	      00567ad4    je near ptr 00567AF6h"
"	      00567ada    push 8C085h"
"	      00567adf    push 5BF99Ch"
"	      00567ae4    push 0B0h"
"	      00567ae9    push 5BF9D8h"
"	      00567aee    call 00554F30h"
"	      00567af3    add esp,10h"
);
// LINE 179:
	asm( 
"	      00567af6    mov eax,[ebp-8]"
"	      00567af9    mov ecx,ds:[5BF74Ch]"
"	      00567aff    mov dword ptr [ecx+eax*4],0"
);
// LINE 182:
	asm( 
"	      00567b06    mov word ptr [ebp-4],1"
);
// LINE 187:
	asm( 
"	      00567b0c    jmp near ptr 00567A4Ah"
);
// LINE 190:
	asm( 
"	      00567b11    jmp near ptr 00567B16h"
"	      00567b16    pop edi"
"	      00567b17    pop esi"
"	      00567b18    pop ebx"
"	      00567b19    leave"
"	      00567b1a    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567b1b
_cArray::MakeTable {
// LINE 194:
	asm( 
"	      00567b1b    push ebp"
"	      00567b1c    mov ebp,esp"
"	      00567b1e    sub esp,4"
"	      00567b21    push ebx"
"	      00567b22    push esi"
"	      00567b23    push edi"
);
// LINE 195:
	asm( 
"	      00567b24    cmp dword ptr ds:[5BF74Ch],0"
"	      00567b2b    jne near ptr 00567B9Dh"
);
// LINE 196:
	asm( 
"	      00567b31    push 1000h"
"	      00567b36    call 0056A600h"
"	      00567b3b    add esp,4"
"	      00567b3e    mov ds:[5BF74Ch],eax"
);
// LINE 197:
	asm( 
"	      00567b43    cmp dword ptr ds:[5BF74Ch],0"
"	      00567b4a    jne near ptr 00567B6Ch"
"	      00567b50    push 8C085h"
"	      00567b55    push 5BF9F8h"
"	      00567b5a    push 0C5h"
"	      00567b5f    push 5BFA18h"
"	      00567b64    call 00554F30h"
"	      00567b69    add esp,10h"
);
// LINE 198:
	asm( 
"	      00567b6c    mov dword ptr [ebp-4],0"
"	      00567b73    jmp near ptr 00567B7Bh"
"	      00567b78    inc dword ptr [ebp-4]"
"	      00567b7b    cmp dword ptr [ebp-4],400h"
"	      00567b82    jge near ptr 00567B9Dh"
);
// LINE 199:
	asm( 
"	      00567b88    mov eax,[ebp-4]"
"	      00567b8b    mov ecx,ds:[5BF74Ch]"
"	      00567b91    mov dword ptr [ecx+eax*4],0"
);
// LINE 200:
	asm( 
"	      00567b98    jmp near ptr 00567B78h"
);
// LINE 202:
	asm( 
"	      00567b9d    jmp near ptr 00567BA2h"
"	      00567ba2    pop edi"
"	      00567ba3    pop esi"
"	      00567ba4    pop ebx"
"	      00567ba5    leave"
"	      00567ba6    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567ba7
_cArray::DeleteTable {
// LINE 205:
	asm( 
"	      00567ba7    push ebp"
"	      00567ba8    mov ebp,esp"
"	      00567baa    sub esp,8"
"	      00567bad    push ebx"
"	      00567bae    push esi"
"	      00567baf    push edi"
);
// LINE 206:
	asm( 
"	      00567bb0    cmp dword ptr ds:[5BF74Ch],0"
"	      00567bb7    je near ptr 00567BD7h"
);
// LINE 207:
	asm( 
"	      00567bbd    mov eax,ds:[5BF74Ch]"
"	      00567bc2    mov [ebp-4],eax"
"	      00567bc5    mov eax,[ebp-4]"
"	      00567bc8    mov [ebp-8],eax"
"	      00567bcb    mov eax,[ebp-8]"
"	      00567bce    push eax"
"	      00567bcf    call 0056A740h"
"	      00567bd4    add esp,4"
);
// LINE 208:
	asm( 
"	      00567bd7    jmp near ptr 00567BDCh"
"	      00567bdc    pop edi"
"	      00567bdd    pop esi"
"	      00567bde    pop ebx"
"	      00567bdf    leave"
"	      00567be0    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567be1
_cArray::WriteToDisk {
// LINE 214:
	asm( 
"	      00567be1    push ebp"
"	      00567be2    mov ebp,esp"
"	      00567be4    sub esp,4"
"	      00567be7    push ebx"
"	      00567be8    push esi"
"	      00567be9    push edi"
"	      00567bea    mov [ebp-4],ecx"
);
// LINE 246:
	asm( 
"	      00567bed    jmp near ptr 00567BF2h"
"	      00567bf2    pop edi"
"	      00567bf3    pop esi"
"	      00567bf4    pop ebx"
"	      00567bf5    leave"
"	      00567bf6    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567bf7
_cArray::CheckIntoTable {
// LINE 248:
	asm( 
"	      00567bf7    push ebp"
"	      00567bf8    mov ebp,esp"
"	      00567bfa    sub esp,0Ch"
"	      00567bfd    push ebx"
"	      00567bfe    push esi"
"	      00567bff    push edi"
"	      00567c00    mov [ebp-0Ch],ecx"
);
// LINE 249:
	asm( 
"	      00567c03    mov eax,[ebp-0Ch]"
"	      00567c06    cmp dword ptr [eax+4Ch],0"
"	      00567c0a    je near ptr 00567D08h"
);
// LINE 250:
	asm( 
"	      00567c10    mov eax,[ebp-0Ch]"
"	      00567c13    cmp dword ptr [eax+4Ch],0"
"	      00567c17    jne near ptr 00567C39h"
"	      00567c1d    push 8C085h"
"	      00567c22    push 5BFA38h"
"	      00567c27    push 0FAh"
"	      00567c2c    push 5BFA60h"
"	      00567c31    call 00554F30h"
"	      00567c36    add esp,10h"
);
// LINE 252:
	asm( 
"	      00567c39    call 00567B1Bh"
);
// LINE 254:
	asm( 
"	      00567c3e    mov dword ptr [ebp-8],0FFFFFFFFh"
);
// LINE 255:
	asm( 
"	      00567c45    mov dword ptr [ebp-4],0"
"	      00567c4c    jmp near ptr 00567C54h"
"	      00567c51    inc dword ptr [ebp-4]"
"	      00567c54    cmp dword ptr [ebp-4],400h"
"	      00567c5b    jge near ptr 00567CD3h"
);
// LINE 256:
	asm( 
"	      00567c61    mov eax,[ebp-4]"
"	      00567c64    mov ecx,ds:[5BF74Ch]"
"	      00567c6a    cmp dword ptr [ecx+eax*4],0"
"	      00567c6e    je near ptr 00567CABh"
"	      00567c74    mov eax,[ebp-4]"
"	      00567c77    mov ecx,ds:[5BF74Ch]"
"	      00567c7d    mov eax,[ecx+eax*4]"
"	      00567c80    mov ecx,[ebp-0Ch]"
"	      00567c83    mov ecx,[ecx+4Ch]"
"	      00567c86    cmp [eax+4Ch],ecx"
"	      00567c89    jne near ptr 00567CABh"
"	      00567c8f    push 8C085h"
"	      00567c94    push 5BFA80h"
"	      00567c99    push 100h"
"	      00567c9e    push 5BFAA0h"
"	      00567ca3    call 00554F30h"
"	      00567ca8    add esp,10h"
);
// LINE 257:
	asm( 
"	      00567cab    cmp dword ptr [ebp-8],0FFFFFFFFh"
"	      00567caf    jne near ptr 00567CCEh"
"	      00567cb5    mov eax,[ebp-4]"
"	      00567cb8    mov ecx,ds:[5BF74Ch]"
"	      00567cbe    cmp dword ptr [ecx+eax*4],0"
"	      00567cc2    jne near ptr 00567CCEh"
);
// LINE 258:
	asm( 
"	      00567cc8    mov eax,[ebp-4]"
"	      00567ccb    mov [ebp-8],eax"
);
// LINE 259:
	asm( 
"	      00567cce    jmp near ptr 00567C51h"
);
// LINE 261:
	asm( 
"	      00567cd3    cmp dword ptr [ebp-8],0FFFFFFFFh"
"	      00567cd7    jne near ptr 00567CF9h"
"	      00567cdd    push 8C085h"
"	      00567ce2    push 5BFAC0h"
"	      00567ce7    push 105h"
"	      00567cec    push 5BFAF4h"
"	      00567cf1    call 00554F30h"
"	      00567cf6    add esp,10h"
);
// LINE 262:
	asm( 
"	      00567cf9    mov eax,[ebp-0Ch]"
"	      00567cfc    mov ecx,[ebp-8]"
"	      00567cff    mov edx,ds:[5BF74Ch]"
"	      00567d05    mov [edx+ecx*4],eax"
);
// LINE 264:
	asm( 
"	      00567d08    jmp near ptr 00567D0Dh"
"	      00567d0d    pop edi"
"	      00567d0e    pop esi"
"	      00567d0f    pop ebx"
"	      00567d10    leave"
"	      00567d11    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567d12
_cArray::FillHeader {
// LINE 303:
	asm( 
"	      00567d12    push ebp"
"	      00567d13    mov ebp,esp"
"	      00567d15    sub esp,0Ch"
"	      00567d18    push ebx"
"	      00567d19    push esi"
"	      00567d1a    push edi"
"	      00567d1b    mov [ebp-0Ch],ecx"
);
// LINE 305:
	asm( 
"	      00567d1e    mov eax,[ebp-0Ch]"
"	      00567d21    mov eax,[eax+8]"
"	      00567d24    push eax"
"	      00567d25    call 00554D05h"
"	      00567d2a    add esp,4"
"	      00567d2d    mov [ebp-8],eax"
);
// LINE 306:
	asm( 
"	      00567d30    mov eax,[ebp-0Ch]"
"	      00567d33    mov ecx,[ebp-8]"
"	      00567d36    cmp [eax+1Ch],ecx"
"	      00567d39    jbe near ptr 00567D5Bh"
"	      00567d3f    push 8C085h"
"	      00567d44    push 5BFB14h"
"	      00567d49    push 132h"
"	      00567d4e    push 5BFB30h"
"	      00567d53    call 00554F30h"
"	      00567d58    add esp,10h"
);
// LINE 308:
	asm( 
"	      00567d5b    jmp near ptr 00567D7Ch"
"	      00567d60    push 8C085h"
"	      00567d65    push 5BFB50h"
"	      00567d6a    push 134h"
"	      00567d6f    push 5BFB68h"
"	      00567d74    call 00554F30h"
"	      00567d79    add esp,10h"
);
// LINE 309:
	asm( 
"	      00567d7c    mov eax,[ebp-0Ch]"
"	      00567d7f    mov eax,[eax+14h]"
"	      00567d82    mov ecx,[ebp-0Ch]"
"	      00567d85    imul eax,[ecx+18h]"
"	      00567d89    mov ecx,[ebp-0Ch]"
"	      00567d8c    imul eax,[ecx+10h]"
"	      00567d90    mov ecx,[ebp-0Ch]"
"	      00567d93    mov ecx,[ecx+14h]"
"	      00567d96    lea eax,[eax+ecx*4]"
"	      00567d99    add eax,8"
"	      00567d9c    mov ecx,[ebp-0Ch]"
"	      00567d9f    cmp eax,[ecx+1Ch]"
"	      00567da2    je near ptr 00567DC4h"
"	      00567da8    push 8C085h"
"	      00567dad    push 5BFB88h"
"	      00567db2    push 135h"
"	      00567db7    push 5BFBA8h"
"	      00567dbc    call 00554F30h"
"	      00567dc1    add esp,10h"
);
// LINE 310:
	asm( 
"	      00567dc4    mov eax,[ebp-0Ch]"
"	      00567dc7    mov eax,[eax+8]"
"	      00567dca    push eax"
"	      00567dcb    call 00554DAFh"
"	      00567dd0    add esp,4"
"	      00567dd3    movzx eax,ax"
"	      00567dd6    test eax,eax"
"	      00567dd8    jne near ptr 00567DFAh"
"	      00567dde    push 8C085h"
"	      00567de3    push 5BFBC8h"
"	      00567de8    push 136h"
"	      00567ded    push 5BFBDCh"
"	      00567df2    call 00554F30h"
"	      00567df7    add esp,10h"
);
// LINE 312:
	asm( 
"	      00567dfa    mov eax,[ebp-0Ch]"
"	      00567dfd    mov eax,[eax+0Ch]"
"	      00567e00    mov [ebp-4],eax"
);
// LINE 313:
	asm( 
"	      00567e03    mov eax,[ebp-0Ch]"
"	      00567e06    mov eax,[eax+14h]"
"	      00567e09    mov ecx,[ebp-4]"
"	      00567e0c    mov [ecx+2],ax"
);
// LINE 314:
	asm( 
"	      00567e10    mov eax,[ebp-0Ch]"
"	      00567e13    mov eax,[eax+10h]"
"	      00567e16    mov ecx,[ebp-4]"
"	      00567e19    mov [ecx+4],ax"
);
// LINE 315:
	asm( 
"	      00567e1d    mov eax,[ebp-0Ch]"
"	      00567e20    mov eax,[eax+18h]"
"	      00567e23    mov ecx,[ebp-4]"
"	      00567e26    mov [ecx],ax"
);
// LINE 316:
	asm( 
"	      00567e29    jmp near ptr 00567E2Eh"
"	      00567e2e    pop edi"
"	      00567e2f    pop esi"
"	      00567e30    pop ebx"
"	      00567e31    leave"
"	      00567e32    ret"
);
}

// FUNCTION: SIMCOPTER 0x00567e33
_cArray::SetSizeAndHeaders {
// LINE 319:
	asm( 
"	      00567e33    push ebp"
"	      00567e34    mov ebp,esp"
"	      00567e36    sub esp,4"
"	      00567e39    push ebx"
"	      00567e3a    push esi"
"	      00567e3b    push edi"
"	      00567e3c    mov [ebp-4],ecx"
);
// LINE 320:
	asm( 
"	      00567e3f    mov eax,[ebp+0Ch]"
"	      00567e42    push eax"
"	      00567e43    mov eax,[ebp+8]"
"	      00567e46    push eax"
"	      00567e47    mov ecx,[ebp-4]"
"	      00567e4a    call 00568879h"
);
// LINE 321:
	asm( 
"	      00567e4f    mov ecx,[ebp-4]"
"	      00567e52    call 00567D12h"
);
// LINE 322:
	asm( 
"	      00567e57    mov ecx,[ebp-4]"
"	      00567e5a    call 005689CCh"
);
// LINE 323:
	asm( 
"	      00567e5f    jmp near ptr 00567E64h"
"	      00567e64    pop edi"
"	      00567e65    pop esi"
"	      00567e66    pop ebx"
"	      00567e67    leave"
"	      00567e68    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x00567e6b
_cArray::ClearBytes {
// LINE 326:
	asm( 
"	      00567e6b    push ebp"
"	      00567e6c    mov ebp,esp"
"	      00567e6e    sub esp,20h"
"	      00567e71    push ebx"
"	      00567e72    push esi"
"	      00567e73    push edi"
"	      00567e74    mov [ebp-20h],ecx"
);
// LINE 327:
	asm( 
"	      00567e77    mov eax,[ebp-20h]"
"	      00567e7a    cmp dword ptr [eax+14h],0"
"	      00567e7e    je near ptr 00567E91h"
"	      00567e84    mov eax,[ebp-20h]"
"	      00567e87    cmp dword ptr [eax+10h],0"
"	      00567e8b    jne near ptr 00567E96h"
);
// LINE 329:
	asm( 
"	      00567e91    jmp near ptr 00567FDFh"
);
// LINE 334:
	asm( 
"	      00567e96    mov eax,[ebp-20h]"
"	      00567e99    mov eax,[eax+0Ch]"
"	      00567e9c    mov [ebp-14h],eax"
);
// LINE 335:
	asm( 
"	      00567e9f    mov eax,[ebp-20h]"
"	      00567ea2    mov eax,[eax+8]"
"	      00567ea5    push eax"
"	      00567ea6    call 00554D05h"
"	      00567eab    add esp,4"
"	      00567eae    mov [ebp-18h],eax"
);
// LINE 336:
	asm( 
"	      00567eb1    mov eax,[ebp-20h]"
"	      00567eb4    mov ecx,[ebp-18h]"
"	      00567eb7    cmp [eax+1Ch],ecx"
"	      00567eba    jbe near ptr 00567EDCh"
"	      00567ec0    push 8C085h"
"	      00567ec5    push 5BFBFCh"
"	      00567eca    push 150h"
"	      00567ecf    push 5BFC04h"
"	      00567ed4    call 00554F30h"
"	      00567ed9    add esp,10h"
);
// LINE 337:
	asm( 
"	      00567edc    mov eax,[ebp-20h]"
"	      00567edf    mov eax,[eax+1Ch]"
"	      00567ee2    mov ecx,[ebp-20h]"
"	      00567ee5    add eax,[ecx+0Ch]"
"	      00567ee8    mov [ebp-0Ch],eax"
);
// LINE 340:
	asm( 
"	      00567eeb    mov eax,[ebp-20h]"
"	      00567eee    mov eax,[eax+14h]"
"	      00567ef1    shl eax,2"
"	      00567ef4    mov ecx,[ebp-20h]"
"	      00567ef7    add eax,[ecx+4]"
"	      00567efa    mov [ebp-4],eax"
);
// LINE 341:
	asm( 
"	      00567efd    mov eax,[ebp-20h]"
"	      00567f00    mov eax,[eax+4]"
"	      00567f03    mov ecx,[ebp-4]"
"	      00567f06    cmp [eax],ecx"
"	      00567f08    je near ptr 00567F2Ah"
"	      00567f0e    push 8C085h"
"	      00567f13    push 5BFC24h"
"	      00567f18    push 155h"
"	      00567f1d    push 5BFC58h"
"	      00567f22    call 00554F30h"
"	      00567f27    add esp,10h"
);
// LINE 342:
	asm( 
"	      00567f2a    mov eax,[ebp-20h]"
"	      00567f2d    mov eax,[eax+14h]"
"	      00567f30    mov ecx,[ebp-20h]"
"	      00567f33    imul eax,[ecx+18h]"
"	      00567f37    mov ecx,[ebp-20h]"
"	      00567f3a    imul eax,[ecx+10h]"
"	      00567f3e    mov [ebp-10h],eax"
);
// LINE 343:
	asm( 
"	      00567f41    cmp dword ptr [ebp-10h],0"
"	      00567f45    jle near ptr 00567F58h"
"	      00567f4b    cmp dword ptr [ebp-10h],7A1200h"
"	      00567f52    jl near ptr 00567F74h"
"	      00567f58    push 8C085h"
"	      00567f5d    push 5BFC78h"
"	      00567f62    push 157h"
"	      00567f67    push 5BFC9Ch"
"	      00567f6c    call 00554F30h"
"	      00567f71    add esp,10h"
);
// LINE 344:
	asm( 
"	      00567f74    mov dword ptr [ebp-8],0"
"	      00567f7b    jmp near ptr 00567F83h"
"	      00567f80    inc dword ptr [ebp-8]"
"	      00567f83    mov eax,[ebp-8]"
"	      00567f86    cmp [ebp-10h],eax"
"	      00567f89    jle near ptr 00567FDAh"
);
// LINE 346:
	asm( 
"	      00567f8f    mov eax,[ebp-4]"
"	      00567f92    mov [ebp-1Ch],eax"
);
// LINE 347:
	asm( 
"	      00567f95    mov eax,[ebp-14h]"
"	      00567f98    cmp [ebp-1Ch],eax"
"	      00567f9b    jb near ptr 00567FAEh"
"	      00567fa1    mov eax,[ebp-1Ch]"
"	      00567fa4    inc eax"
"	      00567fa5    cmp eax,[ebp-0Ch]"
"	      00567fa8    jbe near ptr 00567FCAh"
);
// LINE 348:
	asm( 
"	      00567fae    push 8C085h"
"	      00567fb3    push 5BFCBCh"
"	      00567fb8    push 15Ch"
"	      00567fbd    push 5BFCD8h"
"	      00567fc2    call 00554F30h"
"	      00567fc7    add esp,10h"
);
// LINE 350:
	asm( 
"	      00567fca    mov al,[ebp+8]"
"	      00567fcd    mov ecx,[ebp-4]"
"	      00567fd0    mov [ecx],al"
);
// LINE 351:
	asm( 
"	      00567fd2    inc dword ptr [ebp-4]"
);
// LINE 352:
	asm( 
"	      00567fd5    jmp near ptr 00567F80h"
);
// LINE 354:
	asm( 
"	      00567fda    jmp near ptr 00567FDFh"
"	      00567fdf    pop edi"
"	      00567fe0    pop esi"
"	      00567fe1    pop ebx"
"	      00567fe2    leave"
"	      00567fe3    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00567fe6
_cArray::InsertRow {
// LINE 358:
	asm( 
"	      00567fe6    push ebp"
"	      00567fe7    mov ebp,esp"
"	      00567fe9    sub esp,1Ch"
"	      00567fec    push ebx"
"	      00567fed    push esi"
"	      00567fee    push edi"
"	      00567fef    mov [ebp-1Ch],ecx"
);
// LINE 360:
	asm( 
"	      00567ff2    mov eax,[ebp-1Ch]"
"	      00567ff5    mov eax,[eax+14h]"
"	      00567ff8    mov [ebp-8],eax"
);
// LINE 361:
	asm( 
"	      00567ffb    mov eax,[ebp-1Ch]"
"	      00567ffe    mov eax,[eax+10h]"
"	      00568001    mov [ebp-4],eax"
);
// LINE 363:
	asm( 
"	      00568004    push 0"
"	      00568006    mov eax,[ebp-1Ch]"
"	      00568009    mov eax,[eax+10h]"
"	      0056800c    push eax"
"	      0056800d    mov eax,[ebp-1Ch]"
"	      00568010    mov eax,[eax+14h]"
"	      00568013    inc eax"
"	      00568014    push eax"
"	      00568015    mov ecx,[ebp-1Ch]"
"	      00568018    call 005686AFh"
);
// LINE 365:
	asm( 
"	      0056801d    mov eax,[ebp-1Ch]"
"	      00568020    mov ecx,[ebp-8]"
"	      00568023    inc ecx"
"	      00568024    cmp [eax+14h],ecx"
"	      00568027    jne near ptr 0056803Ch"
"	      0056802d    mov eax,[ebp-1Ch]"
"	      00568030    mov ecx,[ebp-4]"
"	      00568033    cmp [eax+10h],ecx"
"	      00568036    je near ptr 00568058h"
"	      0056803c    push 8C085h"
"	      00568041    push 5BFCF8h"
"	      00568046    push 16Dh"
"	      0056804b    push 5BFD00h"
"	      00568050    call 00554F30h"
"	      00568055    add esp,10h"
);
// LINE 367:
	asm( 
"	      00568058    movsx eax,word ptr [ebp+8]"
"	      0056805c    inc eax"
"	      0056805d    mov [ebp-0Ch],ax"
);
// LINE 368:
	asm( 
"	      00568061    mov eax,[ebp-1Ch]"
"	      00568064    movsx ecx,word ptr [ebp-0Ch]"
"	      00568068    cmp [eax+14h],ecx"
"	      0056806b    jle near ptr 00568118h"
);
// LINE 369:
	asm( 
"	      00568071    mov eax,[ebp-1Ch]"
"	      00568074    cmp dword ptr [eax+10h],0"
"	      00568078    je near ptr 00568118h"
);
// LINE 371:
	asm( 
"	      0056807e    mov eax,[ebp-1Ch]"
"	      00568081    mov eax,[eax+14h]"
"	      00568084    dec eax"
"	      00568085    mov [ebp-10h],ax"
"	      00568089    jmp near ptr 00568092h"
"	      0056808e    dec word ptr [ebp-10h]"
"	      00568092    movsx eax,word ptr [ebp-10h]"
"	      00568096    movsx ecx,word ptr [ebp-0Ch]"
"	      0056809a    cmp eax,ecx"
"	      0056809c    jle near ptr 00568118h"
);
// LINE 373:
	asm( 
"	      005680a2    jmp near ptr 005680A7h"
"	      005680a7    movsx eax,word ptr [ebp-10h]"
"	      005680ab    mov ecx,[ebp-1Ch]"
"	      005680ae    mov ecx,[ecx+4]"
"	      005680b1    mov eax,[ecx+eax*4-4]"
"	      005680b5    mov [ebp-18h],eax"
);
// LINE 374:
	asm( 
"	      005680b8    jmp near ptr 005680BDh"
"	      005680bd    movsx eax,word ptr [ebp-10h]"
"	      005680c1    mov ecx,[ebp-1Ch]"
"	      005680c4    mov ecx,[ecx+4]"
"	      005680c7    mov eax,[ecx+eax*4]"
"	      005680ca    mov [ebp-14h],eax"
);
// LINE 375:
	asm( 
"	      005680cd    mov eax,[ebp-1Ch]"
"	      005680d0    mov eax,[eax+18h]"
"	      005680d3    mov ecx,[ebp-1Ch]"
"	      005680d6    imul eax,[ecx+10h]"
"	      005680da    push eax"
"	      005680db    mov eax,[ebp-14h]"
"	      005680de    push eax"
"	      005680df    mov eax,[ebp-18h]"
"	      005680e2    push eax"
"	      005680e3    call 00554B76h"
"	      005680e8    add esp,0Ch"
);
// LINE 378:
	asm( 
"	      005680eb    movsx eax,word ptr [ebp-10h]"
"	      005680ef    test eax,eax"
"	      005680f1    jge near ptr 00568113h"
"	      005680f7    push 8C085h"
"	      005680fc    push 5BFD20h"
"	      00568101    push 17Ah"
"	      00568106    push 5BFD28h"
"	      0056810b    call 00554F30h"
"	      00568110    add esp,10h"
);
// LINE 379:
	asm( 
"	      00568113    jmp near ptr 0056808Eh"
);
// LINE 382:
	asm( 
"	      00568118    mov ax,[ebp-0Ch]"
"	      0056811c    jmp near ptr 00568121h"
);
// LINE 383:
	asm( 
"	      00568121    pop edi"
"	      00568122    pop esi"
"	      00568123    pop ebx"
"	      00568124    leave"
"	      00568125    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568128
_cArray::InsertColumn {
// LINE 386:
	asm( 
"	      00568128    push ebp"
"	      00568129    mov ebp,esp"
"	      0056812b    sub esp,20h"
"	      0056812e    push ebx"
"	      0056812f    push esi"
"	      00568130    push edi"
"	      00568131    mov [ebp-20h],ecx"
);
// LINE 388:
	asm( 
"	      00568134    mov eax,[ebp-20h]"
"	      00568137    mov eax,[eax+14h]"
"	      0056813a    mov [ebp-8],eax"
);
// LINE 389:
	asm( 
"	      0056813d    mov eax,[ebp-20h]"
"	      00568140    mov eax,[eax+10h]"
"	      00568143    mov [ebp-4],eax"
);
// LINE 391:
	asm( 
"	      00568146    push 0"
"	      00568148    mov eax,[ebp-20h]"
"	      0056814b    mov eax,[eax+10h]"
"	      0056814e    inc eax"
"	      0056814f    push eax"
"	      00568150    mov eax,[ebp-20h]"
"	      00568153    mov eax,[eax+14h]"
"	      00568156    push eax"
"	      00568157    mov ecx,[ebp-20h]"
"	      0056815a    call 005686AFh"
);
// LINE 392:
	asm( 
"	      0056815f    mov eax,[ebp-20h]"
"	      00568162    mov ecx,[ebp-8]"
"	      00568165    cmp [eax+14h],ecx"
"	      00568168    jne near ptr 0056817Eh"
"	      0056816e    mov eax,[ebp-20h]"
"	      00568171    mov ecx,[ebp-4]"
"	      00568174    inc ecx"
"	      00568175    cmp [eax+10h],ecx"
"	      00568178    je near ptr 0056819Ah"
"	      0056817e    push 8C085h"
"	      00568183    push 5BFD48h"
"	      00568188    push 188h"
"	      0056818d    push 5BFD50h"
"	      00568192    call 00554F30h"
"	      00568197    add esp,10h"
);
// LINE 394:
	asm( 
"	      0056819a    movsx eax,word ptr [ebp+8]"
"	      0056819e    inc eax"
"	      0056819f    mov [ebp-0Ch],ax"
);
// LINE 395:
	asm( 
"	      005681a3    mov eax,[ebp-20h]"
"	      005681a6    movsx ecx,word ptr [ebp-0Ch]"
"	      005681aa    cmp [eax+10h],ecx"
"	      005681ad    jle near ptr 00568284h"
);
// LINE 397:
	asm( 
"	      005681b3    mov word ptr [ebp-10h],0"
"	      005681b9    jmp near ptr 005681C2h"
"	      005681be    inc word ptr [ebp-10h]"
"	      005681c2    mov eax,[ebp-20h]"
"	      005681c5    movsx ecx,word ptr [ebp-10h]"
"	      005681c9    cmp [eax+14h],ecx"
"	      005681cc    jle near ptr 00568284h"
);
// LINE 398:
	asm( 
"	      005681d2    mov eax,[ebp-20h]"
"	      005681d5    mov eax,[eax+10h]"
"	      005681d8    dec eax"
"	      005681d9    mov [ebp-1Ch],ax"
"	      005681dd    jmp near ptr 005681E6h"
"	      005681e2    dec word ptr [ebp-1Ch]"
"	      005681e6    movsx eax,word ptr [ebp-1Ch]"
"	      005681ea    movsx ecx,word ptr [ebp-0Ch]"
"	      005681ee    cmp eax,ecx"
"	      005681f0    jle near ptr 0056827Fh"
);
// LINE 399:
	asm( 
"	      005681f6    movsx eax,word ptr [ebp-1Ch]"
"	      005681fa    test eax,eax"
"	      005681fc    jge near ptr 0056821Eh"
"	      00568202    push 8C085h"
"	      00568207    push 5BFD70h"
"	      0056820c    push 18Fh"
"	      00568211    push 5BFD78h"
"	      00568216    call 00554F30h"
"	      0056821b    add esp,10h"
);
// LINE 400:
	asm( 
"	      0056821e    jmp near ptr 00568223h"
"	      00568223    movsx eax,word ptr [ebp-1Ch]"
"	      00568227    dec eax"
"	      00568228    mov ecx,[ebp-20h]"
"	      0056822b    imul eax,[ecx+18h]"
"	      0056822f    movsx ecx,word ptr [ebp-10h]"
"	      00568233    mov edx,[ebp-20h]"
"	      00568236    mov edx,[edx+4]"
"	      00568239    add eax,[edx+ecx*4]"
"	      0056823c    mov [ebp-18h],eax"
);
// LINE 401:
	asm( 
"	      0056823f    jmp near ptr 00568244h"
"	      00568244    movsx eax,word ptr [ebp-10h]"
"	      00568248    mov ecx,[ebp-20h]"
"	      0056824b    mov ecx,[ecx+4]"
"	      0056824e    mov eax,[ecx+eax*4]"
"	      00568251    mov ecx,[ebp-20h]"
"	      00568254    mov ecx,[ecx+18h]"
"	      00568257    movsx edx,word ptr [ebp-1Ch]"
"	      0056825b    imul ecx,edx"
"	      0056825e    add eax,ecx"
"	      00568260    mov [ebp-14h],eax"
);
// LINE 402:
	asm( 
"	      00568263    mov eax,[ebp-20h]"
"	      00568266    mov eax,[eax+18h]"
"	      00568269    push eax"
"	      0056826a    mov eax,[ebp-14h]"
"	      0056826d    push eax"
"	      0056826e    mov eax,[ebp-18h]"
"	      00568271    push eax"
"	      00568272    call 00554B76h"
"	      00568277    add esp,0Ch"
);
// LINE 403:
	asm( 
"	      0056827a    jmp near ptr 005681E2h"
);
// LINE 404:
	asm( 
"	      0056827f    jmp near ptr 005681BEh"
);
// LINE 406:
	asm( 
"	      00568284    mov ax,[ebp-0Ch]"
"	      00568288    jmp near ptr 0056828Dh"
);
// LINE 407:
	asm( 
"	      0056828d    pop edi"
"	      0056828e    pop esi"
"	      0056828f    pop ebx"
"	      00568290    leave"
"	      00568291    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568294
_cArray::DeleteRow {
// LINE 410:
	asm( 
"	      00568294    push ebp"
"	      00568295    mov ebp,esp"
"	      00568297    sub esp,18h"
"	      0056829a    push ebx"
"	      0056829b    push esi"
"	      0056829c    push edi"
"	      0056829d    mov [ebp-18h],ecx"
);
// LINE 413:
	asm( 
"	      005682a0    mov eax,[ebp-18h]"
"	      005682a3    mov eax,[eax+14h]"
"	      005682a6    mov [ebp-8],eax"
);
// LINE 414:
	asm( 
"	      005682a9    mov eax,[ebp-18h]"
"	      005682ac    mov eax,[eax+10h]"
"	      005682af    mov [ebp-4],eax"
);
// LINE 415:
	asm( 
"	      005682b2    cmp dword ptr [ebp-8],0"
"	      005682b6    jg near ptr 005682D8h"
"	      005682bc    push 8C085h"
"	      005682c1    push 5BFD98h"
"	      005682c6    push 19Fh"
"	      005682cb    push 5BFDA8h"
"	      005682d0    call 00554F30h"
"	      005682d5    add esp,10h"
);
// LINE 417:
	asm( 
"	      005682d8    mov eax,[ebp-18h]"
"	      005682db    movsx ecx,word ptr [ebp+8]"
"	      005682df    cmp [eax+14h],ecx"
"	      005682e2    jle near ptr 005682F4h"
"	      005682e8    movsx eax,word ptr [ebp+8]"
"	      005682ec    test eax,eax"
"	      005682ee    jge near ptr 00568310h"
"	      005682f4    push 8C085h"
"	      005682f9    push 5BFDC8h"
"	      005682fe    push 1A1h"
"	      00568303    push 5BFDDCh"
"	      00568308    call 00554F30h"
"	      0056830d    add esp,10h"
);
// LINE 418:
	asm( 
"	      00568310    mov eax,[ebp-18h]"
"	      00568313    cmp dword ptr [eax+10h],0"
"	      00568317    je near ptr 0056838Fh"
);
// LINE 419:
	asm( 
"	      0056831d    mov ax,[ebp+8]"
"	      00568321    mov [ebp-14h],ax"
"	      00568325    jmp near ptr 0056832Eh"
"	      0056832a    inc word ptr [ebp-14h]"
"	      0056832e    mov eax,[ebp-18h]"
"	      00568331    mov eax,[eax+14h]"
"	      00568334    dec eax"
"	      00568335    movsx ecx,word ptr [ebp-14h]"
"	      00568339    cmp eax,ecx"
"	      0056833b    jle near ptr 0056838Fh"
);
// LINE 420:
	asm( 
"	      00568341    jmp near ptr 00568346h"
"	      00568346    movsx eax,word ptr [ebp-14h]"
"	      0056834a    mov ecx,[ebp-18h]"
"	      0056834d    mov ecx,[ecx+4]"
"	      00568350    mov eax,[ecx+eax*4+4]"
"	      00568354    mov [ebp-10h],eax"
);
// LINE 421:
	asm( 
"	      00568357    jmp near ptr 0056835Ch"
"	      0056835c    movsx eax,word ptr [ebp-14h]"
"	      00568360    mov ecx,[ebp-18h]"
"	      00568363    mov ecx,[ecx+4]"
"	      00568366    mov eax,[ecx+eax*4]"
"	      00568369    mov [ebp-0Ch],eax"
);
// LINE 422:
	asm( 
"	      0056836c    mov eax,[ebp-18h]"
"	      0056836f    mov eax,[eax+18h]"
"	      00568372    mov ecx,[ebp-18h]"
"	      00568375    imul eax,[ecx+10h]"
"	      00568379    push eax"
"	      0056837a    mov eax,[ebp-0Ch]"
"	      0056837d    push eax"
"	      0056837e    mov eax,[ebp-10h]"
"	      00568381    push eax"
"	      00568382    call 00554B76h"
"	      00568387    add esp,0Ch"
);
// LINE 423:
	asm( 
"	      0056838a    jmp near ptr 0056832Ah"
);
// LINE 426:
	asm( 
"	      0056838f    push 0"
"	      00568391    mov eax,[ebp-18h]"
"	      00568394    mov eax,[eax+10h]"
"	      00568397    push eax"
"	      00568398    mov eax,[ebp-18h]"
"	      0056839b    mov eax,[eax+14h]"
"	      0056839e    dec eax"
"	      0056839f    push eax"
"	      005683a0    mov ecx,[ebp-18h]"
"	      005683a3    call 005686AFh"
"	      005683a8    movzx eax,ax"
"	      005683ab    test eax,eax"
"	      005683ad    jne near ptr 005683CFh"
"	      005683b3    push 8C085h"
"	      005683b8    push 5BFDFCh"
"	      005683bd    push 1AAh"
"	      005683c2    push 5BFE04h"
"	      005683c7    call 00554F30h"
"	      005683cc    add esp,10h"
);
// LINE 427:
	asm( 
"	      005683cf    mov eax,[ebp-18h]"
"	      005683d2    mov ecx,[ebp-4]"
"	      005683d5    cmp [eax+10h],ecx"
"	      005683d8    je near ptr 005683FAh"
"	      005683de    push 8C085h"
"	      005683e3    push 5BFE24h"
"	      005683e8    push 1ABh"
"	      005683ed    push 5BFE2Ch"
"	      005683f2    call 00554F30h"
"	      005683f7    add esp,10h"
);
// LINE 428:
	asm( 
"	      005683fa    mov eax,[ebp-18h]"
"	      005683fd    mov ecx,[ebp-8]"
"	      00568400    dec ecx"
"	      00568401    cmp [eax+14h],ecx"
"	      00568404    je near ptr 00568426h"
"	      0056840a    push 8C085h"
"	      0056840f    push 5BFE4Ch"
"	      00568414    push 1ACh"
"	      00568419    push 5BFE54h"
"	      0056841e    call 00554F30h"
"	      00568423    add esp,10h"
);
// LINE 429:
	asm( 
"	      00568426    mov eax,[ebp-18h]"
"	      00568429    mov ax,[eax+14h]"
"	      0056842d    jmp near ptr 00568432h"
);
// LINE 430:
	asm( 
"	      00568432    pop edi"
"	      00568433    pop esi"
"	      00568434    pop ebx"
"	      00568435    leave"
"	      00568436    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568439
_cArray::DeleteColumn {
// LINE 433:
	asm( 
"	      00568439    push ebp"
"	      0056843a    mov ebp,esp"
"	      0056843c    sub esp,24h"
"	      0056843f    push ebx"
"	      00568440    push esi"
"	      00568441    push edi"
"	      00568442    mov [ebp-24h],ecx"
);
// LINE 436:
	asm( 
"	      00568445    mov eax,[ebp-24h]"
"	      00568448    mov eax,[eax+10h]"
"	      0056844b    mov [ebp-4],eax"
);
// LINE 437:
	asm( 
"	      0056844e    mov eax,[ebp-24h]"
"	      00568451    mov eax,[eax+14h]"
"	      00568454    mov [ebp-10h],eax"
);
// LINE 438:
	asm( 
"	      00568457    cmp dword ptr [ebp-4],0"
"	      0056845b    jg near ptr 0056847Dh"
"	      00568461    push 8C085h"
"	      00568466    push 5BFE74h"
"	      0056846b    push 1B6h"
"	      00568470    push 5BFE84h"
"	      00568475    call 00554F30h"
"	      0056847a    add esp,10h"
);
// LINE 440:
	asm( 
"	      0056847d    movsx eax,word ptr [ebp+8]"
"	      00568481    test eax,eax"
"	      00568483    jl near ptr 00568499h"
"	      00568489    mov eax,[ebp-24h]"
"	      0056848c    movsx ecx,word ptr [ebp+8]"
"	      00568490    cmp [eax+10h],ecx"
"	      00568493    jg near ptr 005684B5h"
"	      00568499    push 8C085h"
"	      0056849e    push 5BFEA4h"
"	      005684a3    push 1B8h"
"	      005684a8    push 5BFEBCh"
"	      005684ad    call 00554F30h"
"	      005684b2    add esp,10h"
);
// LINE 441:
	asm( 
"	      005684b5    mov word ptr [ebp-0Ch],0"
"	      005684bb    jmp near ptr 005684C4h"
"	      005684c0    inc word ptr [ebp-0Ch]"
"	      005684c4    mov eax,[ebp-24h]"
"	      005684c7    movsx ecx,word ptr [ebp-0Ch]"
"	      005684cb    cmp [eax+14h],ecx"
"	      005684ce    jle near ptr 00568605h"
);
// LINE 442:
	asm( 
"	      005684d4    mov ax,[ebp+8]"
"	      005684d8    mov [ebp-18h],ax"
"	      005684dc    jmp near ptr 005684E5h"
"	      005684e1    inc word ptr [ebp-18h]"
"	      005684e5    mov eax,[ebp-24h]"
"	      005684e8    movsx ecx,word ptr [ebp-18h]"
"	      005684ec    cmp [eax+10h],ecx"
"	      005684ef    jle near ptr 00568567h"
);
// LINE 443:
	asm( 
"	      005684f5    movsx eax,word ptr [ebp-18h]"
"	      005684f9    inc eax"
"	      005684fa    mov ecx,[ebp-24h]"
"	      005684fd    cmp eax,[ecx+10h]"
"	      00568500    jge near ptr 00568562h"
);
// LINE 444:
	asm( 
"	      00568506    jmp near ptr 0056850Bh"
"	      0056850b    movsx eax,word ptr [ebp-0Ch]"
"	      0056850f    mov ecx,[ebp-24h]"
"	      00568512    mov ecx,[ecx+4]"
"	      00568515    mov eax,[ecx+eax*4]"
"	      00568518    mov ecx,[ebp-24h]"
"	      0056851b    mov ecx,[ecx+18h]"
"	      0056851e    movsx edx,word ptr [ebp-18h]"
"	      00568522    imul ecx,edx"
"	      00568525    add eax,ecx"
"	      00568527    mov [ebp-14h],eax"
);
// LINE 445:
	asm( 
"	      0056852a    jmp near ptr 0056852Fh"
"	      0056852f    movsx eax,word ptr [ebp-18h]"
"	      00568533    inc eax"
"	      00568534    mov ecx,[ebp-24h]"
"	      00568537    imul eax,[ecx+18h]"
"	      0056853b    movsx ecx,word ptr [ebp-0Ch]"
"	      0056853f    mov edx,[ebp-24h]"
"	      00568542    mov edx,[edx+4]"
"	      00568545    add eax,[edx+ecx*4]"
"	      00568548    mov [ebp-8],eax"
);
// LINE 446:
	asm( 
"	      0056854b    mov eax,[ebp-24h]"
"	      0056854e    mov eax,[eax+18h]"
"	      00568551    push eax"
"	      00568552    mov eax,[ebp-14h]"
"	      00568555    push eax"
"	      00568556    mov eax,[ebp-8]"
"	      00568559    push eax"
"	      0056855a    call 00554B76h"
"	      0056855f    add esp,0Ch"
);
// LINE 448:
	asm( 
"	      00568562    jmp near ptr 005684E1h"
);
// LINE 450:
	asm( 
"	      00568567    mov eax,[ebp-24h]"
"	      0056856a    mov eax,[eax+10h]"
"	      0056856d    dec eax"
"	      0056856e    movsx ecx,word ptr [ebp+8]"
"	      00568572    cmp eax,ecx"
"	      00568574    jle near ptr 00568600h"
);
// LINE 451:
	asm( 
"	      0056857a    jmp near ptr 0056857Fh"
"	      0056857f    mov eax,[ebp-24h]"
"	      00568582    mov eax,[eax+10h]"
"	      00568585    dec eax"
"	      00568586    mov ecx,[ebp-24h]"
"	      00568589    imul eax,[ecx+18h]"
"	      0056858d    movsx ecx,word ptr [ebp-0Ch]"
"	      00568591    mov edx,[ebp-24h]"
"	      00568594    mov edx,[edx+4]"
"	      00568597    add eax,[edx+ecx*4]"
"	      0056859a    mov [ebp-20h],eax"
);
// LINE 452:
	asm( 
"	      0056859d    jmp near ptr 005685A2h"
"	      005685a2    mov eax,[ebp-24h]"
"	      005685a5    mov eax,[eax+10h]"
"	      005685a8    sub eax,2"
"	      005685ab    mov ecx,[ebp-24h]"
"	      005685ae    imul eax,[ecx+18h]"
"	      005685b2    movsx ecx,word ptr [ebp-0Ch]"
"	      005685b6    mov edx,[ebp-24h]"
"	      005685b9    mov edx,[edx+4]"
"	      005685bc    add eax,[edx+ecx*4]"
"	      005685bf    mov [ebp-1Ch],eax"
);
// LINE 453:
	asm( 
"	      005685c2    mov eax,[ebp-24h]"
"	      005685c5    mov eax,[eax+18h]"
"	      005685c8    push eax"
"	      005685c9    mov eax,[ebp-20h]"
"	      005685cc    push eax"
"	      005685cd    mov eax,[ebp-1Ch]"
"	      005685d0    push eax"
"	      005685d1    call 00554C73h"
"	      005685d6    add esp,0Ch"
"	      005685d9    movzx eax,ax"
"	      005685dc    test eax,eax"
"	      005685de    jne near ptr 00568600h"
"	      005685e4    push 8C085h"
"	      005685e9    push 5BFEDCh"
"	      005685ee    push 1C5h"
"	      005685f3    push 5BFEE4h"
"	      005685f8    call 00554F30h"
"	      005685fd    add esp,10h"
);
// LINE 456:
	asm( 
"	      00568600    jmp near ptr 005684C0h"
);
// LINE 457:
	asm( 
"	      00568605    push 0"
"	      00568607    mov eax,[ebp-24h]"
"	      0056860a    mov eax,[eax+10h]"
"	      0056860d    dec eax"
"	      0056860e    push eax"
"	      0056860f    mov eax,[ebp-24h]"
"	      00568612    mov eax,[eax+14h]"
"	      00568615    push eax"
"	      00568616    mov ecx,[ebp-24h]"
"	      00568619    call 005686AFh"
"	      0056861e    movzx eax,ax"
"	      00568621    test eax,eax"
"	      00568623    jne near ptr 00568645h"
"	      00568629    push 8C085h"
"	      0056862e    push 5BFF04h"
"	      00568633    push 1C9h"
"	      00568638    push 5BFF0Ch"
"	      0056863d    call 00554F30h"
"	      00568642    add esp,10h"
);
// LINE 458:
	asm( 
"	      00568645    mov eax,[ebp-24h]"
"	      00568648    mov ecx,[ebp-4]"
"	      0056864b    dec ecx"
"	      0056864c    cmp [eax+10h],ecx"
"	      0056864f    je near ptr 00568671h"
"	      00568655    push 8C085h"
"	      0056865a    push 5BFF2Ch"
"	      0056865f    push 1CAh"
"	      00568664    push 5BFF34h"
"	      00568669    call 00554F30h"
"	      0056866e    add esp,10h"
);
// LINE 459:
	asm( 
"	      00568671    mov eax,[ebp-24h]"
"	      00568674    mov ecx,[ebp-10h]"
"	      00568677    cmp [eax+14h],ecx"
"	      0056867a    je near ptr 0056869Ch"
"	      00568680    push 8C085h"
"	      00568685    push 5BFF54h"
"	      0056868a    push 1CBh"
"	      0056868f    push 5BFF5Ch"
"	      00568694    call 00554F30h"
"	      00568699    add esp,10h"
);
// LINE 460:
	asm( 
"	      0056869c    mov eax,[ebp-24h]"
"	      0056869f    mov ax,[eax+10h]"
"	      005686a3    jmp near ptr 005686A8h"
);
// LINE 461:
	asm( 
"	      005686a8    pop edi"
"	      005686a9    pop esi"
"	      005686aa    pop ebx"
"	      005686ab    leave"
"	      005686ac    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x005686af
_cArray::Resize {
// LINE 465:
	asm( 
"	      005686af    push ebp"
"	      005686b0    mov ebp,esp"
"	      005686b2    push 0FFFFFFFFh"
"	      005686b4    push 56885Eh"
"	      005686b9    mov eax,fs:[0]"
"	      005686bf    push eax"
"	      005686c0    mov fs:[0],esp"
"	      005686c7    sub esp,74h"
"	      005686ca    push ebx"
"	      005686cb    push esi"
"	      005686cc    push edi"
"	      005686cd    mov [ebp-80h],ecx"
"	      005686d0    mov eax,[ebp-80h]"
"	      005686d3    mov eax,[eax+10h]"
"	      005686d6    mov [ebp-74h],eax"
"	      005686d9    mov eax,[ebp-80h]"
"	      005686dc    mov eax,[eax+14h]"
"	      005686df    mov [ebp-78h],eax"
"	      005686e2    mov eax,[ebp-80h]"
"	      005686e5    mov eax,[eax+18h]"
"	      005686e8    mov [ebp-7Ch],eax"
);
// LINE 468:
	asm( 
"	      005686eb    mov dword ptr [ebp-64h],593738h"
"	      005686f2    jmp near ptr 005686FCh"
"	      005686f7    call 00567B1Bh"
"	      005686fc    push 0"
"	      005686fe    push 0"
"	      00568700    push 0"
"	      00568702    mov eax,[ebp-74h]"
"	      00568705    push eax"
"	      00568706    mov eax,[ebp-78h]"
"	      00568709    push eax"
"	      0056870a    mov eax,[ebp-7Ch]"
"	      0056870d    push eax"
"	      0056870e    lea ecx,[ebp-64h]"
"	      00568711    call 00567900h"
"	      00568716    jmp near ptr 0056871Bh"
"	      0056871b    mov dword ptr [ebp-4],0"
);
// LINE 469:
	asm( 
"	      00568722    lea eax,[ebp-64h]"
"	      00568725    push eax"
"	      00568726    mov ecx,[ebp-80h]"
"	      00568729    call 00568BE8h"
);
// LINE 471:
	asm( 
"	      0056872e    mov eax,[ebp+0Ch]"
"	      00568731    push eax"
"	      00568732    mov eax,[ebp+8]"
"	      00568735    push eax"
"	      00568736    mov ecx,[ebp-80h]"
"	      00568739    call 00567E33h"
);
// LINE 472:
	asm( 
"	      0056873e    mov eax,[ebp-80h]"
"	      00568741    mov eax,[eax+0Ch]"
"	      00568744    add eax,8"
"	      00568747    mov ecx,[ebp-80h]"
"	      0056874a    cmp eax,[ecx+4]"
"	      0056874d    je near ptr 0056876Fh"
"	      00568753    push 8C085h"
"	      00568758    push 5BFF7Ch"
"	      0056875d    push 1D8h"
"	      00568762    push 5BFFB4h"
"	      00568767    call 00554F30h"
"	      0056876c    add esp,10h"
);
// LINE 474:
	asm( 
"	      0056876f    mov eax,[ebp+10h]"
"	      00568772    push eax"
"	      00568773    mov ecx,[ebp-80h]"
"	      00568776    call 00567E6Bh"
);
// LINE 477:
	asm( 
"	      0056877b    mov dword ptr [ebp-14h],0"
"	      00568782    jmp near ptr 0056878Ah"
"	      00568787    inc dword ptr [ebp-14h]"
"	      0056878a    mov eax,[ebp-80h]"
"	      0056878d    mov ecx,[ebp-14h]"
"	      00568790    cmp [eax+14h],ecx"
"	      00568793    jle near ptr 0056883Ah"
);
// LINE 478:
	asm( 
"	      00568799    mov eax,[ebp-14h]"
"	      0056879c    cmp [ebp-50h],eax"
"	      0056879f    jle near ptr 00568835h"
);
// LINE 479:
	asm( 
"	      005687a5    mov dword ptr [ebp-68h],0"
"	      005687ac    jmp near ptr 005687B4h"
"	      005687b1    inc dword ptr [ebp-68h]"
"	      005687b4    mov eax,[ebp-80h]"
"	      005687b7    mov ecx,[ebp-68h]"
"	      005687ba    cmp [eax+10h],ecx"
"	      005687bd    jle near ptr 00568835h"
);
// LINE 480:
	asm( 
"	      005687c3    mov eax,[ebp-68h]"
"	      005687c6    cmp [ebp-54h],eax"
"	      005687c9    jle near ptr 0056882Bh"
);
// LINE 481:
	asm( 
"	      005687cf    mov eax,[ebp-80h]"
"	      005687d2    mov eax,[eax+4]"
"	      005687d5    mov ecx,[ebp-14h]"
"	      005687d8    mov eax,[eax+ecx*4]"
"	      005687db    mov ecx,[ebp-80h]"
"	      005687de    mov ecx,[ecx+18h]"
"	      005687e1    imul ecx,[ebp-68h]"
"	      005687e5    add eax,ecx"
"	      005687e7    mov [ebp-10h],eax"
);
// LINE 482:
	asm( 
"	      005687ea    mov eax,[ebp-60h]"
"	      005687ed    mov ecx,[ebp-14h]"
"	      005687f0    mov eax,[eax+ecx*4]"
"	      005687f3    mov ecx,[ebp-80h]"
"	      005687f6    mov ecx,[ecx+18h]"
"	      005687f9    imul ecx,[ebp-68h]"
"	      005687fd    add eax,ecx"
"	      005687ff    mov [ebp-6Ch],eax"
);
// LINE 483:
	asm( 
"	      00568802    mov eax,[ebp-80h]"
"	      00568805    cmp dword ptr [eax+18h],0"
"	      00568809    je near ptr 00568826h"
);
// LINE 484:
	asm( 
"	      0056880f    mov eax,[ebp-80h]"
"	      00568812    mov eax,[eax+18h]"
"	      00568815    push eax"
"	      00568816    mov eax,[ebp-10h]"
"	      00568819    push eax"
"	      0056881a    mov eax,[ebp-6Ch]"
"	      0056881d    push eax"
"	      0056881e    call 00554B76h"
"	      00568823    add esp,0Ch"
);
// LINE 485:
	asm( 
"	      00568826    jmp near ptr 00568830h"
);
// LINE 486:
	asm( 
"	      0056882b    jmp near ptr 00568835h"
);
// LINE 487:
	asm( 
"	      00568830    jmp near ptr 005687B1h"
);
// LINE 488:
	asm( 
"	      00568835    jmp near ptr 00568787h"
);
// LINE 489:
	asm( 
"	      0056883a    mov word ptr [ebp-70h],1"
"	      00568840    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00568847    call 00568855h"
"	      0056884c    mov ax,[ebp-70h]"
"	      00568850    jmp near ptr 00568868h"
);
// LINE 490:
	asm( 
"	      00568855    lea ecx,[ebp-64h]"
"	      00568858    call 005679EBh"
"	      0056885d    ret"
"	      0056885e    mov eax,5961E0h"
"	      00568863    jmp near ptr 0056F590h"
"	      00568868    mov ecx,[ebp-0Ch]"
"	      0056886b    mov fs:[0],ecx"
"	      00568872    pop edi"
"	      00568873    pop esi"
"	      00568874    pop ebx"
"	      00568875    leave"
"	      00568876    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x00568879
_cArray::SetSize {
// LINE 493:
	asm( 
"	      00568879    push ebp"
"	      0056887a    mov ebp,esp"
"	      0056887c    sub esp,4"
"	      0056887f    push ebx"
"	      00568880    push esi"
"	      00568881    push edi"
"	      00568882    mov [ebp-4],ecx"
);
// LINE 494:
	asm( 
"	      00568885    mov eax,[ebp-4]"
"	      00568888    mov ecx,[ebp+0Ch]"
"	      0056888b    cmp [eax+10h],ecx"
"	      0056888e    jne near ptr 005688ACh"
"	      00568894    mov eax,[ebp-4]"
"	      00568897    mov ecx,[ebp+8]"
"	      0056889a    cmp [eax+14h],ecx"
"	      0056889d    jne near ptr 005688ACh"
"	      005688a3    mov ax,1"
"	      005688a7    jmp near ptr 005689C5h"
);
// LINE 496:
	asm( 
"	      005688ac    mov eax,[ebp-4]"
"	      005688af    cmp dword ptr [eax+10h],0FFFFFFFFh"
"	      005688b3    je near ptr 005688E2h"
"	      005688b9    mov eax,[ebp-4]"
"	      005688bc    cmp dword ptr [eax+14h],0FFFFFFFFh"
"	      005688c0    je near ptr 005688E2h"
"	      005688c6    mov eax,[ebp-4]"
"	      005688c9    cmp dword ptr [eax+8],0"
"	      005688cd    je near ptr 005688E2h"
);
// LINE 498:
	asm( 
"	      005688d3    mov eax,[ebp-4]"
"	      005688d6    mov eax,[eax+8]"
"	      005688d9    push eax"
"	      005688da    call 005548C3h"
"	      005688df    add esp,4"
);
// LINE 501:
	asm( 
"	      005688e2    mov eax,[ebp+0Ch]"
"	      005688e5    mov ecx,[ebp-4]"
"	      005688e8    mov [ecx+10h],eax"
"	      005688eb    mov eax,[ebp+8]"
"	      005688ee    mov ecx,[ebp-4]"
"	      005688f1    mov [ecx+14h],eax"
);
// LINE 503:
	asm( 
"	      005688f4    jmp near ptr 00568915h"
"	      005688f9    push 8C085h"
"	      005688fe    push 5BFFD4h"
"	      00568903    push 1F7h"
"	      00568908    push 5BFFECh"
"	      0056890d    call 00554F30h"
"	      00568912    add esp,10h"
);
// LINE 504:
	asm( 
"	      00568915    mov eax,[ebp-4]"
"	      00568918    mov eax,[eax+18h]"
"	      0056891b    mov ecx,[ebp-4]"
"	      0056891e    imul eax,[ecx+10h]"
"	      00568922    mov ecx,[ebp-4]"
"	      00568925    imul eax,[ecx+14h]"
"	      00568929    mov ecx,[ebp-4]"
"	      0056892c    mov ecx,[ecx+14h]"
"	      0056892f    lea eax,[eax+ecx*4]"
"	      00568932    add eax,8"
"	      00568935    mov ecx,[ebp-4]"
"	      00568938    mov [ecx+1Ch],eax"
);
// LINE 505:
	asm( 
"	      0056893b    mov eax,[ebp-4]"
"	      0056893e    cmp dword ptr [eax+1Ch],7A1200h"
"	      00568945    jb near ptr 00568967h"
"	      0056894b    push 8C085h"
"	      00568950    push 5C000Ch"
"	      00568955    push 1F9h"
"	      0056895a    push 5C0024h"
"	      0056895f    call 00554F30h"
"	      00568964    add esp,10h"
);
// LINE 506:
	asm( 
"	      00568967    push 0"
"	      00568969    mov eax,[ebp-4]"
"	      0056896c    mov eax,[eax+1Ch]"
"	      0056896f    push eax"
"	      00568970    call 00554759h"
"	      00568975    add esp,8"
"	      00568978    mov ecx,[ebp-4]"
"	      0056897b    mov [ecx+8],eax"
);
// LINE 507:
	asm( 
"	      0056897e    mov eax,[ebp-4]"
"	      00568981    cmp dword ptr [eax+8],0"
"	      00568985    jne near ptr 005689A7h"
"	      0056898b    push 8C085h"
"	      00568990    push 5C0044h"
"	      00568995    push 1FBh"
"	      0056899a    push 5C0054h"
"	      0056899f    call 00554F30h"
"	      005689a4    add esp,10h"
);
// LINE 509:
	asm( 
"	      005689a7    mov eax,[ebp-4]"
"	      005689aa    mov eax,[eax+8]"
"	      005689ad    push eax"
"	      005689ae    call 00554B04h"
"	      005689b3    add esp,4"
"	      005689b6    mov ecx,[ebp-4]"
"	      005689b9    mov [ecx+0Ch],eax"
);
// LINE 511:
	asm( 
"	      005689bc    mov ax,1"
"	      005689c0    jmp near ptr 005689C5h"
);
// LINE 512:
	asm( 
"	      005689c5    pop edi"
"	      005689c6    pop esi"
"	      005689c7    pop ebx"
"	      005689c8    leave"
"	      005689c9    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x005689cc
_cArray::SetXPointers {
// LINE 515:
	asm( 
"	      005689cc    push ebp"
"	      005689cd    mov ebp,esp"
"	      005689cf    sub esp,8"
"	      005689d2    push ebx"
"	      005689d3    push esi"
"	      005689d4    push edi"
"	      005689d5    mov [ebp-8],ecx"
);
// LINE 517:
	asm( 
"	      005689d8    mov eax,[ebp-8]"
"	      005689db    mov eax,[eax+0Ch]"
"	      005689de    add eax,8"
"	      005689e1    mov ecx,[ebp-8]"
"	      005689e4    mov [ecx+4],eax"
);
// LINE 519:
	asm( 
"	      005689e7    mov eax,[ebp-8]"
"	      005689ea    cmp dword ptr [eax+14h],0"
"	      005689ee    jne near ptr 005689F9h"
"	      005689f4    jmp near ptr 00568A63h"
);
// LINE 521:
	asm( 
"	      005689f9    mov eax,[ebp-8]"
"	      005689fc    mov eax,[eax+14h]"
"	      005689ff    shl eax,2"
"	      00568a02    mov ecx,[ebp-8]"
"	      00568a05    add eax,[ecx+4]"
"	      00568a08    mov ecx,[ebp-8]"
"	      00568a0b    mov ecx,[ecx+4]"
"	      00568a0e    mov [ecx],eax"
);
// LINE 523:
	asm( 
"	      00568a10    mov word ptr [ebp-4],1"
"	      00568a16    jmp near ptr 00568A1Fh"
"	      00568a1b    inc word ptr [ebp-4]"
"	      00568a1f    mov eax,[ebp-8]"
"	      00568a22    movsx ecx,word ptr [ebp-4]"
"	      00568a26    cmp [eax+14h],ecx"
"	      00568a29    jle near ptr 00568A5Eh"
);
// LINE 524:
	asm( 
"	      00568a2f    movsx eax,word ptr [ebp-4]"
"	      00568a33    mov ecx,[ebp-8]"
"	      00568a36    mov ecx,[ecx+4]"
"	      00568a39    mov eax,[ecx+eax*4-4]"
"	      00568a3d    mov ecx,[ebp-8]"
"	      00568a40    mov ecx,[ecx+18h]"
"	      00568a43    mov edx,[ebp-8]"
"	      00568a46    imul ecx,[edx+10h]"
"	      00568a4a    add eax,ecx"
"	      00568a4c    movsx ecx,word ptr [ebp-4]"
"	      00568a50    mov edx,[ebp-8]"
"	      00568a53    mov edx,[edx+4]"
"	      00568a56    mov [edx+ecx*4],eax"
);
// LINE 526:
	asm( 
"	      00568a59    jmp near ptr 00568A1Bh"
);
// LINE 527:
	asm( 
"	      00568a5e    jmp near ptr 00568A63h"
"	      00568a63    pop edi"
"	      00568a64    pop esi"
"	      00568a65    pop ebx"
"	      00568a66    leave"
"	      00568a67    ret"
);
}

// FUNCTION: SIMCOPTER 0x00568a68
_cArray::CopyFrom {
// LINE 537:
	asm( 
"	      00568a68    push ebp"
"	      00568a69    mov ebp,esp"
"	      00568a6b    sub esp,4"
"	      00568a6e    push ebx"
"	      00568a6f    push esi"
"	      00568a70    push edi"
"	      00568a71    mov [ebp-4],ecx"
);
// LINE 538:
	asm( 
"	      00568a74    mov eax,[ebp+8]"
"	      00568a77    push eax"
"	      00568a78    call 005661F4h"
"	      00568a7d    add esp,4"
"	      00568a80    push eax"
"	      00568a81    mov ecx,[ebp-4]"
"	      00568a84    call 00568A95h"
);
// LINE 539:
	asm( 
"	      00568a89    jmp near ptr 00568A8Eh"
"	      00568a8e    pop edi"
"	      00568a8f    pop esi"
"	      00568a90    pop ebx"
"	      00568a91    leave"
"	      00568a92    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568a95
_cArray::CopyFrom {
// LINE 542:
	asm( 
"	      00568a95    push ebp"
"	      00568a96    mov ebp,esp"
"	      00568a98    sub esp,8"
"	      00568a9b    push ebx"
"	      00568a9c    push esi"
"	      00568a9d    push edi"
"	      00568a9e    mov [ebp-8],ecx"
);
// LINE 543:
	asm( 
"	      00568aa1    push 0FFFFFFFFh"
"	      00568aa3    mov eax,[ebp+8]"
"	      00568aa6    push eax"
"	      00568aa7    call 00568DB1h"
"	      00568aac    add esp,8"
"	      00568aaf    mov [ebp-4],eax"
);
// LINE 544:
	asm( 
"	      00568ab2    mov eax,[ebp-4]"
"	      00568ab5    push eax"
"	      00568ab6    mov ecx,[ebp-8]"
"	      00568ab9    call 00568ACAh"
);
// LINE 545:
	asm( 
"	      00568abe    jmp near ptr 00568AC3h"
"	      00568ac3    pop edi"
"	      00568ac4    pop esi"
"	      00568ac5    pop ebx"
"	      00568ac6    leave"
"	      00568ac7    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568aca
_cArray::CopyFrom {
// LINE 548:
	asm( 
"	      00568aca    push ebp"
"	      00568acb    mov ebp,esp"
"	      00568acd    sub esp,8"
"	      00568ad0    push ebx"
"	      00568ad1    push esi"
"	      00568ad2    push edi"
"	      00568ad3    mov [ebp-8],ecx"
);
// LINE 549:
	asm( 
"	      00568ad6    cmp dword ptr [ebp+8],0"
"	      00568ada    jne near ptr 00568AFCh"
"	      00568ae0    push 8C085h"
"	      00568ae5    push 5C0074h"
"	      00568aea    push 225h"
"	      00568aef    push 5C0098h"
"	      00568af4    call 00554F30h"
"	      00568af9    add esp,10h"
);
// LINE 550:
	asm( 
"	      00568afc    mov eax,[ebp-8]"
"	      00568aff    mov ecx,[ebp+8]"
"	      00568b02    mov ecx,[ecx+18h]"
"	      00568b05    cmp [eax+18h],ecx"
"	      00568b08    je near ptr 00568B2Ah"
"	      00568b0e    push 8C085h"
"	      00568b13    push 5C00B8h"
"	      00568b18    push 226h"
"	      00568b1d    push 5C00E0h"
"	      00568b22    call 00554F30h"
"	      00568b27    add esp,10h"
);
// LINE 551:
	asm( 
"	      00568b2a    mov eax,[ebp-8]"
"	      00568b2d    mov ecx,[ebp+8]"
"	      00568b30    mov ecx,[ecx+14h]"
"	      00568b33    cmp [eax+14h],ecx"
"	      00568b36    jne near ptr 00568B4Eh"
"	      00568b3c    mov eax,[ebp-8]"
"	      00568b3f    mov ecx,[ebp+8]"
"	      00568b42    mov ecx,[ecx+10h]"
"	      00568b45    cmp [eax+10h],ecx"
"	      00568b48    je near ptr 00568B6Ah"
"	      00568b4e    push 8C085h"
"	      00568b53    push 5C0100h"
"	      00568b58    push 227h"
"	      00568b5d    push 5C0124h"
"	      00568b62    call 00554F30h"
"	      00568b67    add esp,10h"
);
// LINE 553:
	asm( 
"	      00568b6a    mov eax,[ebp-8]"
"	      00568b6d    mov eax,[eax+14h]"
"	      00568b70    mov ecx,[ebp-8]"
"	      00568b73    imul eax,[ecx+18h]"
"	      00568b77    mov ecx,[ebp-8]"
"	      00568b7a    imul eax,[ecx+10h]"
"	      00568b7e    mov [ebp-4],eax"
);
// LINE 554:
	asm( 
"	      00568b81    cmp dword ptr [ebp-4],0"
"	      00568b85    jl near ptr 00568B98h"
"	      00568b8b    cmp dword ptr [ebp-4],7A1200h"
"	      00568b92    jl near ptr 00568BB4h"
"	      00568b98    push 8C085h"
"	      00568b9d    push 5C0144h"
"	      00568ba2    push 22Ah"
"	      00568ba7    push 5C0160h"
"	      00568bac    call 00554F30h"
"	      00568bb1    add esp,10h"
);
// LINE 555:
	asm( 
"	      00568bb4    cmp dword ptr [ebp-4],0"
"	      00568bb8    je near ptr 00568BDCh"
);
// LINE 556:
	asm( 
"	      00568bbe    mov eax,[ebp-4]"
"	      00568bc1    push eax"
"	      00568bc2    mov eax,[ebp-8]"
"	      00568bc5    mov eax,[eax+4]"
"	      00568bc8    mov eax,[eax]"
"	      00568bca    push eax"
"	      00568bcb    mov eax,[ebp+8]"
"	      00568bce    mov eax,[eax+4]"
"	      00568bd1    mov eax,[eax]"
"	      00568bd3    push eax"
"	      00568bd4    call 00554B76h"
"	      00568bd9    add esp,0Ch"
);
// LINE 557:
	asm( 
"	      00568bdc    jmp near ptr 00568BE1h"
"	      00568be1    pop edi"
"	      00568be2    pop esi"
"	      00568be3    pop ebx"
"	      00568be4    leave"
"	      00568be5    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568be8
_cArray::CopyTo {
// LINE 568:
	asm( 
"	      00568be8    push ebp"
"	      00568be9    mov ebp,esp"
"	      00568beb    sub esp,8"
"	      00568bee    push ebx"
"	      00568bef    push esi"
"	      00568bf0    push edi"
"	      00568bf1    mov [ebp-8],ecx"
);
// LINE 569:
	asm( 
"	      00568bf4    cmp dword ptr [ebp+8],0"
"	      00568bf8    jne near ptr 00568C1Ah"
"	      00568bfe    push 8C085h"
"	      00568c03    push 5C0180h"
"	      00568c08    push 239h"
"	      00568c0d    push 5C01A4h"
"	      00568c12    call 00554F30h"
"	      00568c17    add esp,10h"
);
// LINE 570:
	asm( 
"	      00568c1a    mov eax,[ebp+8]"
"	      00568c1d    mov ecx,[ebp-8]"
"	      00568c20    mov ecx,[ecx+18h]"
"	      00568c23    cmp [eax+18h],ecx"
"	      00568c26    je near ptr 00568C48h"
"	      00568c2c    push 8C085h"
"	      00568c31    push 5C01C4h"
"	      00568c36    push 23Ah"
"	      00568c3b    push 5C01ECh"
"	      00568c40    call 00554F30h"
"	      00568c45    add esp,10h"
);
// LINE 571:
	asm( 
"	      00568c48    mov eax,[ebp-8]"
"	      00568c4b    mov ecx,[ebp+8]"
"	      00568c4e    mov ecx,[ecx+14h]"
"	      00568c51    cmp [eax+14h],ecx"
"	      00568c54    jne near ptr 00568C6Ch"
"	      00568c5a    mov eax,[ebp-8]"
"	      00568c5d    mov ecx,[ebp+8]"
"	      00568c60    mov ecx,[ecx+10h]"
"	      00568c63    cmp [eax+10h],ecx"
"	      00568c66    je near ptr 00568C88h"
"	      00568c6c    push 8C085h"
"	      00568c71    push 5C020Ch"
"	      00568c76    push 23Bh"
"	      00568c7b    push 5C022Ch"
"	      00568c80    call 00554F30h"
"	      00568c85    add esp,10h"
);
// LINE 573:
	asm( 
"	      00568c88    mov eax,[ebp-8]"
"	      00568c8b    mov eax,[eax+14h]"
"	      00568c8e    mov ecx,[ebp-8]"
"	      00568c91    imul eax,[ecx+10h]"
"	      00568c95    mov ecx,[ebp-8]"
"	      00568c98    imul eax,[ecx+18h]"
"	      00568c9c    mov [ebp-4],eax"
);
// LINE 574:
	asm( 
"	      00568c9f    cmp dword ptr [ebp-4],0"
"	      00568ca3    jl near ptr 00568CB6h"
"	      00568ca9    cmp dword ptr [ebp-4],7A1200h"
"	      00568cb0    jl near ptr 00568CD2h"
"	      00568cb6    push 8C085h"
"	      00568cbb    push 5C024Ch"
"	      00568cc0    push 23Eh"
"	      00568cc5    push 5C0278h"
"	      00568cca    call 00554F30h"
"	      00568ccf    add esp,10h"
);
// LINE 575:
	asm( 
"	      00568cd2    cmp dword ptr [ebp-4],0"
"	      00568cd6    je near ptr 00568CFAh"
);
// LINE 576:
	asm( 
"	      00568cdc    mov eax,[ebp-4]"
"	      00568cdf    push eax"
"	      00568ce0    mov eax,[ebp+8]"
"	      00568ce3    mov eax,[eax+4]"
"	      00568ce6    mov eax,[eax]"
"	      00568ce8    push eax"
"	      00568ce9    mov eax,[ebp-8]"
"	      00568cec    mov eax,[eax+4]"
"	      00568cef    mov eax,[eax]"
"	      00568cf1    push eax"
"	      00568cf2    call 00554B76h"
"	      00568cf7    add esp,0Ch"
);
// LINE 577:
	asm( 
"	      00568cfa    jmp near ptr 00568CFFh"
"	      00568cff    pop edi"
"	      00568d00    pop esi"
"	      00568d01    pop ebx"
"	      00568d02    leave"
"	      00568d03    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568d06
_cArray::CopyTo {
// LINE 580:
	asm( 
"	      00568d06    push ebp"
"	      00568d07    mov ebp,esp"
"	      00568d09    sub esp,8"
"	      00568d0c    push ebx"
"	      00568d0d    push esi"
"	      00568d0e    push edi"
"	      00568d0f    mov [ebp-8],ecx"
);
// LINE 581:
	asm( 
"	      00568d12    push 0FFFFFFFFh"
"	      00568d14    mov eax,[ebp+8]"
"	      00568d17    push eax"
"	      00568d18    call 00568DB1h"
"	      00568d1d    add esp,8"
"	      00568d20    mov [ebp-4],eax"
);
// LINE 582:
	asm( 
"	      00568d23    mov eax,[ebp-4]"
"	      00568d26    push eax"
"	      00568d27    mov ecx,[ebp-8]"
"	      00568d2a    call 00568BE8h"
);
// LINE 583:
	asm( 
"	      00568d2f    jmp near ptr 00568D34h"
"	      00568d34    pop edi"
"	      00568d35    pop esi"
"	      00568d36    pop ebx"
"	      00568d37    leave"
"	      00568d38    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568d3b
_cArray::CopyTo {
// LINE 586:
	asm( 
"	      00568d3b    push ebp"
"	      00568d3c    mov ebp,esp"
"	      00568d3e    sub esp,4"
"	      00568d41    push ebx"
"	      00568d42    push esi"
"	      00568d43    push edi"
"	      00568d44    mov [ebp-4],ecx"
);
// LINE 587:
	asm( 
"	      00568d47    mov eax,[ebp+8]"
"	      00568d4a    push eax"
"	      00568d4b    call 005661F4h"
"	      00568d50    add esp,4"
"	      00568d53    push eax"
"	      00568d54    mov ecx,[ebp-4]"
"	      00568d57    call 00568D06h"
);
// LINE 588:
	asm( 
"	      00568d5c    jmp near ptr 00568D61h"
"	      00568d61    pop edi"
"	      00568d62    pop esi"
"	      00568d63    pop ebx"
"	      00568d64    leave"
"	      00568d65    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568d68
_cArray::GetName {
// LINE 591:
	asm( 
"	      00568d68    push ebp"
"	      00568d69    mov ebp,esp"
"	      00568d6b    sub esp,4"
"	      00568d6e    push ebx"
"	      00568d6f    push esi"
"	      00568d70    push edi"
"	      00568d71    mov [ebp-4],ecx"
);
// LINE 592:
	asm( 
"	      00568d74    push 10h"
"	      00568d76    mov eax,[ebp+8]"
"	      00568d79    push eax"
"	      00568d7a    mov eax,[ebp-4]"
"	      00568d7d    add eax,3Ch"
"	      00568d80    push eax"
"	      00568d81    call 00554B76h"
"	      00568d86    add esp,0Ch"
);
// LINE 593:
	asm( 
"	      00568d89    jmp near ptr 00568D8Eh"
"	      00568d8e    pop edi"
"	      00568d8f    pop esi"
"	      00568d90    pop ebx"
"	      00568d91    leave"
"	      00568d92    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00568d95
_cArray::GetName {
// LINE 596:
	asm( 
"	      00568d95    push ebp"
"	      00568d96    mov ebp,esp"
"	      00568d98    sub esp,4"
"	      00568d9b    push ebx"
"	      00568d9c    push esi"
"	      00568d9d    push edi"
"	      00568d9e    mov [ebp-4],ecx"
);
// LINE 597:
	asm( 
"	      00568da1    mov eax,[ebp-4]"
"	      00568da4    mov eax,[eax+4Ch]"
"	      00568da7    jmp near ptr 00568DACh"
);
// LINE 598:
	asm( 
"	      00568dac    pop edi"
"	      00568dad    pop esi"
"	      00568dae    pop ebx"
"	      00568daf    leave"
"	      00568db0    ret"
);
}

// FUNCTION: SIMCOPTER 0x00568db1
_cArray::GetArray {
// LINE 610:
	asm( 
"	      00568db1    push ebp"
"	      00568db2    mov ebp,esp"
"	      00568db4    sub esp,8"
"	      00568db7    push ebx"
"	      00568db8    push esi"
"	      00568db9    push edi"
);
// LINE 612:
	asm( 
"	      00568dba    call 00567B1Bh"
);
// LINE 613:
	asm( 
"	      00568dbf    mov word ptr [ebp-4],0"
"	      00568dc5    jmp near ptr 00568DCEh"
"	      00568dca    inc word ptr [ebp-4]"
"	      00568dce    movsx eax,word ptr [ebp-4]"
"	      00568dd2    cmp eax,400h"
"	      00568dd7    jge near ptr 00568F19h"
);
// LINE 614:
	asm( 
"	      00568ddd    movsx eax,word ptr [ebp-4]"
"	      00568de1    mov ecx,ds:[5BF74Ch]"
"	      00568de7    cmp dword ptr [ecx+eax*4],0"
"	      00568deb    je near ptr 00568E24h"
"	      00568df1    movsx eax,word ptr [ebp-4]"
"	      00568df5    mov ecx,ds:[5BF74Ch]"
"	      00568dfb    mov eax,[ecx+eax*4]"
"	      00568dfe    cmp dword ptr [eax+4Ch],0"
"	      00568e02    jne near ptr 00568E24h"
"	      00568e08    push 8C085h"
"	      00568e0d    push 5C0298h"
"	      00568e12    push 266h"
"	      00568e17    push 5C02B0h"
"	      00568e1c    call 00554F30h"
"	      00568e21    add esp,10h"
);
// LINE 615:
	asm( 
"	      00568e24    movsx eax,word ptr [ebp+0Ch]"
"	      00568e28    cmp eax,0FFFFFFFFh"
"	      00568e2b    jne near ptr 00568E75h"
"	      00568e31    movsx eax,word ptr [ebp-4]"
"	      00568e35    mov ecx,ds:[5BF74Ch]"
"	      00568e3b    cmp dword ptr [ecx+eax*4],0"
"	      00568e3f    je near ptr 00568E75h"
"	      00568e45    movsx eax,word ptr [ebp-4]"
"	      00568e49    mov ecx,ds:[5BF74Ch]"
"	      00568e4f    mov eax,[ecx+eax*4]"
"	      00568e52    mov ecx,[ebp+8]"
"	      00568e55    cmp [eax+4Ch],ecx"
"	      00568e58    jne near ptr 00568E75h"
);
// LINE 616:
	asm( 
"	      00568e5e    movsx eax,word ptr [ebp-4]"
"	      00568e62    mov ecx,ds:[5BF74Ch]"
"	      00568e68    mov eax,[ecx+eax*4]"
"	      00568e6b    jmp near ptr 00568F20h"
);
// LINE 618:
	asm( 
"	      00568e70    jmp near ptr 00568F14h"
"	      00568e75    movsx eax,word ptr [ebp+0Ch]"
"	      00568e79    cmp eax,0FFFFFFFFh"
"	      00568e7c    je near ptr 00568F14h"
"	      00568e82    movsx eax,word ptr [ebp-4]"
"	      00568e86    mov ecx,ds:[5BF74Ch]"
"	      00568e8c    cmp dword ptr [ecx+eax*4],0"
"	      00568e90    je near ptr 00568F14h"
);
// LINE 619:
	asm( 
"	      00568e96    mov eax,4"
"	      00568e9b    movsx ecx,word ptr [ebp+0Ch]"
"	      00568e9f    sub eax,ecx"
"	      00568ea1    shl eax,3"
"	      00568ea4    mov [ebp-8],ax"
);
// LINE 620:
	asm( 
"	      00568ea8    movsx eax,word ptr [ebp-8]"
"	      00568eac    test eax,eax"
"	      00568eae    jl near ptr 00568EC1h"
"	      00568eb4    movsx eax,word ptr [ebp-8]"
"	      00568eb8    cmp eax,20h"
"	      00568ebb    jb near ptr 00568EDDh"
"	      00568ec1    push 8C085h"
"	      00568ec6    push 5C02D0h"
"	      00568ecb    push 26Ch"
"	      00568ed0    push 5C02F8h"
"	      00568ed5    call 00554F30h"
"	      00568eda    add esp,10h"
);
// LINE 621:
	asm( 
"	      00568edd    movsx eax,word ptr [ebp-4]"
"	      00568ee1    mov ecx,ds:[5BF74Ch]"
"	      00568ee7    mov eax,[ecx+eax*4]"
"	      00568eea    mov eax,[eax+4Ch]"
"	      00568eed    mov cl,[ebp-8]"
"	      00568ef0    shr eax,cl"
"	      00568ef2    mov edx,[ebp+8]"
"	      00568ef5    mov cl,[ebp-8]"
"	      00568ef8    shr edx,cl"
"	      00568efa    cmp eax,edx"
"	      00568efc    jne near ptr 00568F14h"
);
// LINE 622:
	asm( 
"	      00568f02    movsx eax,word ptr [ebp-4]"
"	      00568f06    mov ecx,ds:[5BF74Ch]"
"	      00568f0c    mov eax,[ecx+eax*4]"
"	      00568f0f    jmp near ptr 00568F20h"
);
// LINE 624:
	asm( 
"	      00568f14    jmp near ptr 00568DCAh"
);
// LINE 625:
	asm( 
"	      00568f19    xor eax,eax"
"	      00568f1b    jmp near ptr 00568F20h"
);
// LINE 626:
	asm( 
"	      00568f20    pop edi"
"	      00568f21    pop esi"
"	      00568f22    pop ebx"
"	      00568f23    leave"
"	      00568f24    ret"
);
}

// FUNCTION: SIMCOPTER 0x00568f25
_cArray::GetArrayByType {
// LINE 629:
	asm( 
"	      00568f25    push ebp"
"	      00568f26    mov ebp,esp"
"	      00568f28    sub esp,0Ch"
"	      00568f2b    push ebx"
"	      00568f2c    push esi"
"	      00568f2d    push edi"
);
// LINE 630:
	asm( 
"	      00568f2e    call 00567B1Bh"
);
// LINE 631:
	asm( 
"	      00568f33    mov word ptr [ebp-0Ch],0"
);
// LINE 633:
	asm( 
"	      00568f39    mov word ptr [ebp-8],0"
"	      00568f3f    jmp near ptr 00568F48h"
"	      00568f44    inc word ptr [ebp-8]"
"	      00568f48    movsx eax,word ptr [ebp-8]"
"	      00568f4c    cmp eax,400h"
"	      00568f51    jge near ptr 00568F9Ch"
);
// LINE 634:
	asm( 
"	      00568f57    movsx eax,word ptr [ebp-8]"
"	      00568f5b    mov ecx,ds:[5BF74Ch]"
"	      00568f61    mov eax,[ecx+eax*4]"
"	      00568f64    mov [ebp-4],eax"
);
// LINE 635:
	asm( 
"	      00568f67    mov eax,[ebp-4]"
"	      00568f6a    mov ecx,[ebp+8]"
"	      00568f6d    cmp [eax+28h],ecx"
"	      00568f70    jne near ptr 00568F97h"
);
// LINE 636:
	asm( 
"	      00568f76    movsx eax,word ptr [ebp-0Ch]"
"	      00568f7a    movsx ecx,word ptr [ebp+0Ch]"
"	      00568f7e    cmp eax,ecx"
"	      00568f80    jne near ptr 00568F93h"
);
// LINE 637:
	asm( 
"	      00568f86    mov eax,[ebp-4]"
"	      00568f89    jmp near ptr 00568FA3h"
);
// LINE 638:
	asm( 
"	      00568f8e    jmp near ptr 00568F97h"
);
// LINE 639:
	asm( 
"	      00568f93    inc word ptr [ebp-0Ch]"
);
// LINE 641:
	asm( 
"	      00568f97    jmp near ptr 00568F44h"
);
// LINE 642:
	asm( 
"	      00568f9c    xor eax,eax"
"	      00568f9e    jmp near ptr 00568FA3h"
);
// LINE 643:
	asm( 
"	      00568fa3    pop edi"
"	      00568fa4    pop esi"
"	      00568fa5    pop ebx"
"	      00568fa6    leave"
"	      00568fa7    ret"
);
}

// FUNCTION: SIMCOPTER 0x00568fa8
_cArray::GetNumArraysByType {
// LINE 646:
	asm( 
"	      00568fa8    push ebp"
"	      00568fa9    mov ebp,esp"
"	      00568fab    sub esp,0Ch"
"	      00568fae    push ebx"
"	      00568faf    push esi"
"	      00568fb0    push edi"
);
// LINE 647:
	asm( 
"	      00568fb1    call 00567B1Bh"
);
// LINE 648:
	asm( 
"	      00568fb6    mov word ptr [ebp-4],0"
);
// LINE 649:
	asm( 
"	      00568fbc    mov word ptr [ebp-8],0"
"	      00568fc2    jmp near ptr 00568FCBh"
"	      00568fc7    inc word ptr [ebp-8]"
"	      00568fcb    movsx eax,word ptr [ebp-8]"
"	      00568fcf    cmp eax,400h"
"	      00568fd4    jge near ptr 00569002h"
);
// LINE 650:
	asm( 
"	      00568fda    movsx eax,word ptr [ebp-8]"
"	      00568fde    mov ecx,ds:[5BF74Ch]"
"	      00568fe4    mov eax,[ecx+eax*4]"
"	      00568fe7    mov [ebp-0Ch],eax"
);
// LINE 651:
	asm( 
"	      00568fea    mov eax,[ebp-0Ch]"
"	      00568fed    mov ecx,[ebp+8]"
"	      00568ff0    cmp [eax+28h],ecx"
"	      00568ff3    jne near ptr 00568FFDh"
);
// LINE 652:
	asm( 
"	      00568ff9    inc word ptr [ebp-4]"
);
// LINE 653:
	asm( 
"	      00568ffd    jmp near ptr 00568FC7h"
);
// LINE 654:
	asm( 
"	      00569002    mov ax,[ebp-4]"
"	      00569006    jmp near ptr 0056900Bh"
);
// LINE 655:
	asm( 
"	      0056900b    pop edi"
"	      0056900c    pop esi"
"	      0056900d    pop ebx"
"	      0056900e    leave"
"	      0056900f    ret"
);
}

// FUNCTION: SIMCOPTER 0x00569010
_cArray::GetArrayIndexInType {
// LINE 658:
	asm( 
"	      00569010    push ebp"
"	      00569011    mov ebp,esp"
"	      00569013    sub esp,0Ch"
"	      00569016    push ebx"
"	      00569017    push esi"
"	      00569018    push edi"
);
// LINE 659:
	asm( 
"	      00569019    call 00567B1Bh"
);
// LINE 660:
	asm( 
"	      0056901e    mov word ptr [ebp-0Ch],0"
);
// LINE 662:
	asm( 
"	      00569024    mov word ptr [ebp-8],0"
"	      0056902a    jmp near ptr 00569033h"
"	      0056902f    inc word ptr [ebp-8]"
"	      00569033    movsx eax,word ptr [ebp-8]"
"	      00569037    cmp eax,400h"
"	      0056903c    jge near ptr 00569087h"
);
// LINE 663:
	asm( 
"	      00569042    movsx eax,word ptr [ebp-8]"
"	      00569046    mov ecx,ds:[5BF74Ch]"
"	      0056904c    mov eax,[ecx+eax*4]"
"	      0056904f    mov [ebp-4],eax"
);
// LINE 664:
	asm( 
"	      00569052    mov eax,[ebp-4]"
"	      00569055    mov ecx,[ebp+8]"
"	      00569058    mov ecx,[ecx+28h]"
"	      0056905b    cmp [eax+28h],ecx"
"	      0056905e    jne near ptr 00569082h"
);
// LINE 665:
	asm( 
"	      00569064    mov eax,[ebp+8]"
"	      00569067    cmp [ebp-4],eax"
"	      0056906a    jne near ptr 0056907Eh"
);
// LINE 666:
	asm( 
"	      00569070    mov ax,[ebp-0Ch]"
"	      00569074    jmp near ptr 00569090h"
);
// LINE 667:
	asm( 
"	      00569079    jmp near ptr 00569082h"
);
// LINE 668:
	asm( 
"	      0056907e    inc word ptr [ebp-0Ch]"
);
// LINE 670:
	asm( 
"	      00569082    jmp near ptr 0056902Fh"
);
// LINE 671:
	asm( 
"	      00569087    mov ax,0FFFFh"
"	      0056908b    jmp near ptr 00569090h"
);
// LINE 672:
	asm( 
"	      00569090    pop edi"
"	      00569091    pop esi"
"	      00569092    pop ebx"
"	      00569093    leave"
"	      00569094    ret"
);
}

// FUNCTION: SIMCOPTER 0x00569095
_cArray::LoadAllArrays {
// LINE 705:
	asm( 
"	      00569095    push ebp"
"	      00569096    mov ebp,esp"
"	      00569098    push 0FFFFFFFFh"
"	      0056909a    push 569305h"
"	      0056909f    mov eax,fs:[0]"
"	      005690a5    push eax"
"	      005690a6    mov fs:[0],esp"
"	      005690ad    sub esp,34h"
"	      005690b0    push ebx"
"	      005690b1    push esi"
"	      005690b2    push edi"
);
// LINE 706:
	asm( 
"	      005690b3    cmp dword ptr [ebp+8],0"
"	      005690b7    jne near ptr 005690D9h"
"	      005690bd    push 8C085h"
"	      005690c2    push 5C0318h"
"	      005690c7    push 2C2h"
"	      005690cc    push 5C0338h"
"	      005690d1    call 00554F30h"
"	      005690d6    add esp,10h"
);
// LINE 712:
	asm( 
"	      005690d9    push 0"
"	      005690db    push 0"
"	      005690dd    call 0056931Dh"
"	      005690e2    add esp,8"
"	      005690e5    mov [ebp-24h],ax"
);
// LINE 713:
	asm( 
"	      005690e9    movsx eax,word ptr [ebp-24h]"
"	      005690ed    cmp eax,0FFFFFFFFh"
"	      005690f0    jne near ptr 00569112h"
"	      005690f6    push 8C085h"
"	      005690fb    push 5C0358h"
"	      00569100    push 2C9h"
"	      00569105    push 5C0378h"
"	      0056910a    call 00554F30h"
"	      0056910f    add esp,10h"
);
// LINE 714:
	asm( 
"	      00569112    mov eax,[ebp+8]"
"	      00569115    mov [ebp-18h],eax"
"	      00569118    mov eax,[ebp+0Ch]"
"	      0056911b    mov [ebp-14h],eax"
);
// LINE 715:
	asm( 
"	      0056911e    mov eax,[ebp-18h]"
"	      00569121    mov ecx,[ebp-14h]"
"	      00569124    movsx edx,word ptr [ebp-24h]"
"	      00569128    lea edx,[edx*8+638998h]"
"	      0056912f    mov [edx],eax"
"	      00569131    mov [edx+4],ecx"
);
// LINE 717:
	asm( 
"	      00569134    mov eax,[ebp+8]"
"	      00569137    push eax"
"	      00569138    call 005674E0h"
"	      0056913d    add esp,4"
"	      00569140    mov [ebp-20h],ax"
);
// LINE 721:
	asm( 
"	      00569144    mov eax,[ebp+0Ch]"
"	      00569147    push eax"
"	      00569148    mov ecx,[ebp+8]"
"	      0056914b    call 0055319Ah"
"	      00569150    mov [ebp-2Ch],ax"
);
// LINE 722:
	asm( 
"	      00569154    mov word ptr [ebp-1Ch],1"
"	      0056915a    jmp near ptr 00569163h"
"	      0056915f    inc word ptr [ebp-1Ch]"
"	      00569163    movsx eax,word ptr [ebp-2Ch]"
"	      00569167    movsx ecx,word ptr [ebp-1Ch]"
"	      0056916b    cmp eax,ecx"
"	      0056916d    jl near ptr 005692DBh"
);
// LINE 724:
	asm( 
"	      00569173    push 0"
"	      00569175    mov eax,[ebp-1Ch]"
"	      00569178    push eax"
"	      00569179    mov eax,[ebp+0Ch]"
"	      0056917c    push eax"
"	      0056917d    mov ecx,[ebp+8]"
"	      00569180    call 00553452h"
"	      00569185    mov [ebp-34h],eax"
);
// LINE 725:
	asm( 
"	      00569188    cmp dword ptr [ebp-34h],0"
"	      0056918c    jne near ptr 005691AEh"
"	      00569192    push 8C085h"
"	      00569197    push 5C0398h"
"	      0056919c    push 2D5h"
"	      005691a1    push 5C03C8h"
"	      005691a6    call 00554F30h"
"	      005691ab    add esp,10h"
);
// LINE 727:
	asm( 
"	      005691ae    mov eax,[ebp-34h]"
"	      005691b1    push eax"
"	      005691b2    call 005549E0h"
"	      005691b7    add esp,4"
"	      005691ba    mov [ebp-38h],eax"
);
// LINE 728:
	asm( 
"	      005691bd    mov eax,[ebp-38h]"
"	      005691c0    mov [ebp-10h],eax"
);
// LINE 729:
	asm( 
"	      005691c3    mov eax,[ebp-10h]"
"	      005691c6    mov ax,[eax]"
"	      005691c9    mov [ebp-28h],ax"
);
// LINE 730:
	asm( 
"	      005691cd    lea eax,[ebp-28h]"
"	      005691d0    push eax"
"	      005691d1    call 0056695Bh"
"	      005691d6    add esp,4"
);
// LINE 731:
	asm( 
"	      005691d9    movsx eax,word ptr [ebp+10h]"
"	      005691dd    movsx ecx,word ptr [ebp-28h]"
"	      005691e1    cmp eax,ecx"
"	      005691e3    je near ptr 00569205h"
"	      005691e9    push 8C085h"
"	      005691ee    push 5C03E8h"
"	      005691f3    push 2DBh"
"	      005691f8    push 5C0420h"
"	      005691fd    call 00554F30h"
"	      00569202    add esp,10h"
);
// LINE 733:
	asm( 
"	      00569205    mov eax,[ebp-34h]"
"	      00569208    push eax"
"	      00569209    call 00554A3Dh"
"	      0056920e    add esp,4"
);
// LINE 736:
	asm( 
"	      00569211    push 50h"
"	      00569213    call 0056A600h"
"	      00569218    add esp,4"
"	      0056921b    mov [ebp-3Ch],eax"
"	      0056921e    mov dword ptr [ebp-4],0"
"	      00569225    cmp dword ptr [ebp-3Ch],0"
"	      00569229    je near ptr 00569266h"
"	      0056922f    mov eax,[ebp-3Ch]"
"	      00569232    mov dword ptr [eax],593738h"
"	      00569238    call 00567B1Bh"
"	      0056923d    mov eax,[ebp+14h]"
"	      00569240    push eax"
"	      00569241    movsx eax,word ptr [ebp+10h]"
"	      00569245    push eax"
"	      00569246    mov eax,[ebp+8]"
"	      00569249    push eax"
"	      0056924a    mov eax,[ebp-34h]"
"	      0056924d    push eax"
"	      0056924e    mov ecx,[ebp-3Ch]"
"	      00569251    call 00567552h"
"	      00569256    jmp near ptr 0056925Bh"
"	      0056925b    mov eax,[ebp-3Ch]"
"	      0056925e    mov [ebp-40h],eax"
"	      00569261    jmp near ptr 0056926Dh"
"	      00569266    mov dword ptr [ebp-40h],0"
"	      0056926d    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00569274    mov eax,[ebp-40h]"
"	      00569277    mov [ebp-30h],eax"
);
// LINE 737:
	asm( 
"	      0056927a    mov eax,[ebp-30h]"
"	      0056927d    mov ecx,[ebp+0Ch]"
"	      00569280    cmp [eax+28h],ecx"
"	      00569283    je near ptr 005692A5h"
"	      00569289    push 8C085h"
"	      0056928e    push 5C0440h"
"	      00569293    push 2E1h"
"	      00569298    push 5C044Ch"
"	      0056929d    call 00554F30h"
"	      005692a2    add esp,10h"
);
// LINE 738:
	asm( 
"	      005692a5    mov eax,[ebp-30h]"
"	      005692a8    mov eax,[eax+0Ch]"
"	      005692ab    add eax,8"
"	      005692ae    mov ecx,[ebp-30h]"
"	      005692b1    cmp eax,[ecx+4]"
"	      005692b4    je near ptr 005692D6h"
"	      005692ba    push 8C085h"
"	      005692bf    push 5C046Ch"
"	      005692c4    push 2E2h"
"	      005692c9    push 5C04A4h"
"	      005692ce    call 00554F30h"
"	      005692d3    add esp,10h"
);
// LINE 755:
	asm( 
"	      005692d6    jmp near ptr 0056915Fh"
);
// LINE 756:
	asm( 
"	      005692db    test dword ptr [ebp-20h],0FFFFh"
"	      005692e2    je near ptr 005692F3h"
);
// LINE 757:
	asm( 
"	      005692e8    mov eax,[ebp+8]"
"	      005692eb    mov eax,[eax]"
"	      005692ed    mov ecx,[ebp+8]"
"	      005692f0    call dword ptr [eax+0Ch]"
);
// LINE 760:
	asm( 
"	      005692f3    jmp near ptr 0056930Fh"
"	      005692f8    mov eax,[ebp-3Ch]"
"	      005692fb    push eax"
"	      005692fc    call 0056A740h"
"	      00569301    add esp,4"
"	      00569304    ret"
"	      00569305    mov eax,596208h"
"	      0056930a    jmp near ptr 0056F590h"
"	      0056930f    mov eax,[ebp-0Ch]"
"	      00569312    mov fs:[0],eax"
"	      00569318    pop edi"
"	      00569319    pop esi"
"	      0056931a    pop ebx"
"	      0056931b    leave"
"	      0056931c    ret"
);
}

// FUNCTION: SIMCOPTER 0x0056931d
_cArray::GetLoadedIndex {
// LINE 776:
	asm( 
"	      0056931d    push ebp"
"	      0056931e    mov ebp,esp"
"	      00569320    sub esp,10h"
"	      00569323    push ebx"
"	      00569324    push esi"
"	      00569325    push edi"
);
// LINE 779:
	asm( 
"	      00569326    mov word ptr [ebp-10h],0FFFFh"
);
// LINE 780:
	asm( 
"	      0056932c    mov eax,[ebp+8]"
"	      0056932f    mov [ebp-8],eax"
"	      00569332    mov eax,[ebp+0Ch]"
"	      00569335    mov [ebp-4],eax"
);
// LINE 781:
	asm( 
"	      00569338    mov word ptr [ebp-0Ch],0"
"	      0056933e    jmp near ptr 00569347h"
"	      00569343    inc word ptr [ebp-0Ch]"
"	      00569347    movsx eax,word ptr [ebp-0Ch]"
"	      0056934b    cmp eax,40h"
"	      0056934e    jge near ptr 005693C6h"
);
// LINE 782:
	asm( 
"	      00569354    movsx eax,word ptr [ebp-0Ch]"
"	      00569358    mov ecx,[ebp-8]"
"	      0056935b    cmp [eax*8+638998h],ecx"
"	      00569362    jne near ptr 005693C1h"
"	      00569368    movsx eax,word ptr [ebp-0Ch]"
"	      0056936c    mov ecx,[ebp-4]"
"	      0056936f    cmp [eax*8+63899Ch],ecx"
"	      00569376    jne near ptr 005693C1h"
);
// LINE 784:
	asm( 
"	      0056937c    cmp dword ptr [ebp-8],0"
"	      00569380    je near ptr 005693B9h"
"	      00569386    cmp dword ptr [ebp-4],0"
"	      0056938a    je near ptr 005693B9h"
);
// LINE 785:
	asm( 
"	      00569390    movsx eax,word ptr [ebp-10h]"
"	      00569394    cmp eax,0FFFFFFFFh"
"	      00569397    je near ptr 005693B9h"
"	      0056939d    push 8C085h"
"	      005693a2    push 5C04C4h"
"	      005693a7    push 311h"
"	      005693ac    push 5C04ECh"
"	      005693b1    call 00554F30h"
"	      005693b6    add esp,10h"
);
// LINE 787:
	asm( 
"	      005693b9    mov ax,[ebp-0Ch]"
"	      005693bd    mov [ebp-10h],ax"
);
// LINE 792:
	asm( 
"	      005693c1    jmp near ptr 00569343h"
);
// LINE 793:
	asm( 
"	      005693c6    mov ax,[ebp-10h]"
"	      005693ca    jmp near ptr 005693CFh"
);
// LINE 794:
	asm( 
"	      005693cf    pop edi"
"	      005693d0    pop esi"
"	      005693d1    pop ebx"
"	      005693d2    leave"
"	      005693d3    ret"
);
}



// Contribution: 2:000071e0-0000722f Module: 180, 8 byte alignment, initialized_data, read, 


// Contribution: 3:0002874c-0002950a Module: 180, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x0002874c
// _cArray::sArrayTable
// GLOBAL: SIMCOPTER 0x00028750
// _cArray::sAllLoaded


// Contribution: 3:000a1998-000a1b97 Module: 180, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x000a1998
// _cArray::fsLoaded
// LOCAL: SIMCOPTER 0x000a1b98
// __InitCerr
