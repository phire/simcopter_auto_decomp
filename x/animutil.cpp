// Module: Animutil.obj
// Source: C:\Copter\Source\X\Animutil.cpp
// autogenerated by simcopter_tool from PDB file

// Type: float;

// Type: struct DXZY;
struct DXZY{
	float x;
	float z;
	float y;
	float info;
};

// Type: struct DXZY (forward reference);
struct DXZY{
	float x;
	float z;
	float y;
	float info;
};

// Type: void;

// Type: short;

// Type: unsigned short;

// Type: struct XZY (forward reference);
struct XZY{
	short x;
	short z;
	short y;
	short _win8pad;
};

// Type: float *;

// Type: short *;

// Type: struct Polar (forward reference);
struct Polar{
	float phi;
	float psi;
	float tau;
	float _win8pad;
	short lng;
	short lat;
	short trq;
	short _win8pad2;
};

// Type: struct Polar;
struct Polar{
	float phi;
	float psi;
	float tau;
	float _win8pad;
	short lng;
	short lat;
	short trq;
	short _win8pad2;
};

// Type: double;

// Type: struct Rect (forward reference);
struct Rect{
	short top;
	short left;
	short bottom;
	short right;
};

// Type: struct Point (forward reference);
struct Point{
	short v;
	short h;
};

// Type: struct Point;
struct Point{
	short v;
	short h;
};

// Type: struct Rect;
struct Rect{
	short top;
	short left;
	short bottom;
	short right;
};

// Type: unsigned long;

// Type: enum UseDrawGrid;
enum UseDrawGrid {
	kReturnPosition = 0,
	kActuallyDrawGrid = 1,
};

// Type: void * __ptr32;



// Contribution: 1:00161610-00162e95 Module: 187, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00562610
void GetAxis(float XY2Par, float XZ2Par, struct DXZY paraxis, struct DXZY* childaxis) {
// LINE 47:
	__asm        mov    eax, childaxis;
	__asm        push   eax;
	__asm        mov    eax, paraxis.info;
	__asm        push   eax;
	__asm        mov    eax, paraxis.y;
	__asm        push   eax;
	__asm        mov    eax, paraxis.z;
	__asm        push   eax;
	__asm        mov    eax, paraxis.x;
	__asm        push   eax;
	__asm        fld    XZ2Par;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    XZ2Par;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    XY2Par;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    XY2Par;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        call   XYIncrementCartesian;
	__asm        add    esp, 0x24;
	__asm        jmp    near ptr 0x00562693;
// LINE 48:
	__asm        jmp    near ptr 0x00562698;
}

// FUNCTION: COPTER_D 0x0056269d
void GetAxes(float XY2Par, float XZ2Par, struct DXZY parmaj, struct DXZY parmin, struct DXZY* maj, struct DXZY* min, float majrad, float minrad) {
// LINE 52:
	__asm        mov    eax, maj;
	__asm        push   eax;
	__asm        mov    eax, parmaj.info;
	__asm        push   eax;
	__asm        mov    eax, parmaj.y;
	__asm        push   eax;
	__asm        mov    eax, parmaj.z;
	__asm        push   eax;
	__asm        mov    eax, parmaj.x;
	__asm        push   eax;
	__asm        mov    eax, XZ2Par;
	__asm        push   eax;
	__asm        mov    eax, XY2Par;
	__asm        push   eax;
	__asm        call   GetAxis;
	__asm        add    esp, 0x1C;
// LINE 53:
	__asm        mov    eax, min;
	__asm        push   eax;
	__asm        mov    eax, parmin.info;
	__asm        push   eax;
	__asm        mov    eax, parmin.y;
	__asm        push   eax;
	__asm        mov    eax, parmin.z;
	__asm        push   eax;
	__asm        mov    eax, parmin.x;
	__asm        push   eax;
	__asm        mov    eax, XZ2Par;
	__asm        push   eax;
	__asm        mov    eax, XY2Par;
	__asm        push   eax;
	__asm        call   GetAxis;
	__asm        add    esp, 0x1C;
// LINE 54:
	__asm        jmp    near ptr 0x005626F0;
}

// FUNCTION: COPTER_D 0x005626f5
unsigned short PutInPerspective(struct DXZY* xzy, short cH) {
// LINE 59:
	__asm        mov    eax, xzy;
	__asm        fld    dword ptr [eax+8];
	__asm        fcomp  qword ptr ds:[0x593740];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T25;
// LINE 60:
	__asm        xor    ax, ax;
	__asm        jmp    _T6c;
// LINE 61:
_T25:
	__asm        mov    eax, xzy;
	__asm        fld    dword ptr [eax];
	__asm        fmul   qword ptr ds:[0x593748];
	__asm        mov    eax, xzy;
	__asm        fld    dword ptr [eax+8];
	__asm        fadd   qword ptr ds:[0x593748];
	__asm        fdivp;
	__asm        mov    eax, xzy;
	__asm        fstp   dword ptr [eax];
// LINE 62:
	__asm        mov    eax, xzy;
	__asm        fld    dword ptr [eax+4];
	__asm        fmul   qword ptr ds:[0x593748];
	__asm        mov    eax, xzy;
	__asm        fld    dword ptr [eax+8];
	__asm        fadd   qword ptr ds:[0x593748];
	__asm        fdivp;
	__asm        mov    eax, xzy;
	__asm        fstp   dword ptr [eax+4];
// LINE 63:
	__asm        mov    ax, 1;
	__asm        jmp    _T6c;
// LINE 64:
_T6c:
}

// FUNCTION: COPTER_D 0x00562766
unsigned short PutInPerspective(struct XZY* xzy, short cH) {
	struct DXZY dxzy;

// LINE 68:
	__asm        mov    eax, xzy;
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        fild   dword ptr [ebp-0x14];
	__asm        fstp   dxzy.x;
	__asm        mov    eax, xzy;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    [ebp-0x18], eax;
	__asm        fild   dword ptr [ebp-0x18];
	__asm        fstp   dxzy.z;
	__asm        mov    eax, xzy;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        fild   dword ptr [ebp-0x1C];
	__asm        fstp   dxzy.y;
	__asm        mov    dxzy.info, 0;
// LINE 69:
	__asm        mov    eax, reinterpret_cast<uint32_t>(cH);
	__asm        push   eax;
	__asm        lea    eax, dxzy.x;
	__asm        push   eax;
	__asm        call   PutInPerspective;
	__asm        add    esp, 8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T62;
// LINE 70:
	__asm        xor    ax, ax;
	__asm        jmp    _T97;
// LINE 71:
_T62:
	__asm        fld    dxzy.x;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, xzy;
	__asm        mov    [ecx], ax;
	__asm        fld    dxzy.z;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, xzy;
	__asm        mov    [ecx+2], ax;
	__asm        fld    dxzy.y;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, xzy;
	__asm        mov    [ecx+4], ax;
// LINE 72:
	__asm        mov    ax, 1;
	__asm        jmp    _T97;
// LINE 73:
_T97:
}

// FUNCTION: COPTER_D 0x00562802
void XY2Cartesian(float radius, float phi, float psi, float * xres, float * zres, float * yres) {
	struct DXZY dpt;
	float z;
	float y;
	float x;
	struct DXZY transformed;

// LINE 77:
	__asm        push   0x8C085;
	__asm        push   0x5BECD8;
	__asm        push   0x4D;
	__asm        push   0x5BECF4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 79:
	__asm        mov    x, 0;
	__asm        mov    z, 0;
	__asm        mov    eax, radius;
	__asm        mov    y, eax;
// LINE 80:
	__asm        mov    eax, x;
	__asm        mov    dpt.x, eax;
	__asm        mov    eax, z;
	__asm        mov    dpt.z, eax;
	__asm        mov    eax, y;
	__asm        mov    dpt.y, eax;
	__asm        mov    dpt.info, 0;
// LINE 81:
	__asm        lea    eax, transformed.x;
	__asm        push   eax;
	__asm        mov    eax, dpt.info;
	__asm        push   eax;
	__asm        mov    eax, dpt.y;
	__asm        push   eax;
	__asm        mov    eax, dpt.z;
	__asm        push   eax;
	__asm        mov    eax, dpt.x;
	__asm        push   eax;
	__asm        fld    psi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    psi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    phi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    phi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        call   XYIncrementCartesian;
	__asm        add    esp, 0x24;
// LINE 82:
	__asm        mov    eax, xres;
	__asm        mov    ecx, transformed.x;
	__asm        mov    [eax], ecx;
// LINE 83:
	__asm        mov    eax, zres;
	__asm        mov    ecx, transformed.z;
	__asm        mov    [eax], ecx;
// LINE 84:
	__asm        mov    eax, yres;
	__asm        mov    ecx, transformed.y;
	__asm        mov    [eax], ecx;
// LINE 85:
	__asm        jmp    near ptr 0x005628E6;
}

// FUNCTION: COPTER_D 0x005628eb
void XYIncrementCartesian(float sinXangle, float cosXangle, float sinYangle, float cosYangle, struct DXZY dpt, struct DXZY* transformed) {
// LINE 94:
	__asm        fld    dpt.x;
	__asm        fmul   cosYangle;
	__asm        fld    dpt.y;
	__asm        fmul   sinYangle;
	__asm        fsubp;
	__asm        mov    eax, transformed;
	__asm        fstp   dword ptr [eax];
// LINE 95:
	__asm        fld    dpt.x;
	__asm        fmul   sinYangle;
	__asm        fld    dpt.y;
	__asm        fmul   cosYangle;
	__asm        faddp;
	__asm        mov    eax, transformed;
	__asm        fstp   dword ptr [eax+8];
// LINE 97:
	__asm        fld    dpt.z;
	__asm        fmul   cosXangle;
	__asm        mov    eax, transformed;
	__asm        fld    dword ptr [eax+8];
	__asm        fmul   sinXangle;
	__asm        faddp;
	__asm        mov    eax, transformed;
	__asm        fstp   dword ptr [eax+4];
// LINE 98:
	__asm        mov    eax, transformed;
	__asm        fld    dword ptr [eax+8];
	__asm        fmul   cosXangle;
	__asm        fld    dpt.z;
	__asm        fmul   sinXangle;
	__asm        fsubp;
	__asm        mov    eax, transformed;
	__asm        fstp   dword ptr [eax+8];
// LINE 99:
	__asm        jmp    near ptr 0x0056294B;
}

// FUNCTION: COPTER_D 0x00562950
void TransformToAxes(struct DXZY* xAxis, struct DXZY* zAxis, struct DXZY* yAxis, struct DXZY prist, struct DXZY* real) {
// LINE 103:
	__asm        mov    eax, real;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, real;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, real;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 104:
	__asm        mov    eax, xAxis;
	__asm        fld    dword ptr [eax];
	__asm        fmul   prist.x;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax];
// LINE 105:
	__asm        mov    eax, xAxis;
	__asm        fld    dword ptr [eax+4];
	__asm        fmul   prist.x;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+4];
// LINE 106:
	__asm        mov    eax, xAxis;
	__asm        fld    dword ptr [eax+8];
	__asm        fmul   prist.x;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+8];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+8];
// LINE 108:
	__asm        mov    eax, zAxis;
	__asm        fld    dword ptr [eax];
	__asm        fmul   prist.z;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax];
// LINE 109:
	__asm        mov    eax, zAxis;
	__asm        fld    dword ptr [eax+4];
	__asm        fmul   prist.z;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+4];
// LINE 110:
	__asm        mov    eax, zAxis;
	__asm        fld    dword ptr [eax+8];
	__asm        fmul   prist.z;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+8];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+8];
// LINE 112:
	__asm        mov    eax, yAxis;
	__asm        fld    dword ptr [eax];
	__asm        fmul   prist.y;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax];
// LINE 113:
	__asm        mov    eax, yAxis;
	__asm        fld    dword ptr [eax+4];
	__asm        fmul   prist.y;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+4];
// LINE 114:
	__asm        mov    eax, yAxis;
	__asm        fld    dword ptr [eax+8];
	__asm        fmul   prist.y;
	__asm        mov    eax, real;
	__asm        fadd   dword ptr [eax+8];
	__asm        mov    eax, real;
	__asm        fstp   dword ptr [eax+8];
// LINE 115:
	__asm        jmp    near ptr 0x00562A2C;
}

// FUNCTION: COPTER_D 0x00562a31
void AxisTransformToScreen(struct DXZY* xAxis, struct DXZY* zAxis, struct DXZY* yAxis, struct DXZY* centeroffset, struct DXZY* dxzy) {
	struct DXZY tf;

// LINE 121:
	__asm        lea    eax, tf.x;
	__asm        push   eax;
	__asm        mov    eax, dxzy;
	__asm        mov    ecx, [eax+0xC];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, yAxis;
	__asm        push   eax;
	__asm        mov    eax, zAxis;
	__asm        push   eax;
	__asm        mov    eax, xAxis;
	__asm        push   eax;
	__asm        call   TransformToAxes;
	__asm        add    esp, 0x20;
// LINE 122:
	__asm        cmp    centeroffset, 0;
	__asm        je     _T60;
// LINE 123:
	__asm        mov    eax, centeroffset;
	__asm        fld    dword ptr [eax];
	__asm        fadd   tf.x;
	__asm        fstp   tf.x;
// LINE 124:
	__asm        mov    eax, centeroffset;
	__asm        fld    dword ptr [eax+4];
	__asm        fadd   tf.z;
	__asm        fstp   tf.z;
// LINE 125:
	__asm        mov    eax, centeroffset;
	__asm        fld    dword ptr [eax+8];
	__asm        fadd   tf.y;
	__asm        fstp   tf.y;
// LINE 127:
_T60:
	__asm        push   0;
	__asm        lea    eax, tf.x;
	__asm        push   eax;
	__asm        call   PutInPerspective;
	__asm        add    esp, 8;
// LINE 128:
	__asm        lea    eax, tf.x;
	__asm        mov    ecx, dxzy;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 129:
	__asm        jmp    near ptr 0x00562AC0;
}

// FUNCTION: COPTER_D 0x00562ac5
void XYTransformToScreen(float sinXangle, float cosXangle, float sinYangle, float cosYangle, float scale, struct DXZY dpt, short * ptH, short * ptV, short * ptDepth, unsigned short perspective) {
	struct DXZY transformed;

// LINE 134:
	__asm        lea    eax, transformed.x;
	__asm        push   eax;
	__asm        mov    eax, dpt.info;
	__asm        push   eax;
	__asm        mov    eax, dpt.y;
	__asm        push   eax;
	__asm        mov    eax, dpt.z;
	__asm        push   eax;
	__asm        mov    eax, dpt.x;
	__asm        push   eax;
	__asm        mov    eax, cosYangle;
	__asm        push   eax;
	__asm        mov    eax, sinYangle;
	__asm        push   eax;
	__asm        mov    eax, cosXangle;
	__asm        push   eax;
	__asm        mov    eax, sinXangle;
	__asm        push   eax;
	__asm        call   XYIncrementCartesian;
	__asm        add    esp, 0x24;
// LINE 136:
	__asm        fld    transformed.x;
	__asm        fmul   scale;
	__asm        fstp   transformed.x;
// LINE 137:
	__asm        fld    transformed.y;
	__asm        fmul   scale;
	__asm        fstp   transformed.y;
// LINE 138:
	__asm        fld    transformed.z;
	__asm        fmul   scale;
	__asm        fstp   transformed.z;
// LINE 140:
	__asm        test   reinterpret_cast<uint32_t>(perspective), 0xFFFF;
	__asm        je     _T6b;
// LINE 141:
	__asm        push   0;
	__asm        lea    eax, transformed.x;
	__asm        push   eax;
	__asm        call   PutInPerspective;
	__asm        add    esp, 8;
// LINE 143:
_T6b:
	__asm        cmp    ptH, 0;
	__asm        je     _T83;

	__asm        fld    transformed.x;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptH;
	__asm        mov    [ecx], ax;
// LINE 144:
_T83:
	__asm        cmp    ptV, 0;
	__asm        je     _T9b;

	__asm        fld    transformed.z;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptV;
	__asm        mov    [ecx], ax;
// LINE 145:
_T9b:
	__asm        cmp    ptDepth, 0;
	__asm        je     _Tb3;

	__asm        fld    transformed.y;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptDepth;
	__asm        mov    [ecx], ax;
// LINE 146:
_Tb3:
	__asm        jmp    near ptr 0x00562B7D;
}

// FUNCTION: COPTER_D 0x00562b82
void IncrementXY(struct Polar* inc, struct Polar* partPolar) {
// LINE 152:
	__asm        push   0x8C085;
	__asm        push   0x5BED14;
	__asm        push   0x98;
	__asm        push   0x5BED3C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 153:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax];
	__asm        mov    eax, inc;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax];
// LINE 154:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        mov    eax, inc;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax+4];
// LINE 155:
	__asm        mov    eax, partPolar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 156:
	__asm        jmp    near ptr 0x00562BD6;
}

// FUNCTION: COPTER_D 0x00562bdb
void Keep0to2pi(float * radians) {
// LINE 160:
_T06:
	__asm        mov    eax, radians;
	__asm        fld    dword ptr [eax];
	__asm        fcomp  qword ptr ds:[0x593758];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        jne    _T31;
// LINE 161:
	__asm        mov    eax, radians;
	__asm        fld    dword ptr [eax];
	__asm        fsub   dword ptr ds:[0x593760];
	__asm        mov    eax, radians;
	__asm        fstp   dword ptr [eax];
	__asm        jmp    _T06;
// LINE 162:
_T31:
	__asm        mov    eax, radians;
	__asm        fld    dword ptr [eax];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T5c;
// LINE 163:
	__asm        mov    eax, radians;
	__asm        fld    dword ptr [eax];
	__asm        fadd   dword ptr ds:[0x593760];
	__asm        mov    eax, radians;
	__asm        fstp   dword ptr [eax];
	__asm        jmp    _T31;
// LINE 164:
_T5c:
	__asm        jmp    near ptr 0x00562C3C;
}

// FUNCTION: COPTER_D 0x00562c41
void Keep0to2pi(struct Polar* polar) {
// LINE 168:
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 169:
	__asm        mov    eax, polar;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 170:
	__asm        mov    eax, polar;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 171:
	__asm        jmp    near ptr 0x00562C76;
}

// FUNCTION: COPTER_D 0x00562c7b
float Keep0to2pi(float radians) {
// LINE 175:
	__asm        lea    eax, radians;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 176:
	__asm        fld    radians;
	__asm        jmp    near ptr 0x00562C95;
// LINE 177:
}

// FUNCTION: COPTER_D 0x00562c9a
void IncrementFloat(struct Polar inc, struct Polar* partPolar) {
// LINE 181:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax];
	__asm        fadd   inc.phi;
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax];
// LINE 182:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        fadd   inc.psi;
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax+4];
// LINE 183:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax+8];
	__asm        fadd   inc.tau;
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax+8];
// LINE 184:
	__asm        mov    eax, partPolar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 185:
	__asm        jmp    near ptr 0x00562CDC;
}

// FUNCTION: COPTER_D 0x00562ce1
float my_acos(float x, float rad) {
	float res;

// LINE 190:
	__asm        fld    rad;
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        jne    _T28;

	__asm        mov    eax, rad;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T30;
_T28:
	__asm        fld    rad;
	__asm        fchs;
	__asm        fstp   dword ptr [ebp-8];
_T30:
	__asm        fld    dword ptr [ebp-8];
	__asm        fcomp  qword ptr ds:[0x593768];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _Ta7;
// LINE 192:
	__asm        fld    x;
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        jne    _T63;

	__asm        mov    eax, x;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T6b;
_T63:
	__asm        fld    x;
	__asm        fchs;
	__asm        fstp   dword ptr [ebp-0xC];
_T6b:
	__asm        fld    dword ptr [ebp-0xC];
	__asm        fcomp  qword ptr ds:[0x593770];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        jne    _T9b;
// LINE 193:
	__asm        push   0x8C085;
	__asm        push   0x5BED5C;
	__asm        push   0xC1;
	__asm        push   0x5BED78;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 195:
_T9b:
	__asm        mov    res, 0;
// LINE 197:
	__asm        jmp    _T104;
_Ta7:
	__asm        fld    x;
	__asm        fdiv   rad;
	__asm        fcomp  qword ptr ds:[0x593778];
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        jne    _Tca;
// LINE 198:
	__asm        mov    res, 0;
// LINE 199:
	__asm        jmp    _T104;
_Tca:
	__asm        fld    x;
	__asm        fdiv   rad;
	__asm        fcomp  qword ptr ds:[0x593780];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _Ted;
// LINE 200:
	__asm        mov    res, 0x40490FDB;
// LINE 201:
	__asm        jmp    _T104;
// LINE 202:
_Ted:
	__asm        fld    x;
	__asm        fdiv   rad;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x005757CA;
	__asm        add    esp, 8;
	__asm        fstp   res;
// LINE 203:
_T104:
	__asm        fld    res;
	__asm        jmp    near ptr 0x00562DED;
// LINE 204:
}

// FUNCTION: COPTER_D 0x00562df2
void NormalizeTo1(struct DXZY* vec) {
// LINE 209:
	__asm        jmp    near ptr 0x00562DFD;
}

// FUNCTION: COPTER_D 0x00562e02
double GetLength(float x, float z, float y) {
	double rad;

// LINE 214:
	__asm        fld    x;
	__asm        fmul   x;
	__asm        fld    z;
	__asm        fmul   z;
	__asm        faddp;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fst    rad;
// LINE 215:
	__asm        fmul   rad;
	__asm        fld    y;
	__asm        fmul   y;
	__asm        faddp;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fst    rad;
// LINE 216:
	__asm        jmp    near ptr 0x00562E4B;
// LINE 217:
}

// FUNCTION: COPTER_D 0x00562e50
void DrawDirectionDisk(struct Rect* rect, short latint, short lngint, short latincs, short lngincs, unsigned short polarAngles, struct Point* ctr, short length) {
	float junk;
	float phi;
	float psi;

// LINE 226:
	__asm        lea    eax, junk;
	__asm        push   eax;
	__asm        lea    eax, psi;
	__asm        push   eax;
	__asm        lea    eax, phi;
	__asm        push   eax;
	__asm        push   0xA;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngincs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latincs);
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngint);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latint);
	__asm        push   eax;
	__asm        call   PolarIncs2Double;
	__asm        add    esp, 0x24;
// LINE 227:
	__asm        mov    eax, reinterpret_cast<uint32_t>(length);
	__asm        push   eax;
	__asm        mov    eax, ctr;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(polarAngles);
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, rect;
	__asm        push   eax;
	__asm        call   DrawDirectionDisk;
	__asm        add    esp, 0x18;
// LINE 228:
	__asm        jmp    near ptr 0x00562EA6;
}

// FUNCTION: COPTER_D 0x00562eab
void DrawDirectionDisk(struct Rect* rect, float phi, float psi, unsigned short polarAngles, struct Point* ctr, short length) {
	float xdist;
	float zdist;
	float rad;
	struct Point centerPt;
	float ydist;

// LINE 236:
	__asm        lea    eax, phi;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 237:
	__asm        lea    eax, psi;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 239:
	__asm        cmp    ctr, 0;
	__asm        je     _T110;
// LINE 240:
	__asm        movsx  eax, length;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T54;

	__asm        push   0x8C085;
	__asm        push   0x5BED98;
	__asm        push   0xF0;
	__asm        push   0x5BEDBC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 241:
_T54:
	__asm        cmp    rect, 0;
	__asm        je     _T7a;

	__asm        push   0x8C085;
	__asm        push   0x5BEDDC;
	__asm        push   0xF1;
	__asm        push   0x5BEDFC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 242:
_T7a:
	__asm        movsx  eax, length;
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        fstp   rad;
// LINE 243:
	__asm        test   reinterpret_cast<uint32_t>(polarAngles), 0xFFFF;
	__asm        je     _Tb9;
// LINE 244:
	__asm        lea    eax, ydist;
	__asm        push   eax;
	__asm        lea    eax, zdist;
	__asm        push   eax;
	__asm        lea    eax, xdist;
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 245:
	__asm        jmp    _Td9;
// LINE 246:
_Tb9:
	__asm        lea    eax, ydist;
	__asm        push   eax;
	__asm        lea    eax, zdist;
	__asm        push   eax;
	__asm        lea    eax, xdist;
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        call   XY2Cartesian;
	__asm        add    esp, 0x18;
// LINE 247:
_Td9:
	__asm        mov    eax, ctr;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(centerPt.v), eax;
// LINE 248:
	__asm        movsx  ebx, centerPt.h;
	__asm        fld    xdist;
	__asm        call   0x0056EBE8;
	__asm        movsx  eax, ax;
	__asm        add    ebx, eax;
	__asm        mov    centerPt.h, bx;
// LINE 249:
	__asm        fld    zdist;
	__asm        call   0x0056EBE8;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, centerPt.v;
	__asm        add    eax, ecx;
	__asm        mov    centerPt.v, ax;
// LINE 251:
	__asm        jmp    _T1f6;
// LINE 252:
// Block start:
	struct Rect myRect;
	short origwidth;
_T110:
	__asm        mov    eax, rect;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    reinterpret_cast<uint32_t>(myRect.top), ecx;
	__asm        mov    reinterpret_cast<uint32_t>(myRect.bottom), eax;
// LINE 253:
	__asm        movsx  eax, myRect.right;
	__asm        movsx  ecx, myRect.left;
	__asm        sub    eax, ecx;
	__asm        mov    origwidth, ax;
// LINE 254:
	__asm        lea    eax, myRect.top;
	__asm        push   eax;
	__asm        call   EraseRect;
	__asm        add    esp, 4;
// LINE 255:
	__asm        mov    ecx, 6;
	__asm        movsx  eax, origwidth;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        push   eax;
	__asm        mov    ecx, 6;
	__asm        movsx  eax, origwidth;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        push   eax;
	__asm        lea    eax, myRect.top;
	__asm        push   eax;
	__asm        call   InsetRect;
	__asm        add    esp, 0xC;
// LINE 256:
	__asm        movsx  eax, myRect.right;
	__asm        movsx  ecx, myRect.top;
	__asm        add    eax, ecx;
	__asm        movsx  ecx, myRect.left;
	__asm        sub    eax, ecx;
	__asm        mov    myRect.bottom, ax;
// LINE 257:
	__asm        lea    eax, myRect.top;
	__asm        push   eax;
	__asm        call   center;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    reinterpret_cast<uint32_t>(centerPt.v), eax;
// LINE 258:
	__asm        movsx  eax, myRect.right;
	__asm        mov    [ebp-0x2C], eax;
	__asm        fild   dword ptr [ebp-0x2C];
	__asm        movsx  eax, myRect.left;
	__asm        mov    [ebp-0x30], eax;
	__asm        fisub  dword ptr [ebp-0x30];
	__asm        fdiv   dword ptr ds:[0x59378C];
	__asm        fstp   rad;
// LINE 259:
	__asm        test   reinterpret_cast<uint32_t>(polarAngles), 0xFFFF;
	__asm        je     _T1d6;
// LINE 260:
	__asm        lea    eax, ydist;
	__asm        push   eax;
	__asm        lea    eax, zdist;
	__asm        push   eax;
	__asm        lea    eax, xdist;
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 261:
	__asm        jmp    _T1f6;
// LINE 262:
_T1d6:
	__asm        lea    eax, ydist;
	__asm        push   eax;
	__asm        lea    eax, zdist;
	__asm        push   eax;
	__asm        lea    eax, xdist;
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        call   XY2Cartesian;
	__asm        add    esp, 0x18;
// LINE 264:
// Block end:
_T1f6:
	__asm        cmp    ctr, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        mov    eax, ydist;
	__asm        push   eax;
	__asm        mov    eax, zdist;
	__asm        push   eax;
	__asm        mov    eax, xdist;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(centerPt.v);
	__asm        push   eax;
	__asm        call   DrawDirectionDisk;
	__asm        add    esp, 0x18;
// LINE 265:
	__asm        jmp    near ptr 0x005630CB;
}

// FUNCTION: COPTER_D 0x005630d0
void DrawDirectionDisk(struct Point centerPt, struct DXZY unitvector, float rad) {
// LINE 269:
	__asm        push   0;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        fld    unitvector.y;
	__asm        fmul   rad;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    unitvector.z;
	__asm        fmul   rad;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    unitvector.x;
	__asm        fmul   rad;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        mov    eax, reinterpret_cast<uint32_t>(centerPt.v);
	__asm        push   eax;
	__asm        call   DrawDirectionDisk;
	__asm        add    esp, 0x18;
// LINE 270:
	__asm        jmp    near ptr 0x00563111;
}

// FUNCTION: COPTER_D 0x00563116
void DrawDirectionDisk(struct DXZY start, struct DXZY end) {
	float xdist;
	float zdist;
	float rad;
	struct Point startpt;
	float ydist;

// LINE 274:
	__asm        fld    start.z;
	__asm        call   0x0056EBE8;
	__asm        mov    startpt.v, ax;
	__asm        fld    start.x;
	__asm        call   0x0056EBE8;
	__asm        mov    startpt.h, ax;
// LINE 275:
	__asm        fld    end.x;
	__asm        fsub   start.x;
	__asm        fstp   xdist;
	__asm        fld    end.z;
	__asm        fsub   start.z;
	__asm        fstp   zdist;
	__asm        fld    end.y;
	__asm        fsub   start.y;
	__asm        fstp   ydist;
// LINE 276:
	__asm        fld    zdist;
	__asm        fmul   zdist;
	__asm        fld    xdist;
	__asm        fmul   xdist;
	__asm        faddp;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fstp   rad;
// LINE 277:
	__asm        fld    ydist;
	__asm        fmul   ydist;
	__asm        fld    rad;
	__asm        fmul   rad;
	__asm        faddp;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fstp   rad;
// LINE 278:
	__asm        push   0;
	__asm        mov    eax, rad;
	__asm        push   eax;
	__asm        fld    end.y;
	__asm        fsub   start.y;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    end.z;
	__asm        fsub   start.z;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        fld    end.x;
	__asm        fsub   start.x;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        mov    eax, reinterpret_cast<uint32_t>(startpt.v);
	__asm        push   eax;
	__asm        call   DrawDirectionDisk;
	__asm        add    esp, 0x18;
// LINE 279:
	__asm        jmp    near ptr 0x005631CB;
}

// FUNCTION: COPTER_D 0x005631d0
void DrawDirectionDisk(struct Point centerPt, float hdist, float vdist, float depth, float rad, unsigned short bigol) {
// LINE 355:
	__asm        jmp    near ptr 0x005631DB;
}

// FUNCTION: COPTER_D 0x005631e0
void Score(struct Point centerPt, struct Point leftOff, struct Point rightOff) {
// LINE 370:
	__asm        jmp    near ptr 0x005631EB;
}

// FUNCTION: COPTER_D 0x005631f0
unsigned short DrawGrid(float phiOff, float psiOff, short cntrh, short cntrv, unsigned short persp, float scale, short thickness, unsigned long edgecolor, unsigned long hatchcolor, enum UseDrawGrid how, short pth, short ptv, short ptdepth) {
// LINE 498:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005631FF;
// LINE 499:
}

// FUNCTION: COPTER_D 0x00563204
void GetChildIncrement(struct Polar* passedInc, struct Polar* parentPolar, struct Polar* partPolar) {
	struct Polar* amountToInc;
	struct Polar incFromParent;
	float phiComp;
	float tauComp;
	float psiComp;

// LINE 509:
	__asm        lea    edi, incFromParent.phi;
	__asm        mov    esi, passedInc;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 510:
	__asm        mov    eax, passedInc;
	__asm        mov    amountToInc, eax;
// LINE 511:
	__asm        cmp    parentPolar, 0;
	__asm        je     _Tb9;
// LINE 513:
// Block start:
	struct Polar resPolar;
	struct Polar startPolar;
	__asm        lea    edi, startPolar.phi;
	__asm        mov    esi, partPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
	__asm        lea    edi, resPolar.phi;
	__asm        mov    esi, partPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 515:
	__asm        lea    eax, resPolar.phi;
	__asm        push   eax;
	__asm        mov    eax, parentPolar;
	__asm        push   eax;
	__asm        mov    eax, passedInc;
	__asm        push   eax;
	__asm        call   IncrementPhiPsi;
	__asm        add    esp, 0xC;
// LINE 516:
	__asm        fld    resPolar.phi;
	__asm        fsub   startPolar.phi;
	__asm        mov    eax, amountToInc;
	__asm        fstp   dword ptr [eax];
// LINE 517:
	__asm        fld    resPolar.psi;
	__asm        fsub   startPolar.psi;
	__asm        mov    eax, amountToInc;
	__asm        fstp   dword ptr [eax+4];
// LINE 520:
	__asm        lea    esi, resPolar.phi;
	__asm        lea    edi, startPolar.phi;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 521:
	__asm        lea    eax, resPolar.phi;
	__asm        push   eax;
	__asm        mov    eax, parentPolar;
	__asm        push   eax;
	__asm        mov    eax, passedInc;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   IncrementTorque;
	__asm        add    esp, 0xC;
// LINE 522:
	__asm        fld    resPolar.phi;
	__asm        fsub   startPolar.phi;
	__asm        mov    eax, amountToInc;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, amountToInc;
	__asm        fstp   dword ptr [eax];
// LINE 523:
	__asm        fld    resPolar.psi;
	__asm        fsub   startPolar.psi;
	__asm        mov    eax, amountToInc;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, amountToInc;
	__asm        fstp   dword ptr [eax+4];
// LINE 525:
// Block end:
	__asm        jmp    _Tb9;
// LINE 534:
_Tb9:
	__asm        cmp    parentPolar, 0;
	__asm        je     _T1df;
// LINE 538:
// Block start:
	float angleToPhiMovement;
	struct Polar partPol;
	float alpha;
	float angleToPsiMovement;
	struct Polar tmpinc;
	__asm        lea    edi, partPol.phi;
	__asm        mov    esi, partPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 540:
	__asm        mov    tmpinc.trq, 0;
	__asm        mov    ax, tmpinc.trq;
	__asm        mov    tmpinc.lat, ax;
	__asm        mov    ax, tmpinc.lat;
	__asm        mov    tmpinc.lng, ax;
	__asm        movsx  eax, tmpinc.lng;
	__asm        mov    [ebp-0x98], eax;
	__asm        fild   dword ptr [ebp-0x98];
	__asm        fstp   tmpinc.tau;
	__asm        mov    eax, tmpinc.tau;
	__asm        mov    tmpinc.psi, eax;
	__asm        mov    eax, tmpinc.psi;
	__asm        mov    tmpinc.phi, eax;
// LINE 541:
	__asm        mov    eax, parentPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        fchs;
	__asm        fstp   tmpinc.psi;
// LINE 542:
	__asm        mov    eax, parentPolar;
	__asm        fld    dword ptr [eax];
	__asm        fchs;
	__asm        fstp   tmpinc.phi;
// LINE 543:
	__asm        lea    eax, partPol.phi;
	__asm        push   eax;
	__asm        mov    eax, parentPolar;
	__asm        push   eax;
	__asm        lea    eax, tmpinc.phi;
	__asm        push   eax;
	__asm        call   IncrementPhiPsi;
	__asm        add    esp, 0xC;
// LINE 544:
	__asm        mov    eax, partPol.psi;
	__asm        mov    angleToPhiMovement, eax;
// LINE 545:
	__asm        fld    angleToPhiMovement;
	__asm        fsub   dword ptr ds:[0x593790];
	__asm        fstp   angleToPsiMovement;
// LINE 548:
	__asm        mov    eax, partPol.phi;
	__asm        mov    alpha, eax;
// LINE 550:
	__asm        fld    angleToPhiMovement;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   qword ptr [ebp-0xA0];
	__asm        fld    alpha;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fmul   qword ptr [ebp-0xA0];
	__asm        fmul   incFromParent.phi;
	__asm        fstp   phiComp;
// LINE 551:
	__asm        fld    alpha;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   qword ptr [ebp-0xA8];
	__asm        fld    angleToPsiMovement;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fmul   qword ptr [ebp-0xA8];
	__asm        fmul   incFromParent.psi;
	__asm        fstp   psiComp;
// LINE 552:
	__asm        fld    alpha;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fmul   incFromParent.tau;
	__asm        fstp   tauComp;
// LINE 554:
// Block end:
	__asm        jmp    _T203;
// LINE 556:
_T1df:
	__asm        mov    phiComp, 0;
// LINE 557:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fstp   psiComp;
// LINE 558:
	__asm        mov    tauComp, 0;
// LINE 564:
_T203:
	__asm        fld    tauComp;
	__asm        fadd   psiComp;
	__asm        fadd   phiComp;
	__asm        mov    eax, amountToInc;
	__asm        fstp   dword ptr [eax+8];
// LINE 565:
	__asm        jmp    near ptr 0x0056341B;
}

// FUNCTION: COPTER_D 0x00563420
void IncrementAngles(float incPhi, float incPsi, float pivotPhi, float pivotPsi, float * phi, float * psi, unsigned short polarAngles) {
	struct Polar pivot;
	struct Polar polar;
	struct Polar inc;

// LINE 570:
	__asm        mov    eax, phi;
	__asm        mov    eax, [eax];
	__asm        mov    polar.phi, eax;
	__asm        mov    eax, psi;
	__asm        mov    eax, [eax];
	__asm        mov    polar.psi, eax;
	__asm        mov    polar.tau, 0;
// LINE 571:
	__asm        mov    eax, incPhi;
	__asm        mov    inc.phi, eax;
	__asm        mov    eax, incPsi;
	__asm        mov    inc.psi, eax;
	__asm        mov    inc.tau, 0;
// LINE 572:
	__asm        mov    eax, pivotPhi;
	__asm        mov    pivot.phi, eax;
	__asm        mov    eax, pivotPsi;
	__asm        mov    pivot.psi, eax;
	__asm        mov    pivot.tau, 0;
// LINE 573:
	__asm        mov    polar.trq, 0;
	__asm        mov    ax, polar.trq;
	__asm        mov    polar.lng, ax;
	__asm        mov    ax, polar.lng;
	__asm        mov    polar.lat, ax;
	__asm        mov    ax, polar.lat;
	__asm        mov    pivot.trq, ax;
	__asm        mov    ax, pivot.trq;
	__asm        mov    pivot.lng, ax;
	__asm        mov    ax, pivot.lng;
	__asm        mov    pivot.lat, ax;
	__asm        mov    ax, pivot.lat;
	__asm        mov    inc.trq, ax;
	__asm        mov    ax, inc.trq;
	__asm        mov    inc.lng, ax;
	__asm        mov    ax, inc.lng;
	__asm        mov    inc.lat, ax;
// LINE 575:
	__asm        test   reinterpret_cast<uint32_t>(polarAngles), 0xFFFF;
	__asm        je     _Tb2;
// LINE 576:
	__asm        lea    eax, polar.phi;
	__asm        push   eax;
	__asm        lea    eax, pivot.phi;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementPhiPsi;
	__asm        add    esp, 0xC;
// LINE 577:
	__asm        jmp    _Tc2;
// LINE 578:
_Tb2:
	__asm        lea    eax, polar.phi;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementXY;
	__asm        add    esp, 8;
// LINE 579:
_Tc2:
	__asm        mov    eax, phi;
	__asm        mov    ecx, polar.phi;
	__asm        mov    [eax], ecx;
	__asm        mov    eax, psi;
	__asm        mov    ecx, polar.psi;
	__asm        mov    [eax], ecx;
// LINE 580:
	__asm        jmp    near ptr 0x005634F7;
}

// FUNCTION: COPTER_D 0x005634fc
void IncrementPhiPsi(struct Polar* inc, struct Polar* parentPolar, struct Polar* partPolar) {
// LINE 584:
	__asm        mov    eax, inc;
	__asm        movsx  eax, word ptr [eax+0x12];
	__asm        test   eax, eax;
	__asm        je     _T4a;

	__asm        mov    eax, inc;
	__asm        fld    dword ptr [eax];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _T4a;

	__asm        push   0x8C085;
	__asm        push   0x5BEE1C;
	__asm        push   0x248;
	__asm        push   0x5BEE44;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 585:
_T4a:
	__asm        mov    eax, inc;
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        je     _T8c;

	__asm        mov    eax, inc;
	__asm        fld    dword ptr [eax+4];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _T8c;

	__asm        push   0x8C085;
	__asm        push   0x5BEE64;
	__asm        push   0x249;
	__asm        push   0x5BEE8C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 586:
_T8c:
	__asm        mov    eax, inc;
	__asm        movsx  eax, word ptr [eax+0x14];
	__asm        test   eax, eax;
	__asm        je     _Tce;

	__asm        mov    eax, inc;
	__asm        fld    dword ptr [eax+8];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _Tce;

	__asm        push   0x8C085;
	__asm        push   0x5BEEAC;
	__asm        push   0x24A;
	__asm        push   0x5BEED4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 588:
_Tce:
	__asm        cmp    parentPolar, 0;
	__asm        jne    _Tec;
// LINE 589:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax];
	__asm        mov    eax, inc;
	__asm        fadd   dword ptr [eax];
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax];
// LINE 590:
	__asm        jmp    _T1b1;
// LINE 593:
// Block start:
	float y2;
	struct Polar tmpPolar;
	float z;
	float y;
	float x2;
	struct Polar resPolar;
	float x;
	struct Polar tmpPolar2;
	float tmprad2;
	float psiToZero;
	float tmprad;
	float z2;
_Tec:
	__asm        lea    edi, tmpPolar.phi;
	__asm        mov    esi, partPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 595:
	__asm        mov    eax, parentPolar;
	__asm        mov    eax, [eax+4];
	__asm        mov    psiToZero, eax;
// LINE 596:
	__asm        fld    tmpPolar.psi;
	__asm        fsub   psiToZero;
	__asm        fstp   tmpPolar.psi;
// LINE 600:
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, z;
	__asm        push   eax;
	__asm        lea    eax, x;
	__asm        push   eax;
	__asm        mov    eax, tmpPolar.psi;
	__asm        push   eax;
	__asm        mov    eax, tmpPolar.phi;
	__asm        push   eax;
	__asm        push   0x41200000;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 603:
	__asm        lea    eax, tmprad;
	__asm        push   eax;
	__asm        lea    eax, tmpPolar2.psi;
	__asm        push   eax;
	__asm        lea    eax, tmpPolar2.phi;
	__asm        push   eax;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   Cartesian2Polar;
	__asm        add    esp, 0x18;
// LINE 605:
	__asm        fld    tmpPolar2.psi;
	__asm        mov    eax, inc;
	__asm        fsub   dword ptr [eax];
	__asm        fstp   tmpPolar2.psi;
// LINE 607:
	__asm        lea    eax, y2;
	__asm        push   eax;
	__asm        lea    eax, z2;
	__asm        push   eax;
	__asm        lea    eax, x2;
	__asm        push   eax;
	__asm        mov    eax, tmpPolar2.psi;
	__asm        push   eax;
	__asm        mov    eax, tmpPolar2.phi;
	__asm        push   eax;
	__asm        mov    eax, tmprad;
	__asm        push   eax;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 610:
	__asm        lea    eax, tmprad2;
	__asm        push   eax;
	__asm        lea    eax, resPolar.psi;
	__asm        push   eax;
	__asm        lea    eax, resPolar.phi;
	__asm        push   eax;
	__asm        mov    eax, z2;
	__asm        push   eax;
	__asm        mov    eax, y2;
	__asm        push   eax;
	__asm        mov    eax, x2;
	__asm        push   eax;
	__asm        call   Cartesian2Polar;
	__asm        add    esp, 0x18;
// LINE 612:
	__asm        fld    resPolar.psi;
	__asm        fadd   psiToZero;
	__asm        fstp   resPolar.psi;
// LINE 613:
	__asm        mov    eax, partPolar;
	__asm        mov    ecx, resPolar.phi;
	__asm        mov    [eax], ecx;
// LINE 614:
	__asm        mov    eax, partPolar;
	__asm        mov    ecx, resPolar.psi;
	__asm        mov    [eax+4], ecx;
// LINE 616:
// Block end:
_T1b1:
	__asm        mov    eax, partPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        mov    eax, inc;
	__asm        fadd   dword ptr [eax+4];
	__asm        mov    eax, partPolar;
	__asm        fstp   dword ptr [eax+4];
// LINE 618:
	__asm        mov    eax, partPolar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 619:
	__asm        jmp    near ptr 0x005636D0;
}

// FUNCTION: COPTER_D 0x005636d5
void FillLatLngTrq(struct Polar* polar, short latincs, short lngIncs, short trqincs) {
// LINE 624:
	__asm        mov    eax, polar;
	__asm        movsx  eax, word ptr [eax+0x12];
	__asm        test   eax, eax;
	__asm        jne    _T61;

	__asm        mov    eax, polar;
	__asm        movsx  eax, word ptr [eax+0x10];
	__asm        test   eax, eax;
	__asm        jne    _T61;
// LINE 625:
	__asm        mov    eax, polar;
	__asm        add    eax, 0x14;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        add    eax, 0x12;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(trqincs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latincs);
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   PolarDouble2Incs;
	__asm        add    esp, 0x24;
// LINE 627:
_T61:
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 628:
	__asm        jmp    near ptr 0x00563747;
}

// FUNCTION: COPTER_D 0x0056374c
void FillPhiPsiTau(struct Polar* polar, short latincs, short lngIncs, short trqincs) {
// LINE 632:
	__asm        mov    eax, polar;
	__asm        fld    dword ptr [eax];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _T71;

	__asm        mov    eax, polar;
	__asm        fld    dword ptr [eax+4];
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _T71;
// LINE 633:
	__asm        mov    eax, polar;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(trqincs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latincs);
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    ax, [eax+0x14];
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    ax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    ax, [eax+0x12];
	__asm        push   eax;
	__asm        call   PolarIncs2Double;
	__asm        add    esp, 0x24;
// LINE 635:
_T71:
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 636:
	__asm        jmp    near ptr 0x005637CE;
}

// FUNCTION: COPTER_D 0x005637d3
void SnapToIncs(struct Polar* polar, short latIncs, short lngIncs, short trqIncs) {
// LINE 640:
	__asm        mov    eax, polar;
	__asm        mov    word ptr [eax+0x14], 0;
	__asm        mov    eax, polar;
	__asm        mov    ax, [eax+0x14];
	__asm        mov    ecx, polar;
	__asm        mov    [ecx+0x10], ax;
	__asm        mov    eax, polar;
	__asm        mov    ax, [eax+0x10];
	__asm        mov    ecx, polar;
	__asm        mov    [ecx+0x12], ax;
// LINE 641:
	__asm        mov    eax, reinterpret_cast<uint32_t>(trqIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latIncs);
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        call   FillLatLngTrq;
	__asm        add    esp, 0x10;
// LINE 642:
	__asm        mov    eax, polar;
	__asm        mov    dword ptr [eax+8], 0;
	__asm        mov    eax, polar;
	__asm        mov    ecx, polar;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, polar;
	__asm        mov    ecx, polar;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ecx], eax;
// LINE 643:
	__asm        mov    eax, reinterpret_cast<uint32_t>(trqIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(lngIncs);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(latIncs);
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        call   FillPhiPsiTau;
	__asm        add    esp, 0x10;
// LINE 644:
	__asm        jmp    near ptr 0x00563854;
}

// FUNCTION: COPTER_D 0x00563859
void PolarDouble2Incs(float phi, float psi, float tau, short latincs, short lngincs, short trqincs, short * lat, short * lng, short * trq) {
	float trqsPerRadian;
	float latsPerRadian;
	float dlng;
	float lngsPerRadian;
	float dtrq;
	float dlat;

// LINE 650:
	__asm        movsx  eax, latincs;
	__asm        mov    [ebp-0x20], eax;
	__asm        fild   dword ptr [ebp-0x20];
	__asm        fdiv   dword ptr ds:[0x593760];
	__asm        fstp   latsPerRadian;
// LINE 651:
	__asm        movsx  eax, lngincs;
	__asm        mov    [ebp-0x24], eax;
	__asm        fild   dword ptr [ebp-0x24];
	__asm        fdiv   dword ptr ds:[0x593760];
	__asm        fstp   lngsPerRadian;
// LINE 652:
	__asm        movsx  eax, trqincs;
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        fdiv   dword ptr ds:[0x593760];
	__asm        fstp   trqsPerRadian;
// LINE 655:
	__asm        lea    eax, phi;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 656:
	__asm        lea    eax, psi;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 657:
	__asm        lea    eax, tau;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 658:
	__asm        fld    phi;
	__asm        fmul   latsPerRadian;
	__asm        fstp   dlat;
// LINE 659:
	__asm        fld    psi;
	__asm        fmul   lngsPerRadian;
	__asm        fstp   dlng;
// LINE 660:
	__asm        fld    tau;
	__asm        fmul   trqsPerRadian;
	__asm        fstp   dtrq;
// LINE 662:
	__asm        mov    eax, dlat;
	__asm        push   eax;
	__asm        call   Round;
	__asm        add    esp, 4;
	__asm        mov    ecx, lat;
	__asm        mov    [ecx], ax;
// LINE 663:
	__asm        mov    eax, dlng;
	__asm        push   eax;
	__asm        call   Round;
	__asm        add    esp, 4;
	__asm        mov    ecx, lng;
	__asm        mov    [ecx], ax;
// LINE 664:
	__asm        mov    eax, dtrq;
	__asm        push   eax;
	__asm        call   Round;
	__asm        add    esp, 4;
	__asm        mov    ecx, trq;
	__asm        mov    [ecx], ax;
// LINE 665:
	__asm        mov    eax, lat;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, latincs;
	__asm        cmp    eax, ecx;
	__asm        jg     _T117;

	__asm        mov    eax, lng;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, lngincs;
	__asm        cmp    eax, ecx;
	__asm        jg     _T117;

	__asm        mov    eax, trq;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, trqincs;
	__asm        cmp    eax, ecx;
	__asm        jg     _T117;

	__asm        mov    eax, lat;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jl     _T117;

	__asm        mov    eax, lng;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jl     _T117;

	__asm        mov    eax, trq;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jge    _T121;
// LINE 666:
// Block start:
	short trouble;
_T117:
	__asm        mov    eax, trq;
	__asm        mov    ax, [eax];
	__asm        mov    trouble, ax;
// LINE 667:
// Block end:
_T121:
	__asm        mov    eax, lat;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, latincs;
	__asm        cmp    eax, ecx;
	__asm        jne    _T13b;

	__asm        mov    eax, lat;
	__asm        mov    word ptr [eax], 0;
// LINE 668:
_T13b:
	__asm        mov    eax, lng;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, lngincs;
	__asm        cmp    eax, ecx;
	__asm        jne    _T155;

	__asm        mov    eax, lng;
	__asm        mov    word ptr [eax], 0;
// LINE 669:
_T155:
	__asm        mov    eax, trq;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, trqincs;
	__asm        cmp    eax, ecx;
	__asm        jne    _T16f;

	__asm        mov    eax, trq;
	__asm        mov    word ptr [eax], 0;
// LINE 670:
_T16f:
	__asm        jmp    near ptr 0x005639CD;
}

// FUNCTION: COPTER_D 0x005639d2
void PolarIncs2Double(short lat, short lng, short trq, short latincs, short lngincs, short trqincs, float * phi, float * psi, float * tau) {
// LINE 674:
	__asm        movsx  eax, lat;
	__asm        mov    [ebp-4], eax;
	__asm        fild   dword ptr [ebp-4];
	__asm        fmul   qword ptr ds:[0x593758];
	__asm        movsx  eax, latincs;
	__asm        mov    [ebp-8], eax;
	__asm        fidiv  dword ptr [ebp-8];
	__asm        mov    eax, phi;
	__asm        fstp   dword ptr [eax];
// LINE 675:
	__asm        movsx  eax, lng;
	__asm        mov    [ebp-0xC], eax;
	__asm        fild   dword ptr [ebp-0xC];
	__asm        fmul   qword ptr ds:[0x593758];
	__asm        movsx  eax, lngincs;
	__asm        mov    [ebp-0x10], eax;
	__asm        fidiv  dword ptr [ebp-0x10];
	__asm        mov    eax, psi;
	__asm        fstp   dword ptr [eax];
// LINE 676:
	__asm        movsx  eax, trq;
	__asm        mov    [ebp-0x14], eax;
	__asm        fild   dword ptr [ebp-0x14];
	__asm        fmul   qword ptr ds:[0x593758];
	__asm        movsx  eax, trqincs;
	__asm        mov    [ebp-0x18], eax;
	__asm        fidiv  dword ptr [ebp-0x18];
	__asm        mov    eax, tau;
	__asm        fstp   dword ptr [eax];
// LINE 677:
	__asm        jmp    near ptr 0x00563A3D;
}

// FUNCTION: COPTER_D 0x00563a42
void Polar2Cartesian(float radius, float phi, float psi, float * x, float * z, float * y) {
	float debugwhatever;
	float debugphi;
	float debugrad;
	float debugpsi;

// LINE 686:
	__asm        mov    eax, phi;
	__asm        mov    debugphi, eax;
// LINE 687:
	__asm        mov    eax, psi;
	__asm        mov    debugpsi, eax;
// LINE 688:
	__asm        mov    eax, radius;
	__asm        mov    debugrad, eax;
// LINE 689:
	__asm        fld    debugrad;
	__asm        fadd   debugpsi;
	__asm        fadd   debugphi;
	__asm        fstp   debugwhatever;
// LINE 690:
	__asm        fld    phi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   qword ptr [ebp-0x18];
	__asm        fld    psi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fmul   qword ptr [ebp-0x18];
	__asm        fmul   radius;
	__asm        mov    eax, x;
	__asm        fstp   dword ptr [eax];
// LINE 691:
	__asm        fld    phi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F32A;
	__asm        add    esp, 8;
	__asm        fmul   radius;
	__asm        mov    eax, z;
	__asm        fstp   dword ptr [eax];
// LINE 692:
	__asm        fld    phi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fstp   qword ptr [ebp-0x20];
	__asm        fld    psi;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056F320;
	__asm        add    esp, 8;
	__asm        fmul   qword ptr [ebp-0x20];
	__asm        fmul   radius;
	__asm        mov    eax, y;
	__asm        fstp   dword ptr [eax];
// LINE 693:
	__asm        jmp    near ptr 0x00563AE7;
}

// FUNCTION: COPTER_D 0x00563aec
void Polar2Cartesian(float radius, struct Polar* polar, struct DXZY* dxzy) {
// LINE 697:
	__asm        mov    eax, dxzy;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, dxzy;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, dxzy;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 698:
	__asm        jmp    near ptr 0x00563B22;
}

// FUNCTION: COPTER_D 0x00563b27
void PolarTransformToScreen(float phiOff, float psiOff, float scale, struct DXZY* donttouch, struct DXZY* origin, short * ptH, short * ptV, short * ptDepth, unsigned short perspective) {
	struct DXZY dpt;
	float radius;
	float phi;
	float psi;

// LINE 703:
	__asm        mov    eax, donttouch;
	__asm        lea    ecx, dpt.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    edx, [eax+8];
	__asm        mov    [ecx+8], edx;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ecx+0xC], eax;
// LINE 705:
	__asm        lea    eax, radius;
	__asm        push   eax;
	__asm        lea    eax, psi;
	__asm        push   eax;
	__asm        lea    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, dpt.y;
	__asm        push   eax;
	__asm        mov    eax, dpt.z;
	__asm        push   eax;
	__asm        mov    eax, dpt.x;
	__asm        push   eax;
	__asm        call   Cartesian2Polar;
	__asm        add    esp, 0x18;
// LINE 706:
	__asm        push   1;
	__asm        lea    eax, psi;
	__asm        push   eax;
	__asm        lea    eax, phi;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, psiOff;
	__asm        push   eax;
	__asm        mov    eax, phiOff;
	__asm        push   eax;
	__asm        call   IncrementAngles;
	__asm        add    esp, 0x1C;
// LINE 707:
	__asm        fld    scale;
	__asm        fmul   radius;
	__asm        fstp   radius;
// LINE 708:
	__asm        lea    eax, dpt.y;
	__asm        push   eax;
	__asm        lea    eax, dpt.z;
	__asm        push   eax;
	__asm        lea    eax, dpt.x;
	__asm        push   eax;
	__asm        mov    eax, psi;
	__asm        push   eax;
	__asm        mov    eax, phi;
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   Polar2Cartesian;
	__asm        add    esp, 0x18;
// LINE 709:
	__asm        test   reinterpret_cast<uint32_t>(perspective), 0xFFFF;
	__asm        je     _Ta7;
// LINE 710:
	__asm        push   0;
	__asm        lea    eax, dpt.x;
	__asm        push   eax;
	__asm        call   PutInPerspective;
	__asm        add    esp, 8;
// LINE 711:
_Ta7:
	__asm        cmp    ptH, 0;
	__asm        je     _Tbf;
// LINE 712:
	__asm        fld    dpt.x;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptH;
	__asm        mov    [ecx], ax;
// LINE 713:
_Tbf:
	__asm        cmp    ptV, 0;
	__asm        je     _Td7;
// LINE 714:
	__asm        fld    dpt.z;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptV;
	__asm        mov    [ecx], ax;
// LINE 715:
_Td7:
	__asm        cmp    ptDepth, 0;
	__asm        je     _Tef;
// LINE 716:
	__asm        fld    dpt.y;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, ptDepth;
	__asm        mov    [ecx], ax;
// LINE 717:
_Tef:
	__asm        jmp    near ptr 0x00563C1B;
}

// FUNCTION: COPTER_D 0x00563c20
void Cartesian2Polar(float x, float z, float y, float * phi, float * psi, float * radius) {
	double rad;
	double projrad;

// LINE 741:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   GetLength;
	__asm        add    esp, 0xC;
	__asm        fstp   rad;
// LINE 745:
	__asm        jmp    near ptr 0x00563C45;

	__asm        jmp    near ptr 0x00563C4A;

	__asm        fld    rad;
	__asm        fabs;
	__asm        fld    z;
	__asm        fabs;
	__asm        fcompp;
	__asm        fnstsw ax;
	__asm        test   ah, 0x40;
	__asm        je     _T54;
// LINE 746:
	__asm        mov    reinterpret_cast<uint32_t>(projrad), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&projrad) + 4), 0;
// LINE 747:
	__asm        jmp    _T73;
// LINE 748:
_T54:
	__asm        fld    rad;
	__asm        fmul   rad;
	__asm        fld    z;
	__asm        fmul   z;
	__asm        fsubp;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fstp   projrad;
// LINE 751:
_T73:
	__asm        fld    rad;
	__asm        mov    eax, radius;
	__asm        fstp   dword ptr [eax];
// LINE 752:
	__asm        fld    projrad;
	__asm        sub    esp, 4;
	__asm        fstp   dword ptr [esp];
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   my_acos;
	__asm        add    esp, 8;
	__asm        mov    eax, psi;
	__asm        fstp   dword ptr [eax];
// LINE 753:
	__asm        fld    y;
	__asm        fcomp  dword ptr ds:[0x593750];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _Tb5;
// LINE 754:
	__asm        mov    eax, psi;
	__asm        fld    dword ptr [eax];
	__asm        fchs;
	__asm        mov    eax, psi;
	__asm        fstp   dword ptr [eax];
// LINE 755:
_Tb5:
	__asm        mov    eax, radius;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        call   my_acos;
	__asm        add    esp, 8;
	__asm        mov    eax, phi;
	__asm        fstp   dword ptr [eax];
// LINE 760:
	__asm        jmp    near ptr 0x00563CF1;
}

// FUNCTION: COPTER_D 0x00563cf6
void Cartesian2Polar(struct DXZY dxzy, struct Polar* polar, float * radius) {
// LINE 764:
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        mov    eax, polar;
	__asm        push   eax;
	__asm        mov    eax, dxzy.y;
	__asm        push   eax;
	__asm        mov    eax, dxzy.z;
	__asm        push   eax;
	__asm        mov    eax, dxzy.x;
	__asm        push   eax;
	__asm        call   Cartesian2Polar;
	__asm        add    esp, 0x18;
// LINE 765:
	__asm        mov    eax, polar;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 766:
	__asm        jmp    near ptr 0x00563D2E;
}

// FUNCTION: COPTER_D 0x00563d33
void IncrementTorque(float dinc, struct Polar* parentPolar, struct Polar* childPolar) {
	struct Polar parPolar;
	float parPhiToZero;
	struct Polar inc;

// LINE 940:
	__asm        lea    edi, parPolar.phi;
	__asm        mov    esi, parentPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 942:
	__asm        mov    eax, parPolar.phi;
	__asm        mov    parPhiToZero, eax;
// LINE 943:
	__asm        mov    inc.trq, 0;
	__asm        mov    ax, inc.trq;
	__asm        mov    inc.lng, ax;
	__asm        mov    ax, inc.lng;
	__asm        mov    inc.lat, ax;
	__asm        mov    inc.tau, 0;
	__asm        mov    eax, inc.tau;
	__asm        mov    inc.psi, eax;
	__asm        fld    parPhiToZero;
	__asm        fchs;
	__asm        fstp   inc.phi;
// LINE 944:
	__asm        mov    eax, childPolar;
	__asm        push   eax;
	__asm        lea    eax, parPolar.phi;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementPhiPsi;
	__asm        add    esp, 0xC;
// LINE 945:
	__asm        fld    parPolar.phi;
	__asm        fsub   parPhiToZero;
	__asm        fstp   parPolar.phi;
// LINE 947:
	__asm        mov    eax, childPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        fadd   dinc;
	__asm        mov    eax, childPolar;
	__asm        fstp   dword ptr [eax+4];
// LINE 948:
	__asm        mov    eax, parPhiToZero;
	__asm        mov    inc.phi, eax;
// LINE 950:
	__asm        mov    eax, childPolar;
	__asm        push   eax;
	__asm        lea    eax, parPolar.phi;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementPhiPsi;
	__asm        add    esp, 0xC;
// LINE 951:
	__asm        fld    parPolar.phi;
	__asm        fadd   parPhiToZero;
	__asm        fstp   parPolar.phi;
// LINE 952:
	__asm        jmp    near ptr 0x00563DCE;
}

// FUNCTION: COPTER_D 0x00563dd3
void IncrementXYTorque(float dinc, struct Polar* parentPolar, struct Polar* childPolar) {
	struct Polar parPolar;
	float parX20;
	float parY20;
	struct Polar inc;

// LINE 956:
	__asm        lea    edi, parPolar.phi;
	__asm        mov    esi, parentPolar;
	__asm        mov    ecx, 6;
	__asm        rep movsd;
// LINE 957:
	__asm        mov    eax, parPolar.phi;
	__asm        mov    parX20, eax;
	__asm        mov    eax, parPolar.psi;
	__asm        mov    parY20, eax;
// LINE 958:
	__asm        mov    inc.trq, 0;
	__asm        mov    ax, inc.trq;
	__asm        mov    inc.lng, ax;
	__asm        mov    ax, inc.lng;
	__asm        mov    inc.lat, ax;
	__asm        mov    inc.tau, 0;
	__asm        fld    parY20;
	__asm        fchs;
	__asm        fstp   inc.psi;
	__asm        fld    parX20;
	__asm        fchs;
	__asm        fstp   inc.phi;
// LINE 959:
	__asm        mov    eax, childPolar;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementXY;
	__asm        add    esp, 8;
// LINE 960:
	__asm        mov    eax, childPolar;
	__asm        fld    dword ptr [eax+4];
	__asm        fadd   dinc;
	__asm        mov    eax, childPolar;
	__asm        fstp   dword ptr [eax+4];
// LINE 961:
	__asm        mov    eax, parY20;
	__asm        mov    inc.psi, eax;
	__asm        mov    eax, parX20;
	__asm        mov    inc.phi, eax;
// LINE 962:
	__asm        mov    eax, childPolar;
	__asm        push   eax;
	__asm        lea    eax, inc.phi;
	__asm        push   eax;
	__asm        call   IncrementXY;
	__asm        add    esp, 8;
// LINE 963:
	__asm        jmp    near ptr 0x00563E62;
}

// FUNCTION: COPTER_D 0x00563e67
unsigned short IsPixelFilled(void * __ptr32 h, short x, short y) {
// LINE 1816:
	__asm        push   0x8C085;
	__asm        push   0x5BEEF4;
	__asm        push   0x718;
	__asm        push   0x5BEF04;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1819:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00563E91;
// LINE 1820:
}



// Contribution: 2:00004740-0000479f Module: 187, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00027cd8-00027f23 Module: 187, 4 byte alignment, initialized_data, read, write, 
