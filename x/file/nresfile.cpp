// Module: Nresfile.obj
// Source: C:\Copter\Source\X\File\Nresfile.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class NResFile (forward reference);
class NResFile : public ResFile
{
private:
	class PtrList<StdResLoader> fLoaders;
public:
	virtual void ~NResFile();
	class StdResLoader* GetLoader(unsigned long, void (*)(void * __ptr32, long));
	void ReleaseLoader(class StdResLoader*);
};

// Type: unsigned long;

// Type: void (void * __ptr32, long);

// Type: class StdResLoader (forward reference);
class StdResLoader : public ResLoader<unsigned char,StdResInfo>
{
public:
	void StdResLoader(class ResFile*, unsigned long, void (*)(void * __ptr32, long));
};

// Type: class PtrList<StdResLoader>::Iter;
class PtrList<StdResLoader>::Iter{
private:
	class PtrList<StdResLoader>* fObject;
	struct PtrList<StdResLoader>::PtrNode* fCur;
public:
	void Iter(class PtrList<StdResLoader>*);
	class StdResLoader* Current();
	void Next();
	void Reset();
	class StdResLoader* First();
};

// Type: void;

// Type: uint32_t;

// Type: class ResLoader<unsigned char,StdResInfo>;
class ResLoader<unsigned char,StdResInfo>{
private:
	long fCount;
	struct StdResInfo* fResInfo;
	class ResFile* fFile;
	unsigned long fType;
public:
	unsigned long Type();
	void ResLoader<unsigned char,StdResInfo>(class ResFile*, unsigned long, void (*)(void * __ptr32, long));
	void ~ResLoader<unsigned char,StdResInfo>();
	struct StdResInfo* GetInfo(long);
	unsigned char * GetData(long);
	long Count();
	struct StdResInfo* GetInfoByIndex(long);
	unsigned char * GetDataByIndex(long);
};

// Type: class ResFile;
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: class FlatResFile;
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: class FlatFile;
class FlatFile{
	enum /* __unnamed */ {
		kMaxNameLen = 255,
	};
protected:
	class FlatFile* fNext;
	unsigned char fName[256];
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long Open(unsigned char *);
	// vtable: 8
	intro long Open(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
};



// Contribution: 1:00098ef0-0009943b Module: 16, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00499ef0
class StdResLoader* NResFile::GetLoader(unsigned long type, void (*swizzler)(void * __ptr32, long)) {
	class StdResLoader* loader;

// LINE 13:
// Block start:
	class PtrList<StdResLoader>::Iter i;
	__asm        mov    eax, this;
	__asm        add    eax, 0x11A;
	__asm        mov    i.fObject, eax;
	__asm        cmp    i.fObject, 0;
	__asm        je     _T2e;

	__asm        mov    eax, i.fObject;
	__asm        mov    eax, [eax];
	__asm        mov    i.fCur, eax;
	__asm        jmp    _T35;
_T2e:
	__asm        mov    i.fCur, 0;
_T35:
	__asm        jmp    near ptr 0x00499F2A;

	__asm        jmp    near ptr 0x00499F2F;
// LINE 14:
	__asm        jmp    _T5c;
_T44:
	__asm        cmp    i.fCur, 0;
	__asm        je     _T57;

	__asm        mov    eax, i.fCur;
	__asm        mov    eax, [eax+4];
	__asm        mov    i.fCur, eax;
_T57:
	__asm        jmp    _T5c;
_T5c:
	__asm        cmp    i.fCur, 0;
	__asm        je     _T7c;

	__asm        mov    eax, i.fCur;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Tf9;

	__asm        jmp    _T90;

	__asm        jmp    _T86;
_T7c:
	__asm        jmp    _Tf9;

	__asm        jmp    _T90;
_T86:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tf9;
// LINE 15:
_T90:
	__asm        cmp    i.fCur, 0;
	__asm        je     _Tac;

	__asm        mov    eax, i.fCur;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Tb8;

	__asm        jmp    _Tb8;
_Tac:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _Tb8;
_Tb8:
	__asm        jmp    near ptr 0x00499FAD;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, type;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jne    _Tf4;
// LINE 16:
	__asm        cmp    i.fCur, 0;
	__asm        je     _Te5;

	__asm        mov    eax, i.fCur;
	__asm        mov    eax, [eax];
	__asm        jmp    _Tef;

	__asm        jmp    _Tec;
_Te5:
	__asm        xor    eax, eax;
	__asm        jmp    _Tef;
_Tec:
	__asm        mov    eax, [ebp-0x1C];
_Tef:
	__asm        jmp    _T2fe;
// LINE 17:
_Tf4:
	__asm        jmp    _T44;
// LINE 20:
// Block end:
_Tf9:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T24e;

	__asm        mov    eax, this;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, type;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+0xC], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T14b;

	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [eax+8];
	__asm        call   FlatResFile::Count;
	__asm        movsx  eax, ax;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T154;
_T14b:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax], 0;
_T154:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        dec    eax;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T17f;
_T17c:
	__asm        dec    dword ptr [ebp-0x20];
_T17f:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jl     _T239;

	__asm        mov    eax, swizzler;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        inc    eax;
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [eax+8];
	__asm        call   FlatResFile::GetByIndex;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ebp-0x20];
	__asm        lea    edx, [edx+edx*2];
	__asm        mov    [ecx+edx*4+4], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T20d;

	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   Memory::Stash;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ebp-0x20];
	__asm        lea    edx, [edx+edx*2];
	__asm        mov    [ecx+edx*4+8], eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, [eax+8];
	__asm        call   FlatResFile::GetID;
	__asm        movsx  eax, word ptr [ebp-0x28];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ebp-0x20];
	__asm        lea    edx, [edx+edx*2];
	__asm        mov    [ecx+edx*4], eax;
	__asm        jmp    near ptr 0x0049A0F8;

	__asm        jmp    _T234;
_T20d:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    dword ptr [eax+ecx*4+8], 0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x20];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    dword ptr [eax+ecx*4], 0;
_T234:
	__asm        jmp    _T17c;
_T239:
	__asm        jmp    near ptr 0x0049A12E;

	__asm        jmp    near ptr 0x0049A133;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    loader, eax;
	__asm        jmp    _T255;
_T24e:
	__asm        mov    loader, 0;
// LINE 21:
_T255:
	__asm        cmp    loader, 0;
	__asm        je     _T2b2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11A];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T279;
_T270:
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x30], eax;
_T279:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T29b;

	__asm        mov    eax, [ebp-0x30];
	__asm        mov    ecx, loader;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T296;

	__asm        jmp    _T2b2;
_T296:
	__asm        jmp    _T270;
_T29b:
	__asm        jmp    _T2b7;

	__asm        jmp    _T2b2;

	__asm        test   dword ptr [ebp-0x34], 0xFFFF;
	__asm        je     _T2b7;
_T2b2:
	__asm        jmp    _T2f6;
_T2b7:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, loader;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11A];
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11A], eax;
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0x11E];
	__asm        jmp    _T2f6;
// LINE 22:
_T2f6:
	__asm        mov    eax, loader;
	__asm        jmp    _T2fe;
// LINE 23:
_T2fe:
}

// FUNCTION: COPTER_D 0x0049a1f5
void NResFile::~NResFile() {
	class PtrList<StdResLoader>::Iter i;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x591218;
// LINE 31:
	__asm        mov    eax, this;
	__asm        add    eax, 0x11A;
	__asm        mov    i.fObject, eax;
	__asm        cmp    i.fObject, 0;
	__asm        je     _T37;

	__asm        mov    eax, i.fObject;
	__asm        mov    eax, [eax];
	__asm        mov    i.fCur, eax;
	__asm        jmp    _T3e;
_T37:
	__asm        mov    i.fCur, 0;
_T3e:
	__asm        jmp    near ptr 0x0049A238;

	__asm        jmp    near ptr 0x0049A23D;
// LINE 32:
	__asm        jmp    _T65;
_T4d:
	__asm        cmp    i.fCur, 0;
	__asm        je     _T60;

	__asm        mov    eax, i.fCur;
	__asm        mov    eax, [eax+4];
	__asm        mov    i.fCur, eax;
_T60:
	__asm        jmp    _T65;
_T65:
	__asm        cmp    i.fCur, 0;
	__asm        je     _T85;

	__asm        mov    eax, i.fCur;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T14d;

	__asm        jmp    _T99;

	__asm        jmp    _T8f;
_T85:
	__asm        jmp    _T14d;

	__asm        jmp    _T99;
_T8f:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T14d;
// LINE 33:
_T99:
	__asm        cmp    i.fCur, 0;
	__asm        je     _Tb5;

	__asm        mov    eax, i.fCur;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Tc1;

	__asm        jmp    _Tc1;
_Tb5:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _Tc1;
_Tc1:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T148;

	__asm        jmp    near ptr 0x0049A2CB;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        dec    eax;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Te7;
_Te4:
	__asm        dec    dword ptr [ebp-0x18];
_Te7:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jl     _T112;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x18];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [eax+ecx*4+4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, [eax+8];
	__asm        call   FlatResFile::Release;
	__asm        jmp    _Te4;
_T112:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049A327;

	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0049A338;

	__asm        jmp    _T148;
// LINE 34:
_T148:
	__asm        jmp    _T4d;
// LINE 35:
_T14d:
	__asm        jmp    _T152;
_T152:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11A], 0;
	__asm        je     _T1d5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11A];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11A];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11A], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        mov    eax, this;
	__asm        dec    word ptr [eax+0x11E];
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x11E];
	__asm        test   eax, eax;
	__asm        jge    _T1d0;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x26;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1d0:
	__asm        jmp    _T152;
_T1d5:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x11E];
	__asm        test   eax, eax;
	__asm        je     _T200;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x28;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T200:
	__asm        jmp    near ptr 0x0049A3FA;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x11E];
	__asm        test   eax, eax;
	__asm        je     _T230;

	__asm        push   0x8C085;
	__asm        push   0x59A274;
	__asm        push   0x17;
	__asm        push   0x59A254;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T230:
	__asm        jmp    near ptr 0x0049A42A;

	__asm        jmp    near ptr 0x0049A42F;

	__asm        mov    ecx, this;
	__asm        call   FlatResFile::~FlatResFile;
}



// Contribution: 1:00099440-00099478 Module: 16, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0049a440
// NResFile::`scalar deleting destructor'



// Contribution: 2:00002218-00002227 Module: 16, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00591218
// Demangled: const NResFile::`vftable'
// ??_7NResFile@@6B@


// Contribution: 3:0000324c-00003252 Module: 16, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a24c
// Demangled: "whoops"
// ??_C@_06BBEO@whoops?$AA@


// Contribution: 3:00003254-00003270 Module: 16, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a254
// Demangled: "c:\\copter\\source\\x\\PtrList.h"
// ??_C@_0BN@BGMO@c?3?2copter?2source?2x?2PtrList?4h?$AA@


// Contribution: 3:00003274-0000328a Module: 16, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x0059a274
// Demangled: "count error in ptrlist"
// ??_C@_0BH@OELJ@count?5error?5in?5ptrlist?$AA@
