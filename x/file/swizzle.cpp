// Module: Swizzle.obj
// Source: C:\Copter\Source\X\File\Swizzle.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void * __ptr32;

// Type: char[8];

// Type: void;

// Type: long;

// Type: short;

// Type: char;

// Type: struct Rect (forward reference);

// Type: short *;



// Contribution: 1:00165850-00165a00 Module: 183, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00566850
void Swizzle16(void * __ptr32 val) {
	char hiWord[8];
	char loWord[8];

// LINE 12:
	__asm        mov    eax, val;
	__asm        mov    al, [eax];
	__asm        mov    loWord[0], al;
// LINE 13:
	__asm        mov    eax, val;
	__asm        mov    al, [eax+8];
	__asm        mov    hiWord[0], al;
// LINE 14:
	__asm        lea    eax, loWord[0];
	__asm        push   eax;
	__asm        call   0x0056689D;
	__asm        add    esp, 4;
// LINE 15:
	__asm        lea    eax, hiWord[0];
	__asm        push   eax;
	__asm        call   0x0056689D;
	__asm        add    esp, 4;
// LINE 16:
	__asm        mov    al, hiWord[0];
	__asm        mov    ecx, val;
	__asm        mov    [ecx], al;
// LINE 17:
	__asm        mov    al, loWord[0];
	__asm        mov    ecx, val;
	__asm        mov    [ecx+8], al;
// LINE 19:
	__asm        jmp    near ptr 0x00566898;
}

// FUNCTION: COPTER_D 0x0056689d
void Swizzle8(void * __ptr32 val) {
	long hiWord;
	long loWord;

// LINE 24:
	__asm        mov    eax, val;
	__asm        mov    eax, [eax];
	__asm        mov    loWord, eax;
// LINE 25:
	__asm        mov    eax, val;
	__asm        mov    eax, [eax+4];
	__asm        mov    hiWord, eax;
// LINE 26:
	__asm        lea    eax, loWord;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 27:
	__asm        lea    eax, hiWord;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 28:
	__asm        mov    eax, hiWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], eax;
// LINE 29:
	__asm        mov    eax, loWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+4], eax;
// LINE 31:
	__asm        jmp    near ptr 0x005668E5;
}

// FUNCTION: COPTER_D 0x005668ea
void SwizzleFloat(void * __ptr32 val) {
// LINE 35:
	__asm        mov    eax, val;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 36:
	__asm        jmp    near ptr 0x00566901;
}

// FUNCTION: COPTER_D 0x00566906
void Swizzle4(void * __ptr32 val) {
	short hiWord;
	short loWord;

// LINE 41:
	__asm        mov    eax, val;
	__asm        mov    ax, [eax];
	__asm        mov    loWord, ax;
// LINE 42:
	__asm        mov    eax, val;
	__asm        mov    ax, [eax+2];
	__asm        mov    hiWord, ax;
// LINE 43:
	__asm        lea    eax, loWord;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 44:
	__asm        lea    eax, hiWord;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 45:
	__asm        mov    ax, hiWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], ax;
// LINE 46:
	__asm        mov    ax, loWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+2], ax;
// LINE 48:
	__asm        jmp    near ptr 0x00566956;
}

// FUNCTION: COPTER_D 0x0056695b
void Swizzle2(void * __ptr32 val) {
	char hiByte;
	char loByte;

// LINE 53:
	__asm        mov    eax, val;
	__asm        mov    al, [eax];
	__asm        mov    loByte, al;
// LINE 54:
	__asm        mov    eax, val;
	__asm        mov    al, [eax+1];
	__asm        mov    hiByte, al;
// LINE 55:
	__asm        mov    al, hiByte;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], al;
// LINE 56:
	__asm        mov    al, loByte;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+1], al;
// LINE 58:
	__asm        jmp    near ptr 0x0056698B;
}

// FUNCTION: COPTER_D 0x00566990
void SwizzleRect(struct Rect* rect) {
	short * pShort;

// LINE 64:
	__asm        mov    eax, rect;
	__asm        mov    pShort, eax;
// LINE 65:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-8], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 66:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 67:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0x10], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 68:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0x14], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 70:
	__asm        jmp    near ptr 0x005669FC;
}

