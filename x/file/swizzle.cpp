// Module: Swizzle.obj
// Source: C:\Copter\Source\X\File\Swizzle.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void * __ptr32;

// Type: signed char;

// Type: void;

// Type: long;

// Type: short;

// Type: /*unpacked*/ struct Rect (forward reference);
struct Rect{ // not packed(0x8 bytes) TI: 0x3463
	/*+0x0*/   short top; // 0x2 bytes
	/*+0x2*/   short left; // 0x2 bytes
	/*+0x4*/   short bottom; // 0x2 bytes
	/*+0x6*/   short right; // 0x2 bytes
};

// Type: short *;



// Contribution: 1:00165850-00165a00 Module: 183, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00566850
void Swizzle16(void * __ptr32 val) {
	/*bp-0x8*/   signed char loWord[8]; // 0x8 bytes
	/*bp-0x10*/  signed char hiWord[8]; // 0x8 bytes

// LINE 12:
	__asm        mov    eax, val;
	__asm        mov    al, [eax];
	__asm        mov    loWord[0], al;
// LINE 13:
	__asm        mov    eax, val;
	__asm        mov    al, [eax+8];
	__asm        mov    hiWord[0], al;
// LINE 14:
	Swizzle8(loWord[0]);
// LINE 15:
	Swizzle8(hiWord[0]);
// LINE 16:
	__asm        mov    al, hiWord[0];
	__asm        mov    ecx, val;
	__asm        mov    [ecx], al;
// LINE 17:
	__asm        mov    al, loWord[0];
	__asm        mov    ecx, val;
	__asm        mov    [ecx+8], al;
// LINE 19:
	return;
}

// FUNCTION: COPTER_D 0x0056689d
void Swizzle8(void * __ptr32 val) {
	/*bp-0x4*/   long loWord;
	/*bp-0x8*/   long hiWord;

// LINE 24:
	__asm        mov    eax, val;
	__asm        mov    eax, [eax];
	__asm        mov    loWord, eax;
// LINE 25:
	__asm        mov    eax, val;
	__asm        mov    eax, [eax+4];
	__asm        mov    hiWord, eax;
// LINE 26:
	Swizzle4(loWord);
// LINE 27:
	Swizzle4(hiWord);
// LINE 28:
	__asm        mov    eax, hiWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], eax;
// LINE 29:
	__asm        mov    eax, loWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+4], eax;
// LINE 31:
	return;
}

// FUNCTION: COPTER_D 0x005668ea
void SwizzleFloat(void * __ptr32 val) {
// LINE 35:
	Swizzle4(val);
// LINE 36:
	return;
}

// FUNCTION: COPTER_D 0x00566906
void Swizzle4(void * __ptr32 val) {
	/*bp-0x4*/   short loWord;
	/*bp-0x8*/   short hiWord;

// LINE 41:
	__asm        mov    eax, val;
	__asm        mov    ax, [eax];
	__asm        mov    loWord, ax;
// LINE 42:
	__asm        mov    eax, val;
	__asm        mov    ax, [eax+2];
	__asm        mov    hiWord, ax;
// LINE 43:
	Swizzle2(loWord);
// LINE 44:
	Swizzle2(hiWord);
// LINE 45:
	__asm        mov    ax, hiWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], ax;
// LINE 46:
	__asm        mov    ax, loWord;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+2], ax;
// LINE 48:
	return;
}

// FUNCTION: COPTER_D 0x0056695b
void Swizzle2(void * __ptr32 val) {
	/*bp-0x4*/   signed char loByte;
	/*bp-0x8*/   signed char hiByte;

// LINE 53:
	__asm        mov    eax, val;
	__asm        mov    al, [eax];
	__asm        mov    loByte, al;
// LINE 54:
	__asm        mov    eax, val;
	__asm        mov    al, [eax+1];
	__asm        mov    hiByte, al;
// LINE 55:
	__asm        mov    al, hiByte;
	__asm        mov    ecx, val;
	__asm        mov    [ecx], al;
// LINE 56:
	__asm        mov    al, loByte;
	__asm        mov    ecx, val;
	__asm        mov    [ecx+1], al;
// LINE 58:
	return;
}

// FUNCTION: COPTER_D 0x00566990
void SwizzleRect(/*unpacked*/ struct Rect *rect) {
	/*bp-0x4*/   short * pShort;

// LINE 64:
	pShort = rect;
// LINE 65:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-8], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 66:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 67:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0x10], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 68:
	__asm        mov    eax, pShort;
	__asm        mov    [ebp-0x14], eax;
	__asm        add    pShort, 2;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 70:
	return;
}

