// Module: Strset.obj
// Source: C:\Copter\Source\X\File\Strset.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00164a40-00164c90 Module: 185, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00565a40
void StringSet::StringSet(class ResFile* file, short resID) {
// LINE 12:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 13:
	__asm        mov    eax, file;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 15:
	__asm        mov    eax, reinterpret_cast<uint32_t>(resID);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00565ACC;
// LINE 16:
	__asm        jmp    near ptr 0x00565A65;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00565a6f
void StringSet::StringSet(class ResFile* file, short resID, short numStrings) {
// LINE 20:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 21:
	__asm        mov    eax, file;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 23:
	__asm        mov    eax, reinterpret_cast<uint32_t>(resID);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00565ACC;
// LINE 25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, numStrings;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00565ABD;
// LINE 26:
	__asm        push   0x8C085;
	__asm        push   0x5BF478;
	__asm        push   0x1A;
	__asm        push   0x5BF498;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 28:
	__asm        jmp    near ptr 0x00565AC2;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00565acc
void StringSet::LoadStrings(short resID) {
// LINE 32:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 33:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00565B06;
	__asm        push   0x8C085;
	__asm        push   0x5BF4BC;
	__asm        push   0x21;
	__asm        push   0x5BF4CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 34:
	__asm        push   0x565BA0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(resID);
	__asm        push   eax;
	__asm        push   0x53545223;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        call   0x0055320B;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 36:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00565B80;
// LINE 37:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554B04;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 39:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x00565B6C;
	__asm        push   0x8C085;
	__asm        push   0x5BF4F0;
	__asm        push   0x27;
	__asm        push   0x5BF510;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 42:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 44:
	__asm        jmp    near ptr 0x00565B94;
// LINE 45:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 46:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 48:
	__asm        jmp    near ptr 0x00565B99;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00565ba0
void StringSet::Swizzle(void * __ptr32 data, long size) {
// LINE 51:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 53:
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 54:
	__asm        jmp    near ptr 0x00565BB7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00565bbc
void StringSet::~StringSet() {
// LINE 57:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 58:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00565BF5;
// LINE 59:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        call   0x00553794;
// LINE 62:
	__asm        jmp    near ptr 0x00565BFA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00565bff
unsigned char * StringSet::GetString(short which) {
	short cnt;
	unsigned char * str;

// LINE 65:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 66:
	__asm        mov    eax, this;
	__asm        movsx  ecx, which;
	__asm        cmp    [eax+4], ecx;
	__asm        jl     near ptr 0x00565C28;
	__asm        movsx  eax, which;
	__asm        cmp    eax, 1;
	__asm        jge    near ptr 0x00565C48;
// LINE 67:
	__asm        push   0x8C085;
	__asm        push   0x5BF534;
	__asm        push   0x43;
	__asm        push   0x5BF54C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 68:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00565C8A;
// LINE 74:
	__asm        mov    ax, which;
	__asm        mov    cnt, ax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 2;
	__asm        mov    str, eax;
	__asm        jmp    near ptr 0x00565C65;
	__asm        dec    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 1;
	__asm        jle    near ptr 0x00565C82;
// LINE 75:
	__asm        mov    eax, str;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        add    str, ecx;
	__asm        jmp    near ptr 0x00565C61;
// LINE 76:
	__asm        mov    eax, str;
	__asm        jmp    near ptr 0x00565C8A;
// LINE 77:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 3:00028478-0002856e Module: 185, 4 byte alignment, initialized_data, read, write, 
