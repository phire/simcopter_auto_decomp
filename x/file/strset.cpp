// Module: Strset.obj
// Source: C:\Copter\Source\X\File\Strset.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ class StringSet (forward reference);
class StringSet{ // not packed(0x10 bytes) TI: 0x3487
private:
	/*+0x0*/   /*unpacked*/ class ResFile *fResFile;
	/*+0x4*/   long fNumStrings;
	/*+0x8*/   void * __ptr32 fStringHandle;
	/*+0xc*/   unsigned char * fStringPtr;
	void LoadStrings(short);
	// calltype: NearC
	static void Swizzle(void * __ptr32, long);
public:
	void StringSet(/*unpacked*/ class ResFile*, short);
	void StringSet(/*unpacked*/ class ResFile*, short, short);
	void ~StringSet();
	unsigned char * GetString(short);
	short Count();
};

// Type: /*unpacked*/ class ResFile (forward reference);
// VTABLE: COPTER_D 0x00593518
class ResFile : public FlatResFile
{ // not packed(0x11c bytes) TI: 0x3334
public:
	long OpenFromOtherFile(/*unpacked*/ class ResFile*);
};

// Type: short;

// Type: void;

// Type: void * __ptr32;

// Type: long;

// Type: unsigned char *;

// Type: /*unpacked*/ class FlatResFile;
// VTABLE: COPTER_D 0x00593508
class FlatResFile : public FlatFile
{ // not packed(0x11c bytes) TI: 0x330e
protected:
	/*+0x110*/ /*unpacked*/ class ResMap *fMap;
	/*+0x114*/ long fError;
	/*+0x118*/ short _alignPad; // 0x2 bytes
public:
	void FlatResFile();
	virtual void ~FlatResFile() /* override */;
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(/*unpacked*/ class FlatResFile*);
	virtual long Open(unsigned char *) /* override */;
	virtual long Open(char *) /* override */;
	long OpenFromName();
	virtual long Close() /* override */;
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: /*unpacked*/ class FlatFile;
// VTABLE: COPTER_D 0x00593620
class FlatFile{ // not packed(0x110 bytes) TI: 0x32f4
	enum /* __unnamed */ {
		kMaxNameLen = 255,
	};
protected:
	/*+0x4*/   /*unpacked*/ class FlatFile *fNext;
	/*+0x8*/   unsigned char fName[256]; // 0x100 bytes
	/*+0x108*/ long fFileID;
	/*+0x10c*/ /*unpacked*/ struct _iobuf *fFile;
	long UniqueID();
private:
	static /*unpacked*/ class FlatFile *sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	virtual void ~FlatFile(); // vtable+0x0
	// calltype: NearC
	static /*unpacked*/ class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(/*unpacked*/ class FlatFile*);
	virtual long Open(unsigned char *); // vtable+0x4
	virtual long Open(char *); // vtable+0x8
	virtual long Close(); // vtable+0xc
	void OpenFromOtherFile(/*unpacked*/ class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(signed char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	/*unpacked*/ struct _iobuf* GetFile();
};



// Contribution: 1:00164a40-00164c90 Module: 185, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00565a40
void StringSet::StringSet(/*unpacked*/ class ResFile *file, short resID) {
// LINE 13:
	this->fResFile = file;
// LINE 15:
	this->StringSet::LoadStrings(reinterpret_cast<uint32_t>(resID));
// LINE 16:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00565a6f
void StringSet::StringSet(/*unpacked*/ class ResFile *file, short resID, short numStrings) {
// LINE 21:
	this->fResFile = file;
// LINE 23:
	this->StringSet::LoadStrings(reinterpret_cast<uint32_t>(resID));
// LINE 25:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, numStrings;
	__asm        cmp    eax, ecx;
	__asm        je     _T4e;
// LINE 26:
	doAssert(0x5bf498, 0x1a, 0x5bf478, 0x8c085);
// LINE 28:
_T4e:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00565acc
void StringSet::LoadStrings(short resID) {
// LINE 33:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax];
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T3a;

	doAssert(0x5bf4cc, 0x21, 0x5bf4bc, 0x8c085);
// LINE 34:
_T3a:
	this->fStringHandle = this->fResFile->FlatResFile::GetByID(0x53545223, reinterpret_cast<uint32_t>(resID), 0x565ba0);
// LINE 36:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _Tb4;
// LINE 37:
	this->fStringPtr = Memory::Stash(this->fStringHandle);
// LINE 39:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _Ta0;

	doAssert(0x5bf510, 0x27, 0x5bf4f0, 0x8c085);
// LINE 42:
_Ta0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
// LINE 44:
	__asm        jmp    _Tc8;
// LINE 45:
_Tb4:
	this->fStringPtr = 0x0;
// LINE 46:
	this->fNumStrings = 0x0;
// LINE 48:
_Tc8:
	return;
}

// FUNCTION: COPTER_D 0x00565ba0
void StringSet::Swizzle(void * __ptr32 data, long size) {
// LINE 53:
	Swizzle2(data);
// LINE 54:
	return;
}

// FUNCTION: COPTER_D 0x00565bbc
void StringSet::~StringSet() {
// LINE 58:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T39;
// LINE 59:
	Memory::HUnlock(this->fStringHandle);
// LINE 60:
	this->fResFile->FlatResFile::Release(this->fStringHandle);
// LINE 62:
_T39:
	return;
}

// FUNCTION: COPTER_D 0x00565bff
unsigned char * StringSet::GetString(short which) {
	/*bp-0x4*/   unsigned char * str;
	/*bp-0x8*/   short cnt;

// LINE 66:
	__asm        mov    eax, this;
	__asm        movsx  ecx, which;
	__asm        cmp    [eax+4], ecx;
	__asm        jl     _T29;

	__asm        movsx  eax, which;
	__asm        cmp    eax, 1;
	__asm        jge    _FOR_62;
// LINE 67:
_T29:
	doAssert(0x5bf54c, 0x43, 0x5bf534, 0x8c085);
// LINE 68:
	return 0x0;
// LINE 74:
_FOR_62:
	__asm        mov    ax, which;
	__asm        mov    cnt, ax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        add    eax, 2;
	__asm        mov    str, eax;
	__asm        jmp    _FOR_COND_62;
_FOR_NEXT_62:
	for (; (reinterpret_cast<int16_t>(cnt) > 0x1); cnt--) {
		// LINE 75:
			__asm        mov    eax, str;
			__asm        xor    ecx, ecx;
			__asm        mov    cl, [eax];
			__asm        inc    ecx;
			__asm        add    str, ecx;
			__asm        jmp    _FOR_NEXT_62;
	}
// LINE 76:
_T83:
	return str;
// LINE 77:
}



// Contribution: 3:00028478-0002856e Module: 185, 4 byte alignment, initialized_data, read, write, 
