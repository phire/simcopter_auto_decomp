// Module: Flatresf.obj
// Source: C:\Copter\Source\X\File\Flatresf.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class FlatResFile (forward reference);
class FlatResFile : public FlatFile
{
protected:
	class FlatFile* fNext;
	unsigned char[256] fName;
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long FlatResFile(unsigned char *);
	// vtable: 8
	intro long FlatResFile(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long FlatResFile(unsigned char *);
	virtual long FlatResFile(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: void * __ptr32;

// Type: short *;

// Type: long *;

// Type: unsigned char *;

// Type: long;

// Type: unsigned char[28];

// Type: void;

// Type: char *;

// Type: class ResFile (forward reference);
class ResFile : public FlatFile, public FlatResFile
{
protected:
	class FlatFile* fNext;
	unsigned char[256] fName;
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long ResFile(unsigned char *);
	// vtable: 8
	intro long ResFile(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long ResFile(unsigned char *);
	virtual long ResFile(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
	long OpenFromOtherFile(class ResFile*);
};

// Type: short;

// Type: unsigned long;

// Type: void (void * __ptr32, long, );

// Type: struct ResMap::Entry (forward reference);

// Type: unsigned char;

// Type: class StringSet;
class StringSet{
private:
	class ResFile* fResFile;
	long fNumStrings;
	void * __ptr32 fStringHandle;
	unsigned char * fStringPtr;
	void LoadStrings(short);
	// calltype: NearC
	static void Swizzle(void * __ptr32, long);
public:
	void StringSet(class ResFile*, short);
	void StringSet(class ResFile*, short, short);
	void ~StringSet();
	unsigned char * GetString(short);
	short Count();
};

// Type: class ResMap (forward reference);

// Type: struct ResMap::TypeHead (forward reference);

// Type: unsigned short;



// Contribution: 1:00151b10-0015371d Module: 199, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00552b10
void FlatResFile::LoadResMap(void * __ptr32* newMap, short * numTypes, long * dataLoc) {
	unsigned char * resMapPtr;
	long err;

// LINE 97:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 101:
	__asm        mov    eax, newMap;
	__asm        mov    dword ptr [eax], 0;
// LINE 105:
// Block start:
	long mapLocLess;
	long mapLoc;
	long mapSize;
	unsigned char[28] miscBytes;
	long miscSize;
	long res1Off;
	__asm        mov    miscSize, 0x1C;
// LINE 107:
	__asm        mov    ecx, this;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00552B58;
	__asm        push   0x8C085;
	__asm        push   0x5BBEE0;
	__asm        push   0x6B;
	__asm        push   0x5BBEEC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 108:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0055C711;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552B79;
	__asm        jmp    near ptr 0x00552E45;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 110:
	__asm        lea    eax, res1Off;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C87A;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552B9C;
	__asm        jmp    near ptr 0x00552E40;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 111:
	__asm        cmp    res1Off, 0x100;
	__asm        je     near ptr 0x00552BC2;
	__asm        push   0x8C085;
	__asm        push   0x5BBF14;
	__asm        push   0x6F;
	__asm        push   0x5BBF30;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 113:
	__asm        lea    eax, mapLoc;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C87A;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552BE5;
	__asm        jmp    near ptr 0x00552E3B;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 114:
	__asm        mov    eax, res1Off;
	__asm        cmp    mapLoc, eax;
	__asm        jle    near ptr 0x00552BFE;
	__asm        cmp    mapLoc, 0x600000;
	__asm        jl     near ptr 0x00552C17;
	__asm        push   0x8C085;
	__asm        push   0x5BBF58;
	__asm        push   0x72;
	__asm        push   0x5BBF68;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 116:
	__asm        lea    eax, mapLocLess;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C87A;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552C3A;
	__asm        jmp    near ptr 0x00552E36;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 117:
	__asm        mov    eax, mapLoc;
	__asm        sub    eax, res1Off;
	__asm        mov    mapLocLess, eax;
	__asm        cmp    mapLocLess, 0;
	__asm        jne    near ptr 0x00552C66;
	__asm        push   0x8C085;
	__asm        push   0x5BBF90;
	__asm        push   0x75;
	__asm        push   0x5BBFAC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 119:
	__asm        lea    eax, mapSize;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C87A;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552C89;
	__asm        jmp    near ptr 0x00552E31;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 120:
	__asm        cmp    mapSize, 0;
	__asm        jle    near ptr 0x00552CA0;
	__asm        cmp    mapSize, 0x600000;
	__asm        jl     near ptr 0x00552CB9;
	__asm        push   0x8C085;
	__asm        push   0x5BBFD4;
	__asm        push   0x78;
	__asm        push   0x5BBFE8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 122:
	__asm        mov    eax, mapLoc;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C711;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552CDC;
	__asm        jmp    near ptr 0x00552E2C;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 124:
	__asm        lea    eax, miscSize;
	__asm        push   eax;
	__asm        lea    eax, miscBytes[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C69C;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552D03;
	__asm        jmp    near ptr 0x00552E27;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 125:
	__asm        sub    mapSize, 0x1C;
// LINE 127:
	__asm        mov    eax, res1Off;
	__asm        mov    ecx, dataLoc;
	__asm        mov    [ecx], eax;
// LINE 130:
	__asm        mov    eax, numTypes;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C8C5;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552D32;
	__asm        jmp    near ptr 0x00552E22;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 131:
	__asm        mov    eax, numTypes;
	__asm        inc    word ptr [eax];
// LINE 132:
	__asm        sub    mapSize, 2;
// LINE 134:
	__asm        push   0;
	__asm        mov    eax, mapSize;
	__asm        push   eax;
	__asm        call   0x00554759;
	__asm        add    esp, 8;
	__asm        mov    ecx, newMap;
	__asm        mov    [ecx], eax;
// LINE 135:
	__asm        call   0x00554F06;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552D6B;
	__asm        jmp    near ptr 0x00552E1D;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 136:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    resMapPtr, eax;
// LINE 137:
	__asm        call   0x00554F06;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552D98;
	__asm        jmp    near ptr 0x00552E18;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 139:
	__asm        lea    eax, mapSize;
	__asm        push   eax;
	__asm        mov    eax, resMapPtr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C69C;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00552DBF;
	__asm        jmp    near ptr 0x00552E13;
	__asm        jmp    near ptr 0x00552DDF;
// LINE 141:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 143:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
// LINE 144:
	__asm        jmp    near ptr 0x00552E4A;
// LINE 147:
error:
	__asm        mov    eax, newMap;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00552E02;
// LINE 149:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 150:
	__asm        mov    eax, newMap;
	__asm        mov    dword ptr [eax], 0;
// LINE 152:
	__asm        mov    eax, err;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 153:
	__asm        jmp    near ptr 0x00552E4A;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        jmp    near ptr 0x00552DDF;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00552e51
long FlatResFile::Open(char * name) {
// LINE 157:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 158:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C36A;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x00552E9B;
// LINE 162:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 163:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0;
// LINE 165:
	__asm        jmp    near ptr 0x00552EB0;
// LINE 167:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x00553C5B;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 170:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        jmp    near ptr 0x00552EBE;
// LINE 172:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00552ec5
long FlatResFile::Open(unsigned char * name) {
// LINE 178:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 179:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C3C7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x00552F0F;
// LINE 183:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x108], 0;
// LINE 186:
	__asm        jmp    near ptr 0x00552F24;
// LINE 188:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   0x00553C5B;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        jmp    near ptr 0x00552F32;
// LINE 192:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00552f39
long ResFile::OpenFromOtherFile(class ResFile* otherFile) {
// LINE 197:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 198:
	__asm        mov    eax, otherFile;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055C586;
// LINE 199:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00552F58;
// LINE 200:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00552f5f
long FlatResFile::Close() {
// LINE 206:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 207:
	__asm        mov    ecx, this;
	__asm        call   0x0055C5CB;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 208:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        jne    near ptr 0x00552FB7;
// LINE 210:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00552FAA;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00553DCC;
// LINE 211:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x110], 0;
// LINE 213:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        jmp    near ptr 0x00552FC5;
// LINE 214:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00552fca
short FlatResFile::CheckForLeaks() {
	short total;

// LINE 259:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 260:
	__asm        call   0x00553E96;
	__asm        mov    total, ax;
// LINE 261:
	__asm        call   0x0055CA7F;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, total;
	__asm        add    eax, ecx;
	__asm        mov    total, ax;
// LINE 262:
	__asm        mov    ax, total;
	__asm        jmp    near ptr 0x00552FF7;
// LINE 263:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00552ffc
long FlatResFile::GetError() {
// LINE 269:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 270:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x114];
	__asm        jmp    near ptr 0x00553016;
// LINE 271:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055301b
void FlatResFile::~FlatResFile() {
// LINE 277:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x553086;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593508;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 278:
	__asm        mov    ecx, this;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00553067;
	__asm        mov    ecx, this;
	__asm        call   0x00552F5F;
// LINE 279:
	__asm        jmp    near ptr 0x0055306C;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x0055307D;
	__asm        jmp    near ptr 0x00553090;
_L27084:
	__asm        mov    ecx, this;
	__asm        call   0x0055C2BB;
	__asm        ret;
_L27083:
	__asm        mov    eax, 0x595F30;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055309e
short FlatResFile::CountTypes() {
// LINE 286:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 287:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x005530CC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x005530D9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x005530F1;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00553108;
// LINE 289:
	__asm        jmp    near ptr 0x005530F6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x110];
	__asm        mov    ax, [eax+6];
	__asm        jmp    near ptr 0x00553108;
// LINE 304:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055310d
unsigned long FlatResFile::GetIndType(short index) {
	unsigned long type;

// LINE 311:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 312:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x0055313B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x00553148;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x0055315F;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00553193;
// LINE 314:
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x005541A4;
	__asm        mov    type, eax;
// LINE 316:
	__asm        cmp    type, 0;
	__asm        jne    near ptr 0x0055318B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9C;
// LINE 317:
	__asm        mov    eax, type;
	__asm        jmp    near ptr 0x00553193;
// LINE 318:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055319a
short FlatResFile::Count(unsigned long type) {
// LINE 325:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 326:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x005531C8;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x005531D5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x005531ED;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00553204;
// LINE 328:
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x005541FE;
	__asm        jmp    near ptr 0x00553204;
// LINE 329:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055320b
void * __ptr32 FlatResFile::GetByID(unsigned long type, short id, void (*)(void * __ptr32, long) Swizzler) {
	struct ResMap::Entry* entry;

// LINE 336:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00553239;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x00553246;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x0055325D;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00553316;
// LINE 339:
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055437A;
	__asm        mov    entry, eax;
// LINE 341:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x00553294;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00553316;
// LINE 343:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0055330B;
// LINE 345:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00553EDB;
// LINE 347:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0055330B;
	__asm        cmp    Swizzler, 0;
	__asm        je     near ptr 0x0055330B;
// LINE 349:
// Block start:
	unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 350:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 351:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 355:
// Block end:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x00553316;
// LINE 356:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0055331d
void * __ptr32 FlatResFile::GetByName(unsigned long type, unsigned char * name, void (*)(void * __ptr32, long) Swizzler) {
	struct ResMap::Entry* entry;

// LINE 363:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 364:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x0055334B;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x00553358;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x0055336F;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055344B;
// LINE 366:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x00553392;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9F;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055344B;
// LINE 368:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055443D;
	__asm        mov    entry, eax;
// LINE 370:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x005533C9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055344B;
// LINE 372:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x00553440;
// LINE 374:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00553EDB;
// LINE 376:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00553440;
	__asm        cmp    Swizzler, 0;
	__asm        je     near ptr 0x00553440;
// LINE 378:
// Block start:
	unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 379:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 380:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 384:
// Block end:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x0055344B;
// LINE 385:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00553452
void * __ptr32 FlatResFile::GetByIndex(unsigned long type, short index, void (*)(void * __ptr32, long) Swizzler) {
	struct ResMap::Entry* entry;

// LINE 392:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 393:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00553480;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x0055348D;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x005534A4;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055355D;
// LINE 395:
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00554536;
	__asm        mov    entry, eax;
// LINE 397:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x005534DB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055355D;
// LINE 399:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x00553552;
// LINE 401:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00553EDB;
// LINE 403:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00553552;
	__asm        cmp    Swizzler, 0;
	__asm        je     near ptr 0x00553552;
// LINE 405:
// Block start:
	unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 406:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554D05;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 407:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 411:
// Block end:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    near ptr 0x0055355D;
// LINE 412:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00553564
void FlatResFile::GetName(void * __ptr32 res, unsigned char * name) {
	struct ResMap::Entry* entry;

// LINE 419:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 420:
	__asm        mov    eax, name;
	__asm        mov    byte ptr [eax], 0;
// LINE 422:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00553598;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x005535A5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x005535BA;
	__asm        jmp    near ptr 0x00553606;
// LINE 424:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 426:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x005535EB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        jmp    near ptr 0x00553606;
// LINE 428:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x005545F1;
// LINE 429:
	__asm        jmp    near ptr 0x00553606;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055360d
void FlatResFile::GetID(void * __ptr32 res, short * id) {
	struct ResMap::Entry* entry;

// LINE 436:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 437:
	__asm        mov    eax, id;
	__asm        mov    word ptr [eax], 0xFFFF;
// LINE 439:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00553643;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x00553650;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x00553665;
	__asm        jmp    near ptr 0x005536A7;
// LINE 441:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 443:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x00553696;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    near ptr 0x005536A7;
// LINE 445:
	__asm        mov    eax, entry;
	__asm        mov    ax, [eax];
	__asm        mov    ecx, id;
	__asm        mov    [ecx], ax;
// LINE 446:
	__asm        jmp    near ptr 0x005536A7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005536ae
unsigned long FlatResFile::GetResType(void * __ptr32 res) {
	unsigned long returnType;
	struct ResMap::Entry* entry;

// LINE 449:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 450:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x005536DC;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x005536E9;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x00553700;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055378D;
// LINE 452:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 454:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x00553733;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0055378D;
// LINE 456:
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00554272;
	__asm        mov    returnType, eax;
// LINE 457:
	__asm        cmp    returnType, 0;
	__asm        jne    near ptr 0x0055376E;
	__asm        push   0x8C085;
	__asm        push   0x5BC010;
	__asm        push   0x1C9;
	__asm        push   0x5BC028;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 458:
	__asm        cmp    returnType, 0;
	__asm        jne    near ptr 0x00553785;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
// LINE 460:
	__asm        mov    eax, returnType;
	__asm        jmp    near ptr 0x0055378D;
// LINE 461:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00553794
void FlatResFile::Release(void * __ptr32 res) {
	struct ResMap::Entry* entry;

// LINE 468:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 469:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x005537C2;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x005537CF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x005537E4;
	__asm        jmp    near ptr 0x00553833;
// LINE 471:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 473:
	__asm        cmp    entry, 0;
	__asm        je     near ptr 0x00553810;
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x00553815;
	__asm        jmp    near ptr 0x00553833;
// LINE 475:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 476:
	__asm        mov    eax, entry;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 489:
	__asm        jmp    near ptr 0x00553833;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055383a
void FlatResFile::Detach(void * __ptr32 res) {
	struct ResMap::Entry* entry;

// LINE 496:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 497:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x00553868;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x00553875;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x0055388A;
	__asm        jmp    near ptr 0x005538CA;
// LINE 499:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 501:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x005538BB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    near ptr 0x005538CA;
// LINE 503:
	__asm        mov    eax, entry;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 515:
	__asm        jmp    near ptr 0x005538CA;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x005538d1
void FlatResFile::Load(void * __ptr32 res) {
	struct ResMap::Entry* entry;
	unsigned char oldState;
	unsigned char * ptr;

// LINE 522:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 523:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     near ptr 0x005538FF;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    near ptr 0x0055390C;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFFCF;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     near ptr 0x00553921;
	__asm        jmp    near ptr 0x005539B7;
// LINE 525:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x0055430B;
	__asm        mov    entry, eax;
// LINE 527:
	__asm        cmp    entry, 0;
	__asm        jne    near ptr 0x00553952;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    near ptr 0x005539B7;
// LINE 529:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554DE7;
	__asm        add    esp, 4;
	__asm        mov    oldState, al;
// LINE 530:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    ptr, eax;
// LINE 531:
	__asm        cmp    ptr, 0;
	__asm        je     near ptr 0x0055399A;
// LINE 533:
	__asm        xor    eax, eax;
	__asm        mov    al, oldState;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554E62;
	__asm        add    esp, 8;
// LINE 534:
	__asm        jmp    near ptr 0x005539B7;
// LINE 537:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   0x00553EDB;
// LINE 538:
	__asm        jmp    near ptr 0x005539B7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x005539be
void FlatResFile::GetString(unsigned char * str, short resID, short index) {
	class StringSet tempStrs;

// LINE 595:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x553A6A;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 596:
	__asm        mov    eax, reinterpret_cast<uint32_t>(resID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   0x00565A40;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 598:
	__asm        mov    eax, str;
	__asm        mov    byte ptr [eax], 0;
// LINE 599:
	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jl     near ptr 0x00553A50;
	__asm        jmp    near ptr 0x00553A0E;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(tempStrs.fNumStrings);
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00553A50;
// LINE 601:
// Block start:
	unsigned char * foundStr;
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   0x00565BFF;
	__asm        mov    foundStr, eax;
// LINE 602:
	__asm        cmp    foundStr, 0;
	__asm        je     near ptr 0x00553A50;
	__asm        mov    eax, foundStr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        mov    eax, foundStr;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 604:
// Block end:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x00553A61;
	__asm        jmp    near ptr 0x00553A74;
_L27094:
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   0x00565BBC;
	__asm        ret;
_L27093:
	__asm        mov    eax, 0x595F58;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00553a84
 ResMap::ResMap(short refNum, short numTypes, void * __ptr32 resMap, unsigned char * resMapPtr, long dataLoc) {
	short typeCnt;
	struct ResMap::TypeHead* typeList;
	short total;
	struct ResMap::Entry* resList;
	short resCnt;
	unsigned char * mapStart;

// LINE 671:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 672:
	__asm        mov    eax, resMap;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 673:
	__asm        mov    ax, numTypes;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+6], ax;
// LINE 674:
	__asm        mov    ax, refNum;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], ax;
// LINE 675:
	__asm        mov    eax, dataLoc;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 676:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 1;
// LINE 677:
	__asm        mov    eax, resMapPtr;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 688:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    mapStart, eax;
// LINE 690:
	__asm        mov    eax, mapStart;
	__asm        mov    typeList, eax;
// LINE 691:
	__asm        mov    typeCnt, 0;
	__asm        mov    total, 0;
	__asm        jmp    near ptr 0x00553AF3;
	__asm        inc    typeCnt;
	__asm        add    typeList, 8;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, typeCnt;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00553B29;
// LINE 693:
	__asm        mov    eax, typeList;
	__asm        push   eax;
	__asm        call   0x00554651;
	__asm        add    esp, 4;
// LINE 694:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, total;
	__asm        add    eax, ecx;
	__asm        inc    eax;
	__asm        mov    total, ax;
// LINE 695:
	__asm        jmp    near ptr 0x00553AEB;
// LINE 697:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 700:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, mapStart;
	__asm        mov    resList, eax;
// LINE 701:
	__asm        mov    resCnt, 0;
	__asm        jmp    near ptr 0x00553B57;
	__asm        inc    resCnt;
	__asm        add    resList, 0xC;
	__asm        movsx  eax, resCnt;
	__asm        movsx  ecx, total;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00553B82;
// LINE 703:
	__asm        mov    eax, resList;
	__asm        push   eax;
	__asm        call   0x0055468B;
	__asm        add    esp, 4;
// LINE 704:
	__asm        mov    eax, resList;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 705:
	__asm        jmp    near ptr 0x00553B4F;
// LINE 721:
	__asm        mov    eax, resList;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 722:
	__asm        jmp    near ptr 0x00553B96;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00553ba0
 ResMap::~ResMap() {
	struct ResMap::Entry* srch;
	struct ResMap::Entry* last;
	unsigned char hState;

// LINE 728:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 729:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    srch, eax;
// LINE 730:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    last, eax;
// LINE 732:
	__asm        mov    eax, srch;
	__asm        cmp    last, eax;
	__asm        jbe    near ptr 0x00553C33;
// LINE 734:
	__asm        mov    eax, srch;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00553C2A;
// LINE 736:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554DE7;
	__asm        add    esp, 4;
	__asm        mov    hState, al;
// LINE 737:
	__asm        xor    eax, eax;
	__asm        mov    al, hState;
	__asm        test   al, 0x80;
	__asm        je     near ptr 0x00553C11;
// LINE 738:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 739:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 740:
	__asm        mov    eax, srch;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 742:
	__asm        add    srch, 0xC;
// LINE 743:
	__asm        jmp    near ptr 0x00553BCA;
// LINE 745:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 746:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005548C3;
	__asm        add    esp, 4;
// LINE 747:
	__asm        jmp    near ptr 0x00553C56;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00553c5b
long  ResMap::Get(class FlatResFile* fromFile) {
	class ResMap* srch;
	short numTypes;
	long dataLoc;
	void * __ptr32 newMap;
	unsigned char * resPtr;

// LINE 753:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x553DB3;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 755:
	__asm        mov    eax, ds:[0x5BBEDC];
	__asm        mov    srch, eax;
	__asm        jmp    near ptr 0x00553C8E;
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        mov    srch, eax;
	__asm        cmp    srch, 0;
	__asm        je     near ptr 0x00553CD1;
// LINE 756:
	__asm        jmp    near ptr 0x00553C9D;
	__asm        mov    eax, srch;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, fromFile;
	__asm        cmp    eax, [ecx+0x108];
	__asm        jne    near ptr 0x00553CCC;
// LINE 758:
	__asm        mov    eax, srch;
	__asm        inc    dword ptr [eax+0x1C];
// LINE 759:
	__asm        mov    eax, srch;
	__asm        mov    ecx, fromFile;
	__asm        mov    [ecx+0x110], eax;
// LINE 760:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00553DBD;
// LINE 763:
	__asm        jmp    near ptr 0x00553C86;
// LINE 768:
	__asm        lea    eax, dataLoc;
	__asm        push   eax;
	__asm        lea    eax, numTypes;
	__asm        push   eax;
	__asm        lea    eax, newMap;
	__asm        push   eax;
	__asm        mov    ecx, fromFile;
	__asm        call   0x00552B10;
// LINE 769:
	__asm        mov    ecx, fromFile;
	__asm        call   0x00552FFC;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00553D02;
	__asm        mov    ecx, fromFile;
	__asm        call   0x00552FFC;
	__asm        jmp    near ptr 0x00553DBD;
// LINE 771:
	__asm        mov    eax, newMap;
	__asm        push   eax;
	__asm        call   0x00554B04;
	__asm        add    esp, 4;
	__asm        mov    resPtr, eax;
// LINE 772:
	__asm        cmp    resPtr, 0;
	__asm        jne    near ptr 0x00553D25;
	__asm        call   0x00554F06;
	__asm        jmp    near ptr 0x00553DBD;
// LINE 774:
	__asm        push   0x20;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00553D6D;
	__asm        mov    eax, dataLoc;
	__asm        push   eax;
	__asm        mov    eax, resPtr;
	__asm        push   eax;
	__asm        mov    eax, newMap;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(numTypes);
	__asm        push   eax;
	__asm        mov    eax, fromFile;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   0x00553A84;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00553D74;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    srch, eax;
// LINE 775:
	__asm        mov    eax, srch;
	__asm        mov    ecx, fromFile;
	__asm        mov    [ecx+0x110], eax;
// LINE 776:
	__asm        mov    eax, ds:[0x5BBEDC];
	__asm        mov    ecx, srch;
	__asm        mov    [ecx], eax;
// LINE 777:
	__asm        mov    eax, srch;
	__asm        mov    ds:[0x5BBEDC], eax;
// LINE 778:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00553DBD;
// LINE 779:
_L27102:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L27101:
	__asm        mov    eax, 0x595F80;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00553dcc
void  ResMap::Release() {
// LINE 785:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 786:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jg     near ptr 0x00553E01;
	__asm        push   0x8C085;
	__asm        push   0x5BC050;
	__asm        push   0x312;
	__asm        push   0x5BC06C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 787:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x1C];
// LINE 788:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    near ptr 0x00553E8C;
// LINE 791:
// Block start:
	class ResMap** rmv;
	__asm        mov    rmv, 0x5BBEDC;
	__asm        jmp    near ptr 0x00553E28;
	__asm        mov    eax, rmv;
	__asm        mov    eax, [eax];
	__asm        mov    rmv, eax;
	__asm        mov    eax, rmv;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00553E58;
// LINE 792:
	__asm        mov    eax, rmv;
	__asm        mov    ecx, this;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00553E53;
	__asm        mov    eax, rmv;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, rmv;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00553E58;
// LINE 794:
	__asm        jmp    near ptr 0x00553E20;
	__asm        mov    eax, this;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00553E8C;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x00553BA0;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00553E87;
	__asm        jmp    near ptr 0x00553E8C;
// LINE 796:
// Block end:
	__asm        jmp    near ptr 0x00553E91;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00553e96
short  ResMap::CheckForLeaks() {
	class ResMap* srch;
	short total;

// LINE 802:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 803:
	__asm        mov    total, 0;
// LINE 804:
	__asm        mov    eax, ds:[0x5BBEDC];
	__asm        mov    srch, eax;
	__asm        jmp    near ptr 0x00553EBA;
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        mov    srch, eax;
	__asm        cmp    srch, 0;
	__asm        je     near ptr 0x00553ECD;
// LINE 805:
	__asm        inc    total;
	__asm        jmp    near ptr 0x00553EB2;
// LINE 806:
	__asm        mov    ax, total;
	__asm        jmp    near ptr 0x00553ED6;
// LINE 807:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00553edb
void  ResMap::LoadEntry(struct ResMap::Entry* entry, class FlatResFile* file, unsigned short unpurge) {
	long pos;
	unsigned char oldHandState;
	long err;
	long size;

// LINE 814:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 815:
	__asm        mov    err, 0;
// LINE 819:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00553F0D;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554DE7;
	__asm        add    esp, 4;
	__asm        mov    oldHandState, al;
// LINE 823:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 8;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x18];
	__asm        mov    pos, eax;
// LINE 824:
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   0x0055C711;
// LINE 825:
	__asm        mov    ecx, file;
	__asm        call   0x00552FFC;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00553F4A;
	__asm        jmp    near ptr 0x00554198;
	__asm        jmp    near ptr 0x00554147;
// LINE 826:
	__asm        add    pos, 4;
// LINE 827:
	__asm        lea    eax, size;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   0x0055C87A;
// LINE 828:
	__asm        cmp    size, 0x7A1200;
	__asm        jl     near ptr 0x00553F83;
	__asm        push   0x8C085;
	__asm        push   0x5BC094;
	__asm        push   0x33C;
	__asm        push   0x5BC0C8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 829:
	__asm        mov    ecx, file;
	__asm        call   0x00552FFC;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00553FA2;
	__asm        jmp    near ptr 0x00554193;
	__asm        jmp    near ptr 0x00554147;
// LINE 833:
	__asm        cmp    size, 0;
	__asm        jge    near ptr 0x00553FC8;
	__asm        push   0x8C085;
	__asm        push   0x5BC0F0;
	__asm        push   0x341;
	__asm        push   0x5BC108;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 835:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00554057;
// LINE 837:
	__asm        test   reinterpret_cast<uint32_t>(unpurge), 0xFFFF;
	__asm        jne    near ptr 0x00553FE7;
	__asm        jmp    near ptr 0x0055419D;
// LINE 839:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00554014;
// LINE 841:
	__asm        mov    err, 0;
// LINE 842:
	__asm        jmp    near ptr 0x0055418E;
	__asm        jmp    near ptr 0x00554147;
// LINE 844:
	__asm        jmp    near ptr 0x00554052;
// LINE 846:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554A3D;
	__asm        add    esp, 4;
// LINE 847:
	__asm        mov    eax, size;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554848;
	__asm        add    esp, 8;
// LINE 848:
	__asm        call   0x00554F06;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x00554052;
	__asm        jmp    near ptr 0x00554189;
	__asm        jmp    near ptr 0x00554147;
// LINE 851:
	__asm        jmp    near ptr 0x005540D3;
// LINE 855:
// Block start:
	long newState;
	__asm        mov    newState, 0;
// LINE 856:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 0x18;
	__asm        shr    eax, 0x18;
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00554076;
	__asm        or     newState, 0x40;
// LINE 858:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 0x18;
	__asm        shr    eax, 0x18;
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00554091;
	__asm        or     newState, 0x80;
// LINE 860:
	__asm        push   0;
	__asm        mov    eax, size;
	__asm        push   eax;
	__asm        call   0x00554759;
	__asm        add    esp, 8;
	__asm        mov    ecx, entry;
	__asm        mov    [ecx+8], eax;
// LINE 862:
	__asm        call   0x00554F06;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x005540C1;
	__asm        jmp    near ptr 0x00554184;
	__asm        jmp    near ptr 0x00554147;
// LINE 863:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554DE7;
	__asm        add    esp, 4;
	__asm        mov    oldHandState, al;
// LINE 868:
// Block start:
	unsigned char * block;
// Block end:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x005549E0;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
// LINE 869:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    near ptr 0x00554101;
	__asm        call   0x00554F06;
	__asm        mov    err, eax;
	__asm        jmp    near ptr 0x0055417F;
	__asm        jmp    near ptr 0x00554147;
// LINE 870:
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   0x0055C711;
// LINE 871:
	__asm        mov    ecx, file;
	__asm        call   0x00552FFC;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     near ptr 0x0055412C;
	__asm        jmp    near ptr 0x0055417A;
	__asm        jmp    near ptr 0x00554147;
// LINE 872:
	__asm        lea    eax, size;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   0x0055C69C;
// LINE 873:
	__asm        mov    ecx, file;
	__asm        call   0x00552FFC;
	__asm        mov    err, eax;
// LINE 876:
done:
// Block end:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x00554169;
	__asm        xor    eax, eax;
	__asm        mov    al, oldHandState;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x00554E62;
	__asm        add    esp, 8;
// LINE 877:
	__asm        mov    eax, err;
	__asm        mov    ecx, file;
	__asm        mov    [ecx+0x114], eax;
// LINE 878:
	__asm        jmp    near ptr 0x0055419D;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        jmp    near ptr 0x00554147;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x005541a4
unsigned long  ResMap::GetIndType(short index) {
	unsigned long type;

// LINE 882:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 883:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005541D0;
	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jge    near ptr 0x005541D7;
// LINE 885:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005541F7;
// LINE 888:
	__asm        mov    type, 0;
// LINE 890:
	__asm        movsx  eax, index;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    eax, [ecx+eax*8-8];
	__asm        mov    type, eax;
// LINE 891:
	__asm        mov    eax, type;
	__asm        jmp    near ptr 0x005541F7;
// LINE 892:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x005541fe
short  ResMap::Count(unsigned long type) {
	struct ResMap::TypeHead* typeList;
	short cnt;

// LINE 895:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 896:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    typeList, eax;
// LINE 897:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+6];
	__asm        mov    cnt, ax;
// LINE 899:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x0055424A;
// LINE 901:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x0055423D;
	__asm        jmp    near ptr 0x0055424A;
// LINE 902:
	__asm        add    typeList, 8;
// LINE 903:
	__asm        dec    cnt;
// LINE 904:
	__asm        jmp    near ptr 0x0055421E;
// LINE 905:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00554263;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        jmp    near ptr 0x0055426B;
// LINE 907:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0055426B;
// LINE 908:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00554272
unsigned long  ResMap::FindType(struct ResMap::Entry* entry) {
	struct ResMap::TypeHead* typeList;
	unsigned long type;
	short cnt;
	short numEntries;

// LINE 911:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 912:
	__asm        mov    type, 0;
// LINE 914:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    typeList, eax;
// LINE 915:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+6];
	__asm        mov    cnt, ax;
// LINE 919:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x005542FD;
// LINE 921:
// Block start:
	struct ResMap::Entry* entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 922:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    numEntries, ax;
// LINE 924:
	__asm        mov    eax, entryList;
	__asm        cmp    entry, eax;
	__asm        jb     near ptr 0x005542F0;
	__asm        movsx  eax, numEntries;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, entryList;
	__asm        cmp    eax, entry;
	__asm        jbe    near ptr 0x005542F0;
// LINE 925:
	__asm        mov    eax, typeList;
	__asm        mov    eax, [eax];
	__asm        jmp    near ptr 0x00554304;
// LINE 927:
	__asm        add    typeList, 8;
// LINE 928:
	__asm        dec    cnt;
// LINE 929:
// Block end:
	__asm        jmp    near ptr 0x00554299;
// LINE 930:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00554304;
// LINE 931:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055430b
struct ResMap::Entry *  ResMap::FindEntry(void * __ptr32 res) {
	struct ResMap::Entry* found;
	struct ResMap::Entry* srch;
	struct ResMap::Entry* last;

// LINE 934:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 935:
	__asm        mov    found, 0;
// LINE 936:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    srch, eax;
// LINE 937:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    last, eax;
// LINE 938:
	__asm        mov    eax, srch;
	__asm        cmp    last, eax;
	__asm        jbe    near ptr 0x0055436B;
// LINE 940:
	__asm        mov    eax, srch;
	__asm        mov    ecx, res;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    near ptr 0x00554362;
	__asm        mov    eax, srch;
	__asm        mov    found, eax;
	__asm        jmp    near ptr 0x0055436B;
// LINE 941:
	__asm        add    srch, 0xC;
// LINE 942:
	__asm        jmp    near ptr 0x0055433C;
// LINE 943:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x00554373;
// LINE 944:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055437a
struct ResMap::Entry *  ResMap::FindEntry(unsigned long type, short id) {
	struct ResMap::Entry* found;
	struct ResMap::TypeHead* typeList;
	short cnt;

// LINE 947:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 948:
	__asm        mov    found, 0;
// LINE 950:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    typeList, eax;
// LINE 951:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+6];
	__asm        mov    cnt, ax;
// LINE 953:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x005543CD;
// LINE 955:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x005543C0;
	__asm        jmp    near ptr 0x005543CD;
// LINE 956:
	__asm        add    typeList, 8;
// LINE 957:
	__asm        dec    cnt;
// LINE 958:
	__asm        jmp    near ptr 0x005543A1;
// LINE 959:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x0055442E;
// LINE 961:
// Block start:
	struct ResMap::Entry* entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 962:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 963:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x0055442E;
// LINE 965:
	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00554421;
	__asm        mov    eax, entryList;
	__asm        mov    found, eax;
	__asm        jmp    near ptr 0x0055442E;
// LINE 966:
	__asm        add    entryList, 0xC;
// LINE 967:
	__asm        dec    cnt;
// LINE 968:
	__asm        jmp    near ptr 0x005543F8;
// LINE 971:
// Block end:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x00554436;
// LINE 972:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055443d
struct ResMap::Entry *  ResMap::FindEntry(unsigned long type, unsigned char * name) {
	struct ResMap::Entry* found;
	struct ResMap::TypeHead* typeList;
	short cnt;

// LINE 975:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 976:
	__asm        mov    found, 0;
// LINE 978:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    typeList, eax;
// LINE 979:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+6];
	__asm        mov    cnt, ax;
// LINE 981:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00554490;
// LINE 983:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00554483;
	__asm        jmp    near ptr 0x00554490;
// LINE 984:
	__asm        add    typeList, 8;
// LINE 985:
	__asm        dec    cnt;
// LINE 986:
	__asm        jmp    near ptr 0x00554464;
// LINE 987:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00554527;
// LINE 989:
// Block start:
	struct ResMap::Entry* entryList;
	unsigned char * namePtr;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 990:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    namePtr, eax;
// LINE 991:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 992:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00554527;
// LINE 994:
	__asm        cmp    entryList, 0;
	__asm        je     near ptr 0x0055451A;
	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055451A;
// LINE 996:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        add    eax, namePtr;
	__asm        push   eax;
	__asm        call   0x005665B7;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055451A;
	__asm        mov    eax, entryList;
	__asm        mov    found, eax;
	__asm        jmp    near ptr 0x00554527;
// LINE 998:
	__asm        add    entryList, 0xC;
// LINE 999:
	__asm        dec    cnt;
// LINE 1000:
	__asm        jmp    near ptr 0x005544CA;
// LINE 1003:
// Block end:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x0055452F;
// LINE 1004:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00554536
struct ResMap::Entry *  ResMap::FindIndEntry(unsigned long type, short index) {
	struct ResMap::Entry* found;
	struct ResMap::TypeHead* typeList;
	short cnt;

// LINE 1007:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1008:
	__asm        mov    found, 0;
// LINE 1010:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    typeList, eax;
// LINE 1011:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+6];
	__asm        mov    cnt, ax;
// LINE 1013:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00554589;
// LINE 1015:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x0055457C;
	__asm        jmp    near ptr 0x00554589;
// LINE 1016:
	__asm        add    typeList, 8;
// LINE 1017:
	__asm        dec    cnt;
// LINE 1018:
	__asm        jmp    near ptr 0x0055455D;
// LINE 1019:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x005545E2;
// LINE 1021:
// Block start:
	struct ResMap::Entry* entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 1022:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 1024:
	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jl     near ptr 0x005545E2;
	__asm        movsx  eax, cnt;
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005545E2;
// LINE 1025:
	__asm        movsx  eax, index;
	__asm        lea    eax, [eax+eax*2-3];
	__asm        shl    eax, 2;
	__asm        add    eax, entryList;
	__asm        mov    found, eax;
// LINE 1028:
// Block end:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x005545EA;
// LINE 1029:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005545f1
void  ResMap::GetName(struct ResMap::Entry* entry, unsigned char * name) {
	unsigned char * namePtr;

// LINE 1032:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1033:
	__asm        mov    eax, name;
	__asm        mov    byte ptr [eax], 0;
// LINE 1035:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        mov    namePtr, eax;
// LINE 1037:
	__asm        mov    eax, entry;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00554645;
// LINE 1039:
	__asm        mov    eax, entry;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        add    namePtr, eax;
// LINE 1040:
	__asm        mov    eax, namePtr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, namePtr;
	__asm        push   eax;
	__asm        call   0x00554B76;
	__asm        add    esp, 0xC;
// LINE 1042:
	__asm        jmp    near ptr 0x0055464A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00554651
void  ResMap::SwapTypeHead(struct ResMap::TypeHead* typeHead) {
// LINE 1048:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1058:
	__asm        mov    eax, typeHead;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 1059:
	__asm        mov    eax, typeHead;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 1060:
	__asm        mov    eax, typeHead;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 1062:
	__asm        jmp    near ptr 0x00554686;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055468b
void  ResMap::SwapResEntry(struct ResMap::Entry* resEntry) {
	unsigned long dataLoc;
	unsigned char hiWord;
	unsigned char * bptr;
	unsigned char loWord;
	unsigned char midWord;

// LINE 1069:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1081:
	__asm        mov    eax, resEntry;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 1082:
	__asm        mov    eax, resEntry;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 1085:
	__asm        mov    eax, resEntry;
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 8;
	__asm        mov    dataLoc, eax;
// LINE 1088:
	__asm        lea    eax, dataLoc;
	__asm        mov    bptr, eax;
// LINE 1089:
	__asm        mov    eax, bptr;
	__asm        mov    al, [eax];
	__asm        mov    hiWord, al;
// LINE 1091:
	__asm        inc    bptr;
// LINE 1092:
	__asm        mov    eax, bptr;
	__asm        mov    al, [eax];
	__asm        mov    midWord, al;
// LINE 1094:
	__asm        inc    bptr;
// LINE 1095:
	__asm        mov    eax, bptr;
	__asm        mov    al, [eax];
	__asm        mov    loWord, al;
// LINE 1097:
	__asm        xor    eax, eax;
	__asm        mov    al, midWord;
	__asm        shl    eax, 8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, hiWord;
	__asm        shl    ecx, 0x10;
	__asm        or     eax, ecx;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loWord;
	__asm        or     eax, ecx;
	__asm        mov    dataLoc, eax;
// LINE 1098:
	__asm        mov    eax, resEntry;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, dataLoc;
	__asm        shl    ecx, 8;
	__asm        or     eax, ecx;
	__asm        mov    ecx, resEntry;
	__asm        mov    [ecx+4], eax;
// LINE 1100:
	__asm        jmp    near ptr 0x00554719;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 2:00006f30-00006fa7 Module: 199, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00024edc-0002512c Module: 199, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bbedc
// ResMap::sMaps
