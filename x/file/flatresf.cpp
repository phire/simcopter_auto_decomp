// Module: Flatresf.obj
// Source: C:\Copter\Source\X\File\Flatresf.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ class ResMap (forward reference);
// ResMap Class implementation not found

// Type: /*unpacked*/ class FlatResFile (forward reference);
// VTABLE: COPTER_D 0x00593508
class FlatResFile : public FlatFile
{ // not packed(0x11c bytes) TI: 0x330e
protected:
	/*+0x110*/ /*unpacked*/ class ResMap *fMap;
	/*+0x114*/ long fError;
	/*+0x118*/ short _alignPad; // 0x2 bytes
public:
	void FlatResFile();
	virtual void ~FlatResFile() /* override */;
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(/*unpacked*/ class FlatResFile*);
	virtual long Open(unsigned char *) /* override */;
	virtual long Open(char *) /* override */;
	long OpenFromName();
	virtual long Close() /* override */;
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: void * __ptr32;

// Type: short *;

// Type: long *;

// Type: unsigned char *;

// Type: long;

// Type: void;

// Type: unsigned char;

// Type: char *;

// Type: /*unpacked*/ class ResFile (forward reference);
// VTABLE: COPTER_D 0x00593518
class ResFile : public FlatResFile
{ // not packed(0x11c bytes) TI: 0x3334
public:
	long OpenFromOtherFile(/*unpacked*/ class ResFile*);
};

// Type: short;

// Type: unsigned long;

// Type: void (void * __ptr32, long);

// Type: /*unpacked*/ struct ResMap::Entry (forward reference);
struct ResMap::Entry{ // not packed(0xc bytes) TI: 0x3dee
	/*+0x0*/   short id; // 0x2 bytes
	/*+0x2*/   short nameOffset; // 0x2 bytes
	/*+0x4*/   LfBitfield @ 0x7104c:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
	[90m   LB.[95mTI[m = 0x3deb
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 flags; // 0x8 bytes
	/*+0x4*/   LfBitfield @ 0x71054:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x18
	[90m   LB.[95mTI[m = 0x3dec
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 dataLoc; // 0x18 bytes
	/*+0x8*/   void * __ptr32 hand;
};

// Type: /*unpacked*/ class StringSet;
class StringSet{ // not packed(0x10 bytes) TI: 0x3487
private:
	/*+0x0*/   /*unpacked*/ class ResFile *fResFile;
	/*+0x4*/   long fNumStrings;
	/*+0x8*/   void * __ptr32 fStringHandle;
	/*+0xc*/   unsigned char * fStringPtr;
	void LoadStrings(short);
	// calltype: NearC
	static void Swizzle(void * __ptr32, long);
public:
	void StringSet(/*unpacked*/ class ResFile*, short);
	void StringSet(/*unpacked*/ class ResFile*, short, short);
	void ~StringSet();
	unsigned char * GetString(short);
	short Count();
};

// Type: /*unpacked*/ struct ResMap::TypeHead (forward reference);
struct ResMap::TypeHead{ // not packed(0x8 bytes) TI: 0x3df0
	/*+0x0*/   unsigned long type;
	/*+0x4*/   short resCnt; // 0x2 bytes
	/*+0x6*/   short listOff; // 0x2 bytes
};

// Type: unsigned short;

// Type: /*unpacked*/ class FlatResFile;
// VTABLE: COPTER_D 0x00593508
class FlatResFile : public FlatFile
{ // not packed(0x11c bytes) TI: 0x330e
protected:
	/*+0x110*/ /*unpacked*/ class ResMap *fMap;
	/*+0x114*/ long fError;
	/*+0x118*/ short _alignPad; // 0x2 bytes
public:
	void FlatResFile();
	virtual void ~FlatResFile() /* override */;
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(/*unpacked*/ class FlatResFile*);
	virtual long Open(unsigned char *) /* override */;
	virtual long Open(char *) /* override */;
	long OpenFromName();
	virtual long Close() /* override */;
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: /*unpacked*/ class FlatFile;
// VTABLE: COPTER_D 0x00593620
class FlatFile{ // not packed(0x110 bytes) TI: 0x32f4
	enum /* __unnamed */ {
		kMaxNameLen = 255,
	};
protected:
	/*+0x4*/   /*unpacked*/ class FlatFile *fNext;
	/*+0x8*/   unsigned char fName[256]; // 0x100 bytes
	/*+0x108*/ long fFileID;
	/*+0x10c*/ /*unpacked*/ struct _iobuf *fFile;
	long UniqueID();
private:
	static /*unpacked*/ class FlatFile *sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	virtual void ~FlatFile(); // vtable+0x0
	// calltype: NearC
	static /*unpacked*/ class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(/*unpacked*/ class FlatFile*);
	virtual long Open(unsigned char *); // vtable+0x4
	virtual long Open(char *); // vtable+0x8
	virtual long Close(); // vtable+0xc
	void OpenFromOtherFile(/*unpacked*/ class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(signed char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	/*unpacked*/ struct _iobuf* GetFile();
};



// Contribution: 1:00151b10-0015371d Module: 199, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00552b10
void FlatResFile::LoadResMap(void * __ptr32 *newMap, short * numTypes, long * dataLoc) {
	/*bp-0x4*/   long err;
	/*bp-0x8*/   unsigned char * resMapPtr;

// LINE 101:
	newMap-> = 0x0;
// LINE 105:
// Block start:
	/*bp-0xc*/   long res1Off;
	/*bp-0x10*/  long miscSize;
	/*bp-0x2c*/  unsigned char miscBytes[28]; // 0x1c bytes
	/*bp-0x30*/  long mapSize;
	/*bp-0x34*/  long mapLoc;
	/*bp-0x38*/  long mapLocLess;
	miscSize = 0x1c;
// LINE 107:
	__asm        mov    ecx, this;
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T48;

	__asm        push   0x8C085;
	__asm        push   0x5BBEE0;
	__asm        push   0x6B;
	__asm        push   0x5BBEEC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 108:
_T48:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::SetPos;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T69;

	__asm        jmp    _T335;

	__asm        jmp    error;
// LINE 110:
_T69:
	__asm        lea    eax, res1Off;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Read4;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T8c;

	__asm        jmp    _T330;

	__asm        jmp    error;
// LINE 111:
_T8c:
	__asm        cmp    res1Off, 0x100;
	__asm        je     _Tb2;

	__asm        push   0x8C085;
	__asm        push   0x5BBF14;
	__asm        push   0x6F;
	__asm        push   0x5BBF30;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 113:
_Tb2:
	__asm        lea    eax, mapLoc;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Read4;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _Td5;

	__asm        jmp    _T32b;

	__asm        jmp    error;
// LINE 114:
_Td5:
	__asm        mov    eax, res1Off;
	__asm        cmp    mapLoc, eax;
	__asm        jle    _Tee;

	__asm        cmp    mapLoc, 0x600000;
	__asm        jl     _T107;
_Tee:
	__asm        push   0x8C085;
	__asm        push   0x5BBF58;
	__asm        push   0x72;
	__asm        push   0x5BBF68;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 116:
_T107:
	__asm        lea    eax, mapLocLess;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Read4;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T12a;

	__asm        jmp    _T326;

	__asm        jmp    error;
// LINE 117:
_T12a:
	__asm        mov    eax, mapLoc;
	__asm        sub    eax, res1Off;
	__asm        mov    mapLocLess, eax;
	__asm        cmp    mapLocLess, 0;
	__asm        jne    _T156;

	__asm        push   0x8C085;
	__asm        push   0x5BBF90;
	__asm        push   0x75;
	__asm        push   0x5BBFAC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 119:
_T156:
	__asm        lea    eax, mapSize;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Read4;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T179;

	__asm        jmp    _T321;

	__asm        jmp    error;
// LINE 120:
_T179:
	__asm        cmp    mapSize, 0;
	__asm        jle    _T190;

	__asm        cmp    mapSize, 0x600000;
	__asm        jl     _T1a9;
_T190:
	__asm        push   0x8C085;
	__asm        push   0x5BBFD4;
	__asm        push   0x78;
	__asm        push   0x5BBFE8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 122:
_T1a9:
	__asm        mov    eax, mapLoc;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::SetPos;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T1cc;

	__asm        jmp    _T31c;

	__asm        jmp    error;
// LINE 124:
_T1cc:
	__asm        lea    eax, miscSize;
	__asm        push   eax;
	__asm        lea    eax, miscBytes[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::ReadBlock;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T1f3;

	__asm        jmp    _T317;

	__asm        jmp    error;
// LINE 125:
_T1f3:
	mapSize -= 0x1c;
// LINE 127:
	dataLoc[0] = res1Off;
// LINE 130:
	__asm        mov    eax, numTypes;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Read2;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T222;

	__asm        jmp    _T312;

	__asm        jmp    error;
// LINE 131:
_T222:
	numTypes[0]++;
// LINE 132:
	mapSize -= 0x2;
// LINE 134:
	__asm        push   0;
	__asm        mov    eax, mapSize;
	__asm        push   eax;
	__asm        call   Memory::HAlloc;
	__asm        add    esp, 8;
	__asm        mov    ecx, newMap;
	__asm        mov    [ecx], eax;
// LINE 135:
	__asm        call   Memory::Error;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T25b;

	__asm        jmp    _T30d;

	__asm        jmp    error;
// LINE 136:
_T25b:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    resMapPtr, eax;
// LINE 137:
	__asm        call   Memory::Error;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T288;

	__asm        jmp    _T308;

	__asm        jmp    error;
// LINE 139:
_T288:
	__asm        lea    eax, mapSize;
	__asm        push   eax;
	__asm        mov    eax, resMapPtr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::ReadBlock;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T2af;

	__asm        jmp    _T303;

	__asm        jmp    error;
// LINE 141:
_T2af:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 143:
// Block end:
	this->fError = 0x0;
// LINE 144:
	return;
// LINE 147:
error:
	__asm        mov    eax, newMap;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T2f2;
// LINE 149:
	__asm        mov    eax, newMap;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   Memory::HFree;
	__asm        add    esp, 4;
// LINE 150:
	newMap-> = 0x0;
// LINE 152:
_T2f2:
	this->fError = err;
// LINE 153:
	return;
_T303:
	__asm        jmp    error;
_T308:
	__asm        jmp    error;
_T30d:
	__asm        jmp    error;
_T312:
	__asm        jmp    error;
_T317:
	__asm        jmp    error;
_T31c:
	__asm        jmp    error;
_T321:
	__asm        jmp    error;
_T326:
	__asm        jmp    error;
_T32b:
	__asm        jmp    error;
_T330:
	__asm        jmp    error;
_T335:
	__asm        jmp    error;
}

// FUNCTION: COPTER_D 0x00552e51
long FlatResFile::Open(char * name) {
// LINE 158:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Open;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 160:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T4a;
// LINE 162:
	this->fName[0] = 0x0;
// LINE 163:
	this->fFileID = 0x0;
// LINE 165:
	__asm        jmp    _T5f;
// LINE 167:
_T4a:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   ResMap::Get;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 170:
_T5f:
	return this->fError;
// LINE 172:
}

// FUNCTION: COPTER_D 0x00552ec5
long FlatResFile::Open(unsigned char * name) {
// LINE 179:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Open;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 181:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T4a;
// LINE 183:
	this->fName[0] = 0x0;
// LINE 184:
	this->fFileID = 0x0;
// LINE 186:
	__asm        jmp    _T5f;
// LINE 188:
_T4a:
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        call   ResMap::Get;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 191:
_T5f:
	return this->fError;
// LINE 192:
}

// FUNCTION: COPTER_D 0x00552f39
long ResFile::OpenFromOtherFile(/*unpacked*/ class ResFile *otherFile) {
// LINE 198:
	__asm        mov    eax, otherFile;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   FlatFile::OpenFromOtherFile;
// LINE 199:
	return 0x0;
// LINE 200:
}

// FUNCTION: COPTER_D 0x00552f5f
long FlatResFile::Close() {
// LINE 207:
	__asm        mov    ecx, this;
	__asm        call   FlatFile::Close;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x114], eax;
// LINE 208:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        jne    _T58;
// LINE 210:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T4b;

	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::Release;
// LINE 211:
_T4b:
	this->fMap = 0x0;
// LINE 213:
_T58:
	return this->fError;
// LINE 214:
}

// FUNCTION: COPTER_D 0x00552fca
short FlatResFile::CheckForLeaks() {
	/*bp-0x4*/   short total;

// LINE 260:
	__asm        call   ResMap::CheckForLeaks;
	__asm        mov    total, ax;
// LINE 261:
	__asm        call   FlatFile::CheckForLeaks;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, total;
	__asm        add    eax, ecx;
	__asm        mov    total, ax;
// LINE 262:
	return total;
// LINE 263:
}

// FUNCTION: COPTER_D 0x00552ffc
long FlatResFile::GetError() {
// LINE 270:
	return this->fError;
// LINE 271:
}

// FUNCTION: COPTER_D 0x0055301b
void FlatResFile::~FlatResFile() {
	// Function registers exception cleanup function at 0x00553086

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593508;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 278:
	__asm        mov    ecx, this;
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T4c;

	__asm        mov    ecx, this;
	__asm        call   FlatResFile::Close;
// LINE 279:
_T4c:
	__asm        jmp    _T51;
_T51:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   _L27084;
	__asm        jmp    __RETURN;
_L27084:
	__asm        mov    ecx, this;
	__asm        call   FlatFile::~FlatFile;
	__asm        ret;
_L27083:
// No fallthrough
	__asm        mov    eax, 0x595F30;
	__asm        jmp    near ptr 0x0056F590;
__RETURN:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x0055309e
short FlatResFile::CountTypes() {
// LINE 287:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T53;

	return 0x0;
// LINE 289:
_T53:
	__asm        jmp    _T58;
_T58:
	return this->fMap-><ResMap+0x06:2>;
// LINE 304:
}

// FUNCTION: COPTER_D 0x0055310d
unsigned long FlatResFile::GetIndType(short index) {
	/*bp-0x4*/   unsigned long type;

// LINE 312:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T52;

	return 0x0;
// LINE 314:
_T52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::GetIndType;
	__asm        mov    type, eax;
// LINE 316:
	__asm        cmp    type, 0;
	__asm        jne    _T7e;

	this->fError = 0xffffff9c;
// LINE 317:
_T7e:
	return type;
// LINE 318:
}

// FUNCTION: COPTER_D 0x0055319a
short FlatResFile::Count(unsigned long type) {
// LINE 326:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T53;

	return 0x0;
// LINE 328:
_T53:
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::Count;
	__asm        jmp    __RETURN;
// LINE 329:
__RETURN:
}

// FUNCTION: COPTER_D 0x0055320b
void * __ptr32 FlatResFile::GetByID(unsigned long type, short id, void (*Swizzler)(void * __ptr32, long)) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 337:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T52;

	return 0x0;
// LINE 339:
_T52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 341:
	__asm        cmp    entry, 0;
	__asm        jne    _T89;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    __RETURN;
// LINE 343:
_T89:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T100;
// LINE 345:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::LoadEntry;
// LINE 347:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T100;

	__asm        cmp    Swizzler, 0;
	__asm        je     _T100;
// LINE 349:
// Block start:
	/*bp-0x8*/   unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 350:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetSize;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 351:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 355:
// Block end:
_T100:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    __RETURN;
// LINE 356:
__RETURN:
}

// FUNCTION: COPTER_D 0x0055331d
void * __ptr32 FlatResFile::GetByName(unsigned long type, unsigned char * name, void (*Swizzler)(void * __ptr32, long)) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 364:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T52;

	return 0x0;
// LINE 366:
_T52:
	__asm        mov    eax, name;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jne    _T75;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9F;
	__asm        xor    eax, eax;
	__asm        jmp    __RETURN;
// LINE 368:
_T75:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 370:
	__asm        cmp    entry, 0;
	__asm        jne    _Tac;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    __RETURN;
// LINE 372:
_Tac:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T123;
// LINE 374:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::LoadEntry;
// LINE 376:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T123;

	__asm        cmp    Swizzler, 0;
	__asm        je     _T123;
// LINE 378:
// Block start:
	/*bp-0x8*/   unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 379:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetSize;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 380:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 384:
// Block end:
_T123:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    __RETURN;
// LINE 385:
__RETURN:
}

// FUNCTION: COPTER_D 0x00553452
void * __ptr32 FlatResFile::GetByIndex(unsigned long type, short index, void (*Swizzler)(void * __ptr32, long)) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 393:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T52;

	return 0x0;
// LINE 395:
_T52:
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        mov    eax, type;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindIndEntry;
	__asm        mov    entry, eax;
// LINE 397:
	__asm        cmp    entry, 0;
	__asm        jne    _T89;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        xor    eax, eax;
	__asm        jmp    __RETURN;
// LINE 399:
_T89:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T100;
// LINE 401:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::LoadEntry;
// LINE 403:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T100;

	__asm        cmp    Swizzler, 0;
	__asm        je     _T100;
// LINE 405:
// Block start:
	/*bp-0x8*/   unsigned char * data;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    data, eax;
// LINE 406:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetSize;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        call   Swizzler;
	__asm        add    esp, 8;
// LINE 407:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 411:
// Block end:
_T100:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        jmp    __RETURN;
// LINE 412:
__RETURN:
}

// FUNCTION: COPTER_D 0x00553564
void FlatResFile::GetName(void * __ptr32 res, unsigned char * name) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 420:
	name[0] = 0x0;
// LINE 422:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T34;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T41;
_T34:
	this->fError = 0xffffffcf;
_T41:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T56;

	return;
// LINE 424:
_T56:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 426:
	__asm        cmp    entry, 0;
	__asm        jne    _T87;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9E;
	__asm        jmp    __RETURN;
// LINE 428:
_T87:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::GetName;
// LINE 429:
	return;
__RETURN:
}

// FUNCTION: COPTER_D 0x0055360d
void FlatResFile::GetID(void * __ptr32 res, short * id) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 437:
	id[0] = 0xffff;
// LINE 439:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T36;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T43;
_T36:
	this->fError = 0xffffffcf;
_T43:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T58;

	return;
// LINE 441:
_T58:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 443:
	__asm        cmp    entry, 0;
	__asm        jne    _T89;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    __RETURN;
// LINE 445:
_T89:
	id[0] = entry->id;
// LINE 446:
	return;
__RETURN:
}

// FUNCTION: COPTER_D 0x005536ae
unsigned long FlatResFile::GetResType(void * __ptr32 res) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;
	/*bp-0x8*/   unsigned long returnType;

// LINE 450:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T52;

	return 0x0;
// LINE 452:
_T52:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 454:
	__asm        cmp    entry, 0;
	__asm        jne    _T85;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        xor    eax, eax;
	__asm        jmp    __RETURN;
// LINE 456:
_T85:
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindType;
	__asm        mov    returnType, eax;
// LINE 457:
	__asm        cmp    returnType, 0;
	__asm        jne    _Tc0;

	__asm        push   0x8C085;
	__asm        push   0x5BC010;
	__asm        push   0x1C9;
	__asm        push   0x5BC028;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 458:
_Tc0:
	__asm        cmp    returnType, 0;
	__asm        jne    _Td7;

	this->fError = 0xffffff9d;
// LINE 460:
_Td7:
	return returnType;
// LINE 461:
__RETURN:
}

// FUNCTION: COPTER_D 0x00553794
void FlatResFile::Release(void * __ptr32 res) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 469:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T50;

	return;
// LINE 471:
_T50:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 473:
	__asm        cmp    entry, 0;
	__asm        je     _T7c;

	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T81;
_T7c:
	return;
// LINE 475:
_T81:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HFree;
	__asm        add    esp, 4;
// LINE 476:
	__asm        mov    eax, entry;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 489:
	return;
}

// FUNCTION: COPTER_D 0x0055383a
void FlatResFile::Detach(void * __ptr32 res) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 497:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T50;

	return;
// LINE 499:
_T50:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 501:
	__asm        cmp    entry, 0;
	__asm        jne    _T81;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    __RETURN;
// LINE 503:
_T81:
	__asm        mov    eax, entry;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 515:
	return;
__RETURN:
}

// FUNCTION: COPTER_D 0x005538d1
void FlatResFile::Load(void * __ptr32 res) {
	/*bp-0x4*/   unsigned char * ptr;
	/*bp-0x8*/   unsigned char oldState;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *entry;

// LINE 523:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x110], 0;
	__asm        je     _T2e;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0;
	__asm        jmp    _T3b;
_T2e:
	this->fError = 0xffffffcf;
_T3b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x114], 0;
	__asm        je     _T50;

	return;
// LINE 525:
_T50:
	__asm        mov    eax, res;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::FindEntry;
	__asm        mov    entry, eax;
// LINE 527:
	__asm        cmp    entry, 0;
	__asm        jne    _T81;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x114], 0xFFFFFF9D;
	__asm        jmp    __RETURN;
// LINE 529:
_T81:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetState;
	__asm        add    esp, 4;
	__asm        mov    oldState, al;
// LINE 530:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    ptr, eax;
// LINE 531:
	__asm        cmp    ptr, 0;
	__asm        je     _Tc9;
// LINE 533:
	__asm        xor    eax, eax;
	__asm        mov    al, oldState;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HSetState;
	__asm        add    esp, 8;
// LINE 534:
	return;
// LINE 537:
_Tc9:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x110];
	__asm        call   ResMap::LoadEntry;
// LINE 538:
	return;
__RETURN:
}

// FUNCTION: COPTER_D 0x005539be
void FlatResFile::GetString(unsigned char * str, short resID, short index) {
	/*bp-0x1c*/  /*unpacked*/ class StringSet tempStrs; // 0x10 bytes

	// Function registers exception cleanup function at 0x00553a6a
// LINE 596:
	__asm        mov    eax, reinterpret_cast<uint32_t>(resID);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   StringSet::StringSet;
	__asm        mov    dword ptr [ebp-4], 0;
// LINE 598:
	str[0] = 0x0;
// LINE 599:
	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jl     _T92;

	__asm        jmp    _T50;
_T50:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(tempStrs.fNumStrings);
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     _T92;
// LINE 601:
// Block start:
	/*bp-0x20*/  unsigned char * foundStr;
	__asm        mov    eax, reinterpret_cast<uint32_t>(index);
	__asm        push   eax;
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   StringSet::GetString;
	__asm        mov    foundStr, eax;
// LINE 602:
	__asm        cmp    foundStr, 0;
	__asm        je     _T92;

	__asm        mov    eax, foundStr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, str;
	__asm        push   eax;
	__asm        mov    eax, foundStr;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 604:
// Block end:
_T92:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   _L27094;
	__asm        jmp    __RETURN;
_L27094:
	__asm        lea    ecx, tempStrs.fResFile;
	__asm        call   StringSet::~StringSet;
	__asm        ret;
_L27093:
// No fallthrough
	__asm        mov    eax, 0x595F58;
	__asm        jmp    near ptr 0x0056F590;
__RETURN:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x00553a84
void ResMap::ResMap(short refNum, short numTypes, void * __ptr32 resMap, unsigned char * resMapPtr, long dataLoc) {
	/*bp-0x4*/   unsigned char * mapStart;
	/*bp-0x8*/   short resCnt;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *resList;
	/*bp-0x10*/  short total;
	/*bp-0x14*/  /*unpacked*/ struct ResMap::TypeHead *typeList;
	/*bp-0x18*/  short typeCnt;

// LINE 672:
	this-><ResMap+0x08:4> = resMap;
// LINE 673:
	this-><ResMap+0x06:2> = numTypes;
// LINE 674:
	this-><ResMap+0x04:2> = refNum;
// LINE 675:
	this-><ResMap+0x18:4> = dataLoc;
// LINE 676:
	this-><ResMap+0x1c:4> = 0x1;
// LINE 677:
	this-><ResMap+0x0c:4> = resMapPtr;
// LINE 688:
	mapStart = this-><ResMap+0x0c:4>;
// LINE 690:
	typeList = mapStart;
// LINE 691:
	__asm        mov    typeCnt, 0;
	__asm        mov    total, 0;
	__asm        jmp    _T6f;
_T67:
	__asm        inc    typeCnt;
	__asm        add    typeList, 8;
_T6f:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, typeCnt;
	__asm        cmp    eax, ecx;
	__asm        jle    _Ta5;
// LINE 693:
	__asm        mov    eax, typeList;
	__asm        push   eax;
	__asm        call   ResMap::SwapTypeHead;
	__asm        add    esp, 4;
// LINE 694:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        movsx  ecx, total;
	__asm        add    eax, ecx;
	__asm        inc    eax;
	__asm        mov    total, ax;
// LINE 695:
	__asm        jmp    _T67;
// LINE 697:
_Ta5:
	this-><ResMap+0x10:4> = (typeList - this-><ResMap+0x0c:4>);
// LINE 700:
	resList = (this-><ResMap+0x10:4> + mapStart);
// LINE 701:
	__asm        mov    resCnt, 0;
	__asm        jmp    _Td3;
_Tcb:
	__asm        inc    resCnt;
	__asm        add    resList, 0xC;
_Td3:
	__asm        movsx  eax, resCnt;
	__asm        movsx  ecx, total;
	__asm        cmp    eax, ecx;
	__asm        jge    _Tfe;
// LINE 703:
	__asm        mov    eax, resList;
	__asm        push   eax;
	__asm        call   ResMap::SwapResEntry;
	__asm        add    esp, 4;
// LINE 704:
	__asm        mov    eax, resList;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 705:
	__asm        jmp    _Tcb;
// LINE 721:
_Tfe:
	this-><ResMap+0x14:4> = (resList - this-><ResMap+0x0c:4>);
// LINE 722:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00553ba0
void ResMap::~ResMap() {
	/*bp-0x4*/   unsigned char hState;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::Entry *last;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *srch;

// LINE 729:
	srch = (this-><ResMap+0x10:4> + this-><ResMap+0x0c:4>);
// LINE 730:
	last = (this-><ResMap+0x14:4> + this-><ResMap+0x0c:4>);
// LINE 732:
_T2a:
	__asm        mov    eax, srch;
	__asm        cmp    last, eax;
	__asm        jbe    _T93;
// LINE 734:
	__asm        mov    eax, srch;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T8a;
// LINE 736:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetState;
	__asm        add    esp, 4;
	__asm        mov    hState, al;
// LINE 737:
	__asm        xor    eax, eax;
	__asm        mov    al, hState;
	__asm        test   al, 0x80;
	__asm        je     _T71;
// LINE 738:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 739:
_T71:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HFree;
	__asm        add    esp, 4;
// LINE 740:
	__asm        mov    eax, srch;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 742:
_T8a:
	srch += 0xc;
// LINE 743:
	__asm        jmp    _T2a;
// LINE 745:
_T93:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 746:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HFree;
	__asm        add    esp, 4;
// LINE 747:
	return;
}

// FUNCTION: COPTER_D 0x00553c5b
long ResMap::Get(/*unpacked*/ class FlatResFile *fromFile) {
	/*bp-0x10*/  unsigned char * resPtr;
	/*bp-0x14*/  void * __ptr32 newMap;
	/*bp-0x18*/  long dataLoc;
	/*bp-0x1c*/  short numTypes;
	/*bp-0x20*/  /*unpacked*/ class ResMap *srch;

	// Function registers exception cleanup function at 0x00553db3
// LINE 755:
	__asm        mov    eax, ResMap::sMaps;
	__asm        mov    srch, eax;
	__asm        jmp    _T33;
_T2b:
	srch = srch-><ResMap+0x00:4>;
_T33:
	__asm        cmp    srch, 0;
	__asm        je     _T76;
// LINE 756:
	__asm        jmp    _T42;
_T42:
	__asm        mov    eax, srch;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        mov    ecx, fromFile;
	__asm        cmp    eax, [ecx+0x108];
	__asm        jne    _T71;
// LINE 758:
	srch-><ResMap+0x1c:4>++;
// LINE 759:
	fromFile->fMap = srch;
// LINE 760:
	return 0x0;
// LINE 763:
_T71:
	__asm        jmp    _T2b;
// LINE 768:
_T76:
	__asm        lea    eax, dataLoc;
	__asm        push   eax;
	__asm        lea    eax, numTypes;
	__asm        push   eax;
	__asm        lea    eax, newMap;
	__asm        push   eax;
	__asm        mov    ecx, fromFile;
	__asm        call   FlatResFile::LoadResMap;
// LINE 769:
	__asm        mov    ecx, fromFile;
	__asm        call   FlatResFile::GetError;
	__asm        test   eax, eax;
	__asm        je     _Ta7;

	__asm        mov    ecx, fromFile;
	__asm        call   FlatResFile::GetError;
	__asm        jmp    __RETURN;
// LINE 771:
_Ta7:
	__asm        mov    eax, newMap;
	__asm        push   eax;
	__asm        call   Memory::Stash;
	__asm        add    esp, 4;
	__asm        mov    resPtr, eax;
// LINE 772:
	__asm        cmp    resPtr, 0;
	__asm        jne    _Tca;

	__asm        call   Memory::Error;
	__asm        jmp    __RETURN;
// LINE 774:
_Tca:
	__asm        push   0x20;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T112;

	__asm        mov    eax, dataLoc;
	__asm        push   eax;
	__asm        mov    eax, resPtr;
	__asm        push   eax;
	__asm        mov    eax, newMap;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(numTypes);
	__asm        push   eax;
	__asm        mov    eax, fromFile;
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x24];
	__asm        call   ResMap::ResMap;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T119;
_T112:
	__asm        mov    dword ptr [ebp-0x28], 0;
_T119:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    srch, eax;
// LINE 775:
	fromFile->fMap = srch;
// LINE 776:
	srch-><ResMap+0x00:4> = ResMap::sMaps;
// LINE 777:
	ResMap::sMaps = srch;
// LINE 778:
	return 0x0;
// LINE 779:
_L27102:
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L27101:
// No fallthrough
	__asm        mov    eax, 0x595F80;
	__asm        jmp    near ptr 0x0056F590;
__RETURN:
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
}

// FUNCTION: COPTER_D 0x00553dcc
void ResMap::Release() {
// LINE 786:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jg     _T35;

	__asm        push   0x8C085;
	__asm        push   0x5BC050;
	__asm        push   0x312;
	__asm        push   0x5BC06C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 787:
_T35:
	this-><ResMap+0x1c:4>--;
// LINE 788:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0;
	__asm        jne    _Tc0;
// LINE 791:
// Block start:
	/*bp-0x4*/   /*unpacked*/ class ResMap **rmv;
	__asm        mov    rmv, 0x5BBEDC;
	__asm        jmp    _T5c;
_T54:
	rmv = rmv->;
_T5c:
	__asm        mov    eax, rmv;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T8c;
// LINE 792:
	__asm        mov    eax, rmv;
	__asm        mov    ecx, this;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T87;

	__asm        mov    eax, rmv;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, rmv;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T8c;
// LINE 794:
_T87:
	__asm        jmp    _T54;
_T8c:
	__asm        mov    eax, this;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Tc0;

	__asm        mov    ecx, [ebp-8];
	__asm        call   ResMap::~ResMap;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _Tbb;
_Tbb:
	__asm        jmp    _Tc0;
// LINE 796:
// Block end:
_Tc0:
	return;
}

// FUNCTION: COPTER_D 0x00553e96
short ResMap::CheckForLeaks() {
	/*bp-0x4*/   short total;
	/*bp-0x8*/   /*unpacked*/ class ResMap *srch;

// LINE 803:
	total = 0x0;
// LINE 804:
	__asm        mov    eax, ResMap::sMaps;
	__asm        mov    srch, eax;
	__asm        jmp    _T24;
_T1c:
	srch = srch-><ResMap+0x00:4>;
_T24:
	__asm        cmp    srch, 0;
	__asm        je     _T37;
// LINE 805:
	__asm        inc    total;
	__asm        jmp    _T1c;
// LINE 806:
_T37:
	return total;
// LINE 807:
}

// FUNCTION: COPTER_D 0x00553edb
void ResMap::LoadEntry(/*unpacked*/ struct ResMap::Entry *entry, /*unpacked*/ class FlatResFile *file, unsigned short unpurge) {
	/*bp-0x4*/   long size;
	/*bp-0x8*/   long err;
	/*bp-0xc*/   unsigned char oldHandState;
	/*bp-0x10*/  long pos;

// LINE 815:
	err = 0x0;
// LINE 819:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T32;

	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetState;
	__asm        add    esp, 4;
	__asm        mov    oldHandState, al;
// LINE 823:
_T32:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 8;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x18];
	__asm        mov    pos, eax;
// LINE 824:
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   FlatFile::SetPos;
// LINE 825:
	__asm        mov    ecx, file;
	__asm        call   FlatResFile::GetError;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T6f;

	__asm        jmp    _T2bd;

	__asm        jmp    done;
// LINE 826:
_T6f:
	pos += 0x4;
// LINE 827:
	__asm        lea    eax, size;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   FlatFile::Read4;
// LINE 828:
	__asm        cmp    size, 0x7A1200;
	__asm        jl     _Ta8;

	__asm        push   0x8C085;
	__asm        push   0x5BC094;
	__asm        push   0x33C;
	__asm        push   0x5BC0C8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 829:
_Ta8:
	__asm        mov    ecx, file;
	__asm        call   FlatResFile::GetError;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _Tc7;

	__asm        jmp    _T2b8;

	__asm        jmp    done;
// LINE 833:
_Tc7:
	__asm        cmp    size, 0;
	__asm        jge    _Ted;

	__asm        push   0x8C085;
	__asm        push   0x5BC0F0;
	__asm        push   0x341;
	__asm        push   0x5BC108;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 835:
_Ted:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T17c;
// LINE 837:
	__asm        test   reinterpret_cast<uint32_t>(unpurge), 0xFFFF;
	__asm        jne    _T10c;

	return;
// LINE 839:
_T10c:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T139;
// LINE 841:
	err = 0x0;
// LINE 842:
	__asm        jmp    _T2b3;

	__asm        jmp    done;
// LINE 844:
	__asm        jmp    _T177;
// LINE 846:
_T139:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnlock;
	__asm        add    esp, 4;
// LINE 847:
	__asm        mov    eax, size;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HUnpurge;
	__asm        add    esp, 8;
// LINE 848:
	__asm        call   Memory::Error;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T177;

	__asm        jmp    _T2ae;

	__asm        jmp    done;
// LINE 851:
_T177:
	__asm        jmp    _T1f8;
// LINE 855:
// Block start:
	/*bp-0x14*/  long newState;
_T17c:
	newState = 0x0;
// LINE 856:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 0x18;
	__asm        shr    eax, 0x18;
	__asm        test   al, 0x20;
	__asm        je     _T19b;

	__asm        or     newState, 0x40;
// LINE 858:
_T19b:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 0x18;
	__asm        shr    eax, 0x18;
	__asm        test   al, 0x10;
	__asm        je     _T1b6;

	__asm        or     newState, 0x80;
// LINE 860:
_T1b6:
	__asm        push   0;
	__asm        mov    eax, size;
	__asm        push   eax;
	__asm        call   Memory::HAlloc;
	__asm        add    esp, 8;
	__asm        mov    ecx, entry;
	__asm        mov    [ecx+8], eax;
// LINE 862:
	__asm        call   Memory::Error;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T1e6;

	__asm        jmp    _T2a9;

	__asm        jmp    done;
// LINE 863:
_T1e6:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HGetState;
	__asm        add    esp, 4;
	__asm        mov    oldHandState, al;
// LINE 868:
// Block end:
// Block start:
	/*bp-0x18*/  unsigned char * block;
_T1f8:
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HLock;
	__asm        add    esp, 4;
	__asm        mov    block, eax;
// LINE 869:
	__asm        cmp    block, 0;
	__asm        jne    _T226;

	__asm        call   Memory::Error;
	__asm        mov    err, eax;
	__asm        jmp    _T2a4;

	__asm        jmp    done;
// LINE 870:
_T226:
	__asm        mov    eax, pos;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   FlatFile::SetPos;
// LINE 871:
	__asm        mov    ecx, file;
	__asm        call   FlatResFile::GetError;
	__asm        mov    err, eax;
	__asm        cmp    err, 0;
	__asm        je     _T251;

	__asm        jmp    _T29f;

	__asm        jmp    done;
// LINE 872:
_T251:
	__asm        lea    eax, size;
	__asm        push   eax;
	__asm        mov    eax, block;
	__asm        push   eax;
	__asm        mov    ecx, file;
	__asm        call   FlatFile::ReadBlock;
// LINE 873:
	__asm        mov    ecx, file;
	__asm        call   FlatResFile::GetError;
	__asm        mov    err, eax;
// LINE 876:
done:
// Block end:
	__asm        mov    eax, entry;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T28e;

	__asm        xor    eax, eax;
	__asm        mov    al, oldHandState;
	__asm        push   eax;
	__asm        mov    eax, entry;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   Memory::HSetState;
	__asm        add    esp, 8;
// LINE 877:
_T28e:
	file->fError = err;
// LINE 878:
	return;
_T29f:
	__asm        jmp    done;
_T2a4:
	__asm        jmp    done;
_T2a9:
	__asm        jmp    done;
_T2ae:
	__asm        jmp    done;
_T2b3:
	__asm        jmp    done;
_T2b8:
	__asm        jmp    done;
_T2bd:
	__asm        jmp    done;
}

// FUNCTION: COPTER_D 0x005541a4
unsigned long ResMap::GetIndType(short index) {
	/*bp-0x4*/   unsigned long type;

// LINE 883:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     _T2c;

	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jge    _T33;
// LINE 885:
_T2c:
	return 0x0;
// LINE 888:
_T33:
	type = 0x0;
// LINE 890:
	__asm        movsx  eax, index;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xC];
	__asm        mov    eax, [ecx+eax*8-8];
	__asm        mov    type, eax;
// LINE 891:
	return type;
// LINE 892:
}

// FUNCTION: COPTER_D 0x005541fe
short ResMap::Count(unsigned long type) {
	/*bp-0x4*/   short cnt;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::TypeHead *typeList;

// LINE 896:
	typeList = this-><ResMap+0x0c:4>;
// LINE 897:
	cnt = this-><ResMap+0x06:2>;
// LINE 899:
_T20:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T4c;
// LINE 901:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T3f;

	__asm        jmp    _T4c;
// LINE 902:
_T3f:
	typeList += 0x8;
// LINE 903:
	cnt--;
// LINE 904:
	__asm        jmp    _T20;
// LINE 905:
_T4c:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T65;

	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        jmp    __RETURN;
// LINE 907:
_T65:
	return 0x0;
// LINE 908:
__RETURN:
}

// FUNCTION: COPTER_D 0x00554272
unsigned long ResMap::FindType(/*unpacked*/ struct ResMap::Entry *entry) {
	/*bp-0x4*/   short numEntries;
	/*bp-0x8*/   short cnt;
	/*bp-0xc*/   unsigned long type;
	/*bp-0x10*/  /*unpacked*/ struct ResMap::TypeHead *typeList;

// LINE 912:
	type = 0x0;
// LINE 914:
	typeList = this-><ResMap+0x0c:4>;
// LINE 915:
	cnt = this-><ResMap+0x06:2>;
// LINE 919:
_T27:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T8b;
// LINE 921:
// Block start:
	/*bp-0x14*/  /*unpacked*/ struct ResMap::Entry *entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 922:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    numEntries, ax;
// LINE 924:
	__asm        mov    eax, entryList;
	__asm        cmp    entry, eax;
	__asm        jb     _T7e;

	__asm        movsx  eax, numEntries;
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, entryList;
	__asm        cmp    eax, entry;
	__asm        jbe    _T7e;
// LINE 925:
	return typeList->type;
// LINE 927:
_T7e:
	typeList += 0x8;
// LINE 928:
	cnt--;
// LINE 929:
// Block end:
	__asm        jmp    _T27;
// LINE 930:
_T8b:
	return 0x0;
// LINE 931:
}

// FUNCTION: COPTER_D 0x0055430b
struct ResMap::Entry * ResMap::FindEntry(void * __ptr32 res) {
	/*bp-0x4*/   /*unpacked*/ struct ResMap::Entry *last;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::Entry *srch;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *found;

// LINE 935:
	found = 0x0;
// LINE 936:
	srch = (this-><ResMap+0x10:4> + this-><ResMap+0x0c:4>);
// LINE 937:
	last = (this-><ResMap+0x14:4> + this-><ResMap+0x0c:4>);
// LINE 938:
_T31:
	__asm        mov    eax, srch;
	__asm        cmp    last, eax;
	__asm        jbe    _T60;
// LINE 940:
	__asm        mov    eax, srch;
	__asm        mov    ecx, res;
	__asm        cmp    [eax+8], ecx;
	__asm        jne    _T57;

	__asm        mov    eax, srch;
	__asm        mov    found, eax;
	__asm        jmp    _T60;
// LINE 941:
_T57:
	srch += 0xc;
// LINE 942:
	__asm        jmp    _T31;
// LINE 943:
_T60:
	return found;
// LINE 944:
}

// FUNCTION: COPTER_D 0x0055437a
struct ResMap::Entry * ResMap::FindEntry(unsigned long type, short id) {
	/*bp-0x4*/   short cnt;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::TypeHead *typeList;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *found;

// LINE 948:
	found = 0x0;
// LINE 950:
	typeList = this-><ResMap+0x0c:4>;
// LINE 951:
	cnt = this-><ResMap+0x06:2>;
// LINE 953:
_T27:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T53;
// LINE 955:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T46;

	__asm        jmp    _T53;
// LINE 956:
_T46:
	typeList += 0x8;
// LINE 957:
	cnt--;
// LINE 958:
	__asm        jmp    _T27;
// LINE 959:
_T53:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _Tb4;
// LINE 961:
// Block start:
	/*bp-0x10*/  /*unpacked*/ struct ResMap::Entry *entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 962:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 963:
_T7e:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _Tb4;
// LINE 965:
	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        jne    _Ta7;

	__asm        mov    eax, entryList;
	__asm        mov    found, eax;
	__asm        jmp    _Tb4;
// LINE 966:
_Ta7:
	entryList += 0xc;
// LINE 967:
	cnt--;
// LINE 968:
	__asm        jmp    _T7e;
// LINE 971:
// Block end:
_Tb4:
	return found;
// LINE 972:
}

// FUNCTION: COPTER_D 0x0055443d
struct ResMap::Entry * ResMap::FindEntry(unsigned long type, unsigned char * name) {
	/*bp-0x4*/   short cnt;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::TypeHead *typeList;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *found;

// LINE 976:
	found = 0x0;
// LINE 978:
	typeList = this-><ResMap+0x0c:4>;
// LINE 979:
	cnt = this-><ResMap+0x06:2>;
// LINE 981:
_T27:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T53;
// LINE 983:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T46;

	__asm        jmp    _T53;
// LINE 984:
_T46:
	typeList += 0x8;
// LINE 985:
	cnt--;
// LINE 986:
	__asm        jmp    _T27;
// LINE 987:
_T53:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _Tea;
// LINE 989:
// Block start:
	/*bp-0x10*/  unsigned char * namePtr;
	/*bp-0x14*/  /*unpacked*/ struct ResMap::Entry *entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 990:
	namePtr = (this-><ResMap+0x14:4> + this-><ResMap+0x0c:4>);
// LINE 991:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 992:
_T8d:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _Tea;
// LINE 994:
	__asm        cmp    entryList, 0;
	__asm        je     _Tdd;

	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Tdd;
// LINE 996:
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, entryList;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        add    eax, namePtr;
	__asm        push   eax;
	__asm        call   PStrCompare;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _Tdd;

	__asm        mov    eax, entryList;
	__asm        mov    found, eax;
	__asm        jmp    _Tea;
// LINE 998:
_Tdd:
	entryList += 0xc;
// LINE 999:
	cnt--;
// LINE 1000:
	__asm        jmp    _T8d;
// LINE 1003:
// Block end:
_Tea:
	return found;
// LINE 1004:
}

// FUNCTION: COPTER_D 0x00554536
struct ResMap::Entry * ResMap::FindIndEntry(unsigned long type, short index) {
	/*bp-0x4*/   short cnt;
	/*bp-0x8*/   /*unpacked*/ struct ResMap::TypeHead *typeList;
	/*bp-0xc*/   /*unpacked*/ struct ResMap::Entry *found;

// LINE 1008:
	found = 0x0;
// LINE 1010:
	typeList = this-><ResMap+0x0c:4>;
// LINE 1011:
	cnt = this-><ResMap+0x06:2>;
// LINE 1013:
_T27:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _T53;
// LINE 1015:
	__asm        mov    eax, typeList;
	__asm        mov    ecx, type;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T46;

	__asm        jmp    _T53;
// LINE 1016:
_T46:
	typeList += 0x8;
// LINE 1017:
	cnt--;
// LINE 1018:
	__asm        jmp    _T27;
// LINE 1019:
_T53:
	__asm        movsx  eax, cnt;
	__asm        test   eax, eax;
	__asm        jle    _Tac;
// LINE 1021:
// Block start:
	/*bp-0x10*/  /*unpacked*/ struct ResMap::Entry *entryList;
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xC];
	__asm        sub    eax, 2;
	__asm        mov    entryList, eax;
// LINE 1022:
	__asm        mov    eax, typeList;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        inc    eax;
	__asm        mov    cnt, ax;
// LINE 1024:
	__asm        movsx  eax, index;
	__asm        cmp    eax, 1;
	__asm        jl     _Tac;

	__asm        movsx  eax, cnt;
	__asm        movsx  ecx, index;
	__asm        cmp    eax, ecx;
	__asm        jl     _Tac;
// LINE 1025:
	__asm        movsx  eax, index;
	__asm        lea    eax, [eax+eax*2-3];
	__asm        shl    eax, 2;
	__asm        add    eax, entryList;
	__asm        mov    found, eax;
// LINE 1028:
// Block end:
_Tac:
	return found;
// LINE 1029:
}

// FUNCTION: COPTER_D 0x005545f1
void ResMap::GetName(/*unpacked*/ struct ResMap::Entry *entry, unsigned char * name) {
	/*bp-0x4*/   unsigned char * namePtr;

// LINE 1033:
	name[0] = 0x0;
// LINE 1035:
	namePtr = (this-><ResMap+0x14:4> + this-><ResMap+0x0c:4>);
// LINE 1037:
	__asm        mov    eax, entry;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T54;
// LINE 1039:
	__asm        mov    eax, entry;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        add    namePtr, eax;
// LINE 1040:
	__asm        mov    eax, namePtr;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        push   ecx;
	__asm        mov    eax, name;
	__asm        push   eax;
	__asm        mov    eax, namePtr;
	__asm        push   eax;
	__asm        call   Memory::BlockMove;
	__asm        add    esp, 0xC;
// LINE 1042:
_T54:
	return;
}

// FUNCTION: COPTER_D 0x00554651
void ResMap::SwapTypeHead(/*unpacked*/ struct ResMap::TypeHead *typeHead) {
// LINE 1058:
	__asm        mov    eax, typeHead;
	__asm        push   eax;
	__asm        call   Swizzle4;
	__asm        add    esp, 4;
// LINE 1059:
	__asm        mov    eax, typeHead;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 1060:
	__asm        mov    eax, typeHead;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 1062:
	return;
}

// FUNCTION: COPTER_D 0x0055468b
void ResMap::SwapResEntry(/*unpacked*/ struct ResMap::Entry *resEntry) {
	/*bp-0x4*/   unsigned char midWord;
	/*bp-0x8*/   unsigned char loWord;
	/*bp-0xc*/   unsigned char * bptr;
	/*bp-0x10*/  unsigned char hiWord;
	/*bp-0x14*/  unsigned long dataLoc;

// LINE 1081:
	__asm        mov    eax, resEntry;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 1082:
	__asm        mov    eax, resEntry;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   Swizzle2;
	__asm        add    esp, 4;
// LINE 1085:
	__asm        mov    eax, resEntry;
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 8;
	__asm        mov    dataLoc, eax;
// LINE 1088:
	bptr = dataLoc;
// LINE 1089:
	hiWord = bptr[0];
// LINE 1091:
	bptr++;
// LINE 1092:
	midWord = bptr[0];
// LINE 1094:
	bptr++;
// LINE 1095:
	loWord = bptr[0];
// LINE 1097:
	__asm        xor    eax, eax;
	__asm        mov    al, midWord;
	__asm        shl    eax, 8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, hiWord;
	__asm        shl    ecx, 0x10;
	__asm        or     eax, ecx;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loWord;
	__asm        or     eax, ecx;
	__asm        mov    dataLoc, eax;
// LINE 1098:
	__asm        mov    eax, resEntry;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, dataLoc;
	__asm        shl    ecx, 8;
	__asm        or     eax, ecx;
	__asm        mov    ecx, resEntry;
	__asm        mov    [ecx+4], eax;
// LINE 1100:
	return;
}



// Contribution: 2:00006f30-00006fa7 Module: 199, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00024edc-0002512c Module: 199, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bbedc
/*unpacked*/ class ResMap *ResMap::sMaps = { 0 /* todo */ };

