// Module: Ylingo.obj
// Source: C:\Copter\Source\X\Y\Ylingo.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class YObjLang (forward reference);
class YObjLang : public Language
{
public:
	void YObjLang(class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(class Behavior*, struct Behavior::Node*, unsigned char *);
	virtual void GetPrimName(short, unsigned char *);
	virtual unsigned short IsSingleExit(struct Behavior::Node*);
	// calltype: NearC
	static void SwizzleTreeParam(short, struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler();
		enum __unnamed {
			kIdle = 0,
			kSetAnim = 1,
			kAttr = 2,
			_kWhatsAhead = 3,
			kWalk = 4,
			_kRunPad = 5,
			kSetBody = 6,
			kRandom = 7,
			_kGetDirDistToFirst = 8,
			_kGetDirDistToPerson = 9,
			_kRoadDir = 10,
			_kSearchForDyn = 11,
			kWalkToAndGrabOntoStackObject = 12,
			kUpdateMyMission = 13,
			kCheckForTrue = 14,
			kCompareMyLocWith = 15,
			kSelfDecommission = 16,
			kGetOffMasterObject = 17,
			kTurnTowardsStackObject = 18,
			kIsThisLocType = 19,
			kIsThisLocTypeNeutral = 20,
			kCanJumpOffHere = 21,
			kCheckForSpotlightInMyCell = 22,
			kIncrementRiotVal = 23,
			kGetSurroundingRiotVal = 24,
			kIsThisScurkID = 25,
			kGosubToInitbhav = 26,
			kAdjustRadiusForRiotVal = 27,
			kJoinRiot = 28,
			kSetDirection = 29,
			kThrowProjectile = 30,
			kTurnFromStackObject = 31,
			kTurnFromLastHitter = 32,
			kTurnTowardsLastHitter = 33,
			kGetOutOfRoadEtc = 34,
			kGenerateMedevacAndSetSelfAsVictim = 35,
			kTurnToNearbyFire = 36,
			kDie = 37,
			kWalkToStackObject = 38,
			kPutObjIntoTreeNum = 39,
			kVisitOz = 40,
			_kNotUsed = 41,
			kMakeMyMedevacVictimVisible = 42,
			kMakeMyMedevacVictimInvisible = 43,
			kMakeMeMasterOfStackObject = 44,
			kMakeMyStackObjectVisitOz = 45,
			kPutTotedMedVicOnStackObject = 46,
			kTakeAnyMedVicOffStackObject = 47,
			kGetOnStackObject = 48,
			kUpdateStackVictimToted = 49,
			kGetNumSpacesOnStackObject = 50,
			kDropToted = 51,
			kUpdateStackVictimPickedUp = 52,
			kCloseToHeli = 53,
			kSetMyExpression = 54,
			kGetHeliSpeedPlusDamage = 55,
			kIsThisCellSafe = 56,
			kPlaySound = 57,
			kGetOnHeliIfHarnessRaised = 58,
			kAmIOnHeli = 59,
			kThrowFieryProjectile = 60,
			kTellStartingObjectTrueOrFalse = 61,
			kPutMyCarInStack = 62,
			kDoIHaveAMaster = 63,
			kNumPrimitives = 64,
		};
public:
	virtual short CountPrimitives();
		enum __unnamed {
			kMyself = 0,
			kTreeParam = 1,
			kTargetObj = 2,
			kMyData = 3,
			kTreeParamData = 4,
			kTargetObjData = 5,
			kSimGlobals = 6,
			kImmediate = 7,
			kTempVars = 8,
			kStackVars = 9,
			kStackObject = 10,
			kTempTempVars = 11,
			kTreeTableValue = 12,
			kNumOwners = 13,
		};
	class YObjLang::OwnerDataParam{
	public:
		short owner1;
		short data1;
		short owner2;
		short data2;
	};
	class YObjLang::TurnToFireParam{
	public:
		short xdistloc;
		short ydistloc;
	};
	class YObjLang::GetOutOfRoadParam{
	public:
		short decTemp;
	};
	class YObjLang::SetDirectionParam{
	public:
		short dirTemp;
	};
	class YObjLang::CheckForSpotParam{
	public:
		short brightnessTemp;
		short dirToHeliTemp;
	};
	class YObjLang::GetSurroundingRiotValParam{
	public:
		short distTemp;
		short dirToConcTemp;
		short riotValTemp;
		short numPeopleCountedTemp;
	};
	class YObjLang::IncrementRiotValParam{
	public:
		short riotValLiteral;
	};
	class YObjLang::IsThisScurkIDParam{
	public:
		short scurkIDLiteral;
	};
	class YObjLang::IsThisLocTypeParam{
	public:
		short locTypeLiteral;
	};
	class YObjLang::UpdateMyMissionParam{
	public:
		short updateLiteral;
	};
	class YObjLang::CheckForTrueParam{
	public:
		short whatLiteral;
	};
	class YObjLang::CompareMyLocWithParam{
	public:
		short withWhatLiteral;
		short distData;
		short distOwner;
	};
	class YObjLang::WalkAndGrabParam{
	public:
		short decTemp;
		short dynAnimBoolean;
	};
	class YObjLang::SearchForDynParam{
	public:
		short searchdynobjtypetemp;
		short onlyonmasterboolean;
		short numcellstospiral;
	};
	class YObjLang::IdleParam{
	public:
		short decTemp;
	};
	class YObjLang::SetAnimParam{
	public:
		unsigned long animname;
	};
	class YObjLang::SetBodyParam{
	public:
		unsigned long bodyname;
	};
	class YObjLang::WalkRunParam{
	public:
		char decTemp;
		char onlyNeutralBoolean;
		char moveFailTemp;
		char newLocTemp;
		char roadDirTemp;
		char dynAnimBoolean;
		char speedTemp;
	};
	class YObjLang::RandomParam{
	public:
		short destTemp;
		short rangeData;
		short rangeOwner;
	};
	class YObjLang::RoadDirParam{
	public:
		short dirTemp;
		short distAheadData;
		short distAheadOwner;
	};
	class YObjLang::DirDistFirstParam{
	public:
		short dirToTemp;
		short distToTemp;
		short whatData;
		short whatOwner;
	};
	class YObjLang::DirDistPersonParam{
	public:
		short dirToTemp;
		short distToTemp;
		short whoData;
		short whoOwner;
	};
	class YObjLang::AttrParam{
	public:
		short lhsData;
		short rhsData;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner;
	};
		enum __unnamed {
			kGreaterThan = 0,
			kLessThan = 1,
			kEquals = 2,
			kIncrement = 3,
			kDecrement = 4,
			kSetValue = 5,
			kTimesEq = 6,
			kDivideEq = 7,
			kIsFlagSet = 8,
			kSetFlag = 9,
			kClearFlag = 10,
			kNumOps = 11,
		};
	class YObjLang::MiscParam{
	public:
		short m1;
		short m2;
		short m3;
		short m4;
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// union YObjLang::Param Param
		enum TreeNum {
			kNoTree = -1,
			kSpotlightTree = 900,
			kMegaphoneTree = 901,
			kOuchTree = 902,
			kDieTree = 903,
			kRunTree = 904,
			kRunOrSwoonTree = 905,
			kSwoonTree = 906,
		};
		enum __unnamed {
			kWeightStringsID = 140,
			kPrimitiveStringsID = 139,
			kDataLabelsID = 129,
			kDataBase = 1,
			kGlobalBase = 33,
			kOwnerStringsID = 132,
			kNewOwnerBase = 1,
			kMacroDescriptionStrings = 133,
			kPrimMacroBase = 1,
			kMotiveStringsID = 134,
			kMiscStringsID = 135,
			kDontCare = 1,
			kSaveChanges = 2,
			kMaxEntryLabel = 3,
			kBehStringsID = 128,
			kPrimBase = 1,
			kOwnerBase = 33,
			kGosubStr = 65,
			kOpenParen = 66,
			kForType = 67,
			kRadius = 68,
			kFromZeroTo = 69,
			kInto = 70,
			kDistance = 71,
			kStack = 72,
			kUseTempVars = 73,
			kCloseParen = 74,
			kTreetemp = 75,
			kObjtemp = 76,
			kThisObj = 77,
			kAlertType = 78,
			kCheckTreeID = 79,
			kActionTreeID = 80,
			kForAction = 81,
			kEqualStr = 82,
			kTree = 83,
			kRate = 84,
			kTo = 85,
			kForNeed = 86,
			kSel = 87,
			kPairAction = 88,
			kToCheck = 89,
			kSet = 90,
			kToNeed = 91,
			kUpdateNeed = 92,
			kToIndex = 93,
			kCheck = 94,
			kAct = 95,
			kUntil = 96,
			kNot = 97,
			kClear = 98,
			kFor = 99,
			kByAmount = 100,
			kOpBase = 117,
			kTypeBase = 143,
			kBaseTreeBase = 164,
		};
};

// Type: unsigned char *;

// Type: void;

// Type: short;

// Type: struct Behavior::NodeParameter (forward reference);

// Type: struct YObjLang::AttrParam (forward reference);

// Type: void * __ptr32;

// Type: long;

// Type: struct Behavior::Tree (forward reference);

// Type: struct Behavior::Node (forward reference);

// Type: unsigned short;

// Type: class Behavior (forward reference);
class Behavior{
protected:
	class NResFile* fGlobFile;
	class NResFile* fPrivFile;
	class StdResLoader* fGlobalTrees;
	class StdResLoader* fPrivateTrees;
	class Language* fLanguage;
	void (*fSwizzler)(void * __ptr32, long);
		enum __unnamed {
			kPrimitiveBase = 0,
			kPrimitiveMax = 255,
			kActionBase = 256,
			kGlobalBase = 256,
			kGlobalMax = 4095,
			kPrivateBase = 4096,
			kPrivateMax = 8191,
			kSemiGlobalBase = 8192,
			kSemiGlobalMax = 30000,
			kTreeMax = 30000,
			kPrimitives = 0,
			kGlobalTrees = 1,
			kPrivateTrees = 2,
			kSemiGlobalTrees = 3,
			kMaxTreeClass = 3,
		};
	class Behavior::NodeParameter{
	public:
		short p1;
		short p2;
		short p3;
		short p4;
	};
	class Behavior::Node{
	public:
		short treeID;
		short primCode;
		char trueTrans;
		char falseTrans;
		struct Behavior::NodeParameter param;
	};
		enum __unnamed {
			kUndefined = -3,
			kPopOutTrue = -2,
			kPopOutFalse = -1,
		};
	class Behavior::Tree{
	public:
		short numNodes;
		struct Behavior::Node nodes[1];
	};
public:
	void Behavior(class Language*, class NResFile*, class NResFile*);
	void ~Behavior();
	void GetNode(short, short, struct Behavior::Node*);
	// vtable: 0
	intro const struct Behavior::Node* GetNodeRef(short, short);
	// vtable: 4
	intro void GetNodeText(short, short, unsigned char *);
	void GetNodeText(struct Behavior::Node*, unsigned char *);
	// vtable: 8
	intro void GetTreeName(short, unsigned char *);
	short CountPrimitives();
	class Language* GetLanguage();
	class ResFile* GetPrivFile();
	class ResFile* GetGlobFile();
	// vtable: 12
	intro class ResFile* GetResFile(short);
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(struct Behavior::Tree*, long, void (*)(short, struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(struct Behavior::NodeParameter*);
};

// Type: class Language (forward reference);



// Contribution: 1:0015f9d0-0015fba1 Module: 190, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005609d0
void YObjLang::YObjLang(unsigned char * fileName) {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593700;
	__asm        jmp    near ptr 0x005609EA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936E8;
// LINE 48:
	__asm        jmp    near ptr 0x005609F8;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00560a02
void YObjLang::SwizzleTreeParam(short id, struct Behavior::NodeParameter* param) {
// LINE 53:
	__asm        movsx  eax, id;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00560A91;
// LINE 56:
	__asm        mov    eax, param;
	__asm        push   eax;
	__asm        call   0x00566906;
	__asm        add    esp, 4;
// LINE 57:
	__asm        jmp    near ptr 0x00560AB4;
// LINE 59:
// Block start:
	struct YObjLang::AttrParam* par;
	__asm        mov    eax, param;
	__asm        mov    par, eax;
// LINE 60:
	__asm        mov    eax, par;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 61:
	__asm        mov    eax, par;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 62:
	__asm        jmp    near ptr 0x00560AB4;
// LINE 65:
// Block end:
	__asm        mov    eax, param;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 66:
	__asm        mov    eax, param;
	__asm        add    eax, 2;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 67:
	__asm        mov    eax, param;
	__asm        add    eax, 4;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 68:
	__asm        mov    eax, param;
	__asm        add    eax, 6;
	__asm        push   eax;
	__asm        call   0x0056695B;
	__asm        add    esp, 4;
// LINE 69:
	__asm        jmp    near ptr 0x00560AB4;
// LINE 71:
	__asm        jmp    near ptr 0x00560AB4;
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     near ptr 0x00560A17;
	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     near ptr 0x00560A28;
	__asm        cmp    dword ptr [ebp-8], 6;
	__asm        je     near ptr 0x00560A17;
	__asm        jmp    near ptr 0x00560A4E;
// LINE 72:
	__asm        jmp    near ptr 0x00560AB9;
}

// FUNCTION: COPTER_D 0x00560abe
void YObjLang::SwizzleTree(void * __ptr32 treevoid, long size) {
	struct Behavior::Tree* tree;

// LINE 76:
	__asm        mov    eax, treevoid;
	__asm        mov    tree, eax;
// LINE 77:
	__asm        push   0x560A02;
	__asm        mov    eax, size;
	__asm        push   eax;
	__asm        mov    eax, tree;
	__asm        push   eax;
	__asm        call   0x00560385;
	__asm        add    esp, 0xC;
// LINE 79:
	__asm        jmp    near ptr 0x00560AE7;
}

// FUNCTION: COPTER_D 0x00560aec
void YObjLang::YObjLang(class YObjLang& otherLanguage) {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593700;
	__asm        jmp    near ptr 0x00560B06;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936E8;
// LINE 88:
	__asm        jmp    near ptr 0x00560B14;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00560b1e
void YObjLang::~YObjLang() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5936E8;
// LINE 95:
	__asm        jmp    near ptr 0x00560B38;
}

// FUNCTION: COPTER_D 0x00560b3d
short YObjLang::CountPrimitives() {
// LINE 103:
	__asm        mov    ax, 0x40;
	__asm        jmp    near ptr 0x00560B52;
// LINE 105:
}

// FUNCTION: COPTER_D 0x00560b57
void YObjLang::GetPrimName(short primCode, unsigned char * str) {
// LINE 112:
	__asm        jmp    near ptr 0x00560B68;
}

// FUNCTION: COPTER_D 0x00560b6f
unsigned short YObjLang::IsSingleExit(struct Behavior::Node* node) {
// LINE 129:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00560B83;
// LINE 130:
}

// FUNCTION: COPTER_D 0x00560b8a
void YObjLang::GetNodeText(class Behavior* bhav, struct Behavior::Node* node, unsigned char * str) {
// LINE 478:
	__asm        jmp    near ptr 0x00560B9B;
}



// Contribution: 1:0015fbb0-0015fbca Module: 190, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015fbd0-0015fbe7 Module: 190, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000046e8-000046fb Module: 190, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005936e8
// ??_7YObjLang@@6B@


// Contribution: 2:00004700-00004713 Module: 190, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593700
// ??_7Language@@6B@
