// Module: Ylingo.obj
// Source: C:\Copter\Source\X\Y\Ylingo.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*unpacked*/ class YObjLang (forward reference);
// VTABLE: COPTER_D 0x005936e8
class YObjLang : public Language
{ // not packed(0x4 bytes) TI: 0x484d
public:
	void YObjLang(/*unpacked*/ class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(/*unpacked*/ class Behavior*, /*unpacked*/ struct Behavior::Node*, unsigned char *) /* override */;
	virtual void GetPrimName(short, unsigned char *) /* override */;
	virtual unsigned short IsSingleExit(/*unpacked*/ struct Behavior::Node*) /* override */;
	// calltype: NearC
	static void SwizzleTreeParam(short, /*unpacked*/ struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler() /* override */;
	enum /* __unnamed */ {
		kIdle = 0,
		kSetAnim = 1,
		kAttr = 2,
		_kWhatsAhead = 3,
		kWalk = 4,
		_kRunPad = 5,
		kSetBody = 6,
		kRandom = 7,
		_kGetDirDistToFirst = 8,
		_kGetDirDistToPerson = 9,
		_kRoadDir = 10,
		_kSearchForDyn = 11,
		kWalkToAndGrabOntoStackObject = 12,
		kUpdateMyMission = 13,
		kCheckForTrue = 14,
		kCompareMyLocWith = 15,
		kSelfDecommission = 16,
		kGetOffMasterObject = 17,
		kTurnTowardsStackObject = 18,
		kIsThisLocType = 19,
		kIsThisLocTypeNeutral = 20,
		kCanJumpOffHere = 21,
		kCheckForSpotlightInMyCell = 22,
		kIncrementRiotVal = 23,
		kGetSurroundingRiotVal = 24,
		kIsThisScurkID = 25,
		kGosubToInitbhav = 26,
		kAdjustRadiusForRiotVal = 27,
		kJoinRiot = 28,
		kSetDirection = 29,
		kThrowProjectile = 30,
		kTurnFromStackObject = 31,
		kTurnFromLastHitter = 32,
		kTurnTowardsLastHitter = 33,
		kGetOutOfRoadEtc = 34,
		kGenerateMedevacAndSetSelfAsVictim = 35,
		kTurnToNearbyFire = 36,
		kDie = 37,
		kWalkToStackObject = 38,
		kPutObjIntoTreeNum = 39,
		kVisitOz = 40,
		_kNotUsed = 41,
		kMakeMyMedevacVictimVisible = 42,
		kMakeMyMedevacVictimInvisible = 43,
		kMakeMeMasterOfStackObject = 44,
		kMakeMyStackObjectVisitOz = 45,
		kPutTotedMedVicOnStackObject = 46,
		kTakeAnyMedVicOffStackObject = 47,
		kGetOnStackObject = 48,
		kUpdateStackVictimToted = 49,
		kGetNumSpacesOnStackObject = 50,
		kDropToted = 51,
		kUpdateStackVictimPickedUp = 52,
		kCloseToHeli = 53,
		kSetMyExpression = 54,
		kGetHeliSpeedPlusDamage = 55,
		kIsThisCellSafe = 56,
		kPlaySound = 57,
		kGetOnHeliIfHarnessRaised = 58,
		kAmIOnHeli = 59,
		kThrowFieryProjectile = 60,
		kTellStartingObjectTrueOrFalse = 61,
		kPutMyCarInStack = 62,
		kDoIHaveAMaster = 63,
		kNumPrimitives = 64,
	};
public:
	virtual short CountPrimitives() /* override */;
	enum /* __unnamed */ {
		kMyself = 0,
		kTreeParam = 1,
		kTargetObj = 2,
		kMyData = 3,
		kTreeParamData = 4,
		kTargetObjData = 5,
		kSimGlobals = 6,
		kImmediate = 7,
		kTempVars = 8,
		kStackVars = 9,
		kStackObject = 10,
		kTempTempVars = 11,
		kTreeTableValue = 12,
		kNumOwners = 13,
	};
	struct YObjLang::OwnerDataParam{ // not packed(0x8 bytes) TI: 0x3593
		/*+0x0*/   short owner1; // 0x2 bytes
		/*+0x2*/   short data1; // 0x2 bytes
		/*+0x4*/   short owner2; // 0x2 bytes
		/*+0x6*/   short data2; // 0x2 bytes
	};
	struct YObjLang::TurnToFireParam{ // not packed(0x4 bytes) TI: 0x3591
		/*+0x0*/   short xdistloc; // 0x2 bytes
		/*+0x2*/   short ydistloc; // 0x2 bytes
	};
	struct YObjLang::GetOutOfRoadParam{ // not packed(0x2 bytes) TI: 0x358f
		/*+0x0*/   short decTemp; // 0x2 bytes
	};
	struct YObjLang::SetDirectionParam{ // not packed(0x2 bytes) TI: 0x358e
		/*+0x0*/   short dirTemp; // 0x2 bytes
	};
	struct YObjLang::CheckForSpotParam{ // not packed(0x4 bytes) TI: 0x358c
		/*+0x0*/   short brightnessTemp; // 0x2 bytes
		/*+0x2*/   short dirToHeliTemp; // 0x2 bytes
	};
	struct YObjLang::GetSurroundingRiotValParam{ // not packed(0x8 bytes) TI: 0x358a
		/*+0x0*/   short distTemp; // 0x2 bytes
		/*+0x2*/   short dirToConcTemp; // 0x2 bytes
		/*+0x4*/   short riotValTemp; // 0x2 bytes
		/*+0x6*/   short numPeopleCountedTemp; // 0x2 bytes
	};
	struct YObjLang::IncrementRiotValParam{ // not packed(0x2 bytes) TI: 0x3588
		/*+0x0*/   short riotValLiteral; // 0x2 bytes
	};
	struct YObjLang::IsThisScurkIDParam{ // not packed(0x2 bytes) TI: 0x3586
		/*+0x0*/   short scurkIDLiteral; // 0x2 bytes
	};
	struct YObjLang::IsThisLocTypeParam{ // not packed(0x2 bytes) TI: 0x3584
		/*+0x0*/   short locTypeLiteral; // 0x2 bytes
	};
	struct YObjLang::UpdateMyMissionParam{ // not packed(0x2 bytes) TI: 0x3582
		/*+0x0*/   short updateLiteral; // 0x2 bytes
	};
	struct YObjLang::CheckForTrueParam{ // not packed(0x2 bytes) TI: 0x3580
		/*+0x0*/   short whatLiteral; // 0x2 bytes
	};
	struct YObjLang::CompareMyLocWithParam{ // not packed(0x6 bytes) TI: 0x357e
		/*+0x0*/   short withWhatLiteral; // 0x2 bytes
		/*+0x2*/   short distData; // 0x2 bytes
		/*+0x4*/   short distOwner; // 0x2 bytes
	};
	struct YObjLang::WalkAndGrabParam{ // not packed(0x4 bytes) TI: 0x357c
		/*+0x0*/   short decTemp; // 0x2 bytes
		/*+0x2*/   short dynAnimBoolean; // 0x2 bytes
	};
	struct YObjLang::SearchForDynParam{ // not packed(0x6 bytes) TI: 0x357a
		/*+0x0*/   short searchdynobjtypetemp; // 0x2 bytes
		/*+0x2*/   short onlyonmasterboolean; // 0x2 bytes
		/*+0x4*/   short numcellstospiral; // 0x2 bytes
	};
	struct YObjLang::IdleParam{ // not packed(0x2 bytes) TI: 0x3578
		/*+0x0*/   short decTemp; // 0x2 bytes
	};
	struct YObjLang::SetAnimParam{ // not packed(0x4 bytes) TI: 0x3576
		/*+0x0*/   unsigned long animname;
	};
	struct YObjLang::SetBodyParam{ // not packed(0x4 bytes) TI: 0x3574
		/*+0x0*/   unsigned long bodyname;
	};
	struct YObjLang::WalkRunParam{ // not packed(0x7 bytes) TI: 0x3572
		/*+0x0*/   signed char decTemp; // 0x1 bytes
		/*+0x1*/   signed char onlyNeutralBoolean; // 0x1 bytes
		/*+0x2*/   signed char moveFailTemp; // 0x1 bytes
		/*+0x3*/   signed char newLocTemp; // 0x1 bytes
		/*+0x4*/   signed char roadDirTemp; // 0x1 bytes
		/*+0x5*/   signed char dynAnimBoolean; // 0x1 bytes
		/*+0x6*/   signed char speedTemp; // 0x1 bytes
	};
	struct YObjLang::RandomParam{ // not packed(0x6 bytes) TI: 0x3570
		/*+0x0*/   short destTemp; // 0x2 bytes
		/*+0x2*/   short rangeData; // 0x2 bytes
		/*+0x4*/   short rangeOwner; // 0x2 bytes
	};
	struct YObjLang::RoadDirParam{ // not packed(0x6 bytes) TI: 0x356e
		/*+0x0*/   short dirTemp; // 0x2 bytes
		/*+0x2*/   short distAheadData; // 0x2 bytes
		/*+0x4*/   short distAheadOwner; // 0x2 bytes
	};
	struct YObjLang::DirDistFirstParam{ // not packed(0x8 bytes) TI: 0x356c
		/*+0x0*/   short dirToTemp; // 0x2 bytes
		/*+0x2*/   short distToTemp; // 0x2 bytes
		/*+0x4*/   short whatData; // 0x2 bytes
		/*+0x6*/   short whatOwner; // 0x2 bytes
	};
	struct YObjLang::DirDistPersonParam{ // not packed(0x8 bytes) TI: 0x356a
		/*+0x0*/   short dirToTemp; // 0x2 bytes
		/*+0x2*/   short distToTemp; // 0x2 bytes
		/*+0x4*/   short whoData; // 0x2 bytes
		/*+0x6*/   short whoOwner; // 0x2 bytes
	};
	struct YObjLang::AttrParam{ // not packed(0x8 bytes) TI: 0x3568
		/*+0x0*/   short lhsData; // 0x2 bytes
		/*+0x2*/   short rhsData; // 0x2 bytes
		/*+0x4*/   LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned; // 0x8 bytes
		/*+0x4*/   LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType; // 0x8 bytes
		/*+0x6*/   LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner; // 0x8 bytes
		/*+0x6*/   LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner; // 0x8 bytes
	};
	enum /* __unnamed */ {
		kGreaterThan = 0,
		kLessThan = 1,
		kEquals = 2,
		kIncrement = 3,
		kDecrement = 4,
		kSetValue = 5,
		kTimesEq = 6,
		kDivideEq = 7,
		kIsFlagSet = 8,
		kSetFlag = 9,
		kClearFlag = 10,
		kNumOps = 11,
	};
	struct YObjLang::MiscParam{ // not packed(0x8 bytes) TI: 0x3564
		/*+0x0*/   short m1; // 0x2 bytes
		/*+0x2*/   short m2; // 0x2 bytes
		/*+0x4*/   short m3; // 0x2 bytes
		/*+0x6*/   short m4; // 0x2 bytes
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// /*unpacked*/ union YObjLang::Param Param
	enum TreeNum {
		kNoTree = -1,
		kSpotlightTree = 900,
		kMegaphoneTree = 901,
		kOuchTree = 902,
		kDieTree = 903,
		kRunTree = 904,
		kRunOrSwoonTree = 905,
		kSwoonTree = 906,
	};
	enum /* __unnamed */ {
		kWeightStringsID = 140,
		kPrimitiveStringsID = 139,
		kDataLabelsID = 129,
		kDataBase = 1,
		kGlobalBase = 33,
		kOwnerStringsID = 132,
		kNewOwnerBase = 1,
		kMacroDescriptionStrings = 133,
		kPrimMacroBase = 1,
		kMotiveStringsID = 134,
		kMiscStringsID = 135,
		kDontCare = 1,
		kSaveChanges = 2,
		kMaxEntryLabel = 3,
		kBehStringsID = 128,
		kPrimBase = 1,
		kOwnerBase = 33,
		kGosubStr = 65,
		kOpenParen = 66,
		kForType = 67,
		kRadius = 68,
		kFromZeroTo = 69,
		kInto = 70,
		kDistance = 71,
		kStack = 72,
		kUseTempVars = 73,
		kCloseParen = 74,
		kTreetemp = 75,
		kObjtemp = 76,
		kThisObj = 77,
		kAlertType = 78,
		kCheckTreeID = 79,
		kActionTreeID = 80,
		kForAction = 81,
		kEqualStr = 82,
		kTree = 83,
		kRate = 84,
		kTo = 85,
		kForNeed = 86,
		kSel = 87,
		kPairAction = 88,
		kToCheck = 89,
		kSet = 90,
		kToNeed = 91,
		kUpdateNeed = 92,
		kToIndex = 93,
		kCheck = 94,
		kAct = 95,
		kUntil = 96,
		kNot = 97,
		kClear = 98,
		kFor = 99,
		kByAmount = 100,
		kOpBase = 117,
		kTypeBase = 143,
		kBaseTreeBase = 164,
	};
};

// Type: unsigned char *;

// Type: void;

// Type: short;

// Type: /*unpacked*/ struct Behavior::NodeParameter (forward reference);
struct Behavior::NodeParameter{ // not packed(0x8 bytes) TI: 0x35e5
	/*+0x0*/   short p1; // 0x2 bytes
	/*+0x2*/   short p2; // 0x2 bytes
	/*+0x4*/   short p3; // 0x2 bytes
	/*+0x6*/   short p4; // 0x2 bytes
};

// Type: /*unpacked*/ struct YObjLang::AttrParam (forward reference);
struct YObjLang::AttrParam{ // not packed(0x8 bytes) TI: 0x3568
	/*+0x0*/   short lhsData; // 0x2 bytes
	/*+0x2*/   short rhsData; // 0x2 bytes
	/*+0x4*/   LfBitfield @ 0x5d5b4:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
	[90m   LB.[95mTI[m = 0x3565
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 isSigned; // 0x8 bytes
	/*+0x4*/   LfBitfield @ 0x5d5bc:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
	[90m   LB.[95mTI[m = 0x3566
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 opType; // 0x8 bytes
	/*+0x6*/   LfBitfield @ 0x5d5b4:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
	[90m   LB.[95mTI[m = 0x3565
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 lhsOwner; // 0x8 bytes
	/*+0x6*/   LfBitfield @ 0x5d5bc:
	[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
	[90m   LB.[95mTI[m = 0x3566
	[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
	[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
	 rhsOwner; // 0x8 bytes
};

// Type: void * __ptr32;

// Type: long;

// Type: /*unpacked*/ struct Behavior::Tree (forward reference);
struct Behavior::Tree{ // not packed(0xe bytes) TI: 0x35e1
	/*+0x0*/   short numNodes; // 0x2 bytes
	/*+0x2*/   /*unpacked*/ struct Behavior::Node nodes[1]; // 0xc bytes
};

// Type: /*unpacked*/ struct Behavior::Node (forward reference);
struct Behavior::Node{ // not packed(0xc bytes) TI: 0x35e3
	/*+0x0*/   short treeID; // 0x2 bytes
	/*+0x0*/   short primCode; // 0x2 bytes
	/*+0x2*/   signed char trueTrans; // 0x1 bytes
	/*+0x3*/   signed char falseTrans; // 0x1 bytes
	/*+0x4*/   /*unpacked*/ struct Behavior::NodeParameter param; // 0x8 bytes
};

// Type: unsigned short;

// Type: /*unpacked*/ class Behavior (forward reference);
// VTABLE: COPTER_D 0x005936d8
class Behavior{ // not packed(0x1c bytes) TI: 0x35de
protected:
	/*+0x4*/   /*unpacked*/ class NResFile *fGlobFile;
	/*+0x8*/   /*unpacked*/ class NResFile *fPrivFile;
	/*+0xc*/   /*unpacked*/ class StdResLoader *fGlobalTrees;
	/*+0x10*/  /*unpacked*/ class StdResLoader *fPrivateTrees;
	/*+0x14*/  /*unpacked*/ class Language *fLanguage;
	/*+0x18*/  void (*fSwizzler)(void * __ptr32, long);
	enum /* __unnamed */ {
		kPrimitiveBase = 0,
		kPrimitiveMax = 255,
		kActionBase = 256,
		kGlobalBase = 256,
		kGlobalMax = 4095,
		kPrivateBase = 4096,
		kPrivateMax = 8191,
		kSemiGlobalBase = 8192,
		kSemiGlobalMax = 30000,
		kTreeMax = 30000,
		kPrimitives = 0,
		kGlobalTrees = 1,
		kPrivateTrees = 2,
		kSemiGlobalTrees = 3,
		kMaxTreeClass = 3,
	};
	struct Behavior::NodeParameter{ // not packed(0x8 bytes) TI: 0x35e5
		/*+0x0*/   short p1; // 0x2 bytes
		/*+0x2*/   short p2; // 0x2 bytes
		/*+0x4*/   short p3; // 0x2 bytes
		/*+0x6*/   short p4; // 0x2 bytes
	};
	struct Behavior::Node{ // not packed(0xc bytes) TI: 0x35e3
		/*+0x0*/   short treeID; // 0x2 bytes
		/*+0x0*/   short primCode; // 0x2 bytes
		/*+0x2*/   signed char trueTrans; // 0x1 bytes
		/*+0x3*/   signed char falseTrans; // 0x1 bytes
		/*+0x4*/   /*unpacked*/ struct Behavior::NodeParameter param; // 0x8 bytes
	};
	enum /* __unnamed */ {
		kUndefined = -3,
		kPopOutTrue = -2,
		kPopOutFalse = -1,
	};
	struct Behavior::Tree{ // not packed(0xe bytes) TI: 0x35e1
		/*+0x0*/   short numNodes; // 0x2 bytes
		/*+0x2*/   /*unpacked*/ struct Behavior::Node nodes[1]; // 0xc bytes
	};
public:
	void Behavior(/*unpacked*/ class Language*, /*unpacked*/ class NResFile*, /*unpacked*/ class NResFile*);
	void ~Behavior();
	void GetNode(short, short, /*unpacked*/ struct Behavior::Node*);
	virtual const /*unpacked*/ struct Behavior::Node* GetNodeRef(short, short); // vtable+0x0
	virtual void GetNodeText(short, short, unsigned char *); // vtable+0x4
	void GetNodeText(/*unpacked*/ struct Behavior::Node*, unsigned char *);
	virtual void GetTreeName(short, unsigned char *); // vtable+0x8
	short CountPrimitives();
	/*unpacked*/ class Language* GetLanguage();
	/*unpacked*/ class ResFile* GetPrivFile();
	/*unpacked*/ class ResFile* GetGlobFile();
	virtual /*unpacked*/ class ResFile* GetResFile(short); // vtable+0xc
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, /*unpacked*/ struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(/*unpacked*/ struct Behavior::Tree*, long, void (*)(short, /*unpacked*/ struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(/*unpacked*/ struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(/*unpacked*/ struct Behavior::NodeParameter*);
};

// Type: /*unpacked*/ class Language (forward reference);
// Language Class implementation not found



// Contribution: 1:0015f9d0-0015fba1 Module: 190, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005609d0
void YObjLang::YObjLang(unsigned char * fileName) {

	this-><YObjLang+0x00> = 0x593700;
	__asm        jmp    _T1a;
_T1a:
	this-><YObjLang+0x00> = 0x5936e8;
// LINE 48:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00560a02
void YObjLang::SwizzleTreeParam(short id, /*unpacked*/ struct Behavior::NodeParameter *param) {
// LINE 53:
	__asm        movsx  eax, id;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T8f;
// LINE 56:
_T15:
	Swizzle4(param);
// LINE 57:
	__asm        jmp    _Tb2;
// LINE 59:
// Block start:
	/*bp-0x4*/   /*unpacked*/ struct YObjLang::AttrParam *par;
_T26:
	par = param;
// LINE 60:
	Swizzle2(par);
// LINE 61:
	Swizzle2((par + 0x2));
// LINE 62:
	__asm        jmp    _Tb2;
// LINE 65:
// Block end:
_T4c:
	Swizzle2(param);
// LINE 66:
	Swizzle2((param + 0x2));
// LINE 67:
	Swizzle2((param + 0x4));
// LINE 68:
	Swizzle2((param + 0x6));
// LINE 69:
	__asm        jmp    _Tb2;
// LINE 71:
	__asm        jmp    _Tb2;
_T8f:
	__asm        cmp    dword ptr [ebp-8], 1;
	__asm        je     _T15;

	__asm        cmp    dword ptr [ebp-8], 2;
	__asm        je     _T26;

	__asm        cmp    dword ptr [ebp-8], 6;
	__asm        je     _T15;

	__asm        jmp    _T4c;
// LINE 72:
_Tb2:
	return;
}

// FUNCTION: COPTER_D 0x00560abe
void YObjLang::SwizzleTree(void * __ptr32 treevoid, long size) {
	/*bp-0x4*/   /*unpacked*/ struct Behavior::Tree *tree;

// LINE 76:
	tree = treevoid;
// LINE 77:
	Behavior::StdTreeSwizzle(0x560a02, size, tree);
// LINE 79:
	return;
}

// FUNCTION: COPTER_D 0x00560aec
void YObjLang::YObjLang(/*unpacked*/ class YObjLang& otherLanguage) {

	this-><YObjLang+0x00> = 0x593700;
	__asm        jmp    _T1a;
_T1a:
	this-><YObjLang+0x00> = 0x5936e8;
// LINE 88:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00560b1e
void YObjLang::~YObjLang() {

	this-><YObjLang+0x00> = 0x5936e8;
// LINE 95:
	return;
}

// FUNCTION: COPTER_D 0x00560b3d
short YObjLang::CountPrimitives() {
// LINE 103:
	return 0x40;
// LINE 105:
}

// FUNCTION: COPTER_D 0x00560b57
void YObjLang::GetPrimName(short primCode, unsigned char * str) {
// LINE 112:
	return;
}

// FUNCTION: COPTER_D 0x00560b6f
unsigned short YObjLang::IsSingleExit(/*unpacked*/ struct Behavior::Node *node) {
// LINE 129:
	return 0x0;
// LINE 130:
}

// FUNCTION: COPTER_D 0x00560b8a
void YObjLang::GetNodeText(/*unpacked*/ class Behavior *bhav, /*unpacked*/ struct Behavior::Node *node, unsigned char * str) {
// LINE 478:
	return;
}



// Contribution: 1:0015fbb0-0015fbca Module: 190, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:0015fbd0-0015fbe7 Module: 190, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:000046e8-000046fb Module: 190, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for YObjLang @ 0x005936e8
//   00: YObjLang::GetNodeText @ 0x00560b8a
//   01: YObjLang::GetPrimName @ 0x00560b57
//   02: YObjLang::CountPrimitives @ 0x00560b3d
//   03: YObjLang::IsSingleExit @ 0x00560b6f
//   04: YObjLang::GetSwizzler @ 0x00551fa0
//   5 entries



// Contribution: 2:00004700-00004713 Module: 190, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for Language @ 0x00593700
//   00: _purecall @ 0x0056cfa0
//   01: _purecall @ 0x0056cfa0
//   02: _purecall @ 0x0056cfa0
//   03: Language::IsSingleExit @ 0x00560bb0
//   04: Language::GetSwizzler @ 0x00560bd0
//   5 entries

