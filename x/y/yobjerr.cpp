// Module: Yobjerr.obj
// Source: C:\Copter\Source\X\Y\Yobjerr.cpp
// autogenerated by simcopter_tool from PDB file

// Type: short;

// Type: void;

// Type: /*unpacked*/ class cYObject (forward reference);
// VTABLE: COPTER_D 0x005935e0
class cYObject : public TreeSim, public YObjLang
{ // not packed(0x168 bytes) TI: 0x48a0
	using DataType = short;
	enum /* __unnamed */ {
		kNumData = 48,
		kNumTemp = 8,
		kNumPointers = 4,
	};
	struct cYObject::ObjDefHeader{ // not packed(0x1c bytes) TI: 0x374c
		/*+0x0*/   long version;
		/*+0x4*/   short stackSize; // 0x2 bytes
		/*+0x6*/   short baseGraphic; // 0x2 bytes
		/*+0x8*/   short numGraphics; // 0x2 bytes
		/*+0xa*/   short initBhav; // 0x2 bytes
		/*+0xc*/   short toolbarPict; // 0x2 bytes
		/*+0xe*/   short treeTableID; // 0x2 bytes
		/*+0x10*/  short personalityID; // 0x2 bytes
		/*+0x12*/  short type; // 0x2 bytes
		/*+0x14*/  short red; // 0x2 bytes
		/*+0x16*/  short green; // 0x2 bytes
		/*+0x18*/  short blue; // 0x2 bytes
		/*+0x1a*/  short _padding2; // 0x2 bytes
	};
	enum MoveErrorCode {
		kMoveError = -1,
		kMoveSuccess = 0,
		kMoveFailTooHigh = 1,
		kMoveFailTooLow = 2,
		kMoveFailNonNeutralTerritory = 3,
		kMoveFailDynObjGeneric = 4,
		kMoveFailDynObjPerson = 5,
		kMoveFailOutOfDynObjRect = 6,
		kMoveFailNoSpeed = 7,
		kMoveFailFinishedMoving = 8,
		kMoveFailStaticObj = 9,
		kMoveFailStackObject = 10,
		kMoveFailUnwalkableLoctype = 11,
		kMoveFailOutOfRoad = 12,
	};
	enum ObjectType {
		kPerson = 0,
		kNumObjectTypes = 1,
	};
public:
	static short sStackSize[1];
	void SetToLoc(/*unpacked*/ struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, /*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct _DYOBJ_INST*, long, long);
	void Die();
	enum MissionUpdates {
		kPickedUp = 0,
		kOuttaHere = 1,
		kReportNewPickupLocation = 2,
		kJoinedRiot = 3,
		kDrivenFromRiot = 4,
		kLeftRiotOfOwnVolition = 5,
		kReportNewLocation = 6,
		kMedVicToted = 7,
		kMedVicPickedUp = 8,
		kPersonCaught = 9,
	};
	enum Checks {
		kHeliLanded = 0,
		kHeliLow = 1,
		kMasterObjectLow = 2,
		kMasterObjectMovingSlowly = 3,
		kStackObjectLow = 4,
	};
	enum CompareMyLocWith {
		kMissionDestLoc = 0,
		kStackPointer = 1,
		kHeli = 2,
		kBucket = 3,
		kLastHitter = 4,
		kClosestMedevacVictim = 5,
		kClosestCriminal = 6,
		k_pad_MotherShipLoc = 7,
		kClosestCop = 8,
		kAvatarClose = 9,
		kClosestAmbulance = 10,
		kClosestCopCar = 11,
		kClosestFiretruck = 12,
		kClosestCriminalCar = 13,
		kClosestAmbient = 14,
	};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, /*unpacked*/ struct _DYOBJ_INST*, int32_t, int32_t);
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, /*unpacked*/ struct _DYOBJ_INST*);
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, /*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, /*unpacked*/ struct _DYOBJ_INST*, int32_t, int32_t);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, /*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct Point3d*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short sInitBhav[14];
	static short sHitRxnTree[20];
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	/*+0x18*/  long fLastInterrupt;
	enum LocationType {
		kOutOfCity = -1,
		kLocNoInfo = 0,
		kLocUnknown = 1,
		kNothing = 2,
		kForest = 3,
		kRubble = 4,
		kSmallPark = 5,
		kWireStuff = 6,
		kCarRoad = 7,
		kCarBridge = 8,
		kTrainTrack = 9,
		kDomestic = 10,
		kCommercial = 11,
		kWhiteCollarBusiness = 12,
		kBlueCollarBusiness = 13,
		kNumLocTypes = 14,
	};
public:
	static enum cYObject::LocationType sLocType[256];
	enum SearchType {
		kSearchEdgeGround = 0,
		kSearchAnywhereGround = 1,
		kSearchRoof = 2,
		kSearchAnywhereAtAll = 3,
	};
	struct cYObject::LocationInfo{ // not packed(0x8 bytes) TI: 0x425a
		/*+0x0*/   enum cYObject::SearchType searchType;
		/*+0x4*/   short maxNormalLoiterers; // 0x2 bytes
	};
public:
	static /*unpacked*/ struct cYObject::LocationInfo sLocInfo[14];
	/*unpacked*/ struct _DYOBJ_INST* SearchForDynObj(short, short, /*unpacked*/ struct _DYOBJ_INST*);
	short GetDirectionTo(/*unpacked*/ struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(/*unpacked*/ struct _CELL_INFO*, /*unpacked*/ struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(/*unpacked*/ struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(/*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(/*unpacked*/ struct _CELL_INFO*, enum cYObject::LocationType);
	// calltype: NearC
	static /*unpacked*/ struct Point3d GetPos(unsigned char, unsigned char, int32_t, int32_t);
	// calltype: NearC
	static /*unpacked*/ struct Point3d GetPos(/*unpacked*/ struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(/*unpacked*/ struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	struct cYObject::MoveInfo{ // not packed(0x10 bytes) TI: 0x3748
		/*+0x0*/   enum cYObject::LocationType *locType;
		/*+0x4*/   signed char * roadDir;
		/*+0x8*/   /*unpacked*/ struct _DYOBJ_INST *dyBlock;
		/*+0xc*/   /*unpacked*/ struct _STOBJ_INST *stBlock;
	};
	struct cYObject::_ControlInput{ // not packed(0x18 bytes) TI: 0x3745
		/*+0x0*/   /*unpacked*/ struct Point3d vector; // 0xc bytes
		/*+0xc*/   int32_t fwdSpeed;
		/*+0x10*/  int32_t rotateRate;
		/*+0x14*/  int32_t yaw;
	};
	struct cYObject::_ControlInput{ // not packed(0x18 bytes) TI: 0x3745
		/*+0x0*/   /*unpacked*/ struct Point3d vector; // 0xc bytes
		/*+0xc*/   int32_t fwdSpeed;
		/*+0x10*/  int32_t rotateRate;
		/*+0x14*/  int32_t yaw;
	};
private:
	static unsigned short sInited;
	static /*unpacked*/ class cYObject *sObjects[100];
	static enum cYObject::LocationType sNeutralPersonLocs[18][10];
	static enum cYObject::LocationType sNeutralMissionLocs[14][10];
	static /*unpacked*/ class cYObject *sList;
	static /*unpacked*/ class NResFile sFile;
	static /*unpacked*/ class ResFile sErrorFile;
public:
	static /*unpacked*/ class YObjLang *sLanguage;
	static /*unpacked*/ class Behavior *sBehavior;
	static /*unpacked*/ struct Point3d sMoveTable[8];
	static /*unpacked*/ struct Point3d sUnitVectorTable[8];
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, /*unpacked*/ struct Point3d, /*unpacked*/ class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	/*unpacked*/ class cYObject* GetClosest(enum MissionSupertype, enum MissionType, unsigned short, short *);
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetObjectA(short);
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetObjectA(/*unpacked*/ struct _DYOBJ_INST*);
	/*unpacked*/ class cYObject* GetPersonWithMaster(/*unpacked*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(/*unpacked*/ struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	/*+0x1c*/  long fMissionID;
	void PutOnGround();
	void Unlink();
	unsigned short CellIsSet();
	/*+0x20*/  unsigned short fbLinked; // 0x2 bytes
	unsigned short Linked();
	/*+0x22*/  unsigned short fInited; // 0x2 bytes
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	/*+0x24*/  /*unpacked*/ struct _DYOBJ_INST fDyn; // 0x64 bytes
	/*+0x88*/  unsigned char fCellX; // 0x1 bytes
	/*+0x89*/  unsigned char fCellY; // 0x1 bytes
	/*+0x8c*/  unsigned long fBodyName;
	/*+0x90*/  /*unpacked*/ class cCopterBody *fBody;
	/*+0x94*/  unsigned long fAnimName;
	/*+0x98*/  /*unpacked*/ class cCopterAnim *fAnim;
	/*+0x9c*/  short fFace; // 0x2 bytes
	void SetFace(short);
	/*+0xa0*/  /*unpacked*/ struct Point3d fLastMasterLoc; // 0xc bytes
	unsigned short SetMaster(/*unpacked*/ struct _DYOBJ_INST*);
	/*unpacked*/ struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	/*+0xac*/  enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static /*unpacked*/ struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static /*unpacked*/ struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static /*unpacked*/ struct _DYOBJ_INST* GetFirstDynObj(/*unpacked*/ struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(/*unpacked*/ struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	/*+0xb0*/  unsigned short fSimulate; // 0x2 bytes
	/*+0xb4*/  /*unpacked*/ class Behavior *fBehavior;
	/*+0xb8*/  /*unpacked*/ class cYObject *fNext;
	/*+0xbc*/  short fID; // 0x2 bytes
	/*+0xbe*/  short _pad; // 0x2 bytes
	/*+0xc0*/  short fTemp[8]; // 0x10 bytes
	/*+0xd0*/  short fData[48]; // 0x60 bytes
	/*+0x130*/ unsigned char * fPointers[4]; // 0x10 bytes
	/*+0x140*/ short fIterations; // 0x2 bytes
	/*+0x142*/ short _pad2; // 0x2 bytes
	/*+0x144*/ short fDirInc; // 0x2 bytes
	/*+0x148*/ /*unpacked*/ struct cYObject::ObjDefHeader fDefinition; // 0x1c bytes
	enum /* __unnamed */ {
		kMasterObject = 0,
		kLastHitterObject = 1,
	};
	enum /* __unnamed */ {
		kDirection = 0,
		kAwake = 1,
		kHeightCanJump = 2,
		kPersonType = 3,
		kMissionType = 4,
		kMissionSupertype = 5,
		kAnimFrame = 6,
		kObjectID = 7,
		kRiotVal = 8,
		kVisible = 9,
		kLastRiotVal = 10,
		kNearMedFar = 11,
		kLastHitterMsg = 12,
		kMegaphoneMessage = 13,
		kInRxnTree = 14,
		kDead = 15,
		kColorIndexShift = 16,
		kDynAnim = 17,
		kSpeed = 18,
		kOnlyOnRoad = 19,
		kMoveOnlyNeutrally = 20,
		kMoveNoMatterWhat = 21,
		kSpecificToScurkID = 22,
		kCaptured = 23,
		kStartingObject = 24,
		kSoundChannel = 25,
		kCurrentSound = 26,
		kDynSound = 27,
		kSoundFrequencyAdj = 28,
		kInitBhav = 29,
		kLastRxnTree = 30,
	};
protected:
	virtual enum TreeSim::ReturnCode TryElement(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*) /* override */;
	virtual void HandleOverflow(); // vtable+0x10
	virtual short InterpValue(short, short, short **); // vtable+0x14
	enum TreeSim::ReturnCode TryExpression(/*unpacked*/ struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(/*unpacked*/ struct Point3d, int32_t, /*unpacked*/ struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, /*unpacked*/ struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, /*unpacked*/ struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static signed char GetRoadDir(/*unpacked*/ struct Point3d);
	enum SoundNum {
		kSNone = -1,
		kSAssertion = 1,
		kSDunno = 2,
		kSHoHum = 3,
		kSQuery = 4,
		kSSad = 5,
		kSTitter = 6,
		kSYouGoGirl = 7,
		kSGrunt = 8,
		kSWhoa = 9,
		kSHey = 10,
		kSHiThere = 11,
		kSAaah = 12,
		kSAck = 13,
		kSFeet = 14,
		kSYrUnderArrest = 15,
		kSGimmeYrCash = 16,
		kSSinisterChuckle = 17,
		kSSayYrKindaHot = 18,
	};
public:
	// calltype: NearC
	static short DistributeSoundChannels(short, short);
	unsigned short PlaySoundA(enum cYObject::SoundNum, unsigned short);
	// calltype: NearC
	static void PhaseAndBeamSoundChannels();
	static short sSoundChannels[15];
	// calltype: NearC
	static short ExtraSoundChannelForSure();
	// calltype: NearC
	static short RegSoundChannel();
	// calltype: NearC
	static void StopAllSounds();
	void StopSound();
	void ClearSoundChannel();
	short GetActualSoundChannel();
	// calltype: NearC
	static short GetActualSoundChannel(short);
	void SetSoundChannel(short);
	// calltype: NearC
	static short GetSRadius(/*unpacked*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t GetRadius(/*unpacked*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static /*unpacked*/ struct _DYOBJ_INST* GetDynObj(/*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct Point3d, int32_t, /*unpacked*/ struct _DYOBJ_INST*, /*unpacked*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static /*unpacked*/ struct _STOBJ_INST* GetStaticObj(/*unpacked*/ struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(/*unpacked*/ struct Point3d, int32_t, /*unpacked*/ struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(/*unpacked*/ struct _DYOBJ_INST*);
	unsigned short CloseTo(/*unpacked*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetFirst();
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetFirst(short, short);
	// calltype: NearC
	static /*unpacked*/ class cYObject* GetFirstInvisible(short);
	/*unpacked*/ class cYObject* PutTotedMedVicOnHeli();
	/*unpacked*/ class cYObject* PutTotedMedVicOn(/*unpacked*/ struct _DYOBJ_INST*);
	unsigned short SetStartingObject(/*unpacked*/ struct _DYOBJ_INST*);
	/*unpacked*/ class cYObject* DropToted();
	/*unpacked*/ class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(/*unpacked*/ struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(/*unpacked*/ struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	virtual void Reset(); // vtable+0x18
	virtual void ~cYObject() /* override */;
protected:
	virtual void Error(short) /* override */;
	void cYObject(short, /*unpacked*/ class Behavior*, /*unpacked*/ struct Point3d, short);
public:
	/*unpacked*/ struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static /*unpacked*/ class ResFile* GetGlobalFile();
	// calltype: NearC
	static /*unpacked*/ class YObjLang* GetLanguage();
	// calltype: NearC
	static /*unpacked*/ class ResFile* GetErrorFile();
	short GetID();
	/*unpacked*/ struct Point3d GetLocation();
	/*unpacked*/ class Behavior* GetBehavior();
	void Draw(/*unpacked*/ struct VRBlit*);
	/*+0x164*/ float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(/*unpacked*/ struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(/*unpacked*/ struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	/*unpacked*/ class cYObject* GetNext();
	void DynEffects(short, enum cYObject::MoveErrorCode, /*unpacked*/ struct cYObject::MoveInfo*);
	void DynEffectsFixed(int32_t, enum cYObject::MoveErrorCode, /*unpacked*/ struct cYObject::MoveInfo*);
	using PrimProc = enum TreeSim::ReturnCode (*)(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
public:
	static enum TreeSim::ReturnCode (*PrimProcs[64])(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIdle(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIdle(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetAnim(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetAnim(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAttr(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iAttr(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalk(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalk(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetBody(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetBody(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sRandom(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iRandom(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToAndGrabOntoStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToAndGrabOntoStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateMyMission(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateMyMission(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForTrue(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForTrue(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCompareMyLocWith(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iCompareMyLocWith(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSelfDecommission(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iSelfDecommission(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOffMasterObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOffMasterObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocType(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocType(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocTypeNeutral(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocTypeNeutral(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCanJumpOffHere(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iCanJumpOffHere(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForSpotlightInMyCell(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForSpotlightInMyCell(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIncrementRiotVal(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIncrementRiotVal(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetSurroundingRiotVal(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetSurroundingRiotVal(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisScurkID(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisScurkID(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGosubToInitbhav(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGosubToInitbhav(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAdjustRadiusForRiotVal(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iAdjustRadiusForRiotVal(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sJoinRiot(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iJoinRiot(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetDirection(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetDirection(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowProjectile(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowProjectile(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromLastHitter(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromLastHitter(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsLastHitter(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsLastHitter(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOutOfRoadEtc(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOutOfRoadEtc(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGenerateMedevacAndSetSelfAsVictim(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGenerateMedevacAndSetSelfAsVictim(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnToNearbyFire(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnToNearbyFire(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDie(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iDie(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutObjIntoTreeNum(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutObjIntoTreeNum(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sVisitOz(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iVisitOz(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimVisible(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimVisible(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimInvisible(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimInvisible(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMeMasterOfStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMeMasterOfStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyStackObjectVisitOz(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyStackObjectVisitOz(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutTotedMedVicOnStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutTotedMedVicOnStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTakeAnyMedVicOffStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTakeAnyMedVicOffStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimToted(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimToted(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetNumSpacesOnStackObject(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetNumSpacesOnStackObject(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDropToted(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iDropToted(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimPickedUp(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimPickedUp(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCloseToHeli(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iCloseToHeli(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetMyExpression(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetMyExpression(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetHeliSpeedPlusDamage(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetHeliSpeedPlusDamage(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisCellSafe(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisCellSafe(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPlaySound(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iPlaySound(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnHeliIfHarnessRaised(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnHeliIfHarnessRaised(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAmIOnHeli(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iAmIOnHeli(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowFieryProjectile(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowFieryProjectile(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTellStartingObjectTrueOrFalse(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iTellStartingObjectTrueOrFalse(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutMyCarInStack(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutMyCarInStack(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDoIHaveAMaster(/*unpacked*/ class cYObject*, /*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
	enum TreeSim::ReturnCode iDoIHaveAMaster(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*);
};

// Type: /*unpacked*/ class TreeSim;
// VTABLE: COPTER_D 0x00593630
class TreeSim{ // not packed(0x14 bytes) TI: 0x3610
	enum /* __unnamed */ {
		kNumLocals = 4,
		kMaxIterations = 128,
	};
	struct TreeSim::StackElem{ // not packed(0x14 bytes) TI: 0x3614
		/*+0x0*/   short treeID; // 0x2 bytes
		/*+0x2*/   short nodeNum; // 0x2 bytes
		/*+0x4*/   short objectID; // 0x2 bytes
		/*+0x4*/   short _pad; // 0x2 bytes
		/*+0x4*/   unsigned char * objectPtr;
		/*+0x8*/   short locals[4]; // 0x8 bytes
		/*+0x10*/  /*unpacked*/ class Behavior *pBehavior;
		void GetTreeName(unsigned char *);
	};
private:
	/*+0x4*/   /*unpacked*/ struct TreeSim::StackElem *fStack;
	/*+0x8*/   short fStackSize; // 0x2 bytes
	/*+0xa*/   short fMaxStackSize; // 0x2 bytes
	/*+0xc*/   short fIterations; // 0x2 bytes
	/*+0xe*/   short _pad; // 0x2 bytes
	/*+0x10*/  short * fAutoStackArea;
	enum ReturnCode {
		kTrueComplete = 1,
		kFalseComplete = 0,
		kEngaged = 2,
		kError = -1,
		kStackLoaded = 3,
	};
	enum /* __unnamed */ {
		kStackErrorBase = 1000,
		kStackOverflow = 1000,
		kUndefinedTransition = 1001,
		kTooManyIterations = 1002,
		kStackUnderflow = 1003,
		kStackErrorMax = 1004,
	};
protected:
	virtual enum TreeSim::ReturnCode TryElement(/*unpacked*/ struct TreeSim::StackElem*, /*unpacked*/ struct Behavior::Node*); // vtable+0x0
	virtual void Error(short); // vtable+0x4
	void GetCurrentNode(short *, short *);
	void Reset(/*unpacked*/ class Behavior*, short);
	signed char NodeComplete(unsigned short);
	unsigned short Gosub(/*unpacked*/ class Behavior*, short *, short);
public:
	void TreeSim(short, short *);
	void TreeSim(short, short, /*unpacked*/ class Behavior*, short *);
	virtual void ~TreeSim(); // vtable+0x8
	virtual unsigned short Simulate(long, unsigned short); // vtable+0xc
	/*unpacked*/ struct TreeSim::StackElem* GetHighLevelAction();
	/*unpacked*/ struct TreeSim::StackElem* GetCurElem();
	/*unpacked*/ struct TreeSim::StackElem* GetNthElem(short);
	short GetStackSize();
	short GetMaxStackSize();
};

// Type: /*unpacked*/ class YObjLang;
// VTABLE: COPTER_D 0x005936e8
class YObjLang : public Language
{ // not packed(0x4 bytes) TI: 0x484d
public:
	void YObjLang(/*unpacked*/ class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(/*unpacked*/ class Behavior*, /*unpacked*/ struct Behavior::Node*, unsigned char *) /* override */;
	virtual void GetPrimName(short, unsigned char *) /* override */;
	virtual unsigned short IsSingleExit(/*unpacked*/ struct Behavior::Node*) /* override */;
	// calltype: NearC
	static void SwizzleTreeParam(short, /*unpacked*/ struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler() /* override */;
	enum /* __unnamed */ {
		kIdle = 0,
		kSetAnim = 1,
		kAttr = 2,
		_kWhatsAhead = 3,
		kWalk = 4,
		_kRunPad = 5,
		kSetBody = 6,
		kRandom = 7,
		_kGetDirDistToFirst = 8,
		_kGetDirDistToPerson = 9,
		_kRoadDir = 10,
		_kSearchForDyn = 11,
		kWalkToAndGrabOntoStackObject = 12,
		kUpdateMyMission = 13,
		kCheckForTrue = 14,
		kCompareMyLocWith = 15,
		kSelfDecommission = 16,
		kGetOffMasterObject = 17,
		kTurnTowardsStackObject = 18,
		kIsThisLocType = 19,
		kIsThisLocTypeNeutral = 20,
		kCanJumpOffHere = 21,
		kCheckForSpotlightInMyCell = 22,
		kIncrementRiotVal = 23,
		kGetSurroundingRiotVal = 24,
		kIsThisScurkID = 25,
		kGosubToInitbhav = 26,
		kAdjustRadiusForRiotVal = 27,
		kJoinRiot = 28,
		kSetDirection = 29,
		kThrowProjectile = 30,
		kTurnFromStackObject = 31,
		kTurnFromLastHitter = 32,
		kTurnTowardsLastHitter = 33,
		kGetOutOfRoadEtc = 34,
		kGenerateMedevacAndSetSelfAsVictim = 35,
		kTurnToNearbyFire = 36,
		kDie = 37,
		kWalkToStackObject = 38,
		kPutObjIntoTreeNum = 39,
		kVisitOz = 40,
		_kNotUsed = 41,
		kMakeMyMedevacVictimVisible = 42,
		kMakeMyMedevacVictimInvisible = 43,
		kMakeMeMasterOfStackObject = 44,
		kMakeMyStackObjectVisitOz = 45,
		kPutTotedMedVicOnStackObject = 46,
		kTakeAnyMedVicOffStackObject = 47,
		kGetOnStackObject = 48,
		kUpdateStackVictimToted = 49,
		kGetNumSpacesOnStackObject = 50,
		kDropToted = 51,
		kUpdateStackVictimPickedUp = 52,
		kCloseToHeli = 53,
		kSetMyExpression = 54,
		kGetHeliSpeedPlusDamage = 55,
		kIsThisCellSafe = 56,
		kPlaySound = 57,
		kGetOnHeliIfHarnessRaised = 58,
		kAmIOnHeli = 59,
		kThrowFieryProjectile = 60,
		kTellStartingObjectTrueOrFalse = 61,
		kPutMyCarInStack = 62,
		kDoIHaveAMaster = 63,
		kNumPrimitives = 64,
	};
public:
	virtual short CountPrimitives() /* override */;
	enum /* __unnamed */ {
		kMyself = 0,
		kTreeParam = 1,
		kTargetObj = 2,
		kMyData = 3,
		kTreeParamData = 4,
		kTargetObjData = 5,
		kSimGlobals = 6,
		kImmediate = 7,
		kTempVars = 8,
		kStackVars = 9,
		kStackObject = 10,
		kTempTempVars = 11,
		kTreeTableValue = 12,
		kNumOwners = 13,
	};
	struct YObjLang::OwnerDataParam{ // not packed(0x8 bytes) TI: 0x3593
		/*+0x0*/   short owner1; // 0x2 bytes
		/*+0x2*/   short data1; // 0x2 bytes
		/*+0x4*/   short owner2; // 0x2 bytes
		/*+0x6*/   short data2; // 0x2 bytes
	};
	struct YObjLang::TurnToFireParam{ // not packed(0x4 bytes) TI: 0x3591
		/*+0x0*/   short xdistloc; // 0x2 bytes
		/*+0x2*/   short ydistloc; // 0x2 bytes
	};
	struct YObjLang::GetOutOfRoadParam{ // not packed(0x2 bytes) TI: 0x358f
		/*+0x0*/   short decTemp; // 0x2 bytes
	};
	struct YObjLang::SetDirectionParam{ // not packed(0x2 bytes) TI: 0x358e
		/*+0x0*/   short dirTemp; // 0x2 bytes
	};
	struct YObjLang::CheckForSpotParam{ // not packed(0x4 bytes) TI: 0x358c
		/*+0x0*/   short brightnessTemp; // 0x2 bytes
		/*+0x2*/   short dirToHeliTemp; // 0x2 bytes
	};
	struct YObjLang::GetSurroundingRiotValParam{ // not packed(0x8 bytes) TI: 0x358a
		/*+0x0*/   short distTemp; // 0x2 bytes
		/*+0x2*/   short dirToConcTemp; // 0x2 bytes
		/*+0x4*/   short riotValTemp; // 0x2 bytes
		/*+0x6*/   short numPeopleCountedTemp; // 0x2 bytes
	};
	struct YObjLang::IncrementRiotValParam{ // not packed(0x2 bytes) TI: 0x3588
		/*+0x0*/   short riotValLiteral; // 0x2 bytes
	};
	struct YObjLang::IsThisScurkIDParam{ // not packed(0x2 bytes) TI: 0x3586
		/*+0x0*/   short scurkIDLiteral; // 0x2 bytes
	};
	struct YObjLang::IsThisLocTypeParam{ // not packed(0x2 bytes) TI: 0x3584
		/*+0x0*/   short locTypeLiteral; // 0x2 bytes
	};
	struct YObjLang::UpdateMyMissionParam{ // not packed(0x2 bytes) TI: 0x3582
		/*+0x0*/   short updateLiteral; // 0x2 bytes
	};
	struct YObjLang::CheckForTrueParam{ // not packed(0x2 bytes) TI: 0x3580
		/*+0x0*/   short whatLiteral; // 0x2 bytes
	};
	struct YObjLang::CompareMyLocWithParam{ // not packed(0x6 bytes) TI: 0x357e
		/*+0x0*/   short withWhatLiteral; // 0x2 bytes
		/*+0x2*/   short distData; // 0x2 bytes
		/*+0x4*/   short distOwner; // 0x2 bytes
	};
	struct YObjLang::WalkAndGrabParam{ // not packed(0x4 bytes) TI: 0x357c
		/*+0x0*/   short decTemp; // 0x2 bytes
		/*+0x2*/   short dynAnimBoolean; // 0x2 bytes
	};
	struct YObjLang::SearchForDynParam{ // not packed(0x6 bytes) TI: 0x357a
		/*+0x0*/   short searchdynobjtypetemp; // 0x2 bytes
		/*+0x2*/   short onlyonmasterboolean; // 0x2 bytes
		/*+0x4*/   short numcellstospiral; // 0x2 bytes
	};
	struct YObjLang::IdleParam{ // not packed(0x2 bytes) TI: 0x3578
		/*+0x0*/   short decTemp; // 0x2 bytes
	};
	struct YObjLang::SetAnimParam{ // not packed(0x4 bytes) TI: 0x3576
		/*+0x0*/   unsigned long animname;
	};
	struct YObjLang::SetBodyParam{ // not packed(0x4 bytes) TI: 0x3574
		/*+0x0*/   unsigned long bodyname;
	};
	struct YObjLang::WalkRunParam{ // not packed(0x7 bytes) TI: 0x3572
		/*+0x0*/   signed char decTemp; // 0x1 bytes
		/*+0x1*/   signed char onlyNeutralBoolean; // 0x1 bytes
		/*+0x2*/   signed char moveFailTemp; // 0x1 bytes
		/*+0x3*/   signed char newLocTemp; // 0x1 bytes
		/*+0x4*/   signed char roadDirTemp; // 0x1 bytes
		/*+0x5*/   signed char dynAnimBoolean; // 0x1 bytes
		/*+0x6*/   signed char speedTemp; // 0x1 bytes
	};
	struct YObjLang::RandomParam{ // not packed(0x6 bytes) TI: 0x3570
		/*+0x0*/   short destTemp; // 0x2 bytes
		/*+0x2*/   short rangeData; // 0x2 bytes
		/*+0x4*/   short rangeOwner; // 0x2 bytes
	};
	struct YObjLang::RoadDirParam{ // not packed(0x6 bytes) TI: 0x356e
		/*+0x0*/   short dirTemp; // 0x2 bytes
		/*+0x2*/   short distAheadData; // 0x2 bytes
		/*+0x4*/   short distAheadOwner; // 0x2 bytes
	};
	struct YObjLang::DirDistFirstParam{ // not packed(0x8 bytes) TI: 0x356c
		/*+0x0*/   short dirToTemp; // 0x2 bytes
		/*+0x2*/   short distToTemp; // 0x2 bytes
		/*+0x4*/   short whatData; // 0x2 bytes
		/*+0x6*/   short whatOwner; // 0x2 bytes
	};
	struct YObjLang::DirDistPersonParam{ // not packed(0x8 bytes) TI: 0x356a
		/*+0x0*/   short dirToTemp; // 0x2 bytes
		/*+0x2*/   short distToTemp; // 0x2 bytes
		/*+0x4*/   short whoData; // 0x2 bytes
		/*+0x6*/   short whoOwner; // 0x2 bytes
	};
	struct YObjLang::AttrParam{ // not packed(0x8 bytes) TI: 0x3568
		/*+0x0*/   short lhsData; // 0x2 bytes
		/*+0x2*/   short rhsData; // 0x2 bytes
		/*+0x4*/   LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned; // 0x8 bytes
		/*+0x4*/   LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType; // 0x8 bytes
		/*+0x6*/   LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner; // 0x8 bytes
		/*+0x6*/   LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner; // 0x8 bytes
	};
	enum /* __unnamed */ {
		kGreaterThan = 0,
		kLessThan = 1,
		kEquals = 2,
		kIncrement = 3,
		kDecrement = 4,
		kSetValue = 5,
		kTimesEq = 6,
		kDivideEq = 7,
		kIsFlagSet = 8,
		kSetFlag = 9,
		kClearFlag = 10,
		kNumOps = 11,
	};
	struct YObjLang::MiscParam{ // not packed(0x8 bytes) TI: 0x3564
		/*+0x0*/   short m1; // 0x2 bytes
		/*+0x2*/   short m2; // 0x2 bytes
		/*+0x4*/   short m3; // 0x2 bytes
		/*+0x6*/   short m4; // 0x2 bytes
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// /*unpacked*/ union YObjLang::Param Param
	enum TreeNum {
		kNoTree = -1,
		kSpotlightTree = 900,
		kMegaphoneTree = 901,
		kOuchTree = 902,
		kDieTree = 903,
		kRunTree = 904,
		kRunOrSwoonTree = 905,
		kSwoonTree = 906,
	};
	enum /* __unnamed */ {
		kWeightStringsID = 140,
		kPrimitiveStringsID = 139,
		kDataLabelsID = 129,
		kDataBase = 1,
		kGlobalBase = 33,
		kOwnerStringsID = 132,
		kNewOwnerBase = 1,
		kMacroDescriptionStrings = 133,
		kPrimMacroBase = 1,
		kMotiveStringsID = 134,
		kMiscStringsID = 135,
		kDontCare = 1,
		kSaveChanges = 2,
		kMaxEntryLabel = 3,
		kBehStringsID = 128,
		kPrimBase = 1,
		kOwnerBase = 33,
		kGosubStr = 65,
		kOpenParen = 66,
		kForType = 67,
		kRadius = 68,
		kFromZeroTo = 69,
		kInto = 70,
		kDistance = 71,
		kStack = 72,
		kUseTempVars = 73,
		kCloseParen = 74,
		kTreetemp = 75,
		kObjtemp = 76,
		kThisObj = 77,
		kAlertType = 78,
		kCheckTreeID = 79,
		kActionTreeID = 80,
		kForAction = 81,
		kEqualStr = 82,
		kTree = 83,
		kRate = 84,
		kTo = 85,
		kForNeed = 86,
		kSel = 87,
		kPairAction = 88,
		kToCheck = 89,
		kSet = 90,
		kToNeed = 91,
		kUpdateNeed = 92,
		kToIndex = 93,
		kCheck = 94,
		kAct = 95,
		kUntil = 96,
		kNot = 97,
		kClear = 98,
		kFor = 99,
		kByAmount = 100,
		kOpBase = 117,
		kTypeBase = 143,
		kBaseTreeBase = 164,
	};
};

// Type: /*unpacked*/ class Language (forward reference);
// Language Class implementation not found



// Contribution: 1:00161500-0016160a Module: 188, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00562500
void cYObject::Error(short errNum) {
// LINE 14:
	__asm        movsx  eax, errNum;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tb3;
// LINE 16:
_T18:
	__asm        push   0x8C085;
	__asm        push   0x5BEBAC;
	__asm        push   0x10;
	__asm        push   0x5BEBC4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 17:
	__asm        jmp    _Tff;
// LINE 20:
_T36:
	__asm        push   0x8C085;
	__asm        push   0x5BEBE8;
	__asm        push   0x14;
	__asm        push   0x5BEBFC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 21:
	__asm        jmp    _Tff;
// LINE 24:
_T54:
	__asm        push   0x8C085;
	__asm        push   0x5BEC20;
	__asm        push   0x18;
	__asm        push   0x5BEC34;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 25:
	__asm        jmp    _Tff;
// LINE 28:
_T72:
	__asm        push   0x8C085;
	__asm        push   0x5BEC58;
	__asm        push   0x1C;
	__asm        push   0x5BEC74;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 29:
	__asm        jmp    _Tff;
// LINE 32:
_T90:
	__asm        push   0x8C085;
	__asm        push   0x5BEC98;
	__asm        push   0x20;
	__asm        push   0x5BECB4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 33:
	__asm        jmp    _Tff;
// LINE 34:
	__asm        jmp    _Tff;
_Tb3:
	__asm        dec    dword ptr [ebp-8];
	__asm        cmp    dword ptr [ebp-8], 0x18;
	__asm        ja     _T90;

	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, _SwitchTable_e6[0][eax];
	__asm        jmp    _Switch_d2[0][ecx*4];
// Switch pointers:
//   _T18
//   _T36
//   _T54
//   _T72
//   _T90
// Switch table
//  [0, 4, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3]
// LINE 69:
_Tff:
	__asm        jmp    _T104;
_T104:
}



// Contribution: 3:00027bac-00027cd4 Module: 188, 4 byte alignment, initialized_data, read, write, 
