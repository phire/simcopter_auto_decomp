// Module: Yobject.obj
// Source: C:\Copter\Source\X\Y\Yobject.cpp
// autogenerated by simcopter_tool from PDB file

// Type: long[625];

// Type: class cYObject*[100];

// Type: enum cYObject::LocationType[10][18];

// Type: struct Point3d[8];

// Type: short;

// Type: short[15];

// Type: class cAvatar (forward reference);
class cAvatar : public cYObject
{
public:
	void cAvatar(struct Point3d);
	// calltype: NearC
	static class cAvatar* MakeAvatar();
	struct cYObject::_ControlInput fUserControl;
	void RotateMatrixAndYawForEngine();
	void GetControlInput();
	void Start(int32_t, int32_t, int32_t, int32_t);
	void Simulate();
	enum cYObject::MoveErrorCode AvatarMove(struct cYObject::MoveInfo*);
	virtual void Reset();
	void ResetView();
	short GetScurkID();
};

// Type: short[20];

// Type: long;

// Type: enum cYObject::LocationType[256];

// Type: struct cYObject::LocationInfo[14];

// Type: struct BodyDebugInfo[100];

// Type: short[1];

// Type: short[14];

// Type: unsigned short;

// Type: enum cYObject::LocationType[10][14];

// Type: class cYObject (forward reference);
class cYObject : public TreeSim, public YObjLang
{
	using DataType = short;
		enum __unnamed {
			kNumData = 48,
			kNumTemp = 8,
			kNumPointers = 4,
		};
	struct cYObject::ObjDefHeader{
		long version;
		short stackSize;
		short baseGraphic;
		short numGraphics;
		short initBhav;
		short toolbarPict;
		short treeTableID;
		short personalityID;
		short type;
		short red;
		short green;
		short blue;
		short _padding2;
	};
		enum MoveErrorCode {
			kMoveError = -1,
			kMoveSuccess = 0,
			kMoveFailTooHigh = 1,
			kMoveFailTooLow = 2,
			kMoveFailNonNeutralTerritory = 3,
			kMoveFailDynObjGeneric = 4,
			kMoveFailDynObjPerson = 5,
			kMoveFailOutOfDynObjRect = 6,
			kMoveFailNoSpeed = 7,
			kMoveFailFinishedMoving = 8,
			kMoveFailStaticObj = 9,
			kMoveFailStackObject = 10,
			kMoveFailUnwalkableLoctype = 11,
			kMoveFailOutOfRoad = 12,
		};
		enum ObjectType {
			kPerson = 0,
			kNumObjectTypes = 1,
		};
public:
	static short sStackSize[1];
	void SetToLoc(struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	void Die();
		enum MissionUpdates {
			kPickedUp = 0,
			kOuttaHere = 1,
			kReportNewPickupLocation = 2,
			kJoinedRiot = 3,
			kDrivenFromRiot = 4,
			kLeftRiotOfOwnVolition = 5,
			kReportNewLocation = 6,
			kMedVicToted = 7,
			kMedVicPickedUp = 8,
			kPersonCaught = 9,
		};
		enum Checks {
			kHeliLanded = 0,
			kHeliLow = 1,
			kMasterObjectLow = 2,
			kMasterObjectMovingSlowly = 3,
			kStackObjectLow = 4,
		};
		enum CompareMyLocWith {
			kMissionDestLoc = 0,
			kStackPointer = 1,
			kHeli = 2,
			kBucket = 3,
			kLastHitter = 4,
			kClosestMedevacVictim = 5,
			kClosestCriminal = 6,
			k_pad_MotherShipLoc = 7,
			kClosestCop = 8,
			kAvatarClose = 9,
			kClosestAmbulance = 10,
			kClosestCopCar = 11,
			kClosestFiretruck = 12,
			kClosestCriminalCar = 13,
			kClosestAmbient = 14,
		};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*);
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, struct Point3d*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short sInitBhav[14];
	static short sHitRxnTree[20];
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	long fLastInterrupt;
		enum LocationType {
			kOutOfCity = -1,
			kLocNoInfo = 0,
			kLocUnknown = 1,
			kNothing = 2,
			kForest = 3,
			kRubble = 4,
			kSmallPark = 5,
			kWireStuff = 6,
			kCarRoad = 7,
			kCarBridge = 8,
			kTrainTrack = 9,
			kDomestic = 10,
			kCommercial = 11,
			kWhiteCollarBusiness = 12,
			kBlueCollarBusiness = 13,
			kNumLocTypes = 14,
		};
public:
	static enum cYObject::LocationType sLocType[256];
		enum SearchType {
			kSearchEdgeGround = 0,
			kSearchAnywhereGround = 1,
			kSearchRoof = 2,
			kSearchAnywhereAtAll = 3,
		};
	struct cYObject::LocationInfo{
		enum cYObject::SearchType searchType;
		short maxNormalLoiterers;
	};
public:
	static struct cYObject::LocationInfo sLocInfo[14];
	struct _DYOBJ_INST* SearchForDynObj(short, short, struct _DYOBJ_INST*);
	short GetDirectionTo(struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(struct _CELL_INFO*, enum cYObject::LocationType);
	// calltype: NearC
	static struct Point3d GetPos(unsigned char, unsigned char, int32_t, int32_t);
	// calltype: NearC
	static struct Point3d GetPos(struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	struct cYObject::MoveInfo{
		enum cYObject::LocationType* locType;
		char * roadDir;
		struct _DYOBJ_INST* dyBlock;
		struct _STOBJ_INST* stBlock;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
private:
	static unsigned short sInited;
	static class cYObject* sObjects[100];
	static enum cYObject::LocationType sNeutralPersonLocs[18][10];
	static enum cYObject::LocationType sNeutralMissionLocs[14][10];
	static class cYObject* sList;
	static class NResFile sFile;
	static class ResFile sErrorFile;
public:
	static class YObjLang* sLanguage;
	static class Behavior* sBehavior;
	static struct Point3d sMoveTable[8];
	static struct Point3d sUnitVectorTable[8];
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, struct Point3d, class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	class cYObject* GetClosest(enum MissionSupertype, enum MissionType, unsigned short, short *);
	// calltype: NearC
	static class cYObject* GetObjectA(short);
	// calltype: NearC
	static class cYObject* GetObjectA(struct _DYOBJ_INST*);
	class cYObject* GetPersonWithMaster(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	long fMissionID;
	void PutOnGround();
	void Unlink();
	unsigned short CellIsSet();
	unsigned short fbLinked;
	unsigned short Linked();
	unsigned short fInited;
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	struct _DYOBJ_INST fDyn;
	unsigned char fCellX;
	unsigned char fCellY;
	unsigned long fBodyName;
	class cCopterBody* fBody;
	unsigned long fAnimName;
	class cCopterAnim* fAnim;
	short fFace;
	void SetFace(short);
	struct Point3d fLastMasterLoc;
	unsigned short SetMaster(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static struct _DYOBJ_INST* GetFirstDynObj(struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	unsigned short fSimulate;
	class Behavior* fBehavior;
	class cYObject* fNext;
	short fID;
	short _pad;
	short fTemp[8];
	short fData[48];
	unsigned char * fPointers[4];
	short fIterations;
	short _pad2;
	short fDirInc;
	struct cYObject::ObjDefHeader fDefinition;
		enum __unnamed {
			kMasterObject = 0,
			kLastHitterObject = 1,
		};
		enum __unnamed {
			kDirection = 0,
			kAwake = 1,
			kHeightCanJump = 2,
			kPersonType = 3,
			kMissionType = 4,
			kMissionSupertype = 5,
			kAnimFrame = 6,
			kObjectID = 7,
			kRiotVal = 8,
			kVisible = 9,
			kLastRiotVal = 10,
			kNearMedFar = 11,
			kLastHitterMsg = 12,
			kMegaphoneMessage = 13,
			kInRxnTree = 14,
			kDead = 15,
			kColorIndexShift = 16,
			kDynAnim = 17,
			kSpeed = 18,
			kOnlyOnRoad = 19,
			kMoveOnlyNeutrally = 20,
			kMoveNoMatterWhat = 21,
			kSpecificToScurkID = 22,
			kCaptured = 23,
			kStartingObject = 24,
			kSoundChannel = 25,
			kCurrentSound = 26,
			kDynSound = 27,
			kSoundFrequencyAdj = 28,
			kInitBhav = 29,
			kLastRxnTree = 30,
		};
protected:
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 16
	intro void HandleOverflow();
	// vtable: 20
	intro short InterpValue(short, short, short **);
	enum TreeSim::ReturnCode TryExpression(struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(struct Point3d, int32_t, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static char GetRoadDir(struct Point3d);
		enum SoundNum {
			kSNone = -1,
			kSAssertion = 1,
			kSDunno = 2,
			kSHoHum = 3,
			kSQuery = 4,
			kSSad = 5,
			kSTitter = 6,
			kSYouGoGirl = 7,
			kSGrunt = 8,
			kSWhoa = 9,
			kSHey = 10,
			kSHiThere = 11,
			kSAaah = 12,
			kSAck = 13,
			kSFeet = 14,
			kSYrUnderArrest = 15,
			kSGimmeYrCash = 16,
			kSSinisterChuckle = 17,
			kSSayYrKindaHot = 18,
		};
public:
	// calltype: NearC
	static short DistributeSoundChannels(short, short);
	unsigned short PlaySoundA(enum cYObject::SoundNum, unsigned short);
	// calltype: NearC
	static void PhaseAndBeamSoundChannels();
	static short sSoundChannels[15];
	// calltype: NearC
	static short ExtraSoundChannelForSure();
	// calltype: NearC
	static short RegSoundChannel();
	// calltype: NearC
	static void StopAllSounds();
	void StopSound();
	void ClearSoundChannel();
	short GetActualSoundChannel();
	// calltype: NearC
	static short GetActualSoundChannel(short);
	void SetSoundChannel(short);
	// calltype: NearC
	static short GetSRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t GetRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _DYOBJ_INST* GetDynObj(struct _DYOBJ_INST*, struct Point3d, int32_t, struct _DYOBJ_INST*, struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _STOBJ_INST* GetStaticObj(struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(struct Point3d, int32_t, struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(struct _DYOBJ_INST*);
	unsigned short CloseTo(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetFirst();
	// calltype: NearC
	static class cYObject* GetFirst(short, short);
	// calltype: NearC
	static class cYObject* GetFirstInvisible(short);
	class cYObject* PutTotedMedVicOnHeli();
	class cYObject* PutTotedMedVicOn(struct _DYOBJ_INST*);
	unsigned short SetStartingObject(struct _DYOBJ_INST*);
	class cYObject* DropToted();
	class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	// vtable: 24
	intro void Reset();
	virtual void ~cYObject();
protected:
	virtual void Error(short);
	void cYObject(short, class Behavior*, struct Point3d, short);
public:
	struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static class ResFile* GetGlobalFile();
	// calltype: NearC
	static class YObjLang* GetLanguage();
	// calltype: NearC
	static class ResFile* GetErrorFile();
	short GetID();
	struct Point3d GetLocation();
	class Behavior* GetBehavior();
	void Draw(struct VRBlit*);
	float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	class cYObject* GetNext();
	void DynEffects(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	void DynEffectsFixed(int32_t, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	using PrimProc = enum TreeSim::ReturnCode (*)(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
public:
	static enum TreeSim::ReturnCode (*PrimProcs[64])(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIdle(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIdle(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetAnim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetAnim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAttr(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAttr(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalk(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalk(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetBody(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetBody(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sRandom(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iRandom(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToAndGrabOntoStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateMyMission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateMyMission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForTrue(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForTrue(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCompareMyLocWith(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCompareMyLocWith(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSelfDecommission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSelfDecommission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOffMasterObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOffMasterObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocType(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocType(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocTypeNeutral(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocTypeNeutral(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCanJumpOffHere(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCanJumpOffHere(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForSpotlightInMyCell(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForSpotlightInMyCell(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIncrementRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIncrementRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetSurroundingRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetSurroundingRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisScurkID(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisScurkID(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGosubToInitbhav(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGosubToInitbhav(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAdjustRadiusForRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAdjustRadiusForRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sJoinRiot(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iJoinRiot(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetDirection(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetDirection(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOutOfRoadEtc(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOutOfRoadEtc(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGenerateMedevacAndSetSelfAsVictim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnToNearbyFire(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnToNearbyFire(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDie(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDie(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutObjIntoTreeNum(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutObjIntoTreeNum(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimVisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimVisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimInvisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMeMasterOfStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMeMasterOfStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyStackObjectVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyStackObjectVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutTotedMedVicOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutTotedMedVicOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTakeAnyMedVicOffStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetNumSpacesOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetNumSpacesOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDropToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDropToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimPickedUp(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimPickedUp(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCloseToHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCloseToHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetMyExpression(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetMyExpression(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetHeliSpeedPlusDamage(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetHeliSpeedPlusDamage(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisCellSafe(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisCellSafe(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPlaySound(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPlaySound(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnHeliIfHarnessRaised(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAmIOnHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAmIOnHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowFieryProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowFieryProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTellStartingObjectTrueOrFalse(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutMyCarInStack(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutMyCarInStack(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDoIHaveAMaster(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDoIHaveAMaster(struct TreeSim::StackElem*, struct Behavior::Node*);
};

// Type: class NResFile;
class NResFile : public ResFile
{
private:
	class PtrList<StdResLoader> fLoaders;
public:
	virtual void ~NResFile();
	class StdResLoader* GetLoader(unsigned long, void (*)(void * __ptr32, long));
	void ReleaseLoader(class StdResLoader*);
};

// Type: class ResFile;
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: class YObjLang (forward reference);
class YObjLang : public Language
{
public:
	void YObjLang(class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(class Behavior*, struct Behavior::Node*, unsigned char *);
	virtual void GetPrimName(short, unsigned char *);
	virtual unsigned short IsSingleExit(struct Behavior::Node*);
	// calltype: NearC
	static void SwizzleTreeParam(short, struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler();
		enum __unnamed {
			kIdle = 0,
			kSetAnim = 1,
			kAttr = 2,
			_kWhatsAhead = 3,
			kWalk = 4,
			_kRunPad = 5,
			kSetBody = 6,
			kRandom = 7,
			_kGetDirDistToFirst = 8,
			_kGetDirDistToPerson = 9,
			_kRoadDir = 10,
			_kSearchForDyn = 11,
			kWalkToAndGrabOntoStackObject = 12,
			kUpdateMyMission = 13,
			kCheckForTrue = 14,
			kCompareMyLocWith = 15,
			kSelfDecommission = 16,
			kGetOffMasterObject = 17,
			kTurnTowardsStackObject = 18,
			kIsThisLocType = 19,
			kIsThisLocTypeNeutral = 20,
			kCanJumpOffHere = 21,
			kCheckForSpotlightInMyCell = 22,
			kIncrementRiotVal = 23,
			kGetSurroundingRiotVal = 24,
			kIsThisScurkID = 25,
			kGosubToInitbhav = 26,
			kAdjustRadiusForRiotVal = 27,
			kJoinRiot = 28,
			kSetDirection = 29,
			kThrowProjectile = 30,
			kTurnFromStackObject = 31,
			kTurnFromLastHitter = 32,
			kTurnTowardsLastHitter = 33,
			kGetOutOfRoadEtc = 34,
			kGenerateMedevacAndSetSelfAsVictim = 35,
			kTurnToNearbyFire = 36,
			kDie = 37,
			kWalkToStackObject = 38,
			kPutObjIntoTreeNum = 39,
			kVisitOz = 40,
			_kNotUsed = 41,
			kMakeMyMedevacVictimVisible = 42,
			kMakeMyMedevacVictimInvisible = 43,
			kMakeMeMasterOfStackObject = 44,
			kMakeMyStackObjectVisitOz = 45,
			kPutTotedMedVicOnStackObject = 46,
			kTakeAnyMedVicOffStackObject = 47,
			kGetOnStackObject = 48,
			kUpdateStackVictimToted = 49,
			kGetNumSpacesOnStackObject = 50,
			kDropToted = 51,
			kUpdateStackVictimPickedUp = 52,
			kCloseToHeli = 53,
			kSetMyExpression = 54,
			kGetHeliSpeedPlusDamage = 55,
			kIsThisCellSafe = 56,
			kPlaySound = 57,
			kGetOnHeliIfHarnessRaised = 58,
			kAmIOnHeli = 59,
			kThrowFieryProjectile = 60,
			kTellStartingObjectTrueOrFalse = 61,
			kPutMyCarInStack = 62,
			kDoIHaveAMaster = 63,
			kNumPrimitives = 64,
		};
public:
	virtual short CountPrimitives();
		enum __unnamed {
			kMyself = 0,
			kTreeParam = 1,
			kTargetObj = 2,
			kMyData = 3,
			kTreeParamData = 4,
			kTargetObjData = 5,
			kSimGlobals = 6,
			kImmediate = 7,
			kTempVars = 8,
			kStackVars = 9,
			kStackObject = 10,
			kTempTempVars = 11,
			kTreeTableValue = 12,
			kNumOwners = 13,
		};
	struct YObjLang::OwnerDataParam{
		short owner1;
		short data1;
		short owner2;
		short data2;
	};
	struct YObjLang::TurnToFireParam{
		short xdistloc;
		short ydistloc;
	};
	struct YObjLang::GetOutOfRoadParam{
		short decTemp;
	};
	struct YObjLang::SetDirectionParam{
		short dirTemp;
	};
	struct YObjLang::CheckForSpotParam{
		short brightnessTemp;
		short dirToHeliTemp;
	};
	struct YObjLang::GetSurroundingRiotValParam{
		short distTemp;
		short dirToConcTemp;
		short riotValTemp;
		short numPeopleCountedTemp;
	};
	struct YObjLang::IncrementRiotValParam{
		short riotValLiteral;
	};
	struct YObjLang::IsThisScurkIDParam{
		short scurkIDLiteral;
	};
	struct YObjLang::IsThisLocTypeParam{
		short locTypeLiteral;
	};
	struct YObjLang::UpdateMyMissionParam{
		short updateLiteral;
	};
	struct YObjLang::CheckForTrueParam{
		short whatLiteral;
	};
	struct YObjLang::CompareMyLocWithParam{
		short withWhatLiteral;
		short distData;
		short distOwner;
	};
	struct YObjLang::WalkAndGrabParam{
		short decTemp;
		short dynAnimBoolean;
	};
	struct YObjLang::SearchForDynParam{
		short searchdynobjtypetemp;
		short onlyonmasterboolean;
		short numcellstospiral;
	};
	struct YObjLang::IdleParam{
		short decTemp;
	};
	struct YObjLang::SetAnimParam{
		unsigned long animname;
	};
	struct YObjLang::SetBodyParam{
		unsigned long bodyname;
	};
	struct YObjLang::WalkRunParam{
		char decTemp;
		char onlyNeutralBoolean;
		char moveFailTemp;
		char newLocTemp;
		char roadDirTemp;
		char dynAnimBoolean;
		char speedTemp;
	};
	struct YObjLang::RandomParam{
		short destTemp;
		short rangeData;
		short rangeOwner;
	};
	struct YObjLang::RoadDirParam{
		short dirTemp;
		short distAheadData;
		short distAheadOwner;
	};
	struct YObjLang::DirDistFirstParam{
		short dirToTemp;
		short distToTemp;
		short whatData;
		short whatOwner;
	};
	struct YObjLang::DirDistPersonParam{
		short dirToTemp;
		short distToTemp;
		short whoData;
		short whoOwner;
	};
	struct YObjLang::AttrParam{
		short lhsData;
		short rhsData;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner;
	};
		enum __unnamed {
			kGreaterThan = 0,
			kLessThan = 1,
			kEquals = 2,
			kIncrement = 3,
			kDecrement = 4,
			kSetValue = 5,
			kTimesEq = 6,
			kDivideEq = 7,
			kIsFlagSet = 8,
			kSetFlag = 9,
			kClearFlag = 10,
			kNumOps = 11,
		};
	struct YObjLang::MiscParam{
		short m1;
		short m2;
		short m3;
		short m4;
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// union YObjLang::Param Param
		enum TreeNum {
			kNoTree = -1,
			kSpotlightTree = 900,
			kMegaphoneTree = 901,
			kOuchTree = 902,
			kDieTree = 903,
			kRunTree = 904,
			kRunOrSwoonTree = 905,
			kSwoonTree = 906,
		};
		enum __unnamed {
			kWeightStringsID = 140,
			kPrimitiveStringsID = 139,
			kDataLabelsID = 129,
			kDataBase = 1,
			kGlobalBase = 33,
			kOwnerStringsID = 132,
			kNewOwnerBase = 1,
			kMacroDescriptionStrings = 133,
			kPrimMacroBase = 1,
			kMotiveStringsID = 134,
			kMiscStringsID = 135,
			kDontCare = 1,
			kSaveChanges = 2,
			kMaxEntryLabel = 3,
			kBehStringsID = 128,
			kPrimBase = 1,
			kOwnerBase = 33,
			kGosubStr = 65,
			kOpenParen = 66,
			kForType = 67,
			kRadius = 68,
			kFromZeroTo = 69,
			kInto = 70,
			kDistance = 71,
			kStack = 72,
			kUseTempVars = 73,
			kCloseParen = 74,
			kTreetemp = 75,
			kObjtemp = 76,
			kThisObj = 77,
			kAlertType = 78,
			kCheckTreeID = 79,
			kActionTreeID = 80,
			kForAction = 81,
			kEqualStr = 82,
			kTree = 83,
			kRate = 84,
			kTo = 85,
			kForNeed = 86,
			kSel = 87,
			kPairAction = 88,
			kToCheck = 89,
			kSet = 90,
			kToNeed = 91,
			kUpdateNeed = 92,
			kToIndex = 93,
			kCheck = 94,
			kAct = 95,
			kUntil = 96,
			kNot = 97,
			kClear = 98,
			kFor = 99,
			kByAmount = 100,
			kOpBase = 117,
			kTypeBase = 143,
			kBaseTreeBase = 164,
		};
};

// Type: class Behavior (forward reference);
class Behavior{
protected:
	class NResFile* fGlobFile;
	class NResFile* fPrivFile;
	class StdResLoader* fGlobalTrees;
	class StdResLoader* fPrivateTrees;
	class Language* fLanguage;
	void (*fSwizzler)(void * __ptr32, long);
		enum __unnamed {
			kPrimitiveBase = 0,
			kPrimitiveMax = 255,
			kActionBase = 256,
			kGlobalBase = 256,
			kGlobalMax = 4095,
			kPrivateBase = 4096,
			kPrivateMax = 8191,
			kSemiGlobalBase = 8192,
			kSemiGlobalMax = 30000,
			kTreeMax = 30000,
			kPrimitives = 0,
			kGlobalTrees = 1,
			kPrivateTrees = 2,
			kSemiGlobalTrees = 3,
			kMaxTreeClass = 3,
		};
	struct Behavior::NodeParameter{
		short p1;
		short p2;
		short p3;
		short p4;
	};
	struct Behavior::Node{
		short treeID;
		short primCode;
		char trueTrans;
		char falseTrans;
		struct Behavior::NodeParameter param;
	};
		enum __unnamed {
			kUndefined = -3,
			kPopOutTrue = -2,
			kPopOutFalse = -1,
		};
	struct Behavior::Tree{
		short numNodes;
		struct Behavior::Node nodes[1];
	};
public:
	void Behavior(class Language*, class NResFile*, class NResFile*);
	void ~Behavior();
	void GetNode(short, short, struct Behavior::Node*);
	// vtable: 0
	intro const struct Behavior::Node* GetNodeRef(short, short);
	// vtable: 4
	intro void GetNodeText(short, short, unsigned char *);
	void GetNodeText(struct Behavior::Node*, unsigned char *);
	// vtable: 8
	intro void GetTreeName(short, unsigned char *);
	short CountPrimitives();
	class Language* GetLanguage();
	class ResFile* GetPrivFile();
	class ResFile* GetGlobFile();
	// vtable: 12
	intro class ResFile* GetResFile(short);
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(struct Behavior::Tree*, long, void (*)(short, struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(struct Behavior::NodeParameter*);
};

// Type: int32_t;

// Type: void ();

// Type: class MTimer;
class MTimer{
		enum TimerResolution {
			nTimerResolutionMicroseconds = 0,
			nTimerResolutionMilliseconds = 1,
			nTimerResolutionSeconds = 2,
		};
public:
	void MTimer(enum MTimer::TimerResolution);
	void ~MTimer();
	void SetResolution(enum MTimer::TimerResolution);
	enum MTimer::TimerResolution GetResolution();
	void Start();
	void Stop();
	void Reset();
	void Restart();
	unsigned long GetElapsedTime();
	int32_t IsTimerRunning();
	unsigned long GetTickCount();
protected:
	enum MTimer::TimerResolution nTimerResolution;
	unsigned long lStartTime;
	unsigned long lTotalElapsedTime;
	unsigned long GetWindowsTimerFrequency();
	unsigned long lFrequency;
};

// Type: void;

// Type: int32_t *;

// Type: struct _DYOBJ_INST (forward reference);

// Type: struct Point3d (forward reference);

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _CELL_INFO (forward reference);

// Type: enum cYObject::SearchType;

// Type: enum cYObject::LocationType;

// Type: char[80];

// Type: double;

// Type: struct cYObject::MoveInfo;
struct cYObject::MoveInfo{
	enum cYObject::LocationType* locType;
	char * roadDir;
	struct _DYOBJ_INST* dyBlock;
	struct _STOBJ_INST* stBlock;
};

// Type: enum MissionSupertype;

// Type: unsigned char;

// Type: struct VRBlit (forward reference);

// Type: struct _HELI_DATA (forward reference);

// Type: enum PersonType;

// Type: enum MissionType;

// Type: struct _LZ_INFO (forward reference);

// Type: struct Rect;
struct Rect{
	short top;
	short left;
	short bottom;
	short right;
};

// Type: struct _SYSTEMTIME;
struct _SYSTEMTIME{
	unsigned short wYear;
	unsigned short wMonth;
	unsigned short wDayOfWeek;
	unsigned short wDay;
	unsigned short wHour;
	unsigned short wMinute;
	unsigned short wSecond;
	unsigned short wMilliseconds;
};

// Type: char[260];

// Type: char *;

// Type: struct _MISSION_PARMS;
struct _MISSION_PARMS{
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: enum cYObject::SoundNum;

// Type: class DigitalSound (forward reference);
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer* lpSound[8];
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long IsPlaying(struct IDirectSoundBuffer**);
public:
	virtual long IsPlaying();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: struct tagPassengerInfo;
struct tagPassengerInfo{
	long lPassengerFace;
	long lPassengerExpression;
	long lPassengerHealth;
	long lPassengerID;
	long lPassengerSeatUsed;
};

// Type: struct cYObject::MoveInfo (forward reference);

// Type: enum cYObject::MoveErrorCode;

// Type: struct Point3D;
struct Point3D{
	double x;
	double y;
	double z;
};

// Type: unsigned long;

// Type: struct VRFaceInfo;
struct VRFaceInfo{
	int32_t Face;
	int32_t Verts;
	int32_t Attribute;
	int32_t Plotter;
	struct VRBmpHdr* Bitmap;
	int32_t * VertList;
	struct MapVert* MapVList;
	struct MapVert* BarryPtr;
};

// Type: char[20];

// Type: float;

// Type: struct BodyDebugInfo;
struct BodyDebugInfo{
	long screenx;
	long screeny;
	char text[20];
};

// Type: class CBackBuffer (forward reference);
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	char * szFilePath;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
};

// Type: int32_t *[10];

// Type: int32_t[4][4];

// Type: struct _STOBJ_INST (forward reference);

// Type: class FlatResFile (forward reference);
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: uint32_t;

// Type: class PtrList<StdResLoader> (forward reference);
class PtrList<StdResLoader>{
	class PtrList<StdResLoader>::Iter{
	private:
		class PtrList<StdResLoader>* fObject;
		struct PtrList<StdResLoader>::PtrNode* fCur;
	public:
		void Iter(class PtrList<StdResLoader>*);
		class StdResLoader* Current();
		void Next();
		void Reset();
		class StdResLoader* First();
	};
	struct PtrList<StdResLoader>::PtrNode{
		class StdResLoader* data;
		struct PtrList<StdResLoader>::PtrNode* next;
	};
private:
	struct PtrList<StdResLoader>::PtrNode* fFirst;
	short fCount;
public:
	void PtrList<StdResLoader>();
	void ~PtrList<StdResLoader>();
	unsigned short Contains(class StdResLoader*);
	void RemoveAll();
	void Remove(class StdResLoader*);
	long Count();
	void Add(class StdResLoader*);
	class StdResLoader* GetByIndex(long);
	class StdResLoader* GetByOrder(long);
};

// Type: class ResFile (forward reference);
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: void (void * __ptr32, long);

// Type: class vector<char> (forward reference);
class vector<char>{
	using vector_allocator = class allocator<char>;
	using value_type = char;
	using pointer = char *;
	using iterator = char *;
	using const_iterator = char *;
	using reference = char&;
	using const_reference = const char&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<char const *,char,char const &,int>;
	using reverse_iterator = class reverse_iterator<char *,char,char &,int>;
protected:
	static class allocator<char> static_allocator;
	char * start;
	char * finish;
	char * end_of_storage;
	void insert_aux(char *, const char&);
public:
	char * begin();
	char * begin();
	char * end();
	char * end();
	class reverse_iterator<char const *,char,char const &,int> rbegin();
	class reverse_iterator<char *,char,char &,int> rbegin();
	class reverse_iterator<char const *,char,char const &,int> rend();
	class reverse_iterator<char *,char,char &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const char& operator[](uint32_t);
	char& operator[](uint32_t);
	void vector<char>(char *, char *);
	void vector<char>(const class vector<char>&);
	void vector<char>(uint32_t, const char&);
	void vector<char>();
	void ~vector<char>();
	class vector<char>& operator=(const class vector<char>&);
	void reserve(uint32_t);
	const char& front();
	char& front();
	const char& back();
	char& back();
	void push_back(const char&);
	void swap(class vector<char>&);
	void insert(char *, uint32_t, const char&);
	void insert(char *, char *, char *);
	char * insert(char *, const char&);
	void pop_back();
	void erase(char *, char *);
	void erase(char *);
};

// Type: struct TreeSim::StackElem (forward reference);
struct TreeSim::StackElem{
	short treeID;
	short nodeNum;
	short objectID;
	short _pad;
	unsigned char * objectPtr;
	short locals[4];
	class Behavior* pBehavior;
	void GetTreeName(unsigned char *);
};

// Type: struct Behavior::Node (forward reference);

// Type: enum TreeSim::ReturnCode;

// Type: class TreeSim;
class TreeSim{
		enum __unnamed {
			kNumLocals = 4,
			kMaxIterations = 128,
		};
	struct TreeSim::StackElem{
		short treeID;
		short nodeNum;
		short objectID;
		short _pad;
		unsigned char * objectPtr;
		short locals[4];
		class Behavior* pBehavior;
		void GetTreeName(unsigned char *);
	};
private:
	struct TreeSim::StackElem* fStack;
	short fStackSize;
	short fMaxStackSize;
	short fIterations;
	short _pad;
	short * fAutoStackArea;
		enum ReturnCode {
			kTrueComplete = 1,
			kFalseComplete = 0,
			kEngaged = 2,
			kError = -1,
			kStackLoaded = 3,
		};
		enum __unnamed {
			kStackErrorBase = 1000,
			kStackOverflow = 1000,
			kUndefinedTransition = 1001,
			kTooManyIterations = 1002,
			kStackUnderflow = 1003,
			kStackErrorMax = 1004,
		};
protected:
	// vtable: 0
	intro enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 4
	intro void Error(short);
	void GetCurrentNode(short *, short *);
	void Reset(class Behavior*, short);
	char NodeComplete(unsigned short);
	unsigned short Gosub(class Behavior*, short *, short);
public:
	void TreeSim(short, short *);
	void TreeSim(short, short, class Behavior*, short *);
	// vtable: 8
	intro void ~TreeSim();
	// vtable: 12
	intro unsigned short Simulate(long, unsigned short);
	struct TreeSim::StackElem* GetHighLevelAction();
	struct TreeSim::StackElem* GetCurElem();
	struct TreeSim::StackElem* GetNthElem(short);
	short GetStackSize();
	short GetMaxStackSize();
};

// Type: class YObjLang;
class YObjLang : public Language
{
public:
	void YObjLang(class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(class Behavior*, struct Behavior::Node*, unsigned char *);
	virtual void GetPrimName(short, unsigned char *);
	virtual unsigned short IsSingleExit(struct Behavior::Node*);
	// calltype: NearC
	static void SwizzleTreeParam(short, struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler();
		enum __unnamed {
			kIdle = 0,
			kSetAnim = 1,
			kAttr = 2,
			kWhatsAhead = 3,
			kWalk = 4,
			_kRunPad = 5,
			kSetBody = 6,
			kRandom = 7,
			kGetDirDistToFirst = 8,
			kGetDirDistToPerson = 9,
			kRoadDir = 10,
			kSearchForDyn = 11,
			kWalkToAndGrabOntoStackObject = 12,
			kUpdateMyMission = 13,
			kCheckForTrue = 14,
			kCompareMyLocWith = 15,
			kSelfDecommission = 16,
			kGetOffMasterObject = 17,
			kTurnTowardsStackObject = 18,
			kIsThisLocType = 19,
			kIsThisLocTypeNeutral = 20,
			kCanJumpOffHere = 21,
			kCheckForSpotlightInMyCell = 22,
			kIncrementRiotVal = 23,
			kGetSurroundingRiotVal = 24,
			kIsThisScurkID = 25,
			kGosubToInitbhav = 26,
			kAdjustRadiusForRiotVal = 27,
			kJoinRiot = 28,
			kSetDirection = 29,
			kThrowProjectile = 30,
			kTurnFromStackObject = 31,
			kTurnFromLastHitter = 32,
			kTurnTowardsLastHitter = 33,
			kGetOutOfRoadEtc = 34,
			kGenerateMedevacAndSetSelfAsVictim = 35,
			kTurnToNearbyFire = 36,
			kDie = 37,
			kWalkToStackObject = 38,
			kPutObjIntoTreeNum = 39,
			kVisitOz = 40,
			kNotUsed = 41,
			kMakeMyMedevacVictimVisible = 42,
			kMakeMyMedevacVictimInvisible = 43,
			kMakeMeMasterOfStackObject = 44,
			kMakeMyStackObjectVisitOz = 45,
			kPutTotedMedVicOnMotherShip = 46,
			kTakeAnyMedVicOffMotherShip = 47,
			kGetOnStackObject = 48,
			kUpdateStackVictimToted = 49,
			kGetNumSpacesOnMotherShip = 50,
			kDropToted = 51,
			kUpdateStackVictimPickedUp = 52,
			kCloseToHeli = 53,
			kSetMyExpression = 54,
			kGetHeliSpeedPlusDamage = 55,
			kIsThisCellSafe = 56,
			kPlaySound = 57,
			kGetOnHeliIfHarnessRaised = 58,
			kAmIOnMotherShip = 59,
			kThrowFieryProjectile = 60,
			kNumPrimitives = 61,
		};
public:
	virtual short CountPrimitives();
		enum __unnamed {
			kMyself = 0,
			kTreeParam = 1,
			kTargetObj = 2,
			kMyData = 3,
			kTreeParamData = 4,
			kTargetObjData = 5,
			kSimGlobals = 6,
			kImmediate = 7,
			kTempVars = 8,
			kStackVars = 9,
			kStackObject = 10,
			kTempTempVars = 11,
			kTreeTableValue = 12,
			kNumOwners = 13,
		};
	struct YObjLang::OwnerDataParam{
		short owner1;
		short data1;
		short owner2;
		short data2;
	};
	struct YObjLang::TurnToFireParam{
		short xdistloc;
		short ydistloc;
	};
	struct YObjLang::GetOutOfRoadParam{
		short decTemp;
	};
	struct YObjLang::SetDirectionParam{
		short dirTemp;
	};
	struct YObjLang::CheckForSpotParam{
		short brightnessTemp;
		short dirToHeliTemp;
	};
	struct YObjLang::GetSurroundingRiotValParam{
		short distTemp;
		short dirToConcTemp;
		short riotValTemp;
		short numPeopleCountedTemp;
	};
	struct YObjLang::IncrementRiotValParam{
		short riotValLiteral;
	};
	struct YObjLang::IsThisScurkIDParam{
		short scurkIDLiteral;
	};
	struct YObjLang::IsThisLocTypeParam{
		short locTypeLiteral;
	};
	struct YObjLang::UpdateMyMissionParam{
		short updateLiteral;
	};
	struct YObjLang::CheckForTrueParam{
		short whatLiteral;
	};
	struct YObjLang::CompareMyLocWithParam{
		short withWhatLiteral;
		short distData;
		short distOwner;
	};
	struct YObjLang::WalkAndGrabParam{
		short decTemp;
		short dynAnimBoolean;
	};
	struct YObjLang::SearchForDynParam{
		short searchdynobjtypetemp;
		short onlyonmasterboolean;
		short numcellstospiral;
	};
	struct YObjLang::IdleParam{
		short decTemp;
	};
	struct YObjLang::SetAnimParam{
		unsigned long animname;
	};
	struct YObjLang::SetBodyParam{
		unsigned long bodyname;
	};
	struct YObjLang::WalkRunParam{
		char decTemp;
		char onlyNeutralBoolean;
		char moveFailTemp;
		char newLocTemp;
		char roadDirTemp;
		char dynAnimBoolean;
		char speedTemp;
	};
	struct YObjLang::RandomParam{
		short destTemp;
		short rangeData;
		short rangeOwner;
	};
	struct YObjLang::RoadDirParam{
		short dirTemp;
		short distAheadData;
		short distAheadOwner;
	};
	struct YObjLang::DirDistFirstParam{
		short dirToTemp;
		short distToTemp;
		short whatData;
		short whatOwner;
	};
	struct YObjLang::DirDistPersonParam{
		short dirToTemp;
		short distToTemp;
		short whoData;
		short whoOwner;
	};
	struct YObjLang::AttrParam{
		short lhsData;
		short rhsData;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner;
	};
		enum __unnamed {
			kGreaterThan = 0,
			kLessThan = 1,
			kEquals = 2,
			kIncrement = 3,
			kDecrement = 4,
			kSetValue = 5,
			kTimesEq = 6,
			kDivideEq = 7,
			kIsFlagSet = 8,
			kSetFlag = 9,
			kClearFlag = 10,
			kNumOps = 11,
		};
	struct YObjLang::MiscParam{
		short m1;
		short m2;
		short m3;
		short m4;
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// union YObjLang::Param Param
		enum TreeNum {
			kNoTree = -1,
			kSpotlightTree = 900,
			kMegaphoneTree = 901,
			kOuchTree = 902,
			kDieTree = 903,
			kRunTree = 904,
			kRunOrSwoonTree = 905,
			kSwoonTree = 906,
		};
		enum __unnamed {
			kWeightStringsID = 140,
			kPrimitiveStringsID = 139,
			kDataLabelsID = 129,
			kDataBase = 1,
			kGlobalBase = 33,
			kOwnerStringsID = 132,
			kNewOwnerBase = 1,
			kMacroDescriptionStrings = 133,
			kPrimMacroBase = 1,
			kMotiveStringsID = 134,
			kMiscStringsID = 135,
			kDontCare = 1,
			kSaveChanges = 2,
			kMaxEntryLabel = 3,
			kBehStringsID = 128,
			kPrimBase = 1,
			kOwnerBase = 33,
			kGosubStr = 65,
			kOpenParen = 66,
			kForType = 67,
			kRadius = 68,
			kFromZeroTo = 69,
			kInto = 70,
			kDistance = 71,
			kStack = 72,
			kUseTempVars = 73,
			kCloseParen = 74,
			kTreetemp = 75,
			kObjtemp = 76,
			kThisObj = 77,
			kAlertType = 78,
			kCheckTreeID = 79,
			kActionTreeID = 80,
			kForAction = 81,
			kEqualStr = 82,
			kTree = 83,
			kRate = 84,
			kTo = 85,
			kForNeed = 86,
			kSel = 87,
			kPairAction = 88,
			kToCheck = 89,
			kSet = 90,
			kToNeed = 91,
			kUpdateNeed = 92,
			kToIndex = 93,
			kCheck = 94,
			kAct = 95,
			kUntil = 96,
			kNot = 97,
			kClear = 98,
			kFor = 99,
			kByAmount = 100,
			kOpBase = 117,
			kTypeBase = 143,
			kBaseTreeBase = 164,
		};
};

// Type: class ResFile;
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: class Language (forward reference);

// Type: class FlatResFile;
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: class cYObject;
class cYObject : public TreeSim, public YObjLang
{
	using DataType = short;
		enum __unnamed {
			kNumData = 24,
			kNumTemp = 8,
			kNumPointers = 4,
		};
	struct cYObject::ObjDefHeader{
		long version;
		short stackSize;
		short baseGraphic;
		short numGraphics;
		short initBhav;
		short toolbarPict;
		short treeTableID;
		short personalityID;
		short type;
		short red;
		short green;
		short blue;
		short _padding2;
	};
		enum MoveErrorCode {
			kMoveError = -1,
			kMoveSuccess = 0,
			kMoveFailTooHigh = 1,
			kMoveFailTooLow = 2,
			kMoveFailNonNeutralTerritory = 3,
			kMoveFailDynObjGeneric = 4,
			kMoveFailDynObjPerson = 5,
			kMoveFailOutOfDynObjRect = 6,
			kMoveFailNoSpeed = 7,
			kMoveFailFinishedMoving = 8,
			kMoveFailStaticObj = 9,
			kMoveFailStackObject = 10,
			kMoveFailUnwalkableLoctype = 11,
			kMoveFailOutOfRoad = 12,
		};
		enum ObjectType {
			kPerson = 0,
			kNumObjectTypes = 1,
		};
public:
	static short sStackSize[1];
	void SetToLoc(struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	void Die();
		enum MissionUpdates {
			kPickedUp = 0,
			kOuttaHere = 1,
			kReportNewPickupLocation = 2,
			kJoinedRiot = 3,
			kDrivenFromRiot = 4,
			kLeftRiotOfOwnVolition = 5,
			kReportNewLocation = 6,
			kMedVicToted = 7,
			kMedVicPickedUp = 8,
		};
		enum Checks {
			kHeliLanded = 0,
			kHeliLow = 1,
			kMasterObjectLow = 2,
			kMasterObjectMovingSlowly = 3,
			kMotherShipLow = 4,
		};
		enum CompareMyLocWith {
			kMissionDestLoc = 0,
			kStackPointer = 1,
			kHeli = 2,
			kBucket = 3,
			kLastHitter = 4,
			kClosestMedevacVictim = 5,
			kClosestCriminal = 6,
			kMotherShipLoc = 7,
			kClosestCop = 8,
			kAvatarClose = 9,
		};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct Point3d, struct _DYOBJ_INST*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short sInitBhav[9];
	static short sHitRxnTree[20];
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	long fLastInterrupt;
		enum LocationType {
			kOutOfCity = -1,
			kLocNoInfo = 0,
			kLocUnknown = 1,
			kNothing = 2,
			kForest = 3,
			kRubble = 4,
			kSmallPark = 5,
			kWireStuff = 6,
			kCarRoad = 7,
			kCarBridge = 8,
			kTrainTrack = 9,
			kDomestic = 10,
			kCommercial = 11,
			kWhiteCollarBusiness = 12,
			kBlueCollarBusiness = 13,
			kNumLocTypes = 14,
		};
public:
	static enum cYObject::LocationType sLocType[256];
		enum SearchType {
			kSearchEdgeGround = 0,
			kSearchAnywhereGround = 1,
			kSearchRoof = 2,
		};
	struct cYObject::LocationInfo{
		enum cYObject::SearchType searchType;
		short maxNormalLoiterers;
	};
public:
	static struct cYObject::LocationInfo sLocInfo[14];
	struct _DYOBJ_INST* SearchForDynObj(short, short, struct _DYOBJ_INST*);
	short GetDirectionTo(struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(struct _CELL_INFO*, enum cYObject::LocationType);
	struct Point3d GetPos(struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	struct cYObject::MoveInfo{
		enum cYObject::LocationType* locType;
		char * roadDir;
		struct _DYOBJ_INST* dyBlock;
		struct _STOBJ_INST* stBlock;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
private:
	static unsigned short sInited;
	static class cYObject* sObjects[100];
	static enum cYObject::LocationType sNeutralPersonLocs[16][10];
	static enum cYObject::LocationType sNeutralMissionLocs[9][10];
	static class cYObject* sList;
	static class NResFile sFile;
	static class ResFile sErrorFile;
public:
	static class YObjLang* sLanguage;
	static class Behavior* sBehavior;
	static struct Point3d sMoveTable[8];
	static struct Point3d sUnitVectorTable[8];
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, struct Point3d, class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	class cYObject* GetClosest(enum MissionType, unsigned short, short *);
	// calltype: NearC
	static class cYObject* GetObjectA(short);
	// calltype: NearC
	static class cYObject* GetObjectA(struct _DYOBJ_INST*);
	class cYObject* GetPersonWithMaster(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	long fMissionID;
	void Unlink();
	unsigned short CellIsSet();
	unsigned short fbLinked;
	unsigned short Linked();
	unsigned short fInited;
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	struct _DYOBJ_INST fDyn;
	unsigned char fCellX;
	unsigned char fCellY;
	unsigned long fBodyName;
	class cCopterBody* fBody;
	unsigned long fAnimName;
	class cCopterAnim* fAnim;
	short fFace;
	void SetFace(short);
	struct Point3d fLastMasterLoc;
	unsigned short SetMaster(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static struct _DYOBJ_INST* GetFirstDynObj(struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	unsigned short fSimulate;
	class Behavior* fBehavior;
	class cYObject* fNext;
	short fID;
	short _pad;
	short fTemp[8];
	short fData[24];
	unsigned char * fPointers[4];
	short fIterations;
	short _pad2;
	short fDirInc;
	struct cYObject::ObjDefHeader fDefinition;
		enum __unnamed {
			kMasterObject = 0,
			kLastHitterObject = 1,
			kMotherShip = 2,
		};
		enum __unnamed {
			kDirection = 0,
			kAwake = 1,
			kHeightCanJump = 2,
			kPersonType = 3,
			kMissionType = 4,
			kNotMissionID = 5,
			kAnimFrame = 6,
			kObjectID = 7,
			kRiotVal = 8,
			kVisible = 9,
			kLastRiotVal = 10,
			kNearMedFar = 11,
			kLastHitterMsg = 12,
			kMegaphoneMessage = 13,
			kInRxnTree = 14,
			kDead = 15,
			kColorIndexShift = 16,
			kDynAnim = 17,
			kSpeed = 18,
			kOnlyOnRoad = 19,
			kMoveOnlyNeutrally = 20,
			kMoveNoMatterWhat = 21,
			kSpecificToScurkID = 22,
		};
protected:
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 16
	intro void HandleOverflow();
	// vtable: 20
	intro short InterpValue(short, short, short **);
	enum TreeSim::ReturnCode TryExpression(struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(struct Point3d, int32_t, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static char GetRoadDir(struct Point3d);
	// calltype: NearC
	static struct _DYOBJ_INST* GetDynObj(struct _DYOBJ_INST*, struct Point3d, int32_t, struct _DYOBJ_INST*, struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _STOBJ_INST* GetStaticObj(struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(struct Point3d, int32_t, struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(struct _DYOBJ_INST*);
	unsigned short CloseTo(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetFirst();
	// calltype: NearC
	static class cYObject* GetFirst(short, short);
	// calltype: NearC
	static class cYObject* GetFirstInvisible(short);
	void SetMotherShip(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMotherShip();
	class cYObject* PutTotedMedVicOnMotherShip();
	class cYObject* DropToted();
	class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	// vtable: 24
	intro void Reset();
	virtual void ~cYObject();
protected:
	virtual void Error(short);
	void cYObject(short, class Behavior*, struct Point3d, short);
public:
	struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static class ResFile* GetGlobalFile();
	// calltype: NearC
	static class YObjLang* GetLanguage();
	// calltype: NearC
	static class ResFile* GetErrorFile();
	short GetID();
	struct Point3d GetLocation();
	class Behavior* GetBehavior();
	void Draw(struct VRBlit*);
	float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	class cYObject* GetNext();
	void SetDynAnim(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	void SetDynAnimFixed(int32_t, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
};

// Type: class Sound;
class Sound{
		enum SoundSourceType {
			nSoundSourceTypeResource = 0,
			nSoundSourceTypeFile = 1,
		};
public:
	enum Sound::SoundSourceType nSoundSourceType;
		enum SoundDuplicateType {
			nSoundDuplicateDefault = 0,
			nSoundDuplicateInterrupt = 1,
			nSoundDuplicateContinue = 2,
			nSoundDuplicateOverlap = 3,
		};
public:
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*soundCompletionFunction)(long);
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
};

// Type: class FlatFile;
class FlatFile{
		enum __unnamed {
			kMaxNameLen = 255,
		};
protected:
	class FlatFile* fNext;
	unsigned char fName[256];
	long fFileID;
	struct _iobuf* fFile;
	long UniqueID();
private:
	static class FlatFile* sList;
	static long sLastFileID;
	void Link();
	void Unlink();
	unsigned short Exclusive();
public:
	void FlatFile();
	// vtable: 0
	intro void ~FlatFile();
	// calltype: NearC
	static class FlatFile* FindByName(unsigned char *);
	unsigned short SameFile(class FlatFile*);
	// vtable: 4
	intro long Open(unsigned char *);
	// vtable: 8
	intro long Open(char *);
	// vtable: 12
	intro long Close();
	void OpenFromOtherFile(class FlatFile*);
	long GetFileName(unsigned char *);
	unsigned short ValidFile();
	long ReadBlock(void * __ptr32, long *);
	long Read4(long *);
	long Read2(short *);
	long Read1(char *);
	long SetPos(long);
	long Advance(long);
	// calltype: NearC
	static short CheckForLeaks();
	long GetFileID();
	struct _iobuf* GetFile();
};

// Type: class IBackBuffer;
class IBackBuffer : public IFlatImage
{
public:
	// vtable: 28
	intro unsigned long Swap(class CSparkalWindow*, long, long);
	// vtable: 32
	intro unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	// vtable: 36
	intro unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
};

// Type: class IFlatImage;
class IFlatImage{
public:
	void IFlatImage();
	// vtable: 0
	intro unsigned long Lock();
	// vtable: 4
	intro unsigned long Unlock();
	unsigned long GetLockCount();
	// vtable: 8
	intro void SetTransparentColor(int32_t, long);
	long GetHeight();
	long GetWidth();
	void * __ptr32 GetBitsPointer();
	long GetStride();
	// vtable: 12
	intro unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	unsigned long Compose(class IFlatImage*, long, long);
	// vtable: 16
	intro unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 20
	intro unsigned long StretchCompose(class IFlatImage*, struct SparkalRect, struct SparkalRect);
	// vtable: 24
	intro unsigned long FillRect(long, struct SparkalRect*);
	void DrawPixel(unsigned char, long, long);
	unsigned char GetPixel(long, long);
	static unsigned long lTotalMemoryUsage;
	static unsigned long lTotalLockCount;
protected:
	unsigned long mLockCount;
	long mWidth;
	long mHeight;
	void * __ptr32 mpBits;
	long mStride;
};



// Contribution: 1:00142f70-00150d97 Module: 200, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00543f70
void $E75() {

	__asm        call   $E71;
	__asm        call   $E74;
	__asm        jmp    near ptr 0x00543F85;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00543f8a
void $E71() {
	// Function registers exception cleanup function at 0x00544088

	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatFile::FlatFile;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    cYObject::sFile<NResFile+0x00>, 0x593508;
	__asm        mov    cYObject::sFile.fError, 0;
	__asm        mov    cYObject::sFile.fMap, 0;
	__asm        jmp    near ptr 0x00543FDC;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x10], 0x636BB8;
	__asm        jmp    _T70;
_L55004:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatFile::~FlatFile;
	__asm        ret;
_T70:
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        mov    cYObject::sFile<NResFile+0x00>, 0x593518;
	__asm        jmp    near ptr 0x00544010;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x14], 0x636BB8;
	__asm        jmp    _Ta4;
_L55002:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_Ta4:
	__asm        mov    dword ptr [ebp-4], 2;
	__asm        mov    cYObject::sFile.fLoaders.fFirst, 0;
	__asm        mov    cYObject::sFile.fLoaders.fCount, 0;
	__asm        jmp    near ptr 0x0054404D;

	__asm        mov    byte ptr [ebp-4], 3;
	__asm        mov    cYObject::sFile<NResFile+0x00>, 0x591218;
	__asm        jmp    near ptr 0x00544060;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        jmp    _Tf9;
_L54999:
	__asm        lea    ecx, cYObject::sFile.fLoaders.fFirst;
	__asm        call   PtrList<StdResLoader>::~PtrList<StdResLoader>;
	__asm        ret;
_L54998:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   ResFile::~ResFile;
	__asm        ret;
_Tf9:
	__asm        jmp    _T108;
_L54996:
	__asm        mov    eax, 0x595D38;
	__asm        jmp    near ptr 0x0056F590;
_T108:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005440a0
void $E74() {

	__asm        push   0x5440BD;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x005440B8;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005440bd
void $E72() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x6375A0];
	__asm        test   al, 1;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x6375A0];
	__asm        or     al, 1;
	__asm        mov    ds:[0x6375A0], al;
	__asm        mov    ecx, 0x636BB8;
	__asm        call   NResFile::~NResFile;
_T2d:
	__asm        jmp    near ptr 0x005440EF;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005440f4
void $E81() {

	__asm        call   $E77;
	__asm        call   $E80;
	__asm        jmp    near ptr 0x00544109;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0054410e
void $E77() {
	// Function registers exception cleanup function at 0x005441b0

	__asm        mov    ecx, 0x635590;
	__asm        call   FlatFile::FlatFile;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    cYObject::sErrorFile<ResFile+0x00>, 0x593508;
	__asm        mov    cYObject::sErrorFile.fError, 0;
	__asm        mov    cYObject::sErrorFile.fMap, 0;
	__asm        jmp    near ptr 0x00544160;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    dword ptr [ebp-0x10], 0x635590;
	__asm        jmp    _T70;
_L55025:
	__asm        mov    ecx, 0x635590;
	__asm        call   FlatFile::~FlatFile;
	__asm        ret;
_T70:
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        mov    cYObject::sErrorFile<ResFile+0x00>, 0x593518;
	__asm        jmp    near ptr 0x00544194;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        jmp    _T9d;
_L55023:
	__asm        mov    ecx, 0x635590;
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_T9d:
	__asm        jmp    _Tac;
_L55021:
	__asm        mov    eax, 0x595D78;
	__asm        jmp    near ptr 0x0056F590;
_Tac:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005441c8
void $E80() {

	__asm        push   0x5441E5;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x005441E0;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005441e5
void $E78() {
	// Function registers exception cleanup function at 0x0054424a

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x6375A4];
	__asm        test   al, 1;
	__asm        jne    _T60;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x6375A4];
	__asm        or     al, 1;
	__asm        mov    ds:[0x6375A4], al;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    near ptr 0x00544229;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x0054423A;
	__asm        jmp    _T60;
_L55035:
	__asm        mov    ecx, 0x635590;
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_T60:
	__asm        jmp    _T6f;
_L55033:
	__asm        mov    eax, 0x595DA8;
	__asm        jmp    near ptr 0x0056F590;
_T6f:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x00544262
void RemoveAvatarFromBuilding() {
// LINE 134:
	__asm        cmp    gIDOfBuildingAvatarIsIn, 0xFFFFFFFF;
	__asm        je     _T1d;
// LINE 135:
	__asm        mov    gIDOfBuildingAvatarIsIn, 0xFFFFFFFF;
// LINE 140:
_T1d:
	__asm        jmp    near ptr 0x00544284;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00544289
void $E86() {

	__asm        call   $E83;
	__asm        call   $E85;
	__asm        jmp    near ptr 0x0054429E;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x005442a3
void $E83() {

	__asm        mov    gXTimer.nTimerResolution, 1;
	__asm        mov    gXTimer.lStartTime, 0;
	__asm        mov    gXTimer.lTotalElapsedTime, 0;
	__asm        mov    gXTimer.lFrequency, 0;
	__asm        cmp    gXTimer.nTimerResolution, 0;
	__asm        jne    _T5b;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    gXTimer.lFrequency, eax;
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    near ptr 0x00544303;

	__asm        jmp    near ptr 0x00544308;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0054430d
void $E85() {

	__asm        push   0x54432A;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00544325;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0054432a
void $E84() {

	__asm        jmp    near ptr 0x00544335;

	__asm        jmp    near ptr 0x0054433A;
}

// FUNCTION: COPTER_D 0x0054433f
void JacquesGetDebugData(int32_t * missionawake, int32_t * ambientawake, int32_t * failedtobeam, int32_t * numbeamed, int32_t * beamslices, int32_t * forwardweight) {
// LINE 150:
	__asm        jmp    near ptr 0x0054434D;

	__asm        cmp    gXTimer.lStartTime, 0;
	__asm        jne    _Ta1;
// LINE 151:
	__asm        jmp    near ptr 0x0054435F;

	__asm        cmp    gXTimer.lStartTime, 0;
	__asm        je     _T32;

	__asm        jmp    _Ta1;
_T32:
	__asm        cmp    gXTimer.nTimerResolution, 1;
	__asm        jne    _T54;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    gXTimer.lStartTime, eax;
	__asm        jmp    _T9c;

	__asm        jmp    _T9c;
_T54:
	__asm        cmp    gXTimer.nTimerResolution, 0;
	__asm        jne    _T83;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    gXTimer.lStartTime, eax;
	__asm        jmp    _T9c;

	__asm        jmp    _T9c;
_T83:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    gXTimer.lStartTime, eax;
	__asm        jmp    _T9c;
_T9c:
	__asm        jmp    _Ta1;
// LINE 152:
_Ta1:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        mov    ecx, missionawake;
	__asm        mov    [ecx], eax;
// LINE 153:
	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        mov    ecx, ambientawake;
	__asm        mov    [ecx], eax;
// LINE 154:
	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, cYObject::sBeamed;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, failedtobeam;
	__asm        mov    [ecx], eax;
// LINE 155:
	__asm        movsx  eax, cYObject::sDebugNumBeamed;
	__asm        mov    ecx, numbeamed;
	__asm        mov    [ecx], eax;
// LINE 156:
	__asm        movsx  eax, gPersonBeamingForwardWeight;
	__asm        mov    ecx, forwardweight;
	__asm        mov    [ecx], eax;
// LINE 157:
	__asm        movsx  eax, gPersonBeamingSlices;
	__asm        mov    ecx, beamslices;
	__asm        mov    [ecx], eax;
// LINE 158:
	__asm        mov    eax, gXTimer.lTotalElapsedTime;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0054443C;

	__asm        cmp    gXTimer.lStartTime, 0;
	__asm        je     _T180;

	__asm        cmp    gXTimer.nTimerResolution, 1;
	__asm        jne    _T12a;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T16e;

	__asm        jmp    _T16e;
_T12a:
	__asm        cmp    gXTimer.nTimerResolution, 0;
	__asm        jne    _T157;

	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T16e;

	__asm        jmp    _T16e;
_T157:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T16e;
_T16e:
	__asm        mov    eax, [ebp-0x24];
	__asm        sub    eax, gXTimer.lStartTime;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    [ebp-0x14], eax;
_T180:
	__asm        cmp    gXTimer.nTimerResolution, 0;
	__asm        jne    _T1c4;

	__asm        cmp    gXTimer.lFrequency, 0;
	__asm        je     _T1c4;

	__asm        mov    eax, gXTimer.lFrequency;
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0x1F4;
	__asm        jb     _T205;

	__asm        jmp    _T1e3;
_T1c4:
	__asm        cmp    dword ptr [ebp-0x14], 0x1F4;
	__asm        jb     _T205;

	__asm        jmp    _T1e3;

	__asm        cmp    dword ptr [ebp-0x28], 0x1F4;
	__asm        jb     _T205;
// LINE 159:
_T1e3:
	__asm        mov    gXTimer.lTotalElapsedTime, 0;
	__asm        mov    gXTimer.lStartTime, 0;
	__asm        jmp    near ptr 0x0054453B;
// LINE 160:
	__asm        mov    cYObject::sDebugNumBeamed, 0;
// LINE 162:
_T205:
	__asm        jmp    near ptr 0x00544549;
}

// FUNCTION: COPTER_D 0x0054454e
unsigned short GetOutOfHeli(long personID) {
// LINE 167:
	__asm        mov    eax, personID;
	__asm        push   eax;
	__asm        call   cYObject::GetOutOfHeli;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00544565;
// LINE 168:
}

// FUNCTION: COPTER_D 0x0054456a
unsigned short cYObject::GetOutOfHeli(long personID) {
	class cYObject* obj;

// LINE 172:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T25;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Ta1;
_T25:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        test   eax, eax;
	__asm        jl     _T3e;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    eax, 0x64;
	__asm        jl     _T5a;
_T3e:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5a:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T88;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T88:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Ta1;

	__asm        mov    eax, [ebp-8];
	__asm        mov    obj, eax;
// LINE 173:
_Ta1:
	__asm        cmp    obj, 0;
	__asm        jne    _Tc7;

	__asm        push   0x8C085;
	__asm        push   0x5B86B8;
	__asm        push   0xAD;
	__asm        push   0x5B86E0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 174:
_Tc7:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     _Tf5;

	__asm        push   0x8C085;
	__asm        push   0x5B8704;
	__asm        push   0xAE;
	__asm        push   0x5B8734;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 176:
_Tf5:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::CanJumpOffHere;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T1a2;

	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _T134;

	__asm        push   0x8C085;
	__asm        push   0x5BB998;
	__asm        push   0x41E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T134:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetMaster;
	__asm        mov    [ebp-0xC], ax;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    _T16b;

	__asm        push   0x8C085;
	__asm        push   0x5BB978;
	__asm        push   0x420;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T16b:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x00544702;

	__asm        jmp    _T1b9;

	__asm        jmp    _T1ac;
_T1a2:
	__asm        jmp    _T1e9;

	__asm        jmp    _T1b9;
_T1ac:
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        je     _T1e9;
// LINE 177:
_T1b9:
	__asm        mov    eax, obj;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x00544745;
// LINE 178:
	__asm        mov    ax, 1;
	__asm        jmp    _T1f1;
// LINE 180:
	__asm        jmp    _T1f1;
// LINE 181:
_T1e9:
	__asm        xor    ax, ax;
	__asm        jmp    _T1f1;
// LINE 182:
_T1f1:
}

// FUNCTION: COPTER_D 0x00544760
void AdjustPersonBeamingSlices(int32_t velocity) {
// LINE 192:
	__asm        cmp    velocity, 0;
	__asm        jne    _T15;

	__asm        jmp    _T10f;
// LINE 193:
_T15:
	__asm        inc    gPersonBeamingSlicesSlice;
	__asm        movsx  eax, gPersonBeamingSlicesSlice;
	__asm        cmp    eax, 4;
	__asm        jle    _T35;

	__asm        mov    gPersonBeamingSlicesSlice, 0;
// LINE 194:
_T35:
	__asm        movsx  eax, gPersonBeamingSlicesSlice;
	__asm        test   eax, eax;
	__asm        jne    _T10a;
// LINE 195:
	__asm        cmp    velocity, 0x12C0000;
	__asm        jle    _T68;
// LINE 196:
	__asm        mov    gPersonBeamingSlices, 6;
// LINE 197:
	__asm        mov    gPersonBeamingForwardWeight, 8;
// LINE 199:
	__asm        jmp    _T10a;
_T68:
	__asm        cmp    velocity, 0x960000;
	__asm        jle    _T8c;
// LINE 200:
	__asm        mov    gPersonBeamingSlices, 4;
// LINE 201:
	__asm        mov    gPersonBeamingForwardWeight, 6;
// LINE 203:
	__asm        jmp    _T10a;
_T8c:
	__asm        cmp    velocity, 0x640000;
	__asm        jle    _Tb0;
// LINE 204:
	__asm        mov    gPersonBeamingSlices, 2;
// LINE 205:
	__asm        mov    gPersonBeamingForwardWeight, 5;
// LINE 207:
	__asm        jmp    _T10a;
_Tb0:
	__asm        cmp    velocity, 0x410000;
	__asm        jle    _Td4;
// LINE 208:
	__asm        mov    gPersonBeamingSlices, 1;
// LINE 209:
	__asm        mov    gPersonBeamingForwardWeight, 4;
// LINE 211:
	__asm        jmp    _T10a;
_Td4:
	__asm        cmp    velocity, 0x1E0000;
	__asm        jle    _Tf8;
// LINE 212:
	__asm        mov    gPersonBeamingSlices, 0;
// LINE 213:
	__asm        mov    gPersonBeamingForwardWeight, 4;
// LINE 215:
	__asm        jmp    _T10a;
// LINE 216:
_Tf8:
	__asm        mov    gPersonBeamingSlices, 0;
// LINE 217:
	__asm        mov    gPersonBeamingForwardWeight, 4;
// LINE 220:
_T10a:
	__asm        jmp    _T10f;
_T10f:
}

// FUNCTION: COPTER_D 0x00544874
class cYObject* cYObject::GetObjectA(struct _DYOBJ_INST* dyn) {
	class cYObject* obj;
	short count;
	class cYObject* foundobj;

// LINE 225:
	__asm        mov    foundobj, 0;
// LINE 226:
	__asm        mov    count, 0;
	__asm        jmp    _T1f;
_T1b:
	__asm        inc    count;
_T1f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T109;
// LINE 227:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T48;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tc4;
_T48:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T61;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T7d;
_T61:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7d:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tab;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tab:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tc4;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 228:
_Tc4:
	__asm        cmp    obj, 0;
	__asm        jne    _Td3;

	__asm        jmp    _T1b;
// LINE 229:
_Td3:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tea;

	__asm        jmp    _T1b;
// LINE 230:
_Tea:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyn;
	__asm        jne    _T104;
// LINE 231:
	__asm        mov    eax, obj;
	__asm        mov    foundobj, eax;
// LINE 232:
	__asm        jmp    _T109;
// LINE 234:
_T104:
	__asm        jmp    _T1b;
// LINE 235:
_T109:
	__asm        cmp    foundobj, 0;
	__asm        jne    _T12c;
// LINE 236:
	__asm        mov    eax, gAvatar;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyn;
	__asm        jne    _T12c;
// LINE 237:
	__asm        mov    eax, gAvatar;
	__asm        mov    foundobj, eax;
// LINE 239:
_T12c:
	__asm        cmp    foundobj, 0;
	__asm        jne    _T152;
// LINE 240:
	__asm        push   0x8C085;
	__asm        push   0x5B8758;
	__asm        push   0xF0;
	__asm        push   0x5B877C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 242:
_T152:
	__asm        mov    eax, dyn;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T17f;

	__asm        mov    eax, gAvatar;
	__asm        cmp    foundobj, eax;
	__asm        je     _T223;

	__asm        jmp    _T207;
_T17f:
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     _T198;

	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T1b4;
_T198:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1b4:
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T1e2;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1e2:
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        mov    ecx, foundobj;
	__asm        cmp    cYObject::sObjects[0][eax*4], ecx;
	__asm        je     _T223;

	__asm        jmp    _T207;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    foundobj, eax;
	__asm        je     _T223;
_T207:
	__asm        push   0x8C085;
	__asm        push   0x5B87A0;
	__asm        push   0xF2;
	__asm        push   0x5B87D4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T223:
	__asm        mov    eax, dyn;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x1C], ax;
// LINE 244:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T247;

	__asm        mov    eax, gAvatar;
	__asm        jmp    _T2bd;
_T247:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     _T260;

	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T27c;
_T260:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T27c:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T2aa;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2aa:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        jmp    _T2bd;

	__asm        mov    eax, [ebp-0x20];
_T2bd:
	__asm        jmp    near ptr 0x00544B36;
// LINE 245:
}

// FUNCTION: COPTER_D 0x00544b3b
struct _DYOBJ_INST* cYObject::SearchForDynObj(short objtypeflag, short numcellstospiral, struct _DYOBJ_INST* onlyonmaster) {
	short celly;
	short cellx;
	struct _DYOBJ_INST* dyobj;

// LINE 249:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    cellx, ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    celly, ax;
// LINE 252:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x10], eax;
_T4d:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T82;

	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        movsx  ecx, objtypeflag;
	__asm        test   ecx, eax;
	__asm        je     _T75;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dyobj, eax;
	__asm        jmp    _T94;
_T75:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T4d;
_T82:
	__asm        mov    dyobj, 0;
	__asm        jmp    _T94;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dyobj, eax;
// LINE 254:
_T94:
	__asm        mov    eax, dyobj;
	__asm        jmp    near ptr 0x00544BD7;
// LINE 255:
}

// FUNCTION: COPTER_D 0x00544bde
unsigned short cYObject::SearchForPersonSpot(struct _DYOBJ_INST* master, struct Point3d* loc) {
	short radius;
	short maxcount;
	int32_t offsetz;
	int32_t offsetx;
	short fullradius;
	struct Point3d newloc;
	short count;
	short smallradius;

// LINE 260:
	__asm        mov    maxcount, 2;
// LINE 261:
	__asm        mov    eax, master;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    _T47;

	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    fullradius, ax;
	__asm        jmp    _T5c;

	__asm        jmp    _T52;
_T47:
	__asm        mov    fullradius, 8;
	__asm        jmp    _T5c;
_T52:
	__asm        mov    eax, [ebp-0x54];
	__asm        sar    eax, 0x10;
	__asm        mov    fullradius, ax;
_T5c:
	__asm        jmp    near ptr 0x00544C3F;
// LINE 262:
	__asm        movsx  eax, fullradius;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    smallradius, ax;
// LINE 265:
	__asm        mov    count, 0;
	__asm        jmp    _T7e;
_T7a:
	__asm        inc    count;
_T7e:
	__asm        movsx  eax, count;
	__asm        movsx  ecx, maxcount;
	__asm        cmp    eax, ecx;
	__asm        jge    _T38b;
// LINE 266:
// Block start:
	int32_t masterrad;
	struct Point3d offset;
	int32_t myrad;
	int32_t groundheight;
	int32_t objheight;
	struct Point3d masterloc;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, smallradius;
	__asm        imul   eax, ecx;
	__asm        movsx  ecx, maxcount;
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        movsx  ecx, smallradius;
	__asm        add    eax, ecx;
	__asm        mov    radius, ax;
// LINE 268:
	__asm        movsx  eax, radius;
	__asm        movsx  ecx, fullradius;
	__asm        cmp    eax, ecx;
	__asm        jle    _Td7;

	__asm        push   0x8C085;
	__asm        push   0x5B87F8;
	__asm        push   0x10C;
	__asm        push   0x5B8830;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 269:
_Td7:
	__asm        movsx  eax, radius;
	__asm        test   eax, eax;
	__asm        jne    _Tf5;

	__asm        mov    offsetz, 0;
	__asm        mov    eax, offsetz;
	__asm        mov    offsetx, eax;
	__asm        jmp    _T1c9;
_Tf5:
	__asm        movsx  ebx, radius;
	__asm        dec    ebx;
	__asm        movsx  eax, radius;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    offsetx, ebx;
	__asm        movsx  ebx, radius;
	__asm        dec    ebx;
	__asm        movsx  eax, radius;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    offsetz, ebx;
	__asm        mov    eax, offsetx;
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x58], ax;
	__asm        mov    eax, offsetz;
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x5C], ax;
	__asm        jmp    near ptr 0x00544D34;

	__asm        movsx  eax, word ptr [ebp-0x58];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, radius;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T18d;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T18d:
	__asm        jmp    near ptr 0x00544D70;

	__asm        movsx  eax, word ptr [ebp-0x5C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, radius;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T1c9;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1c9:
	__asm        jmp    near ptr 0x00544DAC;
// LINE 270:
	__asm        mov    eax, offsetx;
	__asm        mov    offset.x, eax;
	__asm        mov    offset.y, 0;
	__asm        mov    eax, offsetz;
	__asm        mov    offset.z, eax;
// LINE 271:
	__asm        mov    eax, master;
	__asm        add    eax, 0x18;
	__asm        lea    ecx, newloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 272:
	__asm        mov    eax, offsetx;
	__asm        add    newloc.x, eax;
// LINE 273:
	__asm        mov    eax, offsetz;
	__asm        add    newloc.z, eax;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        lea    eax, offset.x;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   VRGetDyObjAlt;
	__asm        add    esp, 0x10;
	__asm        mov    objheight, eax;
// LINE 280:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    groundheight, eax;
// LINE 282:
	__asm        mov    eax, groundheight;
	__asm        add    eax, objheight;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 284:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x30];
	__asm        test   al, 0x80;
	__asm        jne    _T280;

	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    myrad, eax;
	__asm        jmp    _T28c;

	__asm        jmp    _T28c;
_T280:
	__asm        mov    myrad, 0x80000;
	__asm        jmp    _T28c;
// LINE 285:
_T28c:
	__asm        mov    eax, master;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    _T2bd;

	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    masterrad, eax;
	__asm        jmp    _T2c9;

	__asm        jmp    _T2c9;
_T2bd:
	__asm        mov    masterrad, 0x80000;
	__asm        jmp    _T2c9;
// LINE 286:
_T2c9:
	__asm        mov    eax, master;
	__asm        add    eax, 0x18;
	__asm        lea    ecx, masterloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 287:
	__asm        mov    eax, objheight;
	__asm        add    masterloc.y, eax;
// LINE 288:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   cYObject::InBoundingRect;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T337;
// LINE 289:
	__asm        push   0x8C085;
	__asm        push   0x5B8854;
	__asm        push   0x121;
	__asm        push   0x5B8884;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 291:
_T337:
	__asm        push   0;
	__asm        mov    eax, master;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     _T367;
// LINE 292:
	__asm        jmp    _T7a;
// LINE 294:
_T367:
	__asm        lea    eax, newloc.x;
	__asm        mov    ecx, loc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 295:
	__asm        mov    ax, 1;
	__asm        jmp    _T393;
// LINE 296:
// Block end:
	__asm        jmp    _T7a;
// LINE 297:
_T38b:
	__asm        xor    ax, ax;
	__asm        jmp    _T393;
// LINE 298:
_T393:
}

// FUNCTION: COPTER_D 0x00544f78
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO* cptr, struct Point3d* loc, enum cYObject::SearchType searchType) {
	int32_t offsetz;
	int32_t offsetx;

// LINE 305:
	__asm        mov    eax, searchType;
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Tc2;

	__asm        mov    eax, offsetz;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    [ebp-0x34], eax;
// LINE 306:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        lea    ecx, [ebp-0x20];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545000;

	__asm        lea    eax, [ebp-0x20];
	__asm        lea    ecx, [ebp-0x14];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    ecx, loc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 309:
	__asm        mov    ax, 1;
	__asm        jmp    _Tca;
// LINE 311:
	__asm        jmp    _Tca;
// LINE 312:
_Tc2:
	__asm        xor    ax, ax;
	__asm        jmp    _Tca;
// LINE 313:
_Tca:
}

// FUNCTION: COPTER_D 0x00545049
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO* cptr, int32_t * offsetx, int32_t * offsetz, enum cYObject::SearchType searchType) {
	struct Point3d pos;
	short halfwidth;
	unsigned short ret;
	int32_t twiceradius;

// LINE 319:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        shl    eax, 5;
	__asm        mov    halfwidth, ax;
// LINE 320:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jle    _T3f;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, 0x14;
	__asm        jl     _T5b;
_T3f:
	__asm        push   0x8C085;
	__asm        push   0x5B88A8;
	__asm        push   0x140;
	__asm        push   0x5B88D4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 321:
_T5b:
	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x20;
	__asm        je     _Tad;

	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x40;
	__asm        je     _Tad;

	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x60;
	__asm        je     _Tad;

	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x80;
	__asm        jge    _Tad;

	__asm        push   0x8C085;
	__asm        push   0x5B88F8;
	__asm        push   0x141;
	__asm        push   0x5B8908;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 323:
_Tad:
	__asm        mov    ret, 0;
// LINE 324:
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    twiceradius, eax;
// LINE 325:
	__asm        mov    eax, searchType;
	__asm        mov    [ebp-0x19C], eax;
	__asm        jmp    _T94a;
// LINE 328:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    _Tea;
_Te6:
	__asm        inc    count;
_Tea:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jge    _T454;
// LINE 329:
	__asm        cmp    searchType, 0;
	__asm        jne    _T1dd;
// LINE 330:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    _T125;

	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1d8;
_T125:
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    [ebp-0x174], ebx;
	__asm        push   2;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T171;

	__asm        movsx  eax, halfwidth;
	__asm        dec    eax;
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    _T17e;
_T171:
	__asm        movsx  eax, halfwidth;
	__asm        neg    eax;
	__asm        inc    eax;
	__asm        mov    [ebp-0x17C], eax;
_T17e:
	__asm        mov    eax, [ebp-0x17C];
	__asm        shl    eax, 0x10;
	__asm        mov    [ebp-0x178], eax;
	__asm        push   2;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T1bd;

	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, offsetz;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T1d3;
_T1bd:
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, offsetz;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
_T1d3:
	__asm        jmp    _T1d8;
// LINE 331:
_T1d8:
	__asm        jmp    _T2ee;
// LINE 332:
_T1dd:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    _T201;

	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T2e9;
_T201:
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x180], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x184], ax;
	__asm        jmp    near ptr 0x005452B9;

	__asm        movsx  eax, word ptr [ebp-0x180];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T2aa;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2aa:
	__asm        jmp    near ptr 0x005452F8;

	__asm        movsx  eax, word ptr [ebp-0x184];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T2e9;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2e9:
	__asm        jmp    _T2ee;
_T2ee:
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x12C], eax;
// LINE 333:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x12C];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x128];
	__asm        mov    [ebp-0x11C], eax;
	__asm        lea    eax, [ebp-0x124];
	__asm        lea    ecx, [ebp-0xDC];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005453AF;

	__asm        lea    eax, [ebp-0xDC];
	__asm        lea    ecx, [ebp-0xAC];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xAC];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 335:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     _T3c6;
// LINE 336:
	__asm        jmp    _Te6;
// LINE 337:
_T3c6:
	__asm        jmp    near ptr 0x00545414;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T444;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        add    eax, 0xA;
	__asm        mov    [ebp-0x108], ax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0x104], eax;
	__asm        movsx  eax, word ptr [ebp-0x108];
	__asm        shl    eax, 0x10;
	__asm        cmp    eax, [ebp-0x104];
	__asm        jge    _T425;

	__asm        jmp    _T42a;
_T425:
	__asm        jmp    _T444;
_T42a:
	__asm        jmp    _T43f;

	__asm        test   dword ptr [ebp-0x10C], 0xFFFF;
	__asm        je     _T444;
// LINE 338:
_T43f:
	__asm        jmp    _Te6;
// LINE 342:
_T444:
	__asm        mov    ret, 1;
// LINE 343:
	__asm        jmp    _T454;
// LINE 344:
	__asm        jmp    _Te6;
// LINE 345:
_T454:
	__asm        jmp    _T974;
// LINE 348:
// Block end:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    _T468;
_T464:
	__asm        inc    count;
_T468:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jge    _T6ec;
// LINE 349:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    _T499;

	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T581;
_T499:
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x188], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x18C], ax;
	__asm        jmp    near ptr 0x00545551;

	__asm        movsx  eax, word ptr [ebp-0x188];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T542;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T542:
	__asm        jmp    near ptr 0x00545590;

	__asm        movsx  eax, word ptr [ebp-0x18C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T581;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T581:
	__asm        jmp    near ptr 0x005455CF;

	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
// LINE 350:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x140];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x130], eax;
	__asm        lea    eax, [ebp-0x138];
	__asm        lea    ecx, [ebp-0xE8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545647;

	__asm        lea    eax, [ebp-0xE8];
	__asm        lea    ecx, [ebp-0xB8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xB8];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 352:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     _T65e;
// LINE 353:
	__asm        jmp    _T464;
// LINE 354:
_T65e:
	__asm        jmp    near ptr 0x005456AC;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T6d7;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        add    eax, 0xA;
	__asm        mov    [ebp-0x114], ax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0x110], eax;
	__asm        movsx  eax, word ptr [ebp-0x114];
	__asm        shl    eax, 0x10;
	__asm        cmp    eax, [ebp-0x110];
	__asm        jge    _T6c2;

	__asm        jmp    _T6dc;

	__asm        jmp    _T6c2;
_T6c2:
	__asm        jmp    _T6d7;

	__asm        test   dword ptr [ebp-0x118], 0xFFFF;
	__asm        jne    _T6dc;
// LINE 355:
_T6d7:
	__asm        jmp    _T464;
// LINE 356:
_T6dc:
	__asm        mov    ret, 1;
// LINE 357:
	__asm        jmp    _T6ec;
// LINE 358:
	__asm        jmp    _T464;
// LINE 359:
_T6ec:
	__asm        jmp    _T974;
// LINE 362:
// Block end:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    _T700;
_T6fc:
	__asm        inc    count;
_T700:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jge    _T924;
// LINE 363:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    _T731;

	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T819;
_T731:
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x190], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x194], ax;
	__asm        jmp    near ptr 0x005457E9;

	__asm        movsx  eax, word ptr [ebp-0x190];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T7da;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7da:
	__asm        jmp    near ptr 0x00545828;

	__asm        movsx  eax, word ptr [ebp-0x194];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     _T819;

	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T819:
	__asm        jmp    near ptr 0x00545867;

	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x154], eax;
// LINE 364:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x150];
	__asm        mov    [ebp-0x144], eax;
	__asm        lea    eax, [ebp-0x14C];
	__asm        lea    ecx, [ebp-0xF4];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005458DF;

	__asm        lea    eax, [ebp-0xF4];
	__asm        lea    ecx, [ebp-0xC4];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xC4];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 366:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     _T8f6;
// LINE 367:
	__asm        jmp    _T6fc;
// LINE 368:
_T8f6:
	__asm        jmp    near ptr 0x00545944;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T914;
// LINE 369:
	__asm        jmp    _T6fc;
// LINE 370:
_T914:
	__asm        mov    ret, 1;
// LINE 371:
	__asm        jmp    _T924;
// LINE 372:
	__asm        jmp    _T6fc;
// LINE 373:
_T924:
	__asm        jmp    _T974;
// LINE 376:
// Block end:
_T929:
	__asm        push   0x8C085;
	__asm        push   0x5B892C;
	__asm        push   0x178;
	__asm        push   0x5B8940;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 377:
	__asm        jmp    _T974;
_T94a:
	__asm        cmp    dword ptr [ebp-0x19C], 3;
	__asm        ja     _T929;

	__asm        mov    eax, [ebp-0x19C];
	__asm        jmp    SwitchPointers5527981[0][eax*4];
// Switch pointers
// LINE 379:
_T974:
	__asm        test   reinterpret_cast<uint32_t>(ret), 0xFFFF;
	__asm        je     _Tc6a;
// LINE 380:
// Block start:
	struct Point3d pos;
	short centerscurk;
	enum cYObject::LocationType cellcenterloctype;
	enum cYObject::LocationType celloffsetloctype;
	int32_t centcellx;
	int32_t offcelly;
	int32_t offcellx;
	int32_t centcelly;
	short offscurk;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    centcellx, eax;
// LINE 381:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    centcelly, eax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x168], eax;
// LINE 382:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x168];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x164];
	__asm        mov    [ebp-0x158], eax;
	__asm        lea    eax, [ebp-0x160];
	__asm        lea    ecx, [ebp-0x100];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545A6E;

	__asm        lea    eax, [ebp-0x100];
	__asm        lea    ecx, [ebp-0xD0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xD0];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 383:
	__asm        mov    eax, pos.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    offcellx, eax;
// LINE 384:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, pos.z;
	__asm        sar    eax, 0x16;
	__asm        mov    offcelly, eax;
// LINE 386:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        cmp    eax, 0x7F;
	__asm        jg     _Taa8;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcelly);
	__asm        cmp    eax, 0x7F;
	__asm        jg     _Taa8;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        test   eax, eax;
	__asm        jl     _Taa8;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcelly);
	__asm        test   eax, eax;
	__asm        jge    _Tab3;
_Taa8:
	__asm        mov    centerscurk, 0xFFFF;
	__asm        jmp    _Tb1b;
_Tab3:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, reinterpret_cast<uint16_t>(centcelly);
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x16C], ax;
	__asm        movsx  eax, word ptr [ebp-0x16C];
	__asm        test   eax, eax;
	__asm        jl     _Taef;

	__asm        movsx  eax, word ptr [ebp-0x16C];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tb0b;
_Taef:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb0b:
	__asm        mov    ax, [ebp-0x16C];
	__asm        mov    centerscurk, ax;
	__asm        jmp    _Tb1b;
// LINE 387:
_Tb1b:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        cmp    eax, 0x7F;
	__asm        jg     _Tb4d;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcelly);
	__asm        cmp    eax, 0x7F;
	__asm        jg     _Tb4d;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        test   eax, eax;
	__asm        jl     _Tb4d;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcelly);
	__asm        test   eax, eax;
	__asm        jge    _Tb58;
_Tb4d:
	__asm        mov    offscurk, 0xFFFF;
	__asm        jmp    _Tbc0;
_Tb58:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, reinterpret_cast<uint16_t>(offcelly);
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x170], ax;
	__asm        movsx  eax, word ptr [ebp-0x170];
	__asm        test   eax, eax;
	__asm        jl     _Tb94;

	__asm        movsx  eax, word ptr [ebp-0x170];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tbb0;
_Tb94:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbb0:
	__asm        mov    ax, [ebp-0x170];
	__asm        mov    offscurk, ax;
	__asm        jmp    _Tbc0;
// LINE 388:
_Tbc0:
	__asm        movsx  eax, offscurk;
	__asm        movsx  ecx, centerscurk;
	__asm        cmp    eax, ecx;
	__asm        je     _Tc1c;
// LINE 391:
// Block start:
	char str[80];
	__asm        mov    eax, offcelly;
	__asm        push   eax;
	__asm        mov    eax, offcellx;
	__asm        push   eax;
	__asm        movsx  eax, offscurk;
	__asm        push   eax;
	__asm        mov    eax, centcelly;
	__asm        push   eax;
	__asm        mov    eax, centcellx;
	__asm        push   eax;
	__asm        movsx  eax, centerscurk;
	__asm        push   eax;
	__asm        push   0x5B8964;
	__asm        lea    eax, str[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x20;
// LINE 392:
	__asm        push   0x8C085;
	__asm        lea    eax, str[0];
	__asm        push   eax;
	__asm        push   0x188;
	__asm        push   0x5B89A8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 395:
// Block end:
_Tc1c:
	__asm        mov    eax, centcelly;
	__asm        push   eax;
	__asm        mov    eax, centcellx;
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    cellcenterloctype, eax;
// LINE 396:
	__asm        mov    eax, offcelly;
	__asm        push   eax;
	__asm        mov    eax, offcellx;
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    celloffsetloctype, eax;
// LINE 397:
	__asm        mov    eax, cellcenterloctype;
	__asm        cmp    celloffsetloctype, eax;
	__asm        je     _Tc6a;

	__asm        push   0x8C085;
	__asm        push   0x5B89CC;
	__asm        push   0x18D;
	__asm        push   0x5B8A08;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 400:
// Block end:
_Tc6a:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x00545CBC;
// LINE 401:
}

// FUNCTION: COPTER_D 0x00545cc3
void duh(double __formal) {

	__asm        jmp    near ptr 0x00545CCE;
}

// FUNCTION: COPTER_D 0x00545cd3
void S3PersonInit() {
	int32_t success;
	long i;
	double y;
	double x;

// LINE 406:
	__asm        mov    success, 0;
// LINE 409:
	__asm        mov    i, 0;
	__asm        jmp    _T1f;
_T1c:
	__asm        inc    i;
_T1f:
	__asm        cmp    i, 0x271;
	__asm        jge    _T5d;
// LINE 410:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x1C], eax;
	__asm        fild   dword ptr [ebp-0x1C];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fadd   qword ptr ds:[0x593528];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, i;
	__asm        mov    g_sqrtTable[ecx*4], eax;
	__asm        jmp    _T1c;
// LINE 412:
_T5d:
	__asm        call   InitBodiesAndAnimations;
// LINE 413:
	__asm        call   MakeAllPeople;
// LINE 417:
	__asm        mov    reinterpret_cast<uint32_t>(x), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&x) + 4), 0x40240000;
	__asm        mov    reinterpret_cast<uint32_t>(y), 0x66666666;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&y) + 4), 0x402A6666;
// LINE 419:
	__asm        fld    x;
	__asm        fdiv   y;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   duh;
	__asm        add    esp, 8;
// LINE 420:
	__asm        jmp    near ptr 0x00545D6F;
}

// FUNCTION: COPTER_D 0x00545d74
void S3PersonDelete() {
// LINE 427:
	__asm        call   DeleteBodiesAndAnimations;
// LINE 428:
	__asm        call   DeleteAllPeople;
// LINE 429:
	__asm        jmp    near ptr 0x00545D89;
}

// FUNCTION: COPTER_D 0x00545d8e
void S3PersonNextFrame() {
// LINE 435:
	__asm        call   cYObject::SimulateAll;
// LINE 437:
	__asm        jmp    near ptr 0x00545D9E;
}

// FUNCTION: COPTER_D 0x00545da3
void S3PersonUserNextFrame() {
// LINE 441:
	__asm        mov    ecx, gAvatar;
	__asm        call   cAvatar::Simulate;
// LINE 442:
	__asm        jmp    near ptr 0x00545DB9;
}

// FUNCTION: COPTER_D 0x00545dbe
void S3PersonReset() {
	short count;

// LINE 446:
	__asm        mov    count, 0;
	__asm        jmp    _T18;
_T14:
	__asm        inc    count;
_T18:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _Tf3;
// LINE 447:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T41;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tbd;
_T41:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T5a;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T76;
_T5a:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T76:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Ta4;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta4:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tbd;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 448:
_Tbd:
	__asm        cmp    obj, 0;
	__asm        jne    _Te3;

	__asm        push   0x8C085;
	__asm        push   0x5B8A2C;
	__asm        push   0x1C0;
	__asm        push   0x5B8A50;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 449:
_Te3:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, obj;
	__asm        call   dword ptr [eax+0x18];
// LINE 450:
// Block end:
	__asm        jmp    _T14;
// LINE 451:
_Tf3:
	__asm        mov    eax, gAvatar;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, gAvatar;
	__asm        call   dword ptr [eax+0x18];
// LINE 452:
	__asm        jmp    near ptr 0x00545EC6;
}

// FUNCTION: COPTER_D 0x00545ecb
void S3PersonUserStart(int32_t x, int32_t y, int32_t dx, int32_t dz) {
// LINE 456:
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 457:
	__asm        mov    eax, gAvatar;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T54;

	__asm        push   0x8C085;
	__asm        push   0x5B8A74;
	__asm        push   0x1C9;
	__asm        push   0x5B8AB8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T54:
	__asm        mov    eax, gAvatar;
	__asm        mov    [ebp-0x64], eax;
// LINE 458:
	__asm        mov    eax, [ebp-0x64];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T8a;

	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8a:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x00545F77;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    _Tee;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _Tfc;
_Tee:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_Tfc:
	__asm        jmp    near ptr 0x00545FCC;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        movsx  ecx, cYObject::sNumMissionAwake;
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    _T136;

	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T136:
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T17f;

	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T17a;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T17a:
	__asm        jmp    _T1af;
_T17f:
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T1af;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1af:
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T1cd;

	__asm        jmp    _T1fb;

	__asm        jmp    _T1cd;
_T1cd:
	__asm        jmp    _T1df;

	__asm        test   dword ptr [ebp-0x60], 0xFFFF;
	__asm        jne    _T1fb;
_T1df:
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1fb:
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x005460D3;

	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T235;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T235:
	__asm        mov    eax, [ebp-0x64];
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x5C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, [ebp-0x64];
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00546148;

	__asm        jmp    near ptr 0x0054614D;
// LINE 459:
	__asm        mov    eax, gAvatar;
	__asm        mov    word ptr [eax+0xE2], 0;
// LINE 460:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::SetMaster;
// LINE 461:
	__asm        jmp    near ptr 0x00546177;
}

// FUNCTION: COPTER_D 0x0054617c
void S3PersonUserAppearNew(struct Point3d* loc, struct Point3d* facingvector) {
// LINE 465:
	__asm        push   0;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::SetMaster;
// LINE 466:
	__asm        mov    eax, gAvatar;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T46;

	__asm        push   0x8C085;
	__asm        push   0x5B8ADC;
	__asm        push   0x1D2;
	__asm        push   0x5B8B0C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 467:
_T46:
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::Unlink;
// LINE 468:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 470:
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::Link;
// LINE 471:
	__asm        mov    eax, gAvatar;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _Tf3;
// LINE 472:
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        jmp    _Ta3;
_T9f:
	__asm        inc    word ptr [ebp-0x14];
_Ta3:
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 3;
	__asm        jge    _Td9;

	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        movsx  eax, cYObject::sSoundChannels[12][eax*2];
	__asm        test   eax, eax;
	__asm        jne    _Td4;

	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    _Te4;
_Td4:
	__asm        jmp    _T9f;
_Td9:
	__asm        mov    word ptr [ebp-0x18], 0xC;
	__asm        jmp    _Te4;
_Te4:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::SetSoundChannel;
// LINE 474:
_Tf3:
	__asm        mov    ecx, gAvatar;
	__asm        call   cAvatar::ResetView;
	__asm        mov    eax, gAvatar;
	__asm        mov    [ebp-0x74], eax;
// LINE 475:
	__asm        jmp    near ptr 0x00546287;

	__asm        mov    eax, [ebp-0x74];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T138;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T138:
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x70];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005462FC;
// LINE 476:
	__asm        mov    eax, gAvatar;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 478:
	__asm        cmp    facingvector, 0;
	__asm        je     _T1c6;
// LINE 479:
// Block start:
	struct cYObject::MoveInfo moveinfo;
	__asm        mov    eax, facingvector;
	__asm        mov    ecx, gAvatar;
	__asm        add    ecx, 0x168;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 481:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cAvatar::AvatarMove;
// LINE 487:
// Block end:
_T1c6:
	__asm        jmp    near ptr 0x00546347;
}

// FUNCTION: COPTER_D 0x0054634c
void S3PersonUserAppear(int32_t x, int32_t y, int32_t dx, int32_t dz) {
	struct Point3d loc;

// LINE 491:
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(y);
	__asm        xor    ecx, ecx;
	__asm        mov    cl, reinterpret_cast<uint8_t>(x);
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dz;
	__asm        mov    [ebp-0x44], eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        lea    ecx, [ebp-0x40];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005463B9;

	__asm        lea    eax, [ebp-0x40];
	__asm        lea    ecx, [ebp-0x34];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x34];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005463EA;

	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 492:
	__asm        push   0;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        call   S3PersonUserAppearNew;
	__asm        add    esp, 8;
// LINE 493:
	__asm        jmp    near ptr 0x00546429;
}

// FUNCTION: COPTER_D 0x0054642e
int32_t IsThisABadGuy(struct _DYOBJ_INST* guy) {
	enum MissionSupertype mt;
	class cYObject* obj;

// LINE 497:
	__asm        mov    eax, guy;
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 498:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xDA];
	__asm        mov    mt, eax;
// LINE 499:
	__asm        cmp    mt, 0;
	__asm        jne    _T3e;
// LINE 500:
	__asm        mov    eax, 1;
	__asm        jmp    _T45;
// LINE 501:
	__asm        jmp    _T45;
// LINE 502:
_T3e:
	__asm        xor    eax, eax;
	__asm        jmp    _T45;
// LINE 503:
_T45:
}

// FUNCTION: COPTER_D 0x00546478
unsigned char GetAvatarCellX() {
// LINE 507:
	__asm        cmp    gAvatar, 0;
	__asm        jne    _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8B30;
	__asm        push   0x1FB;
	__asm        push   0x5B8B40;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 508:
_T2f:
	__asm        mov    eax, gAvatar;
	__asm        mov    al, [eax+0x88];
	__asm        jmp    near ptr 0x005464B7;
// LINE 509:
}

// FUNCTION: COPTER_D 0x005464bc
unsigned char GetAvatarCellY() {
// LINE 513:
	__asm        cmp    gAvatar, 0;
	__asm        jne    _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8B64;
	__asm        push   0x201;
	__asm        push   0x5B8B74;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 514:
_T2f:
	__asm        mov    eax, gAvatar;
	__asm        mov    al, [eax+0x89];
	__asm        jmp    near ptr 0x005464FB;
// LINE 515:
}

// FUNCTION: COPTER_D 0x00546500
struct _DYOBJ_INST* GetAvatarDYOBJ() {
// LINE 519:
	__asm        cmp    gAvatar, 0;
	__asm        jne    _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8B98;
	__asm        push   0x207;
	__asm        push   0x5B8BB4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 520:
_T2f:
	__asm        mov    eax, gAvatar;
	__asm        add    eax, 0x24;
	__asm        jmp    near ptr 0x0054653C;
// LINE 521:
}

// FUNCTION: COPTER_D 0x00546541
struct Point3d* GetAvatarVector() {
// LINE 525:
	__asm        cmp    gAvatar, 0;
	__asm        jne    _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8BD8;
	__asm        push   0x20D;
	__asm        push   0x5B8BF4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 526:
_T2f:
	__asm        mov    eax, gAvatar;
	__asm        add    eax, 0x168;
	__asm        jmp    near ptr 0x0054657F;
// LINE 527:
}

// FUNCTION: COPTER_D 0x00546584
void S3DrawPerson(struct VRBlit* blit) {
	short id;

// LINE 531:
	__asm        call   FrameInit;
// LINE 532:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    id, ax;
// LINE 533:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T3b;
// LINE 534:
	__asm        mov    eax, blit;
	__asm        push   eax;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::Draw;
// LINE 536:
	__asm        jmp    _T137;
// LINE 537:
// Block start:
	class cYObject* obj;
_T3b:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T57;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Td3;
_T57:
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     _T70;

	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T8c;
_T70:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8c:
	__asm        movsx  eax, id;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tba;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tba:
	__asm        movsx  eax, id;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Td3;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 538:
_Td3:
	__asm        cmp    obj, 0;
	__asm        jne    _Tf9;

	__asm        push   0x8C085;
	__asm        push   0x5B8C18;
	__asm        push   0x21A;
	__asm        push   0x5B8C20;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 539:
_Tf9:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        je     _T12b;

	__asm        push   0x8C085;
	__asm        push   0x5B8C44;
	__asm        push   0x21B;
	__asm        push   0x5B8C58;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 540:
_T12b:
	__asm        mov    eax, blit;
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Draw;
// LINE 543:
// Block end:
_T137:
	__asm        jmp    near ptr 0x005466C0;
}

// FUNCTION: COPTER_D 0x005466c5
void cAvatar::GetControlInput() {
	int32_t fwdmult;
	long joystickValue;
	int32_t rotateRate;
	int32_t tempfix;
	int32_t fwdrate;
	int32_t rotateMult;

// LINE 555:
	__asm        mov    fwdrate, 0x140000;
// LINE 556:
	__asm        mov    fwdmult, 0xA0000;
// LINE 559:
	__asm        cmp    G_CheatCodes[0], 0;
	__asm        je     _T108;

	__asm        push   1;
	__asm        call   IsModifierSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T108;
// LINE 560:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, 0xB;
	__asm        je     _Tcd;
// LINE 561:
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 562:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Tc8;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Ta3;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    _Tb6;

	__asm        jmp    _Tae;
_Ta3:
	__asm        mov    word ptr [ebp-0x1C], 0xFFFF;
	__asm        jmp    _Tb6;
_Tae:
	__asm        mov    ax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], ax;
_Tb6:
	__asm        jmp    near ptr 0x00546780;

	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_Tc8:
	__asm        jmp    _Tcd;
// LINE 567:
_Tcd:
	__asm        push   0x140000;
	__asm        mov    eax, fwdrate;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    fwdrate, eax;
// LINE 568:
	__asm        push   0x30000;
	__asm        push   0x140000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    fwdmult, eax;
// LINE 571:
	__asm        jmp    _T19c;
_T108:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, 1;
	__asm        je     _T19c;
// LINE 572:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 573:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T197;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T172;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    _T185;

	__asm        jmp    _T17d;
_T172:
	__asm        mov    word ptr [ebp-0x24], 0xFFFF;
	__asm        jmp    _T185;
_T17d:
	__asm        mov    ax, [ebp-0x28];
	__asm        mov    [ebp-0x24], ax;
_T185:
	__asm        jmp    near ptr 0x0054684F;

	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T197:
	__asm        jmp    _T19c;
// LINE 575:
_T19c:
	__asm        mov    rotateRate, 0x640000;
// LINE 576:
	__asm        mov    rotateMult, 0x320000;
// LINE 580:
	__asm        push   8;
	__asm        call   IsEventSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T1dc;
// LINE 581:
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x174], eax;
// LINE 582:
	__asm        jmp    _T2aa;
_T1dc:
	__asm        push   9;
	__asm        call   IsEventSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T214;
// LINE 583:
	__asm        xor    ebx, ebx;
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        neg    ebx;
	__asm        mov    eax, this;
	__asm        sub    [eax+0x174], ebx;
// LINE 584:
	__asm        jmp    _T2aa;
_T214:
	__asm        push   8;
	__asm        push   9;
	__asm        call   GetJoystickValueEither;
	__asm        add    esp, 8;
	__asm        mov    joystickValue, eax;
	__asm        cmp    joystickValue, 0;
	__asm        je     _T27e;
// LINE 586:
	__asm        push   0x30000;
	__asm        mov    eax, joystickValue;
	__asm        shl    eax, 0x10;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    tempfix, eax;
// LINE 587:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x174];
	__asm        neg    eax;
	__asm        sub    tempfix, eax;
// LINE 588:
	__asm        mov    eax, G_AvLoopTime;
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        mov    eax, tempfix;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    tempfix, eax;
// LINE 589:
	__asm        mov    eax, tempfix;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x174], eax;
// LINE 591:
	__asm        jmp    _T2aa;
// LINE 593:
_T27e:
	__asm        mov    eax, 0x10000;
	__asm        mov    ecx, G_AvLoopTime;
	__asm        shl    ecx, 2;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 596:
_T2aa:
	__asm        mov    eax, this;
	__asm        mov    ecx, fwdrate;
	__asm        cmp    [eax+0x174], ecx;
	__asm        jle    _T2c8;
// LINE 597:
	__asm        mov    eax, fwdrate;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 598:
_T2c8:
	__asm        mov    eax, this;
	__asm        mov    ecx, fwdrate;
	__asm        neg    ecx;
	__asm        cmp    [eax+0x174], ecx;
	__asm        jge    _T2ea;
// LINE 599:
	__asm        mov    eax, fwdrate;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 601:
_T2ea:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        call   AdjustPersonBeamingSlices;
	__asm        add    esp, 4;
// LINE 604:
	__asm        push   7;
	__asm        call   IsEventSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T32e;
// LINE 605:
	__asm        mov    eax, rotateMult;
	__asm        push   eax;
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x178], eax;
// LINE 606:
	__asm        jmp    _T3bf;
_T32e:
	__asm        push   6;
	__asm        call   IsEventSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T366;
// LINE 607:
	__asm        xor    ebx, ebx;
	__asm        mov    eax, rotateMult;
	__asm        push   eax;
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        neg    ebx;
	__asm        mov    eax, this;
	__asm        sub    [eax+0x178], ebx;
// LINE 608:
	__asm        jmp    _T3bf;
_T366:
	__asm        push   6;
	__asm        push   7;
	__asm        call   GetJoystickValueEither;
	__asm        add    esp, 8;
	__asm        mov    joystickValue, eax;
	__asm        cmp    joystickValue, 0;
	__asm        je     _T393;
// LINE 609:
	__asm        mov    eax, joystickValue;
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 610:
	__asm        jmp    _T3bf;
// LINE 612:
_T393:
	__asm        mov    eax, 0x10000;
	__asm        mov    ecx, G_AvLoopTime;
	__asm        shl    ecx, 2;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x178];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 615:
_T3bf:
	__asm        mov    eax, this;
	__asm        mov    ecx, rotateRate;
	__asm        cmp    [eax+0x178], ecx;
	__asm        jle    _T3dd;
// LINE 616:
	__asm        mov    eax, rotateRate;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 617:
_T3dd:
	__asm        mov    eax, this;
	__asm        mov    ecx, rotateRate;
	__asm        neg    ecx;
	__asm        cmp    [eax+0x178], ecx;
	__asm        jge    _T3ff;
// LINE 618:
	__asm        mov    eax, rotateRate;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 619:
_T3ff:
	__asm        jmp    near ptr 0x00546AC9;
}

// FUNCTION: COPTER_D 0x00546ace
void PersonHeliHasLanded() {
// LINE 624:
	__asm        jmp    near ptr 0x00546AD9;

	__asm        mov    eax, gAvatar;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    eax, G_uheli;
	__asm        sub    ecx, [eax+0x18];
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    _T62;

	__asm        jmp    near ptr 0x00546B07;

	__asm        mov    eax, gAvatar;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    eax, G_uheli;
	__asm        sub    ecx, [eax+0x1C];
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jl     _T7e;
_T62:
	__asm        push   0x8C085;
	__asm        push   0x5B8C7C;
	__asm        push   0x270;
	__asm        push   0x5B8CB4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 635:
_T7e:
	__asm        jmp    near ptr 0x00546B51;
}

// FUNCTION: COPTER_D 0x00546b56
struct _HELI_DATA* S3PersonGetLandedHeli(struct Point3d* loc) {
	struct _CELL_INFO* cptr;
	struct _HELI_DATA* hd;
	long y;
	long x;
	struct _DYOBJ_INST* dyobj;

// LINE 654:
	__asm        mov    eax, loc;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 655:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, loc;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 657:
	__asm        mov    eax, y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 659:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 660:
_T51:
	__asm        cmp    dyobj, 0;
	__asm        je     _T7c;
// LINE 663:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     _T6f;
// LINE 664:
	__asm        jmp    _T7c;
// LINE 666:
_T6f:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 667:
	__asm        jmp    _T51;
// LINE 669:
_T7c:
	__asm        cmp    dyobj, 0;
	__asm        jne    _T8d;
// LINE 670:
	__asm        xor    eax, eax;
	__asm        jmp    _T12a;
// LINE 676:
_T8d:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x18];
	__asm        sub    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx];
	__asm        jg     _Te7;

	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx];
	__asm        jl     _Te7;

	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x20];
	__asm        add    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx+8];
	__asm        jl     _Te7;

	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x20];
	__asm        sub    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx+8];
	__asm        jle    _Tee;
// LINE 679:
_Te7:
	__asm        xor    eax, eax;
	__asm        jmp    _T12a;
// LINE 683:
_Tee:
	__asm        mov    eax, dyobj;
	__asm        push   eax;
	__asm        call   S3HeliGetDataByDyObj;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 684:
	__asm        cmp    hd, 0;
	__asm        jne    _T10e;
// LINE 685:
	__asm        xor    eax, eax;
	__asm        jmp    _T12a;
// LINE 688:
_T10e:
	__asm        mov    eax, hd;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T122;
// LINE 689:
	__asm        xor    eax, eax;
	__asm        jmp    _T12a;
// LINE 691:
_T122:
	__asm        mov    eax, hd;
	__asm        jmp    _T12a;
// LINE 692:
_T12a:
}

// FUNCTION: COPTER_D 0x00546c85
class cYObject* cYObject::GetOnePersonForScurkID(short cellx, short celly) {
	short scurkID;
	short count;

// LINE 696:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T3b;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T46;
_T3b:
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    _Ta2;
_T46:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x10], ax;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        test   eax, eax;
	__asm        jl     _T79;

	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x100;
	__asm        jl     _T95;
_T79:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T95:
	__asm        mov    ax, [ebp-0x10];
	__asm        mov    scurkID, ax;
	__asm        jmp    _Ta2;
// LINE 697:
_Ta2:
	__asm        mov    count, 0;
	__asm        jmp    _Tb1;
_Tad:
	__asm        inc    count;
_Tb1:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T1df;
// LINE 698:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _Tda;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T156;
_Tda:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _Tf3;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T10f;
_Tf3:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T10f:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T13d;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T13d:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T156;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    obj, eax;
// LINE 699:
_T156:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T1da;
// LINE 700:
	__asm        jmp    near ptr 0x00546DF2;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, cellx;
	__asm        sub    ecx, eax;
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 4;
	__asm        jge    _T1da;

	__asm        jmp    near ptr 0x00546E1C;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, celly;
	__asm        sub    ecx, eax;
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 4;
	__asm        jge    _T1da;
// LINE 701:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xFC];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    _T1da;
// LINE 702:
	__asm        mov    eax, obj;
	__asm        jmp    _T1e6;
// LINE 704:
// Block end:
_T1da:
	__asm        jmp    _Tad;
// LINE 705:
_T1df:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e6;
// LINE 706:
_T1e6:
}

// FUNCTION: COPTER_D 0x00546e70
unsigned short cYObject::StartScurkAmbientMission(short scurkID, short treeID, enum PersonType persontype, short cellx, short celly, struct _DYOBJ_INST* onTopOf, int32_t offsetx, int32_t offsetz) {
	struct Point3d loc;


	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x34], eax;
// LINE 711:
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetx;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetz;
	__asm        mov    [ebp-0x28], eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00546EE9;

	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 712:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        jmp    near ptr 0x00546F3E;
// LINE 713:
}

// FUNCTION: COPTER_D 0x00546f45
unsigned short cYObject::StartScurkAmbientMission(short scurkID, short treeID, enum PersonType persontype, short cellx, short celly, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	unsigned short ret;

// LINE 719:
	__asm        mov    eax, loc;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::StartMission;
	__asm        mov    ret, ax;
// LINE 720:
	__asm        test   reinterpret_cast<uint32_t>(ret), 0xFFFF;
	__asm        jne    _T59;

	__asm        push   0x8C085;
	__asm        push   0x5B8CD8;
	__asm        push   0x2D0;
	__asm        push   0x5B8D10;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 721:
_T59:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T90;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, persontype;
	__asm        jne    _T90;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _Tac;
_T90:
	__asm        push   0x8C085;
	__asm        push   0x5B8D34;
	__asm        push   0x2D1;
	__asm        push   0x5B8D3C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 722:
_Tac:
	__asm        mov    ax, scurkID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xFC], ax;
// LINE 724:
	__asm        mov    ax, treeID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x0054702F;

	__asm        jmp    near ptr 0x00547034;
// LINE 725:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054703D;
// LINE 726:
}

// FUNCTION: COPTER_D 0x00547044
void cYObject::StartForScurkID(enum PersonType persontype, enum MissionType missiontype, short cellx, short celly, short missionid, struct _DYOBJ_INST* onTopOf) {
	struct _LZ_INFO* li;
	short id;
	int32_t offsetz;
	int32_t offsetx;

// LINE 732:
	__asm        cmp    onTopOf, 0;
	__asm        je     _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8D60;
	__asm        push   0x2DC;
	__asm        push   0x5B8D8C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 733:
_T2f:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T61;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T61;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T61;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T6c;
_T61:
	__asm        mov    id, 0xFFFF;
	__asm        jmp    _Tc8;
_T6c:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     _T9f;

	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tbb;
_T9f:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbb:
	__asm        mov    ax, [ebp-0x14];
	__asm        mov    id, ax;
	__asm        jmp    _Tc8;
// LINE 734:
_Tc8:
	__asm        movsx  eax, id;
	__asm        push   eax;
	__asm        call   S3ObjGetLandingZone;
	__asm        add    esp, 4;
	__asm        mov    li, eax;
// LINE 735:
	__asm        cmp    li, 0;
	__asm        jne    _Tfe;

	__asm        push   0x8C085;
	__asm        push   0x5B8DB0;
	__asm        push   0x2DF;
	__asm        push   0x5B8DB8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 736:
_Tfe:
	__asm        push   0x30000;
	__asm        mov    eax, li;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, li;
	__asm        mov    ecx, [ecx+4];
	__asm        add    ecx, eax;
	__asm        mov    offsetx, ecx;
// LINE 737:
	__asm        push   0x30000;
	__asm        mov    eax, li;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, li;
	__asm        mov    ecx, [ecx+8];
	__asm        add    ecx, eax;
	__asm        mov    offsetz, ecx;
// LINE 740:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(missionid);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, missiontype;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        call   cYObject::StartForScurkID;
	__asm        add    esp, 0x20;
// LINE 741:
	__asm        jmp    near ptr 0x005471AD;
}

// FUNCTION: COPTER_D 0x005471b2
void cYObject::StartForScurkID(enum PersonType persontype, enum MissionType missiontype, short cellx, short celly, short missionid, struct _DYOBJ_INST* onTopOf, int32_t offsetx, int32_t offsetz) {
	short id;
	class cYObject* obj;
	struct Point3d loc;
	short ret;

// LINE 748:
	__asm        cmp    onTopOf, 0;
	__asm        je     _T2f;

	__asm        push   0x8C085;
	__asm        push   0x5B8DDC;
	__asm        push   0x2EC;
	__asm        push   0x5B8E04;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 750:
_T2f:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T61;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T61;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T61;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T6c;
_T61:
	__asm        mov    id, 0xFFFF;
	__asm        jmp    _Tc8;
_T6c:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x44], ax;
	__asm        movsx  eax, word ptr [ebp-0x44];
	__asm        test   eax, eax;
	__asm        jl     _T9f;

	__asm        movsx  eax, word ptr [ebp-0x44];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tbb;
_T9f:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbb:
	__asm        mov    ax, [ebp-0x44];
	__asm        mov    id, ax;
	__asm        jmp    _Tc8;
_Tc8:
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    [ebp-0x40], eax;
// LINE 752:
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetx;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetz;
	__asm        mov    [ebp-0x34], eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        lea    ecx, [ebp-0x30];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005472E7;

	__asm        lea    eax, [ebp-0x30];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 763:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        movsx  eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, missiontype;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        call   StartPerson;
	__asm        add    esp, 0x1C;
	__asm        mov    ret, ax;
// LINE 764:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T1b8;
// LINE 765:
	__asm        push   0x8C085;
	__asm        push   0x5B8E28;
	__asm        push   0x2FD;
	__asm        push   0x5B8E58;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 766:
	__asm        jmp    _T289;
// LINE 769:
_T1b8:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T1d4;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T250;
_T1d4:
	__asm        movsx  eax, ret;
	__asm        test   eax, eax;
	__asm        jl     _T1ed;

	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T209;
_T1ed:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T209:
	__asm        movsx  eax, ret;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T237;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T237:
	__asm        movsx  eax, ret;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T250;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    obj, eax;
// LINE 770:
_T250:
	__asm        cmp    obj, 0;
	__asm        jne    _T276;

	__asm        push   0x8C085;
	__asm        push   0x5B8E7C;
	__asm        push   0x302;
	__asm        push   0x5B8E84;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 771:
_T276:
	__asm        mov    ax, id;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0xFC], ax;
// LINE 774:
	__asm        jmp    _T289;
_T289:
}

// FUNCTION: COPTER_D 0x00547440
void cYObject::StartScurkPeople(short cellx, short celly) {
	static const <NoType> = { /* <data@0x00547907> */ };
	short scurkID;

// LINE 780:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T3b;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T46;
_T3b:
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    _Ta2;
_T46:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x1C], ax;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     _T79;

	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x100;
	__asm        jl     _T95;
_T79:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T95:
	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    scurkID, ax;
	__asm        jmp    _Ta2;
// LINE 781:
_Ta2:
	__asm        movsx  eax, scurkID;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T490;
// LINE 784:
// Block start:
	class cYObject* medic;
	short dist;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetOnePersonForScurkID;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _Tcb;
// LINE 785:
	__asm        jmp    _T4f2;
// LINE 786:
_Tcb:
	__asm        lea    eax, dist;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, gAvatar;
	__asm        call   cYObject::GetClosest;
	__asm        mov    medic, eax;
// LINE 787:
	__asm        cmp    medic, 0;
	__asm        je     _Tfa;

	__asm        movsx  eax, dist;
	__asm        cmp    eax, 0x64;
	__asm        jle    _T112;
// LINE 788:
_Tfa:
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0xC;
	__asm        call   cYObject::StartForScurkID;
	__asm        add    esp, 0x18;
// LINE 789:
_T112:
	__asm        jmp    _T4ed;
// LINE 792:
// Block end:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetOnePersonForScurkID;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T134;
// LINE 793:
	__asm        jmp    _T4f2;
// LINE 794:
_T134:
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   7;
	__asm        push   0xE;
	__asm        call   cYObject::StartForScurkID;
	__asm        add    esp, 0x18;
// LINE 795:
	__asm        jmp    _T4ed;
// LINE 798:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetOnePersonForScurkID;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T16e;
// LINE 799:
	__asm        jmp    _T4f2;
// LINE 800:
_T16e:
	__asm        cmp    gCurrentCityType, 2;
	__asm        jne    _T190;

	__asm        call   GetUserPoints;
	__asm        cmp    eax, 0x3E8;
	__asm        jl     _T190;

	__asm        jmp    _T195;
_T190:
	__asm        jmp    _T1c0;
_T195:
	__asm        jmp    _T1a4;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T1c0;
// LINE 801:
_T1a4:
	__asm        push   0x8C085;
	__asm        push   0x5B8EA8;
	__asm        push   0x321;
	__asm        push   0x5B8EE8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 805:
_T1c0:
	__asm        jmp    _T4ed;
// LINE 808:
// Block start:
	short fieldershift;
	class cYObject* newperson;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetOnePersonForScurkID;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     _T1e2;
// LINE 809:
	__asm        jmp    _T4f2;
// LINE 818:
_T1e2:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T23a;

	__asm        push   0xFFBA0000;
	__asm        push   0x460000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B5;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T23a;

	__asm        push   0xA;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 820:
_T23a:
	__asm        push   0xA;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        mov    fieldershift, ax;
// LINE 822:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T29a;

	__asm        push   0xFFBA0000;
	__asm        push   0x140000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T29a;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 823:
_T29a:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T2ec;

	__asm        push   0xFFEC0000;
	__asm        push   0x140000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2ec;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 824:
_T2ec:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T33e;

	__asm        push   0xFFEC0000;
	__asm        push   0x460000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T33e;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 825:
_T33e:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T390;

	__asm        push   0xFFD30000;
	__asm        push   0x2D0000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T390;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 826:
_T390:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T3e2;

	__asm        push   0xFFD80000;
	__asm        push   0xFFD80000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T3e2;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 827:
_T3e2:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T434;

	__asm        push   0x280000;
	__asm        push   0x280000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T434;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 828:
_T434:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     _T486;

	__asm        push   0x280000;
	__asm        push   0xFFD80000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartScurkAmbientMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T486;

	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 829:
_T486:
	__asm        jmp    _T4ed;
// LINE 831:
// Block end:
	__asm        jmp    _T4ed;
_T490:
	__asm        sub    dword ptr [ebp-0x20], 0xD1;
	__asm        cmp    dword ptr [ebp-0x20], 0x25;
	__asm        ja     _T4ed;

	__asm        mov    eax, [ebp-0x20];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5536007[0][eax];
	__asm        jmp    SwitchPointers5535987[0][ecx*4];
// Switch pointers
// Switch table
// LINE 832:
_T4ed:
	__asm        jmp    _T4f2;
_T4f2:
}

// FUNCTION: COPTER_D 0x00547937
void cYObject::StartScurkPeopleNearAvatar() {
	short rectdiam;
	short celly;
	short cellx;
	short count;
	struct Rect r;

// LINE 839:
	__asm        movsx  eax, cYObject::sAmbientAbsoluteMax;
	__asm        movsx  ecx, cYObject::sNumAmbientAwake;
	__asm        cmp    eax, ecx;
	__asm        jge    _T24;
// LINE 840:
	__asm        jmp    _T186;
// LINE 841:
_T24:
	__asm        mov    eax, gAvatar;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    cellx, ax;
// LINE 842:
	__asm        mov    eax, gAvatar;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    celly, ax;
// LINE 844:
	__asm        movsx  eax, cellx;
	__asm        movsx  ecx, sAvLastCellX;
	__asm        cmp    eax, ecx;
	__asm        jne    _T71;

	__asm        movsx  eax, celly;
	__asm        movsx  ecx, sAvLastCellY;
	__asm        cmp    eax, ecx;
	__asm        jne    _T71;
// LINE 845:
	__asm        jmp    _T186;
// LINE 847:
_T71:
	__asm        mov    ax, cellx;
	__asm        mov    sAvLastCellX, ax;
// LINE 848:
	__asm        mov    ax, celly;
	__asm        mov    sAvLastCellY, ax;
// LINE 853:
	__asm        movsx  eax, cellx;
	__asm        movsx  ecx, cYObject::sScurkRectRad;
	__asm        sub    eax, ecx;
	__asm        mov    r.left, ax;
// LINE 854:
	__asm        movsx  eax, cYObject::sScurkRectRad;
	__asm        movsx  ecx, cellx;
	__asm        add    eax, ecx;
	__asm        mov    r.right, ax;
// LINE 855:
	__asm        movsx  eax, celly;
	__asm        movsx  ecx, cYObject::sScurkRectRad;
	__asm        sub    eax, ecx;
	__asm        mov    r.top, ax;
// LINE 856:
	__asm        movsx  eax, cYObject::sScurkRectRad;
	__asm        movsx  ecx, celly;
	__asm        add    eax, ecx;
	__asm        mov    r.bottom, ax;
// LINE 857:
	__asm        mov    ax, r.left;
	__asm        mov    cellx, ax;
// LINE 858:
	__asm        mov    ax, r.top;
	__asm        mov    celly, ax;
// LINE 859:
	__asm        movsx  eax, cYObject::sScurkRectRad;
	__asm        add    eax, eax;
	__asm        mov    rectdiam, ax;
// LINE 860:
	__asm        mov    count, 0;
	__asm        jmp    _Tf5;
_Tf1:
	__asm        inc    count;
_Tf5:
	__asm        movsx  eax, count;
	__asm        movsx  ecx, rectdiam;
	__asm        cmp    eax, ecx;
	__asm        jge    _T181;
// LINE 861:
	__asm        movsx  eax, r.top;
	__asm        movsx  ecx, count;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.left);
	__asm        push   eax;
	__asm        call   cYObject::StartScurkPeople;
	__asm        add    esp, 8;
// LINE 862:
	__asm        movsx  eax, r.bottom;
	__asm        movsx  ecx, count;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.right);
	__asm        push   eax;
	__asm        call   cYObject::StartScurkPeople;
	__asm        add    esp, 8;
// LINE 863:
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.top);
	__asm        push   eax;
	__asm        movsx  eax, r.right;
	__asm        movsx  ecx, count;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        call   cYObject::StartScurkPeople;
	__asm        add    esp, 8;
// LINE 864:
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.bottom);
	__asm        push   eax;
	__asm        movsx  eax, r.left;
	__asm        movsx  ecx, count;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        call   cYObject::StartScurkPeople;
	__asm        add    esp, 8;
// LINE 865:
	__asm        movsx  eax, cYObject::sAmbientAbsoluteMax;
	__asm        movsx  ecx, cYObject::sNumAmbientAwake;
	__asm        cmp    eax, ecx;
	__asm        jge    _T17c;
// LINE 866:
	__asm        jmp    _T186;
// LINE 867:
_T17c:
	__asm        jmp    _Tf1;
// LINE 868:
_T181:
	__asm        jmp    _T186;
_T186:
}

// FUNCTION: COPTER_D 0x00547ac2
void cYObject::BeamRemainingAmbients() {
	short numtries;

// LINE 872:
	__asm        mov    numtries, 0;
// LINE 873:
_T0f:
	__asm        movsx  eax, cYObject::sAmbientTopOff;
	__asm        movsx  ecx, cYObject::sNumAmbientAwake;
	__asm        cmp    eax, ecx;
	__asm        jle    _T19f;

	__asm        mov    ax, numtries;
	__asm        mov    [ebp-0x10], ax;
	__asm        inc    numtries;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x1E;
	__asm        jge    _T19f;
// LINE 874:
// Block start:
	short id;
	short lastnumawake;
	__asm        mov    ax, cYObject::sNumAmbientAwake;
	__asm        mov    lastnumawake, ax;
// LINE 875:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        call   StartPerson;
	__asm        add    esp, 0x1C;
	__asm        mov    id, ax;
	__asm        jmp    near ptr 0x00547B29;
// LINE 876:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T19a;
// LINE 877:
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     _T8d;

	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     _Ta9;
_T8d:
	__asm        push   0x8C085;
	__asm        push   0x5B8F0C;
	__asm        push   0x36D;
	__asm        push   0x5B8F3C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 878:
_Ta9:
	__asm        movsx  eax, lastnumawake;
	__asm        inc    eax;
	__asm        movsx  ecx, cYObject::sNumAmbientAwake;
	__asm        cmp    eax, ecx;
	__asm        je     _Td9;

	__asm        push   0x8C085;
	__asm        push   0x5B8F60;
	__asm        push   0x36E;
	__asm        push   0x5B8F68;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 879:
_Td9:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _Tfa;

	__asm        cmp    gAvatar, 0;
	__asm        jne    _T19a;

	__asm        jmp    _T17e;
_Tfa:
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     _T113;

	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T12f;
_T113:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T12f:
	__asm        movsx  eax, id;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T15d;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T15d:
	__asm        movsx  eax, id;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T19a;

	__asm        jmp    _T17e;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    _T19a;
_T17e:
	__asm        push   0x8C085;
	__asm        push   0x5B8F8C;
	__asm        push   0x36F;
	__asm        push   0x5B8FA8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 884:
// Block end:
_T19a:
	__asm        jmp    _T0f;
// LINE 885:
_T19f:
	__asm        jmp    near ptr 0x00547C66;
}

// FUNCTION: COPTER_D 0x00547c6b
void cYObject::TryStartAllAmbient() {
// LINE 890:
	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, cYObject::sBeamed;
	__asm        sub    eax, ecx;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 3;
	__asm        jge    _T37;

	__asm        jmp    _T4e;

	__asm        jmp    _T41;
_T37:
	__asm        jmp    _T53;

	__asm        jmp    _T4e;
_T41:
	__asm        test   dword ptr [ebp-4], 0xFFFF;
	__asm        je     _T53;
// LINE 893:
_T4e:
	__asm        call   cYObject::BeamRemainingAmbients;
// LINE 895:
_T53:
	__asm        jmp    near ptr 0x00547CC3;
}

// FUNCTION: COPTER_D 0x00547cc8
class cYObject* cYObject::GetSleepingPerson() {
	class cYObject* sleeper;
	short count;
	class cYObject* test;

// LINE 899:
	__asm        mov    sleeper, 0;
// LINE 900:
	__asm        mov    count, 0;
	__asm        jmp    _T1f;
_T1b:
	__asm        inc    count;
_T1f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T10c;
// LINE 901:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T48;

	__asm        mov    eax, gAvatar;
	__asm        mov    test, eax;
	__asm        jmp    _Tc4;
_T48:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T61;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T7d;
_T61:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7d:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tab;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tab:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    test, eax;
	__asm        jmp    _Tc4;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    test, eax;
// LINE 902:
_Tc4:
	__asm        cmp    test, 0;
	__asm        jne    _Tea;

	__asm        push   0x8C085;
	__asm        push   0x5B8FCC;
	__asm        push   0x386;
	__asm        push   0x5B8FD4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 903:
_Tea:
	__asm        mov    eax, test;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T107;
// LINE 904:
	__asm        mov    eax, test;
	__asm        mov    sleeper, eax;
// LINE 905:
	__asm        jmp    _T10c;
// LINE 907:
_T107:
	__asm        jmp    _T1b;
// LINE 908:
_T10c:
	__asm        mov    eax, sleeper;
	__asm        jmp    near ptr 0x00547DDC;
// LINE 909:
}

// FUNCTION: COPTER_D 0x00547de1
void MakeAllPeople() {
	struct _SYSTEMTIME st;
	char peoplepath[260];

// LINE 915:
	__asm        lea    eax, st.wYear;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3790];
// LINE 916:
	__asm        mov    eax, reinterpret_cast<uint32_t>(st.wSecond);
	__asm        and    eax, 0xFFFF;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, st.wMilliseconds;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        call   SetSRandSeed;
	__asm        add    esp, 4;
// LINE 919:
	__asm        lea    eax, peoplepath[0];
	__asm        push   eax;
	__asm        push   0x5B8FF8;
	__asm        push   0;
	__asm        push   0xA;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 920:
	__asm        lea    eax, peoplepath[0];
	__asm        push   eax;
	__asm        call   cYObject::InitObjects;
	__asm        add    esp, 4;
// LINE 921:
	__asm        call   cYObject::MakePlebes;
// LINE 923:
	__asm        call   cAvatar::MakeAvatar;
	__asm        mov    gAvatar, eax;
// LINE 926:
	__asm        jmp    near ptr 0x00547E54;
}

// FUNCTION: COPTER_D 0x00547e59
void DeleteAllPeople() {
// LINE 930:
	__asm        mov    eax, gAvatar;
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T33;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    _T33;
// LINE 931:
_T33:
	__asm        call   cYObject::DestroyObjects;
// LINE 932:
	__asm        jmp    near ptr 0x00547E96;
}

// FUNCTION: COPTER_D 0x00547e9b
void cYObject::MakePlebes() {
	int32_t newnum;
	int32_t pindex;
	struct Point3d p;

// LINE 947:
	__asm        mov    p.x, 0;
	__asm        mov    p.y, 0;
	__asm        mov    p.z, 0;
// LINE 950:
	__asm        mov    pindex, 0;
	__asm        jmp    _T2d;
_T2a:
	__asm        inc    pindex;
_T2d:
	__asm        cmp    pindex, 0x64;
	__asm        jge    _T1a2;
// LINE 952:
// Block start:
	class cYObject* personobj;
	__asm        mov    eax, cYObject::sBehavior;
	__asm        push   eax;
	__asm        mov    eax, p.z;
	__asm        push   eax;
	__asm        mov    eax, p.y;
	__asm        push   eax;
	__asm        mov    eax, p.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::MakeNewObject;
	__asm        add    esp, 0x14;
	__asm        movsx  eax, ax;
	__asm        mov    newnum, eax;
// LINE 954:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T75;

	__asm        mov    eax, gAvatar;
	__asm        mov    personobj, eax;
	__asm        jmp    _Tf1;
_T75:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        test   eax, eax;
	__asm        jl     _T8e;

	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    eax, 0x64;
	__asm        jl     _Taa;
_T8e:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Taa:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Td8;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td8:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    personobj, eax;
	__asm        jmp    _Tf1;

	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    personobj, eax;
// LINE 955:
_Tf1:
	__asm        cmp    personobj, 0;
	__asm        jne    _T117;

	__asm        push   0x8C085;
	__asm        push   0x5B9004;
	__asm        push   0x3BB;
	__asm        push   0x5B9010;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 956:
_T117:
	__asm        mov    eax, personobj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, newnum;
	__asm        je     _T146;

	__asm        push   0x8C085;
	__asm        push   0x5B9034;
	__asm        push   0x3BC;
	__asm        push   0x5B903C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 957:
_T146:
	__asm        mov    eax, personobj;
	__asm        movsx  eax, word ptr [eax+0xDE];
	__asm        cmp    eax, newnum;
	__asm        je     _T175;

	__asm        push   0x8C085;
	__asm        push   0x5B9060;
	__asm        push   0x3BD;
	__asm        push   0x5B9068;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 959:
_T175:
	__asm        mov    eax, pindex;
	__asm        cmp    newnum, eax;
	__asm        je     _T19d;

	__asm        push   0x8C085;
	__asm        push   0x5B908C;
	__asm        push   0x3BF;
	__asm        push   0x5B9094;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 960:
// Block end:
_T19d:
	__asm        jmp    _T2a;
// LINE 961:
_T1a2:
	__asm        jmp    near ptr 0x00548042;
}

// FUNCTION: COPTER_D 0x00548047
void cYObject::InitObjects(char * globalBehaviorFileName) {
	// Function registers exception cleanup function at 0x00549bc5
// LINE 965:
	__asm        xor    eax, eax;
	__asm        mov    ax, cYObject::sInited;
	__asm        test   eax, eax;
	__asm        jne    _T1b5f;
// LINE 967:
// Block start:
	short n;
	short count;
	__asm        mov    cYObject::sUnitVectorTable[0].x, 0;
// LINE 968:
	__asm        mov    cYObject::sUnitVectorTable[0].z, 0xFFFF0000;
// LINE 970:
	__asm        mov    cYObject::sUnitVectorTable[1].x, 0xB504;
// LINE 971:
	__asm        mov    cYObject::sUnitVectorTable[1].z, 0xFFFF4AFC;
// LINE 973:
	__asm        mov    cYObject::sUnitVectorTable[2].x, 0x10000;
// LINE 974:
	__asm        mov    cYObject::sUnitVectorTable[2].z, 0;
// LINE 976:
	__asm        mov    cYObject::sUnitVectorTable[3].x, 0xB504;
// LINE 977:
	__asm        mov    cYObject::sUnitVectorTable[3].z, 0xB504;
// LINE 979:
	__asm        mov    cYObject::sUnitVectorTable[4].x, 0;
// LINE 980:
	__asm        mov    cYObject::sUnitVectorTable[4].z, 0x10000;
// LINE 982:
	__asm        mov    cYObject::sUnitVectorTable[5].x, 0xFFFF4AFC;
// LINE 983:
	__asm        mov    cYObject::sUnitVectorTable[5].z, 0xB504;
// LINE 985:
	__asm        mov    cYObject::sUnitVectorTable[6].x, 0xFFFF0000;
// LINE 986:
	__asm        mov    cYObject::sUnitVectorTable[6].z, 0;
// LINE 988:
	__asm        mov    cYObject::sUnitVectorTable[7].x, 0xFFFF4AFC;
// LINE 989:
	__asm        mov    cYObject::sUnitVectorTable[7].z, 0xFFFF4AFC;
// LINE 992:
	__asm        mov    count, 0;
	__asm        jmp    _Tdd;
_Td9:
	__asm        inc    count;
_Tdd:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 8;
	__asm        jge    _T101;
// LINE 993:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    cYObject::sUnitVectorTable[0].y[eax*4], 0;
	__asm        jmp    _Td9;
// LINE 995:
_T101:
	__asm        mov    count, 0;
	__asm        jmp    _T110;
_T10c:
	__asm        inc    count;
_T110:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 8;
	__asm        jge    _T1a0;
// LINE 996:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, cYObject::sUnitVectorTable[0].x[eax*4];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    cYObject::sMoveTable[0].x[ecx*4], eax;
// LINE 997:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, cYObject::sUnitVectorTable[0].z[eax*4];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    cYObject::sMoveTable[0].z[ecx*4], eax;
// LINE 998:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, cYObject::sUnitVectorTable[0].y[eax*4];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    cYObject::sMoveTable[0].y[ecx*4], eax;
// LINE 999:
	__asm        jmp    _T10c;
// LINE 1003:
_T1a0:
	__asm        mov    cYObject::sStackSize[0], 0xA;
// LINE 1005:
	__asm        mov    count, 0;
	__asm        jmp    _T1b8;
_T1b4:
	__asm        inc    count;
_T1b8:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    _T319;
// LINE 1006:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T2cd;
// LINE 1008:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x352;
	__asm        jmp    _T314;
// LINE 1010:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x2BC;
	__asm        jmp    _T314;
// LINE 1012:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x2BC;
	__asm        jmp    _T314;
// LINE 1014:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x2EE;
	__asm        jmp    _T314;
// LINE 1016:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x320;
	__asm        jmp    _T314;
// LINE 1018:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x321;
	__asm        jmp    _T314;
// LINE 1022:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x325;
	__asm        jmp    _T314;
// LINE 1024:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x514;
	__asm        jmp    _T314;
// LINE 1026:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x515;
	__asm        jmp    _T314;
// LINE 1028:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x516;
	__asm        jmp    _T314;
// LINE 1030:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x578;
	__asm        jmp    _T314;
// LINE 1032:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x579;
	__asm        jmp    _T314;
// LINE 1034:
_T2b5:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sInitBhav[eax*2], 0x258;
	__asm        jmp    _T314;
// LINE 1035:
	__asm        jmp    _T314;
_T2cd:
	__asm        dec    dword ptr [ebp-0x28];
	__asm        cmp    dword ptr [ebp-0x28], 0xB;
	__asm        ja     _T2b5;

	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    SwitchPointers5538603[0][eax*4];
// Switch pointers
// LINE 1036:
_T314:
	__asm        jmp    _T1b4;
// LINE 1039:
_T319:
	__asm        mov    count, 0;
	__asm        jmp    _T328;
_T324:
	__asm        inc    count;
_T328:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x14;
	__asm        jge    _T382;
// LINE 1040:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T34e;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x14;
	__asm        jl     _T36a;
_T34e:
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T36a:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sHitRxnTree[eax*2], 0xFFFF;
	__asm        jmp    near ptr 0x005483C4;
// LINE 1041:
	__asm        jmp    _T324;
// LINE 1043:
_T382:
	__asm        jmp    _T3a3;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3a3:
	__asm        mov    cYObject::sHitRxnTree[1], 0x384;
	__asm        jmp    near ptr 0x005483F8;
// LINE 1046:
	__asm        jmp    _T3d2;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3d2:
	__asm        mov    cYObject::sHitRxnTree[2], 0x385;
	__asm        jmp    near ptr 0x00548427;
// LINE 1047:
	__asm        jmp    _T401;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T401:
	__asm        mov    cYObject::sHitRxnTree[0], 0x386;
	__asm        jmp    near ptr 0x00548456;
// LINE 1048:
	__asm        jmp    _T430;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T430:
	__asm        mov    cYObject::sHitRxnTree[3], 0x387;
	__asm        jmp    near ptr 0x00548485;
// LINE 1049:
	__asm        jmp    _T45f;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T45f:
	__asm        mov    cYObject::sHitRxnTree[4], 0x388;
	__asm        jmp    near ptr 0x005484B4;
// LINE 1050:
	__asm        jmp    _T48e;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T48e:
	__asm        mov    cYObject::sHitRxnTree[5], 0x389;
	__asm        jmp    near ptr 0x005484E3;
// LINE 1051:
	__asm        jmp    _T4bd;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4bd:
	__asm        mov    cYObject::sHitRxnTree[6], 0x387;
	__asm        jmp    near ptr 0x00548512;
// LINE 1052:
	__asm        jmp    _T4ec;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4ec:
	__asm        mov    cYObject::sHitRxnTree[7], 0x38A;
	__asm        jmp    near ptr 0x00548541;
// LINE 1053:
	__asm        jmp    _T51b;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T51b:
	__asm        mov    cYObject::sHitRxnTree[8], 0x38A;
	__asm        jmp    near ptr 0x00548570;
// LINE 1054:
	__asm        jmp    _T54a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T54a:
	__asm        mov    cYObject::sHitRxnTree[9], 0x387;
	__asm        jmp    near ptr 0x0054859F;
// LINE 1055:
	__asm        jmp    _T579;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T579:
	__asm        mov    cYObject::sHitRxnTree[10], 0x387;
	__asm        jmp    near ptr 0x005485CE;
// LINE 1056:
	__asm        jmp    _T5a8;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5a8:
	__asm        mov    cYObject::sHitRxnTree[11], 0x38A;
	__asm        jmp    near ptr 0x005485FD;
// LINE 1057:
	__asm        jmp    _T5d7;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5d7:
	__asm        mov    cYObject::sHitRxnTree[12], 0x38A;
	__asm        jmp    near ptr 0x0054862C;
// LINE 1058:
	__asm        jmp    _T606;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T606:
	__asm        mov    cYObject::sHitRxnTree[13], 0xFFFF;
	__asm        jmp    near ptr 0x0054865B;
// LINE 1059:
	__asm        jmp    _T635;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T635:
	__asm        mov    cYObject::sHitRxnTree[14], 0x386;
	__asm        jmp    near ptr 0x0054868A;
// LINE 1060:
	__asm        jmp    _T664;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T664:
	__asm        mov    cYObject::sHitRxnTree[15], 0x386;
	__asm        jmp    near ptr 0x005486B9;
// LINE 1061:
	__asm        jmp    _T693;

	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T693:
	__asm        mov    cYObject::sHitRxnTree[16], 0x387;
	__asm        jmp    near ptr 0x005486E8;
// LINE 1069:
	__asm        mov    count, 0;
	__asm        jmp    _T6b0;
_T6ac:
	__asm        inc    count;
_T6b0:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    _T911;
// LINE 1070:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T8e1;
// LINE 1080:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][eax*8], 2;
// LINE 1081:
	__asm        mov    n, 1;
	__asm        jmp    _T6ea;
_T6e6:
	__asm        inc    n;
_T6ea:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T715;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T6e6;
// LINE 1082:
_T715:
	__asm        jmp    _T90c;
// LINE 1084:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][eax*8], 0xD;
// LINE 1085:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][1][eax*8], 0xB;
// LINE 1086:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][2][eax*8], 0xA;
// LINE 1087:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][3][eax*8], 0xC;
// LINE 1088:
	__asm        mov    n, 4;
	__asm        jmp    _T771;
_T76d:
	__asm        inc    n;
_T771:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T79c;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T76d;
// LINE 1089:
_T79c:
	__asm        jmp    _T90c;
// LINE 1092:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][1][eax*8], 7;
// LINE 1094:
	__asm        mov    n, 3;
	__asm        jmp    _T7c2;
_T7be:
	__asm        inc    n;
_T7c2:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T7ed;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T7be;
// LINE 1095:
_T7ed:
	__asm        jmp    _T90c;
// LINE 1097:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][eax*8], 0xC;
// LINE 1098:
	__asm        mov    n, 1;
	__asm        jmp    _T813;
_T80f:
	__asm        inc    n;
_T813:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T83e;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T80f;
// LINE 1099:
_T83e:
	__asm        jmp    _T90c;
// LINE 1108:
_T843:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][eax*8], 0xD;
// LINE 1109:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][1][eax*8], 0xB;
// LINE 1110:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][2][eax*8], 0xA;
// LINE 1111:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][3][eax*8], 0xC;
// LINE 1112:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralMissionLocs[0][4][eax*8], 7;
// LINE 1113:
	__asm        mov    n, 5;
	__asm        jmp    _T8ac;
_T8a8:
	__asm        inc    n;
_T8ac:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T8d7;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralMissionLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T8a8;
// LINE 1114:
_T8d7:
	__asm        jmp    _T90c;
// LINE 1116:
	__asm        jmp    _T90c;
_T8e1:
	__asm        dec    dword ptr [ebp-0x2C];
	__asm        cmp    dword ptr [ebp-0x2C], 4;
	__asm        ja     _T843;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    SwitchPointers5540159[0][eax*4];
// Switch pointers
// LINE 1117:
_T90c:
	__asm        jmp    _T6ac;
// LINE 1119:
_T911:
	__asm        mov    count, 0;
	__asm        jmp    _T920;
_T91c:
	__asm        inc    count;
_T920:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x12;
	__asm        jge    _Taa4;
// LINE 1120:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _Ta86;
// LINE 1122:
_T939:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][eax*8], 0xD;
// LINE 1123:
	__asm        mov    n, 1;
	__asm        jmp    _T95a;
_T956:
	__asm        inc    n;
_T95a:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T985;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T956;
// LINE 1124:
_T985:
	__asm        jmp    _Ta9f;
// LINE 1126:
_T98a:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][eax*8], 5;
// LINE 1127:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][1][eax*8], 4;
// LINE 1128:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][2][eax*8], 3;
// LINE 1129:
	__asm        mov    n, 3;
	__asm        jmp    _T9cf;
_T9cb:
	__asm        inc    n;
_T9cf:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T9fa;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _T9cb;
// LINE 1130:
_T9fa:
	__asm        jmp    _Ta9f;
// LINE 1137:
_T9ff:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][eax*8], 0xC;
// LINE 1138:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][1][eax*8], 0xD;
// LINE 1139:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][2][eax*8], 0xB;
// LINE 1140:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    cYObject::sNeutralPersonLocs[0][3][eax*8], 0xA;
// LINE 1142:
	__asm        mov    n, 4;
	__asm        jmp    _Ta56;
_Ta52:
	__asm        inc    n;
_Ta56:
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    _Ta81;

	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], 0;
	__asm        jmp    _Ta52;
// LINE 1143:
_Ta81:
	__asm        jmp    _Ta9f;
_Ta86:
	__asm        cmp    dword ptr [ebp-0x30], 7;
	__asm        je     _T939;

	__asm        cmp    dword ptr [ebp-0x30], 0x11;
	__asm        je     _T98a;

	__asm        jmp    _T9ff;
// LINE 1144:
_Ta9f:
	__asm        jmp    _T91c;
// LINE 1145:
_Taa4:
	__asm        mov    count, 0;
	__asm        jmp    _Tab3;
_Taaf:
	__asm        inc    count;
_Tab3:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    _Tb65;
// LINE 1146:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 7;
	__asm        je     _Tb01;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 3;
	__asm        je     _Tb01;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        je     _Tb01;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 5;
	__asm        je     _Tb01;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jne    _Tb43;
// LINE 1147:
_Tb01:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocInfo[0].searchType[eax*8], 1;
// LINE 1148:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jne    _Tb30;
// LINE 1149:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocInfo[0].maxNormalLoiterers[eax*8], 2;
// LINE 1150:
	__asm        jmp    _Tb3e;
// LINE 1151:
_Tb30:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocInfo[0].maxNormalLoiterers[eax*8], 4;
// LINE 1153:
_Tb3e:
	__asm        jmp    _Tb60;
// LINE 1154:
_Tb43:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocInfo[0].searchType[eax*8], 0;
// LINE 1155:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocInfo[0].maxNormalLoiterers[eax*8], 4;
// LINE 1157:
_Tb60:
	__asm        jmp    _Taaf;
// LINE 1162:
_Tb65:
	__asm        mov    count, 0;
	__asm        jmp    _Tb74;
_Tb70:
	__asm        inc    count;
_Tb74:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x100;
	__asm        jge    _T1042;
// LINE 1163:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jne    _Tba3;
// LINE 1164:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 2;
// LINE 1165:
	__asm        jmp    _T103d;
_Tba3:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 1;
	__asm        jl     _Tbd1;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jg     _Tbd1;
// LINE 1166:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 4;
// LINE 1167:
	__asm        jmp    _T103d;
_Tbd1:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 6;
	__asm        jl     _Tbff;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xC;
	__asm        jg     _Tbff;
// LINE 1168:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 3;
// LINE 1169:
	__asm        jmp    _T103d;
_Tbff:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD;
	__asm        je     _Tc2a;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD5;
	__asm        je     _Tc2a;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xDA;
	__asm        jne    _Tc3e;
// LINE 1170:
_Tc2a:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 5;
// LINE 1171:
	__asm        jmp    _T103d;
_Tc3e:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jl     _Tc6c;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x1C;
	__asm        jg     _Tc6c;
// LINE 1172:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 6;
// LINE 1173:
	__asm        jmp    _T103d;
_Tc6c:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _Tc86;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _Tcd4;
_Tc86:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x43;
	__asm        jl     _Tca0;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x44;
	__asm        jle    _Tcd4;
_Tca0:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        jl     _Tcba;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x50;
	__asm        jle    _Tcd4;
_Tcba:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x61;
	__asm        jl     _Tce8;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x69;
	__asm        jg     _Tce8;
// LINE 1174:
_Tcd4:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 7;
// LINE 1175:
	__asm        jmp    _T103d;
_Tce8:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x51;
	__asm        jl     _Td02;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x5A;
	__asm        jle    _Td29;
_Td02:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        je     _Td29;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x6A;
	__asm        jl     _Td3d;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _Td3d;
// LINE 1176:
_Td29:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 8;
// LINE 1177:
	__asm        jmp    _T103d;
_Td3d:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x2C;
	__asm        jl     _Td57;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x3E;
	__asm        jle    _Tda5;
_Td57:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _Td71;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x50;
	__asm        jle    _Tda5;
_Td71:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x45;
	__asm        jl     _Td8b;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        jle    _Tda5;
_Td8b:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x5B;
	__asm        jl     _Tdb9;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x60;
	__asm        jg     _Tdb9;
// LINE 1178:
_Tda5:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 9;
// LINE 1179:
	__asm        jmp    _T103d;
_Tdb9:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x70;
	__asm        jl     _Tdd3;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7B;
	__asm        jle    _Te2d;
_Tdd3:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x8C;
	__asm        jl     _Tdf1;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x93;
	__asm        jle    _Te2d;
_Tdf1:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xAA;
	__asm        jl     _Te0f;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xB1;
	__asm        jle    _Te2d;
_Te0f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFB;
	__asm        jl     _Te41;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFF;
	__asm        jg     _Te41;
// LINE 1180:
_Te2d:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 0xA;
// LINE 1181:
	__asm        jmp    _T103d;
_Te41:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xB2;
	__asm        jl     _Te5f;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xBB;
	__asm        jle    _Tec8;
_Te5f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD0;
	__asm        jl     _Te7d;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD1;
	__asm        jle    _Tec8;
_Te7d:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD9;
	__asm        je     _Tec8;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE1;
	__asm        je     _Tec8;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF1;
	__asm        je     _Tec8;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF3;
	__asm        je     _Tec8;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF7;
	__asm        jne    _Tedc;
// LINE 1182:
_Tec8:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 0xC;
// LINE 1183:
	__asm        jmp    _T103d;
_Tedc:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x82;
	__asm        je     _Tfae;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x84;
	__asm        jl     _Tf09;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x8B;
	__asm        jle    _Tfae;
_Tf09:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x9E;
	__asm        jl     _Tf27;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xA9;
	__asm        jle    _Tfae;
_Tf27:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xBC;
	__asm        jl     _Tf45;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xCF;
	__asm        jle    _Tfae;
_Tf45:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE2;
	__asm        jl     _Tf63;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xEF;
	__asm        jle    _Tfae;
_Tf63:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF2;
	__asm        je     _Tfae;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF4;
	__asm        je     _Tfae;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF6;
	__asm        je     _Tfae;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF9;
	__asm        jl     _Tfc2;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFA;
	__asm        jg     _Tfc2;
// LINE 1184:
_Tfae:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 0xD;
// LINE 1185:
	__asm        jmp    _T103d;
_Tfc2:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7C;
	__asm        jl     _Tfde;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x83;
	__asm        jle    _T101a;
_Tfde:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x94;
	__asm        jl     _Tffc;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x9D;
	__asm        jle    _T101a;
_Tffc:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD2;
	__asm        jl     _T102e;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFA;
	__asm        jg     _T102e;
// LINE 1186:
_T101a:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 0xB;
// LINE 1187:
	__asm        jmp    _T103d;
// LINE 1188:
_T102e:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sLocType[0][eax*4], 1;
// LINE 1189:
_T103d:
	__asm        jmp    _Tb70;
// LINE 1192:
_T1042:
	__asm        mov    count, 0;
	__asm        jmp    _T1051;
_T104d:
	__asm        inc    count;
_T1051:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T1072;
// LINE 1193:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::sObjects[0][eax*4], 0;
	__asm        jmp    _T104d;
// LINE 1194:
_T1072:
	__asm        mov    cYObject::sInited, 1;
// LINE 1197:
	__asm        cmp    globalBehaviorFileName, 0;
	__asm        jne    _T10a1;

	__asm        push   0x8C085;
	__asm        push   0x5B90B8;
	__asm        push   0x4AD;
	__asm        push   0x5B90E4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1198:
_T10a1:
	__asm        mov    eax, globalBehaviorFileName;
	__asm        push   eax;
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatResFile::Open;
// LINE 1199:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T10e0;

	__asm        push   0x8C085;
	__asm        push   0x5B9108;
	__asm        push   0x4AF;
	__asm        push   0x5B9130;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1200:
_T10e0:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T1102;
// LINE 1201:
	__asm        push   0x5B9154;
	__asm        call   ERexit;
	__asm        add    esp, 4;
// LINE 1203:
_T1102:
	__asm        push   4;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T1132;

	__asm        push   0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   YObjLang::YObjLang;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T1139;
_T1132:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T1139:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    cYObject::sLanguage, eax;
// LINE 1204:
	__asm        push   0x1C;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T1186;

	__asm        push   0x636BB8;
	__asm        push   0x636BB8;
	__asm        mov    eax, cYObject::sLanguage;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   Behavior::Behavior;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T118d;
_T1186:
	__asm        mov    dword ptr [ebp-0x24], 0;
_T118d:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    cYObject::sBehavior, eax;
// LINE 1208:
	__asm        mov    count, 0;
	__asm        jmp    _T11ab;
_T11a7:
	__asm        inc    count;
_T11ab:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x40;
	__asm        jge    _T11cc;
// LINE 1209:
	__asm        movsx  eax, count;
	__asm        mov    cYObject::PrimProcs[0][eax*4], 0;
	__asm        jmp    _T11a7;
// LINE 1210:
_T11cc:
	__asm        jmp    _T11ed;

	__asm        push   0x8C085;
	__asm        push   0x5B9178;
	__asm        push   0x4BA;
	__asm        push   0x5B91B0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T11ed:
	__asm        mov    cYObject::PrimProcs[0], 0x552370;
// LINE 1211:
	__asm        jmp    _T1218;

	__asm        push   0x8C085;
	__asm        push   0x5B91D4;
	__asm        push   0x4BB;
	__asm        push   0x5B920C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1218:
	__asm        mov    cYObject::PrimProcs[1], 0x552390;
// LINE 1212:
	__asm        jmp    _T1243;

	__asm        push   0x8C085;
	__asm        push   0x5B9230;
	__asm        push   0x4BC;
	__asm        push   0x5B9268;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1243:
	__asm        mov    cYObject::PrimProcs[2], 0x5523B0;
// LINE 1214:
	__asm        jmp    _T126e;

	__asm        push   0x8C085;
	__asm        push   0x5B928C;
	__asm        push   0x4BE;
	__asm        push   0x5B92C4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T126e:
	__asm        mov    cYObject::PrimProcs[4], 0x5523D0;
// LINE 1215:
	__asm        jmp    _T1299;

	__asm        push   0x8C085;
	__asm        push   0x5B92E8;
	__asm        push   0x4BF;
	__asm        push   0x5B9320;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1299:
	__asm        mov    cYObject::PrimProcs[6], 0x5523F0;
// LINE 1216:
	__asm        jmp    _T12c4;

	__asm        push   0x8C085;
	__asm        push   0x5B9344;
	__asm        push   0x4C0;
	__asm        push   0x5B937C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T12c4:
	__asm        mov    cYObject::PrimProcs[7], 0x552410;
// LINE 1221:
	__asm        jmp    _T12ef;

	__asm        push   0x8C085;
	__asm        push   0x5B93A0;
	__asm        push   0x4C5;
	__asm        push   0x5B93D8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T12ef:
	__asm        mov    cYObject::PrimProcs[12], 0x552430;
// LINE 1222:
	__asm        jmp    _T131a;

	__asm        push   0x8C085;
	__asm        push   0x5B93FC;
	__asm        push   0x4C6;
	__asm        push   0x5B9434;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T131a:
	__asm        mov    cYObject::PrimProcs[13], 0x552450;
// LINE 1223:
	__asm        jmp    _T1345;

	__asm        push   0x8C085;
	__asm        push   0x5B9458;
	__asm        push   0x4C7;
	__asm        push   0x5B9490;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1345:
	__asm        mov    cYObject::PrimProcs[14], 0x552470;
// LINE 1224:
	__asm        jmp    _T1370;

	__asm        push   0x8C085;
	__asm        push   0x5B94B4;
	__asm        push   0x4C8;
	__asm        push   0x5B94EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1370:
	__asm        mov    cYObject::PrimProcs[15], 0x552490;
// LINE 1225:
	__asm        jmp    _T139b;

	__asm        push   0x8C085;
	__asm        push   0x5B9510;
	__asm        push   0x4C9;
	__asm        push   0x5B9548;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T139b:
	__asm        mov    cYObject::PrimProcs[16], 0x5524B0;
// LINE 1226:
	__asm        jmp    _T13c6;

	__asm        push   0x8C085;
	__asm        push   0x5B956C;
	__asm        push   0x4CA;
	__asm        push   0x5B95A4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T13c6:
	__asm        mov    cYObject::PrimProcs[17], 0x5524D0;
// LINE 1227:
	__asm        jmp    _T13f1;

	__asm        push   0x8C085;
	__asm        push   0x5B95C8;
	__asm        push   0x4CB;
	__asm        push   0x5B9600;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T13f1:
	__asm        mov    cYObject::PrimProcs[18], 0x5524F0;
// LINE 1228:
	__asm        jmp    _T141c;

	__asm        push   0x8C085;
	__asm        push   0x5B9624;
	__asm        push   0x4CC;
	__asm        push   0x5B965C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T141c:
	__asm        mov    cYObject::PrimProcs[19], 0x552510;
// LINE 1229:
	__asm        jmp    _T1447;

	__asm        push   0x8C085;
	__asm        push   0x5B9680;
	__asm        push   0x4CD;
	__asm        push   0x5B96B8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1447:
	__asm        mov    cYObject::PrimProcs[20], 0x552530;
// LINE 1230:
	__asm        jmp    _T1472;

	__asm        push   0x8C085;
	__asm        push   0x5B96DC;
	__asm        push   0x4CE;
	__asm        push   0x5B9714;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1472:
	__asm        mov    cYObject::PrimProcs[21], 0x552550;
// LINE 1231:
	__asm        jmp    _T149d;

	__asm        push   0x8C085;
	__asm        push   0x5B9738;
	__asm        push   0x4CF;
	__asm        push   0x5B9770;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T149d:
	__asm        mov    cYObject::PrimProcs[22], 0x552570;
// LINE 1232:
	__asm        jmp    _T14c8;

	__asm        push   0x8C085;
	__asm        push   0x5B9794;
	__asm        push   0x4D0;
	__asm        push   0x5B97CC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T14c8:
	__asm        mov    cYObject::PrimProcs[23], 0x552590;
// LINE 1233:
	__asm        jmp    _T14f3;

	__asm        push   0x8C085;
	__asm        push   0x5B97F0;
	__asm        push   0x4D1;
	__asm        push   0x5B9828;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T14f3:
	__asm        mov    cYObject::PrimProcs[24], 0x5525B0;
// LINE 1234:
	__asm        jmp    _T151e;

	__asm        push   0x8C085;
	__asm        push   0x5B984C;
	__asm        push   0x4D2;
	__asm        push   0x5B9884;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T151e:
	__asm        mov    cYObject::PrimProcs[25], 0x5525D0;
// LINE 1235:
	__asm        jmp    _T1549;

	__asm        push   0x8C085;
	__asm        push   0x5B98A8;
	__asm        push   0x4D3;
	__asm        push   0x5B98E0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1549:
	__asm        mov    cYObject::PrimProcs[26], 0x5525F0;
// LINE 1236:
	__asm        jmp    _T1574;

	__asm        push   0x8C085;
	__asm        push   0x5B9904;
	__asm        push   0x4D4;
	__asm        push   0x5B993C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1574:
	__asm        mov    cYObject::PrimProcs[27], 0x552610;
// LINE 1237:
	__asm        jmp    _T159f;

	__asm        push   0x8C085;
	__asm        push   0x5B9960;
	__asm        push   0x4D5;
	__asm        push   0x5B9998;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T159f:
	__asm        mov    cYObject::PrimProcs[28], 0x552630;
// LINE 1238:
	__asm        jmp    _T15ca;

	__asm        push   0x8C085;
	__asm        push   0x5B99BC;
	__asm        push   0x4D6;
	__asm        push   0x5B99F4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T15ca:
	__asm        mov    cYObject::PrimProcs[29], 0x552650;
// LINE 1239:
	__asm        jmp    _T15f5;

	__asm        push   0x8C085;
	__asm        push   0x5B9A18;
	__asm        push   0x4D7;
	__asm        push   0x5B9A50;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T15f5:
	__asm        mov    cYObject::PrimProcs[30], 0x552670;
// LINE 1240:
	__asm        jmp    _T1620;

	__asm        push   0x8C085;
	__asm        push   0x5B9A74;
	__asm        push   0x4D8;
	__asm        push   0x5B9AAC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1620:
	__asm        mov    cYObject::PrimProcs[31], 0x552690;
// LINE 1241:
	__asm        jmp    _T164b;

	__asm        push   0x8C085;
	__asm        push   0x5B9AD0;
	__asm        push   0x4D9;
	__asm        push   0x5B9B08;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T164b:
	__asm        mov    cYObject::PrimProcs[32], 0x5526B0;
// LINE 1242:
	__asm        jmp    _T1676;

	__asm        push   0x8C085;
	__asm        push   0x5B9B2C;
	__asm        push   0x4DA;
	__asm        push   0x5B9B64;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1676:
	__asm        mov    cYObject::PrimProcs[33], 0x5526D0;
// LINE 1243:
	__asm        jmp    _T16a1;

	__asm        push   0x8C085;
	__asm        push   0x5B9B88;
	__asm        push   0x4DB;
	__asm        push   0x5B9BC0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T16a1:
	__asm        mov    cYObject::PrimProcs[34], 0x5526F0;
// LINE 1244:
	__asm        jmp    _T16cc;

	__asm        push   0x8C085;
	__asm        push   0x5B9BE4;
	__asm        push   0x4DC;
	__asm        push   0x5B9C1C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T16cc:
	__asm        mov    cYObject::PrimProcs[35], 0x552710;
// LINE 1245:
	__asm        jmp    _T16f7;

	__asm        push   0x8C085;
	__asm        push   0x5B9C40;
	__asm        push   0x4DD;
	__asm        push   0x5B9C78;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T16f7:
	__asm        mov    cYObject::PrimProcs[36], 0x552730;
// LINE 1246:
	__asm        jmp    _T1722;

	__asm        push   0x8C085;
	__asm        push   0x5B9C9C;
	__asm        push   0x4DE;
	__asm        push   0x5B9CD4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1722:
	__asm        mov    cYObject::PrimProcs[37], 0x552750;
// LINE 1247:
	__asm        jmp    _T174d;

	__asm        push   0x8C085;
	__asm        push   0x5B9CF8;
	__asm        push   0x4DF;
	__asm        push   0x5B9D30;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T174d:
	__asm        mov    cYObject::PrimProcs[38], 0x552770;
// LINE 1248:
	__asm        jmp    _T1778;

	__asm        push   0x8C085;
	__asm        push   0x5B9D54;
	__asm        push   0x4E0;
	__asm        push   0x5B9D8C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1778:
	__asm        mov    cYObject::PrimProcs[39], 0x552790;
// LINE 1249:
	__asm        jmp    _T17a3;

	__asm        push   0x8C085;
	__asm        push   0x5B9DB0;
	__asm        push   0x4E1;
	__asm        push   0x5B9DE8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T17a3:
	__asm        mov    cYObject::PrimProcs[40], 0x5527B0;
// LINE 1251:
	__asm        jmp    _T17ce;

	__asm        push   0x8C085;
	__asm        push   0x5B9E0C;
	__asm        push   0x4E3;
	__asm        push   0x5B9E44;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T17ce:
	__asm        mov    cYObject::PrimProcs[42], 0x5527D0;
// LINE 1252:
	__asm        jmp    _T17f9;

	__asm        push   0x8C085;
	__asm        push   0x5B9E68;
	__asm        push   0x4E4;
	__asm        push   0x5B9EA0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T17f9:
	__asm        mov    cYObject::PrimProcs[43], 0x5527F0;
// LINE 1253:
	__asm        jmp    _T1824;

	__asm        push   0x8C085;
	__asm        push   0x5B9EC4;
	__asm        push   0x4E5;
	__asm        push   0x5B9EFC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1824:
	__asm        mov    cYObject::PrimProcs[44], 0x552810;
// LINE 1254:
	__asm        jmp    _T184f;

	__asm        push   0x8C085;
	__asm        push   0x5B9F20;
	__asm        push   0x4E6;
	__asm        push   0x5B9F58;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T184f:
	__asm        mov    cYObject::PrimProcs[45], 0x552830;
// LINE 1255:
	__asm        jmp    _T187a;

	__asm        push   0x8C085;
	__asm        push   0x5B9F7C;
	__asm        push   0x4E7;
	__asm        push   0x5B9FB4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T187a:
	__asm        mov    cYObject::PrimProcs[46], 0x552850;
// LINE 1256:
	__asm        jmp    _T18a5;

	__asm        push   0x8C085;
	__asm        push   0x5B9FD8;
	__asm        push   0x4E8;
	__asm        push   0x5BA010;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T18a5:
	__asm        mov    cYObject::PrimProcs[47], 0x552870;
// LINE 1257:
	__asm        jmp    _T18d0;

	__asm        push   0x8C085;
	__asm        push   0x5BA034;
	__asm        push   0x4E9;
	__asm        push   0x5BA06C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T18d0:
	__asm        mov    cYObject::PrimProcs[48], 0x552890;
// LINE 1258:
	__asm        jmp    _T18fb;

	__asm        push   0x8C085;
	__asm        push   0x5BA090;
	__asm        push   0x4EA;
	__asm        push   0x5BA0C8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T18fb:
	__asm        mov    cYObject::PrimProcs[49], 0x5528B0;
// LINE 1259:
	__asm        jmp    _T1926;

	__asm        push   0x8C085;
	__asm        push   0x5BA0EC;
	__asm        push   0x4EB;
	__asm        push   0x5BA124;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1926:
	__asm        mov    cYObject::PrimProcs[50], 0x5528D0;
// LINE 1260:
	__asm        jmp    _T1951;

	__asm        push   0x8C085;
	__asm        push   0x5BA148;
	__asm        push   0x4EC;
	__asm        push   0x5BA180;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1951:
	__asm        mov    cYObject::PrimProcs[51], 0x5528F0;
// LINE 1261:
	__asm        jmp    _T197c;

	__asm        push   0x8C085;
	__asm        push   0x5BA1A4;
	__asm        push   0x4ED;
	__asm        push   0x5BA1DC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T197c:
	__asm        mov    cYObject::PrimProcs[52], 0x552910;
// LINE 1262:
	__asm        jmp    _T19a7;

	__asm        push   0x8C085;
	__asm        push   0x5BA200;
	__asm        push   0x4EE;
	__asm        push   0x5BA238;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T19a7:
	__asm        mov    cYObject::PrimProcs[53], 0x552930;
// LINE 1263:
	__asm        jmp    _T19d2;

	__asm        push   0x8C085;
	__asm        push   0x5BA25C;
	__asm        push   0x4EF;
	__asm        push   0x5BA294;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T19d2:
	__asm        mov    cYObject::PrimProcs[54], 0x552950;
// LINE 1264:
	__asm        jmp    _T19fd;

	__asm        push   0x8C085;
	__asm        push   0x5BA2B8;
	__asm        push   0x4F0;
	__asm        push   0x5BA2F0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T19fd:
	__asm        mov    cYObject::PrimProcs[55], 0x552970;
// LINE 1265:
	__asm        jmp    _T1a28;

	__asm        push   0x8C085;
	__asm        push   0x5BA314;
	__asm        push   0x4F1;
	__asm        push   0x5BA34C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1a28:
	__asm        mov    cYObject::PrimProcs[56], 0x552990;
// LINE 1266:
	__asm        jmp    _T1a53;

	__asm        push   0x8C085;
	__asm        push   0x5BA370;
	__asm        push   0x4F2;
	__asm        push   0x5BA3A8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1a53:
	__asm        mov    cYObject::PrimProcs[57], 0x5529B0;
// LINE 1267:
	__asm        jmp    _T1a7e;

	__asm        push   0x8C085;
	__asm        push   0x5BA3CC;
	__asm        push   0x4F3;
	__asm        push   0x5BA404;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1a7e:
	__asm        mov    cYObject::PrimProcs[58], 0x5529D0;
// LINE 1268:
	__asm        jmp    _T1aa9;

	__asm        push   0x8C085;
	__asm        push   0x5BA428;
	__asm        push   0x4F4;
	__asm        push   0x5BA460;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1aa9:
	__asm        mov    cYObject::PrimProcs[59], 0x5529F0;
// LINE 1269:
	__asm        jmp    _T1ad4;

	__asm        push   0x8C085;
	__asm        push   0x5BA484;
	__asm        push   0x4F5;
	__asm        push   0x5BA4BC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1ad4:
	__asm        mov    cYObject::PrimProcs[60], 0x552A10;
// LINE 1270:
	__asm        jmp    _T1aff;

	__asm        push   0x8C085;
	__asm        push   0x5BA4E0;
	__asm        push   0x4F6;
	__asm        push   0x5BA518;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1aff:
	__asm        mov    cYObject::PrimProcs[61], 0x552A30;
// LINE 1271:
	__asm        jmp    _T1b2a;

	__asm        push   0x8C085;
	__asm        push   0x5BA53C;
	__asm        push   0x4F7;
	__asm        push   0x5BA574;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1b2a:
	__asm        mov    cYObject::PrimProcs[62], 0x552A50;
// LINE 1272:
	__asm        jmp    _T1b55;

	__asm        push   0x8C085;
	__asm        push   0x5BA598;
	__asm        push   0x4F8;
	__asm        push   0x5BA5D0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1b55:
	__asm        mov    cYObject::PrimProcs[63], 0x552A70;
// LINE 1275:
// Block end:
_T1b5f:
	__asm        jmp    _T1b88;
_L55489:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L55486:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L55485:
	__asm        mov    eax, 0x595DD0;
	__asm        jmp    near ptr 0x0056F590;
_T1b88:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x00549bdd
unsigned short cYObject::BeamIntoCameraRange() {
	unsigned short foundcell;
	unsigned short stop_now;
	int32_t offsetz;
	int32_t curr_dir;
	int32_t i;
	int32_t y;
	int32_t x;
	int32_t offsetx;
	struct Point3d vec;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 1283:
	__asm        mov    curr_dist, 0;
// LINE 1284:
	__asm        mov    curr_dir, 0xFFFFFFFF;
// LINE 1286:
	__asm        mov    stop_now, 0;
// LINE 1287:
	__asm        mov    spiral_dist, 7;
// LINE 1288:
	__asm        mov    foundcell, 0;
// LINE 1291:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, vec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1295:
	__asm        call   rand;
	__asm        movsx  ecx, gPersonBeamingForwardWeight;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x44], edx;
	__asm        jmp    _T133;
// LINE 1299:
_T62:
	__asm        mov    eax, vec.z;
	__asm        mov    vec.y, eax;
// LINE 1300:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1301:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1303:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1304:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1305:
	__asm        jmp    _T156;
// LINE 1308:
_T9c:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.y, eax;
// LINE 1309:
	__asm        mov    eax, vec.x;
	__asm        mov    vec.z, eax;
// LINE 1310:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1312:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1313:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1314:
	__asm        jmp    _T156;
// LINE 1317:
_Td6:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.x, eax;
// LINE 1318:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1320:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 2;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1321:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 2;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 1322:
	__asm        jmp    _T156;
// LINE 1326:
_T109:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1327:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 1328:
	__asm        jmp    _T156;
// LINE 1329:
	__asm        jmp    _T156;
_T133:
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T62;

	__asm        cmp    dword ptr [ebp-0x44], 1;
	__asm        je     _T9c;

	__asm        cmp    dword ptr [ebp-0x44], 2;
	__asm        je     _Td6;

	__asm        jmp    _T109;
// LINE 1331:
_T156:
	__asm        shl    vec.x, 6;
// LINE 1332:
	__asm        shl    vec.z, 6;
// LINE 1334:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        add    eax, vec.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 1335:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, ViewState.world_pos.z;
	__asm        add    ecx, vec.z;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 1342:
_T187:
	__asm        inc    curr_dir;
// LINE 1343:
	__asm        mov    eax, curr_dir;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T1f3;
// LINE 1347:
	__asm        mov    curr_dir, 0;
// LINE 1348:
	__asm        inc    curr_dist;
// LINE 1349:
	__asm        mov    xdir, 0;
// LINE 1350:
	__asm        mov    ydir, 0xFFFFFFFF;
// LINE 1351:
	__asm        jmp    _T21b;
// LINE 1353:
	__asm        mov    xdir, 1;
// LINE 1354:
	__asm        mov    ydir, 0;
// LINE 1355:
	__asm        jmp    _T21b;
// LINE 1357:
	__asm        inc    curr_dist;
// LINE 1358:
	__asm        mov    xdir, 0;
// LINE 1359:
	__asm        mov    ydir, 1;
// LINE 1360:
	__asm        jmp    _T21b;
// LINE 1362:
	__asm        mov    xdir, 0xFFFFFFFF;
// LINE 1363:
	__asm        mov    ydir, 0;
// LINE 1364:
	__asm        jmp    _T21b;
// LINE 1365:
	__asm        jmp    _T21b;
_T1f3:
	__asm        cmp    dword ptr [ebp-0x48], 4;
	__asm        ja     _T21b;

	__asm        mov    eax, [ebp-0x48];
	__asm        jmp    SwitchPointers5545444[0][eax*4];
// Switch pointers
// LINE 1369:
_T21b:
	__asm        mov    eax, spiral_dist;
	__asm        cmp    curr_dist, eax;
	__asm        jne    _T230;
// LINE 1371:
	__asm        dec    curr_dist;
// LINE 1372:
	__asm        mov    stop_now, 1;
// LINE 1376:
_T230:
	__asm        mov    i, 0;
	__asm        jmp    _T23f;
_T23c:
	__asm        inc    i;
_T23f:
	__asm        mov    eax, i;
	__asm        cmp    curr_dist, eax;
	__asm        jle    _T2c9;
// LINE 1378:
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetNeutralLoc;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2b8;
// LINE 1381:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1391:
	__asm        movsx  eax, cYObject::sBeamed;
	__asm        add    eax, 6;
	__asm        mov    cYObject::sBeamed, ax;
// LINE 1392:
	__asm        movsx  eax, cYObject::sBeamed;
	__asm        cmp    eax, 0xC;
	__asm        jle    _T2af;
// LINE 1393:
	__asm        mov    cYObject::sBeamed, 0xC;
// LINE 1394:
_T2af:
	__asm        mov    ax, 1;
	__asm        jmp    _T322;
// LINE 1396:
_T2b8:
	__asm        mov    eax, xdir;
	__asm        add    x, eax;
// LINE 1397:
	__asm        mov    eax, ydir;
	__asm        add    y, eax;
// LINE 1398:
	__asm        jmp    _T23c;
// LINE 1400:
_T2c9:
	__asm        mov    eax, reinterpret_cast<uint32_t>(stop_now);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 1;
	__asm        jne    _T301;
// LINE 1402:
	__asm        dec    cYObject::sBeamed;
// LINE 1403:
	__asm        movsx  eax, cYObject::sBeamed;
	__asm        test   eax, eax;
	__asm        jge    _T2f9;
// LINE 1404:
	__asm        mov    cYObject::sBeamed, 0;
// LINE 1405:
_T2f9:
	__asm        xor    ax, ax;
	__asm        jmp    _T322;
// LINE 1407:
_T301:
	__asm        jmp    _T187;
// LINE 1408:
	__asm        push   0x8C085;
	__asm        push   0x5BA5F4;
	__asm        push   0x580;
	__asm        push   0x5BA60C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1409:
_T322:
}

// FUNCTION: COPTER_D 0x00549f04
unsigned short cYObject::OutOfCameraRange() {
// LINE 1414:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BA630;
	__asm        push   0x586;
	__asm        push   0x5BA664;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1418:
_T3a:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xFC];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Tce;
// LINE 1420:
	__asm        jmp    near ptr 0x00549F56;

	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, cYObject::sScurkRectRad;
	__asm        add    ecx, ecx;
	__asm        cmp    eax, ecx;
	__asm        jg     _Tb3;

	__asm        jmp    near ptr 0x00549F89;

	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, cYObject::sScurkRectRad;
	__asm        add    ecx, ecx;
	__asm        cmp    eax, ecx;
	__asm        jle    _Tc1;
// LINE 1421:
_Tb3:
	__asm        mov    ax, 1;
	__asm        jmp    _T2ca;
// LINE 1422:
	__asm        jmp    _Tc9;
// LINE 1423:
_Tc1:
	__asm        xor    ax, ax;
	__asm        jmp    _T2ca;
// LINE 1425:
_Tc9:
	__asm        jmp    _T2ca;
// LINE 1426:
// Block start:
	short deltaY;
	short deltaX;
	int32_t xtoview;
	long debug1;
	struct Point3d viewvec;
	int32_t ztoview;
	unsigned short behindView;
	long debug2;
_Tce:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        mov    deltaX, ax;
// LINE 1427:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        mov    deltaY, ax;
// LINE 1429:
_Tfa:
	__asm        movsx  eax, deltaX;
	__asm        cmp    eax, 0x80;
	__asm        jle    _T11b;
// LINE 1430:
	__asm        movsx  eax, deltaX;
	__asm        sub    eax, 0x100;
	__asm        mov    deltaX, ax;
	__asm        jmp    _Tfa;
// LINE 1431:
_T11b:
	__asm        movsx  eax, deltaX;
	__asm        cmp    eax, 0xFFFFFF80;
	__asm        jge    _T13a;
// LINE 1432:
	__asm        movsx  eax, deltaX;
	__asm        add    eax, 0x100;
	__asm        mov    deltaX, ax;
	__asm        jmp    _T11b;
// LINE 1434:
_T13a:
	__asm        movsx  eax, deltaY;
	__asm        cmp    eax, 0x80;
	__asm        jle    _T15b;
// LINE 1435:
	__asm        movsx  eax, deltaY;
	__asm        sub    eax, 0x100;
	__asm        mov    deltaY, ax;
	__asm        jmp    _T13a;
// LINE 1436:
_T15b:
	__asm        movsx  eax, deltaY;
	__asm        cmp    eax, 0xFFFFFF80;
	__asm        jge    _T17a;
// LINE 1437:
	__asm        movsx  eax, deltaY;
	__asm        add    eax, 0x100;
	__asm        mov    deltaY, ax;
	__asm        jmp    _T15b;
// LINE 1439:
_T17a:
	__asm        movsx  eax, deltaY;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x0054A090;

	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        movsx  eax, deltaX;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x30], ax;
	__asm        jmp    near ptr 0x0054A0A8;

	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jl     _T1c9;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T1cf;
_T1c9:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
_T1cf:
	__asm        jmp    near ptr 0x0054A0D8;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ax, [eax];
	__asm        mov    deltaX, ax;
// LINE 1442:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, viewvec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1443:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    eax, ViewState.world_pos.x;
	__asm        mov    xtoview, eax;
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        sub    eax, ViewState.world_pos.x;
	__asm        mov    ztoview, eax;
// LINE 1445:
	__asm        mov    behindView, 0;
// LINE 1447:
	__asm        cmp    xtoview, 0;
	__asm        jge    _T231;

	__asm        cmp    viewvec.x, 0;
	__asm        jg     _T245;
_T231:
	__asm        cmp    xtoview, 0;
	__asm        jle    _T273;

	__asm        cmp    viewvec.x, 0;
	__asm        jge    _T273;
_T245:
	__asm        cmp    ztoview, 0;
	__asm        jge    _T259;

	__asm        cmp    viewvec.z, 0;
	__asm        jg     _T26d;
_T259:
	__asm        cmp    ztoview, 0;
	__asm        jle    _T273;

	__asm        cmp    viewvec.z, 0;
	__asm        jge    _T273;
// LINE 1448:
_T26d:
	__asm        mov    behindView, 1;
// LINE 1449:
_T273:
	__asm        test   reinterpret_cast<uint32_t>(behindView), 0xFFFF;
	__asm        je     _T28a;
// LINE 1450:
	__asm        movsx  eax, deltaX;
	__asm        add    eax, eax;
	__asm        mov    deltaX, ax;
// LINE 1453:
_T28a:
	__asm        mov    eax, G_ViewSize;
	__asm        mov    debug1, eax;
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 2;
	__asm        mov    debug2, eax;
// LINE 1454:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        movsx  ecx, deltaX;
	__asm        cmp    eax, ecx;
	__asm        jge    _T2c2;
// LINE 1455:
	__asm        mov    ax, 1;
	__asm        jmp    _T2ca;
// LINE 1456:
	__asm        jmp    _T2ca;
// LINE 1457:
_T2c2:
	__asm        xor    ax, ax;
	__asm        jmp    _T2ca;
// LINE 1459:
// Block end:
_T2ca:
}

// FUNCTION: COPTER_D 0x0054a1d3
short StartPerson(enum PersonType persontype, enum MissionType mission, short cellx, short celly, long missionid, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	short ret;
	class cYObject* newperson;

// LINE 1466:
	__asm        mov    ret, 0xFFFF;
// LINE 1467:
	__asm        call   cYObject::GetSleepingPerson;
	__asm        mov    newperson, eax;
// LINE 1470:
	__asm        cmp    newperson, 0;
	__asm        je     _T5e;

	__asm        mov    eax, loc;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   cYObject::StartMission;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T5e;
// LINE 1471:
	__asm        mov    eax, newperson;
	__asm        mov    ax, [eax+0xBC];
	__asm        mov    ret, ax;
// LINE 1472:
_T5e:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054A23A;
// LINE 1473:
}

// FUNCTION: COPTER_D 0x0054a23f
void LiberateMissionPeople(long missionid) {
	short count;

// LINE 1477:
	__asm        mov    count, 0;
	__asm        jmp    _T18;
_T14:
	__asm        inc    count;
_T18:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T111;
// LINE 1478:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T41;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tbd;
_T41:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T5a;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T76;
_T5a:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T76:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Ta4;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta4:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tbd;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 1479:
_Tbd:
	__asm        cmp    obj, 0;
	__asm        jne    _Te3;

	__asm        push   0x8C085;
	__asm        push   0x5BA688;
	__asm        push   0x5C7;
	__asm        push   0x5BA690;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1480:
_Te3:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T10c;

	__asm        mov    eax, obj;
	__asm        mov    ecx, missionid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    _T10c;
// LINE 1481:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::ResetToAmbient;
// LINE 1483:
// Block end:
_T10c:
	__asm        jmp    _T14;
// LINE 1484:
_T111:
	__asm        jmp    near ptr 0x0054A355;
}

// FUNCTION: COPTER_D 0x0054a35a
void KillMissionPeople(long missionid) {
	struct _MISSION_PARMS mp;
	short count;

// LINE 1493:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1494:
	__asm        mov    mp.flags, 0;
// LINE 1495:
	__asm        mov    mp.i2num, 1;
// LINE 1496:
	__asm        mov    mp.op, 0x17;
// LINE 1499:
	__asm        mov    count, 0;
	__asm        jmp    _T33;
_T2f:
	__asm        inc    count;
_T33:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T240;
// LINE 1500:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T5c;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Td8;
_T5c:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T75;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T91;
_T75:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T91:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tbf;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbf:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Td8;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    obj, eax;
// LINE 1501:
_Td8:
	__asm        cmp    obj, 0;
	__asm        jne    _Tfe;

	__asm        push   0x8C085;
	__asm        push   0x5BA6B4;
	__asm        push   0x5DD;
	__asm        push   0x5BA6BC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1502:
_Tfe:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T23b;

	__asm        mov    eax, obj;
	__asm        mov    ecx, missionid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    _T23b;
// LINE 1503:
// Block start:
	unsigned short die;
	__asm        mov    die, 0;
// LINE 1504:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T1ca;
// LINE 1506:
_T137:
	__asm        push   0x8C085;
	__asm        push   0x5BA6E0;
	__asm        push   0x5E2;
	__asm        push   0x5BA714;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1507:
	__asm        jmp    _T1e3;
// LINE 1515:
_T158:
	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T1a4;

	__asm        mov    eax, obj;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T1a4;

	__asm        mov    eax, obj;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T1a4;
// LINE 1516:
	__asm        mov    die, 1;
// LINE 1517:
_T1a4:
	__asm        jmp    _T1e3;
// LINE 1519:
_T1a9:
	__asm        push   0x8C085;
	__asm        push   0x5BA738;
	__asm        push   0x5EF;
	__asm        push   0x5BA764;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1520:
	__asm        jmp    _T1e3;
_T1ca:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T137;

	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        je     _T158;

	__asm        jmp    _T1a9;
// LINE 1521:
_T1e3:
	__asm        test   reinterpret_cast<uint32_t>(die), 0xFFFF;
	__asm        je     _T23b;
// LINE 1523:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetMaster;
// LINE 1524:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x0054A581;
// LINE 1525:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Die;
// LINE 1526:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1529:
// Block end:
// Block end:
_T23b:
	__asm        jmp    _T2f;
// LINE 1530:
_T240:
	__asm        jmp    near ptr 0x0054A59F;
}

// FUNCTION: COPTER_D 0x0054a5a4
void cYObject::SetPersonData(enum PersonType persontype, enum MissionType mission, long missionid) {
// LINE 1534:
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
// LINE 1535:
	__asm        mov    eax, missionid;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    _T7f;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T7f;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T7f;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T7f;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7f:
	__asm        jmp    near ptr 0x0054A628;
// LINE 1536:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 1537:
	__asm        jmp    near ptr 0x0054A639;
}

// FUNCTION: COPTER_D 0x0054a640
unsigned short cYObject::IsSuitableForMission(enum MissionType mission, short cellx, short celly) {
	unsigned short ret;

// LINE 1541:
	__asm        mov    ret, 0;
// LINE 1542:
	__asm        cmp    mission, 0;
	__asm        jne    _T24;

	__asm        mov    ret, 1;
// LINE 1543:
	__asm        jmp    _T157;
// LINE 1544:
// Block start:
	short scurkID;
_T24:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T56;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T56;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T56;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T61;
_T56:
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    _Tbd;
_T61:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x18], ax;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     _T94;

	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tb0;
_T94:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb0:
	__asm        mov    ax, [ebp-0x18];
	__asm        mov    scurkID, ax;
	__asm        jmp    _Tbd;
// LINE 1545:
_Tbd:
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T157;
// LINE 1546:
// Block start:
	struct _LZ_INFO* li;
	__asm        movsx  eax, scurkID;
	__asm        push   eax;
	__asm        call   S3ObjGetLandingZone;
	__asm        add    esp, 4;
	__asm        mov    li, eax;
// LINE 1547:
	__asm        cmp    li, 0;
	__asm        je     _Tf0;

	__asm        mov    eax, li;
	__asm        test   byte ptr [eax], 1;
	__asm        je     _Tfb;
// LINE 1548:
_Tf0:
	__asm        mov    ret, 0;
// LINE 1549:
	__asm        jmp    _T157;
// LINE 1550:
// Block start:
	short count;
	enum cYObject::LocationType loctype;
_Tfb:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1551:
	__asm        mov    count, 0;
	__asm        jmp    _T11d;
_T119:
	__asm        inc    count;
_T11d:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T157;
// LINE 1552:
	__asm        movsx  eax, count;
	__asm        mov    ecx, mission;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        mov    edx, loctype;
	__asm        cmp    cYObject::sNeutralMissionLocs[0][0][ecx+eax*4], edx;
	__asm        jne    _T152;
// LINE 1553:
	__asm        mov    ret, 1;
// LINE 1554:
	__asm        jmp    _T157;
// LINE 1556:
_T152:
	__asm        jmp    _T119;
// LINE 1560:
// Block end:
// Block end:
// Block end:
_T157:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054A7A0;
// LINE 1561:
}

// FUNCTION: COPTER_D 0x0054a7a5
unsigned short cYObject::StartMission(enum PersonType persontype, enum MissionType mission, short cellx, short celly, long missionid, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	short ret;

// LINE 1571:
	__asm        cmp    mission, 0;
	__asm        je     _T52;
// LINE 1572:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T36;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T52;
_T36:
	__asm        push   0x8C085;
	__asm        push   0x5BA788;
	__asm        push   0x624;
	__asm        push   0x5BA7B0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1574:
_T52:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T83;

	__asm        push   0x8C085;
	__asm        push   0x5BA7D4;
	__asm        push   0x626;
	__asm        push   0x5BA808;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1575:
_T83:
	__asm        jmp    near ptr 0x0054A82D;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _Tb8;

	__asm        push   0x8C085;
	__asm        push   0x5BA82C;
	__asm        push   0x627;
	__asm        push   0x5BA858;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1576:
_Tb8:
	__asm        mov    ret, 0xFFFF;
// LINE 1577:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Ted;

	__asm        push   0x8C085;
	__asm        push   0x5BA87C;
	__asm        push   0x629;
	__asm        push   0x5BA890;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1578:
_Ted:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T1b1;
// LINE 1579:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T12f;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T12f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T15b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T1ac;
_T15b:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T1ac;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1ac:
	__asm        jmp    _T1b1;
// LINE 1580:
_T1b1:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
// LINE 1581:
	__asm        mov    eax, mission;
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    _Td60;
// LINE 1583:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	unsigned short foundplace;
	short count;
	__asm        cmp    loc, 0;
	__asm        jne    _T1e2;

	__asm        cmp    onTopOf, 0;
	__asm        je     _T1fe;
_T1e2:
	__asm        push   0x8C085;
	__asm        push   0x5BA8B4;
	__asm        push   0x62F;
	__asm        push   0x5BA8C8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1585:
_T1fe:
	__asm        mov    foundplace, 0;
// LINE 1586:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 7;
// LINE 1587:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 5;
	__asm        jle    _T249;

	__asm        push   0x20000;
	__asm        push   0x50000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    _T256;
_T249:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
_T256:
	__asm        jmp    near ptr 0x0054AA00;
// LINE 1588:
	__asm        mov    count, 0;
	__asm        jmp    _T26a;
_T266:
	__asm        inc    count;
_T26a:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jge    _T300;
// LINE 1589:
// Block start:
	enum cYObject::LocationType loctype;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1591:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   cYObject::IsSuitableForMission;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2fb;

	__asm        mov    eax, loctype;
	__asm        mov    eax, cYObject::sLocInfo[0].searchType[eax*8];
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2fb;
// LINE 1592:
	__asm        mov    foundplace, 1;
// LINE 1593:
	__asm        jmp    _T300;
// LINE 1595:
// Block end:
_T2fb:
	__asm        jmp    _T266;
// LINE 1596:
_T300:
	__asm        test   reinterpret_cast<uint32_t>(foundplace), 0xFFFF;
	__asm        je     _T39e;
// LINE 1597:
// Block start:
	long testID;
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1598:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   cYObject::JoinRiot;
	__asm        mov    testID, eax;
// LINE 1600:
	__asm        cmp    testID, 0xFFFFFFFF;
	__asm        jne    _T36b;

	__asm        push   0x8C085;
	__asm        push   0x5BA8EC;
	__asm        push   0x640;
	__asm        push   0x5BA910;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1601:
_T36b:
	__asm        mov    eax, testID;
	__asm        cmp    missionid, eax;
	__asm        je     _T393;

	__asm        push   0x8C085;
	__asm        push   0x5BA934;
	__asm        push   0x641;
	__asm        push   0x5BA978;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1602:
_T393:
	__asm        mov    ret, 1;
// LINE 1604:
// Block end:
	__asm        jmp    _T3a4;
// LINE 1605:
_T39e:
	__asm        mov    ret, 0;
// LINE 1606:
_T3a4:
	__asm        jmp    _Td96;
// LINE 1609:
// Block end:
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
// LINE 1610:
	__asm        mov    eax, missionid;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    _T42b;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T42b;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T42b;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T42b;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T42b:
	__asm        jmp    near ptr 0x0054ABD5;
// LINE 1611:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 1612:
	__asm        cmp    loc, 0;
	__asm        je     _T486;
// LINE 1613:
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
// LINE 1614:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1615:
	__asm        mov    ret, 1;
// LINE 1617:
	__asm        jmp    _T50b;
// LINE 1622:
_T486:
	__asm        movsx  eax, cYObject::sAmbientTopOff;
	__asm        movsx  ecx, cYObject::sNumAmbientAwake;
	__asm        cmp    eax, ecx;
	__asm        jle    _T505;

	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, cYObject::sBeamed;
	__asm        sub    eax, ecx;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 3;
	__asm        jge    _T4ca;

	__asm        jmp    _T4e4;

	__asm        jmp    _T4d4;
_T4ca:
	__asm        jmp    _T505;

	__asm        jmp    _T4e4;
_T4d4:
	__asm        test   dword ptr [ebp-0x84], 0xFFFF;
	__asm        je     _T505;
_T4e4:
	__asm        mov    ecx, this;
	__asm        call   cYObject::BeamIntoCameraRange;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T505;
// LINE 1623:
	__asm        mov    ret, 1;
// LINE 1624:
	__asm        jmp    _T50b;
// LINE 1625:
_T505:
	__asm        mov    ret, 0;
// LINE 1628:
_T50b:
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        je     _T531;

	__asm        push   0x8C085;
	__asm        push   0x5BA99C;
	__asm        push   0x65C;
	__asm        push   0x5BA9CC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1629:
_T531:
	__asm        jmp    _Td96;
// LINE 1632:
	__asm        cmp    loc, 0;
	__asm        jne    _T55c;

	__asm        push   0x8C085;
	__asm        push   0x5BA9F0;
	__asm        push   0x660;
	__asm        push   0x5BAA0C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1634:
_T55c:
	__asm        mov    ret, 0;
// LINE 1635:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        jne    _T629;
// LINE 1637:
	__asm        cmp    onTopOf, 0;
	__asm        je     _T5d5;

	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _T5d5;

	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    _T5e9;

	__asm        jmp    _T5e9;
_T5d5:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    _T5e9;
// LINE 1638:
_T5e9:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1639:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1640:
	__asm        mov    ret, 1;
// LINE 1642:
_T629:
	__asm        jmp    _Td96;
// LINE 1646:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	short count;
	__asm        cmp    loc, 0;
	__asm        jne    _T642;

	__asm        cmp    onTopOf, 0;
	__asm        je     _T65e;
_T642:
	__asm        push   0x8C085;
	__asm        push   0x5BAA30;
	__asm        push   0x66E;
	__asm        push   0x5BAA74;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1648:
_T65e:
	__asm        mov    ret, 0;
// LINE 1649:
	__asm        mov    count, 0;
	__asm        jmp    _T673;
_T66f:
	__asm        inc    count;
_T673:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jge    _T925;
// LINE 1650:
// Block start:
	enum cYObject::LocationType loctype;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1653:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   cYObject::IsSuitableForMission;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T8fd;

	__asm        mov    eax, loctype;
	__asm        mov    eax, cYObject::sLocInfo[0].searchType[eax*8];
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T8fd;
// LINE 1656:
// Block start:
	unsigned short founddest;
	struct _MISSION_PARMS mp;
	short destcellx;
	short destcelly;
	__asm        mov    destcellx, 0xFFFF;
// LINE 1657:
	__asm        mov    destcelly, 0xFFFF;
// LINE 1658:
	__asm        mov    founddest, 0;
// LINE 1659:
	__asm        cmp    mission, 4;
	__asm        jne    _T821;
// LINE 1660:
// Block start:
	short cnt;
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        call   S3MissionGetMapLoc;
	__asm        add    esp, 4;
	__asm        mov    eax, [eax];
	__asm        mov    destcellx, ax;
// LINE 1661:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        call   S3MissionGetMapLoc;
	__asm        add    esp, 4;
	__asm        mov    eax, [eax+4];
	__asm        mov    destcelly, ax;
// LINE 1662:
	__asm        mov    cnt, 0;
	__asm        jmp    _T749;
_T745:
	__asm        inc    cnt;
_T749:
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0xA;
	__asm        jge    _T81c;
// LINE 1663:
// Block start:
	enum cYObject::LocationType loctype2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcellx);
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype2, eax;
// LINE 1665:
	__asm        jmp    near ptr 0x0054AF13;

	__asm        jmp    near ptr 0x0054AF18;

	__asm        movsx  eax, destcelly;
	__asm        movsx  ecx, celly;
	__asm        sub    eax, ecx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  ecx, ax;
	__asm        movsx  eax, destcellx;
	__asm        movsx  edx, cellx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        add    ecx, eax;
	__asm        cmp    ecx, 0x10;
	__asm        jle    _T7d7;

	__asm        mov    eax, reinterpret_cast<uint32_t>(destcelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   cYObject::IsSuitableForMission;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T7d7;
// LINE 1666:
	__asm        mov    founddest, 1;
// LINE 1667:
	__asm        jmp    _T81c;
// LINE 1669:
	__asm        jmp    _T817;
// LINE 1670:
_T7d7:
	__asm        movsx  eax, count;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 1;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    _T7f6;
// LINE 1671:
	__asm        dec    destcellx;
// LINE 1672:
	__asm        jmp    _T7fa;
// LINE 1673:
_T7f6:
	__asm        dec    destcelly;
// LINE 1674:
_T7fa:
	__asm        movsx  eax, destcellx;
	__asm        test   eax, eax;
	__asm        jl     _T812;

	__asm        movsx  eax, destcelly;
	__asm        test   eax, eax;
	__asm        jge    _T817;
_T812:
	__asm        jmp    _T81c;
// LINE 1676:
// Block end:
_T817:
	__asm        jmp    _T745;
// LINE 1678:
// Block end:
_T81c:
	__asm        jmp    _T827;
// LINE 1694:
_T821:
	__asm        mov    founddest, 1;
// LINE 1697:
_T827:
	__asm        test   reinterpret_cast<uint32_t>(founddest), 0xFFFF;
	__asm        jne    _T839;

	__asm        jmp    _T925;
// LINE 1700:
_T839:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1701:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1704:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1705:
	__asm        cmp    mission, 4;
	__asm        jne    _T887;
// LINE 1706:
	__asm        mov    mp.op, 0x1E;
// LINE 1707:
	__asm        jmp    _T88e;
// LINE 1708:
_T887:
	__asm        mov    mp.op, 0;
// LINE 1709:
_T88e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1710:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1711:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1714:
	__asm        cmp    mission, 4;
	__asm        jne    _T8ed;
// LINE 1716:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1717:
	__asm        mov    mp.op, 0;
// LINE 1718:
	__asm        movsx  eax, destcellx;
	__asm        mov    mp.maploc.x, eax;
// LINE 1719:
	__asm        movsx  eax, destcelly;
	__asm        mov    mp.maploc.y, eax;
// LINE 1720:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1724:
_T8ed:
	__asm        mov    ret, 1;
// LINE 1725:
	__asm        jmp    _T925;
// LINE 1727:
// Block end:
	__asm        jmp    _T920;
// LINE 1728:
_T8fd:
	__asm        movsx  eax, count;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 1;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    _T91c;
// LINE 1729:
	__asm        inc    cellx;
// LINE 1730:
	__asm        jmp    _T920;
// LINE 1731:
_T91c:
	__asm        inc    celly;
// LINE 1733:
// Block end:
_T920:
	__asm        jmp    _T66f;
// LINE 1734:
_T925:
	__asm        jmp    _Td96;
// LINE 1737:
// Block end:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	__asm        mov    ret, 0;
// LINE 1738:
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        jne    _T974;

	__asm        push   0x8C085;
	__asm        push   0x5BAA98;
	__asm        push   0x6CA;
	__asm        push   0x5BAAC0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1739:
_T974:
	__asm        cmp    loc, 0;
	__asm        je     _T99a;

	__asm        push   0x8C085;
	__asm        push   0x5BAAE4;
	__asm        push   0x6CB;
	__asm        push   0x5BAB2C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1740:
_T99a:
	__asm        cmp    onTopOf, 0;
	__asm        je     _T9c0;

	__asm        push   0x8C085;
	__asm        push   0x5BAB50;
	__asm        push   0x6CC;
	__asm        push   0x5BAB74;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1742:
_T9c0:
	__asm        push   2;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Ta36;
// LINE 1743:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1744:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1745:
	__asm        mov    ret, 1;
// LINE 1747:
_Ta36:
	__asm        jmp    _Td96;
// LINE 1750:
// Block end:
// Block start:
	int32_t mycelly;
	int32_t mycellx;
	struct Point3d pos;
	__asm        mov    ret, 0;
// LINE 1751:
	__asm        cmp    loc, 0;
	__asm        jne    _Ta55;

	__asm        cmp    onTopOf, 0;
	__asm        jne    _Ta71;
_Ta55:
	__asm        push   0x8C085;
	__asm        push   0x5BAB98;
	__asm        push   0x6D7;
	__asm        push   0x5BABA4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1753:
_Ta71:
	__asm        mov    eax, onTopOf;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    mycellx, eax;
// LINE 1754:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, onTopOf;
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    mycelly, eax;
// LINE 1755:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, mycellx;
	__asm        jne    _Taad;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, mycelly;
	__asm        je     _Tac9;
_Taad:
	__asm        push   0x8C085;
	__asm        push   0x5BABC8;
	__asm        push   0x6DB;
	__asm        push   0x5BAC1C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1758:
_Tac9:
	__asm        lea    eax, pos.x;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Tbb4;
// LINE 1759:
// Block start:
	unsigned short setmaster;
	__asm        jmp    near ptr 0x0054B291;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _Tb1c;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb1c:
	__asm        mov    al, reinterpret_cast<uint8_t>(cellx);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, reinterpret_cast<uint8_t>(celly);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054B2E4;
// LINE 1760:
	__asm        lea    eax, pos.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1761:
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
	__asm        mov    setmaster, ax;
// LINE 1762:
	__asm        test   reinterpret_cast<uint32_t>(setmaster), 0xFFFF;
	__asm        jne    _Tb97;

	__asm        push   0x8C085;
	__asm        push   0x5BAC40;
	__asm        push   0x6E2;
	__asm        push   0x5BAC60;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1763:
_Tb97:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1764:
	__asm        mov    ret, 1;
// LINE 1767:
// Block end:
_Tbb4:
	__asm        jmp    _Td96;
// LINE 1771:
// Block end:
_Tbb9:
	__asm        mov    ret, 0;
// LINE 1772:
	__asm        cmp    loc, 0;
	__asm        je     _Tc95;
// LINE 1773:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        jne    _Tc90;
// LINE 1775:
	__asm        cmp    onTopOf, 0;
	__asm        je     _Tc3c;

	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _Tc3c;

	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    _Tc50;

	__asm        jmp    _Tc50;
_Tc3c:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    _Tc50;
// LINE 1776:
_Tc50:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1777:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1778:
	__asm        mov    ret, 1;
// LINE 1781:
_Tc90:
	__asm        jmp    _Td56;
// LINE 1783:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
_Tc95:
	__asm        push   1;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Td56;
// LINE 1784:
	__asm        cmp    onTopOf, 0;
	__asm        je     _Td0a;

	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _Td0a;

	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    _Td1e;

	__asm        jmp    _Td1e;
_Td0a:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    _Td1e;
// LINE 1785:
_Td1e:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 1786:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonData;
// LINE 1787:
	__asm        mov    ret, 1;
// LINE 1790:
// Block end:
_Td56:
	__asm        jmp    _Td96;
// LINE 1792:
	__asm        jmp    _Td96;
_Td60:
	__asm        cmp    dword ptr [ebp-0xEC], 6;
	__asm        ja     _Tbb9;

	__asm        mov    eax, [ebp-0xEC];
	__asm        jmp    SwitchPointers5551391[0][eax*4];
// Switch pointers
// LINE 1793:
_Td96:
	__asm        movsx  eax, ret;
	__asm        test   eax, eax;
	__asm        je     _Tdcb;

	__asm        movsx  eax, ret;
	__asm        cmp    eax, 1;
	__asm        je     _Tdcb;

	__asm        push   0x8C085;
	__asm        push   0x5BAC84;
	__asm        push   0x701;
	__asm        push   0x5BAC94;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1794:
_Tdcb:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 1;
	__asm        jne    _T106b;
// LINE 1797:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x0054B5A8;
// LINE 1798:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _Te34;

	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te34:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x0054B604;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        jne    _Teb0;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _Tebe;
_Teb0:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_Tebe:
	__asm        jmp    near ptr 0x0054B668;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        movsx  ecx, cYObject::sNumMissionAwake;
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    _Tef8;

	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tef8:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Tf47;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Tf42;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf42:
	__asm        jmp    _Tf7a;
_Tf47:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Tf7a;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf7a:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Tf9b;

	__asm        jmp    _Tfcc;

	__asm        jmp    _Tf9b;
_Tf9b:
	__asm        jmp    _Tfb0;

	__asm        test   dword ptr [ebp-0xE4], 0xFFFF;
	__asm        jne    _Tfcc;
_Tfb0:
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tfcc:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x0054B781;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T100c;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T100c:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0xE0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054B80B;

	__asm        jmp    _T106b;
// LINE 1800:
_T106b:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054B819;
// LINE 1801:
}

// FUNCTION: COPTER_D 0x0054b820
void cYObject::ResetToAmbient() {
// LINE 1806:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BACB8;
	__asm        push   0x70E;
	__asm        push   0x5BACE8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1807:
_T3a:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T68;

	__asm        push   0x8C085;
	__asm        push   0x5BAD0C;
	__asm        push   0x70F;
	__asm        push   0x5BAD50;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1808:
_T68:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T96;

	__asm        push   0x8C085;
	__asm        push   0x5BBBF0;
	__asm        push   0x2C2;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T96:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    _Tc0;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _Tce;
_Tc0:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_Tce:
	__asm        jmp    near ptr 0x0054B8F3;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T147;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T147;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T147;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T147:
	__asm        jmp    near ptr 0x0054B96C;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T182;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T190;
_T182:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T190:
	__asm        jmp    near ptr 0x0054B9B5;

	__asm        jmp    near ptr 0x0054B9BA;
// LINE 1809:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x0054B9DC;
// LINE 1810:
	__asm        jmp    near ptr 0x0054B9E1;
}

// FUNCTION: COPTER_D 0x0054b9e6
long cYObject::JoinRiot() {
	long riotMissionID;

// LINE 1816:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        jg     _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BAD74;
	__asm        push   0x718;
	__asm        push   0x5BADA0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1818:
_T3a:
	__asm        push   0x1000;
	__asm        call   S3MissionGetByType;
	__asm        add    esp, 4;
	__asm        movsx  eax, ax;
	__asm        mov    riotMissionID, eax;
// LINE 1819:
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        je     _T249;
// LINE 1823:
// Block start:
	unsigned short conked;
	struct _MISSION_PARMS mp;
	__asm        mov    eax, riotMissionID;
	__asm        mov    mp.id, eax;
// LINE 1824:
	__asm        mov    mp.op, 0xB;
// LINE 1825:
	__asm        mov    mp.i2num, 1;
// LINE 1826:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1827:
	__asm        mov    conked, 0;
// LINE 1828:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T1d3;
// LINE 1829:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tbd;

	__asm        push   0x8C085;
	__asm        push   0x5BBBF0;
	__asm        push   0x2C2;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbd:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _Te7;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _Tf5;
_Te7:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_Tf5:
	__asm        jmp    near ptr 0x0054BAE0;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
	__asm        mov    eax, riotMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        jne    _T177;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T177;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T177;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T177;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T177:
	__asm        jmp    near ptr 0x0054BB62;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T1b4;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        add    eax, 1;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T1c4;
_T1b4:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        add    eax, 1;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T1c4:
	__asm        jmp    near ptr 0x0054BBAF;

	__asm        jmp    near ptr 0x0054BBB4;
// LINE 1830:
	__asm        jmp    _T249;
// LINE 1831:
_T1d3:
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
// LINE 1832:
	__asm        mov    eax, riotMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        jne    _T244;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T244;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T244;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T244;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T244:
	__asm        jmp    _T249;
// LINE 1835:
// Block end:
_T249:
	__asm        mov    eax, riotMissionID;
	__asm        jmp    near ptr 0x0054BC37;
// LINE 1836:
}

// FUNCTION: COPTER_D 0x0054bc3c
void cYObject::PhaseAndBeamSoundChannels() {
	class cYObject* obj;
	short nextsoundchannel;
	short count;

// LINE 1842:
	__asm        mov    count, 0;
// LINE 1843:
_T0f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T26d;
// LINE 1844:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T44;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tc0;
_T44:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     _T5d;

	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T79;
_T5d:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T79:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Ta7;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta7:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tc0;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    obj, eax;
// LINE 1845:
_Tc0:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T268;
// LINE 1846:
// Block start:
	short xdiff;
	short ydiff;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T101;

	__asm        push   0x8C085;
	__asm        push   0x5BADC4;
	__asm        push   0x736;
	__asm        push   0x5BADF4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1847:
_T101:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, ax;
	__asm        jmp    near ptr 0x0054BD60;
// LINE 1848:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, ax;
	__asm        jmp    near ptr 0x0054BD83;
// LINE 1849:
	__asm        movsx  eax, ydiff;
	__asm        movsx  ecx, xdiff;
	__asm        add    eax, ecx;
	__asm        cmp    eax, 2;
	__asm        jle    _T20e;
// LINE 1852:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T204;

	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1df;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1ba;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    _T1cd;

	__asm        jmp    _T1c5;
_T1ba:
	__asm        mov    word ptr [ebp-0x2C], 0xFFFF;
	__asm        jmp    _T1cd;
_T1c5:
	__asm        mov    ax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], ax;
_T1cd:
	__asm        jmp    near ptr 0x0054BE0E;

	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T1df:
	__asm        jmp    near ptr 0x0054BE20;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T204:
	__asm        jmp    near ptr 0x0054BE45;
// LINE 1853:
	__asm        jmp    _T268;
// LINE 1854:
_T20e:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T23c;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    _T24f;

	__asm        jmp    _T247;
_T23c:
	__asm        mov    word ptr [ebp-0x20], 0xFFFF;
	__asm        jmp    _T24f;
_T247:
	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], ax;
_T24f:
	__asm        jmp    near ptr 0x0054BE90;

	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        push   eax;
	__asm        call   S3SoundSetPosition;
	__asm        add    esp, 8;
// LINE 1856:
// Block end:
_T268:
	__asm        jmp    _T0f;
// LINE 1858:
_T26d:
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    _T27c;
_T278:
	__asm        inc    word ptr [ebp-0x24];
_T27c:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0xC;
	__asm        jge    _T2af;

	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        movsx  eax, cYObject::sSoundChannels[eax*2];
	__asm        test   eax, eax;
	__asm        jne    _T2aa;

	__asm        mov    ax, [ebp-0x24];
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    _T2ba;
_T2aa:
	__asm        jmp    _T278;
_T2af:
	__asm        mov    word ptr [ebp-0x28], 0xFFFF;
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   1;
	__asm        call   cYObject::DistributeSoundChannels;
	__asm        add    esp, 8;
	__asm        mov    nextsoundchannel, ax;
// LINE 1860:
	__asm        mov    eax, reinterpret_cast<uint32_t>(nextsoundchannel);
	__asm        push   eax;
	__asm        push   2;
	__asm        call   cYObject::DistributeSoundChannels;
	__asm        add    esp, 8;
// LINE 1861:
	__asm        jmp    near ptr 0x0054BF1B;
}

// FUNCTION: COPTER_D 0x0054bf20
short cYObject::DistributeSoundChannels(short rad, short firstsoundchannel) {
	class cYObject* obj;
	short soundchannel;
	short count;

// LINE 1865:
	__asm        mov    ax, firstsoundchannel;
	__asm        mov    soundchannel, ax;
// LINE 1866:
	__asm        mov    count, 0;
// LINE 1869:
_T17:
	__asm        movsx  eax, soundchannel;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1b9;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T1b9;
// LINE 1870:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T59;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Td5;
_T59:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     _T72;

	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T8e;
_T72:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8e:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tbc;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbc:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Td5;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 1871:
_Td5:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tec;
// LINE 1872:
	__asm        jmp    _T17;
// LINE 1873:
_Tec:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T1b4;
// LINE 1874:
// Block start:
	short xdiff;
	short ydiff;
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, ax;
	__asm        jmp    near ptr 0x0054C042;
// LINE 1875:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, ax;
	__asm        jmp    near ptr 0x0054C065;
// LINE 1876:
	__asm        movsx  eax, ydiff;
	__asm        movsx  ecx, xdiff;
	__asm        add    eax, ecx;
	__asm        movsx  ecx, rad;
	__asm        cmp    eax, ecx;
	__asm        jge    _T1b4;
// LINE 1877:
	__asm        mov    eax, reinterpret_cast<uint32_t>(soundchannel);
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetSoundChannel;
// LINE 1878:
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    _T176;
_T172:
	__asm        inc    word ptr [ebp-0x1C];
_T176:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0xC;
	__asm        jge    _T1a9;

	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        movsx  eax, cYObject::sSoundChannels[eax*2];
	__asm        test   eax, eax;
	__asm        jne    _T1a4;

	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    soundchannel, ax;
	__asm        jmp    _T1b4;
_T1a4:
	__asm        jmp    _T172;
_T1a9:
	__asm        mov    soundchannel, 0xFFFF;
	__asm        jmp    _T1b4;
// LINE 1881:
// Block end:
_T1b4:
	__asm        jmp    _T17;
// LINE 1882:
_T1b9:
	__asm        mov    ax, soundchannel;
	__asm        jmp    near ptr 0x0054C0E2;
// LINE 1883:
}

// FUNCTION: COPTER_D 0x0054c0e7
void cYObject::SetSoundChannel(short soundchannel) {
// LINE 1888:
	__asm        movsx  eax, soundchannel;
	__asm        test   eax, eax;
	__asm        jl     _T25;

	__asm        movsx  eax, soundchannel;
	__asm        cmp    eax, 0xF;
	__asm        jl     _T41;
_T25:
	__asm        push   0x8C085;
	__asm        push   0x5BAE18;
	__asm        push   0x760;
	__asm        push   0x5BAE38;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1889:
_T41:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T6f;

	__asm        push   0x8C085;
	__asm        push   0x5BAE5C;
	__asm        push   0x761;
	__asm        push   0x5BAE80;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1890:
_T6f:
	__asm        movsx  eax, soundchannel;
	__asm        movsx  eax, cYObject::sSoundChannels[eax*2];
	__asm        test   eax, eax;
	__asm        je     _T9f;

	__asm        push   0x8C085;
	__asm        push   0x5BAEA4;
	__asm        push   0x762;
	__asm        push   0x5BAED0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1891:
_T9f:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Tce;

	__asm        push   0x8C085;
	__asm        push   0x5BAEF4;
	__asm        push   0x763;
	__asm        push   0x5BAF1C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1892:
_Tce:
	__asm        movsx  eax, soundchannel;
	__asm        mov    cYObject::sSoundChannels[eax*2], 1;
// LINE 1893:
	__asm        mov    ax, soundchannel;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x102], ax;
// LINE 1894:
	__asm        jmp    near ptr 0x0054C1D6;
}

// FUNCTION: COPTER_D 0x0054c1dd
unsigned short cYObject::PlaySoundA(enum cYObject::SoundNum soundnum, unsigned short playforsure) {
	static const <NoType> = { /* <data@0x0054c54b> */ };
	int32_t success;
	short actualSoundChannel;
	char * soundfile;
	unsigned short loop;
	short freqadj;
	int32_t flags;

// LINE 1899:
	__asm        cmp    G_camera_mode, 3;
	__asm        je     _T3d;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T3d;
// LINE 1900:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 1903:
_T3d:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, soundnum;
	__asm        jne    _T132;
// LINE 1904:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, 0xE;
	__asm        jne    _T129;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T129;
// LINE 1905:
// Block start:
	short actualchannel;
	class DigitalSound* theSound;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _Ta4;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    actualchannel, ax;
	__asm        jmp    _Tb7;

	__asm        jmp    _Taf;
_Ta4:
	__asm        mov    actualchannel, 0xFFFF;
	__asm        jmp    _Tb7;
_Taf:
	__asm        mov    ax, [ebp-0x24];
	__asm        mov    actualchannel, ax;
_Tb7:
	__asm        jmp    near ptr 0x0054C299;
// LINE 1907:
	__asm        movsx  eax, actualchannel;
	__asm        mov    eax, gSoundManager.sound[0][eax*4];
	__asm        mov    theSound, eax;
// LINE 1908:
	__asm        cmp    theSound, 0;
	__asm        jne    _Tf0;

	__asm        push   0x8C085;
	__asm        push   0x5BAF40;
	__asm        push   0x774;
	__asm        push   0x5BAF48;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1909:
_Tf0:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF4];
	__asm        lea    eax, [eax*4-0x14];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x2AF8;
	__asm        push   eax;
	__asm        mov    eax, theSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, theSound;
	__asm        call   dword ptr [eax+0x64];
// LINE 1910:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 1912:
// Block end:
	__asm        jmp    _T132;
// LINE 1913:
_T129:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 1915:
_T132:
	__asm        mov    eax, soundnum;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x104], ax;
// LINE 1916:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T1c4;
// LINE 1917:
	__asm        test   reinterpret_cast<uint32_t>(playforsure), 0xFFFF;
	__asm        jne    _T168;
// LINE 1918:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 1919:
_T168:
	__asm        mov    word ptr [ebp-0x2C], 0;
	__asm        jmp    _T177;
_T173:
	__asm        inc    word ptr [ebp-0x2C];
_T177:
	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        cmp    eax, 3;
	__asm        jge    _T1b3;

	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        movsx  eax, cYObject::sSoundChannels[12][eax*2];
	__asm        test   eax, eax;
	__asm        jne    _T1ae;

	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x102], ax;
	__asm        jmp    _T1c4;
_T1ae:
	__asm        jmp    _T173;
_T1b3:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xC;
	__asm        jmp    _T1c4;
// LINE 1922:
_T1c4:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1f2;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    actualSoundChannel, ax;
	__asm        jmp    _T205;

	__asm        jmp    _T1fd;
_T1f2:
	__asm        mov    actualSoundChannel, 0xFFFF;
	__asm        jmp    _T205;
_T1fd:
	__asm        mov    ax, [ebp-0x28];
	__asm        mov    actualSoundChannel, ax;
_T205:
	__asm        jmp    near ptr 0x0054C3E7;
// LINE 1923:
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 1924:
	__asm        mov    loop, 0;
// LINE 1925:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x108];
	__asm        mov    freqadj, ax;
// LINE 1926:
	__asm        mov    eax, soundnum;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T3c7;
// LINE 1934:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 1935:
	__asm        jmp    _T42e;
// LINE 1937:
	__asm        mov    soundfile, 0x5BAF6C;
// LINE 1938:
	__asm        jmp    _T42e;
// LINE 1940:
	__asm        mov    soundfile, 0x5BAF78;
// LINE 1941:
	__asm        jmp    _T42e;
// LINE 1943:
	__asm        mov    soundfile, 0x5BAF84;
// LINE 1944:
	__asm        jmp    _T42e;
// LINE 1946:
	__asm        mov    soundfile, 0x5BAF90;
// LINE 1947:
	__asm        jmp    _T42e;
// LINE 1949:
	__asm        mov    soundfile, 0x5BAF9C;
// LINE 1950:
	__asm        jmp    _T42e;
// LINE 1952:
	__asm        mov    soundfile, 0x5BAFA8;
// LINE 1953:
	__asm        jmp    _T42e;
// LINE 1955:
	__asm        mov    soundfile, 0x5BAFB4;
// LINE 1956:
	__asm        jmp    _T42e;
// LINE 1958:
	__asm        mov    soundfile, 0x5BAFC4;
// LINE 1959:
	__asm        jmp    _T42e;
// LINE 1961:
	__asm        mov    soundfile, 0x5BAFD0;
// LINE 1962:
	__asm        jmp    _T42e;
// LINE 1964:
	__asm        mov    soundfile, 0x5BAFDC;
// LINE 1965:
	__asm        jmp    _T42e;
// LINE 1967:
	__asm        mov    soundfile, 0x5BAFE8;
// LINE 1968:
	__asm        jmp    _T42e;
// LINE 1970:
	__asm        mov    soundfile, 0x5BAFF8;
// LINE 1971:
	__asm        jmp    _T42e;
// LINE 1973:
	__asm        mov    soundfile, 0x5BB008;
// LINE 1974:
	__asm        jmp    _T42e;
// LINE 1976:
	__asm        mov    soundfile, 0x5BB014;
// LINE 1977:
	__asm        jmp    _T42e;
// LINE 1979:
	__asm        mov    soundfile, 0x5BB020;
// LINE 1980:
	__asm        jmp    _T42e;
// LINE 1982:
	__asm        mov    soundfile, 0x5BB02C;
// LINE 1983:
	__asm        jmp    _T42e;
// LINE 1985:
	__asm        mov    soundfile, 0x5BB03C;
// LINE 1986:
	__asm        jmp    _T42e;
// LINE 1988:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T346;
// LINE 1992:
	__asm        mov    soundfile, 0x5BB04C;
// LINE 1993:
	__asm        jmp    _T37d;
// LINE 1998:
	__asm        mov    soundfile, 0x5BB05C;
// LINE 1999:
	__asm        jmp    _T37d;
// LINE 2001:
_T33a:
	__asm        mov    soundfile, 0x5BB06C;
// LINE 2002:
	__asm        jmp    _T37d;
_T346:
	__asm        cmp    dword ptr [ebp-0x38], 0xE;
	__asm        ja     _T33a;

	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5555531[0][eax];
	__asm        jmp    SwitchPointers5555519[0][ecx*4];
// Switch pointers
// Switch table
// LINE 2003:
_T37d:
	__asm        mov    loop, 1;
// LINE 2004:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF4];
	__asm        lea    eax, [eax*4-0x14];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    freqadj, ax;
// LINE 2005:
	__asm        jmp    _T42e;
// LINE 2007:
_T3a6:
	__asm        push   0x8C085;
	__asm        push   0x5BB07C;
	__asm        push   0x7D7;
	__asm        push   0x5BB098;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2008:
	__asm        jmp    _T42e;
_T3c7:
	__asm        inc    dword ptr [ebp-0x34];
	__asm        cmp    dword ptr [ebp-0x34], 0x13;
	__asm        ja     _T3a6;

	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    SwitchPointers5555643[0][eax*4];
// Switch pointers
// LINE 2009:
_T42e:
	__asm        mov    flags, 2;
// LINE 2010:
	__asm        test   reinterpret_cast<uint32_t>(loop), 0xFFFF;
	__asm        je     _T446;
// LINE 2011:
	__asm        or     flags, 1;
// LINE 2012:
_T446:
	__asm        mov    eax, soundfile;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   S3DSSetFile;
	__asm        add    esp, 8;
// LINE 2013:
	__asm        mov    eax, flags;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
	__asm        mov    success, eax;
// LINE 2014:
	__asm        movsx  eax, freqadj;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   S3SoundAdjFreq;
	__asm        add    esp, 8;
// LINE 2022:
	__asm        mov    ax, 1;
	__asm        jmp    _T48d;
// LINE 2023:
_T48d:
}

// FUNCTION: COPTER_D 0x0054c671
void cYObject::SimulateAll() {
	long debuglooptime;
	unsigned short simulate;

// LINE 2085:
	__asm        mov    eax, LoopTime;
	__asm        add    gCumTime, eax;
// LINE 2086:
	__asm        mov    eax, LoopTime;
	__asm        mov    debuglooptime, eax;
// LINE 2087:
	__asm        mov    simulate, 0;
// LINE 2088:
	__asm        mov    eax, gNextTime;
	__asm        cmp    gCumTime, eax;
	__asm        jle    _T56;
// LINE 2089:
	__asm        mov    simulate, 1;
// LINE 2090:
	__asm        inc    cYObject::sSimTicks;
// LINE 2091:
	__asm        mov    gNextTime, 0x147A;
// LINE 2092:
	__asm        mov    gCumTime, 0;
// LINE 2096:
_T56:
	__asm        call   cYObject::StartScurkPeopleNearAvatar;
// LINE 2098:
	__asm        test   reinterpret_cast<uint32_t>(simulate), 0xFFFF;
	__asm        jne    _T1b5;
// LINE 2099:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    _T77;
_T73:
	__asm        inc    count;
_T77:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T1b0;
// LINE 2100:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _Ta0;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T11f;
_Ta0:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _Tb9;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _Td5;
_Tb9:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td5:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T103;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T103:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T11f;

	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    obj, eax;
// LINE 2101:
_T11f:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T1ab;
// LINE 2102:
	__asm        jmp    near ptr 0x0054C7A7;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T163;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T163:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x70];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1ab;
// LINE 2103:
// Block end:
_T1ab:
	__asm        jmp    _T73;
// LINE 2105:
// Block end:
_T1b0:
	__asm        jmp    _T642;
// LINE 2106:
// Block start:
	short count;
_T1b5:
	__asm        inc    gPersonBeamSlice;
	__asm        movsx  eax, gPersonBeamingSlices;
	__asm        cmp    eax, gPersonBeamSlice;
	__asm        jge    _T1d8;

	__asm        mov    gPersonBeamSlice, 0;
// LINE 2107:
_T1d8:
	__asm        inc    gPersonSoundBeamSlice;
	__asm        movsx  eax, gPersonSoundBeamSlice;
	__asm        cmp    eax, 2;
	__asm        jle    _T1f8;

	__asm        mov    gPersonSoundBeamSlice, 0;
// LINE 2108:
_T1f8:
	__asm        mov    count, 0;
	__asm        jmp    _T207;
_T203:
	__asm        inc    count;
_T207:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T61c;
// LINE 2109:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T230;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T2af;
_T230:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T249;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T265;
_T249:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T265:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T293;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T293:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T2af;

	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    obj, eax;
// LINE 2110:
_T2af:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T617;
// LINE 2111:
	__asm        cmp    gPersonBeamSlice, 0;
	__asm        jne    _T58c;
// LINE 2113:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    _T58c;

	__asm        mov    ecx, obj;
	__asm        call   cYObject::OutOfCameraRange;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T58c;
// LINE 2114:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T321;

	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T321:
	__asm        jmp    near ptr 0x0054C997;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T353;

	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T353:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T39c;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T397;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T397:
	__asm        jmp    _T3cc;
_T39c:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T3cc;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3cc:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T3ea;

	__asm        jmp    _T41b;

	__asm        jmp    _T3ea;
_T3ea:
	__asm        jmp    _T3ff;

	__asm        test   dword ptr [ebp-0xE0], 0xFFFF;
	__asm        jne    _T41b;
_T3ff:
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T41b:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T4d4;

	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T4af;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T47e;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0xD8], ax;
	__asm        jmp    _T49a;

	__asm        jmp    _T48c;
_T47e:
	__asm        mov    word ptr [ebp-0xD8], 0xFFFF;
	__asm        jmp    _T49a;
_T48c:
	__asm        mov    ax, [ebp-0xDC];
	__asm        mov    [ebp-0xD8], ax;
_T49a:
	__asm        jmp    near ptr 0x0054CB10;

	__asm        movsx  eax, word ptr [ebp-0xD8];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T4af:
	__asm        jmp    near ptr 0x0054CB25;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T4d4:
	__asm        jmp    near ptr 0x0054CB4A;

	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        jne    _T52d;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T53b;
_T52d:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T53b:
	__asm        jmp    near ptr 0x0054CBB1;

	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        test   eax, eax;
	__asm        jl     _T55e;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        test   eax, eax;
	__asm        jge    _T57a;
_T55e:
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T57a:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Unlink;
	__asm        jmp    near ptr 0x0054CBF8;
// LINE 2120:
	__asm        jmp    _T203;
// LINE 2123:
_T58c:
	__asm        jmp    near ptr 0x0054CC02;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T5be;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5be:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0xC8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054CC80;
// LINE 2124:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Simulate;
// LINE 2126:
// Block end:
_T617:
	__asm        jmp    _T203;
// LINE 2127:
_T61c:
	__asm        cmp    gPersonBeamSlice, 0;
	__asm        jne    _T62e;
// LINE 2128:
	__asm        call   cYObject::TryStartAllAmbient;
// LINE 2130:
_T62e:
	__asm        movsx  eax, gPersonSoundBeamSlice;
	__asm        test   eax, eax;
	__asm        jne    _T642;
// LINE 2131:
	__asm        call   cYObject::PhaseAndBeamSoundChannels;
// LINE 2134:
// Block end:
_T642:
	__asm        jmp    near ptr 0x0054CCB8;
}

// FUNCTION: COPTER_D 0x0054ccbd
unsigned short cYObject::AddToHeli() {
	struct tagPassengerInfo tempPassengerInfo;

// LINE 2143:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        mov    tempPassengerInfo.lPassengerFace, eax;
// LINE 2145:
	__asm        mov    tempPassengerInfo.lPassengerExpression, 1;
// LINE 2146:
	__asm        mov    tempPassengerInfo.lPassengerHealth, 0x200;
// LINE 2147:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        mov    tempPassengerInfo.lPassengerID, eax;
// LINE 2149:
	__asm        lea    eax, tempPassengerInfo.lPassengerFace;
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerCanAdd;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    _T5b;
// LINE 2150:
	__asm        xor    ax, ax;
	__asm        jmp    _T87;
// LINE 2151:
_T5b:
	__asm        lea    eax, tempPassengerInfo.lPassengerFace;
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerAdd;
	__asm        add    esp, 8;
// LINE 2152:
	__asm        mov    ecx, this;
	__asm        mov    word ptr [ecx+0xE2], 0;
// LINE 2153:
	__asm        mov    ax, 1;
	__asm        jmp    _T87;
// LINE 2155:
_T87:
}

// FUNCTION: COPTER_D 0x0054cd49
void cYObject::RemoveFromHeli() {
	int32_t yes;

// LINE 2159:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerRemove;
	__asm        add    esp, 8;
	__asm        mov    yes, eax;
// LINE 2160:
	__asm        cmp    yes, 0;
	__asm        jne    _T53;

	__asm        push   0x8C085;
	__asm        push   0x5BB0BC;
	__asm        push   0x870;
	__asm        push   0x5BB0E8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2161:
_T53:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 2162:
	__asm        jmp    near ptr 0x0054CDAD;
}

// FUNCTION: COPTER_D 0x0054cdb2
class cYObject* cYObject::GetPersonWithMaster(struct _DYOBJ_INST* dyobj) {
	short count;

// LINE 2166:
	__asm        mov    count, 0;
	__asm        jmp    _T1b;
_T17:
	__asm        inc    count;
_T1b:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T10a;
// LINE 2167:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T44;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tc0;
_T44:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T5d;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T79;
_T5d:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T79:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Ta7;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta7:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tc0;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 2168:
_Tc0:
	__asm        cmp    obj, 0;
	__asm        jne    _Te6;

	__asm        push   0x8C085;
	__asm        push   0x5BB10C;
	__asm        push   0x878;
	__asm        push   0x5BB130;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2169:
_Te6:
	__asm        jmp    near ptr 0x0054CE9D;

	__asm        mov    eax, obj;
	__asm        mov    ecx, dyobj;
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    _T105;
// LINE 2170:
	__asm        mov    eax, obj;
	__asm        jmp    _T111;
// LINE 2171:
// Block end:
_T105:
	__asm        jmp    _T17;
// LINE 2172:
_T10a:
	__asm        xor    eax, eax;
	__asm        jmp    _T111;
// LINE 2173:
_T111:
}

// FUNCTION: COPTER_D 0x0054ceca
unsigned short cYObject::SetMaster(struct _DYOBJ_INST* obj) {
	unsigned short success;

// LINE 2177:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T55;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T50;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T50:
	__asm        jmp    _T85;
_T55:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T85;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T85:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Ta3;

	__asm        jmp    _Td1;

	__asm        jmp    _Ta3;
_Ta3:
	__asm        jmp    _Tb5;

	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    _Td1;
_Tb5:
	__asm        push   0x8C085;
	__asm        push   0x5BB154;
	__asm        push   0x881;
	__asm        push   0x5BB180;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2181:
_Td1:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     _T113;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T113;
// LINE 2182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     _T113;
// LINE 2183:
	__asm        mov    ecx, this;
	__asm        call   cYObject::RemoveFromHeli;
// LINE 2188:
_T113:
	__asm        mov    success, 1;
// LINE 2189:
	__asm        cmp    obj, 0;
	__asm        je     _T1c7;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     _T1c7;
// LINE 2190:
	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, obj;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jne    _T16a;
// LINE 2192:
	__asm        mov    ecx, this;
	__asm        call   cYObject::AddToHeli;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T165;
// LINE 2193:
	__asm        mov    success, 0;
// LINE 2196:
_T165:
	__asm        jmp    _T1c7;
_T16a:
	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, obj;
	__asm        cmp    [eax+0xBC], ecx;
	__asm        jne    _T1c7;
// LINE 2199:
	__asm        mov    eax, G_uheli;
	__asm        cmp    dword ptr [eax+0x1B0], 0;
	__asm        je     _T1a2;

	__asm        mov    eax, G_uheli;
	__asm        cmp    dword ptr [eax+0x1B4], 0;
	__asm        je     _T1ad;
// LINE 2200:
_T1a2:
	__asm        mov    success, 0;
// LINE 2202:
	__asm        jmp    _T1c7;
_T1ad:
	__asm        mov    eax, obj;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetPersonWithMaster;
	__asm        test   eax, eax;
	__asm        je     _T1c7;
// LINE 2203:
	__asm        mov    success, 0;
// LINE 2206:
_T1c7:
	__asm        test   reinterpret_cast<uint32_t>(success), 0xFFFF;
	__asm        je     _T209;
// LINE 2207:
	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x130], eax;
// LINE 2209:
	__asm        cmp    obj, 0;
	__asm        je     _T209;
// LINE 2210:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2217:
_T209:
	__asm        mov    ax, success;
	__asm        jmp    near ptr 0x0054D0DC;
// LINE 2218:
}

// FUNCTION: COPTER_D 0x0054d0e3
unsigned short cYObject::AdjoinsRoad(struct Point3d pos) {
	int32_t celly;
	int32_t cellx;

// LINE 2222:
	__asm        mov    eax, pos.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    cellx, eax;
// LINE 2223:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, pos.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celly, eax;
// LINE 2230:
	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T164;

	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T164;

	__asm        cmp    celly, 0x80;
	__asm        jge    _T164;

	__asm        cmp    celly, 0xFFFFFFFF;
	__asm        jle    _T164;

	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        js     _T86;

	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T86;

	__asm        cmp    celly, 0;
	__asm        jl     _T86;

	__asm        cmp    celly, 0x7F;
	__asm        jle    _T92;
_T86:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T14d;
_T92:
	__asm        mov    eax, cellx;
	__asm        mov    eax, NeighborFame[eax*4];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _Tca;

	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _T130;
_Tca:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _Tec;

	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    _T130;
_Tec:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     _T10e;

	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    _T130;
_T10e:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T141;

	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _T141;
_T130:
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    _T14d;

	__asm        jmp    _T14d;
_T141:
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    _T14d;
_T14d:
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    _T567;

	__asm        jmp    _T176;

	__asm        jmp    _T169;
_T164:
	__asm        jmp    _T176;
_T169:
	__asm        test   dword ptr [ebp-0x14], 0xFFFF;
	__asm        jne    _T567;
_T176:
	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T2b2;

	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T2b2;

	__asm        cmp    celly, 0x80;
	__asm        jge    _T2b2;

	__asm        cmp    celly, 0xFFFFFFFF;
	__asm        jle    _T2b2;

	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        js     _T1d4;

	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T1d4;

	__asm        cmp    celly, 0;
	__asm        jl     _T1d4;

	__asm        cmp    celly, 0x7F;
	__asm        jle    _T1e0;
_T1d4:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T29b;
_T1e0:
	__asm        mov    eax, cellx;
	__asm        mov    eax, BuildMap[1][eax*4];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x18], ax;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _T218;

	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _T27e;
_T218:
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _T23a;

	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    _T27e;
_T23a:
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     _T25c;

	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    _T27e;
_T25c:
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T28f;

	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _T28f;
_T27e:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    _T29b;

	__asm        jmp    _T29b;
_T28f:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T29b;
_T29b:
	__asm        test   dword ptr [ebp-0x1C], 0xFFFF;
	__asm        jne    _T567;

	__asm        jmp    _T2c4;

	__asm        jmp    _T2b7;
_T2b2:
	__asm        jmp    _T2c4;
_T2b7:
	__asm        test   dword ptr [ebp-0x20], 0xFFFF;
	__asm        jne    _T567;
_T2c4:
	__asm        cmp    cellx, 0x80;
	__asm        jge    _T401;

	__asm        cmp    cellx, 0xFFFFFFFF;
	__asm        jle    _T401;

	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T401;

	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T401;

	__asm        cmp    cellx, 0;
	__asm        jl     _T322;

	__asm        cmp    cellx, 0x7F;
	__asm        jg     _T322;

	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        js     _T322;

	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jle    _T32e;
_T322:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T3ea;
_T32e:
	__asm        mov    eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx-1];
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _T367;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _T3cd;
_T367:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _T389;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    _T3cd;
_T389:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     _T3ab;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    _T3cd;
_T3ab:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T3de;

	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _T3de;
_T3cd:
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    _T3ea;

	__asm        jmp    _T3ea;
_T3de:
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    _T3ea;
_T3ea:
	__asm        test   dword ptr [ebp-0x28], 0xFFFF;
	__asm        jne    _T567;

	__asm        jmp    _T413;

	__asm        jmp    _T406;
_T401:
	__asm        jmp    _T413;
_T406:
	__asm        test   dword ptr [ebp-0x2C], 0xFFFF;
	__asm        jne    _T567;
_T413:
	__asm        cmp    cellx, 0x80;
	__asm        jge    _T550;

	__asm        cmp    cellx, 0xFFFFFFFF;
	__asm        jle    _T550;

	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T550;

	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T550;

	__asm        cmp    cellx, 0;
	__asm        jl     _T471;

	__asm        cmp    cellx, 0x7F;
	__asm        jg     _T471;

	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        js     _T471;

	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jle    _T47d;
_T471:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T539;
_T47d:
	__asm        mov    eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx+1];
	__asm        mov    [ebp-0x30], ax;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _T4b6;

	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    _T51c;
_T4b6:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     _T4d8;

	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    _T51c;
_T4d8:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     _T4fa;

	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    _T51c;
_T4fa:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     _T52d;

	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     _T52d;
_T51c:
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    _T539;

	__asm        jmp    _T539;
_T52d:
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    _T539;
_T539:
	__asm        test   dword ptr [ebp-0x34], 0xFFFF;
	__asm        je     _T570;

	__asm        jmp    _T567;

	__asm        jmp    _T55a;
_T550:
	__asm        jmp    _T570;

	__asm        jmp    _T567;
_T55a:
	__asm        test   dword ptr [ebp-0x38], 0xFFFF;
	__asm        je     _T570;
// LINE 2234:
_T567:
	__asm        mov    ax, 1;
	__asm        jmp    _T578;
// LINE 2235:
_T570:
	__asm        xor    ax, ax;
	__asm        jmp    _T578;
// LINE 2236:
_T578:
}

// FUNCTION: COPTER_D 0x0054d662
unsigned short cYObject::GetNeutralLoc(int32_t * cellx, int32_t * celly, int32_t * offsetx, int32_t * offsetz) {
	struct _CELL_INFO* newcptr;
	struct _CELL_INFO* cptr;
	short cy;
	int32_t z;
	short cx;
	short scurkID1;
	int32_t x;
	short scurkID2;
	enum cYObject::LocationType loctype;

// LINE 2243:
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, cellx;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 2244:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, cellx;
	__asm        mov    [ecx], eax;
// LINE 2245:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celly;
	__asm        mov    [ecx], eax;
// LINE 2246:
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 2251:
	__asm        mov    word ptr [ebp-0x68], 0;
	__asm        jmp    _T8a;
_T86:
	__asm        inc    word ptr [ebp-0x68];
_T8a:
	__asm        movsx  eax, word ptr [ebp-0x68];
	__asm        cmp    eax, 0xA;
	__asm        jge    _Tce;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x68];
	__asm        shl    ecx, 2;
	__asm        mov    edx, loctype;
	__asm        cmp    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], edx;
	__asm        jne    _Tc9;

	__asm        mov    word ptr [ebp-0x64], 1;
	__asm        jmp    _Td9;
_Tc9:
	__asm        jmp    _T86;
_Tce:
	__asm        mov    word ptr [ebp-0x64], 0;
	__asm        jmp    _Td9;
_Td9:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    word ptr [ebp-0x70], 0;
_Te8:
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     _T112;

	__asm        mov    eax, [ebp-0x6C];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T105;

	__asm        inc    word ptr [ebp-0x70];
_T105:
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    _Te8;
_T112:
	__asm        jmp    near ptr 0x0054D779;

	__asm        mov    eax, loctype;
	__asm        movsx  eax, cYObject::sLocInfo[0].maxNormalLoiterers[eax*8];
	__asm        movsx  ecx, word ptr [ebp-0x70];
	__asm        cmp    eax, ecx;
	__asm        jle    _T139;

	__asm        mov    word ptr [ebp-0x60], 1;
	__asm        jmp    _T13f;
_T139:
	__asm        mov    word ptr [ebp-0x60], 0;
_T13f:
	__asm        test   dword ptr [ebp-0x64], 0xFFFF;
	__asm        je     _T168;

	__asm        test   dword ptr [ebp-0x60], 0xFFFF;
	__asm        je     _T168;

	__asm        jmp    _T182;

	__asm        jmp    _T17a;

	__asm        jmp    _T16d;
_T168:
	__asm        jmp    _T17a;
_T16d:
	__asm        test   dword ptr [ebp-0x74], 0xFFFF;
	__asm        jne    _T182;
// LINE 2252:
_T17a:
	__asm        xor    ax, ax;
	__asm        jmp    _T48a;
// LINE 2254:
_T182:
	__asm        mov    eax, loctype;
	__asm        mov    eax, cYObject::sLocInfo[0].searchType[eax*8];
	__asm        push   eax;
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SearchForPersonSpot;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T1b7;
// LINE 2255:
	__asm        xor    ax, ax;
	__asm        jmp    _T48a;
// LINE 2256:
_T1b7:
	__asm        mov    eax, loctype;
	__asm        cmp    cYObject::sLocInfo[0].searchType[eax*8], 0;
	__asm        jne    _T27b;
// Block start:
	struct Point3d pos;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
// LINE 2257:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x4C], eax;
	__asm        lea    eax, [ebp-0x54];
	__asm        lea    ecx, [ebp-0x48];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054D887;

	__asm        lea    eax, [ebp-0x48];
	__asm        lea    ecx, [ebp-0x3C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2259:
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::AdjoinsRoad;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T27b;
// LINE 2260:
	__asm        xor    ax, ax;
	__asm        jmp    _T48a;
// LINE 2263:
// Block end:
_T27b:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, offsetx;
	__asm        add    eax, [ecx];
	__asm        shl    eax, 0x10;
	__asm        mov    x, eax;
// LINE 2264:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, offsetz;
	__asm        add    eax, [ecx];
	__asm        shl    eax, 0x10;
	__asm        mov    z, eax;
// LINE 2265:
	__asm        mov    eax, x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    cx, ax;
// LINE 2266:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, z;
	__asm        sar    eax, 0x16;
	__asm        mov    cy, ax;
// LINE 2267:
	__asm        movsx  eax, cx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, cy;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    newcptr, eax;
// LINE 2268:
	__asm        mov    eax, cptr;
	__asm        cmp    newcptr, eax;
	__asm        je     _T305;

	__asm        push   0x8C085;
	__asm        push   0x5BB1A4;
	__asm        push   0x8DC;
	__asm        push   0x5BB1C8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T305:
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], ax;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], ax;
// LINE 2269:
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T349;

	__asm        movsx  eax, word ptr [ebp-0x7C];
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T349;

	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        test   eax, eax;
	__asm        jl     _T349;

	__asm        movsx  eax, word ptr [ebp-0x7C];
	__asm        test   eax, eax;
	__asm        jge    _T354;
_T349:
	__asm        mov    scurkID1, 0xFFFF;
	__asm        jmp    _T3b0;
_T354:
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x7C];
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x78], ax;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        test   eax, eax;
	__asm        jl     _T387;

	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x100;
	__asm        jl     _T3a3;
_T387:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3a3:
	__asm        mov    ax, [ebp-0x78];
	__asm        mov    scurkID1, ax;
	__asm        jmp    _T3b0;
// LINE 2270:
_T3b0:
	__asm        movsx  eax, cx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3e2;

	__asm        movsx  eax, cy;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3e2;

	__asm        movsx  eax, cx;
	__asm        test   eax, eax;
	__asm        jl     _T3e2;

	__asm        movsx  eax, cy;
	__asm        test   eax, eax;
	__asm        jge    _T3ed;
_T3e2:
	__asm        mov    scurkID2, 0xFFFF;
	__asm        jmp    _T455;
_T3ed:
	__asm        movsx  eax, cx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, cy;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x84], ax;
	__asm        movsx  eax, word ptr [ebp-0x84];
	__asm        test   eax, eax;
	__asm        jl     _T429;

	__asm        movsx  eax, word ptr [ebp-0x84];
	__asm        cmp    eax, 0x100;
	__asm        jl     _T445;
_T429:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T445:
	__asm        mov    ax, [ebp-0x84];
	__asm        mov    scurkID2, ax;
	__asm        jmp    _T455;
// LINE 2271:
_T455:
	__asm        movsx  eax, scurkID2;
	__asm        movsx  ecx, scurkID1;
	__asm        cmp    eax, ecx;
	__asm        je     _T481;

	__asm        push   0x8C085;
	__asm        push   0x5BB1EC;
	__asm        push   0x8DF;
	__asm        push   0x5BB228;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2273:
_T481:
	__asm        mov    ax, 1;
	__asm        jmp    _T48a;
// LINE 2274:
_T48a:
}

// FUNCTION: COPTER_D 0x0054daf3
void cYObject::Simulate() {
// LINE 2278:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BB24C;
	__asm        push   0x8E6;
	__asm        push   0x5BB26C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2280:
_T3a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T15d;
// LINE 2281:
	__asm        jmp    near ptr 0x0054DB42;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T7c;

	__asm        push   0x8C085;
	__asm        push   0x5BBD20;
	__asm        push   0x262;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _Ta8;

	__asm        push   0x8C085;
	__asm        push   0x5BBCFC;
	__asm        push   0x263;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta8:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA4];
	__asm        mov    [ebp-0xC], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryMove;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T133;

	__asm        push   0x8C085;
	__asm        push   0x5BBCCC;
	__asm        push   0x268;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T133:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T15d;
// LINE 2282:
_T15d:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Simulate;
// LINE 2283:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T19a;

	__asm        push   0x8C085;
	__asm        push   0x5BBCAC;
	__asm        push   0x27F;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
	__asm        jmp    _T1e1;
_T19a:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xDC];
	__asm        jmp    near ptr 0x0054DC9C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x14];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xDC];
	__asm        cmp    eax, ecx;
	__asm        jg     _T1d7;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
_T1d7:
	__asm        jmp    near ptr 0x0054DCCF;

	__asm        jmp    _T1e1;
// LINE 2284:
_T1e1:
	__asm        jmp    near ptr 0x0054DCD9;
}

// FUNCTION: COPTER_D 0x0054dcde
enum cYObject::MoveErrorCode cAvatar::AvatarMove(struct cYObject::MoveInfo* moveinfo) {
	unsigned short yaw;
	enum cYObject::MoveErrorCode movecode;

// LINE 2290:
	__asm        mov    yaw, 0;
// LINE 2291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x178], 0;
	__asm        je     _T30;
// LINE 2292:
	__asm        mov    ecx, this;
	__asm        call   cAvatar::RotateMatrixAndYawForEngine;
// LINE 2293:
	__asm        mov    yaw, 1;
// LINE 2295:
_T30:
	__asm        cmp    moveinfo, 0;
	__asm        jne    _T56;

	__asm        push   0x8C085;
	__asm        push   0x5BB290;
	__asm        push   0x8F7;
	__asm        push   0x5BB2B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2296:
_T56:
	__asm        push   0x10;
	__asm        push   0;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        call   Memory::BlockFill;
	__asm        add    esp, 0xC;
// LINE 2297:
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x168;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryVectorMove;
	__asm        mov    movecode, eax;
// LINE 2298:
	__asm        test   reinterpret_cast<uint32_t>(yaw), 0xFFFF;
	__asm        jne    _Ta9;

	__asm        cmp    movecode, 0;
	__asm        jne    _T12b;
// LINE 2299:
_Ta9:
	__asm        mov    ecx, this;
	__asm        call   cAvatar::ResetView;
// LINE 2300:
	__asm        jmp    near ptr 0x0054DD94;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _Te3;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te3:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x60];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    _T12b;
// LINE 2304:
_T12b:
	__asm        mov    eax, movecode;
	__asm        jmp    near ptr 0x0054DE11;
// LINE 2305:
}

// FUNCTION: COPTER_D 0x0054de18
void cAvatar::Simulate() {
	struct _HELI_DATA* hd;
	struct cYObject::MoveInfo moveinfo;
	enum cYObject::MoveErrorCode movecode;

// LINE 2309:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    _T1aa;
// LINE 2310:
// Block start:
	struct _DYOBJ_INST* dy;
	__asm        cmp    G_camera_mode, 3;
	__asm        jne    _T47;

	__asm        push   0x8C085;
	__asm        push   0x5BB2D8;
	__asm        push   0x906;
	__asm        push   0x5BB30C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2311:
_T47:
	__asm        jmp    near ptr 0x0054DE64;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    dy, eax;
// LINE 2312:
	__asm        cmp    dy, 0;
	__asm        je     _T76;

	__asm        mov    eax, G_uheli;
	__asm        mov    ecx, dy;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        je     _T92;
_T76:
	__asm        push   0x8C085;
	__asm        push   0x5BB330;
	__asm        push   0x908;
	__asm        push   0x5BB338;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2313:
_T92:
	__asm        jmp    near ptr 0x0054DEAF;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _Tc4;

	__asm        push   0x8C085;
	__asm        push   0x5BBD20;
	__asm        push   0x262;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tc4:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _Tf0;

	__asm        push   0x8C085;
	__asm        push   0x5BBCFC;
	__asm        push   0x263;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf0:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA0];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA4];
	__asm        mov    [ebp-0x58], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryMove;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T17b;

	__asm        push   0x8C085;
	__asm        push   0x5BBCCC;
	__asm        push   0x268;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T17b:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054DFBD;
// LINE 2314:
	__asm        jmp    _T75c;
// LINE 2316:
// Block end:
_T1aa:
	__asm        cmp    G_camera_mode, 3;
	__asm        je     _T1d3;

	__asm        push   0x8C085;
	__asm        push   0x5BB35C;
	__asm        push   0x90C;
	__asm        push   0x5BB394;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2317:
_T1d3:
	__asm        mov    ecx, this;
	__asm        call   cAvatar::GetControlInput;
// LINE 2319:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cAvatar::AvatarMove;
	__asm        mov    movecode, eax;
// LINE 2321:
	__asm        inc    sCheckTotedCount;
	__asm        movsx  eax, sCheckTotedCount;
	__asm        cmp    eax, 0xA;
	__asm        jle    _T23d;
// LINE 2322:
	__asm        mov    sCheckTotedCount, 0;
// LINE 2323:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        jne    _T23d;
// LINE 2324:
// Block start:
	class cYObject* person;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        mov    person, eax;
// LINE 2325:
	__asm        cmp    person, 0;
	__asm        jne    _T23d;
// LINE 2326:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2330:
// Block end:
_T23d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   S3PersonGetLandedHeli;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 2332:
	__asm        cmp    hd, 0;
	__asm        je     _T41f;
// LINE 2333:
// Block start:
	class cYObject* person;
	__asm        mov    eax, hd;
	__asm        mov    G_uheli, eax;
// LINE 2334:
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        mov    person, eax;
// LINE 2337:
	__asm        cmp    person, 0;
	__asm        je     _T309;
// LINE 2338:
// Block start:
	class cYObject* obj;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _T2a5;

	__asm        push   0x8C085;
	__asm        push   0x5BB3B8;
	__asm        push   0x922;
	__asm        push   0x5BB3E4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2340:
_T2a5:
	__asm        jmp    near ptr 0x0054E0C2;

	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PutTotedMedVicOn;
	__asm        mov    obj, eax;
// LINE 2341:
	__asm        cmp    obj, 0;
	__asm        jne    _T2e7;

	__asm        push   0x8C085;
	__asm        push   0x5BB408;
	__asm        push   0x925;
	__asm        push   0x5BB410;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2342:
_T2e7:
	__asm        mov    eax, person;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   cYObject::UpdateMission;
// LINE 2345:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2348:
// Block end:
	__asm        jmp    _T41a;
// LINE 2349:
_T309:
	__asm        mov    word ptr [ebp-0x30], 0;
	__asm        jmp    _T318;
_T314:
	__asm        inc    word ptr [ebp-0x30];
_T318:
	__asm        movsx  eax, word ptr [ebp-0x30];
	__asm        cmp    eax, 0x64;
	__asm        jge    _T3c2;

	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T3bd;

	__asm        mov    eax, [ebp-0x34];
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T3b8;

	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T393;

	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x38], ax;
	__asm        jmp    _T3a6;

	__asm        jmp    _T39e;
_T393:
	__asm        mov    word ptr [ebp-0x38], 0xFFFF;
	__asm        jmp    _T3a6;
_T39e:
	__asm        mov    ax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], ax;
_T3a6:
	__asm        jmp    near ptr 0x0054E1C3;

	__asm        movsx  eax, word ptr [ebp-0x38];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T3b8:
	__asm        jmp    _T3bd;
_T3bd:
	__asm        jmp    _T314;
_T3c2:
	__asm        jmp    near ptr 0x0054E1DF;
// LINE 2350:
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2351:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
// LINE 2352:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 0;
// LINE 2356:
	__asm        mov    eax, hd;
	__asm        mov    dword ptr [eax+8], 1;
// LINE 2357:
	__asm        mov    G_camera_mode, 0;
// LINE 2358:
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliNextFrame;
	__asm        add    esp, 4;
// LINE 2359:
	__asm        jmp    _T75c;
// LINE 2362:
// Block end:
_T41a:
	__asm        jmp    _T66a;
_T41f:
	__asm        cmp    movecode, 5;
	__asm        jne    _T66a;
// LINE 2363:
// Block start:
	class cYObject* person;
	__asm        mov    eax, moveinfo.dyBlock;
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    person, eax;
// LINE 2364:
	__asm        cmp    person, 0;
	__asm        jne    _T45e;

	__asm        push   0x8C085;
	__asm        push   0x5BB434;
	__asm        push   0x93C;
	__asm        push   0x5BB448;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2365:
_T45e:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        jne    _T66a;

	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        test   eax, eax;
	__asm        jne    _T66a;
// LINE 2366:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, person;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, person;
	__asm        call   cYObject::Unlink;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, person;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x48], al;
	__asm        mov    eax, person;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x4C], al;
	__asm        jmp    near ptr 0x0054E2E4;

	__asm        mov    eax, person;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _T4f9;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4f9:
	__asm        mov    al, [ebp-0x4C];
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0x48];
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054E32E;

	__asm        mov    ecx, person;
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x0054E33B;
// LINE 2367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    ecx, person;
	__asm        call   cYObject::SetMaster;
// LINE 2368:
	__asm        jmp    near ptr 0x0054E34F;

	__asm        jmp    near ptr 0x0054E354;

	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, person;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        cmp    eax, 0x322;
	__asm        je     _T5ba;

	__asm        jmp    near ptr 0x0054E37F;

	__asm        jmp    near ptr 0x0054E384;

	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, person;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     _T59f;

	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T59f:
	__asm        push   0x322;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, person;
	__asm        call   TreeSim::Gosub;
	__asm        jmp    _T5bf;

	__asm        jmp    _T5bf;
_T5ba:
	__asm        jmp    _T5bf;
// LINE 2369:
_T5bf:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T5eb;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5eb:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T611;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x546F7465;
	__asm        je     _T659;
_T611:
	__asm        push   0x546F7465;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T659;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T659:
	__asm        jmp    near ptr 0x0054E476;
// LINE 2370:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 0;
// LINE 2379:
// Block end:
_T66a:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0x10000;
	__asm        jge    _T69b;

	__asm        cmp    dword ptr [ebp-0x44], 0xFFFF0000;
	__asm        jle    _T69b;

	__asm        mov    word ptr [ebp-0x40], 0;
	__asm        jmp    _T6c6;
_T69b:
	__asm        cmp    dword ptr [ebp-0x44], 0xD0000;
	__asm        jge    _T6c0;

	__asm        cmp    dword ptr [ebp-0x44], 0xFFF30000;
	__asm        jle    _T6c0;

	__asm        mov    word ptr [ebp-0x40], 4;
	__asm        jmp    _T6c6;
_T6c0:
	__asm        mov    word ptr [ebp-0x40], 8;
_T6c6:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::DynEffects;
	__asm        jmp    near ptr 0x0054E4F7;
// LINE 2380:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T710;

	__asm        push   0x8C085;
	__asm        push   0x5BBCAC;
	__asm        push   0x27F;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
	__asm        jmp    _T757;
_T710:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xDC];
	__asm        jmp    near ptr 0x0054E537;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x14];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xDC];
	__asm        cmp    eax, ecx;
	__asm        jg     _T74d;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
_T74d:
	__asm        jmp    near ptr 0x0054E56A;

	__asm        jmp    _T757;
// LINE 2381:
_T757:
	__asm        jmp    _T75c;
_T75c:
}

// FUNCTION: COPTER_D 0x0054e579
void cYObject::DynEffects(short speed, enum cYObject::MoveErrorCode movecode, struct cYObject::MoveInfo* moveinfo) {
// LINE 2406:
	__asm        mov    eax, movecode;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T1525;
// LINE 2408:
	__asm        movsx  eax, speed;
	__asm        test   eax, eax;
	__asm        je     _T3f;

	__asm        push   0x8C085;
	__asm        push   0x5BB46C;
	__asm        push   0x968;
	__asm        push   0x5BB474;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2409:
_T3f:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T1aa;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T10b;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T93;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T93:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tb9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T101;
_Tb9:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T101;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T101:
	__asm        jmp    near ptr 0x0054E67F;

	__asm        jmp    _T1aa;
_T10b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T137;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T137:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T15d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T1a5;
_T15d:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T1a5;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1a5:
	__asm        jmp    _T1aa;
// LINE 2410:
_T1aa:
	__asm        jmp    _T1569;
// LINE 2413:
	__asm        movsx  eax, speed;
	__asm        test   eax, eax;
	__asm        jne    _T35c;
// LINE 2414:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T326;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T287;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T20f;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T20f:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T235;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T27d;
_T235:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T27d;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T27d:
	__asm        jmp    near ptr 0x0054E7FB;

	__asm        jmp    _T326;
_T287:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T2b3;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2b3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T2d9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T321;
_T2d9:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T321;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T321:
	__asm        jmp    _T326;
// LINE 2415:
_T326:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, 0xE;
	__asm        jne    _T357;
// LINE 2416:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T357;

	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2418:
_T357:
	__asm        jmp    _T680;
_T35c:
	__asm        movsx  eax, speed;
	__asm        cmp    eax, 7;
	__asm        jge    _T4f7;
// LINE 2419:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T4d4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T435;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T3bd;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3bd:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T3e3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4467526E;
	__asm        je     _T42b;
_T3e3:
	__asm        push   0x4467526E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T42b;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T42b:
	__asm        jmp    near ptr 0x0054E9A9;

	__asm        jmp    _T4d4;
_T435:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T461;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T461:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T487;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x3157616C;
	__asm        je     _T4cf;
_T487:
	__asm        push   0x3157616C;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T4cf;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4cf:
	__asm        jmp    _T4d4;
// LINE 2420:
_T4d4:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T4f2;

	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2422:
_T4f2:
	__asm        jmp    _T680;
// LINE 2423:
_T4f7:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T662;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T5c3;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T54b;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T54b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T571;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4467526E;
	__asm        je     _T5b9;
_T571:
	__asm        push   0x4467526E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T5b9;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5b9:
	__asm        jmp    near ptr 0x0054EB37;

	__asm        jmp    _T662;
_T5c3:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T5ef;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5ef:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T615;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x3152756E;
	__asm        je     _T65d;
_T615:
	__asm        push   0x3152756E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T65d;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T65d:
	__asm        jmp    _T662;
// LINE 2424:
_T662:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T680;

	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2426:
_T680:
	__asm        jmp    _T1569;
// LINE 2429:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T7f0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T751;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T6d9;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T6d9:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T6ff;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T747;
_T6ff:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T747;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T747:
	__asm        jmp    near ptr 0x0054ECC5;

	__asm        jmp    _T7f0;
_T751:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T77d;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T77d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T7a3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4661436C;
	__asm        je     _T7eb;
_T7a3:
	__asm        push   0x4661436C;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T7eb;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7eb:
	__asm        jmp    _T7f0;
// LINE 2430:
_T7f0:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T80e;

	__asm        push   0;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2431:
_T80e:
	__asm        jmp    _T1569;
// LINE 2434:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T97e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T8df;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T867;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T867:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T88d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T8d5;
_T88d:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T8d5;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8d5:
	__asm        jmp    near ptr 0x0054EE53;

	__asm        jmp    _T97e;
_T8df:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T90b;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T90b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T931;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x57686F61;
	__asm        je     _T979;
_T931:
	__asm        push   0x57686F61;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T979;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T979:
	__asm        jmp    _T97e;
// LINE 2435:
_T97e:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T99c;

	__asm        push   0;
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2436:
_T99c:
	__asm        jmp    _T1569;
// LINE 2438:
	__asm        cmp    moveinfo, 0;
	__asm        je     _T9b8;

	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    _T9d4;
_T9b8:
	__asm        push   0x8C085;
	__asm        push   0x5BB498;
	__asm        push   0x986;
	__asm        push   0x5BB4C4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T9d4:
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 2439:
	__asm        jmp    near ptr 0x0054EF5B;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2440:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2441:
	__asm        push   5;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T1007;
// LINE 2443:
_Ta42:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _Tbad;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _Tb0e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Ta96;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta96:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tabc;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _Tb04;
_Tabc:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tb04;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb04:
	__asm        jmp    near ptr 0x0054F082;

	__asm        jmp    _Tbad;
_Tb0e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Tb3a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb3a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tb60;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x32476162;
	__asm        je     _Tba8;
_Tb60:
	__asm        push   0x32476162;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tba8;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tba8:
	__asm        jmp    _Tbad;
// LINE 2444:
_Tbad:
	__asm        jmp    _T102a;
// LINE 2446:
_Tbb2:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _Td1d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _Tc7e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Tc06;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tc06:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tc2c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _Tc74;
_Tc2c:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tc74;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tc74:
	__asm        jmp    near ptr 0x0054F1F2;

	__asm        jmp    _Td1d;
_Tc7e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Tcaa;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tcaa:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tcd0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x32476162;
	__asm        je     _Td18;
_Tcd0:
	__asm        push   0x32476162;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Td18;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td18:
	__asm        jmp    _Td1d;
// LINE 2447:
_Td1d:
	__asm        jmp    _T102a;
// LINE 2449:
_Td22:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _Te8d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _Tdee;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Td76;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td76:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Td9c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _Tde4;
_Td9c:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tde4;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tde4:
	__asm        jmp    near ptr 0x0054F362;

	__asm        jmp    _Te8d;
_Tdee:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Te1a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te1a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Te40;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x426F7750;
	__asm        je     _Te88;
_Te40:
	__asm        push   0x426F7750;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Te88;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te88:
	__asm        jmp    _Te8d;
// LINE 2450:
_Te8d:
	__asm        jmp    _T102a;
// LINE 2452:
_Te92:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _Tffd;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _Tf5e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Tee6;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tee6:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tf0c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _Tf54;
_Tf0c:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tf54;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf54:
	__asm        jmp    near ptr 0x0054F4D2;

	__asm        jmp    _Tffd;
_Tf5e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Tf8a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf8a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _Tfb0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x48697048;
	__asm        je     _Tff8;
_Tfb0:
	__asm        push   0x48697048;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tff8;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tff8:
	__asm        jmp    _Tffd;
// LINE 2453:
_Tffd:
	__asm        jmp    _T102a;
// LINE 2454:
	__asm        jmp    _T102a;
_T1007:
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Ta42;

	__asm        cmp    dword ptr [ebp-0x10], 1;
	__asm        je     _Tbb2;

	__asm        cmp    dword ptr [ebp-0x10], 3;
	__asm        je     _Td22;

	__asm        jmp    _Te92;
// LINE 2455:
_T102a:
	__asm        push   9;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T117f;
// LINE 2457:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T105d;

	__asm        push   0;
	__asm        push   0xA;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2458:
_T105d:
	__asm        jmp    _T11b3;
// LINE 2460:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T1080;

	__asm        push   0;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2461:
_T1080:
	__asm        jmp    _T11b3;
// LINE 2463:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T10a3;

	__asm        push   0;
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2464:
_T10a3:
	__asm        jmp    _T11b3;
// LINE 2466:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T10c6;

	__asm        push   0;
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2467:
_T10c6:
	__asm        jmp    _T11b3;
// LINE 2469:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T10e9;

	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2470:
_T10e9:
	__asm        jmp    _T11b3;
// LINE 2472:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T110c;

	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2473:
_T110c:
	__asm        jmp    _T11b3;
// LINE 2475:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T112f;

	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2476:
_T112f:
	__asm        jmp    _T11b3;
// LINE 2478:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T1152;

	__asm        push   0;
	__asm        push   7;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2479:
_T1152:
	__asm        jmp    _T11b3;
// LINE 2481:
_T1157:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T1175;

	__asm        push   0;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2482:
_T1175:
	__asm        jmp    _T11b3;
// LINE 2483:
	__asm        jmp    _T11b3;
_T117f:
	__asm        cmp    dword ptr [ebp-0x14], 7;
	__asm        ja     _T1157;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    SwitchPointers5568268[0][eax*4];
// Switch pointers
// LINE 2484:
_T11b3:
	__asm        jmp    _T1569;
// LINE 2486:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T1323;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T1284;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T120c;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T120c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T1232;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T127a;
_T1232:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T127a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T127a:
	__asm        jmp    near ptr 0x0054F7F8;

	__asm        jmp    _T1323;
_T1284:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T12b0;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T12b0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T12d6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T131e;
_T12d6:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T131e;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T131e:
	__asm        jmp    _T1323;
// LINE 2487:
_T1323:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T1341;

	__asm        push   0;
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2488:
_T1341:
	__asm        jmp    _T1569;
// LINE 2491:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T14b1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T1412;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T139a;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T139a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T13c0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     _T1408;
_T13c0:
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T1408;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1408:
	__asm        jmp    near ptr 0x0054F986;

	__asm        jmp    _T14b1;
_T1412:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T143e;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T143e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T1464;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T14ac;
_T1464:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T14ac;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T14ac:
	__asm        jmp    _T14b1;
// LINE 2492:
_T14b1:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     _T14cf;

	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
// LINE 2493:
_T14cf:
	__asm        jmp    _T1569;
// LINE 2495:
_T14d4:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     _T151b;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    _T150e;

	__asm        push   0x44675374;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetAnim;
	__asm        jmp    _T151b;
_T150e:
	__asm        push   0x4E6F4D6F;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetAnim;
// LINE 2496:
_T151b:
	__asm        jmp    _T1569;
// LINE 2497:
	__asm        jmp    _T1569;
_T1525:
	__asm        cmp    dword ptr [ebp-0xC], 0xB;
	__asm        ja     _T14d4;

	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    SwitchPointers5569202[0][eax*4];
// Switch pointers
// LINE 2498:
_T1569:
	__asm        jmp    near ptr 0x0054FAE7;
}

// FUNCTION: COPTER_D 0x0054faee
void cAvatar::ResetView() {
	unsigned char figDir;
	struct Point3D view;
	int32_t yRot;

// LINE 2506:
	__asm        call   S3ViewerControl;
// LINE 2508:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        mov    eax, Viewer.pos.x;
	__asm        mov    [ebp-0x2C], eax;
	__asm        fisub  dword ptr [ebp-0x2C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   view.x;
// LINE 2509:
	__asm        mov    eax, Viewer.pos.y;
	__asm        mov    [ebp-0x30], eax;
	__asm        fild   dword ptr [ebp-0x30];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x34], eax;
	__asm        fisub  dword ptr [ebp-0x34];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   view.y;
// LINE 2510:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x38], eax;
	__asm        fild   dword ptr [ebp-0x38];
	__asm        mov    eax, Viewer.pos.z;
	__asm        mov    [ebp-0x3C], eax;
	__asm        fisub  dword ptr [ebp-0x3C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fst    view.z;
// LINE 2511:
	__asm        fmul   qword ptr ds:[0x593540];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        fld    view.x;
	__asm        fmul   qword ptr ds:[0x593540];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        call   0x004D20B1;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   MTAngleBounds;
	__asm        add    esp, 4;
	__asm        mov    yRot, eax;
// LINE 2512:
	__asm        mov    eax, yRot;
	__asm        mov    [ebp-0x40], eax;
	__asm        fild   dword ptr [ebp-0x40];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fcomp  qword ptr ds:[0x593548];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _Tc7;
// LINE 2513:
	__asm        add    yRot, 0xE100000;
// LINE 2517:
_Tc7:
	__asm        mov    ebx, 2;
	__asm        mov    eax, yRot;
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fadd   qword ptr ds:[0x593550];
	__asm        fdiv   qword ptr ds:[0x593558];
	__asm        call   0x0056EBE8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        sub    ebx, ecx;
	__asm        mov    figDir, bl;
// LINE 2521:
	__asm        xor    eax, eax;
	__asm        mov    al, figDir;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2522:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x174], 0;
	__asm        jge    _T131;
// LINE 2523:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        sub    eax, 4;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2525:
_T131:
	__asm        call   SetIdealCameraPos;
// LINE 2526:
	__asm        jmp    near ptr 0x0054FC29;
}

// FUNCTION: COPTER_D 0x0054fc2e
void cYObject::SetCellAndLoc(struct Point3d loc, unsigned char x, unsigned char y) {
	short loccellx;
	short loccelly;

// LINE 2537:
	__asm        mov    eax, loc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    loccellx, ax;
// LINE 2538:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, loc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    loccelly, ax;
// LINE 2549:
	__asm        mov    eax, reinterpret_cast<uint32_t>(loccelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(loccellx);
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 2551:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2552:
	__asm        lea    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2553:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T97;

	__asm        push   0x8C085;
	__asm        push   0x5BB4E8;
	__asm        push   0x9F9;
	__asm        push   0x5BB520;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2554:
_T97:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x0054FCF2;
// LINE 2555:
	__asm        jmp    near ptr 0x0054FCF7;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _Tf6;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tf6:
	__asm        mov    al, reinterpret_cast<uint8_t>(loccellx);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, reinterpret_cast<uint8_t>(loccelly);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054FD41;
// LINE 2556:
	__asm        jmp    near ptr 0x0054FD46;
}

// FUNCTION: COPTER_D 0x0054fd4d
void cYObject::SetCellAndLoc(unsigned char x, unsigned char y, int32_t dx, int32_t dz) {
	struct Point3d loc;

// LINE 2561:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dz;
	__asm        mov    [ebp-0x44], eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        lea    ecx, [ebp-0x40];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054FDBD;

	__asm        lea    eax, [ebp-0x40];
	__asm        lea    ecx, [ebp-0x34];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x34];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054FDEE;

	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2563:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetCellAndLoc;
// LINE 2567:
	__asm        jmp    near ptr 0x0054FE3B;
}

// FUNCTION: COPTER_D 0x0054fe42
void cYObject::SetMissionType(enum MissionType type) {
	static const <NoType> = { /* <data@0x0054ff24> */ };

// LINE 2571:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BB544;
	__asm        push   0xA0B;
	__asm        push   0x5BB588;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2572:
_T3a:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 2573:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 0xFFFE;
// LINE 2574:
	__asm        mov    eax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], ax;
// LINE 2575:
	__asm        mov    eax, type;
	__asm        mov    ax, cYObject::sInitBhav[eax*2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], ax;
// LINE 2577:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFC], 0xFFFF;
// LINE 2579:
	__asm        mov    eax, type;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _Tb2;
// LINE 2585:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 0;
// LINE 2586:
	__asm        jmp    _Ted;
// LINE 2589:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 1;
// LINE 2590:
	__asm        jmp    _Ted;
// LINE 2594:
	__asm        jmp    _Ted;
_Tb2:
	__asm        sub    dword ptr [ebp-8], 3;
	__asm        cmp    dword ptr [ebp-8], 0xA;
	__asm        ja     _Ted;

	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5570340[0][eax];
	__asm        jmp    SwitchPointers5570324[0][ecx*4];
// Switch pointers
// Switch table
// LINE 2596:
_Ted:
	__asm        cmp    type, 0;
	__asm        jne    _T136;
// LINE 2597:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
// LINE 2598:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xEC], 0;
// LINE 2599:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF6], 0;
// LINE 2600:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF8], 1;
// LINE 2601:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFA], 0;
// LINE 2603:
	__asm        jmp    _T14e;
// LINE 2604:
_T136:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF8], 0;
// LINE 2605:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFA], 1;
// LINE 2607:
_T14e:
	__asm        cmp    type, 6;
	__asm        jne    _T169;
// LINE 2608:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xA;
	__asm        jmp    _T169;
// LINE 2611:
_T169:
	__asm        jmp    near ptr 0x0054FFB0;
}

// FUNCTION: COPTER_D 0x0054ffb7
void cYObject::SetPersonType(enum PersonType type) {
	short count;
	short freqadj;
	short frequnit;
	unsigned long bodyname;
	short faceindex;

// LINE 2616:
	__asm        mov    count, 0;
// LINE 2617:
	__asm        cmp    type, 0xFFFFFFFF;
	__asm        jne    _T9b;
// LINE 2619:
_T1c:
	__asm        push   0x12;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    type, eax;
// LINE 2621:
	__asm        cmp    type, 0x11;
	__asm        je     _T5e;

	__asm        cmp    type, 0x10;
	__asm        je     _T5e;

	__asm        cmp    type, 0xE;
	__asm        je     _T5e;

	__asm        cmp    type, 0xD;
	__asm        je     _T5e;

	__asm        cmp    type, 0xC;
	__asm        jne    _T91;
_T5e:
	__asm        push   0x1E;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T91;

	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 5;
	__asm        jge    _T91;
// LINE 2622:
	__asm        jmp    _T1c;
// LINE 2623:
_T91:
	__asm        jmp    _T9b;
// LINE 2624:
	__asm        jmp    _T1c;
// LINE 2626:
_T9b:
	__asm        mov    eax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD6], ax;
// LINE 2627:
	__asm        mov    freqadj, 0;
	__asm        mov    frequnit, 0x1E;
// LINE 2628:
	__asm        mov    eax, type;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T309;
// LINE 2630:
	__asm        mov    bodyname, 0x426C6F6E;
// LINE 2631:
	__asm        mov    faceindex, 7;
// LINE 2632:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    freqadj, ax;
// LINE 2633:
	__asm        jmp    _T365;
// LINE 2635:
	__asm        mov    bodyname, 0x32626C6F;
// LINE 2636:
	__asm        mov    faceindex, 5;
// LINE 2637:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2638:
	__asm        jmp    _T365;
// LINE 2640:
	__asm        mov    bodyname, 0x576F6D61;
// LINE 2641:
	__asm        mov    faceindex, 5;
// LINE 2642:
	__asm        movsx  eax, frequnit;
	__asm        shl    eax, 2;
	__asm        mov    freqadj, ax;
// LINE 2643:
	__asm        jmp    _T365;
// LINE 2645:
	__asm        mov    bodyname, 0x32776F6D;
// LINE 2646:
	__asm        mov    faceindex, 7;
// LINE 2647:
	__asm        movsx  eax, frequnit;
	__asm        shl    eax, 2;
	__asm        mov    freqadj, ax;
// LINE 2648:
	__asm        jmp    _T365;
// LINE 2650:
	__asm        mov    bodyname, 0x4368696C;
// LINE 2651:
	__asm        mov    faceindex, 4;
// LINE 2652:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        mov    freqadj, ax;
// LINE 2653:
	__asm        jmp    _T365;
// LINE 2655:
	__asm        mov    bodyname, 0x356D616E;
// LINE 2656:
	__asm        mov    faceindex, 8;
// LINE 2657:
	__asm        mov    freqadj, 0;
// LINE 2658:
	__asm        jmp    _T365;
// LINE 2660:
	__asm        mov    bodyname, 0x6661746D;
// LINE 2661:
	__asm        mov    faceindex, 6;
// LINE 2662:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2663:
	__asm        jmp    _T365;
// LINE 2665:
	__asm        mov    bodyname, 0x424C5545;
// LINE 2666:
	__asm        mov    faceindex, 6;
// LINE 2667:
	__asm        movsx  eax, frequnit;
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2668:
	__asm        jmp    _T365;
// LINE 2670:
	__asm        mov    bodyname, 0x53554954;
// LINE 2671:
	__asm        mov    faceindex, 9;
// LINE 2672:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2673:
	__asm        jmp    _T365;
// LINE 2675:
	__asm        mov    bodyname, 0x53484144;
// LINE 2676:
	__asm        mov    faceindex, 6;
// LINE 2677:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    freqadj, ax;
// LINE 2678:
	__asm        jmp    _T365;
// LINE 2680:
	__asm        mov    bodyname, 0x352E356D;
// LINE 2681:
	__asm        mov    faceindex, 4;
// LINE 2682:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2683:
	__asm        jmp    _T365;
// LINE 2685:
	__asm        mov    bodyname, 0x32444F47;
// LINE 2686:
	__asm        mov    faceindex, 6;
// LINE 2687:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    freqadj, ax;
// LINE 2688:
	__asm        jmp    _T365;
// LINE 2690:
	__asm        mov    bodyname, 0x42616467;
// LINE 2691:
	__asm        mov    faceindex, 4;
// LINE 2692:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*8];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2693:
	__asm        jmp    _T365;
// LINE 2695:
	__asm        mov    bodyname, 0x4B6F7070;
// LINE 2696:
	__asm        mov    faceindex, 1;
// LINE 2697:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2698:
	__asm        jmp    _T365;
// LINE 2700:
	__asm        mov    bodyname, 0x46697265;
// LINE 2701:
	__asm        mov    faceindex, 2;
// LINE 2702:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2703:
	__asm        jmp    _T365;
// LINE 2705:
	__asm        mov    bodyname, 0x4D656469;
// LINE 2706:
	__asm        mov    faceindex, 3;
// LINE 2707:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2708:
	__asm        jmp    _T365;
// LINE 2710:
	__asm        mov    bodyname, 0x4E657373;
// LINE 2711:
	__asm        mov    faceindex, 4;
// LINE 2712:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2713:
	__asm        jmp    _T365;
// LINE 2715:
	__asm        mov    bodyname, 0x436F7777;
// LINE 2716:
	__asm        mov    faceindex, 4;
// LINE 2717:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2718:
	__asm        jmp    _T365;
// LINE 2723:
_T2e8:
	__asm        push   0x8C085;
	__asm        push   0x5BB5AC;
	__asm        push   0xAA3;
	__asm        push   0x5BB5C0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2724:
	__asm        jmp    _T365;
_T309:
	__asm        cmp    dword ptr [ebp-0x44], 0x11;
	__asm        ja     _T2e8;

	__asm        mov    eax, [ebp-0x44];
	__asm        jmp    SwitchPointers5571284[0][eax*4];
// Switch pointers
// LINE 2725:
_T365:
	__asm        mov    ax, freqadj;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x108], ax;
// LINE 2726:
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jl     _T396;

	__asm        cmp    dword ptr [ebp-0x1C], 0x20;
	__asm        jb     _T3af;
_T396:
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BBDA4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3af:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _T3c7;

	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T3ce;
_T3c7:
	__asm        mov    dword ptr [ebp-0x28], 0;
_T3ce:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T3eb;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T3f2;
_T3eb:
	__asm        mov    dword ptr [ebp-0x20], 0;
_T3f2:
	__asm        jmp    near ptr 0x005503AE;

	__asm        jmp    near ptr 0x005503B3;

	__asm        jmp    _T419;
_T401:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T414;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
_T414:
	__asm        jmp    _T419;
_T419:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T439;

	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T4cd;

	__asm        jmp    _T44d;

	__asm        jmp    _T443;
_T439:
	__asm        jmp    _T4cd;

	__asm        jmp    _T44d;
_T443:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T4cd;
_T44d:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T469;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T475;

	__asm        jmp    _T475;
_T469:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T475;
_T475:
	__asm        jmp    near ptr 0x00550431;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x1C];
	__asm        shr    eax, cl;
	__asm        mov    edx, bodyname;
	__asm        mov    cl, [ebp-0x1C];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    _T4c8;

	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T4b1;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T4c3;

	__asm        jmp    _T4bd;
_T4b1:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T4c3;
_T4bd:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
_T4c3:
	__asm        jmp    _T4d9;
_T4c8:
	__asm        jmp    _T401;
_T4cd:
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    _T4d9;
_T4d9:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T511;

	__asm        push   0x8C085;
	__asm        push   0x5BBD68;
	__asm        push   0x27A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T511:
	__asm        jmp    near ptr 0x005504CD;
// LINE 2727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T542;

	__asm        push   0x8C085;
	__asm        push   0x5BB5E4;
	__asm        push   0xAA7;
	__asm        push   0x5BB5F8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2729:
_T542:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T57d;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     _T57d;
// LINE 2730:
	__asm        mov    ax, faceindex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], ax;
	__asm        jmp    _T57d;
// LINE 2731:
_T57d:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF0];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T5a4;
// LINE 2732:
	__asm        push   0xE;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF0], ax;
// LINE 2735:
_T5a4:
	__asm        jmp    near ptr 0x00550560;
}

// FUNCTION: COPTER_D 0x00550567
void cYObject::DestroyObjects() {
// LINE 2760:
	__asm        xor    eax, eax;
	__asm        mov    ax, cYObject::sInited;
	__asm        test   eax, eax;
	__asm        je     _T12a;
// LINE 2763:
// Block start:
	short cnt;
	__asm        mov    cnt, 0;
	__asm        jmp    _T28;
_T24:
	__asm        inc    cnt;
_T28:
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T7c;
// LINE 2764:
	__asm        movsx  eax, cnt;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        je     _T77;

	__asm        movsx  eax, cnt;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T77;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    _T77;
// LINE 2765:
_T77:
	__asm        jmp    _T24;
_T7c:
	__asm        mov    cYObject::sInited, 0;
// LINE 2767:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatFile::ValidFile;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Ta4;

	__asm        mov    ecx, 0x636BB8;
	__asm        call   FlatResFile::Close;
// LINE 2770:
_Ta4:
	__asm        cmp    cYObject::sLanguage, 0;
	__asm        je     _Te7;

	__asm        mov    eax, cYObject::sLanguage;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _Te7;

	__asm        mov    ecx, [ebp-0x10];
	__asm        call   YObjLang::~YObjLang;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00550649;

	__asm        jmp    _Te7;
// LINE 2771:
_Te7:
	__asm        cmp    cYObject::sBehavior, 0;
	__asm        je     _T12a;

	__asm        mov    eax, cYObject::sBehavior;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T12a;

	__asm        mov    ecx, [ebp-0x18];
	__asm        call   Behavior::~Behavior;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055068C;

	__asm        jmp    _T12a;
// LINE 2774:
// Block end:
_T12a:
	__asm        jmp    near ptr 0x00550696;
}

// FUNCTION: COPTER_D 0x0055069b
void cYObject::Link() {
	struct _CELL_INFO* ncptr;

// LINE 2780:
	__asm        jmp    near ptr 0x005506AC;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _T3e;

	__asm        push   0x8C085;
	__asm        push   0x5BB61C;
	__asm        push   0xADC;
	__asm        push   0x5BB638;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2782:
_T3e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T87;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T82;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T82:
	__asm        jmp    _Tb7;
_T87:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Tb7;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb7:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Td5;

	__asm        jmp    _T103;

	__asm        jmp    _Td5;
_Td5:
	__asm        jmp    _Te7;

	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    _T103;
_Te7:
	__asm        push   0x8C085;
	__asm        push   0x5BB65C;
	__asm        push   0xADE;
	__asm        push   0x5BB67C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2783:
_T103:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x89];
	__asm        mov    eax, G_omap[0][0][ecx+edx*4];
	__asm        mov    ncptr, eax;
// LINE 2787:
	__asm        mov    eax, ncptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 2788:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, ncptr;
	__asm        mov    [ecx+0x10], eax;
// LINE 2790:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 1;
// LINE 2791:
	__asm        jmp    near ptr 0x005507E7;
}

// FUNCTION: COPTER_D 0x005507ec
void cYObject::Unlink() {
	struct _DYOBJ_INST** dyptrptr;
	struct _CELL_INFO* cptr;

// LINE 2798:
	__asm        jmp    near ptr 0x005507FD;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T3e;

	__asm        push   0x8C085;
	__asm        push   0x5BB6A0;
	__asm        push   0xAEE;
	__asm        push   0x5BB6BC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2799:
_T3e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x88];
	__asm        shl    edx, 0xA;
	__asm        mov    eax, G_omap[0][0][edx+ecx*4];
	__asm        mov    cptr, eax;
// LINE 2800:
	__asm        mov    eax, cptr;
	__asm        add    eax, 0x10;
	__asm        mov    dyptrptr, eax;
// LINE 2801:
_T6a:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Ta4;
// LINE 2803:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, dyptrptr;
	__asm        cmp    eax, [ecx];
	__asm        jne    _T97;
// LINE 2805:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, dyptrptr;
	__asm        mov    [ecx], eax;
// LINE 2806:
	__asm        jmp    _Ta4;
// LINE 2808:
_T97:
	__asm        mov    eax, dyptrptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptrptr, eax;
// LINE 2809:
	__asm        jmp    _T6a;
// LINE 2812:
_Ta4:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 0;
// LINE 2813:
	__asm        jmp    near ptr 0x0055089E;
}

// FUNCTION: COPTER_D 0x005508a3
class cAvatar* cAvatar::MakeAvatar() {
	class cAvatar* avatar;
	struct Point3d p;

	// Function registers exception cleanup function at 0x005509b2
// LINE 2818:
	__asm        mov    p.x, 0;
	__asm        mov    p.y, 0;
	__asm        mov    p.z, 0;
// LINE 2819:
	__asm        push   0x180;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _Tdb;

	__asm        lea    eax, p.x;
	__asm        lea    ecx, [ebp-0x30];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x34], eax;
	__asm        push   0x7D00;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, cYObject::sBehavior;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   cYObject::cYObject;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0x5935A8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0x14], 0x593590;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    word ptr [eax+0x9C], 0;
	__asm        jmp    near ptr 0x0055095C;

	__asm        jmp    near ptr 0x00550961;

	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _Td6;
_L56436:
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   cYObject::~cYObject;
	__asm        ret;
_Td6:
	__asm        jmp    _Te2;
_Tdb:
	__asm        mov    dword ptr [ebp-0x24], 0;
_Te2:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    avatar, eax;
// LINE 2820:
	__asm        mov    eax, avatar;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, avatar;
	__asm        call   dword ptr [eax+0x18];
// LINE 2821:
	__asm        mov    eax, avatar;
	__asm        jmp    _T119;
// LINE 2822:
_L56432:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L56431:
	__asm        mov    eax, 0x595E00;
	__asm        jmp    near ptr 0x0056F590;
_T119:
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
}

// FUNCTION: COPTER_D 0x005509cb
short cYObject::MakeNewObject(short type, struct Point3d loc, class Behavior* behavior) {
	short id;

	// Function registers exception cleanup function at 0x00550b17
// LINE 2826:
	__asm        xor    eax, eax;
	__asm        mov    ax, cYObject::sInited;
	__asm        test   eax, eax;
	__asm        jne    _T4a;

	__asm        push   0x8C085;
	__asm        push   0x5BB6E0;
	__asm        push   0xB0A;
	__asm        push   0x5BB6F8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2828:
_T4a:
	__asm        mov    id, 0;
	__asm        jmp    _T59;
_T55:
	__asm        inc    id;
_T59:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T8c;
// LINE 2829:
	__asm        movsx  eax, id;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        je     _T82;

	__asm        jmp    _T55;
// LINE 2830:
	__asm        jmp    _T87;
_T82:
	__asm        jmp    _T8c;
// LINE 2831:
_T87:
	__asm        jmp    _T55;
// LINE 2833:
_T8c:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        je     _T11a;
// LINE 2834:
// Block start:
	class cYObject** newObj;
	__asm        movsx  eax, id;
	__asm        lea    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    newObj, eax;
// LINE 2835:
	__asm        push   0x168;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _Tf0;

	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, behavior;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(type);
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   cYObject::cYObject;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tf7;
_Tf0:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_Tf7:
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, newObj;
	__asm        mov    [ecx], eax;
// LINE 2836:
	__asm        mov    eax, newObj;
	__asm        mov    ecx, newObj;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x18];
// LINE 2837:
// Block end:
	__asm        jmp    _T136;
// LINE 2838:
_T11a:
	__asm        push   0x8C085;
	__asm        push   0x5BB71C;
	__asm        push   0xB16;
	__asm        push   0x5BB738;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2840:
_T136:
	__asm        mov    ax, id;
	__asm        jmp    _T156;
// LINE 2841:
_L56449:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        ret;
_L56448:
	__asm        mov    eax, 0x595E30;
	__asm        jmp    near ptr 0x0056F590;
_T156:
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
}

// FUNCTION: COPTER_D 0x00550b30
void cYObject::InitForEngine(short id) {
	struct VRFaceInfo finfo;
	int32_t face;

// LINE 2845:
	__asm        push   0x16;
	__asm        push   1;
	__asm        call   VRObjCreatePoint;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 2846:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    _T47;

	__asm        push   0x8C085;
	__asm        push   0x5BB75C;
	__asm        push   0xB1E;
	__asm        push   0x5BB770;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2848:
_T47:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2849:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2850:
	__asm        mov    eax, G_main_mp;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 2853:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2855:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 2856:
	__asm        cmp    finfo.Plotter, 0x16;
	__asm        jne    _Tc8;
// LINE 2857:
	__asm        movsx  eax, id;
	__asm        mov    finfo.Bitmap, eax;
// LINE 2858:
	__asm        and    finfo.Attribute, 0x7FFFFFFF;
// LINE 2859:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 2862:
_Tc8:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x30], 8;
// LINE 2863:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
// LINE 2864:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 6;
// LINE 2866:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2869:
	__asm        jmp    near ptr 0x00550C29;
}

// FUNCTION: COPTER_D 0x00550c30
void cYObject::KillObject(short id) {
	class cYObject* obj;

// LINE 2873:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T25;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Ta1;
_T25:
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     _T3e;

	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T5a;
_T3e:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5a:
	__asm        movsx  eax, id;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T88;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T88:
	__asm        movsx  eax, id;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Ta1;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 2874:
_Ta1:
	__asm        cmp    obj, 0;
	__asm        jne    _Tc7;

	__asm        push   0x8C085;
	__asm        push   0x5BB794;
	__asm        push   0xB3A;
	__asm        push   0x5BB7B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2875:
_Tc7:
	__asm        cmp    obj, 0;
	__asm        jne    _Td6;

	__asm        jmp    _T118;
// LINE 2877:
_Td6:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        mov    cYObject::sObjects[0][eax*4], 0;
// LINE 2879:
	__asm        mov    eax, obj;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T113;

	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    _T113;
// LINE 2880:
_T113:
	__asm        jmp    _T118;
_T118:
}

// FUNCTION: COPTER_D 0x00550d4d
void cYObject::cYObject(short type, class Behavior* pBehavior, struct Point3d loc, short id) {
	short cnt;

	// Function registers exception cleanup function at 0x00550efd

	__asm        mov    eax, this;
	__asm        add    eax, 0xC0;
	__asm        push   eax;
	__asm        mov    eax, pBehavior;
	__asm        push   eax;
	__asm        movsx  eax, type;
	__asm        mov    ax, cYObject::sInitBhav[eax*2];
	__asm        push   eax;
	__asm        movsx  eax, type;
	__asm        mov    ax, cYObject::sStackSize[eax*2];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::TreeSim;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x14;
	__asm        call   YObjLang::YObjLang;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5935E0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x5935C8;
// LINE 2886:
	__asm        mov    ax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], ax;
// LINE 2888:
	__asm        lea    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2891:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 0;
// LINE 2893:
	__asm        mov    cnt, 0;
	__asm        jmp    _Tbe;
_Tba:
	__asm        inc    cnt;
_Tbe:
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x30;
	__asm        jge    _Te1;
// LINE 2894:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, this;
	__asm        mov    word ptr [ecx+eax*2+0xD0], 0;
	__asm        jmp    _Tba;
// LINE 2895:
_Te1:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
// LINE 2896:
	__asm        mov    cnt, 0;
	__asm        jmp    _Tfc;
_Tf8:
	__asm        inc    cnt;
_Tfc:
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 4;
	__asm        jge    _T120;
// LINE 2897:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x130], 0;
	__asm        jmp    _Tf8;
// LINE 2899:
_T120:
	__asm        mov    eax, pBehavior;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 2900:
	__asm        mov    eax, cYObject::sList;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 2901:
	__asm        mov    eax, this;
	__asm        mov    cYObject::sList, eax;
// LINE 2905:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 0;
// LINE 2907:
	__asm        mov    ax, id;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x32], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x32];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC], ax;
// LINE 2911:
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::InitForEngine;
// LINE 2912:
	__asm        jmp    near ptr 0x00550ED9;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        jmp    _T1ba;
_L56469:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x14;
	__asm        call   YObjLang::~YObjLang;
	__asm        ret;
_L56468:
	__asm        mov    ecx, this;
	__asm        call   TreeSim::~TreeSim;
	__asm        ret;
_L56467:
	__asm        mov    eax, 0x595E58;
	__asm        jmp    near ptr 0x0056F590;
_T1ba:
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
}

// FUNCTION: COPTER_D 0x00550f18
void cAvatar::Reset() {
// LINE 2916:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Reset;
// LINE 2919:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 2921:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0;
	__asm        jmp    near ptr 0x00550F47;
// LINE 2922:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x168], 0;
// LINE 2923:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16C], 0;
// LINE 2924:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x170], 0x10000;
// LINE 2925:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x174], 0;
// LINE 2926:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x178], 0;
// LINE 2927:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17C], 0;
// LINE 2928:
	__asm        jmp    near ptr 0x00550F9A;
}

// FUNCTION: COPTER_D 0x00550f9f
void cYObject::Reset() {
// LINE 2932:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
// LINE 2933:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 2934:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x164], 0x3F800000;
// LINE 2935:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
// LINE 2937:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0xFFFFFF9C;
// LINE 2939:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2940:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x106], 1;
// LINE 2941:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF4], 0;
// LINE 2942:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
// LINE 2943:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
// LINE 2945:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD4], 6;
// LINE 2946:
	__asm        push   8;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2947:
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetPersonType;
// LINE 2949:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T33d;
// LINE 2950:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tef;

	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tef:
	__asm        jmp    near ptr 0x00551093;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T121;

	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T121:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T16a;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T165;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T165:
	__asm        jmp    _T19a;
_T16a:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T19a;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T19a:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T1b8;

	__asm        jmp    _T1e6;

	__asm        jmp    _T1b8;
_T1b8:
	__asm        jmp    _T1ca;

	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    _T1e6;
_T1ca:
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1e6:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T290;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T26b;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T246;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    _T259;

	__asm        jmp    _T251;
_T246:
	__asm        mov    word ptr [ebp-8], 0xFFFF;
	__asm        jmp    _T259;
_T251:
	__asm        mov    ax, [ebp-0xC];
	__asm        mov    [ebp-8], ax;
_T259:
	__asm        jmp    near ptr 0x005511FD;

	__asm        movsx  eax, word ptr [ebp-8];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T26b:
	__asm        jmp    near ptr 0x0055120F;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T290:
	__asm        jmp    near ptr 0x00551234;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    _T2e3;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T2f1;
_T2e3:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T2f1:
	__asm        jmp    near ptr 0x00551295;

	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        test   eax, eax;
	__asm        jl     _T314;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        test   eax, eax;
	__asm        jge    _T330;
_T314:
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T330:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Unlink;
	__asm        jmp    _T33d;
// LINE 2952:
_T33d:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xBC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], ax;
// LINE 2953:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
// LINE 2954:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0;
// LINE 2956:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMissionType;
// LINE 2957:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T3d1;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     _T3d1;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     _T3d1;

	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3d1:
	__asm        jmp    near ptr 0x00551375;
// LINE 2958:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x22], 0;
// LINE 2960:
	__asm        jmp    near ptr 0x00551383;
}

// FUNCTION: COPTER_D 0x00551388
void cYObject::Draw(struct VRBlit* blit) {
	double nearvar;
	double camPhi;
	struct Point3d screenPt;
	char text[20];
	double midvar;
	float psiOff;
	double camPsi;
	double farvar;
	float phiOff;
	double farlimvar;
	unsigned short highres;
	struct BodyDebugInfo bdi;

// LINE 2968:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T43;

	__asm        push   0x8C085;
	__asm        push   0x5BB7D8;
	__asm        push   0xB98;
	__asm        push   0x5BB7FC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2969:
_T43:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    _T5d;
// LINE 2970:
	__asm        jmp    _T48b;
// LINE 2976:
_T5d:
	__asm        cmp    G_video_mode, 0x10;
	__asm        jne    _T75;

	__asm        mov    highres, 1;
	__asm        jmp    _T7b;
_T75:
	__asm        mov    highres, 0;
// LINE 2978:
_T7b:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _Taa;

	__asm        push   0x8C085;
	__asm        push   0x5BB820;
	__asm        push   0xBA2;
	__asm        push   0x5BB840;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2979:
_Taa:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tc2;
// LINE 2983:
	__asm        jmp    _T48b;
// LINE 2985:
_Tc2:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0xC;
	__asm        mov    screenPt.x, eax;
// LINE 2986:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 0xC;
	__asm        mov    screenPt.y, eax;
// LINE 2987:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        sar    eax, 0x10;
	__asm        mov    screenPt.z, eax;
// LINE 2988:
	__asm        fld    qword ptr ds:[0x593568];
	__asm        mov    eax, screenPt.z;
	__asm        mov    [ebp-0x88], eax;
	__asm        fidiv  dword ptr [ebp-0x88];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x164];
// LINE 2989:
	__asm        test   reinterpret_cast<uint32_t>(highres), 0xFFFF;
	__asm        je     _T13a;
// LINE 2990:
	__asm        mov    eax, this;
	__asm        fld    dword ptr [eax+0x164];
	__asm        fmul   dword ptr ds:[0x593570];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x164];
// LINE 2994:
_T13a:
	__asm        mov    eax, cameraHeading;
	__asm        mov    [ebp-0x8C], eax;
	__asm        fild   dword ptr [ebp-0x8C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   camPsi;
// LINE 2995:
	__asm        mov    eax, cameraPitch;
	__asm        mov    [ebp-0x90], eax;
	__asm        fild   dword ptr [ebp-0x90];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   camPhi;
// LINE 2996:
	__asm        fld    camPsi;
	__asm        fmul   qword ptr ds:[0x593578];
	__asm        fstp   psiOff;
// LINE 2997:
	__asm        fld    camPhi;
	__asm        fmul   qword ptr ds:[0x593578];
	__asm        fsubr  dword ptr ds:[0x593580];
	__asm        fstp   phiOff;
// LINE 2999:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        mov    [ebp-0x94], eax;
	__asm        fild   dword ptr [ebp-0x94];
	__asm        fmul   qword ptr ds:[0x593588];
	__asm        fadd   psiOff;
	__asm        fstp   psiOff;
// LINE 3004:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 0xFFFF;
// LINE 3006:
	__asm        mov    eax, gFarLimit;
	__asm        mov    [ebp-0x98], eax;
	__asm        fild   dword ptr [ebp-0x98];
	__asm        fstp   farlimvar;
// LINE 3007:
	__asm        mov    eax, gFarBoundary;
	__asm        mov    [ebp-0x9C], eax;
	__asm        fild   dword ptr [ebp-0x9C];
	__asm        fstp   farvar;
// LINE 3008:
	__asm        mov    eax, gMidBoundary;
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        fstp   midvar;
// LINE 3009:
	__asm        mov    eax, gNearBoundary;
	__asm        mov    [ebp-0xA4], eax;
	__asm        fild   dword ptr [ebp-0xA4];
	__asm        fstp   nearvar;
// LINE 3011:
	__asm        mov    eax, gFarLimit;
	__asm        cmp    screenPt.z, eax;
	__asm        jle    _T228;
// LINE 3012:
	__asm        jmp    _T48b;
// LINE 3013:
	__asm        jmp    _T293;
_T228:
	__asm        mov    eax, gFarBoundary;
	__asm        cmp    screenPt.z, eax;
	__asm        jle    _T24a;
// LINE 3014:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 4;
// LINE 3015:
	__asm        jmp    _T293;
_T24a:
	__asm        mov    eax, gMidBoundary;
	__asm        cmp    screenPt.z, eax;
	__asm        jle    _T26c;
// LINE 3016:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 2;
// LINE 3017:
	__asm        jmp    _T293;
_T26c:
	__asm        mov    eax, gNearBoundary;
	__asm        cmp    screenPt.z, eax;
	__asm        jle    _T28e;
// LINE 3018:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 1;
// LINE 3019:
	__asm        jmp    _T293;
// LINE 3020:
_T28e:
	__asm        jmp    _T48b;
// LINE 3022:
_T293:
	__asm        lea    eax, phiOff;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 3023:
	__asm        lea    eax, psiOff;
	__asm        push   eax;
	__asm        call   Keep0to2pi;
	__asm        add    esp, 4;
// LINE 3024:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T2dd;

	__asm        push   0x8C085;
	__asm        push   0x5BB864;
	__asm        push   0xBD0;
	__asm        push   0x5BB888;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 3025:
_T2dd:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xB;
	__asm        jl     _T30f;

	__asm        push   0x8C085;
	__asm        push   0x5BB8AC;
	__asm        push   0xBD1;
	__asm        push   0x5BB8B4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T30f:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        mov    ax, PersonFaceNums[eax*2];
	__asm        mov    [ebp-0x7C], ax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x80], eax;
// LINE 3026:
	__asm        mov    ax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x30], ax;
	__asm        jmp    near ptr 0x005516CF;
// LINE 3028:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xE6];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, screenPt.y;
	__asm        push   eax;
	__asm        mov    eax, screenPt.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        mov    eax, psiOff;
	__asm        push   eax;
	__asm        mov    eax, phiOff;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::Draw;
// LINE 3033:
	__asm        mov    eax, screenPt.x;
	__asm        mov    bdi.screenx, eax;
// LINE 3034:
	__asm        mov    eax, screenPt.y;
	__asm        mov    bdi.screeny, eax;
// LINE 3035:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        push   0x5BB8D8;
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 3036:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T41f;
// LINE 3037:
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        push   eax;
	__asm        push   0x5BB8DC;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 3038:
	__asm        jmp    _T434;
// LINE 3039:
_T41f:
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        push   0x5BB8E8;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 3040:
_T434:
	__asm        movsx  eax, gBodyDebugInfoIndex;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T460;

	__asm        push   0x8C085;
	__asm        push   0x5BB8EC;
	__asm        push   0xBE0;
	__asm        push   0x5BB8F4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 3041:
_T460:
	__asm        lea    esi, bdi.screenx;
	__asm        movsx  eax, gBodyDebugInfoIndex;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        lea    edi, gBodyDebugInfo[0].screenx[eax*4];
	__asm        mov    ecx, 7;
	__asm        rep movsd;
	__asm        inc    gBodyDebugInfoIndex;
// LINE 3044:
	__asm        jmp    _T48b;
_T48b:
}

// FUNCTION: COPTER_D 0x0055181a
void BodyDrawDebugInfo(class CBackBuffer* buf) {
// LINE 3051:
	__asm        push   0x91;
	__asm        call   Keyboard::IsToggleKeySet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T80;
// LINE 3052:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    _T2d;
_T29:
	__asm        inc    count;
_T2d:
	__asm        movsx  eax, count;
	__asm        movsx  ecx, gBodyDebugInfoIndex;
	__asm        cmp    eax, ecx;
	__asm        jge    _T80;
// LINE 3053:
// Block start:
	struct BodyDebugInfo bdi;
	__asm        movsx  eax, count;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        lea    edi, bdi.screenx;
	__asm        lea    esi, gBodyDebugInfo[0].screenx[eax*4];
	__asm        mov    ecx, 7;
	__asm        rep movsd;
// LINE 3054:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, bdi.screeny;
	__asm        push   eax;
	__asm        lea    eax, bdi.screenx;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, buf;
	__asm        call   dword ptr [eax+0x4C];
// LINE 3055:
// Block end:
	__asm        jmp    _T29;
// LINE 3057:
// Block end:
_T80:
	__asm        mov    gBodyDebugInfoIndex, 0;
// LINE 3058:
	__asm        jmp    near ptr 0x005518A8;
}

// FUNCTION: COPTER_D 0x005518ad
void cYObject::~cYObject() {
	unsigned short found;
	class cYObject** srch;

	// Function registers exception cleanup function at 0x005519be

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5935E0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x5935C8;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    byte ptr [ebp-4], 1;
// LINE 3063:
	__asm        mov    found, 0;
// LINE 3064:
	__asm        mov    srch, 0x5B8684;
	__asm        jmp    _T5e;
_T51:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0xB8;
	__asm        mov    srch, eax;
_T5e:
	__asm        mov    eax, srch;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T98;
// LINE 3065:
	__asm        mov    eax, srch;
	__asm        mov    ecx, this;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T93;
// LINE 3067:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, srch;
	__asm        mov    [ecx], eax;
// LINE 3068:
	__asm        mov    found, 1;
// LINE 3069:
	__asm        jmp    _T98;
// LINE 3072:
_T93:
	__asm        jmp    _T51;
_T98:
	__asm        test   reinterpret_cast<uint32_t>(found), 0xFFFF;
	__asm        jne    _Tc1;

	__asm        push   0x8C085;
	__asm        push   0x5BB918;
	__asm        push   0xC00;
	__asm        push   0x5BB944;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 3073:
_Tc1:
	__asm        jmp    near ptr 0x00551973;

	__asm        mov    byte ptr [ebp-4], 0;
	__asm        call   0x0055198D;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x005519B5;
	__asm        jmp    _T11b;
_L56643:
	__asm        cmp    this, 0;
	__asm        je     _Tf8;

	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _Tff;
_Tf8:
	__asm        mov    dword ptr [ebp-0x18], 0;
_Tff:
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   YObjLang::~YObjLang;
	__asm        ret;
_L56642:
	__asm        mov    ecx, this;
	__asm        call   TreeSim::~TreeSim;
	__asm        ret;
_L56641:
	__asm        mov    eax, 0x595E88;
	__asm        jmp    near ptr 0x0056F590;
_T11b:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}

// FUNCTION: COPTER_D 0x005519d6
void S3PersonTweakInit() {
	int32_t * pvals[10];

// LINE 3083:
	__asm        mov    pvals[0], 0x5B8678;
// LINE 3084:
	__asm        mov    pvals[1], 0x5B867C;
// LINE 3085:
	__asm        mov    pvals[2], 0x5B8650;
// LINE 3086:
	__asm        mov    pvals[3], 0x5B8654;
// LINE 3087:
	__asm        mov    pvals[4], 0x5B8658;
// LINE 3088:
	__asm        mov    pvals[5], 0x5B865C;
// LINE 3089:
	__asm        mov    pvals[6], 0x5B86A4;
// LINE 3091:
	__asm        push   0x5BB968;
	__asm        push   7;
	__asm        lea    eax, pvals[0];
	__asm        push   eax;
	__asm        call   TWKEnQueue;
	__asm        add    esp, 0xC;
// LINE 3092:
	__asm        jmp    near ptr 0x00551A28;
}

// FUNCTION: COPTER_D 0x00551a2d
void UpdateFigureVals() {
// LINE 3096:
	__asm        jmp    near ptr 0x00551A38;
}

// FUNCTION: COPTER_D 0x00551a3d
void cAvatar::RotateMatrixAndYawForEngine() {
	int32_t matrix[4][4];

// LINE 3102:
	__asm        push   0xF0000;
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x178];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x17C], eax;
// LINE 3104:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17C], 0xE100000;
	__asm        jle    _T60;
// LINE 3105:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x17C], 0xE100000;
// LINE 3106:
	__asm        jmp    _T7d;
_T60:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17C], 0;
	__asm        jge    _T7d;
// LINE 3107:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x17C], 0xE100000;
// LINE 3110:
_T7d:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17C];
	__asm        push   eax;
	__asm        lea    eax, matrix[0][0];
	__asm        push   eax;
	__asm        call   S3AngleRotMat;
	__asm        add    esp, 0x10;
// LINE 3111:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, matrix[0][0];
	__asm        push   eax;
	__asm        call   0x004D8C2E;
	__asm        add    esp, 8;
// LINE 3112:
	__asm        jmp    near ptr 0x00551AEC;
}

// FUNCTION: COPTER_D 0x00551af1
int32_t S3PUtilsGetDir(int32_t orgx, int32_t orgy, int32_t destx, int32_t desty) {
	int32_t deltay;
	short dir;
	int32_t deltax;
	int32_t absy;
	int32_t absx;

// LINE 3119:
	__asm        mov    eax, destx;
	__asm        sub    eax, orgx;
	__asm        mov    deltax, eax;
// LINE 3120:
	__asm        mov    eax, desty;
	__asm        sub    eax, orgy;
	__asm        mov    deltay, eax;
// LINE 3122:
	__asm        cmp    deltax, 0;
	__asm        jge    _T32;

	__asm        mov    eax, deltax;
	__asm        neg    eax;
	__asm        mov    absx, eax;
// LINE 3123:
	__asm        jmp    _T38;
_T32:
	__asm        mov    eax, deltax;
	__asm        mov    absx, eax;
// LINE 3124:
_T38:
	__asm        cmp    deltay, 0;
	__asm        jge    _T4f;

	__asm        mov    eax, deltay;
	__asm        neg    eax;
	__asm        mov    absy, eax;
// LINE 3125:
	__asm        jmp    _T55;
_T4f:
	__asm        mov    eax, deltay;
	__asm        mov    absy, eax;
// LINE 3127:
_T55:
	__asm        mov    eax, absx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, absy;
	__asm        jle    _T84;
// LINE 3129:
	__asm        cmp    deltax, 0;
	__asm        jle    _T79;

	__asm        mov    dir, 2;
// LINE 3130:
	__asm        jmp    _T7f;
_T79:
	__asm        mov    dir, 6;
// LINE 3132:
_T7f:
	__asm        jmp    _Tf8;
_T84:
	__asm        mov    eax, absy;
	__asm        sar    eax, 1;
	__asm        cmp    eax, absx;
	__asm        jle    _Tb3;
// LINE 3134:
	__asm        cmp    deltay, 0;
	__asm        jle    _Ta8;

	__asm        mov    dir, 4;
// LINE 3135:
	__asm        jmp    _Tae;
_Ta8:
	__asm        mov    dir, 0;
// LINE 3138:
_Tae:
	__asm        jmp    _Tf8;
_Tb3:
	__asm        cmp    deltax, 0;
	__asm        jle    _Tdd;
// LINE 3140:
	__asm        cmp    deltay, 0;
	__asm        jge    _Td2;

	__asm        mov    dir, 1;
// LINE 3141:
	__asm        jmp    _Td8;
_Td2:
	__asm        mov    dir, 3;
// LINE 3143:
_Td8:
	__asm        jmp    _Tf8;
// LINE 3145:
_Tdd:
	__asm        cmp    deltay, 0;
	__asm        jge    _Tf2;

	__asm        mov    dir, 7;
// LINE 3146:
	__asm        jmp    _Tf8;
_Tf2:
	__asm        mov    dir, 5;
// LINE 3148:
_Tf8:
	__asm        movsx  eax, dir;
	__asm        jmp    near ptr 0x00551BF2;
// LINE 3149:
}

// FUNCTION: COPTER_D 0x00551bf7
int32_t S3PUtilsGetAlt(int32_t x, int32_t y, int32_t z) {
	int32_t normy;
	int32_t normx;
	struct _CELL_INFO* cptr;
	int32_t alt;
	int32_t objy;
	struct _STOBJ_INST* stobj;
	int32_t color;
	int32_t maxobjy;
	int32_t normz;

// LINE 3159:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, z;
	__asm        shr    eax, 0x16;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, x;
	__asm        add    ecx, 0x20000000;
	__asm        shr    ecx, 0x16;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 3161:
	__asm        cmp    cptr, 0;
	__asm        jne    _T59;

	__asm        push   0;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   S3TerrPrecisionAlt;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13a;
// LINE 3163:
_T59:
	__asm        mov    eax, x;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normx, eax;
// LINE 3164:
	__asm        mov    eax, z;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normz, eax;
// LINE 3165:
	__asm        mov    eax, y;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normy, eax;
// LINE 3167:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 3168:
	__asm        mov    objy, 0;
// LINE 3169:
	__asm        mov    maxobjy, 0;
// LINE 3170:
_Ta6:
	__asm        cmp    stobj, 0;
	__asm        je     _Tfe;
// LINE 3172:
	__asm        mov    color, 0x200;
// LINE 3173:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, color;
	__asm        push   eax;
	__asm        mov    eax, normz;
	__asm        push   eax;
	__asm        mov    eax, normy;
	__asm        push   eax;
	__asm        mov    eax, normx;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   VRGetObjAlt;
	__asm        add    esp, 0x20;
	__asm        mov    objy, eax;
// LINE 3174:
	__asm        mov    eax, objy;
	__asm        cmp    maxobjy, eax;
	__asm        jge    _Tf1;
// LINE 3175:
	__asm        mov    eax, objy;
	__asm        mov    maxobjy, eax;
// LINE 3176:
_Tf1:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 3177:
	__asm        jmp    _Ta6;
// LINE 3182:
_Tfe:
	__asm        cmp    maxobjy, 0;
	__asm        jne    _T122;
// LINE 3183:
	__asm        push   0;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   S3TerrPrecisionAlt;
	__asm        add    esp, 0xC;
	__asm        mov    alt, eax;
// LINE 3184:
	__asm        jmp    _T132;
// LINE 3185:
_T122:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, maxobjy;
	__asm        mov    alt, eax;
// LINE 3187:
_T132:
	__asm        mov    eax, alt;
	__asm        jmp    _T13a;
// LINE 3188:
_T13a:
}

// FUNCTION: COPTER_D 0x00551d36
void FrameInit() {
// LINE 3205:
	__asm        cmp    G_video_mode, 0x10;
	__asm        jne    _T38;
// LINE 3207:
	__asm        mov    eax, swindow.RenderWide;
	__asm        mov    Pbufwidth, eax;
// LINE 3208:
	__asm        mov    eax, swindow.WindowWide;
	__asm        dec    eax;
	__asm        mov    Pwinwidth, eax;
// LINE 3209:
	__asm        mov    eax, swindow.WindowHigh;
	__asm        dec    eax;
	__asm        mov    Pwinheight, eax;
// LINE 3211:
	__asm        jmp    _T58;
// LINE 3213:
_T38:
	__asm        mov    eax, qwindow.RenderWide;
	__asm        mov    Pbufwidth, eax;
// LINE 3214:
	__asm        mov    eax, qwindow.WindowWide;
	__asm        dec    eax;
	__asm        mov    Pwinwidth, eax;
// LINE 3215:
	__asm        mov    eax, qwindow.WindowHigh;
	__asm        dec    eax;
	__asm        mov    Pwinheight, eax;
// LINE 3218:
_T58:
	__asm        jmp    near ptr 0x00551D93;
}



// Contribution: 1:00150da0-00150dd8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551da0
// FlatResFile::`scalar deleting destructor'



// Contribution: 1:00150de0-00150eb7 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150ec0-00150f3f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551ec0
// ResFile::`scalar deleting destructor'



// Contribution: 1:00150f40-00150f9e Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551f40
 ResFile::~ResFile() {
	// Function registers exception cleanup function at 0x00551f87

	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    near ptr 0x00551F6D;

	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x00551F7E;
	__asm        jmp    _T51;
_L55562:
	__asm        mov    ecx, this;
	__asm        call   FlatResFile::~FlatResFile;
	__asm        ret;
_L55561:
	__asm        mov    eax, 0x595EE0;
	__asm        jmp    near ptr 0x0056F590;
_T51:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
}



// Contribution: 1:00150fa0-00150fba Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150fc0-00150ff8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551fc0
// cYObject::`scalar deleting destructor'



// Contribution: 1:00151000-00151038 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00552000
// vector<char>::~vector<char>



// Contribution: 1:00151040-001510d6 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001510e0-0015118f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151190-00151369 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151370-0015138f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151390-001513af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513b0-001513cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513d0-001513ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513f0-0015140f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151410-0015142f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151430-0015144f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151450-0015146f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151470-0015148f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151490-001514af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514b0-001514cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514d0-001514ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514f0-0015150f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151510-0015152f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151530-0015154f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151550-0015156f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151570-0015158f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151590-001515af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515b0-001515cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515d0-001515ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515f0-0015160f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151610-0015162f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151630-0015164f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151650-0015166f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151670-0015168f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151690-001516af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516b0-001516cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516d0-001516ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516f0-0015170f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151710-0015172f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151730-0015174f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151750-0015176f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151770-0015178f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151790-001517af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517b0-001517cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517d0-001517ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517f0-0015180f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151810-0015182f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151830-0015184f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151850-0015186f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151870-0015188f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151890-001518af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518b0-001518cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518d0-001518ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518f0-0015190f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151910-0015192f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151930-0015194f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151950-0015196f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151970-0015198f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151990-001519af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519b0-001519cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519d0-001519ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519f0-00151a0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a10-00151a2f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a30-00151a4f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a50-00151a6f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a70-00151a8f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a90-00151b0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00552a90
// cAvatar::`scalar deleting destructor'



// Contribution: 2:00004508-00004517 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593508
// GLOBAL: COPTER_D 0x00593508
// ??_7FlatResFile@@6B@


// Contribution: 2:00004518-00004527 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593518
// GLOBAL: COPTER_D 0x00593518
// ??_7ResFile@@6B@


// Contribution: 2:00004528-0000458f Module: 200, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004590-000045a3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593590
// GLOBAL: COPTER_D 0x00593590
// ??_7cAvatar@@6BYObjLang@@@


// Contribution: 2:000045a8-000045c3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935a8
// GLOBAL: COPTER_D 0x005935a8
// ??_7cAvatar@@6BTreeSim@@@


// Contribution: 2:000045c8-000045db Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935c8
// GLOBAL: COPTER_D 0x005935c8
// ??_7cYObject@@6BYObjLang@@@


// Contribution: 2:000045e0-000045fb Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935e0
// GLOBAL: COPTER_D 0x005935e0
// ??_7cYObject@@6BTreeSim@@@


// Contribution: 2:00006d38-00006eb7 Module: 200, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00006eb8-00006edf Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006ee0-00006f07 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006f08-00006f2f Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:000000b0-000000bb Module: 200, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970b0
void (*$S76)() = { /* <data@0x005970b0> */ };

// GLOBAL: COPTER_D 0x005970b4
void (*$S82)() = { /* <data@0x005970b4> */ };

// GLOBAL: COPTER_D 0x005970b8
void (*$S87)() = { /* <data@0x005970b8> */ };



// Contribution: 3:00021644-00024974 Module: 200, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b8644
short gPersonBeamingSlices = { /* <data@0x005b8644> */ };

// GLOBAL: COPTER_D 0x005b8648
short gPersonBeamingForwardWeight = { /* <data@0x005b8648> */ };

// GLOBAL: COPTER_D 0x005b864c
short gPersonBeamingSlicesSlice = { /* <data@0x005b864c> */ };

// GLOBAL: COPTER_D 0x005b8650
int32_t gFarLimit = { /* <data@0x005b8650> */ };

// GLOBAL: COPTER_D 0x005b8654
int32_t gFarBoundary = { /* <data@0x005b8654> */ };

// GLOBAL: COPTER_D 0x005b8658
int32_t gMidBoundary = { /* <data@0x005b8658> */ };

// GLOBAL: COPTER_D 0x005b865c
int32_t gNearBoundary = { /* <data@0x005b865c> */ };

// GLOBAL: COPTER_D 0x005b8660
int32_t gNearLimit = { /* <data@0x005b8660> */ };

// GLOBAL: COPTER_D 0x005b8664
int32_t CopterDir = { /* <data@0x005b8664> */ };

// GLOBAL: COPTER_D 0x005b8668
unsigned short cYObject::sInited = { /* <data@0x005b8668> */ };

// GLOBAL: COPTER_D 0x005b866c
unsigned short cYObject::sAllAmbientStarted = { /* <data@0x005b866c> */ };

// GLOBAL: COPTER_D 0x005b8670
short cYObject::sNumMissionAwake = { /* <data@0x005b8670> */ };

// GLOBAL: COPTER_D 0x005b8674
short cYObject::sNumAmbientAwake = { /* <data@0x005b8674> */ };

// GLOBAL: COPTER_D 0x005b8678
short cYObject::sAmbientTopOff = { /* <data@0x005b8678> */ };

// GLOBAL: COPTER_D 0x005b867c
short cYObject::sAmbientAbsoluteMax = { /* <data@0x005b867c> */ };

// GLOBAL: COPTER_D 0x005b8680
class cAvatar* gAvatar = { /* <data@0x005b8680> */ };

// GLOBAL: COPTER_D 0x005b8684
class cYObject* cYObject::sList = { /* <data@0x005b8684> */ };

// GLOBAL: COPTER_D 0x005b8688
short cYObject::sBeamed = { /* <data@0x005b8688> */ };

// GLOBAL: COPTER_D 0x005b868c
short cYObject::sDebugNumBeamed = { /* <data@0x005b868c> */ };

// GLOBAL: COPTER_D 0x005b8690
long cYObject::sSimTicks = { /* <data@0x005b8690> */ };

// GLOBAL: COPTER_D 0x005b8694
int32_t gPersonBeamSlice = { /* <data@0x005b8694> */ };

// GLOBAL: COPTER_D 0x005b8698
int32_t gNextTime = { /* <data@0x005b8698> */ };

// GLOBAL: COPTER_D 0x005b869c
int32_t gCumTime = { /* <data@0x005b869c> */ };

// GLOBAL: COPTER_D 0x005b86a0
short gBodyDebugInfoIndex = { /* <data@0x005b86a0> */ };

// GLOBAL: COPTER_D 0x005b86a4
short cYObject::sScurkRectRad = { /* <data@0x005b86a4> */ };

// GLOBAL: COPTER_D 0x005b86a8
short sAvLastCellX = { /* <data@0x005b86a8> */ };

// GLOBAL: COPTER_D 0x005b86ac
short sAvLastCellY = { /* <data@0x005b86ac> */ };

// GLOBAL: COPTER_D 0x005b86b0
short gPersonSoundBeamSlice = { /* <data@0x005b86b0> */ };

// GLOBAL: COPTER_D 0x005b86b4
short sCheckTotedCount = { /* <data@0x005b86b4> */ };



// Contribution: 3:00024978-00024997 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb978
// GLOBAL: COPTER_D 0x005bb978
// ??_C@_0CA@OCDF@couldn?8t?5set?5master?5object?5to?50?$AA@


// Contribution: 3:00024998-000249cc Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb998
// GLOBAL: COPTER_D 0x005bb998
// ??_C@_0DF@MDL@trying?5to?5get?5off?5master?5object?5@


// Contribution: 3:000249d0-000249f3 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb9d0
// GLOBAL: COPTER_D 0x005bb9d0
// ??_C@_0CE@BCHG@I?5thought?5all?5people?5were?5alloca@


// Contribution: 3:000249f4-00024a12 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb9f4
// GLOBAL: COPTER_D 0x005bb9f4
// ??_C@_0BP@EABK@can?8t?5find?5person?5with?5that?5id?$AA@


// Contribution: 3:00024a14-00024a32 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba14
// GLOBAL: COPTER_D 0x005bba14
// ??_C@_0BP@GAKH@C?3?2Copter?2Source?2X?2Y?2YObject?4h?$AA@


// Contribution: 3:00024a34-00024a53 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba34
// GLOBAL: COPTER_D 0x005bba34
// ??_C@_0CA@JOHG@out?9of?9range?5scurkID?5for?5a?5tile?$AA@


// Contribution: 3:00024a54-00024a7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba54
// GLOBAL: COPTER_D 0x005bba54
// ??_C@_0CI@FJMN@must?5set?5cell?5location?5before?5wa@


// Contribution: 3:00024a7c-00024a9b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba7c
// GLOBAL: COPTER_D 0x005bba7c
// ??_C@_0CA@BGFC@how?8d?5you?5wake?5up?5past?5the?5max?$DP?$AA@


// Contribution: 3:00024a9c-00024abb Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba9c
// GLOBAL: COPTER_D 0x005bba9c
// ??_C@_0CA@MKGD@trying?5to?5wake?5up?5already?5awake?$AA@


// Contribution: 3:00024abc-00024ad0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbabc
// GLOBAL: COPTER_D 0x005bbabc
// ??_C@_0BF@KBDF@y?5and?5x?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024ad4-00024ae8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbad4
// GLOBAL: COPTER_D 0x005bbad4
// ??_C@_0BF@ECJK@x?5and?5y?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024aec-00024b17 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbaec
// GLOBAL: COPTER_D 0x005bbaec
// ??_C@_0CM@FHJC@why?5positioning?5unlinked?5object?5@


// Contribution: 3:00024b18-00024b30 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb18
// GLOBAL: COPTER_D 0x005bbb18
// ??_C@_0BJ@LCNK@rxn?5tree?5id?5out?5of?5range?$AA@


// Contribution: 3:00024b34-00024b72 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb34
// GLOBAL: COPTER_D 0x005bbb34
// ??_C@_0DP@CAPD@?91?5missionid?5for?5other?5than?5ambi@


// Contribution: 3:00024b74-00024b99 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb74
// GLOBAL: COPTER_D 0x005bbb74
// ??_C@_0CG@LEML@couldn?8t?5get?5private?5anim?5for?5an@


// Contribution: 3:00024b9c-00024bb5 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb9c
// GLOBAL: COPTER_D 0x005bbb9c
// ??_C@_0BK@OHDB@must?5set?5body?5before?5anim?$AA@


// Contribution: 3:00024bb8-00024bec Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbbb8
// GLOBAL: COPTER_D 0x005bbbb8
// ??_C@_0DF@BIBF@you?5must?5unlink?5before?5setting?5c@


// Contribution: 3:00024bf0-00024c22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbbf0
// GLOBAL: COPTER_D 0x005bbbf0
// ??_C@_0DD@LLLA@use?5changemission?5only?5when?5pers@


// Contribution: 3:00024c24-00024c3b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc24
// GLOBAL: COPTER_D 0x005bbc24
// ??_C@_0BI@MBEM@how?5did?5that?5happen?$DP?$DP?$DP?$DP?$AA@


// Contribution: 3:00024c3c-00024c59 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc3c
// GLOBAL: COPTER_D 0x005bbc3c
// ??_C@_0BO@EKBK@just?5one?5more?5paranoid?5assert?$AA@


// Contribution: 3:00024c5c-00024c87 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc5c
// GLOBAL: COPTER_D 0x005bbc5c
// ??_C@_0CM@JKOD@how?5could?5you?5have?5been?5awake?5ye@


// Contribution: 3:00024c88-00024ca8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc88
// GLOBAL: COPTER_D 0x005bbc88
// ??_C@_0CB@NMCE@trying?5to?5sleep?5already?5sleeping@


// Contribution: 3:00024cac-00024cc9 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbcac
// GLOBAL: COPTER_D 0x005bbcac
// ??_C@_0BO@NCHD@can?8t?5simanim?5without?5an?5anim?$AA@


// Contribution: 3:00024ccc-00024cfa Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbccc
// GLOBAL: COPTER_D 0x005bbccc
// ??_C@_0CP@EHMM@couldn?8t?5move?5with?5the?5dyn?5objec@


// Contribution: 3:00024cfc-00024d1e Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbcfc
// GLOBAL: COPTER_D 0x005bbcfc
// ??_C@_0CD@GJNN@can?8t?5follow?5master?5with?5no?5mast@


// Contribution: 3:00024d20-00024d3a Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd20
// GLOBAL: COPTER_D 0x005bbd20
// ??_C@_0BL@EOGE@following?5master?5unlinked?$DP?$AA@


// Contribution: 3:00024d3c-00024d64 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd3c
// GLOBAL: COPTER_D 0x005bbd3c
// ??_C@_0CJ@GJOA@stack?5size?5about?5to?5go?5too?5high?5@


// Contribution: 3:00024d68-00024d7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd68
// GLOBAL: COPTER_D 0x005bbd68
// ??_C@_0BE@HILD@couldn?8t?5get?5a?5body?$AA@


// Contribution: 3:00024d7c-00024da0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd7c
// GLOBAL: COPTER_D 0x005bbd7c
// ??_C@_0CF@DHKG@weird?5number?5of?5characters?5shift@


// Contribution: 3:00024da4-00024dc6 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbda4
// GLOBAL: COPTER_D 0x005bbda4
// ??_C@_0CD@NHHN@c?3?2copter?2source?2x?2objects?2bList@


// Contribution: 3:00024dc8-00024de1 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbdc8
// GLOBAL: COPTER_D 0x005bbdc8
// ??_C@_0BK@HKFL@didn?8t?5make?5obj?5invisible?$AA@


// Contribution: 3:00024de4-00024e22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbde4
// GLOBAL: COPTER_D 0x005bbde4
// ??_C@_0DP@HCDA@couldn?8t?5add?5new?5to?5thing?9?9didn?8@


// Contribution: 3:00024e24-00024e40 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe24
// GLOBAL: COPTER_D 0x005bbe24
// ??_C@_0BN@MPEK@not?5very?5close?5to?5that?5heli?$CB?$AA@


// Contribution: 3:00024e44-00024e6d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe44
// GLOBAL: COPTER_D 0x005bbe44
// ??_C@_0CK@BLNM@toted?5object?8s?5master?5not?5this?5o@


// Contribution: 3:00024e70-00024e8d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe70
// GLOBAL: COPTER_D 0x005bbe70
// ??_C@_0BO@GDCN@toted?5obj?5not?5medevac?5victim?$CB?$AA@


// Contribution: 3:00024e90-00024eba Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe90
// GLOBAL: COPTER_D 0x005bbe90
// ??_C@_0CL@LIPB@must?5have?5thing?5to?5put?5aught?5on?5@


// Contribution: 3:00024ebc-00024ed8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbebc
// GLOBAL: COPTER_D 0x005bbebc
// ??_C@_0BN@OBNK@getting?5distance?5to?5null?5dyn?$AA@


// Contribution: 3:0009e250-000a05a4 Module: 200, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00635250
class YObjLang* cYObject::sLanguage = { /* <data@0x00635250> */ };

// GLOBAL: COPTER_D 0x00635258
class MTimer gXTimer = { /* <data@0x00635258> */ };

// GLOBAL: COPTER_D 0x00635268
struct cYObject::LocationInfo cYObject::sLocInfo[14] = { /* <data@0x00635268> */ };

// GLOBAL: COPTER_D 0x006352d8
short cYObject::sHitRxnTree[20] = { /* <data@0x006352d8> */ };

// GLOBAL: COPTER_D 0x00635300
enum cYObject::LocationType cYObject::sNeutralMissionLocs[14][10] = { /* <data@0x00635300> */ };

// GLOBAL: COPTER_D 0x00635530
struct Point3d cYObject::sMoveTable[8] = { /* <data@0x00635530> */ };

// GLOBAL: COPTER_D 0x00635590
class ResFile cYObject::sErrorFile = { /* <data@0x00635590> */ };

// GLOBAL: COPTER_D 0x006356b0
short cYObject::sSoundChannels[15] = { /* <data@0x006356b0> */ };

// GLOBAL: COPTER_D 0x006356d0
struct BodyDebugInfo gBodyDebugInfo[100] = { /* <data@0x006356d0> */ };

// GLOBAL: COPTER_D 0x006361c0
short cYObject::sStackSize[1] = { /* <data@0x006361c0> */ };

// GLOBAL: COPTER_D 0x006361c8
long g_sqrtTable[625] = { /* <data@0x006361c8> */ };

// GLOBAL: COPTER_D 0x00636b8c
class Behavior* cYObject::sBehavior = { /* <data@0x00636b8c> */ };

// GLOBAL: COPTER_D 0x00636b90
int32_t LastCameraY = { /* <data@0x00636b90> */ };

// GLOBAL: COPTER_D 0x00636b94
int32_t LastCameraX = { /* <data@0x00636b94> */ };

// GLOBAL: COPTER_D 0x00636b98
short cYObject::sInitBhav[14] = { /* <data@0x00636b98> */ };

// GLOBAL: COPTER_D 0x00636bb8
class NResFile cYObject::sFile = { /* <data@0x00636bb8> */ };

// GLOBAL: COPTER_D 0x00636ce0
struct Point3d cYObject::sUnitVectorTable[8] = { /* <data@0x00636ce0> */ };

// GLOBAL: COPTER_D 0x00636d40
class cYObject* cYObject::sObjects[100] = { /* <data@0x00636d40> */ };

// GLOBAL: COPTER_D 0x00636ed0
enum cYObject::LocationType cYObject::sLocType[256] = { /* <data@0x00636ed0> */ };

// GLOBAL: COPTER_D 0x006372d0
enum cYObject::LocationType cYObject::sNeutralPersonLocs[18][10] = { /* <data@0x006372d0> */ };

// GLOBAL: COPTER_D 0x006375a0
// LOCAL: COPTER_D 0x006375a0
// $S73
// GLOBAL: COPTER_D 0x006375a4
// LOCAL: COPTER_D 0x006375a4
// $S79


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x006bf188
struct Point2d CameraCell = { /* <data@0x006bf188> */ };

// GLOBAL: COPTER_D 0x006c12a0
struct ViewerInfo Viewer = { /* <data@0x006c12a0> */ };

// GLOBAL: COPTER_D 0x006c1210
struct _VIEW_STATE ViewState = { /* <data@0x006c1210> */ };

