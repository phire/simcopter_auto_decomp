// Module: Yobject.obj
// Source: C:\Copter\Source\X\Y\Yobject.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:00142f70-00150d97 Module: 200, 16 byte alignment, code, execute, read, 
// FUNCTION: SIMCOPTER 0x00543f70
// $E75

// FUNCTION: SIMCOPTER 0x00543f8a
// $E71

// FUNCTION: SIMCOPTER 0x005440a0
// $E74

// FUNCTION: SIMCOPTER 0x005440bd
// $E72

// FUNCTION: SIMCOPTER 0x005440f4
// $E81

// FUNCTION: SIMCOPTER 0x0054410e
// $E77

// FUNCTION: SIMCOPTER 0x005441c8
// $E80

// FUNCTION: SIMCOPTER 0x005441e5
// $E78

// FUNCTION: SIMCOPTER 0x00544262
void RemoveAvatarFromBuilding() {
// LINE 133:
	asm( 
"	      00544262    push ebp"
"	      00544263    mov ebp,esp"
"	      00544265    push ebx"
"	      00544266    push esi"
"	      00544267    push edi"
);
// LINE 134:
	asm( 
"	      00544268    cmp dword ptr ds:[598EB8h],0FFFFFFFFh"
"	      0054426f    je near ptr 0054427Fh"
);
// LINE 135:
	asm( 
"	      00544275    mov dword ptr ds:[598EB8h],0FFFFFFFFh"
);
// LINE 140:
	asm( 
"	      0054427f    jmp near ptr 00544284h"
"	      00544284    pop edi"
"	      00544285    pop esi"
"	      00544286    pop ebx"
"	      00544287    leave"
"	      00544288    ret"
);
}

// FUNCTION: SIMCOPTER 0x00544289
// $E86

// FUNCTION: SIMCOPTER 0x005442a3
// $E83

// FUNCTION: SIMCOPTER 0x0054430d
// $E85

// FUNCTION: SIMCOPTER 0x0054432a
// $E84

// FUNCTION: SIMCOPTER 0x0054433f
void JacquesGetDebugData() {
// LINE 149:
	asm( 
"	      0054433f    push ebp"
"	      00544340    mov ebp,esp"
"	      00544342    sub esp,28h"
"	      00544345    push ebx"
"	      00544346    push esi"
"	      00544347    push edi"
);
// LINE 150:
	asm( 
"	      00544348    jmp near ptr 0054434Dh"
"	      0054434d    cmp dword ptr ds:[63525Ch],0"
"	      00544354    jne near ptr 005443E0h"
);
// LINE 151:
	asm( 
"	      0054435a    jmp near ptr 0054435Fh"
"	      0054435f    cmp dword ptr ds:[63525Ch],0"
"	      00544366    je near ptr 00544371h"
"	      0054436c    jmp near ptr 005443E0h"
"	      00544371    cmp dword ptr ds:[635258h],1"
"	      00544378    jne near ptr 00544393h"
"	      0054437e    call dword ptr ds:[6C3908h]"
"	      00544384    mov ds:[63525Ch],eax"
"	      00544389    jmp near ptr 005443DBh"
"	      0054438e    jmp near ptr 005443DBh"
"	      00544393    cmp dword ptr ds:[635258h],0"
"	      0054439a    jne near ptr 005443C2h"
"	      005443a0    lea eax,[ebp-0Ch]"
"	      005443a3    push eax"
"	      005443a4    call dword ptr ds:[6C365Ch]"
"	      005443aa    mov eax,[ebp-0Ch]"
"	      005443ad    mov [ebp-4],eax"
"	      005443b0    mov eax,[ebp-4]"
"	      005443b3    mov ds:[63525Ch],eax"
"	      005443b8    jmp near ptr 005443DBh"
"	      005443bd    jmp near ptr 005443DBh"
"	      005443c2    call dword ptr ds:[6C3908h]"
"	      005443c8    mov ecx,3E8h"
"	      005443cd    sub edx,edx"
"	      005443cf    div ecx"
"	      005443d1    mov ds:[63525Ch],eax"
"	      005443d6    jmp near ptr 005443DBh"
"	      005443db    jmp near ptr 005443E0h"
);
// LINE 152:
	asm( 
"	      005443e0    movsx eax,word ptr ds:[5B8670h]"
"	      005443e7    mov ecx,[ebp+8]"
"	      005443ea    mov [ecx],eax"
);
// LINE 153:
	asm( 
"	      005443ec    movsx eax,word ptr ds:[5B8674h]"
"	      005443f3    mov ecx,[ebp+0Ch]"
"	      005443f6    mov [ecx],eax"
);
// LINE 154:
	asm( 
"	      005443f8    mov eax,0Ch"
"	      005443fd    movsx ecx,word ptr ds:[5B8688h]"
"	      00544404    sub eax,ecx"
"	      00544406    mov ecx,[ebp+10h]"
"	      00544409    mov [ecx],eax"
);
// LINE 155:
	asm( 
"	      0054440b    movsx eax,word ptr ds:[5B868Ch]"
"	      00544412    mov ecx,[ebp+14h]"
"	      00544415    mov [ecx],eax"
);
// LINE 156:
	asm( 
"	      00544417    movsx eax,word ptr ds:[5B8648h]"
"	      0054441e    mov ecx,[ebp+1Ch]"
"	      00544421    mov [ecx],eax"
);
// LINE 157:
	asm( 
"	      00544423    movsx eax,word ptr ds:[5B8644h]"
"	      0054442a    mov ecx,[ebp+18h]"
"	      0054442d    mov [ecx],eax"
);
// LINE 158:
	asm( 
"	      0054442f    mov eax,ds:[635260h]"
"	      00544434    mov [ebp-14h],eax"
"	      00544437    jmp near ptr 0054443Ch"
"	      0054443c    cmp dword ptr ds:[63525Ch],0"
"	      00544443    je near ptr 005444BFh"
"	      00544449    cmp dword ptr ds:[635258h],1"
"	      00544450    jne near ptr 00544469h"
"	      00544456    call dword ptr ds:[6C3908h]"
"	      0054445c    mov [ebp-24h],eax"
"	      0054445f    jmp near ptr 005444ADh"
"	      00544464    jmp near ptr 005444ADh"
"	      00544469    cmp dword ptr ds:[635258h],0"
"	      00544470    jne near ptr 00544496h"
"	      00544476    lea eax,[ebp-20h]"
"	      00544479    push eax"
"	      0054447a    call dword ptr ds:[6C365Ch]"
"	      00544480    mov eax,[ebp-20h]"
"	      00544483    mov [ebp-18h],eax"
"	      00544486    mov eax,[ebp-18h]"
"	      00544489    mov [ebp-24h],eax"
"	      0054448c    jmp near ptr 005444ADh"
"	      00544491    jmp near ptr 005444ADh"
"	      00544496    call dword ptr ds:[6C3908h]"
"	      0054449c    mov ecx,3E8h"
"	      005444a1    sub edx,edx"
"	      005444a3    div ecx"
"	      005444a5    mov [ebp-24h],eax"
"	      005444a8    jmp near ptr 005444ADh"
"	      005444ad    mov eax,[ebp-24h]"
"	      005444b0    sub eax,ds:[63525Ch]"
"	      005444b6    mov [ebp-10h],eax"
"	      005444b9    mov eax,[ebp-10h]"
"	      005444bc    add [ebp-14h],eax"
"	      005444bf    cmp dword ptr ds:[635258h],0"
"	      005444c6    jne near ptr 00544503h"
"	      005444cc    cmp dword ptr ds:[635264h],0"
"	      005444d3    je near ptr 00544503h"
"	      005444d9    mov eax,ds:[635264h]"
"	      005444de    push eax"
"	      005444df    push 0F4240h"
"	      005444e4    mov eax,[ebp-14h]"
"	      005444e7    push eax"
"	      005444e8    call dword ptr ds:[6C372Ch]"
"	      005444ee    mov [ebp-14h],eax"
"	      005444f1    cmp dword ptr [ebp-14h],1F4h"
"	      005444f8    jb near ptr 00544544h"
"	      005444fe    jmp near ptr 00544522h"
"	      00544503    cmp dword ptr [ebp-14h],1F4h"
"	      0054450a    jb near ptr 00544544h"
"	      00544510    jmp near ptr 00544522h"
"	      00544515    cmp dword ptr [ebp-28h],1F4h"
"	      0054451c    jb near ptr 00544544h"
);
// LINE 159:
	asm( 
"	      00544522    mov dword ptr ds:[635260h],0"
"	      0054452c    mov dword ptr ds:[63525Ch],0"
"	      00544536    jmp near ptr 0054453Bh"
);
// LINE 160:
	asm( 
"	      0054453b    mov word ptr ds:[5B868Ch],0"
);
// LINE 162:
	asm( 
"	      00544544    jmp near ptr 00544549h"
"	      00544549    pop edi"
"	      0054454a    pop esi"
"	      0054454b    pop ebx"
"	      0054454c    leave"
"	      0054454d    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054454e
unsigned short GetOutOfHeli() {
// LINE 166:
	asm( 
"	      0054454e    push ebp"
"	      0054454f    mov ebp,esp"
"	      00544551    push ebx"
"	      00544552    push esi"
"	      00544553    push edi"
);
// LINE 167:
	asm( 
"	      00544554    mov eax,[ebp+8]"
"	      00544557    push eax"
"	      00544558    call 0054456Ah"
"	      0054455d    add esp,4"
"	      00544560    jmp near ptr 00544565h"
);
// LINE 168:
	asm( 
"	      00544565    pop edi"
"	      00544566    pop esi"
"	      00544567    pop ebx"
"	      00544568    leave"
"	      00544569    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054456a
unsigned short cYObject::GetOutOfHeli(long) {
// LINE 171:
	asm( 
"	      0054456a    push ebp"
"	      0054456b    mov ebp,esp"
"	      0054456d    sub esp,10h"
"	      00544570    push ebx"
"	      00544571    push esi"
"	      00544572    push edi"
);
// LINE 172:
	asm( 
"	      00544573    movsx eax,word ptr [ebp+8]"
"	      00544577    cmp eax,7D00h"
"	      0054457c    jne near ptr 0054458Fh"
"	      00544582    mov eax,ds:[5B8680h]"
"	      00544587    mov [ebp-4],eax"
"	      0054458a    jmp near ptr 0054460Bh"
"	      0054458f    movsx eax,word ptr [ebp+8]"
"	      00544593    test eax,eax"
"	      00544595    jl near ptr 005445A8h"
"	      0054459b    movsx eax,word ptr [ebp+8]"
"	      0054459f    cmp eax,64h"
"	      005445a2    jl near ptr 005445C4h"
"	      005445a8    push 8C085h"
"	      005445ad    push 5BB9F4h"
"	      005445b2    push 204h"
"	      005445b7    push 5BBA14h"
"	      005445bc    call 00554F30h"
"	      005445c1    add esp,10h"
"	      005445c4    movsx eax,word ptr [ebp+8]"
"	      005445c8    cmp dword ptr [eax*4+636D40h],0"
"	      005445d0    jne near ptr 005445F2h"
"	      005445d6    push 8C085h"
"	      005445db    push 5BB9D0h"
"	      005445e0    push 205h"
"	      005445e5    push 5BBA14h"
"	      005445ea    call 00554F30h"
"	      005445ef    add esp,10h"
"	      005445f2    movsx eax,word ptr [ebp+8]"
"	      005445f6    mov eax,[eax*4+636D40h]"
"	      005445fd    mov [ebp-4],eax"
"	      00544600    jmp near ptr 0054460Bh"
"	      00544605    mov eax,[ebp-8]"
"	      00544608    mov [ebp-4],eax"
);
// LINE 173:
	asm( 
"	      0054460b    cmp dword ptr [ebp-4],0"
"	      0054460f    jne near ptr 00544631h"
"	      00544615    push 8C085h"
"	      0054461a    push 5B86B8h"
"	      0054461f    push 0ADh"
"	      00544624    push 5B86E0h"
"	      00544629    call 00554F30h"
"	      0054462e    add esp,10h"
);
// LINE 174:
	asm( 
"	      00544631    mov eax,[ebp-4]"
"	      00544634    movsx eax,word ptr [eax+0E2h]"
"	      0054463b    test eax,eax"
"	      0054463d    je near ptr 0054465Fh"
"	      00544643    push 8C085h"
"	      00544648    push 5B8704h"
"	      0054464d    push 0AEh"
"	      00544652    push 5B8734h"
"	      00544657    call 00554F30h"
"	      0054465c    add esp,10h"
);
// LINE 176:
	asm( 
"	      0054465f    mov ecx,[ebp-4]"
"	      00544662    call 00556470h"
"	      00544667    movzx eax,ax"
"	      0054466a    test eax,eax"
"	      0054466c    je near ptr 0054470Ch"
"	      00544672    mov eax,[ebp-4]"
"	      00544675    cmp dword ptr [eax+130h],0"
"	      0054467c    jne near ptr 0054469Eh"
"	      00544682    push 8C085h"
"	      00544687    push 5BB998h"
"	      0054468c    push 41Eh"
"	      00544691    push 5BBA14h"
"	      00544696    call 00554F30h"
"	      0054469b    add esp,10h"
"	      0054469e    push 0"
"	      005446a0    mov ecx,[ebp-4]"
"	      005446a3    call 0054CECAh"
"	      005446a8    mov [ebp-0Ch],ax"
"	      005446ac    test dword ptr [ebp-0Ch],0FFFFh"
"	      005446b3    jne near ptr 005446D5h"
"	      005446b9    push 8C085h"
"	      005446be    push 5BB978h"
"	      005446c3    push 420h"
"	      005446c8    push 5BBA14h"
"	      005446cd    call 00554F30h"
"	      005446d2    add esp,10h"
"	      005446d5    mov eax,[ebp-4]"
"	      005446d8    mov eax,[eax+44h]"
"	      005446db    push eax"
"	      005446dc    mov eax,[ebp-4]"
"	      005446df    mov eax,[eax+40h]"
"	      005446e2    push eax"
"	      005446e3    mov eax,[ebp-4]"
"	      005446e6    mov eax,[eax+3Ch]"
"	      005446e9    push eax"
"	      005446ea    call 00551BF7h"
"	      005446ef    add esp,0Ch"
"	      005446f2    add eax,30000h"
"	      005446f7    mov ecx,[ebp-4]"
"	      005446fa    mov [ecx+40h],eax"
"	      005446fd    jmp near ptr 00544702h"
"	      00544702    jmp near ptr 00544723h"
"	      00544707    jmp near ptr 00544716h"
"	      0054470c    jmp near ptr 00544753h"
"	      00544711    jmp near ptr 00544723h"
"	      00544716    test dword ptr [ebp-10h],0FFFFh"
"	      0054471d    je near ptr 00544753h"
);
// LINE 177:
	asm( 
"	      00544723    mov eax,[ebp-4]"
"	      00544726    mov ax,[eax+10Ah]"
"	      0054472d    push eax"
"	      0054472e    mov eax,[ebp-4]"
"	      00544731    mov eax,[eax+0B4h]"
"	      00544737    push eax"
"	      00544738    mov ecx,[ebp-4]"
"	      0054473b    call 0055CC58h"
"	      00544740    jmp near ptr 00544745h"
);
// LINE 178:
	asm( 
"	      00544745    mov ax,1"
"	      00544749    jmp near ptr 0054475Bh"
);
// LINE 180:
	asm( 
"	      0054474e    jmp near ptr 0054475Bh"
);
// LINE 181:
	asm( 
"	      00544753    xor ax,ax"
"	      00544756    jmp near ptr 0054475Bh"
);
// LINE 182:
	asm( 
"	      0054475b    pop edi"
"	      0054475c    pop esi"
"	      0054475d    pop ebx"
"	      0054475e    leave"
"	      0054475f    ret"
);
}

// FUNCTION: SIMCOPTER 0x00544760
void AdjustPersonBeamingSlices() {
// LINE 191:
	asm( 
"	      00544760    push ebp"
"	      00544761    mov ebp,esp"
"	      00544763    push ebx"
"	      00544764    push esi"
"	      00544765    push edi"
);
// LINE 192:
	asm( 
"	      00544766    cmp dword ptr [ebp+8],0"
"	      0054476a    jne near ptr 00544775h"
"	      00544770    jmp near ptr 0054486Fh"
);
// LINE 193:
	asm( 
"	      00544775    inc word ptr ds:[5B864Ch]"
"	      0054477c    movsx eax,word ptr ds:[5B864Ch]"
"	      00544783    cmp eax,4"
"	      00544786    jle near ptr 00544795h"
"	      0054478c    mov word ptr ds:[5B864Ch],0"
);
// LINE 194:
	asm( 
"	      00544795    movsx eax,word ptr ds:[5B864Ch]"
"	      0054479c    test eax,eax"
"	      0054479e    jne near ptr 0054486Ah"
);
// LINE 195:
	asm( 
"	      005447a4    cmp dword ptr [ebp+8],12C0000h"
"	      005447ab    jle near ptr 005447C8h"
);
// LINE 196:
	asm( 
"	      005447b1    mov word ptr ds:[5B8644h],6"
);
// LINE 197:
	asm( 
"	      005447ba    mov word ptr ds:[5B8648h],8"
);
// LINE 199:
	asm( 
"	      005447c3    jmp near ptr 0054486Ah"
"	      005447c8    cmp dword ptr [ebp+8],960000h"
"	      005447cf    jle near ptr 005447ECh"
);
// LINE 200:
	asm( 
"	      005447d5    mov word ptr ds:[5B8644h],4"
);
// LINE 201:
	asm( 
"	      005447de    mov word ptr ds:[5B8648h],6"
);
// LINE 203:
	asm( 
"	      005447e7    jmp near ptr 0054486Ah"
"	      005447ec    cmp dword ptr [ebp+8],640000h"
"	      005447f3    jle near ptr 00544810h"
);
// LINE 204:
	asm( 
"	      005447f9    mov word ptr ds:[5B8644h],2"
);
// LINE 205:
	asm( 
"	      00544802    mov word ptr ds:[5B8648h],5"
);
// LINE 207:
	asm( 
"	      0054480b    jmp near ptr 0054486Ah"
"	      00544810    cmp dword ptr [ebp+8],410000h"
"	      00544817    jle near ptr 00544834h"
);
// LINE 208:
	asm( 
"	      0054481d    mov word ptr ds:[5B8644h],1"
);
// LINE 209:
	asm( 
"	      00544826    mov word ptr ds:[5B8648h],4"
);
// LINE 211:
	asm( 
"	      0054482f    jmp near ptr 0054486Ah"
"	      00544834    cmp dword ptr [ebp+8],1E0000h"
"	      0054483b    jle near ptr 00544858h"
);
// LINE 212:
	asm( 
"	      00544841    mov word ptr ds:[5B8644h],0"
);
// LINE 213:
	asm( 
"	      0054484a    mov word ptr ds:[5B8648h],4"
);
// LINE 215:
	asm( 
"	      00544853    jmp near ptr 0054486Ah"
);
// LINE 216:
	asm( 
"	      00544858    mov word ptr ds:[5B8644h],0"
);
// LINE 217:
	asm( 
"	      00544861    mov word ptr ds:[5B8648h],4"
);
// LINE 220:
	asm( 
"	      0054486a    jmp near ptr 0054486Fh"
"	      0054486f    pop edi"
"	      00544870    pop esi"
"	      00544871    pop ebx"
"	      00544872    leave"
"	      00544873    ret"
);
}

// FUNCTION: SIMCOPTER 0x00544874
class cYObject* cYObject::GetObjectA(struct _DYOBJ_INST*) {
// LINE 223:
	asm( 
"	      00544874    push ebp"
"	      00544875    mov ebp,esp"
"	      00544877    sub esp,20h"
"	      0054487a    push ebx"
"	      0054487b    push esi"
"	      0054487c    push edi"
);
// LINE 225:
	asm( 
"	      0054487d    mov dword ptr [ebp-4],0"
);
// LINE 226:
	asm( 
"	      00544884    mov word ptr [ebp-8],0"
"	      0054488a    jmp near ptr 00544893h"
"	      0054488f    inc word ptr [ebp-8]"
"	      00544893    movsx eax,word ptr [ebp-8]"
"	      00544897    cmp eax,64h"
"	      0054489a    jge near ptr 0054497Dh"
);
// LINE 227:
	asm( 
"	      005448a0    movsx eax,word ptr [ebp-8]"
"	      005448a4    cmp eax,7D00h"
"	      005448a9    jne near ptr 005448BCh"
"	      005448af    mov eax,ds:[5B8680h]"
"	      005448b4    mov [ebp-0Ch],eax"
"	      005448b7    jmp near ptr 00544938h"
"	      005448bc    movsx eax,word ptr [ebp-8]"
"	      005448c0    test eax,eax"
"	      005448c2    jl near ptr 005448D5h"
"	      005448c8    movsx eax,word ptr [ebp-8]"
"	      005448cc    cmp eax,64h"
"	      005448cf    jl near ptr 005448F1h"
"	      005448d5    push 8C085h"
"	      005448da    push 5BB9F4h"
"	      005448df    push 204h"
"	      005448e4    push 5BBA14h"
"	      005448e9    call 00554F30h"
"	      005448ee    add esp,10h"
"	      005448f1    movsx eax,word ptr [ebp-8]"
"	      005448f5    cmp dword ptr [eax*4+636D40h],0"
"	      005448fd    jne near ptr 0054491Fh"
"	      00544903    push 8C085h"
"	      00544908    push 5BB9D0h"
"	      0054490d    push 205h"
"	      00544912    push 5BBA14h"
"	      00544917    call 00554F30h"
"	      0054491c    add esp,10h"
"	      0054491f    movsx eax,word ptr [ebp-8]"
"	      00544923    mov eax,[eax*4+636D40h]"
"	      0054492a    mov [ebp-0Ch],eax"
"	      0054492d    jmp near ptr 00544938h"
"	      00544932    mov eax,[ebp-10h]"
"	      00544935    mov [ebp-0Ch],eax"
);
// LINE 228:
	asm( 
"	      00544938    cmp dword ptr [ebp-0Ch],0"
"	      0054493c    jne near ptr 00544947h"
"	      00544942    jmp near ptr 0054488Fh"
);
// LINE 229:
	asm( 
"	      00544947    mov eax,[ebp-0Ch]"
"	      0054494a    movsx eax,word ptr [eax+0D2h]"
"	      00544951    test eax,eax"
"	      00544953    jne near ptr 0054495Eh"
"	      00544959    jmp near ptr 0054488Fh"
);
// LINE 230:
	asm( 
"	      0054495e    mov eax,[ebp-0Ch]"
"	      00544961    add eax,24h"
"	      00544964    cmp eax,[ebp+8]"
"	      00544967    jne near ptr 00544978h"
);
// LINE 231:
	asm( 
"	      0054496d    mov eax,[ebp-0Ch]"
"	      00544970    mov [ebp-4],eax"
);
// LINE 232:
	asm( 
"	      00544973    jmp near ptr 0054497Dh"
);
// LINE 234:
	asm( 
"	      00544978    jmp near ptr 0054488Fh"
);
// LINE 235:
	asm( 
"	      0054497d    cmp dword ptr [ebp-4],0"
"	      00544981    jne near ptr 005449A0h"
);
// LINE 236:
	asm( 
"	      00544987    mov eax,ds:[5B8680h]"
"	      0054498c    add eax,24h"
"	      0054498f    cmp eax,[ebp+8]"
"	      00544992    jne near ptr 005449A0h"
);
// LINE 237:
	asm( 
"	      00544998    mov eax,ds:[5B8680h]"
"	      0054499d    mov [ebp-4],eax"
);
// LINE 239:
	asm( 
"	      005449a0    cmp dword ptr [ebp-4],0"
"	      005449a4    jne near ptr 005449C6h"
);
// LINE 240:
	asm( 
"	      005449aa    push 8C085h"
"	      005449af    push 5B8758h"
"	      005449b4    push 0F0h"
"	      005449b9    push 5B877Ch"
"	      005449be    call 00554F30h"
"	      005449c3    add esp,10h"
);
// LINE 242:
	asm( 
"	      005449c6    mov eax,[ebp+8]"
"	      005449c9    mov ax,[eax+0Eh]"
"	      005449cd    mov [ebp-14h],ax"
"	      005449d1    movsx eax,word ptr [ebp-14h]"
"	      005449d5    cmp eax,7D00h"
"	      005449da    jne near ptr 005449F3h"
"	      005449e0    mov eax,ds:[5B8680h]"
"	      005449e5    cmp [ebp-4],eax"
"	      005449e8    je near ptr 00544A97h"
"	      005449ee    jmp near ptr 00544A7Bh"
"	      005449f3    movsx eax,word ptr [ebp-14h]"
"	      005449f7    test eax,eax"
"	      005449f9    jl near ptr 00544A0Ch"
"	      005449ff    movsx eax,word ptr [ebp-14h]"
"	      00544a03    cmp eax,64h"
"	      00544a06    jl near ptr 00544A28h"
"	      00544a0c    push 8C085h"
"	      00544a11    push 5BB9F4h"
"	      00544a16    push 204h"
"	      00544a1b    push 5BBA14h"
"	      00544a20    call 00554F30h"
"	      00544a25    add esp,10h"
"	      00544a28    movsx eax,word ptr [ebp-14h]"
"	      00544a2c    cmp dword ptr [eax*4+636D40h],0"
"	      00544a34    jne near ptr 00544A56h"
"	      00544a3a    push 8C085h"
"	      00544a3f    push 5BB9D0h"
"	      00544a44    push 205h"
"	      00544a49    push 5BBA14h"
"	      00544a4e    call 00554F30h"
"	      00544a53    add esp,10h"
"	      00544a56    movsx eax,word ptr [ebp-14h]"
"	      00544a5a    mov ecx,[ebp-4]"
"	      00544a5d    cmp [eax*4+636D40h],ecx"
"	      00544a64    je near ptr 00544A97h"
"	      00544a6a    jmp near ptr 00544A7Bh"
"	      00544a6f    mov eax,[ebp-18h]"
"	      00544a72    cmp [ebp-4],eax"
"	      00544a75    je near ptr 00544A97h"
"	      00544a7b    push 8C085h"
"	      00544a80    push 5B87A0h"
"	      00544a85    push 0F2h"
"	      00544a8a    push 5B87D4h"
"	      00544a8f    call 00554F30h"
"	      00544a94    add esp,10h"
"	      00544a97    mov eax,[ebp+8]"
"	      00544a9a    mov ax,[eax+0Eh]"
"	      00544a9e    mov [ebp-1Ch],ax"
);
// LINE 244:
	asm( 
"	      00544aa2    movsx eax,word ptr [ebp-1Ch]"
"	      00544aa6    cmp eax,7D00h"
"	      00544aab    jne near ptr 00544ABBh"
"	      00544ab1    mov eax,ds:[5B8680h]"
"	      00544ab6    jmp near ptr 00544B31h"
"	      00544abb    movsx eax,word ptr [ebp-1Ch]"
"	      00544abf    test eax,eax"
"	      00544ac1    jl near ptr 00544AD4h"
"	      00544ac7    movsx eax,word ptr [ebp-1Ch]"
"	      00544acb    cmp eax,64h"
"	      00544ace    jl near ptr 00544AF0h"
"	      00544ad4    push 8C085h"
"	      00544ad9    push 5BB9F4h"
"	      00544ade    push 204h"
"	      00544ae3    push 5BBA14h"
"	      00544ae8    call 00554F30h"
"	      00544aed    add esp,10h"
"	      00544af0    movsx eax,word ptr [ebp-1Ch]"
"	      00544af4    cmp dword ptr [eax*4+636D40h],0"
"	      00544afc    jne near ptr 00544B1Eh"
"	      00544b02    push 8C085h"
"	      00544b07    push 5BB9D0h"
"	      00544b0c    push 205h"
"	      00544b11    push 5BBA14h"
"	      00544b16    call 00554F30h"
"	      00544b1b    add esp,10h"
"	      00544b1e    movsx eax,word ptr [ebp-1Ch]"
"	      00544b22    mov eax,[eax*4+636D40h]"
"	      00544b29    jmp near ptr 00544B31h"
"	      00544b2e    mov eax,[ebp-20h]"
"	      00544b31    jmp near ptr 00544B36h"
);
// LINE 245:
	asm( 
"	      00544b36    pop edi"
"	      00544b37    pop esi"
"	      00544b38    pop ebx"
"	      00544b39    leave"
"	      00544b3a    ret"
);
}

// FUNCTION: SIMCOPTER 0x00544b3b
struct _DYOBJ_INST* cYObject::SearchForDynObj(short, short, struct _DYOBJ_INST*) {
// LINE 248:
	asm( 
"	      00544b3b    push ebp"
"	      00544b3c    mov ebp,esp"
"	      00544b3e    sub esp,18h"
"	      00544b41    push ebx"
"	      00544b42    push esi"
"	      00544b43    push edi"
"	      00544b44    mov [ebp-18h],ecx"
);
// LINE 249:
	asm( 
"	      00544b47    mov eax,[ebp-18h]"
"	      00544b4a    movzx ax,byte ptr [eax+88h]"
"	      00544b52    mov [ebp-8],ax"
"	      00544b56    mov eax,[ebp-18h]"
"	      00544b59    movzx ax,byte ptr [eax+89h]"
"	      00544b61    mov [ebp-0Ch],ax"
);
// LINE 252:
	asm( 
"	      00544b65    movsx eax,word ptr [ebp-0Ch]"
"	      00544b69    and eax,0FFh"
"	      00544b6e    movsx ecx,word ptr [ebp-8]"
"	      00544b72    and ecx,0FFh"
"	      00544b78    shl ecx,0Ah"
"	      00544b7b    mov eax,[ecx+eax*4+67ED30h]"
"	      00544b82    mov eax,[eax+10h]"
"	      00544b85    mov [ebp-10h],eax"
"	      00544b88    cmp dword ptr [ebp-10h],0"
"	      00544b8c    je near ptr 00544BBDh"
"	      00544b92    mov eax,[ebp-10h]"
"	      00544b95    movsx eax,word ptr [eax+0Ch]"
"	      00544b99    movsx ecx,word ptr [ebp+8]"
"	      00544b9d    test ecx,eax"
"	      00544b9f    je near ptr 00544BB0h"
"	      00544ba5    mov eax,[ebp-10h]"
"	      00544ba8    mov [ebp-4],eax"
"	      00544bab    jmp near ptr 00544BCFh"
"	      00544bb0    mov eax,[ebp-10h]"
"	      00544bb3    mov eax,[eax]"
"	      00544bb5    mov [ebp-10h],eax"
"	      00544bb8    jmp near ptr 00544B88h"
"	      00544bbd    mov dword ptr [ebp-4],0"
"	      00544bc4    jmp near ptr 00544BCFh"
"	      00544bc9    mov eax,[ebp-14h]"
"	      00544bcc    mov [ebp-4],eax"
);
// LINE 254:
	asm( 
"	      00544bcf    mov eax,[ebp-4]"
"	      00544bd2    jmp near ptr 00544BD7h"
);
// LINE 255:
	asm( 
"	      00544bd7    pop edi"
"	      00544bd8    pop esi"
"	      00544bd9    pop ebx"
"	      00544bda    leave"
"	      00544bdb    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x00544bde
unsigned short cYObject::SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*) {
// LINE 258:
	asm( 
"	      00544bde    push ebp"
"	      00544bdf    mov ebp,esp"
"	      00544be1    sub esp,60h"
"	      00544be4    push ebx"
"	      00544be5    push esi"
"	      00544be6    push edi"
"	      00544be7    mov [ebp-60h],ecx"
);
// LINE 260:
	asm( 
"	      00544bea    mov word ptr [ebp-24h],2"
);
// LINE 261:
	asm( 
"	      00544bf0    mov eax,[ebp+8]"
"	      00544bf3    movsx eax,word ptr [eax+0Ch]"
"	      00544bf7    test al,80h"
"	      00544bf9    jne near ptr 00544C25h"
"	      00544bff    mov eax,ds:[5BC634h]"
"	      00544c04    push eax"
"	      00544c05    mov eax,[ebp+8]"
"	      00544c08    mov eax,[eax+10h]"
"	      00544c0b    push eax"
"	      00544c0c    call 004D19DFh"
"	      00544c11    add esp,8"
"	      00544c14    sar eax,10h"
"	      00544c17    mov [ebp-18h],ax"
"	      00544c1b    jmp near ptr 00544C3Ah"
"	      00544c20    jmp near ptr 00544C30h"
"	      00544c25    mov word ptr [ebp-18h],8"
"	      00544c2b    jmp near ptr 00544C3Ah"
"	      00544c30    mov eax,[ebp-54h]"
"	      00544c33    sar eax,10h"
"	      00544c36    mov [ebp-18h],ax"
"	      00544c3a    jmp near ptr 00544C3Fh"
);
// LINE 262:
	asm( 
"	      00544c3f    movsx eax,word ptr [ebp-18h]"
"	      00544c43    cdq"
"	      00544c44    sub eax,edx"
"	      00544c46    sar eax,1"
"	      00544c49    mov [ebp-4],ax"
);
// LINE 265:
	asm( 
"	      00544c4d    mov word ptr [ebp-8],0"
"	      00544c53    jmp near ptr 00544C5Ch"
"	      00544c58    inc word ptr [ebp-8]"
"	      00544c5c    movsx eax,word ptr [ebp-8]"
"	      00544c60    movsx ecx,word ptr [ebp-24h]"
"	      00544c64    cmp eax,ecx"
"	      00544c66    jge near ptr 00544F69h"
);
// LINE 266:
	asm( 
"	      00544c6c    movsx eax,word ptr [ebp-8]"
"	      00544c70    movsx ecx,word ptr [ebp-4]"
"	      00544c74    imul eax,ecx"
"	      00544c77    movsx ecx,word ptr [ebp-24h]"
"	      00544c7b    dec ecx"
"	      00544c7c    cdq"
"	      00544c7d    idiv ecx"
"	      00544c7f    movsx ecx,word ptr [ebp-4]"
"	      00544c83    add eax,ecx"
"	      00544c85    mov [ebp-28h],ax"
);
// LINE 268:
	asm( 
"	      00544c89    movsx eax,word ptr [ebp-28h]"
"	      00544c8d    movsx ecx,word ptr [ebp-18h]"
"	      00544c91    cmp eax,ecx"
"	      00544c93    jle near ptr 00544CB5h"
"	      00544c99    push 8C085h"
"	      00544c9e    push 5B87F8h"
"	      00544ca3    push 10Ch"
"	      00544ca8    push 5B8830h"
"	      00544cad    call 00554F30h"
"	      00544cb2    add esp,10h"
);
// LINE 269:
	asm( 
"	      00544cb5    movsx eax,word ptr [ebp-28h]"
"	      00544cb9    test eax,eax"
"	      00544cbb    jne near ptr 00544CD3h"
"	      00544cc1    mov dword ptr [ebp-20h],0"
"	      00544cc8    mov eax,[ebp-20h]"
"	      00544ccb    mov [ebp-1Ch],eax"
"	      00544cce    jmp near ptr 00544DA7h"
"	      00544cd3    movsx ebx,word ptr [ebp-28h]"
"	      00544cd7    dec ebx"
"	      00544cd8    movsx eax,word ptr [ebp-28h]"
"	      00544cdc    lea eax,[eax*2-2]"
"	      00544ce3    push eax"
"	      00544ce4    call 0055D717h"
"	      00544ce9    add esp,4"
"	      00544cec    movzx eax,ax"
"	      00544cef    sub ebx,eax"
"	      00544cf1    shl ebx,10h"
"	      00544cf4    mov [ebp-1Ch],ebx"
"	      00544cf7    movsx ebx,word ptr [ebp-28h]"
"	      00544cfb    dec ebx"
"	      00544cfc    movsx eax,word ptr [ebp-28h]"
"	      00544d00    lea eax,[eax*2-2]"
"	      00544d07    push eax"
"	      00544d08    call 0055D717h"
"	      00544d0d    add esp,4"
"	      00544d10    movzx eax,ax"
"	      00544d13    sub ebx,eax"
"	      00544d15    shl ebx,10h"
"	      00544d18    mov [ebp-20h],ebx"
"	      00544d1b    mov eax,[ebp-1Ch]"
"	      00544d1e    sar eax,10h"
"	      00544d21    mov [ebp-58h],ax"
"	      00544d25    mov eax,[ebp-20h]"
"	      00544d28    sar eax,10h"
"	      00544d2b    mov [ebp-5Ch],ax"
"	      00544d2f    jmp near ptr 00544D34h"
"	      00544d34    movsx eax,word ptr [ebp-58h]"
"	      00544d38    cdq"
"	      00544d39    xor eax,edx"
"	      00544d3b    sub eax,edx"
"	      00544d3d    movsx eax,ax"
"	      00544d40    movsx ecx,word ptr [ebp-28h]"
"	      00544d44    shl ecx,10h"
"	      00544d47    cmp eax,ecx"
"	      00544d49    jl near ptr 00544D6Bh"
"	      00544d4f    push 8C085h"
"	      00544d54    push 59A24Ch"
"	      00544d59    push 44Ah"
"	      00544d5e    push 5BBA14h"
"	      00544d63    call 00554F30h"
"	      00544d68    add esp,10h"
"	      00544d6b    jmp near ptr 00544D70h"
"	      00544d70    movsx eax,word ptr [ebp-5Ch]"
"	      00544d74    cdq"
"	      00544d75    xor eax,edx"
"	      00544d77    sub eax,edx"
"	      00544d79    movsx eax,ax"
"	      00544d7c    movsx ecx,word ptr [ebp-28h]"
"	      00544d80    shl ecx,10h"
"	      00544d83    cmp eax,ecx"
"	      00544d85    jl near ptr 00544DA7h"
"	      00544d8b    push 8C085h"
"	      00544d90    push 59A24Ch"
"	      00544d95    push 44Bh"
"	      00544d9a    push 5BBA14h"
"	      00544d9f    call 00554F30h"
"	      00544da4    add esp,10h"
"	      00544da7    jmp near ptr 00544DACh"
);
// LINE 270:
	asm( 
"	      00544dac    mov eax,[ebp-1Ch]"
"	      00544daf    mov [ebp-4Ch],eax"
"	      00544db2    mov dword ptr [ebp-48h],0"
"	      00544db9    mov eax,[ebp-20h]"
"	      00544dbc    mov [ebp-44h],eax"
);
// LINE 271:
	asm( 
"	      00544dbf    mov eax,[ebp+8]"
"	      00544dc2    add eax,18h"
"	      00544dc5    lea ecx,[ebp-14h]"
"	      00544dc8    mov edx,[eax]"
"	      00544dca    mov [ecx],edx"
"	      00544dcc    mov edx,[eax+4]"
"	      00544dcf    mov [ecx+4],edx"
"	      00544dd2    mov eax,[eax+8]"
"	      00544dd5    mov [ecx+8],eax"
);
// LINE 272:
	asm( 
"	      00544dd8    mov eax,[ebp-1Ch]"
"	      00544ddb    add [ebp-14h],eax"
);
// LINE 273:
	asm( 
"	      00544dde    mov eax,[ebp-20h]"
"	      00544de1    add [ebp-0Ch],eax"
);
// LINE 278:
	asm( 
"	      00544de4    mov eax,[ebp-60h]"
"	      00544de7    mov eax,[eax+34h]"
"	      00544dea    push eax"
"	      00544deb    lea eax,[ebp-4Ch]"
"	      00544dee    push eax"
"	      00544def    mov eax,[ebp+8]"
"	      00544df2    add eax,24h"
"	      00544df5    push eax"
"	      00544df6    mov eax,[ebp+8]"
"	      00544df9    mov eax,[eax+8]"
"	      00544dfc    push eax"
"	      00544dfd    call 004D2AC6h"
"	      00544e02    add esp,10h"
"	      00544e05    mov [ebp-38h],eax"
);
// LINE 280:
	asm( 
"	      00544e08    mov eax,[ebp-0Ch]"
"	      00544e0b    push eax"
"	      00544e0c    mov eax,[ebp-10h]"
"	      00544e0f    push eax"
"	      00544e10    mov eax,[ebp-14h]"
"	      00544e13    push eax"
"	      00544e14    call 00551BF7h"
"	      00544e19    add esp,0Ch"
"	      00544e1c    mov [ebp-3Ch],eax"
);
// LINE 282:
	asm( 
"	      00544e1f    mov eax,[ebp-3Ch]"
"	      00544e22    add eax,[ebp-38h]"
"	      00544e25    add eax,30000h"
"	      00544e2a    mov [ebp-10h],eax"
);
// LINE 284:
	asm( 
"	      00544e2d    mov eax,[ebp-60h]"
"	      00544e30    movsx eax,word ptr [eax+30h]"
"	      00544e34    test al,80h"
"	      00544e36    jne near ptr 00544E5Eh"
"	      00544e3c    mov eax,ds:[5BC634h]"
"	      00544e41    push eax"
"	      00544e42    mov eax,[ebp-60h]"
"	      00544e45    mov eax,[eax+34h]"
"	      00544e48    push eax"
"	      00544e49    call 004D19DFh"
"	      00544e4e    add esp,8"
"	      00544e51    mov [ebp-40h],eax"
"	      00544e54    jmp near ptr 00544E6Ah"
"	      00544e59    jmp near ptr 00544E6Ah"
"	      00544e5e    mov dword ptr [ebp-40h],80000h"
"	      00544e65    jmp near ptr 00544E6Ah"
);
// LINE 285:
	asm( 
"	      00544e6a    mov eax,[ebp+8]"
"	      00544e6d    movsx eax,word ptr [eax+0Ch]"
"	      00544e71    test al,80h"
"	      00544e73    jne near ptr 00544E9Bh"
"	      00544e79    mov eax,ds:[5BC634h]"
"	      00544e7e    push eax"
"	      00544e7f    mov eax,[ebp+8]"
"	      00544e82    mov eax,[eax+10h]"
"	      00544e85    push eax"
"	      00544e86    call 004D19DFh"
"	      00544e8b    add esp,8"
"	      00544e8e    mov [ebp-50h],eax"
"	      00544e91    jmp near ptr 00544EA7h"
"	      00544e96    jmp near ptr 00544EA7h"
"	      00544e9b    mov dword ptr [ebp-50h],80000h"
"	      00544ea2    jmp near ptr 00544EA7h"
);
// LINE 286:
	asm( 
"	      00544ea7    mov eax,[ebp+8]"
"	      00544eaa    add eax,18h"
"	      00544ead    lea ecx,[ebp-34h]"
"	      00544eb0    mov edx,[eax]"
"	      00544eb2    mov [ecx],edx"
"	      00544eb4    mov edx,[eax+4]"
"	      00544eb7    mov [ecx+4],edx"
"	      00544eba    mov eax,[eax+8]"
"	      00544ebd    mov [ecx+8],eax"
);
// LINE 287:
	asm( 
"	      00544ec0    mov eax,[ebp-38h]"
"	      00544ec3    add [ebp-30h],eax"
);
// LINE 288:
	asm( 
"	      00544ec6    mov eax,[ebp-50h]"
"	      00544ec9    push eax"
"	      00544eca    mov eax,[ebp-2Ch]"
"	      00544ecd    push eax"
"	      00544ece    mov eax,[ebp-30h]"
"	      00544ed1    push eax"
"	      00544ed2    mov eax,[ebp-34h]"
"	      00544ed5    push eax"
"	      00544ed6    mov eax,[ebp-40h]"
"	      00544ed9    push eax"
"	      00544eda    mov eax,[ebp-0Ch]"
"	      00544edd    push eax"
"	      00544ede    mov eax,[ebp-10h]"
"	      00544ee1    push eax"
"	      00544ee2    mov eax,[ebp-14h]"
"	      00544ee5    push eax"
"	      00544ee6    call 00554FF0h"
"	      00544eeb    add esp,20h"
"	      00544eee    movzx eax,ax"
"	      00544ef1    test eax,eax"
"	      00544ef3    jne near ptr 00544F15h"
);
// LINE 289:
	asm( 
"	      00544ef9    push 8C085h"
"	      00544efe    push 5B8854h"
"	      00544f03    push 121h"
"	      00544f08    push 5B8884h"
"	      00544f0d    call 00554F30h"
"	      00544f12    add esp,10h"
);
// LINE 291:
	asm( 
"	      00544f15    push 0"
"	      00544f17    mov eax,[ebp+8]"
"	      00544f1a    push eax"
"	      00544f1b    mov eax,[ebp-60h]"
"	      00544f1e    mov eax,[eax+34h]"
"	      00544f21    push eax"
"	      00544f22    mov eax,[ebp-0Ch]"
"	      00544f25    push eax"
"	      00544f26    mov eax,[ebp-10h]"
"	      00544f29    push eax"
"	      00544f2a    mov eax,[ebp-14h]"
"	      00544f2d    push eax"
"	      00544f2e    push 0"
"	      00544f30    call 00555369h"
"	      00544f35    add esp,1Ch"
"	      00544f38    test eax,eax"
"	      00544f3a    je near ptr 00544F45h"
);
// LINE 292:
	asm( 
"	      00544f40    jmp near ptr 00544C58h"
);
// LINE 294:
	asm( 
"	      00544f45    lea eax,[ebp-14h]"
"	      00544f48    mov ecx,[ebp+0Ch]"
"	      00544f4b    mov edx,[eax]"
"	      00544f4d    mov [ecx],edx"
"	      00544f4f    mov edx,[eax+4]"
"	      00544f52    mov [ecx+4],edx"
"	      00544f55    mov eax,[eax+8]"
"	      00544f58    mov [ecx+8],eax"
);
// LINE 295:
	asm( 
"	      00544f5b    mov ax,1"
"	      00544f5f    jmp near ptr 00544F71h"
);
// LINE 296:
	asm( 
"	      00544f64    jmp near ptr 00544C58h"
);
// LINE 297:
	asm( 
"	      00544f69    xor ax,ax"
"	      00544f6c    jmp near ptr 00544F71h"
);
// LINE 298:
	asm( 
"	      00544f71    pop edi"
"	      00544f72    pop esi"
"	      00544f73    pop ebx"
"	      00544f74    leave"
"	      00544f75    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x00544f78
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType) {
// LINE 303:
	asm( 
"	      00544f78    push ebp"
"	      00544f79    mov ebp,esp"
"	      00544f7b    sub esp,38h"
"	      00544f7e    push ebx"
"	      00544f7f    push esi"
"	      00544f80    push edi"
"	      00544f81    mov [ebp-38h],ecx"
);
// LINE 305:
	asm( 
"	      00544f84    mov eax,[ebp+10h]"
"	      00544f87    push eax"
"	      00544f88    lea eax,[ebp-8]"
"	      00544f8b    push eax"
"	      00544f8c    lea eax,[ebp-4]"
"	      00544f8f    push eax"
"	      00544f90    mov eax,[ebp+8]"
"	      00544f93    push eax"
"	      00544f94    mov ecx,[ebp-38h]"
"	      00544f97    call 00545049h"
"	      00544f9c    movzx eax,ax"
"	      00544f9f    test eax,eax"
"	      00544fa1    je near ptr 0054503Ah"
"	      00544fa7    mov eax,[ebp-8]"
"	      00544faa    mov [ebp-30h],eax"
"	      00544fad    mov eax,[ebp-4]"
"	      00544fb0    mov [ebp-34h],eax"
);
// LINE 306:
	asm( 
"	      00544fb3    mov eax,[ebp+8]"
"	      00544fb6    movsx eax,word ptr [eax+2]"
"	      00544fba    shl eax,10h"
"	      00544fbd    add eax,[ebp-34h]"
"	      00544fc0    mov [ebp-2Ch],eax"
"	      00544fc3    mov eax,[ebp+8]"
"	      00544fc6    movsx eax,word ptr [eax+4]"
"	      00544fca    shl eax,10h"
"	      00544fcd    add eax,30000h"
"	      00544fd2    mov [ebp-28h],eax"
"	      00544fd5    mov eax,[ebp+8]"
"	      00544fd8    movsx eax,word ptr [eax+6]"
"	      00544fdc    shl eax,10h"
"	      00544fdf    add eax,[ebp-30h]"
"	      00544fe2    mov [ebp-24h],eax"
"	      00544fe5    lea eax,[ebp-2Ch]"
"	      00544fe8    lea ecx,[ebp-20h]"
"	      00544feb    mov edx,[eax]"
"	      00544fed    mov [ecx],edx"
"	      00544fef    mov edx,[eax+4]"
"	      00544ff2    mov [ecx+4],edx"
"	      00544ff5    mov eax,[eax+8]"
"	      00544ff8    mov [ecx+8],eax"
"	      00544ffb    jmp near ptr 00545000h"
"	      00545000    lea eax,[ebp-20h]"
"	      00545003    lea ecx,[ebp-14h]"
"	      00545006    mov edx,[eax]"
"	      00545008    mov [ecx],edx"
"	      0054500a    mov edx,[eax+4]"
"	      0054500d    mov [ecx+4],edx"
"	      00545010    mov eax,[eax+8]"
"	      00545013    mov [ecx+8],eax"
"	      00545016    lea eax,[ebp-14h]"
"	      00545019    mov ecx,[ebp+0Ch]"
"	      0054501c    mov edx,[eax]"
"	      0054501e    mov [ecx],edx"
"	      00545020    mov edx,[eax+4]"
"	      00545023    mov [ecx+4],edx"
"	      00545026    mov eax,[eax+8]"
"	      00545029    mov [ecx+8],eax"
);
// LINE 309:
	asm( 
"	      0054502c    mov ax,1"
"	      00545030    jmp near ptr 00545042h"
);
// LINE 311:
	asm( 
"	      00545035    jmp near ptr 00545042h"
);
// LINE 312:
	asm( 
"	      0054503a    xor ax,ax"
"	      0054503d    jmp near ptr 00545042h"
);
// LINE 313:
	asm( 
"	      00545042    pop edi"
"	      00545043    pop esi"
"	      00545044    pop ebx"
"	      00545045    leave"
"	      00545046    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x00545049
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType) {
// LINE 318:
	asm( 
"	      00545049    push ebp"
"	      0054504a    mov ebp,esp"
"	      0054504c    sub esp,19Ch"
"	      00545052    push ebx"
"	      00545053    push esi"
"	      00545054    push edi"
"	      00545055    mov [ebp-198h],ecx"
);
// LINE 319:
	asm( 
"	      0054505b    mov eax,[ebp+8]"
"	      0054505e    movsx eax,word ptr [eax+8]"
"	      00545062    shl eax,5"
"	      00545065    mov [ebp-0Ch],ax"
);
// LINE 320:
	asm( 
"	      00545069    mov eax,[ebp+8]"
"	      0054506c    movsx eax,word ptr [eax+8]"
"	      00545070    test eax,eax"
"	      00545072    jle near ptr 00545088h"
"	      00545078    mov eax,[ebp+8]"
"	      0054507b    movsx eax,word ptr [eax+8]"
"	      0054507f    cmp eax,14h"
"	      00545082    jl near ptr 005450A4h"
"	      00545088    push 8C085h"
"	      0054508d    push 5B88A8h"
"	      00545092    push 140h"
"	      00545097    push 5B88D4h"
"	      0054509c    call 00554F30h"
"	      005450a1    add esp,10h"
);
// LINE 321:
	asm( 
"	      005450a4    movsx eax,word ptr [ebp-0Ch]"
"	      005450a8    cmp eax,20h"
"	      005450ab    je near ptr 005450F6h"
"	      005450b1    movsx eax,word ptr [ebp-0Ch]"
"	      005450b5    cmp eax,40h"
"	      005450b8    je near ptr 005450F6h"
"	      005450be    movsx eax,word ptr [ebp-0Ch]"
"	      005450c2    cmp eax,60h"
"	      005450c5    je near ptr 005450F6h"
"	      005450cb    movsx eax,word ptr [ebp-0Ch]"
"	      005450cf    cmp eax,80h"
"	      005450d4    jge near ptr 005450F6h"
"	      005450da    push 8C085h"
"	      005450df    push 5B88F8h"
"	      005450e4    push 141h"
"	      005450e9    push 5B8908h"
"	      005450ee    call 00554F30h"
"	      005450f3    add esp,10h"
);
// LINE 323:
	asm( 
"	      005450f6    mov word ptr [ebp-8],0"
);
// LINE 324:
	asm( 
"	      005450fc    push 20000h"
"	      00545101    mov eax,[ebp-198h]"
"	      00545107    mov eax,[eax+34h]"
"	      0054510a    push eax"
"	      0054510b    call 004D19BDh"
"	      00545110    add esp,8"
"	      00545113    mov [ebp-4],eax"
);
// LINE 325:
	asm( 
"	      00545116    mov eax,[ebp+14h]"
"	      00545119    mov [ebp-19Ch],eax"
"	      0054511f    jmp near ptr 00545993h"
);
// LINE 328:
	asm( 
"	      00545124    mov word ptr [ebp-1Ch],0"
"	      0054512a    jmp near ptr 00545133h"
"	      0054512f    inc word ptr [ebp-1Ch]"
"	      00545133    movsx eax,word ptr [ebp-1Ch]"
"	      00545137    cmp eax,2"
"	      0054513a    jge near ptr 0054549Dh"
);
// LINE 329:
	asm( 
"	      00545140    cmp dword ptr [ebp+14h],0"
"	      00545144    jne near ptr 00545226h"
);
// LINE 330:
	asm( 
"	      0054514a    movsx eax,word ptr [ebp-0Ch]"
"	      0054514e    test eax,eax"
"	      00545150    jne near ptr 0054516Eh"
"	      00545156    mov eax,[ebp+10h]"
"	      00545159    mov dword ptr [eax],0"
"	      0054515f    mov eax,[ebp+10h]"
"	      00545162    mov eax,[eax]"
"	      00545164    mov ecx,[ebp+0Ch]"
"	      00545167    mov [ecx],eax"
"	      00545169    jmp near ptr 00545221h"
"	      0054516e    movsx ebx,word ptr [ebp-0Ch]"
"	      00545172    dec ebx"
"	      00545173    movsx eax,word ptr [ebp-0Ch]"
"	      00545177    lea eax,[eax*2-2]"
"	      0054517e    push eax"
"	      0054517f    call 0055D717h"
"	      00545184    add esp,4"
"	      00545187    movzx eax,ax"
"	      0054518a    sub ebx,eax"
"	      0054518c    shl ebx,10h"
"	      0054518f    mov [ebp-174h],ebx"
"	      00545195    push 2"
"	      00545197    call 0055D717h"
"	      0054519c    add esp,4"
"	      0054519f    movzx eax,ax"
"	      005451a2    test eax,eax"
"	      005451a4    je near ptr 005451BAh"
"	      005451aa    movsx eax,word ptr [ebp-0Ch]"
"	      005451ae    dec eax"
"	      005451af    mov [ebp-17Ch],eax"
"	      005451b5    jmp near ptr 005451C7h"
"	      005451ba    movsx eax,word ptr [ebp-0Ch]"
"	      005451be    neg eax"
"	      005451c0    inc eax"
"	      005451c1    mov [ebp-17Ch],eax"
"	      005451c7    mov eax,[ebp-17Ch]"
"	      005451cd    shl eax,10h"
"	      005451d0    mov [ebp-178h],eax"
"	      005451d6    push 2"
"	      005451d8    call 0055D717h"
"	      005451dd    add esp,4"
"	      005451e0    movzx eax,ax"
"	      005451e3    test eax,eax"
"	      005451e5    je near ptr 00545206h"
"	      005451eb    mov eax,[ebp-174h]"
"	      005451f1    mov ecx,[ebp+0Ch]"
"	      005451f4    mov [ecx],eax"
"	      005451f6    mov eax,[ebp-178h]"
"	      005451fc    mov ecx,[ebp+10h]"
"	      005451ff    mov [ecx],eax"
"	      00545201    jmp near ptr 0054521Ch"
"	      00545206    mov eax,[ebp-174h]"
"	      0054520c    mov ecx,[ebp+10h]"
"	      0054520f    mov [ecx],eax"
"	      00545211    mov eax,[ebp-178h]"
"	      00545217    mov ecx,[ebp+0Ch]"
"	      0054521a    mov [ecx],eax"
"	      0054521c    jmp near ptr 00545221h"
);
// LINE 331:
	asm( 
"	      00545221    jmp near ptr 00545337h"
);
// LINE 332:
	asm( 
"	      00545226    movsx eax,word ptr [ebp-0Ch]"
"	      0054522a    test eax,eax"
"	      0054522c    jne near ptr 0054524Ah"
"	      00545232    mov eax,[ebp+10h]"
"	      00545235    mov dword ptr [eax],0"
"	      0054523b    mov eax,[ebp+10h]"
"	      0054523e    mov eax,[eax]"
"	      00545240    mov ecx,[ebp+0Ch]"
"	      00545243    mov [ecx],eax"
"	      00545245    jmp near ptr 00545332h"
"	      0054524a    movsx ebx,word ptr [ebp-0Ch]"
"	      0054524e    dec ebx"
"	      0054524f    movsx eax,word ptr [ebp-0Ch]"
"	      00545253    lea eax,[eax*2-2]"
"	      0054525a    push eax"
"	      0054525b    call 0055D717h"
"	      00545260    add esp,4"
"	      00545263    movzx eax,ax"
"	      00545266    sub ebx,eax"
"	      00545268    shl ebx,10h"
"	      0054526b    mov eax,[ebp+0Ch]"
"	      0054526e    mov [eax],ebx"
"	      00545270    movsx ebx,word ptr [ebp-0Ch]"
"	      00545274    dec ebx"
"	      00545275    movsx eax,word ptr [ebp-0Ch]"
"	      00545279    lea eax,[eax*2-2]"
"	      00545280    push eax"
"	      00545281    call 0055D717h"
"	      00545286    add esp,4"
"	      00545289    movzx eax,ax"
"	      0054528c    sub ebx,eax"
"	      0054528e    shl ebx,10h"
"	      00545291    mov eax,[ebp+10h]"
"	      00545294    mov [eax],ebx"
"	      00545296    mov eax,[ebp+0Ch]"
"	      00545299    mov eax,[eax]"
"	      0054529b    sar eax,10h"
"	      0054529e    mov [ebp-180h],ax"
"	      005452a5    mov eax,[ebp+10h]"
"	      005452a8    mov eax,[eax]"
"	      005452aa    sar eax,10h"
"	      005452ad    mov [ebp-184h],ax"
"	      005452b4    jmp near ptr 005452B9h"
"	      005452b9    movsx eax,word ptr [ebp-180h]"
"	      005452c0    cdq"
"	      005452c1    xor eax,edx"
"	      005452c3    sub eax,edx"
"	      005452c5    movsx eax,ax"
"	      005452c8    movsx ecx,word ptr [ebp-0Ch]"
"	      005452cc    shl ecx,10h"
"	      005452cf    cmp eax,ecx"
"	      005452d1    jl near ptr 005452F3h"
"	      005452d7    push 8C085h"
"	      005452dc    push 59A24Ch"
"	      005452e1    push 44Ah"
"	      005452e6    push 5BBA14h"
"	      005452eb    call 00554F30h"
"	      005452f0    add esp,10h"
"	      005452f3    jmp near ptr 005452F8h"
"	      005452f8    movsx eax,word ptr [ebp-184h]"
"	      005452ff    cdq"
"	      00545300    xor eax,edx"
"	      00545302    sub eax,edx"
"	      00545304    movsx eax,ax"
"	      00545307    movsx ecx,word ptr [ebp-0Ch]"
"	      0054530b    shl ecx,10h"
"	      0054530e    cmp eax,ecx"
"	      00545310    jl near ptr 00545332h"
"	      00545316    push 8C085h"
"	      0054531b    push 59A24Ch"
"	      00545320    push 44Bh"
"	      00545325    push 5BBA14h"
"	      0054532a    call 00554F30h"
"	      0054532f    add esp,10h"
"	      00545332    jmp near ptr 00545337h"
"	      00545337    mov eax,[ebp+10h]"
"	      0054533a    mov eax,[eax]"
"	      0054533c    mov [ebp-128h],eax"
"	      00545342    mov eax,[ebp+0Ch]"
"	      00545345    mov eax,[eax]"
"	      00545347    mov [ebp-12Ch],eax"
);
// LINE 333:
	asm( 
"	      0054534d    mov eax,[ebp+8]"
"	      00545350    movsx eax,word ptr [eax+2]"
"	      00545354    shl eax,10h"
"	      00545357    add eax,[ebp-12Ch]"
"	      0054535d    mov [ebp-124h],eax"
"	      00545363    mov eax,[ebp+8]"
"	      00545366    movsx eax,word ptr [eax+4]"
"	      0054536a    shl eax,10h"
"	      0054536d    add eax,30000h"
"	      00545372    mov [ebp-120h],eax"
"	      00545378    mov eax,[ebp+8]"
"	      0054537b    movsx eax,word ptr [eax+6]"
"	      0054537f    shl eax,10h"
"	      00545382    add eax,[ebp-128h]"
"	      00545388    mov [ebp-11Ch],eax"
"	      0054538e    lea eax,[ebp-124h]"
"	      00545394    lea ecx,[ebp-0DCh]"
"	      0054539a    mov edx,[eax]"
"	      0054539c    mov [ecx],edx"
"	      0054539e    mov edx,[eax+4]"
"	      005453a1    mov [ecx+4],edx"
"	      005453a4    mov eax,[eax+8]"
"	      005453a7    mov [ecx+8],eax"
"	      005453aa    jmp near ptr 005453AFh"
"	      005453af    lea eax,[ebp-0DCh]"
"	      005453b5    lea ecx,[ebp-0ACh]"
"	      005453bb    mov edx,[eax]"
"	      005453bd    mov [ecx],edx"
"	      005453bf    mov edx,[eax+4]"
"	      005453c2    mov [ecx+4],edx"
"	      005453c5    mov eax,[eax+8]"
"	      005453c8    mov [ecx+8],eax"
"	      005453cb    lea eax,[ebp-0ACh]"
"	      005453d1    lea ecx,[ebp-18h]"
"	      005453d4    mov edx,[eax]"
"	      005453d6    mov [ecx],edx"
"	      005453d8    mov edx,[eax+4]"
"	      005453db    mov [ecx+4],edx"
"	      005453de    mov eax,[eax+8]"
"	      005453e1    mov [ecx+8],eax"
);
// LINE 335:
	asm( 
"	      005453e4    push 0"
"	      005453e6    push 0"
"	      005453e8    mov eax,[ebp-4]"
"	      005453eb    push eax"
"	      005453ec    mov eax,[ebp-10h]"
"	      005453ef    push eax"
"	      005453f0    mov eax,[ebp-14h]"
"	      005453f3    push eax"
"	      005453f4    mov eax,[ebp-18h]"
"	      005453f7    push eax"
"	      005453f8    push 0"
"	      005453fa    call 00555369h"
"	      005453ff    add esp,1Ch"
"	      00545402    test eax,eax"
"	      00545404    je near ptr 0054540Fh"
);
// LINE 336:
	asm( 
"	      0054540a    jmp near ptr 0054512Fh"
);
// LINE 337:
	asm( 
"	      0054540f    jmp near ptr 00545414h"
"	      00545414    mov eax,[ebp+8]"
"	      00545417    movsx eax,word ptr [eax]"
"	      0054541a    and eax,1"
"	      0054541d    movzx eax,ax"
"	      00545420    test eax,eax"
"	      00545422    je near ptr 0054548Dh"
"	      00545428    mov eax,[ebp+8]"
"	      0054542b    movsx eax,word ptr [eax+4]"
"	      0054542f    add eax,0Ah"
"	      00545432    mov [ebp-108h],ax"
"	      00545439    mov eax,[ebp-10h]"
"	      0054543c    push eax"
"	      0054543d    mov eax,[ebp-14h]"
"	      00545440    push eax"
"	      00545441    mov eax,[ebp-18h]"
"	      00545444    push eax"
"	      00545445    call 00551BF7h"
"	      0054544a    add esp,0Ch"
"	      0054544d    mov [ebp-104h],eax"
"	      00545453    movsx eax,word ptr [ebp-108h]"
"	      0054545a    shl eax,10h"
"	      0054545d    cmp eax,[ebp-104h]"
"	      00545463    jge near ptr 0054546Eh"
"	      00545469    jmp near ptr 00545473h"
"	      0054546e    jmp near ptr 0054548Dh"
"	      00545473    jmp near ptr 00545488h"
"	      00545478    test dword ptr [ebp-10Ch],0FFFFh"
"	      00545482    je near ptr 0054548Dh"
);
// LINE 338:
	asm( 
"	      00545488    jmp near ptr 0054512Fh"
);
// LINE 342:
	asm( 
"	      0054548d    mov word ptr [ebp-8],1"
);
// LINE 343:
	asm( 
"	      00545493    jmp near ptr 0054549Dh"
);
// LINE 344:
	asm( 
"	      00545498    jmp near ptr 0054512Fh"
);
// LINE 345:
	asm( 
"	      0054549d    jmp near ptr 005459BDh"
);
// LINE 348:
	asm( 
"	      005454a2    mov word ptr [ebp-20h],0"
"	      005454a8    jmp near ptr 005454B1h"
"	      005454ad    inc word ptr [ebp-20h]"
"	      005454b1    movsx eax,word ptr [ebp-20h]"
"	      005454b5    cmp eax,2"
"	      005454b8    jge near ptr 00545735h"
);
// LINE 349:
	asm( 
"	      005454be    movsx eax,word ptr [ebp-0Ch]"
"	      005454c2    test eax,eax"
"	      005454c4    jne near ptr 005454E2h"
"	      005454ca    mov eax,[ebp+10h]"
"	      005454cd    mov dword ptr [eax],0"
"	      005454d3    mov eax,[ebp+10h]"
"	      005454d6    mov eax,[eax]"
"	      005454d8    mov ecx,[ebp+0Ch]"
"	      005454db    mov [ecx],eax"
"	      005454dd    jmp near ptr 005455CAh"
"	      005454e2    movsx ebx,word ptr [ebp-0Ch]"
"	      005454e6    dec ebx"
"	      005454e7    movsx eax,word ptr [ebp-0Ch]"
"	      005454eb    lea eax,[eax*2-2]"
"	      005454f2    push eax"
"	      005454f3    call 0055D717h"
"	      005454f8    add esp,4"
"	      005454fb    movzx eax,ax"
"	      005454fe    sub ebx,eax"
"	      00545500    shl ebx,10h"
"	      00545503    mov eax,[ebp+0Ch]"
"	      00545506    mov [eax],ebx"
"	      00545508    movsx ebx,word ptr [ebp-0Ch]"
"	      0054550c    dec ebx"
"	      0054550d    movsx eax,word ptr [ebp-0Ch]"
"	      00545511    lea eax,[eax*2-2]"
"	      00545518    push eax"
"	      00545519    call 0055D717h"
"	      0054551e    add esp,4"
"	      00545521    movzx eax,ax"
"	      00545524    sub ebx,eax"
"	      00545526    shl ebx,10h"
"	      00545529    mov eax,[ebp+10h]"
"	      0054552c    mov [eax],ebx"
"	      0054552e    mov eax,[ebp+0Ch]"
"	      00545531    mov eax,[eax]"
"	      00545533    sar eax,10h"
"	      00545536    mov [ebp-188h],ax"
"	      0054553d    mov eax,[ebp+10h]"
"	      00545540    mov eax,[eax]"
"	      00545542    sar eax,10h"
"	      00545545    mov [ebp-18Ch],ax"
"	      0054554c    jmp near ptr 00545551h"
"	      00545551    movsx eax,word ptr [ebp-188h]"
"	      00545558    cdq"
"	      00545559    xor eax,edx"
"	      0054555b    sub eax,edx"
"	      0054555d    movsx eax,ax"
"	      00545560    movsx ecx,word ptr [ebp-0Ch]"
"	      00545564    shl ecx,10h"
"	      00545567    cmp eax,ecx"
"	      00545569    jl near ptr 0054558Bh"
"	      0054556f    push 8C085h"
"	      00545574    push 59A24Ch"
"	      00545579    push 44Ah"
"	      0054557e    push 5BBA14h"
"	      00545583    call 00554F30h"
"	      00545588    add esp,10h"
"	      0054558b    jmp near ptr 00545590h"
"	      00545590    movsx eax,word ptr [ebp-18Ch]"
"	      00545597    cdq"
"	      00545598    xor eax,edx"
"	      0054559a    sub eax,edx"
"	      0054559c    movsx eax,ax"
"	      0054559f    movsx ecx,word ptr [ebp-0Ch]"
"	      005455a3    shl ecx,10h"
"	      005455a6    cmp eax,ecx"
"	      005455a8    jl near ptr 005455CAh"
"	      005455ae    push 8C085h"
"	      005455b3    push 59A24Ch"
"	      005455b8    push 44Bh"
"	      005455bd    push 5BBA14h"
"	      005455c2    call 00554F30h"
"	      005455c7    add esp,10h"
"	      005455ca    jmp near ptr 005455CFh"
"	      005455cf    mov eax,[ebp+10h]"
"	      005455d2    mov eax,[eax]"
"	      005455d4    mov [ebp-13Ch],eax"
"	      005455da    mov eax,[ebp+0Ch]"
"	      005455dd    mov eax,[eax]"
"	      005455df    mov [ebp-140h],eax"
);
// LINE 350:
	asm( 
"	      005455e5    mov eax,[ebp+8]"
"	      005455e8    movsx eax,word ptr [eax+2]"
"	      005455ec    shl eax,10h"
"	      005455ef    add eax,[ebp-140h]"
"	      005455f5    mov [ebp-138h],eax"
"	      005455fb    mov eax,[ebp+8]"
"	      005455fe    movsx eax,word ptr [eax+4]"
"	      00545602    shl eax,10h"
"	      00545605    add eax,30000h"
"	      0054560a    mov [ebp-134h],eax"
"	      00545610    mov eax,[ebp+8]"
"	      00545613    movsx eax,word ptr [eax+6]"
"	      00545617    shl eax,10h"
"	      0054561a    add eax,[ebp-13Ch]"
"	      00545620    mov [ebp-130h],eax"
"	      00545626    lea eax,[ebp-138h]"
"	      0054562c    lea ecx,[ebp-0E8h]"
"	      00545632    mov edx,[eax]"
"	      00545634    mov [ecx],edx"
"	      00545636    mov edx,[eax+4]"
"	      00545639    mov [ecx+4],edx"
"	      0054563c    mov eax,[eax+8]"
"	      0054563f    mov [ecx+8],eax"
"	      00545642    jmp near ptr 00545647h"
"	      00545647    lea eax,[ebp-0E8h]"
"	      0054564d    lea ecx,[ebp-0B8h]"
"	      00545653    mov edx,[eax]"
"	      00545655    mov [ecx],edx"
"	      00545657    mov edx,[eax+4]"
"	      0054565a    mov [ecx+4],edx"
"	      0054565d    mov eax,[eax+8]"
"	      00545660    mov [ecx+8],eax"
"	      00545663    lea eax,[ebp-0B8h]"
"	      00545669    lea ecx,[ebp-18h]"
"	      0054566c    mov edx,[eax]"
"	      0054566e    mov [ecx],edx"
"	      00545670    mov edx,[eax+4]"
"	      00545673    mov [ecx+4],edx"
"	      00545676    mov eax,[eax+8]"
"	      00545679    mov [ecx+8],eax"
);
// LINE 352:
	asm( 
"	      0054567c    push 0"
"	      0054567e    push 0"
"	      00545680    mov eax,[ebp-4]"
"	      00545683    push eax"
"	      00545684    mov eax,[ebp-10h]"
"	      00545687    push eax"
"	      00545688    mov eax,[ebp-14h]"
"	      0054568b    push eax"
"	      0054568c    mov eax,[ebp-18h]"
"	      0054568f    push eax"
"	      00545690    push 0"
"	      00545692    call 00555369h"
"	      00545697    add esp,1Ch"
"	      0054569a    test eax,eax"
"	      0054569c    je near ptr 005456A7h"
);
// LINE 353:
	asm( 
"	      005456a2    jmp near ptr 005454ADh"
);
// LINE 354:
	asm( 
"	      005456a7    jmp near ptr 005456ACh"
"	      005456ac    mov eax,[ebp+8]"
"	      005456af    movsx eax,word ptr [eax]"
"	      005456b2    and eax,1"
"	      005456b5    movzx eax,ax"
"	      005456b8    test eax,eax"
"	      005456ba    je near ptr 00545720h"
"	      005456c0    mov eax,[ebp+8]"
"	      005456c3    movsx eax,word ptr [eax+4]"
"	      005456c7    add eax,0Ah"
"	      005456ca    mov [ebp-114h],ax"
"	      005456d1    mov eax,[ebp-10h]"
"	      005456d4    push eax"
"	      005456d5    mov eax,[ebp-14h]"
"	      005456d8    push eax"
"	      005456d9    mov eax,[ebp-18h]"
"	      005456dc    push eax"
"	      005456dd    call 00551BF7h"
"	      005456e2    add esp,0Ch"
"	      005456e5    mov [ebp-110h],eax"
"	      005456eb    movsx eax,word ptr [ebp-114h]"
"	      005456f2    shl eax,10h"
"	      005456f5    cmp eax,[ebp-110h]"
"	      005456fb    jge near ptr 0054570Bh"
"	      00545701    jmp near ptr 00545725h"
"	      00545706    jmp near ptr 0054570Bh"
"	      0054570b    jmp near ptr 00545720h"
"	      00545710    test dword ptr [ebp-118h],0FFFFh"
"	      0054571a    jne near ptr 00545725h"
);
// LINE 355:
	asm( 
"	      00545720    jmp near ptr 005454ADh"
);
// LINE 356:
	asm( 
"	      00545725    mov word ptr [ebp-8],1"
);
// LINE 357:
	asm( 
"	      0054572b    jmp near ptr 00545735h"
);
// LINE 358:
	asm( 
"	      00545730    jmp near ptr 005454ADh"
);
// LINE 359:
	asm( 
"	      00545735    jmp near ptr 005459BDh"
);
// LINE 362:
	asm( 
"	      0054573a    mov word ptr [ebp-24h],0"
"	      00545740    jmp near ptr 00545749h"
"	      00545745    inc word ptr [ebp-24h]"
"	      00545749    movsx eax,word ptr [ebp-24h]"
"	      0054574d    cmp eax,2"
"	      00545750    jge near ptr 0054596Dh"
);
// LINE 363:
	asm( 
"	      00545756    movsx eax,word ptr [ebp-0Ch]"
"	      0054575a    test eax,eax"
"	      0054575c    jne near ptr 0054577Ah"
"	      00545762    mov eax,[ebp+10h]"
"	      00545765    mov dword ptr [eax],0"
"	      0054576b    mov eax,[ebp+10h]"
"	      0054576e    mov eax,[eax]"
"	      00545770    mov ecx,[ebp+0Ch]"
"	      00545773    mov [ecx],eax"
"	      00545775    jmp near ptr 00545862h"
"	      0054577a    movsx ebx,word ptr [ebp-0Ch]"
"	      0054577e    dec ebx"
"	      0054577f    movsx eax,word ptr [ebp-0Ch]"
"	      00545783    lea eax,[eax*2-2]"
"	      0054578a    push eax"
"	      0054578b    call 0055D717h"
"	      00545790    add esp,4"
"	      00545793    movzx eax,ax"
"	      00545796    sub ebx,eax"
"	      00545798    shl ebx,10h"
"	      0054579b    mov eax,[ebp+0Ch]"
"	      0054579e    mov [eax],ebx"
"	      005457a0    movsx ebx,word ptr [ebp-0Ch]"
"	      005457a4    dec ebx"
"	      005457a5    movsx eax,word ptr [ebp-0Ch]"
"	      005457a9    lea eax,[eax*2-2]"
"	      005457b0    push eax"
"	      005457b1    call 0055D717h"
"	      005457b6    add esp,4"
"	      005457b9    movzx eax,ax"
"	      005457bc    sub ebx,eax"
"	      005457be    shl ebx,10h"
"	      005457c1    mov eax,[ebp+10h]"
"	      005457c4    mov [eax],ebx"
"	      005457c6    mov eax,[ebp+0Ch]"
"	      005457c9    mov eax,[eax]"
"	      005457cb    sar eax,10h"
"	      005457ce    mov [ebp-190h],ax"
"	      005457d5    mov eax,[ebp+10h]"
"	      005457d8    mov eax,[eax]"
"	      005457da    sar eax,10h"
"	      005457dd    mov [ebp-194h],ax"
"	      005457e4    jmp near ptr 005457E9h"
"	      005457e9    movsx eax,word ptr [ebp-190h]"
"	      005457f0    cdq"
"	      005457f1    xor eax,edx"
"	      005457f3    sub eax,edx"
"	      005457f5    movsx eax,ax"
"	      005457f8    movsx ecx,word ptr [ebp-0Ch]"
"	      005457fc    shl ecx,10h"
"	      005457ff    cmp eax,ecx"
"	      00545801    jl near ptr 00545823h"
"	      00545807    push 8C085h"
"	      0054580c    push 59A24Ch"
"	      00545811    push 44Ah"
"	      00545816    push 5BBA14h"
"	      0054581b    call 00554F30h"
"	      00545820    add esp,10h"
"	      00545823    jmp near ptr 00545828h"
"	      00545828    movsx eax,word ptr [ebp-194h]"
"	      0054582f    cdq"
"	      00545830    xor eax,edx"
"	      00545832    sub eax,edx"
"	      00545834    movsx eax,ax"
"	      00545837    movsx ecx,word ptr [ebp-0Ch]"
"	      0054583b    shl ecx,10h"
"	      0054583e    cmp eax,ecx"
"	      00545840    jl near ptr 00545862h"
"	      00545846    push 8C085h"
"	      0054584b    push 59A24Ch"
"	      00545850    push 44Bh"
"	      00545855    push 5BBA14h"
"	      0054585a    call 00554F30h"
"	      0054585f    add esp,10h"
"	      00545862    jmp near ptr 00545867h"
"	      00545867    mov eax,[ebp+10h]"
"	      0054586a    mov eax,[eax]"
"	      0054586c    mov [ebp-150h],eax"
"	      00545872    mov eax,[ebp+0Ch]"
"	      00545875    mov eax,[eax]"
"	      00545877    mov [ebp-154h],eax"
);
// LINE 364:
	asm( 
"	      0054587d    mov eax,[ebp+8]"
"	      00545880    movsx eax,word ptr [eax+2]"
"	      00545884    shl eax,10h"
"	      00545887    add eax,[ebp-154h]"
"	      0054588d    mov [ebp-14Ch],eax"
"	      00545893    mov eax,[ebp+8]"
"	      00545896    movsx eax,word ptr [eax+4]"
"	      0054589a    shl eax,10h"
"	      0054589d    add eax,30000h"
"	      005458a2    mov [ebp-148h],eax"
"	      005458a8    mov eax,[ebp+8]"
"	      005458ab    movsx eax,word ptr [eax+6]"
"	      005458af    shl eax,10h"
"	      005458b2    add eax,[ebp-150h]"
"	      005458b8    mov [ebp-144h],eax"
"	      005458be    lea eax,[ebp-14Ch]"
"	      005458c4    lea ecx,[ebp-0F4h]"
"	      005458ca    mov edx,[eax]"
"	      005458cc    mov [ecx],edx"
"	      005458ce    mov edx,[eax+4]"
"	      005458d1    mov [ecx+4],edx"
"	      005458d4    mov eax,[eax+8]"
"	      005458d7    mov [ecx+8],eax"
"	      005458da    jmp near ptr 005458DFh"
"	      005458df    lea eax,[ebp-0F4h]"
"	      005458e5    lea ecx,[ebp-0C4h]"
"	      005458eb    mov edx,[eax]"
"	      005458ed    mov [ecx],edx"
"	      005458ef    mov edx,[eax+4]"
"	      005458f2    mov [ecx+4],edx"
"	      005458f5    mov eax,[eax+8]"
"	      005458f8    mov [ecx+8],eax"
"	      005458fb    lea eax,[ebp-0C4h]"
"	      00545901    lea ecx,[ebp-18h]"
"	      00545904    mov edx,[eax]"
"	      00545906    mov [ecx],edx"
"	      00545908    mov edx,[eax+4]"
"	      0054590b    mov [ecx+4],edx"
"	      0054590e    mov eax,[eax+8]"
"	      00545911    mov [ecx+8],eax"
);
// LINE 366:
	asm( 
"	      00545914    push 0"
"	      00545916    push 0"
"	      00545918    mov eax,[ebp-4]"
"	      0054591b    push eax"
"	      0054591c    mov eax,[ebp-10h]"
"	      0054591f    push eax"
"	      00545920    mov eax,[ebp-14h]"
"	      00545923    push eax"
"	      00545924    mov eax,[ebp-18h]"
"	      00545927    push eax"
"	      00545928    push 0"
"	      0054592a    call 00555369h"
"	      0054592f    add esp,1Ch"
"	      00545932    test eax,eax"
"	      00545934    je near ptr 0054593Fh"
);
// LINE 367:
	asm( 
"	      0054593a    jmp near ptr 00545745h"
);
// LINE 368:
	asm( 
"	      0054593f    jmp near ptr 00545944h"
"	      00545944    mov eax,[ebp+8]"
"	      00545947    movsx eax,word ptr [eax]"
"	      0054594a    and eax,1"
"	      0054594d    movzx eax,ax"
"	      00545950    test eax,eax"
"	      00545952    jne near ptr 0054595Dh"
);
// LINE 369:
	asm( 
"	      00545958    jmp near ptr 00545745h"
);
// LINE 370:
	asm( 
"	      0054595d    mov word ptr [ebp-8],1"
);
// LINE 371:
	asm( 
"	      00545963    jmp near ptr 0054596Dh"
);
// LINE 372:
	asm( 
"	      00545968    jmp near ptr 00545745h"
);
// LINE 373:
	asm( 
"	      0054596d    jmp near ptr 005459BDh"
);
// LINE 376:
	asm( 
"	      00545972    push 8C085h"
"	      00545977    push 5B892Ch"
"	      0054597c    push 178h"
"	      00545981    push 5B8940h"
"	      00545986    call 00554F30h"
"	      0054598b    add esp,10h"
);
// LINE 377:
	asm( 
"	      0054598e    jmp near ptr 005459BDh"
"	      00545993    cmp dword ptr [ebp-19Ch],3"
"	      0054599a    ja near ptr 00545972h"
"	      005459a0    mov eax,[ebp-19Ch]"
"	      005459a6    jmp dword ptr [eax*4+5459ADh]"
"	      005459ad    and al,51h"
"	      005459af    push esp"
"	      005459b0    add [ecx+edx*2],ah"
"	      005459b3    push esp"
"	      005459b4    add [edx+3A005454h],ah"
"	      005459ba    push edi"
"	      005459bb    push esp"
"	      005459bc    (bad)"
);
// LINE 379:
	asm( 
"	      005459bd    test dword ptr [ebp-8],0FFFFh"
"	      005459c4    je near ptr 00545CB3h"
);
// LINE 380:
	asm( 
"	      005459ca    mov eax,[ebp+8]"
"	      005459cd    movsx eax,word ptr [eax+2]"
"	      005459d1    shl eax,10h"
"	      005459d4    add eax,20000000h"
"	      005459d9    sar eax,16h"
"	      005459dc    mov [ebp-38h],eax"
);
// LINE 381:
	asm( 
"	      005459df    mov eax,20000000h"
"	      005459e4    mov ecx,[ebp+8]"
"	      005459e7    movsx ecx,word ptr [ecx+6]"
"	      005459eb    shl ecx,10h"
"	      005459ee    sub eax,ecx"
"	      005459f0    sar eax,16h"
"	      005459f3    mov [ebp-2Ch],eax"
"	      005459f6    mov eax,[ebp+10h]"
"	      005459f9    mov eax,[eax]"
"	      005459fb    mov [ebp-164h],eax"
"	      00545a01    mov eax,[ebp+0Ch]"
"	      00545a04    mov eax,[eax]"
"	      00545a06    mov [ebp-168h],eax"
);
// LINE 382:
	asm( 
"	      00545a0c    mov eax,[ebp+8]"
"	      00545a0f    movsx eax,word ptr [eax+2]"
"	      00545a13    shl eax,10h"
"	      00545a16    add eax,[ebp-168h]"
"	      00545a1c    mov [ebp-160h],eax"
"	      00545a22    mov eax,[ebp+8]"
"	      00545a25    movsx eax,word ptr [eax+4]"
"	      00545a29    shl eax,10h"
"	      00545a2c    add eax,30000h"
"	      00545a31    mov [ebp-15Ch],eax"
"	      00545a37    mov eax,[ebp+8]"
"	      00545a3a    movsx eax,word ptr [eax+6]"
"	      00545a3e    shl eax,10h"
"	      00545a41    add eax,[ebp-164h]"
"	      00545a47    mov [ebp-158h],eax"
"	      00545a4d    lea eax,[ebp-160h]"
"	      00545a53    lea ecx,[ebp-100h]"
"	      00545a59    mov edx,[eax]"
"	      00545a5b    mov [ecx],edx"
"	      00545a5d    mov edx,[eax+4]"
"	      00545a60    mov [ecx+4],edx"
"	      00545a63    mov eax,[eax+8]"
"	      00545a66    mov [ecx+8],eax"
"	      00545a69    jmp near ptr 00545A6Eh"
"	      00545a6e    lea eax,[ebp-100h]"
"	      00545a74    lea ecx,[ebp-0D0h]"
"	      00545a7a    mov edx,[eax]"
"	      00545a7c    mov [ecx],edx"
"	      00545a7e    mov edx,[eax+4]"
"	      00545a81    mov [ecx+4],edx"
"	      00545a84    mov eax,[eax+8]"
"	      00545a87    mov [ecx+8],eax"
"	      00545a8a    lea eax,[ebp-0D0h]"
"	      00545a90    lea ecx,[ebp-50h]"
"	      00545a93    mov edx,[eax]"
"	      00545a95    mov [ecx],edx"
"	      00545a97    mov edx,[eax+4]"
"	      00545a9a    mov [ecx+4],edx"
"	      00545a9d    mov eax,[eax+8]"
"	      00545aa0    mov [ecx+8],eax"
);
// LINE 383:
	asm( 
"	      00545aa3    mov eax,[ebp-50h]"
"	      00545aa6    add eax,20000000h"
"	      00545aab    sar eax,16h"
"	      00545aae    mov [ebp-30h],eax"
);
// LINE 384:
	asm( 
"	      00545ab1    mov eax,20000000h"
"	      00545ab6    sub eax,[ebp-48h]"
"	      00545ab9    sar eax,16h"
"	      00545abc    mov [ebp-34h],eax"
);
// LINE 386:
	asm( 
"	      00545abf    movsx eax,word ptr [ebp-38h]"
"	      00545ac3    cmp eax,7Fh"
"	      00545ac6    jg near ptr 00545AF1h"
"	      00545acc    movsx eax,word ptr [ebp-2Ch]"
"	      00545ad0    cmp eax,7Fh"
"	      00545ad3    jg near ptr 00545AF1h"
"	      00545ad9    movsx eax,word ptr [ebp-38h]"
"	      00545add    test eax,eax"
"	      00545adf    jl near ptr 00545AF1h"
"	      00545ae5    movsx eax,word ptr [ebp-2Ch]"
"	      00545ae9    test eax,eax"
"	      00545aeb    jge near ptr 00545AFCh"
"	      00545af1    mov word ptr [ebp-44h],0FFFFh"
"	      00545af7    jmp near ptr 00545B64h"
"	      00545afc    movsx eax,word ptr [ebp-38h]"
"	      00545b00    mov eax,[eax*4+639850h]"
"	      00545b07    movsx ecx,word ptr [ebp-2Ch]"
"	      00545b0b    movzx ax,byte ptr [eax+ecx]"
"	      00545b10    mov [ebp-16Ch],ax"
"	      00545b17    movsx eax,word ptr [ebp-16Ch]"
"	      00545b1e    test eax,eax"
"	      00545b20    jl near ptr 00545B38h"
"	      00545b26    movsx eax,word ptr [ebp-16Ch]"
"	      00545b2d    cmp eax,100h"
"	      00545b32    jl near ptr 00545B54h"
"	      00545b38    push 8C085h"
"	      00545b3d    push 5BBA34h"
"	      00545b42    push 18Ah"
"	      00545b47    push 5BBA14h"
"	      00545b4c    call 00554F30h"
"	      00545b51    add esp,10h"
"	      00545b54    mov ax,[ebp-16Ch]"
"	      00545b5b    mov [ebp-44h],ax"
"	      00545b5f    jmp near ptr 00545B64h"
);
// LINE 387:
	asm( 
"	      00545b64    movsx eax,word ptr [ebp-30h]"
"	      00545b68    cmp eax,7Fh"
"	      00545b6b    jg near ptr 00545B96h"
"	      00545b71    movsx eax,word ptr [ebp-34h]"
"	      00545b75    cmp eax,7Fh"
"	      00545b78    jg near ptr 00545B96h"
"	      00545b7e    movsx eax,word ptr [ebp-30h]"
"	      00545b82    test eax,eax"
"	      00545b84    jl near ptr 00545B96h"
"	      00545b8a    movsx eax,word ptr [ebp-34h]"
"	      00545b8e    test eax,eax"
"	      00545b90    jge near ptr 00545BA1h"
"	      00545b96    mov word ptr [ebp-28h],0FFFFh"
"	      00545b9c    jmp near ptr 00545C09h"
"	      00545ba1    movsx eax,word ptr [ebp-30h]"
"	      00545ba5    mov eax,[eax*4+639850h]"
"	      00545bac    movsx ecx,word ptr [ebp-34h]"
"	      00545bb0    movzx ax,byte ptr [eax+ecx]"
"	      00545bb5    mov [ebp-170h],ax"
"	      00545bbc    movsx eax,word ptr [ebp-170h]"
"	      00545bc3    test eax,eax"
"	      00545bc5    jl near ptr 00545BDDh"
"	      00545bcb    movsx eax,word ptr [ebp-170h]"
"	      00545bd2    cmp eax,100h"
"	      00545bd7    jl near ptr 00545BF9h"
"	      00545bdd    push 8C085h"
"	      00545be2    push 5BBA34h"
"	      00545be7    push 18Ah"
"	      00545bec    push 5BBA14h"
"	      00545bf1    call 00554F30h"
"	      00545bf6    add esp,10h"
"	      00545bf9    mov ax,[ebp-170h]"
"	      00545c00    mov [ebp-28h],ax"
"	      00545c04    jmp near ptr 00545C09h"
);
// LINE 388:
	asm( 
"	      00545c09    movsx eax,word ptr [ebp-28h]"
"	      00545c0d    movsx ecx,word ptr [ebp-44h]"
"	      00545c11    cmp eax,ecx"
"	      00545c13    je near ptr 00545C65h"
);
// LINE 391:
	asm( 
"	      00545c19    mov eax,[ebp-34h]"
"	      00545c1c    push eax"
"	      00545c1d    mov eax,[ebp-30h]"
"	      00545c20    push eax"
"	      00545c21    movsx eax,word ptr [ebp-28h]"
"	      00545c25    push eax"
"	      00545c26    mov eax,[ebp-2Ch]"
"	      00545c29    push eax"
"	      00545c2a    mov eax,[ebp-38h]"
"	      00545c2d    push eax"
"	      00545c2e    movsx eax,word ptr [ebp-44h]"
"	      00545c32    push eax"
"	      00545c33    push 5B8964h"
"	      00545c38    lea eax,[ebp-0A0h]"
"	      00545c3e    push eax"
"	      00545c3f    call 0056CD30h"
"	      00545c44    add esp,20h"
);
// LINE 392:
	asm( 
"	      00545c47    push 8C085h"
"	      00545c4c    lea eax,[ebp-0A0h]"
"	      00545c52    push eax"
"	      00545c53    push 188h"
"	      00545c58    push 5B89A8h"
"	      00545c5d    call 00554F30h"
"	      00545c62    add esp,10h"
);
// LINE 395:
	asm( 
"	      00545c65    mov eax,[ebp-2Ch]"
"	      00545c68    push eax"
"	      00545c69    mov eax,[ebp-38h]"
"	      00545c6c    push eax"
"	      00545c6d    call 00555746h"
"	      00545c72    add esp,8"
"	      00545c75    mov [ebp-40h],eax"
);
// LINE 396:
	asm( 
"	      00545c78    mov eax,[ebp-34h]"
"	      00545c7b    push eax"
"	      00545c7c    mov eax,[ebp-30h]"
"	      00545c7f    push eax"
"	      00545c80    call 00555746h"
"	      00545c85    add esp,8"
"	      00545c88    mov [ebp-3Ch],eax"
);
// LINE 397:
	asm( 
"	      00545c8b    mov eax,[ebp-40h]"
"	      00545c8e    cmp [ebp-3Ch],eax"
"	      00545c91    je near ptr 00545CB3h"
"	      00545c97    push 8C085h"
"	      00545c9c    push 5B89CCh"
"	      00545ca1    push 18Dh"
"	      00545ca6    push 5B8A08h"
"	      00545cab    call 00554F30h"
"	      00545cb0    add esp,10h"
);
// LINE 400:
	asm( 
"	      00545cb3    mov ax,[ebp-8]"
"	      00545cb7    jmp near ptr 00545CBCh"
);
// LINE 401:
	asm( 
"	      00545cbc    pop edi"
"	      00545cbd    pop esi"
"	      00545cbe    pop ebx"
"	      00545cbf    leave"
"	      00545cc0    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x00545cc3
void duh() {
// LINE 403:
	asm( 
"	      00545cc3    push ebp"
"	      00545cc4    mov ebp,esp"
"	      00545cc6    push ebx"
"	      00545cc7    push esi"
"	      00545cc8    push edi"
"	      00545cc9    jmp near ptr 00545CCEh"
"	      00545cce    pop edi"
"	      00545ccf    pop esi"
"	      00545cd0    pop ebx"
"	      00545cd1    leave"
"	      00545cd2    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545cd3
void S3PersonInit() {
// LINE 405:
	asm( 
"	      00545cd3    push ebp"
"	      00545cd4    mov ebp,esp"
"	      00545cd6    sub esp,1Ch"
"	      00545cd9    push ebx"
"	      00545cda    push esi"
"	      00545cdb    push edi"
);
// LINE 406:
	asm( 
"	      00545cdc    mov dword ptr [ebp-18h],0"
);
// LINE 409:
	asm( 
"	      00545ce3    mov dword ptr [ebp-14h],0"
"	      00545cea    jmp near ptr 00545CF2h"
"	      00545cef    inc dword ptr [ebp-14h]"
"	      00545cf2    cmp dword ptr [ebp-14h],271h"
"	      00545cf9    jge near ptr 00545D30h"
);
// LINE 410:
	asm( 
"	      00545cff    mov eax,[ebp-14h]"
"	      00545d02    mov [ebp-1Ch],eax"
"	      00545d05    fild dword ptr [ebp-1Ch]"
"	      00545d08    sub esp,8"
"	      00545d0b    fstp qword ptr [esp]"
"	      00545d0e    call 0056EC10h"
"	      00545d13    add esp,8"
"	      00545d16    fadd qword ptr ds:[593528h]"
"	      00545d1c    call 0056EBE8h"
"	      00545d21    mov ecx,[ebp-14h]"
"	      00545d24    mov [ecx*4+6361C8h],eax"
"	      00545d2b    jmp near ptr 00545CEFh"
);
// LINE 412:
	asm( 
"	      00545d30    call 0055DB01h"
);
// LINE 413:
	asm( 
"	      00545d35    call 00547DE1h"
);
// LINE 417:
	asm( 
"	      00545d3a    mov dword ptr [ebp-8],0"
"	      00545d41    mov dword ptr [ebp-4],40240000h"
"	      00545d48    mov dword ptr [ebp-10h],66666666h"
"	      00545d4f    mov dword ptr [ebp-0Ch],402A6666h"
);
// LINE 419:
	asm( 
"	      00545d56    fld qword ptr [ebp-8]"
"	      00545d59    fdiv qword ptr [ebp-10h]"
"	      00545d5c    sub esp,8"
"	      00545d5f    fstp qword ptr [esp]"
"	      00545d62    call 00545CC3h"
"	      00545d67    add esp,8"
);
// LINE 420:
	asm( 
"	      00545d6a    jmp near ptr 00545D6Fh"
"	      00545d6f    pop edi"
"	      00545d70    pop esi"
"	      00545d71    pop ebx"
"	      00545d72    leave"
"	      00545d73    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545d74
void S3PersonDelete() {
// LINE 423:
	asm( 
"	      00545d74    push ebp"
"	      00545d75    mov ebp,esp"
"	      00545d77    push ebx"
"	      00545d78    push esi"
"	      00545d79    push edi"
);
// LINE 427:
	asm( 
"	      00545d7a    call 0055E29Eh"
);
// LINE 428:
	asm( 
"	      00545d7f    call 00547E59h"
);
// LINE 429:
	asm( 
"	      00545d84    jmp near ptr 00545D89h"
"	      00545d89    pop edi"
"	      00545d8a    pop esi"
"	      00545d8b    pop ebx"
"	      00545d8c    leave"
"	      00545d8d    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545d8e
void S3PersonNextFrame() {
// LINE 433:
	asm( 
"	      00545d8e    push ebp"
"	      00545d8f    mov ebp,esp"
"	      00545d91    push ebx"
"	      00545d92    push esi"
"	      00545d93    push edi"
);
// LINE 435:
	asm( 
"	      00545d94    call 0054C671h"
);
// LINE 437:
	asm( 
"	      00545d99    jmp near ptr 00545D9Eh"
"	      00545d9e    pop edi"
"	      00545d9f    pop esi"
"	      00545da0    pop ebx"
"	      00545da1    leave"
"	      00545da2    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545da3
void S3PersonUserNextFrame() {
// LINE 440:
	asm( 
"	      00545da3    push ebp"
"	      00545da4    mov ebp,esp"
"	      00545da6    push ebx"
"	      00545da7    push esi"
"	      00545da8    push edi"
);
// LINE 441:
	asm( 
"	      00545da9    mov ecx,ds:[5B8680h]"
"	      00545daf    call 0054DE18h"
);
// LINE 442:
	asm( 
"	      00545db4    jmp near ptr 00545DB9h"
"	      00545db9    pop edi"
"	      00545dba    pop esi"
"	      00545dbb    pop ebx"
"	      00545dbc    leave"
"	      00545dbd    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545dbe
void S3PersonReset() {
// LINE 445:
	asm( 
"	      00545dbe    push ebp"
"	      00545dbf    mov ebp,esp"
"	      00545dc1    sub esp,0Ch"
"	      00545dc4    push ebx"
"	      00545dc5    push esi"
"	      00545dc6    push edi"
);
// LINE 446:
	asm( 
"	      00545dc7    mov word ptr [ebp-4],0"
"	      00545dcd    jmp near ptr 00545DD6h"
"	      00545dd2    inc word ptr [ebp-4]"
"	      00545dd6    movsx eax,word ptr [ebp-4]"
"	      00545dda    cmp eax,64h"
"	      00545ddd    jge near ptr 00545EB1h"
);
// LINE 447:
	asm( 
"	      00545de3    movsx eax,word ptr [ebp-4]"
"	      00545de7    cmp eax,7D00h"
"	      00545dec    jne near ptr 00545DFFh"
"	      00545df2    mov eax,ds:[5B8680h]"
"	      00545df7    mov [ebp-8],eax"
"	      00545dfa    jmp near ptr 00545E7Bh"
"	      00545dff    movsx eax,word ptr [ebp-4]"
"	      00545e03    test eax,eax"
"	      00545e05    jl near ptr 00545E18h"
"	      00545e0b    movsx eax,word ptr [ebp-4]"
"	      00545e0f    cmp eax,64h"
"	      00545e12    jl near ptr 00545E34h"
"	      00545e18    push 8C085h"
"	      00545e1d    push 5BB9F4h"
"	      00545e22    push 204h"
"	      00545e27    push 5BBA14h"
"	      00545e2c    call 00554F30h"
"	      00545e31    add esp,10h"
"	      00545e34    movsx eax,word ptr [ebp-4]"
"	      00545e38    cmp dword ptr [eax*4+636D40h],0"
"	      00545e40    jne near ptr 00545E62h"
"	      00545e46    push 8C085h"
"	      00545e4b    push 5BB9D0h"
"	      00545e50    push 205h"
"	      00545e55    push 5BBA14h"
"	      00545e5a    call 00554F30h"
"	      00545e5f    add esp,10h"
"	      00545e62    movsx eax,word ptr [ebp-4]"
"	      00545e66    mov eax,[eax*4+636D40h]"
"	      00545e6d    mov [ebp-8],eax"
"	      00545e70    jmp near ptr 00545E7Bh"
"	      00545e75    mov eax,[ebp-0Ch]"
"	      00545e78    mov [ebp-8],eax"
);
// LINE 448:
	asm( 
"	      00545e7b    cmp dword ptr [ebp-8],0"
"	      00545e7f    jne near ptr 00545EA1h"
"	      00545e85    push 8C085h"
"	      00545e8a    push 5B8A2Ch"
"	      00545e8f    push 1C0h"
"	      00545e94    push 5B8A50h"
"	      00545e99    call 00554F30h"
"	      00545e9e    add esp,10h"
);
// LINE 449:
	asm( 
"	      00545ea1    mov eax,[ebp-8]"
"	      00545ea4    mov eax,[eax]"
"	      00545ea6    mov ecx,[ebp-8]"
"	      00545ea9    call dword ptr [eax+18h]"
);
// LINE 450:
	asm( 
"	      00545eac    jmp near ptr 00545DD2h"
);
// LINE 451:
	asm( 
"	      00545eb1    mov eax,ds:[5B8680h]"
"	      00545eb6    mov eax,[eax]"
"	      00545eb8    mov ecx,ds:[5B8680h]"
"	      00545ebe    call dword ptr [eax+18h]"
);
// LINE 452:
	asm( 
"	      00545ec1    jmp near ptr 00545EC6h"
"	      00545ec6    pop edi"
"	      00545ec7    pop esi"
"	      00545ec8    pop ebx"
"	      00545ec9    leave"
"	      00545eca    ret"
);
}

// FUNCTION: SIMCOPTER 0x00545ecb
void S3PersonUserStart() {
// LINE 455:
	asm( 
"	      00545ecb    push ebp"
"	      00545ecc    mov ebp,esp"
"	      00545ece    sub esp,64h"
"	      00545ed1    push ebx"
"	      00545ed2    push esi"
"	      00545ed3    push edi"
);
// LINE 456:
	asm( 
"	      00545ed4    mov eax,[ebp+14h]"
"	      00545ed7    push eax"
"	      00545ed8    mov eax,[ebp+10h]"
"	      00545edb    push eax"
"	      00545edc    mov eax,[ebp+0Ch]"
"	      00545edf    push eax"
"	      00545ee0    mov eax,[ebp+8]"
"	      00545ee3    push eax"
"	      00545ee4    mov ecx,ds:[5B8680h]"
"	      00545eea    call 0054FD4Dh"
);
// LINE 457:
	asm( 
"	      00545eef    mov eax,ds:[5B8680h]"
"	      00545ef4    movsx eax,word ptr [eax+0D2h]"
"	      00545efb    test eax,eax"
"	      00545efd    je near ptr 00545F1Fh"
"	      00545f03    push 8C085h"
"	      00545f08    push 5B8A74h"
"	      00545f0d    push 1C9h"
"	      00545f12    push 5B8AB8h"
"	      00545f17    call 00554F30h"
"	      00545f1c    add esp,10h"
"	      00545f1f    mov eax,ds:[5B8680h]"
"	      00545f24    mov [ebp-64h],eax"
);
// LINE 458:
	asm( 
"	      00545f27    mov eax,[ebp-64h]"
"	      00545f2a    movsx eax,word ptr [eax+0D2h]"
"	      00545f31    test eax,eax"
"	      00545f33    je near ptr 00545F55h"
"	      00545f39    push 8C085h"
"	      00545f3e    push 5BBA9Ch"
"	      00545f43    push 2D3h"
"	      00545f48    push 5BBA14h"
"	      00545f4d    call 00554F30h"
"	      00545f52    add esp,10h"
"	      00545f55    mov eax,[ebp-64h]"
"	      00545f58    mov ax,[eax+10Ah]"
"	      00545f5f    push eax"
"	      00545f60    mov eax,[ebp-64h]"
"	      00545f63    mov eax,[eax+0B4h]"
"	      00545f69    push eax"
"	      00545f6a    mov ecx,[ebp-64h]"
"	      00545f6d    call 0055CC58h"
"	      00545f72    jmp near ptr 00545F77h"
"	      00545f77    mov eax,[ebp-64h]"
"	      00545f7a    mov word ptr [eax+0D2h],1"
"	      00545f83    mov eax,[ebp-64h]"
"	      00545f86    mov word ptr [eax+0E2h],1"
"	      00545f8f    mov eax,[ebp-64h]"
"	      00545f92    movsx eax,word ptr [eax+0D8h]"
"	      00545f99    mov [ebp-4],eax"
"	      00545f9c    cmp dword ptr [ebp-4],0"
"	      00545fa0    jne near ptr 00545FB9h"
"	      00545fa6    movsx eax,word ptr ds:[5B8674h]"
"	      00545fad    inc eax"
"	      00545fae    mov ds:[5B8674h],ax"
"	      00545fb4    jmp near ptr 00545FC7h"
"	      00545fb9    movsx eax,word ptr ds:[5B8670h]"
"	      00545fc0    inc eax"
"	      00545fc1    mov ds:[5B8670h],ax"
"	      00545fc7    jmp near ptr 00545FCCh"
"	      00545fcc    movsx eax,word ptr ds:[5B8674h]"
"	      00545fd3    movsx ecx,word ptr ds:[5B8670h]"
"	      00545fda    add eax,ecx"
"	      00545fdc    cmp eax,64h"
"	      00545fdf    jle near ptr 00546001h"
"	      00545fe5    push 8C085h"
"	      00545fea    push 5BBA7Ch"
"	      00545fef    push 2D9h"
"	      00545ff4    push 5BBA14h"
"	      00545ff9    call 00554F30h"
"	      00545ffe    add esp,10h"
"	      00546001    mov eax,[ebp-64h]"
"	      00546004    xor ecx,ecx"
"	      00546006    mov cl,[eax+88h]"
"	      0054600c    cmp ecx,0FFFFFFFFh"
"	      0054600f    jne near ptr 0054604Ah"
"	      00546015    mov eax,[ebp-64h]"
"	      00546018    xor ecx,ecx"
"	      0054601a    mov cl,[eax+89h]"
"	      00546020    cmp ecx,0FFFFFFFFh"
"	      00546023    je near ptr 00546045h"
"	      00546029    push 8C085h"
"	      0054602e    push 5BBAD4h"
"	      00546033    push 22Eh"
"	      00546038    push 5BBA14h"
"	      0054603d    call 00554F30h"
"	      00546042    add esp,10h"
"	      00546045    jmp near ptr 0054607Ah"
"	      0054604a    mov eax,[ebp-64h]"
"	      0054604d    xor ecx,ecx"
"	      0054604f    mov cl,[eax+89h]"
"	      00546055    cmp ecx,0FFFFFFFFh"
"	      00546058    jne near ptr 0054607Ah"
"	      0054605e    push 8C085h"
"	      00546063    push 5BBABCh"
"	      00546068    push 231h"
"	      0054606d    push 5BBA14h"
"	      00546072    call 00554F30h"
"	      00546077    add esp,10h"
"	      0054607a    mov eax,[ebp-64h]"
"	      0054607d    xor ecx,ecx"
"	      0054607f    mov cl,[eax+88h]"
"	      00546085    cmp ecx,0FFFFFFFFh"
"	      00546088    je near ptr 00546098h"
"	      0054608e    jmp near ptr 005460C6h"
"	      00546093    jmp near ptr 00546098h"
"	      00546098    jmp near ptr 005460AAh"
"	      0054609d    test dword ptr [ebp-60h],0FFFFh"
"	      005460a4    jne near ptr 005460C6h"
"	      005460aa    push 8C085h"
"	      005460af    push 5BBA54h"
"	      005460b4    push 2DAh"
"	      005460b9    push 5BBA14h"
"	      005460be    call 00554F30h"
"	      005460c3    add esp,10h"
"	      005460c6    mov ecx,[ebp-64h]"
"	      005460c9    call 0055069Bh"
"	      005460ce    jmp near ptr 005460D3h"
"	      005460d3    mov eax,[ebp-64h]"
"	      005460d6    xor ecx,ecx"
"	      005460d8    mov cx,[eax+20h]"
"	      005460dc    test ecx,ecx"
"	      005460de    jne near ptr 00546100h"
"	      005460e4    push 8C085h"
"	      005460e9    push 5BBAECh"
"	      005460ee    push 1F8h"
"	      005460f3    push 5BBA14h"
"	      005460f8    call 00554F30h"
"	      005460fd    add esp,10h"
"	      00546100    mov eax,[ebp-64h]"
"	      00546103    add eax,3Ch"
"	      00546106    lea ecx,[ebp-5Ch]"
"	      00546109    mov edx,[eax]"
"	      0054610b    mov [ecx],edx"
"	      0054610d    mov edx,[eax+4]"
"	      00546110    mov [ecx+4],edx"
"	      00546113    mov eax,[eax+8]"
"	      00546116    mov [ecx+8],eax"
"	      00546119    push 40h"
"	      0054611b    mov eax,[ebp-64h]"
"	      0054611e    add eax,48h"
"	      00546121    push eax"
"	      00546122    lea eax,[ebp-44h]"
"	      00546125    push eax"
"	      00546126    call 0056A800h"
"	      0054612b    add esp,0Ch"
"	      0054612e    push 3"
"	      00546130    lea eax,[ebp-5Ch]"
"	      00546133    push eax"
"	      00546134    mov eax,[ebp-64h]"
"	      00546137    mov eax,[eax+2Ch]"
"	      0054613a    push eax"
"	      0054613b    call 004D8781h"
"	      00546140    add esp,0Ch"
"	      00546143    jmp near ptr 00546148h"
"	      00546148    jmp near ptr 0054614Dh"
);
// LINE 459:
	asm( 
"	      0054614d    mov eax,ds:[5B8680h]"
"	      00546152    mov word ptr [eax+0E2h],0"
);
// LINE 460:
	asm( 
"	      0054615b    mov eax,ds:[5B4968h]"
"	      00546160    mov eax,[eax+0A4h]"
"	      00546166    push eax"
"	      00546167    mov ecx,ds:[5B8680h]"
"	      0054616d    call 0054CECAh"
);
// LINE 461:
	asm( 
"	      00546172    jmp near ptr 00546177h"
"	      00546177    pop edi"
"	      00546178    pop esi"
"	      00546179    pop ebx"
"	      0054617a    leave"
"	      0054617b    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054617c
void S3PersonUserAppearNew() {
// LINE 464:
	asm( 
"	      0054617c    push ebp"
"	      0054617d    mov ebp,esp"
"	      0054617f    sub esp,74h"
"	      00546182    push ebx"
"	      00546183    push esi"
"	      00546184    push edi"
);
// LINE 465:
	asm( 
"	      00546185    push 0"
"	      00546187    mov ecx,ds:[5B8680h]"
"	      0054618d    call 0054CECAh"
);
// LINE 466:
	asm( 
"	      00546192    mov eax,ds:[5B8680h]"
"	      00546197    movsx eax,word ptr [eax+0D2h]"
"	      0054619e    test eax,eax"
"	      005461a0    jne near ptr 005461C2h"
"	      005461a6    push 8C085h"
"	      005461ab    push 5B8ADCh"
"	      005461b0    push 1D2h"
"	      005461b5    push 5B8B0Ch"
"	      005461ba    call 00554F30h"
"	      005461bf    add esp,10h"
);
// LINE 467:
	asm( 
"	      005461c2    mov ecx,ds:[5B8680h]"
"	      005461c8    call 005507ECh"
);
// LINE 468:
	asm( 
"	      005461cd    push 0FFh"
"	      005461d2    push 0FFh"
"	      005461d7    mov eax,[ebp+8]"
"	      005461da    mov ecx,[eax+8]"
"	      005461dd    push ecx"
"	      005461de    mov ecx,[eax+4]"
"	      005461e1    push ecx"
"	      005461e2    mov eax,[eax]"
"	      005461e4    push eax"
"	      005461e5    mov ecx,ds:[5B8680h]"
"	      005461eb    call 0054FC2Eh"
);
// LINE 470:
	asm( 
"	      005461f0    mov ecx,ds:[5B8680h]"
"	      005461f6    call 0055069Bh"
);
// LINE 471:
	asm( 
"	      005461fb    mov eax,ds:[5B8680h]"
"	      00546200    movsx eax,word ptr [eax+102h]"
"	      00546207    cmp eax,0FFFFFFFFh"
"	      0054620a    jne near ptr 0054626Fh"
);
// LINE 472:
	asm( 
"	      00546210    mov word ptr [ebp-14h],0"
"	      00546216    jmp near ptr 0054621Fh"
"	      0054621b    inc word ptr [ebp-14h]"
"	      0054621f    movsx eax,word ptr [ebp-14h]"
"	      00546223    cmp eax,3"
"	      00546226    jge near ptr 00546255h"
"	      0054622c    movsx eax,word ptr [ebp-14h]"
"	      00546230    movsx eax,word ptr [eax*2+6356C8h]"
"	      00546238    test eax,eax"
"	      0054623a    jne near ptr 00546250h"
"	      00546240    movsx eax,word ptr [ebp-14h]"
"	      00546244    add eax,0Ch"
"	      00546247    mov [ebp-18h],ax"
"	      0054624b    jmp near ptr 00546260h"
"	      00546250    jmp near ptr 0054621Bh"
"	      00546255    mov word ptr [ebp-18h],0Ch"
"	      0054625b    jmp near ptr 00546260h"
"	      00546260    mov eax,[ebp-18h]"
"	      00546263    push eax"
"	      00546264    mov ecx,ds:[5B8680h]"
"	      0054626a    call 0054C0E7h"
);
// LINE 474:
	asm( 
"	      0054626f    mov ecx,ds:[5B8680h]"
"	      00546275    call 0054FAEEh"
"	      0054627a    mov eax,ds:[5B8680h]"
"	      0054627f    mov [ebp-74h],eax"
);
// LINE 475:
	asm( 
"	      00546282    jmp near ptr 00546287h"
"	      00546287    mov eax,[ebp-74h]"
"	      0054628a    xor ecx,ecx"
"	      0054628c    mov cx,[eax+20h]"
"	      00546290    test ecx,ecx"
"	      00546292    jne near ptr 005462B4h"
"	      00546298    push 8C085h"
"	      0054629d    push 5BBAECh"
"	      005462a2    push 1F8h"
"	      005462a7    push 5BBA14h"
"	      005462ac    call 00554F30h"
"	      005462b1    add esp,10h"
"	      005462b4    mov eax,[ebp-74h]"
"	      005462b7    add eax,3Ch"
"	      005462ba    lea ecx,[ebp-70h]"
"	      005462bd    mov edx,[eax]"
"	      005462bf    mov [ecx],edx"
"	      005462c1    mov edx,[eax+4]"
"	      005462c4    mov [ecx+4],edx"
"	      005462c7    mov eax,[eax+8]"
"	      005462ca    mov [ecx+8],eax"
"	      005462cd    push 40h"
"	      005462cf    mov eax,[ebp-74h]"
"	      005462d2    add eax,48h"
"	      005462d5    push eax"
"	      005462d6    lea eax,[ebp-58h]"
"	      005462d9    push eax"
"	      005462da    call 0056A800h"
"	      005462df    add esp,0Ch"
"	      005462e2    push 3"
"	      005462e4    lea eax,[ebp-70h]"
"	      005462e7    push eax"
"	      005462e8    mov eax,[ebp-74h]"
"	      005462eb    mov eax,[eax+2Ch]"
"	      005462ee    push eax"
"	      005462ef    call 004D8781h"
"	      005462f4    add esp,0Ch"
"	      005462f7    jmp near ptr 005462FCh"
);
// LINE 476:
	asm( 
"	      005462fc    mov eax,ds:[5B8680h]"
"	      00546301    mov word ptr [eax+0E2h],1"
);
// LINE 478:
	asm( 
"	      0054630a    cmp dword ptr [ebp+0Ch],0"
"	      0054630e    je near ptr 00546342h"
);
// LINE 479:
	asm( 
"	      00546314    mov eax,[ebp+0Ch]"
"	      00546317    mov ecx,ds:[5B8680h]"
"	      0054631d    add ecx,168h"
"	      00546323    mov edx,[eax]"
"	      00546325    mov [ecx],edx"
"	      00546327    mov edx,[eax+4]"
"	      0054632a    mov [ecx+4],edx"
"	      0054632d    mov eax,[eax+8]"
"	      00546330    mov [ecx+8],eax"
);
// LINE 481:
	asm( 
"	      00546333    lea eax,[ebp-10h]"
"	      00546336    push eax"
"	      00546337    mov ecx,ds:[5B8680h]"
"	      0054633d    call 0054DCDEh"
);
// LINE 487:
	asm( 
"	      00546342    jmp near ptr 00546347h"
"	      00546347    pop edi"
"	      00546348    pop esi"
"	      00546349    pop ebx"
"	      0054634a    leave"
"	      0054634b    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054634c
void S3PersonUserAppear() {
// LINE 490:
	asm( 
"	      0054634c    push ebp"
"	      0054634d    mov ebp,esp"
"	      0054634f    sub esp,4Ch"
"	      00546352    push ebx"
"	      00546353    push esi"
"	      00546354    push edi"
);
// LINE 491:
	asm( 
"	      00546355    xor eax,eax"
"	      00546357    mov al,[ebp+0Ch]"
"	      0054635a    xor ecx,ecx"
"	      0054635c    mov cl,[ebp+8]"
"	      0054635f    shl ecx,0Ah"
"	      00546362    mov eax,[ecx+eax*4+67ED30h]"
"	      00546369    mov [ebp-28h],eax"
"	      0054636c    mov eax,[ebp-28h]"
"	      0054636f    movsx eax,word ptr [eax+2]"
"	      00546373    shl eax,10h"
"	      00546376    add eax,[ebp+10h]"
"	      00546379    mov [ebp-4Ch],eax"
"	      0054637c    mov eax,[ebp-28h]"
"	      0054637f    movsx eax,word ptr [eax+4]"
"	      00546383    shl eax,10h"
"	      00546386    add eax,30000h"
"	      0054638b    mov [ebp-48h],eax"
"	      0054638e    mov eax,[ebp-28h]"
"	      00546391    movsx eax,word ptr [eax+6]"
"	      00546395    shl eax,10h"
"	      00546398    add eax,[ebp+14h]"
"	      0054639b    mov [ebp-44h],eax"
"	      0054639e    lea eax,[ebp-4Ch]"
"	      005463a1    lea ecx,[ebp-40h]"
"	      005463a4    mov edx,[eax]"
"	      005463a6    mov [ecx],edx"
"	      005463a8    mov edx,[eax+4]"
"	      005463ab    mov [ecx+4],edx"
"	      005463ae    mov eax,[eax+8]"
"	      005463b1    mov [ecx+8],eax"
"	      005463b4    jmp near ptr 005463B9h"
"	      005463b9    lea eax,[ebp-40h]"
"	      005463bc    lea ecx,[ebp-34h]"
"	      005463bf    mov edx,[eax]"
"	      005463c1    mov [ecx],edx"
"	      005463c3    mov edx,[eax+4]"
"	      005463c6    mov [ecx+4],edx"
"	      005463c9    mov eax,[eax+8]"
"	      005463cc    mov [ecx+8],eax"
"	      005463cf    lea eax,[ebp-34h]"
"	      005463d2    lea ecx,[ebp-24h]"
"	      005463d5    mov edx,[eax]"
"	      005463d7    mov [ecx],edx"
"	      005463d9    mov edx,[eax+4]"
"	      005463dc    mov [ecx+4],edx"
"	      005463df    mov eax,[eax+8]"
"	      005463e2    mov [ecx+8],eax"
"	      005463e5    jmp near ptr 005463EAh"
"	      005463ea    lea eax,[ebp-24h]"
"	      005463ed    lea ecx,[ebp-18h]"
"	      005463f0    mov edx,[eax]"
"	      005463f2    mov [ecx],edx"
"	      005463f4    mov edx,[eax+4]"
"	      005463f7    mov [ecx+4],edx"
"	      005463fa    mov eax,[eax+8]"
"	      005463fd    mov [ecx+8],eax"
"	      00546400    lea eax,[ebp-18h]"
"	      00546403    lea ecx,[ebp-0Ch]"
"	      00546406    mov edx,[eax]"
"	      00546408    mov [ecx],edx"
"	      0054640a    mov edx,[eax+4]"
"	      0054640d    mov [ecx+4],edx"
"	      00546410    mov eax,[eax+8]"
"	      00546413    mov [ecx+8],eax"
);
// LINE 492:
	asm( 
"	      00546416    push 0"
"	      00546418    lea eax,[ebp-0Ch]"
"	      0054641b    push eax"
"	      0054641c    call 0054617Ch"
"	      00546421    add esp,8"
);
// LINE 493:
	asm( 
"	      00546424    jmp near ptr 00546429h"
"	      00546429    pop edi"
"	      0054642a    pop esi"
"	      0054642b    pop ebx"
"	      0054642c    leave"
"	      0054642d    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054642e
int32_t IsThisABadGuy() {
// LINE 496:
	asm( 
"	      0054642e    push ebp"
"	      0054642f    mov ebp,esp"
"	      00546431    sub esp,8"
"	      00546434    push ebx"
"	      00546435    push esi"
"	      00546436    push edi"
);
// LINE 497:
	asm( 
"	      00546437    mov eax,[ebp+8]"
"	      0054643a    push eax"
"	      0054643b    call 00544874h"
"	      00546440    add esp,4"
"	      00546443    mov [ebp-4],eax"
);
// LINE 498:
	asm( 
"	      00546446    mov eax,[ebp-4]"
"	      00546449    movsx eax,word ptr [eax+0DAh]"
"	      00546450    mov [ebp-8],eax"
);
// LINE 499:
	asm( 
"	      00546453    cmp dword ptr [ebp-8],0"
"	      00546457    jne near ptr 0054646Ch"
);
// LINE 500:
	asm( 
"	      0054645d    mov eax,1"
"	      00546462    jmp near ptr 00546473h"
);
// LINE 501:
	asm( 
"	      00546467    jmp near ptr 00546473h"
);
// LINE 502:
	asm( 
"	      0054646c    xor eax,eax"
"	      0054646e    jmp near ptr 00546473h"
);
// LINE 503:
	asm( 
"	      00546473    pop edi"
"	      00546474    pop esi"
"	      00546475    pop ebx"
"	      00546476    leave"
"	      00546477    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546478
unsigned char GetAvatarCellX() {
// LINE 506:
	asm( 
"	      00546478    push ebp"
"	      00546479    mov ebp,esp"
"	      0054647b    push ebx"
"	      0054647c    push esi"
"	      0054647d    push edi"
);
// LINE 507:
	asm( 
"	      0054647e    cmp dword ptr ds:[5B8680h],0"
"	      00546485    jne near ptr 005464A7h"
"	      0054648b    push 8C085h"
"	      00546490    push 5B8B30h"
"	      00546495    push 1FBh"
"	      0054649a    push 5B8B40h"
"	      0054649f    call 00554F30h"
"	      005464a4    add esp,10h"
);
// LINE 508:
	asm( 
"	      005464a7    mov eax,ds:[5B8680h]"
"	      005464ac    mov al,[eax+88h]"
"	      005464b2    jmp near ptr 005464B7h"
);
// LINE 509:
	asm( 
"	      005464b7    pop edi"
"	      005464b8    pop esi"
"	      005464b9    pop ebx"
"	      005464ba    leave"
"	      005464bb    ret"
);
}

// FUNCTION: SIMCOPTER 0x005464bc
unsigned char GetAvatarCellY() {
// LINE 512:
	asm( 
"	      005464bc    push ebp"
"	      005464bd    mov ebp,esp"
"	      005464bf    push ebx"
"	      005464c0    push esi"
"	      005464c1    push edi"
);
// LINE 513:
	asm( 
"	      005464c2    cmp dword ptr ds:[5B8680h],0"
"	      005464c9    jne near ptr 005464EBh"
"	      005464cf    push 8C085h"
"	      005464d4    push 5B8B64h"
"	      005464d9    push 201h"
"	      005464de    push 5B8B74h"
"	      005464e3    call 00554F30h"
"	      005464e8    add esp,10h"
);
// LINE 514:
	asm( 
"	      005464eb    mov eax,ds:[5B8680h]"
"	      005464f0    mov al,[eax+89h]"
"	      005464f6    jmp near ptr 005464FBh"
);
// LINE 515:
	asm( 
"	      005464fb    pop edi"
"	      005464fc    pop esi"
"	      005464fd    pop ebx"
"	      005464fe    leave"
"	      005464ff    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546500
struct _DYOBJ_INST* GetAvatarDYOBJ() {
// LINE 518:
	asm( 
"	      00546500    push ebp"
"	      00546501    mov ebp,esp"
"	      00546503    push ebx"
"	      00546504    push esi"
"	      00546505    push edi"
);
// LINE 519:
	asm( 
"	      00546506    cmp dword ptr ds:[5B8680h],0"
"	      0054650d    jne near ptr 0054652Fh"
"	      00546513    push 8C085h"
"	      00546518    push 5B8B98h"
"	      0054651d    push 207h"
"	      00546522    push 5B8BB4h"
"	      00546527    call 00554F30h"
"	      0054652c    add esp,10h"
);
// LINE 520:
	asm( 
"	      0054652f    mov eax,ds:[5B8680h]"
"	      00546534    add eax,24h"
"	      00546537    jmp near ptr 0054653Ch"
);
// LINE 521:
	asm( 
"	      0054653c    pop edi"
"	      0054653d    pop esi"
"	      0054653e    pop ebx"
"	      0054653f    leave"
"	      00546540    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546541
struct Point3d* GetAvatarVector() {
// LINE 524:
	asm( 
"	      00546541    push ebp"
"	      00546542    mov ebp,esp"
"	      00546544    push ebx"
"	      00546545    push esi"
"	      00546546    push edi"
);
// LINE 525:
	asm( 
"	      00546547    cmp dword ptr ds:[5B8680h],0"
"	      0054654e    jne near ptr 00546570h"
"	      00546554    push 8C085h"
"	      00546559    push 5B8BD8h"
"	      0054655e    push 20Dh"
"	      00546563    push 5B8BF4h"
"	      00546568    call 00554F30h"
"	      0054656d    add esp,10h"
);
// LINE 526:
	asm( 
"	      00546570    mov eax,ds:[5B8680h]"
"	      00546575    add eax,168h"
"	      0054657a    jmp near ptr 0054657Fh"
);
// LINE 527:
	asm( 
"	      0054657f    pop edi"
"	      00546580    pop esi"
"	      00546581    pop ebx"
"	      00546582    leave"
"	      00546583    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546584
void S3DrawPerson() {
// LINE 530:
	asm( 
"	      00546584    push ebp"
"	      00546585    mov ebp,esp"
"	      00546587    sub esp,0Ch"
"	      0054658a    push ebx"
"	      0054658b    push esi"
"	      0054658c    push edi"
);
// LINE 531:
	asm( 
"	      0054658d    call 00551D36h"
);
// LINE 532:
	asm( 
"	      00546592    mov eax,[ebp+8]"
"	      00546595    mov eax,[eax+0Ch]"
"	      00546598    mov [ebp-4],ax"
);
// LINE 533:
	asm( 
"	      0054659c    movsx eax,word ptr [ebp-4]"
"	      005465a0    cmp eax,7D00h"
"	      005465a5    jne near ptr 005465BFh"
);
// LINE 534:
	asm( 
"	      005465ab    mov eax,[ebp+8]"
"	      005465ae    push eax"
"	      005465af    mov ecx,ds:[5B8680h]"
"	      005465b5    call 00551388h"
);
// LINE 536:
	asm( 
"	      005465ba    jmp near ptr 005466BBh"
);
// LINE 537:
	asm( 
"	      005465bf    movsx eax,word ptr [ebp-4]"
"	      005465c3    cmp eax,7D00h"
"	      005465c8    jne near ptr 005465DBh"
"	      005465ce    mov eax,ds:[5B8680h]"
"	      005465d3    mov [ebp-8],eax"
"	      005465d6    jmp near ptr 00546657h"
"	      005465db    movsx eax,word ptr [ebp-4]"
"	      005465df    test eax,eax"
"	      005465e1    jl near ptr 005465F4h"
"	      005465e7    movsx eax,word ptr [ebp-4]"
"	      005465eb    cmp eax,64h"
"	      005465ee    jl near ptr 00546610h"
"	      005465f4    push 8C085h"
"	      005465f9    push 5BB9F4h"
"	      005465fe    push 204h"
"	      00546603    push 5BBA14h"
"	      00546608    call 00554F30h"
"	      0054660d    add esp,10h"
"	      00546610    movsx eax,word ptr [ebp-4]"
"	      00546614    cmp dword ptr [eax*4+636D40h],0"
"	      0054661c    jne near ptr 0054663Eh"
"	      00546622    push 8C085h"
"	      00546627    push 5BB9D0h"
"	      0054662c    push 205h"
"	      00546631    push 5BBA14h"
"	      00546636    call 00554F30h"
"	      0054663b    add esp,10h"
"	      0054663e    movsx eax,word ptr [ebp-4]"
"	      00546642    mov eax,[eax*4+636D40h]"
"	      00546649    mov [ebp-8],eax"
"	      0054664c    jmp near ptr 00546657h"
"	      00546651    mov eax,[ebp-0Ch]"
"	      00546654    mov [ebp-8],eax"
);
// LINE 538:
	asm( 
"	      00546657    cmp dword ptr [ebp-8],0"
"	      0054665b    jne near ptr 0054667Dh"
"	      00546661    push 8C085h"
"	      00546666    push 5B8C18h"
"	      0054666b    push 21Ah"
"	      00546670    push 5B8C20h"
"	      00546675    call 00554F30h"
"	      0054667a    add esp,10h"
);
// LINE 539:
	asm( 
"	      0054667d    mov eax,[ebp-8]"
"	      00546680    movsx eax,word ptr [eax+0BCh]"
"	      00546687    movsx ecx,word ptr [ebp-4]"
"	      0054668b    cmp eax,ecx"
"	      0054668d    je near ptr 005466AFh"
"	      00546693    push 8C085h"
"	      00546698    push 5B8C44h"
"	      0054669d    push 21Bh"
"	      005466a2    push 5B8C58h"
"	      005466a7    call 00554F30h"
"	      005466ac    add esp,10h"
);
// LINE 540:
	asm( 
"	      005466af    mov eax,[ebp+8]"
"	      005466b2    push eax"
"	      005466b3    mov ecx,[ebp-8]"
"	      005466b6    call 00551388h"
);
// LINE 543:
	asm( 
"	      005466bb    jmp near ptr 005466C0h"
"	      005466c0    pop edi"
"	      005466c1    pop esi"
"	      005466c2    pop ebx"
"	      005466c3    leave"
"	      005466c4    ret"
);
}

// FUNCTION: SIMCOPTER 0x005466c5
void cAvatar::GetControlInput() {
// LINE 554:
	asm( 
"	      005466c5    push ebp"
"	      005466c6    mov ebp,esp"
"	      005466c8    sub esp,2Ch"
"	      005466cb    push ebx"
"	      005466cc    push esi"
"	      005466cd    push edi"
"	      005466ce    mov [ebp-2Ch],ecx"
);
// LINE 555:
	asm( 
"	      005466d1    mov dword ptr [ebp-8],140000h"
);
// LINE 556:
	asm( 
"	      005466d8    mov dword ptr [ebp-18h],0A0000h"
);
// LINE 559:
	asm( 
"	      005466df    cmp dword ptr ds:[5C3808h],0"
"	      005466e6    je near ptr 005467CDh"
"	      005466ec    push 1"
"	      005466ee    call 00431CC0h"
"	      005466f3    add esp,4"
"	      005466f6    test eax,eax"
"	      005466f8    je near ptr 005467CDh"
);
// LINE 560:
	asm( 
"	      005466fe    mov eax,[ebp-2Ch]"
"	      00546701    movsx eax,word ptr [eax+0D6h]"
"	      00546708    cmp eax,0Bh"
"	      0054670b    je near ptr 00546792h"
);
// LINE 561:
	asm( 
"	      00546711    push 0Bh"
"	      00546713    mov ecx,[ebp-2Ch]"
"	      00546716    call 0054FFB7h"
);
// LINE 562:
	asm( 
"	      0054671b    mov eax,[ebp-2Ch]"
"	      0054671e    mov word ptr [eax+104h],0FFFFh"
"	      00546727    mov eax,[ebp-2Ch]"
"	      0054672a    movsx eax,word ptr [eax+102h]"
"	      00546731    cmp eax,0FFFFFFFFh"
"	      00546734    je near ptr 0054678Dh"
"	      0054673a    mov eax,[ebp-2Ch]"
"	      0054673d    movsx eax,word ptr [eax+102h]"
"	      00546744    cmp eax,0FFFFFFFFh"
"	      00546747    je near ptr 00546768h"
"	      0054674d    mov eax,[ebp-2Ch]"
"	      00546750    movsx eax,word ptr [eax+102h]"
"	      00546757    add eax,62h"
"	      0054675a    mov [ebp-1Ch],ax"
"	      0054675e    jmp near ptr 0054677Bh"
"	      00546763    jmp near ptr 00546773h"
"	      00546768    mov word ptr [ebp-1Ch],0FFFFh"
"	      0054676e    jmp near ptr 0054677Bh"
"	      00546773    mov ax,[ebp-20h]"
"	      00546777    mov [ebp-1Ch],ax"
"	      0054677b    jmp near ptr 00546780h"
"	      00546780    movsx eax,word ptr [ebp-1Ch]"
"	      00546784    push eax"
"	      00546785    call 00446E04h"
"	      0054678a    add esp,4"
"	      0054678d    jmp near ptr 00546792h"
);
// LINE 567:
	asm( 
"	      00546792    push 140000h"
"	      00546797    mov eax,[ebp-8]"
"	      0054679a    push eax"
"	      0054679b    call 004D19BDh"
"	      005467a0    add esp,8"
"	      005467a3    mov [ebp-8],eax"
);
// LINE 568:
	asm( 
"	      005467a6    push 30000h"
"	      005467ab    push 140000h"
"	      005467b0    call 004D19DFh"
"	      005467b5    add esp,8"
"	      005467b8    push eax"
"	      005467b9    mov eax,[ebp-18h]"
"	      005467bc    push eax"
"	      005467bd    call 004D19BDh"
"	      005467c2    add esp,8"
"	      005467c5    mov [ebp-18h],eax"
);
// LINE 571:
	asm( 
"	      005467c8    jmp near ptr 00546861h"
"	      005467cd    mov eax,[ebp-2Ch]"
"	      005467d0    movsx eax,word ptr [eax+0D6h]"
"	      005467d7    cmp eax,1"
"	      005467da    je near ptr 00546861h"
);
// LINE 572:
	asm( 
"	      005467e0    push 1"
"	      005467e2    mov ecx,[ebp-2Ch]"
"	      005467e5    call 0054FFB7h"
);
// LINE 573:
	asm( 
"	      005467ea    mov eax,[ebp-2Ch]"
"	      005467ed    mov word ptr [eax+104h],0FFFFh"
"	      005467f6    mov eax,[ebp-2Ch]"
"	      005467f9    movsx eax,word ptr [eax+102h]"
"	      00546800    cmp eax,0FFFFFFFFh"
"	      00546803    je near ptr 0054685Ch"
"	      00546809    mov eax,[ebp-2Ch]"
"	      0054680c    movsx eax,word ptr [eax+102h]"
"	      00546813    cmp eax,0FFFFFFFFh"
"	      00546816    je near ptr 00546837h"
"	      0054681c    mov eax,[ebp-2Ch]"
"	      0054681f    movsx eax,word ptr [eax+102h]"
"	      00546826    add eax,62h"
"	      00546829    mov [ebp-24h],ax"
"	      0054682d    jmp near ptr 0054684Ah"
"	      00546832    jmp near ptr 00546842h"
"	      00546837    mov word ptr [ebp-24h],0FFFFh"
"	      0054683d    jmp near ptr 0054684Ah"
"	      00546842    mov ax,[ebp-28h]"
"	      00546846    mov [ebp-24h],ax"
"	      0054684a    jmp near ptr 0054684Fh"
"	      0054684f    movsx eax,word ptr [ebp-24h]"
"	      00546853    push eax"
"	      00546854    call 00446E04h"
"	      00546859    add esp,4"
"	      0054685c    jmp near ptr 00546861h"
);
// LINE 575:
	asm( 
"	      00546861    mov dword ptr [ebp-10h],640000h"
);
// LINE 576:
	asm( 
"	      00546868    mov dword ptr [ebp-4],320000h"
);
// LINE 580:
	asm( 
"	      0054686f    push 8"
"	      00546871    call 00431B60h"
"	      00546876    add esp,4"
"	      00546879    test eax,eax"
"	      0054687b    je near ptr 005468A1h"
);
// LINE 581:
	asm( 
"	      00546881    mov eax,[ebp-18h]"
"	      00546884    push eax"
"	      00546885    mov eax,ds:[5B4768h]"
"	      0054688a    push eax"
"	      0054688b    call 004D19BDh"
"	      00546890    add esp,8"
"	      00546893    mov ecx,[ebp-2Ch]"
"	      00546896    add [ecx+174h],eax"
);
// LINE 582:
	asm( 
"	      0054689c    jmp near ptr 0054696Fh"
"	      005468a1    push 9"
"	      005468a3    call 00431B60h"
"	      005468a8    add esp,4"
"	      005468ab    test eax,eax"
"	      005468ad    je near ptr 005468D9h"
);
// LINE 583:
	asm( 
"	      005468b3    xor ebx,ebx"
"	      005468b5    mov eax,[ebp-18h]"
"	      005468b8    push eax"
"	      005468b9    mov eax,ds:[5B4768h]"
"	      005468be    push eax"
"	      005468bf    call 004D19BDh"
"	      005468c4    add esp,8"
"	      005468c7    sub ebx,eax"
"	      005468c9    neg ebx"
"	      005468cb    mov eax,[ebp-2Ch]"
"	      005468ce    sub [eax+174h],ebx"
);
// LINE 584:
	asm( 
"	      005468d4    jmp near ptr 0054696Fh"
"	      005468d9    push 8"
"	      005468db    push 9"
"	      005468dd    call 00431BFBh"
"	      005468e2    add esp,8"
"	      005468e5    mov [ebp-14h],eax"
"	      005468e8    cmp dword ptr [ebp-14h],0"
"	      005468ec    je near ptr 00546943h"
);
// LINE 586:
	asm( 
"	      005468f2    push 30000h"
"	      005468f7    mov eax,[ebp-14h]"
"	      005468fa    shl eax,10h"
"	      005468fd    neg eax"
"	      005468ff    push eax"
"	      00546900    call 004D19BDh"
"	      00546905    add esp,8"
"	      00546908    mov [ebp-0Ch],eax"
);
// LINE 587:
	asm( 
"	      0054690b    xor eax,eax"
"	      0054690d    mov ecx,[ebp-2Ch]"
"	      00546910    sub eax,[ecx+174h]"
"	      00546916    neg eax"
"	      00546918    sub [ebp-0Ch],eax"
);
// LINE 588:
	asm( 
"	      0054691b    mov eax,ds:[5B4768h]"
"	      00546920    add eax,eax"
"	      00546922    push eax"
"	      00546923    mov eax,[ebp-0Ch]"
"	      00546926    push eax"
"	      00546927    call 004D19BDh"
"	      0054692c    add esp,8"
"	      0054692f    mov [ebp-0Ch],eax"
);
// LINE 589:
	asm( 
"	      00546932    mov eax,[ebp-0Ch]"
"	      00546935    mov ecx,[ebp-2Ch]"
"	      00546938    add [ecx+174h],eax"
);
// LINE 591:
	asm( 
"	      0054693e    jmp near ptr 0054696Fh"
);
// LINE 593:
	asm( 
"	      00546943    mov eax,10000h"
"	      00546948    mov ecx,ds:[5B4768h]"
"	      0054694e    shl ecx,2"
"	      00546951    sub eax,ecx"
"	      00546953    push eax"
"	      00546954    mov eax,[ebp-2Ch]"
"	      00546957    mov eax,[eax+174h]"
"	      0054695d    push eax"
"	      0054695e    call 004D19BDh"
"	      00546963    add esp,8"
"	      00546966    mov ecx,[ebp-2Ch]"
"	      00546969    mov [ecx+174h],eax"
);
// LINE 596:
	asm( 
"	      0054696f    mov eax,[ebp-2Ch]"
"	      00546972    mov ecx,[ebp-8]"
"	      00546975    cmp [eax+174h],ecx"
"	      0054697b    jle near ptr 0054698Dh"
);
// LINE 597:
	asm( 
"	      00546981    mov eax,[ebp-8]"
"	      00546984    mov ecx,[ebp-2Ch]"
"	      00546987    mov [ecx+174h],eax"
);
// LINE 598:
	asm( 
"	      0054698d    mov eax,[ebp-2Ch]"
"	      00546990    mov ecx,[ebp-8]"
"	      00546993    neg ecx"
"	      00546995    cmp [eax+174h],ecx"
"	      0054699b    jge near ptr 005469AFh"
);
// LINE 599:
	asm( 
"	      005469a1    mov eax,[ebp-8]"
"	      005469a4    neg eax"
"	      005469a6    mov ecx,[ebp-2Ch]"
"	      005469a9    mov [ecx+174h],eax"
);
// LINE 601:
	asm( 
"	      005469af    mov eax,[ebp-2Ch]"
"	      005469b2    mov eax,[eax+174h]"
"	      005469b8    push eax"
"	      005469b9    call 00544760h"
"	      005469be    add esp,4"
);
// LINE 604:
	asm( 
"	      005469c1    push 7"
"	      005469c3    call 00431B60h"
"	      005469c8    add esp,4"
"	      005469cb    test eax,eax"
"	      005469cd    je near ptr 005469F3h"
);
// LINE 605:
	asm( 
"	      005469d3    mov eax,[ebp-4]"
"	      005469d6    push eax"
"	      005469d7    mov eax,ds:[5B4768h]"
"	      005469dc    push eax"
"	      005469dd    call 004D19BDh"
"	      005469e2    add esp,8"
"	      005469e5    mov ecx,[ebp-2Ch]"
"	      005469e8    add [ecx+178h],eax"
);
// LINE 606:
	asm( 
"	      005469ee    jmp near ptr 00546A84h"
"	      005469f3    push 6"
"	      005469f5    call 00431B60h"
"	      005469fa    add esp,4"
"	      005469fd    test eax,eax"
"	      005469ff    je near ptr 00546A2Bh"
);
// LINE 607:
	asm( 
"	      00546a05    xor ebx,ebx"
"	      00546a07    mov eax,[ebp-4]"
"	      00546a0a    push eax"
"	      00546a0b    mov eax,ds:[5B4768h]"
"	      00546a10    push eax"
"	      00546a11    call 004D19BDh"
"	      00546a16    add esp,8"
"	      00546a19    sub ebx,eax"
"	      00546a1b    neg ebx"
"	      00546a1d    mov eax,[ebp-2Ch]"
"	      00546a20    sub [eax+178h],ebx"
);
// LINE 608:
	asm( 
"	      00546a26    jmp near ptr 00546A84h"
"	      00546a2b    push 6"
"	      00546a2d    push 7"
"	      00546a2f    call 00431BFBh"
"	      00546a34    add esp,8"
"	      00546a37    mov [ebp-14h],eax"
"	      00546a3a    cmp dword ptr [ebp-14h],0"
"	      00546a3e    je near ptr 00546A58h"
);
// LINE 609:
	asm( 
"	      00546a44    mov eax,[ebp-14h]"
"	      00546a47    shl eax,10h"
"	      00546a4a    mov ecx,[ebp-2Ch]"
"	      00546a4d    mov [ecx+178h],eax"
);
// LINE 610:
	asm( 
"	      00546a53    jmp near ptr 00546A84h"
);
// LINE 612:
	asm( 
"	      00546a58    mov eax,10000h"
"	      00546a5d    mov ecx,ds:[5B4768h]"
"	      00546a63    shl ecx,2"
"	      00546a66    sub eax,ecx"
"	      00546a68    push eax"
"	      00546a69    mov eax,[ebp-2Ch]"
"	      00546a6c    mov eax,[eax+178h]"
"	      00546a72    push eax"
"	      00546a73    call 004D19BDh"
"	      00546a78    add esp,8"
"	      00546a7b    mov ecx,[ebp-2Ch]"
"	      00546a7e    mov [ecx+178h],eax"
);
// LINE 615:
	asm( 
"	      00546a84    mov eax,[ebp-2Ch]"
"	      00546a87    mov ecx,[ebp-10h]"
"	      00546a8a    cmp [eax+178h],ecx"
"	      00546a90    jle near ptr 00546AA2h"
);
// LINE 616:
	asm( 
"	      00546a96    mov eax,[ebp-10h]"
"	      00546a99    mov ecx,[ebp-2Ch]"
"	      00546a9c    mov [ecx+178h],eax"
);
// LINE 617:
	asm( 
"	      00546aa2    mov eax,[ebp-2Ch]"
"	      00546aa5    mov ecx,[ebp-10h]"
"	      00546aa8    neg ecx"
"	      00546aaa    cmp [eax+178h],ecx"
"	      00546ab0    jge near ptr 00546AC4h"
);
// LINE 618:
	asm( 
"	      00546ab6    mov eax,[ebp-10h]"
"	      00546ab9    neg eax"
"	      00546abb    mov ecx,[ebp-2Ch]"
"	      00546abe    mov [ecx+178h],eax"
);
// LINE 619:
	asm( 
"	      00546ac4    jmp near ptr 00546AC9h"
"	      00546ac9    pop edi"
"	      00546aca    pop esi"
"	      00546acb    pop ebx"
"	      00546acc    leave"
"	      00546acd    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546ace
void PersonHeliHasLanded() {
// LINE 623:
	asm( 
"	      00546ace    push ebp"
"	      00546acf    mov ebp,esp"
"	      00546ad1    push ebx"
"	      00546ad2    push esi"
"	      00546ad3    push edi"
);
// LINE 624:
	asm( 
"	      00546ad4    jmp near ptr 00546AD9h"
"	      00546ad9    mov eax,ds:[5B8680h]"
"	      00546ade    xor ecx,ecx"
"	      00546ae0    mov cl,[eax+88h]"
"	      00546ae6    mov eax,ds:[5B4968h]"
"	      00546aeb    sub ecx,[eax+18h]"
"	      00546aee    movsx eax,cx"
"	      00546af1    cdq"
"	      00546af2    xor eax,edx"
"	      00546af4    sub eax,edx"
"	      00546af6    movsx eax,ax"
"	      00546af9    cmp eax,2"
"	      00546afc    jge near ptr 00546B30h"
"	      00546b02    jmp near ptr 00546B07h"
"	      00546b07    mov eax,ds:[5B8680h]"
"	      00546b0c    xor ecx,ecx"
"	      00546b0e    mov cl,[eax+89h]"
"	      00546b14    mov eax,ds:[5B4968h]"
"	      00546b19    sub ecx,[eax+1Ch]"
"	      00546b1c    movsx eax,cx"
"	      00546b1f    cdq"
"	      00546b20    xor eax,edx"
"	      00546b22    sub eax,edx"
"	      00546b24    movsx eax,ax"
"	      00546b27    cmp eax,2"
"	      00546b2a    jl near ptr 00546B4Ch"
"	      00546b30    push 8C085h"
"	      00546b35    push 5B8C7Ch"
"	      00546b3a    push 270h"
"	      00546b3f    push 5B8CB4h"
"	      00546b44    call 00554F30h"
"	      00546b49    add esp,10h"
);
// LINE 635:
	asm( 
"	      00546b4c    jmp near ptr 00546B51h"
"	      00546b51    pop edi"
"	      00546b52    pop esi"
"	      00546b53    pop ebx"
"	      00546b54    leave"
"	      00546b55    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546b56
struct _HELI_DATA* S3PersonGetLandedHeli() {
// LINE 647:
	asm( 
"	      00546b56    push ebp"
"	      00546b57    mov ebp,esp"
"	      00546b59    sub esp,14h"
"	      00546b5c    push ebx"
"	      00546b5d    push esi"
"	      00546b5e    push edi"
);
// LINE 654:
	asm( 
"	      00546b5f    mov eax,[ebp+8]"
"	      00546b62    mov eax,[eax]"
"	      00546b64    add eax,20000000h"
"	      00546b69    sar eax,16h"
"	      00546b6c    mov [ebp-8],eax"
);
// LINE 655:
	asm( 
"	      00546b6f    mov eax,20000000h"
"	      00546b74    mov ecx,[ebp+8]"
"	      00546b77    sub eax,[ecx+8]"
"	      00546b7a    sar eax,16h"
"	      00546b7d    mov [ebp-0Ch],eax"
);
// LINE 657:
	asm( 
"	      00546b80    mov eax,[ebp-0Ch]"
"	      00546b83    and eax,0FFh"
"	      00546b88    mov ecx,[ebp-8]"
"	      00546b8b    and ecx,0FFh"
"	      00546b91    shl ecx,0Ah"
"	      00546b94    mov eax,[ecx+eax*4+67ED30h]"
"	      00546b9b    mov [ebp-14h],eax"
);
// LINE 659:
	asm( 
"	      00546b9e    mov eax,[ebp-14h]"
"	      00546ba1    mov eax,[eax+10h]"
"	      00546ba4    mov [ebp-4],eax"
);
// LINE 660:
	asm( 
"	      00546ba7    cmp dword ptr [ebp-4],0"
"	      00546bab    je near ptr 00546BD2h"
);
// LINE 663:
	asm( 
"	      00546bb1    mov eax,[ebp-4]"
"	      00546bb4    movsx eax,word ptr [eax+0Ch]"
"	      00546bb8    test al,4"
"	      00546bba    je near ptr 00546BC5h"
);
// LINE 664:
	asm( 
"	      00546bc0    jmp near ptr 00546BD2h"
);
// LINE 666:
	asm( 
"	      00546bc5    mov eax,[ebp-4]"
"	      00546bc8    mov eax,[eax]"
"	      00546bca    mov [ebp-4],eax"
);
// LINE 667:
	asm( 
"	      00546bcd    jmp near ptr 00546BA7h"
);
// LINE 669:
	asm( 
"	      00546bd2    cmp dword ptr [ebp-4],0"
"	      00546bd6    jne near ptr 00546BE3h"
);
// LINE 670:
	asm( 
"	      00546bdc    xor eax,eax"
"	      00546bde    jmp near ptr 00546C80h"
);
// LINE 676:
	asm( 
"	      00546be3    mov eax,[ebp-4]"
"	      00546be6    mov eax,[eax+18h]"
"	      00546be9    sub eax,40000h"
"	      00546bee    mov ecx,[ebp+8]"
"	      00546bf1    cmp eax,[ecx]"
"	      00546bf3    jg near ptr 00546C3Dh"
"	      00546bf9    mov eax,[ebp-4]"
"	      00546bfc    mov eax,[eax+18h]"
"	      00546bff    add eax,40000h"
"	      00546c04    mov ecx,[ebp+8]"
"	      00546c07    cmp eax,[ecx]"
"	      00546c09    jl near ptr 00546C3Dh"
"	      00546c0f    mov eax,[ebp-4]"
"	      00546c12    mov eax,[eax+20h]"
"	      00546c15    add eax,40000h"
"	      00546c1a    mov ecx,[ebp+8]"
"	      00546c1d    cmp eax,[ecx+8]"
"	      00546c20    jl near ptr 00546C3Dh"
"	      00546c26    mov eax,[ebp-4]"
"	      00546c29    mov eax,[eax+20h]"
"	      00546c2c    sub eax,40000h"
"	      00546c31    mov ecx,[ebp+8]"
"	      00546c34    cmp eax,[ecx+8]"
"	      00546c37    jle near ptr 00546C44h"
);
// LINE 679:
	asm( 
"	      00546c3d    xor eax,eax"
"	      00546c3f    jmp near ptr 00546C80h"
);
// LINE 683:
	asm( 
"	      00546c44    mov eax,[ebp-4]"
"	      00546c47    push eax"
"	      00546c48    call 004F5A90h"
"	      00546c4d    add esp,4"
"	      00546c50    mov [ebp-10h],eax"
);
// LINE 684:
	asm( 
"	      00546c53    cmp dword ptr [ebp-10h],0"
"	      00546c57    jne near ptr 00546C64h"
);
// LINE 685:
	asm( 
"	      00546c5d    xor eax,eax"
"	      00546c5f    jmp near ptr 00546C80h"
);
// LINE 688:
	asm( 
"	      00546c64    mov eax,[ebp-10h]"
"	      00546c67    cmp dword ptr [eax+4],0"
"	      00546c6b    je near ptr 00546C78h"
);
// LINE 689:
	asm( 
"	      00546c71    xor eax,eax"
"	      00546c73    jmp near ptr 00546C80h"
);
// LINE 691:
	asm( 
"	      00546c78    mov eax,[ebp-10h]"
"	      00546c7b    jmp near ptr 00546C80h"
);
// LINE 692:
	asm( 
"	      00546c80    pop edi"
"	      00546c81    pop esi"
"	      00546c82    pop ebx"
"	      00546c83    leave"
"	      00546c84    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546c85
class cYObject* cYObject::GetOnePersonForScurkID(short, short) {
// LINE 695:
	asm( 
"	      00546c85    push ebp"
"	      00546c86    mov ebp,esp"
"	      00546c88    sub esp,14h"
"	      00546c8b    push ebx"
"	      00546c8c    push esi"
"	      00546c8d    push edi"
);
// LINE 696:
	asm( 
"	      00546c8e    movsx eax,word ptr [ebp+8]"
"	      00546c92    cmp eax,7Fh"
"	      00546c95    jg near ptr 00546CC0h"
"	      00546c9b    movsx eax,word ptr [ebp+0Ch]"
"	      00546c9f    cmp eax,7Fh"
"	      00546ca2    jg near ptr 00546CC0h"
"	      00546ca8    movsx eax,word ptr [ebp+8]"
"	      00546cac    test eax,eax"
"	      00546cae    jl near ptr 00546CC0h"
"	      00546cb4    movsx eax,word ptr [ebp+0Ch]"
"	      00546cb8    test eax,eax"
"	      00546cba    jge near ptr 00546CCBh"
"	      00546cc0    mov word ptr [ebp-8],0FFFFh"
"	      00546cc6    jmp near ptr 00546D27h"
"	      00546ccb    movsx eax,word ptr [ebp+8]"
"	      00546ccf    mov eax,[eax*4+639850h]"
"	      00546cd6    movsx ecx,word ptr [ebp+0Ch]"
"	      00546cda    movzx ax,byte ptr [eax+ecx]"
"	      00546cdf    mov [ebp-10h],ax"
"	      00546ce3    movsx eax,word ptr [ebp-10h]"
"	      00546ce7    test eax,eax"
"	      00546ce9    jl near ptr 00546CFEh"
"	      00546cef    movsx eax,word ptr [ebp-10h]"
"	      00546cf3    cmp eax,100h"
"	      00546cf8    jl near ptr 00546D1Ah"
"	      00546cfe    push 8C085h"
"	      00546d03    push 5BBA34h"
"	      00546d08    push 18Ah"
"	      00546d0d    push 5BBA14h"
"	      00546d12    call 00554F30h"
"	      00546d17    add esp,10h"
"	      00546d1a    mov ax,[ebp-10h]"
"	      00546d1e    mov [ebp-8],ax"
"	      00546d22    jmp near ptr 00546D27h"
);
// LINE 697:
	asm( 
"	      00546d27    mov word ptr [ebp-4],0"
"	      00546d2d    jmp near ptr 00546D36h"
"	      00546d32    inc word ptr [ebp-4]"
"	      00546d36    movsx eax,word ptr [ebp-4]"
"	      00546d3a    cmp eax,64h"
"	      00546d3d    jge near ptr 00546E64h"
);
// LINE 698:
	asm( 
"	      00546d43    movsx eax,word ptr [ebp-4]"
"	      00546d47    cmp eax,7D00h"
"	      00546d4c    jne near ptr 00546D5Fh"
"	      00546d52    mov eax,ds:[5B8680h]"
"	      00546d57    mov [ebp-0Ch],eax"
"	      00546d5a    jmp near ptr 00546DDBh"
"	      00546d5f    movsx eax,word ptr [ebp-4]"
"	      00546d63    test eax,eax"
"	      00546d65    jl near ptr 00546D78h"
"	      00546d6b    movsx eax,word ptr [ebp-4]"
"	      00546d6f    cmp eax,64h"
"	      00546d72    jl near ptr 00546D94h"
"	      00546d78    push 8C085h"
"	      00546d7d    push 5BB9F4h"
"	      00546d82    push 204h"
"	      00546d87    push 5BBA14h"
"	      00546d8c    call 00554F30h"
"	      00546d91    add esp,10h"
"	      00546d94    movsx eax,word ptr [ebp-4]"
"	      00546d98    cmp dword ptr [eax*4+636D40h],0"
"	      00546da0    jne near ptr 00546DC2h"
"	      00546da6    push 8C085h"
"	      00546dab    push 5BB9D0h"
"	      00546db0    push 205h"
"	      00546db5    push 5BBA14h"
"	      00546dba    call 00554F30h"
"	      00546dbf    add esp,10h"
"	      00546dc2    movsx eax,word ptr [ebp-4]"
"	      00546dc6    mov eax,[eax*4+636D40h]"
"	      00546dcd    mov [ebp-0Ch],eax"
"	      00546dd0    jmp near ptr 00546DDBh"
"	      00546dd5    mov eax,[ebp-14h]"
"	      00546dd8    mov [ebp-0Ch],eax"
);
// LINE 699:
	asm( 
"	      00546ddb    mov eax,[ebp-0Ch]"
"	      00546dde    movsx eax,word ptr [eax+0D2h]"
"	      00546de5    test eax,eax"
"	      00546de7    je near ptr 00546E5Fh"
);
// LINE 700:
	asm( 
"	      00546ded    jmp near ptr 00546DF2h"
"	      00546df2    mov eax,[ebp-0Ch]"
"	      00546df5    xor ecx,ecx"
"	      00546df7    mov cl,[eax+88h]"
"	      00546dfd    movsx eax,word ptr [ebp+8]"
"	      00546e01    sub ecx,eax"
"	      00546e03    movsx eax,cx"
"	      00546e06    cdq"
"	      00546e07    xor eax,edx"
"	      00546e09    sub eax,edx"
"	      00546e0b    movsx eax,ax"
"	      00546e0e    cmp eax,4"
"	      00546e11    jge near ptr 00546E5Fh"
"	      00546e17    jmp near ptr 00546E1Ch"
"	      00546e1c    mov eax,[ebp-0Ch]"
"	      00546e1f    xor ecx,ecx"
"	      00546e21    mov cl,[eax+89h]"
"	      00546e27    movsx eax,word ptr [ebp+0Ch]"
"	      00546e2b    sub ecx,eax"
"	      00546e2d    movsx eax,cx"
"	      00546e30    cdq"
"	      00546e31    xor eax,edx"
"	      00546e33    sub eax,edx"
"	      00546e35    movsx eax,ax"
"	      00546e38    cmp eax,4"
"	      00546e3b    jge near ptr 00546E5Fh"
);
// LINE 701:
	asm( 
"	      00546e41    mov eax,[ebp-0Ch]"
"	      00546e44    movsx eax,word ptr [eax+0FCh]"
"	      00546e4b    movsx ecx,word ptr [ebp-8]"
"	      00546e4f    cmp eax,ecx"
"	      00546e51    jne near ptr 00546E5Fh"
);
// LINE 702:
	asm( 
"	      00546e57    mov eax,[ebp-0Ch]"
"	      00546e5a    jmp near ptr 00546E6Bh"
);
// LINE 704:
	asm( 
"	      00546e5f    jmp near ptr 00546D32h"
);
// LINE 705:
	asm( 
"	      00546e64    xor eax,eax"
"	      00546e66    jmp near ptr 00546E6Bh"
);
// LINE 706:
	asm( 
"	      00546e6b    pop edi"
"	      00546e6c    pop esi"
"	      00546e6d    pop ebx"
"	      00546e6e    leave"
"	      00546e6f    ret"
);
}

// FUNCTION: SIMCOPTER 0x00546e70
unsigned short cYObject::StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, int32_t, int32_t) {
// LINE 710:
	asm( 
"	      00546e70    push ebp"
"	      00546e71    mov ebp,esp"
"	      00546e73    sub esp,38h"
"	      00546e76    push ebx"
"	      00546e77    push esi"
"	      00546e78    push edi"
"	      00546e79    mov [ebp-38h],ecx"
"	      00546e7c    movsx eax,word ptr [ebp+18h]"
"	      00546e80    and eax,0FFh"
"	      00546e85    movsx ecx,word ptr [ebp+14h]"
"	      00546e89    and ecx,0FFh"
"	      00546e8f    shl ecx,0Ah"
"	      00546e92    mov eax,[ecx+eax*4+67ED30h]"
"	      00546e99    mov [ebp-34h],eax"
);
// LINE 711:
	asm( 
"	      00546e9c    mov eax,[ebp-34h]"
"	      00546e9f    movsx eax,word ptr [eax+2]"
"	      00546ea3    shl eax,10h"
"	      00546ea6    add eax,[ebp+20h]"
"	      00546ea9    mov [ebp-30h],eax"
"	      00546eac    mov eax,[ebp-34h]"
"	      00546eaf    movsx eax,word ptr [eax+4]"
"	      00546eb3    shl eax,10h"
"	      00546eb6    add eax,30000h"
"	      00546ebb    mov [ebp-2Ch],eax"
"	      00546ebe    mov eax,[ebp-34h]"
"	      00546ec1    movsx eax,word ptr [eax+6]"
"	      00546ec5    shl eax,10h"
"	      00546ec8    add eax,[ebp+24h]"
"	      00546ecb    mov [ebp-28h],eax"
"	      00546ece    lea eax,[ebp-30h]"
"	      00546ed1    lea ecx,[ebp-24h]"
"	      00546ed4    mov edx,[eax]"
"	      00546ed6    mov [ecx],edx"
"	      00546ed8    mov edx,[eax+4]"
"	      00546edb    mov [ecx+4],edx"
"	      00546ede    mov eax,[eax+8]"
"	      00546ee1    mov [ecx+8],eax"
"	      00546ee4    jmp near ptr 00546EE9h"
"	      00546ee9    lea eax,[ebp-24h]"
"	      00546eec    lea ecx,[ebp-18h]"
"	      00546eef    mov edx,[eax]"
"	      00546ef1    mov [ecx],edx"
"	      00546ef3    mov edx,[eax+4]"
"	      00546ef6    mov [ecx+4],edx"
"	      00546ef9    mov eax,[eax+8]"
"	      00546efc    mov [ecx+8],eax"
"	      00546eff    lea eax,[ebp-18h]"
"	      00546f02    lea ecx,[ebp-0Ch]"
"	      00546f05    mov edx,[eax]"
"	      00546f07    mov [ecx],edx"
"	      00546f09    mov edx,[eax+4]"
"	      00546f0c    mov [ecx+4],edx"
"	      00546f0f    mov eax,[eax+8]"
"	      00546f12    mov [ecx+8],eax"
);
// LINE 712:
	asm( 
"	      00546f15    lea eax,[ebp-0Ch]"
"	      00546f18    push eax"
"	      00546f19    mov eax,[ebp+1Ch]"
"	      00546f1c    push eax"
"	      00546f1d    mov eax,[ebp+18h]"
"	      00546f20    push eax"
"	      00546f21    mov eax,[ebp+14h]"
"	      00546f24    push eax"
"	      00546f25    mov eax,[ebp+10h]"
"	      00546f28    push eax"
"	      00546f29    mov eax,[ebp+0Ch]"
"	      00546f2c    push eax"
"	      00546f2d    mov eax,[ebp+8]"
"	      00546f30    push eax"
"	      00546f31    mov ecx,[ebp-38h]"
"	      00546f34    call 00546F45h"
"	      00546f39    jmp near ptr 00546F3Eh"
);
// LINE 713:
	asm( 
"	      00546f3e    pop edi"
"	      00546f3f    pop esi"
"	      00546f40    pop ebx"
"	      00546f41    leave"
"	      00546f42    ret 20h"
);
}

// FUNCTION: SIMCOPTER 0x00546f45
unsigned short cYObject::StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, struct Point3d*) {
// LINE 717:
	asm( 
"	      00546f45    push ebp"
"	      00546f46    mov ebp,esp"
"	      00546f48    sub esp,8"
"	      00546f4b    push ebx"
"	      00546f4c    push esi"
"	      00546f4d    push edi"
"	      00546f4e    mov [ebp-8],ecx"
);
// LINE 719:
	asm( 
"	      00546f51    mov eax,[ebp+20h]"
"	      00546f54    push eax"
"	      00546f55    mov eax,[ebp+1Ch]"
"	      00546f58    push eax"
"	      00546f59    push 0FFFFFFFFh"
"	      00546f5b    mov eax,[ebp+18h]"
"	      00546f5e    push eax"
"	      00546f5f    mov eax,[ebp+14h]"
"	      00546f62    push eax"
"	      00546f63    push 0"
"	      00546f65    mov eax,[ebp+10h]"
"	      00546f68    push eax"
"	      00546f69    mov ecx,[ebp-8]"
"	      00546f6c    call 0054A7A5h"
"	      00546f71    mov [ebp-4],ax"
);
// LINE 720:
	asm( 
"	      00546f75    test dword ptr [ebp-4],0FFFFh"
"	      00546f7c    jne near ptr 00546F9Eh"
"	      00546f82    push 8C085h"
"	      00546f87    push 5B8CD8h"
"	      00546f8c    push 2D0h"
"	      00546f91    push 5B8D10h"
"	      00546f96    call 00554F30h"
"	      00546f9b    add esp,10h"
);
// LINE 721:
	asm( 
"	      00546f9e    mov eax,[ebp-8]"
"	      00546fa1    movsx eax,word ptr [eax+0D2h]"
"	      00546fa8    test eax,eax"
"	      00546faa    je near ptr 00546FD5h"
"	      00546fb0    mov eax,[ebp-8]"
"	      00546fb3    movsx eax,word ptr [eax+0D6h]"
"	      00546fba    cmp eax,[ebp+10h]"
"	      00546fbd    jne near ptr 00546FD5h"
"	      00546fc3    mov eax,[ebp-8]"
"	      00546fc6    movsx eax,word ptr [eax+0D8h]"
"	      00546fcd    test eax,eax"
"	      00546fcf    je near ptr 00546FF1h"
"	      00546fd5    push 8C085h"
"	      00546fda    push 5B8D34h"
"	      00546fdf    push 2D1h"
"	      00546fe4    push 5B8D3Ch"
"	      00546fe9    call 00554F30h"
"	      00546fee    add esp,10h"
);
// LINE 722:
	asm( 
"	      00546ff1    mov ax,[ebp+8]"
"	      00546ff5    mov ecx,[ebp-8]"
"	      00546ff8    mov [ecx+0FCh],ax"
);
// LINE 724:
	asm( 
"	      00546fff    mov ax,[ebp+0Ch]"
"	      00547003    mov ecx,[ebp-8]"
"	      00547006    mov [ecx+10Ah],ax"
"	      0054700d    mov eax,[ebp-8]"
"	      00547010    mov ax,[eax+10Ah]"
"	      00547017    push eax"
"	      00547018    mov eax,[ebp-8]"
"	      0054701b    mov eax,[eax+0B4h]"
"	      00547021    push eax"
"	      00547022    mov ecx,[ebp-8]"
"	      00547025    call 0055CC58h"
"	      0054702a    jmp near ptr 0054702Fh"
"	      0054702f    jmp near ptr 00547034h"
);
// LINE 725:
	asm( 
"	      00547034    mov ax,[ebp-4]"
"	      00547038    jmp near ptr 0054703Dh"
);
// LINE 726:
	asm( 
"	      0054703d    pop edi"
"	      0054703e    pop esi"
"	      0054703f    pop ebx"
"	      00547040    leave"
"	      00547041    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x00547044
void cYObject::StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*) {
// LINE 731:
	asm( 
"	      00547044    push ebp"
"	      00547045    mov ebp,esp"
"	      00547047    sub esp,14h"
"	      0054704a    push ebx"
"	      0054704b    push esi"
"	      0054704c    push edi"
);
// LINE 732:
	asm( 
"	      0054704d    cmp dword ptr [ebp+1Ch],0"
"	      00547051    je near ptr 00547073h"
"	      00547057    push 8C085h"
"	      0054705c    push 5B8D60h"
"	      00547061    push 2DCh"
"	      00547066    push 5B8D8Ch"
"	      0054706b    call 00554F30h"
"	      00547070    add esp,10h"
);
// LINE 733:
	asm( 
"	      00547073    movsx eax,word ptr [ebp+10h]"
"	      00547077    cmp eax,7Fh"
"	      0054707a    jg near ptr 005470A5h"
"	      00547080    movsx eax,word ptr [ebp+14h]"
"	      00547084    cmp eax,7Fh"
"	      00547087    jg near ptr 005470A5h"
"	      0054708d    movsx eax,word ptr [ebp+10h]"
"	      00547091    test eax,eax"
"	      00547093    jl near ptr 005470A5h"
"	      00547099    movsx eax,word ptr [ebp+14h]"
"	      0054709d    test eax,eax"
"	      0054709f    jge near ptr 005470B0h"
"	      005470a5    mov word ptr [ebp-0Ch],0FFFFh"
"	      005470ab    jmp near ptr 0054710Ch"
"	      005470b0    movsx eax,word ptr [ebp+10h]"
"	      005470b4    mov eax,[eax*4+639850h]"
"	      005470bb    movsx ecx,word ptr [ebp+14h]"
"	      005470bf    movzx ax,byte ptr [eax+ecx]"
"	      005470c4    mov [ebp-14h],ax"
"	      005470c8    movsx eax,word ptr [ebp-14h]"
"	      005470cc    test eax,eax"
"	      005470ce    jl near ptr 005470E3h"
"	      005470d4    movsx eax,word ptr [ebp-14h]"
"	      005470d8    cmp eax,100h"
"	      005470dd    jl near ptr 005470FFh"
"	      005470e3    push 8C085h"
"	      005470e8    push 5BBA34h"
"	      005470ed    push 18Ah"
"	      005470f2    push 5BBA14h"
"	      005470f7    call 00554F30h"
"	      005470fc    add esp,10h"
"	      005470ff    mov ax,[ebp-14h]"
"	      00547103    mov [ebp-0Ch],ax"
"	      00547107    jmp near ptr 0054710Ch"
);
// LINE 734:
	asm( 
"	      0054710c    movsx eax,word ptr [ebp-0Ch]"
"	      00547110    push eax"
"	      00547111    call 0051DA5Bh"
"	      00547116    add esp,4"
"	      00547119    mov [ebp-10h],eax"
);
// LINE 735:
	asm( 
"	      0054711c    cmp dword ptr [ebp-10h],0"
"	      00547120    jne near ptr 00547142h"
"	      00547126    push 8C085h"
"	      0054712b    push 5B8DB0h"
"	      00547130    push 2DFh"
"	      00547135    push 5B8DB8h"
"	      0054713a    call 00554F30h"
"	      0054713f    add esp,10h"
);
// LINE 736:
	asm( 
"	      00547142    push 30000h"
"	      00547147    mov eax,[ebp-10h]"
"	      0054714a    mov eax,[eax+0Ch]"
"	      0054714d    push eax"
"	      0054714e    call 004D19DFh"
"	      00547153    add esp,8"
"	      00547156    mov ecx,[ebp-10h]"
"	      00547159    mov ecx,[ecx+4]"
"	      0054715c    add ecx,eax"
"	      0054715e    mov [ebp-4],ecx"
);
// LINE 737:
	asm( 
"	      00547161    push 30000h"
"	      00547166    mov eax,[ebp-10h]"
"	      00547169    mov eax,[eax+10h]"
"	      0054716c    push eax"
"	      0054716d    call 004D19DFh"
"	      00547172    add esp,8"
"	      00547175    mov ecx,[ebp-10h]"
"	      00547178    mov ecx,[ecx+8]"
"	      0054717b    add ecx,eax"
"	      0054717d    mov [ebp-8],ecx"
);
// LINE 740:
	asm( 
"	      00547180    mov eax,[ebp-8]"
"	      00547183    push eax"
"	      00547184    mov eax,[ebp-4]"
"	      00547187    push eax"
"	      00547188    mov eax,[ebp+1Ch]"
"	      0054718b    push eax"
"	      0054718c    mov eax,[ebp+18h]"
"	      0054718f    push eax"
"	      00547190    mov eax,[ebp+14h]"
"	      00547193    push eax"
"	      00547194    mov eax,[ebp+10h]"
"	      00547197    push eax"
"	      00547198    mov eax,[ebp+0Ch]"
"	      0054719b    push eax"
"	      0054719c    mov eax,[ebp+8]"
"	      0054719f    push eax"
"	      005471a0    call 005471B2h"
"	      005471a5    add esp,20h"
);
// LINE 741:
	asm( 
"	      005471a8    jmp near ptr 005471ADh"
"	      005471ad    pop edi"
"	      005471ae    pop esi"
"	      005471af    pop ebx"
"	      005471b0    leave"
"	      005471b1    ret"
);
}

// FUNCTION: SIMCOPTER 0x005471b2
void cYObject::StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*, int32_t, int32_t) {
// LINE 747:
	asm( 
"	      005471b2    push ebp"
"	      005471b3    mov ebp,esp"
"	      005471b5    sub esp,48h"
"	      005471b8    push ebx"
"	      005471b9    push esi"
"	      005471ba    push edi"
);
// LINE 748:
	asm( 
"	      005471bb    cmp dword ptr [ebp+1Ch],0"
"	      005471bf    je near ptr 005471E1h"
"	      005471c5    push 8C085h"
"	      005471ca    push 5B8DDCh"
"	      005471cf    push 2ECh"
"	      005471d4    push 5B8E04h"
"	      005471d9    call 00554F30h"
"	      005471de    add esp,10h"
);
// LINE 750:
	asm( 
"	      005471e1    movsx eax,word ptr [ebp+10h]"
"	      005471e5    cmp eax,7Fh"
"	      005471e8    jg near ptr 00547213h"
"	      005471ee    movsx eax,word ptr [ebp+14h]"
"	      005471f2    cmp eax,7Fh"
"	      005471f5    jg near ptr 00547213h"
"	      005471fb    movsx eax,word ptr [ebp+10h]"
"	      005471ff    test eax,eax"
"	      00547201    jl near ptr 00547213h"
"	      00547207    movsx eax,word ptr [ebp+14h]"
"	      0054720b    test eax,eax"
"	      0054720d    jge near ptr 0054721Eh"
"	      00547213    mov word ptr [ebp-18h],0FFFFh"
"	      00547219    jmp near ptr 0054727Ah"
"	      0054721e    movsx eax,word ptr [ebp+10h]"
"	      00547222    mov eax,[eax*4+639850h]"
"	      00547229    movsx ecx,word ptr [ebp+14h]"
"	      0054722d    movzx ax,byte ptr [eax+ecx]"
"	      00547232    mov [ebp-44h],ax"
"	      00547236    movsx eax,word ptr [ebp-44h]"
"	      0054723a    test eax,eax"
"	      0054723c    jl near ptr 00547251h"
"	      00547242    movsx eax,word ptr [ebp-44h]"
"	      00547246    cmp eax,100h"
"	      0054724b    jl near ptr 0054726Dh"
"	      00547251    push 8C085h"
"	      00547256    push 5BBA34h"
"	      0054725b    push 18Ah"
"	      00547260    push 5BBA14h"
"	      00547265    call 00554F30h"
"	      0054726a    add esp,10h"
"	      0054726d    mov ax,[ebp-44h]"
"	      00547271    mov [ebp-18h],ax"
"	      00547275    jmp near ptr 0054727Ah"
"	      0054727a    movsx eax,word ptr [ebp+10h]"
"	      0054727e    and eax,0FFh"
"	      00547283    shl eax,0Ah"
"	      00547286    movsx ecx,word ptr [ebp+14h]"
"	      0054728a    and ecx,0FFh"
"	      00547290    mov eax,[eax+ecx*4+67ED30h]"
"	      00547297    mov [ebp-40h],eax"
);
// LINE 752:
	asm( 
"	      0054729a    mov eax,[ebp-40h]"
"	      0054729d    movsx eax,word ptr [eax+2]"
"	      005472a1    shl eax,10h"
"	      005472a4    add eax,[ebp+20h]"
"	      005472a7    mov [ebp-3Ch],eax"
"	      005472aa    mov eax,[ebp-40h]"
"	      005472ad    movsx eax,word ptr [eax+4]"
"	      005472b1    shl eax,10h"
"	      005472b4    add eax,30000h"
"	      005472b9    mov [ebp-38h],eax"
"	      005472bc    mov eax,[ebp-40h]"
"	      005472bf    movsx eax,word ptr [eax+6]"
"	      005472c3    shl eax,10h"
"	      005472c6    add eax,[ebp+24h]"
"	      005472c9    mov [ebp-34h],eax"
"	      005472cc    lea eax,[ebp-3Ch]"
"	      005472cf    lea ecx,[ebp-30h]"
"	      005472d2    mov edx,[eax]"
"	      005472d4    mov [ecx],edx"
"	      005472d6    mov edx,[eax+4]"
"	      005472d9    mov [ecx+4],edx"
"	      005472dc    mov eax,[eax+8]"
"	      005472df    mov [ecx+8],eax"
"	      005472e2    jmp near ptr 005472E7h"
"	      005472e7    lea eax,[ebp-30h]"
"	      005472ea    lea ecx,[ebp-24h]"
"	      005472ed    mov edx,[eax]"
"	      005472ef    mov [ecx],edx"
"	      005472f1    mov edx,[eax+4]"
"	      005472f4    mov [ecx+4],edx"
"	      005472f7    mov eax,[eax+8]"
"	      005472fa    mov [ecx+8],eax"
"	      005472fd    lea eax,[ebp-24h]"
"	      00547300    lea ecx,[ebp-10h]"
"	      00547303    mov edx,[eax]"
"	      00547305    mov [ecx],edx"
"	      00547307    mov edx,[eax+4]"
"	      0054730a    mov [ecx+4],edx"
"	      0054730d    mov eax,[eax+8]"
"	      00547310    mov [ecx+8],eax"
);
// LINE 763:
	asm( 
"	      00547313    lea eax,[ebp-10h]"
"	      00547316    push eax"
"	      00547317    mov eax,[ebp+1Ch]"
"	      0054731a    push eax"
"	      0054731b    movsx eax,word ptr [ebp+18h]"
"	      0054731f    push eax"
"	      00547320    mov eax,[ebp+14h]"
"	      00547323    push eax"
"	      00547324    mov eax,[ebp+10h]"
"	      00547327    push eax"
"	      00547328    mov eax,[ebp+0Ch]"
"	      0054732b    push eax"
"	      0054732c    mov eax,[ebp+8]"
"	      0054732f    push eax"
"	      00547330    call 0054A1D3h"
"	      00547335    add esp,1Ch"
"	      00547338    mov [ebp-4],ax"
);
// LINE 764:
	asm( 
"	      0054733c    movsx eax,word ptr [ebp-4]"
"	      00547340    cmp eax,0FFFFFFFFh"
"	      00547343    jne near ptr 0054736Ah"
);
// LINE 765:
	asm( 
"	      00547349    push 8C085h"
"	      0054734e    push 5B8E28h"
"	      00547353    push 2FDh"
"	      00547358    push 5B8E58h"
"	      0054735d    call 00554F30h"
"	      00547362    add esp,10h"
);
// LINE 766:
	asm( 
"	      00547365    jmp near ptr 0054743Bh"
);
// LINE 769:
	asm( 
"	      0054736a    movsx eax,word ptr [ebp-4]"
"	      0054736e    cmp eax,7D00h"
"	      00547373    jne near ptr 00547386h"
"	      00547379    mov eax,ds:[5B8680h]"
"	      0054737e    mov [ebp-14h],eax"
"	      00547381    jmp near ptr 00547402h"
"	      00547386    movsx eax,word ptr [ebp-4]"
"	      0054738a    test eax,eax"
"	      0054738c    jl near ptr 0054739Fh"
"	      00547392    movsx eax,word ptr [ebp-4]"
"	      00547396    cmp eax,64h"
"	      00547399    jl near ptr 005473BBh"
"	      0054739f    push 8C085h"
"	      005473a4    push 5BB9F4h"
"	      005473a9    push 204h"
"	      005473ae    push 5BBA14h"
"	      005473b3    call 00554F30h"
"	      005473b8    add esp,10h"
"	      005473bb    movsx eax,word ptr [ebp-4]"
"	      005473bf    cmp dword ptr [eax*4+636D40h],0"
"	      005473c7    jne near ptr 005473E9h"
"	      005473cd    push 8C085h"
"	      005473d2    push 5BB9D0h"
"	      005473d7    push 205h"
"	      005473dc    push 5BBA14h"
"	      005473e1    call 00554F30h"
"	      005473e6    add esp,10h"
"	      005473e9    movsx eax,word ptr [ebp-4]"
"	      005473ed    mov eax,[eax*4+636D40h]"
"	      005473f4    mov [ebp-14h],eax"
"	      005473f7    jmp near ptr 00547402h"
"	      005473fc    mov eax,[ebp-48h]"
"	      005473ff    mov [ebp-14h],eax"
);
// LINE 770:
	asm( 
"	      00547402    cmp dword ptr [ebp-14h],0"
"	      00547406    jne near ptr 00547428h"
"	      0054740c    push 8C085h"
"	      00547411    push 5B8E7Ch"
"	      00547416    push 302h"
"	      0054741b    push 5B8E84h"
"	      00547420    call 00554F30h"
"	      00547425    add esp,10h"
);
// LINE 771:
	asm( 
"	      00547428    mov ax,[ebp-18h]"
"	      0054742c    mov ecx,[ebp-14h]"
"	      0054742f    mov [ecx+0FCh],ax"
);
// LINE 774:
	asm( 
"	      00547436    jmp near ptr 0054743Bh"
"	      0054743b    pop edi"
"	      0054743c    pop esi"
"	      0054743d    pop ebx"
"	      0054743e    leave"
"	      0054743f    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547440
void cYObject::StartScurkPeople(short, short) {
// LINE 778:
	asm( 
"	      00547440    push ebp"
"	      00547441    mov ebp,esp"
"	      00547443    sub esp,20h"
"	      00547446    push ebx"
"	      00547447    push esi"
"	      00547448    push edi"
);
// LINE 780:
	asm( 
"	      00547449    movsx eax,word ptr [ebp+8]"
"	      0054744d    cmp eax,7Fh"
"	      00547450    jg near ptr 0054747Bh"
"	      00547456    movsx eax,word ptr [ebp+0Ch]"
"	      0054745a    cmp eax,7Fh"
"	      0054745d    jg near ptr 0054747Bh"
"	      00547463    movsx eax,word ptr [ebp+8]"
"	      00547467    test eax,eax"
"	      00547469    jl near ptr 0054747Bh"
"	      0054746f    movsx eax,word ptr [ebp+0Ch]"
"	      00547473    test eax,eax"
"	      00547475    jge near ptr 00547486h"
"	      0054747b    mov word ptr [ebp-4],0FFFFh"
"	      00547481    jmp near ptr 005474E2h"
"	      00547486    movsx eax,word ptr [ebp+8]"
"	      0054748a    mov eax,[eax*4+639850h]"
"	      00547491    movsx ecx,word ptr [ebp+0Ch]"
"	      00547495    movzx ax,byte ptr [eax+ecx]"
"	      0054749a    mov [ebp-1Ch],ax"
"	      0054749e    movsx eax,word ptr [ebp-1Ch]"
"	      005474a2    test eax,eax"
"	      005474a4    jl near ptr 005474B9h"
"	      005474aa    movsx eax,word ptr [ebp-1Ch]"
"	      005474ae    cmp eax,100h"
"	      005474b3    jl near ptr 005474D5h"
"	      005474b9    push 8C085h"
"	      005474be    push 5BBA34h"
"	      005474c3    push 18Ah"
"	      005474c8    push 5BBA14h"
"	      005474cd    call 00554F30h"
"	      005474d2    add esp,10h"
"	      005474d5    mov ax,[ebp-1Ch]"
"	      005474d9    mov [ebp-4],ax"
"	      005474dd    jmp near ptr 005474E2h"
);
// LINE 781:
	asm( 
"	      005474e2    movsx eax,word ptr [ebp-4]"
"	      005474e6    mov [ebp-20h],eax"
"	      005474e9    jmp near ptr 005478D0h"
);
// LINE 784:
	asm( 
"	      005474ee    mov eax,[ebp+0Ch]"
"	      005474f1    push eax"
"	      005474f2    mov eax,[ebp+8]"
"	      005474f5    push eax"
"	      005474f6    call 00546C85h"
"	      005474fb    add esp,8"
"	      005474fe    test eax,eax"
"	      00547500    je near ptr 0054750Bh"
);
// LINE 785:
	asm( 
"	      00547506    jmp near ptr 00547932h"
);
// LINE 786:
	asm( 
"	      0054750b    lea eax,[ebp-8]"
"	      0054750e    push eax"
"	      0054750f    push 0"
"	      00547511    push 5"
"	      00547513    push 0FFFFFFFEh"
"	      00547515    mov ecx,ds:[5B8680h]"
"	      0054751b    call 00556EC0h"
"	      00547520    mov [ebp-0Ch],eax"
);
// LINE 787:
	asm( 
"	      00547523    cmp dword ptr [ebp-0Ch],0"
"	      00547527    je near ptr 0054753Ah"
"	      0054752d    movsx eax,word ptr [ebp-8]"
"	      00547531    cmp eax,64h"
"	      00547534    jle near ptr 00547552h"
);
// LINE 788:
	asm( 
"	      0054753a    push 0"
"	      0054753c    push 0FFFFFFFFh"
"	      0054753e    mov eax,[ebp+0Ch]"
"	      00547541    push eax"
"	      00547542    mov eax,[ebp+8]"
"	      00547545    push eax"
"	      00547546    push 5"
"	      00547548    push 0Ch"
"	      0054754a    call 00547044h"
"	      0054754f    add esp,18h"
);
// LINE 789:
	asm( 
"	      00547552    jmp near ptr 0054792Dh"
);
// LINE 792:
	asm( 
"	      00547557    mov eax,[ebp+0Ch]"
"	      0054755a    push eax"
"	      0054755b    mov eax,[ebp+8]"
"	      0054755e    push eax"
"	      0054755f    call 00546C85h"
"	      00547564    add esp,8"
"	      00547567    test eax,eax"
"	      00547569    je near ptr 00547574h"
);
// LINE 793:
	asm( 
"	      0054756f    jmp near ptr 00547932h"
);
// LINE 794:
	asm( 
"	      00547574    push 0"
"	      00547576    push 0FFFFFFFFh"
"	      00547578    mov eax,[ebp+0Ch]"
"	      0054757b    push eax"
"	      0054757c    mov eax,[ebp+8]"
"	      0054757f    push eax"
"	      00547580    push 7"
"	      00547582    push 0Eh"
"	      00547584    call 00547044h"
"	      00547589    add esp,18h"
);
// LINE 795:
	asm( 
"	      0054758c    jmp near ptr 0054792Dh"
);
// LINE 798:
	asm( 
"	      00547591    mov eax,[ebp+0Ch]"
"	      00547594    push eax"
"	      00547595    mov eax,[ebp+8]"
"	      00547598    push eax"
"	      00547599    call 00546C85h"
"	      0054759e    add esp,8"
"	      005475a1    test eax,eax"
"	      005475a3    je near ptr 005475AEh"
);
// LINE 799:
	asm( 
"	      005475a9    jmp near ptr 00547932h"
);
// LINE 800:
	asm( 
"	      005475ae    cmp dword ptr ds:[5C2AA0h],2"
"	      005475b5    jne near ptr 005475D0h"
"	      005475bb    call 00429015h"
"	      005475c0    cmp eax,3E8h"
"	      005475c5    jl near ptr 005475D0h"
"	      005475cb    jmp near ptr 005475D5h"
"	      005475d0    jmp near ptr 00547600h"
"	      005475d5    jmp near ptr 005475E4h"
"	      005475da    cmp dword ptr [ebp-18h],0"
"	      005475de    je near ptr 00547600h"
);
// LINE 801:
	asm( 
"	      005475e4    push 8C085h"
"	      005475e9    push 5B8EA8h"
"	      005475ee    push 321h"
"	      005475f3    push 5B8EE8h"
"	      005475f8    call 00554F30h"
"	      005475fd    add esp,10h"
);
// LINE 805:
	asm( 
"	      00547600    jmp near ptr 0054792Dh"
);
// LINE 808:
	asm( 
"	      00547605    mov eax,[ebp+0Ch]"
"	      00547608    push eax"
"	      00547609    mov eax,[ebp+8]"
"	      0054760c    push eax"
"	      0054760d    call 00546C85h"
"	      00547612    add esp,8"
"	      00547615    test eax,eax"
"	      00547617    je near ptr 00547622h"
);
// LINE 809:
	asm( 
"	      0054761d    jmp near ptr 00547932h"
);
// LINE 818:
	asm( 
"	      00547622    call 00547CC8h"
"	      00547627    mov [ebp-10h],eax"
"	      0054762a    cmp dword ptr [ebp-10h],0"
"	      0054762e    je near ptr 0054767Ah"
"	      00547634    push 0FFBA0000h"
"	      00547639    push 460000h"
"	      0054763e    push 0"
"	      00547640    mov eax,[ebp+0Ch]"
"	      00547643    push eax"
"	      00547644    mov eax,[ebp+8]"
"	      00547647    push eax"
"	      00547648    push 5"
"	      0054764a    push 4B5h"
"	      0054764f    mov eax,[ebp-4]"
"	      00547652    push eax"
"	      00547653    mov ecx,[ebp-10h]"
"	      00547656    call 00546E70h"
"	      0054765b    movzx eax,ax"
"	      0054765e    test eax,eax"
"	      00547660    je near ptr 0054767Ah"
"	      00547666    push 0Ah"
"	      00547668    call 0055D717h"
"	      0054766d    add esp,4"
"	      00547670    mov ecx,[ebp-10h]"
"	      00547673    mov [ecx+0F0h],ax"
);
// LINE 820:
	asm( 
"	      0054767a    push 0Ah"
"	      0054767c    call 0055D717h"
"	      00547681    add esp,4"
"	      00547684    mov [ebp-14h],ax"
);
// LINE 822:
	asm( 
"	      00547688    call 00547CC8h"
"	      0054768d    mov [ebp-10h],eax"
"	      00547690    cmp dword ptr [ebp-10h],0"
"	      00547694    je near ptr 005476DAh"
"	      0054769a    push 0FFBA0000h"
"	      0054769f    push 140000h"
"	      005476a4    push 0"
"	      005476a6    mov eax,[ebp+0Ch]"
"	      005476a9    push eax"
"	      005476aa    mov eax,[ebp+8]"
"	      005476ad    push eax"
"	      005476ae    push 5"
"	      005476b0    push 4B6h"
"	      005476b5    mov eax,[ebp-4]"
"	      005476b8    push eax"
"	      005476b9    mov ecx,[ebp-10h]"
"	      005476bc    call 00546E70h"
"	      005476c1    movzx eax,ax"
"	      005476c4    test eax,eax"
"	      005476c6    je near ptr 005476DAh"
"	      005476cc    mov ax,[ebp-14h]"
"	      005476d0    mov ecx,[ebp-10h]"
"	      005476d3    mov [ecx+0F0h],ax"
);
// LINE 823:
	asm( 
"	      005476da    call 00547CC8h"
"	      005476df    mov [ebp-10h],eax"
"	      005476e2    cmp dword ptr [ebp-10h],0"
"	      005476e6    je near ptr 0054772Ch"
"	      005476ec    push 0FFEC0000h"
"	      005476f1    push 140000h"
"	      005476f6    push 0"
"	      005476f8    mov eax,[ebp+0Ch]"
"	      005476fb    push eax"
"	      005476fc    mov eax,[ebp+8]"
"	      005476ff    push eax"
"	      00547700    push 5"
"	      00547702    push 4B6h"
"	      00547707    mov eax,[ebp-4]"
"	      0054770a    push eax"
"	      0054770b    mov ecx,[ebp-10h]"
"	      0054770e    call 00546E70h"
"	      00547713    movzx eax,ax"
"	      00547716    test eax,eax"
"	      00547718    je near ptr 0054772Ch"
"	      0054771e    mov ax,[ebp-14h]"
"	      00547722    mov ecx,[ebp-10h]"
"	      00547725    mov [ecx+0F0h],ax"
);
// LINE 824:
	asm( 
"	      0054772c    call 00547CC8h"
"	      00547731    mov [ebp-10h],eax"
"	      00547734    cmp dword ptr [ebp-10h],0"
"	      00547738    je near ptr 0054777Eh"
"	      0054773e    push 0FFEC0000h"
"	      00547743    push 460000h"
"	      00547748    push 0"
"	      0054774a    mov eax,[ebp+0Ch]"
"	      0054774d    push eax"
"	      0054774e    mov eax,[ebp+8]"
"	      00547751    push eax"
"	      00547752    push 5"
"	      00547754    push 4B6h"
"	      00547759    mov eax,[ebp-4]"
"	      0054775c    push eax"
"	      0054775d    mov ecx,[ebp-10h]"
"	      00547760    call 00546E70h"
"	      00547765    movzx eax,ax"
"	      00547768    test eax,eax"
"	      0054776a    je near ptr 0054777Eh"
"	      00547770    mov ax,[ebp-14h]"
"	      00547774    mov ecx,[ebp-10h]"
"	      00547777    mov [ecx+0F0h],ax"
);
// LINE 825:
	asm( 
"	      0054777e    call 00547CC8h"
"	      00547783    mov [ebp-10h],eax"
"	      00547786    cmp dword ptr [ebp-10h],0"
"	      0054778a    je near ptr 005477D0h"
"	      00547790    push 0FFD30000h"
"	      00547795    push 2D0000h"
"	      0054779a    push 0"
"	      0054779c    mov eax,[ebp+0Ch]"
"	      0054779f    push eax"
"	      005477a0    mov eax,[ebp+8]"
"	      005477a3    push eax"
"	      005477a4    push 5"
"	      005477a6    push 4B6h"
"	      005477ab    mov eax,[ebp-4]"
"	      005477ae    push eax"
"	      005477af    mov ecx,[ebp-10h]"
"	      005477b2    call 00546E70h"
"	      005477b7    movzx eax,ax"
"	      005477ba    test eax,eax"
"	      005477bc    je near ptr 005477D0h"
"	      005477c2    mov ax,[ebp-14h]"
"	      005477c6    mov ecx,[ebp-10h]"
"	      005477c9    mov [ecx+0F0h],ax"
);
// LINE 826:
	asm( 
"	      005477d0    call 00547CC8h"
"	      005477d5    mov [ebp-10h],eax"
"	      005477d8    cmp dword ptr [ebp-10h],0"
"	      005477dc    je near ptr 00547822h"
"	      005477e2    push 0FFD80000h"
"	      005477e7    push 0FFD80000h"
"	      005477ec    push 0"
"	      005477ee    mov eax,[ebp+0Ch]"
"	      005477f1    push eax"
"	      005477f2    mov eax,[ebp+8]"
"	      005477f5    push eax"
"	      005477f6    push 5"
"	      005477f8    push 4B6h"
"	      005477fd    mov eax,[ebp-4]"
"	      00547800    push eax"
"	      00547801    mov ecx,[ebp-10h]"
"	      00547804    call 00546E70h"
"	      00547809    movzx eax,ax"
"	      0054780c    test eax,eax"
"	      0054780e    je near ptr 00547822h"
"	      00547814    mov ax,[ebp-14h]"
"	      00547818    mov ecx,[ebp-10h]"
"	      0054781b    mov [ecx+0F0h],ax"
);
// LINE 827:
	asm( 
"	      00547822    call 00547CC8h"
"	      00547827    mov [ebp-10h],eax"
"	      0054782a    cmp dword ptr [ebp-10h],0"
"	      0054782e    je near ptr 00547874h"
"	      00547834    push 280000h"
"	      00547839    push 280000h"
"	      0054783e    push 0"
"	      00547840    mov eax,[ebp+0Ch]"
"	      00547843    push eax"
"	      00547844    mov eax,[ebp+8]"
"	      00547847    push eax"
"	      00547848    push 5"
"	      0054784a    push 4B6h"
"	      0054784f    mov eax,[ebp-4]"
"	      00547852    push eax"
"	      00547853    mov ecx,[ebp-10h]"
"	      00547856    call 00546E70h"
"	      0054785b    movzx eax,ax"
"	      0054785e    test eax,eax"
"	      00547860    je near ptr 00547874h"
"	      00547866    mov ax,[ebp-14h]"
"	      0054786a    mov ecx,[ebp-10h]"
"	      0054786d    mov [ecx+0F0h],ax"
);
// LINE 828:
	asm( 
"	      00547874    call 00547CC8h"
"	      00547879    mov [ebp-10h],eax"
"	      0054787c    cmp dword ptr [ebp-10h],0"
"	      00547880    je near ptr 005478C6h"
"	      00547886    push 280000h"
"	      0054788b    push 0FFD80000h"
"	      00547890    push 0"
"	      00547892    mov eax,[ebp+0Ch]"
"	      00547895    push eax"
"	      00547896    mov eax,[ebp+8]"
"	      00547899    push eax"
"	      0054789a    push 5"
"	      0054789c    push 4B6h"
"	      005478a1    mov eax,[ebp-4]"
"	      005478a4    push eax"
"	      005478a5    mov ecx,[ebp-10h]"
"	      005478a8    call 00546E70h"
"	      005478ad    movzx eax,ax"
"	      005478b0    test eax,eax"
"	      005478b2    je near ptr 005478C6h"
"	      005478b8    mov ax,[ebp-14h]"
"	      005478bc    mov ecx,[ebp-10h]"
"	      005478bf    mov [ecx+0F0h],ax"
);
// LINE 829:
	asm( 
"	      005478c6    jmp near ptr 0054792Dh"
);
// LINE 831:
	asm( 
"	      005478cb    jmp near ptr 0054792Dh"
"	      005478d0    sub dword ptr [ebp-20h],0D1h"
"	      005478d7    cmp dword ptr [ebp-20h],25h"
"	      005478db    ja near ptr 0054792Dh"
"	      005478e1    mov eax,[ebp-20h]"
"	      005478e4    xor ecx,ecx"
"	      005478e6    mov cl,[eax+547907h]"
"	      005478ec    jmp dword ptr [ecx*4+5478F3h]"
"	      005478f3    out dx,al"
"	      005478f4    je short 0054794Ah"
"	      005478f6    add [edi+75h],dl"
"	      005478f9    push esp"
"	      005478fa    add ds:[91005476h],al"
"	      00547900    jne short 00547956h"
"	      00547902    add ds:[5479h],ch"
"	      00547908    add [esp+eax],eax"
"	      0054790b    add al,4"
"	      0054790d    add al,[esp+eax]"
"	      00547910    add al,4"
"	      00547912    add al,4"
"	      00547914    add al,4"
"	      00547916    add al,4"
"	      00547918    add al,4"
"	      0054791a    add al,4"
"	      0054791c    add al,4"
"	      0054791e    add al,4"
"	      00547920    add al,4"
"	      00547922    add al,4"
"	      00547924    add al,4"
"	      00547926    add al,4"
"	      00547928    add al,4"
"	      0054792a    add al,4"
"	      0054792c    (bad)"
);
// LINE 832:
	asm( 
"	      0054792d    jmp near ptr 00547932h"
"	      00547932    pop edi"
"	      00547933    pop esi"
"	      00547934    pop ebx"
"	      00547935    leave"
"	      00547936    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547937
void cYObject::StartScurkPeopleNearAvatar() {
// LINE 837:
	asm( 
"	      00547937    push ebp"
"	      00547938    mov ebp,esp"
"	      0054793a    sub esp,18h"
"	      0054793d    push ebx"
"	      0054793e    push esi"
"	      0054793f    push edi"
);
// LINE 839:
	asm( 
"	      00547940    movsx eax,word ptr ds:[5B867Ch]"
"	      00547947    movsx ecx,word ptr ds:[5B8674h]"
"	      0054794e    cmp eax,ecx"
"	      00547950    jge near ptr 0054795Bh"
);
// LINE 840:
	asm( 
"	      00547956    jmp near ptr 00547ABDh"
);
// LINE 841:
	asm( 
"	      0054795b    mov eax,ds:[5B8680h]"
"	      00547960    movzx ax,byte ptr [eax+88h]"
"	      00547968    mov [ebp-10h],ax"
);
// LINE 842:
	asm( 
"	      0054796c    mov eax,ds:[5B8680h]"
"	      00547971    movzx ax,byte ptr [eax+89h]"
"	      00547979    mov [ebp-14h],ax"
);
// LINE 844:
	asm( 
"	      0054797d    movsx eax,word ptr [ebp-10h]"
"	      00547981    movsx ecx,word ptr ds:[5B86A8h]"
"	      00547988    cmp eax,ecx"
"	      0054798a    jne near ptr 005479A8h"
"	      00547990    movsx eax,word ptr [ebp-14h]"
"	      00547994    movsx ecx,word ptr ds:[5B86ACh]"
"	      0054799b    cmp eax,ecx"
"	      0054799d    jne near ptr 005479A8h"
);
// LINE 845:
	asm( 
"	      005479a3    jmp near ptr 00547ABDh"
);
// LINE 847:
	asm( 
"	      005479a8    mov ax,[ebp-10h]"
"	      005479ac    mov ds:[5B86A8h],ax"
);
// LINE 848:
	asm( 
"	      005479b2    mov ax,[ebp-14h]"
"	      005479b6    mov ds:[5B86ACh],ax"
);
// LINE 853:
	asm( 
"	      005479bc    movsx eax,word ptr [ebp-10h]"
"	      005479c0    movsx ecx,word ptr ds:[5B86A4h]"
"	      005479c7    sub eax,ecx"
"	      005479c9    mov [ebp-6],ax"
);
// LINE 854:
	asm( 
"	      005479cd    movsx eax,word ptr ds:[5B86A4h]"
"	      005479d4    movsx ecx,word ptr [ebp-10h]"
"	      005479d8    add eax,ecx"
"	      005479da    mov [ebp-2],ax"
);
// LINE 855:
	asm( 
"	      005479de    movsx eax,word ptr [ebp-14h]"
"	      005479e2    movsx ecx,word ptr ds:[5B86A4h]"
"	      005479e9    sub eax,ecx"
"	      005479eb    mov [ebp-8],ax"
);
// LINE 856:
	asm( 
"	      005479ef    movsx eax,word ptr ds:[5B86A4h]"
"	      005479f6    movsx ecx,word ptr [ebp-14h]"
"	      005479fa    add eax,ecx"
"	      005479fc    mov [ebp-4],ax"
);
// LINE 857:
	asm( 
"	      00547a00    mov ax,[ebp-6]"
"	      00547a04    mov [ebp-10h],ax"
);
// LINE 858:
	asm( 
"	      00547a08    mov ax,[ebp-8]"
"	      00547a0c    mov [ebp-14h],ax"
);
// LINE 859:
	asm( 
"	      00547a10    movsx eax,word ptr ds:[5B86A4h]"
"	      00547a17    add eax,eax"
"	      00547a19    mov [ebp-18h],ax"
);
// LINE 860:
	asm( 
"	      00547a1d    mov word ptr [ebp-0Ch],0"
"	      00547a23    jmp near ptr 00547A2Ch"
"	      00547a28    inc word ptr [ebp-0Ch]"
"	      00547a2c    movsx eax,word ptr [ebp-0Ch]"
"	      00547a30    movsx ecx,word ptr [ebp-18h]"
"	      00547a34    cmp eax,ecx"
"	      00547a36    jge near ptr 00547AB8h"
);
// LINE 861:
	asm( 
"	      00547a3c    movsx eax,word ptr [ebp-8]"
"	      00547a40    movsx ecx,word ptr [ebp-0Ch]"
"	      00547a44    add eax,ecx"
"	      00547a46    push eax"
"	      00547a47    mov eax,[ebp-6]"
"	      00547a4a    push eax"
"	      00547a4b    call 00547440h"
"	      00547a50    add esp,8"
);
// LINE 862:
	asm( 
"	      00547a53    movsx eax,word ptr [ebp-4]"
"	      00547a57    movsx ecx,word ptr [ebp-0Ch]"
"	      00547a5b    sub eax,ecx"
"	      00547a5d    push eax"
"	      00547a5e    mov eax,[ebp-2]"
"	      00547a61    push eax"
"	      00547a62    call 00547440h"
"	      00547a67    add esp,8"
);
// LINE 863:
	asm( 
"	      00547a6a    mov eax,[ebp-8]"
"	      00547a6d    push eax"
"	      00547a6e    movsx eax,word ptr [ebp-2]"
"	      00547a72    movsx ecx,word ptr [ebp-0Ch]"
"	      00547a76    sub eax,ecx"
"	      00547a78    push eax"
"	      00547a79    call 00547440h"
"	      00547a7e    add esp,8"
);
// LINE 864:
	asm( 
"	      00547a81    mov eax,[ebp-4]"
"	      00547a84    push eax"
"	      00547a85    movsx eax,word ptr [ebp-6]"
"	      00547a89    movsx ecx,word ptr [ebp-0Ch]"
"	      00547a8d    add eax,ecx"
"	      00547a8f    push eax"
"	      00547a90    call 00547440h"
"	      00547a95    add esp,8"
);
// LINE 865:
	asm( 
"	      00547a98    movsx eax,word ptr ds:[5B867Ch]"
"	      00547a9f    movsx ecx,word ptr ds:[5B8674h]"
"	      00547aa6    cmp eax,ecx"
"	      00547aa8    jge near ptr 00547AB3h"
);
// LINE 866:
	asm( 
"	      00547aae    jmp near ptr 00547ABDh"
);
// LINE 867:
	asm( 
"	      00547ab3    jmp near ptr 00547A28h"
);
// LINE 868:
	asm( 
"	      00547ab8    jmp near ptr 00547ABDh"
"	      00547abd    pop edi"
"	      00547abe    pop esi"
"	      00547abf    pop ebx"
"	      00547ac0    leave"
"	      00547ac1    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547ac2
void cYObject::BeamRemainingAmbients() {
// LINE 871:
	asm( 
"	      00547ac2    push ebp"
"	      00547ac3    mov ebp,esp"
"	      00547ac5    sub esp,14h"
"	      00547ac8    push ebx"
"	      00547ac9    push esi"
"	      00547aca    push edi"
);
// LINE 872:
	asm( 
"	      00547acb    mov word ptr [ebp-4],0"
);
// LINE 873:
	asm( 
"	      00547ad1    movsx eax,word ptr ds:[5B8678h]"
"	      00547ad8    movsx ecx,word ptr ds:[5B8674h]"
"	      00547adf    cmp eax,ecx"
"	      00547ae1    jle near ptr 00547C61h"
"	      00547ae7    mov ax,[ebp-4]"
"	      00547aeb    mov [ebp-10h],ax"
"	      00547aef    inc word ptr [ebp-4]"
"	      00547af3    movsx eax,word ptr [ebp-10h]"
"	      00547af7    cmp eax,1Eh"
"	      00547afa    jge near ptr 00547C61h"
);
// LINE 874:
	asm( 
"	      00547b00    mov ax,ds:[5B8674h]"
"	      00547b06    mov [ebp-8],ax"
);
// LINE 875:
	asm( 
"	      00547b0a    push 0"
"	      00547b0c    push 0"
"	      00547b0e    push 0FFFFFFFFh"
"	      00547b10    push 0FFFFFFFFh"
"	      00547b12    push 0FFFFFFFFh"
"	      00547b14    push 0"
"	      00547b16    push 0FFFFFFFFh"
"	      00547b18    call 0054A1D3h"
"	      00547b1d    add esp,1Ch"
"	      00547b20    mov [ebp-0Ch],ax"
"	      00547b24    jmp near ptr 00547B29h"
);
// LINE 876:
	asm( 
"	      00547b29    movsx eax,word ptr [ebp-0Ch]"
"	      00547b2d    cmp eax,0FFFFFFFFh"
"	      00547b30    je near ptr 00547C5Ch"
);
// LINE 877:
	asm( 
"	      00547b36    movsx eax,word ptr [ebp-0Ch]"
"	      00547b3a    test eax,eax"
"	      00547b3c    jl near ptr 00547B4Fh"
"	      00547b42    movsx eax,word ptr [ebp-0Ch]"
"	      00547b46    cmp eax,64h"
"	      00547b49    jl near ptr 00547B6Bh"
"	      00547b4f    push 8C085h"
"	      00547b54    push 5B8F0Ch"
"	      00547b59    push 36Dh"
"	      00547b5e    push 5B8F3Ch"
"	      00547b63    call 00554F30h"
"	      00547b68    add esp,10h"
);
// LINE 878:
	asm( 
"	      00547b6b    movsx eax,word ptr [ebp-8]"
"	      00547b6f    inc eax"
"	      00547b70    movsx ecx,word ptr ds:[5B8674h]"
"	      00547b77    cmp eax,ecx"
"	      00547b79    je near ptr 00547B9Bh"
"	      00547b7f    push 8C085h"
"	      00547b84    push 5B8F60h"
"	      00547b89    push 36Eh"
"	      00547b8e    push 5B8F68h"
"	      00547b93    call 00554F30h"
"	      00547b98    add esp,10h"
);
// LINE 879:
	asm( 
"	      00547b9b    movsx eax,word ptr [ebp-0Ch]"
"	      00547b9f    cmp eax,7D00h"
"	      00547ba4    jne near ptr 00547BBCh"
"	      00547baa    cmp dword ptr ds:[5B8680h],0"
"	      00547bb1    jne near ptr 00547C5Ch"
"	      00547bb7    jmp near ptr 00547C40h"
"	      00547bbc    movsx eax,word ptr [ebp-0Ch]"
"	      00547bc0    test eax,eax"
"	      00547bc2    jl near ptr 00547BD5h"
"	      00547bc8    movsx eax,word ptr [ebp-0Ch]"
"	      00547bcc    cmp eax,64h"
"	      00547bcf    jl near ptr 00547BF1h"
"	      00547bd5    push 8C085h"
"	      00547bda    push 5BB9F4h"
"	      00547bdf    push 204h"
"	      00547be4    push 5BBA14h"
"	      00547be9    call 00554F30h"
"	      00547bee    add esp,10h"
"	      00547bf1    movsx eax,word ptr [ebp-0Ch]"
"	      00547bf5    cmp dword ptr [eax*4+636D40h],0"
"	      00547bfd    jne near ptr 00547C1Fh"
"	      00547c03    push 8C085h"
"	      00547c08    push 5BB9D0h"
"	      00547c0d    push 205h"
"	      00547c12    push 5BBA14h"
"	      00547c17    call 00554F30h"
"	      00547c1c    add esp,10h"
"	      00547c1f    movsx eax,word ptr [ebp-0Ch]"
"	      00547c23    cmp dword ptr [eax*4+636D40h],0"
"	      00547c2b    jne near ptr 00547C5Ch"
"	      00547c31    jmp near ptr 00547C40h"
"	      00547c36    cmp dword ptr [ebp-14h],0"
"	      00547c3a    jne near ptr 00547C5Ch"
"	      00547c40    push 8C085h"
"	      00547c45    push 5B8F8Ch"
"	      00547c4a    push 36Fh"
"	      00547c4f    push 5B8FA8h"
"	      00547c54    call 00554F30h"
"	      00547c59    add esp,10h"
);
// LINE 884:
	asm( 
"	      00547c5c    jmp near ptr 00547AD1h"
);
// LINE 885:
	asm( 
"	      00547c61    jmp near ptr 00547C66h"
"	      00547c66    pop edi"
"	      00547c67    pop esi"
"	      00547c68    pop ebx"
"	      00547c69    leave"
"	      00547c6a    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547c6b
void cYObject::TryStartAllAmbient() {
// LINE 888:
	asm( 
"	      00547c6b    push ebp"
"	      00547c6c    mov ebp,esp"
"	      00547c6e    sub esp,4"
"	      00547c71    push ebx"
"	      00547c72    push esi"
"	      00547c73    push edi"
);
// LINE 890:
	asm( 
"	      00547c74    mov eax,0Ch"
"	      00547c79    movsx ecx,word ptr ds:[5B8688h]"
"	      00547c80    sub eax,ecx"
"	      00547c82    inc eax"
"	      00547c83    push eax"
"	      00547c84    call 0055D717h"
"	      00547c89    add esp,4"
"	      00547c8c    movzx eax,ax"
"	      00547c8f    cmp eax,3"
"	      00547c92    jge near ptr 00547CA2h"
"	      00547c98    jmp near ptr 00547CB9h"
"	      00547c9d    jmp near ptr 00547CACh"
"	      00547ca2    jmp near ptr 00547CBEh"
"	      00547ca7    jmp near ptr 00547CB9h"
"	      00547cac    test dword ptr [ebp-4],0FFFFh"
"	      00547cb3    je near ptr 00547CBEh"
);
// LINE 893:
	asm( 
"	      00547cb9    call 00547AC2h"
);
// LINE 895:
	asm( 
"	      00547cbe    jmp near ptr 00547CC3h"
"	      00547cc3    pop edi"
"	      00547cc4    pop esi"
"	      00547cc5    pop ebx"
"	      00547cc6    leave"
"	      00547cc7    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547cc8
class cYObject* cYObject::GetSleepingPerson() {
// LINE 898:
	asm( 
"	      00547cc8    push ebp"
"	      00547cc9    mov ebp,esp"
"	      00547ccb    sub esp,10h"
"	      00547cce    push ebx"
"	      00547ccf    push esi"
"	      00547cd0    push edi"
);
// LINE 899:
	asm( 
"	      00547cd1    mov dword ptr [ebp-0Ch],0"
);
// LINE 900:
	asm( 
"	      00547cd8    mov word ptr [ebp-8],0"
"	      00547cde    jmp near ptr 00547CE7h"
"	      00547ce3    inc word ptr [ebp-8]"
"	      00547ce7    movsx eax,word ptr [ebp-8]"
"	      00547ceb    cmp eax,64h"
"	      00547cee    jge near ptr 00547DD4h"
);
// LINE 901:
	asm( 
"	      00547cf4    movsx eax,word ptr [ebp-8]"
"	      00547cf8    cmp eax,7D00h"
"	      00547cfd    jne near ptr 00547D10h"
"	      00547d03    mov eax,ds:[5B8680h]"
"	      00547d08    mov [ebp-4],eax"
"	      00547d0b    jmp near ptr 00547D8Ch"
"	      00547d10    movsx eax,word ptr [ebp-8]"
"	      00547d14    test eax,eax"
"	      00547d16    jl near ptr 00547D29h"
"	      00547d1c    movsx eax,word ptr [ebp-8]"
"	      00547d20    cmp eax,64h"
"	      00547d23    jl near ptr 00547D45h"
"	      00547d29    push 8C085h"
"	      00547d2e    push 5BB9F4h"
"	      00547d33    push 204h"
"	      00547d38    push 5BBA14h"
"	      00547d3d    call 00554F30h"
"	      00547d42    add esp,10h"
"	      00547d45    movsx eax,word ptr [ebp-8]"
"	      00547d49    cmp dword ptr [eax*4+636D40h],0"
"	      00547d51    jne near ptr 00547D73h"
"	      00547d57    push 8C085h"
"	      00547d5c    push 5BB9D0h"
"	      00547d61    push 205h"
"	      00547d66    push 5BBA14h"
"	      00547d6b    call 00554F30h"
"	      00547d70    add esp,10h"
"	      00547d73    movsx eax,word ptr [ebp-8]"
"	      00547d77    mov eax,[eax*4+636D40h]"
"	      00547d7e    mov [ebp-4],eax"
"	      00547d81    jmp near ptr 00547D8Ch"
"	      00547d86    mov eax,[ebp-10h]"
"	      00547d89    mov [ebp-4],eax"
);
// LINE 902:
	asm( 
"	      00547d8c    cmp dword ptr [ebp-4],0"
"	      00547d90    jne near ptr 00547DB2h"
"	      00547d96    push 8C085h"
"	      00547d9b    push 5B8FCCh"
"	      00547da0    push 386h"
"	      00547da5    push 5B8FD4h"
"	      00547daa    call 00554F30h"
"	      00547daf    add esp,10h"
);
// LINE 903:
	asm( 
"	      00547db2    mov eax,[ebp-4]"
"	      00547db5    movsx eax,word ptr [eax+0D2h]"
"	      00547dbc    test eax,eax"
"	      00547dbe    jne near ptr 00547DCFh"
);
// LINE 904:
	asm( 
"	      00547dc4    mov eax,[ebp-4]"
"	      00547dc7    mov [ebp-0Ch],eax"
);
// LINE 905:
	asm( 
"	      00547dca    jmp near ptr 00547DD4h"
);
// LINE 907:
	asm( 
"	      00547dcf    jmp near ptr 00547CE3h"
);
// LINE 908:
	asm( 
"	      00547dd4    mov eax,[ebp-0Ch]"
"	      00547dd7    jmp near ptr 00547DDCh"
);
// LINE 909:
	asm( 
"	      00547ddc    pop edi"
"	      00547ddd    pop esi"
"	      00547dde    pop ebx"
"	      00547ddf    leave"
"	      00547de0    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547de1
void MakeAllPeople() {
// LINE 913:
	asm( 
"	      00547de1    push ebp"
"	      00547de2    mov ebp,esp"
"	      00547de4    sub esp,114h"
"	      00547dea    push ebx"
"	      00547deb    push esi"
"	      00547dec    push edi"
);
// LINE 915:
	asm( 
"	      00547ded    lea eax,[ebp-114h]"
"	      00547df3    push eax"
"	      00547df4    call dword ptr ds:[6C3790h]"
);
// LINE 916:
	asm( 
"	      00547dfa    mov eax,[ebp-108h]"
"	      00547e00    and eax,0FFFFh"
"	      00547e05    xor ecx,ecx"
"	      00547e07    mov cx,[ebp-106h]"
"	      00547e0e    add eax,ecx"
"	      00547e10    push eax"
"	      00547e11    call 0055D52Dh"
"	      00547e16    add esp,4"
);
// LINE 919:
	asm( 
"	      00547e19    lea eax,[ebp-104h]"
"	      00547e1f    push eax"
"	      00547e20    push 5B8FF8h"
"	      00547e25    push 0"
"	      00547e27    push 0Ah"
"	      00547e29    call 0049172Bh"
"	      00547e2e    add esp,10h"
);
// LINE 920:
	asm( 
"	      00547e31    lea eax,[ebp-104h]"
"	      00547e37    push eax"
"	      00547e38    call 00548047h"
"	      00547e3d    add esp,4"
);
// LINE 921:
	asm( 
"	      00547e40    call 00547E9Bh"
);
// LINE 923:
	asm( 
"	      00547e45    call 005508A3h"
"	      00547e4a    mov ds:[5B8680h],eax"
);
// LINE 926:
	asm( 
"	      00547e4f    jmp near ptr 00547E54h"
"	      00547e54    pop edi"
"	      00547e55    pop esi"
"	      00547e56    pop ebx"
"	      00547e57    leave"
"	      00547e58    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547e59
void DeleteAllPeople() {
// LINE 929:
	asm( 
"	      00547e59    push ebp"
"	      00547e5a    mov ebp,esp"
"	      00547e5c    sub esp,8"
"	      00547e5f    push ebx"
"	      00547e60    push esi"
"	      00547e61    push edi"
);
// LINE 930:
	asm( 
"	      00547e62    mov eax,ds:[5B8680h]"
"	      00547e67    mov [ebp-8],eax"
"	      00547e6a    mov eax,[ebp-8]"
"	      00547e6d    mov [ebp-4],eax"
"	      00547e70    cmp dword ptr [ebp-4],0"
"	      00547e74    je near ptr 00547E8Ch"
"	      00547e7a    push 1"
"	      00547e7c    mov eax,[ebp-4]"
"	      00547e7f    mov eax,[eax]"
"	      00547e81    mov ecx,[ebp-4]"
"	      00547e84    call dword ptr [eax+8]"
"	      00547e87    jmp near ptr 00547E8Ch"
);
// LINE 931:
	asm( 
"	      00547e8c    call 00550567h"
);
// LINE 932:
	asm( 
"	      00547e91    jmp near ptr 00547E96h"
"	      00547e96    pop edi"
"	      00547e97    pop esi"
"	      00547e98    pop ebx"
"	      00547e99    leave"
"	      00547e9a    ret"
);
}

// FUNCTION: SIMCOPTER 0x00547e9b
void cYObject::MakePlebes() {
// LINE 944:
	asm( 
"	      00547e9b    push ebp"
"	      00547e9c    mov ebp,esp"
"	      00547e9e    sub esp,1Ch"
"	      00547ea1    push ebx"
"	      00547ea2    push esi"
"	      00547ea3    push edi"
);
// LINE 947:
	asm( 
"	      00547ea4    mov dword ptr [ebp-0Ch],0"
"	      00547eab    mov dword ptr [ebp-8],0"
"	      00547eb2    mov dword ptr [ebp-4],0"
);
// LINE 950:
	asm( 
"	      00547eb9    mov dword ptr [ebp-10h],0"
"	      00547ec0    jmp near ptr 00547EC8h"
"	      00547ec5    inc dword ptr [ebp-10h]"
"	      00547ec8    cmp dword ptr [ebp-10h],64h"
"	      00547ecc    jge near ptr 0054803Dh"
);
// LINE 952:
	asm( 
"	      00547ed2    mov eax,ds:[636B8Ch]"
"	      00547ed7    push eax"
"	      00547ed8    mov eax,[ebp-4]"
"	      00547edb    push eax"
"	      00547edc    mov eax,[ebp-8]"
"	      00547edf    push eax"
"	      00547ee0    mov eax,[ebp-0Ch]"
"	      00547ee3    push eax"
"	      00547ee4    push 0"
"	      00547ee6    call 005509CBh"
"	      00547eeb    add esp,14h"
"	      00547eee    movsx eax,ax"
"	      00547ef1    mov [ebp-14h],eax"
);
// LINE 954:
	asm( 
"	      00547ef4    movsx eax,word ptr [ebp-14h]"
"	      00547ef8    cmp eax,7D00h"
"	      00547efd    jne near ptr 00547F10h"
"	      00547f03    mov eax,ds:[5B8680h]"
"	      00547f08    mov [ebp-18h],eax"
"	      00547f0b    jmp near ptr 00547F8Ch"
"	      00547f10    movsx eax,word ptr [ebp-14h]"
"	      00547f14    test eax,eax"
"	      00547f16    jl near ptr 00547F29h"
"	      00547f1c    movsx eax,word ptr [ebp-14h]"
"	      00547f20    cmp eax,64h"
"	      00547f23    jl near ptr 00547F45h"
"	      00547f29    push 8C085h"
"	      00547f2e    push 5BB9F4h"
"	      00547f33    push 204h"
"	      00547f38    push 5BBA14h"
"	      00547f3d    call 00554F30h"
"	      00547f42    add esp,10h"
"	      00547f45    movsx eax,word ptr [ebp-14h]"
"	      00547f49    cmp dword ptr [eax*4+636D40h],0"
"	      00547f51    jne near ptr 00547F73h"
"	      00547f57    push 8C085h"
"	      00547f5c    push 5BB9D0h"
"	      00547f61    push 205h"
"	      00547f66    push 5BBA14h"
"	      00547f6b    call 00554F30h"
"	      00547f70    add esp,10h"
"	      00547f73    movsx eax,word ptr [ebp-14h]"
"	      00547f77    mov eax,[eax*4+636D40h]"
"	      00547f7e    mov [ebp-18h],eax"
"	      00547f81    jmp near ptr 00547F8Ch"
"	      00547f86    mov eax,[ebp-1Ch]"
"	      00547f89    mov [ebp-18h],eax"
);
// LINE 955:
	asm( 
"	      00547f8c    cmp dword ptr [ebp-18h],0"
"	      00547f90    jne near ptr 00547FB2h"
"	      00547f96    push 8C085h"
"	      00547f9b    push 5B9004h"
"	      00547fa0    push 3BBh"
"	      00547fa5    push 5B9010h"
"	      00547faa    call 00554F30h"
"	      00547faf    add esp,10h"
);
// LINE 956:
	asm( 
"	      00547fb2    mov eax,[ebp-18h]"
"	      00547fb5    movsx eax,word ptr [eax+0BCh]"
"	      00547fbc    cmp eax,[ebp-14h]"
"	      00547fbf    je near ptr 00547FE1h"
"	      00547fc5    push 8C085h"
"	      00547fca    push 5B9034h"
"	      00547fcf    push 3BCh"
"	      00547fd4    push 5B903Ch"
"	      00547fd9    call 00554F30h"
"	      00547fde    add esp,10h"
);
// LINE 957:
	asm( 
"	      00547fe1    mov eax,[ebp-18h]"
"	      00547fe4    movsx eax,word ptr [eax+0DEh]"
"	      00547feb    cmp eax,[ebp-14h]"
"	      00547fee    je near ptr 00548010h"
"	      00547ff4    push 8C085h"
"	      00547ff9    push 5B9060h"
"	      00547ffe    push 3BDh"
"	      00548003    push 5B9068h"
"	      00548008    call 00554F30h"
"	      0054800d    add esp,10h"
);
// LINE 959:
	asm( 
"	      00548010    mov eax,[ebp-10h]"
"	      00548013    cmp [ebp-14h],eax"
"	      00548016    je near ptr 00548038h"
"	      0054801c    push 8C085h"
"	      00548021    push 5B908Ch"
"	      00548026    push 3BFh"
"	      0054802b    push 5B9094h"
"	      00548030    call 00554F30h"
"	      00548035    add esp,10h"
);
// LINE 960:
	asm( 
"	      00548038    jmp near ptr 00547EC5h"
);
// LINE 961:
	asm( 
"	      0054803d    jmp near ptr 00548042h"
"	      00548042    pop edi"
"	      00548043    pop esi"
"	      00548044    pop ebx"
"	      00548045    leave"
"	      00548046    ret"
);
}

// FUNCTION: SIMCOPTER 0x00548047
void cYObject::InitObjects(char *) {
// LINE 964:
	asm( 
"	      00548047    push ebp"
"	      00548048    mov ebp,esp"
"	      0054804a    push 0FFFFFFFFh"
"	      0054804c    push 549BC5h"
"	      00548051    mov eax,fs:[0]"
"	      00548057    push eax"
"	      00548058    mov fs:[0],esp"
"	      0054805f    sub esp,24h"
"	      00548062    push ebx"
"	      00548063    push esi"
"	      00548064    push edi"
);
// LINE 965:
	asm( 
"	      00548065    xor eax,eax"
"	      00548067    mov ax,ds:[5B8668h]"
"	      0054806d    test eax,eax"
"	      0054806f    jne near ptr 00549BA6h"
);
// LINE 967:
	asm( 
"	      00548075    mov dword ptr ds:[636CE0h],0"
);
// LINE 968:
	asm( 
"	      0054807f    mov dword ptr ds:[636CE8h],0FFFF0000h"
);
// LINE 970:
	asm( 
"	      00548089    mov dword ptr ds:[636CECh],0B504h"
);
// LINE 971:
	asm( 
"	      00548093    mov dword ptr ds:[636CF4h],0FFFF4AFCh"
);
// LINE 973:
	asm( 
"	      0054809d    mov dword ptr ds:[636CF8h],10000h"
);
// LINE 974:
	asm( 
"	      005480a7    mov dword ptr ds:[636D00h],0"
);
// LINE 976:
	asm( 
"	      005480b1    mov dword ptr ds:[636D04h],0B504h"
);
// LINE 977:
	asm( 
"	      005480bb    mov dword ptr ds:[636D0Ch],0B504h"
);
// LINE 979:
	asm( 
"	      005480c5    mov dword ptr ds:[636D10h],0"
);
// LINE 980:
	asm( 
"	      005480cf    mov dword ptr ds:[636D18h],10000h"
);
// LINE 982:
	asm( 
"	      005480d9    mov dword ptr ds:[636D1Ch],0FFFF4AFCh"
);
// LINE 983:
	asm( 
"	      005480e3    mov dword ptr ds:[636D24h],0B504h"
);
// LINE 985:
	asm( 
"	      005480ed    mov dword ptr ds:[636D28h],0FFFF0000h"
);
// LINE 986:
	asm( 
"	      005480f7    mov dword ptr ds:[636D30h],0"
);
// LINE 988:
	asm( 
"	      00548101    mov dword ptr ds:[636D34h],0FFFF4AFCh"
);
// LINE 989:
	asm( 
"	      0054810b    mov dword ptr ds:[636D3Ch],0FFFF4AFCh"
);
// LINE 992:
	asm( 
"	      00548115    mov word ptr [ebp-10h],0"
"	      0054811b    jmp near ptr 00548124h"
"	      00548120    inc word ptr [ebp-10h]"
"	      00548124    movsx eax,word ptr [ebp-10h]"
"	      00548128    cmp eax,8"
"	      0054812b    jge near ptr 00548148h"
);
// LINE 993:
	asm( 
"	      00548131    movsx eax,word ptr [ebp-10h]"
"	      00548135    lea eax,[eax+eax*2]"
"	      00548138    mov dword ptr [eax*4+636CE4h],0"
"	      00548143    jmp near ptr 00548120h"
);
// LINE 995:
	asm( 
"	      00548148    mov word ptr [ebp-10h],0"
"	      0054814e    jmp near ptr 00548157h"
"	      00548153    inc word ptr [ebp-10h]"
"	      00548157    movsx eax,word ptr [ebp-10h]"
"	      0054815b    cmp eax,8"
"	      0054815e    jge near ptr 005481E7h"
);
// LINE 996:
	asm( 
"	      00548164    push 0C0000h"
"	      00548169    movsx eax,word ptr [ebp-10h]"
"	      0054816d    lea eax,[eax+eax*2]"
"	      00548170    mov eax,[eax*4+636CE0h]"
"	      00548177    push eax"
"	      00548178    call 004D19DFh"
"	      0054817d    add esp,8"
"	      00548180    movsx ecx,word ptr [ebp-10h]"
"	      00548184    lea ecx,[ecx+ecx*2]"
"	      00548187    mov [ecx*4+635530h],eax"
);
// LINE 997:
	asm( 
"	      0054818e    push 0C0000h"
"	      00548193    movsx eax,word ptr [ebp-10h]"
"	      00548197    lea eax,[eax+eax*2]"
"	      0054819a    mov eax,[eax*4+636CE8h]"
"	      005481a1    push eax"
"	      005481a2    call 004D19DFh"
"	      005481a7    add esp,8"
"	      005481aa    movsx ecx,word ptr [ebp-10h]"
"	      005481ae    lea ecx,[ecx+ecx*2]"
"	      005481b1    mov [ecx*4+635538h],eax"
);
// LINE 998:
	asm( 
"	      005481b8    push 0C0000h"
"	      005481bd    movsx eax,word ptr [ebp-10h]"
"	      005481c1    lea eax,[eax+eax*2]"
"	      005481c4    mov eax,[eax*4+636CE4h]"
"	      005481cb    push eax"
"	      005481cc    call 004D19DFh"
"	      005481d1    add esp,8"
"	      005481d4    movsx ecx,word ptr [ebp-10h]"
"	      005481d8    lea ecx,[ecx+ecx*2]"
"	      005481db    mov [ecx*4+635534h],eax"
);
// LINE 999:
	asm( 
"	      005481e2    jmp near ptr 00548153h"
);
// LINE 1003:
	asm( 
"	      005481e7    mov word ptr ds:[6361C0h],0Ah"
);
// LINE 1005:
	asm( 
"	      005481f0    mov word ptr [ebp-10h],0"
"	      005481f6    jmp near ptr 005481FFh"
"	      005481fb    inc word ptr [ebp-10h]"
"	      005481ff    movsx eax,word ptr [ebp-10h]"
"	      00548203    cmp eax,0Eh"
"	      00548206    jge near ptr 00548360h"
);
// LINE 1006:
	asm( 
"	      0054820c    movsx eax,word ptr [ebp-10h]"
"	      00548210    mov [ebp-28h],eax"
"	      00548213    jmp near ptr 00548314h"
);
// LINE 1008:
	asm( 
"	      00548218    movsx eax,word ptr [ebp-10h]"
"	      0054821c    mov word ptr [eax*2+636B98h],352h"
"	      00548226    jmp near ptr 0054835Bh"
);
// LINE 1010:
	asm( 
"	      0054822b    movsx eax,word ptr [ebp-10h]"
"	      0054822f    mov word ptr [eax*2+636B98h],2BCh"
"	      00548239    jmp near ptr 0054835Bh"
);
// LINE 1012:
	asm( 
"	      0054823e    movsx eax,word ptr [ebp-10h]"
"	      00548242    mov word ptr [eax*2+636B98h],2BCh"
"	      0054824c    jmp near ptr 0054835Bh"
);
// LINE 1014:
	asm( 
"	      00548251    movsx eax,word ptr [ebp-10h]"
"	      00548255    mov word ptr [eax*2+636B98h],2EEh"
"	      0054825f    jmp near ptr 0054835Bh"
);
// LINE 1016:
	asm( 
"	      00548264    movsx eax,word ptr [ebp-10h]"
"	      00548268    mov word ptr [eax*2+636B98h],320h"
"	      00548272    jmp near ptr 0054835Bh"
);
// LINE 1018:
	asm( 
"	      00548277    movsx eax,word ptr [ebp-10h]"
"	      0054827b    mov word ptr [eax*2+636B98h],321h"
"	      00548285    jmp near ptr 0054835Bh"
);
// LINE 1022:
	asm( 
"	      0054828a    movsx eax,word ptr [ebp-10h]"
"	      0054828e    mov word ptr [eax*2+636B98h],325h"
"	      00548298    jmp near ptr 0054835Bh"
);
// LINE 1024:
	asm( 
"	      0054829d    movsx eax,word ptr [ebp-10h]"
"	      005482a1    mov word ptr [eax*2+636B98h],514h"
"	      005482ab    jmp near ptr 0054835Bh"
);
// LINE 1026:
	asm( 
"	      005482b0    movsx eax,word ptr [ebp-10h]"
"	      005482b4    mov word ptr [eax*2+636B98h],515h"
"	      005482be    jmp near ptr 0054835Bh"
);
// LINE 1028:
	asm( 
"	      005482c3    movsx eax,word ptr [ebp-10h]"
"	      005482c7    mov word ptr [eax*2+636B98h],516h"
"	      005482d1    jmp near ptr 0054835Bh"
);
// LINE 1030:
	asm( 
"	      005482d6    movsx eax,word ptr [ebp-10h]"
"	      005482da    mov word ptr [eax*2+636B98h],578h"
"	      005482e4    jmp near ptr 0054835Bh"
);
// LINE 1032:
	asm( 
"	      005482e9    movsx eax,word ptr [ebp-10h]"
"	      005482ed    mov word ptr [eax*2+636B98h],579h"
"	      005482f7    jmp near ptr 0054835Bh"
);
// LINE 1034:
	asm( 
"	      005482fc    movsx eax,word ptr [ebp-10h]"
"	      00548300    mov word ptr [eax*2+636B98h],258h"
"	      0054830a    jmp near ptr 0054835Bh"
);
// LINE 1035:
	asm( 
"	      0054830f    jmp near ptr 0054835Bh"
"	      00548314    dec dword ptr [ebp-28h]"
"	      00548317    cmp dword ptr [ebp-28h],0Bh"
"	      0054831b    ja near ptr 005482FCh"
"	      00548321    mov eax,[ebp-28h]"
"	      00548324    jmp dword ptr [eax*4+54832Bh]"
"	      0054832b    sub eax,[edx-7DC1FFACh]"
"	      00548331    push esp"
"	      00548332    add [eax],bl"
"	      00548334    adc byte ptr [eax+eax+51h],82h"
"	      00548339    push esp"
"	      0054833a    add [edi-7Eh],dh"
"	      0054833d    push esp"
"	      0054833e    add [edx+eax*4+54h],ah"
"	      00548342    add dh,dl"
"	      00548344    adc byte ptr [eax+eax-17h],82h"
"	      00548349    push esp"
"	      0054834a    add [edx-62FFAB7Eh],cl"
"	      00548350    adc byte ptr [eax+eax-50h],82h"
"	      00548355    push esp"
"	      00548356    add bl,al"
"	      00548358    (bad)"
);
// LINE 1036:
	asm( 
"	      0054835b    jmp near ptr 005481FBh"
);
// LINE 1039:
	asm( 
"	      00548360    mov word ptr [ebp-10h],0"
"	      00548366    jmp near ptr 0054836Fh"
"	      0054836b    inc word ptr [ebp-10h]"
"	      0054836f    movsx eax,word ptr [ebp-10h]"
"	      00548373    cmp eax,14h"
"	      00548376    jge near ptr 005483C9h"
);
// LINE 1040:
	asm( 
"	      0054837c    movsx eax,word ptr [ebp-10h]"
"	      00548380    test eax,eax"
"	      00548382    jl near ptr 00548395h"
"	      00548388    movsx eax,word ptr [ebp-10h]"
"	      0054838c    cmp eax,14h"
"	      0054838f    jl near ptr 005483B1h"
"	      00548395    push 8C085h"
"	      0054839a    push 5BBB18h"
"	      0054839f    push 129h"
"	      005483a4    push 5BBA14h"
"	      005483a9    call 00554F30h"
"	      005483ae    add esp,10h"
"	      005483b1    movsx eax,word ptr [ebp-10h]"
"	      005483b5    mov word ptr [eax*2+6352D8h],0FFFFh"
"	      005483bf    jmp near ptr 005483C4h"
);
// LINE 1041:
	asm( 
"	      005483c4    jmp near ptr 0054836Bh"
);
// LINE 1043:
	asm( 
"	      005483c9    jmp near ptr 005483EAh"
"	      005483ce    push 8C085h"
"	      005483d3    push 5BBB18h"
"	      005483d8    push 129h"
"	      005483dd    push 5BBA14h"
"	      005483e2    call 00554F30h"
"	      005483e7    add esp,10h"
"	      005483ea    mov word ptr ds:[6352DAh],384h"
"	      005483f3    jmp near ptr 005483F8h"
);
// LINE 1046:
	asm( 
"	      005483f8    jmp near ptr 00548419h"
"	      005483fd    push 8C085h"
"	      00548402    push 5BBB18h"
"	      00548407    push 129h"
"	      0054840c    push 5BBA14h"
"	      00548411    call 00554F30h"
"	      00548416    add esp,10h"
"	      00548419    mov word ptr ds:[6352DCh],385h"
"	      00548422    jmp near ptr 00548427h"
);
// LINE 1047:
	asm( 
"	      00548427    jmp near ptr 00548448h"
"	      0054842c    push 8C085h"
"	      00548431    push 5BBB18h"
"	      00548436    push 129h"
"	      0054843b    push 5BBA14h"
"	      00548440    call 00554F30h"
"	      00548445    add esp,10h"
"	      00548448    mov word ptr ds:[6352D8h],386h"
"	      00548451    jmp near ptr 00548456h"
);
// LINE 1048:
	asm( 
"	      00548456    jmp near ptr 00548477h"
"	      0054845b    push 8C085h"
"	      00548460    push 5BBB18h"
"	      00548465    push 129h"
"	      0054846a    push 5BBA14h"
"	      0054846f    call 00554F30h"
"	      00548474    add esp,10h"
"	      00548477    mov word ptr ds:[6352DEh],387h"
"	      00548480    jmp near ptr 00548485h"
);
// LINE 1049:
	asm( 
"	      00548485    jmp near ptr 005484A6h"
"	      0054848a    push 8C085h"
"	      0054848f    push 5BBB18h"
"	      00548494    push 129h"
"	      00548499    push 5BBA14h"
"	      0054849e    call 00554F30h"
"	      005484a3    add esp,10h"
"	      005484a6    mov word ptr ds:[6352E0h],388h"
"	      005484af    jmp near ptr 005484B4h"
);
// LINE 1050:
	asm( 
"	      005484b4    jmp near ptr 005484D5h"
"	      005484b9    push 8C085h"
"	      005484be    push 5BBB18h"
"	      005484c3    push 129h"
"	      005484c8    push 5BBA14h"
"	      005484cd    call 00554F30h"
"	      005484d2    add esp,10h"
"	      005484d5    mov word ptr ds:[6352E2h],389h"
"	      005484de    jmp near ptr 005484E3h"
);
// LINE 1051:
	asm( 
"	      005484e3    jmp near ptr 00548504h"
"	      005484e8    push 8C085h"
"	      005484ed    push 5BBB18h"
"	      005484f2    push 129h"
"	      005484f7    push 5BBA14h"
"	      005484fc    call 00554F30h"
"	      00548501    add esp,10h"
"	      00548504    mov word ptr ds:[6352E4h],387h"
"	      0054850d    jmp near ptr 00548512h"
);
// LINE 1052:
	asm( 
"	      00548512    jmp near ptr 00548533h"
"	      00548517    push 8C085h"
"	      0054851c    push 5BBB18h"
"	      00548521    push 129h"
"	      00548526    push 5BBA14h"
"	      0054852b    call 00554F30h"
"	      00548530    add esp,10h"
"	      00548533    mov word ptr ds:[6352E6h],38Ah"
"	      0054853c    jmp near ptr 00548541h"
);
// LINE 1053:
	asm( 
"	      00548541    jmp near ptr 00548562h"
"	      00548546    push 8C085h"
"	      0054854b    push 5BBB18h"
"	      00548550    push 129h"
"	      00548555    push 5BBA14h"
"	      0054855a    call 00554F30h"
"	      0054855f    add esp,10h"
"	      00548562    mov word ptr ds:[6352E8h],38Ah"
"	      0054856b    jmp near ptr 00548570h"
);
// LINE 1054:
	asm( 
"	      00548570    jmp near ptr 00548591h"
"	      00548575    push 8C085h"
"	      0054857a    push 5BBB18h"
"	      0054857f    push 129h"
"	      00548584    push 5BBA14h"
"	      00548589    call 00554F30h"
"	      0054858e    add esp,10h"
"	      00548591    mov word ptr ds:[6352EAh],387h"
"	      0054859a    jmp near ptr 0054859Fh"
);
// LINE 1055:
	asm( 
"	      0054859f    jmp near ptr 005485C0h"
"	      005485a4    push 8C085h"
"	      005485a9    push 5BBB18h"
"	      005485ae    push 129h"
"	      005485b3    push 5BBA14h"
"	      005485b8    call 00554F30h"
"	      005485bd    add esp,10h"
"	      005485c0    mov word ptr ds:[6352ECh],387h"
"	      005485c9    jmp near ptr 005485CEh"
);
// LINE 1056:
	asm( 
"	      005485ce    jmp near ptr 005485EFh"
"	      005485d3    push 8C085h"
"	      005485d8    push 5BBB18h"
"	      005485dd    push 129h"
"	      005485e2    push 5BBA14h"
"	      005485e7    call 00554F30h"
"	      005485ec    add esp,10h"
"	      005485ef    mov word ptr ds:[6352EEh],38Ah"
"	      005485f8    jmp near ptr 005485FDh"
);
// LINE 1057:
	asm( 
"	      005485fd    jmp near ptr 0054861Eh"
"	      00548602    push 8C085h"
"	      00548607    push 5BBB18h"
"	      0054860c    push 129h"
"	      00548611    push 5BBA14h"
"	      00548616    call 00554F30h"
"	      0054861b    add esp,10h"
"	      0054861e    mov word ptr ds:[6352F0h],38Ah"
"	      00548627    jmp near ptr 0054862Ch"
);
// LINE 1058:
	asm( 
"	      0054862c    jmp near ptr 0054864Dh"
"	      00548631    push 8C085h"
"	      00548636    push 5BBB18h"
"	      0054863b    push 129h"
"	      00548640    push 5BBA14h"
"	      00548645    call 00554F30h"
"	      0054864a    add esp,10h"
"	      0054864d    mov word ptr ds:[6352F2h],0FFFFh"
"	      00548656    jmp near ptr 0054865Bh"
);
// LINE 1059:
	asm( 
"	      0054865b    jmp near ptr 0054867Ch"
"	      00548660    push 8C085h"
"	      00548665    push 5BBB18h"
"	      0054866a    push 129h"
"	      0054866f    push 5BBA14h"
"	      00548674    call 00554F30h"
"	      00548679    add esp,10h"
"	      0054867c    mov word ptr ds:[6352F4h],386h"
"	      00548685    jmp near ptr 0054868Ah"
);
// LINE 1060:
	asm( 
"	      0054868a    jmp near ptr 005486ABh"
"	      0054868f    push 8C085h"
"	      00548694    push 5BBB18h"
"	      00548699    push 129h"
"	      0054869e    push 5BBA14h"
"	      005486a3    call 00554F30h"
"	      005486a8    add esp,10h"
"	      005486ab    mov word ptr ds:[6352F6h],386h"
"	      005486b4    jmp near ptr 005486B9h"
);
// LINE 1061:
	asm( 
"	      005486b9    jmp near ptr 005486DAh"
"	      005486be    push 8C085h"
"	      005486c3    push 5BBB18h"
"	      005486c8    push 129h"
"	      005486cd    push 5BBA14h"
"	      005486d2    call 00554F30h"
"	      005486d7    add esp,10h"
"	      005486da    mov word ptr ds:[6352F8h],387h"
"	      005486e3    jmp near ptr 005486E8h"
);
// LINE 1069:
	asm( 
"	      005486e8    mov word ptr [ebp-10h],0"
"	      005486ee    jmp near ptr 005486F7h"
"	      005486f3    inc word ptr [ebp-10h]"
"	      005486f7    movsx eax,word ptr [ebp-10h]"
"	      005486fb    cmp eax,0Eh"
"	      005486fe    jge near ptr 00548958h"
);
// LINE 1070:
	asm( 
"	      00548704    movsx eax,word ptr [ebp-10h]"
"	      00548708    mov [ebp-2Ch],eax"
"	      0054870b    jmp near ptr 00548928h"
);
// LINE 1080:
	asm( 
"	      00548710    movsx eax,word ptr [ebp-10h]"
"	      00548714    lea eax,[eax+eax*4]"
"	      00548717    mov dword ptr [eax*8+635300h],2"
);
// LINE 1081:
	asm( 
"	      00548722    mov word ptr [ebp-14h],1"
"	      00548728    jmp near ptr 00548731h"
"	      0054872d    inc word ptr [ebp-14h]"
"	      00548731    movsx eax,word ptr [ebp-14h]"
"	      00548735    cmp eax,0Ah"
"	      00548738    jge near ptr 0054875Ch"
"	      0054873e    movsx eax,word ptr [ebp-10h]"
"	      00548742    lea eax,[eax+eax*4]"
"	      00548745    movsx ecx,word ptr [ebp-14h]"
"	      00548749    shl ecx,2"
"	      0054874c    mov dword ptr [ecx+eax*8+635300h],0"
"	      00548757    jmp near ptr 0054872Dh"
);
// LINE 1082:
	asm( 
"	      0054875c    jmp near ptr 00548953h"
);
// LINE 1084:
	asm( 
"	      00548761    movsx eax,word ptr [ebp-10h]"
"	      00548765    lea eax,[eax+eax*4]"
"	      00548768    mov dword ptr [eax*8+635300h],0Dh"
);
// LINE 1085:
	asm( 
"	      00548773    movsx eax,word ptr [ebp-10h]"
"	      00548777    lea eax,[eax+eax*4]"
"	      0054877a    mov dword ptr [eax*8+635304h],0Bh"
);
// LINE 1086:
	asm( 
"	      00548785    movsx eax,word ptr [ebp-10h]"
"	      00548789    lea eax,[eax+eax*4]"
"	      0054878c    mov dword ptr [eax*8+635308h],0Ah"
);
// LINE 1087:
	asm( 
"	      00548797    movsx eax,word ptr [ebp-10h]"
"	      0054879b    lea eax,[eax+eax*4]"
"	      0054879e    mov dword ptr [eax*8+63530Ch],0Ch"
);
// LINE 1088:
	asm( 
"	      005487a9    mov word ptr [ebp-14h],4"
"	      005487af    jmp near ptr 005487B8h"
"	      005487b4    inc word ptr [ebp-14h]"
"	      005487b8    movsx eax,word ptr [ebp-14h]"
"	      005487bc    cmp eax,0Ah"
"	      005487bf    jge near ptr 005487E3h"
"	      005487c5    movsx eax,word ptr [ebp-10h]"
"	      005487c9    lea eax,[eax+eax*4]"
"	      005487cc    movsx ecx,word ptr [ebp-14h]"
"	      005487d0    shl ecx,2"
"	      005487d3    mov dword ptr [ecx+eax*8+635300h],0"
"	      005487de    jmp near ptr 005487B4h"
);
// LINE 1089:
	asm( 
"	      005487e3    jmp near ptr 00548953h"
);
// LINE 1092:
	asm( 
"	      005487e8    movsx eax,word ptr [ebp-10h]"
"	      005487ec    lea eax,[eax+eax*4]"
"	      005487ef    mov dword ptr [eax*8+635304h],7"
);
// LINE 1094:
	asm( 
"	      005487fa    mov word ptr [ebp-14h],3"
"	      00548800    jmp near ptr 00548809h"
"	      00548805    inc word ptr [ebp-14h]"
"	      00548809    movsx eax,word ptr [ebp-14h]"
"	      0054880d    cmp eax,0Ah"
"	      00548810    jge near ptr 00548834h"
"	      00548816    movsx eax,word ptr [ebp-10h]"
"	      0054881a    lea eax,[eax+eax*4]"
"	      0054881d    movsx ecx,word ptr [ebp-14h]"
"	      00548821    shl ecx,2"
"	      00548824    mov dword ptr [ecx+eax*8+635300h],0"
"	      0054882f    jmp near ptr 00548805h"
);
// LINE 1095:
	asm( 
"	      00548834    jmp near ptr 00548953h"
);
// LINE 1097:
	asm( 
"	      00548839    movsx eax,word ptr [ebp-10h]"
"	      0054883d    lea eax,[eax+eax*4]"
"	      00548840    mov dword ptr [eax*8+635300h],0Ch"
);
// LINE 1098:
	asm( 
"	      0054884b    mov word ptr [ebp-14h],1"
"	      00548851    jmp near ptr 0054885Ah"
"	      00548856    inc word ptr [ebp-14h]"
"	      0054885a    movsx eax,word ptr [ebp-14h]"
"	      0054885e    cmp eax,0Ah"
"	      00548861    jge near ptr 00548885h"
"	      00548867    movsx eax,word ptr [ebp-10h]"
"	      0054886b    lea eax,[eax+eax*4]"
"	      0054886e    movsx ecx,word ptr [ebp-14h]"
"	      00548872    shl ecx,2"
"	      00548875    mov dword ptr [ecx+eax*8+635300h],0"
"	      00548880    jmp near ptr 00548856h"
);
// LINE 1099:
	asm( 
"	      00548885    jmp near ptr 00548953h"
);
// LINE 1108:
	asm( 
"	      0054888a    movsx eax,word ptr [ebp-10h]"
"	      0054888e    lea eax,[eax+eax*4]"
"	      00548891    mov dword ptr [eax*8+635300h],0Dh"
);
// LINE 1109:
	asm( 
"	      0054889c    movsx eax,word ptr [ebp-10h]"
"	      005488a0    lea eax,[eax+eax*4]"
"	      005488a3    mov dword ptr [eax*8+635304h],0Bh"
);
// LINE 1110:
	asm( 
"	      005488ae    movsx eax,word ptr [ebp-10h]"
"	      005488b2    lea eax,[eax+eax*4]"
"	      005488b5    mov dword ptr [eax*8+635308h],0Ah"
);
// LINE 1111:
	asm( 
"	      005488c0    movsx eax,word ptr [ebp-10h]"
"	      005488c4    lea eax,[eax+eax*4]"
"	      005488c7    mov dword ptr [eax*8+63530Ch],0Ch"
);
// LINE 1112:
	asm( 
"	      005488d2    movsx eax,word ptr [ebp-10h]"
"	      005488d6    lea eax,[eax+eax*4]"
"	      005488d9    mov dword ptr [eax*8+635310h],7"
);
// LINE 1113:
	asm( 
"	      005488e4    mov word ptr [ebp-14h],5"
"	      005488ea    jmp near ptr 005488F3h"
"	      005488ef    inc word ptr [ebp-14h]"
"	      005488f3    movsx eax,word ptr [ebp-14h]"
"	      005488f7    cmp eax,0Ah"
"	      005488fa    jge near ptr 0054891Eh"
"	      00548900    movsx eax,word ptr [ebp-10h]"
"	      00548904    lea eax,[eax+eax*4]"
"	      00548907    movsx ecx,word ptr [ebp-14h]"
"	      0054890b    shl ecx,2"
"	      0054890e    mov dword ptr [ecx+eax*8+635300h],0"
"	      00548919    jmp near ptr 005488EFh"
);
// LINE 1114:
	asm( 
"	      0054891e    jmp near ptr 00548953h"
);
// LINE 1116:
	asm( 
"	      00548923    jmp near ptr 00548953h"
"	      00548928    dec dword ptr [ebp-2Ch]"
"	      0054892b    cmp dword ptr [ebp-2Ch],4"
"	      0054892f    ja near ptr 0054888Ah"
"	      00548935    mov eax,[ebp-2Ch]"
"	      00548938    jmp dword ptr [eax*4+54893Fh]"
"	      0054893f    adc [edi-789EFFACh],al"
"	      00548945    push esp"
"	      00548946    add al,ch"
"	      00548948    xchg edx,[eax+eax-76h]"
"	      0054894c    mov [eax+eax+39h],dl"
"	      00548950    (bad)"
);
// LINE 1117:
	asm( 
"	      00548953    jmp near ptr 005486F3h"
);
// LINE 1119:
	asm( 
"	      00548958    mov word ptr [ebp-10h],0"
"	      0054895e    jmp near ptr 00548967h"
"	      00548963    inc word ptr [ebp-10h]"
"	      00548967    movsx eax,word ptr [ebp-10h]"
"	      0054896b    cmp eax,12h"
"	      0054896e    jge near ptr 00548AEBh"
);
// LINE 1120:
	asm( 
"	      00548974    movsx eax,word ptr [ebp-10h]"
"	      00548978    mov [ebp-30h],eax"
"	      0054897b    jmp near ptr 00548ACDh"
);
// LINE 1122:
	asm( 
"	      00548980    movsx eax,word ptr [ebp-10h]"
"	      00548984    lea eax,[eax+eax*4]"
"	      00548987    mov dword ptr [eax*8+6372D0h],0Dh"
);
// LINE 1123:
	asm( 
"	      00548992    mov word ptr [ebp-14h],1"
"	      00548998    jmp near ptr 005489A1h"
"	      0054899d    inc word ptr [ebp-14h]"
"	      005489a1    movsx eax,word ptr [ebp-14h]"
"	      005489a5    cmp eax,0Ah"
"	      005489a8    jge near ptr 005489CCh"
"	      005489ae    movsx eax,word ptr [ebp-10h]"
"	      005489b2    lea eax,[eax+eax*4]"
"	      005489b5    movsx ecx,word ptr [ebp-14h]"
"	      005489b9    shl ecx,2"
"	      005489bc    mov dword ptr [ecx+eax*8+6372D0h],0"
"	      005489c7    jmp near ptr 0054899Dh"
);
// LINE 1124:
	asm( 
"	      005489cc    jmp near ptr 00548AE6h"
);
// LINE 1126:
	asm( 
"	      005489d1    movsx eax,word ptr [ebp-10h]"
"	      005489d5    lea eax,[eax+eax*4]"
"	      005489d8    mov dword ptr [eax*8+6372D0h],5"
);
// LINE 1127:
	asm( 
"	      005489e3    movsx eax,word ptr [ebp-10h]"
"	      005489e7    lea eax,[eax+eax*4]"
"	      005489ea    mov dword ptr [eax*8+6372D4h],4"
);
// LINE 1128:
	asm( 
"	      005489f5    movsx eax,word ptr [ebp-10h]"
"	      005489f9    lea eax,[eax+eax*4]"
"	      005489fc    mov dword ptr [eax*8+6372D8h],3"
);
// LINE 1129:
	asm( 
"	      00548a07    mov word ptr [ebp-14h],3"
"	      00548a0d    jmp near ptr 00548A16h"
"	      00548a12    inc word ptr [ebp-14h]"
"	      00548a16    movsx eax,word ptr [ebp-14h]"
"	      00548a1a    cmp eax,0Ah"
"	      00548a1d    jge near ptr 00548A41h"
"	      00548a23    movsx eax,word ptr [ebp-10h]"
"	      00548a27    lea eax,[eax+eax*4]"
"	      00548a2a    movsx ecx,word ptr [ebp-14h]"
"	      00548a2e    shl ecx,2"
"	      00548a31    mov dword ptr [ecx+eax*8+6372D0h],0"
"	      00548a3c    jmp near ptr 00548A12h"
);
// LINE 1130:
	asm( 
"	      00548a41    jmp near ptr 00548AE6h"
);
// LINE 1137:
	asm( 
"	      00548a46    movsx eax,word ptr [ebp-10h]"
"	      00548a4a    lea eax,[eax+eax*4]"
"	      00548a4d    mov dword ptr [eax*8+6372D0h],0Ch"
);
// LINE 1138:
	asm( 
"	      00548a58    movsx eax,word ptr [ebp-10h]"
"	      00548a5c    lea eax,[eax+eax*4]"
"	      00548a5f    mov dword ptr [eax*8+6372D4h],0Dh"
);
// LINE 1139:
	asm( 
"	      00548a6a    movsx eax,word ptr [ebp-10h]"
"	      00548a6e    lea eax,[eax+eax*4]"
"	      00548a71    mov dword ptr [eax*8+6372D8h],0Bh"
);
// LINE 1140:
	asm( 
"	      00548a7c    movsx eax,word ptr [ebp-10h]"
"	      00548a80    lea eax,[eax+eax*4]"
"	      00548a83    mov dword ptr [eax*8+6372DCh],0Ah"
);
// LINE 1142:
	asm( 
"	      00548a8e    mov word ptr [ebp-14h],4"
"	      00548a94    jmp near ptr 00548A9Dh"
"	      00548a99    inc word ptr [ebp-14h]"
"	      00548a9d    movsx eax,word ptr [ebp-14h]"
"	      00548aa1    cmp eax,0Ah"
"	      00548aa4    jge near ptr 00548AC8h"
"	      00548aaa    movsx eax,word ptr [ebp-10h]"
"	      00548aae    lea eax,[eax+eax*4]"
"	      00548ab1    movsx ecx,word ptr [ebp-14h]"
"	      00548ab5    shl ecx,2"
"	      00548ab8    mov dword ptr [ecx+eax*8+6372D0h],0"
"	      00548ac3    jmp near ptr 00548A99h"
);
// LINE 1143:
	asm( 
"	      00548ac8    jmp near ptr 00548AE6h"
"	      00548acd    cmp dword ptr [ebp-30h],7"
"	      00548ad1    je near ptr 00548980h"
"	      00548ad7    cmp dword ptr [ebp-30h],11h"
"	      00548adb    je near ptr 005489D1h"
"	      00548ae1    jmp near ptr 00548A46h"
);
// LINE 1144:
	asm( 
"	      00548ae6    jmp near ptr 00548963h"
);
// LINE 1145:
	asm( 
"	      00548aeb    mov word ptr [ebp-10h],0"
"	      00548af1    jmp near ptr 00548AFAh"
"	      00548af6    inc word ptr [ebp-10h]"
"	      00548afa    movsx eax,word ptr [ebp-10h]"
"	      00548afe    cmp eax,0Eh"
"	      00548b01    jge near ptr 00548BACh"
);
// LINE 1146:
	asm( 
"	      00548b07    movsx eax,word ptr [ebp-10h]"
"	      00548b0b    cmp eax,7"
"	      00548b0e    je near ptr 00548B48h"
"	      00548b14    movsx eax,word ptr [ebp-10h]"
"	      00548b18    cmp eax,3"
"	      00548b1b    je near ptr 00548B48h"
"	      00548b21    movsx eax,word ptr [ebp-10h]"
"	      00548b25    cmp eax,4"
"	      00548b28    je near ptr 00548B48h"
"	      00548b2e    movsx eax,word ptr [ebp-10h]"
"	      00548b32    cmp eax,5"
"	      00548b35    je near ptr 00548B48h"
"	      00548b3b    movsx eax,word ptr [ebp-10h]"
"	      00548b3f    cmp eax,2"
"	      00548b42    jne near ptr 00548B8Ah"
);
// LINE 1147:
	asm( 
"	      00548b48    movsx eax,word ptr [ebp-10h]"
"	      00548b4c    mov dword ptr [eax*8+635268h],1"
);
// LINE 1148:
	asm( 
"	      00548b57    movsx eax,word ptr [ebp-10h]"
"	      00548b5b    cmp eax,4"
"	      00548b5e    jne near ptr 00548B77h"
);
// LINE 1149:
	asm( 
"	      00548b64    movsx eax,word ptr [ebp-10h]"
"	      00548b68    mov word ptr [eax*8+63526Ch],2"
);
// LINE 1150:
	asm( 
"	      00548b72    jmp near ptr 00548B85h"
);
// LINE 1151:
	asm( 
"	      00548b77    movsx eax,word ptr [ebp-10h]"
"	      00548b7b    mov word ptr [eax*8+63526Ch],4"
);
// LINE 1153:
	asm( 
"	      00548b85    jmp near ptr 00548BA7h"
);
// LINE 1154:
	asm( 
"	      00548b8a    movsx eax,word ptr [ebp-10h]"
"	      00548b8e    mov dword ptr [eax*8+635268h],0"
);
// LINE 1155:
	asm( 
"	      00548b99    movsx eax,word ptr [ebp-10h]"
"	      00548b9d    mov word ptr [eax*8+63526Ch],4"
);
// LINE 1157:
	asm( 
"	      00548ba7    jmp near ptr 00548AF6h"
);
// LINE 1162:
	asm( 
"	      00548bac    mov word ptr [ebp-10h],0"
"	      00548bb2    jmp near ptr 00548BBBh"
"	      00548bb7    inc word ptr [ebp-10h]"
"	      00548bbb    movsx eax,word ptr [ebp-10h]"
"	      00548bbf    cmp eax,100h"
"	      00548bc4    jge near ptr 00549089h"
);
// LINE 1163:
	asm( 
"	      00548bca    movsx eax,word ptr [ebp-10h]"
"	      00548bce    test eax,eax"
"	      00548bd0    jne near ptr 00548BEAh"
);
// LINE 1164:
	asm( 
"	      00548bd6    movsx eax,word ptr [ebp-10h]"
"	      00548bda    mov dword ptr [eax*4+636ED0h],2"
);
// LINE 1165:
	asm( 
"	      00548be5    jmp near ptr 00549084h"
"	      00548bea    movsx eax,word ptr [ebp-10h]"
"	      00548bee    cmp eax,1"
"	      00548bf1    jl near ptr 00548C18h"
"	      00548bf7    movsx eax,word ptr [ebp-10h]"
"	      00548bfb    cmp eax,4"
"	      00548bfe    jg near ptr 00548C18h"
);
// LINE 1166:
	asm( 
"	      00548c04    movsx eax,word ptr [ebp-10h]"
"	      00548c08    mov dword ptr [eax*4+636ED0h],4"
);
// LINE 1167:
	asm( 
"	      00548c13    jmp near ptr 00549084h"
"	      00548c18    movsx eax,word ptr [ebp-10h]"
"	      00548c1c    cmp eax,6"
"	      00548c1f    jl near ptr 00548C46h"
"	      00548c25    movsx eax,word ptr [ebp-10h]"
"	      00548c29    cmp eax,0Ch"
"	      00548c2c    jg near ptr 00548C46h"
);
// LINE 1168:
	asm( 
"	      00548c32    movsx eax,word ptr [ebp-10h]"
"	      00548c36    mov dword ptr [eax*4+636ED0h],3"
);
// LINE 1169:
	asm( 
"	      00548c41    jmp near ptr 00549084h"
"	      00548c46    movsx eax,word ptr [ebp-10h]"
"	      00548c4a    cmp eax,0Dh"
"	      00548c4d    je near ptr 00548C71h"
"	      00548c53    movsx eax,word ptr [ebp-10h]"
"	      00548c57    cmp eax,0D5h"
"	      00548c5c    je near ptr 00548C71h"
"	      00548c62    movsx eax,word ptr [ebp-10h]"
"	      00548c66    cmp eax,0DAh"
"	      00548c6b    jne near ptr 00548C85h"
);
// LINE 1170:
	asm( 
"	      00548c71    movsx eax,word ptr [ebp-10h]"
"	      00548c75    mov dword ptr [eax*4+636ED0h],5"
);
// LINE 1171:
	asm( 
"	      00548c80    jmp near ptr 00549084h"
"	      00548c85    movsx eax,word ptr [ebp-10h]"
"	      00548c89    cmp eax,0Eh"
"	      00548c8c    jl near ptr 00548CB3h"
"	      00548c92    movsx eax,word ptr [ebp-10h]"
"	      00548c96    cmp eax,1Ch"
"	      00548c99    jg near ptr 00548CB3h"
);
// LINE 1172:
	asm( 
"	      00548c9f    movsx eax,word ptr [ebp-10h]"
"	      00548ca3    mov dword ptr [eax*4+636ED0h],6"
);
// LINE 1173:
	asm( 
"	      00548cae    jmp near ptr 00549084h"
"	      00548cb3    movsx eax,word ptr [ebp-10h]"
"	      00548cb7    cmp eax,1Dh"
"	      00548cba    jl near ptr 00548CCDh"
"	      00548cc0    movsx eax,word ptr [ebp-10h]"
"	      00548cc4    cmp eax,2Bh"
"	      00548cc7    jle near ptr 00548D1Bh"
"	      00548ccd    movsx eax,word ptr [ebp-10h]"
"	      00548cd1    cmp eax,43h"
"	      00548cd4    jl near ptr 00548CE7h"
"	      00548cda    movsx eax,word ptr [ebp-10h]"
"	      00548cde    cmp eax,44h"
"	      00548ce1    jle near ptr 00548D1Bh"
"	      00548ce7    movsx eax,word ptr [ebp-10h]"
"	      00548ceb    cmp eax,49h"
"	      00548cee    jl near ptr 00548D01h"
"	      00548cf4    movsx eax,word ptr [ebp-10h]"
"	      00548cf8    cmp eax,50h"
"	      00548cfb    jle near ptr 00548D1Bh"
"	      00548d01    movsx eax,word ptr [ebp-10h]"
"	      00548d05    cmp eax,61h"
"	      00548d08    jl near ptr 00548D2Fh"
"	      00548d0e    movsx eax,word ptr [ebp-10h]"
"	      00548d12    cmp eax,69h"
"	      00548d15    jg near ptr 00548D2Fh"
);
// LINE 1174:
	asm( 
"	      00548d1b    movsx eax,word ptr [ebp-10h]"
"	      00548d1f    mov dword ptr [eax*4+636ED0h],7"
);
// LINE 1175:
	asm( 
"	      00548d2a    jmp near ptr 00549084h"
"	      00548d2f    movsx eax,word ptr [ebp-10h]"
"	      00548d33    cmp eax,51h"
"	      00548d36    jl near ptr 00548D49h"
"	      00548d3c    movsx eax,word ptr [ebp-10h]"
"	      00548d40    cmp eax,5Ah"
"	      00548d43    jle near ptr 00548D70h"
"	      00548d49    movsx eax,word ptr [ebp-10h]"
"	      00548d4d    cmp eax,49h"
"	      00548d50    je near ptr 00548D70h"
"	      00548d56    movsx eax,word ptr [ebp-10h]"
"	      00548d5a    cmp eax,6Ah"
"	      00548d5d    jl near ptr 00548D84h"
"	      00548d63    movsx eax,word ptr [ebp-10h]"
"	      00548d67    cmp eax,6Bh"
"	      00548d6a    jg near ptr 00548D84h"
);
// LINE 1176:
	asm( 
"	      00548d70    movsx eax,word ptr [ebp-10h]"
"	      00548d74    mov dword ptr [eax*4+636ED0h],8"
);
// LINE 1177:
	asm( 
"	      00548d7f    jmp near ptr 00549084h"
"	      00548d84    movsx eax,word ptr [ebp-10h]"
"	      00548d88    cmp eax,2Ch"
"	      00548d8b    jl near ptr 00548D9Eh"
"	      00548d91    movsx eax,word ptr [ebp-10h]"
"	      00548d95    cmp eax,3Eh"
"	      00548d98    jle near ptr 00548DECh"
"	      00548d9e    movsx eax,word ptr [ebp-10h]"
"	      00548da2    cmp eax,3Fh"
"	      00548da5    jl near ptr 00548DB8h"
"	      00548dab    movsx eax,word ptr [ebp-10h]"
"	      00548daf    cmp eax,50h"
"	      00548db2    jle near ptr 00548DECh"
"	      00548db8    movsx eax,word ptr [ebp-10h]"
"	      00548dbc    cmp eax,45h"
"	      00548dbf    jl near ptr 00548DD2h"
"	      00548dc5    movsx eax,word ptr [ebp-10h]"
"	      00548dc9    cmp eax,49h"
"	      00548dcc    jle near ptr 00548DECh"
"	      00548dd2    movsx eax,word ptr [ebp-10h]"
"	      00548dd6    cmp eax,5Bh"
"	      00548dd9    jl near ptr 00548E00h"
"	      00548ddf    movsx eax,word ptr [ebp-10h]"
"	      00548de3    cmp eax,60h"
"	      00548de6    jg near ptr 00548E00h"
);
// LINE 1178:
	asm( 
"	      00548dec    movsx eax,word ptr [ebp-10h]"
"	      00548df0    mov dword ptr [eax*4+636ED0h],9"
);
// LINE 1179:
	asm( 
"	      00548dfb    jmp near ptr 00549084h"
"	      00548e00    movsx eax,word ptr [ebp-10h]"
"	      00548e04    cmp eax,70h"
"	      00548e07    jl near ptr 00548E1Ah"
"	      00548e0d    movsx eax,word ptr [ebp-10h]"
"	      00548e11    cmp eax,7Bh"
"	      00548e14    jle near ptr 00548E74h"
"	      00548e1a    movsx eax,word ptr [ebp-10h]"
"	      00548e1e    cmp eax,8Ch"
"	      00548e23    jl near ptr 00548E38h"
"	      00548e29    movsx eax,word ptr [ebp-10h]"
"	      00548e2d    cmp eax,93h"
"	      00548e32    jle near ptr 00548E74h"
"	      00548e38    movsx eax,word ptr [ebp-10h]"
"	      00548e3c    cmp eax,0AAh"
"	      00548e41    jl near ptr 00548E56h"
"	      00548e47    movsx eax,word ptr [ebp-10h]"
"	      00548e4b    cmp eax,0B1h"
"	      00548e50    jle near ptr 00548E74h"
"	      00548e56    movsx eax,word ptr [ebp-10h]"
"	      00548e5a    cmp eax,0FBh"
"	      00548e5f    jl near ptr 00548E88h"
"	      00548e65    movsx eax,word ptr [ebp-10h]"
"	      00548e69    cmp eax,0FFh"
"	      00548e6e    jg near ptr 00548E88h"
);
// LINE 1180:
	asm( 
"	      00548e74    movsx eax,word ptr [ebp-10h]"
"	      00548e78    mov dword ptr [eax*4+636ED0h],0Ah"
);
// LINE 1181:
	asm( 
"	      00548e83    jmp near ptr 00549084h"
"	      00548e88    movsx eax,word ptr [ebp-10h]"
"	      00548e8c    cmp eax,0B2h"
"	      00548e91    jl near ptr 00548EA6h"
"	      00548e97    movsx eax,word ptr [ebp-10h]"
"	      00548e9b    cmp eax,0BBh"
"	      00548ea0    jle near ptr 00548F0Fh"
"	      00548ea6    movsx eax,word ptr [ebp-10h]"
"	      00548eaa    cmp eax,0D0h"
"	      00548eaf    jl near ptr 00548EC4h"
"	      00548eb5    movsx eax,word ptr [ebp-10h]"
"	      00548eb9    cmp eax,0D1h"
"	      00548ebe    jle near ptr 00548F0Fh"
"	      00548ec4    movsx eax,word ptr [ebp-10h]"
"	      00548ec8    cmp eax,0D9h"
"	      00548ecd    je near ptr 00548F0Fh"
"	      00548ed3    movsx eax,word ptr [ebp-10h]"
"	      00548ed7    cmp eax,0E1h"
"	      00548edc    je near ptr 00548F0Fh"
"	      00548ee2    movsx eax,word ptr [ebp-10h]"
"	      00548ee6    cmp eax,0F1h"
"	      00548eeb    je near ptr 00548F0Fh"
"	      00548ef1    movsx eax,word ptr [ebp-10h]"
"	      00548ef5    cmp eax,0F3h"
"	      00548efa    je near ptr 00548F0Fh"
"	      00548f00    movsx eax,word ptr [ebp-10h]"
"	      00548f04    cmp eax,0F7h"
"	      00548f09    jne near ptr 00548F23h"
);
// LINE 1182:
	asm( 
"	      00548f0f    movsx eax,word ptr [ebp-10h]"
"	      00548f13    mov dword ptr [eax*4+636ED0h],0Ch"
);
// LINE 1183:
	asm( 
"	      00548f1e    jmp near ptr 00549084h"
"	      00548f23    movsx eax,word ptr [ebp-10h]"
"	      00548f27    cmp eax,82h"
"	      00548f2c    je near ptr 00548FF5h"
"	      00548f32    movsx eax,word ptr [ebp-10h]"
"	      00548f36    cmp eax,84h"
"	      00548f3b    jl near ptr 00548F50h"
"	      00548f41    movsx eax,word ptr [ebp-10h]"
"	      00548f45    cmp eax,8Bh"
"	      00548f4a    jle near ptr 00548FF5h"
"	      00548f50    movsx eax,word ptr [ebp-10h]"
"	      00548f54    cmp eax,9Eh"
"	      00548f59    jl near ptr 00548F6Eh"
"	      00548f5f    movsx eax,word ptr [ebp-10h]"
"	      00548f63    cmp eax,0A9h"
"	      00548f68    jle near ptr 00548FF5h"
"	      00548f6e    movsx eax,word ptr [ebp-10h]"
"	      00548f72    cmp eax,0BCh"
"	      00548f77    jl near ptr 00548F8Ch"
"	      00548f7d    movsx eax,word ptr [ebp-10h]"
"	      00548f81    cmp eax,0CFh"
"	      00548f86    jle near ptr 00548FF5h"
"	      00548f8c    movsx eax,word ptr [ebp-10h]"
"	      00548f90    cmp eax,0E2h"
"	      00548f95    jl near ptr 00548FAAh"
"	      00548f9b    movsx eax,word ptr [ebp-10h]"
"	      00548f9f    cmp eax,0EFh"
"	      00548fa4    jle near ptr 00548FF5h"
"	      00548faa    movsx eax,word ptr [ebp-10h]"
"	      00548fae    cmp eax,0F2h"
"	      00548fb3    je near ptr 00548FF5h"
"	      00548fb9    movsx eax,word ptr [ebp-10h]"
"	      00548fbd    cmp eax,0F4h"
"	      00548fc2    je near ptr 00548FF5h"
"	      00548fc8    movsx eax,word ptr [ebp-10h]"
"	      00548fcc    cmp eax,0F6h"
"	      00548fd1    je near ptr 00548FF5h"
"	      00548fd7    movsx eax,word ptr [ebp-10h]"
"	      00548fdb    cmp eax,0F9h"
"	      00548fe0    jl near ptr 00549009h"
"	      00548fe6    movsx eax,word ptr [ebp-10h]"
"	      00548fea    cmp eax,0FAh"
"	      00548fef    jg near ptr 00549009h"
);
// LINE 1184:
	asm( 
"	      00548ff5    movsx eax,word ptr [ebp-10h]"
"	      00548ff9    mov dword ptr [eax*4+636ED0h],0Dh"
);
// LINE 1185:
	asm( 
"	      00549004    jmp near ptr 00549084h"
"	      00549009    movsx eax,word ptr [ebp-10h]"
"	      0054900d    cmp eax,7Ch"
"	      00549010    jl near ptr 00549025h"
"	      00549016    movsx eax,word ptr [ebp-10h]"
"	      0054901a    cmp eax,83h"
"	      0054901f    jle near ptr 00549061h"
"	      00549025    movsx eax,word ptr [ebp-10h]"
"	      00549029    cmp eax,94h"
"	      0054902e    jl near ptr 00549043h"
"	      00549034    movsx eax,word ptr [ebp-10h]"
"	      00549038    cmp eax,9Dh"
"	      0054903d    jle near ptr 00549061h"
"	      00549043    movsx eax,word ptr [ebp-10h]"
"	      00549047    cmp eax,0D2h"
"	      0054904c    jl near ptr 00549075h"
"	      00549052    movsx eax,word ptr [ebp-10h]"
"	      00549056    cmp eax,0FAh"
"	      0054905b    jg near ptr 00549075h"
);
// LINE 1186:
	asm( 
"	      00549061    movsx eax,word ptr [ebp-10h]"
"	      00549065    mov dword ptr [eax*4+636ED0h],0Bh"
);
// LINE 1187:
	asm( 
"	      00549070    jmp near ptr 00549084h"
);
// LINE 1188:
	asm( 
"	      00549075    movsx eax,word ptr [ebp-10h]"
"	      00549079    mov dword ptr [eax*4+636ED0h],1"
);
// LINE 1189:
	asm( 
"	      00549084    jmp near ptr 00548BB7h"
);
// LINE 1192:
	asm( 
"	      00549089    mov word ptr [ebp-10h],0"
"	      0054908f    jmp near ptr 00549098h"
"	      00549094    inc word ptr [ebp-10h]"
"	      00549098    movsx eax,word ptr [ebp-10h]"
"	      0054909c    cmp eax,64h"
"	      0054909f    jge near ptr 005490B9h"
);
// LINE 1193:
	asm( 
"	      005490a5    movsx eax,word ptr [ebp-10h]"
"	      005490a9    mov dword ptr [eax*4+636D40h],0"
"	      005490b4    jmp near ptr 00549094h"
);
// LINE 1194:
	asm( 
"	      005490b9    mov word ptr ds:[5B8668h],1"
);
// LINE 1197:
	asm( 
"	      005490c2    cmp dword ptr [ebp+8],0"
"	      005490c6    jne near ptr 005490E8h"
"	      005490cc    push 8C085h"
"	      005490d1    push 5B90B8h"
"	      005490d6    push 4ADh"
"	      005490db    push 5B90E4h"
"	      005490e0    call 00554F30h"
"	      005490e5    add esp,10h"
);
// LINE 1198:
	asm( 
"	      005490e8    mov eax,[ebp+8]"
"	      005490eb    push eax"
"	      005490ec    mov ecx,636BB8h"
"	      005490f1    call 00552E51h"
);
// LINE 1199:
	asm( 
"	      005490f6    mov ecx,636BB8h"
"	      005490fb    call 0055C7DDh"
"	      00549100    movzx eax,ax"
"	      00549103    test eax,eax"
"	      00549105    jne near ptr 00549127h"
"	      0054910b    push 8C085h"
"	      00549110    push 5B9108h"
"	      00549115    push 4AFh"
"	      0054911a    push 5B9130h"
"	      0054911f    call 00554F30h"
"	      00549124    add esp,10h"
);
// LINE 1200:
	asm( 
"	      00549127    mov ecx,636BB8h"
"	      0054912c    call 0055C7DDh"
"	      00549131    movzx eax,ax"
"	      00549134    test eax,eax"
"	      00549136    jne near ptr 00549149h"
);
// LINE 1201:
	asm( 
"	      0054913c    push 5B9154h"
"	      00549141    call 0058E320h"
"	      00549146    add esp,4"
);
// LINE 1203:
	asm( 
"	      00549149    push 4"
"	      0054914b    call 0056A600h"
"	      00549150    add esp,4"
"	      00549153    mov [ebp-18h],eax"
"	      00549156    mov dword ptr [ebp-4],0"
"	      0054915d    cmp dword ptr [ebp-18h],0"
"	      00549161    je near ptr 00549179h"
"	      00549167    push 0"
"	      00549169    mov ecx,[ebp-18h]"
"	      0054916c    call 005609D0h"
"	      00549171    mov [ebp-1Ch],eax"
"	      00549174    jmp near ptr 00549180h"
"	      00549179    mov dword ptr [ebp-1Ch],0"
"	      00549180    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00549187    mov eax,[ebp-1Ch]"
"	      0054918a    mov ds:[635250h],eax"
);
// LINE 1204:
	asm( 
"	      0054918f    push 1Ch"
"	      00549191    call 0056A600h"
"	      00549196    add esp,4"
"	      00549199    mov [ebp-20h],eax"
"	      0054919c    mov dword ptr [ebp-4],1"
"	      005491a3    cmp dword ptr [ebp-20h],0"
"	      005491a7    je near ptr 005491CDh"
"	      005491ad    push 636BB8h"
"	      005491b2    push 636BB8h"
"	      005491b7    mov eax,ds:[635250h]"
"	      005491bc    push eax"
"	      005491bd    mov ecx,[ebp-20h]"
"	      005491c0    call 00560290h"
"	      005491c5    mov [ebp-24h],eax"
"	      005491c8    jmp near ptr 005491D4h"
"	      005491cd    mov dword ptr [ebp-24h],0"
"	      005491d4    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      005491db    mov eax,[ebp-24h]"
"	      005491de    mov ds:[636B8Ch],eax"
);
// LINE 1208:
	asm( 
"	      005491e3    mov word ptr [ebp-10h],0"
"	      005491e9    jmp near ptr 005491F2h"
"	      005491ee    inc word ptr [ebp-10h]"
"	      005491f2    movsx eax,word ptr [ebp-10h]"
"	      005491f6    cmp eax,40h"
"	      005491f9    jge near ptr 00549213h"
);
// LINE 1209:
	asm( 
"	      005491ff    movsx eax,word ptr [ebp-10h]"
"	      00549203    mov dword ptr [eax*4+6375A8h],0"
"	      0054920e    jmp near ptr 005491EEh"
);
// LINE 1210:
	asm( 
"	      00549213    jmp near ptr 00549234h"
"	      00549218    push 8C085h"
"	      0054921d    push 5B9178h"
"	      00549222    push 4BAh"
"	      00549227    push 5B91B0h"
"	      0054922c    call 00554F30h"
"	      00549231    add esp,10h"
"	      00549234    mov dword ptr ds:[6375A8h],552370h"
);
// LINE 1211:
	asm( 
"	      0054923e    jmp near ptr 0054925Fh"
"	      00549243    push 8C085h"
"	      00549248    push 5B91D4h"
"	      0054924d    push 4BBh"
"	      00549252    push 5B920Ch"
"	      00549257    call 00554F30h"
"	      0054925c    add esp,10h"
"	      0054925f    mov dword ptr ds:[6375ACh],552390h"
);
// LINE 1212:
	asm( 
"	      00549269    jmp near ptr 0054928Ah"
"	      0054926e    push 8C085h"
"	      00549273    push 5B9230h"
"	      00549278    push 4BCh"
"	      0054927d    push 5B9268h"
"	      00549282    call 00554F30h"
"	      00549287    add esp,10h"
"	      0054928a    mov dword ptr ds:[6375B0h],5523B0h"
);
// LINE 1214:
	asm( 
"	      00549294    jmp near ptr 005492B5h"
"	      00549299    push 8C085h"
"	      0054929e    push 5B928Ch"
"	      005492a3    push 4BEh"
"	      005492a8    push 5B92C4h"
"	      005492ad    call 00554F30h"
"	      005492b2    add esp,10h"
"	      005492b5    mov dword ptr ds:[6375B8h],5523D0h"
);
// LINE 1215:
	asm( 
"	      005492bf    jmp near ptr 005492E0h"
"	      005492c4    push 8C085h"
"	      005492c9    push 5B92E8h"
"	      005492ce    push 4BFh"
"	      005492d3    push 5B9320h"
"	      005492d8    call 00554F30h"
"	      005492dd    add esp,10h"
"	      005492e0    mov dword ptr ds:[6375C0h],5523F0h"
);
// LINE 1216:
	asm( 
"	      005492ea    jmp near ptr 0054930Bh"
"	      005492ef    push 8C085h"
"	      005492f4    push 5B9344h"
"	      005492f9    push 4C0h"
"	      005492fe    push 5B937Ch"
"	      00549303    call 00554F30h"
"	      00549308    add esp,10h"
"	      0054930b    mov dword ptr ds:[6375C4h],552410h"
);
// LINE 1221:
	asm( 
"	      00549315    jmp near ptr 00549336h"
"	      0054931a    push 8C085h"
"	      0054931f    push 5B93A0h"
"	      00549324    push 4C5h"
"	      00549329    push 5B93D8h"
"	      0054932e    call 00554F30h"
"	      00549333    add esp,10h"
"	      00549336    mov dword ptr ds:[6375D8h],552430h"
);
// LINE 1222:
	asm( 
"	      00549340    jmp near ptr 00549361h"
"	      00549345    push 8C085h"
"	      0054934a    push 5B93FCh"
"	      0054934f    push 4C6h"
"	      00549354    push 5B9434h"
"	      00549359    call 00554F30h"
"	      0054935e    add esp,10h"
"	      00549361    mov dword ptr ds:[6375DCh],552450h"
);
// LINE 1223:
	asm( 
"	      0054936b    jmp near ptr 0054938Ch"
"	      00549370    push 8C085h"
"	      00549375    push 5B9458h"
"	      0054937a    push 4C7h"
"	      0054937f    push 5B9490h"
"	      00549384    call 00554F30h"
"	      00549389    add esp,10h"
"	      0054938c    mov dword ptr ds:[6375E0h],552470h"
);
// LINE 1224:
	asm( 
"	      00549396    jmp near ptr 005493B7h"
"	      0054939b    push 8C085h"
"	      005493a0    push 5B94B4h"
"	      005493a5    push 4C8h"
"	      005493aa    push 5B94ECh"
"	      005493af    call 00554F30h"
"	      005493b4    add esp,10h"
"	      005493b7    mov dword ptr ds:[6375E4h],552490h"
);
// LINE 1225:
	asm( 
"	      005493c1    jmp near ptr 005493E2h"
"	      005493c6    push 8C085h"
"	      005493cb    push 5B9510h"
"	      005493d0    push 4C9h"
"	      005493d5    push 5B9548h"
"	      005493da    call 00554F30h"
"	      005493df    add esp,10h"
"	      005493e2    mov dword ptr ds:[6375E8h],5524B0h"
);
// LINE 1226:
	asm( 
"	      005493ec    jmp near ptr 0054940Dh"
"	      005493f1    push 8C085h"
"	      005493f6    push 5B956Ch"
"	      005493fb    push 4CAh"
"	      00549400    push 5B95A4h"
"	      00549405    call 00554F30h"
"	      0054940a    add esp,10h"
"	      0054940d    mov dword ptr ds:[6375ECh],5524D0h"
);
// LINE 1227:
	asm( 
"	      00549417    jmp near ptr 00549438h"
"	      0054941c    push 8C085h"
"	      00549421    push 5B95C8h"
"	      00549426    push 4CBh"
"	      0054942b    push 5B9600h"
"	      00549430    call 00554F30h"
"	      00549435    add esp,10h"
"	      00549438    mov dword ptr ds:[6375F0h],5524F0h"
);
// LINE 1228:
	asm( 
"	      00549442    jmp near ptr 00549463h"
"	      00549447    push 8C085h"
"	      0054944c    push 5B9624h"
"	      00549451    push 4CCh"
"	      00549456    push 5B965Ch"
"	      0054945b    call 00554F30h"
"	      00549460    add esp,10h"
"	      00549463    mov dword ptr ds:[6375F4h],552510h"
);
// LINE 1229:
	asm( 
"	      0054946d    jmp near ptr 0054948Eh"
"	      00549472    push 8C085h"
"	      00549477    push 5B9680h"
"	      0054947c    push 4CDh"
"	      00549481    push 5B96B8h"
"	      00549486    call 00554F30h"
"	      0054948b    add esp,10h"
"	      0054948e    mov dword ptr ds:[6375F8h],552530h"
);
// LINE 1230:
	asm( 
"	      00549498    jmp near ptr 005494B9h"
"	      0054949d    push 8C085h"
"	      005494a2    push 5B96DCh"
"	      005494a7    push 4CEh"
"	      005494ac    push 5B9714h"
"	      005494b1    call 00554F30h"
"	      005494b6    add esp,10h"
"	      005494b9    mov dword ptr ds:[6375FCh],552550h"
);
// LINE 1231:
	asm( 
"	      005494c3    jmp near ptr 005494E4h"
"	      005494c8    push 8C085h"
"	      005494cd    push 5B9738h"
"	      005494d2    push 4CFh"
"	      005494d7    push 5B9770h"
"	      005494dc    call 00554F30h"
"	      005494e1    add esp,10h"
"	      005494e4    mov dword ptr ds:[637600h],552570h"
);
// LINE 1232:
	asm( 
"	      005494ee    jmp near ptr 0054950Fh"
"	      005494f3    push 8C085h"
"	      005494f8    push 5B9794h"
"	      005494fd    push 4D0h"
"	      00549502    push 5B97CCh"
"	      00549507    call 00554F30h"
"	      0054950c    add esp,10h"
"	      0054950f    mov dword ptr ds:[637604h],552590h"
);
// LINE 1233:
	asm( 
"	      00549519    jmp near ptr 0054953Ah"
"	      0054951e    push 8C085h"
"	      00549523    push 5B97F0h"
"	      00549528    push 4D1h"
"	      0054952d    push 5B9828h"
"	      00549532    call 00554F30h"
"	      00549537    add esp,10h"
"	      0054953a    mov dword ptr ds:[637608h],5525B0h"
);
// LINE 1234:
	asm( 
"	      00549544    jmp near ptr 00549565h"
"	      00549549    push 8C085h"
"	      0054954e    push 5B984Ch"
"	      00549553    push 4D2h"
"	      00549558    push 5B9884h"
"	      0054955d    call 00554F30h"
"	      00549562    add esp,10h"
"	      00549565    mov dword ptr ds:[63760Ch],5525D0h"
);
// LINE 1235:
	asm( 
"	      0054956f    jmp near ptr 00549590h"
"	      00549574    push 8C085h"
"	      00549579    push 5B98A8h"
"	      0054957e    push 4D3h"
"	      00549583    push 5B98E0h"
"	      00549588    call 00554F30h"
"	      0054958d    add esp,10h"
"	      00549590    mov dword ptr ds:[637610h],5525F0h"
);
// LINE 1236:
	asm( 
"	      0054959a    jmp near ptr 005495BBh"
"	      0054959f    push 8C085h"
"	      005495a4    push 5B9904h"
"	      005495a9    push 4D4h"
"	      005495ae    push 5B993Ch"
"	      005495b3    call 00554F30h"
"	      005495b8    add esp,10h"
"	      005495bb    mov dword ptr ds:[637614h],552610h"
);
// LINE 1237:
	asm( 
"	      005495c5    jmp near ptr 005495E6h"
"	      005495ca    push 8C085h"
"	      005495cf    push 5B9960h"
"	      005495d4    push 4D5h"
"	      005495d9    push 5B9998h"
"	      005495de    call 00554F30h"
"	      005495e3    add esp,10h"
"	      005495e6    mov dword ptr ds:[637618h],552630h"
);
// LINE 1238:
	asm( 
"	      005495f0    jmp near ptr 00549611h"
"	      005495f5    push 8C085h"
"	      005495fa    push 5B99BCh"
"	      005495ff    push 4D6h"
"	      00549604    push 5B99F4h"
"	      00549609    call 00554F30h"
"	      0054960e    add esp,10h"
"	      00549611    mov dword ptr ds:[63761Ch],552650h"
);
// LINE 1239:
	asm( 
"	      0054961b    jmp near ptr 0054963Ch"
"	      00549620    push 8C085h"
"	      00549625    push 5B9A18h"
"	      0054962a    push 4D7h"
"	      0054962f    push 5B9A50h"
"	      00549634    call 00554F30h"
"	      00549639    add esp,10h"
"	      0054963c    mov dword ptr ds:[637620h],552670h"
);
// LINE 1240:
	asm( 
"	      00549646    jmp near ptr 00549667h"
"	      0054964b    push 8C085h"
"	      00549650    push 5B9A74h"
"	      00549655    push 4D8h"
"	      0054965a    push 5B9AACh"
"	      0054965f    call 00554F30h"
"	      00549664    add esp,10h"
"	      00549667    mov dword ptr ds:[637624h],552690h"
);
// LINE 1241:
	asm( 
"	      00549671    jmp near ptr 00549692h"
"	      00549676    push 8C085h"
"	      0054967b    push 5B9AD0h"
"	      00549680    push 4D9h"
"	      00549685    push 5B9B08h"
"	      0054968a    call 00554F30h"
"	      0054968f    add esp,10h"
"	      00549692    mov dword ptr ds:[637628h],5526B0h"
);
// LINE 1242:
	asm( 
"	      0054969c    jmp near ptr 005496BDh"
"	      005496a1    push 8C085h"
"	      005496a6    push 5B9B2Ch"
"	      005496ab    push 4DAh"
"	      005496b0    push 5B9B64h"
"	      005496b5    call 00554F30h"
"	      005496ba    add esp,10h"
"	      005496bd    mov dword ptr ds:[63762Ch],5526D0h"
);
// LINE 1243:
	asm( 
"	      005496c7    jmp near ptr 005496E8h"
"	      005496cc    push 8C085h"
"	      005496d1    push 5B9B88h"
"	      005496d6    push 4DBh"
"	      005496db    push 5B9BC0h"
"	      005496e0    call 00554F30h"
"	      005496e5    add esp,10h"
"	      005496e8    mov dword ptr ds:[637630h],5526F0h"
);
// LINE 1244:
	asm( 
"	      005496f2    jmp near ptr 00549713h"
"	      005496f7    push 8C085h"
"	      005496fc    push 5B9BE4h"
"	      00549701    push 4DCh"
"	      00549706    push 5B9C1Ch"
"	      0054970b    call 00554F30h"
"	      00549710    add esp,10h"
"	      00549713    mov dword ptr ds:[637634h],552710h"
);
// LINE 1245:
	asm( 
"	      0054971d    jmp near ptr 0054973Eh"
"	      00549722    push 8C085h"
"	      00549727    push 5B9C40h"
"	      0054972c    push 4DDh"
"	      00549731    push 5B9C78h"
"	      00549736    call 00554F30h"
"	      0054973b    add esp,10h"
"	      0054973e    mov dword ptr ds:[637638h],552730h"
);
// LINE 1246:
	asm( 
"	      00549748    jmp near ptr 00549769h"
"	      0054974d    push 8C085h"
"	      00549752    push 5B9C9Ch"
"	      00549757    push 4DEh"
"	      0054975c    push 5B9CD4h"
"	      00549761    call 00554F30h"
"	      00549766    add esp,10h"
"	      00549769    mov dword ptr ds:[63763Ch],552750h"
);
// LINE 1247:
	asm( 
"	      00549773    jmp near ptr 00549794h"
"	      00549778    push 8C085h"
"	      0054977d    push 5B9CF8h"
"	      00549782    push 4DFh"
"	      00549787    push 5B9D30h"
"	      0054978c    call 00554F30h"
"	      00549791    add esp,10h"
"	      00549794    mov dword ptr ds:[637640h],552770h"
);
// LINE 1248:
	asm( 
"	      0054979e    jmp near ptr 005497BFh"
"	      005497a3    push 8C085h"
"	      005497a8    push 5B9D54h"
"	      005497ad    push 4E0h"
"	      005497b2    push 5B9D8Ch"
"	      005497b7    call 00554F30h"
"	      005497bc    add esp,10h"
"	      005497bf    mov dword ptr ds:[637644h],552790h"
);
// LINE 1249:
	asm( 
"	      005497c9    jmp near ptr 005497EAh"
"	      005497ce    push 8C085h"
"	      005497d3    push 5B9DB0h"
"	      005497d8    push 4E1h"
"	      005497dd    push 5B9DE8h"
"	      005497e2    call 00554F30h"
"	      005497e7    add esp,10h"
"	      005497ea    mov dword ptr ds:[637648h],5527B0h"
);
// LINE 1251:
	asm( 
"	      005497f4    jmp near ptr 00549815h"
"	      005497f9    push 8C085h"
"	      005497fe    push 5B9E0Ch"
"	      00549803    push 4E3h"
"	      00549808    push 5B9E44h"
"	      0054980d    call 00554F30h"
"	      00549812    add esp,10h"
"	      00549815    mov dword ptr ds:[637650h],5527D0h"
);
// LINE 1252:
	asm( 
"	      0054981f    jmp near ptr 00549840h"
"	      00549824    push 8C085h"
"	      00549829    push 5B9E68h"
"	      0054982e    push 4E4h"
"	      00549833    push 5B9EA0h"
"	      00549838    call 00554F30h"
"	      0054983d    add esp,10h"
"	      00549840    mov dword ptr ds:[637654h],5527F0h"
);
// LINE 1253:
	asm( 
"	      0054984a    jmp near ptr 0054986Bh"
"	      0054984f    push 8C085h"
"	      00549854    push 5B9EC4h"
"	      00549859    push 4E5h"
"	      0054985e    push 5B9EFCh"
"	      00549863    call 00554F30h"
"	      00549868    add esp,10h"
"	      0054986b    mov dword ptr ds:[637658h],552810h"
);
// LINE 1254:
	asm( 
"	      00549875    jmp near ptr 00549896h"
"	      0054987a    push 8C085h"
"	      0054987f    push 5B9F20h"
"	      00549884    push 4E6h"
"	      00549889    push 5B9F58h"
"	      0054988e    call 00554F30h"
"	      00549893    add esp,10h"
"	      00549896    mov dword ptr ds:[63765Ch],552830h"
);
// LINE 1255:
	asm( 
"	      005498a0    jmp near ptr 005498C1h"
"	      005498a5    push 8C085h"
"	      005498aa    push 5B9F7Ch"
"	      005498af    push 4E7h"
"	      005498b4    push 5B9FB4h"
"	      005498b9    call 00554F30h"
"	      005498be    add esp,10h"
"	      005498c1    mov dword ptr ds:[637660h],552850h"
);
// LINE 1256:
	asm( 
"	      005498cb    jmp near ptr 005498ECh"
"	      005498d0    push 8C085h"
"	      005498d5    push 5B9FD8h"
"	      005498da    push 4E8h"
"	      005498df    push 5BA010h"
"	      005498e4    call 00554F30h"
"	      005498e9    add esp,10h"
"	      005498ec    mov dword ptr ds:[637664h],552870h"
);
// LINE 1257:
	asm( 
"	      005498f6    jmp near ptr 00549917h"
"	      005498fb    push 8C085h"
"	      00549900    push 5BA034h"
"	      00549905    push 4E9h"
"	      0054990a    push 5BA06Ch"
"	      0054990f    call 00554F30h"
"	      00549914    add esp,10h"
"	      00549917    mov dword ptr ds:[637668h],552890h"
);
// LINE 1258:
	asm( 
"	      00549921    jmp near ptr 00549942h"
"	      00549926    push 8C085h"
"	      0054992b    push 5BA090h"
"	      00549930    push 4EAh"
"	      00549935    push 5BA0C8h"
"	      0054993a    call 00554F30h"
"	      0054993f    add esp,10h"
"	      00549942    mov dword ptr ds:[63766Ch],5528B0h"
);
// LINE 1259:
	asm( 
"	      0054994c    jmp near ptr 0054996Dh"
"	      00549951    push 8C085h"
"	      00549956    push 5BA0ECh"
"	      0054995b    push 4EBh"
"	      00549960    push 5BA124h"
"	      00549965    call 00554F30h"
"	      0054996a    add esp,10h"
"	      0054996d    mov dword ptr ds:[637670h],5528D0h"
);
// LINE 1260:
	asm( 
"	      00549977    jmp near ptr 00549998h"
"	      0054997c    push 8C085h"
"	      00549981    push 5BA148h"
"	      00549986    push 4ECh"
"	      0054998b    push 5BA180h"
"	      00549990    call 00554F30h"
"	      00549995    add esp,10h"
"	      00549998    mov dword ptr ds:[637674h],5528F0h"
);
// LINE 1261:
	asm( 
"	      005499a2    jmp near ptr 005499C3h"
"	      005499a7    push 8C085h"
"	      005499ac    push 5BA1A4h"
"	      005499b1    push 4EDh"
"	      005499b6    push 5BA1DCh"
"	      005499bb    call 00554F30h"
"	      005499c0    add esp,10h"
"	      005499c3    mov dword ptr ds:[637678h],552910h"
);
// LINE 1262:
	asm( 
"	      005499cd    jmp near ptr 005499EEh"
"	      005499d2    push 8C085h"
"	      005499d7    push 5BA200h"
"	      005499dc    push 4EEh"
"	      005499e1    push 5BA238h"
"	      005499e6    call 00554F30h"
"	      005499eb    add esp,10h"
"	      005499ee    mov dword ptr ds:[63767Ch],552930h"
);
// LINE 1263:
	asm( 
"	      005499f8    jmp near ptr 00549A19h"
"	      005499fd    push 8C085h"
"	      00549a02    push 5BA25Ch"
"	      00549a07    push 4EFh"
"	      00549a0c    push 5BA294h"
"	      00549a11    call 00554F30h"
"	      00549a16    add esp,10h"
"	      00549a19    mov dword ptr ds:[637680h],552950h"
);
// LINE 1264:
	asm( 
"	      00549a23    jmp near ptr 00549A44h"
"	      00549a28    push 8C085h"
"	      00549a2d    push 5BA2B8h"
"	      00549a32    push 4F0h"
"	      00549a37    push 5BA2F0h"
"	      00549a3c    call 00554F30h"
"	      00549a41    add esp,10h"
"	      00549a44    mov dword ptr ds:[637684h],552970h"
);
// LINE 1265:
	asm( 
"	      00549a4e    jmp near ptr 00549A6Fh"
"	      00549a53    push 8C085h"
"	      00549a58    push 5BA314h"
"	      00549a5d    push 4F1h"
"	      00549a62    push 5BA34Ch"
"	      00549a67    call 00554F30h"
"	      00549a6c    add esp,10h"
"	      00549a6f    mov dword ptr ds:[637688h],552990h"
);
// LINE 1266:
	asm( 
"	      00549a79    jmp near ptr 00549A9Ah"
"	      00549a7e    push 8C085h"
"	      00549a83    push 5BA370h"
"	      00549a88    push 4F2h"
"	      00549a8d    push 5BA3A8h"
"	      00549a92    call 00554F30h"
"	      00549a97    add esp,10h"
"	      00549a9a    mov dword ptr ds:[63768Ch],5529B0h"
);
// LINE 1267:
	asm( 
"	      00549aa4    jmp near ptr 00549AC5h"
"	      00549aa9    push 8C085h"
"	      00549aae    push 5BA3CCh"
"	      00549ab3    push 4F3h"
"	      00549ab8    push 5BA404h"
"	      00549abd    call 00554F30h"
"	      00549ac2    add esp,10h"
"	      00549ac5    mov dword ptr ds:[637690h],5529D0h"
);
// LINE 1268:
	asm( 
"	      00549acf    jmp near ptr 00549AF0h"
"	      00549ad4    push 8C085h"
"	      00549ad9    push 5BA428h"
"	      00549ade    push 4F4h"
"	      00549ae3    push 5BA460h"
"	      00549ae8    call 00554F30h"
"	      00549aed    add esp,10h"
"	      00549af0    mov dword ptr ds:[637694h],5529F0h"
);
// LINE 1269:
	asm( 
"	      00549afa    jmp near ptr 00549B1Bh"
"	      00549aff    push 8C085h"
"	      00549b04    push 5BA484h"
"	      00549b09    push 4F5h"
"	      00549b0e    push 5BA4BCh"
"	      00549b13    call 00554F30h"
"	      00549b18    add esp,10h"
"	      00549b1b    mov dword ptr ds:[637698h],552A10h"
);
// LINE 1270:
	asm( 
"	      00549b25    jmp near ptr 00549B46h"
"	      00549b2a    push 8C085h"
"	      00549b2f    push 5BA4E0h"
"	      00549b34    push 4F6h"
"	      00549b39    push 5BA518h"
"	      00549b3e    call 00554F30h"
"	      00549b43    add esp,10h"
"	      00549b46    mov dword ptr ds:[63769Ch],552A30h"
);
// LINE 1271:
	asm( 
"	      00549b50    jmp near ptr 00549B71h"
"	      00549b55    push 8C085h"
"	      00549b5a    push 5BA53Ch"
"	      00549b5f    push 4F7h"
"	      00549b64    push 5BA574h"
"	      00549b69    call 00554F30h"
"	      00549b6e    add esp,10h"
"	      00549b71    mov dword ptr ds:[6376A0h],552A50h"
);
// LINE 1272:
	asm( 
"	      00549b7b    jmp near ptr 00549B9Ch"
"	      00549b80    push 8C085h"
"	      00549b85    push 5BA598h"
"	      00549b8a    push 4F8h"
"	      00549b8f    push 5BA5D0h"
"	      00549b94    call 00554F30h"
"	      00549b99    add esp,10h"
"	      00549b9c    mov dword ptr ds:[6376A4h],552A70h"
);
// LINE 1275:
	asm( 
"	      00549ba6    jmp near ptr 00549BCFh"
"	      00549bab    mov eax,[ebp-20h]"
"	      00549bae    push eax"
"	      00549baf    call 0056A740h"
"	      00549bb4    add esp,4"
"	      00549bb7    ret"
"	      00549bb8    mov eax,[ebp-18h]"
"	      00549bbb    push eax"
"	      00549bbc    call 0056A740h"
"	      00549bc1    add esp,4"
"	      00549bc4    ret"
"	      00549bc5    mov eax,595DD0h"
"	      00549bca    jmp near ptr 0056F590h"
"	      00549bcf    mov eax,[ebp-0Ch]"
"	      00549bd2    mov fs:[0],eax"
"	      00549bd8    pop edi"
"	      00549bd9    pop esi"
"	      00549bda    pop ebx"
"	      00549bdb    leave"
"	      00549bdc    ret"
);
}

// FUNCTION: SIMCOPTER 0x00549bdd
unsigned short cYObject::BeamIntoCameraRange() {
// LINE 1279:
	asm( 
"	      00549bdd    push ebp"
"	      00549bde    mov ebp,esp"
"	      00549be0    sub esp,48h"
"	      00549be3    push ebx"
"	      00549be4    push esi"
"	      00549be5    push edi"
"	      00549be6    mov [ebp-40h],ecx"
);
// LINE 1283:
	asm( 
"	      00549be9    mov dword ptr [ebp-0Ch],0"
);
// LINE 1284:
	asm( 
"	      00549bf0    mov dword ptr [ebp-30h],0FFFFFFFFh"
);
// LINE 1286:
	asm( 
"	      00549bf7    mov word ptr [ebp-38h],0"
);
// LINE 1287:
	asm( 
"	      00549bfd    mov dword ptr [ebp-10h],7"
);
// LINE 1288:
	asm( 
"	      00549c04    mov word ptr [ebp-3Ch],0"
);
// LINE 1291:
	asm( 
"	      00549c0a    mov eax,6C1210h"
"	      00549c0f    add eax,14h"
"	      00549c12    lea ecx,[ebp-1Ch]"
"	      00549c15    mov edx,[eax]"
"	      00549c17    mov [ecx],edx"
"	      00549c19    mov edx,[eax+4]"
"	      00549c1c    mov [ecx+4],edx"
"	      00549c1f    mov eax,[eax+8]"
"	      00549c22    mov [ecx+8],eax"
);
// LINE 1295:
	asm( 
"	      00549c25    call 0056EC50h"
"	      00549c2a    movsx ecx,word ptr ds:[5B8648h]"
"	      00549c31    movsx eax,ax"
"	      00549c34    cdq"
"	      00549c35    idiv ecx"
"	      00549c37    mov [ebp-44h],edx"
"	      00549c3a    jmp near ptr 00549D10h"
);
// LINE 1299:
	asm( 
"	      00549c3f    mov eax,[ebp-14h]"
"	      00549c42    mov [ebp-18h],eax"
);
// LINE 1300:
	asm( 
"	      00549c45    mov eax,[ebp-1Ch]"
"	      00549c48    neg eax"
"	      00549c4a    mov [ebp-14h],eax"
);
// LINE 1301:
	asm( 
"	      00549c4d    mov eax,[ebp-18h]"
"	      00549c50    mov [ebp-1Ch],eax"
);
// LINE 1303:
	asm( 
"	      00549c53    mov eax,ds:[6663A0h]"
"	      00549c58    sar eax,1"
"	      00549c5b    imul eax,[ebp-1Ch]"
"	      00549c5f    mov [ebp-1Ch],eax"
);
// LINE 1304:
	asm( 
"	      00549c62    mov eax,[ebp-14h]"
"	      00549c65    mov ecx,ds:[6663A0h]"
"	      00549c6b    sar ecx,1"
"	      00549c6e    imul eax,ecx"
"	      00549c71    mov [ebp-14h],eax"
);
// LINE 1305:
	asm( 
"	      00549c74    jmp near ptr 00549D33h"
);
// LINE 1308:
	asm( 
"	      00549c79    mov eax,[ebp-14h]"
"	      00549c7c    neg eax"
"	      00549c7e    mov [ebp-18h],eax"
);
// LINE 1309:
	asm( 
"	      00549c81    mov eax,[ebp-1Ch]"
"	      00549c84    mov [ebp-14h],eax"
);
// LINE 1310:
	asm( 
"	      00549c87    mov eax,[ebp-18h]"
"	      00549c8a    mov [ebp-1Ch],eax"
);
// LINE 1312:
	asm( 
"	      00549c8d    mov eax,ds:[6663A0h]"
"	      00549c92    sar eax,1"
"	      00549c95    imul eax,[ebp-1Ch]"
"	      00549c99    mov [ebp-1Ch],eax"
);
// LINE 1313:
	asm( 
"	      00549c9c    mov eax,[ebp-14h]"
"	      00549c9f    mov ecx,ds:[6663A0h]"
"	      00549ca5    sar ecx,1"
"	      00549ca8    imul eax,ecx"
"	      00549cab    mov [ebp-14h],eax"
);
// LINE 1314:
	asm( 
"	      00549cae    jmp near ptr 00549D33h"
);
// LINE 1317:
	asm( 
"	      00549cb3    mov eax,[ebp-1Ch]"
"	      00549cb6    neg eax"
"	      00549cb8    mov [ebp-1Ch],eax"
);
// LINE 1318:
	asm( 
"	      00549cbb    mov eax,[ebp-14h]"
"	      00549cbe    neg eax"
"	      00549cc0    mov [ebp-14h],eax"
);
// LINE 1320:
	asm( 
"	      00549cc3    mov eax,ds:[6663A0h]"
"	      00549cc8    sar eax,2"
"	      00549ccb    imul eax,[ebp-1Ch]"
"	      00549ccf    mov [ebp-1Ch],eax"
);
// LINE 1321:
	asm( 
"	      00549cd2    mov eax,ds:[6663A0h]"
"	      00549cd7    sar eax,2"
"	      00549cda    imul eax,[ebp-14h]"
"	      00549cde    mov [ebp-14h],eax"
);
// LINE 1322:
	asm( 
"	      00549ce1    jmp near ptr 00549D33h"
);
// LINE 1326:
	asm( 
"	      00549ce6    mov eax,ds:[6663A0h]"
"	      00549ceb    sar eax,1"
"	      00549cee    inc eax"
"	      00549cef    imul eax,[ebp-1Ch]"
"	      00549cf3    mov [ebp-1Ch],eax"
);
// LINE 1327:
	asm( 
"	      00549cf6    mov eax,ds:[6663A0h]"
"	      00549cfb    sar eax,1"
"	      00549cfe    inc eax"
"	      00549cff    imul eax,[ebp-14h]"
"	      00549d03    mov [ebp-14h],eax"
);
// LINE 1328:
	asm( 
"	      00549d06    jmp near ptr 00549D33h"
);
// LINE 1329:
	asm( 
"	      00549d0b    jmp near ptr 00549D33h"
"	      00549d10    cmp dword ptr [ebp-44h],0"
"	      00549d14    je near ptr 00549C3Fh"
"	      00549d1a    cmp dword ptr [ebp-44h],1"
"	      00549d1e    je near ptr 00549C79h"
"	      00549d24    cmp dword ptr [ebp-44h],2"
"	      00549d28    je near ptr 00549CB3h"
"	      00549d2e    jmp near ptr 00549CE6h"
);
// LINE 1331:
	asm( 
"	      00549d33    shl dword ptr [ebp-1Ch],6"
);
// LINE 1332:
	asm( 
"	      00549d37    shl dword ptr [ebp-14h],6"
);
// LINE 1334:
	asm( 
"	      00549d3b    mov eax,ds:[6C126Ch]"
"	      00549d40    add eax,[ebp-1Ch]"
"	      00549d43    add eax,20000000h"
"	      00549d48    sar eax,16h"
"	      00549d4b    mov [ebp-24h],eax"
);
// LINE 1335:
	asm( 
"	      00549d4e    mov eax,20000000h"
"	      00549d53    mov ecx,ds:[6C1274h]"
"	      00549d59    add ecx,[ebp-14h]"
"	      00549d5c    sub eax,ecx"
"	      00549d5e    sar eax,16h"
"	      00549d61    mov [ebp-28h],eax"
);
// LINE 1342:
	asm( 
"	      00549d64    inc dword ptr [ebp-30h]"
);
// LINE 1343:
	asm( 
"	      00549d67    mov eax,[ebp-30h]"
"	      00549d6a    mov [ebp-48h],eax"
"	      00549d6d    jmp near ptr 00549DD0h"
);
// LINE 1347:
	asm( 
"	      00549d72    mov dword ptr [ebp-30h],0"
);
// LINE 1348:
	asm( 
"	      00549d79    inc dword ptr [ebp-0Ch]"
);
// LINE 1349:
	asm( 
"	      00549d7c    mov dword ptr [ebp-4],0"
);
// LINE 1350:
	asm( 
"	      00549d83    mov dword ptr [ebp-8],0FFFFFFFFh"
);
// LINE 1351:
	asm( 
"	      00549d8a    jmp near ptr 00549DF8h"
);
// LINE 1353:
	asm( 
"	      00549d8f    mov dword ptr [ebp-4],1"
);
// LINE 1354:
	asm( 
"	      00549d96    mov dword ptr [ebp-8],0"
);
// LINE 1355:
	asm( 
"	      00549d9d    jmp near ptr 00549DF8h"
);
// LINE 1357:
	asm( 
"	      00549da2    inc dword ptr [ebp-0Ch]"
);
// LINE 1358:
	asm( 
"	      00549da5    mov dword ptr [ebp-4],0"
);
// LINE 1359:
	asm( 
"	      00549dac    mov dword ptr [ebp-8],1"
);
// LINE 1360:
	asm( 
"	      00549db3    jmp near ptr 00549DF8h"
);
// LINE 1362:
	asm( 
"	      00549db8    mov dword ptr [ebp-4],0FFFFFFFFh"
);
// LINE 1363:
	asm( 
"	      00549dbf    mov dword ptr [ebp-8],0"
);
// LINE 1364:
	asm( 
"	      00549dc6    jmp near ptr 00549DF8h"
);
// LINE 1365:
	asm( 
"	      00549dcb    jmp near ptr 00549DF8h"
"	      00549dd0    cmp dword ptr [ebp-48h],4"
"	      00549dd4    ja near ptr 00549DF8h"
"	      00549dda    mov eax,[ebp-48h]"
"	      00549ddd    jmp dword ptr [eax*4+549DE4h]"
"	      00549de4    jb short 00549D83h"
"	      00549de6    push esp"
"	      00549de7    add [edi-5DFFAB63h],cl"
"	      00549ded    popfd"
"	      00549dee    push esp"
"	      00549def    add [eax+7200549Dh],bh"
"	      00549df5    popfd"
"	      00549df6    push esp"
"	      00549df7    (bad)"
);
// LINE 1369:
	asm( 
"	      00549df8    mov eax,[ebp-10h]"
"	      00549dfb    cmp [ebp-0Ch],eax"
"	      00549dfe    jne near ptr 00549E0Dh"
);
// LINE 1371:
	asm( 
"	      00549e04    dec dword ptr [ebp-0Ch]"
);
// LINE 1372:
	asm( 
"	      00549e07    mov word ptr [ebp-38h],1"
);
// LINE 1376:
	asm( 
"	      00549e0d    mov dword ptr [ebp-2Ch],0"
"	      00549e14    jmp near ptr 00549E1Ch"
"	      00549e19    inc dword ptr [ebp-2Ch]"
"	      00549e1c    mov eax,[ebp-2Ch]"
"	      00549e1f    cmp [ebp-0Ch],eax"
"	      00549e22    jle near ptr 00549EA6h"
);
// LINE 1378:
	asm( 
"	      00549e28    lea eax,[ebp-34h]"
"	      00549e2b    push eax"
"	      00549e2c    lea eax,[ebp-20h]"
"	      00549e2f    push eax"
"	      00549e30    lea eax,[ebp-28h]"
"	      00549e33    push eax"
"	      00549e34    lea eax,[ebp-24h]"
"	      00549e37    push eax"
"	      00549e38    mov ecx,[ebp-40h]"
"	      00549e3b    call 0054D662h"
"	      00549e40    movzx eax,ax"
"	      00549e43    test eax,eax"
"	      00549e45    je near ptr 00549E95h"
);
// LINE 1381:
	asm( 
"	      00549e4b    mov eax,[ebp-34h]"
"	      00549e4e    push eax"
"	      00549e4f    mov eax,[ebp-20h]"
"	      00549e52    push eax"
"	      00549e53    mov eax,[ebp-28h]"
"	      00549e56    push eax"
"	      00549e57    mov eax,[ebp-24h]"
"	      00549e5a    push eax"
"	      00549e5b    mov ecx,[ebp-40h]"
"	      00549e5e    call 0054FD4Dh"
);
// LINE 1391:
	asm( 
"	      00549e63    movsx eax,word ptr ds:[5B8688h]"
"	      00549e6a    add eax,6"
"	      00549e6d    mov ds:[5B8688h],ax"
);
// LINE 1392:
	asm( 
"	      00549e73    movsx eax,word ptr ds:[5B8688h]"
"	      00549e7a    cmp eax,0Ch"
"	      00549e7d    jle near ptr 00549E8Ch"
);
// LINE 1393:
	asm( 
"	      00549e83    mov word ptr ds:[5B8688h],0Ch"
);
// LINE 1394:
	asm( 
"	      00549e8c    mov ax,1"
"	      00549e90    jmp near ptr 00549EFFh"
);
// LINE 1396:
	asm( 
"	      00549e95    mov eax,[ebp-4]"
"	      00549e98    add [ebp-24h],eax"
);
// LINE 1397:
	asm( 
"	      00549e9b    mov eax,[ebp-8]"
"	      00549e9e    add [ebp-28h],eax"
);
// LINE 1398:
	asm( 
"	      00549ea1    jmp near ptr 00549E19h"
);
// LINE 1400:
	asm( 
"	      00549ea6    mov eax,[ebp-38h]"
"	      00549ea9    and eax,0FFFFh"
"	      00549eae    cmp eax,1"
"	      00549eb1    jne near ptr 00549EDEh"
);
// LINE 1402:
	asm( 
"	      00549eb7    dec word ptr ds:[5B8688h]"
);
// LINE 1403:
	asm( 
"	      00549ebe    movsx eax,word ptr ds:[5B8688h]"
"	      00549ec5    test eax,eax"
"	      00549ec7    jge near ptr 00549ED6h"
);
// LINE 1404:
	asm( 
"	      00549ecd    mov word ptr ds:[5B8688h],0"
);
// LINE 1405:
	asm( 
"	      00549ed6    xor ax,ax"
"	      00549ed9    jmp near ptr 00549EFFh"
);
// LINE 1407:
	asm( 
"	      00549ede    jmp near ptr 00549D64h"
);
// LINE 1408:
	asm( 
"	      00549ee3    push 8C085h"
"	      00549ee8    push 5BA5F4h"
"	      00549eed    push 580h"
"	      00549ef2    push 5BA60Ch"
"	      00549ef7    call 00554F30h"
"	      00549efc    add esp,10h"
);
// LINE 1409:
	asm( 
"	      00549eff    pop edi"
"	      00549f00    pop esi"
"	      00549f01    pop ebx"
"	      00549f02    leave"
"	      00549f03    ret"
);
}

// FUNCTION: SIMCOPTER 0x00549f04
unsigned short cYObject::OutOfCameraRange() {
// LINE 1413:
	asm( 
"	      00549f04    push ebp"
"	      00549f05    mov ebp,esp"
"	      00549f07    sub esp,40h"
"	      00549f0a    push ebx"
"	      00549f0b    push esi"
"	      00549f0c    push edi"
"	      00549f0d    mov [ebp-40h],ecx"
);
// LINE 1414:
	asm( 
"	      00549f10    mov eax,[ebp-40h]"
"	      00549f13    movsx eax,word ptr [eax+0D8h]"
"	      00549f1a    test eax,eax"
"	      00549f1c    je near ptr 00549F3Eh"
"	      00549f22    push 8C085h"
"	      00549f27    push 5BA630h"
"	      00549f2c    push 586h"
"	      00549f31    push 5BA664h"
"	      00549f36    call 00554F30h"
"	      00549f3b    add esp,10h"
);
// LINE 1418:
	asm( 
"	      00549f3e    mov eax,[ebp-40h]"
"	      00549f41    movsx eax,word ptr [eax+0FCh]"
"	      00549f48    cmp eax,0FFFFFFFFh"
"	      00549f4b    je near ptr 00549FD2h"
);
// LINE 1420:
	asm( 
"	      00549f51    jmp near ptr 00549F56h"
"	      00549f56    mov eax,ds:[6BF188h]"
"	      00549f5b    mov ecx,[ebp-40h]"
"	      00549f5e    xor edx,edx"
"	      00549f60    mov dl,[ecx+88h]"
"	      00549f66    sub eax,edx"
"	      00549f68    movsx eax,ax"
"	      00549f6b    cdq"
"	      00549f6c    xor eax,edx"
"	      00549f6e    sub eax,edx"
"	      00549f70    movsx eax,ax"
"	      00549f73    movsx ecx,word ptr ds:[5B86A4h]"
"	      00549f7a    add ecx,ecx"
"	      00549f7c    cmp eax,ecx"
"	      00549f7e    jg near ptr 00549FB7h"
"	      00549f84    jmp near ptr 00549F89h"
"	      00549f89    mov eax,ds:[6BF18Ch]"
"	      00549f8e    mov ecx,[ebp-40h]"
"	      00549f91    xor edx,edx"
"	      00549f93    mov dl,[ecx+89h]"
"	      00549f99    sub eax,edx"
"	      00549f9b    movsx eax,ax"
"	      00549f9e    cdq"
"	      00549f9f    xor eax,edx"
"	      00549fa1    sub eax,edx"
"	      00549fa3    movsx eax,ax"
"	      00549fa6    movsx ecx,word ptr ds:[5B86A4h]"
"	      00549fad    add ecx,ecx"
"	      00549faf    cmp eax,ecx"
"	      00549fb1    jle near ptr 00549FC5h"
);
// LINE 1421:
	asm( 
"	      00549fb7    mov ax,1"
"	      00549fbb    jmp near ptr 0054A1CEh"
);
// LINE 1422:
	asm( 
"	      00549fc0    jmp near ptr 00549FCDh"
);
// LINE 1423:
	asm( 
"	      00549fc5    xor ax,ax"
"	      00549fc8    jmp near ptr 0054A1CEh"
);
// LINE 1425:
	asm( 
"	      00549fcd    jmp near ptr 0054A1CEh"
);
// LINE 1426:
	asm( 
"	      00549fd2    mov eax,ds:[6BF188h]"
"	      00549fd7    mov ecx,[ebp-40h]"
"	      00549fda    xor edx,edx"
"	      00549fdc    mov dl,[ecx+88h]"
"	      00549fe2    sub eax,edx"
"	      00549fe4    mov [ebp-24h],ax"
);
// LINE 1427:
	asm( 
"	      00549fe8    mov eax,ds:[6BF18Ch]"
"	      00549fed    mov ecx,[ebp-40h]"
"	      00549ff0    xor edx,edx"
"	      00549ff2    mov dl,[ecx+89h]"
"	      00549ff8    sub eax,edx"
"	      00549ffa    mov [ebp-28h],ax"
);
// LINE 1429:
	asm( 
"	      00549ffe    movsx eax,word ptr [ebp-24h]"
"	      0054a002    cmp eax,80h"
"	      0054a007    jle near ptr 0054A01Fh"
);
// LINE 1430:
	asm( 
"	      0054a00d    movsx eax,word ptr [ebp-24h]"
"	      0054a011    sub eax,100h"
"	      0054a016    mov [ebp-24h],ax"
"	      0054a01a    jmp near ptr 00549FFEh"
);
// LINE 1431:
	asm( 
"	      0054a01f    movsx eax,word ptr [ebp-24h]"
"	      0054a023    cmp eax,0FFFFFF80h"
"	      0054a026    jge near ptr 0054A03Eh"
);
// LINE 1432:
	asm( 
"	      0054a02c    movsx eax,word ptr [ebp-24h]"
"	      0054a030    add eax,100h"
"	      0054a035    mov [ebp-24h],ax"
"	      0054a039    jmp near ptr 0054A01Fh"
);
// LINE 1434:
	asm( 
"	      0054a03e    movsx eax,word ptr [ebp-28h]"
"	      0054a042    cmp eax,80h"
"	      0054a047    jle near ptr 0054A05Fh"
);
// LINE 1435:
	asm( 
"	      0054a04d    movsx eax,word ptr [ebp-28h]"
"	      0054a051    sub eax,100h"
"	      0054a056    mov [ebp-28h],ax"
"	      0054a05a    jmp near ptr 0054A03Eh"
);
// LINE 1436:
	asm( 
"	      0054a05f    movsx eax,word ptr [ebp-28h]"
"	      0054a063    cmp eax,0FFFFFF80h"
"	      0054a066    jge near ptr 0054A07Eh"
);
// LINE 1437:
	asm( 
"	      0054a06c    movsx eax,word ptr [ebp-28h]"
"	      0054a070    add eax,100h"
"	      0054a075    mov [ebp-28h],ax"
"	      0054a079    jmp near ptr 0054A05Fh"
);
// LINE 1439:
	asm( 
"	      0054a07e    movsx eax,word ptr [ebp-28h]"
"	      0054a082    cdq"
"	      0054a083    xor eax,edx"
"	      0054a085    sub eax,edx"
"	      0054a087    mov [ebp-2Ch],ax"
"	      0054a08b    jmp near ptr 0054A090h"
"	      0054a090    lea eax,[ebp-2Ch]"
"	      0054a093    mov [ebp-34h],eax"
"	      0054a096    movsx eax,word ptr [ebp-24h]"
"	      0054a09a    cdq"
"	      0054a09b    xor eax,edx"
"	      0054a09d    sub eax,edx"
"	      0054a09f    mov [ebp-30h],ax"
"	      0054a0a3    jmp near ptr 0054A0A8h"
"	      0054a0a8    lea eax,[ebp-30h]"
"	      0054a0ab    mov [ebp-38h],eax"
"	      0054a0ae    mov eax,[ebp-38h]"
"	      0054a0b1    movsx eax,word ptr [eax]"
"	      0054a0b4    mov ecx,[ebp-34h]"
"	      0054a0b7    movsx ecx,word ptr [ecx]"
"	      0054a0ba    cmp eax,ecx"
"	      0054a0bc    jl near ptr 0054A0CDh"
"	      0054a0c2    mov eax,[ebp-38h]"
"	      0054a0c5    mov [ebp-3Ch],eax"
"	      0054a0c8    jmp near ptr 0054A0D3h"
"	      0054a0cd    mov eax,[ebp-34h]"
"	      0054a0d0    mov [ebp-3Ch],eax"
"	      0054a0d3    jmp near ptr 0054A0D8h"
"	      0054a0d8    mov eax,[ebp-3Ch]"
"	      0054a0db    mov ax,[eax]"
"	      0054a0de    mov [ebp-24h],ax"
);
// LINE 1442:
	asm( 
"	      0054a0e2    mov eax,6C1210h"
"	      0054a0e7    add eax,14h"
"	      0054a0ea    lea ecx,[ebp-18h]"
"	      0054a0ed    mov edx,[eax]"
"	      0054a0ef    mov [ecx],edx"
"	      0054a0f1    mov edx,[eax+4]"
"	      0054a0f4    mov [ecx+4],edx"
"	      0054a0f7    mov eax,[eax+8]"
"	      0054a0fa    mov [ecx+8],eax"
);
// LINE 1443:
	asm( 
"	      0054a0fd    mov eax,[ebp-40h]"
"	      0054a100    mov eax,[eax+3Ch]"
"	      0054a103    sub eax,ds:[6C126Ch]"
"	      0054a109    mov [ebp-20h],eax"
);
// LINE 1444:
	asm( 
"	      0054a10c    mov eax,[ebp-40h]"
"	      0054a10f    mov eax,[eax+44h]"
"	      0054a112    sub eax,ds:[6C126Ch]"
"	      0054a118    mov [ebp-0Ch],eax"
);
// LINE 1445:
	asm( 
"	      0054a11b    mov word ptr [ebp-8],0"
);
// LINE 1447:
	asm( 
"	      0054a121    cmp dword ptr [ebp-20h],0"
"	      0054a125    jge near ptr 0054A135h"
"	      0054a12b    cmp dword ptr [ebp-18h],0"
"	      0054a12f    jg near ptr 0054A149h"
"	      0054a135    cmp dword ptr [ebp-20h],0"
"	      0054a139    jle near ptr 0054A177h"
"	      0054a13f    cmp dword ptr [ebp-18h],0"
"	      0054a143    jge near ptr 0054A177h"
"	      0054a149    cmp dword ptr [ebp-0Ch],0"
"	      0054a14d    jge near ptr 0054A15Dh"
"	      0054a153    cmp dword ptr [ebp-10h],0"
"	      0054a157    jg near ptr 0054A171h"
"	      0054a15d    cmp dword ptr [ebp-0Ch],0"
"	      0054a161    jle near ptr 0054A177h"
"	      0054a167    cmp dword ptr [ebp-10h],0"
"	      0054a16b    jge near ptr 0054A177h"
);
// LINE 1448:
	asm( 
"	      0054a171    mov word ptr [ebp-8],1"
);
// LINE 1449:
	asm( 
"	      0054a177    test dword ptr [ebp-8],0FFFFh"
"	      0054a17e    je near ptr 0054A18Eh"
);
// LINE 1450:
	asm( 
"	      0054a184    movsx eax,word ptr [ebp-24h]"
"	      0054a188    add eax,eax"
"	      0054a18a    mov [ebp-24h],ax"
);
// LINE 1453:
	asm( 
"	      0054a18e    mov eax,ds:[6663A0h]"
"	      0054a193    mov [ebp-1Ch],eax"
"	      0054a196    mov eax,ds:[6663A0h]"
"	      0054a19b    sar eax,2"
"	      0054a19e    mov [ebp-4],eax"
);
// LINE 1454:
	asm( 
"	      0054a1a1    mov eax,ds:[6663A0h]"
"	      0054a1a6    sar eax,1"
"	      0054a1a9    add eax,4"
"	      0054a1ac    movsx ecx,word ptr [ebp-24h]"
"	      0054a1b0    cmp eax,ecx"
"	      0054a1b2    jge near ptr 0054A1C6h"
);
// LINE 1455:
	asm( 
"	      0054a1b8    mov ax,1"
"	      0054a1bc    jmp near ptr 0054A1CEh"
);
// LINE 1456:
	asm( 
"	      0054a1c1    jmp near ptr 0054A1CEh"
);
// LINE 1457:
	asm( 
"	      0054a1c6    xor ax,ax"
"	      0054a1c9    jmp near ptr 0054A1CEh"
);
// LINE 1459:
	asm( 
"	      0054a1ce    pop edi"
"	      0054a1cf    pop esi"
"	      0054a1d0    pop ebx"
"	      0054a1d1    leave"
"	      0054a1d2    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054a1d3
short StartPerson() {
// LINE 1465:
	asm( 
"	      0054a1d3    push ebp"
"	      0054a1d4    mov ebp,esp"
"	      0054a1d6    sub esp,8"
"	      0054a1d9    push ebx"
"	      0054a1da    push esi"
"	      0054a1db    push edi"
);
// LINE 1466:
	asm( 
"	      0054a1dc    mov word ptr [ebp-8],0FFFFh"
);
// LINE 1467:
	asm( 
"	      0054a1e2    call 00547CC8h"
"	      0054a1e7    mov [ebp-4],eax"
);
// LINE 1470:
	asm( 
"	      0054a1ea    cmp dword ptr [ebp-4],0"
"	      0054a1ee    je near ptr 0054A231h"
"	      0054a1f4    mov eax,[ebp+20h]"
"	      0054a1f7    push eax"
"	      0054a1f8    mov eax,[ebp+1Ch]"
"	      0054a1fb    push eax"
"	      0054a1fc    mov eax,[ebp+18h]"
"	      0054a1ff    push eax"
"	      0054a200    mov eax,[ebp+14h]"
"	      0054a203    push eax"
"	      0054a204    mov eax,[ebp+10h]"
"	      0054a207    push eax"
"	      0054a208    mov eax,[ebp+0Ch]"
"	      0054a20b    push eax"
"	      0054a20c    mov eax,[ebp+8]"
"	      0054a20f    push eax"
"	      0054a210    mov ecx,[ebp-4]"
"	      0054a213    call 0054A7A5h"
"	      0054a218    movzx eax,ax"
"	      0054a21b    test eax,eax"
"	      0054a21d    je near ptr 0054A231h"
);
// LINE 1471:
	asm( 
"	      0054a223    mov eax,[ebp-4]"
"	      0054a226    mov ax,[eax+0BCh]"
"	      0054a22d    mov [ebp-8],ax"
);
// LINE 1472:
	asm( 
"	      0054a231    mov ax,[ebp-8]"
"	      0054a235    jmp near ptr 0054A23Ah"
);
// LINE 1473:
	asm( 
"	      0054a23a    pop edi"
"	      0054a23b    pop esi"
"	      0054a23c    pop ebx"
"	      0054a23d    leave"
"	      0054a23e    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054a23f
void LiberateMissionPeople() {
// LINE 1476:
	asm( 
"	      0054a23f    push ebp"
"	      0054a240    mov ebp,esp"
"	      0054a242    sub esp,0Ch"
"	      0054a245    push ebx"
"	      0054a246    push esi"
"	      0054a247    push edi"
);
// LINE 1477:
	asm( 
"	      0054a248    mov word ptr [ebp-4],0"
"	      0054a24e    jmp near ptr 0054A257h"
"	      0054a253    inc word ptr [ebp-4]"
"	      0054a257    movsx eax,word ptr [ebp-4]"
"	      0054a25b    cmp eax,64h"
"	      0054a25e    jge near ptr 0054A350h"
);
// LINE 1478:
	asm( 
"	      0054a264    movsx eax,word ptr [ebp-4]"
"	      0054a268    cmp eax,7D00h"
"	      0054a26d    jne near ptr 0054A280h"
"	      0054a273    mov eax,ds:[5B8680h]"
"	      0054a278    mov [ebp-8],eax"
"	      0054a27b    jmp near ptr 0054A2FCh"
"	      0054a280    movsx eax,word ptr [ebp-4]"
"	      0054a284    test eax,eax"
"	      0054a286    jl near ptr 0054A299h"
"	      0054a28c    movsx eax,word ptr [ebp-4]"
"	      0054a290    cmp eax,64h"
"	      0054a293    jl near ptr 0054A2B5h"
"	      0054a299    push 8C085h"
"	      0054a29e    push 5BB9F4h"
"	      0054a2a3    push 204h"
"	      0054a2a8    push 5BBA14h"
"	      0054a2ad    call 00554F30h"
"	      0054a2b2    add esp,10h"
"	      0054a2b5    movsx eax,word ptr [ebp-4]"
"	      0054a2b9    cmp dword ptr [eax*4+636D40h],0"
"	      0054a2c1    jne near ptr 0054A2E3h"
"	      0054a2c7    push 8C085h"
"	      0054a2cc    push 5BB9D0h"
"	      0054a2d1    push 205h"
"	      0054a2d6    push 5BBA14h"
"	      0054a2db    call 00554F30h"
"	      0054a2e0    add esp,10h"
"	      0054a2e3    movsx eax,word ptr [ebp-4]"
"	      0054a2e7    mov eax,[eax*4+636D40h]"
"	      0054a2ee    mov [ebp-8],eax"
"	      0054a2f1    jmp near ptr 0054A2FCh"
"	      0054a2f6    mov eax,[ebp-0Ch]"
"	      0054a2f9    mov [ebp-8],eax"
);
// LINE 1479:
	asm( 
"	      0054a2fc    cmp dword ptr [ebp-8],0"
"	      0054a300    jne near ptr 0054A322h"
"	      0054a306    push 8C085h"
"	      0054a30b    push 5BA688h"
"	      0054a310    push 5C7h"
"	      0054a315    push 5BA690h"
"	      0054a31a    call 00554F30h"
"	      0054a31f    add esp,10h"
);
// LINE 1480:
	asm( 
"	      0054a322    mov eax,[ebp-8]"
"	      0054a325    movsx eax,word ptr [eax+0D2h]"
"	      0054a32c    test eax,eax"
"	      0054a32e    je near ptr 0054A34Bh"
"	      0054a334    mov eax,[ebp-8]"
"	      0054a337    mov ecx,[ebp+8]"
"	      0054a33a    cmp [eax+1Ch],ecx"
"	      0054a33d    jne near ptr 0054A34Bh"
);
// LINE 1481:
	asm( 
"	      0054a343    mov ecx,[ebp-8]"
"	      0054a346    call 0054B820h"
);
// LINE 1483:
	asm( 
"	      0054a34b    jmp near ptr 0054A253h"
);
// LINE 1484:
	asm( 
"	      0054a350    jmp near ptr 0054A355h"
"	      0054a355    pop edi"
"	      0054a356    pop esi"
"	      0054a357    pop ebx"
"	      0054a358    leave"
"	      0054a359    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054a35a
void KillMissionPeople() {
// LINE 1487:
	asm( 
"	      0054a35a    push ebp"
"	      0054a35b    mov ebp,esp"
"	      0054a35d    sub esp,2Ch"
"	      0054a360    push ebx"
"	      0054a361    push esi"
"	      0054a362    push edi"
);
// LINE 1493:
	asm( 
"	      0054a363    mov eax,[ebp+8]"
"	      0054a366    mov [ebp-18h],eax"
);
// LINE 1494:
	asm( 
"	      0054a369    mov dword ptr [ebp-8],0"
);
// LINE 1495:
	asm( 
"	      0054a370    mov dword ptr [ebp-0Ch],1"
);
// LINE 1496:
	asm( 
"	      0054a377    mov dword ptr [ebp-1Ch],17h"
);
// LINE 1499:
	asm( 
"	      0054a37e    mov word ptr [ebp-4],0"
"	      0054a384    jmp near ptr 0054A38Dh"
"	      0054a389    inc word ptr [ebp-4]"
"	      0054a38d    movsx eax,word ptr [ebp-4]"
"	      0054a391    cmp eax,64h"
"	      0054a394    jge near ptr 0054A59Ah"
);
// LINE 1500:
	asm( 
"	      0054a39a    movsx eax,word ptr [ebp-4]"
"	      0054a39e    cmp eax,7D00h"
"	      0054a3a3    jne near ptr 0054A3B6h"
"	      0054a3a9    mov eax,ds:[5B8680h]"
"	      0054a3ae    mov [ebp-20h],eax"
"	      0054a3b1    jmp near ptr 0054A432h"
"	      0054a3b6    movsx eax,word ptr [ebp-4]"
"	      0054a3ba    test eax,eax"
"	      0054a3bc    jl near ptr 0054A3CFh"
"	      0054a3c2    movsx eax,word ptr [ebp-4]"
"	      0054a3c6    cmp eax,64h"
"	      0054a3c9    jl near ptr 0054A3EBh"
"	      0054a3cf    push 8C085h"
"	      0054a3d4    push 5BB9F4h"
"	      0054a3d9    push 204h"
"	      0054a3de    push 5BBA14h"
"	      0054a3e3    call 00554F30h"
"	      0054a3e8    add esp,10h"
"	      0054a3eb    movsx eax,word ptr [ebp-4]"
"	      0054a3ef    cmp dword ptr [eax*4+636D40h],0"
"	      0054a3f7    jne near ptr 0054A419h"
"	      0054a3fd    push 8C085h"
"	      0054a402    push 5BB9D0h"
"	      0054a407    push 205h"
"	      0054a40c    push 5BBA14h"
"	      0054a411    call 00554F30h"
"	      0054a416    add esp,10h"
"	      0054a419    movsx eax,word ptr [ebp-4]"
"	      0054a41d    mov eax,[eax*4+636D40h]"
"	      0054a424    mov [ebp-20h],eax"
"	      0054a427    jmp near ptr 0054A432h"
"	      0054a42c    mov eax,[ebp-28h]"
"	      0054a42f    mov [ebp-20h],eax"
);
// LINE 1501:
	asm( 
"	      0054a432    cmp dword ptr [ebp-20h],0"
"	      0054a436    jne near ptr 0054A458h"
"	      0054a43c    push 8C085h"
"	      0054a441    push 5BA6B4h"
"	      0054a446    push 5DDh"
"	      0054a44b    push 5BA6BCh"
"	      0054a450    call 00554F30h"
"	      0054a455    add esp,10h"
);
// LINE 1502:
	asm( 
"	      0054a458    mov eax,[ebp-20h]"
"	      0054a45b    movsx eax,word ptr [eax+0D2h]"
"	      0054a462    test eax,eax"
"	      0054a464    je near ptr 0054A595h"
"	      0054a46a    mov eax,[ebp-20h]"
"	      0054a46d    mov ecx,[ebp+8]"
"	      0054a470    cmp [eax+1Ch],ecx"
"	      0054a473    jne near ptr 0054A595h"
);
// LINE 1503:
	asm( 
"	      0054a479    mov word ptr [ebp-24h],0"
);
// LINE 1504:
	asm( 
"	      0054a47f    mov eax,[ebp-20h]"
"	      0054a482    movsx eax,word ptr [eax+0D8h]"
"	      0054a489    mov [ebp-2Ch],eax"
"	      0054a48c    jmp near ptr 0054A524h"
);
// LINE 1506:
	asm( 
"	      0054a491    push 8C085h"
"	      0054a496    push 5BA6E0h"
"	      0054a49b    push 5E2h"
"	      0054a4a0    push 5BA714h"
"	      0054a4a5    call 00554F30h"
"	      0054a4aa    add esp,10h"
);
// LINE 1507:
	asm( 
"	      0054a4ad    jmp near ptr 0054A53Dh"
);
// LINE 1515:
	asm( 
"	      0054a4b2    mov eax,[ebp-20h]"
"	      0054a4b5    cmp dword ptr [eax+130h],0"
"	      0054a4bc    je near ptr 0054A4FEh"
"	      0054a4c2    mov eax,[ebp-20h]"
"	      0054a4c5    mov ecx,ds:[5B4968h]"
"	      0054a4cb    mov ecx,[ecx+0A4h]"
"	      0054a4d1    cmp [eax+130h],ecx"
"	      0054a4d7    je near ptr 0054A4FEh"
"	      0054a4dd    mov eax,[ebp-20h]"
"	      0054a4e0    mov ecx,ds:[5B4968h]"
"	      0054a4e6    mov ecx,[ecx+0BCh]"
"	      0054a4ec    cmp [eax+130h],ecx"
"	      0054a4f2    je near ptr 0054A4FEh"
);
// LINE 1516:
	asm( 
"	      0054a4f8    mov word ptr [ebp-24h],1"
);
// LINE 1517:
	asm( 
"	      0054a4fe    jmp near ptr 0054A53Dh"
);
// LINE 1519:
	asm( 
"	      0054a503    push 8C085h"
"	      0054a508    push 5BA738h"
"	      0054a50d    push 5EFh"
"	      0054a512    push 5BA764h"
"	      0054a517    call 00554F30h"
"	      0054a51c    add esp,10h"
);
// LINE 1520:
	asm( 
"	      0054a51f    jmp near ptr 0054A53Dh"
"	      0054a524    cmp dword ptr [ebp-2Ch],0"
"	      0054a528    je near ptr 0054A491h"
"	      0054a52e    cmp dword ptr [ebp-2Ch],1"
"	      0054a532    je near ptr 0054A4B2h"
"	      0054a538    jmp near ptr 0054A503h"
);
// LINE 1521:
	asm( 
"	      0054a53d    test dword ptr [ebp-24h],0FFFFh"
"	      0054a544    je near ptr 0054A595h"
);
// LINE 1523:
	asm( 
"	      0054a54a    push 0"
"	      0054a54c    mov ecx,[ebp-20h]"
"	      0054a54f    call 0054CECAh"
);
// LINE 1524:
	asm( 
"	      0054a554    mov eax,[ebp-20h]"
"	      0054a557    mov eax,[eax+44h]"
"	      0054a55a    push eax"
"	      0054a55b    mov eax,[ebp-20h]"
"	      0054a55e    mov eax,[eax+40h]"
"	      0054a561    push eax"
"	      0054a562    mov eax,[ebp-20h]"
"	      0054a565    mov eax,[eax+3Ch]"
"	      0054a568    push eax"
"	      0054a569    call 00551BF7h"
"	      0054a56e    add esp,0Ch"
"	      0054a571    add eax,30000h"
"	      0054a576    mov ecx,[ebp-20h]"
"	      0054a579    mov [ecx+40h],eax"
"	      0054a57c    jmp near ptr 0054A581h"
);
// LINE 1525:
	asm( 
"	      0054a581    mov ecx,[ebp-20h]"
"	      0054a584    call 0055716Eh"
);
// LINE 1526:
	asm( 
"	      0054a589    lea eax,[ebp-1Ch]"
"	      0054a58c    push eax"
"	      0054a58d    call 004FBD4Ah"
"	      0054a592    add esp,4"
);
// LINE 1529:
	asm( 
"	      0054a595    jmp near ptr 0054A389h"
);
// LINE 1530:
	asm( 
"	      0054a59a    jmp near ptr 0054A59Fh"
"	      0054a59f    pop edi"
"	      0054a5a0    pop esi"
"	      0054a5a1    pop ebx"
"	      0054a5a2    leave"
"	      0054a5a3    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054a5a4
void cYObject::SetPersonData(enum PersonType, enum MissionType, long) {
// LINE 1533:
	asm( 
"	      0054a5a4    push ebp"
"	      0054a5a5    mov ebp,esp"
"	      0054a5a7    sub esp,4"
"	      0054a5aa    push ebx"
"	      0054a5ab    push esi"
"	      0054a5ac    push edi"
"	      0054a5ad    mov [ebp-4],ecx"
);
// LINE 1534:
	asm( 
"	      0054a5b0    mov eax,[ebp+0Ch]"
"	      0054a5b3    push eax"
"	      0054a5b4    mov ecx,[ebp-4]"
"	      0054a5b7    call 0054FE42h"
);
// LINE 1535:
	asm( 
"	      0054a5bc    mov eax,[ebp+10h]"
"	      0054a5bf    mov ecx,[ebp-4]"
"	      0054a5c2    mov [ecx+1Ch],eax"
"	      0054a5c5    cmp dword ptr [ebp+10h],0FFFFFFFFh"
"	      0054a5c9    jne near ptr 0054A623h"
"	      0054a5cf    mov eax,[ebp-4]"
"	      0054a5d2    movsx eax,word ptr [eax+0D8h]"
"	      0054a5d9    test eax,eax"
"	      0054a5db    je near ptr 0054A623h"
"	      0054a5e1    mov eax,[ebp-4]"
"	      0054a5e4    movsx eax,word ptr [eax+0D8h]"
"	      0054a5eb    cmp eax,5"
"	      0054a5ee    je near ptr 0054A623h"
"	      0054a5f4    mov eax,[ebp-4]"
"	      0054a5f7    movsx eax,word ptr [eax+0D8h]"
"	      0054a5fe    cmp eax,7"
"	      0054a601    je near ptr 0054A623h"
"	      0054a607    push 8C085h"
"	      0054a60c    push 5BBB34h"
"	      0054a611    push 2BDh"
"	      0054a616    push 5BBA14h"
"	      0054a61b    call 00554F30h"
"	      0054a620    add esp,10h"
"	      0054a623    jmp near ptr 0054A628h"
);
// LINE 1536:
	asm( 
"	      0054a628    mov eax,[ebp+8]"
"	      0054a62b    push eax"
"	      0054a62c    mov ecx,[ebp-4]"
"	      0054a62f    call 0054FFB7h"
);
// LINE 1537:
	asm( 
"	      0054a634    jmp near ptr 0054A639h"
"	      0054a639    pop edi"
"	      0054a63a    pop esi"
"	      0054a63b    pop ebx"
"	      0054a63c    leave"
"	      0054a63d    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x0054a640
unsigned short cYObject::IsSuitableForMission(enum MissionType, short, short) {
// LINE 1540:
	asm( 
"	      0054a640    push ebp"
"	      0054a641    mov ebp,esp"
"	      0054a643    sub esp,18h"
"	      0054a646    push ebx"
"	      0054a647    push esi"
"	      0054a648    push edi"
);
// LINE 1541:
	asm( 
"	      0054a649    mov word ptr [ebp-4],0"
);
// LINE 1542:
	asm( 
"	      0054a64f    cmp dword ptr [ebp+8],0"
"	      0054a653    jne near ptr 0054A664h"
"	      0054a659    mov word ptr [ebp-4],1"
);
// LINE 1543:
	asm( 
"	      0054a65f    jmp near ptr 0054A797h"
);
// LINE 1544:
	asm( 
"	      0054a664    movsx eax,word ptr [ebp+0Ch]"
"	      0054a668    cmp eax,7Fh"
"	      0054a66b    jg near ptr 0054A696h"
"	      0054a671    movsx eax,word ptr [ebp+10h]"
"	      0054a675    cmp eax,7Fh"
"	      0054a678    jg near ptr 0054A696h"
"	      0054a67e    movsx eax,word ptr [ebp+0Ch]"
"	      0054a682    test eax,eax"
"	      0054a684    jl near ptr 0054A696h"
"	      0054a68a    movsx eax,word ptr [ebp+10h]"
"	      0054a68e    test eax,eax"
"	      0054a690    jge near ptr 0054A6A1h"
"	      0054a696    mov word ptr [ebp-8],0FFFFh"
"	      0054a69c    jmp near ptr 0054A6FDh"
"	      0054a6a1    movsx eax,word ptr [ebp+0Ch]"
"	      0054a6a5    mov eax,[eax*4+639850h]"
"	      0054a6ac    movsx ecx,word ptr [ebp+10h]"
"	      0054a6b0    movzx ax,byte ptr [eax+ecx]"
"	      0054a6b5    mov [ebp-18h],ax"
"	      0054a6b9    movsx eax,word ptr [ebp-18h]"
"	      0054a6bd    test eax,eax"
"	      0054a6bf    jl near ptr 0054A6D4h"
"	      0054a6c5    movsx eax,word ptr [ebp-18h]"
"	      0054a6c9    cmp eax,100h"
"	      0054a6ce    jl near ptr 0054A6F0h"
"	      0054a6d4    push 8C085h"
"	      0054a6d9    push 5BBA34h"
"	      0054a6de    push 18Ah"
"	      0054a6e3    push 5BBA14h"
"	      0054a6e8    call 00554F30h"
"	      0054a6ed    add esp,10h"
"	      0054a6f0    mov ax,[ebp-18h]"
"	      0054a6f4    mov [ebp-8],ax"
"	      0054a6f8    jmp near ptr 0054A6FDh"
);
// LINE 1545:
	asm( 
"	      0054a6fd    movsx eax,word ptr [ebp-8]"
"	      0054a701    cmp eax,0FFFFFFFFh"
"	      0054a704    je near ptr 0054A797h"
);
// LINE 1546:
	asm( 
"	      0054a70a    movsx eax,word ptr [ebp-8]"
"	      0054a70e    push eax"
"	      0054a70f    call 0051DA5Bh"
"	      0054a714    add esp,4"
"	      0054a717    mov [ebp-0Ch],eax"
);
// LINE 1547:
	asm( 
"	      0054a71a    cmp dword ptr [ebp-0Ch],0"
"	      0054a71e    je near ptr 0054A730h"
"	      0054a724    mov eax,[ebp-0Ch]"
"	      0054a727    test byte ptr [eax],1"
"	      0054a72a    je near ptr 0054A73Bh"
);
// LINE 1548:
	asm( 
"	      0054a730    mov word ptr [ebp-4],0"
);
// LINE 1549:
	asm( 
"	      0054a736    jmp near ptr 0054A797h"
);
// LINE 1550:
	asm( 
"	      0054a73b    mov eax,[ebp+10h]"
"	      0054a73e    push eax"
"	      0054a73f    mov eax,[ebp+0Ch]"
"	      0054a742    push eax"
"	      0054a743    call 00555746h"
"	      0054a748    add esp,8"
"	      0054a74b    mov [ebp-10h],eax"
);
// LINE 1551:
	asm( 
"	      0054a74e    mov word ptr [ebp-14h],0"
"	      0054a754    jmp near ptr 0054A75Dh"
"	      0054a759    inc word ptr [ebp-14h]"
"	      0054a75d    movsx eax,word ptr [ebp-14h]"
"	      0054a761    cmp eax,0Ah"
"	      0054a764    jge near ptr 0054A797h"
);
// LINE 1552:
	asm( 
"	      0054a76a    movsx eax,word ptr [ebp-14h]"
"	      0054a76e    mov ecx,[ebp+8]"
"	      0054a771    lea ecx,[ecx+ecx*4]"
"	      0054a774    shl ecx,3"
"	      0054a777    mov edx,[ebp-10h]"
"	      0054a77a    cmp [ecx+eax*4+635300h],edx"
"	      0054a781    jne near ptr 0054A792h"
);
// LINE 1553:
	asm( 
"	      0054a787    mov word ptr [ebp-4],1"
);
// LINE 1554:
	asm( 
"	      0054a78d    jmp near ptr 0054A797h"
);
// LINE 1556:
	asm( 
"	      0054a792    jmp near ptr 0054A759h"
);
// LINE 1560:
	asm( 
"	      0054a797    mov ax,[ebp-4]"
"	      0054a79b    jmp near ptr 0054A7A0h"
);
// LINE 1561:
	asm( 
"	      0054a7a0    pop edi"
"	      0054a7a1    pop esi"
"	      0054a7a2    pop ebx"
"	      0054a7a3    leave"
"	      0054a7a4    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054a7a5
unsigned short cYObject::StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*) {
// LINE 1566:
	asm( 
"	      0054a7a5    push ebp"
"	      0054a7a6    mov ebp,esp"
"	      0054a7a8    sub esp,0ECh"
"	      0054a7ae    push ebx"
"	      0054a7af    push esi"
"	      0054a7b0    push edi"
"	      0054a7b1    mov [ebp-0E8h],ecx"
);
// LINE 1571:
	asm( 
"	      0054a7b7    cmp dword ptr [ebp+0Ch],0"
"	      0054a7bb    je near ptr 0054A7F7h"
);
// LINE 1572:
	asm( 
"	      0054a7c1    movsx eax,word ptr [ebp+10h]"
"	      0054a7c5    cmp eax,0FFFFFFFFh"
"	      0054a7c8    je near ptr 0054A7DBh"
"	      0054a7ce    movsx eax,word ptr [ebp+14h]"
"	      0054a7d2    cmp eax,0FFFFFFFFh"
"	      0054a7d5    jne near ptr 0054A7F7h"
"	      0054a7db    push 8C085h"
"	      0054a7e0    push 5BA788h"
"	      0054a7e5    push 624h"
"	      0054a7ea    push 5BA7B0h"
"	      0054a7ef    call 00554F30h"
"	      0054a7f4    add esp,10h"
);
// LINE 1574:
	asm( 
"	      0054a7f7    mov eax,[ebp-0E8h]"
"	      0054a7fd    movsx eax,word ptr [eax+0D2h]"
"	      0054a804    test eax,eax"
"	      0054a806    je near ptr 0054A828h"
"	      0054a80c    push 8C085h"
"	      0054a811    push 5BA7D4h"
"	      0054a816    push 626h"
"	      0054a81b    push 5BA808h"
"	      0054a820    call 00554F30h"
"	      0054a825    add esp,10h"
);
// LINE 1575:
	asm( 
"	      0054a828    jmp near ptr 0054A82Dh"
"	      0054a82d    mov eax,[ebp-0E8h]"
"	      0054a833    xor ecx,ecx"
"	      0054a835    mov cx,[eax+20h]"
"	      0054a839    test ecx,ecx"
"	      0054a83b    je near ptr 0054A85Dh"
"	      0054a841    push 8C085h"
"	      0054a846    push 5BA82Ch"
"	      0054a84b    push 627h"
"	      0054a850    push 5BA858h"
"	      0054a855    call 00554F30h"
"	      0054a85a    add esp,10h"
);
// LINE 1576:
	asm( 
"	      0054a85d    mov word ptr [ebp-4],0FFFFh"
);
// LINE 1577:
	asm( 
"	      0054a863    mov eax,[ebp-0E8h]"
"	      0054a869    cmp dword ptr [eax+90h],0"
"	      0054a870    jne near ptr 0054A892h"
"	      0054a876    push 8C085h"
"	      0054a87b    push 5BA87Ch"
"	      0054a880    push 629h"
"	      0054a885    push 5BA890h"
"	      0054a88a    call 00554F30h"
"	      0054a88f    add esp,10h"
);
// LINE 1578:
	asm( 
"	      0054a892    mov eax,[ebp-0E8h]"
"	      0054a898    cmp dword ptr [eax+98h],0"
"	      0054a89f    jne near ptr 0054A956h"
);
// LINE 1579:
	asm( 
"	      0054a8a5    mov eax,[ebp-0E8h]"
"	      0054a8ab    cmp dword ptr [eax+90h],0"
"	      0054a8b2    jne near ptr 0054A8D4h"
"	      0054a8b8    push 8C085h"
"	      0054a8bd    push 5BBB9Ch"
"	      0054a8c2    push 2F8h"
"	      0054a8c7    push 5BBA14h"
"	      0054a8cc    call 00554F30h"
"	      0054a8d1    add esp,10h"
"	      0054a8d4    mov eax,[ebp-0E8h]"
"	      0054a8da    cmp dword ptr [eax+98h],0"
"	      0054a8e1    je near ptr 0054A900h"
"	      0054a8e7    mov eax,[ebp-0E8h]"
"	      0054a8ed    mov eax,[eax+98h]"
"	      0054a8f3    cmp dword ptr [eax+1Ch],4E6F4D6Fh"
"	      0054a8fa    je near ptr 0054A951h"
"	      0054a900    push 4E6F4D6Fh"
"	      0054a905    mov eax,[ebp-0E8h]"
"	      0054a90b    mov ecx,[eax+90h]"
"	      0054a911    call 00560BF0h"
"	      0054a916    mov ecx,[ebp-0E8h]"
"	      0054a91c    mov [ecx+98h],eax"
"	      0054a922    mov eax,[ebp-0E8h]"
"	      0054a928    cmp dword ptr [eax+98h],0"
"	      0054a92f    jne near ptr 0054A951h"
"	      0054a935    push 8C085h"
"	      0054a93a    push 5BBB74h"
"	      0054a93f    push 2FBh"
"	      0054a944    push 5BBA14h"
"	      0054a949    call 00554F30h"
"	      0054a94e    add esp,10h"
"	      0054a951    jmp near ptr 0054A956h"
);
// LINE 1580:
	asm( 
"	      0054a956    mov eax,[ebp-0E8h]"
"	      0054a95c    mov word ptr [eax+9Ch],0FFFFh"
);
// LINE 1581:
	asm( 
"	      0054a965    mov eax,[ebp+0Ch]"
"	      0054a968    mov [ebp-0ECh],eax"
"	      0054a96e    jmp near ptr 0054B505h"
);
// LINE 1583:
	asm( 
"	      0054a973    cmp dword ptr [ebp+20h],0"
"	      0054a977    jne near ptr 0054A987h"
"	      0054a97d    cmp dword ptr [ebp+1Ch],0"
"	      0054a981    je near ptr 0054A9A3h"
"	      0054a987    push 8C085h"
"	      0054a98c    push 5BA8B4h"
"	      0054a991    push 62Fh"
"	      0054a996    push 5BA8C8h"
"	      0054a99b    call 00554F30h"
"	      0054a9a0    add esp,10h"
);
// LINE 1585:
	asm( 
"	      0054a9a3    mov word ptr [ebp-0Ch],0"
);
// LINE 1586:
	asm( 
"	      0054a9a9    mov eax,[ebp-0E8h]"
"	      0054a9af    mov word ptr [eax+0E0h],7"
);
// LINE 1587:
	asm( 
"	      0054a9b8    mov eax,[ebp-0E8h]"
"	      0054a9be    movsx eax,word ptr [eax+0E0h]"
"	      0054a9c5    cmp eax,5"
"	      0054a9c8    jle near ptr 0054A9EEh"
"	      0054a9ce    push 20000h"
"	      0054a9d3    push 50000h"
"	      0054a9d8    call 004D19DFh"
"	      0054a9dd    add esp,8"
"	      0054a9e0    mov ecx,[ebp-0E8h]"
"	      0054a9e6    mov [ecx+34h],eax"
"	      0054a9e9    jmp near ptr 0054A9FBh"
"	      0054a9ee    mov eax,[ebp-0E8h]"
"	      0054a9f4    mov dword ptr [eax+34h],50000h"
"	      0054a9fb    jmp near ptr 0054AA00h"
);
// LINE 1588:
	asm( 
"	      0054aa00    mov word ptr [ebp-8],0"
"	      0054aa06    jmp near ptr 0054AA0Fh"
"	      0054aa0b    inc word ptr [ebp-8]"
"	      0054aa0f    movsx eax,word ptr [ebp-8]"
"	      0054aa13    cmp eax,4"
"	      0054aa16    jge near ptr 0054AAA5h"
);
// LINE 1589:
	asm( 
"	      0054aa1c    mov eax,[ebp+14h]"
"	      0054aa1f    push eax"
"	      0054aa20    mov eax,[ebp+10h]"
"	      0054aa23    push eax"
"	      0054aa24    call 00555746h"
"	      0054aa29    add esp,8"
"	      0054aa2c    mov [ebp-18h],eax"
);
// LINE 1591:
	asm( 
"	      0054aa2f    mov eax,[ebp+14h]"
"	      0054aa32    push eax"
"	      0054aa33    mov eax,[ebp+10h]"
"	      0054aa36    push eax"
"	      0054aa37    mov eax,[ebp+0Ch]"
"	      0054aa3a    push eax"
"	      0054aa3b    call 0054A640h"
"	      0054aa40    add esp,0Ch"
"	      0054aa43    movzx eax,ax"
"	      0054aa46    test eax,eax"
"	      0054aa48    je near ptr 0054AAA0h"
"	      0054aa4e    mov eax,[ebp-18h]"
"	      0054aa51    mov eax,[eax*8+635268h]"
"	      0054aa58    push eax"
"	      0054aa59    lea eax,[ebp-14h]"
"	      0054aa5c    push eax"
"	      0054aa5d    lea eax,[ebp-10h]"
"	      0054aa60    push eax"
"	      0054aa61    movsx eax,word ptr [ebp+10h]"
"	      0054aa65    and eax,0FFh"
"	      0054aa6a    shl eax,0Ah"
"	      0054aa6d    movsx ecx,word ptr [ebp+14h]"
"	      0054aa71    and ecx,0FFh"
"	      0054aa77    mov eax,[eax+ecx*4+67ED30h]"
"	      0054aa7e    push eax"
"	      0054aa7f    mov ecx,[ebp-0E8h]"
"	      0054aa85    call 00545049h"
"	      0054aa8a    movzx eax,ax"
"	      0054aa8d    test eax,eax"
"	      0054aa8f    je near ptr 0054AAA0h"
);
// LINE 1592:
	asm( 
"	      0054aa95    mov word ptr [ebp-0Ch],1"
);
// LINE 1593:
	asm( 
"	      0054aa9b    jmp near ptr 0054AAA5h"
);
// LINE 1595:
	asm( 
"	      0054aaa0    jmp near ptr 0054AA0Bh"
);
// LINE 1596:
	asm( 
"	      0054aaa5    test dword ptr [ebp-0Ch],0FFFFh"
"	      0054aaac    je near ptr 0054AB43h"
);
// LINE 1597:
	asm( 
"	      0054aab2    mov eax,[ebp-14h]"
"	      0054aab5    push eax"
"	      0054aab6    mov eax,[ebp-10h]"
"	      0054aab9    push eax"
"	      0054aaba    mov eax,[ebp+14h]"
"	      0054aabd    push eax"
"	      0054aabe    mov eax,[ebp+10h]"
"	      0054aac1    push eax"
"	      0054aac2    mov ecx,[ebp-0E8h]"
"	      0054aac8    call 0054FD4Dh"
);
// LINE 1598:
	asm( 
"	      0054aacd    mov eax,[ebp+8]"
"	      0054aad0    push eax"
"	      0054aad1    mov ecx,[ebp-0E8h]"
"	      0054aad7    call 0054FFB7h"
);
// LINE 1599:
	asm( 
"	      0054aadc    mov ecx,[ebp-0E8h]"
"	      0054aae2    call 0054B9E6h"
"	      0054aae7    mov [ebp-1Ch],eax"
);
// LINE 1600:
	asm( 
"	      0054aaea    cmp dword ptr [ebp-1Ch],0FFFFFFFFh"
"	      0054aaee    jne near ptr 0054AB10h"
"	      0054aaf4    push 8C085h"
"	      0054aaf9    push 5BA8ECh"
"	      0054aafe    push 640h"
"	      0054ab03    push 5BA910h"
"	      0054ab08    call 00554F30h"
"	      0054ab0d    add esp,10h"
);
// LINE 1601:
	asm( 
"	      0054ab10    mov eax,[ebp-1Ch]"
"	      0054ab13    cmp [ebp+18h],eax"
"	      0054ab16    je near ptr 0054AB38h"
"	      0054ab1c    push 8C085h"
"	      0054ab21    push 5BA934h"
"	      0054ab26    push 641h"
"	      0054ab2b    push 5BA978h"
"	      0054ab30    call 00554F30h"
"	      0054ab35    add esp,10h"
);
// LINE 1602:
	asm( 
"	      0054ab38    mov word ptr [ebp-4],1"
);
// LINE 1604:
	asm( 
"	      0054ab3e    jmp near ptr 0054AB49h"
);
// LINE 1605:
	asm( 
"	      0054ab43    mov word ptr [ebp-4],0"
);
// LINE 1606:
	asm( 
"	      0054ab49    jmp near ptr 0054B53Bh"
);
// LINE 1609:
	asm( 
"	      0054ab4e    mov eax,[ebp+0Ch]"
"	      0054ab51    push eax"
"	      0054ab52    mov ecx,[ebp-0E8h]"
"	      0054ab58    call 0054FE42h"
);
// LINE 1610:
	asm( 
"	      0054ab5d    mov eax,[ebp+18h]"
"	      0054ab60    mov ecx,[ebp-0E8h]"
"	      0054ab66    mov [ecx+1Ch],eax"
"	      0054ab69    cmp dword ptr [ebp+18h],0FFFFFFFFh"
"	      0054ab6d    jne near ptr 0054ABD0h"
"	      0054ab73    mov eax,[ebp-0E8h]"
"	      0054ab79    movsx eax,word ptr [eax+0D8h]"
"	      0054ab80    test eax,eax"
"	      0054ab82    je near ptr 0054ABD0h"
"	      0054ab88    mov eax,[ebp-0E8h]"
"	      0054ab8e    movsx eax,word ptr [eax+0D8h]"
"	      0054ab95    cmp eax,5"
"	      0054ab98    je near ptr 0054ABD0h"
"	      0054ab9e    mov eax,[ebp-0E8h]"
"	      0054aba4    movsx eax,word ptr [eax+0D8h]"
"	      0054abab    cmp eax,7"
"	      0054abae    je near ptr 0054ABD0h"
"	      0054abb4    push 8C085h"
"	      0054abb9    push 5BBB34h"
"	      0054abbe    push 2BDh"
"	      0054abc3    push 5BBA14h"
"	      0054abc8    call 00554F30h"
"	      0054abcd    add esp,10h"
"	      0054abd0    jmp near ptr 0054ABD5h"
);
// LINE 1611:
	asm( 
"	      0054abd5    mov eax,[ebp+8]"
"	      0054abd8    push eax"
"	      0054abd9    mov ecx,[ebp-0E8h]"
"	      0054abdf    call 0054FFB7h"
);
// LINE 1612:
	asm( 
"	      0054abe4    cmp dword ptr [ebp+20h],0"
"	      0054abe8    je near ptr 0054AC2Bh"
);
// LINE 1613:
	asm( 
"	      0054abee    mov eax,[ebp+1Ch]"
"	      0054abf1    push eax"
"	      0054abf2    mov ecx,[ebp-0E8h]"
"	      0054abf8    call 0054CECAh"
);
// LINE 1614:
	asm( 
"	      0054abfd    push 0FFh"
"	      0054ac02    push 0FFh"
"	      0054ac07    mov eax,[ebp+20h]"
"	      0054ac0a    mov ecx,[eax+8]"
"	      0054ac0d    push ecx"
"	      0054ac0e    mov ecx,[eax+4]"
"	      0054ac11    push ecx"
"	      0054ac12    mov eax,[eax]"
"	      0054ac14    push eax"
"	      0054ac15    mov ecx,[ebp-0E8h]"
"	      0054ac1b    call 0054FC2Eh"
);
// LINE 1615:
	asm( 
"	      0054ac20    mov word ptr [ebp-4],1"
);
// LINE 1617:
	asm( 
"	      0054ac26    jmp near ptr 0054ACB0h"
);
// LINE 1622:
	asm( 
"	      0054ac2b    movsx eax,word ptr ds:[5B8678h]"
"	      0054ac32    movsx ecx,word ptr ds:[5B8674h]"
"	      0054ac39    cmp eax,ecx"
"	      0054ac3b    jle near ptr 0054ACAAh"
"	      0054ac41    mov eax,0Ch"
"	      0054ac46    movsx ecx,word ptr ds:[5B8688h]"
"	      0054ac4d    sub eax,ecx"
"	      0054ac4f    inc eax"
"	      0054ac50    push eax"
"	      0054ac51    call 0055D717h"
"	      0054ac56    add esp,4"
"	      0054ac59    movzx eax,ax"
"	      0054ac5c    cmp eax,3"
"	      0054ac5f    jge near ptr 0054AC6Fh"
"	      0054ac65    jmp near ptr 0054AC89h"
"	      0054ac6a    jmp near ptr 0054AC79h"
"	      0054ac6f    jmp near ptr 0054ACAAh"
"	      0054ac74    jmp near ptr 0054AC89h"
"	      0054ac79    test dword ptr [ebp-84h],0FFFFh"
"	      0054ac83    je near ptr 0054ACAAh"
"	      0054ac89    mov ecx,[ebp-0E8h]"
"	      0054ac8f    call 00549BDDh"
"	      0054ac94    movzx eax,ax"
"	      0054ac97    test eax,eax"
"	      0054ac99    je near ptr 0054ACAAh"
);
// LINE 1623:
	asm( 
"	      0054ac9f    mov word ptr [ebp-4],1"
);
// LINE 1624:
	asm( 
"	      0054aca5    jmp near ptr 0054ACB0h"
);
// LINE 1625:
	asm( 
"	      0054acaa    mov word ptr [ebp-4],0"
);
// LINE 1628:
	asm( 
"	      0054acb0    cmp dword ptr [ebp+18h],0FFFFFFFFh"
"	      0054acb4    je near ptr 0054ACD6h"
"	      0054acba    push 8C085h"
"	      0054acbf    push 5BA99Ch"
"	      0054acc4    push 65Ch"
"	      0054acc9    push 5BA9CCh"
"	      0054acce    call 00554F30h"
"	      0054acd3    add esp,10h"
);
// LINE 1629:
	asm( 
"	      0054acd6    jmp near ptr 0054B53Bh"
);
// LINE 1632:
	asm( 
"	      0054acdb    cmp dword ptr [ebp+20h],0"
"	      0054acdf    jne near ptr 0054AD01h"
"	      0054ace5    push 8C085h"
"	      0054acea    push 5BA9F0h"
"	      0054acef    push 660h"
"	      0054acf4    push 5BAA0Ch"
"	      0054acf9    call 00554F30h"
"	      0054acfe    add esp,10h"
);
// LINE 1634:
	asm( 
"	      0054ad01    mov word ptr [ebp-4],0"
);
// LINE 1635:
	asm( 
"	      0054ad07    push 0"
"	      0054ad09    push 0"
"	      0054ad0b    push 20000h"
"	      0054ad10    mov eax,[ebp-0E8h]"
"	      0054ad16    mov eax,[eax+34h]"
"	      0054ad19    push eax"
"	      0054ad1a    call 004D19BDh"
"	      0054ad1f    add esp,8"
"	      0054ad22    push eax"
"	      0054ad23    mov eax,[ebp+20h]"
"	      0054ad26    mov ecx,[eax+8]"
"	      0054ad29    push ecx"
"	      0054ad2a    mov ecx,[eax+4]"
"	      0054ad2d    push ecx"
"	      0054ad2e    mov eax,[eax]"
"	      0054ad30    push eax"
"	      0054ad31    push 0"
"	      0054ad33    call 00555369h"
"	      0054ad38    add esp,1Ch"
"	      0054ad3b    test eax,eax"
"	      0054ad3d    jne near ptr 0054ADCEh"
);
// LINE 1637:
	asm( 
"	      0054ad43    cmp dword ptr [ebp+1Ch],0"
"	      0054ad47    je near ptr 0054AD7Ah"
"	      0054ad4d    mov eax,[ebp+1Ch]"
"	      0054ad50    movsx eax,word ptr [eax+0Ch]"
"	      0054ad54    test al,10h"
"	      0054ad56    je near ptr 0054AD7Ah"
"	      0054ad5c    mov eax,[ebp+1Ch]"
"	      0054ad5f    mov ax,[eax+0Eh]"
"	      0054ad63    mov ecx,[ebp-0E8h]"
"	      0054ad69    mov [ecx+100h],ax"
"	      0054ad70    jmp near ptr 0054AD8Eh"
"	      0054ad75    jmp near ptr 0054AD8Eh"
"	      0054ad7a    mov eax,[ebp-0E8h]"
"	      0054ad80    mov word ptr [eax+100h],0FFFFh"
"	      0054ad89    jmp near ptr 0054AD8Eh"
);
// LINE 1638:
	asm( 
"	      0054ad8e    push 0FFh"
"	      0054ad93    push 0FFh"
"	      0054ad98    mov eax,[ebp+20h]"
"	      0054ad9b    mov ecx,[eax+8]"
"	      0054ad9e    push ecx"
"	      0054ad9f    mov ecx,[eax+4]"
"	      0054ada2    push ecx"
"	      0054ada3    mov eax,[eax]"
"	      0054ada5    push eax"
"	      0054ada6    mov ecx,[ebp-0E8h]"
"	      0054adac    call 0054FC2Eh"
);
// LINE 1639:
	asm( 
"	      0054adb1    mov eax,[ebp+18h]"
"	      0054adb4    push eax"
"	      0054adb5    mov eax,[ebp+0Ch]"
"	      0054adb8    push eax"
"	      0054adb9    mov eax,[ebp+8]"
"	      0054adbc    push eax"
"	      0054adbd    mov ecx,[ebp-0E8h]"
"	      0054adc3    call 0054A5A4h"
);
// LINE 1640:
	asm( 
"	      0054adc8    mov word ptr [ebp-4],1"
);
// LINE 1642:
	asm( 
"	      0054adce    jmp near ptr 0054B53Bh"
);
// LINE 1646:
	asm( 
"	      0054add3    cmp dword ptr [ebp+20h],0"
"	      0054add7    jne near ptr 0054ADE7h"
"	      0054addd    cmp dword ptr [ebp+1Ch],0"
"	      0054ade1    je near ptr 0054AE03h"
"	      0054ade7    push 8C085h"
"	      0054adec    push 5BAA30h"
"	      0054adf1    push 66Eh"
"	      0054adf6    push 5BAA74h"
"	      0054adfb    call 00554F30h"
"	      0054ae00    add esp,10h"
);
// LINE 1648:
	asm( 
"	      0054ae03    mov word ptr [ebp-4],0"
);
// LINE 1649:
	asm( 
"	      0054ae09    mov word ptr [ebp-20h],0"
"	      0054ae0f    jmp near ptr 0054AE18h"
"	      0054ae14    inc word ptr [ebp-20h]"
"	      0054ae18    movsx eax,word ptr [ebp-20h]"
"	      0054ae1c    cmp eax,4"
"	      0054ae1f    jge near ptr 0054B0CAh"
);
// LINE 1650:
	asm( 
"	      0054ae25    mov eax,[ebp+14h]"
"	      0054ae28    push eax"
"	      0054ae29    mov eax,[ebp+10h]"
"	      0054ae2c    push eax"
"	      0054ae2d    call 00555746h"
"	      0054ae32    add esp,8"
"	      0054ae35    mov [ebp-2Ch],eax"
);
// LINE 1653:
	asm( 
"	      0054ae38    mov eax,[ebp+14h]"
"	      0054ae3b    push eax"
"	      0054ae3c    mov eax,[ebp+10h]"
"	      0054ae3f    push eax"
"	      0054ae40    mov eax,[ebp+0Ch]"
"	      0054ae43    push eax"
"	      0054ae44    call 0054A640h"
"	      0054ae49    add esp,0Ch"
"	      0054ae4c    movzx eax,ax"
"	      0054ae4f    test eax,eax"
"	      0054ae51    je near ptr 0054B0A2h"
"	      0054ae57    mov eax,[ebp-2Ch]"
"	      0054ae5a    mov eax,[eax*8+635268h]"
"	      0054ae61    push eax"
"	      0054ae62    lea eax,[ebp-28h]"
"	      0054ae65    push eax"
"	      0054ae66    lea eax,[ebp-24h]"
"	      0054ae69    push eax"
"	      0054ae6a    movsx eax,word ptr [ebp+10h]"
"	      0054ae6e    and eax,0FFh"
"	      0054ae73    shl eax,0Ah"
"	      0054ae76    movsx ecx,word ptr [ebp+14h]"
"	      0054ae7a    and ecx,0FFh"
"	      0054ae80    mov eax,[eax+ecx*4+67ED30h]"
"	      0054ae87    push eax"
"	      0054ae88    mov ecx,[ebp-0E8h]"
"	      0054ae8e    call 00545049h"
"	      0054ae93    movzx eax,ax"
"	      0054ae96    test eax,eax"
"	      0054ae98    je near ptr 0054B0A2h"
);
// LINE 1656:
	asm( 
"	      0054ae9e    mov word ptr [ebp-34h],0FFFFh"
);
// LINE 1657:
	asm( 
"	      0054aea4    mov word ptr [ebp-30h],0FFFFh"
);
// LINE 1658:
	asm( 
"	      0054aeaa    mov word ptr [ebp-50h],0"
);
// LINE 1659:
	asm( 
"	      0054aeb0    cmp dword ptr [ebp+0Ch],4"
"	      0054aeb4    jne near ptr 0054AFC6h"
);
// LINE 1660:
	asm( 
"	      0054aeba    mov eax,[ebp+18h]"
"	      0054aebd    push eax"
"	      0054aebe    call 004FBB76h"
"	      0054aec3    add esp,4"
"	      0054aec6    mov eax,[eax]"
"	      0054aec8    mov [ebp-34h],ax"
);
// LINE 1661:
	asm( 
"	      0054aecc    mov eax,[ebp+18h]"
"	      0054aecf    push eax"
"	      0054aed0    call 004FBB76h"
"	      0054aed5    add esp,4"
"	      0054aed8    mov eax,[eax+4]"
"	      0054aedb    mov [ebp-30h],ax"
);
// LINE 1662:
	asm( 
"	      0054aedf    mov word ptr [ebp-54h],0"
"	      0054aee5    jmp near ptr 0054AEEEh"
"	      0054aeea    inc word ptr [ebp-54h]"
"	      0054aeee    movsx eax,word ptr [ebp-54h]"
"	      0054aef2    cmp eax,0Ah"
"	      0054aef5    jge near ptr 0054AFC1h"
);
// LINE 1663:
	asm( 
"	      0054aefb    mov eax,[ebp-30h]"
"	      0054aefe    push eax"
"	      0054aeff    mov eax,[ebp-34h]"
"	      0054af02    push eax"
"	      0054af03    call 00555746h"
"	      0054af08    add esp,8"
"	      0054af0b    mov [ebp-58h],eax"
);
// LINE 1665:
	asm( 
"	      0054af0e    jmp near ptr 0054AF13h"
"	      0054af13    jmp near ptr 0054AF18h"
"	      0054af18    movsx eax,word ptr [ebp-30h]"
"	      0054af1c    movsx ecx,word ptr [ebp+14h]"
"	      0054af20    sub eax,ecx"
"	      0054af22    movsx eax,ax"
"	      0054af25    cdq"
"	      0054af26    xor eax,edx"
"	      0054af28    sub eax,edx"
"	      0054af2a    movsx ecx,ax"
"	      0054af2d    movsx eax,word ptr [ebp-34h]"
"	      0054af31    movsx edx,word ptr [ebp+10h]"
"	      0054af35    sub eax,edx"
"	      0054af37    movsx eax,ax"
"	      0054af3a    cdq"
"	      0054af3b    xor eax,edx"
"	      0054af3d    sub eax,edx"
"	      0054af3f    movsx eax,ax"
"	      0054af42    add ecx,eax"
"	      0054af44    cmp ecx,10h"
"	      0054af47    jle near ptr 0054AF7Ch"
"	      0054af4d    mov eax,[ebp-30h]"
"	      0054af50    push eax"
"	      0054af51    mov eax,[ebp-34h]"
"	      0054af54    push eax"
"	      0054af55    mov eax,[ebp+0Ch]"
"	      0054af58    push eax"
"	      0054af59    call 0054A640h"
"	      0054af5e    add esp,0Ch"
"	      0054af61    movzx eax,ax"
"	      0054af64    test eax,eax"
"	      0054af66    je near ptr 0054AF7Ch"
);
// LINE 1666:
	asm( 
"	      0054af6c    mov word ptr [ebp-50h],1"
);
// LINE 1667:
	asm( 
"	      0054af72    jmp near ptr 0054AFC1h"
);
// LINE 1669:
	asm( 
"	      0054af77    jmp near ptr 0054AFBCh"
);
// LINE 1670:
	asm( 
"	      0054af7c    movsx eax,word ptr [ebp-20h]"
"	      0054af80    cdq"
"	      0054af81    xor eax,edx"
"	      0054af83    sub eax,edx"
"	      0054af85    and eax,1"
"	      0054af88    xor eax,edx"
"	      0054af8a    sub eax,edx"
"	      0054af8c    jne near ptr 0054AF9Bh"
);
// LINE 1671:
	asm( 
"	      0054af92    dec word ptr [ebp-34h]"
);
// LINE 1672:
	asm( 
"	      0054af96    jmp near ptr 0054AF9Fh"
);
// LINE 1673:
	asm( 
"	      0054af9b    dec word ptr [ebp-30h]"
);
// LINE 1674:
	asm( 
"	      0054af9f    movsx eax,word ptr [ebp-34h]"
"	      0054afa3    test eax,eax"
"	      0054afa5    jl near ptr 0054AFB7h"
"	      0054afab    movsx eax,word ptr [ebp-30h]"
"	      0054afaf    test eax,eax"
"	      0054afb1    jge near ptr 0054AFBCh"
"	      0054afb7    jmp near ptr 0054AFC1h"
);
// LINE 1676:
	asm( 
"	      0054afbc    jmp near ptr 0054AEEAh"
);
// LINE 1678:
	asm( 
"	      0054afc1    jmp near ptr 0054AFCCh"
);
// LINE 1694:
	asm( 
"	      0054afc6    mov word ptr [ebp-50h],1"
);
// LINE 1697:
	asm( 
"	      0054afcc    test dword ptr [ebp-50h],0FFFFh"
"	      0054afd3    jne near ptr 0054AFDEh"
"	      0054afd9    jmp near ptr 0054B0CAh"
);
// LINE 1700:
	asm( 
"	      0054afde    mov eax,[ebp-28h]"
"	      0054afe1    push eax"
"	      0054afe2    mov eax,[ebp-24h]"
"	      0054afe5    push eax"
"	      0054afe6    mov eax,[ebp+14h]"
"	      0054afe9    push eax"
"	      0054afea    mov eax,[ebp+10h]"
"	      0054afed    push eax"
"	      0054afee    mov ecx,[ebp-0E8h]"
"	      0054aff4    call 0054FD4Dh"
);
// LINE 1701:
	asm( 
"	      0054aff9    mov eax,[ebp+18h]"
"	      0054affc    push eax"
"	      0054affd    mov eax,[ebp+0Ch]"
"	      0054b000    push eax"
"	      0054b001    mov eax,[ebp+8]"
"	      0054b004    push eax"
"	      0054b005    mov ecx,[ebp-0E8h]"
"	      0054b00b    call 0054A5A4h"
);
// LINE 1704:
	asm( 
"	      0054b010    mov eax,[ebp+18h]"
"	      0054b013    mov [ebp-48h],eax"
);
// LINE 1705:
	asm( 
"	      0054b016    cmp dword ptr [ebp+0Ch],4"
"	      0054b01a    jne near ptr 0054B02Ch"
);
// LINE 1706:
	asm( 
"	      0054b020    mov dword ptr [ebp-4Ch],1Eh"
);
// LINE 1707:
	asm( 
"	      0054b027    jmp near ptr 0054B033h"
);
// LINE 1708:
	asm( 
"	      0054b02c    mov dword ptr [ebp-4Ch],0"
);
// LINE 1709:
	asm( 
"	      0054b033    mov eax,[ebp-0E8h]"
"	      0054b039    xor ecx,ecx"
"	      0054b03b    mov cl,[eax+88h]"
"	      0054b041    mov [ebp-44h],ecx"
);
// LINE 1710:
	asm( 
"	      0054b044    mov eax,[ebp-0E8h]"
"	      0054b04a    xor ecx,ecx"
"	      0054b04c    mov cl,[eax+89h]"
"	      0054b052    mov [ebp-40h],ecx"
);
// LINE 1711:
	asm( 
"	      0054b055    lea eax,[ebp-4Ch]"
"	      0054b058    push eax"
"	      0054b059    call 004FBD4Ah"
"	      0054b05e    add esp,4"
);
// LINE 1714:
	asm( 
"	      0054b061    cmp dword ptr [ebp+0Ch],4"
"	      0054b065    jne near ptr 0054B092h"
);
// LINE 1716:
	asm( 
"	      0054b06b    mov eax,[ebp+18h]"
"	      0054b06e    mov [ebp-48h],eax"
);
// LINE 1717:
	asm( 
"	      0054b071    mov dword ptr [ebp-4Ch],0"
);
// LINE 1718:
	asm( 
"	      0054b078    movsx eax,word ptr [ebp-34h]"
"	      0054b07c    mov [ebp-44h],eax"
);
// LINE 1719:
	asm( 
"	      0054b07f    movsx eax,word ptr [ebp-30h]"
"	      0054b083    mov [ebp-40h],eax"
);
// LINE 1720:
	asm( 
"	      0054b086    lea eax,[ebp-4Ch]"
"	      0054b089    push eax"
"	      0054b08a    call 004FBD4Ah"
"	      0054b08f    add esp,4"
);
// LINE 1724:
	asm( 
"	      0054b092    mov word ptr [ebp-4],1"
);
// LINE 1725:
	asm( 
"	      0054b098    jmp near ptr 0054B0CAh"
);
// LINE 1727:
	asm( 
"	      0054b09d    jmp near ptr 0054B0C5h"
);
// LINE 1728:
	asm( 
"	      0054b0a2    movsx eax,word ptr [ebp-20h]"
"	      0054b0a6    cdq"
"	      0054b0a7    xor eax,edx"
"	      0054b0a9    sub eax,edx"
"	      0054b0ab    and eax,1"
"	      0054b0ae    xor eax,edx"
"	      0054b0b0    sub eax,edx"
"	      0054b0b2    jne near ptr 0054B0C1h"
);
// LINE 1729:
	asm( 
"	      0054b0b8    inc word ptr [ebp+10h]"
);
// LINE 1730:
	asm( 
"	      0054b0bc    jmp near ptr 0054B0C5h"
);
// LINE 1731:
	asm( 
"	      0054b0c1    inc word ptr [ebp+14h]"
);
// LINE 1733:
	asm( 
"	      0054b0c5    jmp near ptr 0054AE14h"
);
// LINE 1734:
	asm( 
"	      0054b0ca    jmp near ptr 0054B53Bh"
);
// LINE 1737:
	asm( 
"	      0054b0cf    mov word ptr [ebp-4],0"
);
// LINE 1738:
	asm( 
"	      0054b0d5    movsx eax,word ptr [ebp+10h]"
"	      0054b0d9    and eax,0FFh"
"	      0054b0de    shl eax,0Ah"
"	      0054b0e1    movsx ecx,word ptr [ebp+14h]"
"	      0054b0e5    and ecx,0FFh"
"	      0054b0eb    mov eax,[eax+ecx*4+67ED30h]"
"	      0054b0f2    movsx eax,word ptr [eax]"
"	      0054b0f5    test al,20h"
"	      0054b0f7    jne near ptr 0054B119h"
"	      0054b0fd    push 8C085h"
"	      0054b102    push 5BAA98h"
"	      0054b107    push 6CAh"
"	      0054b10c    push 5BAAC0h"
"	      0054b111    call 00554F30h"
"	      0054b116    add esp,10h"
);
// LINE 1739:
	asm( 
"	      0054b119    cmp dword ptr [ebp+20h],0"
"	      0054b11d    je near ptr 0054B13Fh"
"	      0054b123    push 8C085h"
"	      0054b128    push 5BAAE4h"
"	      0054b12d    push 6CBh"
"	      0054b132    push 5BAB2Ch"
"	      0054b137    call 00554F30h"
"	      0054b13c    add esp,10h"
);
// LINE 1740:
	asm( 
"	      0054b13f    cmp dword ptr [ebp+1Ch],0"
"	      0054b143    je near ptr 0054B165h"
"	      0054b149    push 8C085h"
"	      0054b14e    push 5BAB50h"
"	      0054b153    push 6CCh"
"	      0054b158    push 5BAB74h"
"	      0054b15d    call 00554F30h"
"	      0054b162    add esp,10h"
);
// LINE 1742:
	asm( 
"	      0054b165    push 2"
"	      0054b167    lea eax,[ebp-60h]"
"	      0054b16a    push eax"
"	      0054b16b    lea eax,[ebp-5Ch]"
"	      0054b16e    push eax"
"	      0054b16f    movsx eax,word ptr [ebp+10h]"
"	      0054b173    and eax,0FFh"
"	      0054b178    shl eax,0Ah"
"	      0054b17b    movsx ecx,word ptr [ebp+14h]"
"	      0054b17f    and ecx,0FFh"
"	      0054b185    mov eax,[eax+ecx*4+67ED30h]"
"	      0054b18c    push eax"
"	      0054b18d    mov ecx,[ebp-0E8h]"
"	      0054b193    call 00545049h"
"	      0054b198    movzx eax,ax"
"	      0054b19b    test eax,eax"
"	      0054b19d    je near ptr 0054B1DBh"
);
// LINE 1743:
	asm( 
"	      0054b1a3    mov eax,[ebp-60h]"
"	      0054b1a6    push eax"
"	      0054b1a7    mov eax,[ebp-5Ch]"
"	      0054b1aa    push eax"
"	      0054b1ab    mov eax,[ebp+14h]"
"	      0054b1ae    push eax"
"	      0054b1af    mov eax,[ebp+10h]"
"	      0054b1b2    push eax"
"	      0054b1b3    mov ecx,[ebp-0E8h]"
"	      0054b1b9    call 0054FD4Dh"
);
// LINE 1744:
	asm( 
"	      0054b1be    mov eax,[ebp+18h]"
"	      0054b1c1    push eax"
"	      0054b1c2    mov eax,[ebp+0Ch]"
"	      0054b1c5    push eax"
"	      0054b1c6    mov eax,[ebp+8]"
"	      0054b1c9    push eax"
"	      0054b1ca    mov ecx,[ebp-0E8h]"
"	      0054b1d0    call 0054A5A4h"
);
// LINE 1745:
	asm( 
"	      0054b1d5    mov word ptr [ebp-4],1"
);
// LINE 1747:
	asm( 
"	      0054b1db    jmp near ptr 0054B53Bh"
);
// LINE 1750:
	asm( 
"	      0054b1e0    mov word ptr [ebp-4],0"
);
// LINE 1751:
	asm( 
"	      0054b1e6    cmp dword ptr [ebp+20h],0"
"	      0054b1ea    jne near ptr 0054B1FAh"
"	      0054b1f0    cmp dword ptr [ebp+1Ch],0"
"	      0054b1f4    jne near ptr 0054B216h"
"	      0054b1fa    push 8C085h"
"	      0054b1ff    push 5BAB98h"
"	      0054b204    push 6D7h"
"	      0054b209    push 5BABA4h"
"	      0054b20e    call 00554F30h"
"	      0054b213    add esp,10h"
);
// LINE 1753:
	asm( 
"	      0054b216    mov eax,[ebp+1Ch]"
"	      0054b219    mov eax,[eax+18h]"
"	      0054b21c    add eax,20000000h"
"	      0054b221    sar eax,16h"
"	      0054b224    mov [ebp-70h],eax"
);
// LINE 1754:
	asm( 
"	      0054b227    mov eax,20000000h"
"	      0054b22c    mov ecx,[ebp+1Ch]"
"	      0054b22f    sub eax,[ecx+20h]"
"	      0054b232    sar eax,16h"
"	      0054b235    mov [ebp-74h],eax"
);
// LINE 1755:
	asm( 
"	      0054b238    movsx eax,word ptr [ebp+10h]"
"	      0054b23c    cmp eax,[ebp-70h]"
"	      0054b23f    jne near ptr 0054B252h"
"	      0054b245    movsx eax,word ptr [ebp+14h]"
"	      0054b249    cmp eax,[ebp-74h]"
"	      0054b24c    je near ptr 0054B26Eh"
"	      0054b252    push 8C085h"
"	      0054b257    push 5BABC8h"
"	      0054b25c    push 6DBh"
"	      0054b261    push 5BAC1Ch"
"	      0054b266    call 00554F30h"
"	      0054b26b    add esp,10h"
);
// LINE 1758:
	asm( 
"	      0054b26e    lea eax,[ebp-6Ch]"
"	      0054b271    push eax"
"	      0054b272    mov eax,[ebp+1Ch]"
"	      0054b275    push eax"
"	      0054b276    mov ecx,[ebp-0E8h]"
"	      0054b27c    call 00544BDEh"
"	      0054b281    movzx eax,ax"
"	      0054b284    test eax,eax"
"	      0054b286    je near ptr 0054B359h"
);
// LINE 1759:
	asm( 
"	      0054b28c    jmp near ptr 0054B291h"
"	      0054b291    mov eax,[ebp-0E8h]"
"	      0054b297    xor ecx,ecx"
"	      0054b299    mov cx,[eax+20h]"
"	      0054b29d    test ecx,ecx"
"	      0054b29f    je near ptr 0054B2C1h"
"	      0054b2a5    push 8C085h"
"	      0054b2aa    push 5BBBB8h"
"	      0054b2af    push 210h"
"	      0054b2b4    push 5BBA14h"
"	      0054b2b9    call 00554F30h"
"	      0054b2be    add esp,10h"
"	      0054b2c1    mov al,[ebp+10h]"
"	      0054b2c4    mov ecx,[ebp-0E8h]"
"	      0054b2ca    mov [ecx+88h],al"
"	      0054b2d0    mov al,[ebp+14h]"
"	      0054b2d3    mov ecx,[ebp-0E8h]"
"	      0054b2d9    mov [ecx+89h],al"
"	      0054b2df    jmp near ptr 0054B2E4h"
);
// LINE 1760:
	asm( 
"	      0054b2e4    lea eax,[ebp-6Ch]"
"	      0054b2e7    mov ecx,[ebp-0E8h]"
"	      0054b2ed    add ecx,3Ch"
"	      0054b2f0    mov edx,[eax]"
"	      0054b2f2    mov [ecx],edx"
"	      0054b2f4    mov edx,[eax+4]"
"	      0054b2f7    mov [ecx+4],edx"
"	      0054b2fa    mov eax,[eax+8]"
"	      0054b2fd    mov [ecx+8],eax"
);
// LINE 1761:
	asm( 
"	      0054b300    mov eax,[ebp+1Ch]"
"	      0054b303    push eax"
"	      0054b304    mov ecx,[ebp-0E8h]"
"	      0054b30a    call 0054CECAh"
"	      0054b30f    mov [ebp-78h],ax"
);
// LINE 1762:
	asm( 
"	      0054b313    test dword ptr [ebp-78h],0FFFFh"
"	      0054b31a    jne near ptr 0054B33Ch"
"	      0054b320    push 8C085h"
"	      0054b325    push 5BAC40h"
"	      0054b32a    push 6E2h"
"	      0054b32f    push 5BAC60h"
"	      0054b334    call 00554F30h"
"	      0054b339    add esp,10h"
);
// LINE 1763:
	asm( 
"	      0054b33c    mov eax,[ebp+18h]"
"	      0054b33f    push eax"
"	      0054b340    mov eax,[ebp+0Ch]"
"	      0054b343    push eax"
"	      0054b344    mov eax,[ebp+8]"
"	      0054b347    push eax"
"	      0054b348    mov ecx,[ebp-0E8h]"
"	      0054b34e    call 0054A5A4h"
);
// LINE 1764:
	asm( 
"	      0054b353    mov word ptr [ebp-4],1"
);
// LINE 1767:
	asm( 
"	      0054b359    jmp near ptr 0054B53Bh"
);
// LINE 1771:
	asm( 
"	      0054b35e    mov word ptr [ebp-4],0"
);
// LINE 1772:
	asm( 
"	      0054b364    cmp dword ptr [ebp+20h],0"
"	      0054b368    je near ptr 0054B43Ah"
);
// LINE 1773:
	asm( 
"	      0054b36e    push 0"
"	      0054b370    push 0"
"	      0054b372    push 20000h"
"	      0054b377    mov eax,[ebp-0E8h]"
"	      0054b37d    mov eax,[eax+34h]"
"	      0054b380    push eax"
"	      0054b381    call 004D19BDh"
"	      0054b386    add esp,8"
"	      0054b389    push eax"
"	      0054b38a    mov eax,[ebp+20h]"
"	      0054b38d    mov ecx,[eax+8]"
"	      0054b390    push ecx"
"	      0054b391    mov ecx,[eax+4]"
"	      0054b394    push ecx"
"	      0054b395    mov eax,[eax]"
"	      0054b397    push eax"
"	      0054b398    push 0"
"	      0054b39a    call 00555369h"
"	      0054b39f    add esp,1Ch"
"	      0054b3a2    test eax,eax"
"	      0054b3a4    jne near ptr 0054B435h"
);
// LINE 1775:
	asm( 
"	      0054b3aa    cmp dword ptr [ebp+1Ch],0"
"	      0054b3ae    je near ptr 0054B3E1h"
"	      0054b3b4    mov eax,[ebp+1Ch]"
"	      0054b3b7    movsx eax,word ptr [eax+0Ch]"
"	      0054b3bb    test al,10h"
"	      0054b3bd    je near ptr 0054B3E1h"
"	      0054b3c3    mov eax,[ebp+1Ch]"
"	      0054b3c6    mov ax,[eax+0Eh]"
"	      0054b3ca    mov ecx,[ebp-0E8h]"
"	      0054b3d0    mov [ecx+100h],ax"
"	      0054b3d7    jmp near ptr 0054B3F5h"
"	      0054b3dc    jmp near ptr 0054B3F5h"
"	      0054b3e1    mov eax,[ebp-0E8h]"
"	      0054b3e7    mov word ptr [eax+100h],0FFFFh"
"	      0054b3f0    jmp near ptr 0054B3F5h"
);
// LINE 1776:
	asm( 
"	      0054b3f5    push 0FFh"
"	      0054b3fa    push 0FFh"
"	      0054b3ff    mov eax,[ebp+20h]"
"	      0054b402    mov ecx,[eax+8]"
"	      0054b405    push ecx"
"	      0054b406    mov ecx,[eax+4]"
"	      0054b409    push ecx"
"	      0054b40a    mov eax,[eax]"
"	      0054b40c    push eax"
"	      0054b40d    mov ecx,[ebp-0E8h]"
"	      0054b413    call 0054FC2Eh"
);
// LINE 1777:
	asm( 
"	      0054b418    mov eax,[ebp+18h]"
"	      0054b41b    push eax"
"	      0054b41c    mov eax,[ebp+0Ch]"
"	      0054b41f    push eax"
"	      0054b420    mov eax,[ebp+8]"
"	      0054b423    push eax"
"	      0054b424    mov ecx,[ebp-0E8h]"
"	      0054b42a    call 0054A5A4h"
);
// LINE 1778:
	asm( 
"	      0054b42f    mov word ptr [ebp-4],1"
);
// LINE 1781:
	asm( 
"	      0054b435    jmp near ptr 0054B4FBh"
);
// LINE 1783:
	asm( 
"	      0054b43a    push 1"
"	      0054b43c    lea eax,[ebp-80h]"
"	      0054b43f    push eax"
"	      0054b440    lea eax,[ebp-7Ch]"
"	      0054b443    push eax"
"	      0054b444    movsx eax,word ptr [ebp+10h]"
"	      0054b448    and eax,0FFh"
"	      0054b44d    shl eax,0Ah"
"	      0054b450    movsx ecx,word ptr [ebp+14h]"
"	      0054b454    and ecx,0FFh"
"	      0054b45a    mov eax,[eax+ecx*4+67ED30h]"
"	      0054b461    push eax"
"	      0054b462    mov ecx,[ebp-0E8h]"
"	      0054b468    call 00545049h"
"	      0054b46d    movzx eax,ax"
"	      0054b470    test eax,eax"
"	      0054b472    je near ptr 0054B4FBh"
);
// LINE 1784:
	asm( 
"	      0054b478    cmp dword ptr [ebp+1Ch],0"
"	      0054b47c    je near ptr 0054B4AFh"
"	      0054b482    mov eax,[ebp+1Ch]"
"	      0054b485    movsx eax,word ptr [eax+0Ch]"
"	      0054b489    test al,10h"
"	      0054b48b    je near ptr 0054B4AFh"
"	      0054b491    mov eax,[ebp+1Ch]"
"	      0054b494    mov ax,[eax+0Eh]"
"	      0054b498    mov ecx,[ebp-0E8h]"
"	      0054b49e    mov [ecx+100h],ax"
"	      0054b4a5    jmp near ptr 0054B4C3h"
"	      0054b4aa    jmp near ptr 0054B4C3h"
"	      0054b4af    mov eax,[ebp-0E8h]"
"	      0054b4b5    mov word ptr [eax+100h],0FFFFh"
"	      0054b4be    jmp near ptr 0054B4C3h"
);
// LINE 1785:
	asm( 
"	      0054b4c3    mov eax,[ebp-80h]"
"	      0054b4c6    push eax"
"	      0054b4c7    mov eax,[ebp-7Ch]"
"	      0054b4ca    push eax"
"	      0054b4cb    mov eax,[ebp+14h]"
"	      0054b4ce    push eax"
"	      0054b4cf    mov eax,[ebp+10h]"
"	      0054b4d2    push eax"
"	      0054b4d3    mov ecx,[ebp-0E8h]"
"	      0054b4d9    call 0054FD4Dh"
);
// LINE 1786:
	asm( 
"	      0054b4de    mov eax,[ebp+18h]"
"	      0054b4e1    push eax"
"	      0054b4e2    mov eax,[ebp+0Ch]"
"	      0054b4e5    push eax"
"	      0054b4e6    mov eax,[ebp+8]"
"	      0054b4e9    push eax"
"	      0054b4ea    mov ecx,[ebp-0E8h]"
"	      0054b4f0    call 0054A5A4h"
);
// LINE 1787:
	asm( 
"	      0054b4f5    mov word ptr [ebp-4],1"
);
// LINE 1790:
	asm( 
"	      0054b4fb    jmp near ptr 0054B53Bh"
);
// LINE 1792:
	asm( 
"	      0054b500    jmp near ptr 0054B53Bh"
"	      0054b505    cmp dword ptr [ebp-0ECh],6"
"	      0054b50c    ja near ptr 0054B35Eh"
"	      0054b512    mov eax,[ebp-0ECh]"
"	      0054b518    jmp dword ptr [eax*4+54B51Fh]"
"	      0054b51f    dec esi"
"	      0054b520    stosd"
"	      0054b521    push esp"
"	      0054b522    add al,ah"
"	      0054b524    mov cl,54h"
"	      0054b526    add bh,cl"
"	      0054b528    mov al,54h"
"	      0054b52a    add [ebx-57h],dh"
"	      0054b52d    push esp"
"	      0054b52e    add bl,dl"
"	      0054b530    lodsd"
"	      0054b531    push esp"
"	      0054b532    add bl,bl"
"	      0054b534    lodsb"
"	      0054b535    push esp"
"	      0054b536    add bl,dl"
"	      0054b538    lodsd"
"	      0054b539    push esp"
"	      0054b53a    (bad)"
);
// LINE 1793:
	asm( 
"	      0054b53b    movsx eax,word ptr [ebp-4]"
"	      0054b53f    test eax,eax"
"	      0054b541    je near ptr 0054B570h"
"	      0054b547    movsx eax,word ptr [ebp-4]"
"	      0054b54b    cmp eax,1"
"	      0054b54e    je near ptr 0054B570h"
"	      0054b554    push 8C085h"
"	      0054b559    push 5BAC84h"
"	      0054b55e    push 701h"
"	      0054b563    push 5BAC94h"
"	      0054b568    call 00554F30h"
"	      0054b56d    add esp,10h"
);
// LINE 1794:
	asm( 
"	      0054b570    movsx eax,word ptr [ebp-4]"
"	      0054b574    cmp eax,1"
"	      0054b577    jne near ptr 0054B810h"
);
// LINE 1797:
	asm( 
"	      0054b57d    mov eax,[ebp-0E8h]"
"	      0054b583    mov ax,[eax+10Ah]"
"	      0054b58a    push eax"
"	      0054b58b    mov eax,[ebp-0E8h]"
"	      0054b591    mov eax,[eax+0B4h]"
"	      0054b597    push eax"
"	      0054b598    mov ecx,[ebp-0E8h]"
"	      0054b59e    call 0055CC58h"
"	      0054b5a3    jmp near ptr 0054B5A8h"
);
// LINE 1798:
	asm( 
"	      0054b5a8    mov eax,[ebp-0E8h]"
"	      0054b5ae    movsx eax,word ptr [eax+0D2h]"
"	      0054b5b5    test eax,eax"
"	      0054b5b7    je near ptr 0054B5D9h"
"	      0054b5bd    push 8C085h"
"	      0054b5c2    push 5BBA9Ch"
"	      0054b5c7    push 2D3h"
"	      0054b5cc    push 5BBA14h"
"	      0054b5d1    call 00554F30h"
"	      0054b5d6    add esp,10h"
"	      0054b5d9    mov eax,[ebp-0E8h]"
"	      0054b5df    mov ax,[eax+10Ah]"
"	      0054b5e6    push eax"
"	      0054b5e7    mov eax,[ebp-0E8h]"
"	      0054b5ed    mov eax,[eax+0B4h]"
"	      0054b5f3    push eax"
"	      0054b5f4    mov ecx,[ebp-0E8h]"
"	      0054b5fa    call 0055CC58h"
"	      0054b5ff    jmp near ptr 0054B604h"
"	      0054b604    mov eax,[ebp-0E8h]"
"	      0054b60a    mov word ptr [eax+0D2h],1"
"	      0054b613    mov eax,[ebp-0E8h]"
"	      0054b619    mov word ptr [eax+0E2h],1"
"	      0054b622    mov eax,[ebp-0E8h]"
"	      0054b628    movsx eax,word ptr [eax+0D8h]"
"	      0054b62f    mov [ebp-88h],eax"
"	      0054b635    cmp dword ptr [ebp-88h],0"
"	      0054b63c    jne near ptr 0054B655h"
"	      0054b642    movsx eax,word ptr ds:[5B8674h]"
"	      0054b649    inc eax"
"	      0054b64a    mov ds:[5B8674h],ax"
"	      0054b650    jmp near ptr 0054B663h"
"	      0054b655    movsx eax,word ptr ds:[5B8670h]"
"	      0054b65c    inc eax"
"	      0054b65d    mov ds:[5B8670h],ax"
"	      0054b663    jmp near ptr 0054B668h"
"	      0054b668    movsx eax,word ptr ds:[5B8674h]"
"	      0054b66f    movsx ecx,word ptr ds:[5B8670h]"
"	      0054b676    add eax,ecx"
"	      0054b678    cmp eax,64h"
"	      0054b67b    jle near ptr 0054B69Dh"
"	      0054b681    push 8C085h"
"	      0054b686    push 5BBA7Ch"
"	      0054b68b    push 2D9h"
"	      0054b690    push 5BBA14h"
"	      0054b695    call 00554F30h"
"	      0054b69a    add esp,10h"
"	      0054b69d    mov eax,[ebp-0E8h]"
"	      0054b6a3    xor ecx,ecx"
"	      0054b6a5    mov cl,[eax+88h]"
"	      0054b6ab    cmp ecx,0FFFFFFFFh"
"	      0054b6ae    jne near ptr 0054B6ECh"
"	      0054b6b4    mov eax,[ebp-0E8h]"
"	      0054b6ba    xor ecx,ecx"
"	      0054b6bc    mov cl,[eax+89h]"
"	      0054b6c2    cmp ecx,0FFFFFFFFh"
"	      0054b6c5    je near ptr 0054B6E7h"
"	      0054b6cb    push 8C085h"
"	      0054b6d0    push 5BBAD4h"
"	      0054b6d5    push 22Eh"
"	      0054b6da    push 5BBA14h"
"	      0054b6df    call 00554F30h"
"	      0054b6e4    add esp,10h"
"	      0054b6e7    jmp near ptr 0054B71Fh"
"	      0054b6ec    mov eax,[ebp-0E8h]"
"	      0054b6f2    xor ecx,ecx"
"	      0054b6f4    mov cl,[eax+89h]"
"	      0054b6fa    cmp ecx,0FFFFFFFFh"
"	      0054b6fd    jne near ptr 0054B71Fh"
"	      0054b703    push 8C085h"
"	      0054b708    push 5BBABCh"
"	      0054b70d    push 231h"
"	      0054b712    push 5BBA14h"
"	      0054b717    call 00554F30h"
"	      0054b71c    add esp,10h"
"	      0054b71f    mov eax,[ebp-0E8h]"
"	      0054b725    xor ecx,ecx"
"	      0054b727    mov cl,[eax+88h]"
"	      0054b72d    cmp ecx,0FFFFFFFFh"
"	      0054b730    je near ptr 0054B740h"
"	      0054b736    jmp near ptr 0054B771h"
"	      0054b73b    jmp near ptr 0054B740h"
"	      0054b740    jmp near ptr 0054B755h"
"	      0054b745    test dword ptr [ebp-0E4h],0FFFFh"
"	      0054b74f    jne near ptr 0054B771h"
"	      0054b755    push 8C085h"
"	      0054b75a    push 5BBA54h"
"	      0054b75f    push 2DAh"
"	      0054b764    push 5BBA14h"
"	      0054b769    call 00554F30h"
"	      0054b76e    add esp,10h"
"	      0054b771    mov ecx,[ebp-0E8h]"
"	      0054b777    call 0055069Bh"
"	      0054b77c    jmp near ptr 0054B781h"
"	      0054b781    mov eax,[ebp-0E8h]"
"	      0054b787    xor ecx,ecx"
"	      0054b789    mov cx,[eax+20h]"
"	      0054b78d    test ecx,ecx"
"	      0054b78f    jne near ptr 0054B7B1h"
"	      0054b795    push 8C085h"
"	      0054b79a    push 5BBAECh"
"	      0054b79f    push 1F8h"
"	      0054b7a4    push 5BBA14h"
"	      0054b7a9    call 00554F30h"
"	      0054b7ae    add esp,10h"
"	      0054b7b1    mov eax,[ebp-0E8h]"
"	      0054b7b7    add eax,3Ch"
"	      0054b7ba    lea ecx,[ebp-0E0h]"
"	      0054b7c0    mov edx,[eax]"
"	      0054b7c2    mov [ecx],edx"
"	      0054b7c4    mov edx,[eax+4]"
"	      0054b7c7    mov [ecx+4],edx"
"	      0054b7ca    mov eax,[eax+8]"
"	      0054b7cd    mov [ecx+8],eax"
"	      0054b7d0    push 40h"
"	      0054b7d2    mov eax,[ebp-0E8h]"
"	      0054b7d8    add eax,48h"
"	      0054b7db    push eax"
"	      0054b7dc    lea eax,[ebp-0C8h]"
"	      0054b7e2    push eax"
"	      0054b7e3    call 0056A800h"
"	      0054b7e8    add esp,0Ch"
"	      0054b7eb    push 3"
"	      0054b7ed    lea eax,[ebp-0E0h]"
"	      0054b7f3    push eax"
"	      0054b7f4    mov eax,[ebp-0E8h]"
"	      0054b7fa    mov eax,[eax+2Ch]"
"	      0054b7fd    push eax"
"	      0054b7fe    call 004D8781h"
"	      0054b803    add esp,0Ch"
"	      0054b806    jmp near ptr 0054B80Bh"
"	      0054b80b    jmp near ptr 0054B810h"
);
// LINE 1800:
	asm( 
"	      0054b810    mov ax,[ebp-4]"
"	      0054b814    jmp near ptr 0054B819h"
);
// LINE 1801:
	asm( 
"	      0054b819    pop edi"
"	      0054b81a    pop esi"
"	      0054b81b    pop ebx"
"	      0054b81c    leave"
"	      0054b81d    ret 1Ch"
);
}

// FUNCTION: SIMCOPTER 0x0054b820
void cYObject::ResetToAmbient() {
// LINE 1805:
	asm( 
"	      0054b820    push ebp"
"	      0054b821    mov ebp,esp"
"	      0054b823    sub esp,0Ch"
"	      0054b826    push ebx"
"	      0054b827    push esi"
"	      0054b828    push edi"
"	      0054b829    mov [ebp-0Ch],ecx"
);
// LINE 1806:
	asm( 
"	      0054b82c    mov eax,[ebp-0Ch]"
"	      0054b82f    movsx eax,word ptr [eax+0D8h]"
"	      0054b836    test eax,eax"
"	      0054b838    jne near ptr 0054B85Ah"
"	      0054b83e    push 8C085h"
"	      0054b843    push 5BACB8h"
"	      0054b848    push 70Eh"
"	      0054b84d    push 5BACE8h"
"	      0054b852    call 00554F30h"
"	      0054b857    add esp,10h"
);
// LINE 1807:
	asm( 
"	      0054b85a    mov eax,[ebp-0Ch]"
"	      0054b85d    movsx eax,word ptr [eax+0D2h]"
"	      0054b864    test eax,eax"
"	      0054b866    jne near ptr 0054B888h"
"	      0054b86c    push 8C085h"
"	      0054b871    push 5BAD0Ch"
"	      0054b876    push 70Fh"
"	      0054b87b    push 5BAD50h"
"	      0054b880    call 00554F30h"
"	      0054b885    add esp,10h"
);
// LINE 1808:
	asm( 
"	      0054b888    mov eax,[ebp-0Ch]"
"	      0054b88b    movsx eax,word ptr [eax+0D2h]"
"	      0054b892    test eax,eax"
"	      0054b894    jne near ptr 0054B8B6h"
"	      0054b89a    push 8C085h"
"	      0054b89f    push 5BBBF0h"
"	      0054b8a4    push 2C2h"
"	      0054b8a9    push 5BBA14h"
"	      0054b8ae    call 00554F30h"
"	      0054b8b3    add esp,10h"
"	      0054b8b6    mov eax,[ebp-0Ch]"
"	      0054b8b9    movsx eax,word ptr [eax+0D8h]"
"	      0054b8c0    mov [ebp-4],eax"
"	      0054b8c3    cmp dword ptr [ebp-4],0"
"	      0054b8c7    jne near ptr 0054B8E0h"
"	      0054b8cd    movsx eax,word ptr ds:[5B8674h]"
"	      0054b8d4    dec eax"
"	      0054b8d5    mov ds:[5B8674h],ax"
"	      0054b8db    jmp near ptr 0054B8EEh"
"	      0054b8e0    movsx eax,word ptr ds:[5B8670h]"
"	      0054b8e7    dec eax"
"	      0054b8e8    mov ds:[5B8670h],ax"
"	      0054b8ee    jmp near ptr 0054B8F3h"
"	      0054b8f3    mov eax,[ebp-0Ch]"
"	      0054b8f6    mov word ptr [eax+0D2h],0"
"	      0054b8ff    push 0"
"	      0054b901    mov ecx,[ebp-0Ch]"
"	      0054b904    call 0054FE42h"
"	      0054b909    mov eax,[ebp-0Ch]"
"	      0054b90c    mov dword ptr [eax+1Ch],0FFFFFFFFh"
"	      0054b913    mov eax,[ebp-0Ch]"
"	      0054b916    movsx eax,word ptr [eax+0D8h]"
"	      0054b91d    test eax,eax"
"	      0054b91f    je near ptr 0054B967h"
"	      0054b925    mov eax,[ebp-0Ch]"
"	      0054b928    movsx eax,word ptr [eax+0D8h]"
"	      0054b92f    cmp eax,5"
"	      0054b932    je near ptr 0054B967h"
"	      0054b938    mov eax,[ebp-0Ch]"
"	      0054b93b    movsx eax,word ptr [eax+0D8h]"
"	      0054b942    cmp eax,7"
"	      0054b945    je near ptr 0054B967h"
"	      0054b94b    push 8C085h"
"	      0054b950    push 5BBB34h"
"	      0054b955    push 2BDh"
"	      0054b95a    push 5BBA14h"
"	      0054b95f    call 00554F30h"
"	      0054b964    add esp,10h"
"	      0054b967    jmp near ptr 0054B96Ch"
"	      0054b96c    mov eax,[ebp-0Ch]"
"	      0054b96f    mov word ptr [eax+0D2h],1"
"	      0054b978    mov eax,[ebp-0Ch]"
"	      0054b97b    movsx eax,word ptr [eax+0D8h]"
"	      0054b982    mov [ebp-8],eax"
"	      0054b985    cmp dword ptr [ebp-8],0"
"	      0054b989    jne near ptr 0054B9A2h"
"	      0054b98f    movsx eax,word ptr ds:[5B8674h]"
"	      0054b996    inc eax"
"	      0054b997    mov ds:[5B8674h],ax"
"	      0054b99d    jmp near ptr 0054B9B0h"
"	      0054b9a2    movsx eax,word ptr ds:[5B8670h]"
"	      0054b9a9    inc eax"
"	      0054b9aa    mov ds:[5B8670h],ax"
"	      0054b9b0    jmp near ptr 0054B9B5h"
"	      0054b9b5    jmp near ptr 0054B9BAh"
);
// LINE 1809:
	asm( 
"	      0054b9ba    mov eax,[ebp-0Ch]"
"	      0054b9bd    mov ax,[eax+10Ah]"
"	      0054b9c4    push eax"
"	      0054b9c5    mov eax,[ebp-0Ch]"
"	      0054b9c8    mov eax,[eax+0B4h]"
"	      0054b9ce    push eax"
"	      0054b9cf    mov ecx,[ebp-0Ch]"
"	      0054b9d2    call 0055CC58h"
"	      0054b9d7    jmp near ptr 0054B9DCh"
);
// LINE 1810:
	asm( 
"	      0054b9dc    jmp near ptr 0054B9E1h"
"	      0054b9e1    pop edi"
"	      0054b9e2    pop esi"
"	      0054b9e3    pop ebx"
"	      0054b9e4    leave"
"	      0054b9e5    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054b9e6
long cYObject::JoinRiot() {
// LINE 1813:
	asm( 
"	      0054b9e6    push ebp"
"	      0054b9e7    mov ebp,esp"
"	      0054b9e9    sub esp,2Ch"
"	      0054b9ec    push ebx"
"	      0054b9ed    push esi"
"	      0054b9ee    push edi"
"	      0054b9ef    mov [ebp-2Ch],ecx"
);
// LINE 1816:
	asm( 
"	      0054b9f2    mov eax,[ebp-2Ch]"
"	      0054b9f5    movsx eax,word ptr [eax+0E0h]"
"	      0054b9fc    test eax,eax"
"	      0054b9fe    jg near ptr 0054BA20h"
"	      0054ba04    push 8C085h"
"	      0054ba09    push 5BAD74h"
"	      0054ba0e    push 718h"
"	      0054ba13    push 5BADA0h"
"	      0054ba18    call 00554F30h"
"	      0054ba1d    add esp,10h"
);
// LINE 1818:
	asm( 
"	      0054ba20    push 1000h"
"	      0054ba25    call 004FC323h"
"	      0054ba2a    add esp,4"
"	      0054ba2d    movsx eax,ax"
"	      0054ba30    mov [ebp-4],eax"
);
// LINE 1819:
	asm( 
"	      0054ba33    cmp dword ptr [ebp-4],0FFFFFFFFh"
"	      0054ba37    je near ptr 0054BC2Fh"
);
// LINE 1823:
	asm( 
"	      0054ba3d    mov eax,[ebp-4]"
"	      0054ba40    mov [ebp-18h],eax"
);
// LINE 1824:
	asm( 
"	      0054ba43    mov dword ptr [ebp-1Ch],0Bh"
);
// LINE 1825:
	asm( 
"	      0054ba4a    mov dword ptr [ebp-0Ch],1"
);
// LINE 1826:
	asm( 
"	      0054ba51    lea eax,[ebp-1Ch]"
"	      0054ba54    push eax"
"	      0054ba55    call 004FBD4Ah"
"	      0054ba5a    add esp,4"
);
// LINE 1827:
	asm( 
"	      0054ba5d    mov word ptr [ebp-20h],0"
);
// LINE 1828:
	asm( 
"	      0054ba63    mov eax,[ebp-2Ch]"
"	      0054ba66    movsx eax,word ptr [eax+0D2h]"
"	      0054ba6d    test eax,eax"
"	      0054ba6f    je near ptr 0054BBB9h"
);
// LINE 1829:
	asm( 
"	      0054ba75    mov eax,[ebp-2Ch]"
"	      0054ba78    movsx eax,word ptr [eax+0D2h]"
"	      0054ba7f    test eax,eax"
"	      0054ba81    jne near ptr 0054BAA3h"
"	      0054ba87    push 8C085h"
"	      0054ba8c    push 5BBBF0h"
"	      0054ba91    push 2C2h"
"	      0054ba96    push 5BBA14h"
"	      0054ba9b    call 00554F30h"
"	      0054baa0    add esp,10h"
"	      0054baa3    mov eax,[ebp-2Ch]"
"	      0054baa6    movsx eax,word ptr [eax+0D8h]"
"	      0054baad    mov [ebp-24h],eax"
"	      0054bab0    cmp dword ptr [ebp-24h],0"
"	      0054bab4    jne near ptr 0054BACDh"
"	      0054baba    movsx eax,word ptr ds:[5B8674h]"
"	      0054bac1    dec eax"
"	      0054bac2    mov ds:[5B8674h],ax"
"	      0054bac8    jmp near ptr 0054BADBh"
"	      0054bacd    movsx eax,word ptr ds:[5B8670h]"
"	      0054bad4    dec eax"
"	      0054bad5    mov ds:[5B8670h],ax"
"	      0054badb    jmp near ptr 0054BAE0h"
"	      0054bae0    mov eax,[ebp-2Ch]"
"	      0054bae3    mov word ptr [eax+0D2h],0"
"	      0054baec    push 3"
"	      0054baee    mov ecx,[ebp-2Ch]"
"	      0054baf1    call 0054FE42h"
"	      0054baf6    mov eax,[ebp-4]"
"	      0054baf9    mov ecx,[ebp-2Ch]"
"	      0054bafc    mov [ecx+1Ch],eax"
"	      0054baff    cmp dword ptr [ebp-4],0FFFFFFFFh"
"	      0054bb03    jne near ptr 0054BB5Dh"
"	      0054bb09    mov eax,[ebp-2Ch]"
"	      0054bb0c    movsx eax,word ptr [eax+0D8h]"
"	      0054bb13    test eax,eax"
"	      0054bb15    je near ptr 0054BB5Dh"
"	      0054bb1b    mov eax,[ebp-2Ch]"
"	      0054bb1e    movsx eax,word ptr [eax+0D8h]"
"	      0054bb25    cmp eax,5"
"	      0054bb28    je near ptr 0054BB5Dh"
"	      0054bb2e    mov eax,[ebp-2Ch]"
"	      0054bb31    movsx eax,word ptr [eax+0D8h]"
"	      0054bb38    cmp eax,7"
"	      0054bb3b    je near ptr 0054BB5Dh"
"	      0054bb41    push 8C085h"
"	      0054bb46    push 5BBB34h"
"	      0054bb4b    push 2BDh"
"	      0054bb50    push 5BBA14h"
"	      0054bb55    call 00554F30h"
"	      0054bb5a    add esp,10h"
"	      0054bb5d    jmp near ptr 0054BB62h"
"	      0054bb62    mov eax,[ebp-2Ch]"
"	      0054bb65    mov word ptr [eax+0D2h],1"
"	      0054bb6e    mov eax,[ebp-2Ch]"
"	      0054bb71    movsx eax,word ptr [eax+0D8h]"
"	      0054bb78    mov [ebp-28h],eax"
"	      0054bb7b    cmp dword ptr [ebp-28h],0"
"	      0054bb7f    jne near ptr 0054BB9Ah"
"	      0054bb85    movsx eax,word ptr ds:[5B8674h]"
"	      0054bb8c    add eax,1"
"	      0054bb8f    mov ds:[5B8674h],ax"
"	      0054bb95    jmp near ptr 0054BBAAh"
"	      0054bb9a    movsx eax,word ptr ds:[5B8670h]"
"	      0054bba1    add eax,1"
"	      0054bba4    mov ds:[5B8670h],ax"
"	      0054bbaa    jmp near ptr 0054BBAFh"
"	      0054bbaf    jmp near ptr 0054BBB4h"
);
// LINE 1830:
	asm( 
"	      0054bbb4    jmp near ptr 0054BC2Fh"
);
// LINE 1831:
	asm( 
"	      0054bbb9    push 3"
"	      0054bbbb    mov ecx,[ebp-2Ch]"
"	      0054bbbe    call 0054FE42h"
);
// LINE 1832:
	asm( 
"	      0054bbc3    mov eax,[ebp-4]"
"	      0054bbc6    mov ecx,[ebp-2Ch]"
"	      0054bbc9    mov [ecx+1Ch],eax"
"	      0054bbcc    cmp dword ptr [ebp-4],0FFFFFFFFh"
"	      0054bbd0    jne near ptr 0054BC2Ah"
"	      0054bbd6    mov eax,[ebp-2Ch]"
"	      0054bbd9    movsx eax,word ptr [eax+0D8h]"
"	      0054bbe0    test eax,eax"
"	      0054bbe2    je near ptr 0054BC2Ah"
"	      0054bbe8    mov eax,[ebp-2Ch]"
"	      0054bbeb    movsx eax,word ptr [eax+0D8h]"
"	      0054bbf2    cmp eax,5"
"	      0054bbf5    je near ptr 0054BC2Ah"
"	      0054bbfb    mov eax,[ebp-2Ch]"
"	      0054bbfe    movsx eax,word ptr [eax+0D8h]"
"	      0054bc05    cmp eax,7"
"	      0054bc08    je near ptr 0054BC2Ah"
"	      0054bc0e    push 8C085h"
"	      0054bc13    push 5BBB34h"
"	      0054bc18    push 2BDh"
"	      0054bc1d    push 5BBA14h"
"	      0054bc22    call 00554F30h"
"	      0054bc27    add esp,10h"
"	      0054bc2a    jmp near ptr 0054BC2Fh"
);
// LINE 1835:
	asm( 
"	      0054bc2f    mov eax,[ebp-4]"
"	      0054bc32    jmp near ptr 0054BC37h"
);
// LINE 1836:
	asm( 
"	      0054bc37    pop edi"
"	      0054bc38    pop esi"
"	      0054bc39    pop ebx"
"	      0054bc3a    leave"
"	      0054bc3b    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054bc3c
void cYObject::PhaseAndBeamSoundChannels() {
// LINE 1839:
	asm( 
"	      0054bc3c    push ebp"
"	      0054bc3d    mov ebp,esp"
"	      0054bc3f    sub esp,34h"
"	      0054bc42    push ebx"
"	      0054bc43    push esi"
"	      0054bc44    push edi"
);
// LINE 1842:
	asm( 
"	      0054bc45    mov word ptr [ebp-4],0"
);
// LINE 1843:
	asm( 
"	      0054bc4b    movsx eax,word ptr [ebp-4]"
"	      0054bc4f    cmp eax,64h"
"	      0054bc52    jge near ptr 0054BEA9h"
);
// LINE 1844:
	asm( 
"	      0054bc58    mov ax,[ebp-4]"
"	      0054bc5c    mov [ebp-18h],ax"
"	      0054bc60    inc word ptr [ebp-4]"
"	      0054bc64    movsx eax,word ptr [ebp-18h]"
"	      0054bc68    cmp eax,7D00h"
"	      0054bc6d    jne near ptr 0054BC80h"
"	      0054bc73    mov eax,ds:[5B8680h]"
"	      0054bc78    mov [ebp-0Ch],eax"
"	      0054bc7b    jmp near ptr 0054BCFCh"
"	      0054bc80    movsx eax,word ptr [ebp-18h]"
"	      0054bc84    test eax,eax"
"	      0054bc86    jl near ptr 0054BC99h"
"	      0054bc8c    movsx eax,word ptr [ebp-18h]"
"	      0054bc90    cmp eax,64h"
"	      0054bc93    jl near ptr 0054BCB5h"
"	      0054bc99    push 8C085h"
"	      0054bc9e    push 5BB9F4h"
"	      0054bca3    push 204h"
"	      0054bca8    push 5BBA14h"
"	      0054bcad    call 00554F30h"
"	      0054bcb2    add esp,10h"
"	      0054bcb5    movsx eax,word ptr [ebp-18h]"
"	      0054bcb9    cmp dword ptr [eax*4+636D40h],0"
"	      0054bcc1    jne near ptr 0054BCE3h"
"	      0054bcc7    push 8C085h"
"	      0054bccc    push 5BB9D0h"
"	      0054bcd1    push 205h"
"	      0054bcd6    push 5BBA14h"
"	      0054bcdb    call 00554F30h"
"	      0054bce0    add esp,10h"
"	      0054bce3    movsx eax,word ptr [ebp-18h]"
"	      0054bce7    mov eax,[eax*4+636D40h]"
"	      0054bcee    mov [ebp-0Ch],eax"
"	      0054bcf1    jmp near ptr 0054BCFCh"
"	      0054bcf6    mov eax,[ebp-34h]"
"	      0054bcf9    mov [ebp-0Ch],eax"
);
// LINE 1845:
	asm( 
"	      0054bcfc    mov eax,[ebp-0Ch]"
"	      0054bcff    movsx eax,word ptr [eax+102h]"
"	      0054bd06    cmp eax,0FFFFFFFFh"
"	      0054bd09    je near ptr 0054BEA4h"
);
// LINE 1846:
	asm( 
"	      0054bd0f    mov eax,[ebp-0Ch]"
"	      0054bd12    movsx eax,word ptr [eax+0D2h]"
"	      0054bd19    test eax,eax"
"	      0054bd1b    jne near ptr 0054BD3Dh"
"	      0054bd21    push 8C085h"
"	      0054bd26    push 5BADC4h"
"	      0054bd2b    push 736h"
"	      0054bd30    push 5BADF4h"
"	      0054bd35    call 00554F30h"
"	      0054bd3a    add esp,10h"
);
// LINE 1847:
	asm( 
"	      0054bd3d    mov eax,ds:[6BF188h]"
"	      0054bd42    mov ecx,[ebp-0Ch]"
"	      0054bd45    xor edx,edx"
"	      0054bd47    mov dl,[ecx+88h]"
"	      0054bd4d    sub eax,edx"
"	      0054bd4f    movsx eax,ax"
"	      0054bd52    cdq"
"	      0054bd53    xor eax,edx"
"	      0054bd55    sub eax,edx"
"	      0054bd57    mov [ebp-14h],ax"
"	      0054bd5b    jmp near ptr 0054BD60h"
);
// LINE 1848:
	asm( 
"	      0054bd60    mov eax,ds:[6BF18Ch]"
"	      0054bd65    mov ecx,[ebp-0Ch]"
"	      0054bd68    xor edx,edx"
"	      0054bd6a    mov dl,[ecx+89h]"
"	      0054bd70    sub eax,edx"
"	      0054bd72    movsx eax,ax"
"	      0054bd75    cdq"
"	      0054bd76    xor eax,edx"
"	      0054bd78    sub eax,edx"
"	      0054bd7a    mov [ebp-10h],ax"
"	      0054bd7e    jmp near ptr 0054BD83h"
);
// LINE 1849:
	asm( 
"	      0054bd83    movsx eax,word ptr [ebp-10h]"
"	      0054bd87    movsx ecx,word ptr [ebp-14h]"
"	      0054bd8b    add eax,ecx"
"	      0054bd8d    cmp eax,2"
"	      0054bd90    jle near ptr 0054BE4Ah"
);
// LINE 1852:
	asm( 
"	      0054bd96    mov eax,[ebp-0Ch]"
"	      0054bd99    movsx eax,word ptr [eax+102h]"
"	      0054bda0    cmp eax,0FFFFFFFFh"
"	      0054bda3    je near ptr 0054BE40h"
"	      0054bda9    mov eax,[ebp-0Ch]"
"	      0054bdac    mov word ptr [eax+104h],0FFFFh"
"	      0054bdb5    mov eax,[ebp-0Ch]"
"	      0054bdb8    movsx eax,word ptr [eax+102h]"
"	      0054bdbf    cmp eax,0FFFFFFFFh"
"	      0054bdc2    je near ptr 0054BE1Bh"
"	      0054bdc8    mov eax,[ebp-0Ch]"
"	      0054bdcb    movsx eax,word ptr [eax+102h]"
"	      0054bdd2    cmp eax,0FFFFFFFFh"
"	      0054bdd5    je near ptr 0054BDF6h"
"	      0054bddb    mov eax,[ebp-0Ch]"
"	      0054bdde    movsx eax,word ptr [eax+102h]"
"	      0054bde5    add eax,62h"
"	      0054bde8    mov [ebp-2Ch],ax"
"	      0054bdec    jmp near ptr 0054BE09h"
"	      0054bdf1    jmp near ptr 0054BE01h"
"	      0054bdf6    mov word ptr [ebp-2Ch],0FFFFh"
"	      0054bdfc    jmp near ptr 0054BE09h"
"	      0054be01    mov ax,[ebp-30h]"
"	      0054be05    mov [ebp-2Ch],ax"
"	      0054be09    jmp near ptr 0054BE0Eh"
"	      0054be0e    movsx eax,word ptr [ebp-2Ch]"
"	      0054be12    push eax"
"	      0054be13    call 00446E04h"
"	      0054be18    add esp,4"
"	      0054be1b    jmp near ptr 0054BE20h"
"	      0054be20    mov eax,[ebp-0Ch]"
"	      0054be23    movsx eax,word ptr [eax+102h]"
"	      0054be2a    mov word ptr [eax*2+6356B0h],0"
"	      0054be34    mov eax,[ebp-0Ch]"
"	      0054be37    mov word ptr [eax+102h],0FFFFh"
"	      0054be40    jmp near ptr 0054BE45h"
);
// LINE 1853:
	asm( 
"	      0054be45    jmp near ptr 0054BEA4h"
);
// LINE 1854:
	asm( 
"	      0054be4a    mov eax,[ebp-0Ch]"
"	      0054be4d    movsx eax,word ptr [eax+102h]"
"	      0054be54    cmp eax,0FFFFFFFFh"
"	      0054be57    je near ptr 0054BE78h"
"	      0054be5d    mov eax,[ebp-0Ch]"
"	      0054be60    movsx eax,word ptr [eax+102h]"
"	      0054be67    add eax,62h"
"	      0054be6a    mov [ebp-20h],ax"
"	      0054be6e    jmp near ptr 0054BE8Bh"
"	      0054be73    jmp near ptr 0054BE83h"
"	      0054be78    mov word ptr [ebp-20h],0FFFFh"
"	      0054be7e    jmp near ptr 0054BE8Bh"
"	      0054be83    mov ax,[ebp-1Ch]"
"	      0054be87    mov [ebp-20h],ax"
"	      0054be8b    jmp near ptr 0054BE90h"
"	      0054be90    mov eax,[ebp-0Ch]"
"	      0054be93    add eax,3Ch"
"	      0054be96    push eax"
"	      0054be97    movsx eax,word ptr [ebp-20h]"
"	      0054be9b    push eax"
"	      0054be9c    call 00446F43h"
"	      0054bea1    add esp,8"
);
// LINE 1856:
	asm( 
"	      0054bea4    jmp near ptr 0054BC4Bh"
);
// LINE 1858:
	asm( 
"	      0054bea9    mov word ptr [ebp-24h],0"
"	      0054beaf    jmp near ptr 0054BEB8h"
"	      0054beb4    inc word ptr [ebp-24h]"
"	      0054beb8    movsx eax,word ptr [ebp-24h]"
"	      0054bebc    cmp eax,0Ch"
"	      0054bebf    jge near ptr 0054BEEBh"
"	      0054bec5    movsx eax,word ptr [ebp-24h]"
"	      0054bec9    movsx eax,word ptr [eax*2+6356B0h]"
"	      0054bed1    test eax,eax"
"	      0054bed3    jne near ptr 0054BEE6h"
"	      0054bed9    mov ax,[ebp-24h]"
"	      0054bedd    mov [ebp-28h],ax"
"	      0054bee1    jmp near ptr 0054BEF6h"
"	      0054bee6    jmp near ptr 0054BEB4h"
"	      0054beeb    mov word ptr [ebp-28h],0FFFFh"
"	      0054bef1    jmp near ptr 0054BEF6h"
"	      0054bef6    mov eax,[ebp-28h]"
"	      0054bef9    push eax"
"	      0054befa    push 1"
"	      0054befc    call 0054BF20h"
"	      0054bf01    add esp,8"
"	      0054bf04    mov [ebp-8],ax"
);
// LINE 1860:
	asm( 
"	      0054bf08    mov eax,[ebp-8]"
"	      0054bf0b    push eax"
"	      0054bf0c    push 2"
"	      0054bf0e    call 0054BF20h"
"	      0054bf13    add esp,8"
);
// LINE 1861:
	asm( 
"	      0054bf16    jmp near ptr 0054BF1Bh"
"	      0054bf1b    pop edi"
"	      0054bf1c    pop esi"
"	      0054bf1d    pop ebx"
"	      0054bf1e    leave"
"	      0054bf1f    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054bf20
short cYObject::DistributeSoundChannels(short, short) {
// LINE 1864:
	asm( 
"	      0054bf20    push ebp"
"	      0054bf21    mov ebp,esp"
"	      0054bf23    sub esp,20h"
"	      0054bf26    push ebx"
"	      0054bf27    push esi"
"	      0054bf28    push edi"
);
// LINE 1865:
	asm( 
"	      0054bf29    mov ax,[ebp+0Ch]"
"	      0054bf2d    mov [ebp-8],ax"
);
// LINE 1866:
	asm( 
"	      0054bf31    mov word ptr [ebp-4],0"
);
// LINE 1869:
	asm( 
"	      0054bf37    movsx eax,word ptr [ebp-8]"
"	      0054bf3b    cmp eax,0FFFFFFFFh"
"	      0054bf3e    je near ptr 0054C0D9h"
"	      0054bf44    movsx eax,word ptr [ebp-4]"
"	      0054bf48    cmp eax,64h"
"	      0054bf4b    jge near ptr 0054C0D9h"
);
// LINE 1870:
	asm( 
"	      0054bf51    mov ax,[ebp-4]"
"	      0054bf55    mov [ebp-18h],ax"
"	      0054bf59    inc word ptr [ebp-4]"
"	      0054bf5d    movsx eax,word ptr [ebp-18h]"
"	      0054bf61    cmp eax,7D00h"
"	      0054bf66    jne near ptr 0054BF79h"
"	      0054bf6c    mov eax,ds:[5B8680h]"
"	      0054bf71    mov [ebp-0Ch],eax"
"	      0054bf74    jmp near ptr 0054BFF5h"
"	      0054bf79    movsx eax,word ptr [ebp-18h]"
"	      0054bf7d    test eax,eax"
"	      0054bf7f    jl near ptr 0054BF92h"
"	      0054bf85    movsx eax,word ptr [ebp-18h]"
"	      0054bf89    cmp eax,64h"
"	      0054bf8c    jl near ptr 0054BFAEh"
"	      0054bf92    push 8C085h"
"	      0054bf97    push 5BB9F4h"
"	      0054bf9c    push 204h"
"	      0054bfa1    push 5BBA14h"
"	      0054bfa6    call 00554F30h"
"	      0054bfab    add esp,10h"
"	      0054bfae    movsx eax,word ptr [ebp-18h]"
"	      0054bfb2    cmp dword ptr [eax*4+636D40h],0"
"	      0054bfba    jne near ptr 0054BFDCh"
"	      0054bfc0    push 8C085h"
"	      0054bfc5    push 5BB9D0h"
"	      0054bfca    push 205h"
"	      0054bfcf    push 5BBA14h"
"	      0054bfd4    call 00554F30h"
"	      0054bfd9    add esp,10h"
"	      0054bfdc    movsx eax,word ptr [ebp-18h]"
"	      0054bfe0    mov eax,[eax*4+636D40h]"
"	      0054bfe7    mov [ebp-0Ch],eax"
"	      0054bfea    jmp near ptr 0054BFF5h"
"	      0054bfef    mov eax,[ebp-20h]"
"	      0054bff2    mov [ebp-0Ch],eax"
);
// LINE 1871:
	asm( 
"	      0054bff5    mov eax,[ebp-0Ch]"
"	      0054bff8    movsx eax,word ptr [eax+0D2h]"
"	      0054bfff    test eax,eax"
"	      0054c001    jne near ptr 0054C00Ch"
);
// LINE 1872:
	asm( 
"	      0054c007    jmp near ptr 0054BF37h"
);
// LINE 1873:
	asm( 
"	      0054c00c    mov eax,[ebp-0Ch]"
"	      0054c00f    movsx eax,word ptr [eax+102h]"
"	      0054c016    cmp eax,0FFFFFFFFh"
"	      0054c019    jne near ptr 0054C0D4h"
);
// LINE 1874:
	asm( 
"	      0054c01f    mov eax,ds:[6BF188h]"
"	      0054c024    mov ecx,[ebp-0Ch]"
"	      0054c027    xor edx,edx"
"	      0054c029    mov dl,[ecx+88h]"
"	      0054c02f    sub eax,edx"
"	      0054c031    movsx eax,ax"
"	      0054c034    cdq"
"	      0054c035    xor eax,edx"
"	      0054c037    sub eax,edx"
"	      0054c039    mov [ebp-14h],ax"
"	      0054c03d    jmp near ptr 0054C042h"
);
// LINE 1875:
	asm( 
"	      0054c042    mov eax,ds:[6BF18Ch]"
"	      0054c047    mov ecx,[ebp-0Ch]"
"	      0054c04a    xor edx,edx"
"	      0054c04c    mov dl,[ecx+89h]"
"	      0054c052    sub eax,edx"
"	      0054c054    movsx eax,ax"
"	      0054c057    cdq"
"	      0054c058    xor eax,edx"
"	      0054c05a    sub eax,edx"
"	      0054c05c    mov [ebp-10h],ax"
"	      0054c060    jmp near ptr 0054C065h"
);
// LINE 1876:
	asm( 
"	      0054c065    movsx eax,word ptr [ebp-10h]"
"	      0054c069    movsx ecx,word ptr [ebp-14h]"
"	      0054c06d    add eax,ecx"
"	      0054c06f    movsx ecx,word ptr [ebp+8]"
"	      0054c073    cmp eax,ecx"
"	      0054c075    jge near ptr 0054C0D4h"
);
// LINE 1877:
	asm( 
"	      0054c07b    mov eax,[ebp-8]"
"	      0054c07e    push eax"
"	      0054c07f    mov ecx,[ebp-0Ch]"
"	      0054c082    call 0054C0E7h"
);
// LINE 1878:
	asm( 
"	      0054c087    mov word ptr [ebp-1Ch],0"
"	      0054c08d    jmp near ptr 0054C096h"
"	      0054c092    inc word ptr [ebp-1Ch]"
"	      0054c096    movsx eax,word ptr [ebp-1Ch]"
"	      0054c09a    cmp eax,0Ch"
"	      0054c09d    jge near ptr 0054C0C9h"
"	      0054c0a3    movsx eax,word ptr [ebp-1Ch]"
"	      0054c0a7    movsx eax,word ptr [eax*2+6356B0h]"
"	      0054c0af    test eax,eax"
"	      0054c0b1    jne near ptr 0054C0C4h"
"	      0054c0b7    mov ax,[ebp-1Ch]"
"	      0054c0bb    mov [ebp-8],ax"
"	      0054c0bf    jmp near ptr 0054C0D4h"
"	      0054c0c4    jmp near ptr 0054C092h"
"	      0054c0c9    mov word ptr [ebp-8],0FFFFh"
"	      0054c0cf    jmp near ptr 0054C0D4h"
);
// LINE 1881:
	asm( 
"	      0054c0d4    jmp near ptr 0054BF37h"
);
// LINE 1882:
	asm( 
"	      0054c0d9    mov ax,[ebp-8]"
"	      0054c0dd    jmp near ptr 0054C0E2h"
);
// LINE 1883:
	asm( 
"	      0054c0e2    pop edi"
"	      0054c0e3    pop esi"
"	      0054c0e4    pop ebx"
"	      0054c0e5    leave"
"	      0054c0e6    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054c0e7
void cYObject::SetSoundChannel(short) {
// LINE 1887:
	asm( 
"	      0054c0e7    push ebp"
"	      0054c0e8    mov ebp,esp"
"	      0054c0ea    sub esp,4"
"	      0054c0ed    push ebx"
"	      0054c0ee    push esi"
"	      0054c0ef    push edi"
"	      0054c0f0    mov [ebp-4],ecx"
);
// LINE 1888:
	asm( 
"	      0054c0f3    movsx eax,word ptr [ebp+8]"
"	      0054c0f7    test eax,eax"
"	      0054c0f9    jl near ptr 0054C10Ch"
"	      0054c0ff    movsx eax,word ptr [ebp+8]"
"	      0054c103    cmp eax,0Fh"
"	      0054c106    jl near ptr 0054C128h"
"	      0054c10c    push 8C085h"
"	      0054c111    push 5BAE18h"
"	      0054c116    push 760h"
"	      0054c11b    push 5BAE38h"
"	      0054c120    call 00554F30h"
"	      0054c125    add esp,10h"
);
// LINE 1889:
	asm( 
"	      0054c128    mov eax,[ebp-4]"
"	      0054c12b    movsx eax,word ptr [eax+0D2h]"
"	      0054c132    test eax,eax"
"	      0054c134    jne near ptr 0054C156h"
"	      0054c13a    push 8C085h"
"	      0054c13f    push 5BAE5Ch"
"	      0054c144    push 761h"
"	      0054c149    push 5BAE80h"
"	      0054c14e    call 00554F30h"
"	      0054c153    add esp,10h"
);
// LINE 1890:
	asm( 
"	      0054c156    movsx eax,word ptr [ebp+8]"
"	      0054c15a    movsx eax,word ptr [eax*2+6356B0h]"
"	      0054c162    test eax,eax"
"	      0054c164    je near ptr 0054C186h"
"	      0054c16a    push 8C085h"
"	      0054c16f    push 5BAEA4h"
"	      0054c174    push 762h"
"	      0054c179    push 5BAED0h"
"	      0054c17e    call 00554F30h"
"	      0054c183    add esp,10h"
);
// LINE 1891:
	asm( 
"	      0054c186    mov eax,[ebp-4]"
"	      0054c189    movsx eax,word ptr [eax+102h]"
"	      0054c190    cmp eax,0FFFFFFFFh"
"	      0054c193    je near ptr 0054C1B5h"
"	      0054c199    push 8C085h"
"	      0054c19e    push 5BAEF4h"
"	      0054c1a3    push 763h"
"	      0054c1a8    push 5BAF1Ch"
"	      0054c1ad    call 00554F30h"
"	      0054c1b2    add esp,10h"
);
// LINE 1892:
	asm( 
"	      0054c1b5    movsx eax,word ptr [ebp+8]"
"	      0054c1b9    mov word ptr [eax*2+6356B0h],1"
);
// LINE 1893:
	asm( 
"	      0054c1c3    mov ax,[ebp+8]"
"	      0054c1c7    mov ecx,[ebp-4]"
"	      0054c1ca    mov [ecx+102h],ax"
);
// LINE 1894:
	asm( 
"	      0054c1d1    jmp near ptr 0054C1D6h"
"	      0054c1d6    pop edi"
"	      0054c1d7    pop esi"
"	      0054c1d8    pop ebx"
"	      0054c1d9    leave"
"	      0054c1da    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0054c1dd
unsigned short cYObject::PlaySoundA(enum cYObject::SoundNum, unsigned short) {
// LINE 1897:
	asm( 
"	      0054c1dd    push ebp"
"	      0054c1de    mov ebp,esp"
"	      0054c1e0    sub esp,38h"
"	      0054c1e3    push ebx"
"	      0054c1e4    push esi"
"	      0054c1e5    push edi"
"	      0054c1e6    mov [ebp-30h],ecx"
);
// LINE 1899:
	asm( 
"	      0054c1e9    cmp dword ptr ds:[5B4DB8h],3"
"	      0054c1f0    je near ptr 0054C21Ah"
"	      0054c1f6    mov eax,[ebp-30h]"
"	      0054c1f9    mov ecx,ds:[5B4968h]"
"	      0054c1ff    mov ecx,[ecx+0A4h]"
"	      0054c205    cmp [eax+130h],ecx"
"	      0054c20b    je near ptr 0054C21Ah"
);
// LINE 1900:
	asm( 
"	      0054c211    mov ax,1"
"	      0054c215    jmp near ptr 0054C66Ah"
);
// LINE 1903:
	asm( 
"	      0054c21a    mov eax,[ebp-30h]"
"	      0054c21d    movsx eax,word ptr [eax+104h]"
"	      0054c224    cmp eax,[ebp+8]"
"	      0054c227    jne near ptr 0054C30Fh"
);
// LINE 1904:
	asm( 
"	      0054c22d    mov eax,[ebp-30h]"
"	      0054c230    movsx eax,word ptr [eax+104h]"
"	      0054c237    cmp eax,0Eh"
"	      0054c23a    jne near ptr 0054C306h"
"	      0054c240    mov eax,[ebp-30h]"
"	      0054c243    movsx eax,word ptr [eax+102h]"
"	      0054c24a    cmp eax,0FFFFFFFFh"
"	      0054c24d    je near ptr 0054C306h"
);
// LINE 1905:
	asm( 
"	      0054c253    mov eax,[ebp-30h]"
"	      0054c256    movsx eax,word ptr [eax+102h]"
"	      0054c25d    cmp eax,0FFFFFFFFh"
"	      0054c260    je near ptr 0054C281h"
"	      0054c266    mov eax,[ebp-30h]"
"	      0054c269    movsx eax,word ptr [eax+102h]"
"	      0054c270    add eax,62h"
"	      0054c273    mov [ebp-20h],ax"
"	      0054c277    jmp near ptr 0054C294h"
"	      0054c27c    jmp near ptr 0054C28Ch"
"	      0054c281    mov word ptr [ebp-20h],0FFFFh"
"	      0054c287    jmp near ptr 0054C294h"
"	      0054c28c    mov ax,[ebp-24h]"
"	      0054c290    mov [ebp-20h],ax"
"	      0054c294    jmp near ptr 0054C299h"
);
// LINE 1907:
	asm( 
"	      0054c299    movsx eax,word ptr [ebp-20h]"
"	      0054c29d    mov eax,[eax*4+604604h]"
"	      0054c2a4    mov [ebp-1Ch],eax"
);
// LINE 1908:
	asm( 
"	      0054c2a7    cmp dword ptr [ebp-1Ch],0"
"	      0054c2ab    jne near ptr 0054C2CDh"
"	      0054c2b1    push 8C085h"
"	      0054c2b6    push 5BAF40h"
"	      0054c2bb    push 774h"
"	      0054c2c0    push 5BAF48h"
"	      0054c2c5    call 00554F30h"
"	      0054c2ca    add esp,10h"
);
// LINE 1909:
	asm( 
"	      0054c2cd    mov eax,[ebp-30h]"
"	      0054c2d0    movsx eax,word ptr [eax+0F4h]"
"	      0054c2d7    lea eax,[eax*4-14h]"
"	      0054c2de    lea eax,[eax+eax*4]"
"	      0054c2e1    lea eax,[eax+eax*4]"
"	      0054c2e4    lea eax,[eax+eax*4]"
"	      0054c2e7    add eax,2AF8h"
"	      0054c2ec    push eax"
"	      0054c2ed    mov eax,[ebp-1Ch]"
"	      0054c2f0    mov eax,[eax]"
"	      0054c2f2    mov ecx,[ebp-1Ch]"
"	      0054c2f5    call dword ptr [eax+64h]"
);
// LINE 1910:
	asm( 
"	      0054c2f8    mov ax,1"
"	      0054c2fc    jmp near ptr 0054C66Ah"
);
// LINE 1912:
	asm( 
"	      0054c301    jmp near ptr 0054C30Fh"
);
// LINE 1913:
	asm( 
"	      0054c306    mov ax,1"
"	      0054c30a    jmp near ptr 0054C66Ah"
);
// LINE 1915:
	asm( 
"	      0054c30f    mov eax,[ebp+8]"
"	      0054c312    mov ecx,[ebp-30h]"
"	      0054c315    mov [ecx+104h],ax"
);
// LINE 1916:
	asm( 
"	      0054c31c    mov eax,[ebp-30h]"
"	      0054c31f    movsx eax,word ptr [eax+102h]"
"	      0054c326    cmp eax,0FFFFFFFFh"
"	      0054c329    jne near ptr 0054C3A1h"
);
// LINE 1917:
	asm( 
"	      0054c32f    test dword ptr [ebp+0Ch],0FFFFh"
"	      0054c336    jne near ptr 0054C345h"
);
// LINE 1918:
	asm( 
"	      0054c33c    mov ax,1"
"	      0054c340    jmp near ptr 0054C66Ah"
);
// LINE 1919:
	asm( 
"	      0054c345    mov word ptr [ebp-2Ch],0"
"	      0054c34b    jmp near ptr 0054C354h"
"	      0054c350    inc word ptr [ebp-2Ch]"
"	      0054c354    movsx eax,word ptr [ebp-2Ch]"
"	      0054c358    cmp eax,3"
"	      0054c35b    jge near ptr 0054C390h"
"	      0054c361    movsx eax,word ptr [ebp-2Ch]"
"	      0054c365    movsx eax,word ptr [eax*2+6356C8h]"
"	      0054c36d    test eax,eax"
"	      0054c36f    jne near ptr 0054C38Bh"
"	      0054c375    movsx eax,word ptr [ebp-2Ch]"
"	      0054c379    add eax,0Ch"
"	      0054c37c    mov ecx,[ebp-30h]"
"	      0054c37f    mov [ecx+102h],ax"
"	      0054c386    jmp near ptr 0054C3A1h"
"	      0054c38b    jmp near ptr 0054C350h"
"	      0054c390    mov eax,[ebp-30h]"
"	      0054c393    mov word ptr [eax+102h],0Ch"
"	      0054c39c    jmp near ptr 0054C3A1h"
);
// LINE 1922:
	asm( 
"	      0054c3a1    mov eax,[ebp-30h]"
"	      0054c3a4    movsx eax,word ptr [eax+102h]"
"	      0054c3ab    cmp eax,0FFFFFFFFh"
"	      0054c3ae    je near ptr 0054C3CFh"
"	      0054c3b4    mov eax,[ebp-30h]"
"	      0054c3b7    movsx eax,word ptr [eax+102h]"
"	      0054c3be    add eax,62h"
"	      0054c3c1    mov [ebp-14h],ax"
"	      0054c3c5    jmp near ptr 0054C3E2h"
"	      0054c3ca    jmp near ptr 0054C3DAh"
"	      0054c3cf    mov word ptr [ebp-14h],0FFFFh"
"	      0054c3d5    jmp near ptr 0054C3E2h"
"	      0054c3da    mov ax,[ebp-28h]"
"	      0054c3de    mov [ebp-14h],ax"
"	      0054c3e2    jmp near ptr 0054C3E7h"
);
// LINE 1923:
	asm( 
"	      0054c3e7    movsx eax,word ptr [ebp-14h]"
"	      0054c3eb    push eax"
"	      0054c3ec    call 00446E04h"
"	      0054c3f1    add esp,4"
);
// LINE 1924:
	asm( 
"	      0054c3f4    mov word ptr [ebp-0Ch],0"
);
// LINE 1925:
	asm( 
"	      0054c3fa    mov eax,[ebp-30h]"
"	      0054c3fd    mov ax,[eax+108h]"
"	      0054c404    mov [ebp-8],ax"
);
// LINE 1926:
	asm( 
"	      0054c408    mov eax,[ebp+8]"
"	      0054c40b    mov [ebp-34h],eax"
"	      0054c40e    jmp near ptr 0054C5A4h"
);
// LINE 1934:
	asm( 
"	      0054c413    mov ax,1"
"	      0054c417    jmp near ptr 0054C66Ah"
);
// LINE 1935:
	asm( 
"	      0054c41c    jmp near ptr 0054C60Bh"
);
// LINE 1937:
	asm( 
"	      0054c421    mov dword ptr [ebp-10h],5BAF6Ch"
);
// LINE 1938:
	asm( 
"	      0054c428    jmp near ptr 0054C60Bh"
);
// LINE 1940:
	asm( 
"	      0054c42d    mov dword ptr [ebp-10h],5BAF78h"
);
// LINE 1941:
	asm( 
"	      0054c434    jmp near ptr 0054C60Bh"
);
// LINE 1943:
	asm( 
"	      0054c439    mov dword ptr [ebp-10h],5BAF84h"
);
// LINE 1944:
	asm( 
"	      0054c440    jmp near ptr 0054C60Bh"
);
// LINE 1946:
	asm( 
"	      0054c445    mov dword ptr [ebp-10h],5BAF90h"
);
// LINE 1947:
	asm( 
"	      0054c44c    jmp near ptr 0054C60Bh"
);
// LINE 1949:
	asm( 
"	      0054c451    mov dword ptr [ebp-10h],5BAF9Ch"
);
// LINE 1950:
	asm( 
"	      0054c458    jmp near ptr 0054C60Bh"
);
// LINE 1952:
	asm( 
"	      0054c45d    mov dword ptr [ebp-10h],5BAFA8h"
);
// LINE 1953:
	asm( 
"	      0054c464    jmp near ptr 0054C60Bh"
);
// LINE 1955:
	asm( 
"	      0054c469    mov dword ptr [ebp-10h],5BAFB4h"
);
// LINE 1956:
	asm( 
"	      0054c470    jmp near ptr 0054C60Bh"
);
// LINE 1958:
	asm( 
"	      0054c475    mov dword ptr [ebp-10h],5BAFC4h"
);
// LINE 1959:
	asm( 
"	      0054c47c    jmp near ptr 0054C60Bh"
);
// LINE 1961:
	asm( 
"	      0054c481    mov dword ptr [ebp-10h],5BAFD0h"
);
// LINE 1962:
	asm( 
"	      0054c488    jmp near ptr 0054C60Bh"
);
// LINE 1964:
	asm( 
"	      0054c48d    mov dword ptr [ebp-10h],5BAFDCh"
);
// LINE 1965:
	asm( 
"	      0054c494    jmp near ptr 0054C60Bh"
);
// LINE 1967:
	asm( 
"	      0054c499    mov dword ptr [ebp-10h],5BAFE8h"
);
// LINE 1968:
	asm( 
"	      0054c4a0    jmp near ptr 0054C60Bh"
);
// LINE 1970:
	asm( 
"	      0054c4a5    mov dword ptr [ebp-10h],5BAFF8h"
);
// LINE 1971:
	asm( 
"	      0054c4ac    jmp near ptr 0054C60Bh"
);
// LINE 1973:
	asm( 
"	      0054c4b1    mov dword ptr [ebp-10h],5BB008h"
);
// LINE 1974:
	asm( 
"	      0054c4b8    jmp near ptr 0054C60Bh"
);
// LINE 1976:
	asm( 
"	      0054c4bd    mov dword ptr [ebp-10h],5BB014h"
);
// LINE 1977:
	asm( 
"	      0054c4c4    jmp near ptr 0054C60Bh"
);
// LINE 1979:
	asm( 
"	      0054c4c9    mov dword ptr [ebp-10h],5BB020h"
);
// LINE 1980:
	asm( 
"	      0054c4d0    jmp near ptr 0054C60Bh"
);
// LINE 1982:
	asm( 
"	      0054c4d5    mov dword ptr [ebp-10h],5BB02Ch"
);
// LINE 1983:
	asm( 
"	      0054c4dc    jmp near ptr 0054C60Bh"
);
// LINE 1985:
	asm( 
"	      0054c4e1    mov dword ptr [ebp-10h],5BB03Ch"
);
// LINE 1986:
	asm( 
"	      0054c4e8    jmp near ptr 0054C60Bh"
);
// LINE 1988:
	asm( 
"	      0054c4ed    mov eax,[ebp-30h]"
"	      0054c4f0    movsx eax,word ptr [eax+0D6h]"
"	      0054c4f7    mov [ebp-38h],eax"
"	      0054c4fa    jmp near ptr 0054C523h"
);
// LINE 1992:
	asm( 
"	      0054c4ff    mov dword ptr [ebp-10h],5BB04Ch"
);
// LINE 1993:
	asm( 
"	      0054c506    jmp near ptr 0054C55Ah"
);
// LINE 1998:
	asm( 
"	      0054c50b    mov dword ptr [ebp-10h],5BB05Ch"
);
// LINE 1999:
	asm( 
"	      0054c512    jmp near ptr 0054C55Ah"
);
// LINE 2001:
	asm( 
"	      0054c517    mov dword ptr [ebp-10h],5BB06Ch"
);
// LINE 2002:
	asm( 
"	      0054c51e    jmp near ptr 0054C55Ah"
"	      0054c523    cmp dword ptr [ebp-38h],0Eh"
"	      0054c527    ja near ptr 0054C517h"
"	      0054c52d    mov eax,[ebp-38h]"
"	      0054c530    xor ecx,ecx"
"	      0054c532    mov cl,[eax+54C54Bh]"
"	      0054c538    jmp dword ptr [ecx*4+54C53Fh]"
"	      0054c53f    or eax,ebp"
"	      0054c541    push esp"
"	      0054c542    add bh,bh"
"	      0054c544    les edx,[eax+eax+17h]"
"	      0054c548    lds edx,[eax+eax]"
"	      0054c54c    add [eax],al"
"	      0054c54e    add [edx],al"
"	      0054c550    add al,[edx]"
"	      0054c552    add al,[edx]"
"	      0054c554    add al,[edx]"
"	      0054c556    add al,[ecx]"
"	      0054c558    add [ecx],eax"
);
// LINE 2003:
	asm( 
"	      0054c55a    mov word ptr [ebp-0Ch],1"
);
// LINE 2004:
	asm( 
"	      0054c560    mov eax,[ebp-30h]"
"	      0054c563    movsx eax,word ptr [eax+0F4h]"
"	      0054c56a    lea eax,[eax*4-14h]"
"	      0054c571    lea eax,[eax+eax*4]"
"	      0054c574    lea eax,[eax+eax*4]"
"	      0054c577    lea eax,[eax+eax*4]"
"	      0054c57a    mov [ebp-8],ax"
);
// LINE 2005:
	asm( 
"	      0054c57e    jmp near ptr 0054C60Bh"
);
// LINE 2007:
	asm( 
"	      0054c583    push 8C085h"
"	      0054c588    push 5BB07Ch"
"	      0054c58d    push 7D7h"
"	      0054c592    push 5BB098h"
"	      0054c597    call 00554F30h"
"	      0054c59c    add esp,10h"
);
// LINE 2008:
	asm( 
"	      0054c59f    jmp near ptr 0054C60Bh"
"	      0054c5a4    inc dword ptr [ebp-34h]"
"	      0054c5a7    cmp dword ptr [ebp-34h],13h"
"	      0054c5ab    ja near ptr 0054C583h"
"	      0054c5b1    mov eax,[ebp-34h]"
"	      0054c5b4    jmp dword ptr [eax*4+54C5BBh]"
"	      0054c5bb    adc eax,esp"
"	      0054c5bd    push esp"
"	      0054c5be    add [ebx+210054C5h],al"
"	      0054c5c4    les edx,[eax+eax+2Dh]"
"	      0054c5c8    les edx,[eax+eax+39h]"
"	      0054c5cc    les edx,[eax+eax+45h]"
"	      0054c5d0    les edx,[eax+eax+51h]"
"	      0054c5d4    les edx,[eax+eax+5Dh]"
"	      0054c5d8    les edx,[eax+eax+69h]"
"	      0054c5dc    les edx,[eax+eax+75h]"
"	      0054c5e0    les edx,[eax+eax-7Fh]"
"	      0054c5e4    les edx,[eax+eax-73h]"
"	      0054c5e8    les edx,[eax+eax-67h]"
"	      0054c5ec    les edx,[eax+eax-5Bh]"
"	      0054c5f0    les edx,[eax+eax-4Fh]"
"	      0054c5f4    les edx,[eax+eax-13h]"
"	      0054c5f8    les edx,[eax+eax-43h]"
"	      0054c5fc    les edx,[eax+eax-37h]"
"	      0054c600    les edx,[eax+eax-2Bh]"
"	      0054c604    les edx,[eax+eax-1Fh]"
"	      0054c608    (bad)"
);
// LINE 2009:
	asm( 
"	      0054c60b    mov dword ptr [ebp-4],2"
);
// LINE 2010:
	asm( 
"	      0054c612    test dword ptr [ebp-0Ch],0FFFFh"
"	      0054c619    je near ptr 0054C623h"
);
// LINE 2011:
	asm( 
"	      0054c61f    or dword ptr [ebp-4],1"
);
// LINE 2012:
	asm( 
"	      0054c623    mov eax,[ebp-10h]"
"	      0054c626    push eax"
"	      0054c627    movsx eax,word ptr [ebp-14h]"
"	      0054c62b    push eax"
"	      0054c62c    call 00446A6Bh"
"	      0054c631    add esp,8"
);
// LINE 2013:
	asm( 
"	      0054c634    mov eax,[ebp-4]"
"	      0054c637    push eax"
"	      0054c638    mov eax,[ebp-30h]"
"	      0054c63b    add eax,3Ch"
"	      0054c63e    push eax"
"	      0054c63f    movsx eax,word ptr [ebp-14h]"
"	      0054c643    push eax"
"	      0054c644    call 00446CC2h"
"	      0054c649    add esp,0Ch"
"	      0054c64c    mov [ebp-18h],eax"
);
// LINE 2014:
	asm( 
"	      0054c64f    movsx eax,word ptr [ebp-8]"
"	      0054c653    push eax"
"	      0054c654    movsx eax,word ptr [ebp-14h]"
"	      0054c658    push eax"
"	      0054c659    call 00446E3Ch"
"	      0054c65e    add esp,8"
);
// LINE 2022:
	asm( 
"	      0054c661    mov ax,1"
"	      0054c665    jmp near ptr 0054C66Ah"
);
// LINE 2023:
	asm( 
"	      0054c66a    pop edi"
"	      0054c66b    pop esi"
"	      0054c66c    pop ebx"
"	      0054c66d    leave"
"	      0054c66e    ret 8"
);
}

// FUNCTION: SIMCOPTER 0x0054c671
void cYObject::SimulateAll() {
// LINE 2034:
	asm( 
"	      0054c671    push ebp"
"	      0054c672    mov ebp,esp"
"	      0054c674    sub esp,0E0h"
"	      0054c67a    push ebx"
"	      0054c67b    push esi"
"	      0054c67c    push edi"
);
// LINE 2085:
	asm( 
"	      0054c67d    mov eax,ds:[5B4760h]"
"	      0054c682    add ds:[5B869Ch],eax"
);
// LINE 2086:
	asm( 
"	      0054c688    mov eax,ds:[5B4760h]"
"	      0054c68d    mov [ebp-8],eax"
);
// LINE 2087:
	asm( 
"	      0054c690    mov word ptr [ebp-4],0"
);
// LINE 2088:
	asm( 
"	      0054c696    mov eax,ds:[5B8698h]"
"	      0054c69b    cmp ds:[5B869Ch],eax"
"	      0054c6a1    jle near ptr 0054C6C7h"
);
// LINE 2089:
	asm( 
"	      0054c6a7    mov word ptr [ebp-4],1"
);
// LINE 2090:
	asm( 
"	      0054c6ad    inc dword ptr ds:[5B8690h]"
);
// LINE 2091:
	asm( 
"	      0054c6b3    mov dword ptr ds:[5B8698h],147Ah"
);
// LINE 2092:
	asm( 
"	      0054c6bd    mov dword ptr ds:[5B869Ch],0"
);
// LINE 2096:
	asm( 
"	      0054c6c7    call 00547937h"
);
// LINE 2098:
	asm( 
"	      0054c6cc    test dword ptr [ebp-4],0FFFFh"
"	      0054c6d3    jne near ptr 0054C826h"
);
// LINE 2099:
	asm( 
"	      0054c6d9    mov word ptr [ebp-0Ch],0"
"	      0054c6df    jmp near ptr 0054C6E8h"
"	      0054c6e4    inc word ptr [ebp-0Ch]"
"	      0054c6e8    movsx eax,word ptr [ebp-0Ch]"
"	      0054c6ec    cmp eax,64h"
"	      0054c6ef    jge near ptr 0054C821h"
);
// LINE 2100:
	asm( 
"	      0054c6f5    movsx eax,word ptr [ebp-0Ch]"
"	      0054c6f9    cmp eax,7D00h"
"	      0054c6fe    jne near ptr 0054C711h"
"	      0054c704    mov eax,ds:[5B8680h]"
"	      0054c709    mov [ebp-10h],eax"
"	      0054c70c    jmp near ptr 0054C790h"
"	      0054c711    movsx eax,word ptr [ebp-0Ch]"
"	      0054c715    test eax,eax"
"	      0054c717    jl near ptr 0054C72Ah"
"	      0054c71d    movsx eax,word ptr [ebp-0Ch]"
"	      0054c721    cmp eax,64h"
"	      0054c724    jl near ptr 0054C746h"
"	      0054c72a    push 8C085h"
"	      0054c72f    push 5BB9F4h"
"	      0054c734    push 204h"
"	      0054c739    push 5BBA14h"
"	      0054c73e    call 00554F30h"
"	      0054c743    add esp,10h"
"	      0054c746    movsx eax,word ptr [ebp-0Ch]"
"	      0054c74a    cmp dword ptr [eax*4+636D40h],0"
"	      0054c752    jne near ptr 0054C774h"
"	      0054c758    push 8C085h"
"	      0054c75d    push 5BB9D0h"
"	      0054c762    push 205h"
"	      0054c767    push 5BBA14h"
"	      0054c76c    call 00554F30h"
"	      0054c771    add esp,10h"
"	      0054c774    movsx eax,word ptr [ebp-0Ch]"
"	      0054c778    mov eax,[eax*4+636D40h]"
"	      0054c77f    mov [ebp-10h],eax"
"	      0054c782    jmp near ptr 0054C790h"
"	      0054c787    mov eax,[ebp-0CCh]"
"	      0054c78d    mov [ebp-10h],eax"
);
// LINE 2101:
	asm( 
"	      0054c790    mov eax,[ebp-10h]"
"	      0054c793    movsx eax,word ptr [eax+0D2h]"
"	      0054c79a    test eax,eax"
"	      0054c79c    je near ptr 0054C81Ch"
);
// LINE 2102:
	asm( 
"	      0054c7a2    jmp near ptr 0054C7A7h"
"	      0054c7a7    mov eax,[ebp-10h]"
"	      0054c7aa    xor ecx,ecx"
"	      0054c7ac    mov cx,[eax+20h]"
"	      0054c7b0    test ecx,ecx"
"	      0054c7b2    jne near ptr 0054C7D4h"
"	      0054c7b8    push 8C085h"
"	      0054c7bd    push 5BBAECh"
"	      0054c7c2    push 1F8h"
"	      0054c7c7    push 5BBA14h"
"	      0054c7cc    call 00554F30h"
"	      0054c7d1    add esp,10h"
"	      0054c7d4    mov eax,[ebp-10h]"
"	      0054c7d7    add eax,3Ch"
"	      0054c7da    lea ecx,[ebp-70h]"
"	      0054c7dd    mov edx,[eax]"
"	      0054c7df    mov [ecx],edx"
"	      0054c7e1    mov edx,[eax+4]"
"	      0054c7e4    mov [ecx+4],edx"
"	      0054c7e7    mov eax,[eax+8]"
"	      0054c7ea    mov [ecx+8],eax"
"	      0054c7ed    push 40h"
"	      0054c7ef    mov eax,[ebp-10h]"
"	      0054c7f2    add eax,48h"
"	      0054c7f5    push eax"
"	      0054c7f6    lea eax,[ebp-58h]"
"	      0054c7f9    push eax"
"	      0054c7fa    call 0056A800h"
"	      0054c7ff    add esp,0Ch"
"	      0054c802    push 3"
"	      0054c804    lea eax,[ebp-70h]"
"	      0054c807    push eax"
"	      0054c808    mov eax,[ebp-10h]"
"	      0054c80b    mov eax,[eax+2Ch]"
"	      0054c80e    push eax"
"	      0054c80f    call 004D8781h"
"	      0054c814    add esp,0Ch"
"	      0054c817    jmp near ptr 0054C81Ch"
);
// LINE 2103:
	asm( 
"	      0054c81c    jmp near ptr 0054C6E4h"
);
// LINE 2105:
	asm( 
"	      0054c821    jmp near ptr 0054CCB3h"
);
// LINE 2106:
	asm( 
"	      0054c826    inc dword ptr ds:[5B8694h]"
"	      0054c82c    movsx eax,word ptr ds:[5B8644h]"
"	      0054c833    cmp eax,ds:[5B8694h]"
"	      0054c839    jge near ptr 0054C849h"
"	      0054c83f    mov dword ptr ds:[5B8694h],0"
);
// LINE 2107:
	asm( 
"	      0054c849    inc word ptr ds:[5B86B0h]"
"	      0054c850    movsx eax,word ptr ds:[5B86B0h]"
"	      0054c857    cmp eax,2"
"	      0054c85a    jle near ptr 0054C869h"
"	      0054c860    mov word ptr ds:[5B86B0h],0"
);
// LINE 2108:
	asm( 
"	      0054c869    mov word ptr [ebp-14h],0"
"	      0054c86f    jmp near ptr 0054C878h"
"	      0054c874    inc word ptr [ebp-14h]"
"	      0054c878    movsx eax,word ptr [ebp-14h]"
"	      0054c87c    cmp eax,64h"
"	      0054c87f    jge near ptr 0054CC8Dh"
);
// LINE 2109:
	asm( 
"	      0054c885    movsx eax,word ptr [ebp-14h]"
"	      0054c889    cmp eax,7D00h"
"	      0054c88e    jne near ptr 0054C8A1h"
"	      0054c894    mov eax,ds:[5B8680h]"
"	      0054c899    mov [ebp-18h],eax"
"	      0054c89c    jmp near ptr 0054C920h"
"	      0054c8a1    movsx eax,word ptr [ebp-14h]"
"	      0054c8a5    test eax,eax"
"	      0054c8a7    jl near ptr 0054C8BAh"
"	      0054c8ad    movsx eax,word ptr [ebp-14h]"
"	      0054c8b1    cmp eax,64h"
"	      0054c8b4    jl near ptr 0054C8D6h"
"	      0054c8ba    push 8C085h"
"	      0054c8bf    push 5BB9F4h"
"	      0054c8c4    push 204h"
"	      0054c8c9    push 5BBA14h"
"	      0054c8ce    call 00554F30h"
"	      0054c8d3    add esp,10h"
"	      0054c8d6    movsx eax,word ptr [ebp-14h]"
"	      0054c8da    cmp dword ptr [eax*4+636D40h],0"
"	      0054c8e2    jne near ptr 0054C904h"
"	      0054c8e8    push 8C085h"
"	      0054c8ed    push 5BB9D0h"
"	      0054c8f2    push 205h"
"	      0054c8f7    push 5BBA14h"
"	      0054c8fc    call 00554F30h"
"	      0054c901    add esp,10h"
"	      0054c904    movsx eax,word ptr [ebp-14h]"
"	      0054c908    mov eax,[eax*4+636D40h]"
"	      0054c90f    mov [ebp-18h],eax"
"	      0054c912    jmp near ptr 0054C920h"
"	      0054c917    mov eax,[ebp-0D0h]"
"	      0054c91d    mov [ebp-18h],eax"
);
// LINE 2110:
	asm( 
"	      0054c920    mov eax,[ebp-18h]"
"	      0054c923    movsx eax,word ptr [eax+0D2h]"
"	      0054c92a    test eax,eax"
"	      0054c92c    je near ptr 0054CC88h"
);
// LINE 2111:
	asm( 
"	      0054c932    cmp dword ptr ds:[5B8694h],0"
"	      0054c939    jne near ptr 0054CBFDh"
);
// LINE 2113:
	asm( 
"	      0054c93f    mov eax,[ebp-18h]"
"	      0054c942    movsx eax,word ptr [eax+0D8h]"
"	      0054c949    test eax,eax"
"	      0054c94b    jne near ptr 0054CBFDh"
"	      0054c951    mov ecx,[ebp-18h]"
"	      0054c954    call 00549F04h"
"	      0054c959    movzx eax,ax"
"	      0054c95c    test eax,eax"
"	      0054c95e    je near ptr 0054CBFDh"
);
// LINE 2114:
	asm( 
"	      0054c964    mov eax,[ebp-18h]"
"	      0054c967    movsx eax,word ptr [eax+0D2h]"
"	      0054c96e    test eax,eax"
"	      0054c970    jne near ptr 0054C992h"
"	      0054c976    push 8C085h"
"	      0054c97b    push 5BBC88h"
"	      0054c980    push 2E4h"
"	      0054c985    push 5BBA14h"
"	      0054c98a    call 00554F30h"
"	      0054c98f    add esp,10h"
"	      0054c992    jmp near ptr 0054C997h"
"	      0054c997    mov eax,[ebp-18h]"
"	      0054c99a    xor ecx,ecx"
"	      0054c99c    mov cx,[eax+20h]"
"	      0054c9a0    test ecx,ecx"
"	      0054c9a2    jne near ptr 0054C9C4h"
"	      0054c9a8    push 8C085h"
"	      0054c9ad    push 5BBC5Ch"
"	      0054c9b2    push 2E5h"
"	      0054c9b7    push 5BBA14h"
"	      0054c9bc    call 00554F30h"
"	      0054c9c1    add esp,10h"
"	      0054c9c4    mov eax,[ebp-18h]"
"	      0054c9c7    xor ecx,ecx"
"	      0054c9c9    mov cl,[eax+88h]"
"	      0054c9cf    cmp ecx,0FFFFFFFFh"
"	      0054c9d2    jne near ptr 0054CA0Dh"
"	      0054c9d8    mov eax,[ebp-18h]"
"	      0054c9db    xor ecx,ecx"
"	      0054c9dd    mov cl,[eax+89h]"
"	      0054c9e3    cmp ecx,0FFFFFFFFh"
"	      0054c9e6    je near ptr 0054CA08h"
"	      0054c9ec    push 8C085h"
"	      0054c9f1    push 5BBAD4h"
"	      0054c9f6    push 22Eh"
"	      0054c9fb    push 5BBA14h"
"	      0054ca00    call 00554F30h"
"	      0054ca05    add esp,10h"
"	      0054ca08    jmp near ptr 0054CA3Dh"
"	      0054ca0d    mov eax,[ebp-18h]"
"	      0054ca10    xor ecx,ecx"
"	      0054ca12    mov cl,[eax+89h]"
"	      0054ca18    cmp ecx,0FFFFFFFFh"
"	      0054ca1b    jne near ptr 0054CA3Dh"
"	      0054ca21    push 8C085h"
"	      0054ca26    push 5BBABCh"
"	      0054ca2b    push 231h"
"	      0054ca30    push 5BBA14h"
"	      0054ca35    call 00554F30h"
"	      0054ca3a    add esp,10h"
"	      0054ca3d    mov eax,[ebp-18h]"
"	      0054ca40    xor ecx,ecx"
"	      0054ca42    mov cl,[eax+88h]"
"	      0054ca48    cmp ecx,0FFFFFFFFh"
"	      0054ca4b    je near ptr 0054CA5Bh"
"	      0054ca51    jmp near ptr 0054CA8Ch"
"	      0054ca56    jmp near ptr 0054CA5Bh"
"	      0054ca5b    jmp near ptr 0054CA70h"
"	      0054ca60    test dword ptr [ebp-0E0h],0FFFFh"
"	      0054ca6a    jne near ptr 0054CA8Ch"
"	      0054ca70    push 8C085h"
"	      0054ca75    push 5BBC3Ch"
"	      0054ca7a    push 2E6h"
"	      0054ca7f    push 5BBA14h"
"	      0054ca84    call 00554F30h"
"	      0054ca89    add esp,10h"
"	      0054ca8c    mov eax,[ebp-18h]"
"	      0054ca8f    movsx eax,word ptr [eax+102h]"
"	      0054ca96    cmp eax,0FFFFFFFFh"
"	      0054ca99    je near ptr 0054CB45h"
"	      0054ca9f    mov eax,[ebp-18h]"
"	      0054caa2    mov word ptr [eax+104h],0FFFFh"
"	      0054caab    mov eax,[ebp-18h]"
"	      0054caae    movsx eax,word ptr [eax+102h]"
"	      0054cab5    cmp eax,0FFFFFFFFh"
"	      0054cab8    je near ptr 0054CB20h"
"	      0054cabe    mov eax,[ebp-18h]"
"	      0054cac1    movsx eax,word ptr [eax+102h]"
"	      0054cac8    cmp eax,0FFFFFFFFh"
"	      0054cacb    je near ptr 0054CAEFh"
"	      0054cad1    mov eax,[ebp-18h]"
"	      0054cad4    movsx eax,word ptr [eax+102h]"
"	      0054cadb    add eax,62h"
"	      0054cade    mov [ebp-0D8h],ax"
"	      0054cae5    jmp near ptr 0054CB0Bh"
"	      0054caea    jmp near ptr 0054CAFDh"
"	      0054caef    mov word ptr [ebp-0D8h],0FFFFh"
"	      0054caf8    jmp near ptr 0054CB0Bh"
"	      0054cafd    mov ax,[ebp-0DCh]"
"	      0054cb04    mov [ebp-0D8h],ax"
"	      0054cb0b    jmp near ptr 0054CB10h"
"	      0054cb10    movsx eax,word ptr [ebp-0D8h]"
"	      0054cb17    push eax"
"	      0054cb18    call 00446E04h"
"	      0054cb1d    add esp,4"
"	      0054cb20    jmp near ptr 0054CB25h"
"	      0054cb25    mov eax,[ebp-18h]"
"	      0054cb28    movsx eax,word ptr [eax+102h]"
"	      0054cb2f    mov word ptr [eax*2+6356B0h],0"
"	      0054cb39    mov eax,[ebp-18h]"
"	      0054cb3c    mov word ptr [eax+102h],0FFFFh"
"	      0054cb45    jmp near ptr 0054CB4Ah"
"	      0054cb4a    mov eax,[ebp-18h]"
"	      0054cb4d    mov word ptr [eax+0D2h],0"
"	      0054cb56    mov eax,[ebp-18h]"
"	      0054cb59    mov word ptr [eax+0F0h],0FFFFh"
"	      0054cb62    mov eax,[ebp-18h]"
"	      0054cb65    mov word ptr [eax+9Ch],0FFFFh"
"	      0054cb6e    mov eax,[ebp-18h]"
"	      0054cb71    movsx eax,word ptr [eax+0D8h]"
"	      0054cb78    mov [ebp-0D4h],eax"
"	      0054cb7e    cmp dword ptr [ebp-0D4h],0"
"	      0054cb85    jne near ptr 0054CB9Eh"
"	      0054cb8b    movsx eax,word ptr ds:[5B8674h]"
"	      0054cb92    dec eax"
"	      0054cb93    mov ds:[5B8674h],ax"
"	      0054cb99    jmp near ptr 0054CBACh"
"	      0054cb9e    movsx eax,word ptr ds:[5B8670h]"
"	      0054cba5    dec eax"
"	      0054cba6    mov ds:[5B8670h],ax"
"	      0054cbac    jmp near ptr 0054CBB1h"
"	      0054cbb1    movsx eax,word ptr ds:[5B8670h]"
"	      0054cbb8    test eax,eax"
"	      0054cbba    jl near ptr 0054CBCFh"
"	      0054cbc0    movsx eax,word ptr ds:[5B8674h]"
"	      0054cbc7    test eax,eax"
"	      0054cbc9    jge near ptr 0054CBEBh"
"	      0054cbcf    push 8C085h"
"	      0054cbd4    push 5BBC24h"
"	      0054cbd9    push 2ECh"
"	      0054cbde    push 5BBA14h"
"	      0054cbe3    call 00554F30h"
"	      0054cbe8    add esp,10h"
"	      0054cbeb    mov ecx,[ebp-18h]"
"	      0054cbee    call 005507ECh"
"	      0054cbf3    jmp near ptr 0054CBF8h"
);
// LINE 2120:
	asm( 
"	      0054cbf8    jmp near ptr 0054C874h"
);
// LINE 2123:
	asm( 
"	      0054cbfd    jmp near ptr 0054CC02h"
"	      0054cc02    mov eax,[ebp-18h]"
"	      0054cc05    xor ecx,ecx"
"	      0054cc07    mov cx,[eax+20h]"
"	      0054cc0b    test ecx,ecx"
"	      0054cc0d    jne near ptr 0054CC2Fh"
"	      0054cc13    push 8C085h"
"	      0054cc18    push 5BBAECh"
"	      0054cc1d    push 1F8h"
"	      0054cc22    push 5BBA14h"
"	      0054cc27    call 00554F30h"
"	      0054cc2c    add esp,10h"
"	      0054cc2f    mov eax,[ebp-18h]"
"	      0054cc32    add eax,3Ch"
"	      0054cc35    lea ecx,[ebp-0C8h]"
"	      0054cc3b    mov edx,[eax]"
"	      0054cc3d    mov [ecx],edx"
"	      0054cc3f    mov edx,[eax+4]"
"	      0054cc42    mov [ecx+4],edx"
"	      0054cc45    mov eax,[eax+8]"
"	      0054cc48    mov [ecx+8],eax"
"	      0054cc4b    push 40h"
"	      0054cc4d    mov eax,[ebp-18h]"
"	      0054cc50    add eax,48h"
"	      0054cc53    push eax"
"	      0054cc54    lea eax,[ebp-0B0h]"
"	      0054cc5a    push eax"
"	      0054cc5b    call 0056A800h"
"	      0054cc60    add esp,0Ch"
"	      0054cc63    push 3"
"	      0054cc65    lea eax,[ebp-0C8h]"
"	      0054cc6b    push eax"
"	      0054cc6c    mov eax,[ebp-18h]"
"	      0054cc6f    mov eax,[eax+2Ch]"
"	      0054cc72    push eax"
"	      0054cc73    call 004D8781h"
"	      0054cc78    add esp,0Ch"
"	      0054cc7b    jmp near ptr 0054CC80h"
);
// LINE 2124:
	asm( 
"	      0054cc80    mov ecx,[ebp-18h]"
"	      0054cc83    call 0054DAF3h"
);
// LINE 2126:
	asm( 
"	      0054cc88    jmp near ptr 0054C874h"
);
// LINE 2127:
	asm( 
"	      0054cc8d    cmp dword ptr ds:[5B8694h],0"
"	      0054cc94    jne near ptr 0054CC9Fh"
);
// LINE 2128:
	asm( 
"	      0054cc9a    call 00547C6Bh"
);
// LINE 2130:
	asm( 
"	      0054cc9f    movsx eax,word ptr ds:[5B86B0h]"
"	      0054cca6    test eax,eax"
"	      0054cca8    jne near ptr 0054CCB3h"
);
// LINE 2131:
	asm( 
"	      0054ccae    call 0054BC3Ch"
);
// LINE 2134:
	asm( 
"	      0054ccb3    jmp near ptr 0054CCB8h"
"	      0054ccb8    pop edi"
"	      0054ccb9    pop esi"
"	      0054ccba    pop ebx"
"	      0054ccbb    leave"
"	      0054ccbc    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054ccbd
unsigned short cYObject::AddToHeli() {
// LINE 2137:
	asm( 
"	      0054ccbd    push ebp"
"	      0054ccbe    mov ebp,esp"
"	      0054ccc0    sub esp,18h"
"	      0054ccc3    push ebx"
"	      0054ccc4    push esi"
"	      0054ccc5    push edi"
"	      0054ccc6    mov [ebp-18h],ecx"
);
// LINE 2143:
	asm( 
"	      0054ccc9    mov eax,[ebp-18h]"
"	      0054cccc    movsx eax,word ptr [eax+9Ch]"
"	      0054ccd3    mov [ebp-14h],eax"
);
// LINE 2145:
	asm( 
"	      0054ccd6    mov dword ptr [ebp-10h],1"
);
// LINE 2146:
	asm( 
"	      0054ccdd    mov dword ptr [ebp-0Ch],200h"
);
// LINE 2147:
	asm( 
"	      0054cce4    mov eax,[ebp-18h]"
"	      0054cce7    movsx eax,word ptr [eax+0BCh]"
"	      0054ccee    mov [ebp-8],eax"
);
// LINE 2149:
	asm( 
"	      0054ccf1    lea eax,[ebp-14h]"
"	      0054ccf4    push eax"
"	      0054ccf5    mov eax,ds:[5B4968h]"
"	      0054ccfa    add eax,1C4h"
"	      0054ccff    push eax"
"	      0054cd00    call 004F9CFAh"
"	      0054cd05    add esp,8"
"	      0054cd08    test eax,eax"
"	      0054cd0a    jne near ptr 0054CD18h"
);
// LINE 2150:
	asm( 
"	      0054cd10    xor ax,ax"
"	      0054cd13    jmp near ptr 0054CD44h"
);
// LINE 2151:
	asm( 
"	      0054cd18    lea eax,[ebp-14h]"
"	      0054cd1b    push eax"
"	      0054cd1c    mov eax,ds:[5B4968h]"
"	      0054cd21    add eax,1C4h"
"	      0054cd26    push eax"
"	      0054cd27    call 004F9D16h"
"	      0054cd2c    add esp,8"
);
// LINE 2152:
	asm( 
"	      0054cd2f    mov ecx,[ebp-18h]"
"	      0054cd32    mov word ptr [ecx+0E2h],0"
);
// LINE 2153:
	asm( 
"	      0054cd3b    mov ax,1"
"	      0054cd3f    jmp near ptr 0054CD44h"
);
// LINE 2155:
	asm( 
"	      0054cd44    pop edi"
"	      0054cd45    pop esi"
"	      0054cd46    pop ebx"
"	      0054cd47    leave"
"	      0054cd48    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054cd49
void cYObject::RemoveFromHeli() {
// LINE 2158:
	asm( 
"	      0054cd49    push ebp"
"	      0054cd4a    mov ebp,esp"
"	      0054cd4c    sub esp,8"
"	      0054cd4f    push ebx"
"	      0054cd50    push esi"
"	      0054cd51    push edi"
"	      0054cd52    mov [ebp-8],ecx"
);
// LINE 2159:
	asm( 
"	      0054cd55    mov eax,[ebp-8]"
"	      0054cd58    movsx eax,word ptr [eax+0BCh]"
"	      0054cd5f    push eax"
"	      0054cd60    mov eax,ds:[5B4968h]"
"	      0054cd65    add eax,1C4h"
"	      0054cd6a    push eax"
"	      0054cd6b    call 004F9EAAh"
"	      0054cd70    add esp,8"
"	      0054cd73    mov [ebp-4],eax"
);
// LINE 2160:
	asm( 
"	      0054cd76    cmp dword ptr [ebp-4],0"
"	      0054cd7a    jne near ptr 0054CD9Ch"
"	      0054cd80    push 8C085h"
"	      0054cd85    push 5BB0BCh"
"	      0054cd8a    push 870h"
"	      0054cd8f    push 5BB0E8h"
"	      0054cd94    call 00554F30h"
"	      0054cd99    add esp,10h"
);
// LINE 2161:
	asm( 
"	      0054cd9c    mov eax,[ebp-8]"
"	      0054cd9f    mov word ptr [eax+0E2h],1"
);
// LINE 2162:
	asm( 
"	      0054cda8    jmp near ptr 0054CDADh"
"	      0054cdad    pop edi"
"	      0054cdae    pop esi"
"	      0054cdaf    pop ebx"
"	      0054cdb0    leave"
"	      0054cdb1    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054cdb2
class cYObject* cYObject::GetPersonWithMaster(struct _DYOBJ_INST*) {
// LINE 2165:
	asm( 
"	      0054cdb2    push ebp"
"	      0054cdb3    mov ebp,esp"
"	      0054cdb5    sub esp,10h"
"	      0054cdb8    push ebx"
"	      0054cdb9    push esi"
"	      0054cdba    push edi"
"	      0054cdbb    mov [ebp-10h],ecx"
);
// LINE 2166:
	asm( 
"	      0054cdbe    mov word ptr [ebp-4],0"
"	      0054cdc4    jmp near ptr 0054CDCDh"
"	      0054cdc9    inc word ptr [ebp-4]"
"	      0054cdcd    movsx eax,word ptr [ebp-4]"
"	      0054cdd1    cmp eax,64h"
"	      0054cdd4    jge near ptr 0054CEBCh"
);
// LINE 2167:
	asm( 
"	      0054cdda    movsx eax,word ptr [ebp-4]"
"	      0054cdde    cmp eax,7D00h"
"	      0054cde3    jne near ptr 0054CDF6h"
"	      0054cde9    mov eax,ds:[5B8680h]"
"	      0054cdee    mov [ebp-8],eax"
"	      0054cdf1    jmp near ptr 0054CE72h"
"	      0054cdf6    movsx eax,word ptr [ebp-4]"
"	      0054cdfa    test eax,eax"
"	      0054cdfc    jl near ptr 0054CE0Fh"
"	      0054ce02    movsx eax,word ptr [ebp-4]"
"	      0054ce06    cmp eax,64h"
"	      0054ce09    jl near ptr 0054CE2Bh"
"	      0054ce0f    push 8C085h"
"	      0054ce14    push 5BB9F4h"
"	      0054ce19    push 204h"
"	      0054ce1e    push 5BBA14h"
"	      0054ce23    call 00554F30h"
"	      0054ce28    add esp,10h"
"	      0054ce2b    movsx eax,word ptr [ebp-4]"
"	      0054ce2f    cmp dword ptr [eax*4+636D40h],0"
"	      0054ce37    jne near ptr 0054CE59h"
"	      0054ce3d    push 8C085h"
"	      0054ce42    push 5BB9D0h"
"	      0054ce47    push 205h"
"	      0054ce4c    push 5BBA14h"
"	      0054ce51    call 00554F30h"
"	      0054ce56    add esp,10h"
"	      0054ce59    movsx eax,word ptr [ebp-4]"
"	      0054ce5d    mov eax,[eax*4+636D40h]"
"	      0054ce64    mov [ebp-8],eax"
"	      0054ce67    jmp near ptr 0054CE72h"
"	      0054ce6c    mov eax,[ebp-0Ch]"
"	      0054ce6f    mov [ebp-8],eax"
);
// LINE 2168:
	asm( 
"	      0054ce72    cmp dword ptr [ebp-8],0"
"	      0054ce76    jne near ptr 0054CE98h"
"	      0054ce7c    push 8C085h"
"	      0054ce81    push 5BB10Ch"
"	      0054ce86    push 878h"
"	      0054ce8b    push 5BB130h"
"	      0054ce90    call 00554F30h"
"	      0054ce95    add esp,10h"
);
// LINE 2169:
	asm( 
"	      0054ce98    jmp near ptr 0054CE9Dh"
"	      0054ce9d    mov eax,[ebp-8]"
"	      0054cea0    mov ecx,[ebp+8]"
"	      0054cea3    cmp [eax+130h],ecx"
"	      0054cea9    jne near ptr 0054CEB7h"
);
// LINE 2170:
	asm( 
"	      0054ceaf    mov eax,[ebp-8]"
"	      0054ceb2    jmp near ptr 0054CEC3h"
);
// LINE 2171:
	asm( 
"	      0054ceb7    jmp near ptr 0054CDC9h"
);
// LINE 2172:
	asm( 
"	      0054cebc    xor eax,eax"
"	      0054cebe    jmp near ptr 0054CEC3h"
);
// LINE 2173:
	asm( 
"	      0054cec3    pop edi"
"	      0054cec4    pop esi"
"	      0054cec5    pop ebx"
"	      0054cec6    leave"
"	      0054cec7    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0054ceca
unsigned short cYObject::SetMaster(struct _DYOBJ_INST*) {
// LINE 2176:
	asm( 
"	      0054ceca    push ebp"
"	      0054cecb    mov ebp,esp"
"	      0054cecd    sub esp,0Ch"
"	      0054ced0    push ebx"
"	      0054ced1    push esi"
"	      0054ced2    push edi"
"	      0054ced3    mov [ebp-0Ch],ecx"
);
// LINE 2177:
	asm( 
"	      0054ced6    mov eax,[ebp-0Ch]"
"	      0054ced9    xor ecx,ecx"
"	      0054cedb    mov cl,[eax+88h]"
"	      0054cee1    cmp ecx,0FFFFFFFFh"
"	      0054cee4    jne near ptr 0054CF1Fh"
"	      0054ceea    mov eax,[ebp-0Ch]"
"	      0054ceed    xor ecx,ecx"
"	      0054ceef    mov cl,[eax+89h]"
"	      0054cef5    cmp ecx,0FFFFFFFFh"
"	      0054cef8    je near ptr 0054CF1Ah"
"	      0054cefe    push 8C085h"
"	      0054cf03    push 5BBAD4h"
"	      0054cf08    push 22Eh"
"	      0054cf0d    push 5BBA14h"
"	      0054cf12    call 00554F30h"
"	      0054cf17    add esp,10h"
"	      0054cf1a    jmp near ptr 0054CF4Fh"
"	      0054cf1f    mov eax,[ebp-0Ch]"
"	      0054cf22    xor ecx,ecx"
"	      0054cf24    mov cl,[eax+89h]"
"	      0054cf2a    cmp ecx,0FFFFFFFFh"
"	      0054cf2d    jne near ptr 0054CF4Fh"
"	      0054cf33    push 8C085h"
"	      0054cf38    push 5BBABCh"
"	      0054cf3d    push 231h"
"	      0054cf42    push 5BBA14h"
"	      0054cf47    call 00554F30h"
"	      0054cf4c    add esp,10h"
"	      0054cf4f    mov eax,[ebp-0Ch]"
"	      0054cf52    xor ecx,ecx"
"	      0054cf54    mov cl,[eax+88h]"
"	      0054cf5a    cmp ecx,0FFFFFFFFh"
"	      0054cf5d    je near ptr 0054CF6Dh"
"	      0054cf63    jmp near ptr 0054CF9Bh"
"	      0054cf68    jmp near ptr 0054CF6Dh"
"	      0054cf6d    jmp near ptr 0054CF7Fh"
"	      0054cf72    test dword ptr [ebp-8],0FFFFh"
"	      0054cf79    jne near ptr 0054CF9Bh"
"	      0054cf7f    push 8C085h"
"	      0054cf84    push 5BB154h"
"	      0054cf89    push 881h"
"	      0054cf8e    push 5BB180h"
"	      0054cf93    call 00554F30h"
"	      0054cf98    add esp,10h"
);
// LINE 2181:
	asm( 
"	      0054cf9b    mov eax,[ebp-0Ch]"
"	      0054cf9e    movsx eax,word ptr [eax+0BCh]"
"	      0054cfa5    cmp eax,7D00h"
"	      0054cfaa    je near ptr 0054CFDDh"
"	      0054cfb0    mov eax,[ebp-0Ch]"
"	      0054cfb3    cmp dword ptr [eax+130h],0"
"	      0054cfba    je near ptr 0054CFDDh"
);
// LINE 2182:
	asm( 
"	      0054cfc0    mov eax,[ebp-0Ch]"
"	      0054cfc3    mov eax,[eax+130h]"
"	      0054cfc9    movsx eax,word ptr [eax+0Ch]"
"	      0054cfcd    test al,4"
"	      0054cfcf    je near ptr 0054CFDDh"
);
// LINE 2183:
	asm( 
"	      0054cfd5    mov ecx,[ebp-0Ch]"
"	      0054cfd8    call 0054CD49h"
);
// LINE 2188:
	asm( 
"	      0054cfdd    mov word ptr [ebp-4],1"
);
// LINE 2189:
	asm( 
"	      0054cfe3    cmp dword ptr [ebp+8],0"
"	      0054cfe7    je near ptr 0054D091h"
"	      0054cfed    mov eax,[ebp-0Ch]"
"	      0054cff0    movsx eax,word ptr [eax+0BCh]"
"	      0054cff7    cmp eax,7D00h"
"	      0054cffc    je near ptr 0054D091h"
);
// LINE 2190:
	asm( 
"	      0054d002    mov eax,ds:[5B4968h]"
"	      0054d007    mov ecx,[ebp+8]"
"	      0054d00a    cmp [eax+0A4h],ecx"
"	      0054d010    jne near ptr 0054D034h"
);
// LINE 2192:
	asm( 
"	      0054d016    mov ecx,[ebp-0Ch]"
"	      0054d019    call 0054CCBDh"
"	      0054d01e    movzx eax,ax"
"	      0054d021    test eax,eax"
"	      0054d023    jne near ptr 0054D02Fh"
);
// LINE 2193:
	asm( 
"	      0054d029    mov word ptr [ebp-4],0"
);
// LINE 2196:
	asm( 
"	      0054d02f    jmp near ptr 0054D091h"
"	      0054d034    mov eax,ds:[5B4968h]"
"	      0054d039    mov ecx,[ebp+8]"
"	      0054d03c    cmp [eax+0BCh],ecx"
"	      0054d042    jne near ptr 0054D091h"
);
// LINE 2199:
	asm( 
"	      0054d048    mov eax,ds:[5B4968h]"
"	      0054d04d    cmp dword ptr [eax+1B0h],0"
"	      0054d054    je near ptr 0054D06Ch"
"	      0054d05a    mov eax,ds:[5B4968h]"
"	      0054d05f    cmp dword ptr [eax+1B4h],0"
"	      0054d066    je near ptr 0054D077h"
);
// LINE 2200:
	asm( 
"	      0054d06c    mov word ptr [ebp-4],0"
);
// LINE 2202:
	asm( 
"	      0054d072    jmp near ptr 0054D091h"
"	      0054d077    mov eax,[ebp+8]"
"	      0054d07a    push eax"
"	      0054d07b    mov ecx,[ebp-0Ch]"
"	      0054d07e    call 0054CDB2h"
"	      0054d083    test eax,eax"
"	      0054d085    je near ptr 0054D091h"
);
// LINE 2203:
	asm( 
"	      0054d08b    mov word ptr [ebp-4],0"
);
// LINE 2206:
	asm( 
"	      0054d091    test dword ptr [ebp-4],0FFFFh"
"	      0054d098    je near ptr 0054D0D3h"
);
// LINE 2207:
	asm( 
"	      0054d09e    mov eax,[ebp+8]"
"	      0054d0a1    mov ecx,[ebp-0Ch]"
"	      0054d0a4    mov [ecx+130h],eax"
);
// LINE 2209:
	asm( 
"	      0054d0aa    cmp dword ptr [ebp+8],0"
"	      0054d0ae    je near ptr 0054D0D3h"
);
// LINE 2210:
	asm( 
"	      0054d0b4    mov eax,[ebp+8]"
"	      0054d0b7    add eax,18h"
"	      0054d0ba    mov ecx,[ebp-0Ch]"
"	      0054d0bd    add ecx,0A0h"
"	      0054d0c3    mov edx,[eax]"
"	      0054d0c5    mov [ecx],edx"
"	      0054d0c7    mov edx,[eax+4]"
"	      0054d0ca    mov [ecx+4],edx"
"	      0054d0cd    mov eax,[eax+8]"
"	      0054d0d0    mov [ecx+8],eax"
);
// LINE 2217:
	asm( 
"	      0054d0d3    mov ax,[ebp-4]"
"	      0054d0d7    jmp near ptr 0054D0DCh"
);
// LINE 2218:
	asm( 
"	      0054d0dc    pop edi"
"	      0054d0dd    pop esi"
"	      0054d0de    pop ebx"
"	      0054d0df    leave"
"	      0054d0e0    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0054d0e3
unsigned short cYObject::AdjoinsRoad(struct Point3d) {
// LINE 2221:
	asm( 
"	      0054d0e3    push ebp"
"	      0054d0e4    mov ebp,esp"
"	      0054d0e6    sub esp,3Ch"
"	      0054d0e9    push ebx"
"	      0054d0ea    push esi"
"	      0054d0eb    push edi"
"	      0054d0ec    mov [ebp-3Ch],ecx"
);
// LINE 2222:
	asm( 
"	      0054d0ef    mov eax,[ebp+8]"
"	      0054d0f2    add eax,20000000h"
"	      0054d0f7    sar eax,16h"
"	      0054d0fa    mov [ebp-4],eax"
);
// LINE 2223:
	asm( 
"	      0054d0fd    mov eax,20000000h"
"	      0054d102    sub eax,[ebp+10h]"
"	      0054d105    sar eax,16h"
"	      0054d108    mov [ebp-8],eax"
);
// LINE 2230:
	asm( 
"	      0054d10b    mov eax,[ebp-4]"
"	      0054d10e    dec eax"
"	      0054d10f    cmp eax,80h"
"	      0054d114    jge near ptr 0054D247h"
"	      0054d11a    mov eax,[ebp-4]"
"	      0054d11d    dec eax"
"	      0054d11e    cmp eax,0FFFFFFFFh"
"	      0054d121    jle near ptr 0054D247h"
"	      0054d127    cmp dword ptr [ebp-8],80h"
"	      0054d12e    jge near ptr 0054D247h"
"	      0054d134    cmp dword ptr [ebp-8],0FFFFFFFFh"
"	      0054d138    jle near ptr 0054D247h"
"	      0054d13e    mov eax,[ebp-4]"
"	      0054d141    dec eax"
"	      0054d142    js near ptr 0054D169h"
"	      0054d148    mov eax,[ebp-4]"
"	      0054d14b    dec eax"
"	      0054d14c    cmp eax,7Fh"
"	      0054d14f    jg near ptr 0054D169h"
"	      0054d155    cmp dword ptr [ebp-8],0"
"	      0054d159    jl near ptr 0054D169h"
"	      0054d15f    cmp dword ptr [ebp-8],7Fh"
"	      0054d163    jle near ptr 0054D175h"
"	      0054d169    mov dword ptr [ebp-10h],0"
"	      0054d170    jmp near ptr 0054D230h"
"	      0054d175    mov eax,[ebp-4]"
"	      0054d178    mov eax,[eax*4+63984Ch]"
"	      0054d17f    mov ecx,[ebp-8]"
"	      0054d182    movzx ax,byte ptr [eax+ecx]"
"	      0054d187    mov [ebp-0Ch],ax"
"	      0054d18b    mov eax,[ebp-0Ch]"
"	      0054d18e    and eax,0FFFFh"
"	      0054d193    cmp eax,1Dh"
"	      0054d196    jl near ptr 0054D1ADh"
"	      0054d19c    mov eax,[ebp-0Ch]"
"	      0054d19f    and eax,0FFFFh"
"	      0054d1a4    cmp eax,2Bh"
"	      0054d1a7    jle near ptr 0054D213h"
"	      0054d1ad    mov eax,[ebp-0Ch]"
"	      0054d1b0    and eax,0FFFFh"
"	      0054d1b5    cmp eax,3Fh"
"	      0054d1b8    jl near ptr 0054D1CFh"
"	      0054d1be    mov eax,[ebp-0Ch]"
"	      0054d1c1    and eax,0FFFFh"
"	      0054d1c6    cmp eax,46h"
"	      0054d1c9    jle near ptr 0054D213h"
"	      0054d1cf    mov eax,[ebp-0Ch]"
"	      0054d1d2    and eax,0FFFFh"
"	      0054d1d7    cmp eax,49h"
"	      0054d1da    jl near ptr 0054D1F1h"
"	      0054d1e0    mov eax,[ebp-0Ch]"
"	      0054d1e3    and eax,0FFFFh"
"	      0054d1e8    cmp eax,59h"
"	      0054d1eb    jle near ptr 0054D213h"
"	      0054d1f1    mov eax,[ebp-0Ch]"
"	      0054d1f4    and eax,0FFFFh"
"	      0054d1f9    cmp eax,5Dh"
"	      0054d1fc    jl near ptr 0054D224h"
"	      0054d202    mov eax,[ebp-0Ch]"
"	      0054d205    and eax,0FFFFh"
"	      0054d20a    cmp eax,6Bh"
"	      0054d20d    jg near ptr 0054D224h"
"	      0054d213    mov dword ptr [ebp-10h],1"
"	      0054d21a    jmp near ptr 0054D230h"
"	      0054d21f    jmp near ptr 0054D230h"
"	      0054d224    mov dword ptr [ebp-10h],0"
"	      0054d22b    jmp near ptr 0054D230h"
"	      0054d230    test dword ptr [ebp-10h],0FFFFh"
"	      0054d237    jne near ptr 0054D64Ah"
"	      0054d23d    jmp near ptr 0054D259h"
"	      0054d242    jmp near ptr 0054D24Ch"
"	      0054d247    jmp near ptr 0054D259h"
"	      0054d24c    test dword ptr [ebp-14h],0FFFFh"
"	      0054d253    jne near ptr 0054D64Ah"
"	      0054d259    mov eax,[ebp-4]"
"	      0054d25c    inc eax"
"	      0054d25d    cmp eax,80h"
"	      0054d262    jge near ptr 0054D395h"
"	      0054d268    mov eax,[ebp-4]"
"	      0054d26b    inc eax"
"	      0054d26c    cmp eax,0FFFFFFFFh"
"	      0054d26f    jle near ptr 0054D395h"
"	      0054d275    cmp dword ptr [ebp-8],80h"
"	      0054d27c    jge near ptr 0054D395h"
"	      0054d282    cmp dword ptr [ebp-8],0FFFFFFFFh"
"	      0054d286    jle near ptr 0054D395h"
"	      0054d28c    mov eax,[ebp-4]"
"	      0054d28f    inc eax"
"	      0054d290    js near ptr 0054D2B7h"
"	      0054d296    mov eax,[ebp-4]"
"	      0054d299    inc eax"
"	      0054d29a    cmp eax,7Fh"
"	      0054d29d    jg near ptr 0054D2B7h"
"	      0054d2a3    cmp dword ptr [ebp-8],0"
"	      0054d2a7    jl near ptr 0054D2B7h"
"	      0054d2ad    cmp dword ptr [ebp-8],7Fh"
"	      0054d2b1    jle near ptr 0054D2C3h"
"	      0054d2b7    mov dword ptr [ebp-1Ch],0"
"	      0054d2be    jmp near ptr 0054D37Eh"
"	      0054d2c3    mov eax,[ebp-4]"
"	      0054d2c6    mov eax,[eax*4+639854h]"
"	      0054d2cd    mov ecx,[ebp-8]"
"	      0054d2d0    movzx ax,byte ptr [eax+ecx]"
"	      0054d2d5    mov [ebp-18h],ax"
"	      0054d2d9    mov eax,[ebp-18h]"
"	      0054d2dc    and eax,0FFFFh"
"	      0054d2e1    cmp eax,1Dh"
"	      0054d2e4    jl near ptr 0054D2FBh"
"	      0054d2ea    mov eax,[ebp-18h]"
"	      0054d2ed    and eax,0FFFFh"
"	      0054d2f2    cmp eax,2Bh"
"	      0054d2f5    jle near ptr 0054D361h"
"	      0054d2fb    mov eax,[ebp-18h]"
"	      0054d2fe    and eax,0FFFFh"
"	      0054d303    cmp eax,3Fh"
"	      0054d306    jl near ptr 0054D31Dh"
"	      0054d30c    mov eax,[ebp-18h]"
"	      0054d30f    and eax,0FFFFh"
"	      0054d314    cmp eax,46h"
"	      0054d317    jle near ptr 0054D361h"
"	      0054d31d    mov eax,[ebp-18h]"
"	      0054d320    and eax,0FFFFh"
"	      0054d325    cmp eax,49h"
"	      0054d328    jl near ptr 0054D33Fh"
"	      0054d32e    mov eax,[ebp-18h]"
"	      0054d331    and eax,0FFFFh"
"	      0054d336    cmp eax,59h"
"	      0054d339    jle near ptr 0054D361h"
"	      0054d33f    mov eax,[ebp-18h]"
"	      0054d342    and eax,0FFFFh"
"	      0054d347    cmp eax,5Dh"
"	      0054d34a    jl near ptr 0054D372h"
"	      0054d350    mov eax,[ebp-18h]"
"	      0054d353    and eax,0FFFFh"
"	      0054d358    cmp eax,6Bh"
"	      0054d35b    jg near ptr 0054D372h"
"	      0054d361    mov dword ptr [ebp-1Ch],1"
"	      0054d368    jmp near ptr 0054D37Eh"
"	      0054d36d    jmp near ptr 0054D37Eh"
"	      0054d372    mov dword ptr [ebp-1Ch],0"
"	      0054d379    jmp near ptr 0054D37Eh"
"	      0054d37e    test dword ptr [ebp-1Ch],0FFFFh"
"	      0054d385    jne near ptr 0054D64Ah"
"	      0054d38b    jmp near ptr 0054D3A7h"
"	      0054d390    jmp near ptr 0054D39Ah"
"	      0054d395    jmp near ptr 0054D3A7h"
"	      0054d39a    test dword ptr [ebp-20h],0FFFFh"
"	      0054d3a1    jne near ptr 0054D64Ah"
"	      0054d3a7    cmp dword ptr [ebp-4],80h"
"	      0054d3ae    jge near ptr 0054D4E4h"
"	      0054d3b4    cmp dword ptr [ebp-4],0FFFFFFFFh"
"	      0054d3b8    jle near ptr 0054D4E4h"
"	      0054d3be    mov eax,[ebp-8]"
"	      0054d3c1    dec eax"
"	      0054d3c2    cmp eax,80h"
"	      0054d3c7    jge near ptr 0054D4E4h"
"	      0054d3cd    mov eax,[ebp-8]"
"	      0054d3d0    dec eax"
"	      0054d3d1    cmp eax,0FFFFFFFFh"
"	      0054d3d4    jle near ptr 0054D4E4h"
"	      0054d3da    cmp dword ptr [ebp-4],0"
"	      0054d3de    jl near ptr 0054D405h"
"	      0054d3e4    cmp dword ptr [ebp-4],7Fh"
"	      0054d3e8    jg near ptr 0054D405h"
"	      0054d3ee    mov eax,[ebp-8]"
"	      0054d3f1    dec eax"
"	      0054d3f2    js near ptr 0054D405h"
"	      0054d3f8    mov eax,[ebp-8]"
"	      0054d3fb    dec eax"
"	      0054d3fc    cmp eax,7Fh"
"	      0054d3ff    jle near ptr 0054D411h"
"	      0054d405    mov dword ptr [ebp-28h],0"
"	      0054d40c    jmp near ptr 0054D4CDh"
"	      0054d411    mov eax,[ebp-4]"
"	      0054d414    mov eax,[eax*4+639850h]"
"	      0054d41b    mov ecx,[ebp-8]"
"	      0054d41e    movzx ax,byte ptr [eax+ecx-1]"
"	      0054d424    mov [ebp-24h],ax"
"	      0054d428    mov eax,[ebp-24h]"
"	      0054d42b    and eax,0FFFFh"
"	      0054d430    cmp eax,1Dh"
"	      0054d433    jl near ptr 0054D44Ah"
"	      0054d439    mov eax,[ebp-24h]"
"	      0054d43c    and eax,0FFFFh"
"	      0054d441    cmp eax,2Bh"
"	      0054d444    jle near ptr 0054D4B0h"
"	      0054d44a    mov eax,[ebp-24h]"
"	      0054d44d    and eax,0FFFFh"
"	      0054d452    cmp eax,3Fh"
"	      0054d455    jl near ptr 0054D46Ch"
"	      0054d45b    mov eax,[ebp-24h]"
"	      0054d45e    and eax,0FFFFh"
"	      0054d463    cmp eax,46h"
"	      0054d466    jle near ptr 0054D4B0h"
"	      0054d46c    mov eax,[ebp-24h]"
"	      0054d46f    and eax,0FFFFh"
"	      0054d474    cmp eax,49h"
"	      0054d477    jl near ptr 0054D48Eh"
"	      0054d47d    mov eax,[ebp-24h]"
"	      0054d480    and eax,0FFFFh"
"	      0054d485    cmp eax,59h"
"	      0054d488    jle near ptr 0054D4B0h"
"	      0054d48e    mov eax,[ebp-24h]"
"	      0054d491    and eax,0FFFFh"
"	      0054d496    cmp eax,5Dh"
"	      0054d499    jl near ptr 0054D4C1h"
"	      0054d49f    mov eax,[ebp-24h]"
"	      0054d4a2    and eax,0FFFFh"
"	      0054d4a7    cmp eax,6Bh"
"	      0054d4aa    jg near ptr 0054D4C1h"
"	      0054d4b0    mov dword ptr [ebp-28h],1"
"	      0054d4b7    jmp near ptr 0054D4CDh"
"	      0054d4bc    jmp near ptr 0054D4CDh"
"	      0054d4c1    mov dword ptr [ebp-28h],0"
"	      0054d4c8    jmp near ptr 0054D4CDh"
"	      0054d4cd    test dword ptr [ebp-28h],0FFFFh"
"	      0054d4d4    jne near ptr 0054D64Ah"
"	      0054d4da    jmp near ptr 0054D4F6h"
"	      0054d4df    jmp near ptr 0054D4E9h"
"	      0054d4e4    jmp near ptr 0054D4F6h"
"	      0054d4e9    test dword ptr [ebp-2Ch],0FFFFh"
"	      0054d4f0    jne near ptr 0054D64Ah"
"	      0054d4f6    cmp dword ptr [ebp-4],80h"
"	      0054d4fd    jge near ptr 0054D633h"
"	      0054d503    cmp dword ptr [ebp-4],0FFFFFFFFh"
"	      0054d507    jle near ptr 0054D633h"
"	      0054d50d    mov eax,[ebp-8]"
"	      0054d510    inc eax"
"	      0054d511    cmp eax,80h"
"	      0054d516    jge near ptr 0054D633h"
"	      0054d51c    mov eax,[ebp-8]"
"	      0054d51f    inc eax"
"	      0054d520    cmp eax,0FFFFFFFFh"
"	      0054d523    jle near ptr 0054D633h"
"	      0054d529    cmp dword ptr [ebp-4],0"
"	      0054d52d    jl near ptr 0054D554h"
"	      0054d533    cmp dword ptr [ebp-4],7Fh"
"	      0054d537    jg near ptr 0054D554h"
"	      0054d53d    mov eax,[ebp-8]"
"	      0054d540    inc eax"
"	      0054d541    js near ptr 0054D554h"
"	      0054d547    mov eax,[ebp-8]"
"	      0054d54a    inc eax"
"	      0054d54b    cmp eax,7Fh"
"	      0054d54e    jle near ptr 0054D560h"
"	      0054d554    mov dword ptr [ebp-34h],0"
"	      0054d55b    jmp near ptr 0054D61Ch"
"	      0054d560    mov eax,[ebp-4]"
"	      0054d563    mov eax,[eax*4+639850h]"
"	      0054d56a    mov ecx,[ebp-8]"
"	      0054d56d    movzx ax,byte ptr [eax+ecx+1]"
"	      0054d573    mov [ebp-30h],ax"
"	      0054d577    mov eax,[ebp-30h]"
"	      0054d57a    and eax,0FFFFh"
"	      0054d57f    cmp eax,1Dh"
"	      0054d582    jl near ptr 0054D599h"
"	      0054d588    mov eax,[ebp-30h]"
"	      0054d58b    and eax,0FFFFh"
"	      0054d590    cmp eax,2Bh"
"	      0054d593    jle near ptr 0054D5FFh"
"	      0054d599    mov eax,[ebp-30h]"
"	      0054d59c    and eax,0FFFFh"
"	      0054d5a1    cmp eax,3Fh"
"	      0054d5a4    jl near ptr 0054D5BBh"
"	      0054d5aa    mov eax,[ebp-30h]"
"	      0054d5ad    and eax,0FFFFh"
"	      0054d5b2    cmp eax,46h"
"	      0054d5b5    jle near ptr 0054D5FFh"
"	      0054d5bb    mov eax,[ebp-30h]"
"	      0054d5be    and eax,0FFFFh"
"	      0054d5c3    cmp eax,49h"
"	      0054d5c6    jl near ptr 0054D5DDh"
"	      0054d5cc    mov eax,[ebp-30h]"
"	      0054d5cf    and eax,0FFFFh"
"	      0054d5d4    cmp eax,59h"
"	      0054d5d7    jle near ptr 0054D5FFh"
"	      0054d5dd    mov eax,[ebp-30h]"
"	      0054d5e0    and eax,0FFFFh"
"	      0054d5e5    cmp eax,5Dh"
"	      0054d5e8    jl near ptr 0054D610h"
"	      0054d5ee    mov eax,[ebp-30h]"
"	      0054d5f1    and eax,0FFFFh"
"	      0054d5f6    cmp eax,6Bh"
"	      0054d5f9    jg near ptr 0054D610h"
"	      0054d5ff    mov dword ptr [ebp-34h],1"
"	      0054d606    jmp near ptr 0054D61Ch"
"	      0054d60b    jmp near ptr 0054D61Ch"
"	      0054d610    mov dword ptr [ebp-34h],0"
"	      0054d617    jmp near ptr 0054D61Ch"
"	      0054d61c    test dword ptr [ebp-34h],0FFFFh"
"	      0054d623    je near ptr 0054D653h"
"	      0054d629    jmp near ptr 0054D64Ah"
"	      0054d62e    jmp near ptr 0054D63Dh"
"	      0054d633    jmp near ptr 0054D653h"
"	      0054d638    jmp near ptr 0054D64Ah"
"	      0054d63d    test dword ptr [ebp-38h],0FFFFh"
"	      0054d644    je near ptr 0054D653h"
);
// LINE 2234:
	asm( 
"	      0054d64a    mov ax,1"
"	      0054d64e    jmp near ptr 0054D65Bh"
);
// LINE 2235:
	asm( 
"	      0054d653    xor ax,ax"
"	      0054d656    jmp near ptr 0054D65Bh"
);
// LINE 2236:
	asm( 
"	      0054d65b    pop edi"
"	      0054d65c    pop esi"
"	      0054d65d    pop ebx"
"	      0054d65e    leave"
"	      0054d65f    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x0054d662
unsigned short cYObject::GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *) {
// LINE 2239:
	asm( 
"	      0054d662    push ebp"
"	      0054d663    mov ebp,esp"
"	      0054d665    sub esp,88h"
"	      0054d66b    push ebx"
"	      0054d66c    push esi"
"	      0054d66d    push edi"
"	      0054d66e    mov [ebp-88h],ecx"
);
// LINE 2243:
	asm( 
"	      0054d674    mov eax,[ebp+0Ch]"
"	      0054d677    mov eax,[eax]"
"	      0054d679    and eax,0FFh"
"	      0054d67e    mov ecx,[ebp+8]"
"	      0054d681    mov ecx,[ecx]"
"	      0054d683    and ecx,0FFh"
"	      0054d689    shl ecx,0Ah"
"	      0054d68c    mov eax,[ecx+eax*4+67ED30h]"
"	      0054d693    mov [ebp-20h],eax"
);
// LINE 2244:
	asm( 
"	      0054d696    mov eax,[ebp-20h]"
"	      0054d699    movsx eax,word ptr [eax+2]"
"	      0054d69d    shl eax,10h"
"	      0054d6a0    add eax,20000000h"
"	      0054d6a5    sar eax,16h"
"	      0054d6a8    mov ecx,[ebp+8]"
"	      0054d6ab    mov [ecx],eax"
);
// LINE 2245:
	asm( 
"	      0054d6ad    mov eax,20000000h"
"	      0054d6b2    mov ecx,[ebp-20h]"
"	      0054d6b5    movsx ecx,word ptr [ecx+6]"
"	      0054d6b9    shl ecx,10h"
"	      0054d6bc    sub eax,ecx"
"	      0054d6be    sar eax,16h"
"	      0054d6c1    mov ecx,[ebp+0Ch]"
"	      0054d6c4    mov [ecx],eax"
);
// LINE 2246:
	asm( 
"	      0054d6c6    mov eax,[ebp+0Ch]"
"	      0054d6c9    mov eax,[eax]"
"	      0054d6cb    push eax"
"	      0054d6cc    mov eax,[ebp+8]"
"	      0054d6cf    mov eax,[eax]"
"	      0054d6d1    push eax"
"	      0054d6d2    call 00555746h"
"	      0054d6d7    add esp,8"
"	      0054d6da    mov [ebp-4],eax"
);
// LINE 2251:
	asm( 
"	      0054d6dd    mov word ptr [ebp-68h],0"
"	      0054d6e3    jmp near ptr 0054D6ECh"
"	      0054d6e8    inc word ptr [ebp-68h]"
"	      0054d6ec    movsx eax,word ptr [ebp-68h]"
"	      0054d6f0    cmp eax,0Ah"
"	      0054d6f3    jge near ptr 0054D730h"
"	      0054d6f9    mov eax,[ebp-88h]"
"	      0054d6ff    movsx eax,word ptr [eax+0D6h]"
"	      0054d706    lea eax,[eax+eax*4]"
"	      0054d709    movsx ecx,word ptr [ebp-68h]"
"	      0054d70d    shl ecx,2"
"	      0054d710    mov edx,[ebp-4]"
"	      0054d713    cmp [ecx+eax*8+6372D0h],edx"
"	      0054d71a    jne near ptr 0054D72Bh"
"	      0054d720    mov word ptr [ebp-64h],1"
"	      0054d726    jmp near ptr 0054D73Bh"
"	      0054d72b    jmp near ptr 0054D6E8h"
"	      0054d730    mov word ptr [ebp-64h],0"
"	      0054d736    jmp near ptr 0054D73Bh"
"	      0054d73b    mov eax,[ebp-20h]"
"	      0054d73e    mov eax,[eax+10h]"
"	      0054d741    mov [ebp-6Ch],eax"
"	      0054d744    mov word ptr [ebp-70h],0"
"	      0054d74a    cmp dword ptr [ebp-6Ch],0"
"	      0054d74e    je near ptr 0054D774h"
"	      0054d754    mov eax,[ebp-6Ch]"
"	      0054d757    movsx eax,word ptr [eax+0Ch]"
"	      0054d75b    test al,8"
"	      0054d75d    je near ptr 0054D767h"
"	      0054d763    inc word ptr [ebp-70h]"
"	      0054d767    mov eax,[ebp-6Ch]"
"	      0054d76a    mov eax,[eax]"
"	      0054d76c    mov [ebp-6Ch],eax"
"	      0054d76f    jmp near ptr 0054D74Ah"
"	      0054d774    jmp near ptr 0054D779h"
"	      0054d779    mov eax,[ebp-4]"
"	      0054d77c    movsx eax,word ptr [eax*8+63526Ch]"
"	      0054d784    movsx ecx,word ptr [ebp-70h]"
"	      0054d788    cmp eax,ecx"
"	      0054d78a    jle near ptr 0054D79Bh"
"	      0054d790    mov word ptr [ebp-60h],1"
"	      0054d796    jmp near ptr 0054D7A1h"
"	      0054d79b    mov word ptr [ebp-60h],0"
"	      0054d7a1    test dword ptr [ebp-64h],0FFFFh"
"	      0054d7a8    je near ptr 0054D7CAh"
"	      0054d7ae    test dword ptr [ebp-60h],0FFFFh"
"	      0054d7b5    je near ptr 0054D7CAh"
"	      0054d7bb    jmp near ptr 0054D7E4h"
"	      0054d7c0    jmp near ptr 0054D7DCh"
"	      0054d7c5    jmp near ptr 0054D7CFh"
"	      0054d7ca    jmp near ptr 0054D7DCh"
"	      0054d7cf    test dword ptr [ebp-74h],0FFFFh"
"	      0054d7d6    jne near ptr 0054D7E4h"
);
// LINE 2252:
	asm( 
"	      0054d7dc    xor ax,ax"
"	      0054d7df    jmp near ptr 0054DAECh"
);
// LINE 2254:
	asm( 
"	      0054d7e4    mov eax,[ebp-4]"
"	      0054d7e7    mov eax,[eax*8+635268h]"
"	      0054d7ee    push eax"
"	      0054d7ef    mov eax,[ebp+14h]"
"	      0054d7f2    push eax"
"	      0054d7f3    mov eax,[ebp+10h]"
"	      0054d7f6    push eax"
"	      0054d7f7    mov eax,[ebp-20h]"
"	      0054d7fa    push eax"
"	      0054d7fb    mov ecx,[ebp-88h]"
"	      0054d801    call 00545049h"
"	      0054d806    movzx eax,ax"
"	      0054d809    test eax,eax"
"	      0054d80b    jne near ptr 0054D819h"
);
// LINE 2255:
	asm( 
"	      0054d811    xor ax,ax"
"	      0054d814    jmp near ptr 0054DAECh"
);
// LINE 2256:
	asm( 
"	      0054d819    mov eax,[ebp-4]"
"	      0054d81c    cmp dword ptr [eax*8+635268h],0"
"	      0054d824    jne near ptr 0054D8DDh"
"	      0054d82a    mov eax,[ebp+14h]"
"	      0054d82d    mov eax,[eax]"
"	      0054d82f    mov [ebp-58h],eax"
"	      0054d832    mov eax,[ebp+10h]"
"	      0054d835    mov eax,[eax]"
"	      0054d837    mov [ebp-5Ch],eax"
);
// LINE 2257:
	asm( 
"	      0054d83a    mov eax,[ebp-20h]"
"	      0054d83d    movsx eax,word ptr [eax+2]"
"	      0054d841    shl eax,10h"
"	      0054d844    add eax,[ebp-5Ch]"
"	      0054d847    mov [ebp-54h],eax"
"	      0054d84a    mov eax,[ebp-20h]"
"	      0054d84d    movsx eax,word ptr [eax+4]"
"	      0054d851    shl eax,10h"
"	      0054d854    add eax,30000h"
"	      0054d859    mov [ebp-50h],eax"
"	      0054d85c    mov eax,[ebp-20h]"
"	      0054d85f    movsx eax,word ptr [eax+6]"
"	      0054d863    shl eax,10h"
"	      0054d866    add eax,[ebp-58h]"
"	      0054d869    mov [ebp-4Ch],eax"
"	      0054d86c    lea eax,[ebp-54h]"
"	      0054d86f    lea ecx,[ebp-48h]"
"	      0054d872    mov edx,[eax]"
"	      0054d874    mov [ecx],edx"
"	      0054d876    mov edx,[eax+4]"
"	      0054d879    mov [ecx+4],edx"
"	      0054d87c    mov eax,[eax+8]"
"	      0054d87f    mov [ecx+8],eax"
"	      0054d882    jmp near ptr 0054D887h"
"	      0054d887    lea eax,[ebp-48h]"
"	      0054d88a    lea ecx,[ebp-3Ch]"
"	      0054d88d    mov edx,[eax]"
"	      0054d88f    mov [ecx],edx"
"	      0054d891    mov edx,[eax+4]"
"	      0054d894    mov [ecx+4],edx"
"	      0054d897    mov eax,[eax+8]"
"	      0054d89a    mov [ecx+8],eax"
"	      0054d89d    lea eax,[ebp-3Ch]"
"	      0054d8a0    lea ecx,[ebp-30h]"
"	      0054d8a3    mov edx,[eax]"
"	      0054d8a5    mov [ecx],edx"
"	      0054d8a7    mov edx,[eax+4]"
"	      0054d8aa    mov [ecx+4],edx"
"	      0054d8ad    mov eax,[eax+8]"
"	      0054d8b0    mov [ecx+8],eax"
);
// LINE 2259:
	asm( 
"	      0054d8b3    mov eax,[ebp-28h]"
"	      0054d8b6    push eax"
"	      0054d8b7    mov eax,[ebp-2Ch]"
"	      0054d8ba    push eax"
"	      0054d8bb    mov eax,[ebp-30h]"
"	      0054d8be    push eax"
"	      0054d8bf    mov ecx,[ebp-88h]"
"	      0054d8c5    call 0054D0E3h"
"	      0054d8ca    movzx eax,ax"
"	      0054d8cd    test eax,eax"
"	      0054d8cf    jne near ptr 0054D8DDh"
);
// LINE 2260:
	asm( 
"	      0054d8d5    xor ax,ax"
"	      0054d8d8    jmp near ptr 0054DAECh"
);
// LINE 2263:
	asm( 
"	      0054d8dd    mov eax,[ebp-20h]"
"	      0054d8e0    movsx eax,word ptr [eax+2]"
"	      0054d8e4    mov ecx,[ebp+10h]"
"	      0054d8e7    add eax,[ecx]"
"	      0054d8e9    shl eax,10h"
"	      0054d8ec    mov [ebp-0Ch],eax"
);
// LINE 2264:
	asm( 
"	      0054d8ef    mov eax,[ebp-20h]"
"	      0054d8f2    movsx eax,word ptr [eax+6]"
"	      0054d8f6    mov ecx,[ebp+14h]"
"	      0054d8f9    add eax,[ecx]"
"	      0054d8fb    shl eax,10h"
"	      0054d8fe    mov [ebp-18h],eax"
);
// LINE 2265:
	asm( 
"	      0054d901    mov eax,[ebp-0Ch]"
"	      0054d904    add eax,20000000h"
"	      0054d909    sar eax,16h"
"	      0054d90c    mov [ebp-14h],ax"
);
// LINE 2266:
	asm( 
"	      0054d910    mov eax,20000000h"
"	      0054d915    sub eax,[ebp-18h]"
"	      0054d918    sar eax,16h"
"	      0054d91b    mov [ebp-1Ch],ax"
);
// LINE 2267:
	asm( 
"	      0054d91f    movsx eax,word ptr [ebp-14h]"
"	      0054d923    and eax,0FFh"
"	      0054d928    shl eax,0Ah"
"	      0054d92b    movsx ecx,word ptr [ebp-1Ch]"
"	      0054d92f    and ecx,0FFh"
"	      0054d935    mov eax,[eax+ecx*4+67ED30h]"
"	      0054d93c    mov [ebp-24h],eax"
);
// LINE 2268:
	asm( 
"	      0054d93f    mov eax,[ebp-20h]"
"	      0054d942    cmp [ebp-24h],eax"
"	      0054d945    je near ptr 0054D967h"
"	      0054d94b    push 8C085h"
"	      0054d950    push 5BB1A4h"
"	      0054d955    push 8DCh"
"	      0054d95a    push 5BB1C8h"
"	      0054d95f    call 00554F30h"
"	      0054d964    add esp,10h"
"	      0054d967    mov eax,[ebp+0Ch]"
"	      0054d96a    mov eax,[eax]"
"	      0054d96c    mov [ebp-7Ch],ax"
"	      0054d970    mov eax,[ebp+8]"
"	      0054d973    mov eax,[eax]"
"	      0054d975    mov [ebp-80h],ax"
);
// LINE 2269:
	asm( 
"	      0054d979    movsx eax,word ptr [ebp-80h]"
"	      0054d97d    cmp eax,7Fh"
"	      0054d980    jg near ptr 0054D9ABh"
"	      0054d986    movsx eax,word ptr [ebp-7Ch]"
"	      0054d98a    cmp eax,7Fh"
"	      0054d98d    jg near ptr 0054D9ABh"
"	      0054d993    movsx eax,word ptr [ebp-80h]"
"	      0054d997    test eax,eax"
"	      0054d999    jl near ptr 0054D9ABh"
"	      0054d99f    movsx eax,word ptr [ebp-7Ch]"
"	      0054d9a3    test eax,eax"
"	      0054d9a5    jge near ptr 0054D9B6h"
"	      0054d9ab    mov word ptr [ebp-10h],0FFFFh"
"	      0054d9b1    jmp near ptr 0054DA12h"
"	      0054d9b6    movsx eax,word ptr [ebp-80h]"
"	      0054d9ba    mov eax,[eax*4+639850h]"
"	      0054d9c1    movsx ecx,word ptr [ebp-7Ch]"
"	      0054d9c5    movzx ax,byte ptr [eax+ecx]"
"	      0054d9ca    mov [ebp-78h],ax"
"	      0054d9ce    movsx eax,word ptr [ebp-78h]"
"	      0054d9d2    test eax,eax"
"	      0054d9d4    jl near ptr 0054D9E9h"
"	      0054d9da    movsx eax,word ptr [ebp-78h]"
"	      0054d9de    cmp eax,100h"
"	      0054d9e3    jl near ptr 0054DA05h"
"	      0054d9e9    push 8C085h"
"	      0054d9ee    push 5BBA34h"
"	      0054d9f3    push 18Ah"
"	      0054d9f8    push 5BBA14h"
"	      0054d9fd    call 00554F30h"
"	      0054da02    add esp,10h"
"	      0054da05    mov ax,[ebp-78h]"
"	      0054da09    mov [ebp-10h],ax"
"	      0054da0d    jmp near ptr 0054DA12h"
);
// LINE 2270:
	asm( 
"	      0054da12    movsx eax,word ptr [ebp-14h]"
"	      0054da16    cmp eax,7Fh"
"	      0054da19    jg near ptr 0054DA44h"
"	      0054da1f    movsx eax,word ptr [ebp-1Ch]"
"	      0054da23    cmp eax,7Fh"
"	      0054da26    jg near ptr 0054DA44h"
"	      0054da2c    movsx eax,word ptr [ebp-14h]"
"	      0054da30    test eax,eax"
"	      0054da32    jl near ptr 0054DA44h"
"	      0054da38    movsx eax,word ptr [ebp-1Ch]"
"	      0054da3c    test eax,eax"
"	      0054da3e    jge near ptr 0054DA4Fh"
"	      0054da44    mov word ptr [ebp-8],0FFFFh"
"	      0054da4a    jmp near ptr 0054DAB7h"
"	      0054da4f    movsx eax,word ptr [ebp-14h]"
"	      0054da53    mov eax,[eax*4+639850h]"
"	      0054da5a    movsx ecx,word ptr [ebp-1Ch]"
"	      0054da5e    movzx ax,byte ptr [eax+ecx]"
"	      0054da63    mov [ebp-84h],ax"
"	      0054da6a    movsx eax,word ptr [ebp-84h]"
"	      0054da71    test eax,eax"
"	      0054da73    jl near ptr 0054DA8Bh"
"	      0054da79    movsx eax,word ptr [ebp-84h]"
"	      0054da80    cmp eax,100h"
"	      0054da85    jl near ptr 0054DAA7h"
"	      0054da8b    push 8C085h"
"	      0054da90    push 5BBA34h"
"	      0054da95    push 18Ah"
"	      0054da9a    push 5BBA14h"
"	      0054da9f    call 00554F30h"
"	      0054daa4    add esp,10h"
"	      0054daa7    mov ax,[ebp-84h]"
"	      0054daae    mov [ebp-8],ax"
"	      0054dab2    jmp near ptr 0054DAB7h"
);
// LINE 2271:
	asm( 
"	      0054dab7    movsx eax,word ptr [ebp-8]"
"	      0054dabb    movsx ecx,word ptr [ebp-10h]"
"	      0054dabf    cmp eax,ecx"
"	      0054dac1    je near ptr 0054DAE3h"
"	      0054dac7    push 8C085h"
"	      0054dacc    push 5BB1ECh"
"	      0054dad1    push 8DFh"
"	      0054dad6    push 5BB228h"
"	      0054dadb    call 00554F30h"
"	      0054dae0    add esp,10h"
);
// LINE 2273:
	asm( 
"	      0054dae3    mov ax,1"
"	      0054dae7    jmp near ptr 0054DAECh"
);
// LINE 2274:
	asm( 
"	      0054daec    pop edi"
"	      0054daed    pop esi"
"	      0054daee    pop ebx"
"	      0054daef    leave"
"	      0054daf0    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x0054daf3
void cYObject::Simulate() {
// LINE 2277:
	asm( 
"	      0054daf3    push ebp"
"	      0054daf4    mov ebp,esp"
"	      0054daf6    sub esp,14h"
"	      0054daf9    push ebx"
"	      0054dafa    push esi"
"	      0054dafb    push edi"
"	      0054dafc    mov [ebp-14h],ecx"
);
// LINE 2278:
	asm( 
"	      0054daff    mov eax,[ebp-14h]"
"	      0054db02    movsx eax,word ptr [eax+0D2h]"
"	      0054db09    test eax,eax"
"	      0054db0b    jne near ptr 0054DB2Dh"
"	      0054db11    push 8C085h"
"	      0054db16    push 5BB24Ch"
"	      0054db1b    push 8E6h"
"	      0054db20    push 5BB26Ch"
"	      0054db25    call 00554F30h"
"	      0054db2a    add esp,10h"
);
// LINE 2280:
	asm( 
"	      0054db2d    mov eax,[ebp-14h]"
"	      0054db30    cmp dword ptr [eax+130h],0"
"	      0054db37    je near ptr 0054DC50h"
);
// LINE 2281:
	asm( 
"	      0054db3d    jmp near ptr 0054DB42h"
"	      0054db42    mov eax,[ebp-14h]"
"	      0054db45    xor ecx,ecx"
"	      0054db47    mov cx,[eax+20h]"
"	      0054db4b    test ecx,ecx"
"	      0054db4d    jne near ptr 0054DB6Fh"
"	      0054db53    push 8C085h"
"	      0054db58    push 5BBD20h"
"	      0054db5d    push 262h"
"	      0054db62    push 5BBA14h"
"	      0054db67    call 00554F30h"
"	      0054db6c    add esp,10h"
"	      0054db6f    mov eax,[ebp-14h]"
"	      0054db72    cmp dword ptr [eax+130h],0"
"	      0054db79    jne near ptr 0054DB9Bh"
"	      0054db7f    push 8C085h"
"	      0054db84    push 5BBCFCh"
"	      0054db89    push 263h"
"	      0054db8e    push 5BBA14h"
"	      0054db93    call 00554F30h"
"	      0054db98    add esp,10h"
"	      0054db9b    mov eax,[ebp-14h]"
"	      0054db9e    mov eax,[eax+130h]"
"	      0054dba4    mov eax,[eax+18h]"
"	      0054dba7    mov ecx,[ebp-14h]"
"	      0054dbaa    sub eax,[ecx+0A0h]"
"	      0054dbb0    mov [ebp-10h],eax"
"	      0054dbb3    mov eax,[ebp-14h]"
"	      0054dbb6    mov eax,[eax+130h]"
"	      0054dbbc    mov eax,[eax+20h]"
"	      0054dbbf    mov ecx,[ebp-14h]"
"	      0054dbc2    sub eax,[ecx+0A8h]"
"	      0054dbc8    mov [ebp-8],eax"
"	      0054dbcb    mov eax,[ebp-14h]"
"	      0054dbce    mov eax,[eax+130h]"
"	      0054dbd4    mov eax,[eax+1Ch]"
"	      0054dbd7    mov ecx,[ebp-14h]"
"	      0054dbda    sub eax,[ecx+0A4h]"
"	      0054dbe0    mov [ebp-0Ch],eax"
"	      0054dbe3    push 1"
"	      0054dbe5    mov eax,[ebp-0Ch]"
"	      0054dbe8    push eax"
"	      0054dbe9    mov eax,[ebp-8]"
"	      0054dbec    push eax"
"	      0054dbed    mov eax,[ebp-10h]"
"	      0054dbf0    push eax"
"	      0054dbf1    push 0"
"	      0054dbf3    push 0"
"	      0054dbf5    mov ecx,[ebp-14h]"
"	      0054dbf8    call 00555A60h"
"	      0054dbfd    mov [ebp-4],eax"
"	      0054dc00    cmp dword ptr [ebp-4],0"
"	      0054dc04    je near ptr 0054DC26h"
"	      0054dc0a    push 8C085h"
"	      0054dc0f    push 5BBCCCh"
"	      0054dc14    push 268h"
"	      0054dc19    push 5BBA14h"
"	      0054dc1e    call 00554F30h"
"	      0054dc23    add esp,10h"
"	      0054dc26    mov eax,[ebp-14h]"
"	      0054dc29    mov eax,[eax+130h]"
"	      0054dc2f    add eax,18h"
"	      0054dc32    mov ecx,[ebp-14h]"
"	      0054dc35    add ecx,0A0h"
"	      0054dc3b    mov edx,[eax]"
"	      0054dc3d    mov [ecx],edx"
"	      0054dc3f    mov edx,[eax+4]"
"	      0054dc42    mov [ecx+4],edx"
"	      0054dc45    mov eax,[eax+8]"
"	      0054dc48    mov [ecx+8],eax"
"	      0054dc4b    jmp near ptr 0054DC50h"
);
// LINE 2282:
	asm( 
"	      0054dc50    push 0"
"	      0054dc52    push 0"
"	      0054dc54    mov ecx,[ebp-14h]"
"	      0054dc57    call 0055CF37h"
);
// LINE 2283:
	asm( 
"	      0054dc5c    mov eax,[ebp-14h]"
"	      0054dc5f    cmp dword ptr [eax+98h],0"
"	      0054dc66    jne near ptr 0054DC8Dh"
"	      0054dc6c    push 8C085h"
"	      0054dc71    push 5BBCACh"
"	      0054dc76    push 27Fh"
"	      0054dc7b    push 5BBA14h"
"	      0054dc80    call 00554F30h"
"	      0054dc85    add esp,10h"
"	      0054dc88    jmp near ptr 0054DCD4h"
"	      0054dc8d    mov eax,[ebp-14h]"
"	      0054dc90    inc word ptr [eax+0DCh]"
"	      0054dc97    jmp near ptr 0054DC9Ch"
"	      0054dc9c    mov eax,[ebp-14h]"
"	      0054dc9f    mov eax,[eax+98h]"
"	      0054dca5    mov eax,[eax+28h]"
"	      0054dca8    movsx eax,word ptr [eax+14h]"
"	      0054dcac    mov ecx,[ebp-14h]"
"	      0054dcaf    movsx ecx,word ptr [ecx+0DCh]"
"	      0054dcb6    cmp eax,ecx"
"	      0054dcb8    jg near ptr 0054DCCAh"
"	      0054dcbe    mov eax,[ebp-14h]"
"	      0054dcc1    mov word ptr [eax+0DCh],0"
"	      0054dcca    jmp near ptr 0054DCCFh"
"	      0054dccf    jmp near ptr 0054DCD4h"
);
// LINE 2284:
	asm( 
"	      0054dcd4    jmp near ptr 0054DCD9h"
"	      0054dcd9    pop edi"
"	      0054dcda    pop esi"
"	      0054dcdb    pop ebx"
"	      0054dcdc    leave"
"	      0054dcdd    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054dcde
enum cYObject::MoveErrorCode cAvatar::AvatarMove(struct cYObject::MoveInfo*) {
// LINE 2289:
	asm( 
"	      0054dcde    push ebp"
"	      0054dcdf    mov ebp,esp"
"	      0054dce1    sub esp,64h"
"	      0054dce4    push ebx"
"	      0054dce5    push esi"
"	      0054dce6    push edi"
"	      0054dce7    mov [ebp-64h],ecx"
);
// LINE 2290:
	asm( 
"	      0054dcea    mov word ptr [ebp-8],0"
);
// LINE 2291:
	asm( 
"	      0054dcf0    mov eax,[ebp-64h]"
"	      0054dcf3    cmp dword ptr [eax+178h],0"
"	      0054dcfa    je near ptr 0054DD0Eh"
);
// LINE 2292:
	asm( 
"	      0054dd00    mov ecx,[ebp-64h]"
"	      0054dd03    call 00551A3Dh"
);
// LINE 2293:
	asm( 
"	      0054dd08    mov word ptr [ebp-8],1"
);
// LINE 2295:
	asm( 
"	      0054dd0e    cmp dword ptr [ebp+8],0"
"	      0054dd12    jne near ptr 0054DD34h"
"	      0054dd18    push 8C085h"
"	      0054dd1d    push 5BB290h"
"	      0054dd22    push 8F7h"
"	      0054dd27    push 5BB2B4h"
"	      0054dd2c    call 00554F30h"
"	      0054dd31    add esp,10h"
);
// LINE 2296:
	asm( 
"	      0054dd34    push 10h"
"	      0054dd36    push 0"
"	      0054dd38    mov eax,[ebp+8]"
"	      0054dd3b    push eax"
"	      0054dd3c    call 00554C10h"
"	      0054dd41    add esp,0Ch"
);
// LINE 2297:
	asm( 
"	      0054dd44    mov eax,[ebp+8]"
"	      0054dd47    push eax"
"	      0054dd48    mov eax,[ebp-64h]"
"	      0054dd4b    mov eax,[eax+174h]"
"	      0054dd51    push eax"
"	      0054dd52    mov eax,[ebp-64h]"
"	      0054dd55    add eax,168h"
"	      0054dd5a    mov ecx,[eax+8]"
"	      0054dd5d    push ecx"
"	      0054dd5e    mov ecx,[eax+4]"
"	      0054dd61    push ecx"
"	      0054dd62    mov eax,[eax]"
"	      0054dd64    push eax"
"	      0054dd65    mov ecx,[ebp-64h]"
"	      0054dd68    call 005559B2h"
"	      0054dd6d    mov [ebp-4],eax"
);
// LINE 2298:
	asm( 
"	      0054dd70    test dword ptr [ebp-8],0FFFFh"
"	      0054dd77    jne near ptr 0054DD87h"
"	      0054dd7d    cmp dword ptr [ebp-4],0"
"	      0054dd81    jne near ptr 0054DE09h"
);
// LINE 2299:
	asm( 
"	      0054dd87    mov ecx,[ebp-64h]"
"	      0054dd8a    call 0054FAEEh"
);
// LINE 2300:
	asm( 
"	      0054dd8f    jmp near ptr 0054DD94h"
"	      0054dd94    mov eax,[ebp-64h]"
"	      0054dd97    xor ecx,ecx"
"	      0054dd99    mov cx,[eax+20h]"
"	      0054dd9d    test ecx,ecx"
"	      0054dd9f    jne near ptr 0054DDC1h"
"	      0054dda5    push 8C085h"
"	      0054ddaa    push 5BBAECh"
"	      0054ddaf    push 1F8h"
"	      0054ddb4    push 5BBA14h"
"	      0054ddb9    call 00554F30h"
"	      0054ddbe    add esp,10h"
"	      0054ddc1    mov eax,[ebp-64h]"
"	      0054ddc4    add eax,3Ch"
"	      0054ddc7    lea ecx,[ebp-60h]"
"	      0054ddca    mov edx,[eax]"
"	      0054ddcc    mov [ecx],edx"
"	      0054ddce    mov edx,[eax+4]"
"	      0054ddd1    mov [ecx+4],edx"
"	      0054ddd4    mov eax,[eax+8]"
"	      0054ddd7    mov [ecx+8],eax"
"	      0054ddda    push 40h"
"	      0054dddc    mov eax,[ebp-64h]"
"	      0054dddf    add eax,48h"
"	      0054dde2    push eax"
"	      0054dde3    lea eax,[ebp-48h]"
"	      0054dde6    push eax"
"	      0054dde7    call 0056A800h"
"	      0054ddec    add esp,0Ch"
"	      0054ddef    push 3"
"	      0054ddf1    lea eax,[ebp-60h]"
"	      0054ddf4    push eax"
"	      0054ddf5    mov eax,[ebp-64h]"
"	      0054ddf8    mov eax,[eax+2Ch]"
"	      0054ddfb    push eax"
"	      0054ddfc    call 004D8781h"
"	      0054de01    add esp,0Ch"
"	      0054de04    jmp near ptr 0054DE09h"
);
// LINE 2304:
	asm( 
"	      0054de09    mov eax,[ebp-4]"
"	      0054de0c    jmp near ptr 0054DE11h"
);
// LINE 2305:
	asm( 
"	      0054de11    pop edi"
"	      0054de12    pop esi"
"	      0054de13    pop ebx"
"	      0054de14    leave"
"	      0054de15    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0054de18
void cAvatar::Simulate() {
// LINE 2308:
	asm( 
"	      0054de18    push ebp"
"	      0054de19    mov ebp,esp"
"	      0054de1b    sub esp,60h"
"	      0054de1e    push ebx"
"	      0054de1f    push esi"
"	      0054de20    push edi"
"	      0054de21    mov [ebp-60h],ecx"
);
// LINE 2309:
	asm( 
"	      0054de24    mov eax,[ebp-60h]"
"	      0054de27    movsx eax,word ptr [eax+0E2h]"
"	      0054de2e    test eax,eax"
"	      0054de30    jne near ptr 0054DFC2h"
);
// LINE 2310:
	asm( 
"	      0054de36    cmp dword ptr ds:[5B4DB8h],3"
"	      0054de3d    jne near ptr 0054DE5Fh"
"	      0054de43    push 8C085h"
"	      0054de48    push 5BB2D8h"
"	      0054de4d    push 906h"
"	      0054de52    push 5BB30Ch"
"	      0054de57    call 00554F30h"
"	      0054de5c    add esp,10h"
);
// LINE 2311:
	asm( 
"	      0054de5f    jmp near ptr 0054DE64h"
"	      0054de64    mov eax,[ebp-60h]"
"	      0054de67    mov eax,[eax+130h]"
"	      0054de6d    mov [ebp-1Ch],eax"
);
// LINE 2312:
	asm( 
"	      0054de70    cmp dword ptr [ebp-1Ch],0"
"	      0054de74    je near ptr 0054DE8Eh"
"	      0054de7a    mov eax,ds:[5B4968h]"
"	      0054de7f    mov ecx,[ebp-1Ch]"
"	      0054de82    cmp [eax+0A4h],ecx"
"	      0054de88    je near ptr 0054DEAAh"
"	      0054de8e    push 8C085h"
"	      0054de93    push 5BB330h"
"	      0054de98    push 908h"
"	      0054de9d    push 5BB338h"
"	      0054dea2    call 00554F30h"
"	      0054dea7    add esp,10h"
);
// LINE 2313:
	asm( 
"	      0054deaa    jmp near ptr 0054DEAFh"
"	      0054deaf    mov eax,[ebp-60h]"
"	      0054deb2    xor ecx,ecx"
"	      0054deb4    mov cx,[eax+20h]"
"	      0054deb8    test ecx,ecx"
"	      0054deba    jne near ptr 0054DEDCh"
"	      0054dec0    push 8C085h"
"	      0054dec5    push 5BBD20h"
"	      0054deca    push 262h"
"	      0054decf    push 5BBA14h"
"	      0054ded4    call 00554F30h"
"	      0054ded9    add esp,10h"
"	      0054dedc    mov eax,[ebp-60h]"
"	      0054dedf    cmp dword ptr [eax+130h],0"
"	      0054dee6    jne near ptr 0054DF08h"
"	      0054deec    push 8C085h"
"	      0054def1    push 5BBCFCh"
"	      0054def6    push 263h"
"	      0054defb    push 5BBA14h"
"	      0054df00    call 00554F30h"
"	      0054df05    add esp,10h"
"	      0054df08    mov eax,[ebp-60h]"
"	      0054df0b    mov eax,[eax+130h]"
"	      0054df11    mov eax,[eax+18h]"
"	      0054df14    mov ecx,[ebp-60h]"
"	      0054df17    sub eax,[ecx+0A0h]"
"	      0054df1d    mov [ebp-5Ch],eax"
"	      0054df20    mov eax,[ebp-60h]"
"	      0054df23    mov eax,[eax+130h]"
"	      0054df29    mov eax,[eax+20h]"
"	      0054df2c    mov ecx,[ebp-60h]"
"	      0054df2f    sub eax,[ecx+0A8h]"
"	      0054df35    mov [ebp-54h],eax"
"	      0054df38    mov eax,[ebp-60h]"
"	      0054df3b    mov eax,[eax+130h]"
"	      0054df41    mov eax,[eax+1Ch]"
"	      0054df44    mov ecx,[ebp-60h]"
"	      0054df47    sub eax,[ecx+0A4h]"
"	      0054df4d    mov [ebp-58h],eax"
"	      0054df50    push 1"
"	      0054df52    mov eax,[ebp-58h]"
"	      0054df55    push eax"
"	      0054df56    mov eax,[ebp-54h]"
"	      0054df59    push eax"
"	      0054df5a    mov eax,[ebp-5Ch]"
"	      0054df5d    push eax"
"	      0054df5e    push 0"
"	      0054df60    push 0"
"	      0054df62    mov ecx,[ebp-60h]"
"	      0054df65    call 00555A60h"
"	      0054df6a    mov [ebp-50h],eax"
"	      0054df6d    cmp dword ptr [ebp-50h],0"
"	      0054df71    je near ptr 0054DF93h"
"	      0054df77    push 8C085h"
"	      0054df7c    push 5BBCCCh"
"	      0054df81    push 268h"
"	      0054df86    push 5BBA14h"
"	      0054df8b    call 00554F30h"
"	      0054df90    add esp,10h"
"	      0054df93    mov eax,[ebp-60h]"
"	      0054df96    mov eax,[eax+130h]"
"	      0054df9c    add eax,18h"
"	      0054df9f    mov ecx,[ebp-60h]"
"	      0054dfa2    add ecx,0A0h"
"	      0054dfa8    mov edx,[eax]"
"	      0054dfaa    mov [ecx],edx"
"	      0054dfac    mov edx,[eax+4]"
"	      0054dfaf    mov [ecx+4],edx"
"	      0054dfb2    mov eax,[eax+8]"
"	      0054dfb5    mov [ecx+8],eax"
"	      0054dfb8    jmp near ptr 0054DFBDh"
);
// LINE 2314:
	asm( 
"	      0054dfbd    jmp near ptr 0054E574h"
);
// LINE 2316:
	asm( 
"	      0054dfc2    cmp dword ptr ds:[5B4DB8h],3"
"	      0054dfc9    je near ptr 0054DFEBh"
"	      0054dfcf    push 8C085h"
"	      0054dfd4    push 5BB35Ch"
"	      0054dfd9    push 90Ch"
"	      0054dfde    push 5BB394h"
"	      0054dfe3    call 00554F30h"
"	      0054dfe8    add esp,10h"
);
// LINE 2317:
	asm( 
"	      0054dfeb    mov ecx,[ebp-60h]"
"	      0054dfee    call 005466C5h"
);
// LINE 2319:
	asm( 
"	      0054dff3    lea eax,[ebp-14h]"
"	      0054dff6    push eax"
"	      0054dff7    mov ecx,[ebp-60h]"
"	      0054dffa    call 0054DCDEh"
"	      0054dfff    mov [ebp-4],eax"
);
// LINE 2321:
	asm( 
"	      0054e002    inc word ptr ds:[5B86B4h]"
"	      0054e009    movsx eax,word ptr ds:[5B86B4h]"
"	      0054e010    cmp eax,0Ah"
"	      0054e013    jle near ptr 0054E055h"
);
// LINE 2322:
	asm( 
"	      0054e019    mov word ptr ds:[5B86B4h],0"
);
// LINE 2323:
	asm( 
"	      0054e022    mov eax,[ebp-60h]"
"	      0054e025    movsx eax,word ptr [eax+0F2h]"
"	      0054e02c    test eax,eax"
"	      0054e02e    jne near ptr 0054E055h"
);
// LINE 2324:
	asm( 
"	      0054e034    mov ecx,[ebp-60h]"
"	      0054e037    call 005573F5h"
"	      0054e03c    mov [ebp-20h],eax"
);
// LINE 2325:
	asm( 
"	      0054e03f    cmp dword ptr [ebp-20h],0"
"	      0054e043    jne near ptr 0054E055h"
);
// LINE 2326:
	asm( 
"	      0054e049    mov eax,[ebp-60h]"
"	      0054e04c    mov word ptr [eax+0F2h],1"
);
// LINE 2330:
	asm( 
"	      0054e055    mov eax,[ebp-60h]"
"	      0054e058    add eax,3Ch"
"	      0054e05b    push eax"
"	      0054e05c    call 00546B56h"
"	      0054e061    add esp,4"
"	      0054e064    mov [ebp-18h],eax"
);
// LINE 2332:
	asm( 
"	      0054e067    cmp dword ptr [ebp-18h],0"
"	      0054e06b    je near ptr 0054E237h"
);
// LINE 2333:
	asm( 
"	      0054e071    mov eax,[ebp-18h]"
"	      0054e074    mov ds:[5B4968h],eax"
);
// LINE 2334:
	asm( 
"	      0054e079    mov ecx,[ebp-60h]"
"	      0054e07c    call 005573F5h"
"	      0054e081    mov [ebp-24h],eax"
);
// LINE 2337:
	asm( 
"	      0054e084    cmp dword ptr [ebp-24h],0"
"	      0054e088    je near ptr 0054E121h"
);
// LINE 2338:
	asm( 
"	      0054e08e    mov eax,[ebp-24h]"
"	      0054e091    movsx eax,word ptr [eax+0D8h]"
"	      0054e098    cmp eax,6"
"	      0054e09b    je near ptr 0054E0BDh"
"	      0054e0a1    push 8C085h"
"	      0054e0a6    push 5BB3B8h"
"	      0054e0ab    push 922h"
"	      0054e0b0    push 5BB3E4h"
"	      0054e0b5    call 00554F30h"
"	      0054e0ba    add esp,10h"
);
// LINE 2340:
	asm( 
"	      0054e0bd    jmp near ptr 0054E0C2h"
"	      0054e0c2    mov eax,ds:[5B4968h]"
"	      0054e0c7    mov eax,[eax+0A4h]"
"	      0054e0cd    push eax"
"	      0054e0ce    mov ecx,[ebp-60h]"
"	      0054e0d1    call 00552190h"
"	      0054e0d6    mov [ebp-28h],eax"
);
// LINE 2341:
	asm( 
"	      0054e0d9    cmp dword ptr [ebp-28h],0"
"	      0054e0dd    jne near ptr 0054E0FFh"
"	      0054e0e3    push 8C085h"
"	      0054e0e8    push 5BB408h"
"	      0054e0ed    push 925h"
"	      0054e0f2    push 5BB410h"
"	      0054e0f7    call 00554F30h"
"	      0054e0fc    add esp,10h"
);
// LINE 2342:
	asm( 
"	      0054e0ff    mov eax,[ebp-24h]"
"	      0054e102    mov eax,[eax+1Ch]"
"	      0054e105    push eax"
"	      0054e106    push 8"
"	      0054e108    mov ecx,[ebp-60h]"
"	      0054e10b    call 0055B920h"
);
// LINE 2345:
	asm( 
"	      0054e110    mov eax,[ebp-60h]"
"	      0054e113    mov word ptr [eax+0F2h],1"
);
// LINE 2348:
	asm( 
"	      0054e11c    jmp near ptr 0054E232h"
);
// LINE 2349:
	asm( 
"	      0054e121    mov word ptr [ebp-30h],0"
"	      0054e127    jmp near ptr 0054E130h"
"	      0054e12c    inc word ptr [ebp-30h]"
"	      0054e130    movsx eax,word ptr [ebp-30h]"
"	      0054e134    cmp eax,64h"
"	      0054e137    jge near ptr 0054E1DAh"
"	      0054e13d    mov eax,[ebp-30h]"
"	      0054e140    push eax"
"	      0054e141    call 00552040h"
"	      0054e146    add esp,4"
"	      0054e149    mov [ebp-34h],eax"
"	      0054e14c    mov eax,[ebp-34h]"
"	      0054e14f    movsx eax,word ptr [eax+0D2h]"
"	      0054e156    test eax,eax"
"	      0054e158    je near ptr 0054E1D5h"
"	      0054e15e    mov eax,[ebp-34h]"
"	      0054e161    mov word ptr [eax+104h],0FFFFh"
"	      0054e16a    mov eax,[ebp-34h]"
"	      0054e16d    movsx eax,word ptr [eax+102h]"
"	      0054e174    cmp eax,0FFFFFFFFh"
"	      0054e177    je near ptr 0054E1D0h"
"	      0054e17d    mov eax,[ebp-34h]"
"	      0054e180    movsx eax,word ptr [eax+102h]"
"	      0054e187    cmp eax,0FFFFFFFFh"
"	      0054e18a    je near ptr 0054E1ABh"
"	      0054e190    mov eax,[ebp-34h]"
"	      0054e193    movsx eax,word ptr [eax+102h]"
"	      0054e19a    add eax,62h"
"	      0054e19d    mov [ebp-38h],ax"
"	      0054e1a1    jmp near ptr 0054E1BEh"
"	      0054e1a6    jmp near ptr 0054E1B6h"
"	      0054e1ab    mov word ptr [ebp-38h],0FFFFh"
"	      0054e1b1    jmp near ptr 0054E1BEh"
"	      0054e1b6    mov ax,[ebp-3Ch]"
"	      0054e1ba    mov [ebp-38h],ax"
"	      0054e1be    jmp near ptr 0054E1C3h"
"	      0054e1c3    movsx eax,word ptr [ebp-38h]"
"	      0054e1c7    push eax"
"	      0054e1c8    call 00446E04h"
"	      0054e1cd    add esp,4"
"	      0054e1d0    jmp near ptr 0054E1D5h"
"	      0054e1d5    jmp near ptr 0054E12Ch"
"	      0054e1da    jmp near ptr 0054E1DFh"
);
// LINE 2350:
	asm( 
"	      0054e1df    push 0"
"	      0054e1e1    push 0Ch"
"	      0054e1e3    mov ecx,[ebp-60h]"
"	      0054e1e6    call 0054C1DDh"
);
// LINE 2351:
	asm( 
"	      0054e1eb    mov eax,ds:[5B4968h]"
"	      0054e1f0    mov eax,[eax+0A4h]"
"	      0054e1f6    push eax"
"	      0054e1f7    mov ecx,[ebp-60h]"
"	      0054e1fa    call 0054CECAh"
);
// LINE 2352:
	asm( 
"	      0054e1ff    mov eax,[ebp-60h]"
"	      0054e202    mov word ptr [eax+0E2h],0"
);
// LINE 2356:
	asm( 
"	      0054e20b    mov eax,[ebp-18h]"
"	      0054e20e    mov dword ptr [eax+8],1"
);
// LINE 2357:
	asm( 
"	      0054e215    mov dword ptr ds:[5B4DB8h],0"
);
// LINE 2358:
	asm( 
"	      0054e21f    mov eax,ds:[5B4968h]"
"	      0054e224    push eax"
"	      0054e225    call 004F07BAh"
"	      0054e22a    add esp,4"
);
// LINE 2359:
	asm( 
"	      0054e22d    jmp near ptr 0054E574h"
);
// LINE 2362:
	asm( 
"	      0054e232    jmp near ptr 0054E482h"
"	      0054e237    cmp dword ptr [ebp-4],5"
"	      0054e23b    jne near ptr 0054E482h"
);
// LINE 2363:
	asm( 
"	      0054e241    mov eax,[ebp-0Ch]"
"	      0054e244    push eax"
"	      0054e245    call 00544874h"
"	      0054e24a    add esp,4"
"	      0054e24d    mov [ebp-2Ch],eax"
);
// LINE 2364:
	asm( 
"	      0054e250    cmp dword ptr [ebp-2Ch],0"
"	      0054e254    jne near ptr 0054E276h"
"	      0054e25a    push 8C085h"
"	      0054e25f    push 5BB434h"
"	      0054e264    push 93Ch"
"	      0054e269    push 5BB448h"
"	      0054e26e    call 00554F30h"
"	      0054e273    add esp,10h"
);
// LINE 2365:
	asm( 
"	      0054e276    mov eax,[ebp-2Ch]"
"	      0054e279    movsx eax,word ptr [eax+0D8h]"
"	      0054e280    cmp eax,6"
"	      0054e283    jne near ptr 0054E482h"
"	      0054e289    mov ecx,[ebp-60h]"
"	      0054e28c    call 005573F5h"
"	      0054e291    test eax,eax"
"	      0054e293    jne near ptr 0054E482h"
);
// LINE 2366:
	asm( 
"	      0054e299    mov eax,[ebp-60h]"
"	      0054e29c    add eax,3Ch"
"	      0054e29f    mov ecx,[ebp-2Ch]"
"	      0054e2a2    add ecx,3Ch"
"	      0054e2a5    mov edx,[eax]"
"	      0054e2a7    mov [ecx],edx"
"	      0054e2a9    mov edx,[eax+4]"
"	      0054e2ac    mov [ecx+4],edx"
"	      0054e2af    mov eax,[eax+8]"
"	      0054e2b2    mov [ecx+8],eax"
"	      0054e2b5    mov ecx,[ebp-2Ch]"
"	      0054e2b8    call 005507ECh"
"	      0054e2bd    mov eax,20000000h"
"	      0054e2c2    mov ecx,[ebp-2Ch]"
"	      0054e2c5    sub eax,[ecx+44h]"
"	      0054e2c8    sar eax,16h"
"	      0054e2cb    mov [ebp-48h],al"
"	      0054e2ce    mov eax,[ebp-2Ch]"
"	      0054e2d1    mov eax,[eax+3Ch]"
"	      0054e2d4    add eax,20000000h"
"	      0054e2d9    sar eax,16h"
"	      0054e2dc    mov [ebp-4Ch],al"
"	      0054e2df    jmp near ptr 0054E2E4h"
"	      0054e2e4    mov eax,[ebp-2Ch]"
"	      0054e2e7    xor ecx,ecx"
"	      0054e2e9    mov cx,[eax+20h]"
"	      0054e2ed    test ecx,ecx"
"	      0054e2ef    je near ptr 0054E311h"
"	      0054e2f5    push 8C085h"
"	      0054e2fa    push 5BBBB8h"
"	      0054e2ff    push 210h"
"	      0054e304    push 5BBA14h"
"	      0054e309    call 00554F30h"
"	      0054e30e    add esp,10h"
"	      0054e311    mov al,[ebp-4Ch]"
"	      0054e314    mov ecx,[ebp-2Ch]"
"	      0054e317    mov [ecx+88h],al"
"	      0054e31d    mov al,[ebp-48h]"
"	      0054e320    mov ecx,[ebp-2Ch]"
"	      0054e323    mov [ecx+89h],al"
"	      0054e329    jmp near ptr 0054E32Eh"
"	      0054e32e    mov ecx,[ebp-2Ch]"
"	      0054e331    call 0055069Bh"
"	      0054e336    jmp near ptr 0054E33Bh"
);
// LINE 2367:
	asm( 
"	      0054e33b    mov eax,[ebp-60h]"
"	      0054e33e    add eax,24h"
"	      0054e341    push eax"
"	      0054e342    mov ecx,[ebp-2Ch]"
"	      0054e345    call 0054CECAh"
);
// LINE 2368:
	asm( 
"	      0054e34a    jmp near ptr 0054E34Fh"
"	      0054e34f    jmp near ptr 0054E354h"
"	      0054e354    mov eax,[ebp-2Ch]"
"	      0054e357    movsx eax,word ptr [eax+8]"
"	      0054e35b    lea eax,[eax*4-4]"
"	      0054e362    lea eax,[eax+eax*4]"
"	      0054e365    mov ecx,[ebp-2Ch]"
"	      0054e368    mov ecx,[ecx+4]"
"	      0054e36b    movsx eax,word ptr [eax+ecx]"
"	      0054e36f    cmp eax,322h"
"	      0054e374    je near ptr 0054E3D2h"
"	      0054e37a    jmp near ptr 0054E37Fh"
"	      0054e37f    jmp near ptr 0054E384h"
"	      0054e384    mov eax,[ebp-2Ch]"
"	      0054e387    movsx eax,word ptr [eax+0Ah]"
"	      0054e38b    dec eax"
"	      0054e38c    mov ecx,[ebp-2Ch]"
"	      0054e38f    movsx ecx,word ptr [ecx+8]"
"	      0054e393    cmp eax,ecx"
"	      0054e395    jg near ptr 0054E3B7h"
"	      0054e39b    push 8C085h"
"	      0054e3a0    push 5BBD3Ch"
"	      0054e3a5    push 0CEh"
"	      0054e3aa    push 5BBA14h"
"	      0054e3af    call 00554F30h"
"	      0054e3b4    add esp,10h"
"	      0054e3b7    push 322h"
"	      0054e3bc    push 0"
"	      0054e3be    push 0"
"	      0054e3c0    mov ecx,[ebp-2Ch]"
"	      0054e3c3    call 0055CE37h"
"	      0054e3c8    jmp near ptr 0054E3D7h"
"	      0054e3cd    jmp near ptr 0054E3D7h"
"	      0054e3d2    jmp near ptr 0054E3D7h"
);
// LINE 2369:
	asm( 
"	      0054e3d7    mov eax,[ebp-60h]"
"	      0054e3da    cmp dword ptr [eax+90h],0"
"	      0054e3e1    jne near ptr 0054E403h"
"	      0054e3e7    push 8C085h"
"	      0054e3ec    push 5BBB9Ch"
"	      0054e3f1    push 2F8h"
"	      0054e3f6    push 5BBA14h"
"	      0054e3fb    call 00554F30h"
"	      0054e400    add esp,10h"
"	      0054e403    mov eax,[ebp-60h]"
"	      0054e406    cmp dword ptr [eax+98h],0"
"	      0054e40d    je near ptr 0054E429h"
"	      0054e413    mov eax,[ebp-60h]"
"	      0054e416    mov eax,[eax+98h]"
"	      0054e41c    cmp dword ptr [eax+1Ch],546F7465h"
"	      0054e423    je near ptr 0054E471h"
"	      0054e429    push 546F7465h"
"	      0054e42e    mov eax,[ebp-60h]"
"	      0054e431    mov ecx,[eax+90h]"
"	      0054e437    call 00560BF0h"
"	      0054e43c    mov ecx,[ebp-60h]"
"	      0054e43f    mov [ecx+98h],eax"
"	      0054e445    mov eax,[ebp-60h]"
"	      0054e448    cmp dword ptr [eax+98h],0"
"	      0054e44f    jne near ptr 0054E471h"
"	      0054e455    push 8C085h"
"	      0054e45a    push 5BBB74h"
"	      0054e45f    push 2FBh"
"	      0054e464    push 5BBA14h"
"	      0054e469    call 00554F30h"
"	      0054e46e    add esp,10h"
"	      0054e471    jmp near ptr 0054E476h"
);
// LINE 2370:
	asm( 
"	      0054e476    mov eax,[ebp-60h]"
"	      0054e479    mov word ptr [eax+0F2h],0"
);
// LINE 2379:
	asm( 
"	      0054e482    mov eax,[ebp-60h]"
"	      0054e485    mov eax,[eax+174h]"
"	      0054e48b    mov [ebp-44h],eax"
"	      0054e48e    cmp dword ptr [ebp-44h],10000h"
"	      0054e495    jge near ptr 0054E4B3h"
"	      0054e49b    cmp dword ptr [ebp-44h],0FFFF0000h"
"	      0054e4a2    jle near ptr 0054E4B3h"
"	      0054e4a8    mov word ptr [ebp-40h],0"
"	      0054e4ae    jmp near ptr 0054E4DEh"
"	      0054e4b3    cmp dword ptr [ebp-44h],0D0000h"
"	      0054e4ba    jge near ptr 0054E4D8h"
"	      0054e4c0    cmp dword ptr [ebp-44h],0FFF30000h"
"	      0054e4c7    jle near ptr 0054E4D8h"
"	      0054e4cd    mov word ptr [ebp-40h],4"
"	      0054e4d3    jmp near ptr 0054E4DEh"
"	      0054e4d8    mov word ptr [ebp-40h],8"
"	      0054e4de    lea eax,[ebp-14h]"
"	      0054e4e1    push eax"
"	      0054e4e2    mov eax,[ebp-4]"
"	      0054e4e5    push eax"
"	      0054e4e6    mov eax,[ebp-40h]"
"	      0054e4e9    push eax"
"	      0054e4ea    mov ecx,[ebp-60h]"
"	      0054e4ed    call 0054E579h"
"	      0054e4f2    jmp near ptr 0054E4F7h"
);
// LINE 2380:
	asm( 
"	      0054e4f7    mov eax,[ebp-60h]"
"	      0054e4fa    cmp dword ptr [eax+98h],0"
"	      0054e501    jne near ptr 0054E528h"
"	      0054e507    push 8C085h"
"	      0054e50c    push 5BBCACh"
"	      0054e511    push 27Fh"
"	      0054e516    push 5BBA14h"
"	      0054e51b    call 00554F30h"
"	      0054e520    add esp,10h"
"	      0054e523    jmp near ptr 0054E56Fh"
"	      0054e528    mov eax,[ebp-60h]"
"	      0054e52b    inc word ptr [eax+0DCh]"
"	      0054e532    jmp near ptr 0054E537h"
"	      0054e537    mov eax,[ebp-60h]"
"	      0054e53a    mov eax,[eax+98h]"
"	      0054e540    mov eax,[eax+28h]"
"	      0054e543    movsx eax,word ptr [eax+14h]"
"	      0054e547    mov ecx,[ebp-60h]"
"	      0054e54a    movsx ecx,word ptr [ecx+0DCh]"
"	      0054e551    cmp eax,ecx"
"	      0054e553    jg near ptr 0054E565h"
"	      0054e559    mov eax,[ebp-60h]"
"	      0054e55c    mov word ptr [eax+0DCh],0"
"	      0054e565    jmp near ptr 0054E56Ah"
"	      0054e56a    jmp near ptr 0054E56Fh"
);
// LINE 2381:
	asm( 
"	      0054e56f    jmp near ptr 0054E574h"
"	      0054e574    pop edi"
"	      0054e575    pop esi"
"	      0054e576    pop ebx"
"	      0054e577    leave"
"	      0054e578    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054e579
void cYObject::DynEffects(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*) {
// LINE 2404:
	asm( 
"	      0054e579    push ebp"
"	      0054e57a    mov ebp,esp"
"	      0054e57c    sub esp,14h"
"	      0054e57f    push ebx"
"	      0054e580    push esi"
"	      0054e581    push edi"
"	      0054e582    mov [ebp-8],ecx"
);
// LINE 2406:
	asm( 
"	      0054e585    mov eax,[ebp+0Ch]"
"	      0054e588    mov [ebp-0Ch],eax"
"	      0054e58b    jmp near ptr 0054FA9Eh"
);
// LINE 2408:
	asm( 
"	      0054e590    movsx eax,word ptr [ebp+8]"
"	      0054e594    test eax,eax"
"	      0054e596    je near ptr 0054E5B8h"
"	      0054e59c    push 8C085h"
"	      0054e5a1    push 5BB46Ch"
"	      0054e5a6    push 968h"
"	      0054e5ab    push 5BB474h"
"	      0054e5b0    call 00554F30h"
"	      0054e5b5    add esp,10h"
);
// LINE 2409:
	asm( 
"	      0054e5b8    mov eax,[ebp-8]"
"	      0054e5bb    movsx eax,word ptr [eax+0F2h]"
"	      0054e5c2    test eax,eax"
"	      0054e5c4    je near ptr 0054E723h"
"	      0054e5ca    mov eax,[ebp-8]"
"	      0054e5cd    mov eax,[eax+90h]"
"	      0054e5d3    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054e5da    jne near ptr 0054E684h"
"	      0054e5e0    mov eax,[ebp-8]"
"	      0054e5e3    cmp dword ptr [eax+90h],0"
"	      0054e5ea    jne near ptr 0054E60Ch"
"	      0054e5f0    push 8C085h"
"	      0054e5f5    push 5BBB9Ch"
"	      0054e5fa    push 2F8h"
"	      0054e5ff    push 5BBA14h"
"	      0054e604    call 00554F30h"
"	      0054e609    add esp,10h"
"	      0054e60c    mov eax,[ebp-8]"
"	      0054e60f    cmp dword ptr [eax+98h],0"
"	      0054e616    je near ptr 0054E632h"
"	      0054e61c    mov eax,[ebp-8]"
"	      0054e61f    mov eax,[eax+98h]"
"	      0054e625    cmp dword ptr [eax+1Ch],44675374h"
"	      0054e62c    je near ptr 0054E67Ah"
"	      0054e632    push 44675374h"
"	      0054e637    mov eax,[ebp-8]"
"	      0054e63a    mov ecx,[eax+90h]"
"	      0054e640    call 00560BF0h"
"	      0054e645    mov ecx,[ebp-8]"
"	      0054e648    mov [ecx+98h],eax"
"	      0054e64e    mov eax,[ebp-8]"
"	      0054e651    cmp dword ptr [eax+98h],0"
"	      0054e658    jne near ptr 0054E67Ah"
"	      0054e65e    push 8C085h"
"	      0054e663    push 5BBB74h"
"	      0054e668    push 2FBh"
"	      0054e66d    push 5BBA14h"
"	      0054e672    call 00554F30h"
"	      0054e677    add esp,10h"
"	      0054e67a    jmp near ptr 0054E67Fh"
"	      0054e67f    jmp near ptr 0054E723h"
"	      0054e684    mov eax,[ebp-8]"
"	      0054e687    cmp dword ptr [eax+90h],0"
"	      0054e68e    jne near ptr 0054E6B0h"
"	      0054e694    push 8C085h"
"	      0054e699    push 5BBB9Ch"
"	      0054e69e    push 2F8h"
"	      0054e6a3    push 5BBA14h"
"	      0054e6a8    call 00554F30h"
"	      0054e6ad    add esp,10h"
"	      0054e6b0    mov eax,[ebp-8]"
"	      0054e6b3    cmp dword ptr [eax+98h],0"
"	      0054e6ba    je near ptr 0054E6D6h"
"	      0054e6c0    mov eax,[ebp-8]"
"	      0054e6c3    mov eax,[eax+98h]"
"	      0054e6c9    cmp dword ptr [eax+1Ch],4E6F4D6Fh"
"	      0054e6d0    je near ptr 0054E71Eh"
"	      0054e6d6    push 4E6F4D6Fh"
"	      0054e6db    mov eax,[ebp-8]"
"	      0054e6de    mov ecx,[eax+90h]"
"	      0054e6e4    call 00560BF0h"
"	      0054e6e9    mov ecx,[ebp-8]"
"	      0054e6ec    mov [ecx+98h],eax"
"	      0054e6f2    mov eax,[ebp-8]"
"	      0054e6f5    cmp dword ptr [eax+98h],0"
"	      0054e6fc    jne near ptr 0054E71Eh"
"	      0054e702    push 8C085h"
"	      0054e707    push 5BBB74h"
"	      0054e70c    push 2FBh"
"	      0054e711    push 5BBA14h"
"	      0054e716    call 00554F30h"
"	      0054e71b    add esp,10h"
"	      0054e71e    jmp near ptr 0054E723h"
);
// LINE 2410:
	asm( 
"	      0054e723    jmp near ptr 0054FAE2h"
);
// LINE 2413:
	asm( 
"	      0054e728    movsx eax,word ptr [ebp+8]"
"	      0054e72c    test eax,eax"
"	      0054e72e    jne near ptr 0054E8D5h"
);
// LINE 2414:
	asm( 
"	      0054e734    mov eax,[ebp-8]"
"	      0054e737    movsx eax,word ptr [eax+0F2h]"
"	      0054e73e    test eax,eax"
"	      0054e740    je near ptr 0054E89Fh"
"	      0054e746    mov eax,[ebp-8]"
"	      0054e749    mov eax,[eax+90h]"
"	      0054e74f    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054e756    jne near ptr 0054E800h"
"	      0054e75c    mov eax,[ebp-8]"
"	      0054e75f    cmp dword ptr [eax+90h],0"
"	      0054e766    jne near ptr 0054E788h"
"	      0054e76c    push 8C085h"
"	      0054e771    push 5BBB9Ch"
"	      0054e776    push 2F8h"
"	      0054e77b    push 5BBA14h"
"	      0054e780    call 00554F30h"
"	      0054e785    add esp,10h"
"	      0054e788    mov eax,[ebp-8]"
"	      0054e78b    cmp dword ptr [eax+98h],0"
"	      0054e792    je near ptr 0054E7AEh"
"	      0054e798    mov eax,[ebp-8]"
"	      0054e79b    mov eax,[eax+98h]"
"	      0054e7a1    cmp dword ptr [eax+1Ch],44675374h"
"	      0054e7a8    je near ptr 0054E7F6h"
"	      0054e7ae    push 44675374h"
"	      0054e7b3    mov eax,[ebp-8]"
"	      0054e7b6    mov ecx,[eax+90h]"
"	      0054e7bc    call 00560BF0h"
"	      0054e7c1    mov ecx,[ebp-8]"
"	      0054e7c4    mov [ecx+98h],eax"
"	      0054e7ca    mov eax,[ebp-8]"
"	      0054e7cd    cmp dword ptr [eax+98h],0"
"	      0054e7d4    jne near ptr 0054E7F6h"
"	      0054e7da    push 8C085h"
"	      0054e7df    push 5BBB74h"
"	      0054e7e4    push 2FBh"
"	      0054e7e9    push 5BBA14h"
"	      0054e7ee    call 00554F30h"
"	      0054e7f3    add esp,10h"
"	      0054e7f6    jmp near ptr 0054E7FBh"
"	      0054e7fb    jmp near ptr 0054E89Fh"
"	      0054e800    mov eax,[ebp-8]"
"	      0054e803    cmp dword ptr [eax+90h],0"
"	      0054e80a    jne near ptr 0054E82Ch"
"	      0054e810    push 8C085h"
"	      0054e815    push 5BBB9Ch"
"	      0054e81a    push 2F8h"
"	      0054e81f    push 5BBA14h"
"	      0054e824    call 00554F30h"
"	      0054e829    add esp,10h"
"	      0054e82c    mov eax,[ebp-8]"
"	      0054e82f    cmp dword ptr [eax+98h],0"
"	      0054e836    je near ptr 0054E852h"
"	      0054e83c    mov eax,[ebp-8]"
"	      0054e83f    mov eax,[eax+98h]"
"	      0054e845    cmp dword ptr [eax+1Ch],4E6F4D6Fh"
"	      0054e84c    je near ptr 0054E89Ah"
"	      0054e852    push 4E6F4D6Fh"
"	      0054e857    mov eax,[ebp-8]"
"	      0054e85a    mov ecx,[eax+90h]"
"	      0054e860    call 00560BF0h"
"	      0054e865    mov ecx,[ebp-8]"
"	      0054e868    mov [ecx+98h],eax"
"	      0054e86e    mov eax,[ebp-8]"
"	      0054e871    cmp dword ptr [eax+98h],0"
"	      0054e878    jne near ptr 0054E89Ah"
"	      0054e87e    push 8C085h"
"	      0054e883    push 5BBB74h"
"	      0054e888    push 2FBh"
"	      0054e88d    push 5BBA14h"
"	      0054e892    call 00554F30h"
"	      0054e897    add esp,10h"
"	      0054e89a    jmp near ptr 0054E89Fh"
);
// LINE 2415:
	asm( 
"	      0054e89f    mov eax,[ebp-8]"
"	      0054e8a2    movsx eax,word ptr [eax+104h]"
"	      0054e8a9    cmp eax,0Eh"
"	      0054e8ac    jne near ptr 0054E8D0h"
);
// LINE 2416:
	asm( 
"	      0054e8b2    mov eax,[ebp-8]"
"	      0054e8b5    movsx eax,word ptr [eax+106h]"
"	      0054e8bc    test eax,eax"
"	      0054e8be    je near ptr 0054E8D0h"
"	      0054e8c4    push 0"
"	      0054e8c6    push 0FFFFFFFFh"
"	      0054e8c8    mov ecx,[ebp-8]"
"	      0054e8cb    call 0054C1DDh"
);
// LINE 2418:
	asm( 
"	      0054e8d0    jmp near ptr 0054EBF9h"
"	      0054e8d5    movsx eax,word ptr [ebp+8]"
"	      0054e8d9    cmp eax,7"
"	      0054e8dc    jge near ptr 0054EA70h"
);
// LINE 2419:
	asm( 
"	      0054e8e2    mov eax,[ebp-8]"
"	      0054e8e5    movsx eax,word ptr [eax+0F2h]"
"	      0054e8ec    test eax,eax"
"	      0054e8ee    je near ptr 0054EA4Dh"
"	      0054e8f4    mov eax,[ebp-8]"
"	      0054e8f7    mov eax,[eax+90h]"
"	      0054e8fd    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054e904    jne near ptr 0054E9AEh"
"	      0054e90a    mov eax,[ebp-8]"
"	      0054e90d    cmp dword ptr [eax+90h],0"
"	      0054e914    jne near ptr 0054E936h"
"	      0054e91a    push 8C085h"
"	      0054e91f    push 5BBB9Ch"
"	      0054e924    push 2F8h"
"	      0054e929    push 5BBA14h"
"	      0054e92e    call 00554F30h"
"	      0054e933    add esp,10h"
"	      0054e936    mov eax,[ebp-8]"
"	      0054e939    cmp dword ptr [eax+98h],0"
"	      0054e940    je near ptr 0054E95Ch"
"	      0054e946    mov eax,[ebp-8]"
"	      0054e949    mov eax,[eax+98h]"
"	      0054e94f    cmp dword ptr [eax+1Ch],4467526Eh"
"	      0054e956    je near ptr 0054E9A4h"
"	      0054e95c    push 4467526Eh"
"	      0054e961    mov eax,[ebp-8]"
"	      0054e964    mov ecx,[eax+90h]"
"	      0054e96a    call 00560BF0h"
"	      0054e96f    mov ecx,[ebp-8]"
"	      0054e972    mov [ecx+98h],eax"
"	      0054e978    mov eax,[ebp-8]"
"	      0054e97b    cmp dword ptr [eax+98h],0"
"	      0054e982    jne near ptr 0054E9A4h"
"	      0054e988    push 8C085h"
"	      0054e98d    push 5BBB74h"
"	      0054e992    push 2FBh"
"	      0054e997    push 5BBA14h"
"	      0054e99c    call 00554F30h"
"	      0054e9a1    add esp,10h"
"	      0054e9a4    jmp near ptr 0054E9A9h"
"	      0054e9a9    jmp near ptr 0054EA4Dh"
"	      0054e9ae    mov eax,[ebp-8]"
"	      0054e9b1    cmp dword ptr [eax+90h],0"
"	      0054e9b8    jne near ptr 0054E9DAh"
"	      0054e9be    push 8C085h"
"	      0054e9c3    push 5BBB9Ch"
"	      0054e9c8    push 2F8h"
"	      0054e9cd    push 5BBA14h"
"	      0054e9d2    call 00554F30h"
"	      0054e9d7    add esp,10h"
"	      0054e9da    mov eax,[ebp-8]"
"	      0054e9dd    cmp dword ptr [eax+98h],0"
"	      0054e9e4    je near ptr 0054EA00h"
"	      0054e9ea    mov eax,[ebp-8]"
"	      0054e9ed    mov eax,[eax+98h]"
"	      0054e9f3    cmp dword ptr [eax+1Ch],3157616Ch"
"	      0054e9fa    je near ptr 0054EA48h"
"	      0054ea00    push 3157616Ch"
"	      0054ea05    mov eax,[ebp-8]"
"	      0054ea08    mov ecx,[eax+90h]"
"	      0054ea0e    call 00560BF0h"
"	      0054ea13    mov ecx,[ebp-8]"
"	      0054ea16    mov [ecx+98h],eax"
"	      0054ea1c    mov eax,[ebp-8]"
"	      0054ea1f    cmp dword ptr [eax+98h],0"
"	      0054ea26    jne near ptr 0054EA48h"
"	      0054ea2c    push 8C085h"
"	      0054ea31    push 5BBB74h"
"	      0054ea36    push 2FBh"
"	      0054ea3b    push 5BBA14h"
"	      0054ea40    call 00554F30h"
"	      0054ea45    add esp,10h"
"	      0054ea48    jmp near ptr 0054EA4Dh"
);
// LINE 2420:
	asm( 
"	      0054ea4d    mov eax,[ebp-8]"
"	      0054ea50    movsx eax,word ptr [eax+106h]"
"	      0054ea57    test eax,eax"
"	      0054ea59    je near ptr 0054EA6Bh"
"	      0054ea5f    push 0"
"	      0054ea61    push 0Eh"
"	      0054ea63    mov ecx,[ebp-8]"
"	      0054ea66    call 0054C1DDh"
);
// LINE 2422:
	asm( 
"	      0054ea6b    jmp near ptr 0054EBF9h"
);
// LINE 2423:
	asm( 
"	      0054ea70    mov eax,[ebp-8]"
"	      0054ea73    movsx eax,word ptr [eax+0F2h]"
"	      0054ea7a    test eax,eax"
"	      0054ea7c    je near ptr 0054EBDBh"
"	      0054ea82    mov eax,[ebp-8]"
"	      0054ea85    mov eax,[eax+90h]"
"	      0054ea8b    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054ea92    jne near ptr 0054EB3Ch"
"	      0054ea98    mov eax,[ebp-8]"
"	      0054ea9b    cmp dword ptr [eax+90h],0"
"	      0054eaa2    jne near ptr 0054EAC4h"
"	      0054eaa8    push 8C085h"
"	      0054eaad    push 5BBB9Ch"
"	      0054eab2    push 2F8h"
"	      0054eab7    push 5BBA14h"
"	      0054eabc    call 00554F30h"
"	      0054eac1    add esp,10h"
"	      0054eac4    mov eax,[ebp-8]"
"	      0054eac7    cmp dword ptr [eax+98h],0"
"	      0054eace    je near ptr 0054EAEAh"
"	      0054ead4    mov eax,[ebp-8]"
"	      0054ead7    mov eax,[eax+98h]"
"	      0054eadd    cmp dword ptr [eax+1Ch],4467526Eh"
"	      0054eae4    je near ptr 0054EB32h"
"	      0054eaea    push 4467526Eh"
"	      0054eaef    mov eax,[ebp-8]"
"	      0054eaf2    mov ecx,[eax+90h]"
"	      0054eaf8    call 00560BF0h"
"	      0054eafd    mov ecx,[ebp-8]"
"	      0054eb00    mov [ecx+98h],eax"
"	      0054eb06    mov eax,[ebp-8]"
"	      0054eb09    cmp dword ptr [eax+98h],0"
"	      0054eb10    jne near ptr 0054EB32h"
"	      0054eb16    push 8C085h"
"	      0054eb1b    push 5BBB74h"
"	      0054eb20    push 2FBh"
"	      0054eb25    push 5BBA14h"
"	      0054eb2a    call 00554F30h"
"	      0054eb2f    add esp,10h"
"	      0054eb32    jmp near ptr 0054EB37h"
"	      0054eb37    jmp near ptr 0054EBDBh"
"	      0054eb3c    mov eax,[ebp-8]"
"	      0054eb3f    cmp dword ptr [eax+90h],0"
"	      0054eb46    jne near ptr 0054EB68h"
"	      0054eb4c    push 8C085h"
"	      0054eb51    push 5BBB9Ch"
"	      0054eb56    push 2F8h"
"	      0054eb5b    push 5BBA14h"
"	      0054eb60    call 00554F30h"
"	      0054eb65    add esp,10h"
"	      0054eb68    mov eax,[ebp-8]"
"	      0054eb6b    cmp dword ptr [eax+98h],0"
"	      0054eb72    je near ptr 0054EB8Eh"
"	      0054eb78    mov eax,[ebp-8]"
"	      0054eb7b    mov eax,[eax+98h]"
"	      0054eb81    cmp dword ptr [eax+1Ch],3152756Eh"
"	      0054eb88    je near ptr 0054EBD6h"
"	      0054eb8e    push 3152756Eh"
"	      0054eb93    mov eax,[ebp-8]"
"	      0054eb96    mov ecx,[eax+90h]"
"	      0054eb9c    call 00560BF0h"
"	      0054eba1    mov ecx,[ebp-8]"
"	      0054eba4    mov [ecx+98h],eax"
"	      0054ebaa    mov eax,[ebp-8]"
"	      0054ebad    cmp dword ptr [eax+98h],0"
"	      0054ebb4    jne near ptr 0054EBD6h"
"	      0054ebba    push 8C085h"
"	      0054ebbf    push 5BBB74h"
"	      0054ebc4    push 2FBh"
"	      0054ebc9    push 5BBA14h"
"	      0054ebce    call 00554F30h"
"	      0054ebd3    add esp,10h"
"	      0054ebd6    jmp near ptr 0054EBDBh"
);
// LINE 2424:
	asm( 
"	      0054ebdb    mov eax,[ebp-8]"
"	      0054ebde    movsx eax,word ptr [eax+106h]"
"	      0054ebe5    test eax,eax"
"	      0054ebe7    je near ptr 0054EBF9h"
"	      0054ebed    push 0"
"	      0054ebef    push 0Eh"
"	      0054ebf1    mov ecx,[ebp-8]"
"	      0054ebf4    call 0054C1DDh"
);
// LINE 2426:
	asm( 
"	      0054ebf9    jmp near ptr 0054FAE2h"
);
// LINE 2429:
	asm( 
"	      0054ebfe    mov eax,[ebp-8]"
"	      0054ec01    movsx eax,word ptr [eax+0F2h]"
"	      0054ec08    test eax,eax"
"	      0054ec0a    je near ptr 0054ED69h"
"	      0054ec10    mov eax,[ebp-8]"
"	      0054ec13    mov eax,[eax+90h]"
"	      0054ec19    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054ec20    jne near ptr 0054ECCAh"
"	      0054ec26    mov eax,[ebp-8]"
"	      0054ec29    cmp dword ptr [eax+90h],0"
"	      0054ec30    jne near ptr 0054EC52h"
"	      0054ec36    push 8C085h"
"	      0054ec3b    push 5BBB9Ch"
"	      0054ec40    push 2F8h"
"	      0054ec45    push 5BBA14h"
"	      0054ec4a    call 00554F30h"
"	      0054ec4f    add esp,10h"
"	      0054ec52    mov eax,[ebp-8]"
"	      0054ec55    cmp dword ptr [eax+98h],0"
"	      0054ec5c    je near ptr 0054EC78h"
"	      0054ec62    mov eax,[ebp-8]"
"	      0054ec65    mov eax,[eax+98h]"
"	      0054ec6b    cmp dword ptr [eax+1Ch],44675374h"
"	      0054ec72    je near ptr 0054ECC0h"
"	      0054ec78    push 44675374h"
"	      0054ec7d    mov eax,[ebp-8]"
"	      0054ec80    mov ecx,[eax+90h]"
"	      0054ec86    call 00560BF0h"
"	      0054ec8b    mov ecx,[ebp-8]"
"	      0054ec8e    mov [ecx+98h],eax"
"	      0054ec94    mov eax,[ebp-8]"
"	      0054ec97    cmp dword ptr [eax+98h],0"
"	      0054ec9e    jne near ptr 0054ECC0h"
"	      0054eca4    push 8C085h"
"	      0054eca9    push 5BBB74h"
"	      0054ecae    push 2FBh"
"	      0054ecb3    push 5BBA14h"
"	      0054ecb8    call 00554F30h"
"	      0054ecbd    add esp,10h"
"	      0054ecc0    jmp near ptr 0054ECC5h"
"	      0054ecc5    jmp near ptr 0054ED69h"
"	      0054ecca    mov eax,[ebp-8]"
"	      0054eccd    cmp dword ptr [eax+90h],0"
"	      0054ecd4    jne near ptr 0054ECF6h"
"	      0054ecda    push 8C085h"
"	      0054ecdf    push 5BBB9Ch"
"	      0054ece4    push 2F8h"
"	      0054ece9    push 5BBA14h"
"	      0054ecee    call 00554F30h"
"	      0054ecf3    add esp,10h"
"	      0054ecf6    mov eax,[ebp-8]"
"	      0054ecf9    cmp dword ptr [eax+98h],0"
"	      0054ed00    je near ptr 0054ED1Ch"
"	      0054ed06    mov eax,[ebp-8]"
"	      0054ed09    mov eax,[eax+98h]"
"	      0054ed0f    cmp dword ptr [eax+1Ch],4661436Ch"
"	      0054ed16    je near ptr 0054ED64h"
"	      0054ed1c    push 4661436Ch"
"	      0054ed21    mov eax,[ebp-8]"
"	      0054ed24    mov ecx,[eax+90h]"
"	      0054ed2a    call 00560BF0h"
"	      0054ed2f    mov ecx,[ebp-8]"
"	      0054ed32    mov [ecx+98h],eax"
"	      0054ed38    mov eax,[ebp-8]"
"	      0054ed3b    cmp dword ptr [eax+98h],0"
"	      0054ed42    jne near ptr 0054ED64h"
"	      0054ed48    push 8C085h"
"	      0054ed4d    push 5BBB74h"
"	      0054ed52    push 2FBh"
"	      0054ed57    push 5BBA14h"
"	      0054ed5c    call 00554F30h"
"	      0054ed61    add esp,10h"
"	      0054ed64    jmp near ptr 0054ED69h"
);
// LINE 2430:
	asm( 
"	      0054ed69    mov eax,[ebp-8]"
"	      0054ed6c    movsx eax,word ptr [eax+106h]"
"	      0054ed73    test eax,eax"
"	      0054ed75    je near ptr 0054ED87h"
"	      0054ed7b    push 0"
"	      0054ed7d    push 8"
"	      0054ed7f    mov ecx,[ebp-8]"
"	      0054ed82    call 0054C1DDh"
);
// LINE 2431:
	asm( 
"	      0054ed87    jmp near ptr 0054FAE2h"
);
// LINE 2434:
	asm( 
"	      0054ed8c    mov eax,[ebp-8]"
"	      0054ed8f    movsx eax,word ptr [eax+0F2h]"
"	      0054ed96    test eax,eax"
"	      0054ed98    je near ptr 0054EEF7h"
"	      0054ed9e    mov eax,[ebp-8]"
"	      0054eda1    mov eax,[eax+90h]"
"	      0054eda7    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054edae    jne near ptr 0054EE58h"
"	      0054edb4    mov eax,[ebp-8]"
"	      0054edb7    cmp dword ptr [eax+90h],0"
"	      0054edbe    jne near ptr 0054EDE0h"
"	      0054edc4    push 8C085h"
"	      0054edc9    push 5BBB9Ch"
"	      0054edce    push 2F8h"
"	      0054edd3    push 5BBA14h"
"	      0054edd8    call 00554F30h"
"	      0054eddd    add esp,10h"
"	      0054ede0    mov eax,[ebp-8]"
"	      0054ede3    cmp dword ptr [eax+98h],0"
"	      0054edea    je near ptr 0054EE06h"
"	      0054edf0    mov eax,[ebp-8]"
"	      0054edf3    mov eax,[eax+98h]"
"	      0054edf9    cmp dword ptr [eax+1Ch],44675374h"
"	      0054ee00    je near ptr 0054EE4Eh"
"	      0054ee06    push 44675374h"
"	      0054ee0b    mov eax,[ebp-8]"
"	      0054ee0e    mov ecx,[eax+90h]"
"	      0054ee14    call 00560BF0h"
"	      0054ee19    mov ecx,[ebp-8]"
"	      0054ee1c    mov [ecx+98h],eax"
"	      0054ee22    mov eax,[ebp-8]"
"	      0054ee25    cmp dword ptr [eax+98h],0"
"	      0054ee2c    jne near ptr 0054EE4Eh"
"	      0054ee32    push 8C085h"
"	      0054ee37    push 5BBB74h"
"	      0054ee3c    push 2FBh"
"	      0054ee41    push 5BBA14h"
"	      0054ee46    call 00554F30h"
"	      0054ee4b    add esp,10h"
"	      0054ee4e    jmp near ptr 0054EE53h"
"	      0054ee53    jmp near ptr 0054EEF7h"
"	      0054ee58    mov eax,[ebp-8]"
"	      0054ee5b    cmp dword ptr [eax+90h],0"
"	      0054ee62    jne near ptr 0054EE84h"
"	      0054ee68    push 8C085h"
"	      0054ee6d    push 5BBB9Ch"
"	      0054ee72    push 2F8h"
"	      0054ee77    push 5BBA14h"
"	      0054ee7c    call 00554F30h"
"	      0054ee81    add esp,10h"
"	      0054ee84    mov eax,[ebp-8]"
"	      0054ee87    cmp dword ptr [eax+98h],0"
"	      0054ee8e    je near ptr 0054EEAAh"
"	      0054ee94    mov eax,[ebp-8]"
"	      0054ee97    mov eax,[eax+98h]"
"	      0054ee9d    cmp dword ptr [eax+1Ch],57686F61h"
"	      0054eea4    je near ptr 0054EEF2h"
"	      0054eeaa    push 57686F61h"
"	      0054eeaf    mov eax,[ebp-8]"
"	      0054eeb2    mov ecx,[eax+90h]"
"	      0054eeb8    call 00560BF0h"
"	      0054eebd    mov ecx,[ebp-8]"
"	      0054eec0    mov [ecx+98h],eax"
"	      0054eec6    mov eax,[ebp-8]"
"	      0054eec9    cmp dword ptr [eax+98h],0"
"	      0054eed0    jne near ptr 0054EEF2h"
"	      0054eed6    push 8C085h"
"	      0054eedb    push 5BBB74h"
"	      0054eee0    push 2FBh"
"	      0054eee5    push 5BBA14h"
"	      0054eeea    call 00554F30h"
"	      0054eeef    add esp,10h"
"	      0054eef2    jmp near ptr 0054EEF7h"
);
// LINE 2435:
	asm( 
"	      0054eef7    mov eax,[ebp-8]"
"	      0054eefa    movsx eax,word ptr [eax+106h]"
"	      0054ef01    test eax,eax"
"	      0054ef03    je near ptr 0054EF15h"
"	      0054ef09    push 0"
"	      0054ef0b    push 9"
"	      0054ef0d    mov ecx,[ebp-8]"
"	      0054ef10    call 0054C1DDh"
);
// LINE 2436:
	asm( 
"	      0054ef15    jmp near ptr 0054FAE2h"
);
// LINE 2438:
	asm( 
"	      0054ef1a    cmp dword ptr [ebp+10h],0"
"	      0054ef1e    je near ptr 0054EF31h"
"	      0054ef24    mov eax,[ebp+10h]"
"	      0054ef27    cmp dword ptr [eax+8],0"
"	      0054ef2b    jne near ptr 0054EF4Dh"
"	      0054ef31    push 8C085h"
"	      0054ef36    push 5BB498h"
"	      0054ef3b    push 986h"
"	      0054ef40    push 5BB4C4h"
"	      0054ef45    call 00554F30h"
"	      0054ef4a    add esp,10h"
"	      0054ef4d    mov eax,[ebp+10h]"
"	      0054ef50    mov eax,[eax+8]"
"	      0054ef53    mov [ebp-4],eax"
);
// LINE 2439:
	asm( 
"	      0054ef56    jmp near ptr 0054EF5Bh"
"	      0054ef5b    mov eax,[ebp-4]"
"	      0054ef5e    mov eax,[eax+20h]"
"	      0054ef61    push eax"
"	      0054ef62    mov eax,[ebp-4]"
"	      0054ef65    mov eax,[eax+18h]"
"	      0054ef68    push eax"
"	      0054ef69    mov eax,[ebp-8]"
"	      0054ef6c    mov eax,[eax+44h]"
"	      0054ef6f    push eax"
"	      0054ef70    mov eax,[ebp-8]"
"	      0054ef73    mov eax,[eax+3Ch]"
"	      0054ef76    push eax"
"	      0054ef77    call 00551AF1h"
"	      0054ef7c    add esp,10h"
"	      0054ef7f    movsx eax,ax"
"	      0054ef82    sub eax,2"
"	      0054ef85    mov ecx,[ebp-8]"
"	      0054ef88    mov [ecx+0D0h],ax"
);
// LINE 2440:
	asm( 
"	      0054ef8f    mov eax,[ebp-8]"
"	      0054ef92    movsx eax,word ptr [eax+0D0h]"
"	      0054ef99    and eax,7"
"	      0054ef9c    mov ecx,[ebp-8]"
"	      0054ef9f    mov [ecx+0D0h],ax"
);
// LINE 2441:
	asm( 
"	      0054efa6    push 5"
"	      0054efa8    call 0055D717h"
"	      0054efad    add esp,4"
"	      0054efb0    movzx eax,ax"
"	      0054efb3    mov [ebp-10h],eax"
"	      0054efb6    jmp near ptr 0054F580h"
);
// LINE 2443:
	asm( 
"	      0054efbb    mov eax,[ebp-8]"
"	      0054efbe    movsx eax,word ptr [eax+0F2h]"
"	      0054efc5    test eax,eax"
"	      0054efc7    je near ptr 0054F126h"
"	      0054efcd    mov eax,[ebp-8]"
"	      0054efd0    mov eax,[eax+90h]"
"	      0054efd6    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054efdd    jne near ptr 0054F087h"
"	      0054efe3    mov eax,[ebp-8]"
"	      0054efe6    cmp dword ptr [eax+90h],0"
"	      0054efed    jne near ptr 0054F00Fh"
"	      0054eff3    push 8C085h"
"	      0054eff8    push 5BBB9Ch"
"	      0054effd    push 2F8h"
"	      0054f002    push 5BBA14h"
"	      0054f007    call 00554F30h"
"	      0054f00c    add esp,10h"
"	      0054f00f    mov eax,[ebp-8]"
"	      0054f012    cmp dword ptr [eax+98h],0"
"	      0054f019    je near ptr 0054F035h"
"	      0054f01f    mov eax,[ebp-8]"
"	      0054f022    mov eax,[eax+98h]"
"	      0054f028    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f02f    je near ptr 0054F07Dh"
"	      0054f035    push 44675374h"
"	      0054f03a    mov eax,[ebp-8]"
"	      0054f03d    mov ecx,[eax+90h]"
"	      0054f043    call 00560BF0h"
"	      0054f048    mov ecx,[ebp-8]"
"	      0054f04b    mov [ecx+98h],eax"
"	      0054f051    mov eax,[ebp-8]"
"	      0054f054    cmp dword ptr [eax+98h],0"
"	      0054f05b    jne near ptr 0054F07Dh"
"	      0054f061    push 8C085h"
"	      0054f066    push 5BBB74h"
"	      0054f06b    push 2FBh"
"	      0054f070    push 5BBA14h"
"	      0054f075    call 00554F30h"
"	      0054f07a    add esp,10h"
"	      0054f07d    jmp near ptr 0054F082h"
"	      0054f082    jmp near ptr 0054F126h"
"	      0054f087    mov eax,[ebp-8]"
"	      0054f08a    cmp dword ptr [eax+90h],0"
"	      0054f091    jne near ptr 0054F0B3h"
"	      0054f097    push 8C085h"
"	      0054f09c    push 5BBB9Ch"
"	      0054f0a1    push 2F8h"
"	      0054f0a6    push 5BBA14h"
"	      0054f0ab    call 00554F30h"
"	      0054f0b0    add esp,10h"
"	      0054f0b3    mov eax,[ebp-8]"
"	      0054f0b6    cmp dword ptr [eax+98h],0"
"	      0054f0bd    je near ptr 0054F0D9h"
"	      0054f0c3    mov eax,[ebp-8]"
"	      0054f0c6    mov eax,[eax+98h]"
"	      0054f0cc    cmp dword ptr [eax+1Ch],32476162h"
"	      0054f0d3    je near ptr 0054F121h"
"	      0054f0d9    push 32476162h"
"	      0054f0de    mov eax,[ebp-8]"
"	      0054f0e1    mov ecx,[eax+90h]"
"	      0054f0e7    call 00560BF0h"
"	      0054f0ec    mov ecx,[ebp-8]"
"	      0054f0ef    mov [ecx+98h],eax"
"	      0054f0f5    mov eax,[ebp-8]"
"	      0054f0f8    cmp dword ptr [eax+98h],0"
"	      0054f0ff    jne near ptr 0054F121h"
"	      0054f105    push 8C085h"
"	      0054f10a    push 5BBB74h"
"	      0054f10f    push 2FBh"
"	      0054f114    push 5BBA14h"
"	      0054f119    call 00554F30h"
"	      0054f11e    add esp,10h"
"	      0054f121    jmp near ptr 0054F126h"
);
// LINE 2444:
	asm( 
"	      0054f126    jmp near ptr 0054F5A3h"
);
// LINE 2446:
	asm( 
"	      0054f12b    mov eax,[ebp-8]"
"	      0054f12e    movsx eax,word ptr [eax+0F2h]"
"	      0054f135    test eax,eax"
"	      0054f137    je near ptr 0054F296h"
"	      0054f13d    mov eax,[ebp-8]"
"	      0054f140    mov eax,[eax+90h]"
"	      0054f146    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054f14d    jne near ptr 0054F1F7h"
"	      0054f153    mov eax,[ebp-8]"
"	      0054f156    cmp dword ptr [eax+90h],0"
"	      0054f15d    jne near ptr 0054F17Fh"
"	      0054f163    push 8C085h"
"	      0054f168    push 5BBB9Ch"
"	      0054f16d    push 2F8h"
"	      0054f172    push 5BBA14h"
"	      0054f177    call 00554F30h"
"	      0054f17c    add esp,10h"
"	      0054f17f    mov eax,[ebp-8]"
"	      0054f182    cmp dword ptr [eax+98h],0"
"	      0054f189    je near ptr 0054F1A5h"
"	      0054f18f    mov eax,[ebp-8]"
"	      0054f192    mov eax,[eax+98h]"
"	      0054f198    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f19f    je near ptr 0054F1EDh"
"	      0054f1a5    push 44675374h"
"	      0054f1aa    mov eax,[ebp-8]"
"	      0054f1ad    mov ecx,[eax+90h]"
"	      0054f1b3    call 00560BF0h"
"	      0054f1b8    mov ecx,[ebp-8]"
"	      0054f1bb    mov [ecx+98h],eax"
"	      0054f1c1    mov eax,[ebp-8]"
"	      0054f1c4    cmp dword ptr [eax+98h],0"
"	      0054f1cb    jne near ptr 0054F1EDh"
"	      0054f1d1    push 8C085h"
"	      0054f1d6    push 5BBB74h"
"	      0054f1db    push 2FBh"
"	      0054f1e0    push 5BBA14h"
"	      0054f1e5    call 00554F30h"
"	      0054f1ea    add esp,10h"
"	      0054f1ed    jmp near ptr 0054F1F2h"
"	      0054f1f2    jmp near ptr 0054F296h"
"	      0054f1f7    mov eax,[ebp-8]"
"	      0054f1fa    cmp dword ptr [eax+90h],0"
"	      0054f201    jne near ptr 0054F223h"
"	      0054f207    push 8C085h"
"	      0054f20c    push 5BBB9Ch"
"	      0054f211    push 2F8h"
"	      0054f216    push 5BBA14h"
"	      0054f21b    call 00554F30h"
"	      0054f220    add esp,10h"
"	      0054f223    mov eax,[ebp-8]"
"	      0054f226    cmp dword ptr [eax+98h],0"
"	      0054f22d    je near ptr 0054F249h"
"	      0054f233    mov eax,[ebp-8]"
"	      0054f236    mov eax,[eax+98h]"
"	      0054f23c    cmp dword ptr [eax+1Ch],32476162h"
"	      0054f243    je near ptr 0054F291h"
"	      0054f249    push 32476162h"
"	      0054f24e    mov eax,[ebp-8]"
"	      0054f251    mov ecx,[eax+90h]"
"	      0054f257    call 00560BF0h"
"	      0054f25c    mov ecx,[ebp-8]"
"	      0054f25f    mov [ecx+98h],eax"
"	      0054f265    mov eax,[ebp-8]"
"	      0054f268    cmp dword ptr [eax+98h],0"
"	      0054f26f    jne near ptr 0054F291h"
"	      0054f275    push 8C085h"
"	      0054f27a    push 5BBB74h"
"	      0054f27f    push 2FBh"
"	      0054f284    push 5BBA14h"
"	      0054f289    call 00554F30h"
"	      0054f28e    add esp,10h"
"	      0054f291    jmp near ptr 0054F296h"
);
// LINE 2447:
	asm( 
"	      0054f296    jmp near ptr 0054F5A3h"
);
// LINE 2449:
	asm( 
"	      0054f29b    mov eax,[ebp-8]"
"	      0054f29e    movsx eax,word ptr [eax+0F2h]"
"	      0054f2a5    test eax,eax"
"	      0054f2a7    je near ptr 0054F406h"
"	      0054f2ad    mov eax,[ebp-8]"
"	      0054f2b0    mov eax,[eax+90h]"
"	      0054f2b6    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054f2bd    jne near ptr 0054F367h"
"	      0054f2c3    mov eax,[ebp-8]"
"	      0054f2c6    cmp dword ptr [eax+90h],0"
"	      0054f2cd    jne near ptr 0054F2EFh"
"	      0054f2d3    push 8C085h"
"	      0054f2d8    push 5BBB9Ch"
"	      0054f2dd    push 2F8h"
"	      0054f2e2    push 5BBA14h"
"	      0054f2e7    call 00554F30h"
"	      0054f2ec    add esp,10h"
"	      0054f2ef    mov eax,[ebp-8]"
"	      0054f2f2    cmp dword ptr [eax+98h],0"
"	      0054f2f9    je near ptr 0054F315h"
"	      0054f2ff    mov eax,[ebp-8]"
"	      0054f302    mov eax,[eax+98h]"
"	      0054f308    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f30f    je near ptr 0054F35Dh"
"	      0054f315    push 44675374h"
"	      0054f31a    mov eax,[ebp-8]"
"	      0054f31d    mov ecx,[eax+90h]"
"	      0054f323    call 00560BF0h"
"	      0054f328    mov ecx,[ebp-8]"
"	      0054f32b    mov [ecx+98h],eax"
"	      0054f331    mov eax,[ebp-8]"
"	      0054f334    cmp dword ptr [eax+98h],0"
"	      0054f33b    jne near ptr 0054F35Dh"
"	      0054f341    push 8C085h"
"	      0054f346    push 5BBB74h"
"	      0054f34b    push 2FBh"
"	      0054f350    push 5BBA14h"
"	      0054f355    call 00554F30h"
"	      0054f35a    add esp,10h"
"	      0054f35d    jmp near ptr 0054F362h"
"	      0054f362    jmp near ptr 0054F406h"
"	      0054f367    mov eax,[ebp-8]"
"	      0054f36a    cmp dword ptr [eax+90h],0"
"	      0054f371    jne near ptr 0054F393h"
"	      0054f377    push 8C085h"
"	      0054f37c    push 5BBB9Ch"
"	      0054f381    push 2F8h"
"	      0054f386    push 5BBA14h"
"	      0054f38b    call 00554F30h"
"	      0054f390    add esp,10h"
"	      0054f393    mov eax,[ebp-8]"
"	      0054f396    cmp dword ptr [eax+98h],0"
"	      0054f39d    je near ptr 0054F3B9h"
"	      0054f3a3    mov eax,[ebp-8]"
"	      0054f3a6    mov eax,[eax+98h]"
"	      0054f3ac    cmp dword ptr [eax+1Ch],426F7750h"
"	      0054f3b3    je near ptr 0054F401h"
"	      0054f3b9    push 426F7750h"
"	      0054f3be    mov eax,[ebp-8]"
"	      0054f3c1    mov ecx,[eax+90h]"
"	      0054f3c7    call 00560BF0h"
"	      0054f3cc    mov ecx,[ebp-8]"
"	      0054f3cf    mov [ecx+98h],eax"
"	      0054f3d5    mov eax,[ebp-8]"
"	      0054f3d8    cmp dword ptr [eax+98h],0"
"	      0054f3df    jne near ptr 0054F401h"
"	      0054f3e5    push 8C085h"
"	      0054f3ea    push 5BBB74h"
"	      0054f3ef    push 2FBh"
"	      0054f3f4    push 5BBA14h"
"	      0054f3f9    call 00554F30h"
"	      0054f3fe    add esp,10h"
"	      0054f401    jmp near ptr 0054F406h"
);
// LINE 2450:
	asm( 
"	      0054f406    jmp near ptr 0054F5A3h"
);
// LINE 2452:
	asm( 
"	      0054f40b    mov eax,[ebp-8]"
"	      0054f40e    movsx eax,word ptr [eax+0F2h]"
"	      0054f415    test eax,eax"
"	      0054f417    je near ptr 0054F576h"
"	      0054f41d    mov eax,[ebp-8]"
"	      0054f420    mov eax,[eax+90h]"
"	      0054f426    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054f42d    jne near ptr 0054F4D7h"
"	      0054f433    mov eax,[ebp-8]"
"	      0054f436    cmp dword ptr [eax+90h],0"
"	      0054f43d    jne near ptr 0054F45Fh"
"	      0054f443    push 8C085h"
"	      0054f448    push 5BBB9Ch"
"	      0054f44d    push 2F8h"
"	      0054f452    push 5BBA14h"
"	      0054f457    call 00554F30h"
"	      0054f45c    add esp,10h"
"	      0054f45f    mov eax,[ebp-8]"
"	      0054f462    cmp dword ptr [eax+98h],0"
"	      0054f469    je near ptr 0054F485h"
"	      0054f46f    mov eax,[ebp-8]"
"	      0054f472    mov eax,[eax+98h]"
"	      0054f478    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f47f    je near ptr 0054F4CDh"
"	      0054f485    push 44675374h"
"	      0054f48a    mov eax,[ebp-8]"
"	      0054f48d    mov ecx,[eax+90h]"
"	      0054f493    call 00560BF0h"
"	      0054f498    mov ecx,[ebp-8]"
"	      0054f49b    mov [ecx+98h],eax"
"	      0054f4a1    mov eax,[ebp-8]"
"	      0054f4a4    cmp dword ptr [eax+98h],0"
"	      0054f4ab    jne near ptr 0054F4CDh"
"	      0054f4b1    push 8C085h"
"	      0054f4b6    push 5BBB74h"
"	      0054f4bb    push 2FBh"
"	      0054f4c0    push 5BBA14h"
"	      0054f4c5    call 00554F30h"
"	      0054f4ca    add esp,10h"
"	      0054f4cd    jmp near ptr 0054F4D2h"
"	      0054f4d2    jmp near ptr 0054F576h"
"	      0054f4d7    mov eax,[ebp-8]"
"	      0054f4da    cmp dword ptr [eax+90h],0"
"	      0054f4e1    jne near ptr 0054F503h"
"	      0054f4e7    push 8C085h"
"	      0054f4ec    push 5BBB9Ch"
"	      0054f4f1    push 2F8h"
"	      0054f4f6    push 5BBA14h"
"	      0054f4fb    call 00554F30h"
"	      0054f500    add esp,10h"
"	      0054f503    mov eax,[ebp-8]"
"	      0054f506    cmp dword ptr [eax+98h],0"
"	      0054f50d    je near ptr 0054F529h"
"	      0054f513    mov eax,[ebp-8]"
"	      0054f516    mov eax,[eax+98h]"
"	      0054f51c    cmp dword ptr [eax+1Ch],48697048h"
"	      0054f523    je near ptr 0054F571h"
"	      0054f529    push 48697048h"
"	      0054f52e    mov eax,[ebp-8]"
"	      0054f531    mov ecx,[eax+90h]"
"	      0054f537    call 00560BF0h"
"	      0054f53c    mov ecx,[ebp-8]"
"	      0054f53f    mov [ecx+98h],eax"
"	      0054f545    mov eax,[ebp-8]"
"	      0054f548    cmp dword ptr [eax+98h],0"
"	      0054f54f    jne near ptr 0054F571h"
"	      0054f555    push 8C085h"
"	      0054f55a    push 5BBB74h"
"	      0054f55f    push 2FBh"
"	      0054f564    push 5BBA14h"
"	      0054f569    call 00554F30h"
"	      0054f56e    add esp,10h"
"	      0054f571    jmp near ptr 0054F576h"
);
// LINE 2453:
	asm( 
"	      0054f576    jmp near ptr 0054F5A3h"
);
// LINE 2454:
	asm( 
"	      0054f57b    jmp near ptr 0054F5A3h"
"	      0054f580    cmp dword ptr [ebp-10h],0"
"	      0054f584    je near ptr 0054EFBBh"
"	      0054f58a    cmp dword ptr [ebp-10h],1"
"	      0054f58e    je near ptr 0054F12Bh"
"	      0054f594    cmp dword ptr [ebp-10h],3"
"	      0054f598    je near ptr 0054F29Bh"
"	      0054f59e    jmp near ptr 0054F40Bh"
);
// LINE 2455:
	asm( 
"	      0054f5a3    push 9"
"	      0054f5a5    call 0055D717h"
"	      0054f5aa    add esp,4"
"	      0054f5ad    movzx eax,ax"
"	      0054f5b0    mov [ebp-14h],eax"
"	      0054f5b3    jmp near ptr 0054F6F8h"
);
// LINE 2457:
	asm( 
"	      0054f5b8    mov eax,[ebp-8]"
"	      0054f5bb    movsx eax,word ptr [eax+106h]"
"	      0054f5c2    test eax,eax"
"	      0054f5c4    je near ptr 0054F5D6h"
"	      0054f5ca    push 0"
"	      0054f5cc    push 0Ah"
"	      0054f5ce    mov ecx,[ebp-8]"
"	      0054f5d1    call 0054C1DDh"
);
// LINE 2458:
	asm( 
"	      0054f5d6    jmp near ptr 0054F72Ch"
);
// LINE 2460:
	asm( 
"	      0054f5db    mov eax,[ebp-8]"
"	      0054f5de    movsx eax,word ptr [eax+106h]"
"	      0054f5e5    test eax,eax"
"	      0054f5e7    je near ptr 0054F5F9h"
"	      0054f5ed    push 0"
"	      0054f5ef    push 1"
"	      0054f5f1    mov ecx,[ebp-8]"
"	      0054f5f4    call 0054C1DDh"
);
// LINE 2461:
	asm( 
"	      0054f5f9    jmp near ptr 0054F72Ch"
);
// LINE 2463:
	asm( 
"	      0054f5fe    mov eax,[ebp-8]"
"	      0054f601    movsx eax,word ptr [eax+106h]"
"	      0054f608    test eax,eax"
"	      0054f60a    je near ptr 0054F61Ch"
"	      0054f610    push 0"
"	      0054f612    push 4"
"	      0054f614    mov ecx,[ebp-8]"
"	      0054f617    call 0054C1DDh"
);
// LINE 2464:
	asm( 
"	      0054f61c    jmp near ptr 0054F72Ch"
);
// LINE 2466:
	asm( 
"	      0054f621    mov eax,[ebp-8]"
"	      0054f624    movsx eax,word ptr [eax+106h]"
"	      0054f62b    test eax,eax"
"	      0054f62d    je near ptr 0054F63Fh"
"	      0054f633    push 0"
"	      0054f635    push 0Bh"
"	      0054f637    mov ecx,[ebp-8]"
"	      0054f63a    call 0054C1DDh"
);
// LINE 2467:
	asm( 
"	      0054f63f    jmp near ptr 0054F72Ch"
);
// LINE 2469:
	asm( 
"	      0054f644    mov eax,[ebp-8]"
"	      0054f647    movsx eax,word ptr [eax+106h]"
"	      0054f64e    test eax,eax"
"	      0054f650    je near ptr 0054F662h"
"	      0054f656    push 0"
"	      0054f658    push 2"
"	      0054f65a    mov ecx,[ebp-8]"
"	      0054f65d    call 0054C1DDh"
);
// LINE 2470:
	asm( 
"	      0054f662    jmp near ptr 0054F72Ch"
);
// LINE 2472:
	asm( 
"	      0054f667    mov eax,[ebp-8]"
"	      0054f66a    movsx eax,word ptr [eax+106h]"
"	      0054f671    test eax,eax"
"	      0054f673    je near ptr 0054F685h"
"	      0054f679    push 0"
"	      0054f67b    push 12h"
"	      0054f67d    mov ecx,[ebp-8]"
"	      0054f680    call 0054C1DDh"
);
// LINE 2473:
	asm( 
"	      0054f685    jmp near ptr 0054F72Ch"
);
// LINE 2475:
	asm( 
"	      0054f68a    mov eax,[ebp-8]"
"	      0054f68d    movsx eax,word ptr [eax+106h]"
"	      0054f694    test eax,eax"
"	      0054f696    je near ptr 0054F6A8h"
"	      0054f69c    push 0"
"	      0054f69e    push 6"
"	      0054f6a0    mov ecx,[ebp-8]"
"	      0054f6a3    call 0054C1DDh"
);
// LINE 2476:
	asm( 
"	      0054f6a8    jmp near ptr 0054F72Ch"
);
// LINE 2478:
	asm( 
"	      0054f6ad    mov eax,[ebp-8]"
"	      0054f6b0    movsx eax,word ptr [eax+106h]"
"	      0054f6b7    test eax,eax"
"	      0054f6b9    je near ptr 0054F6CBh"
"	      0054f6bf    push 0"
"	      0054f6c1    push 7"
"	      0054f6c3    mov ecx,[ebp-8]"
"	      0054f6c6    call 0054C1DDh"
);
// LINE 2479:
	asm( 
"	      0054f6cb    jmp near ptr 0054F72Ch"
);
// LINE 2481:
	asm( 
"	      0054f6d0    mov eax,[ebp-8]"
"	      0054f6d3    movsx eax,word ptr [eax+106h]"
"	      0054f6da    test eax,eax"
"	      0054f6dc    je near ptr 0054F6EEh"
"	      0054f6e2    push 0"
"	      0054f6e4    push 3"
"	      0054f6e6    mov ecx,[ebp-8]"
"	      0054f6e9    call 0054C1DDh"
);
// LINE 2482:
	asm( 
"	      0054f6ee    jmp near ptr 0054F72Ch"
);
// LINE 2483:
	asm( 
"	      0054f6f3    jmp near ptr 0054F72Ch"
"	      0054f6f8    cmp dword ptr [ebp-14h],7"
"	      0054f6fc    ja near ptr 0054F6D0h"
"	      0054f702    mov eax,[ebp-14h]"
"	      0054f705    jmp dword ptr [eax*4+54F70Ch]"
"	      0054f70c    mov eax,0DB0054F5h"
"	      0054f711    cmc"
"	      0054f712    push esp"
"	      0054f713    add dh,bh"
"	      0054f715    cmc"
"	      0054f716    push esp"
"	      0054f717    add [ecx],ah"
"	      0054f719    not byte ptr [eax+eax+44h]"
"	      0054f71d    not byte ptr [eax+eax+67h]"
"	      0054f721    not byte ptr [eax+eax-76h]"
"	      0054f725    not byte ptr [eax+eax-53h]"
"	      0054f729    (bad)"
);
// LINE 2484:
	asm( 
"	      0054f72c    jmp near ptr 0054FAE2h"
);
// LINE 2486:
	asm( 
"	      0054f731    mov eax,[ebp-8]"
"	      0054f734    movsx eax,word ptr [eax+0F2h]"
"	      0054f73b    test eax,eax"
"	      0054f73d    je near ptr 0054F89Ch"
"	      0054f743    mov eax,[ebp-8]"
"	      0054f746    mov eax,[eax+90h]"
"	      0054f74c    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054f753    jne near ptr 0054F7FDh"
"	      0054f759    mov eax,[ebp-8]"
"	      0054f75c    cmp dword ptr [eax+90h],0"
"	      0054f763    jne near ptr 0054F785h"
"	      0054f769    push 8C085h"
"	      0054f76e    push 5BBB9Ch"
"	      0054f773    push 2F8h"
"	      0054f778    push 5BBA14h"
"	      0054f77d    call 00554F30h"
"	      0054f782    add esp,10h"
"	      0054f785    mov eax,[ebp-8]"
"	      0054f788    cmp dword ptr [eax+98h],0"
"	      0054f78f    je near ptr 0054F7ABh"
"	      0054f795    mov eax,[ebp-8]"
"	      0054f798    mov eax,[eax+98h]"
"	      0054f79e    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f7a5    je near ptr 0054F7F3h"
"	      0054f7ab    push 44675374h"
"	      0054f7b0    mov eax,[ebp-8]"
"	      0054f7b3    mov ecx,[eax+90h]"
"	      0054f7b9    call 00560BF0h"
"	      0054f7be    mov ecx,[ebp-8]"
"	      0054f7c1    mov [ecx+98h],eax"
"	      0054f7c7    mov eax,[ebp-8]"
"	      0054f7ca    cmp dword ptr [eax+98h],0"
"	      0054f7d1    jne near ptr 0054F7F3h"
"	      0054f7d7    push 8C085h"
"	      0054f7dc    push 5BBB74h"
"	      0054f7e1    push 2FBh"
"	      0054f7e6    push 5BBA14h"
"	      0054f7eb    call 00554F30h"
"	      0054f7f0    add esp,10h"
"	      0054f7f3    jmp near ptr 0054F7F8h"
"	      0054f7f8    jmp near ptr 0054F89Ch"
"	      0054f7fd    mov eax,[ebp-8]"
"	      0054f800    cmp dword ptr [eax+90h],0"
"	      0054f807    jne near ptr 0054F829h"
"	      0054f80d    push 8C085h"
"	      0054f812    push 5BBB9Ch"
"	      0054f817    push 2F8h"
"	      0054f81c    push 5BBA14h"
"	      0054f821    call 00554F30h"
"	      0054f826    add esp,10h"
"	      0054f829    mov eax,[ebp-8]"
"	      0054f82c    cmp dword ptr [eax+98h],0"
"	      0054f833    je near ptr 0054F84Fh"
"	      0054f839    mov eax,[ebp-8]"
"	      0054f83c    mov eax,[eax+98h]"
"	      0054f842    cmp dword ptr [eax+1Ch],4E6F4D6Fh"
"	      0054f849    je near ptr 0054F897h"
"	      0054f84f    push 4E6F4D6Fh"
"	      0054f854    mov eax,[ebp-8]"
"	      0054f857    mov ecx,[eax+90h]"
"	      0054f85d    call 00560BF0h"
"	      0054f862    mov ecx,[ebp-8]"
"	      0054f865    mov [ecx+98h],eax"
"	      0054f86b    mov eax,[ebp-8]"
"	      0054f86e    cmp dword ptr [eax+98h],0"
"	      0054f875    jne near ptr 0054F897h"
"	      0054f87b    push 8C085h"
"	      0054f880    push 5BBB74h"
"	      0054f885    push 2FBh"
"	      0054f88a    push 5BBA14h"
"	      0054f88f    call 00554F30h"
"	      0054f894    add esp,10h"
"	      0054f897    jmp near ptr 0054F89Ch"
);
// LINE 2487:
	asm( 
"	      0054f89c    mov eax,[ebp-8]"
"	      0054f89f    movsx eax,word ptr [eax+106h]"
"	      0054f8a6    test eax,eax"
"	      0054f8a8    je near ptr 0054F8BAh"
"	      0054f8ae    push 0"
"	      0054f8b0    push 9"
"	      0054f8b2    mov ecx,[ebp-8]"
"	      0054f8b5    call 0054C1DDh"
);
// LINE 2488:
	asm( 
"	      0054f8ba    jmp near ptr 0054FAE2h"
);
// LINE 2491:
	asm( 
"	      0054f8bf    mov eax,[ebp-8]"
"	      0054f8c2    movsx eax,word ptr [eax+0F2h]"
"	      0054f8c9    test eax,eax"
"	      0054f8cb    je near ptr 0054FA2Ah"
"	      0054f8d1    mov eax,[ebp-8]"
"	      0054f8d4    mov eax,[eax+90h]"
"	      0054f8da    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054f8e1    jne near ptr 0054F98Bh"
"	      0054f8e7    mov eax,[ebp-8]"
"	      0054f8ea    cmp dword ptr [eax+90h],0"
"	      0054f8f1    jne near ptr 0054F913h"
"	      0054f8f7    push 8C085h"
"	      0054f8fc    push 5BBB9Ch"
"	      0054f901    push 2F8h"
"	      0054f906    push 5BBA14h"
"	      0054f90b    call 00554F30h"
"	      0054f910    add esp,10h"
"	      0054f913    mov eax,[ebp-8]"
"	      0054f916    cmp dword ptr [eax+98h],0"
"	      0054f91d    je near ptr 0054F939h"
"	      0054f923    mov eax,[ebp-8]"
"	      0054f926    mov eax,[eax+98h]"
"	      0054f92c    cmp dword ptr [eax+1Ch],44675374h"
"	      0054f933    je near ptr 0054F981h"
"	      0054f939    push 44675374h"
"	      0054f93e    mov eax,[ebp-8]"
"	      0054f941    mov ecx,[eax+90h]"
"	      0054f947    call 00560BF0h"
"	      0054f94c    mov ecx,[ebp-8]"
"	      0054f94f    mov [ecx+98h],eax"
"	      0054f955    mov eax,[ebp-8]"
"	      0054f958    cmp dword ptr [eax+98h],0"
"	      0054f95f    jne near ptr 0054F981h"
"	      0054f965    push 8C085h"
"	      0054f96a    push 5BBB74h"
"	      0054f96f    push 2FBh"
"	      0054f974    push 5BBA14h"
"	      0054f979    call 00554F30h"
"	      0054f97e    add esp,10h"
"	      0054f981    jmp near ptr 0054F986h"
"	      0054f986    jmp near ptr 0054FA2Ah"
"	      0054f98b    mov eax,[ebp-8]"
"	      0054f98e    cmp dword ptr [eax+90h],0"
"	      0054f995    jne near ptr 0054F9B7h"
"	      0054f99b    push 8C085h"
"	      0054f9a0    push 5BBB9Ch"
"	      0054f9a5    push 2F8h"
"	      0054f9aa    push 5BBA14h"
"	      0054f9af    call 00554F30h"
"	      0054f9b4    add esp,10h"
"	      0054f9b7    mov eax,[ebp-8]"
"	      0054f9ba    cmp dword ptr [eax+98h],0"
"	      0054f9c1    je near ptr 0054F9DDh"
"	      0054f9c7    mov eax,[ebp-8]"
"	      0054f9ca    mov eax,[eax+98h]"
"	      0054f9d0    cmp dword ptr [eax+1Ch],4E6F4D6Fh"
"	      0054f9d7    je near ptr 0054FA25h"
"	      0054f9dd    push 4E6F4D6Fh"
"	      0054f9e2    mov eax,[ebp-8]"
"	      0054f9e5    mov ecx,[eax+90h]"
"	      0054f9eb    call 00560BF0h"
"	      0054f9f0    mov ecx,[ebp-8]"
"	      0054f9f3    mov [ecx+98h],eax"
"	      0054f9f9    mov eax,[ebp-8]"
"	      0054f9fc    cmp dword ptr [eax+98h],0"
"	      0054fa03    jne near ptr 0054FA25h"
"	      0054fa09    push 8C085h"
"	      0054fa0e    push 5BBB74h"
"	      0054fa13    push 2FBh"
"	      0054fa18    push 5BBA14h"
"	      0054fa1d    call 00554F30h"
"	      0054fa22    add esp,10h"
"	      0054fa25    jmp near ptr 0054FA2Ah"
);
// LINE 2492:
	asm( 
"	      0054fa2a    mov eax,[ebp-8]"
"	      0054fa2d    movsx eax,word ptr [eax+106h]"
"	      0054fa34    test eax,eax"
"	      0054fa36    je near ptr 0054FA48h"
"	      0054fa3c    push 0"
"	      0054fa3e    push 0Ch"
"	      0054fa40    mov ecx,[ebp-8]"
"	      0054fa43    call 0054C1DDh"
);
// LINE 2493:
	asm( 
"	      0054fa48    jmp near ptr 0054FAE2h"
);
// LINE 2495:
	asm( 
"	      0054fa4d    mov eax,[ebp-8]"
"	      0054fa50    movsx eax,word ptr [eax+0F2h]"
"	      0054fa57    test eax,eax"
"	      0054fa59    je near ptr 0054FA94h"
"	      0054fa5f    mov eax,[ebp-8]"
"	      0054fa62    mov eax,[eax+90h]"
"	      0054fa68    cmp dword ptr [eax+1Ch],32444F47h"
"	      0054fa6f    jne near ptr 0054FA87h"
"	      0054fa75    push 44675374h"
"	      0054fa7a    mov ecx,[ebp-8]"
"	      0054fa7d    call 005520E0h"
"	      0054fa82    jmp near ptr 0054FA94h"
"	      0054fa87    push 4E6F4D6Fh"
"	      0054fa8c    mov ecx,[ebp-8]"
"	      0054fa8f    call 005520E0h"
);
// LINE 2496:
	asm( 
"	      0054fa94    jmp near ptr 0054FAE2h"
);
// LINE 2497:
	asm( 
"	      0054fa99    jmp near ptr 0054FAE2h"
"	      0054fa9e    cmp dword ptr [ebp-0Ch],0Bh"
"	      0054faa2    ja near ptr 0054FA4Dh"
"	      0054faa8    mov eax,[ebp-0Ch]"
"	      0054faab    jmp dword ptr [eax*4+54FAB2h]"
"	      0054fab2    sub bh,ah"
"	      0054fab4    push esp"
"	      0054fab5    add dh,bh"
"	      0054fab7    jmp short 0054FB0Dh"
"	      0054fab9    add [ebp+ebp*8-5B2FFACh],cl"
"	      0054fac0    push esp"
"	      0054fac1    add [ebp-6],cl"
"	      0054fac4    push esp"
"	      0054fac5    add [edx],bl"
"	      0054fac7    out dx,eax"
"	      0054fac8    push esp"
"	      0054fac9    add [ebp+ebp*8-1A6FFFACh],cl"
"	      0054fad0    push esp"
"	      0054fad1    add [eax],ch"
"	      0054fad3    out 54h,eax"
"	      0054fad5    add [ebp-6],cl"
"	      0054fad8    push esp"
"	      0054fad9    add [edi+310054F8h],bh"
"	      0054fadf    (bad)"
);
// LINE 2498:
	asm( 
"	      0054fae2    jmp near ptr 0054FAE7h"
"	      0054fae7    pop edi"
"	      0054fae8    pop esi"
"	      0054fae9    pop ebx"
"	      0054faea    leave"
"	      0054faeb    ret 0Ch"
);
}

// FUNCTION: SIMCOPTER 0x0054faee
void cAvatar::ResetView() {
// LINE 2501:
	asm( 
"	      0054faee    push ebp"
"	      0054faef    mov ebp,esp"
"	      0054faf1    sub esp,44h"
"	      0054faf4    push ebx"
"	      0054faf5    push esi"
"	      0054faf6    push edi"
"	      0054faf7    mov [ebp-24h],ecx"
);
// LINE 2506:
	asm( 
"	      0054fafa    call 004EE8F1h"
);
// LINE 2508:
	asm( 
"	      0054faff    mov eax,[ebp-24h]"
"	      0054fb02    mov eax,[eax+3Ch]"
"	      0054fb05    mov [ebp-28h],eax"
"	      0054fb08    fild dword ptr [ebp-28h]"
"	      0054fb0b    mov eax,ds:[6C1318h]"
"	      0054fb10    mov [ebp-2Ch],eax"
"	      0054fb13    fisub dword ptr [ebp-2Ch]"
"	      0054fb16    fdiv qword ptr ds:[593540h]"
"	      0054fb1c    fstp qword ptr [ebp-1Ch]"
);
// LINE 2509:
	asm( 
"	      0054fb1f    mov eax,ds:[6C131Ch]"
"	      0054fb24    mov [ebp-30h],eax"
"	      0054fb27    fild dword ptr [ebp-30h]"
"	      0054fb2a    mov eax,[ebp-24h]"
"	      0054fb2d    mov eax,[eax+40h]"
"	      0054fb30    mov [ebp-34h],eax"
"	      0054fb33    fisub dword ptr [ebp-34h]"
"	      0054fb36    fdiv qword ptr ds:[593540h]"
"	      0054fb3c    fstp qword ptr [ebp-14h]"
);
// LINE 2510:
	asm( 
"	      0054fb3f    mov eax,[ebp-24h]"
"	      0054fb42    mov eax,[eax+44h]"
"	      0054fb45    mov [ebp-38h],eax"
"	      0054fb48    fild dword ptr [ebp-38h]"
"	      0054fb4b    mov eax,ds:[6C1320h]"
"	      0054fb50    mov [ebp-3Ch],eax"
"	      0054fb53    fisub dword ptr [ebp-3Ch]"
"	      0054fb56    fdiv qword ptr ds:[593540h]"
"	      0054fb5c    fst qword ptr [ebp-0Ch]"
);
// LINE 2511:
	asm( 
"	      0054fb5f    fmul qword ptr ds:[593540h]"
"	      0054fb65    call 0056EBE8h"
"	      0054fb6a    push eax"
"	      0054fb6b    fld qword ptr [ebp-1Ch]"
"	      0054fb6e    fmul qword ptr ds:[593540h]"
"	      0054fb74    call 0056EBE8h"
"	      0054fb79    push eax"
"	      0054fb7a    call 004D20B1h"
"	      0054fb7f    add esp,8"
"	      0054fb82    push eax"
"	      0054fb83    call 004CA7B4h"
"	      0054fb88    add esp,4"
"	      0054fb8b    mov [ebp-4],eax"
);
// LINE 2512:
	asm( 
"	      0054fb8e    mov eax,[ebp-4]"
"	      0054fb91    mov [ebp-40h],eax"
"	      0054fb94    fild dword ptr [ebp-40h]"
"	      0054fb97    fdiv qword ptr ds:[593540h]"
"	      0054fb9d    fcomp qword ptr ds:[593548h]"
"	      0054fba3    fnstsw ax"
"	      0054fba5    test ah,1"
"	      0054fba8    je near ptr 0054FBB5h"
);
// LINE 2513:
	asm( 
"	      0054fbae    add dword ptr [ebp-4],0E100000h"
);
// LINE 2517:
	asm( 
"	      0054fbb5    mov ebx,2"
"	      0054fbba    mov eax,[ebp-4]"
"	      0054fbbd    mov [ebp-44h],eax"
"	      0054fbc0    fild dword ptr [ebp-44h]"
"	      0054fbc3    fdiv qword ptr ds:[593540h]"
"	      0054fbc9    fadd qword ptr ds:[593550h]"
"	      0054fbcf    fdiv qword ptr ds:[593558h]"
"	      0054fbd5    call 0056EBE8h"
"	      0054fbda    xor ecx,ecx"
"	      0054fbdc    mov cl,al"
"	      0054fbde    sub ebx,ecx"
"	      0054fbe0    mov [ebp-20h],bl"
);
// LINE 2521:
	asm( 
"	      0054fbe3    xor eax,eax"
"	      0054fbe5    mov al,[ebp-20h]"
"	      0054fbe8    and eax,7"
"	      0054fbeb    mov ecx,[ebp-24h]"
"	      0054fbee    mov [ecx+0D0h],ax"
);
// LINE 2522:
	asm( 
"	      0054fbf5    mov eax,[ebp-24h]"
"	      0054fbf8    cmp dword ptr [eax+174h],0"
"	      0054fbff    jge near ptr 0054FC1Fh"
);
// LINE 2523:
	asm( 
"	      0054fc05    mov eax,[ebp-24h]"
"	      0054fc08    movsx eax,word ptr [eax+0D0h]"
"	      0054fc0f    sub eax,4"
"	      0054fc12    and eax,7"
"	      0054fc15    mov ecx,[ebp-24h]"
"	      0054fc18    mov [ecx+0D0h],ax"
);
// LINE 2525:
	asm( 
"	      0054fc1f    call 004F8FE2h"
);
// LINE 2526:
	asm( 
"	      0054fc24    jmp near ptr 0054FC29h"
"	      0054fc29    pop edi"
"	      0054fc2a    pop esi"
"	      0054fc2b    pop ebx"
"	      0054fc2c    leave"
"	      0054fc2d    ret"
);
}

// FUNCTION: SIMCOPTER 0x0054fc2e
void cYObject::SetCellAndLoc(struct Point3d, unsigned char, unsigned char) {
// LINE 2535:
	asm( 
"	      0054fc2e    push ebp"
"	      0054fc2f    mov ebp,esp"
"	      0054fc31    sub esp,0Ch"
"	      0054fc34    push ebx"
"	      0054fc35    push esi"
"	      0054fc36    push edi"
"	      0054fc37    mov [ebp-0Ch],ecx"
);
// LINE 2537:
	asm( 
"	      0054fc3a    mov eax,[ebp+8]"
"	      0054fc3d    add eax,20000000h"
"	      0054fc42    sar eax,16h"
"	      0054fc45    mov [ebp-8],ax"
);
// LINE 2538:
	asm( 
"	      0054fc49    mov eax,20000000h"
"	      0054fc4e    sub eax,[ebp+10h]"
"	      0054fc51    sar eax,16h"
"	      0054fc54    mov [ebp-4],ax"
);
// LINE 2549:
	asm( 
"	      0054fc58    mov eax,[ebp-4]"
"	      0054fc5b    push eax"
"	      0054fc5c    mov eax,[ebp-8]"
"	      0054fc5f    push eax"
"	      0054fc60    call 00555746h"
"	      0054fc65    add esp,8"
"	      0054fc68    mov ecx,[ebp-0Ch]"
"	      0054fc6b    mov [ecx+0ACh],eax"
);
// LINE 2551:
	asm( 
"	      0054fc71    mov eax,[ebp-0Ch]"
"	      0054fc74    add eax,48h"
"	      0054fc77    push eax"
"	      0054fc78    call 004D1FF1h"
"	      0054fc7d    add esp,4"
);
// LINE 2552:
	asm( 
"	      0054fc80    lea eax,[ebp+8]"
"	      0054fc83    mov ecx,[ebp-0Ch]"
"	      0054fc86    add ecx,3Ch"
"	      0054fc89    mov edx,[eax]"
"	      0054fc8b    mov [ecx],edx"
"	      0054fc8d    mov edx,[eax+4]"
"	      0054fc90    mov [ecx+4],edx"
"	      0054fc93    mov eax,[eax+8]"
"	      0054fc96    mov [ecx+8],eax"
);
// LINE 2553:
	asm( 
"	      0054fc99    mov eax,[ebp-0Ch]"
"	      0054fc9c    cmp dword ptr [eax+130h],0"
"	      0054fca3    je near ptr 0054FCC5h"
"	      0054fca9    push 8C085h"
"	      0054fcae    push 5BB4E8h"
"	      0054fcb3    push 9F9h"
"	      0054fcb8    push 5BB520h"
"	      0054fcbd    call 00554F30h"
"	      0054fcc2    add esp,10h"
);
// LINE 2554:
	asm( 
"	      0054fcc5    mov eax,[ebp-0Ch]"
"	      0054fcc8    mov eax,[eax+44h]"
"	      0054fccb    push eax"
"	      0054fccc    mov eax,[ebp-0Ch]"
"	      0054fccf    mov eax,[eax+40h]"
"	      0054fcd2    push eax"
"	      0054fcd3    mov eax,[ebp-0Ch]"
"	      0054fcd6    mov eax,[eax+3Ch]"
"	      0054fcd9    push eax"
"	      0054fcda    call 00551BF7h"
"	      0054fcdf    add esp,0Ch"
"	      0054fce2    add eax,30000h"
"	      0054fce7    mov ecx,[ebp-0Ch]"
"	      0054fcea    mov [ecx+40h],eax"
"	      0054fced    jmp near ptr 0054FCF2h"
);
// LINE 2555:
	asm( 
"	      0054fcf2    jmp near ptr 0054FCF7h"
"	      0054fcf7    mov eax,[ebp-0Ch]"
"	      0054fcfa    xor ecx,ecx"
"	      0054fcfc    mov cx,[eax+20h]"
"	      0054fd00    test ecx,ecx"
"	      0054fd02    je near ptr 0054FD24h"
"	      0054fd08    push 8C085h"
"	      0054fd0d    push 5BBBB8h"
"	      0054fd12    push 210h"
"	      0054fd17    push 5BBA14h"
"	      0054fd1c    call 00554F30h"
"	      0054fd21    add esp,10h"
"	      0054fd24    mov al,[ebp-8]"
"	      0054fd27    mov ecx,[ebp-0Ch]"
"	      0054fd2a    mov [ecx+88h],al"
"	      0054fd30    mov al,[ebp-4]"
"	      0054fd33    mov ecx,[ebp-0Ch]"
"	      0054fd36    mov [ecx+89h],al"
"	      0054fd3c    jmp near ptr 0054FD41h"
);
// LINE 2556:
	asm( 
"	      0054fd41    jmp near ptr 0054FD46h"
"	      0054fd46    pop edi"
"	      0054fd47    pop esi"
"	      0054fd48    pop ebx"
"	      0054fd49    leave"
"	      0054fd4a    ret 14h"
);
}

// FUNCTION: SIMCOPTER 0x0054fd4d
void cYObject::SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t) {
// LINE 2560:
	asm( 
"	      0054fd4d    push ebp"
"	      0054fd4e    mov ebp,esp"
"	      0054fd50    sub esp,50h"
"	      0054fd53    push ebx"
"	      0054fd54    push esi"
"	      0054fd55    push edi"
"	      0054fd56    mov [ebp-50h],ecx"
);
// LINE 2561:
	asm( 
"	      0054fd59    xor eax,eax"
"	      0054fd5b    mov al,[ebp+0Ch]"
"	      0054fd5e    xor ecx,ecx"
"	      0054fd60    mov cl,[ebp+8]"
"	      0054fd63    shl ecx,0Ah"
"	      0054fd66    mov eax,[ecx+eax*4+67ED30h]"
"	      0054fd6d    mov [ebp-28h],eax"
"	      0054fd70    mov eax,[ebp-28h]"
"	      0054fd73    movsx eax,word ptr [eax+2]"
"	      0054fd77    shl eax,10h"
"	      0054fd7a    add eax,[ebp+10h]"
"	      0054fd7d    mov [ebp-4Ch],eax"
"	      0054fd80    mov eax,[ebp-28h]"
"	      0054fd83    movsx eax,word ptr [eax+4]"
"	      0054fd87    shl eax,10h"
"	      0054fd8a    add eax,30000h"
"	      0054fd8f    mov [ebp-48h],eax"
"	      0054fd92    mov eax,[ebp-28h]"
"	      0054fd95    movsx eax,word ptr [eax+6]"
"	      0054fd99    shl eax,10h"
"	      0054fd9c    add eax,[ebp+14h]"
"	      0054fd9f    mov [ebp-44h],eax"
"	      0054fda2    lea eax,[ebp-4Ch]"
"	      0054fda5    lea ecx,[ebp-40h]"
"	      0054fda8    mov edx,[eax]"
"	      0054fdaa    mov [ecx],edx"
"	      0054fdac    mov edx,[eax+4]"
"	      0054fdaf    mov [ecx+4],edx"
"	      0054fdb2    mov eax,[eax+8]"
"	      0054fdb5    mov [ecx+8],eax"
"	      0054fdb8    jmp near ptr 0054FDBDh"
"	      0054fdbd    lea eax,[ebp-40h]"
"	      0054fdc0    lea ecx,[ebp-34h]"
"	      0054fdc3    mov edx,[eax]"
"	      0054fdc5    mov [ecx],edx"
"	      0054fdc7    mov edx,[eax+4]"
"	      0054fdca    mov [ecx+4],edx"
"	      0054fdcd    mov eax,[eax+8]"
"	      0054fdd0    mov [ecx+8],eax"
"	      0054fdd3    lea eax,[ebp-34h]"
"	      0054fdd6    lea ecx,[ebp-24h]"
"	      0054fdd9    mov edx,[eax]"
"	      0054fddb    mov [ecx],edx"
"	      0054fddd    mov edx,[eax+4]"
"	      0054fde0    mov [ecx+4],edx"
"	      0054fde3    mov eax,[eax+8]"
"	      0054fde6    mov [ecx+8],eax"
"	      0054fde9    jmp near ptr 0054FDEEh"
"	      0054fdee    lea eax,[ebp-24h]"
"	      0054fdf1    lea ecx,[ebp-18h]"
"	      0054fdf4    mov edx,[eax]"
"	      0054fdf6    mov [ecx],edx"
"	      0054fdf8    mov edx,[eax+4]"
"	      0054fdfb    mov [ecx+4],edx"
"	      0054fdfe    mov eax,[eax+8]"
"	      0054fe01    mov [ecx+8],eax"
"	      0054fe04    lea eax,[ebp-18h]"
"	      0054fe07    lea ecx,[ebp-0Ch]"
"	      0054fe0a    mov edx,[eax]"
"	      0054fe0c    mov [ecx],edx"
"	      0054fe0e    mov edx,[eax+4]"
"	      0054fe11    mov [ecx+4],edx"
"	      0054fe14    mov eax,[eax+8]"
"	      0054fe17    mov [ecx+8],eax"
);
// LINE 2563:
	asm( 
"	      0054fe1a    mov eax,[ebp+0Ch]"
"	      0054fe1d    push eax"
"	      0054fe1e    mov eax,[ebp+8]"
"	      0054fe21    push eax"
"	      0054fe22    mov eax,[ebp-4]"
"	      0054fe25    push eax"
"	      0054fe26    mov eax,[ebp-8]"
"	      0054fe29    push eax"
"	      0054fe2a    mov eax,[ebp-0Ch]"
"	      0054fe2d    push eax"
"	      0054fe2e    mov ecx,[ebp-50h]"
"	      0054fe31    call 0054FC2Eh"
);
// LINE 2567:
	asm( 
"	      0054fe36    jmp near ptr 0054FE3Bh"
"	      0054fe3b    pop edi"
"	      0054fe3c    pop esi"
"	      0054fe3d    pop ebx"
"	      0054fe3e    leave"
"	      0054fe3f    ret 10h"
);
}

// FUNCTION: SIMCOPTER 0x0054fe42
void cYObject::SetMissionType(enum MissionType) {
// LINE 2570:
	asm( 
"	      0054fe42    push ebp"
"	      0054fe43    mov ebp,esp"
"	      0054fe45    sub esp,8"
"	      0054fe48    push ebx"
"	      0054fe49    push esi"
"	      0054fe4a    push edi"
"	      0054fe4b    mov [ebp-4],ecx"
);
// LINE 2571:
	asm( 
"	      0054fe4e    mov eax,[ebp-4]"
"	      0054fe51    movsx eax,word ptr [eax+0D2h]"
"	      0054fe58    test eax,eax"
"	      0054fe5a    je near ptr 0054FE7Ch"
"	      0054fe60    push 8C085h"
"	      0054fe65    push 5BB544h"
"	      0054fe6a    push 0A0Bh"
"	      0054fe6f    push 5BB588h"
"	      0054fe74    call 00554F30h"
"	      0054fe79    add esp,10h"
);
// LINE 2572:
	asm( 
"	      0054fe7c    mov eax,[ebp-4]"
"	      0054fe7f    mov word ptr [eax+0E2h],1"
);
// LINE 2573:
	asm( 
"	      0054fe88    mov eax,[ebp-4]"
"	      0054fe8b    mov word ptr [eax+0DAh],0FFFEh"
);
// LINE 2574:
	asm( 
"	      0054fe94    mov eax,[ebp+8]"
"	      0054fe97    mov ecx,[ebp-4]"
"	      0054fe9a    mov [ecx+0D8h],ax"
);
// LINE 2575:
	asm( 
"	      0054fea1    mov eax,[ebp+8]"
"	      0054fea4    mov ax,[eax*2+636B98h]"
"	      0054feac    mov ecx,[ebp-4]"
"	      0054feaf    mov [ecx+10Ah],ax"
);
// LINE 2577:
	asm( 
"	      0054feb6    mov eax,[ebp-4]"
"	      0054feb9    mov word ptr [eax+0FCh],0FFFFh"
);
// LINE 2579:
	asm( 
"	      0054fec2    mov eax,[ebp+8]"
"	      0054fec5    mov [ebp-8],eax"
"	      0054fec8    jmp near ptr 0054FEF4h"
);
// LINE 2585:
	asm( 
"	      0054fecd    mov eax,[ebp-4]"
"	      0054fed0    mov word ptr [eax+0DAh],0"
);
// LINE 2586:
	asm( 
"	      0054fed9    jmp near ptr 0054FF2Fh"
);
// LINE 2589:
	asm( 
"	      0054fede    mov eax,[ebp-4]"
"	      0054fee1    mov word ptr [eax+0DAh],1"
);
// LINE 2590:
	asm( 
"	      0054feea    jmp near ptr 0054FF2Fh"
);
// LINE 2594:
	asm( 
"	      0054feef    jmp near ptr 0054FF2Fh"
"	      0054fef4    sub dword ptr [ebp-8],3"
"	      0054fef8    cmp dword ptr [ebp-8],0Ah"
"	      0054fefc    ja near ptr 0054FF2Fh"
"	      0054ff02    mov eax,[ebp-8]"
"	      0054ff05    xor ecx,ecx"
"	      0054ff07    mov cl,[eax+54FF24h]"
"	      0054ff0d    jmp dword ptr [ecx*4+54FF14h]"
"	      0054ff14    int 0FEh"
"	      0054ff16    push esp"
"	      0054ff17    add dh,bl"
"	      0054ff19    (bad)"
"	      0054ff1b    add ch,cl"
"	      0054ff1d    (bad)"
"	      0054ff1f    add [edi],ch"
"	      0054ff21    call dword ptr [eax+eax]"
"	      0054ff25    add eax,[ebx]"
"	      0054ff27    add eax,[ecx]"
"	      0054ff29    add [ebx],eax"
"	      0054ff2b    add al,[edx]"
"	      0054ff2d    add al,[edx]"
);
// LINE 2596:
	asm( 
"	      0054ff2f    cmp dword ptr [ebp+8],0"
"	      0054ff33    jne near ptr 0054FF78h"
);
// LINE 2597:
	asm( 
"	      0054ff39    mov eax,[ebp-4]"
"	      0054ff3c    mov dword ptr [eax+1Ch],0FFFFFFFFh"
);
// LINE 2598:
	asm( 
"	      0054ff43    mov eax,[ebp-4]"
"	      0054ff46    mov word ptr [eax+0ECh],0"
);
// LINE 2599:
	asm( 
"	      0054ff4f    mov eax,[ebp-4]"
"	      0054ff52    mov word ptr [eax+0F6h],0"
);
// LINE 2600:
	asm( 
"	      0054ff5b    mov eax,[ebp-4]"
"	      0054ff5e    mov word ptr [eax+0F8h],1"
);
// LINE 2601:
	asm( 
"	      0054ff67    mov eax,[ebp-4]"
"	      0054ff6a    mov word ptr [eax+0FAh],0"
);
// LINE 2603:
	asm( 
"	      0054ff73    jmp near ptr 0054FF90h"
);
// LINE 2604:
	asm( 
"	      0054ff78    mov eax,[ebp-4]"
"	      0054ff7b    mov word ptr [eax+0F8h],0"
);
// LINE 2605:
	asm( 
"	      0054ff84    mov eax,[ebp-4]"
"	      0054ff87    mov word ptr [eax+0FAh],1"
);
// LINE 2607:
	asm( 
"	      0054ff90    cmp dword ptr [ebp+8],6"
"	      0054ff94    jne near ptr 0054FFABh"
);
// LINE 2608:
	asm( 
"	      0054ff9a    mov eax,[ebp-4]"
"	      0054ff9d    mov word ptr [eax+9Ch],0Ah"
"	      0054ffa6    jmp near ptr 0054FFABh"
);
// LINE 2611:
	asm( 
"	      0054ffab    jmp near ptr 0054FFB0h"
"	      0054ffb0    pop edi"
"	      0054ffb1    pop esi"
"	      0054ffb2    pop ebx"
"	      0054ffb3    leave"
"	      0054ffb4    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0054ffb7
void cYObject::SetPersonType(enum PersonType) {
// LINE 2614:
	asm( 
"	      0054ffb7    push ebp"
"	      0054ffb8    mov ebp,esp"
"	      0054ffba    sub esp,44h"
"	      0054ffbd    push ebx"
"	      0054ffbe    push esi"
"	      0054ffbf    push edi"
"	      0054ffc0    mov [ebp-40h],ecx"
);
// LINE 2616:
	asm( 
"	      0054ffc3    mov word ptr [ebp-14h],0"
);
// LINE 2617:
	asm( 
"	      0054ffc9    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      0054ffcd    jne near ptr 00550052h"
);
// LINE 2619:
	asm( 
"	      0054ffd3    push 12h"
"	      0054ffd5    call 0055D717h"
"	      0054ffda    add esp,4"
"	      0054ffdd    movzx eax,ax"
"	      0054ffe0    mov [ebp+8],eax"
);
// LINE 2621:
	asm( 
"	      0054ffe3    cmp dword ptr [ebp+8],11h"
"	      0054ffe7    je near ptr 00550015h"
"	      0054ffed    cmp dword ptr [ebp+8],10h"
"	      0054fff1    je near ptr 00550015h"
"	      0054fff7    cmp dword ptr [ebp+8],0Eh"
"	      0054fffb    je near ptr 00550015h"
"	      00550001    cmp dword ptr [ebp+8],0Dh"
"	      00550005    je near ptr 00550015h"
"	      0055000b    cmp dword ptr [ebp+8],0Ch"
"	      0055000f    jne near ptr 00550048h"
"	      00550015    push 1Eh"
"	      00550017    call 0055D717h"
"	      0055001c    add esp,4"
"	      0055001f    movzx eax,ax"
"	      00550022    test eax,eax"
"	      00550024    je near ptr 00550048h"
"	      0055002a    mov ax,[ebp-14h]"
"	      0055002e    mov [ebp-18h],ax"
"	      00550032    inc word ptr [ebp-14h]"
"	      00550036    movsx eax,word ptr [ebp-18h]"
"	      0055003a    cmp eax,5"
"	      0055003d    jge near ptr 00550048h"
);
// LINE 2622:
	asm( 
"	      00550043    jmp near ptr 0054FFD3h"
);
// LINE 2623:
	asm( 
"	      00550048    jmp near ptr 00550052h"
);
// LINE 2624:
	asm( 
"	      0055004d    jmp near ptr 0054FFD3h"
);
// LINE 2626:
	asm( 
"	      00550052    mov eax,[ebp+8]"
"	      00550055    mov ecx,[ebp-40h]"
"	      00550058    mov [ecx+0D6h],ax"
);
// LINE 2627:
	asm( 
"	      0055005f    mov word ptr [ebp-10h],0"
"	      00550065    mov word ptr [ebp-0Ch],1Eh"
);
// LINE 2628:
	asm( 
"	      0055006b    mov eax,[ebp+8]"
"	      0055006e    mov [ebp-44h],eax"
"	      00550071    jmp near ptr 005502C0h"
);
// LINE 2630:
	asm( 
"	      00550076    mov dword ptr [ebp-8],426C6F6Eh"
);
// LINE 2631:
	asm( 
"	      0055007d    mov word ptr [ebp-4],7"
);
// LINE 2632:
	asm( 
"	      00550083    movsx eax,word ptr [ebp-0Ch]"
"	      00550087    lea eax,[eax+eax*4]"
"	      0055008a    mov [ebp-10h],ax"
);
// LINE 2633:
	asm( 
"	      0055008e    jmp near ptr 0055031Ch"
);
// LINE 2635:
	asm( 
"	      00550093    mov dword ptr [ebp-8],32626C6Fh"
);
// LINE 2636:
	asm( 
"	      0055009a    mov word ptr [ebp-4],5"
);
// LINE 2637:
	asm( 
"	      005500a0    movsx eax,word ptr [ebp-0Ch]"
"	      005500a4    lea eax,[eax+eax*4]"
"	      005500a7    neg eax"
"	      005500a9    mov [ebp-10h],ax"
);
// LINE 2638:
	asm( 
"	      005500ad    jmp near ptr 0055031Ch"
);
// LINE 2640:
	asm( 
"	      005500b2    mov dword ptr [ebp-8],576F6D61h"
);
// LINE 2641:
	asm( 
"	      005500b9    mov word ptr [ebp-4],5"
);
// LINE 2642:
	asm( 
"	      005500bf    movsx eax,word ptr [ebp-0Ch]"
"	      005500c3    shl eax,2"
"	      005500c6    mov [ebp-10h],ax"
);
// LINE 2643:
	asm( 
"	      005500ca    jmp near ptr 0055031Ch"
);
// LINE 2645:
	asm( 
"	      005500cf    mov dword ptr [ebp-8],32776F6Dh"
);
// LINE 2646:
	asm( 
"	      005500d6    mov word ptr [ebp-4],7"
);
// LINE 2647:
	asm( 
"	      005500dc    movsx eax,word ptr [ebp-0Ch]"
"	      005500e0    shl eax,2"
"	      005500e3    mov [ebp-10h],ax"
);
// LINE 2648:
	asm( 
"	      005500e7    jmp near ptr 0055031Ch"
);
// LINE 2650:
	asm( 
"	      005500ec    mov dword ptr [ebp-8],4368696Ch"
);
// LINE 2651:
	asm( 
"	      005500f3    mov word ptr [ebp-4],4"
);
// LINE 2652:
	asm( 
"	      005500f9    movsx eax,word ptr [ebp-0Ch]"
"	      005500fd    mov ecx,eax"
"	      005500ff    shl eax,3"
"	      00550102    sub eax,ecx"
"	      00550104    mov [ebp-10h],ax"
);
// LINE 2653:
	asm( 
"	      00550108    jmp near ptr 0055031Ch"
);
// LINE 2655:
	asm( 
"	      0055010d    mov dword ptr [ebp-8],356D616Eh"
);
// LINE 2656:
	asm( 
"	      00550114    mov word ptr [ebp-4],8"
);
// LINE 2657:
	asm( 
"	      0055011a    mov word ptr [ebp-10h],0"
);
// LINE 2658:
	asm( 
"	      00550120    jmp near ptr 0055031Ch"
);
// LINE 2660:
	asm( 
"	      00550125    mov dword ptr [ebp-8],6661746Dh"
);
// LINE 2661:
	asm( 
"	      0055012c    mov word ptr [ebp-4],6"
);
// LINE 2662:
	asm( 
"	      00550132    movsx eax,word ptr [ebp-0Ch]"
"	      00550136    mov ecx,eax"
"	      00550138    shl eax,3"
"	      0055013b    sub eax,ecx"
"	      0055013d    neg eax"
"	      0055013f    mov [ebp-10h],ax"
);
// LINE 2663:
	asm( 
"	      00550143    jmp near ptr 0055031Ch"
);
// LINE 2665:
	asm( 
"	      00550148    mov dword ptr [ebp-8],424C5545h"
);
// LINE 2666:
	asm( 
"	      0055014f    mov word ptr [ebp-4],6"
);
// LINE 2667:
	asm( 
"	      00550155    movsx eax,word ptr [ebp-0Ch]"
"	      00550159    add eax,eax"
"	      0055015b    neg eax"
"	      0055015d    mov [ebp-10h],ax"
);
// LINE 2668:
	asm( 
"	      00550161    jmp near ptr 0055031Ch"
);
// LINE 2670:
	asm( 
"	      00550166    mov dword ptr [ebp-8],53554954h"
);
// LINE 2671:
	asm( 
"	      0055016d    mov word ptr [ebp-4],9"
);
// LINE 2672:
	asm( 
"	      00550173    movsx eax,word ptr [ebp-0Ch]"
"	      00550177    lea eax,[eax+eax*2]"
"	      0055017a    neg eax"
"	      0055017c    mov [ebp-10h],ax"
);
// LINE 2673:
	asm( 
"	      00550180    jmp near ptr 0055031Ch"
);
// LINE 2675:
	asm( 
"	      00550185    mov dword ptr [ebp-8],53484144h"
);
// LINE 2676:
	asm( 
"	      0055018c    mov word ptr [ebp-4],6"
);
// LINE 2677:
	asm( 
"	      00550192    movsx eax,word ptr [ebp-0Ch]"
"	      00550196    lea eax,[eax+eax*2]"
"	      00550199    mov [ebp-10h],ax"
);
// LINE 2678:
	asm( 
"	      0055019d    jmp near ptr 0055031Ch"
);
// LINE 2680:
	asm( 
"	      005501a2    mov dword ptr [ebp-8],352E356Dh"
);
// LINE 2681:
	asm( 
"	      005501a9    mov word ptr [ebp-4],4"
);
// LINE 2682:
	asm( 
"	      005501af    movsx eax,word ptr [ebp-0Ch]"
"	      005501b3    mov ecx,eax"
"	      005501b5    add eax,eax"
"	      005501b7    sub eax,ecx"
"	      005501b9    neg eax"
"	      005501bb    mov [ebp-10h],ax"
);
// LINE 2683:
	asm( 
"	      005501bf    jmp near ptr 0055031Ch"
);
// LINE 2685:
	asm( 
"	      005501c4    mov dword ptr [ebp-8],32444F47h"
);
// LINE 2686:
	asm( 
"	      005501cb    mov word ptr [ebp-4],6"
);
// LINE 2687:
	asm( 
"	      005501d1    movsx eax,word ptr [ebp-0Ch]"
"	      005501d5    lea eax,[eax+eax*8]"
"	      005501d8    mov [ebp-10h],ax"
);
// LINE 2688:
	asm( 
"	      005501dc    jmp near ptr 0055031Ch"
);
// LINE 2690:
	asm( 
"	      005501e1    mov dword ptr [ebp-8],42616467h"
);
// LINE 2691:
	asm( 
"	      005501e8    mov word ptr [ebp-4],4"
);
// LINE 2692:
	asm( 
"	      005501ee    movsx eax,word ptr [ebp-0Ch]"
"	      005501f2    lea eax,[eax+eax*8]"
"	      005501f5    neg eax"
"	      005501f7    mov [ebp-10h],ax"
);
// LINE 2693:
	asm( 
"	      005501fb    jmp near ptr 0055031Ch"
);
// LINE 2695:
	asm( 
"	      00550200    mov dword ptr [ebp-8],4B6F7070h"
);
// LINE 2696:
	asm( 
"	      00550207    mov word ptr [ebp-4],1"
);
// LINE 2697:
	asm( 
"	      0055020d    movsx eax,word ptr [ebp-0Ch]"
"	      00550211    lea eax,[eax+eax*2]"
"	      00550214    neg eax"
"	      00550216    mov [ebp-10h],ax"
);
// LINE 2698:
	asm( 
"	      0055021a    jmp near ptr 0055031Ch"
);
// LINE 2700:
	asm( 
"	      0055021f    mov dword ptr [ebp-8],46697265h"
);
// LINE 2701:
	asm( 
"	      00550226    mov word ptr [ebp-4],2"
);
// LINE 2702:
	asm( 
"	      0055022c    movsx eax,word ptr [ebp-0Ch]"
"	      00550230    lea eax,[eax+eax*2]"
"	      00550233    neg eax"
"	      00550235    mov [ebp-10h],ax"
);
// LINE 2703:
	asm( 
"	      00550239    jmp near ptr 0055031Ch"
);
// LINE 2705:
	asm( 
"	      0055023e    mov dword ptr [ebp-8],4D656469h"
);
// LINE 2706:
	asm( 
"	      00550245    mov word ptr [ebp-4],3"
);
// LINE 2707:
	asm( 
"	      0055024b    movsx eax,word ptr [ebp-0Ch]"
"	      0055024f    lea eax,[eax+eax*2]"
"	      00550252    neg eax"
"	      00550254    mov [ebp-10h],ax"
);
// LINE 2708:
	asm( 
"	      00550258    jmp near ptr 0055031Ch"
);
// LINE 2710:
	asm( 
"	      0055025d    mov dword ptr [ebp-8],4E657373h"
);
// LINE 2711:
	asm( 
"	      00550264    mov word ptr [ebp-4],4"
);
// LINE 2712:
	asm( 
"	      0055026a    movsx eax,word ptr [ebp-0Ch]"
"	      0055026e    lea eax,[eax+eax*4]"
"	      00550271    add eax,eax"
"	      00550273    neg eax"
"	      00550275    mov [ebp-10h],ax"
);
// LINE 2713:
	asm( 
"	      00550279    jmp near ptr 0055031Ch"
);
// LINE 2715:
	asm( 
"	      0055027e    mov dword ptr [ebp-8],436F7777h"
);
// LINE 2716:
	asm( 
"	      00550285    mov word ptr [ebp-4],4"
);
// LINE 2717:
	asm( 
"	      0055028b    movsx eax,word ptr [ebp-0Ch]"
"	      0055028f    lea eax,[eax+eax*4]"
"	      00550292    add eax,eax"
"	      00550294    neg eax"
"	      00550296    mov [ebp-10h],ax"
);
// LINE 2718:
	asm( 
"	      0055029a    jmp near ptr 0055031Ch"
);
// LINE 2723:
	asm( 
"	      0055029f    push 8C085h"
"	      005502a4    push 5BB5ACh"
"	      005502a9    push 0AA3h"
"	      005502ae    push 5BB5C0h"
"	      005502b3    call 00554F30h"
"	      005502b8    add esp,10h"
);
// LINE 2724:
	asm( 
"	      005502bb    jmp near ptr 0055031Ch"
"	      005502c0    cmp dword ptr [ebp-44h],11h"
"	      005502c4    ja near ptr 0055029Fh"
"	      005502ca    mov eax,[ebp-44h]"
"	      005502cd    jmp dword ptr [eax*4+5502D4h]"
"	      005502d4    jbe short 005502D6h"
"	      005502d6    push ebp"
"	      005502d7    add [ebx-4DFFAB00h],dl"
"	      005502dd    add [ebp],dl"
"	      005502e0    iretd"
"	      005502e1    add [ebp],dl"
"	      005502e4    in al,dx"
"	      005502e5    add [ebp],dl"
"	      005502e8    or eax,25005501h"
"	      005502ed    add [ebp],edx"
"	      005502f0    dec eax"
"	      005502f1    add [ebp],edx"
"	      005502f4    add [ebp],dx"
"	      005502f8    test [ecx],eax"
"	      005502fa    push ebp"
"	      005502fb    add [edx-3BFFAAFFh],ah"
"	      00550301    add [ebp],edx"
"	      00550304    add dl,ds:[ebp]"
"	      00550308    pop ds"
"	      00550309    add dl,[ebp]"
"	      0055030c    add [edx],al"
"	      0055030e    push ebp"
"	      0055030f    add cl,ah"
"	      00550311    add [ebp],edx"
"	      00550314    pop ebp"
"	      00550315    add dl,[ebp]"
"	      00550318    jle short 0055031Ch"
"	      0055031a    push ebp"
"	      0055031b    (bad)"
);
// LINE 2725:
	asm( 
"	      0055031c    mov ax,[ebp-10h]"
"	      00550320    mov ecx,[ebp-40h]"
"	      00550323    mov [ecx+108h],ax"
);
// LINE 2726:
	asm( 
"	      0055032a    mov eax,ds:[5BE630h]"
"	      0055032f    mov [ebp-3Ch],eax"
"	      00550332    mov dword ptr [ebp-1Ch],0"
"	      00550339    cmp dword ptr [ebp-1Ch],0"
"	      0055033d    jl near ptr 0055034Dh"
"	      00550343    cmp dword ptr [ebp-1Ch],20h"
"	      00550347    jb near ptr 00550366h"
"	      0055034d    push 8C085h"
"	      00550352    push 5BBD7Ch"
"	      00550357    push 6Dh"
"	      00550359    push 5BBDA4h"
"	      0055035e    call 00554F30h"
"	      00550363    add esp,10h"
"	      00550366    cmp dword ptr [ebp-3Ch],0"
"	      0055036a    je near ptr 0055037Eh"
"	      00550370    mov eax,[ebp-3Ch]"
"	      00550373    add eax,4"
"	      00550376    mov [ebp-28h],eax"
"	      00550379    jmp near ptr 00550385h"
"	      0055037e    mov dword ptr [ebp-28h],0"
"	      00550385    mov eax,[ebp-28h]"
"	      00550388    mov [ebp-24h],eax"
"	      0055038b    cmp dword ptr [ebp-24h],0"
"	      0055038f    je near ptr 005503A2h"
"	      00550395    mov eax,[ebp-24h]"
"	      00550398    mov eax,[eax]"
"	      0055039a    mov [ebp-20h],eax"
"	      0055039d    jmp near ptr 005503A9h"
"	      005503a2    mov dword ptr [ebp-20h],0"
"	      005503a9    jmp near ptr 005503AEh"
"	      005503ae    jmp near ptr 005503B3h"
"	      005503b3    jmp near ptr 005503D0h"
"	      005503b8    cmp dword ptr [ebp-20h],0"
"	      005503bc    je near ptr 005503CBh"
"	      005503c2    mov eax,[ebp-20h]"
"	      005503c5    mov eax,[eax+4]"
"	      005503c8    mov [ebp-20h],eax"
"	      005503cb    jmp near ptr 005503D0h"
"	      005503d0    cmp dword ptr [ebp-20h],0"
"	      005503d4    je near ptr 005503F0h"
"	      005503da    mov eax,[ebp-20h]"
"	      005503dd    cmp dword ptr [eax],0"
"	      005503e0    je near ptr 00550484h"
"	      005503e6    jmp near ptr 00550404h"
"	      005503eb    jmp near ptr 005503FAh"
"	      005503f0    jmp near ptr 00550484h"
"	      005503f5    jmp near ptr 00550404h"
"	      005503fa    cmp dword ptr [ebp-30h],0"
"	      005503fe    je near ptr 00550484h"
"	      00550404    cmp dword ptr [ebp-20h],0"
"	      00550408    je near ptr 00550420h"
"	      0055040e    mov eax,[ebp-20h]"
"	      00550411    mov eax,[eax]"
"	      00550413    mov [ebp-2Ch],eax"
"	      00550416    jmp near ptr 0055042Ch"
"	      0055041b    jmp near ptr 0055042Ch"
"	      00550420    mov dword ptr [ebp-2Ch],0"
"	      00550427    jmp near ptr 0055042Ch"
"	      0055042c    jmp near ptr 00550431h"
"	      00550431    mov eax,[ebp-2Ch]"
"	      00550434    mov eax,[eax+1Ch]"
"	      00550437    mov cl,[ebp-1Ch]"
"	      0055043a    shr eax,cl"
"	      0055043c    mov edx,[ebp-8]"
"	      0055043f    mov cl,[ebp-1Ch]"
"	      00550442    shr edx,cl"
"	      00550444    cmp eax,edx"
"	      00550446    jne near ptr 0055047Fh"
"	      0055044c    cmp dword ptr [ebp-20h],0"
"	      00550450    je near ptr 00550468h"
"	      00550456    mov eax,[ebp-20h]"
"	      00550459    mov eax,[eax]"
"	      0055045b    mov [ebp-38h],eax"
"	      0055045e    jmp near ptr 0055047Ah"
"	      00550463    jmp near ptr 00550474h"
"	      00550468    mov dword ptr [ebp-38h],0"
"	      0055046f    jmp near ptr 0055047Ah"
"	      00550474    mov eax,[ebp-34h]"
"	      00550477    mov [ebp-38h],eax"
"	      0055047a    jmp near ptr 00550490h"
"	      0055047f    jmp near ptr 005503B8h"
"	      00550484    mov dword ptr [ebp-38h],0"
"	      0055048b    jmp near ptr 00550490h"
"	      00550490    mov eax,[ebp-38h]"
"	      00550493    mov ecx,[ebp-40h]"
"	      00550496    mov [ecx+90h],eax"
"	      0055049c    mov eax,[ebp-40h]"
"	      0055049f    cmp dword ptr [eax+90h],0"
"	      005504a6    jne near ptr 005504C8h"
"	      005504ac    push 8C085h"
"	      005504b1    push 5BBD68h"
"	      005504b6    push 27Ah"
"	      005504bb    push 5BBA14h"
"	      005504c0    call 00554F30h"
"	      005504c5    add esp,10h"
"	      005504c8    jmp near ptr 005504CDh"
);
// LINE 2727:
	asm( 
"	      005504cd    mov eax,[ebp-40h]"
"	      005504d0    cmp dword ptr [eax+90h],0"
"	      005504d7    jne near ptr 005504F9h"
"	      005504dd    push 8C085h"
"	      005504e2    push 5BB5E4h"
"	      005504e7    push 0AA7h"
"	      005504ec    push 5BB5F8h"
"	      005504f1    call 00554F30h"
"	      005504f6    add esp,10h"
);
// LINE 2729:
	asm( 
"	      005504f9    mov eax,[ebp-40h]"
"	      005504fc    movsx eax,word ptr [eax+9Ch]"
"	      00550503    cmp eax,0FFFFFFFFh"
"	      00550506    jne near ptr 00550534h"
"	      0055050c    mov eax,[ebp-40h]"
"	      0055050f    movsx eax,word ptr [eax+0BCh]"
"	      00550516    cmp eax,7D00h"
"	      0055051b    je near ptr 00550534h"
);
// LINE 2730:
	asm( 
"	      00550521    mov ax,[ebp-4]"
"	      00550525    mov ecx,[ebp-40h]"
"	      00550528    mov [ecx+9Ch],ax"
"	      0055052f    jmp near ptr 00550534h"
);
// LINE 2731:
	asm( 
"	      00550534    mov eax,[ebp-40h]"
"	      00550537    movsx eax,word ptr [eax+0F0h]"
"	      0055053e    cmp eax,0FFFFFFFFh"
"	      00550541    jne near ptr 0055055Bh"
);
// LINE 2732:
	asm( 
"	      00550547    push 0Eh"
"	      00550549    call 0055D717h"
"	      0055054e    add esp,4"
"	      00550551    mov ecx,[ebp-40h]"
"	      00550554    mov [ecx+0F0h],ax"
);
// LINE 2735:
	asm( 
"	      0055055b    jmp near ptr 00550560h"
"	      00550560    pop edi"
"	      00550561    pop esi"
"	      00550562    pop ebx"
"	      00550563    leave"
"	      00550564    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00550567
void cYObject::DestroyObjects() {
// LINE 2759:
	asm( 
"	      00550567    push ebp"
"	      00550568    mov ebp,esp"
"	      0055056a    sub esp,1Ch"
"	      0055056d    push ebx"
"	      0055056e    push esi"
"	      0055056f    push edi"
);
// LINE 2760:
	asm( 
"	      00550570    xor eax,eax"
"	      00550572    mov ax,ds:[5B8668h]"
"	      00550578    test eax,eax"
"	      0055057a    je near ptr 00550691h"
);
// LINE 2763:
	asm( 
"	      00550580    mov word ptr [ebp-4],0"
"	      00550586    jmp near ptr 0055058Fh"
"	      0055058b    inc word ptr [ebp-4]"
"	      0055058f    movsx eax,word ptr [ebp-4]"
"	      00550593    cmp eax,64h"
"	      00550596    jge near ptr 005505E3h"
);
// LINE 2764:
	asm( 
"	      0055059c    movsx eax,word ptr [ebp-4]"
"	      005505a0    cmp dword ptr [eax*4+636D40h],0"
"	      005505a8    je near ptr 005505DEh"
"	      005505ae    movsx eax,word ptr [ebp-4]"
"	      005505b2    mov eax,[eax*4+636D40h]"
"	      005505b9    mov [ebp-0Ch],eax"
"	      005505bc    mov eax,[ebp-0Ch]"
"	      005505bf    mov [ebp-8],eax"
"	      005505c2    cmp dword ptr [ebp-8],0"
"	      005505c6    je near ptr 005505DEh"
"	      005505cc    push 1"
"	      005505ce    mov eax,[ebp-8]"
"	      005505d1    mov eax,[eax]"
"	      005505d3    mov ecx,[ebp-8]"
"	      005505d6    call dword ptr [eax+8]"
"	      005505d9    jmp near ptr 005505DEh"
);
// LINE 2765:
	asm( 
"	      005505de    jmp near ptr 0055058Bh"
"	      005505e3    mov word ptr ds:[5B8668h],0"
);
// LINE 2767:
	asm( 
"	      005505ec    mov ecx,636BB8h"
"	      005505f1    call 0055C7DDh"
"	      005505f6    movzx eax,ax"
"	      005505f9    test eax,eax"
"	      005505fb    je near ptr 0055060Bh"
"	      00550601    mov ecx,636BB8h"
"	      00550606    call 00552F5Fh"
);
// LINE 2770:
	asm( 
"	      0055060b    cmp dword ptr ds:[635250h],0"
"	      00550612    je near ptr 0055064Eh"
"	      00550618    mov eax,ds:[635250h]"
"	      0055061d    mov [ebp-14h],eax"
"	      00550620    mov eax,[ebp-14h]"
"	      00550623    mov [ebp-10h],eax"
"	      00550626    cmp dword ptr [ebp-10h],0"
"	      0055062a    je near ptr 0055064Eh"
"	      00550630    mov ecx,[ebp-10h]"
"	      00550633    call 00560B1Eh"
"	      00550638    mov eax,[ebp-10h]"
"	      0055063b    push eax"
"	      0055063c    call 0056A740h"
"	      00550641    add esp,4"
"	      00550644    jmp near ptr 00550649h"
"	      00550649    jmp near ptr 0055064Eh"
);
// LINE 2771:
	asm( 
"	      0055064e    cmp dword ptr ds:[636B8Ch],0"
"	      00550655    je near ptr 00550691h"
"	      0055065b    mov eax,ds:[636B8Ch]"
"	      00550660    mov [ebp-1Ch],eax"
"	      00550663    mov eax,[ebp-1Ch]"
"	      00550666    mov [ebp-18h],eax"
"	      00550669    cmp dword ptr [ebp-18h],0"
"	      0055066d    je near ptr 00550691h"
"	      00550673    mov ecx,[ebp-18h]"
"	      00550676    call 0056032Eh"
"	      0055067b    mov eax,[ebp-18h]"
"	      0055067e    push eax"
"	      0055067f    call 0056A740h"
"	      00550684    add esp,4"
"	      00550687    jmp near ptr 0055068Ch"
"	      0055068c    jmp near ptr 00550691h"
);
// LINE 2774:
	asm( 
"	      00550691    jmp near ptr 00550696h"
"	      00550696    pop edi"
"	      00550697    pop esi"
"	      00550698    pop ebx"
"	      00550699    leave"
"	      0055069a    ret"
);
}

// FUNCTION: SIMCOPTER 0x0055069b
void cYObject::Link() {
// LINE 2779:
	asm( 
"	      0055069b    push ebp"
"	      0055069c    mov ebp,esp"
"	      0055069e    sub esp,0Ch"
"	      005506a1    push ebx"
"	      005506a2    push esi"
"	      005506a3    push edi"
"	      005506a4    mov [ebp-0Ch],ecx"
);
// LINE 2780:
	asm( 
"	      005506a7    jmp near ptr 005506ACh"
"	      005506ac    mov eax,[ebp-0Ch]"
"	      005506af    xor ecx,ecx"
"	      005506b1    mov cx,[eax+20h]"
"	      005506b5    test ecx,ecx"
"	      005506b7    je near ptr 005506D9h"
"	      005506bd    push 8C085h"
"	      005506c2    push 5BB61Ch"
"	      005506c7    push 0ADCh"
"	      005506cc    push 5BB638h"
"	      005506d1    call 00554F30h"
"	      005506d6    add esp,10h"
);
// LINE 2782:
	asm( 
"	      005506d9    mov eax,[ebp-0Ch]"
"	      005506dc    xor ecx,ecx"
"	      005506de    mov cl,[eax+88h]"
"	      005506e4    cmp ecx,0FFFFFFFFh"
"	      005506e7    jne near ptr 00550722h"
"	      005506ed    mov eax,[ebp-0Ch]"
"	      005506f0    xor ecx,ecx"
"	      005506f2    mov cl,[eax+89h]"
"	      005506f8    cmp ecx,0FFFFFFFFh"
"	      005506fb    je near ptr 0055071Dh"
"	      00550701    push 8C085h"
"	      00550706    push 5BBAD4h"
"	      0055070b    push 22Eh"
"	      00550710    push 5BBA14h"
"	      00550715    call 00554F30h"
"	      0055071a    add esp,10h"
"	      0055071d    jmp near ptr 00550752h"
"	      00550722    mov eax,[ebp-0Ch]"
"	      00550725    xor ecx,ecx"
"	      00550727    mov cl,[eax+89h]"
"	      0055072d    cmp ecx,0FFFFFFFFh"
"	      00550730    jne near ptr 00550752h"
"	      00550736    push 8C085h"
"	      0055073b    push 5BBABCh"
"	      00550740    push 231h"
"	      00550745    push 5BBA14h"
"	      0055074a    call 00554F30h"
"	      0055074f    add esp,10h"
"	      00550752    mov eax,[ebp-0Ch]"
"	      00550755    xor ecx,ecx"
"	      00550757    mov cl,[eax+88h]"
"	      0055075d    cmp ecx,0FFFFFFFFh"
"	      00550760    je near ptr 00550770h"
"	      00550766    jmp near ptr 0055079Eh"
"	      0055076b    jmp near ptr 00550770h"
"	      00550770    jmp near ptr 00550782h"
"	      00550775    test dword ptr [ebp-8],0FFFFh"
"	      0055077c    jne near ptr 0055079Eh"
"	      00550782    push 8C085h"
"	      00550787    push 5BB65Ch"
"	      0055078c    push 0ADEh"
"	      00550791    push 5BB67Ch"
"	      00550796    call 00554F30h"
"	      0055079b    add esp,10h"
);
// LINE 2783:
	asm( 
"	      0055079e    mov eax,[ebp-0Ch]"
"	      005507a1    xor ecx,ecx"
"	      005507a3    mov cl,[eax+88h]"
"	      005507a9    shl ecx,0Ah"
"	      005507ac    mov eax,[ebp-0Ch]"
"	      005507af    xor edx,edx"
"	      005507b1    mov dl,[eax+89h]"
"	      005507b7    mov eax,[ecx+edx*4+67ED30h]"
"	      005507be    mov [ebp-4],eax"
);
// LINE 2787:
	asm( 
"	      005507c1    mov eax,[ebp-4]"
"	      005507c4    mov eax,[eax+10h]"
"	      005507c7    mov ecx,[ebp-0Ch]"
"	      005507ca    mov [ecx+24h],eax"
);
// LINE 2788:
	asm( 
"	      005507cd    mov eax,[ebp-0Ch]"
"	      005507d0    add eax,24h"
"	      005507d3    mov ecx,[ebp-4]"
"	      005507d6    mov [ecx+10h],eax"
);
// LINE 2790:
	asm( 
"	      005507d9    mov eax,[ebp-0Ch]"
"	      005507dc    mov word ptr [eax+20h],1"
);
// LINE 2791:
	asm( 
"	      005507e2    jmp near ptr 005507E7h"
"	      005507e7    pop edi"
"	      005507e8    pop esi"
"	      005507e9    pop ebx"
"	      005507ea    leave"
"	      005507eb    ret"
);
}

// FUNCTION: SIMCOPTER 0x005507ec
void cYObject::Unlink() {
// LINE 2794:
	asm( 
"	      005507ec    push ebp"
"	      005507ed    mov ebp,esp"
"	      005507ef    sub esp,0Ch"
"	      005507f2    push ebx"
"	      005507f3    push esi"
"	      005507f4    push edi"
"	      005507f5    mov [ebp-0Ch],ecx"
);
// LINE 2798:
	asm( 
"	      005507f8    jmp near ptr 005507FDh"
"	      005507fd    mov eax,[ebp-0Ch]"
"	      00550800    xor ecx,ecx"
"	      00550802    mov cx,[eax+20h]"
"	      00550806    test ecx,ecx"
"	      00550808    jne near ptr 0055082Ah"
"	      0055080e    push 8C085h"
"	      00550813    push 5BB6A0h"
"	      00550818    push 0AEEh"
"	      0055081d    push 5BB6BCh"
"	      00550822    call 00554F30h"
"	      00550827    add esp,10h"
);
// LINE 2799:
	asm( 
"	      0055082a    mov eax,[ebp-0Ch]"
"	      0055082d    xor ecx,ecx"
"	      0055082f    mov cl,[eax+89h]"
"	      00550835    mov eax,[ebp-0Ch]"
"	      00550838    xor edx,edx"
"	      0055083a    mov dl,[eax+88h]"
"	      00550840    shl edx,0Ah"
"	      00550843    mov eax,[edx+ecx*4+67ED30h]"
"	      0055084a    mov [ebp-4],eax"
);
// LINE 2800:
	asm( 
"	      0055084d    mov eax,[ebp-4]"
"	      00550850    add eax,10h"
"	      00550853    mov [ebp-8],eax"
);
// LINE 2801:
	asm( 
"	      00550856    mov eax,[ebp-8]"
"	      00550859    cmp dword ptr [eax],0"
"	      0055085c    je near ptr 00550890h"
);
// LINE 2803:
	asm( 
"	      00550862    mov eax,[ebp-0Ch]"
"	      00550865    add eax,24h"
"	      00550868    mov ecx,[ebp-8]"
"	      0055086b    cmp eax,[ecx]"
"	      0055086d    jne near ptr 00550883h"
);
// LINE 2805:
	asm( 
"	      00550873    mov eax,[ebp-0Ch]"
"	      00550876    mov eax,[eax+24h]"
"	      00550879    mov ecx,[ebp-8]"
"	      0055087c    mov [ecx],eax"
);
// LINE 2806:
	asm( 
"	      0055087e    jmp near ptr 00550890h"
);
// LINE 2808:
	asm( 
"	      00550883    mov eax,[ebp-8]"
"	      00550886    mov eax,[eax]"
"	      00550888    mov [ebp-8],eax"
);
// LINE 2809:
	asm( 
"	      0055088b    jmp near ptr 00550856h"
);
// LINE 2812:
	asm( 
"	      00550890    mov eax,[ebp-0Ch]"
"	      00550893    mov word ptr [eax+20h],0"
);
// LINE 2813:
	asm( 
"	      00550899    jmp near ptr 0055089Eh"
"	      0055089e    pop edi"
"	      0055089f    pop esi"
"	      005508a0    pop ebx"
"	      005508a1    leave"
"	      005508a2    ret"
);
}

// FUNCTION: SIMCOPTER 0x005508a3
class cAvatar* cAvatar::MakeAvatar() {
// LINE 2817:
	asm( 
"	      005508a3    push ebp"
"	      005508a4    mov ebp,esp"
"	      005508a6    push 0FFFFFFFFh"
"	      005508a8    push 5509B2h"
"	      005508ad    mov eax,fs:[0]"
"	      005508b3    push eax"
"	      005508b4    mov fs:[0],esp"
"	      005508bb    sub esp,28h"
"	      005508be    push ebx"
"	      005508bf    push esi"
"	      005508c0    push edi"
);
// LINE 2818:
	asm( 
"	      005508c1    mov dword ptr [ebp-18h],0"
"	      005508c8    mov dword ptr [ebp-14h],0"
"	      005508cf    mov dword ptr [ebp-10h],0"
);
// LINE 2819:
	asm( 
"	      005508d6    push 180h"
"	      005508db    call 0056A600h"
"	      005508e0    add esp,4"
"	      005508e3    mov [ebp-20h],eax"
"	      005508e6    mov dword ptr [ebp-4],0"
"	      005508ed    cmp dword ptr [ebp-20h],0"
"	      005508f1    je near ptr 0055097Eh"
"	      005508f7    lea eax,[ebp-18h]"
"	      005508fa    lea ecx,[ebp-30h]"
"	      005508fd    mov edx,[eax]"
"	      005508ff    mov [ecx],edx"
"	      00550901    mov edx,[eax+4]"
"	      00550904    mov [ecx+4],edx"
"	      00550907    mov eax,[eax+8]"
"	      0055090a    mov [ecx+8],eax"
"	      0055090d    mov eax,[ebp-20h]"
"	      00550910    mov [ebp-34h],eax"
"	      00550913    push 7D00h"
"	      00550918    mov eax,[ebp-28h]"
"	      0055091b    push eax"
"	      0055091c    mov eax,[ebp-2Ch]"
"	      0055091f    push eax"
"	      00550920    mov eax,[ebp-30h]"
"	      00550923    push eax"
"	      00550924    mov eax,ds:[636B8Ch]"
"	      00550929    push eax"
"	      0055092a    push 0"
"	      0055092c    mov ecx,[ebp-34h]"
"	      0055092f    call 00550D4Dh"
"	      00550934    mov byte ptr [ebp-4],1"
"	      00550938    mov eax,[ebp-34h]"
"	      0055093b    mov dword ptr [eax],5935A8h"
"	      00550941    mov eax,[ebp-34h]"
"	      00550944    mov dword ptr [eax+14h],593590h"
"	      0055094b    mov eax,[ebp-34h]"
"	      0055094e    mov word ptr [eax+9Ch],0"
"	      00550957    jmp near ptr 0055095Ch"
"	      0055095c    jmp near ptr 00550961h"
"	      00550961    mov byte ptr [ebp-4],0"
"	      00550965    mov eax,[ebp-34h]"
"	      00550968    mov [ebp-24h],eax"
"	      0055096b    jmp near ptr 00550979h"
"	      00550970    mov ecx,[ebp-34h]"
"	      00550973    call 005518ADh"
"	      00550978    ret"
"	      00550979    jmp near ptr 00550985h"
"	      0055097e    mov dword ptr [ebp-24h],0"
"	      00550985    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      0055098c    mov eax,[ebp-24h]"
"	      0055098f    mov [ebp-1Ch],eax"
);
// LINE 2820:
	asm( 
"	      00550992    mov eax,[ebp-1Ch]"
"	      00550995    mov eax,[eax]"
"	      00550997    mov ecx,[ebp-1Ch]"
"	      0055099a    call dword ptr [eax+18h]"
);
// LINE 2821:
	asm( 
"	      0055099d    mov eax,[ebp-1Ch]"
"	      005509a0    jmp near ptr 005509BCh"
);
// LINE 2822:
	asm( 
"	      005509a5    mov eax,[ebp-20h]"
"	      005509a8    push eax"
"	      005509a9    call 0056A740h"
"	      005509ae    add esp,4"
"	      005509b1    ret"
"	      005509b2    mov eax,595E00h"
"	      005509b7    jmp near ptr 0056F590h"
"	      005509bc    mov ecx,[ebp-0Ch]"
"	      005509bf    mov fs:[0],ecx"
"	      005509c6    pop edi"
"	      005509c7    pop esi"
"	      005509c8    pop ebx"
"	      005509c9    leave"
"	      005509ca    ret"
);
}

// FUNCTION: SIMCOPTER 0x005509cb
short cYObject::MakeNewObject(short, struct Point3d, class Behavior*) {
// LINE 2825:
	asm( 
"	      005509cb    push ebp"
"	      005509cc    mov ebp,esp"
"	      005509ce    push 0FFFFFFFFh"
"	      005509d0    push 550B17h"
"	      005509d5    mov eax,fs:[0]"
"	      005509db    push eax"
"	      005509dc    mov fs:[0],esp"
"	      005509e3    sub esp,10h"
"	      005509e6    push ebx"
"	      005509e7    push esi"
"	      005509e8    push edi"
);
// LINE 2826:
	asm( 
"	      005509e9    xor eax,eax"
"	      005509eb    mov ax,ds:[5B8668h]"
"	      005509f1    test eax,eax"
"	      005509f3    jne near ptr 00550A15h"
"	      005509f9    push 8C085h"
"	      005509fe    push 5BB6E0h"
"	      00550a03    push 0B0Ah"
"	      00550a08    push 5BB6F8h"
"	      00550a0d    call 00554F30h"
"	      00550a12    add esp,10h"
);
// LINE 2828:
	asm( 
"	      00550a15    mov word ptr [ebp-10h],0"
"	      00550a1b    jmp near ptr 00550A24h"
"	      00550a20    inc word ptr [ebp-10h]"
"	      00550a24    movsx eax,word ptr [ebp-10h]"
"	      00550a28    cmp eax,64h"
"	      00550a2b    jge near ptr 00550A57h"
);
// LINE 2829:
	asm( 
"	      00550a31    movsx eax,word ptr [ebp-10h]"
"	      00550a35    cmp dword ptr [eax*4+636D40h],0"
"	      00550a3d    je near ptr 00550A4Dh"
"	      00550a43    jmp near ptr 00550A20h"
);
// LINE 2830:
	asm( 
"	      00550a48    jmp near ptr 00550A52h"
"	      00550a4d    jmp near ptr 00550A57h"
);
// LINE 2831:
	asm( 
"	      00550a52    jmp near ptr 00550A20h"
);
// LINE 2833:
	asm( 
"	      00550a57    movsx eax,word ptr [ebp-10h]"
"	      00550a5b    cmp eax,64h"
"	      00550a5e    je near ptr 00550AE5h"
);
// LINE 2834:
	asm( 
"	      00550a64    movsx eax,word ptr [ebp-10h]"
"	      00550a68    lea eax,[eax*4+636D40h]"
"	      00550a6f    mov [ebp-14h],eax"
);
// LINE 2835:
	asm( 
"	      00550a72    push 168h"
"	      00550a77    call 0056A600h"
"	      00550a7c    add esp,4"
"	      00550a7f    mov [ebp-18h],eax"
"	      00550a82    mov dword ptr [ebp-4],0"
"	      00550a89    cmp dword ptr [ebp-18h],0"
"	      00550a8d    je near ptr 00550ABBh"
"	      00550a93    mov eax,[ebp-10h]"
"	      00550a96    push eax"
"	      00550a97    mov eax,[ebp+14h]"
"	      00550a9a    push eax"
"	      00550a9b    mov eax,[ebp+10h]"
"	      00550a9e    push eax"
"	      00550a9f    mov eax,[ebp+0Ch]"
"	      00550aa2    push eax"
"	      00550aa3    mov eax,[ebp+18h]"
"	      00550aa6    push eax"
"	      00550aa7    mov eax,[ebp+8]"
"	      00550aaa    push eax"
"	      00550aab    mov ecx,[ebp-18h]"
"	      00550aae    call 00550D4Dh"
"	      00550ab3    mov [ebp-1Ch],eax"
"	      00550ab6    jmp near ptr 00550AC2h"
"	      00550abb    mov dword ptr [ebp-1Ch],0"
"	      00550ac2    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00550ac9    mov eax,[ebp-1Ch]"
"	      00550acc    mov ecx,[ebp-14h]"
"	      00550acf    mov [ecx],eax"
);
// LINE 2836:
	asm( 
"	      00550ad1    mov eax,[ebp-14h]"
"	      00550ad4    mov ecx,[ebp-14h]"
"	      00550ad7    mov ecx,[ecx]"
"	      00550ad9    mov edx,[ecx]"
"	      00550adb    mov ecx,[eax]"
"	      00550add    call dword ptr [edx+18h]"
);
// LINE 2837:
	asm( 
"	      00550ae0    jmp near ptr 00550B01h"
);
// LINE 2838:
	asm( 
"	      00550ae5    push 8C085h"
"	      00550aea    push 5BB71Ch"
"	      00550aef    push 0B16h"
"	      00550af4    push 5BB738h"
"	      00550af9    call 00554F30h"
"	      00550afe    add esp,10h"
);
// LINE 2840:
	asm( 
"	      00550b01    mov ax,[ebp-10h]"
"	      00550b05    jmp near ptr 00550B21h"
);
// LINE 2841:
	asm( 
"	      00550b0a    mov eax,[ebp-18h]"
"	      00550b0d    push eax"
"	      00550b0e    call 0056A740h"
"	      00550b13    add esp,4"
"	      00550b16    ret"
"	      00550b17    mov eax,595E30h"
"	      00550b1c    jmp near ptr 0056F590h"
"	      00550b21    mov ecx,[ebp-0Ch]"
"	      00550b24    mov fs:[0],ecx"
"	      00550b2b    pop edi"
"	      00550b2c    pop esi"
"	      00550b2d    pop ebx"
"	      00550b2e    leave"
"	      00550b2f    ret"
);
}

// FUNCTION: SIMCOPTER 0x00550b30
void cYObject::InitForEngine(short) {
// LINE 2844:
	asm( 
"	      00550b30    push ebp"
"	      00550b31    mov ebp,esp"
"	      00550b33    sub esp,28h"
"	      00550b36    push ebx"
"	      00550b37    push esi"
"	      00550b38    push edi"
"	      00550b39    mov [ebp-28h],ecx"
);
// LINE 2845:
	asm( 
"	      00550b3c    push 16h"
"	      00550b3e    push 1"
"	      00550b40    call 004D4B80h"
"	      00550b45    add esp,8"
"	      00550b48    mov ecx,[ebp-28h]"
"	      00550b4b    mov [ecx+2Ch],eax"
);
// LINE 2846:
	asm( 
"	      00550b4e    mov eax,[ebp-28h]"
"	      00550b51    cmp dword ptr [eax+2Ch],0"
"	      00550b55    jne near ptr 00550B77h"
"	      00550b5b    push 8C085h"
"	      00550b60    push 5BB75Ch"
"	      00550b65    push 0B1Eh"
"	      00550b6a    push 5BB770h"
"	      00550b6f    call 00554F30h"
"	      00550b74    add esp,10h"
);
// LINE 2848:
	asm( 
"	      00550b77    push 2"
"	      00550b79    mov eax,[ebp-28h]"
"	      00550b7c    mov eax,[eax+2Ch]"
"	      00550b7f    push eax"
"	      00550b80    call 004D6970h"
"	      00550b85    add esp,8"
);
// LINE 2849:
	asm( 
"	      00550b88    push 0"
"	      00550b8a    mov eax,[ebp-28h]"
"	      00550b8d    mov eax,[eax+2Ch]"
"	      00550b90    push eax"
"	      00550b91    call 004D6970h"
"	      00550b96    add esp,8"
);
// LINE 2850:
	asm( 
"	      00550b99    mov eax,ds:[5B4780h]"
"	      00550b9e    push eax"
"	      00550b9f    mov eax,[ebp-28h]"
"	      00550ba2    mov eax,[eax+2Ch]"
"	      00550ba5    push eax"
"	      00550ba6    call 004D84DBh"
"	      00550bab    add esp,8"
);
// LINE 2853:
	asm( 
"	      00550bae    mov eax,[ebp-28h]"
"	      00550bb1    mov eax,[eax+2Ch]"
"	      00550bb4    push eax"
"	      00550bb5    call 004D85CDh"
"	      00550bba    add esp,4"
"	      00550bbd    mov [ebp-4],eax"
);
// LINE 2855:
	asm( 
"	      00550bc0    lea eax,[ebp-24h]"
"	      00550bc3    push eax"
"	      00550bc4    mov eax,[ebp-4]"
"	      00550bc7    push eax"
"	      00550bc8    call 004D6905h"
"	      00550bcd    add esp,8"
);
// LINE 2856:
	asm( 
"	      00550bd0    cmp dword ptr [ebp-18h],16h"
"	      00550bd4    jne near ptr 00550BF8h"
);
// LINE 2857:
	asm( 
"	      00550bda    movsx eax,word ptr [ebp+8]"
"	      00550bde    mov [ebp-14h],eax"
);
// LINE 2858:
	asm( 
"	      00550be1    and dword ptr [ebp-1Ch],7FFFFFFFh"
);
// LINE 2859:
	asm( 
"	      00550be8    lea eax,[ebp-24h]"
"	      00550beb    push eax"
"	      00550bec    mov eax,[ebp-4]"
"	      00550bef    push eax"
"	      00550bf0    call 004D6941h"
"	      00550bf5    add esp,8"
);
// LINE 2862:
	asm( 
"	      00550bf8    mov eax,[ebp-28h]"
"	      00550bfb    mov word ptr [eax+30h],8"
);
// LINE 2863:
	asm( 
"	      00550c01    mov eax,[ebp-28h]"
"	      00550c04    mov dword ptr [eax+34h],50000h"
);
// LINE 2864:
	asm( 
"	      00550c0b    mov eax,[ebp-28h]"
"	      00550c0e    mov dword ptr [eax+38h],6"
);
// LINE 2866:
	asm( 
"	      00550c15    mov eax,[ebp-28h]"
"	      00550c18    add eax,48h"
"	      00550c1b    push eax"
"	      00550c1c    call 004D1FF1h"
"	      00550c21    add esp,4"
);
// LINE 2869:
	asm( 
"	      00550c24    jmp near ptr 00550C29h"
"	      00550c29    pop edi"
"	      00550c2a    pop esi"
"	      00550c2b    pop ebx"
"	      00550c2c    leave"
"	      00550c2d    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x00550c30
void cYObject::KillObject(short) {
// LINE 2872:
	asm( 
"	      00550c30    push ebp"
"	      00550c31    mov ebp,esp"
"	      00550c33    sub esp,10h"
"	      00550c36    push ebx"
"	      00550c37    push esi"
"	      00550c38    push edi"
);
// LINE 2873:
	asm( 
"	      00550c39    movsx eax,word ptr [ebp+8]"
"	      00550c3d    cmp eax,7D00h"
"	      00550c42    jne near ptr 00550C55h"
"	      00550c48    mov eax,ds:[5B8680h]"
"	      00550c4d    mov [ebp-4],eax"
"	      00550c50    jmp near ptr 00550CD1h"
"	      00550c55    movsx eax,word ptr [ebp+8]"
"	      00550c59    test eax,eax"
"	      00550c5b    jl near ptr 00550C6Eh"
"	      00550c61    movsx eax,word ptr [ebp+8]"
"	      00550c65    cmp eax,64h"
"	      00550c68    jl near ptr 00550C8Ah"
"	      00550c6e    push 8C085h"
"	      00550c73    push 5BB9F4h"
"	      00550c78    push 204h"
"	      00550c7d    push 5BBA14h"
"	      00550c82    call 00554F30h"
"	      00550c87    add esp,10h"
"	      00550c8a    movsx eax,word ptr [ebp+8]"
"	      00550c8e    cmp dword ptr [eax*4+636D40h],0"
"	      00550c96    jne near ptr 00550CB8h"
"	      00550c9c    push 8C085h"
"	      00550ca1    push 5BB9D0h"
"	      00550ca6    push 205h"
"	      00550cab    push 5BBA14h"
"	      00550cb0    call 00554F30h"
"	      00550cb5    add esp,10h"
"	      00550cb8    movsx eax,word ptr [ebp+8]"
"	      00550cbc    mov eax,[eax*4+636D40h]"
"	      00550cc3    mov [ebp-4],eax"
"	      00550cc6    jmp near ptr 00550CD1h"
"	      00550ccb    mov eax,[ebp-10h]"
"	      00550cce    mov [ebp-4],eax"
);
// LINE 2874:
	asm( 
"	      00550cd1    cmp dword ptr [ebp-4],0"
"	      00550cd5    jne near ptr 00550CF7h"
"	      00550cdb    push 8C085h"
"	      00550ce0    push 5BB794h"
"	      00550ce5    push 0B3Ah"
"	      00550cea    push 5BB7B4h"
"	      00550cef    call 00554F30h"
"	      00550cf4    add esp,10h"
);
// LINE 2875:
	asm( 
"	      00550cf7    cmp dword ptr [ebp-4],0"
"	      00550cfb    jne near ptr 00550D06h"
"	      00550d01    jmp near ptr 00550D48h"
);
// LINE 2877:
	asm( 
"	      00550d06    mov eax,[ebp-4]"
"	      00550d09    movsx eax,word ptr [eax+0BCh]"
"	      00550d10    mov dword ptr [eax*4+636D40h],0"
);
// LINE 2879:
	asm( 
"	      00550d1b    mov eax,[ebp-4]"
"	      00550d1e    mov [ebp-0Ch],eax"
"	      00550d21    mov eax,[ebp-0Ch]"
"	      00550d24    mov [ebp-8],eax"
"	      00550d27    cmp dword ptr [ebp-8],0"
"	      00550d2b    je near ptr 00550D43h"
"	      00550d31    push 1"
"	      00550d33    mov eax,[ebp-8]"
"	      00550d36    mov eax,[eax]"
"	      00550d38    mov ecx,[ebp-8]"
"	      00550d3b    call dword ptr [eax+8]"
"	      00550d3e    jmp near ptr 00550D43h"
);
// LINE 2880:
	asm( 
"	      00550d43    jmp near ptr 00550D48h"
"	      00550d48    pop edi"
"	      00550d49    pop esi"
"	      00550d4a    pop ebx"
"	      00550d4b    leave"
"	      00550d4c    ret"
);
}

// FUNCTION: SIMCOPTER 0x00550d4d
void cYObject::cYObject(short, class Behavior*, struct Point3d, short) {
// LINE 2885:
	asm( 
"	      00550d4d    push ebp"
"	      00550d4e    mov ebp,esp"
"	      00550d50    push 0FFFFFFFFh"
"	      00550d52    push 550EFDh"
"	      00550d57    mov eax,fs:[0]"
"	      00550d5d    push eax"
"	      00550d5e    mov fs:[0],esp"
"	      00550d65    sub esp,8"
"	      00550d68    push ebx"
"	      00550d69    push esi"
"	      00550d6a    push edi"
"	      00550d6b    mov [ebp-14h],ecx"
"	      00550d6e    mov eax,[ebp-14h]"
"	      00550d71    add eax,0C0h"
"	      00550d76    push eax"
"	      00550d77    mov eax,[ebp+0Ch]"
"	      00550d7a    push eax"
"	      00550d7b    movsx eax,word ptr [ebp+8]"
"	      00550d7f    mov ax,[eax*2+636B98h]"
"	      00550d87    push eax"
"	      00550d88    movsx eax,word ptr [ebp+8]"
"	      00550d8c    mov ax,[eax*2+6361C0h]"
"	      00550d94    push eax"
"	      00550d95    mov ecx,[ebp-14h]"
"	      00550d98    call 0055CB10h"
"	      00550d9d    mov dword ptr [ebp-4],0"
"	      00550da4    push 0"
"	      00550da6    mov ecx,[ebp-14h]"
"	      00550da9    add ecx,14h"
"	      00550dac    call 005609D0h"
"	      00550db1    mov byte ptr [ebp-4],1"
"	      00550db5    mov eax,[ebp-14h]"
"	      00550db8    mov dword ptr [eax],5935E0h"
"	      00550dbe    mov eax,[ebp-14h]"
"	      00550dc1    mov dword ptr [eax+14h],5935C8h"
);
// LINE 2886:
	asm( 
"	      00550dc8    mov ax,[ebp+8]"
"	      00550dcc    mov ecx,[ebp-14h]"
"	      00550dcf    mov [ecx+15Ah],ax"
);
// LINE 2888:
	asm( 
"	      00550dd6    lea eax,[ebp+10h]"
"	      00550dd9    mov ecx,[ebp-14h]"
"	      00550ddc    add ecx,3Ch"
"	      00550ddf    mov edx,[eax]"
"	      00550de1    mov [ecx],edx"
"	      00550de3    mov edx,[eax+4]"
"	      00550de6    mov [ecx+4],edx"
"	      00550de9    mov eax,[eax+8]"
"	      00550dec    mov [ecx+8],eax"
);
// LINE 2891:
	asm( 
"	      00550def    mov eax,[ebp-14h]"
"	      00550df2    mov dword ptr [eax+130h],0"
);
// LINE 2893:
	asm( 
"	      00550dfc    mov word ptr [ebp-10h],0"
"	      00550e02    jmp near ptr 00550E0Bh"
"	      00550e07    inc word ptr [ebp-10h]"
"	      00550e0b    movsx eax,word ptr [ebp-10h]"
"	      00550e0f    cmp eax,30h"
"	      00550e12    jge near ptr 00550E2Eh"
);
// LINE 2894:
	asm( 
"	      00550e18    movsx eax,word ptr [ebp-10h]"
"	      00550e1c    mov ecx,[ebp-14h]"
"	      00550e1f    mov word ptr [ecx+eax*2+0D0h],0"
"	      00550e29    jmp near ptr 00550E07h"
);
// LINE 2895:
	asm( 
"	      00550e2e    mov eax,[ebp-14h]"
"	      00550e31    mov word ptr [eax+102h],0FFFFh"
);
// LINE 2896:
	asm( 
"	      00550e3a    mov word ptr [ebp-10h],0"
"	      00550e40    jmp near ptr 00550E49h"
"	      00550e45    inc word ptr [ebp-10h]"
"	      00550e49    movsx eax,word ptr [ebp-10h]"
"	      00550e4d    cmp eax,4"
"	      00550e50    jge near ptr 00550E6Dh"
);
// LINE 2897:
	asm( 
"	      00550e56    movsx eax,word ptr [ebp-10h]"
"	      00550e5a    mov ecx,[ebp-14h]"
"	      00550e5d    mov dword ptr [ecx+eax*4+130h],0"
"	      00550e68    jmp near ptr 00550E45h"
);
// LINE 2899:
	asm( 
"	      00550e6d    mov eax,[ebp+0Ch]"
"	      00550e70    mov ecx,[ebp-14h]"
"	      00550e73    mov [ecx+0B4h],eax"
);
// LINE 2900:
	asm( 
"	      00550e79    mov eax,ds:[5B8684h]"
"	      00550e7e    mov ecx,[ebp-14h]"
"	      00550e81    mov [ecx+0B8h],eax"
);
// LINE 2901:
	asm( 
"	      00550e87    mov eax,[ebp-14h]"
"	      00550e8a    mov ds:[5B8684h],eax"
);
// LINE 2905:
	asm( 
"	      00550e8f    mov eax,[ebp-14h]"
"	      00550e92    mov word ptr [eax+20h],0"
);
// LINE 2907:
	asm( 
"	      00550e98    mov ax,[ebp+1Ch]"
"	      00550e9c    mov ecx,[ebp-14h]"
"	      00550e9f    mov [ecx+32h],ax"
"	      00550ea3    mov eax,[ebp-14h]"
"	      00550ea6    mov ax,[eax+32h]"
"	      00550eaa    mov ecx,[ebp-14h]"
"	      00550ead    mov [ecx+0DEh],ax"
"	      00550eb4    mov eax,[ebp-14h]"
"	      00550eb7    mov ax,[eax+0DEh]"
"	      00550ebe    mov ecx,[ebp-14h]"
"	      00550ec1    mov [ecx+0BCh],ax"
);
// LINE 2911:
	asm( 
"	      00550ec8    mov eax,[ebp+1Ch]"
"	      00550ecb    push eax"
"	      00550ecc    mov ecx,[ebp-14h]"
"	      00550ecf    call 00550B30h"
);
// LINE 2912:
	asm( 
"	      00550ed4    jmp near ptr 00550ED9h"
"	      00550ed9    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00550ee0    mov eax,[ebp-14h]"
"	      00550ee3    jmp near ptr 00550F07h"
"	      00550ee8    mov ecx,[ebp-14h]"
"	      00550eeb    add ecx,14h"
"	      00550eee    call 00560B1Eh"
"	      00550ef3    ret"
"	      00550ef4    mov ecx,[ebp-14h]"
"	      00550ef7    call 0055CC2Ah"
"	      00550efc    ret"
"	      00550efd    mov eax,595E58h"
"	      00550f02    jmp near ptr 0056F590h"
"	      00550f07    mov ecx,[ebp-0Ch]"
"	      00550f0a    mov fs:[0],ecx"
"	      00550f11    pop edi"
"	      00550f12    pop esi"
"	      00550f13    pop ebx"
"	      00550f14    leave"
"	      00550f15    ret 18h"
);
}

// FUNCTION: SIMCOPTER 0x00550f18
void cAvatar::Reset() {
// LINE 2915:
	asm( 
"	      00550f18    push ebp"
"	      00550f19    mov ebp,esp"
"	      00550f1b    sub esp,4"
"	      00550f1e    push ebx"
"	      00550f1f    push esi"
"	      00550f20    push edi"
"	      00550f21    mov [ebp-4],ecx"
);
// LINE 2916:
	asm( 
"	      00550f24    mov ecx,[ebp-4]"
"	      00550f27    call 00550F9Fh"
);
// LINE 2919:
	asm( 
"	      00550f2c    push 1"
"	      00550f2e    mov ecx,[ebp-4]"
"	      00550f31    call 0054FFB7h"
);
// LINE 2921:
	asm( 
"	      00550f36    mov eax,[ebp-4]"
"	      00550f39    mov word ptr [eax+9Ch],0"
"	      00550f42    jmp near ptr 00550F47h"
);
// LINE 2922:
	asm( 
"	      00550f47    mov eax,[ebp-4]"
"	      00550f4a    mov dword ptr [eax+168h],0"
);
// LINE 2923:
	asm( 
"	      00550f54    mov eax,[ebp-4]"
"	      00550f57    mov dword ptr [eax+16Ch],0"
);
// LINE 2924:
	asm( 
"	      00550f61    mov eax,[ebp-4]"
"	      00550f64    mov dword ptr [eax+170h],10000h"
);
// LINE 2925:
	asm( 
"	      00550f6e    mov eax,[ebp-4]"
"	      00550f71    mov dword ptr [eax+174h],0"
);
// LINE 2926:
	asm( 
"	      00550f7b    mov eax,[ebp-4]"
"	      00550f7e    mov dword ptr [eax+178h],0"
);
// LINE 2927:
	asm( 
"	      00550f88    mov eax,[ebp-4]"
"	      00550f8b    mov dword ptr [eax+17Ch],0"
);
// LINE 2928:
	asm( 
"	      00550f95    jmp near ptr 00550F9Ah"
"	      00550f9a    pop edi"
"	      00550f9b    pop esi"
"	      00550f9c    pop ebx"
"	      00550f9d    leave"
"	      00550f9e    ret"
);
}

// FUNCTION: SIMCOPTER 0x00550f9f
void cYObject::Reset() {
// LINE 2931:
	asm( 
"	      00550f9f    push ebp"
"	      00550fa0    mov ebp,esp"
"	      00550fa2    sub esp,14h"
"	      00550fa5    push ebx"
"	      00550fa6    push esi"
"	      00550fa7    push edi"
"	      00550fa8    mov [ebp-14h],ecx"
);
// LINE 2932:
	asm( 
"	      00550fab    mov eax,[ebp-14h]"
"	      00550fae    mov dword ptr [eax+98h],0"
);
// LINE 2933:
	asm( 
"	      00550fb8    mov eax,[ebp-14h]"
"	      00550fbb    mov dword ptr [eax+90h],0"
);
// LINE 2934:
	asm( 
"	      00550fc5    mov eax,[ebp-14h]"
"	      00550fc8    mov dword ptr [eax+164h],3F800000h"
);
// LINE 2935:
	asm( 
"	      00550fd2    mov eax,[ebp-14h]"
"	      00550fd5    mov word ptr [eax+9Ch],0FFFFh"
);
// LINE 2937:
	asm( 
"	      00550fde    mov eax,[ebp-14h]"
"	      00550fe1    mov dword ptr [eax+18h],0FFFFFF9Ch"
);
// LINE 2939:
	asm( 
"	      00550fe8    mov eax,[ebp-14h]"
"	      00550feb    mov word ptr [eax+0F2h],1"
);
// LINE 2940:
	asm( 
"	      00550ff4    mov eax,[ebp-14h]"
"	      00550ff7    mov word ptr [eax+106h],1"
);
// LINE 2941:
	asm( 
"	      00551000    mov eax,[ebp-14h]"
"	      00551003    mov word ptr [eax+0F4h],0"
);
// LINE 2942:
	asm( 
"	      0055100c    mov eax,[ebp-14h]"
"	      0055100f    mov word ptr [eax+102h],0FFFFh"
);
// LINE 2943:
	asm( 
"	      00551018    mov eax,[ebp-14h]"
"	      0055101b    mov word ptr [eax+0F0h],0FFFFh"
);
// LINE 2945:
	asm( 
"	      00551024    mov eax,[ebp-14h]"
"	      00551027    mov word ptr [eax+0D4h],6"
);
// LINE 2946:
	asm( 
"	      00551030    push 8"
"	      00551032    call 0055D717h"
"	      00551037    add esp,4"
"	      0055103a    mov ecx,[ebp-14h]"
"	      0055103d    mov [ecx+0D0h],ax"
);
// LINE 2947:
	asm( 
"	      00551044    push 0FFFFFFFFh"
"	      00551046    mov ecx,[ebp-14h]"
"	      00551049    call 0054FFB7h"
);
// LINE 2949:
	asm( 
"	      0055104e    mov eax,[ebp-14h]"
"	      00551051    movsx eax,word ptr [eax+0D2h]"
"	      00551058    test eax,eax"
"	      0055105a    je near ptr 005512DCh"
);
// LINE 2950:
	asm( 
"	      00551060    mov eax,[ebp-14h]"
"	      00551063    movsx eax,word ptr [eax+0D2h]"
"	      0055106a    test eax,eax"
"	      0055106c    jne near ptr 0055108Eh"
"	      00551072    push 8C085h"
"	      00551077    push 5BBC88h"
"	      0055107c    push 2E4h"
"	      00551081    push 5BBA14h"
"	      00551086    call 00554F30h"
"	      0055108b    add esp,10h"
"	      0055108e    jmp near ptr 00551093h"
"	      00551093    mov eax,[ebp-14h]"
"	      00551096    xor ecx,ecx"
"	      00551098    mov cx,[eax+20h]"
"	      0055109c    test ecx,ecx"
"	      0055109e    jne near ptr 005510C0h"
"	      005510a4    push 8C085h"
"	      005510a9    push 5BBC5Ch"
"	      005510ae    push 2E5h"
"	      005510b3    push 5BBA14h"
"	      005510b8    call 00554F30h"
"	      005510bd    add esp,10h"
"	      005510c0    mov eax,[ebp-14h]"
"	      005510c3    xor ecx,ecx"
"	      005510c5    mov cl,[eax+88h]"
"	      005510cb    cmp ecx,0FFFFFFFFh"
"	      005510ce    jne near ptr 00551109h"
"	      005510d4    mov eax,[ebp-14h]"
"	      005510d7    xor ecx,ecx"
"	      005510d9    mov cl,[eax+89h]"
"	      005510df    cmp ecx,0FFFFFFFFh"
"	      005510e2    je near ptr 00551104h"
"	      005510e8    push 8C085h"
"	      005510ed    push 5BBAD4h"
"	      005510f2    push 22Eh"
"	      005510f7    push 5BBA14h"
"	      005510fc    call 00554F30h"
"	      00551101    add esp,10h"
"	      00551104    jmp near ptr 00551139h"
"	      00551109    mov eax,[ebp-14h]"
"	      0055110c    xor ecx,ecx"
"	      0055110e    mov cl,[eax+89h]"
"	      00551114    cmp ecx,0FFFFFFFFh"
"	      00551117    jne near ptr 00551139h"
"	      0055111d    push 8C085h"
"	      00551122    push 5BBABCh"
"	      00551127    push 231h"
"	      0055112c    push 5BBA14h"
"	      00551131    call 00554F30h"
"	      00551136    add esp,10h"
"	      00551139    mov eax,[ebp-14h]"
"	      0055113c    xor ecx,ecx"
"	      0055113e    mov cl,[eax+88h]"
"	      00551144    cmp ecx,0FFFFFFFFh"
"	      00551147    je near ptr 00551157h"
"	      0055114d    jmp near ptr 00551185h"
"	      00551152    jmp near ptr 00551157h"
"	      00551157    jmp near ptr 00551169h"
"	      0055115c    test dword ptr [ebp-10h],0FFFFh"
"	      00551163    jne near ptr 00551185h"
"	      00551169    push 8C085h"
"	      0055116e    push 5BBC3Ch"
"	      00551173    push 2E6h"
"	      00551178    push 5BBA14h"
"	      0055117d    call 00554F30h"
"	      00551182    add esp,10h"
"	      00551185    mov eax,[ebp-14h]"
"	      00551188    movsx eax,word ptr [eax+102h]"
"	      0055118f    cmp eax,0FFFFFFFFh"
"	      00551192    je near ptr 0055122Fh"
"	      00551198    mov eax,[ebp-14h]"
"	      0055119b    mov word ptr [eax+104h],0FFFFh"
"	      005511a4    mov eax,[ebp-14h]"
"	      005511a7    movsx eax,word ptr [eax+102h]"
"	      005511ae    cmp eax,0FFFFFFFFh"
"	      005511b1    je near ptr 0055120Ah"
"	      005511b7    mov eax,[ebp-14h]"
"	      005511ba    movsx eax,word ptr [eax+102h]"
"	      005511c1    cmp eax,0FFFFFFFFh"
"	      005511c4    je near ptr 005511E5h"
"	      005511ca    mov eax,[ebp-14h]"
"	      005511cd    movsx eax,word ptr [eax+102h]"
"	      005511d4    add eax,62h"
"	      005511d7    mov [ebp-8],ax"
"	      005511db    jmp near ptr 005511F8h"
"	      005511e0    jmp near ptr 005511F0h"
"	      005511e5    mov word ptr [ebp-8],0FFFFh"
"	      005511eb    jmp near ptr 005511F8h"
"	      005511f0    mov ax,[ebp-0Ch]"
"	      005511f4    mov [ebp-8],ax"
"	      005511f8    jmp near ptr 005511FDh"
"	      005511fd    movsx eax,word ptr [ebp-8]"
"	      00551201    push eax"
"	      00551202    call 00446E04h"
"	      00551207    add esp,4"
"	      0055120a    jmp near ptr 0055120Fh"
"	      0055120f    mov eax,[ebp-14h]"
"	      00551212    movsx eax,word ptr [eax+102h]"
"	      00551219    mov word ptr [eax*2+6356B0h],0"
"	      00551223    mov eax,[ebp-14h]"
"	      00551226    mov word ptr [eax+102h],0FFFFh"
"	      0055122f    jmp near ptr 00551234h"
"	      00551234    mov eax,[ebp-14h]"
"	      00551237    mov word ptr [eax+0D2h],0"
"	      00551240    mov eax,[ebp-14h]"
"	      00551243    mov word ptr [eax+0F0h],0FFFFh"
"	      0055124c    mov eax,[ebp-14h]"
"	      0055124f    mov word ptr [eax+9Ch],0FFFFh"
"	      00551258    mov eax,[ebp-14h]"
"	      0055125b    movsx eax,word ptr [eax+0D8h]"
"	      00551262    mov [ebp-4],eax"
"	      00551265    cmp dword ptr [ebp-4],0"
"	      00551269    jne near ptr 00551282h"
"	      0055126f    movsx eax,word ptr ds:[5B8674h]"
"	      00551276    dec eax"
"	      00551277    mov ds:[5B8674h],ax"
"	      0055127d    jmp near ptr 00551290h"
"	      00551282    movsx eax,word ptr ds:[5B8670h]"
"	      00551289    dec eax"
"	      0055128a    mov ds:[5B8670h],ax"
"	      00551290    jmp near ptr 00551295h"
"	      00551295    movsx eax,word ptr ds:[5B8670h]"
"	      0055129c    test eax,eax"
"	      0055129e    jl near ptr 005512B3h"
"	      005512a4    movsx eax,word ptr ds:[5B8674h]"
"	      005512ab    test eax,eax"
"	      005512ad    jge near ptr 005512CFh"
"	      005512b3    push 8C085h"
"	      005512b8    push 5BBC24h"
"	      005512bd    push 2ECh"
"	      005512c2    push 5BBA14h"
"	      005512c7    call 00554F30h"
"	      005512cc    add esp,10h"
"	      005512cf    mov ecx,[ebp-14h]"
"	      005512d2    call 005507ECh"
"	      005512d7    jmp near ptr 005512DCh"
);
// LINE 2952:
	asm( 
"	      005512dc    mov eax,[ebp-14h]"
"	      005512df    mov ax,[eax+0BCh]"
"	      005512e6    mov ecx,[ebp-14h]"
"	      005512e9    mov [ecx+0DEh],ax"
);
// LINE 2953:
	asm( 
"	      005512f0    mov eax,[ebp-14h]"
"	      005512f3    mov word ptr [eax+0DCh],0"
);
// LINE 2954:
	asm( 
"	      005512fc    mov eax,[ebp-14h]"
"	      005512ff    mov word ptr [eax+0E0h],0"
);
// LINE 2956:
	asm( 
"	      00551308    push 0"
"	      0055130a    mov ecx,[ebp-14h]"
"	      0055130d    call 0054FE42h"
);
// LINE 2957:
	asm( 
"	      00551312    mov eax,[ebp-14h]"
"	      00551315    mov dword ptr [eax+1Ch],0FFFFFFFFh"
"	      0055131c    mov eax,[ebp-14h]"
"	      0055131f    movsx eax,word ptr [eax+0D8h]"
"	      00551326    test eax,eax"
"	      00551328    je near ptr 00551370h"
"	      0055132e    mov eax,[ebp-14h]"
"	      00551331    movsx eax,word ptr [eax+0D8h]"
"	      00551338    cmp eax,5"
"	      0055133b    je near ptr 00551370h"
"	      00551341    mov eax,[ebp-14h]"
"	      00551344    movsx eax,word ptr [eax+0D8h]"
"	      0055134b    cmp eax,7"
"	      0055134e    je near ptr 00551370h"
"	      00551354    push 8C085h"
"	      00551359    push 5BBB34h"
"	      0055135e    push 2BDh"
"	      00551363    push 5BBA14h"
"	      00551368    call 00554F30h"
"	      0055136d    add esp,10h"
"	      00551370    jmp near ptr 00551375h"
);
// LINE 2958:
	asm( 
"	      00551375    mov eax,[ebp-14h]"
"	      00551378    mov word ptr [eax+22h],0"
);
// LINE 2960:
	asm( 
"	      0055137e    jmp near ptr 00551383h"
"	      00551383    pop edi"
"	      00551384    pop esi"
"	      00551385    pop ebx"
"	      00551386    leave"
"	      00551387    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551388
void cYObject::Draw(struct VRBlit*) {
// LINE 2963:
	asm( 
"	      00551388    push ebp"
"	      00551389    mov ebp,esp"
"	      0055138b    sub esp,0A4h"
"	      00551391    push ebx"
"	      00551392    push esi"
"	      00551393    push edi"
"	      00551394    mov [ebp-84h],ecx"
);
// LINE 2968:
	asm( 
"	      0055139a    mov eax,[ebp-84h]"
"	      005513a0    movsx eax,word ptr [eax+0D2h]"
"	      005513a7    test eax,eax"
"	      005513a9    jne near ptr 005513CBh"
"	      005513af    push 8C085h"
"	      005513b4    push 5BB7D8h"
"	      005513b9    push 0B98h"
"	      005513be    push 5BB7FCh"
"	      005513c3    call 00554F30h"
"	      005513c8    add esp,10h"
);
// LINE 2969:
	asm( 
"	      005513cb    mov eax,[ebp-84h]"
"	      005513d1    movsx eax,word ptr [eax+0E2h]"
"	      005513d8    test eax,eax"
"	      005513da    jne near ptr 005513E5h"
);
// LINE 2970:
	asm( 
"	      005513e0    jmp near ptr 00551813h"
);
// LINE 2976:
	asm( 
"	      005513e5    cmp dword ptr ds:[598EBCh],10h"
"	      005513ec    jne near ptr 005513FDh"
"	      005513f2    mov word ptr [ebp-20h],1"
"	      005513f8    jmp near ptr 00551403h"
"	      005513fd    mov word ptr [ebp-20h],0"
);
// LINE 2978:
	asm( 
"	      00551403    mov eax,[ebp-84h]"
"	      00551409    cmp dword ptr [eax+90h],0"
"	      00551410    jne near ptr 00551432h"
"	      00551416    push 8C085h"
"	      0055141b    push 5BB820h"
"	      00551420    push 0BA2h"
"	      00551425    push 5BB840h"
"	      0055142a    call 00554F30h"
"	      0055142f    add esp,10h"
);
// LINE 2979:
	asm( 
"	      00551432    mov eax,[ebp-84h]"
"	      00551438    cmp dword ptr [eax+98h],0"
"	      0055143f    jne near ptr 0055144Ah"
);
// LINE 2983:
	asm( 
"	      00551445    jmp near ptr 00551813h"
);
// LINE 2985:
	asm( 
"	      0055144a    mov eax,[ebp+8]"
"	      0055144d    mov eax,[eax+4]"
"	      00551450    mov eax,[eax]"
"	      00551452    sar eax,0Ch"
"	      00551455    mov [ebp-68h],eax"
);
// LINE 2986:
	asm( 
"	      00551458    mov eax,[ebp+8]"
"	      0055145b    mov eax,[eax+4]"
"	      0055145e    mov eax,[eax+4]"
"	      00551461    sar eax,0Ch"
"	      00551464    mov [ebp-64h],eax"
);
// LINE 2987:
	asm( 
"	      00551467    mov eax,[ebp+8]"
"	      0055146a    mov eax,[eax+4]"
"	      0055146d    mov eax,[eax+8]"
"	      00551470    sar eax,10h"
"	      00551473    mov [ebp-60h],eax"
);
// LINE 2988:
	asm( 
"	      00551476    fld qword ptr ds:[593568h]"
"	      0055147c    mov eax,[ebp-60h]"
"	      0055147f    mov [ebp-88h],eax"
"	      00551485    fidiv dword ptr [ebp-88h]"
"	      0055148b    mov eax,[ebp-84h]"
"	      00551491    fstp dword ptr [eax+164h]"
);
// LINE 2989:
	asm( 
"	      00551497    test dword ptr [ebp-20h],0FFFFh"
"	      0055149e    je near ptr 005514C2h"
);
// LINE 2990:
	asm( 
"	      005514a4    mov eax,[ebp-84h]"
"	      005514aa    fld dword ptr [eax+164h]"
"	      005514b0    fmul dword ptr ds:[593570h]"
"	      005514b6    mov eax,[ebp-84h]"
"	      005514bc    fstp dword ptr [eax+164h]"
);
// LINE 2994:
	asm( 
"	      005514c2    mov eax,ds:[6BF1ACh]"
"	      005514c7    mov [ebp-8Ch],eax"
"	      005514cd    fild dword ptr [ebp-8Ch]"
"	      005514d3    fdiv qword ptr ds:[593540h]"
"	      005514d9    fstp qword ptr [ebp-3Ch]"
);
// LINE 2995:
	asm( 
"	      005514dc    mov eax,ds:[6BF1B0h]"
"	      005514e1    mov [ebp-90h],eax"
"	      005514e7    fild dword ptr [ebp-90h]"
"	      005514ed    fdiv qword ptr ds:[593540h]"
"	      005514f3    fstp qword ptr [ebp-70h]"
);
// LINE 2996:
	asm( 
"	      005514f6    fld qword ptr [ebp-3Ch]"
"	      005514f9    fmul qword ptr ds:[593578h]"
"	      005514ff    fstp dword ptr [ebp-40h]"
);
// LINE 2997:
	asm( 
"	      00551502    fld qword ptr [ebp-70h]"
"	      00551505    fmul qword ptr ds:[593578h]"
"	      0055150b    fsubr dword ptr ds:[593580h]"
"	      00551511    fstp dword ptr [ebp-2Ch]"
);
// LINE 2999:
	asm( 
"	      00551514    mov eax,[ebp-84h]"
"	      0055151a    movsx eax,word ptr [eax+0D0h]"
"	      00551521    mov [ebp-94h],eax"
"	      00551527    fild dword ptr [ebp-94h]"
"	      0055152d    fmul qword ptr ds:[593588h]"
"	      00551533    fadd dword ptr [ebp-40h]"
"	      00551536    fstp dword ptr [ebp-40h]"
);
// LINE 3004:
	asm( 
"	      00551539    mov eax,[ebp-84h]"
"	      0055153f    mov word ptr [eax+0E6h],0FFFFh"
);
// LINE 3006:
	asm( 
"	      00551548    mov eax,ds:[5B8650h]"
"	      0055154d    mov [ebp-98h],eax"
"	      00551553    fild dword ptr [ebp-98h]"
"	      00551559    fstp qword ptr [ebp-28h]"
);
// LINE 3007:
	asm( 
"	      0055155c    mov eax,ds:[5B8654h]"
"	      00551561    mov [ebp-9Ch],eax"
"	      00551567    fild dword ptr [ebp-9Ch]"
"	      0055156d    fstp qword ptr [ebp-34h]"
);
// LINE 3008:
	asm( 
"	      00551570    mov eax,ds:[5B8658h]"
"	      00551575    mov [ebp-0A0h],eax"
"	      0055157b    fild dword ptr [ebp-0A0h]"
"	      00551581    fstp qword ptr [ebp-48h]"
);
// LINE 3009:
	asm( 
"	      00551584    mov eax,ds:[5B865Ch]"
"	      00551589    mov [ebp-0A4h],eax"
"	      0055158f    fild dword ptr [ebp-0A4h]"
"	      00551595    fstp qword ptr [ebp-78h]"
);
// LINE 3011:
	asm( 
"	      00551598    mov eax,ds:[5B8650h]"
"	      0055159d    cmp [ebp-60h],eax"
"	      005515a0    jle near ptr 005515B0h"
);
// LINE 3012:
	asm( 
"	      005515a6    jmp near ptr 00551813h"
);
// LINE 3013:
	asm( 
"	      005515ab    jmp near ptr 0055161Bh"
"	      005515b0    mov eax,ds:[5B8654h]"
"	      005515b5    cmp [ebp-60h],eax"
"	      005515b8    jle near ptr 005515D2h"
);
// LINE 3014:
	asm( 
"	      005515be    mov eax,[ebp-84h]"
"	      005515c4    mov word ptr [eax+0E6h],4"
);
// LINE 3015:
	asm( 
"	      005515cd    jmp near ptr 0055161Bh"
"	      005515d2    mov eax,ds:[5B8658h]"
"	      005515d7    cmp [ebp-60h],eax"
"	      005515da    jle near ptr 005515F4h"
);
// LINE 3016:
	asm( 
"	      005515e0    mov eax,[ebp-84h]"
"	      005515e6    mov word ptr [eax+0E6h],2"
);
// LINE 3017:
	asm( 
"	      005515ef    jmp near ptr 0055161Bh"
"	      005515f4    mov eax,ds:[5B865Ch]"
"	      005515f9    cmp [ebp-60h],eax"
"	      005515fc    jle near ptr 00551616h"
);
// LINE 3018:
	asm( 
"	      00551602    mov eax,[ebp-84h]"
"	      00551608    mov word ptr [eax+0E6h],1"
);
// LINE 3019:
	asm( 
"	      00551611    jmp near ptr 0055161Bh"
);
// LINE 3020:
	asm( 
"	      00551616    jmp near ptr 00551813h"
);
// LINE 3022:
	asm( 
"	      0055161b    lea eax,[ebp-2Ch]"
"	      0055161e    push eax"
"	      0055161f    call 00562BDBh"
"	      00551624    add esp,4"
);
// LINE 3023:
	asm( 
"	      00551627    lea eax,[ebp-40h]"
"	      0055162a    push eax"
"	      0055162b    call 00562BDBh"
"	      00551630    add esp,4"
);
// LINE 3024:
	asm( 
"	      00551633    mov eax,[ebp-84h]"
"	      00551639    movsx eax,word ptr [eax+9Ch]"
"	      00551640    cmp eax,0FFFFFFFFh"
"	      00551643    jne near ptr 00551665h"
"	      00551649    push 8C085h"
"	      0055164e    push 5BB864h"
"	      00551653    push 0BD0h"
"	      00551658    push 5BB888h"
"	      0055165d    call 00554F30h"
"	      00551662    add esp,10h"
);
// LINE 3025:
	asm( 
"	      00551665    mov eax,[ebp-84h]"
"	      0055166b    movsx eax,word ptr [eax+9Ch]"
"	      00551672    cmp eax,0Bh"
"	      00551675    jl near ptr 00551697h"
"	      0055167b    push 8C085h"
"	      00551680    push 5BB8ACh"
"	      00551685    push 0BD1h"
"	      0055168a    push 5BB8B4h"
"	      0055168f    call 00554F30h"
"	      00551694    add esp,10h"
"	      00551697    mov eax,[ebp-84h]"
"	      0055169d    movsx eax,word ptr [eax+9Ch]"
"	      005516a4    mov ax,[eax*2+6376B0h]"
"	      005516ac    mov [ebp-7Ch],ax"
"	      005516b0    mov eax,[ebp-84h]"
"	      005516b6    mov eax,[eax+90h]"
"	      005516bc    mov [ebp-80h],eax"
);
// LINE 3026:
	asm( 
"	      005516bf    mov ax,[ebp-7Ch]"
"	      005516c3    mov ecx,[ebp-80h]"
"	      005516c6    mov [ecx+30h],ax"
"	      005516ca    jmp near ptr 005516CFh"
);
// LINE 3028:
	asm( 
"	      005516cf    mov eax,[ebp-84h]"
"	      005516d5    mov ax,[eax+0F0h]"
"	      005516dc    push eax"
"	      005516dd    mov eax,[ebp-84h]"
"	      005516e3    mov ax,[eax+0E6h]"
"	      005516ea    push eax"
"	      005516eb    mov eax,[ebp-84h]"
"	      005516f1    mov eax,[eax+164h]"
"	      005516f7    push eax"
"	      005516f8    mov eax,[ebp-64h]"
"	      005516fb    push eax"
"	      005516fc    mov eax,[ebp-68h]"
"	      005516ff    push eax"
"	      00551700    mov eax,[ebp-84h]"
"	      00551706    mov ax,[eax+0DCh]"
"	      0055170d    push eax"
"	      0055170e    mov eax,[ebp-84h]"
"	      00551714    mov eax,[eax+98h]"
"	      0055171a    push eax"
"	      0055171b    mov eax,[ebp-40h]"
"	      0055171e    push eax"
"	      0055171f    mov eax,[ebp-2Ch]"
"	      00551722    push eax"
"	      00551723    mov eax,[ebp-84h]"
"	      00551729    mov ecx,[eax+90h]"
"	      0055172f    call 00561611h"
);
// LINE 3033:
	asm( 
"	      00551734    mov eax,[ebp-68h]"
"	      00551737    mov [ebp-1Ch],eax"
);
// LINE 3034:
	asm( 
"	      0055173a    mov eax,[ebp-64h]"
"	      0055173d    mov [ebp-18h],eax"
);
// LINE 3035:
	asm( 
"	      00551740    mov eax,[ebp-84h]"
"	      00551746    movsx eax,word ptr [eax+0BCh]"
"	      0055174d    push eax"
"	      0055174e    push 5BB8D8h"
"	      00551753    lea eax,[ebp-5Ch]"
"	      00551756    push eax"
"	      00551757    call 0056CD30h"
"	      0055175c    add esp,0Ch"
);
// LINE 3036:
	asm( 
"	      0055175f    mov eax,[ebp-84h]"
"	      00551765    movsx eax,word ptr [eax+0D8h]"
"	      0055176c    test eax,eax"
"	      0055176e    je near ptr 005517A7h"
);
// LINE 3037:
	asm( 
"	      00551774    lea eax,[ebp-5Ch]"
"	      00551777    push eax"
"	      00551778    mov eax,[ebp-84h]"
"	      0055177e    movsx eax,word ptr [eax+1Ch]"
"	      00551782    push eax"
"	      00551783    mov eax,[ebp-84h]"
"	      00551789    movsx eax,word ptr [eax+0D8h]"
"	      00551790    push eax"
"	      00551791    push 5BB8DCh"
"	      00551796    lea eax,[ebp-14h]"
"	      00551799    push eax"
"	      0055179a    call 0056CD30h"
"	      0055179f    add esp,14h"
);
// LINE 3038:
	asm( 
"	      005517a2    jmp near ptr 005517BCh"
);
// LINE 3039:
	asm( 
"	      005517a7    lea eax,[ebp-5Ch]"
"	      005517aa    push eax"
"	      005517ab    push 5BB8E8h"
"	      005517b0    lea eax,[ebp-14h]"
"	      005517b3    push eax"
"	      005517b4    call 0056CD30h"
"	      005517b9    add esp,0Ch"
);
// LINE 3040:
	asm( 
"	      005517bc    movsx eax,word ptr ds:[5B86A0h]"
"	      005517c3    cmp eax,64h"
"	      005517c6    jl near ptr 005517E8h"
"	      005517cc    push 8C085h"
"	      005517d1    push 5BB8ECh"
"	      005517d6    push 0BE0h"
"	      005517db    push 5BB8F4h"
"	      005517e0    call 00554F30h"
"	      005517e5    add esp,10h"
);
// LINE 3041:
	asm( 
"	      005517e8    lea esi,[ebp-1Ch]"
"	      005517eb    movsx eax,word ptr ds:[5B86A0h]"
"	      005517f2    mov ecx,eax"
"	      005517f4    shl eax,3"
"	      005517f7    sub eax,ecx"
"	      005517f9    lea edi,[eax*4+6356D0h]"
"	      00551800    mov ecx,7"
"	      00551805    rep movsd"
"	      00551807    inc word ptr ds:[5B86A0h]"
);
// LINE 3044:
	asm( 
"	      0055180e    jmp near ptr 00551813h"
"	      00551813    pop edi"
"	      00551814    pop esi"
"	      00551815    pop ebx"
"	      00551816    leave"
"	      00551817    ret 4"
);
}

// FUNCTION: SIMCOPTER 0x0055181a
void BodyDrawDebugInfo() {
// LINE 3050:
	asm( 
"	      0055181a    push ebp"
"	      0055181b    mov ebp,esp"
"	      0055181d    sub esp,20h"
"	      00551820    push ebx"
"	      00551821    push esi"
"	      00551822    push edi"
);
// LINE 3051:
	asm( 
"	      00551823    push 91h"
"	      00551828    call 00432226h"
"	      0055182d    add esp,4"
"	      00551830    test eax,eax"
"	      00551832    je near ptr 0055189Ah"
);
// LINE 3052:
	asm( 
"	      00551838    mov word ptr [ebp-4],0"
"	      0055183e    jmp near ptr 00551847h"
"	      00551843    inc word ptr [ebp-4]"
"	      00551847    movsx eax,word ptr [ebp-4]"
"	      0055184b    movsx ecx,word ptr ds:[5B86A0h]"
"	      00551852    cmp eax,ecx"
"	      00551854    jge near ptr 0055189Ah"
);
// LINE 3053:
	asm( 
"	      0055185a    movsx eax,word ptr [ebp-4]"
"	      0055185e    mov ecx,eax"
"	      00551860    shl eax,3"
"	      00551863    sub eax,ecx"
"	      00551865    lea edi,[ebp-20h]"
"	      00551868    lea esi,[eax*4+6356D0h]"
"	      0055186f    mov ecx,7"
"	      00551874    rep movsd"
);
// LINE 3054:
	asm( 
"	      00551876    push 0"
"	      00551878    push 0"
"	      0055187a    push 0"
"	      0055187c    lea eax,[ebp-1Ch]"
"	      0055187f    push eax"
"	      00551880    lea eax,[ebp-20h]"
"	      00551883    push eax"
"	      00551884    push 0"
"	      00551886    lea eax,[ebp-18h]"
"	      00551889    push eax"
"	      0055188a    mov eax,[ebp+8]"
"	      0055188d    mov eax,[eax]"
"	      0055188f    mov ecx,[ebp+8]"
"	      00551892    call dword ptr [eax+4Ch]"
);
// LINE 3055:
	asm( 
"	      00551895    jmp near ptr 00551843h"
);
// LINE 3057:
	asm( 
"	      0055189a    mov word ptr ds:[5B86A0h],0"
);
// LINE 3058:
	asm( 
"	      005518a3    jmp near ptr 005518A8h"
"	      005518a8    pop edi"
"	      005518a9    pop esi"
"	      005518aa    pop ebx"
"	      005518ab    leave"
"	      005518ac    ret"
);
}

// FUNCTION: SIMCOPTER 0x005518ad
void cYObject::~cYObject() {
// LINE 3062:
	asm( 
"	      005518ad    push ebp"
"	      005518ae    mov ebp,esp"
"	      005518b0    push 0FFFFFFFFh"
"	      005518b2    push 5519BEh"
"	      005518b7    mov eax,fs:[0]"
"	      005518bd    push eax"
"	      005518be    mov fs:[0],esp"
"	      005518c5    sub esp,10h"
"	      005518c8    push ebx"
"	      005518c9    push esi"
"	      005518ca    push edi"
"	      005518cb    mov [ebp-1Ch],ecx"
"	      005518ce    mov eax,[ebp-1Ch]"
"	      005518d1    mov dword ptr [eax],5935E0h"
"	      005518d7    mov eax,[ebp-1Ch]"
"	      005518da    mov dword ptr [eax+14h],5935C8h"
"	      005518e1    mov dword ptr [ebp-4],0"
"	      005518e8    mov byte ptr [ebp-4],1"
);
// LINE 3063:
	asm( 
"	      005518ec    mov word ptr [ebp-14h],0"
);
// LINE 3064:
	asm( 
"	      005518f2    mov dword ptr [ebp-10h],5B8684h"
"	      005518f9    jmp near ptr 0055190Bh"
"	      005518fe    mov eax,[ebp-10h]"
"	      00551901    mov eax,[eax]"
"	      00551903    add eax,0B8h"
"	      00551908    mov [ebp-10h],eax"
"	      0055190b    mov eax,[ebp-10h]"
"	      0055190e    cmp dword ptr [eax],0"
"	      00551911    je near ptr 00551945h"
);
// LINE 3065:
	asm( 
"	      00551917    mov eax,[ebp-10h]"
"	      0055191a    mov ecx,[ebp-1Ch]"
"	      0055191d    cmp [eax],ecx"
"	      0055191f    jne near ptr 00551940h"
);
// LINE 3067:
	asm( 
"	      00551925    mov eax,[ebp-10h]"
"	      00551928    mov eax,[eax]"
"	      0055192a    mov eax,[eax+0B8h]"
"	      00551930    mov ecx,[ebp-10h]"
"	      00551933    mov [ecx],eax"
);
// LINE 3068:
	asm( 
"	      00551935    mov word ptr [ebp-14h],1"
);
// LINE 3069:
	asm( 
"	      0055193b    jmp near ptr 00551945h"
);
// LINE 3072:
	asm( 
"	      00551940    jmp near ptr 005518FEh"
"	      00551945    test dword ptr [ebp-14h],0FFFFh"
"	      0055194c    jne near ptr 0055196Eh"
"	      00551952    push 8C085h"
"	      00551957    push 5BB918h"
"	      0055195c    push 0C00h"
"	      00551961    push 5BB944h"
"	      00551966    call 00554F30h"
"	      0055196b    add esp,10h"
);
// LINE 3073:
	asm( 
"	      0055196e    jmp near ptr 00551973h"
"	      00551973    mov byte ptr [ebp-4],0"
"	      00551977    call 0055198Dh"
"	      0055197c    mov dword ptr [ebp-4],0FFFFFFFFh"
"	      00551983    call 005519B5h"
"	      00551988    jmp near ptr 005519C8h"
"	      0055198d    cmp dword ptr [ebp-1Ch],0"
"	      00551991    je near ptr 005519A5h"
"	      00551997    mov eax,[ebp-1Ch]"
"	      0055199a    add eax,14h"
"	      0055199d    mov [ebp-18h],eax"
"	      005519a0    jmp near ptr 005519ACh"
"	      005519a5    mov dword ptr [ebp-18h],0"
"	      005519ac    mov ecx,[ebp-18h]"
"	      005519af    call 00560B1Eh"
"	      005519b4    ret"
"	      005519b5    mov ecx,[ebp-1Ch]"
"	      005519b8    call 0055CC2Ah"
"	      005519bd    ret"
"	      005519be    mov eax,595E88h"
"	      005519c3    jmp near ptr 0056F590h"
"	      005519c8    mov eax,[ebp-0Ch]"
"	      005519cb    mov fs:[0],eax"
"	      005519d1    pop edi"
"	      005519d2    pop esi"
"	      005519d3    pop ebx"
"	      005519d4    leave"
"	      005519d5    ret"
);
}

// FUNCTION: SIMCOPTER 0x005519d6
void S3PersonTweakInit() {
// LINE 3080:
	asm( 
"	      005519d6    push ebp"
"	      005519d7    mov ebp,esp"
"	      005519d9    sub esp,28h"
"	      005519dc    push ebx"
"	      005519dd    push esi"
"	      005519de    push edi"
);
// LINE 3083:
	asm( 
"	      005519df    mov dword ptr [ebp-28h],5B8678h"
);
// LINE 3084:
	asm( 
"	      005519e6    mov dword ptr [ebp-24h],5B867Ch"
);
// LINE 3085:
	asm( 
"	      005519ed    mov dword ptr [ebp-20h],5B8650h"
);
// LINE 3086:
	asm( 
"	      005519f4    mov dword ptr [ebp-1Ch],5B8654h"
);
// LINE 3087:
	asm( 
"	      005519fb    mov dword ptr [ebp-18h],5B8658h"
);
// LINE 3088:
	asm( 
"	      00551a02    mov dword ptr [ebp-14h],5B865Ch"
);
// LINE 3089:
	asm( 
"	      00551a09    mov dword ptr [ebp-10h],5B86A4h"
);
// LINE 3091:
	asm( 
"	      00551a10    push 5BB968h"
"	      00551a15    push 7"
"	      00551a17    lea eax,[ebp-28h]"
"	      00551a1a    push eax"
"	      00551a1b    call 004C9AD0h"
"	      00551a20    add esp,0Ch"
);
// LINE 3092:
	asm( 
"	      00551a23    jmp near ptr 00551A28h"
"	      00551a28    pop edi"
"	      00551a29    pop esi"
"	      00551a2a    pop ebx"
"	      00551a2b    leave"
"	      00551a2c    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551a2d
void UpdateFigureVals() {
// LINE 3095:
	asm( 
"	      00551a2d    push ebp"
"	      00551a2e    mov ebp,esp"
"	      00551a30    push ebx"
"	      00551a31    push esi"
"	      00551a32    push edi"
);
// LINE 3096:
	asm( 
"	      00551a33    jmp near ptr 00551A38h"
"	      00551a38    pop edi"
"	      00551a39    pop esi"
"	      00551a3a    pop ebx"
"	      00551a3b    leave"
"	      00551a3c    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551a3d
void cAvatar::RotateMatrixAndYawForEngine() {
// LINE 3099:
	asm( 
"	      00551a3d    push ebp"
"	      00551a3e    mov ebp,esp"
"	      00551a40    sub esp,44h"
"	      00551a43    push ebx"
"	      00551a44    push esi"
"	      00551a45    push edi"
"	      00551a46    mov [ebp-44h],ecx"
);
// LINE 3102:
	asm( 
"	      00551a49    push 0F0000h"
"	      00551a4e    mov eax,ds:[5B4768h]"
"	      00551a53    push eax"
"	      00551a54    call 004D19BDh"
"	      00551a59    add esp,8"
"	      00551a5c    push eax"
"	      00551a5d    mov eax,[ebp-44h]"
"	      00551a60    mov eax,[eax+178h]"
"	      00551a66    push eax"
"	      00551a67    call 004D19BDh"
"	      00551a6c    add esp,8"
"	      00551a6f    mov ecx,[ebp-44h]"
"	      00551a72    add [ecx+17Ch],eax"
);
// LINE 3104:
	asm( 
"	      00551a78    mov eax,[ebp-44h]"
"	      00551a7b    cmp dword ptr [eax+17Ch],0E100000h"
"	      00551a85    jle near ptr 00551A9Dh"
);
// LINE 3105:
	asm( 
"	      00551a8b    mov eax,[ebp-44h]"
"	      00551a8e    sub dword ptr [eax+17Ch],0E100000h"
);
// LINE 3106:
	asm( 
"	      00551a98    jmp near ptr 00551ABAh"
"	      00551a9d    mov eax,[ebp-44h]"
"	      00551aa0    cmp dword ptr [eax+17Ch],0"
"	      00551aa7    jge near ptr 00551ABAh"
);
// LINE 3107:
	asm( 
"	      00551aad    mov eax,[ebp-44h]"
"	      00551ab0    add dword ptr [eax+17Ch],0E100000h"
);
// LINE 3110:
	asm( 
"	      00551aba    push 0"
"	      00551abc    push 0"
"	      00551abe    mov eax,[ebp-44h]"
"	      00551ac1    mov eax,[eax+17Ch]"
"	      00551ac7    push eax"
"	      00551ac8    lea eax,[ebp-40h]"
"	      00551acb    push eax"
"	      00551acc    call 004F955Fh"
"	      00551ad1    add esp,10h"
);
// LINE 3111:
	asm( 
"	      00551ad4    mov eax,[ebp-44h]"
"	      00551ad7    add eax,48h"
"	      00551ada    push eax"
"	      00551adb    lea eax,[ebp-40h]"
"	      00551ade    push eax"
"	      00551adf    call 004D8C2Eh"
"	      00551ae4    add esp,8"
);
// LINE 3112:
	asm( 
"	      00551ae7    jmp near ptr 00551AECh"
"	      00551aec    pop edi"
"	      00551aed    pop esi"
"	      00551aee    pop ebx"
"	      00551aef    leave"
"	      00551af0    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551af1
int32_t S3PUtilsGetDir() {
// LINE 3116:
	asm( 
"	      00551af1    push ebp"
"	      00551af2    mov ebp,esp"
"	      00551af4    sub esp,14h"
"	      00551af7    push ebx"
"	      00551af8    push esi"
"	      00551af9    push edi"
);
// LINE 3119:
	asm( 
"	      00551afa    mov eax,[ebp+10h]"
"	      00551afd    sub eax,[ebp+8]"
"	      00551b00    mov [ebp-0Ch],eax"
);
// LINE 3120:
	asm( 
"	      00551b03    mov eax,[ebp+14h]"
"	      00551b06    sub eax,[ebp+0Ch]"
"	      00551b09    mov [ebp-14h],eax"
);
// LINE 3122:
	asm( 
"	      00551b0c    cmp dword ptr [ebp-0Ch],0"
"	      00551b10    jge near ptr 00551B23h"
"	      00551b16    mov eax,[ebp-0Ch]"
"	      00551b19    neg eax"
"	      00551b1b    mov [ebp-4],eax"
);
// LINE 3123:
	asm( 
"	      00551b1e    jmp near ptr 00551B29h"
"	      00551b23    mov eax,[ebp-0Ch]"
"	      00551b26    mov [ebp-4],eax"
);
// LINE 3124:
	asm( 
"	      00551b29    cmp dword ptr [ebp-14h],0"
"	      00551b2d    jge near ptr 00551B40h"
"	      00551b33    mov eax,[ebp-14h]"
"	      00551b36    neg eax"
"	      00551b38    mov [ebp-8],eax"
);
// LINE 3125:
	asm( 
"	      00551b3b    jmp near ptr 00551B46h"
"	      00551b40    mov eax,[ebp-14h]"
"	      00551b43    mov [ebp-8],eax"
);
// LINE 3127:
	asm( 
"	      00551b46    mov eax,[ebp-4]"
"	      00551b49    sar eax,1"
"	      00551b4c    cmp eax,[ebp-8]"
"	      00551b4f    jle near ptr 00551B75h"
);
// LINE 3129:
	asm( 
"	      00551b55    cmp dword ptr [ebp-0Ch],0"
"	      00551b59    jle near ptr 00551B6Ah"
"	      00551b5f    mov word ptr [ebp-10h],2"
);
// LINE 3130:
	asm( 
"	      00551b65    jmp near ptr 00551B70h"
"	      00551b6a    mov word ptr [ebp-10h],6"
);
// LINE 3132:
	asm( 
"	      00551b70    jmp near ptr 00551BE9h"
"	      00551b75    mov eax,[ebp-8]"
"	      00551b78    sar eax,1"
"	      00551b7b    cmp eax,[ebp-4]"
"	      00551b7e    jle near ptr 00551BA4h"
);
// LINE 3134:
	asm( 
"	      00551b84    cmp dword ptr [ebp-14h],0"
"	      00551b88    jle near ptr 00551B99h"
"	      00551b8e    mov word ptr [ebp-10h],4"
);
// LINE 3135:
	asm( 
"	      00551b94    jmp near ptr 00551B9Fh"
"	      00551b99    mov word ptr [ebp-10h],0"
);
// LINE 3138:
	asm( 
"	      00551b9f    jmp near ptr 00551BE9h"
"	      00551ba4    cmp dword ptr [ebp-0Ch],0"
"	      00551ba8    jle near ptr 00551BCEh"
);
// LINE 3140:
	asm( 
"	      00551bae    cmp dword ptr [ebp-14h],0"
"	      00551bb2    jge near ptr 00551BC3h"
"	      00551bb8    mov word ptr [ebp-10h],1"
);
// LINE 3141:
	asm( 
"	      00551bbe    jmp near ptr 00551BC9h"
"	      00551bc3    mov word ptr [ebp-10h],3"
);
// LINE 3143:
	asm( 
"	      00551bc9    jmp near ptr 00551BE9h"
);
// LINE 3145:
	asm( 
"	      00551bce    cmp dword ptr [ebp-14h],0"
"	      00551bd2    jge near ptr 00551BE3h"
"	      00551bd8    mov word ptr [ebp-10h],7"
);
// LINE 3146:
	asm( 
"	      00551bde    jmp near ptr 00551BE9h"
"	      00551be3    mov word ptr [ebp-10h],5"
);
// LINE 3148:
	asm( 
"	      00551be9    movsx eax,word ptr [ebp-10h]"
"	      00551bed    jmp near ptr 00551BF2h"
);
// LINE 3149:
	asm( 
"	      00551bf2    pop edi"
"	      00551bf3    pop esi"
"	      00551bf4    pop ebx"
"	      00551bf5    leave"
"	      00551bf6    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551bf7
int32_t S3PUtilsGetAlt() {
// LINE 3152:
	asm( 
"	      00551bf7    push ebp"
"	      00551bf8    mov ebp,esp"
"	      00551bfa    sub esp,24h"
"	      00551bfd    push ebx"
"	      00551bfe    push esi"
"	      00551bff    push edi"
);
// LINE 3159:
	asm( 
"	      00551c00    mov eax,20000000h"
"	      00551c05    sub eax,[ebp+10h]"
"	      00551c08    shr eax,16h"
"	      00551c0b    and eax,0FFh"
"	      00551c10    mov ecx,[ebp+8]"
"	      00551c13    add ecx,20000000h"
"	      00551c19    shr ecx,16h"
"	      00551c1c    and ecx,0FFh"
"	      00551c22    shl ecx,0Ah"
"	      00551c25    mov eax,[ecx+eax*4+67ED30h]"
"	      00551c2c    mov [ebp-1Ch],eax"
);
// LINE 3161:
	asm( 
"	      00551c2f    cmp dword ptr [ebp-1Ch],0"
"	      00551c33    jne near ptr 00551C50h"
"	      00551c39    push 0"
"	      00551c3b    mov eax,[ebp+10h]"
"	      00551c3e    push eax"
"	      00551c3f    mov eax,[ebp+8]"
"	      00551c42    push eax"
"	      00551c43    call 00518A8Ch"
"	      00551c48    add esp,0Ch"
"	      00551c4b    jmp near ptr 00551D31h"
);
// LINE 3163:
	asm( 
"	      00551c50    mov eax,[ebp+8]"
"	      00551c53    mov ecx,[ebp-1Ch]"
"	      00551c56    movsx ecx,word ptr [ecx+2]"
"	      00551c5a    shl ecx,10h"
"	      00551c5d    sub eax,ecx"
"	      00551c5f    mov [ebp-20h],eax"
);
// LINE 3164:
	asm( 
"	      00551c62    mov eax,[ebp+10h]"
"	      00551c65    mov ecx,[ebp-1Ch]"
"	      00551c68    movsx ecx,word ptr [ecx+6]"
"	      00551c6c    shl ecx,10h"
"	      00551c6f    sub eax,ecx"
"	      00551c71    mov [ebp-4],eax"
);
// LINE 3165:
	asm( 
"	      00551c74    mov eax,[ebp+0Ch]"
"	      00551c77    mov ecx,[ebp-1Ch]"
"	      00551c7a    movsx ecx,word ptr [ecx+4]"
"	      00551c7e    shl ecx,10h"
"	      00551c81    sub eax,ecx"
"	      00551c83    mov [ebp-24h],eax"
);
// LINE 3167:
	asm( 
"	      00551c86    mov eax,[ebp-1Ch]"
"	      00551c89    mov eax,[eax+0Ch]"
"	      00551c8c    mov [ebp-10h],eax"
);
// LINE 3168:
	asm( 
"	      00551c8f    mov dword ptr [ebp-14h],0"
);
// LINE 3169:
	asm( 
"	      00551c96    mov dword ptr [ebp-8],0"
);
// LINE 3170:
	asm( 
"	      00551c9d    cmp dword ptr [ebp-10h],0"
"	      00551ca1    je near ptr 00551CF5h"
);
// LINE 3172:
	asm( 
"	      00551ca7    mov dword ptr [ebp-0Ch],200h"
);
// LINE 3173:
	asm( 
"	      00551cae    push 0"
"	      00551cb0    push 0"
"	      00551cb2    push 0"
"	      00551cb4    lea eax,[ebp-0Ch]"
"	      00551cb7    push eax"
"	      00551cb8    mov eax,[ebp-4]"
"	      00551cbb    push eax"
"	      00551cbc    mov eax,[ebp-24h]"
"	      00551cbf    push eax"
"	      00551cc0    mov eax,[ebp-20h]"
"	      00551cc3    push eax"
"	      00551cc4    mov eax,[ebp-10h]"
"	      00551cc7    mov eax,[eax+4]"
"	      00551cca    push eax"
"	      00551ccb    call 004D2B28h"
"	      00551cd0    add esp,20h"
"	      00551cd3    mov [ebp-14h],eax"
);
// LINE 3174:
	asm( 
"	      00551cd6    mov eax,[ebp-14h]"
"	      00551cd9    cmp [ebp-8],eax"
"	      00551cdc    jge near ptr 00551CE8h"
);
// LINE 3175:
	asm( 
"	      00551ce2    mov eax,[ebp-14h]"
"	      00551ce5    mov [ebp-8],eax"
);
// LINE 3176:
	asm( 
"	      00551ce8    mov eax,[ebp-10h]"
"	      00551ceb    mov eax,[eax]"
"	      00551ced    mov [ebp-10h],eax"
);
// LINE 3177:
	asm( 
"	      00551cf0    jmp near ptr 00551C9Dh"
);
// LINE 3182:
	asm( 
"	      00551cf5    cmp dword ptr [ebp-8],0"
"	      00551cf9    jne near ptr 00551D19h"
);
// LINE 3183:
	asm( 
"	      00551cff    push 0"
"	      00551d01    mov eax,[ebp+10h]"
"	      00551d04    push eax"
"	      00551d05    mov eax,[ebp+8]"
"	      00551d08    push eax"
"	      00551d09    call 00518A8Ch"
"	      00551d0e    add esp,0Ch"
"	      00551d11    mov [ebp-18h],eax"
);
// LINE 3184:
	asm( 
"	      00551d14    jmp near ptr 00551D29h"
);
// LINE 3185:
	asm( 
"	      00551d19    mov eax,[ebp-1Ch]"
"	      00551d1c    movsx eax,word ptr [eax+4]"
"	      00551d20    shl eax,10h"
"	      00551d23    add eax,[ebp-8]"
"	      00551d26    mov [ebp-18h],eax"
);
// LINE 3187:
	asm( 
"	      00551d29    mov eax,[ebp-18h]"
"	      00551d2c    jmp near ptr 00551D31h"
);
// LINE 3188:
	asm( 
"	      00551d31    pop edi"
"	      00551d32    pop esi"
"	      00551d33    pop ebx"
"	      00551d34    leave"
"	      00551d35    ret"
);
}

// FUNCTION: SIMCOPTER 0x00551d36
void FrameInit() {
// LINE 3196:
	asm( 
"	      00551d36    push ebp"
"	      00551d37    mov ebp,esp"
"	      00551d39    push ebx"
"	      00551d3a    push esi"
"	      00551d3b    push edi"
);
// LINE 3205:
	asm( 
"	      00551d3c    cmp dword ptr ds:[598EBCh],10h"
"	      00551d43    jne near ptr 00551D6Eh"
);
// LINE 3207:
	asm( 
"	      00551d49    mov eax,ds:[598EF4h]"
"	      00551d4e    mov ds:[5BEF28h],eax"
);
// LINE 3208:
	asm( 
"	      00551d53    mov eax,ds:[598EE8h]"
"	      00551d58    dec eax"
"	      00551d59    mov ds:[5BEF2Ch],eax"
);
// LINE 3209:
	asm( 
"	      00551d5e    mov eax,ds:[598EECh]"
"	      00551d63    dec eax"
"	      00551d64    mov ds:[5BEF30h],eax"
);
// LINE 3211:
	asm( 
"	      00551d69    jmp near ptr 00551D8Eh"
);
// LINE 3213:
	asm( 
"	      00551d6e    mov eax,ds:[598ED4h]"
"	      00551d73    mov ds:[5BEF28h],eax"
);
// LINE 3214:
	asm( 
"	      00551d78    mov eax,ds:[598EC8h]"
"	      00551d7d    dec eax"
"	      00551d7e    mov ds:[5BEF2Ch],eax"
);
// LINE 3215:
	asm( 
"	      00551d83    mov eax,ds:[598ECCh]"
"	      00551d88    dec eax"
"	      00551d89    mov ds:[5BEF30h],eax"
);
// LINE 3218:
	asm( 
"	      00551d8e    jmp near ptr 00551D93h"
"	      00551d93    pop edi"
"	      00551d94    pop esi"
"	      00551d95    pop ebx"
"	      00551d96    leave"
"	      00551d97    ret"
);
}



// Contribution: 1:00150da0-00150dd8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00551da0
// FlatResFile::`scalar deleting destructor'



// Contribution: 1:00150de0-00150eb7 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150ec0-00150f3f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00551ec0
// ResFile::`scalar deleting destructor'



// Contribution: 1:00150f40-00150f9e Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00551f40
public: virtual __thiscall ResFile::~ResFile(void) {
}



// Contribution: 1:00150fa0-00150fba Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150fc0-00150ff8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00551fc0
// cYObject::`scalar deleting destructor'



// Contribution: 1:00151000-00151038 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151040-001510d6 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001510e0-0015118f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151190-00151369 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151370-0015138f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151390-001513af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513b0-001513cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513d0-001513ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513f0-0015140f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151410-0015142f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151430-0015144f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151450-0015146f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151470-0015148f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151490-001514af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514b0-001514cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514d0-001514ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514f0-0015150f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151510-0015152f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151530-0015154f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151550-0015156f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151570-0015158f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151590-001515af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515b0-001515cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515d0-001515ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515f0-0015160f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151610-0015162f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151630-0015164f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151650-0015166f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151670-0015168f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151690-001516af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516b0-001516cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516d0-001516ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516f0-0015170f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151710-0015172f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151730-0015174f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151750-0015176f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151770-0015178f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151790-001517af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517b0-001517cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517d0-001517ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517f0-0015180f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151810-0015182f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151830-0015184f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151850-0015186f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151870-0015188f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151890-001518af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518b0-001518cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518d0-001518ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518f0-0015190f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151910-0015192f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151930-0015194f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151950-0015196f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151970-0015198f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151990-001519af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519b0-001519cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519d0-001519ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519f0-00151a0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a10-00151a2f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a30-00151a4f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a50-00151a6f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a70-00151a8f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: SIMCOPTER 0x00552a90
// cAvatar::`scalar deleting destructor'



// Contribution: 1:00151a90-00151b0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 2:00004508-00004517 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00004518-00004527 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x00004518
// ??_7ResFile@@6B@


// Contribution: 2:00004528-0000458f Module: 200, 8 byte alignment, initialized_data, read, 
// GLOBAL: SIMCOPTER 0x00004590
// ??_7cAvatar@@6BYObjLang@@@


// Contribution: 2:00004590-000045a3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:000045a8-000045c3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000045a8
// ??_7cAvatar@@6BTreeSim@@@


// Contribution: 2:000045c8-000045db Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000045c8
// ??_7cYObject@@6BYObjLang@@@


// Contribution: 2:000045e0-000045fb Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: SIMCOPTER 0x000045e0
// ??_7cYObject@@6BTreeSim@@@


// Contribution: 2:00006d38-00006eb7 Module: 200, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00006eb8-00006edf Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006ee0-00006f07 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006f08-00006f2f Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:000000b0-000000bb Module: 200, 4 byte alignment, initialized_data, read, write, 
// LOCAL: SIMCOPTER 0x000000b0
// $S76
// LOCAL: SIMCOPTER 0x000000b4
// $S82
// LOCAL: SIMCOPTER 0x000000b8
// $S87
// GLOBAL: SIMCOPTER 0x000000bc
// __xc_z


// Contribution: 3:00021644-00024974 Module: 200, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x00021644
// gPersonBeamingSlices
// GLOBAL: SIMCOPTER 0x00021648
// gPersonBeamingForwardWeight
// GLOBAL: SIMCOPTER 0x0002164c
// gPersonBeamingSlicesSlice
// GLOBAL: SIMCOPTER 0x00021650
// gFarLimit
// GLOBAL: SIMCOPTER 0x00021654
// gFarBoundary
// GLOBAL: SIMCOPTER 0x00021658
// gMidBoundary
// GLOBAL: SIMCOPTER 0x0002165c
// gNearBoundary
// GLOBAL: SIMCOPTER 0x00021660
// gNearLimit
// GLOBAL: SIMCOPTER 0x00021664
// CopterDir
// GLOBAL: SIMCOPTER 0x00021668
// cYObject::sInited
// GLOBAL: SIMCOPTER 0x0002166c
// cYObject::sAllAmbientStarted
// GLOBAL: SIMCOPTER 0x00021670
// cYObject::sNumMissionAwake
// GLOBAL: SIMCOPTER 0x00021674
// cYObject::sNumAmbientAwake
// GLOBAL: SIMCOPTER 0x00021678
// cYObject::sAmbientTopOff
// GLOBAL: SIMCOPTER 0x0002167c
// cYObject::sAmbientAbsoluteMax
// GLOBAL: SIMCOPTER 0x00021680
// gAvatar
// GLOBAL: SIMCOPTER 0x00021684
// cYObject::sList
// GLOBAL: SIMCOPTER 0x00021688
// cYObject::sBeamed
// GLOBAL: SIMCOPTER 0x0002168c
// cYObject::sDebugNumBeamed
// GLOBAL: SIMCOPTER 0x00021690
// cYObject::sSimTicks
// GLOBAL: SIMCOPTER 0x00021694
// gPersonBeamSlice
// GLOBAL: SIMCOPTER 0x00021698
// gNextTime
// GLOBAL: SIMCOPTER 0x0002169c
// gCumTime
// GLOBAL: SIMCOPTER 0x000216a0
// gBodyDebugInfoIndex
// GLOBAL: SIMCOPTER 0x000216a4
// cYObject::sScurkRectRad
// LOCAL: SIMCOPTER 0x000216a8
// sAvLastCellX
// LOCAL: SIMCOPTER 0x000216ac
// sAvLastCellY
// LOCAL: SIMCOPTER 0x000216b0
// gPersonSoundBeamSlice
// LOCAL: SIMCOPTER 0x000216b4
// sCheckTotedCount


// Contribution: 3:00024978-00024997 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024978
// ??_C@_0CA@OCDF@couldn?8t?5set?5master?5object?5to?50?$AA@


// Contribution: 3:00024998-000249cc Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024998
// ??_C@_0DF@MDL@trying?5to?5get?5off?5master?5object?5@


// Contribution: 3:000249d0-000249f3 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x000249d0
// ??_C@_0CE@BCHG@I?5thought?5all?5people?5were?5alloca@


// Contribution: 3:000249f4-00024a12 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x000249f4
// ??_C@_0BP@EABK@can?8t?5find?5person?5with?5that?5id?$AA@


// Contribution: 3:00024a14-00024a32 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024a14
// ??_C@_0BP@GAKH@C?3?2Copter?2Source?2X?2Y?2YObject?4h?$AA@


// Contribution: 3:00024a34-00024a53 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024a34
// ??_C@_0CA@JOHG@out?9of?9range?5scurkID?5for?5a?5tile?$AA@
// GLOBAL: SIMCOPTER 0x00024a54
// ??_C@_0CI@FJMN@must?5set?5cell?5location?5before?5wa@


// Contribution: 3:00024a54-00024a7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024a7c
// ??_C@_0CA@BGFC@how?8d?5you?5wake?5up?5past?5the?5max?$DP?$AA@


// Contribution: 3:00024a7c-00024a9b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 


// Contribution: 3:00024a9c-00024abb Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024a9c
// ??_C@_0CA@MKGD@trying?5to?5wake?5up?5already?5awake?$AA@
// GLOBAL: SIMCOPTER 0x00024abc
// ??_C@_0BF@KBDF@y?5and?5x?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024abc-00024ad0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 


// Contribution: 3:00024ad4-00024ae8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024ad4
// ??_C@_0BF@ECJK@x?5and?5y?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024aec-00024b17 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024aec
// ??_C@_0CM@FHJC@why?5positioning?5unlinked?5object?5@
// GLOBAL: SIMCOPTER 0x00024b18
// ??_C@_0BJ@LCNK@rxn?5tree?5id?5out?5of?5range?$AA@


// Contribution: 3:00024b18-00024b30 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 


// Contribution: 3:00024b34-00024b72 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024b34
// ??_C@_0DP@CAPD@?91?5missionid?5for?5other?5than?5ambi@


// Contribution: 3:00024b74-00024b99 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024b74
// ??_C@_0CG@LEML@couldn?8t?5get?5private?5anim?5for?5an@


// Contribution: 3:00024b9c-00024bb5 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024b9c
// ??_C@_0BK@OHDB@must?5set?5body?5before?5anim?$AA@


// Contribution: 3:00024bb8-00024bec Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024bb8
// ??_C@_0DF@BIBF@you?5must?5unlink?5before?5setting?5c@


// Contribution: 3:00024bf0-00024c22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024bf0
// ??_C@_0DD@LLLA@use?5changemission?5only?5when?5pers@


// Contribution: 3:00024c24-00024c3b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024c24
// ??_C@_0BI@MBEM@how?5did?5that?5happen?$DP?$DP?$DP?$DP?$AA@


// Contribution: 3:00024c3c-00024c59 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024c3c
// ??_C@_0BO@EKBK@just?5one?5more?5paranoid?5assert?$AA@


// Contribution: 3:00024c5c-00024c87 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024c5c
// ??_C@_0CM@JKOD@how?5could?5you?5have?5been?5awake?5ye@


// Contribution: 3:00024c88-00024ca8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024c88
// ??_C@_0CB@NMCE@trying?5to?5sleep?5already?5sleeping@


// Contribution: 3:00024cac-00024cc9 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024cac
// ??_C@_0BO@NCHD@can?8t?5simanim?5without?5an?5anim?$AA@


// Contribution: 3:00024ccc-00024cfa Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024ccc
// ??_C@_0CP@EHMM@couldn?8t?5move?5with?5the?5dyn?5objec@


// Contribution: 3:00024cfc-00024d1e Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024cfc
// ??_C@_0CD@GJNN@can?8t?5follow?5master?5with?5no?5mast@


// Contribution: 3:00024d20-00024d3a Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024d20
// ??_C@_0BL@EOGE@following?5master?5unlinked?$DP?$AA@


// Contribution: 3:00024d3c-00024d64 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024d3c
// ??_C@_0CJ@GJOA@stack?5size?5about?5to?5go?5too?5high?5@


// Contribution: 3:00024d68-00024d7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024d68
// ??_C@_0BE@HILD@couldn?8t?5get?5a?5body?$AA@


// Contribution: 3:00024d7c-00024da0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024d7c
// ??_C@_0CF@DHKG@weird?5number?5of?5characters?5shift@


// Contribution: 3:00024da4-00024dc6 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024da4
// ??_C@_0CD@NHHN@c?3?2copter?2source?2x?2objects?2bList@


// Contribution: 3:00024dc8-00024de1 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024dc8
// ??_C@_0BK@HKFL@didn?8t?5make?5obj?5invisible?$AA@


// Contribution: 3:00024de4-00024e22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024de4
// ??_C@_0DP@HCDA@couldn?8t?5add?5new?5to?5thing?9?9didn?8@


// Contribution: 3:00024e24-00024e40 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024e24
// ??_C@_0BN@MPEK@not?5very?5close?5to?5that?5heli?$CB?$AA@


// Contribution: 3:00024e44-00024e6d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024e44
// ??_C@_0CK@BLNM@toted?5object?8s?5master?5not?5this?5o@


// Contribution: 3:00024e70-00024e8d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024e70
// ??_C@_0BO@GDCN@toted?5obj?5not?5medevac?5victim?$CB?$AA@


// Contribution: 3:00024e90-00024eba Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024e90
// ??_C@_0CL@LIPB@must?5have?5thing?5to?5put?5aught?5on?5@


// Contribution: 3:00024ebc-00024ed8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: SIMCOPTER 0x00024ebc
// ??_C@_0BN@OBNK@getting?5distance?5to?5null?5dyn?$AA@


// Contribution: 3:0009e250-000a05a4 Module: 200, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: SIMCOPTER 0x0009e250
// cYObject::sLanguage
// GLOBAL: SIMCOPTER 0x0009e258
// gXTimer
// GLOBAL: SIMCOPTER 0x0009e268
// cYObject::sLocInfo
// GLOBAL: SIMCOPTER 0x0009e2d8
// cYObject::sHitRxnTree
// GLOBAL: SIMCOPTER 0x0009e300
// cYObject::sNeutralMissionLocs
// GLOBAL: SIMCOPTER 0x0009e530
// cYObject::sMoveTable
// GLOBAL: SIMCOPTER 0x0009e590
// cYObject::sErrorFile
// GLOBAL: SIMCOPTER 0x0009e6b0
// cYObject::sSoundChannels
// GLOBAL: SIMCOPTER 0x0009e6d0
// gBodyDebugInfo
// GLOBAL: SIMCOPTER 0x0009f1c0
// cYObject::sStackSize
// GLOBAL: SIMCOPTER 0x0009f1c8
// g_sqrtTable
// GLOBAL: SIMCOPTER 0x0009fb8c
// cYObject::sBehavior
// GLOBAL: SIMCOPTER 0x0009fb90
// LastCameraY
// GLOBAL: SIMCOPTER 0x0009fb94
// LastCameraX
// GLOBAL: SIMCOPTER 0x0009fb98
// cYObject::sInitBhav
// GLOBAL: SIMCOPTER 0x0009fbb8
// cYObject::sFile
// GLOBAL: SIMCOPTER 0x0009fce0
// cYObject::sUnitVectorTable
// GLOBAL: SIMCOPTER 0x0009fd40
// cYObject::sObjects
// GLOBAL: SIMCOPTER 0x0009fed0
// cYObject::sLocType
// GLOBAL: SIMCOPTER 0x000a02d0
// cYObject::sNeutralPersonLocs
// LOCAL: SIMCOPTER 0x000a05a0
// $S73
// LOCAL: SIMCOPTER 0x000a05a4
// $S79
