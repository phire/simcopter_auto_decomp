// Module: Yobject.obj
// Source: C:\Copter\Source\X\Y\Yobject.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: int32_t *;

// Type: long;

// Type: unsigned short;

// Type: class cYObject (forward reference);
class cYObject : public TreeSim, public YObjLang
{
	using DataType = short;
		enum __unnamed {
			kNumData = 48,
			kNumTemp = 8,
			kNumPointers = 4,
		};
	class cYObject::ObjDefHeader{
	public:
		long version;
		short stackSize;
		short baseGraphic;
		short numGraphics;
		short initBhav;
		short toolbarPict;
		short treeTableID;
		short personalityID;
		short type;
		short red;
		short green;
		short blue;
		short _padding2;
	};
		enum MoveErrorCode {
			kMoveError = -1,
			kMoveSuccess = 0,
			kMoveFailTooHigh = 1,
			kMoveFailTooLow = 2,
			kMoveFailNonNeutralTerritory = 3,
			kMoveFailDynObjGeneric = 4,
			kMoveFailDynObjPerson = 5,
			kMoveFailOutOfDynObjRect = 6,
			kMoveFailNoSpeed = 7,
			kMoveFailFinishedMoving = 8,
			kMoveFailStaticObj = 9,
			kMoveFailStackObject = 10,
			kMoveFailUnwalkableLoctype = 11,
			kMoveFailOutOfRoad = 12,
		};
		enum ObjectType {
			kPerson = 0,
			kNumObjectTypes = 1,
		};
public:
	static short sStackSize[1];
	void SetToLoc(struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	void Die();
		enum MissionUpdates {
			kPickedUp = 0,
			kOuttaHere = 1,
			kReportNewPickupLocation = 2,
			kJoinedRiot = 3,
			kDrivenFromRiot = 4,
			kLeftRiotOfOwnVolition = 5,
			kReportNewLocation = 6,
			kMedVicToted = 7,
			kMedVicPickedUp = 8,
			kPersonCaught = 9,
		};
		enum Checks {
			kHeliLanded = 0,
			kHeliLow = 1,
			kMasterObjectLow = 2,
			kMasterObjectMovingSlowly = 3,
			kStackObjectLow = 4,
		};
		enum CompareMyLocWith {
			kMissionDestLoc = 0,
			kStackPointer = 1,
			kHeli = 2,
			kBucket = 3,
			kLastHitter = 4,
			kClosestMedevacVictim = 5,
			kClosestCriminal = 6,
			k_pad_MotherShipLoc = 7,
			kClosestCop = 8,
			kAvatarClose = 9,
			kClosestAmbulance = 10,
			kClosestCopCar = 11,
			kClosestFiretruck = 12,
			kClosestCriminalCar = 13,
			kClosestAmbient = 14,
		};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*);
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, struct Point3d*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short sInitBhav[14];
	static short sHitRxnTree[20];
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	long fLastInterrupt;
		enum LocationType {
			kOutOfCity = -1,
			kLocNoInfo = 0,
			kLocUnknown = 1,
			kNothing = 2,
			kForest = 3,
			kRubble = 4,
			kSmallPark = 5,
			kWireStuff = 6,
			kCarRoad = 7,
			kCarBridge = 8,
			kTrainTrack = 9,
			kDomestic = 10,
			kCommercial = 11,
			kWhiteCollarBusiness = 12,
			kBlueCollarBusiness = 13,
			kNumLocTypes = 14,
		};
public:
	static enum cYObject::LocationType sLocType[256];
		enum SearchType {
			kSearchEdgeGround = 0,
			kSearchAnywhereGround = 1,
			kSearchRoof = 2,
			kSearchAnywhereAtAll = 3,
		};
	class cYObject::LocationInfo{
	public:
		enum cYObject::SearchType searchType;
		short maxNormalLoiterers;
	};
public:
	static struct cYObject::LocationInfo sLocInfo[14];
	struct _DYOBJ_INST* SearchForDynObj(short, short, struct _DYOBJ_INST*);
	short GetDirectionTo(struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(struct _CELL_INFO*, enum cYObject::LocationType);
	// calltype: NearC
	static struct Point3d GetPos(unsigned char, unsigned char, int32_t, int32_t);
	// calltype: NearC
	static struct Point3d GetPos(struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	class cYObject::MoveInfo{
	public:
		enum cYObject::LocationType* locType;
		char * roadDir;
		struct _DYOBJ_INST* dyBlock;
		struct _STOBJ_INST* stBlock;
	};
	class cYObject::_ControlInput{
	public:
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
	class cYObject::_ControlInput{
	public:
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
private:
	static unsigned short sInited;
	static class cYObject* sObjects[100];
	static enum cYObject::LocationType sNeutralPersonLocs[18][10];
	static enum cYObject::LocationType sNeutralMissionLocs[14][10];
	static class cYObject* sList;
	static class NResFile sFile;
	static class ResFile sErrorFile;
public:
	static class YObjLang* sLanguage;
	static class Behavior* sBehavior;
	static struct Point3d sMoveTable[8];
	static struct Point3d sUnitVectorTable[8];
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, struct Point3d, class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	class cYObject* GetClosest(enum MissionSupertype, enum MissionType, unsigned short, short *);
	// calltype: NearC
	static class cYObject* GetObjectA(short);
	// calltype: NearC
	static class cYObject* GetObjectA(struct _DYOBJ_INST*);
	class cYObject* GetPersonWithMaster(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	long fMissionID;
	void PutOnGround();
	void Unlink();
	unsigned short CellIsSet();
	unsigned short fbLinked;
	unsigned short Linked();
	unsigned short fInited;
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	struct _DYOBJ_INST fDyn;
	unsigned char fCellX;
	unsigned char fCellY;
	unsigned long fBodyName;
	class cCopterBody* fBody;
	unsigned long fAnimName;
	class cCopterAnim* fAnim;
	short fFace;
	void SetFace(short);
	struct Point3d fLastMasterLoc;
	unsigned short SetMaster(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static struct _DYOBJ_INST* GetFirstDynObj(struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	unsigned short fSimulate;
	class Behavior* fBehavior;
	class cYObject* fNext;
	short fID;
	short _pad;
	short fTemp[8];
	short fData[48];
	unsigned char * fPointers[4];
	short fIterations;
	short _pad2;
	short fDirInc;
	struct cYObject::ObjDefHeader fDefinition;
		enum __unnamed {
			kMasterObject = 0,
			kLastHitterObject = 1,
		};
		enum __unnamed {
			kDirection = 0,
			kAwake = 1,
			kHeightCanJump = 2,
			kPersonType = 3,
			kMissionType = 4,
			kMissionSupertype = 5,
			kAnimFrame = 6,
			kObjectID = 7,
			kRiotVal = 8,
			kVisible = 9,
			kLastRiotVal = 10,
			kNearMedFar = 11,
			kLastHitterMsg = 12,
			kMegaphoneMessage = 13,
			kInRxnTree = 14,
			kDead = 15,
			kColorIndexShift = 16,
			kDynAnim = 17,
			kSpeed = 18,
			kOnlyOnRoad = 19,
			kMoveOnlyNeutrally = 20,
			kMoveNoMatterWhat = 21,
			kSpecificToScurkID = 22,
			kCaptured = 23,
			kStartingObject = 24,
			kSoundChannel = 25,
			kCurrentSound = 26,
			kDynSound = 27,
			kSoundFrequencyAdj = 28,
			kInitBhav = 29,
			kLastRxnTree = 30,
		};
protected:
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 16
	intro void HandleOverflow();
	// vtable: 20
	intro short InterpValue(short, short, short **);
	enum TreeSim::ReturnCode TryExpression(struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(struct Point3d, int32_t, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static char GetRoadDir(struct Point3d);
		enum SoundNum {
			kSNone = -1,
			kSAssertion = 1,
			kSDunno = 2,
			kSHoHum = 3,
			kSQuery = 4,
			kSSad = 5,
			kSTitter = 6,
			kSYouGoGirl = 7,
			kSGrunt = 8,
			kSWhoa = 9,
			kSHey = 10,
			kSHiThere = 11,
			kSAaah = 12,
			kSAck = 13,
			kSFeet = 14,
			kSYrUnderArrest = 15,
			kSGimmeYrCash = 16,
			kSSinisterChuckle = 17,
			kSSayYrKindaHot = 18,
		};
public:
	// calltype: NearC
	static short DistributeSoundChannels(short, short);
	unsigned short PlaySoundA(enum cYObject::SoundNum, unsigned short);
	// calltype: NearC
	static void PhaseAndBeamSoundChannels();
	static short sSoundChannels[15];
	// calltype: NearC
	static short ExtraSoundChannelForSure();
	// calltype: NearC
	static short RegSoundChannel();
	// calltype: NearC
	static void StopAllSounds();
	void StopSound();
	void ClearSoundChannel();
	short GetActualSoundChannel();
	// calltype: NearC
	static short GetActualSoundChannel(short);
	void SetSoundChannel(short);
	// calltype: NearC
	static short GetSRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t GetRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _DYOBJ_INST* GetDynObj(struct _DYOBJ_INST*, struct Point3d, int32_t, struct _DYOBJ_INST*, struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _STOBJ_INST* GetStaticObj(struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(struct Point3d, int32_t, struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(struct _DYOBJ_INST*);
	unsigned short CloseTo(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetFirst();
	// calltype: NearC
	static class cYObject* GetFirst(short, short);
	// calltype: NearC
	static class cYObject* GetFirstInvisible(short);
	class cYObject* PutTotedMedVicOnHeli();
	class cYObject* PutTotedMedVicOn(struct _DYOBJ_INST*);
	unsigned short SetStartingObject(struct _DYOBJ_INST*);
	class cYObject* DropToted();
	class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	// vtable: 24
	intro void Reset();
	virtual void ~cYObject();
protected:
	virtual void Error(short);
	void cYObject(short, class Behavior*, struct Point3d, short);
public:
	struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static class ResFile* GetGlobalFile();
	// calltype: NearC
	static class YObjLang* GetLanguage();
	// calltype: NearC
	static class ResFile* GetErrorFile();
	short GetID();
	struct Point3d GetLocation();
	class Behavior* GetBehavior();
	void Draw(struct VRBlit*);
	float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	class cYObject* GetNext();
	void DynEffects(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	void DynEffectsFixed(int32_t, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	using PrimProc = enum TreeSim::ReturnCode (*)(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
public:
	static enum TreeSim::ReturnCode (*PrimProcs[64])(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIdle(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIdle(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetAnim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetAnim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAttr(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAttr(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalk(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalk(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetBody(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetBody(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sRandom(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iRandom(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToAndGrabOntoStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateMyMission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateMyMission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForTrue(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForTrue(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCompareMyLocWith(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCompareMyLocWith(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSelfDecommission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSelfDecommission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOffMasterObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOffMasterObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocType(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocType(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocTypeNeutral(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocTypeNeutral(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCanJumpOffHere(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCanJumpOffHere(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForSpotlightInMyCell(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForSpotlightInMyCell(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIncrementRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIncrementRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetSurroundingRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetSurroundingRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisScurkID(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisScurkID(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGosubToInitbhav(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGosubToInitbhav(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAdjustRadiusForRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAdjustRadiusForRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sJoinRiot(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iJoinRiot(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetDirection(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetDirection(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOutOfRoadEtc(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOutOfRoadEtc(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGenerateMedevacAndSetSelfAsVictim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnToNearbyFire(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnToNearbyFire(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDie(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDie(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutObjIntoTreeNum(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutObjIntoTreeNum(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimVisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimVisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimInvisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMeMasterOfStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMeMasterOfStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyStackObjectVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyStackObjectVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutTotedMedVicOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutTotedMedVicOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTakeAnyMedVicOffStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetNumSpacesOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetNumSpacesOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDropToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDropToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimPickedUp(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimPickedUp(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCloseToHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCloseToHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetMyExpression(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetMyExpression(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetHeliSpeedPlusDamage(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetHeliSpeedPlusDamage(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisCellSafe(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisCellSafe(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPlaySound(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPlaySound(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnHeliIfHarnessRaised(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAmIOnHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAmIOnHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowFieryProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowFieryProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTellStartingObjectTrueOrFalse(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutMyCarInStack(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutMyCarInStack(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDoIHaveAMaster(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDoIHaveAMaster(struct TreeSim::StackElem*, struct Behavior::Node*);
};

// Type: int32_t;

// Type: struct _DYOBJ_INST (forward reference);

// Type: short;

// Type: struct Point3d (forward reference);

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _CELL_INFO (forward reference);

// Type: enum cYObject::SearchType;

// Type: enum cYObject::LocationType;

// Type: char[80];

// Type: double;

// Type: struct cYObject::MoveInfo;
class cYObject::MoveInfo{
public:
	enum cYObject::LocationType* locType;
	char * roadDir;
	struct _DYOBJ_INST* dyBlock;
	struct _STOBJ_INST* stBlock;
};

// Type: enum MissionSupertype;

// Type: unsigned char;

// Type: struct VRBlit (forward reference);

// Type: class cAvatar (forward reference);
class cAvatar : public cYObject
{
public:
	void cAvatar(struct Point3d);
	// calltype: NearC
	static class cAvatar* MakeAvatar();
	struct cYObject::_ControlInput fUserControl;
	void RotateMatrixAndYawForEngine();
	void GetControlInput();
	void Start(int32_t, int32_t, int32_t, int32_t);
	void Simulate();
	enum cYObject::MoveErrorCode AvatarMove(struct cYObject::MoveInfo*);
	virtual void Reset();
	void ResetView();
	short GetScurkID();
};

// Type: struct _HELI_DATA (forward reference);

// Type: enum PersonType;

// Type: enum MissionType;

// Type: struct _LZ_INFO (forward reference);

// Type: struct Rect;
class Rect{
public:
	short top;
	short left;
	short bottom;
	short right;
};

// Type: struct _SYSTEMTIME;
class _SYSTEMTIME{
public:
	unsigned short wYear;
	unsigned short wMonth;
	unsigned short wDayOfWeek;
	unsigned short wDay;
	unsigned short wHour;
	unsigned short wMinute;
	unsigned short wSecond;
	unsigned short wMilliseconds;
};

// Type: char[260];

// Type: char *;

// Type: struct _MISSION_PARMS;
class _MISSION_PARMS{
public:
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: enum cYObject::SoundNum;

// Type: class DigitalSound (forward reference);
class DigitalSound : public Sound
{
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	struct IDirectSoundBuffer* lpSound[8];
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long IsPlaying(struct IDirectSoundBuffer**);
public:
	virtual long IsPlaying();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: struct tagPassengerInfo;
class tagPassengerInfo{
public:
	long lPassengerFace;
	long lPassengerExpression;
	long lPassengerHealth;
	long lPassengerID;
	long lPassengerSeatUsed;
};

// Type: struct cYObject::MoveInfo (forward reference);

// Type: enum cYObject::MoveErrorCode;

// Type: struct Point3D;
class Point3D{
public:
	double x;
	double y;
	double z;
};

// Type: unsigned long;

// Type: class Behavior (forward reference);
class Behavior{
protected:
	class NResFile* fGlobFile;
	class NResFile* fPrivFile;
	class StdResLoader* fGlobalTrees;
	class StdResLoader* fPrivateTrees;
	class Language* fLanguage;
	void (*fSwizzler)(void * __ptr32, long);
		enum __unnamed {
			kPrimitiveBase = 0,
			kPrimitiveMax = 255,
			kActionBase = 256,
			kGlobalBase = 256,
			kGlobalMax = 4095,
			kPrivateBase = 4096,
			kPrivateMax = 8191,
			kSemiGlobalBase = 8192,
			kSemiGlobalMax = 30000,
			kTreeMax = 30000,
			kPrimitives = 0,
			kGlobalTrees = 1,
			kPrivateTrees = 2,
			kSemiGlobalTrees = 3,
			kMaxTreeClass = 3,
		};
	class Behavior::NodeParameter{
	public:
		short p1;
		short p2;
		short p3;
		short p4;
	};
	class Behavior::Node{
	public:
		short treeID;
		short primCode;
		char trueTrans;
		char falseTrans;
		struct Behavior::NodeParameter param;
	};
		enum __unnamed {
			kUndefined = -3,
			kPopOutTrue = -2,
			kPopOutFalse = -1,
		};
	class Behavior::Tree{
	public:
		short numNodes;
		struct Behavior::Node nodes[1];
	};
public:
	void Behavior(class Language*, class NResFile*, class NResFile*);
	void ~Behavior();
	void GetNode(short, short, struct Behavior::Node*);
	// vtable: 0
	intro const struct Behavior::Node* GetNodeRef(short, short);
	// vtable: 4
	intro void GetNodeText(short, short, unsigned char *);
	void GetNodeText(struct Behavior::Node*, unsigned char *);
	// vtable: 8
	intro void GetTreeName(short, unsigned char *);
	short CountPrimitives();
	class Language* GetLanguage();
	class ResFile* GetPrivFile();
	class ResFile* GetGlobFile();
	// vtable: 12
	intro class ResFile* GetResFile(short);
	// calltype: NearC
	static short GetBaseID(short);
	// calltype: NearC
	static short GetMaxID(short);
	// calltype: NearC
	static short GetTreeClass(short);
	// calltype: NearC
	static void GetClassNameA(short, unsigned char *);
	using ParamSwizzleProc = void (*)(short, struct Behavior::NodeParameter*);
public:
	// calltype: NearC
	static void StdTreeSwizzle(struct Behavior::Tree*, long, void (*)(short, struct Behavior::NodeParameter*));
	// calltype: NearC
	static unsigned short IsDefaultParam(struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SetDefaultParam(struct Behavior::NodeParameter*);
};

// Type: struct VRFaceInfo;
class VRFaceInfo{
public:
	int32_t Face;
	int32_t Verts;
	int32_t Attribute;
	int32_t Plotter;
	struct VRBmpHdr* Bitmap;
	int32_t * VertList;
	struct MapVert* MapVList;
	struct MapVert* BarryPtr;
};

// Type: char[20];

// Type: float;

// Type: struct BodyDebugInfo;
class BodyDebugInfo{
public:
	long screenx;
	long screeny;
	char text[20];
};

// Type: class CBackBuffer (forward reference);
class CBackBuffer : public IBackBuffer
{
public:
	void CBackBuffer(long, long, const struct SparkalColor*);
	void CBackBuffer(char *);
	void CBackBuffer();
	// vtable: 40
	intro void InitializeMemberVariables();
	void ~CBackBuffer();
	unsigned long Load();
	virtual unsigned long Lock();
	virtual unsigned long Unlock();
	// calltype: NearC
	static int32_t GetPaletteFromImage(char *, struct SparkalColor*);
	virtual unsigned long Swap(class CSparkalWindow*, long, long);
	virtual unsigned long SwapRect(class CSparkalWindow*, long, long, long, long, long, long);
	virtual unsigned long StretchRect(class CSparkalWindow*, long, long, long, long, long, long, long, long);
	// vtable: 44
	intro unsigned long Compose(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	virtual unsigned long Compose(class IFlatImage*, long, long, long, long, long, long);
	virtual unsigned long StretchCompose(class IFlatImage*, long, long, long, long, long, long, long, long);
	// vtable: 48
	intro unsigned long StretchCompose(class IFlatImage*, const struct SparkalRect&, const struct SparkalRect&);
	// vtable: 52
	intro unsigned long Duplicate(class CBackBuffer*, int32_t);
	// vtable: 56
	intro unsigned long ComposeNoClip(class IFlatImage*, const struct SparkalPoint&, const struct SparkalRect&);
	// vtable: 60
	intro unsigned long ComposeNoClip(class IFlatImage*, long, long, long, long, long, long);
	void UpdatePalette(long, long, const struct SparkalColor*);
	virtual void SetTransparentColor(int32_t, long);
	unsigned long GetTransparentColor(long&);
	unsigned long SetFont(class MFont*);
	void SetFontColor(struct SparkalColor&);
	void SetFontIndex(int32_t);
	void SetColor(struct SparkalColor&);
	void SetColorIndex(int32_t);
	// vtable: 64
	intro unsigned long DrawLine(long, long, long, long, long);
	// vtable: 68
	intro unsigned long FillRect(long, const struct SparkalRect*);
	// vtable: 72
	intro unsigned long DrawBufferText(char *, long, unsigned long, const class MRect&, class MFont*);
	// vtable: 76
	intro unsigned long DrawBufferText(char *, unsigned long, long *, long *, long *, long *, class MFont*);
	// vtable: 80
	intro unsigned long DrawLineUnclipped(long, long, long, long, long);
	// vtable: 84
	intro unsigned long DrawLineClipped(long, long, long, long, long);
	// vtable: 88
	intro unsigned long DrawRectangleOutline(const struct SparkalRect&, long);
	// vtable: 92
	intro unsigned long DrawRectangleOutlineUnclipped(const struct SparkalRect&, long);
	char * szFilePath;
protected:
	int32_t bSurfacePrimary;
	int32_t bSurfaceTransparent;
	class MFont* mFont;
	struct SparkalColor colorFontCurrent;
	struct SparkalColor colorCurrent;
	int32_t nColorIndexFontCurrent;
	int32_t nColorIndexCurrent;
	int32_t nColorIndexTransparent;
};

// Type: int32_t *[10];

// Type: int32_t[4][4];

// Type: struct _STOBJ_INST (forward reference);

// Type: class FlatResFile (forward reference);
class FlatResFile : public FlatFile
{
protected:
	class ResMap* fMap;
	long fError;
	short _alignPad;
public:
	void FlatResFile();
	virtual void ~FlatResFile();
	void LoadResMap(void * __ptr32*, short *, long *);
	unsigned short FileEquals(class FlatResFile*);
	virtual long Open(unsigned char *);
	virtual long Open(char *);
	long OpenFromName();
	virtual long Close();
	short CountTypes();
	unsigned long GetIndType(short);
	short Count(unsigned long);
	void * __ptr32 GetByID(unsigned long, short, void (*)(void * __ptr32, long));
	void * __ptr32 GetByName(unsigned long, unsigned char *, void (*)(void * __ptr32, long));
	void * __ptr32 GetByIndex(unsigned long, short, void (*)(void * __ptr32, long));
	void GetName(void * __ptr32, unsigned char *);
	void GetID(void * __ptr32, short *);
	unsigned long GetResType(void * __ptr32);
	void Release(void * __ptr32);
	void Detach(void * __ptr32);
	void Load(void * __ptr32);
	long GetError();
	void Add(void * __ptr32, unsigned long, short, unsigned char *);
	void ExclusiveAdd(void * __ptr32, unsigned long, short, unsigned char *);
	void FindUniqueName(unsigned long, unsigned char *);
	short FindUniqueID(unsigned long);
	void Write(void * __ptr32);
	void Remove(void * __ptr32);
	void GetString(unsigned char *, short, short);
	// calltype: NearC
	static short CheckForLeaks();
};

// Type: uint32_t;

// Type: class PtrList<StdResLoader> (forward reference);
class PtrList<StdResLoader>{
	class PtrList<StdResLoader>::Iter{
	private:
		class PtrList<StdResLoader>* fObject;
		struct PtrList<StdResLoader>::PtrNode* fCur;
	public:
		void Iter(class PtrList<StdResLoader>*);
		class StdResLoader* Current();
		void Next();
		void Reset();
		class StdResLoader* First();
	};
	class PtrList<StdResLoader>::PtrNode{
	public:
		class StdResLoader* data;
		struct PtrList<StdResLoader>::PtrNode* next;
	};
private:
	struct PtrList<StdResLoader>::PtrNode* fFirst;
	short fCount;
public:
	void PtrList<StdResLoader>();
	void ~PtrList<StdResLoader>();
	unsigned short Contains(class StdResLoader*);
	void RemoveAll();
	void Remove(class StdResLoader*);
	long Count();
	void Add(class StdResLoader*);
	class StdResLoader* GetByIndex(long);
	class StdResLoader* GetByOrder(long);
};

// Type: class ResFile (forward reference);
class ResFile : public FlatResFile
{
public:
	long OpenFromOtherFile(class ResFile*);
};

// Type: class YObjLang (forward reference);
class YObjLang : public Language
{
public:
	void YObjLang(class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(class Behavior*, struct Behavior::Node*, unsigned char *);
	virtual void GetPrimName(short, unsigned char *);
	virtual unsigned short IsSingleExit(struct Behavior::Node*);
	// calltype: NearC
	static void SwizzleTreeParam(short, struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler();
		enum __unnamed {
			kIdle = 0,
			kSetAnim = 1,
			kAttr = 2,
			_kWhatsAhead = 3,
			kWalk = 4,
			_kRunPad = 5,
			kSetBody = 6,
			kRandom = 7,
			_kGetDirDistToFirst = 8,
			_kGetDirDistToPerson = 9,
			_kRoadDir = 10,
			_kSearchForDyn = 11,
			kWalkToAndGrabOntoStackObject = 12,
			kUpdateMyMission = 13,
			kCheckForTrue = 14,
			kCompareMyLocWith = 15,
			kSelfDecommission = 16,
			kGetOffMasterObject = 17,
			kTurnTowardsStackObject = 18,
			kIsThisLocType = 19,
			kIsThisLocTypeNeutral = 20,
			kCanJumpOffHere = 21,
			kCheckForSpotlightInMyCell = 22,
			kIncrementRiotVal = 23,
			kGetSurroundingRiotVal = 24,
			kIsThisScurkID = 25,
			kGosubToInitbhav = 26,
			kAdjustRadiusForRiotVal = 27,
			kJoinRiot = 28,
			kSetDirection = 29,
			kThrowProjectile = 30,
			kTurnFromStackObject = 31,
			kTurnFromLastHitter = 32,
			kTurnTowardsLastHitter = 33,
			kGetOutOfRoadEtc = 34,
			kGenerateMedevacAndSetSelfAsVictim = 35,
			kTurnToNearbyFire = 36,
			kDie = 37,
			kWalkToStackObject = 38,
			kPutObjIntoTreeNum = 39,
			kVisitOz = 40,
			_kNotUsed = 41,
			kMakeMyMedevacVictimVisible = 42,
			kMakeMyMedevacVictimInvisible = 43,
			kMakeMeMasterOfStackObject = 44,
			kMakeMyStackObjectVisitOz = 45,
			kPutTotedMedVicOnStackObject = 46,
			kTakeAnyMedVicOffStackObject = 47,
			kGetOnStackObject = 48,
			kUpdateStackVictimToted = 49,
			kGetNumSpacesOnStackObject = 50,
			kDropToted = 51,
			kUpdateStackVictimPickedUp = 52,
			kCloseToHeli = 53,
			kSetMyExpression = 54,
			kGetHeliSpeedPlusDamage = 55,
			kIsThisCellSafe = 56,
			kPlaySound = 57,
			kGetOnHeliIfHarnessRaised = 58,
			kAmIOnHeli = 59,
			kThrowFieryProjectile = 60,
			kTellStartingObjectTrueOrFalse = 61,
			kPutMyCarInStack = 62,
			kDoIHaveAMaster = 63,
			kNumPrimitives = 64,
		};
public:
	virtual short CountPrimitives();
		enum __unnamed {
			kMyself = 0,
			kTreeParam = 1,
			kTargetObj = 2,
			kMyData = 3,
			kTreeParamData = 4,
			kTargetObjData = 5,
			kSimGlobals = 6,
			kImmediate = 7,
			kTempVars = 8,
			kStackVars = 9,
			kStackObject = 10,
			kTempTempVars = 11,
			kTreeTableValue = 12,
			kNumOwners = 13,
		};
	class YObjLang::OwnerDataParam{
	public:
		short owner1;
		short data1;
		short owner2;
		short data2;
	};
	class YObjLang::TurnToFireParam{
	public:
		short xdistloc;
		short ydistloc;
	};
	class YObjLang::GetOutOfRoadParam{
	public:
		short decTemp;
	};
	class YObjLang::SetDirectionParam{
	public:
		short dirTemp;
	};
	class YObjLang::CheckForSpotParam{
	public:
		short brightnessTemp;
		short dirToHeliTemp;
	};
	class YObjLang::GetSurroundingRiotValParam{
	public:
		short distTemp;
		short dirToConcTemp;
		short riotValTemp;
		short numPeopleCountedTemp;
	};
	class YObjLang::IncrementRiotValParam{
	public:
		short riotValLiteral;
	};
	class YObjLang::IsThisScurkIDParam{
	public:
		short scurkIDLiteral;
	};
	class YObjLang::IsThisLocTypeParam{
	public:
		short locTypeLiteral;
	};
	class YObjLang::UpdateMyMissionParam{
	public:
		short updateLiteral;
	};
	class YObjLang::CheckForTrueParam{
	public:
		short whatLiteral;
	};
	class YObjLang::CompareMyLocWithParam{
	public:
		short withWhatLiteral;
		short distData;
		short distOwner;
	};
	class YObjLang::WalkAndGrabParam{
	public:
		short decTemp;
		short dynAnimBoolean;
	};
	class YObjLang::SearchForDynParam{
	public:
		short searchdynobjtypetemp;
		short onlyonmasterboolean;
		short numcellstospiral;
	};
	class YObjLang::IdleParam{
	public:
		short decTemp;
	};
	class YObjLang::SetAnimParam{
	public:
		unsigned long animname;
	};
	class YObjLang::SetBodyParam{
	public:
		unsigned long bodyname;
	};
	class YObjLang::WalkRunParam{
	public:
		char decTemp;
		char onlyNeutralBoolean;
		char moveFailTemp;
		char newLocTemp;
		char roadDirTemp;
		char dynAnimBoolean;
		char speedTemp;
	};
	class YObjLang::RandomParam{
	public:
		short destTemp;
		short rangeData;
		short rangeOwner;
	};
	class YObjLang::RoadDirParam{
	public:
		short dirTemp;
		short distAheadData;
		short distAheadOwner;
	};
	class YObjLang::DirDistFirstParam{
	public:
		short dirToTemp;
		short distToTemp;
		short whatData;
		short whatOwner;
	};
	class YObjLang::DirDistPersonParam{
	public:
		short dirToTemp;
		short distToTemp;
		short whoData;
		short whoOwner;
	};
	class YObjLang::AttrParam{
	public:
		short lhsData;
		short rhsData;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner;
	};
		enum __unnamed {
			kGreaterThan = 0,
			kLessThan = 1,
			kEquals = 2,
			kIncrement = 3,
			kDecrement = 4,
			kSetValue = 5,
			kTimesEq = 6,
			kDivideEq = 7,
			kIsFlagSet = 8,
			kSetFlag = 9,
			kClearFlag = 10,
			kNumOps = 11,
		};
	class YObjLang::MiscParam{
	public:
		short m1;
		short m2;
		short m3;
		short m4;
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// union YObjLang::Param Param
		enum TreeNum {
			kNoTree = -1,
			kSpotlightTree = 900,
			kMegaphoneTree = 901,
			kOuchTree = 902,
			kDieTree = 903,
			kRunTree = 904,
			kRunOrSwoonTree = 905,
			kSwoonTree = 906,
		};
		enum __unnamed {
			kWeightStringsID = 140,
			kPrimitiveStringsID = 139,
			kDataLabelsID = 129,
			kDataBase = 1,
			kGlobalBase = 33,
			kOwnerStringsID = 132,
			kNewOwnerBase = 1,
			kMacroDescriptionStrings = 133,
			kPrimMacroBase = 1,
			kMotiveStringsID = 134,
			kMiscStringsID = 135,
			kDontCare = 1,
			kSaveChanges = 2,
			kMaxEntryLabel = 3,
			kBehStringsID = 128,
			kPrimBase = 1,
			kOwnerBase = 33,
			kGosubStr = 65,
			kOpenParen = 66,
			kForType = 67,
			kRadius = 68,
			kFromZeroTo = 69,
			kInto = 70,
			kDistance = 71,
			kStack = 72,
			kUseTempVars = 73,
			kCloseParen = 74,
			kTreetemp = 75,
			kObjtemp = 76,
			kThisObj = 77,
			kAlertType = 78,
			kCheckTreeID = 79,
			kActionTreeID = 80,
			kForAction = 81,
			kEqualStr = 82,
			kTree = 83,
			kRate = 84,
			kTo = 85,
			kForNeed = 86,
			kSel = 87,
			kPairAction = 88,
			kToCheck = 89,
			kSet = 90,
			kToNeed = 91,
			kUpdateNeed = 92,
			kToIndex = 93,
			kCheck = 94,
			kAct = 95,
			kUntil = 96,
			kNot = 97,
			kClear = 98,
			kFor = 99,
			kByAmount = 100,
			kOpBase = 117,
			kTypeBase = 143,
			kBaseTreeBase = 164,
		};
};

// Type: void (void * __ptr32, long);

// Type: class vector<char> (forward reference);
class vector<char>{
	using vector_allocator = class allocator<char>;
	using value_type = char;
	using pointer = char *;
	using iterator = char *;
	using const_iterator = char *;
	using reference = char&;
	using const_reference = const char&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<char const *,char,char const &,int>;
	using reverse_iterator = class reverse_iterator<char *,char,char &,int>;
protected:
	static class allocator<char> static_allocator;
	char * start;
	char * finish;
	char * end_of_storage;
	void insert_aux(char *, const char&);
public:
	char * begin();
	char * begin();
	char * end();
	char * end();
	class reverse_iterator<char const *,char,char const &,int> rbegin();
	class reverse_iterator<char *,char,char &,int> rbegin();
	class reverse_iterator<char const *,char,char const &,int> rend();
	class reverse_iterator<char *,char,char &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const char& operator[](uint32_t);
	char& operator[](uint32_t);
	void vector<char>(char *, char *);
	void vector<char>(const class vector<char>&);
	void vector<char>(uint32_t, const char&);
	void vector<char>();
	void ~vector<char>();
	class vector<char>& operator=(const class vector<char>&);
	void reserve(uint32_t);
	const char& front();
	char& front();
	const char& back();
	char& back();
	void push_back(const char&);
	void swap(class vector<char>&);
	void insert(char *, uint32_t, const char&);
	void insert(char *, char *, char *);
	char * insert(char *, const char&);
	void pop_back();
	void erase(char *, char *);
	void erase(char *);
};

// Type: struct TreeSim::StackElem (forward reference);
class TreeSim::StackElem{
public:
	short treeID;
	short nodeNum;
	short objectID;
	short _pad;
	unsigned char * objectPtr;
	short locals[4];
	class Behavior* pBehavior;
	void GetTreeName(unsigned char *);
};

// Type: struct Behavior::Node (forward reference);

// Type: enum TreeSim::ReturnCode;



// Contribution: 1:00142f70-00150d97 Module: 200, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00543f70
// $E75

// FUNCTION: COPTER_D 0x00543f8a
// $E71

// FUNCTION: COPTER_D 0x005440a0
// $E74

// FUNCTION: COPTER_D 0x005440bd
// $E72

// FUNCTION: COPTER_D 0x005440f4
// $E81

// FUNCTION: COPTER_D 0x0054410e
// $E77

// FUNCTION: COPTER_D 0x005441c8
// $E80

// FUNCTION: COPTER_D 0x005441e5
// $E78

// FUNCTION: COPTER_D 0x00544262
void RemoveAvatarFromBuilding() {
// LINE 133:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 134:
	__asm        cmp    dword ptr ds:[0x598EB8], 0xFFFFFFFF;
	__asm        je     near ptr 0x0054427F;
// LINE 135:
	__asm        mov    dword ptr ds:[0x598EB8], 0xFFFFFFFF;
// LINE 140:
	__asm        jmp    near ptr 0x00544284;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00544289
// $E86

// FUNCTION: COPTER_D 0x005442a3
// $E83

// FUNCTION: COPTER_D 0x0054430d
// $E85

// FUNCTION: COPTER_D 0x0054432a
// $E84

// FUNCTION: COPTER_D 0x0054433f
void JacquesGetDebugData(int32_t * missionawake, int32_t * ambientawake, int32_t * failedtobeam, int32_t * numbeamed, int32_t * beamslices, int32_t * forwardweight) {
// LINE 149:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 150:
	__asm        jmp    near ptr 0x0054434D;
	__asm        cmp    dword ptr ds:[0x63525C], 0;
	__asm        jne    near ptr 0x005443E0;
// LINE 151:
	__asm        jmp    near ptr 0x0054435F;
	__asm        cmp    dword ptr ds:[0x63525C], 0;
	__asm        je     near ptr 0x00544371;
	__asm        jmp    near ptr 0x005443E0;
	__asm        cmp    dword ptr ds:[0x635258], 1;
	__asm        jne    near ptr 0x00544393;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x63525C], eax;
	__asm        jmp    near ptr 0x005443DB;
	__asm        jmp    near ptr 0x005443DB;
	__asm        cmp    dword ptr ds:[0x635258], 0;
	__asm        jne    near ptr 0x005443C2;
	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ds:[0x63525C], eax;
	__asm        jmp    near ptr 0x005443DB;
	__asm        jmp    near ptr 0x005443DB;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x63525C], eax;
	__asm        jmp    near ptr 0x005443DB;
	__asm        jmp    near ptr 0x005443E0;
// LINE 152:
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        mov    ecx, missionawake;
	__asm        mov    [ecx], eax;
// LINE 153:
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        mov    ecx, ambientawake;
	__asm        mov    [ecx], eax;
// LINE 154:
	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, word ptr ds:[0x5B8688];
	__asm        sub    eax, ecx;
	__asm        mov    ecx, failedtobeam;
	__asm        mov    [ecx], eax;
// LINE 155:
	__asm        movsx  eax, word ptr ds:[0x5B868C];
	__asm        mov    ecx, numbeamed;
	__asm        mov    [ecx], eax;
// LINE 156:
	__asm        movsx  eax, word ptr ds:[0x5B8648];
	__asm        mov    ecx, forwardweight;
	__asm        mov    [ecx], eax;
// LINE 157:
	__asm        movsx  eax, word ptr ds:[0x5B8644];
	__asm        mov    ecx, beamslices;
	__asm        mov    [ecx], eax;
// LINE 158:
	__asm        mov    eax, ds:[0x635260];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0054443C;
	__asm        cmp    dword ptr ds:[0x63525C], 0;
	__asm        je     near ptr 0x005444BF;
	__asm        cmp    dword ptr ds:[0x635258], 1;
	__asm        jne    near ptr 0x00544469;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005444AD;
	__asm        jmp    near ptr 0x005444AD;
	__asm        cmp    dword ptr ds:[0x635258], 0;
	__asm        jne    near ptr 0x00544496;
	__asm        lea    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005444AD;
	__asm        jmp    near ptr 0x005444AD;
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005444AD;
	__asm        mov    eax, [ebp-0x24];
	__asm        sub    eax, ds:[0x63525C];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        add    [ebp-0x14], eax;
	__asm        cmp    dword ptr ds:[0x635258], 0;
	__asm        jne    near ptr 0x00544503;
	__asm        cmp    dword ptr ds:[0x635264], 0;
	__asm        je     near ptr 0x00544503;
	__asm        mov    eax, ds:[0x635264];
	__asm        push   eax;
	__asm        push   0xF4240;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C372C];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0x1F4;
	__asm        jb     near ptr 0x00544544;
	__asm        jmp    near ptr 0x00544522;
	__asm        cmp    dword ptr [ebp-0x14], 0x1F4;
	__asm        jb     near ptr 0x00544544;
	__asm        jmp    near ptr 0x00544522;
	__asm        cmp    dword ptr [ebp-0x28], 0x1F4;
	__asm        jb     near ptr 0x00544544;
// LINE 159:
	__asm        mov    dword ptr ds:[0x635260], 0;
	__asm        mov    dword ptr ds:[0x63525C], 0;
	__asm        jmp    near ptr 0x0054453B;
// LINE 160:
	__asm        mov    word ptr ds:[0x5B868C], 0;
// LINE 162:
	__asm        jmp    near ptr 0x00544549;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054454e
unsigned short GetOutOfHeli(long personID) {
// LINE 166:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 167:
	__asm        mov    eax, personID;
	__asm        push   eax;
	__asm        call   0x0054456A;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00544565;
// LINE 168:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054456a
unsigned short cYObject::GetOutOfHeli(long personID) {
	class cYObject* obj;

// LINE 171:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 172:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054458F;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054460B;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005445A8;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x005445C4;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x005445F2;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(personID);
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054460B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    obj, eax;
// LINE 173:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00544631;
	__asm        push   0x8C085;
	__asm        push   0x5B86B8;
	__asm        push   0xAD;
	__asm        push   0x5B86E0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 174:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054465F;
	__asm        push   0x8C085;
	__asm        push   0x5B8704;
	__asm        push   0xAE;
	__asm        push   0x5B8734;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 176:
	__asm        mov    ecx, obj;
	__asm        call   0x00556470;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054470C;
	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x0054469E;
	__asm        push   0x8C085;
	__asm        push   0x5BB998;
	__asm        push   0x41E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   0x0054CECA;
	__asm        mov    [ebp-0xC], ax;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    near ptr 0x005446D5;
	__asm        push   0x8C085;
	__asm        push   0x5BB978;
	__asm        push   0x420;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x00544702;
	__asm        jmp    near ptr 0x00544723;
	__asm        jmp    near ptr 0x00544716;
	__asm        jmp    near ptr 0x00544753;
	__asm        jmp    near ptr 0x00544723;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        je     near ptr 0x00544753;
// LINE 177:
	__asm        mov    eax, obj;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x00544745;
// LINE 178:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054475B;
// LINE 180:
	__asm        jmp    near ptr 0x0054475B;
// LINE 181:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054475B;
// LINE 182:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00544760
void AdjustPersonBeamingSlices(int32_t velocity) {
// LINE 191:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 192:
	__asm        cmp    velocity, 0;
	__asm        jne    near ptr 0x00544775;
	__asm        jmp    near ptr 0x0054486F;
// LINE 193:
	__asm        inc    word ptr ds:[0x5B864C];
	__asm        movsx  eax, word ptr ds:[0x5B864C];
	__asm        cmp    eax, 4;
	__asm        jle    near ptr 0x00544795;
	__asm        mov    word ptr ds:[0x5B864C], 0;
// LINE 194:
	__asm        movsx  eax, word ptr ds:[0x5B864C];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054486A;
// LINE 195:
	__asm        cmp    velocity, 0x12C0000;
	__asm        jle    near ptr 0x005447C8;
// LINE 196:
	__asm        mov    word ptr ds:[0x5B8644], 6;
// LINE 197:
	__asm        mov    word ptr ds:[0x5B8648], 8;
// LINE 199:
	__asm        jmp    near ptr 0x0054486A;
	__asm        cmp    velocity, 0x960000;
	__asm        jle    near ptr 0x005447EC;
// LINE 200:
	__asm        mov    word ptr ds:[0x5B8644], 4;
// LINE 201:
	__asm        mov    word ptr ds:[0x5B8648], 6;
// LINE 203:
	__asm        jmp    near ptr 0x0054486A;
	__asm        cmp    velocity, 0x640000;
	__asm        jle    near ptr 0x00544810;
// LINE 204:
	__asm        mov    word ptr ds:[0x5B8644], 2;
// LINE 205:
	__asm        mov    word ptr ds:[0x5B8648], 5;
// LINE 207:
	__asm        jmp    near ptr 0x0054486A;
	__asm        cmp    velocity, 0x410000;
	__asm        jle    near ptr 0x00544834;
// LINE 208:
	__asm        mov    word ptr ds:[0x5B8644], 1;
// LINE 209:
	__asm        mov    word ptr ds:[0x5B8648], 4;
// LINE 211:
	__asm        jmp    near ptr 0x0054486A;
	__asm        cmp    velocity, 0x1E0000;
	__asm        jle    near ptr 0x00544858;
// LINE 212:
	__asm        mov    word ptr ds:[0x5B8644], 0;
// LINE 213:
	__asm        mov    word ptr ds:[0x5B8648], 4;
// LINE 215:
	__asm        jmp    near ptr 0x0054486A;
// LINE 216:
	__asm        mov    word ptr ds:[0x5B8644], 0;
// LINE 217:
	__asm        mov    word ptr ds:[0x5B8648], 4;
// LINE 220:
	__asm        jmp    near ptr 0x0054486F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00544874
class cYObject* cYObject::GetObjectA(struct _DYOBJ_INST* dyn) {
	class cYObject* obj;
	short count;
	class cYObject* foundobj;

// LINE 223:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 225:
	__asm        mov    foundobj, 0;
// LINE 226:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00544893;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054497D;
// LINE 227:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x005448BC;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00544938;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005448D5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x005448F1;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054491F;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00544938;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 228:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00544947;
	__asm        jmp    near ptr 0x0054488F;
// LINE 229:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054495E;
	__asm        jmp    near ptr 0x0054488F;
// LINE 230:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyn;
	__asm        jne    near ptr 0x00544978;
// LINE 231:
	__asm        mov    eax, obj;
	__asm        mov    foundobj, eax;
// LINE 232:
	__asm        jmp    near ptr 0x0054497D;
// LINE 234:
	__asm        jmp    near ptr 0x0054488F;
// LINE 235:
	__asm        cmp    foundobj, 0;
	__asm        jne    near ptr 0x005449A0;
// LINE 236:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyn;
	__asm        jne    near ptr 0x005449A0;
// LINE 237:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    foundobj, eax;
// LINE 239:
	__asm        cmp    foundobj, 0;
	__asm        jne    near ptr 0x005449C6;
// LINE 240:
	__asm        push   0x8C085;
	__asm        push   0x5B8758;
	__asm        push   0xF0;
	__asm        push   0x5B877C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 242:
	__asm        mov    eax, dyn;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x005449F3;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        cmp    foundobj, eax;
	__asm        je     near ptr 0x00544A97;
	__asm        jmp    near ptr 0x00544A7B;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00544A0C;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00544A28;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00544A56;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        mov    ecx, foundobj;
	__asm        cmp    [eax*4+0x636D40], ecx;
	__asm        je     near ptr 0x00544A97;
	__asm        jmp    near ptr 0x00544A7B;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    foundobj, eax;
	__asm        je     near ptr 0x00544A97;
	__asm        push   0x8C085;
	__asm        push   0x5B87A0;
	__asm        push   0xF2;
	__asm        push   0x5B87D4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, dyn;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x1C], ax;
// LINE 244:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00544ABB;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        jmp    near ptr 0x00544B31;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00544AD4;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00544AF0;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00544B1E;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        jmp    near ptr 0x00544B31;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x00544B36;
// LINE 245:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00544b3b
struct _DYOBJ_INST* cYObject::SearchForDynObj(short objtypeflag, short numcellstospiral, struct _DYOBJ_INST* onlyonmaster) {
	short celly;
	short cellx;
	struct _DYOBJ_INST* dyobj;

// LINE 248:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 249:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    cellx, ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    celly, ax;
// LINE 252:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00544BBD;
	__asm        mov    eax, [ebp-0x10];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        movsx  ecx, objtypeflag;
	__asm        test   ecx, eax;
	__asm        je     near ptr 0x00544BB0;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dyobj, eax;
	__asm        jmp    near ptr 0x00544BCF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00544B88;
	__asm        mov    dyobj, 0;
	__asm        jmp    near ptr 0x00544BCF;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dyobj, eax;
// LINE 254:
	__asm        mov    eax, dyobj;
	__asm        jmp    near ptr 0x00544BD7;
// LINE 255:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00544bde
unsigned short cYObject::SearchForPersonSpot(struct _DYOBJ_INST* master, struct Point3d* loc) {
	short radius;
	short maxcount;
	int32_t offsetz;
	int32_t offsetx;
	short fullradius;
	struct Point3d newloc;
	short count;
	short smallradius;

// LINE 258:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 260:
	__asm        mov    maxcount, 2;
// LINE 261:
	__asm        mov    eax, master;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    near ptr 0x00544C25;
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    fullradius, ax;
	__asm        jmp    near ptr 0x00544C3A;
	__asm        jmp    near ptr 0x00544C30;
	__asm        mov    fullradius, 8;
	__asm        jmp    near ptr 0x00544C3A;
	__asm        mov    eax, [ebp-0x54];
	__asm        sar    eax, 0x10;
	__asm        mov    fullradius, ax;
	__asm        jmp    near ptr 0x00544C3F;
// LINE 262:
	__asm        movsx  eax, fullradius;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    smallradius, ax;
// LINE 265:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00544C5C;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, maxcount;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00544F69;
// LINE 266:
// Block start:
	int32_t masterrad;
	struct Point3d offset;
	int32_t myrad;
	int32_t groundheight;
	int32_t objheight;
	struct Point3d masterloc;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, smallradius;
	__asm        imul   eax, ecx;
	__asm        movsx  ecx, maxcount;
	__asm        dec    ecx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        movsx  ecx, smallradius;
	__asm        add    eax, ecx;
	__asm        mov    radius, ax;
// LINE 268:
	__asm        movsx  eax, radius;
	__asm        movsx  ecx, fullradius;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00544CB5;
	__asm        push   0x8C085;
	__asm        push   0x5B87F8;
	__asm        push   0x10C;
	__asm        push   0x5B8830;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 269:
	__asm        movsx  eax, radius;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00544CD3;
	__asm        mov    offsetz, 0;
	__asm        mov    eax, offsetz;
	__asm        mov    offsetx, eax;
	__asm        jmp    near ptr 0x00544DA7;
	__asm        movsx  ebx, radius;
	__asm        dec    ebx;
	__asm        movsx  eax, radius;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    offsetx, ebx;
	__asm        movsx  ebx, radius;
	__asm        dec    ebx;
	__asm        movsx  eax, radius;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    offsetz, ebx;
	__asm        mov    eax, offsetx;
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x58], ax;
	__asm        mov    eax, offsetz;
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x5C], ax;
	__asm        jmp    near ptr 0x00544D34;
	__asm        movsx  eax, word ptr [ebp-0x58];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, radius;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00544D6B;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00544D70;
	__asm        movsx  eax, word ptr [ebp-0x5C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, radius;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00544DA7;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00544DAC;
// LINE 270:
	__asm        mov    eax, offsetx;
	__asm        mov    offset.x, eax;
	__asm        mov    offset.y, 0;
	__asm        mov    eax, offsetz;
	__asm        mov    offset.z, eax;
// LINE 271:
	__asm        mov    eax, master;
	__asm        add    eax, 0x18;
	__asm        lea    ecx, newloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 272:
	__asm        mov    eax, offsetx;
	__asm        add    newloc.x, eax;
// LINE 273:
	__asm        mov    eax, offsetz;
	__asm        add    newloc.z, eax;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        lea    eax, offset.x;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D2AC6;
	__asm        add    esp, 0x10;
	__asm        mov    objheight, eax;
// LINE 280:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    groundheight, eax;
// LINE 282:
	__asm        mov    eax, groundheight;
	__asm        add    eax, objheight;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 284:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x30];
	__asm        test   al, 0x80;
	__asm        jne    near ptr 0x00544E5E;
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    myrad, eax;
	__asm        jmp    near ptr 0x00544E6A;
	__asm        jmp    near ptr 0x00544E6A;
	__asm        mov    myrad, 0x80000;
	__asm        jmp    near ptr 0x00544E6A;
// LINE 285:
	__asm        mov    eax, master;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    near ptr 0x00544E9B;
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    masterrad, eax;
	__asm        jmp    near ptr 0x00544EA7;
	__asm        jmp    near ptr 0x00544EA7;
	__asm        mov    masterrad, 0x80000;
	__asm        jmp    near ptr 0x00544EA7;
// LINE 286:
	__asm        mov    eax, master;
	__asm        add    eax, 0x18;
	__asm        lea    ecx, masterloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 287:
	__asm        mov    eax, objheight;
	__asm        add    masterloc.y, eax;
// LINE 288:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00554FF0;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00544F15;
// LINE 289:
	__asm        push   0x8C085;
	__asm        push   0x5B8854;
	__asm        push   0x121;
	__asm        push   0x5B8884;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 291:
	__asm        push   0;
	__asm        mov    eax, master;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00544F45;
// LINE 292:
	__asm        jmp    near ptr 0x00544C58;
// LINE 294:
	__asm        lea    eax, newloc.x;
	__asm        mov    ecx, loc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 295:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x00544F71;
// LINE 296:
// Block end:
	__asm        jmp    near ptr 0x00544C58;
// LINE 297:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00544F71;
// LINE 298:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00544f78
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO* cptr, struct Point3d* loc, enum cYObject::SearchType searchType) {
	int32_t offsetz;
	int32_t offsetx;

// LINE 303:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 305:
	__asm        mov    eax, searchType;
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054503A;
	__asm        mov    eax, offsetz;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    [ebp-0x34], eax;
// LINE 306:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x34];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x30];
	__asm        mov    [ebp-0x24], eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        lea    ecx, [ebp-0x20];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545000;
	__asm        lea    eax, [ebp-0x20];
	__asm        lea    ecx, [ebp-0x14];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x14];
	__asm        mov    ecx, loc;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 309:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x00545042;
// LINE 311:
	__asm        jmp    near ptr 0x00545042;
// LINE 312:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00545042;
// LINE 313:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00545049
unsigned short cYObject::SearchForPersonSpot(struct _CELL_INFO* cptr, int32_t * offsetx, int32_t * offsetz, enum cYObject::SearchType searchType) {
	struct Point3d pos;
	short halfwidth;
	unsigned short ret;
	int32_t twiceradius;

// LINE 318:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x19C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 319:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        shl    eax, 5;
	__asm        mov    halfwidth, ax;
// LINE 320:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00545088;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        cmp    eax, 0x14;
	__asm        jl     near ptr 0x005450A4;
	__asm        push   0x8C085;
	__asm        push   0x5B88A8;
	__asm        push   0x140;
	__asm        push   0x5B88D4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 321:
	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x20;
	__asm        je     near ptr 0x005450F6;
	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x40;
	__asm        je     near ptr 0x005450F6;
	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x60;
	__asm        je     near ptr 0x005450F6;
	__asm        movsx  eax, halfwidth;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x005450F6;
	__asm        push   0x8C085;
	__asm        push   0x5B88F8;
	__asm        push   0x141;
	__asm        push   0x5B8908;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 323:
	__asm        mov    ret, 0;
// LINE 324:
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    twiceradius, eax;
// LINE 325:
	__asm        mov    eax, searchType;
	__asm        mov    [ebp-0x19C], eax;
	__asm        jmp    near ptr 0x00545993;
// LINE 328:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00545133;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x0054549D;
// LINE 329:
	__asm        cmp    searchType, 0;
	__asm        jne    near ptr 0x00545226;
// LINE 330:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054516E;
	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00545221;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    [ebp-0x174], ebx;
	__asm        push   2;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005451BA;
	__asm        movsx  eax, halfwidth;
	__asm        dec    eax;
	__asm        mov    [ebp-0x17C], eax;
	__asm        jmp    near ptr 0x005451C7;
	__asm        movsx  eax, halfwidth;
	__asm        neg    eax;
	__asm        inc    eax;
	__asm        mov    [ebp-0x17C], eax;
	__asm        mov    eax, [ebp-0x17C];
	__asm        shl    eax, 0x10;
	__asm        mov    [ebp-0x178], eax;
	__asm        push   2;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00545206;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, offsetz;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x0054521C;
	__asm        mov    eax, [ebp-0x174];
	__asm        mov    ecx, offsetz;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00545221;
// LINE 331:
	__asm        jmp    near ptr 0x00545337;
// LINE 332:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054524A;
	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00545332;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x180], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x184], ax;
	__asm        jmp    near ptr 0x005452B9;
	__asm        movsx  eax, word ptr [ebp-0x180];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005452F3;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005452F8;
	__asm        movsx  eax, word ptr [ebp-0x184];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00545332;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00545337;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x128], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x12C], eax;
// LINE 333:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x12C];
	__asm        mov    [ebp-0x124], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x120], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x128];
	__asm        mov    [ebp-0x11C], eax;
	__asm        lea    eax, [ebp-0x124];
	__asm        lea    ecx, [ebp-0xDC];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005453AF;
	__asm        lea    eax, [ebp-0xDC];
	__asm        lea    ecx, [ebp-0xAC];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xAC];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 335:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054540F;
// LINE 336:
	__asm        jmp    near ptr 0x0054512F;
// LINE 337:
	__asm        jmp    near ptr 0x00545414;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054548D;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        add    eax, 0xA;
	__asm        mov    [ebp-0x108], ax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0x104], eax;
	__asm        movsx  eax, word ptr [ebp-0x108];
	__asm        shl    eax, 0x10;
	__asm        cmp    eax, [ebp-0x104];
	__asm        jge    near ptr 0x0054546E;
	__asm        jmp    near ptr 0x00545473;
	__asm        jmp    near ptr 0x0054548D;
	__asm        jmp    near ptr 0x00545488;
	__asm        test   dword ptr [ebp-0x10C], 0xFFFF;
	__asm        je     near ptr 0x0054548D;
// LINE 338:
	__asm        jmp    near ptr 0x0054512F;
// LINE 342:
	__asm        mov    ret, 1;
// LINE 343:
	__asm        jmp    near ptr 0x0054549D;
// LINE 344:
	__asm        jmp    near ptr 0x0054512F;
// LINE 345:
	__asm        jmp    near ptr 0x005459BD;
// LINE 348:
// Block start:
	short count;
// Block end:
	__asm        mov    word ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x005454B1;
	__asm        inc    word ptr [ebp-0x20];
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x00545735;
// LINE 349:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005454E2;
	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x005455CA;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x188], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x18C], ax;
	__asm        jmp    near ptr 0x00545551;
	__asm        movsx  eax, word ptr [ebp-0x188];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0054558B;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00545590;
	__asm        movsx  eax, word ptr [ebp-0x18C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x005455CA;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005455CF;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x13C], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
// LINE 350:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x140];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x134], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x13C];
	__asm        mov    [ebp-0x130], eax;
	__asm        lea    eax, [ebp-0x138];
	__asm        lea    ecx, [ebp-0xE8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545647;
	__asm        lea    eax, [ebp-0xE8];
	__asm        lea    ecx, [ebp-0xB8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xB8];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 352:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005456A7;
// LINE 353:
	__asm        jmp    near ptr 0x005454AD;
// LINE 354:
	__asm        jmp    near ptr 0x005456AC;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00545720;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        add    eax, 0xA;
	__asm        mov    [ebp-0x114], ax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0x110], eax;
	__asm        movsx  eax, word ptr [ebp-0x114];
	__asm        shl    eax, 0x10;
	__asm        cmp    eax, [ebp-0x110];
	__asm        jge    near ptr 0x0054570B;
	__asm        jmp    near ptr 0x00545725;
	__asm        jmp    near ptr 0x0054570B;
	__asm        jmp    near ptr 0x00545720;
	__asm        test   dword ptr [ebp-0x118], 0xFFFF;
	__asm        jne    near ptr 0x00545725;
// LINE 355:
	__asm        jmp    near ptr 0x005454AD;
// LINE 356:
	__asm        mov    ret, 1;
// LINE 357:
	__asm        jmp    near ptr 0x00545735;
// LINE 358:
	__asm        jmp    near ptr 0x005454AD;
// LINE 359:
	__asm        jmp    near ptr 0x005459BD;
// LINE 362:
// Block start:
	short count;
// Block end:
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00545749;
	__asm        inc    word ptr [ebp-0x24];
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x0054596D;
// LINE 363:
	__asm        movsx  eax, halfwidth;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054577A;
	__asm        mov    eax, offsetz;
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, offsetx;
	__asm        mov    [ecx], eax;
	__asm        jmp    near ptr 0x00545862;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetx;
	__asm        mov    [eax], ebx;
	__asm        movsx  ebx, halfwidth;
	__asm        dec    ebx;
	__asm        movsx  eax, halfwidth;
	__asm        lea    eax, [eax*2-2];
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        sub    ebx, eax;
	__asm        shl    ebx, 0x10;
	__asm        mov    eax, offsetz;
	__asm        mov    [eax], ebx;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x190], ax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x194], ax;
	__asm        jmp    near ptr 0x005457E9;
	__asm        movsx  eax, word ptr [ebp-0x190];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00545823;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00545828;
	__asm        movsx  eax, word ptr [ebp-0x194];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, halfwidth;
	__asm        shl    ecx, 0x10;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x00545862;
	__asm        push   0x8C085;
	__asm        push   0x59A24C;
	__asm        push   0x44B;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00545867;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x150], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x154], eax;
// LINE 364:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x154];
	__asm        mov    [ebp-0x14C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x150];
	__asm        mov    [ebp-0x144], eax;
	__asm        lea    eax, [ebp-0x14C];
	__asm        lea    ecx, [ebp-0xF4];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005458DF;
	__asm        lea    eax, [ebp-0xF4];
	__asm        lea    ecx, [ebp-0xC4];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xC4];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 366:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, twiceradius;
	__asm        push   eax;
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054593F;
// LINE 367:
	__asm        jmp    near ptr 0x00545745;
// LINE 368:
	__asm        jmp    near ptr 0x00545944;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 1;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054595D;
// LINE 369:
	__asm        jmp    near ptr 0x00545745;
// LINE 370:
	__asm        mov    ret, 1;
// LINE 371:
	__asm        jmp    near ptr 0x0054596D;
// LINE 372:
	__asm        jmp    near ptr 0x00545745;
// LINE 373:
	__asm        jmp    near ptr 0x005459BD;
// LINE 376:
// Block end:
	__asm        push   0x8C085;
	__asm        push   0x5B892C;
	__asm        push   0x178;
	__asm        push   0x5B8940;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 377:
	__asm        jmp    near ptr 0x005459BD;
	__asm        cmp    dword ptr [ebp-0x19C], 3;
	__asm        ja     near ptr 0x00545972;
	__asm        mov    eax, [ebp-0x19C];
	__asm        jmp    dword ptr [eax*4+0x5459AD];
	__asm        and    al, 0x51;
	__asm        push   esp;
	__asm        add    [ecx+edx*2], ah;
	__asm        push   esp;
	__asm        add    [edx+0x3A005454], ah;
	__asm        push   edi;
	__asm        push   esp;
	__asm        (bad);
// LINE 379:
	__asm        test   reinterpret_cast<uint32_t>(ret), 0xFFFF;
	__asm        je     near ptr 0x00545CB3;
// LINE 380:
// Block start:
	struct Point3d pos;
	short centerscurk;
	enum cYObject::LocationType cellcenterloctype;
	enum cYObject::LocationType celloffsetloctype;
	int32_t centcellx;
	int32_t offcelly;
	int32_t offcellx;
	int32_t centcelly;
	short offscurk;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    centcellx, eax;
// LINE 381:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    centcelly, eax;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x168], eax;
// LINE 382:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x168];
	__asm        mov    [ebp-0x160], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x15C], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x164];
	__asm        mov    [ebp-0x158], eax;
	__asm        lea    eax, [ebp-0x160];
	__asm        lea    ecx, [ebp-0x100];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00545A6E;
	__asm        lea    eax, [ebp-0x100];
	__asm        lea    ecx, [ebp-0xD0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0xD0];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 383:
	__asm        mov    eax, pos.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    offcellx, eax;
// LINE 384:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, pos.z;
	__asm        sar    eax, 0x16;
	__asm        mov    offcelly, eax;
// LINE 386:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00545AF1;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcelly);
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00545AF1;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00545AF1;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcelly);
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00545AFC;
	__asm        mov    centerscurk, 0xFFFF;
	__asm        jmp    near ptr 0x00545B64;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(centcellx);
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, reinterpret_cast<uint16_t>(centcelly);
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x16C], ax;
	__asm        movsx  eax, word ptr [ebp-0x16C];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00545B38;
	__asm        movsx  eax, word ptr [ebp-0x16C];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x00545B54;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x16C];
	__asm        mov    centerscurk, ax;
	__asm        jmp    near ptr 0x00545B64;
// LINE 387:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00545B96;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcelly);
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00545B96;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00545B96;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcelly);
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00545BA1;
	__asm        mov    offscurk, 0xFFFF;
	__asm        jmp    near ptr 0x00545C09;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(offcellx);
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, reinterpret_cast<uint16_t>(offcelly);
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x170], ax;
	__asm        movsx  eax, word ptr [ebp-0x170];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00545BDD;
	__asm        movsx  eax, word ptr [ebp-0x170];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x00545BF9;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x170];
	__asm        mov    offscurk, ax;
	__asm        jmp    near ptr 0x00545C09;
// LINE 388:
	__asm        movsx  eax, offscurk;
	__asm        movsx  ecx, centerscurk;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00545C65;
// LINE 391:
// Block start:
	char str[80];
	__asm        mov    eax, offcelly;
	__asm        push   eax;
	__asm        mov    eax, offcellx;
	__asm        push   eax;
	__asm        movsx  eax, offscurk;
	__asm        push   eax;
	__asm        mov    eax, centcelly;
	__asm        push   eax;
	__asm        mov    eax, centcellx;
	__asm        push   eax;
	__asm        movsx  eax, centerscurk;
	__asm        push   eax;
	__asm        push   0x5B8964;
	__asm        lea    eax, str[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0x20;
// LINE 392:
	__asm        push   0x8C085;
	__asm        lea    eax, str[0];
	__asm        push   eax;
	__asm        push   0x188;
	__asm        push   0x5B89A8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 395:
// Block end:
	__asm        mov    eax, centcelly;
	__asm        push   eax;
	__asm        mov    eax, centcellx;
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    cellcenterloctype, eax;
// LINE 396:
	__asm        mov    eax, offcelly;
	__asm        push   eax;
	__asm        mov    eax, offcellx;
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    celloffsetloctype, eax;
// LINE 397:
	__asm        mov    eax, cellcenterloctype;
	__asm        cmp    celloffsetloctype, eax;
	__asm        je     near ptr 0x00545CB3;
	__asm        push   0x8C085;
	__asm        push   0x5B89CC;
	__asm        push   0x18D;
	__asm        push   0x5B8A08;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 400:
// Block end:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x00545CBC;
// LINE 401:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00545cc3
void duh(double __formal) {
// LINE 403:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        jmp    near ptr 0x00545CCE;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545cd3
void S3PersonInit() {
	int32_t success;
	long i;
	double y;
	double x;

// LINE 405:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 406:
	__asm        mov    success, 0;
// LINE 409:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00545CF2;
	__asm        inc    i;
	__asm        cmp    i, 0x271;
	__asm        jge    near ptr 0x00545D30;
// LINE 410:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x1C], eax;
	__asm        fild   dword ptr [ebp-0x1C];
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x0056EC10;
	__asm        add    esp, 8;
	__asm        fadd   qword ptr ds:[0x593528];
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, i;
	__asm        mov    [ecx*4+0x6361C8], eax;
	__asm        jmp    near ptr 0x00545CEF;
// LINE 412:
	__asm        call   0x0055DB01;
// LINE 413:
	__asm        call   0x00547DE1;
// LINE 417:
	__asm        mov    reinterpret_cast<uint32_t>(x), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&x) + 4), 0x40240000;
	__asm        mov    reinterpret_cast<uint32_t>(y), 0x66666666;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&y) + 4), 0x402A6666;
// LINE 419:
	__asm        fld    x;
	__asm        fdiv   y;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        call   0x00545CC3;
	__asm        add    esp, 8;
// LINE 420:
	__asm        jmp    near ptr 0x00545D6F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545d74
void S3PersonDelete() {
// LINE 423:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 427:
	__asm        call   0x0055E29E;
// LINE 428:
	__asm        call   0x00547E59;
// LINE 429:
	__asm        jmp    near ptr 0x00545D89;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545d8e
void S3PersonNextFrame() {
// LINE 433:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 435:
	__asm        call   0x0054C671;
// LINE 437:
	__asm        jmp    near ptr 0x00545D9E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545da3
void S3PersonUserNextFrame() {
// LINE 440:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 441:
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054DE18;
// LINE 442:
	__asm        jmp    near ptr 0x00545DB9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545dbe
void S3PersonReset() {
	short count;

// LINE 445:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 446:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00545DD6;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00545EB1;
// LINE 447:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00545DFF;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00545E7B;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00545E18;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00545E34;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00545E62;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00545E7B;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 448:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00545EA1;
	__asm        push   0x8C085;
	__asm        push   0x5B8A2C;
	__asm        push   0x1C0;
	__asm        push   0x5B8A50;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 449:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, obj;
	__asm        call   dword ptr [eax+0x18];
// LINE 450:
// Block end:
	__asm        jmp    near ptr 0x00545DD2;
// LINE 451:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   dword ptr [eax+0x18];
// LINE 452:
	__asm        jmp    near ptr 0x00545EC6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00545ecb
void S3PersonUserStart(int32_t x, int32_t y, int32_t dx, int32_t dz) {
// LINE 455:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 456:
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054FD4D;
// LINE 457:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00545F1F;
	__asm        push   0x8C085;
	__asm        push   0x5B8A74;
	__asm        push   0x1C9;
	__asm        push   0x5B8AB8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    [ebp-0x64], eax;
// LINE 458:
	__asm        mov    eax, [ebp-0x64];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00545F55;
	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x00545F77;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, [ebp-0x64];
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x00545FB9;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x00545FC7;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x00545FCC;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        movsx  ecx, word ptr ds:[0x5B8670];
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    near ptr 0x00546001;
	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054604A;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00546045;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054607A;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054607A;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00546098;
	__asm        jmp    near ptr 0x005460C6;
	__asm        jmp    near ptr 0x00546098;
	__asm        jmp    near ptr 0x005460AA;
	__asm        test   dword ptr [ebp-0x60], 0xFFFF;
	__asm        jne    near ptr 0x005460C6;
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, [ebp-0x64];
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x005460D3;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x00546100;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x64];
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x5C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, [ebp-0x64];
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00546148;
	__asm        jmp    near ptr 0x0054614D;
// LINE 459:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    word ptr [eax+0xE2], 0;
// LINE 460:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054CECA;
// LINE 461:
	__asm        jmp    near ptr 0x00546177;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054617c
void S3PersonUserAppearNew(struct Point3d* loc, struct Point3d* facingvector) {
// LINE 464:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x74;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 465:
	__asm        push   0;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054CECA;
// LINE 466:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005461C2;
	__asm        push   0x8C085;
	__asm        push   0x5B8ADC;
	__asm        push   0x1D2;
	__asm        push   0x5B8B0C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 467:
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x005507EC;
// LINE 468:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054FC2E;
// LINE 470:
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0055069B;
// LINE 471:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054626F;
// LINE 472:
	__asm        mov    word ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x0054621F;
	__asm        inc    word ptr [ebp-0x14];
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 3;
	__asm        jge    near ptr 0x00546255;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        movsx  eax, word ptr [eax*2+0x6356C8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00546250;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        add    eax, 0xC;
	__asm        mov    [ebp-0x18], ax;
	__asm        jmp    near ptr 0x00546260;
	__asm        jmp    near ptr 0x0054621B;
	__asm        mov    word ptr [ebp-0x18], 0xC;
	__asm        jmp    near ptr 0x00546260;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054C0E7;
// LINE 474:
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054FAEE;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    [ebp-0x74], eax;
// LINE 475:
	__asm        jmp    near ptr 0x00546287;
	__asm        mov    eax, [ebp-0x74];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x005462B4;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x70];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, [ebp-0x74];
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005462FC;
// LINE 476:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 478:
	__asm        cmp    facingvector, 0;
	__asm        je     near ptr 0x00546342;
// LINE 479:
// Block start:
	struct cYObject::MoveInfo moveinfo;
	__asm        mov    eax, facingvector;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        add    ecx, 0x168;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 481:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x0054DCDE;
// LINE 487:
// Block end:
	__asm        jmp    near ptr 0x00546347;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054634c
void S3PersonUserAppear(int32_t x, int32_t y, int32_t dx, int32_t dz) {
	struct Point3d loc;

// LINE 490:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x4C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 491:
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(y);
	__asm        xor    ecx, ecx;
	__asm        mov    cl, reinterpret_cast<uint8_t>(x);
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dz;
	__asm        mov    [ebp-0x44], eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        lea    ecx, [ebp-0x40];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005463B9;
	__asm        lea    eax, [ebp-0x40];
	__asm        lea    ecx, [ebp-0x34];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x34];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005463EA;
	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 492:
	__asm        push   0;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        call   0x0054617C;
	__asm        add    esp, 8;
// LINE 493:
	__asm        jmp    near ptr 0x00546429;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054642e
int32_t IsThisABadGuy(struct _DYOBJ_INST* guy) {
	enum MissionSupertype mt;
	class cYObject* obj;

// LINE 496:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 497:
	__asm        mov    eax, guy;
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 498:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xDA];
	__asm        mov    mt, eax;
// LINE 499:
	__asm        cmp    mt, 0;
	__asm        jne    near ptr 0x0054646C;
// LINE 500:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00546473;
// LINE 501:
	__asm        jmp    near ptr 0x00546473;
// LINE 502:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546473;
// LINE 503:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546478
unsigned char GetAvatarCellX() {
// LINE 506:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 507:
	__asm        cmp    dword ptr ds:[0x5B8680], 0;
	__asm        jne    near ptr 0x005464A7;
	__asm        push   0x8C085;
	__asm        push   0x5B8B30;
	__asm        push   0x1FB;
	__asm        push   0x5B8B40;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 508:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    al, [eax+0x88];
	__asm        jmp    near ptr 0x005464B7;
// LINE 509:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005464bc
unsigned char GetAvatarCellY() {
// LINE 512:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 513:
	__asm        cmp    dword ptr ds:[0x5B8680], 0;
	__asm        jne    near ptr 0x005464EB;
	__asm        push   0x8C085;
	__asm        push   0x5B8B64;
	__asm        push   0x201;
	__asm        push   0x5B8B74;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 514:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    al, [eax+0x89];
	__asm        jmp    near ptr 0x005464FB;
// LINE 515:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546500
struct _DYOBJ_INST* GetAvatarDYOBJ() {
// LINE 518:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 519:
	__asm        cmp    dword ptr ds:[0x5B8680], 0;
	__asm        jne    near ptr 0x0054652F;
	__asm        push   0x8C085;
	__asm        push   0x5B8B98;
	__asm        push   0x207;
	__asm        push   0x5B8BB4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 520:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        add    eax, 0x24;
	__asm        jmp    near ptr 0x0054653C;
// LINE 521:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546541
struct Point3d* GetAvatarVector() {
// LINE 524:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 525:
	__asm        cmp    dword ptr ds:[0x5B8680], 0;
	__asm        jne    near ptr 0x00546570;
	__asm        push   0x8C085;
	__asm        push   0x5B8BD8;
	__asm        push   0x20D;
	__asm        push   0x5B8BF4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 526:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        add    eax, 0x168;
	__asm        jmp    near ptr 0x0054657F;
// LINE 527:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546584
void S3DrawPerson(struct VRBlit* blit) {
	short id;

// LINE 530:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 531:
	__asm        call   0x00551D36;
// LINE 532:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    id, ax;
// LINE 533:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x005465BF;
// LINE 534:
	__asm        mov    eax, blit;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x00551388;
// LINE 536:
	__asm        jmp    near ptr 0x005466BB;
// LINE 537:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x005465DB;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00546657;
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005465F4;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00546610;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054663E;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00546657;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 538:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0054667D;
	__asm        push   0x8C085;
	__asm        push   0x5B8C18;
	__asm        push   0x21A;
	__asm        push   0x5B8C20;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 539:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x005466AF;
	__asm        push   0x8C085;
	__asm        push   0x5B8C44;
	__asm        push   0x21B;
	__asm        push   0x5B8C58;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 540:
	__asm        mov    eax, blit;
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   0x00551388;
// LINE 543:
// Block end:
	__asm        jmp    near ptr 0x005466C0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005466c5
void cAvatar::GetControlInput() {
	int32_t fwdmult;
	long joystickValue;
	int32_t rotateRate;
	int32_t tempfix;
	int32_t fwdrate;
	int32_t rotateMult;

// LINE 554:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 555:
	__asm        mov    fwdrate, 0x140000;
// LINE 556:
	__asm        mov    fwdmult, 0xA0000;
// LINE 559:
	__asm        cmp    dword ptr ds:[0x5C3808], 0;
	__asm        je     near ptr 0x005467CD;
	__asm        push   1;
	__asm        call   0x00431CC0;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005467CD;
// LINE 560:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, 0xB;
	__asm        je     near ptr 0x00546792;
// LINE 561:
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 562:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054678D;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00546768;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    near ptr 0x0054677B;
	__asm        jmp    near ptr 0x00546773;
	__asm        mov    word ptr [ebp-0x1C], 0xFFFF;
	__asm        jmp    near ptr 0x0054677B;
	__asm        mov    ax, [ebp-0x20];
	__asm        mov    [ebp-0x1C], ax;
	__asm        jmp    near ptr 0x00546780;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00546792;
// LINE 567:
	__asm        push   0x140000;
	__asm        mov    eax, fwdrate;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    fwdrate, eax;
// LINE 568:
	__asm        push   0x30000;
	__asm        push   0x140000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    fwdmult, eax;
// LINE 571:
	__asm        jmp    near ptr 0x00546861;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x00546861;
// LINE 572:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 573:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054685C;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00546837;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    near ptr 0x0054684A;
	__asm        jmp    near ptr 0x00546842;
	__asm        mov    word ptr [ebp-0x24], 0xFFFF;
	__asm        jmp    near ptr 0x0054684A;
	__asm        mov    ax, [ebp-0x28];
	__asm        mov    [ebp-0x24], ax;
	__asm        jmp    near ptr 0x0054684F;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00546861;
// LINE 575:
	__asm        mov    rotateRate, 0x640000;
// LINE 576:
	__asm        mov    rotateMult, 0x320000;
// LINE 580:
	__asm        push   8;
	__asm        call   0x00431B60;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005468A1;
// LINE 581:
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x174], eax;
// LINE 582:
	__asm        jmp    near ptr 0x0054696F;
	__asm        push   9;
	__asm        call   0x00431B60;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005468D9;
// LINE 583:
	__asm        xor    ebx, ebx;
	__asm        mov    eax, fwdmult;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        neg    ebx;
	__asm        mov    eax, this;
	__asm        sub    [eax+0x174], ebx;
// LINE 584:
	__asm        jmp    near ptr 0x0054696F;
	__asm        push   8;
	__asm        push   9;
	__asm        call   0x00431BFB;
	__asm        add    esp, 8;
	__asm        mov    joystickValue, eax;
	__asm        cmp    joystickValue, 0;
	__asm        je     near ptr 0x00546943;
// LINE 586:
	__asm        push   0x30000;
	__asm        mov    eax, joystickValue;
	__asm        shl    eax, 0x10;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    tempfix, eax;
// LINE 587:
	__asm        xor    eax, eax;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x174];
	__asm        neg    eax;
	__asm        sub    tempfix, eax;
// LINE 588:
	__asm        mov    eax, ds:[0x5B4768];
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        mov    eax, tempfix;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    tempfix, eax;
// LINE 589:
	__asm        mov    eax, tempfix;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x174], eax;
// LINE 591:
	__asm        jmp    near ptr 0x0054696F;
// LINE 593:
	__asm        mov    eax, 0x10000;
	__asm        mov    ecx, ds:[0x5B4768];
	__asm        shl    ecx, 2;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 596:
	__asm        mov    eax, this;
	__asm        mov    ecx, fwdrate;
	__asm        cmp    [eax+0x174], ecx;
	__asm        jle    near ptr 0x0054698D;
// LINE 597:
	__asm        mov    eax, fwdrate;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 598:
	__asm        mov    eax, this;
	__asm        mov    ecx, fwdrate;
	__asm        neg    ecx;
	__asm        cmp    [eax+0x174], ecx;
	__asm        jge    near ptr 0x005469AF;
// LINE 599:
	__asm        mov    eax, fwdrate;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x174], eax;
// LINE 601:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        call   0x00544760;
	__asm        add    esp, 4;
// LINE 604:
	__asm        push   7;
	__asm        call   0x00431B60;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005469F3;
// LINE 605:
	__asm        mov    eax, rotateMult;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x178], eax;
// LINE 606:
	__asm        jmp    near ptr 0x00546A84;
	__asm        push   6;
	__asm        call   0x00431B60;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00546A2B;
// LINE 607:
	__asm        xor    ebx, ebx;
	__asm        mov    eax, rotateMult;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        neg    ebx;
	__asm        mov    eax, this;
	__asm        sub    [eax+0x178], ebx;
// LINE 608:
	__asm        jmp    near ptr 0x00546A84;
	__asm        push   6;
	__asm        push   7;
	__asm        call   0x00431BFB;
	__asm        add    esp, 8;
	__asm        mov    joystickValue, eax;
	__asm        cmp    joystickValue, 0;
	__asm        je     near ptr 0x00546A58;
// LINE 609:
	__asm        mov    eax, joystickValue;
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 610:
	__asm        jmp    near ptr 0x00546A84;
// LINE 612:
	__asm        mov    eax, 0x10000;
	__asm        mov    ecx, ds:[0x5B4768];
	__asm        shl    ecx, 2;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x178];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 615:
	__asm        mov    eax, this;
	__asm        mov    ecx, rotateRate;
	__asm        cmp    [eax+0x178], ecx;
	__asm        jle    near ptr 0x00546AA2;
// LINE 616:
	__asm        mov    eax, rotateRate;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 617:
	__asm        mov    eax, this;
	__asm        mov    ecx, rotateRate;
	__asm        neg    ecx;
	__asm        cmp    [eax+0x178], ecx;
	__asm        jge    near ptr 0x00546AC4;
// LINE 618:
	__asm        mov    eax, rotateRate;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x178], eax;
// LINE 619:
	__asm        jmp    near ptr 0x00546AC9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546ace
void PersonHeliHasLanded() {
// LINE 623:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 624:
	__asm        jmp    near ptr 0x00546AD9;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    eax, ds:[0x5B4968];
	__asm        sub    ecx, [eax+0x18];
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x00546B30;
	__asm        jmp    near ptr 0x00546B07;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    eax, ds:[0x5B4968];
	__asm        sub    ecx, [eax+0x1C];
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jl     near ptr 0x00546B4C;
	__asm        push   0x8C085;
	__asm        push   0x5B8C7C;
	__asm        push   0x270;
	__asm        push   0x5B8CB4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 635:
	__asm        jmp    near ptr 0x00546B51;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546b56
struct _HELI_DATA* S3PersonGetLandedHeli(struct Point3d* loc) {
	struct _CELL_INFO* cptr;
	struct _HELI_DATA* hd;
	long y;
	long x;
	struct _DYOBJ_INST* dyobj;

// LINE 647:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 654:
	__asm        mov    eax, loc;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 655:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, loc;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 657:
	__asm        mov    eax, y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 659:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 660:
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x00546BD2;
// LINE 663:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00546BC5;
// LINE 664:
	__asm        jmp    near ptr 0x00546BD2;
// LINE 666:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 667:
	__asm        jmp    near ptr 0x00546BA7;
// LINE 669:
	__asm        cmp    dyobj, 0;
	__asm        jne    near ptr 0x00546BE3;
// LINE 670:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546C80;
// LINE 676:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x18];
	__asm        sub    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx];
	__asm        jg     near ptr 0x00546C3D;
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx];
	__asm        jl     near ptr 0x00546C3D;
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x20];
	__asm        add    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx+8];
	__asm        jl     near ptr 0x00546C3D;
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x20];
	__asm        sub    eax, 0x40000;
	__asm        mov    ecx, loc;
	__asm        cmp    eax, [ecx+8];
	__asm        jle    near ptr 0x00546C44;
// LINE 679:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546C80;
// LINE 683:
	__asm        mov    eax, dyobj;
	__asm        push   eax;
	__asm        call   0x004F5A90;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 684:
	__asm        cmp    hd, 0;
	__asm        jne    near ptr 0x00546C64;
// LINE 685:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546C80;
// LINE 688:
	__asm        mov    eax, hd;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x00546C78;
// LINE 689:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546C80;
// LINE 691:
	__asm        mov    eax, hd;
	__asm        jmp    near ptr 0x00546C80;
// LINE 692:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546c85
class cYObject* cYObject::GetOnePersonForScurkID(short cellx, short celly) {
	short scurkID;
	short count;

// LINE 695:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 696:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00546CC0;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00546CC0;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00546CC0;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00546CCB;
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    near ptr 0x00546D27;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x10], ax;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00546CFE;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x00546D1A;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x10];
	__asm        mov    scurkID, ax;
	__asm        jmp    near ptr 0x00546D27;
// LINE 697:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00546D36;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00546E64;
// LINE 698:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00546D5F;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00546DDB;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00546D78;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00546D94;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00546DC2;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00546DDB;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    obj, eax;
// LINE 699:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00546E5F;
// LINE 700:
	__asm        jmp    near ptr 0x00546DF2;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, cellx;
	__asm        sub    ecx, eax;
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x00546E5F;
	__asm        jmp    near ptr 0x00546E1C;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, celly;
	__asm        sub    ecx, eax;
	__asm        movsx  eax, cx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x00546E5F;
// LINE 701:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xFC];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00546E5F;
// LINE 702:
	__asm        mov    eax, obj;
	__asm        jmp    near ptr 0x00546E6B;
// LINE 704:
// Block end:
	__asm        jmp    near ptr 0x00546D32;
// LINE 705:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00546E6B;
// LINE 706:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00546e70
unsigned short cYObject::StartScurkAmbientMission(short scurkID, short treeID, enum PersonType persontype, short cellx, short celly, struct _DYOBJ_INST* onTopOf, int32_t offsetx, int32_t offsetz) {
	struct Point3d loc;

// LINE 710:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x34], eax;
// LINE 711:
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetx;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetz;
	__asm        mov    [ebp-0x28], eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x00546EE9;
	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 712:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treeID);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00546F45;
	__asm        jmp    near ptr 0x00546F3E;
// LINE 713:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x20;
}

// FUNCTION: COPTER_D 0x00546f45
unsigned short cYObject::StartScurkAmbientMission(short scurkID, short treeID, enum PersonType persontype, short cellx, short celly, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	unsigned short ret;

// LINE 717:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 719:
	__asm        mov    eax, loc;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A7A5;
	__asm        mov    ret, ax;
// LINE 720:
	__asm        test   reinterpret_cast<uint32_t>(ret), 0xFFFF;
	__asm        jne    near ptr 0x00546F9E;
	__asm        push   0x8C085;
	__asm        push   0x5B8CD8;
	__asm        push   0x2D0;
	__asm        push   0x5B8D10;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 721:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00546FD5;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        cmp    eax, persontype;
	__asm        jne    near ptr 0x00546FD5;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00546FF1;
	__asm        push   0x8C085;
	__asm        push   0x5B8D34;
	__asm        push   0x2D1;
	__asm        push   0x5B8D3C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 722:
	__asm        mov    ax, scurkID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xFC], ax;
// LINE 724:
	__asm        mov    ax, treeID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x0054702F;
	__asm        jmp    near ptr 0x00547034;
// LINE 725:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054703D;
// LINE 726:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x00547044
void cYObject::StartForScurkID(enum PersonType persontype, enum MissionType missiontype, short cellx, short celly, short missionid, struct _DYOBJ_INST* onTopOf) {
	struct _LZ_INFO* li;
	short id;
	int32_t offsetz;
	int32_t offsetx;

// LINE 731:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 732:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x00547073;
	__asm        push   0x8C085;
	__asm        push   0x5B8D60;
	__asm        push   0x2DC;
	__asm        push   0x5B8D8C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 733:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x005470A5;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x005470A5;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005470A5;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x005470B0;
	__asm        mov    id, 0xFFFF;
	__asm        jmp    near ptr 0x0054710C;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005470E3;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x005470FF;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x14];
	__asm        mov    id, ax;
	__asm        jmp    near ptr 0x0054710C;
// LINE 734:
	__asm        movsx  eax, id;
	__asm        push   eax;
	__asm        call   0x0051DA5B;
	__asm        add    esp, 4;
	__asm        mov    li, eax;
// LINE 735:
	__asm        cmp    li, 0;
	__asm        jne    near ptr 0x00547142;
	__asm        push   0x8C085;
	__asm        push   0x5B8DB0;
	__asm        push   0x2DF;
	__asm        push   0x5B8DB8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 736:
	__asm        push   0x30000;
	__asm        mov    eax, li;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, li;
	__asm        mov    ecx, [ecx+4];
	__asm        add    ecx, eax;
	__asm        mov    offsetx, ecx;
// LINE 737:
	__asm        push   0x30000;
	__asm        mov    eax, li;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, li;
	__asm        mov    ecx, [ecx+8];
	__asm        add    ecx, eax;
	__asm        mov    offsetz, ecx;
// LINE 740:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(missionid);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, missiontype;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        call   0x005471B2;
	__asm        add    esp, 0x20;
// LINE 741:
	__asm        jmp    near ptr 0x005471AD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005471b2
void cYObject::StartForScurkID(enum PersonType persontype, enum MissionType missiontype, short cellx, short celly, short missionid, struct _DYOBJ_INST* onTopOf, int32_t offsetx, int32_t offsetz) {
	short id;
	class cYObject* obj;
	struct Point3d loc;
	short ret;

// LINE 747:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 748:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x005471E1;
	__asm        push   0x8C085;
	__asm        push   0x5B8DDC;
	__asm        push   0x2EC;
	__asm        push   0x5B8E04;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 750:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00547213;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00547213;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547213;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054721E;
	__asm        mov    id, 0xFFFF;
	__asm        jmp    near ptr 0x0054727A;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x44], ax;
	__asm        movsx  eax, word ptr [ebp-0x44];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547251;
	__asm        movsx  eax, word ptr [ebp-0x44];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0054726D;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x44];
	__asm        mov    id, ax;
	__asm        jmp    near ptr 0x0054727A;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    [ebp-0x40], eax;
// LINE 752:
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetx;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, offsetz;
	__asm        mov    [ebp-0x34], eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        lea    ecx, [ebp-0x30];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x005472E7;
	__asm        lea    eax, [ebp-0x30];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 763:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        movsx  eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, missiontype;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        call   0x0054A1D3;
	__asm        add    esp, 0x1C;
	__asm        mov    ret, ax;
// LINE 764:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054736A;
// LINE 765:
	__asm        push   0x8C085;
	__asm        push   0x5B8E28;
	__asm        push   0x2FD;
	__asm        push   0x5B8E58;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 766:
	__asm        jmp    near ptr 0x0054743B;
// LINE 769:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00547386;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00547402;
	__asm        movsx  eax, ret;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054739F;
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x005473BB;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ret;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x005473E9;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ret;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00547402;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    obj, eax;
// LINE 770:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00547428;
	__asm        push   0x8C085;
	__asm        push   0x5B8E7C;
	__asm        push   0x302;
	__asm        push   0x5B8E84;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 771:
	__asm        mov    ax, id;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0xFC], ax;
// LINE 774:
	__asm        jmp    near ptr 0x0054743B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547440
void cYObject::StartScurkPeople(short cellx, short celly) {
	 // Switch table at 0x00547907
	short scurkID;

// LINE 778:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 780:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054747B;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054747B;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054747B;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00547486;
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    near ptr 0x005474E2;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x1C], ax;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005474B9;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x005474D5;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    scurkID, ax;
	__asm        jmp    near ptr 0x005474E2;
// LINE 781:
	__asm        movsx  eax, scurkID;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x005478D0;
// LINE 784:
// Block start:
	class cYObject* medic;
	short dist;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00546C85;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054750B;
// LINE 785:
	__asm        jmp    near ptr 0x00547932;
// LINE 786:
	__asm        lea    eax, dist;
	__asm        push   eax;
	__asm        push   0;
	__asm        push   5;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, ds:[0x5B8680];
	__asm        call   0x00556EC0;
	__asm        mov    medic, eax;
// LINE 787:
	__asm        cmp    medic, 0;
	__asm        je     near ptr 0x0054753A;
	__asm        movsx  eax, dist;
	__asm        cmp    eax, 0x64;
	__asm        jle    near ptr 0x00547552;
// LINE 788:
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0xC;
	__asm        call   0x00547044;
	__asm        add    esp, 0x18;
// LINE 789:
	__asm        jmp    near ptr 0x0054792D;
// LINE 792:
// Block end:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00546C85;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00547574;
// LINE 793:
	__asm        jmp    near ptr 0x00547932;
// LINE 794:
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   7;
	__asm        push   0xE;
	__asm        call   0x00547044;
	__asm        add    esp, 0x18;
// LINE 795:
	__asm        jmp    near ptr 0x0054792D;
// LINE 798:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00546C85;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005475AE;
// LINE 799:
	__asm        jmp    near ptr 0x00547932;
// LINE 800:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 2;
	__asm        jne    near ptr 0x005475D0;
	__asm        call   0x00429015;
	__asm        cmp    eax, 0x3E8;
	__asm        jl     near ptr 0x005475D0;
	__asm        jmp    near ptr 0x005475D5;
	__asm        jmp    near ptr 0x00547600;
	__asm        jmp    near ptr 0x005475E4;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00547600;
// LINE 801:
	__asm        push   0x8C085;
	__asm        push   0x5B8EA8;
	__asm        push   0x321;
	__asm        push   0x5B8EE8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 805:
	__asm        jmp    near ptr 0x0054792D;
// LINE 808:
// Block start:
	short fieldershift;
	class cYObject* newperson;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00546C85;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00547622;
// LINE 809:
	__asm        jmp    near ptr 0x00547932;
// LINE 818:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x0054767A;
	__asm        push   0xFFBA0000;
	__asm        push   0x460000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B5;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054767A;
	__asm        push   0xA;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 820:
	__asm        push   0xA;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    fieldershift, ax;
// LINE 822:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x005476DA;
	__asm        push   0xFFBA0000;
	__asm        push   0x140000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005476DA;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 823:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x0054772C;
	__asm        push   0xFFEC0000;
	__asm        push   0x140000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054772C;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 824:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x0054777E;
	__asm        push   0xFFEC0000;
	__asm        push   0x460000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054777E;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 825:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x005477D0;
	__asm        push   0xFFD30000;
	__asm        push   0x2D0000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005477D0;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 826:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x00547822;
	__asm        push   0xFFD80000;
	__asm        push   0xFFD80000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00547822;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 827:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x00547874;
	__asm        push   0x280000;
	__asm        push   0x280000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00547874;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 828:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x005478C6;
	__asm        push   0x280000;
	__asm        push   0xFFD80000;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        push   5;
	__asm        push   0x4B6;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scurkID);
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x00546E70;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005478C6;
	__asm        mov    ax, fieldershift;
	__asm        mov    ecx, newperson;
	__asm        mov    [ecx+0xF0], ax;
// LINE 829:
	__asm        jmp    near ptr 0x0054792D;
// LINE 831:
// Block end:
	__asm        jmp    near ptr 0x0054792D;
	__asm        sub    dword ptr [ebp-0x20], 0xD1;
	__asm        cmp    dword ptr [ebp-0x20], 0x25;
	__asm        ja     near ptr 0x0054792D;
	__asm        mov    eax, [ebp-0x20];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x547907];
	__asm        jmp    dword ptr [ecx*4+0x5478F3];
	__asm        out    dx, al;
	__asm        je     short 0x0054794A;
	__asm        add    [edi+0x75], dl;
	__asm        push   esp;
	__asm        add    ds:[0x91005476], al;
	__asm        jne    short 0x00547956;
	__asm        add    ds:[0x5479], ch;
	__asm        add    [esp+eax], eax;
	__asm        add    al, 4;
	__asm        add    al, [esp+eax];
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        add    al, 4;
	__asm        (bad);
// LINE 832:
	__asm        jmp    near ptr 0x00547932;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547937
void cYObject::StartScurkPeopleNearAvatar() {
	short rectdiam;
	short celly;
	short cellx;
	short count;
	struct Rect r;

// LINE 837:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 839:
	__asm        movsx  eax, word ptr ds:[0x5B867C];
	__asm        movsx  ecx, word ptr ds:[0x5B8674];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0054795B;
// LINE 840:
	__asm        jmp    near ptr 0x00547ABD;
// LINE 841:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    cellx, ax;
// LINE 842:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    celly, ax;
// LINE 844:
	__asm        movsx  eax, cellx;
	__asm        movsx  ecx, word ptr ds:[0x5B86A8];
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x005479A8;
	__asm        movsx  eax, celly;
	__asm        movsx  ecx, word ptr ds:[0x5B86AC];
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x005479A8;
// LINE 845:
	__asm        jmp    near ptr 0x00547ABD;
// LINE 847:
	__asm        mov    ax, cellx;
	__asm        mov    ds:[0x5B86A8], ax;
// LINE 848:
	__asm        mov    ax, celly;
	__asm        mov    ds:[0x5B86AC], ax;
// LINE 853:
	__asm        movsx  eax, cellx;
	__asm        movsx  ecx, word ptr ds:[0x5B86A4];
	__asm        sub    eax, ecx;
	__asm        mov    r.left, ax;
// LINE 854:
	__asm        movsx  eax, word ptr ds:[0x5B86A4];
	__asm        movsx  ecx, cellx;
	__asm        add    eax, ecx;
	__asm        mov    r.right, ax;
// LINE 855:
	__asm        movsx  eax, celly;
	__asm        movsx  ecx, word ptr ds:[0x5B86A4];
	__asm        sub    eax, ecx;
	__asm        mov    r.top, ax;
// LINE 856:
	__asm        movsx  eax, word ptr ds:[0x5B86A4];
	__asm        movsx  ecx, celly;
	__asm        add    eax, ecx;
	__asm        mov    r.bottom, ax;
// LINE 857:
	__asm        mov    ax, r.left;
	__asm        mov    cellx, ax;
// LINE 858:
	__asm        mov    ax, r.top;
	__asm        mov    celly, ax;
// LINE 859:
	__asm        movsx  eax, word ptr ds:[0x5B86A4];
	__asm        add    eax, eax;
	__asm        mov    rectdiam, ax;
// LINE 860:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00547A2C;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, rectdiam;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00547AB8;
// LINE 861:
	__asm        movsx  eax, r.top;
	__asm        movsx  ecx, count;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.left);
	__asm        push   eax;
	__asm        call   0x00547440;
	__asm        add    esp, 8;
// LINE 862:
	__asm        movsx  eax, r.bottom;
	__asm        movsx  ecx, count;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.right);
	__asm        push   eax;
	__asm        call   0x00547440;
	__asm        add    esp, 8;
// LINE 863:
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.top);
	__asm        push   eax;
	__asm        movsx  eax, r.right;
	__asm        movsx  ecx, count;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        call   0x00547440;
	__asm        add    esp, 8;
// LINE 864:
	__asm        mov    eax, reinterpret_cast<uint32_t>(r.bottom);
	__asm        push   eax;
	__asm        movsx  eax, r.left;
	__asm        movsx  ecx, count;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        call   0x00547440;
	__asm        add    esp, 8;
// LINE 865:
	__asm        movsx  eax, word ptr ds:[0x5B867C];
	__asm        movsx  ecx, word ptr ds:[0x5B8674];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00547AB3;
// LINE 866:
	__asm        jmp    near ptr 0x00547ABD;
// LINE 867:
	__asm        jmp    near ptr 0x00547A28;
// LINE 868:
	__asm        jmp    near ptr 0x00547ABD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547ac2
void cYObject::BeamRemainingAmbients() {
	short numtries;

// LINE 871:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 872:
	__asm        mov    numtries, 0;
// LINE 873:
	__asm        movsx  eax, word ptr ds:[0x5B8678];
	__asm        movsx  ecx, word ptr ds:[0x5B8674];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00547C61;
	__asm        mov    ax, numtries;
	__asm        mov    [ebp-0x10], ax;
	__asm        inc    numtries;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        cmp    eax, 0x1E;
	__asm        jge    near ptr 0x00547C61;
// LINE 874:
// Block start:
	short id;
	short lastnumawake;
	__asm        mov    ax, ds:[0x5B8674];
	__asm        mov    lastnumawake, ax;
// LINE 875:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        call   0x0054A1D3;
	__asm        add    esp, 0x1C;
	__asm        mov    id, ax;
	__asm        jmp    near ptr 0x00547B29;
// LINE 876:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00547C5C;
// LINE 877:
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547B4F;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00547B6B;
	__asm        push   0x8C085;
	__asm        push   0x5B8F0C;
	__asm        push   0x36D;
	__asm        push   0x5B8F3C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 878:
	__asm        movsx  eax, lastnumawake;
	__asm        inc    eax;
	__asm        movsx  ecx, word ptr ds:[0x5B8674];
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00547B9B;
	__asm        push   0x8C085;
	__asm        push   0x5B8F60;
	__asm        push   0x36E;
	__asm        push   0x5B8F68;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 879:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00547BBC;
	__asm        cmp    dword ptr ds:[0x5B8680], 0;
	__asm        jne    near ptr 0x00547C5C;
	__asm        jmp    near ptr 0x00547C40;
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547BD5;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00547BF1;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00547C1F;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00547C5C;
	__asm        jmp    near ptr 0x00547C40;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x00547C5C;
	__asm        push   0x8C085;
	__asm        push   0x5B8F8C;
	__asm        push   0x36F;
	__asm        push   0x5B8FA8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 884:
// Block end:
	__asm        jmp    near ptr 0x00547AD1;
// LINE 885:
	__asm        jmp    near ptr 0x00547C66;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547c6b
void cYObject::TryStartAllAmbient() {
// LINE 888:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 890:
	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, word ptr ds:[0x5B8688];
	__asm        sub    eax, ecx;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 3;
	__asm        jge    near ptr 0x00547CA2;
	__asm        jmp    near ptr 0x00547CB9;
	__asm        jmp    near ptr 0x00547CAC;
	__asm        jmp    near ptr 0x00547CBE;
	__asm        jmp    near ptr 0x00547CB9;
	__asm        test   dword ptr [ebp-4], 0xFFFF;
	__asm        je     near ptr 0x00547CBE;
// LINE 893:
	__asm        call   0x00547AC2;
// LINE 895:
	__asm        jmp    near ptr 0x00547CC3;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547cc8
class cYObject* cYObject::GetSleepingPerson() {
	class cYObject* sleeper;
	short count;
	class cYObject* test;

// LINE 898:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 899:
	__asm        mov    sleeper, 0;
// LINE 900:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00547CE7;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00547DD4;
// LINE 901:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00547D10;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    test, eax;
	__asm        jmp    near ptr 0x00547D8C;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547D29;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00547D45;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00547D73;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    test, eax;
	__asm        jmp    near ptr 0x00547D8C;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    test, eax;
// LINE 902:
	__asm        cmp    test, 0;
	__asm        jne    near ptr 0x00547DB2;
	__asm        push   0x8C085;
	__asm        push   0x5B8FCC;
	__asm        push   0x386;
	__asm        push   0x5B8FD4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 903:
	__asm        mov    eax, test;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00547DCF;
// LINE 904:
	__asm        mov    eax, test;
	__asm        mov    sleeper, eax;
// LINE 905:
	__asm        jmp    near ptr 0x00547DD4;
// LINE 907:
	__asm        jmp    near ptr 0x00547CE3;
// LINE 908:
	__asm        mov    eax, sleeper;
	__asm        jmp    near ptr 0x00547DDC;
// LINE 909:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547de1
void MakeAllPeople() {
	struct _SYSTEMTIME st;
	char peoplepath[260];

// LINE 913:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x114;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 915:
	__asm        lea    eax, st.wYear;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3790];
// LINE 916:
	__asm        mov    eax, reinterpret_cast<uint32_t>(st.wSecond);
	__asm        and    eax, 0xFFFF;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, st.wMilliseconds;
	__asm        add    eax, ecx;
	__asm        push   eax;
	__asm        call   0x0055D52D;
	__asm        add    esp, 4;
// LINE 919:
	__asm        lea    eax, peoplepath[0];
	__asm        push   eax;
	__asm        push   0x5B8FF8;
	__asm        push   0;
	__asm        push   0xA;
	__asm        call   0x0049172B;
	__asm        add    esp, 0x10;
// LINE 920:
	__asm        lea    eax, peoplepath[0];
	__asm        push   eax;
	__asm        call   0x00548047;
	__asm        add    esp, 4;
// LINE 921:
	__asm        call   0x00547E9B;
// LINE 923:
	__asm        call   0x005508A3;
	__asm        mov    ds:[0x5B8680], eax;
// LINE 926:
	__asm        jmp    near ptr 0x00547E54;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547e59
void DeleteAllPeople() {
// LINE 929:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 930:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00547E8C;
	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    near ptr 0x00547E8C;
// LINE 931:
	__asm        call   0x00550567;
// LINE 932:
	__asm        jmp    near ptr 0x00547E96;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00547e9b
void cYObject::MakePlebes() {
	int32_t newnum;
	int32_t pindex;
	struct Point3d p;

// LINE 944:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 947:
	__asm        mov    p.x, 0;
	__asm        mov    p.y, 0;
	__asm        mov    p.z, 0;
// LINE 950:
	__asm        mov    pindex, 0;
	__asm        jmp    near ptr 0x00547EC8;
	__asm        inc    pindex;
	__asm        cmp    pindex, 0x64;
	__asm        jge    near ptr 0x0054803D;
// LINE 952:
// Block start:
	class cYObject* personobj;
	__asm        mov    eax, ds:[0x636B8C];
	__asm        push   eax;
	__asm        mov    eax, p.z;
	__asm        push   eax;
	__asm        mov    eax, p.y;
	__asm        push   eax;
	__asm        mov    eax, p.x;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x005509CB;
	__asm        add    esp, 0x14;
	__asm        movsx  eax, ax;
	__asm        mov    newnum, eax;
// LINE 954:
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00547F10;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    personobj, eax;
	__asm        jmp    near ptr 0x00547F8C;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00547F29;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00547F45;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00547F73;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, reinterpret_cast<uint16_t>(newnum);
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    personobj, eax;
	__asm        jmp    near ptr 0x00547F8C;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    personobj, eax;
// LINE 955:
	__asm        cmp    personobj, 0;
	__asm        jne    near ptr 0x00547FB2;
	__asm        push   0x8C085;
	__asm        push   0x5B9004;
	__asm        push   0x3BB;
	__asm        push   0x5B9010;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 956:
	__asm        mov    eax, personobj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, newnum;
	__asm        je     near ptr 0x00547FE1;
	__asm        push   0x8C085;
	__asm        push   0x5B9034;
	__asm        push   0x3BC;
	__asm        push   0x5B903C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 957:
	__asm        mov    eax, personobj;
	__asm        movsx  eax, word ptr [eax+0xDE];
	__asm        cmp    eax, newnum;
	__asm        je     near ptr 0x00548010;
	__asm        push   0x8C085;
	__asm        push   0x5B9060;
	__asm        push   0x3BD;
	__asm        push   0x5B9068;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 959:
	__asm        mov    eax, pindex;
	__asm        cmp    newnum, eax;
	__asm        je     near ptr 0x00548038;
	__asm        push   0x8C085;
	__asm        push   0x5B908C;
	__asm        push   0x3BF;
	__asm        push   0x5B9094;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 960:
// Block end:
	__asm        jmp    near ptr 0x00547EC5;
// LINE 961:
	__asm        jmp    near ptr 0x00548042;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00548047
void cYObject::InitObjects(char * globalBehaviorFileName) {
// LINE 964:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x549BC5;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 965:
	__asm        xor    eax, eax;
	__asm        mov    ax, ds:[0x5B8668];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00549BA6;
// LINE 967:
// Block start:
	short n;
	short count;
	__asm        mov    dword ptr ds:[0x636CE0], 0;
// LINE 968:
	__asm        mov    dword ptr ds:[0x636CE8], 0xFFFF0000;
// LINE 970:
	__asm        mov    dword ptr ds:[0x636CEC], 0xB504;
// LINE 971:
	__asm        mov    dword ptr ds:[0x636CF4], 0xFFFF4AFC;
// LINE 973:
	__asm        mov    dword ptr ds:[0x636CF8], 0x10000;
// LINE 974:
	__asm        mov    dword ptr ds:[0x636D00], 0;
// LINE 976:
	__asm        mov    dword ptr ds:[0x636D04], 0xB504;
// LINE 977:
	__asm        mov    dword ptr ds:[0x636D0C], 0xB504;
// LINE 979:
	__asm        mov    dword ptr ds:[0x636D10], 0;
// LINE 980:
	__asm        mov    dword ptr ds:[0x636D18], 0x10000;
// LINE 982:
	__asm        mov    dword ptr ds:[0x636D1C], 0xFFFF4AFC;
// LINE 983:
	__asm        mov    dword ptr ds:[0x636D24], 0xB504;
// LINE 985:
	__asm        mov    dword ptr ds:[0x636D28], 0xFFFF0000;
// LINE 986:
	__asm        mov    dword ptr ds:[0x636D30], 0;
// LINE 988:
	__asm        mov    dword ptr ds:[0x636D34], 0xFFFF4AFC;
// LINE 989:
	__asm        mov    dword ptr ds:[0x636D3C], 0xFFFF4AFC;
// LINE 992:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00548124;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 8;
	__asm        jge    near ptr 0x00548148;
// LINE 993:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    dword ptr [eax*4+0x636CE4], 0;
	__asm        jmp    near ptr 0x00548120;
// LINE 995:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00548157;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 8;
	__asm        jge    near ptr 0x005481E7;
// LINE 996:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, [eax*4+0x636CE0];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x635530], eax;
// LINE 997:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, [eax*4+0x636CE8];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x635538], eax;
// LINE 998:
	__asm        push   0xC0000;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, [eax*4+0x636CE4];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        movsx  ecx, count;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    [ecx*4+0x635534], eax;
// LINE 999:
	__asm        jmp    near ptr 0x00548153;
// LINE 1003:
	__asm        mov    word ptr ds:[0x6361C0], 0xA;
// LINE 1005:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x005481FF;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    near ptr 0x00548360;
// LINE 1006:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00548314;
// LINE 1008:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x352;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1010:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x2BC;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1012:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x2BC;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1014:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x2EE;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1016:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x320;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1018:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x321;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1022:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x325;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1024:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x514;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1026:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x515;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1028:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x516;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1030:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x578;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1032:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x579;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1034:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x636B98], 0x258;
	__asm        jmp    near ptr 0x0054835B;
// LINE 1035:
	__asm        jmp    near ptr 0x0054835B;
	__asm        dec    dword ptr [ebp-0x28];
	__asm        cmp    dword ptr [ebp-0x28], 0xB;
	__asm        ja     near ptr 0x005482FC;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    dword ptr [eax*4+0x54832B];
	__asm        sub    eax, [edx-0x7DC1FFAC];
	__asm        push   esp;
	__asm        add    [eax], bl;
	__asm        adc    byte ptr [eax+eax+0x51], 0x82;
	__asm        push   esp;
	__asm        add    [edi-0x7E], dh;
	__asm        push   esp;
	__asm        add    [edx+eax*4+0x54], ah;
	__asm        add    dh, dl;
	__asm        adc    byte ptr [eax+eax-0x17], 0x82;
	__asm        push   esp;
	__asm        add    [edx-0x62FFAB7E], cl;
	__asm        adc    byte ptr [eax+eax-0x50], 0x82;
	__asm        push   esp;
	__asm        add    bl, al;
	__asm        (bad);
// LINE 1036:
	__asm        jmp    near ptr 0x005481FB;
// LINE 1039:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054836F;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x14;
	__asm        jge    near ptr 0x005483C9;
// LINE 1040:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00548395;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x14;
	__asm        jl     near ptr 0x005483B1;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*2+0x6352D8], 0xFFFF;
	__asm        jmp    near ptr 0x005483C4;
// LINE 1041:
	__asm        jmp    near ptr 0x0054836B;
// LINE 1043:
	__asm        jmp    near ptr 0x005483EA;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352DA], 0x384;
	__asm        jmp    near ptr 0x005483F8;
// LINE 1046:
	__asm        jmp    near ptr 0x00548419;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352DC], 0x385;
	__asm        jmp    near ptr 0x00548427;
// LINE 1047:
	__asm        jmp    near ptr 0x00548448;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352D8], 0x386;
	__asm        jmp    near ptr 0x00548456;
// LINE 1048:
	__asm        jmp    near ptr 0x00548477;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352DE], 0x387;
	__asm        jmp    near ptr 0x00548485;
// LINE 1049:
	__asm        jmp    near ptr 0x005484A6;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352E0], 0x388;
	__asm        jmp    near ptr 0x005484B4;
// LINE 1050:
	__asm        jmp    near ptr 0x005484D5;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352E2], 0x389;
	__asm        jmp    near ptr 0x005484E3;
// LINE 1051:
	__asm        jmp    near ptr 0x00548504;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352E4], 0x387;
	__asm        jmp    near ptr 0x00548512;
// LINE 1052:
	__asm        jmp    near ptr 0x00548533;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352E6], 0x38A;
	__asm        jmp    near ptr 0x00548541;
// LINE 1053:
	__asm        jmp    near ptr 0x00548562;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352E8], 0x38A;
	__asm        jmp    near ptr 0x00548570;
// LINE 1054:
	__asm        jmp    near ptr 0x00548591;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352EA], 0x387;
	__asm        jmp    near ptr 0x0054859F;
// LINE 1055:
	__asm        jmp    near ptr 0x005485C0;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352EC], 0x387;
	__asm        jmp    near ptr 0x005485CE;
// LINE 1056:
	__asm        jmp    near ptr 0x005485EF;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352EE], 0x38A;
	__asm        jmp    near ptr 0x005485FD;
// LINE 1057:
	__asm        jmp    near ptr 0x0054861E;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352F0], 0x38A;
	__asm        jmp    near ptr 0x0054862C;
// LINE 1058:
	__asm        jmp    near ptr 0x0054864D;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352F2], 0xFFFF;
	__asm        jmp    near ptr 0x0054865B;
// LINE 1059:
	__asm        jmp    near ptr 0x0054867C;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352F4], 0x386;
	__asm        jmp    near ptr 0x0054868A;
// LINE 1060:
	__asm        jmp    near ptr 0x005486AB;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352F6], 0x386;
	__asm        jmp    near ptr 0x005486B9;
// LINE 1061:
	__asm        jmp    near ptr 0x005486DA;
	__asm        push   0x8C085;
	__asm        push   0x5BBB18;
	__asm        push   0x129;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    word ptr ds:[0x6352F8], 0x387;
	__asm        jmp    near ptr 0x005486E8;
// LINE 1069:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x005486F7;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    near ptr 0x00548958;
// LINE 1070:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00548928;
// LINE 1080:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635300], 2;
// LINE 1081:
	__asm        mov    n, 1;
	__asm        jmp    near ptr 0x00548731;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0054875C;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x635300], 0;
	__asm        jmp    near ptr 0x0054872D;
// LINE 1082:
	__asm        jmp    near ptr 0x00548953;
// LINE 1084:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635300], 0xD;
// LINE 1085:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635304], 0xB;
// LINE 1086:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635308], 0xA;
// LINE 1087:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x63530C], 0xC;
// LINE 1088:
	__asm        mov    n, 4;
	__asm        jmp    near ptr 0x005487B8;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x005487E3;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x635300], 0;
	__asm        jmp    near ptr 0x005487B4;
// LINE 1089:
	__asm        jmp    near ptr 0x00548953;
// LINE 1092:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635304], 7;
// LINE 1094:
	__asm        mov    n, 3;
	__asm        jmp    near ptr 0x00548809;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x00548834;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x635300], 0;
	__asm        jmp    near ptr 0x00548805;
// LINE 1095:
	__asm        jmp    near ptr 0x00548953;
// LINE 1097:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635300], 0xC;
// LINE 1098:
	__asm        mov    n, 1;
	__asm        jmp    near ptr 0x0054885A;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x00548885;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x635300], 0;
	__asm        jmp    near ptr 0x00548856;
// LINE 1099:
	__asm        jmp    near ptr 0x00548953;
// LINE 1108:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635300], 0xD;
// LINE 1109:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635304], 0xB;
// LINE 1110:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635308], 0xA;
// LINE 1111:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x63530C], 0xC;
// LINE 1112:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x635310], 7;
// LINE 1113:
	__asm        mov    n, 5;
	__asm        jmp    near ptr 0x005488F3;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0054891E;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x635300], 0;
	__asm        jmp    near ptr 0x005488EF;
// LINE 1114:
	__asm        jmp    near ptr 0x00548953;
// LINE 1116:
	__asm        jmp    near ptr 0x00548953;
	__asm        dec    dword ptr [ebp-0x2C];
	__asm        cmp    dword ptr [ebp-0x2C], 4;
	__asm        ja     near ptr 0x0054888A;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x54893F];
	__asm        adc    [edi-0x789EFFAC], al;
	__asm        push   esp;
	__asm        add    al, ch;
	__asm        xchg   edx, [eax+eax-0x76];
	__asm        mov    [eax+eax+0x39], dl;
	__asm        (bad);
// LINE 1117:
	__asm        jmp    near ptr 0x005486F3;
// LINE 1119:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00548967;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x12;
	__asm        jge    near ptr 0x00548AEB;
// LINE 1120:
	__asm        movsx  eax, count;
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00548ACD;
// LINE 1122:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D0], 0xD;
// LINE 1123:
	__asm        mov    n, 1;
	__asm        jmp    near ptr 0x005489A1;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x005489CC;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x6372D0], 0;
	__asm        jmp    near ptr 0x0054899D;
// LINE 1124:
	__asm        jmp    near ptr 0x00548AE6;
// LINE 1126:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D0], 5;
// LINE 1127:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D4], 4;
// LINE 1128:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D8], 3;
// LINE 1129:
	__asm        mov    n, 3;
	__asm        jmp    near ptr 0x00548A16;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x00548A41;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x6372D0], 0;
	__asm        jmp    near ptr 0x00548A12;
// LINE 1130:
	__asm        jmp    near ptr 0x00548AE6;
// LINE 1137:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D0], 0xC;
// LINE 1138:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D4], 0xD;
// LINE 1139:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372D8], 0xB;
// LINE 1140:
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    dword ptr [eax*8+0x6372DC], 0xA;
// LINE 1142:
	__asm        mov    n, 4;
	__asm        jmp    near ptr 0x00548A9D;
	__asm        inc    n;
	__asm        movsx  eax, n;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x00548AC8;
	__asm        movsx  eax, count;
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, n;
	__asm        shl    ecx, 2;
	__asm        mov    dword ptr [ecx+eax*8+0x6372D0], 0;
	__asm        jmp    near ptr 0x00548A99;
// LINE 1143:
	__asm        jmp    near ptr 0x00548AE6;
	__asm        cmp    dword ptr [ebp-0x30], 7;
	__asm        je     near ptr 0x00548980;
	__asm        cmp    dword ptr [ebp-0x30], 0x11;
	__asm        je     near ptr 0x005489D1;
	__asm        jmp    near ptr 0x00548A46;
// LINE 1144:
	__asm        jmp    near ptr 0x00548963;
// LINE 1145:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00548AFA;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jge    near ptr 0x00548BAC;
// LINE 1146:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x00548B48;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 3;
	__asm        je     near ptr 0x00548B48;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        je     near ptr 0x00548B48;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x00548B48;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 2;
	__asm        jne    near ptr 0x00548B8A;
// LINE 1147:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*8+0x635268], 1;
// LINE 1148:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jne    near ptr 0x00548B77;
// LINE 1149:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*8+0x63526C], 2;
// LINE 1150:
	__asm        jmp    near ptr 0x00548B85;
// LINE 1151:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*8+0x63526C], 4;
// LINE 1153:
	__asm        jmp    near ptr 0x00548BA7;
// LINE 1154:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*8+0x635268], 0;
// LINE 1155:
	__asm        movsx  eax, count;
	__asm        mov    word ptr [eax*8+0x63526C], 4;
// LINE 1157:
	__asm        jmp    near ptr 0x00548AF6;
// LINE 1162:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00548BBB;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x100;
	__asm        jge    near ptr 0x00549089;
// LINE 1163:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00548BEA;
// LINE 1164:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 2;
// LINE 1165:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 1;
	__asm        jl     near ptr 0x00548C18;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jg     near ptr 0x00548C18;
// LINE 1166:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 4;
// LINE 1167:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 6;
	__asm        jl     near ptr 0x00548C46;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xC;
	__asm        jg     near ptr 0x00548C46;
// LINE 1168:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 3;
// LINE 1169:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD;
	__asm        je     near ptr 0x00548C71;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD5;
	__asm        je     near ptr 0x00548C71;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xDA;
	__asm        jne    near ptr 0x00548C85;
// LINE 1170:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 5;
// LINE 1171:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE;
	__asm        jl     near ptr 0x00548CB3;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x1C;
	__asm        jg     near ptr 0x00548CB3;
// LINE 1172:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 6;
// LINE 1173:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00548CCD;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x00548D1B;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x43;
	__asm        jl     near ptr 0x00548CE7;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x44;
	__asm        jle    near ptr 0x00548D1B;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x00548D01;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x50;
	__asm        jle    near ptr 0x00548D1B;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x61;
	__asm        jl     near ptr 0x00548D2F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x69;
	__asm        jg     near ptr 0x00548D2F;
// LINE 1174:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 7;
// LINE 1175:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x51;
	__asm        jl     near ptr 0x00548D49;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x5A;
	__asm        jle    near ptr 0x00548D70;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        je     near ptr 0x00548D70;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x6A;
	__asm        jl     near ptr 0x00548D84;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x00548D84;
// LINE 1176:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 8;
// LINE 1177:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x2C;
	__asm        jl     near ptr 0x00548D9E;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x3E;
	__asm        jle    near ptr 0x00548DEC;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x00548DB8;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x50;
	__asm        jle    near ptr 0x00548DEC;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x45;
	__asm        jl     near ptr 0x00548DD2;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x49;
	__asm        jle    near ptr 0x00548DEC;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x5B;
	__asm        jl     near ptr 0x00548E00;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x60;
	__asm        jg     near ptr 0x00548E00;
// LINE 1178:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 9;
// LINE 1179:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x70;
	__asm        jl     near ptr 0x00548E1A;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7B;
	__asm        jle    near ptr 0x00548E74;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x8C;
	__asm        jl     near ptr 0x00548E38;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x93;
	__asm        jle    near ptr 0x00548E74;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xAA;
	__asm        jl     near ptr 0x00548E56;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xB1;
	__asm        jle    near ptr 0x00548E74;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFB;
	__asm        jl     near ptr 0x00548E88;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFF;
	__asm        jg     near ptr 0x00548E88;
// LINE 1180:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 0xA;
// LINE 1181:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xB2;
	__asm        jl     near ptr 0x00548EA6;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xBB;
	__asm        jle    near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD0;
	__asm        jl     near ptr 0x00548EC4;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD1;
	__asm        jle    near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD9;
	__asm        je     near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE1;
	__asm        je     near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF1;
	__asm        je     near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF3;
	__asm        je     near ptr 0x00548F0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF7;
	__asm        jne    near ptr 0x00548F23;
// LINE 1182:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 0xC;
// LINE 1183:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x82;
	__asm        je     near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x84;
	__asm        jl     near ptr 0x00548F50;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x8B;
	__asm        jle    near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x9E;
	__asm        jl     near ptr 0x00548F6E;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xA9;
	__asm        jle    near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xBC;
	__asm        jl     near ptr 0x00548F8C;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xCF;
	__asm        jle    near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xE2;
	__asm        jl     near ptr 0x00548FAA;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xEF;
	__asm        jle    near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF2;
	__asm        je     near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF4;
	__asm        je     near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF6;
	__asm        je     near ptr 0x00548FF5;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xF9;
	__asm        jl     near ptr 0x00549009;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFA;
	__asm        jg     near ptr 0x00549009;
// LINE 1184:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 0xD;
// LINE 1185:
	__asm        jmp    near ptr 0x00549084;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7C;
	__asm        jl     near ptr 0x00549025;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x83;
	__asm        jle    near ptr 0x00549061;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x94;
	__asm        jl     near ptr 0x00549043;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x9D;
	__asm        jle    near ptr 0x00549061;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xD2;
	__asm        jl     near ptr 0x00549075;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xFA;
	__asm        jg     near ptr 0x00549075;
// LINE 1186:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 0xB;
// LINE 1187:
	__asm        jmp    near ptr 0x00549084;
// LINE 1188:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636ED0], 1;
// LINE 1189:
	__asm        jmp    near ptr 0x00548BB7;
// LINE 1192:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00549098;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x005490B9;
// LINE 1193:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x636D40], 0;
	__asm        jmp    near ptr 0x00549094;
// LINE 1194:
	__asm        mov    word ptr ds:[0x5B8668], 1;
// LINE 1197:
	__asm        cmp    globalBehaviorFileName, 0;
	__asm        jne    near ptr 0x005490E8;
	__asm        push   0x8C085;
	__asm        push   0x5B90B8;
	__asm        push   0x4AD;
	__asm        push   0x5B90E4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1198:
	__asm        mov    eax, globalBehaviorFileName;
	__asm        push   eax;
	__asm        mov    ecx, 0x636BB8;
	__asm        call   0x00552E51;
// LINE 1199:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00549127;
	__asm        push   0x8C085;
	__asm        push   0x5B9108;
	__asm        push   0x4AF;
	__asm        push   0x5B9130;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1200:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00549149;
// LINE 1201:
	__asm        push   0x5B9154;
	__asm        call   0x0058E320;
	__asm        add    esp, 4;
// LINE 1203:
	__asm        push   4;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00549179;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x005609D0;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00549180;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ds:[0x635250], eax;
// LINE 1204:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x005491CD;
	__asm        push   0x636BB8;
	__asm        push   0x636BB8;
	__asm        mov    eax, ds:[0x635250];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   0x00560290;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005491D4;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ds:[0x636B8C], eax;
// LINE 1208:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x005491F2;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x40;
	__asm        jge    near ptr 0x00549213;
// LINE 1209:
	__asm        movsx  eax, count;
	__asm        mov    dword ptr [eax*4+0x6375A8], 0;
	__asm        jmp    near ptr 0x005491EE;
// LINE 1210:
	__asm        jmp    near ptr 0x00549234;
	__asm        push   0x8C085;
	__asm        push   0x5B9178;
	__asm        push   0x4BA;
	__asm        push   0x5B91B0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375A8], 0x552370;
// LINE 1211:
	__asm        jmp    near ptr 0x0054925F;
	__asm        push   0x8C085;
	__asm        push   0x5B91D4;
	__asm        push   0x4BB;
	__asm        push   0x5B920C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375AC], 0x552390;
// LINE 1212:
	__asm        jmp    near ptr 0x0054928A;
	__asm        push   0x8C085;
	__asm        push   0x5B9230;
	__asm        push   0x4BC;
	__asm        push   0x5B9268;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375B0], 0x5523B0;
// LINE 1214:
	__asm        jmp    near ptr 0x005492B5;
	__asm        push   0x8C085;
	__asm        push   0x5B928C;
	__asm        push   0x4BE;
	__asm        push   0x5B92C4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375B8], 0x5523D0;
// LINE 1215:
	__asm        jmp    near ptr 0x005492E0;
	__asm        push   0x8C085;
	__asm        push   0x5B92E8;
	__asm        push   0x4BF;
	__asm        push   0x5B9320;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375C0], 0x5523F0;
// LINE 1216:
	__asm        jmp    near ptr 0x0054930B;
	__asm        push   0x8C085;
	__asm        push   0x5B9344;
	__asm        push   0x4C0;
	__asm        push   0x5B937C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375C4], 0x552410;
// LINE 1221:
	__asm        jmp    near ptr 0x00549336;
	__asm        push   0x8C085;
	__asm        push   0x5B93A0;
	__asm        push   0x4C5;
	__asm        push   0x5B93D8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375D8], 0x552430;
// LINE 1222:
	__asm        jmp    near ptr 0x00549361;
	__asm        push   0x8C085;
	__asm        push   0x5B93FC;
	__asm        push   0x4C6;
	__asm        push   0x5B9434;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375DC], 0x552450;
// LINE 1223:
	__asm        jmp    near ptr 0x0054938C;
	__asm        push   0x8C085;
	__asm        push   0x5B9458;
	__asm        push   0x4C7;
	__asm        push   0x5B9490;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375E0], 0x552470;
// LINE 1224:
	__asm        jmp    near ptr 0x005493B7;
	__asm        push   0x8C085;
	__asm        push   0x5B94B4;
	__asm        push   0x4C8;
	__asm        push   0x5B94EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375E4], 0x552490;
// LINE 1225:
	__asm        jmp    near ptr 0x005493E2;
	__asm        push   0x8C085;
	__asm        push   0x5B9510;
	__asm        push   0x4C9;
	__asm        push   0x5B9548;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375E8], 0x5524B0;
// LINE 1226:
	__asm        jmp    near ptr 0x0054940D;
	__asm        push   0x8C085;
	__asm        push   0x5B956C;
	__asm        push   0x4CA;
	__asm        push   0x5B95A4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375EC], 0x5524D0;
// LINE 1227:
	__asm        jmp    near ptr 0x00549438;
	__asm        push   0x8C085;
	__asm        push   0x5B95C8;
	__asm        push   0x4CB;
	__asm        push   0x5B9600;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375F0], 0x5524F0;
// LINE 1228:
	__asm        jmp    near ptr 0x00549463;
	__asm        push   0x8C085;
	__asm        push   0x5B9624;
	__asm        push   0x4CC;
	__asm        push   0x5B965C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375F4], 0x552510;
// LINE 1229:
	__asm        jmp    near ptr 0x0054948E;
	__asm        push   0x8C085;
	__asm        push   0x5B9680;
	__asm        push   0x4CD;
	__asm        push   0x5B96B8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375F8], 0x552530;
// LINE 1230:
	__asm        jmp    near ptr 0x005494B9;
	__asm        push   0x8C085;
	__asm        push   0x5B96DC;
	__asm        push   0x4CE;
	__asm        push   0x5B9714;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6375FC], 0x552550;
// LINE 1231:
	__asm        jmp    near ptr 0x005494E4;
	__asm        push   0x8C085;
	__asm        push   0x5B9738;
	__asm        push   0x4CF;
	__asm        push   0x5B9770;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637600], 0x552570;
// LINE 1232:
	__asm        jmp    near ptr 0x0054950F;
	__asm        push   0x8C085;
	__asm        push   0x5B9794;
	__asm        push   0x4D0;
	__asm        push   0x5B97CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637604], 0x552590;
// LINE 1233:
	__asm        jmp    near ptr 0x0054953A;
	__asm        push   0x8C085;
	__asm        push   0x5B97F0;
	__asm        push   0x4D1;
	__asm        push   0x5B9828;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637608], 0x5525B0;
// LINE 1234:
	__asm        jmp    near ptr 0x00549565;
	__asm        push   0x8C085;
	__asm        push   0x5B984C;
	__asm        push   0x4D2;
	__asm        push   0x5B9884;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63760C], 0x5525D0;
// LINE 1235:
	__asm        jmp    near ptr 0x00549590;
	__asm        push   0x8C085;
	__asm        push   0x5B98A8;
	__asm        push   0x4D3;
	__asm        push   0x5B98E0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637610], 0x5525F0;
// LINE 1236:
	__asm        jmp    near ptr 0x005495BB;
	__asm        push   0x8C085;
	__asm        push   0x5B9904;
	__asm        push   0x4D4;
	__asm        push   0x5B993C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637614], 0x552610;
// LINE 1237:
	__asm        jmp    near ptr 0x005495E6;
	__asm        push   0x8C085;
	__asm        push   0x5B9960;
	__asm        push   0x4D5;
	__asm        push   0x5B9998;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637618], 0x552630;
// LINE 1238:
	__asm        jmp    near ptr 0x00549611;
	__asm        push   0x8C085;
	__asm        push   0x5B99BC;
	__asm        push   0x4D6;
	__asm        push   0x5B99F4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63761C], 0x552650;
// LINE 1239:
	__asm        jmp    near ptr 0x0054963C;
	__asm        push   0x8C085;
	__asm        push   0x5B9A18;
	__asm        push   0x4D7;
	__asm        push   0x5B9A50;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637620], 0x552670;
// LINE 1240:
	__asm        jmp    near ptr 0x00549667;
	__asm        push   0x8C085;
	__asm        push   0x5B9A74;
	__asm        push   0x4D8;
	__asm        push   0x5B9AAC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637624], 0x552690;
// LINE 1241:
	__asm        jmp    near ptr 0x00549692;
	__asm        push   0x8C085;
	__asm        push   0x5B9AD0;
	__asm        push   0x4D9;
	__asm        push   0x5B9B08;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637628], 0x5526B0;
// LINE 1242:
	__asm        jmp    near ptr 0x005496BD;
	__asm        push   0x8C085;
	__asm        push   0x5B9B2C;
	__asm        push   0x4DA;
	__asm        push   0x5B9B64;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63762C], 0x5526D0;
// LINE 1243:
	__asm        jmp    near ptr 0x005496E8;
	__asm        push   0x8C085;
	__asm        push   0x5B9B88;
	__asm        push   0x4DB;
	__asm        push   0x5B9BC0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637630], 0x5526F0;
// LINE 1244:
	__asm        jmp    near ptr 0x00549713;
	__asm        push   0x8C085;
	__asm        push   0x5B9BE4;
	__asm        push   0x4DC;
	__asm        push   0x5B9C1C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637634], 0x552710;
// LINE 1245:
	__asm        jmp    near ptr 0x0054973E;
	__asm        push   0x8C085;
	__asm        push   0x5B9C40;
	__asm        push   0x4DD;
	__asm        push   0x5B9C78;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637638], 0x552730;
// LINE 1246:
	__asm        jmp    near ptr 0x00549769;
	__asm        push   0x8C085;
	__asm        push   0x5B9C9C;
	__asm        push   0x4DE;
	__asm        push   0x5B9CD4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63763C], 0x552750;
// LINE 1247:
	__asm        jmp    near ptr 0x00549794;
	__asm        push   0x8C085;
	__asm        push   0x5B9CF8;
	__asm        push   0x4DF;
	__asm        push   0x5B9D30;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637640], 0x552770;
// LINE 1248:
	__asm        jmp    near ptr 0x005497BF;
	__asm        push   0x8C085;
	__asm        push   0x5B9D54;
	__asm        push   0x4E0;
	__asm        push   0x5B9D8C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637644], 0x552790;
// LINE 1249:
	__asm        jmp    near ptr 0x005497EA;
	__asm        push   0x8C085;
	__asm        push   0x5B9DB0;
	__asm        push   0x4E1;
	__asm        push   0x5B9DE8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637648], 0x5527B0;
// LINE 1251:
	__asm        jmp    near ptr 0x00549815;
	__asm        push   0x8C085;
	__asm        push   0x5B9E0C;
	__asm        push   0x4E3;
	__asm        push   0x5B9E44;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637650], 0x5527D0;
// LINE 1252:
	__asm        jmp    near ptr 0x00549840;
	__asm        push   0x8C085;
	__asm        push   0x5B9E68;
	__asm        push   0x4E4;
	__asm        push   0x5B9EA0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637654], 0x5527F0;
// LINE 1253:
	__asm        jmp    near ptr 0x0054986B;
	__asm        push   0x8C085;
	__asm        push   0x5B9EC4;
	__asm        push   0x4E5;
	__asm        push   0x5B9EFC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637658], 0x552810;
// LINE 1254:
	__asm        jmp    near ptr 0x00549896;
	__asm        push   0x8C085;
	__asm        push   0x5B9F20;
	__asm        push   0x4E6;
	__asm        push   0x5B9F58;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63765C], 0x552830;
// LINE 1255:
	__asm        jmp    near ptr 0x005498C1;
	__asm        push   0x8C085;
	__asm        push   0x5B9F7C;
	__asm        push   0x4E7;
	__asm        push   0x5B9FB4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637660], 0x552850;
// LINE 1256:
	__asm        jmp    near ptr 0x005498EC;
	__asm        push   0x8C085;
	__asm        push   0x5B9FD8;
	__asm        push   0x4E8;
	__asm        push   0x5BA010;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637664], 0x552870;
// LINE 1257:
	__asm        jmp    near ptr 0x00549917;
	__asm        push   0x8C085;
	__asm        push   0x5BA034;
	__asm        push   0x4E9;
	__asm        push   0x5BA06C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637668], 0x552890;
// LINE 1258:
	__asm        jmp    near ptr 0x00549942;
	__asm        push   0x8C085;
	__asm        push   0x5BA090;
	__asm        push   0x4EA;
	__asm        push   0x5BA0C8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63766C], 0x5528B0;
// LINE 1259:
	__asm        jmp    near ptr 0x0054996D;
	__asm        push   0x8C085;
	__asm        push   0x5BA0EC;
	__asm        push   0x4EB;
	__asm        push   0x5BA124;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637670], 0x5528D0;
// LINE 1260:
	__asm        jmp    near ptr 0x00549998;
	__asm        push   0x8C085;
	__asm        push   0x5BA148;
	__asm        push   0x4EC;
	__asm        push   0x5BA180;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637674], 0x5528F0;
// LINE 1261:
	__asm        jmp    near ptr 0x005499C3;
	__asm        push   0x8C085;
	__asm        push   0x5BA1A4;
	__asm        push   0x4ED;
	__asm        push   0x5BA1DC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637678], 0x552910;
// LINE 1262:
	__asm        jmp    near ptr 0x005499EE;
	__asm        push   0x8C085;
	__asm        push   0x5BA200;
	__asm        push   0x4EE;
	__asm        push   0x5BA238;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63767C], 0x552930;
// LINE 1263:
	__asm        jmp    near ptr 0x00549A19;
	__asm        push   0x8C085;
	__asm        push   0x5BA25C;
	__asm        push   0x4EF;
	__asm        push   0x5BA294;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637680], 0x552950;
// LINE 1264:
	__asm        jmp    near ptr 0x00549A44;
	__asm        push   0x8C085;
	__asm        push   0x5BA2B8;
	__asm        push   0x4F0;
	__asm        push   0x5BA2F0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637684], 0x552970;
// LINE 1265:
	__asm        jmp    near ptr 0x00549A6F;
	__asm        push   0x8C085;
	__asm        push   0x5BA314;
	__asm        push   0x4F1;
	__asm        push   0x5BA34C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637688], 0x552990;
// LINE 1266:
	__asm        jmp    near ptr 0x00549A9A;
	__asm        push   0x8C085;
	__asm        push   0x5BA370;
	__asm        push   0x4F2;
	__asm        push   0x5BA3A8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63768C], 0x5529B0;
// LINE 1267:
	__asm        jmp    near ptr 0x00549AC5;
	__asm        push   0x8C085;
	__asm        push   0x5BA3CC;
	__asm        push   0x4F3;
	__asm        push   0x5BA404;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637690], 0x5529D0;
// LINE 1268:
	__asm        jmp    near ptr 0x00549AF0;
	__asm        push   0x8C085;
	__asm        push   0x5BA428;
	__asm        push   0x4F4;
	__asm        push   0x5BA460;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637694], 0x5529F0;
// LINE 1269:
	__asm        jmp    near ptr 0x00549B1B;
	__asm        push   0x8C085;
	__asm        push   0x5BA484;
	__asm        push   0x4F5;
	__asm        push   0x5BA4BC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x637698], 0x552A10;
// LINE 1270:
	__asm        jmp    near ptr 0x00549B46;
	__asm        push   0x8C085;
	__asm        push   0x5BA4E0;
	__asm        push   0x4F6;
	__asm        push   0x5BA518;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x63769C], 0x552A30;
// LINE 1271:
	__asm        jmp    near ptr 0x00549B71;
	__asm        push   0x8C085;
	__asm        push   0x5BA53C;
	__asm        push   0x4F7;
	__asm        push   0x5BA574;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6376A0], 0x552A50;
// LINE 1272:
	__asm        jmp    near ptr 0x00549B9C;
	__asm        push   0x8C085;
	__asm        push   0x5BA598;
	__asm        push   0x4F8;
	__asm        push   0x5BA5D0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    dword ptr ds:[0x6376A4], 0x552A70;
// LINE 1275:
// Block end:
	__asm        jmp    near ptr 0x00549BCF;
_L55489:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L55486:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L55485:
	__asm        mov    eax, 0x595DD0;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00549bdd
unsigned short cYObject::BeamIntoCameraRange() {
	unsigned short foundcell;
	unsigned short stop_now;
	int32_t offsetz;
	int32_t curr_dir;
	int32_t i;
	int32_t y;
	int32_t x;
	int32_t offsetx;
	struct Point3d vec;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 1279:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x48;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1283:
	__asm        mov    curr_dist, 0;
// LINE 1284:
	__asm        mov    curr_dir, 0xFFFFFFFF;
// LINE 1286:
	__asm        mov    stop_now, 0;
// LINE 1287:
	__asm        mov    spiral_dist, 7;
// LINE 1288:
	__asm        mov    foundcell, 0;
// LINE 1291:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, vec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1295:
	__asm        call   0x0056EC50;
	__asm        movsx  ecx, word ptr ds:[0x5B8648];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x44], edx;
	__asm        jmp    near ptr 0x00549D10;
// LINE 1299:
	__asm        mov    eax, vec.z;
	__asm        mov    vec.y, eax;
// LINE 1300:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1301:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1303:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1304:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1305:
	__asm        jmp    near ptr 0x00549D33;
// LINE 1308:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.y, eax;
// LINE 1309:
	__asm        mov    eax, vec.x;
	__asm        mov    vec.z, eax;
// LINE 1310:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1312:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1313:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1314:
	__asm        jmp    near ptr 0x00549D33;
// LINE 1317:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.x, eax;
// LINE 1318:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1320:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 2;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1321:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 2;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 1322:
	__asm        jmp    near ptr 0x00549D33;
// LINE 1326:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1327:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 1328:
	__asm        jmp    near ptr 0x00549D33;
// LINE 1329:
	__asm        jmp    near ptr 0x00549D33;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00549C3F;
	__asm        cmp    dword ptr [ebp-0x44], 1;
	__asm        je     near ptr 0x00549C79;
	__asm        cmp    dword ptr [ebp-0x44], 2;
	__asm        je     near ptr 0x00549CB3;
	__asm        jmp    near ptr 0x00549CE6;
// LINE 1331:
	__asm        shl    vec.x, 6;
// LINE 1332:
	__asm        shl    vec.z, 6;
// LINE 1334:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        add    eax, vec.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 1335:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, ds:[0x6C1274];
	__asm        add    ecx, vec.z;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 1342:
	__asm        inc    curr_dir;
// LINE 1343:
	__asm        mov    eax, curr_dir;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x00549DD0;
// LINE 1347:
	__asm        mov    curr_dir, 0;
// LINE 1348:
	__asm        inc    curr_dist;
// LINE 1349:
	__asm        mov    xdir, 0;
// LINE 1350:
	__asm        mov    ydir, 0xFFFFFFFF;
// LINE 1351:
	__asm        jmp    near ptr 0x00549DF8;
// LINE 1353:
	__asm        mov    xdir, 1;
// LINE 1354:
	__asm        mov    ydir, 0;
// LINE 1355:
	__asm        jmp    near ptr 0x00549DF8;
// LINE 1357:
	__asm        inc    curr_dist;
// LINE 1358:
	__asm        mov    xdir, 0;
// LINE 1359:
	__asm        mov    ydir, 1;
// LINE 1360:
	__asm        jmp    near ptr 0x00549DF8;
// LINE 1362:
	__asm        mov    xdir, 0xFFFFFFFF;
// LINE 1363:
	__asm        mov    ydir, 0;
// LINE 1364:
	__asm        jmp    near ptr 0x00549DF8;
// LINE 1365:
	__asm        jmp    near ptr 0x00549DF8;
	__asm        cmp    dword ptr [ebp-0x48], 4;
	__asm        ja     near ptr 0x00549DF8;
	__asm        mov    eax, [ebp-0x48];
	__asm        jmp    dword ptr [eax*4+0x549DE4];
	__asm        jb     short 0x00549D83;
	__asm        push   esp;
	__asm        add    [edi-0x5DFFAB63], cl;
	__asm        popfd;
	__asm        push   esp;
	__asm        add    [eax+0x7200549D], bh;
	__asm        popfd;
	__asm        push   esp;
	__asm        (bad);
// LINE 1369:
	__asm        mov    eax, spiral_dist;
	__asm        cmp    curr_dist, eax;
	__asm        jne    near ptr 0x00549E0D;
// LINE 1371:
	__asm        dec    curr_dist;
// LINE 1372:
	__asm        mov    stop_now, 1;
// LINE 1376:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00549E1C;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    curr_dist, eax;
	__asm        jle    near ptr 0x00549EA6;
// LINE 1378:
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        lea    eax, y;
	__asm        push   eax;
	__asm        lea    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054D662;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00549E95;
// LINE 1381:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FD4D;
// LINE 1391:
	__asm        movsx  eax, word ptr ds:[0x5B8688];
	__asm        add    eax, 6;
	__asm        mov    ds:[0x5B8688], ax;
// LINE 1392:
	__asm        movsx  eax, word ptr ds:[0x5B8688];
	__asm        cmp    eax, 0xC;
	__asm        jle    near ptr 0x00549E8C;
// LINE 1393:
	__asm        mov    word ptr ds:[0x5B8688], 0xC;
// LINE 1394:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x00549EFF;
// LINE 1396:
	__asm        mov    eax, xdir;
	__asm        add    x, eax;
// LINE 1397:
	__asm        mov    eax, ydir;
	__asm        add    y, eax;
// LINE 1398:
	__asm        jmp    near ptr 0x00549E19;
// LINE 1400:
	__asm        mov    eax, reinterpret_cast<uint32_t>(stop_now);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00549EDE;
// LINE 1402:
	__asm        dec    word ptr ds:[0x5B8688];
// LINE 1403:
	__asm        movsx  eax, word ptr ds:[0x5B8688];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00549ED6;
// LINE 1404:
	__asm        mov    word ptr ds:[0x5B8688], 0;
// LINE 1405:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00549EFF;
// LINE 1407:
	__asm        jmp    near ptr 0x00549D64;
// LINE 1408:
	__asm        push   0x8C085;
	__asm        push   0x5BA5F4;
	__asm        push   0x580;
	__asm        push   0x5BA60C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1409:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00549f04
unsigned short cYObject::OutOfCameraRange() {
// LINE 1413:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x40;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1414:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00549F3E;
	__asm        push   0x8C085;
	__asm        push   0x5BA630;
	__asm        push   0x586;
	__asm        push   0x5BA664;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1418:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xFC];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x00549FD2;
// LINE 1420:
	__asm        jmp    near ptr 0x00549F56;
	__asm        mov    eax, ds:[0x6BF188];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, word ptr ds:[0x5B86A4];
	__asm        add    ecx, ecx;
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00549FB7;
	__asm        jmp    near ptr 0x00549F89;
	__asm        mov    eax, ds:[0x6BF18C];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        movsx  ecx, word ptr ds:[0x5B86A4];
	__asm        add    ecx, ecx;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00549FC5;
// LINE 1421:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1422:
	__asm        jmp    near ptr 0x00549FCD;
// LINE 1423:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1425:
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1426:
// Block start:
	short deltaY;
	short deltaX;
	int32_t xtoview;
	long debug1;
	struct Point3d viewvec;
	int32_t ztoview;
	unsigned short behindView;
	long debug2;
	__asm        mov    eax, ds:[0x6BF188];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        mov    deltaX, ax;
// LINE 1427:
	__asm        mov    eax, ds:[0x6BF18C];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        mov    deltaY, ax;
// LINE 1429:
	__asm        movsx  eax, deltaX;
	__asm        cmp    eax, 0x80;
	__asm        jle    near ptr 0x0054A01F;
// LINE 1430:
	__asm        movsx  eax, deltaX;
	__asm        sub    eax, 0x100;
	__asm        mov    deltaX, ax;
	__asm        jmp    near ptr 0x00549FFE;
// LINE 1431:
	__asm        movsx  eax, deltaX;
	__asm        cmp    eax, 0xFFFFFF80;
	__asm        jge    near ptr 0x0054A03E;
// LINE 1432:
	__asm        movsx  eax, deltaX;
	__asm        add    eax, 0x100;
	__asm        mov    deltaX, ax;
	__asm        jmp    near ptr 0x0054A01F;
// LINE 1434:
	__asm        movsx  eax, deltaY;
	__asm        cmp    eax, 0x80;
	__asm        jle    near ptr 0x0054A05F;
// LINE 1435:
	__asm        movsx  eax, deltaY;
	__asm        sub    eax, 0x100;
	__asm        mov    deltaY, ax;
	__asm        jmp    near ptr 0x0054A03E;
// LINE 1436:
	__asm        movsx  eax, deltaY;
	__asm        cmp    eax, 0xFFFFFF80;
	__asm        jge    near ptr 0x0054A07E;
// LINE 1437:
	__asm        movsx  eax, deltaY;
	__asm        add    eax, 0x100;
	__asm        mov    deltaY, ax;
	__asm        jmp    near ptr 0x0054A05F;
// LINE 1439:
	__asm        movsx  eax, deltaY;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x0054A090;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        movsx  eax, deltaX;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x30], ax;
	__asm        jmp    near ptr 0x0054A0A8;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        movsx  eax, word ptr [eax];
	__asm        mov    ecx, [ebp-0x34];
	__asm        movsx  ecx, word ptr [ecx];
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0054A0CD;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0054A0D3;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x0054A0D8;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    ax, [eax];
	__asm        mov    deltaX, ax;
// LINE 1442:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, viewvec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1443:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        sub    eax, ds:[0x6C126C];
	__asm        mov    xtoview, eax;
// LINE 1444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        sub    eax, ds:[0x6C126C];
	__asm        mov    ztoview, eax;
// LINE 1445:
	__asm        mov    behindView, 0;
// LINE 1447:
	__asm        cmp    xtoview, 0;
	__asm        jge    near ptr 0x0054A135;
	__asm        cmp    viewvec.x, 0;
	__asm        jg     near ptr 0x0054A149;
	__asm        cmp    xtoview, 0;
	__asm        jle    near ptr 0x0054A177;
	__asm        cmp    viewvec.x, 0;
	__asm        jge    near ptr 0x0054A177;
	__asm        cmp    ztoview, 0;
	__asm        jge    near ptr 0x0054A15D;
	__asm        cmp    viewvec.z, 0;
	__asm        jg     near ptr 0x0054A171;
	__asm        cmp    ztoview, 0;
	__asm        jle    near ptr 0x0054A177;
	__asm        cmp    viewvec.z, 0;
	__asm        jge    near ptr 0x0054A177;
// LINE 1448:
	__asm        mov    behindView, 1;
// LINE 1449:
	__asm        test   reinterpret_cast<uint32_t>(behindView), 0xFFFF;
	__asm        je     near ptr 0x0054A18E;
// LINE 1450:
	__asm        movsx  eax, deltaX;
	__asm        add    eax, eax;
	__asm        mov    deltaX, ax;
// LINE 1453:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        mov    debug1, eax;
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 2;
	__asm        mov    debug2, eax;
// LINE 1454:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        movsx  ecx, deltaX;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0054A1C6;
// LINE 1455:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1456:
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1457:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054A1CE;
// LINE 1459:
// Block end:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054a1d3
short StartPerson(enum PersonType persontype, enum MissionType mission, short cellx, short celly, long missionid, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	short ret;
	class cYObject* newperson;

// LINE 1465:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1466:
	__asm        mov    ret, 0xFFFF;
// LINE 1467:
	__asm        call   0x00547CC8;
	__asm        mov    newperson, eax;
// LINE 1470:
	__asm        cmp    newperson, 0;
	__asm        je     near ptr 0x0054A231;
	__asm        mov    eax, loc;
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, newperson;
	__asm        call   0x0054A7A5;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054A231;
// LINE 1471:
	__asm        mov    eax, newperson;
	__asm        mov    ax, [eax+0xBC];
	__asm        mov    ret, ax;
// LINE 1472:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054A23A;
// LINE 1473:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054a23f
void LiberateMissionPeople(long missionid) {
	short count;

// LINE 1476:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1477:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054A257;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054A350;
// LINE 1478:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054A280;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054A2FC;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054A299;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054A2B5;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054A2E3;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054A2FC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 1479:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0054A322;
	__asm        push   0x8C085;
	__asm        push   0x5BA688;
	__asm        push   0x5C7;
	__asm        push   0x5BA690;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1480:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054A34B;
	__asm        mov    eax, obj;
	__asm        mov    ecx, missionid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    near ptr 0x0054A34B;
// LINE 1481:
	__asm        mov    ecx, obj;
	__asm        call   0x0054B820;
// LINE 1483:
// Block end:
	__asm        jmp    near ptr 0x0054A253;
// LINE 1484:
	__asm        jmp    near ptr 0x0054A355;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054a35a
void KillMissionPeople(long missionid) {
	struct _MISSION_PARMS mp;
	short count;

// LINE 1487:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1493:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1494:
	__asm        mov    mp.flags, 0;
// LINE 1495:
	__asm        mov    mp.i2num, 1;
// LINE 1496:
	__asm        mov    mp.op, 0x17;
// LINE 1499:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054A38D;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054A59A;
// LINE 1500:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054A3B6;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054A432;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054A3CF;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054A3EB;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054A419;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054A432;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    obj, eax;
// LINE 1501:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0054A458;
	__asm        push   0x8C085;
	__asm        push   0x5BA6B4;
	__asm        push   0x5DD;
	__asm        push   0x5BA6BC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1502:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054A595;
	__asm        mov    eax, obj;
	__asm        mov    ecx, missionid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    near ptr 0x0054A595;
// LINE 1503:
// Block start:
	unsigned short die;
	__asm        mov    die, 0;
// LINE 1504:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0054A524;
// LINE 1506:
	__asm        push   0x8C085;
	__asm        push   0x5BA6E0;
	__asm        push   0x5E2;
	__asm        push   0x5BA714;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1507:
	__asm        jmp    near ptr 0x0054A53D;
// LINE 1515:
	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x0054A4FE;
	__asm        mov    eax, obj;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0054A4FE;
	__asm        mov    eax, obj;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xBC];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0054A4FE;
// LINE 1516:
	__asm        mov    die, 1;
// LINE 1517:
	__asm        jmp    near ptr 0x0054A53D;
// LINE 1519:
	__asm        push   0x8C085;
	__asm        push   0x5BA738;
	__asm        push   0x5EF;
	__asm        push   0x5BA764;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1520:
	__asm        jmp    near ptr 0x0054A53D;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0054A491;
	__asm        cmp    dword ptr [ebp-0x2C], 1;
	__asm        je     near ptr 0x0054A4B2;
	__asm        jmp    near ptr 0x0054A503;
// LINE 1521:
	__asm        test   reinterpret_cast<uint32_t>(die), 0xFFFF;
	__asm        je     near ptr 0x0054A595;
// LINE 1523:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   0x0054CECA;
// LINE 1524:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x0054A581;
// LINE 1525:
	__asm        mov    ecx, obj;
	__asm        call   0x0055716E;
// LINE 1526:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1529:
// Block end:
// Block end:
	__asm        jmp    near ptr 0x0054A389;
// LINE 1530:
	__asm        jmp    near ptr 0x0054A59F;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054a5a4
void cYObject::SetPersonData(enum PersonType persontype, enum MissionType mission, long missionid) {
// LINE 1533:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1534:
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
// LINE 1535:
	__asm        mov    eax, missionid;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054A623;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054A623;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x0054A623;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x0054A623;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054A628;
// LINE 1536:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 1537:
	__asm        jmp    near ptr 0x0054A639;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0054a640
unsigned short cYObject::IsSuitableForMission(enum MissionType mission, short cellx, short celly) {
	unsigned short ret;

// LINE 1540:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1541:
	__asm        mov    ret, 0;
// LINE 1542:
	__asm        cmp    mission, 0;
	__asm        jne    near ptr 0x0054A664;
	__asm        mov    ret, 1;
// LINE 1543:
	__asm        jmp    near ptr 0x0054A797;
// LINE 1544:
// Block start:
	short scurkID;
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054A696;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054A696;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054A696;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054A6A1;
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    near ptr 0x0054A6FD;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x18], ax;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054A6D4;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0054A6F0;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x18];
	__asm        mov    scurkID, ax;
	__asm        jmp    near ptr 0x0054A6FD;
// LINE 1545:
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054A797;
// LINE 1546:
// Block start:
	struct _LZ_INFO* li;
	__asm        movsx  eax, scurkID;
	__asm        push   eax;
	__asm        call   0x0051DA5B;
	__asm        add    esp, 4;
	__asm        mov    li, eax;
// LINE 1547:
	__asm        cmp    li, 0;
	__asm        je     near ptr 0x0054A730;
	__asm        mov    eax, li;
	__asm        test   byte ptr [eax], 1;
	__asm        je     near ptr 0x0054A73B;
// LINE 1548:
	__asm        mov    ret, 0;
// LINE 1549:
	__asm        jmp    near ptr 0x0054A797;
// LINE 1550:
// Block start:
	short count;
	enum cYObject::LocationType loctype;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1551:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054A75D;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0054A797;
// LINE 1552:
	__asm        movsx  eax, count;
	__asm        mov    ecx, mission;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        mov    edx, loctype;
	__asm        cmp    [ecx+eax*4+0x635300], edx;
	__asm        jne    near ptr 0x0054A792;
// LINE 1553:
	__asm        mov    ret, 1;
// LINE 1554:
	__asm        jmp    near ptr 0x0054A797;
// LINE 1556:
	__asm        jmp    near ptr 0x0054A759;
// LINE 1560:
// Block end:
// Block end:
// Block end:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054A7A0;
// LINE 1561:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054a7a5
unsigned short cYObject::StartMission(enum PersonType persontype, enum MissionType mission, short cellx, short celly, long missionid, struct _DYOBJ_INST* onTopOf, struct Point3d* loc) {
	short ret;

// LINE 1566:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xEC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1571:
	__asm        cmp    mission, 0;
	__asm        je     near ptr 0x0054A7F7;
// LINE 1572:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054A7DB;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054A7F7;
	__asm        push   0x8C085;
	__asm        push   0x5BA788;
	__asm        push   0x624;
	__asm        push   0x5BA7B0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1574:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054A828;
	__asm        push   0x8C085;
	__asm        push   0x5BA7D4;
	__asm        push   0x626;
	__asm        push   0x5BA808;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1575:
	__asm        jmp    near ptr 0x0054A82D;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0054A85D;
	__asm        push   0x8C085;
	__asm        push   0x5BA82C;
	__asm        push   0x627;
	__asm        push   0x5BA858;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1576:
	__asm        mov    ret, 0xFFFF;
// LINE 1577:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054A892;
	__asm        push   0x8C085;
	__asm        push   0x5BA87C;
	__asm        push   0x629;
	__asm        push   0x5BA890;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1578:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054A956;
// LINE 1579:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054A8D4;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054A900;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x0054A951;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054A951;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054A956;
// LINE 1580:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
// LINE 1581:
	__asm        mov    eax, mission;
	__asm        mov    [ebp-0xEC], eax;
	__asm        jmp    near ptr 0x0054B505;
// LINE 1583:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	unsigned short foundplace;
	short count;
	__asm        cmp    loc, 0;
	__asm        jne    near ptr 0x0054A987;
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054A9A3;
	__asm        push   0x8C085;
	__asm        push   0x5BA8B4;
	__asm        push   0x62F;
	__asm        push   0x5BA8C8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1585:
	__asm        mov    foundplace, 0;
// LINE 1586:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 7;
// LINE 1587:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 5;
	__asm        jle    near ptr 0x0054A9EE;
	__asm        push   0x20000;
	__asm        push   0x50000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    near ptr 0x0054A9FB;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
	__asm        jmp    near ptr 0x0054AA00;
// LINE 1588:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054AA0F;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x0054AAA5;
// LINE 1589:
// Block start:
	enum cYObject::LocationType loctype;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1591:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   0x0054A640;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054AAA0;
	__asm        mov    eax, loctype;
	__asm        mov    eax, [eax*8+0x635268];
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054AAA0;
// LINE 1592:
	__asm        mov    foundplace, 1;
// LINE 1593:
	__asm        jmp    near ptr 0x0054AAA5;
// LINE 1595:
// Block end:
	__asm        jmp    near ptr 0x0054AA0B;
// LINE 1596:
	__asm        test   reinterpret_cast<uint32_t>(foundplace), 0xFFFF;
	__asm        je     near ptr 0x0054AB43;
// LINE 1597:
// Block start:
	long testID;
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FD4D;
// LINE 1598:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 1599:
	__asm        mov    ecx, this;
	__asm        call   0x0054B9E6;
	__asm        mov    testID, eax;
// LINE 1600:
	__asm        cmp    testID, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054AB10;
	__asm        push   0x8C085;
	__asm        push   0x5BA8EC;
	__asm        push   0x640;
	__asm        push   0x5BA910;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1601:
	__asm        mov    eax, testID;
	__asm        cmp    missionid, eax;
	__asm        je     near ptr 0x0054AB38;
	__asm        push   0x8C085;
	__asm        push   0x5BA934;
	__asm        push   0x641;
	__asm        push   0x5BA978;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1602:
	__asm        mov    ret, 1;
// LINE 1604:
// Block end:
	__asm        jmp    near ptr 0x0054AB49;
// LINE 1605:
	__asm        mov    ret, 0;
// LINE 1606:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1609:
// Block end:
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
// LINE 1610:
	__asm        mov    eax, missionid;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054ABD0;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054ABD0;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x0054ABD0;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x0054ABD0;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054ABD5;
// LINE 1611:
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 1612:
	__asm        cmp    loc, 0;
	__asm        je     near ptr 0x0054AC2B;
// LINE 1613:
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
// LINE 1614:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FC2E;
// LINE 1615:
	__asm        mov    ret, 1;
// LINE 1617:
	__asm        jmp    near ptr 0x0054ACB0;
// LINE 1622:
	__asm        movsx  eax, word ptr ds:[0x5B8678];
	__asm        movsx  ecx, word ptr ds:[0x5B8674];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0054ACAA;
	__asm        mov    eax, 0xC;
	__asm        movsx  ecx, word ptr ds:[0x5B8688];
	__asm        sub    eax, ecx;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        cmp    eax, 3;
	__asm        jge    near ptr 0x0054AC6F;
	__asm        jmp    near ptr 0x0054AC89;
	__asm        jmp    near ptr 0x0054AC79;
	__asm        jmp    near ptr 0x0054ACAA;
	__asm        jmp    near ptr 0x0054AC89;
	__asm        test   dword ptr [ebp-0x84], 0xFFFF;
	__asm        je     near ptr 0x0054ACAA;
	__asm        mov    ecx, this;
	__asm        call   0x00549BDD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054ACAA;
// LINE 1623:
	__asm        mov    ret, 1;
// LINE 1624:
	__asm        jmp    near ptr 0x0054ACB0;
// LINE 1625:
	__asm        mov    ret, 0;
// LINE 1628:
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054ACD6;
	__asm        push   0x8C085;
	__asm        push   0x5BA99C;
	__asm        push   0x65C;
	__asm        push   0x5BA9CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1629:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1632:
	__asm        cmp    loc, 0;
	__asm        jne    near ptr 0x0054AD01;
	__asm        push   0x8C085;
	__asm        push   0x5BA9F0;
	__asm        push   0x660;
	__asm        push   0x5BAA0C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1634:
	__asm        mov    ret, 0;
// LINE 1635:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054ADCE;
// LINE 1637:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054AD7A;
	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x0054AD7A;
	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    near ptr 0x0054AD8E;
	__asm        jmp    near ptr 0x0054AD8E;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    near ptr 0x0054AD8E;
// LINE 1638:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FC2E;
// LINE 1639:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1640:
	__asm        mov    ret, 1;
// LINE 1642:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1646:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	short count;
	__asm        cmp    loc, 0;
	__asm        jne    near ptr 0x0054ADE7;
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054AE03;
	__asm        push   0x8C085;
	__asm        push   0x5BAA30;
	__asm        push   0x66E;
	__asm        push   0x5BAA74;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1648:
	__asm        mov    ret, 0;
// LINE 1649:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054AE18;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x0054B0CA;
// LINE 1650:
// Block start:
	enum cYObject::LocationType loctype;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1653:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   0x0054A640;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B0A2;
	__asm        mov    eax, loctype;
	__asm        mov    eax, [eax*8+0x635268];
	__asm        push   eax;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B0A2;
// LINE 1656:
// Block start:
	unsigned short founddest;
	struct _MISSION_PARMS mp;
	short destcellx;
	short destcelly;
	__asm        mov    destcellx, 0xFFFF;
// LINE 1657:
	__asm        mov    destcelly, 0xFFFF;
// LINE 1658:
	__asm        mov    founddest, 0;
// LINE 1659:
	__asm        cmp    mission, 4;
	__asm        jne    near ptr 0x0054AFC6;
// LINE 1660:
// Block start:
	short cnt;
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        call   0x004FBB76;
	__asm        add    esp, 4;
	__asm        mov    eax, [eax];
	__asm        mov    destcellx, ax;
// LINE 1661:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        call   0x004FBB76;
	__asm        add    esp, 4;
	__asm        mov    eax, [eax+4];
	__asm        mov    destcelly, ax;
// LINE 1662:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x0054AEEE;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0054AFC1;
// LINE 1663:
// Block start:
	enum cYObject::LocationType loctype2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcellx);
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype2, eax;
// LINE 1665:
	__asm        jmp    near ptr 0x0054AF13;
	__asm        jmp    near ptr 0x0054AF18;
	__asm        movsx  eax, destcelly;
	__asm        movsx  ecx, celly;
	__asm        sub    eax, ecx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  ecx, ax;
	__asm        movsx  eax, destcellx;
	__asm        movsx  edx, cellx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        add    ecx, eax;
	__asm        cmp    ecx, 0x10;
	__asm        jle    near ptr 0x0054AF7C;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destcellx);
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        call   0x0054A640;
	__asm        add    esp, 0xC;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054AF7C;
// LINE 1666:
	__asm        mov    founddest, 1;
// LINE 1667:
	__asm        jmp    near ptr 0x0054AFC1;
// LINE 1669:
	__asm        jmp    near ptr 0x0054AFBC;
// LINE 1670:
	__asm        movsx  eax, count;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 1;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x0054AF9B;
// LINE 1671:
	__asm        dec    destcellx;
// LINE 1672:
	__asm        jmp    near ptr 0x0054AF9F;
// LINE 1673:
	__asm        dec    destcelly;
// LINE 1674:
	__asm        movsx  eax, destcellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054AFB7;
	__asm        movsx  eax, destcelly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054AFBC;
	__asm        jmp    near ptr 0x0054AFC1;
// LINE 1676:
// Block end:
	__asm        jmp    near ptr 0x0054AEEA;
// LINE 1678:
// Block end:
	__asm        jmp    near ptr 0x0054AFCC;
// LINE 1694:
	__asm        mov    founddest, 1;
// LINE 1697:
	__asm        test   reinterpret_cast<uint32_t>(founddest), 0xFFFF;
	__asm        jne    near ptr 0x0054AFDE;
	__asm        jmp    near ptr 0x0054B0CA;
// LINE 1700:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FD4D;
// LINE 1701:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1704:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1705:
	__asm        cmp    mission, 4;
	__asm        jne    near ptr 0x0054B02C;
// LINE 1706:
	__asm        mov    mp.op, 0x1E;
// LINE 1707:
	__asm        jmp    near ptr 0x0054B033;
// LINE 1708:
	__asm        mov    mp.op, 0;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1710:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1711:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1714:
	__asm        cmp    mission, 4;
	__asm        jne    near ptr 0x0054B092;
// LINE 1716:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1717:
	__asm        mov    mp.op, 0;
// LINE 1718:
	__asm        movsx  eax, destcellx;
	__asm        mov    mp.maploc.x, eax;
// LINE 1719:
	__asm        movsx  eax, destcelly;
	__asm        mov    mp.maploc.y, eax;
// LINE 1720:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1724:
	__asm        mov    ret, 1;
// LINE 1725:
	__asm        jmp    near ptr 0x0054B0CA;
// LINE 1727:
// Block end:
	__asm        jmp    near ptr 0x0054B0C5;
// LINE 1728:
	__asm        movsx  eax, count;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 1;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x0054B0C1;
// LINE 1729:
	__asm        inc    cellx;
// LINE 1730:
	__asm        jmp    near ptr 0x0054B0C5;
// LINE 1731:
	__asm        inc    celly;
// LINE 1733:
// Block end:
	__asm        jmp    near ptr 0x0054AE14;
// LINE 1734:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1737:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
// Block end:
	__asm        mov    ret, 0;
// LINE 1738:
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        jne    near ptr 0x0054B119;
	__asm        push   0x8C085;
	__asm        push   0x5BAA98;
	__asm        push   0x6CA;
	__asm        push   0x5BAAC0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1739:
	__asm        cmp    loc, 0;
	__asm        je     near ptr 0x0054B13F;
	__asm        push   0x8C085;
	__asm        push   0x5BAAE4;
	__asm        push   0x6CB;
	__asm        push   0x5BAB2C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1740:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054B165;
	__asm        push   0x8C085;
	__asm        push   0x5BAB50;
	__asm        push   0x6CC;
	__asm        push   0x5BAB74;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1742:
	__asm        push   2;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B1DB;
// LINE 1743:
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FD4D;
// LINE 1744:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1745:
	__asm        mov    ret, 1;
// LINE 1747:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1750:
// Block start:
	int32_t mycelly;
	int32_t mycellx;
	struct Point3d pos;
// Block end:
	__asm        mov    ret, 0;
// LINE 1751:
	__asm        cmp    loc, 0;
	__asm        jne    near ptr 0x0054B1FA;
	__asm        cmp    onTopOf, 0;
	__asm        jne    near ptr 0x0054B216;
	__asm        push   0x8C085;
	__asm        push   0x5BAB98;
	__asm        push   0x6D7;
	__asm        push   0x5BABA4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1753:
	__asm        mov    eax, onTopOf;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x70], eax;
// LINE 1754:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, onTopOf;
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x74], eax;
// LINE 1755:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, [ebp-0x70];
	__asm        jne    near ptr 0x0054B252;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, [ebp-0x74];
	__asm        je     near ptr 0x0054B26E;
	__asm        push   0x8C085;
	__asm        push   0x5BABC8;
	__asm        push   0x6DB;
	__asm        push   0x5BAC1C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1758:
	__asm        lea    eax, [ebp-0x6C];
	__asm        push   eax;
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00544BDE;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B359;
// LINE 1759:
// Block start:
	unsigned short setmaster;
	__asm        jmp    near ptr 0x0054B291;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0054B2C1;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, reinterpret_cast<uint8_t>(cellx);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, reinterpret_cast<uint8_t>(celly);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054B2E4;
// LINE 1760:
	__asm        lea    eax, [ebp-0x6C];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1761:
	__asm        mov    eax, onTopOf;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
	__asm        mov    setmaster, ax;
// LINE 1762:
	__asm        test   reinterpret_cast<uint32_t>(setmaster), 0xFFFF;
	__asm        jne    near ptr 0x0054B33C;
	__asm        push   0x8C085;
	__asm        push   0x5BAC40;
	__asm        push   0x6E2;
	__asm        push   0x5BAC60;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1763:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1764:
	__asm        mov    ret, 1;
// LINE 1767:
// Block end:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1771:
// Block end:
	__asm        mov    ret, 0;
// LINE 1772:
	__asm        cmp    loc, 0;
	__asm        je     near ptr 0x0054B43A;
// LINE 1773:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0x20000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        push   0;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054B435;
// LINE 1775:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054B3E1;
	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x0054B3E1;
	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    near ptr 0x0054B3F5;
	__asm        jmp    near ptr 0x0054B3F5;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    near ptr 0x0054B3F5;
// LINE 1776:
	__asm        push   0xFF;
	__asm        push   0xFF;
	__asm        mov    eax, loc;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FC2E;
// LINE 1777:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1778:
	__asm        mov    ret, 1;
// LINE 1781:
	__asm        jmp    near ptr 0x0054B4FB;
// LINE 1783:
// Block start:
	int32_t offsetz;
	int32_t offsetx;
	__asm        push   1;
	__asm        lea    eax, offsetz;
	__asm        push   eax;
	__asm        lea    eax, offsetx;
	__asm        push   eax;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B4FB;
// LINE 1784:
	__asm        cmp    onTopOf, 0;
	__asm        je     near ptr 0x0054B4AF;
	__asm        mov    eax, onTopOf;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x0054B4AF;
	__asm        mov    eax, onTopOf;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x100], ax;
	__asm        jmp    near ptr 0x0054B4C3;
	__asm        jmp    near ptr 0x0054B4C3;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x100], 0xFFFF;
	__asm        jmp    near ptr 0x0054B4C3;
// LINE 1785:
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FD4D;
// LINE 1786:
	__asm        mov    eax, missionid;
	__asm        push   eax;
	__asm        mov    eax, mission;
	__asm        push   eax;
	__asm        mov    eax, persontype;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054A5A4;
// LINE 1787:
	__asm        mov    ret, 1;
// LINE 1790:
// Block end:
	__asm        jmp    near ptr 0x0054B53B;
// LINE 1792:
	__asm        jmp    near ptr 0x0054B53B;
	__asm        cmp    dword ptr [ebp-0xEC], 6;
	__asm        ja     near ptr 0x0054B35E;
	__asm        mov    eax, [ebp-0xEC];
	__asm        jmp    dword ptr [eax*4+0x54B51F];
	__asm        dec    esi;
	__asm        stosd;
	__asm        push   esp;
	__asm        add    al, ah;
	__asm        mov    cl, 0x54;
	__asm        add    bh, cl;
	__asm        mov    al, 0x54;
	__asm        add    [ebx-0x57], dh;
	__asm        push   esp;
	__asm        add    bl, dl;
	__asm        lodsd;
	__asm        push   esp;
	__asm        add    bl, bl;
	__asm        lodsb;
	__asm        push   esp;
	__asm        add    bl, dl;
	__asm        lodsd;
	__asm        push   esp;
	__asm        (bad);
// LINE 1793:
	__asm        movsx  eax, ret;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B570;
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x0054B570;
	__asm        push   0x8C085;
	__asm        push   0x5BAC84;
	__asm        push   0x701;
	__asm        push   0x5BAC94;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1794:
	__asm        movsx  eax, ret;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x0054B810;
// LINE 1797:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x0054B5A8;
// LINE 1798:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B5D9;
	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x0054B604;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        jne    near ptr 0x0054B655;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054B663;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054B668;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        movsx  ecx, word ptr ds:[0x5B8670];
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    near ptr 0x0054B69D;
	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054B6EC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054B6E7;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054B71F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054B71F;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054B740;
	__asm        jmp    near ptr 0x0054B771;
	__asm        jmp    near ptr 0x0054B740;
	__asm        jmp    near ptr 0x0054B755;
	__asm        test   dword ptr [ebp-0xE4], 0xFFFF;
	__asm        jne    near ptr 0x0054B771;
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x0054B781;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054B7B1;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0xE0];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xE0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054B80B;
	__asm        jmp    near ptr 0x0054B810;
// LINE 1800:
	__asm        mov    ax, ret;
	__asm        jmp    near ptr 0x0054B819;
// LINE 1801:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x1C;
}

// FUNCTION: COPTER_D 0x0054b820
void cYObject::ResetToAmbient() {
// LINE 1805:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1806:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054B85A;
	__asm        push   0x8C085;
	__asm        push   0x5BACB8;
	__asm        push   0x70E;
	__asm        push   0x5BACE8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1807:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054B888;
	__asm        push   0x8C085;
	__asm        push   0x5BAD0C;
	__asm        push   0x70F;
	__asm        push   0x5BAD50;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1808:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054B8B6;
	__asm        push   0x8C085;
	__asm        push   0x5BBBF0;
	__asm        push   0x2C2;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x0054B8E0;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054B8EE;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054B8F3;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054B967;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x0054B967;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x0054B967;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054B96C;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0054B9A2;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054B9B0;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054B9B5;
	__asm        jmp    near ptr 0x0054B9BA;
// LINE 1809:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x0054B9DC;
// LINE 1810:
	__asm        jmp    near ptr 0x0054B9E1;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054b9e6
long cYObject::JoinRiot() {
	long riotMissionID;

// LINE 1813:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1816:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x0054BA20;
	__asm        push   0x8C085;
	__asm        push   0x5BAD74;
	__asm        push   0x718;
	__asm        push   0x5BADA0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1818:
	__asm        push   0x1000;
	__asm        call   0x004FC323;
	__asm        add    esp, 4;
	__asm        movsx  eax, ax;
	__asm        mov    riotMissionID, eax;
// LINE 1819:
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BC2F;
// LINE 1823:
// Block start:
	unsigned short conked;
	struct _MISSION_PARMS mp;
	__asm        mov    eax, riotMissionID;
	__asm        mov    mp.id, eax;
// LINE 1824:
	__asm        mov    mp.op, 0xB;
// LINE 1825:
	__asm        mov    mp.i2num, 1;
// LINE 1826:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1827:
	__asm        mov    conked, 0;
// LINE 1828:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054BBB9;
// LINE 1829:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054BAA3;
	__asm        push   0x8C085;
	__asm        push   0x5BBBF0;
	__asm        push   0x2C2;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x0054BACD;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054BADB;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054BAE0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
	__asm        mov    eax, riotMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054BB5D;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054BB5D;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x0054BB5D;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x0054BB5D;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054BB62;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x0054BB9A;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        add    eax, 1;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054BBAA;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        add    eax, 1;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054BBAF;
	__asm        jmp    near ptr 0x0054BBB4;
// LINE 1830:
	__asm        jmp    near ptr 0x0054BC2F;
// LINE 1831:
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
// LINE 1832:
	__asm        mov    eax, riotMissionID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
	__asm        cmp    riotMissionID, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054BC2A;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054BC2A;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x0054BC2A;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x0054BC2A;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054BC2F;
// LINE 1835:
// Block end:
	__asm        mov    eax, riotMissionID;
	__asm        jmp    near ptr 0x0054BC37;
// LINE 1836:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054bc3c
void cYObject::PhaseAndBeamSoundChannels() {
	class cYObject* obj;
	short nextsoundchannel;
	short count;

// LINE 1839:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1842:
	__asm        mov    count, 0;
// LINE 1843:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054BEA9;
// LINE 1844:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054BC80;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054BCFC;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054BC99;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054BCB5;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054BCE3;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054BCFC;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    obj, eax;
// LINE 1845:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BEA4;
// LINE 1846:
// Block start:
	short xdiff;
	short ydiff;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054BD3D;
	__asm        push   0x8C085;
	__asm        push   0x5BADC4;
	__asm        push   0x736;
	__asm        push   0x5BADF4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1847:
	__asm        mov    eax, ds:[0x6BF188];
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, ax;
	__asm        jmp    near ptr 0x0054BD60;
// LINE 1848:
	__asm        mov    eax, ds:[0x6BF18C];
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, ax;
	__asm        jmp    near ptr 0x0054BD83;
// LINE 1849:
	__asm        movsx  eax, ydiff;
	__asm        movsx  ecx, xdiff;
	__asm        add    eax, ecx;
	__asm        cmp    eax, 2;
	__asm        jle    near ptr 0x0054BE4A;
// LINE 1852:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BE40;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BE1B;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BDF6;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x0054BE09;
	__asm        jmp    near ptr 0x0054BE01;
	__asm        mov    word ptr [ebp-0x2C], 0xFFFF;
	__asm        jmp    near ptr 0x0054BE09;
	__asm        mov    ax, [ebp-0x30];
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x0054BE0E;
	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0054BE20;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x0054BE45;
// LINE 1853:
	__asm        jmp    near ptr 0x0054BEA4;
// LINE 1854:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054BE78;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0054BE8B;
	__asm        jmp    near ptr 0x0054BE83;
	__asm        mov    word ptr [ebp-0x20], 0xFFFF;
	__asm        jmp    near ptr 0x0054BE8B;
	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    [ebp-0x20], ax;
	__asm        jmp    near ptr 0x0054BE90;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x00446F43;
	__asm        add    esp, 8;
// LINE 1856:
// Block end:
	__asm        jmp    near ptr 0x0054BC4B;
// LINE 1858:
	__asm        mov    word ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0054BEB8;
	__asm        inc    word ptr [ebp-0x24];
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0xC;
	__asm        jge    near ptr 0x0054BEEB;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        movsx  eax, word ptr [eax*2+0x6356B0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054BEE6;
	__asm        mov    ax, [ebp-0x24];
	__asm        mov    [ebp-0x28], ax;
	__asm        jmp    near ptr 0x0054BEF6;
	__asm        jmp    near ptr 0x0054BEB4;
	__asm        mov    word ptr [ebp-0x28], 0xFFFF;
	__asm        jmp    near ptr 0x0054BEF6;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        push   1;
	__asm        call   0x0054BF20;
	__asm        add    esp, 8;
	__asm        mov    nextsoundchannel, ax;
// LINE 1860:
	__asm        mov    eax, reinterpret_cast<uint32_t>(nextsoundchannel);
	__asm        push   eax;
	__asm        push   2;
	__asm        call   0x0054BF20;
	__asm        add    esp, 8;
// LINE 1861:
	__asm        jmp    near ptr 0x0054BF1B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054bf20
short cYObject::DistributeSoundChannels(short rad, short firstsoundchannel) {
	class cYObject* obj;
	short soundchannel;
	short count;

// LINE 1864:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 1865:
	__asm        mov    ax, firstsoundchannel;
	__asm        mov    soundchannel, ax;
// LINE 1866:
	__asm        mov    count, 0;
// LINE 1869:
	__asm        movsx  eax, soundchannel;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054C0D9;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054C0D9;
// LINE 1870:
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054BF79;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054BFF5;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054BF92;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054BFAE;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054BFDC;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054BFF5;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 1871:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054C00C;
// LINE 1872:
	__asm        jmp    near ptr 0x0054BF37;
// LINE 1873:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054C0D4;
// LINE 1874:
// Block start:
	short xdiff;
	short ydiff;
	__asm        mov    eax, ds:[0x6BF188];
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, ax;
	__asm        jmp    near ptr 0x0054C042;
// LINE 1875:
	__asm        mov    eax, ds:[0x6BF18C];
	__asm        mov    ecx, obj;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, ax;
	__asm        jmp    near ptr 0x0054C065;
// LINE 1876:
	__asm        movsx  eax, ydiff;
	__asm        movsx  ecx, xdiff;
	__asm        add    eax, ecx;
	__asm        movsx  ecx, rad;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0054C0D4;
// LINE 1877:
	__asm        mov    eax, reinterpret_cast<uint32_t>(soundchannel);
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   0x0054C0E7;
// LINE 1878:
	__asm        mov    word ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0054C096;
	__asm        inc    word ptr [ebp-0x1C];
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0xC;
	__asm        jge    near ptr 0x0054C0C9;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        movsx  eax, word ptr [eax*2+0x6356B0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054C0C4;
	__asm        mov    ax, [ebp-0x1C];
	__asm        mov    soundchannel, ax;
	__asm        jmp    near ptr 0x0054C0D4;
	__asm        jmp    near ptr 0x0054C092;
	__asm        mov    soundchannel, 0xFFFF;
	__asm        jmp    near ptr 0x0054C0D4;
// LINE 1881:
// Block end:
	__asm        jmp    near ptr 0x0054BF37;
// LINE 1882:
	__asm        mov    ax, soundchannel;
	__asm        jmp    near ptr 0x0054C0E2;
// LINE 1883:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054c0e7
void cYObject::SetSoundChannel(short soundchannel) {
// LINE 1887:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1888:
	__asm        movsx  eax, soundchannel;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054C10C;
	__asm        movsx  eax, soundchannel;
	__asm        cmp    eax, 0xF;
	__asm        jl     near ptr 0x0054C128;
	__asm        push   0x8C085;
	__asm        push   0x5BAE18;
	__asm        push   0x760;
	__asm        push   0x5BAE38;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1889:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054C156;
	__asm        push   0x8C085;
	__asm        push   0x5BAE5C;
	__asm        push   0x761;
	__asm        push   0x5BAE80;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1890:
	__asm        movsx  eax, soundchannel;
	__asm        movsx  eax, word ptr [eax*2+0x6356B0];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054C186;
	__asm        push   0x8C085;
	__asm        push   0x5BAEA4;
	__asm        push   0x762;
	__asm        push   0x5BAED0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1891:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054C1B5;
	__asm        push   0x8C085;
	__asm        push   0x5BAEF4;
	__asm        push   0x763;
	__asm        push   0x5BAF1C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1892:
	__asm        movsx  eax, soundchannel;
	__asm        mov    word ptr [eax*2+0x6356B0], 1;
// LINE 1893:
	__asm        mov    ax, soundchannel;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x102], ax;
// LINE 1894:
	__asm        jmp    near ptr 0x0054C1D6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0054c1dd
unsigned short cYObject::PlaySoundA(enum cYObject::SoundNum soundnum, unsigned short playforsure) {
	 // Switch table at 0x0054c54b
	int32_t success;
	short actualSoundChannel;
	char * soundfile;
	unsigned short loop;
	short freqadj;
	int32_t flags;

// LINE 1897:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x38;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1899:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        je     near ptr 0x0054C21A;
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0054C21A;
// LINE 1900:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 1903:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, soundnum;
	__asm        jne    near ptr 0x0054C30F;
// LINE 1904:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, 0xE;
	__asm        jne    near ptr 0x0054C306;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054C306;
// LINE 1905:
// Block start:
	short actualchannel;
	class DigitalSound* theSound;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054C281;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    actualchannel, ax;
	__asm        jmp    near ptr 0x0054C294;
	__asm        jmp    near ptr 0x0054C28C;
	__asm        mov    actualchannel, 0xFFFF;
	__asm        jmp    near ptr 0x0054C294;
	__asm        mov    ax, [ebp-0x24];
	__asm        mov    actualchannel, ax;
	__asm        jmp    near ptr 0x0054C299;
// LINE 1907:
	__asm        movsx  eax, actualchannel;
	__asm        mov    eax, [eax*4+0x604604];
	__asm        mov    theSound, eax;
// LINE 1908:
	__asm        cmp    theSound, 0;
	__asm        jne    near ptr 0x0054C2CD;
	__asm        push   0x8C085;
	__asm        push   0x5BAF40;
	__asm        push   0x774;
	__asm        push   0x5BAF48;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1909:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF4];
	__asm        lea    eax, [eax*4-0x14];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, 0x2AF8;
	__asm        push   eax;
	__asm        mov    eax, theSound;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, theSound;
	__asm        call   dword ptr [eax+0x64];
// LINE 1910:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 1912:
// Block end:
	__asm        jmp    near ptr 0x0054C30F;
// LINE 1913:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 1915:
	__asm        mov    eax, soundnum;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x104], ax;
// LINE 1916:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054C3A1;
// LINE 1917:
	__asm        test   reinterpret_cast<uint32_t>(playforsure), 0xFFFF;
	__asm        jne    near ptr 0x0054C345;
// LINE 1918:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 1919:
	__asm        mov    word ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0054C354;
	__asm        inc    word ptr [ebp-0x2C];
	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        cmp    eax, 3;
	__asm        jge    near ptr 0x0054C390;
	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        movsx  eax, word ptr [eax*2+0x6356C8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054C38B;
	__asm        movsx  eax, word ptr [ebp-0x2C];
	__asm        add    eax, 0xC;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x102], ax;
	__asm        jmp    near ptr 0x0054C3A1;
	__asm        jmp    near ptr 0x0054C350;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xC;
	__asm        jmp    near ptr 0x0054C3A1;
// LINE 1922:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054C3CF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    actualSoundChannel, ax;
	__asm        jmp    near ptr 0x0054C3E2;
	__asm        jmp    near ptr 0x0054C3DA;
	__asm        mov    actualSoundChannel, 0xFFFF;
	__asm        jmp    near ptr 0x0054C3E2;
	__asm        mov    ax, [ebp-0x28];
	__asm        mov    actualSoundChannel, ax;
	__asm        jmp    near ptr 0x0054C3E7;
// LINE 1923:
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 1924:
	__asm        mov    loop, 0;
// LINE 1925:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x108];
	__asm        mov    freqadj, ax;
// LINE 1926:
	__asm        mov    eax, soundnum;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x0054C5A4;
// LINE 1934:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 1935:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1937:
	__asm        mov    soundfile, 0x5BAF6C;
// LINE 1938:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1940:
	__asm        mov    soundfile, 0x5BAF78;
// LINE 1941:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1943:
	__asm        mov    soundfile, 0x5BAF84;
// LINE 1944:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1946:
	__asm        mov    soundfile, 0x5BAF90;
// LINE 1947:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1949:
	__asm        mov    soundfile, 0x5BAF9C;
// LINE 1950:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1952:
	__asm        mov    soundfile, 0x5BAFA8;
// LINE 1953:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1955:
	__asm        mov    soundfile, 0x5BAFB4;
// LINE 1956:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1958:
	__asm        mov    soundfile, 0x5BAFC4;
// LINE 1959:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1961:
	__asm        mov    soundfile, 0x5BAFD0;
// LINE 1962:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1964:
	__asm        mov    soundfile, 0x5BAFDC;
// LINE 1965:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1967:
	__asm        mov    soundfile, 0x5BAFE8;
// LINE 1968:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1970:
	__asm        mov    soundfile, 0x5BAFF8;
// LINE 1971:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1973:
	__asm        mov    soundfile, 0x5BB008;
// LINE 1974:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1976:
	__asm        mov    soundfile, 0x5BB014;
// LINE 1977:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1979:
	__asm        mov    soundfile, 0x5BB020;
// LINE 1980:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1982:
	__asm        mov    soundfile, 0x5BB02C;
// LINE 1983:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1985:
	__asm        mov    soundfile, 0x5BB03C;
// LINE 1986:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 1988:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0054C523;
// LINE 1992:
	__asm        mov    soundfile, 0x5BB04C;
// LINE 1993:
	__asm        jmp    near ptr 0x0054C55A;
// LINE 1998:
	__asm        mov    soundfile, 0x5BB05C;
// LINE 1999:
	__asm        jmp    near ptr 0x0054C55A;
// LINE 2001:
	__asm        mov    soundfile, 0x5BB06C;
// LINE 2002:
	__asm        jmp    near ptr 0x0054C55A;
	__asm        cmp    dword ptr [ebp-0x38], 0xE;
	__asm        ja     near ptr 0x0054C517;
	__asm        mov    eax, [ebp-0x38];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x54C54B];
	__asm        jmp    dword ptr [ecx*4+0x54C53F];
	__asm        or     eax, ebp;
	__asm        push   esp;
	__asm        add    bh, bh;
	__asm        les    edx, [eax+eax+0x17];
	__asm        lds    edx, [eax+eax];
	__asm        add    [eax], al;
	__asm        add    [edx], al;
	__asm        add    al, [edx];
	__asm        add    al, [edx];
	__asm        add    al, [edx];
	__asm        add    al, [ecx];
	__asm        add    [ecx], eax;
// LINE 2003:
	__asm        mov    loop, 1;
// LINE 2004:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF4];
	__asm        lea    eax, [eax*4-0x14];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    freqadj, ax;
// LINE 2005:
	__asm        jmp    near ptr 0x0054C60B;
// LINE 2007:
	__asm        push   0x8C085;
	__asm        push   0x5BB07C;
	__asm        push   0x7D7;
	__asm        push   0x5BB098;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2008:
	__asm        jmp    near ptr 0x0054C60B;
	__asm        inc    dword ptr [ebp-0x34];
	__asm        cmp    dword ptr [ebp-0x34], 0x13;
	__asm        ja     near ptr 0x0054C583;
	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    dword ptr [eax*4+0x54C5BB];
	__asm        adc    eax, esp;
	__asm        push   esp;
	__asm        add    [ebx+0x210054C5], al;
	__asm        les    edx, [eax+eax+0x2D];
	__asm        les    edx, [eax+eax+0x39];
	__asm        les    edx, [eax+eax+0x45];
	__asm        les    edx, [eax+eax+0x51];
	__asm        les    edx, [eax+eax+0x5D];
	__asm        les    edx, [eax+eax+0x69];
	__asm        les    edx, [eax+eax+0x75];
	__asm        les    edx, [eax+eax-0x7F];
	__asm        les    edx, [eax+eax-0x73];
	__asm        les    edx, [eax+eax-0x67];
	__asm        les    edx, [eax+eax-0x5B];
	__asm        les    edx, [eax+eax-0x4F];
	__asm        les    edx, [eax+eax-0x13];
	__asm        les    edx, [eax+eax-0x43];
	__asm        les    edx, [eax+eax-0x37];
	__asm        les    edx, [eax+eax-0x2B];
	__asm        les    edx, [eax+eax-0x1F];
	__asm        (bad);
// LINE 2009:
	__asm        mov    flags, 2;
// LINE 2010:
	__asm        test   reinterpret_cast<uint32_t>(loop), 0xFFFF;
	__asm        je     near ptr 0x0054C623;
// LINE 2011:
	__asm        or     flags, 1;
// LINE 2012:
	__asm        mov    eax, soundfile;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   0x00446A6B;
	__asm        add    esp, 8;
// LINE 2013:
	__asm        mov    eax, flags;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
	__asm        mov    success, eax;
// LINE 2014:
	__asm        movsx  eax, freqadj;
	__asm        push   eax;
	__asm        movsx  eax, actualSoundChannel;
	__asm        push   eax;
	__asm        call   0x00446E3C;
	__asm        add    esp, 8;
// LINE 2022:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054C66A;
// LINE 2023:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0054c671
void cYObject::SimulateAll() {
	long debuglooptime;
	unsigned short simulate;

// LINE 2034:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xE0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2085:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        add    ds:[0x5B869C], eax;
// LINE 2086:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    debuglooptime, eax;
// LINE 2087:
	__asm        mov    simulate, 0;
// LINE 2088:
	__asm        mov    eax, ds:[0x5B8698];
	__asm        cmp    ds:[0x5B869C], eax;
	__asm        jle    near ptr 0x0054C6C7;
// LINE 2089:
	__asm        mov    simulate, 1;
// LINE 2090:
	__asm        inc    dword ptr ds:[0x5B8690];
// LINE 2091:
	__asm        mov    dword ptr ds:[0x5B8698], 0x147A;
// LINE 2092:
	__asm        mov    dword ptr ds:[0x5B869C], 0;
// LINE 2096:
	__asm        call   0x00547937;
// LINE 2098:
	__asm        test   reinterpret_cast<uint32_t>(simulate), 0xFFFF;
	__asm        jne    near ptr 0x0054C826;
// LINE 2099:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054C6E8;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054C821;
// LINE 2100:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054C711;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054C790;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054C72A;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054C746;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054C774;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054C790;
	__asm        mov    eax, [ebp-0xCC];
	__asm        mov    obj, eax;
// LINE 2101:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054C81C;
// LINE 2102:
	__asm        jmp    near ptr 0x0054C7A7;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054C7D4;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x70];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x70];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054C81C;
// LINE 2103:
// Block end:
	__asm        jmp    near ptr 0x0054C6E4;
// LINE 2105:
// Block end:
	__asm        jmp    near ptr 0x0054CCB3;
// LINE 2106:
// Block start:
	short count;
	__asm        inc    dword ptr ds:[0x5B8694];
	__asm        movsx  eax, word ptr ds:[0x5B8644];
	__asm        cmp    eax, ds:[0x5B8694];
	__asm        jge    near ptr 0x0054C849;
	__asm        mov    dword ptr ds:[0x5B8694], 0;
// LINE 2107:
	__asm        inc    word ptr ds:[0x5B86B0];
	__asm        movsx  eax, word ptr ds:[0x5B86B0];
	__asm        cmp    eax, 2;
	__asm        jle    near ptr 0x0054C869;
	__asm        mov    word ptr ds:[0x5B86B0], 0;
// LINE 2108:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054C878;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054CC8D;
// LINE 2109:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054C8A1;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054C920;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054C8BA;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054C8D6;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054C904;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054C920;
	__asm        mov    eax, [ebp-0xD0];
	__asm        mov    obj, eax;
// LINE 2110:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054CC88;
// LINE 2111:
	__asm        cmp    dword ptr ds:[0x5B8694], 0;
	__asm        jne    near ptr 0x0054CBFD;
// LINE 2113:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054CBFD;
	__asm        mov    ecx, obj;
	__asm        call   0x00549F04;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054CBFD;
// LINE 2114:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054C992;
	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054C997;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054C9C4;
	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054CA0D;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CA08;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054CA3D;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054CA3D;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CA5B;
	__asm        jmp    near ptr 0x0054CA8C;
	__asm        jmp    near ptr 0x0054CA5B;
	__asm        jmp    near ptr 0x0054CA70;
	__asm        test   dword ptr [ebp-0xE0], 0xFFFF;
	__asm        jne    near ptr 0x0054CA8C;
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CB45;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CB20;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CAEF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0xD8], ax;
	__asm        jmp    near ptr 0x0054CB0B;
	__asm        jmp    near ptr 0x0054CAFD;
	__asm        mov    word ptr [ebp-0xD8], 0xFFFF;
	__asm        jmp    near ptr 0x0054CB0B;
	__asm        mov    ax, [ebp-0xDC];
	__asm        mov    [ebp-0xD8], ax;
	__asm        jmp    near ptr 0x0054CB10;
	__asm        movsx  eax, word ptr [ebp-0xD8];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0054CB25;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x0054CB4A;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0xD4], eax;
	__asm        cmp    dword ptr [ebp-0xD4], 0;
	__asm        jne    near ptr 0x0054CB9E;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0054CBAC;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0054CBB1;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054CBCF;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054CBEB;
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, obj;
	__asm        call   0x005507EC;
	__asm        jmp    near ptr 0x0054CBF8;
// LINE 2120:
	__asm        jmp    near ptr 0x0054C874;
// LINE 2123:
	__asm        jmp    near ptr 0x0054CC02;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054CC2F;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0xC8];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, obj;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0xC8];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054CC80;
// LINE 2124:
	__asm        mov    ecx, obj;
	__asm        call   0x0054DAF3;
// LINE 2126:
// Block end:
	__asm        jmp    near ptr 0x0054C874;
// LINE 2127:
	__asm        cmp    dword ptr ds:[0x5B8694], 0;
	__asm        jne    near ptr 0x0054CC9F;
// LINE 2128:
	__asm        call   0x00547C6B;
// LINE 2130:
	__asm        movsx  eax, word ptr ds:[0x5B86B0];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054CCB3;
// LINE 2131:
	__asm        call   0x0054BC3C;
// LINE 2134:
// Block end:
	__asm        jmp    near ptr 0x0054CCB8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054ccbd
unsigned short cYObject::AddToHeli() {
	struct tagPassengerInfo tempPassengerInfo;

// LINE 2137:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2143:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        mov    tempPassengerInfo.lPassengerFace, eax;
// LINE 2145:
	__asm        mov    tempPassengerInfo.lPassengerExpression, 1;
// LINE 2146:
	__asm        mov    tempPassengerInfo.lPassengerHealth, 0x200;
// LINE 2147:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        mov    tempPassengerInfo.lPassengerID, eax;
// LINE 2149:
	__asm        lea    eax, tempPassengerInfo.lPassengerFace;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9CFA;
	__asm        add    esp, 8;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054CD18;
// LINE 2150:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054CD44;
// LINE 2151:
	__asm        lea    eax, tempPassengerInfo.lPassengerFace;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9D16;
	__asm        add    esp, 8;
// LINE 2152:
	__asm        mov    ecx, this;
	__asm        mov    word ptr [ecx+0xE2], 0;
// LINE 2153:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054CD44;
// LINE 2155:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054cd49
void cYObject::RemoveFromHeli() {
	int32_t yes;

// LINE 2158:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2159:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9EAA;
	__asm        add    esp, 8;
	__asm        mov    yes, eax;
// LINE 2160:
	__asm        cmp    yes, 0;
	__asm        jne    near ptr 0x0054CD9C;
	__asm        push   0x8C085;
	__asm        push   0x5BB0BC;
	__asm        push   0x870;
	__asm        push   0x5BB0E8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2161:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 2162:
	__asm        jmp    near ptr 0x0054CDAD;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054cdb2
class cYObject* cYObject::GetPersonWithMaster(struct _DYOBJ_INST* dyobj) {
	short count;

// LINE 2165:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2166:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0054CDCD;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054CEBC;
// LINE 2167:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0054CDF6;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054CE72;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054CE0F;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0054CE2B;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0054CE59;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0054CE72;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
// LINE 2168:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0054CE98;
	__asm        push   0x8C085;
	__asm        push   0x5BB10C;
	__asm        push   0x878;
	__asm        push   0x5BB130;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2169:
	__asm        jmp    near ptr 0x0054CE9D;
	__asm        mov    eax, obj;
	__asm        mov    ecx, dyobj;
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    near ptr 0x0054CEB7;
// LINE 2170:
	__asm        mov    eax, obj;
	__asm        jmp    near ptr 0x0054CEC3;
// LINE 2171:
// Block end:
	__asm        jmp    near ptr 0x0054CDC9;
// LINE 2172:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0054CEC3;
// LINE 2173:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0054ceca
unsigned short cYObject::SetMaster(struct _DYOBJ_INST* obj) {
	unsigned short success;

// LINE 2176:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2177:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054CF1F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CF1A;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054CF4F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0054CF4F;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054CF6D;
	__asm        jmp    near ptr 0x0054CF9B;
	__asm        jmp    near ptr 0x0054CF6D;
	__asm        jmp    near ptr 0x0054CF7F;
	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    near ptr 0x0054CF9B;
	__asm        push   0x8C085;
	__asm        push   0x5BB154;
	__asm        push   0x881;
	__asm        push   0x5BB180;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2181:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     near ptr 0x0054CFDD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x0054CFDD;
// LINE 2182:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x0054CFDD;
// LINE 2183:
	__asm        mov    ecx, this;
	__asm        call   0x0054CD49;
// LINE 2188:
	__asm        mov    success, 1;
// LINE 2189:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0054D091;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     near ptr 0x0054D091;
// LINE 2190:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    ecx, obj;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        jne    near ptr 0x0054D034;
// LINE 2192:
	__asm        mov    ecx, this;
	__asm        call   0x0054CCBD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054D02F;
// LINE 2193:
	__asm        mov    success, 0;
// LINE 2196:
	__asm        jmp    near ptr 0x0054D091;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    ecx, obj;
	__asm        cmp    [eax+0xBC], ecx;
	__asm        jne    near ptr 0x0054D091;
// LINE 2199:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        cmp    dword ptr [eax+0x1B0], 0;
	__asm        je     near ptr 0x0054D06C;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        cmp    dword ptr [eax+0x1B4], 0;
	__asm        je     near ptr 0x0054D077;
// LINE 2200:
	__asm        mov    success, 0;
// LINE 2202:
	__asm        jmp    near ptr 0x0054D091;
	__asm        mov    eax, obj;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CDB2;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054D091;
// LINE 2203:
	__asm        mov    success, 0;
// LINE 2206:
	__asm        test   reinterpret_cast<uint32_t>(success), 0xFFFF;
	__asm        je     near ptr 0x0054D0D3;
// LINE 2207:
	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x130], eax;
// LINE 2209:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0054D0D3;
// LINE 2210:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2217:
	__asm        mov    ax, success;
	__asm        jmp    near ptr 0x0054D0DC;
// LINE 2218:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0054d0e3
unsigned short cYObject::AdjoinsRoad(struct Point3d pos) {
	int32_t celly;
	int32_t cellx;

// LINE 2221:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2222:
	__asm        mov    eax, pos.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    cellx, eax;
// LINE 2223:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, pos.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celly, eax;
// LINE 2230:
	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0054D247;
	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D247;
	__asm        cmp    celly, 0x80;
	__asm        jge    near ptr 0x0054D247;
	__asm        cmp    celly, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D247;
	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        js     near ptr 0x0054D169;
	__asm        mov    eax, cellx;
	__asm        dec    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054D169;
	__asm        cmp    celly, 0;
	__asm        jl     near ptr 0x0054D169;
	__asm        cmp    celly, 0x7F;
	__asm        jle    near ptr 0x0054D175;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x0054D230;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax*4+0x63984C];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0xC], ax;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0054D1AD;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x0054D213;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x0054D1CF;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x0054D213;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x0054D1F1;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x0054D213;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x0054D224;
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x0054D224;
	__asm        mov    dword ptr [ebp-0x10], 1;
	__asm        jmp    near ptr 0x0054D230;
	__asm        jmp    near ptr 0x0054D230;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        jmp    near ptr 0x0054D230;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        jmp    near ptr 0x0054D259;
	__asm        jmp    near ptr 0x0054D24C;
	__asm        jmp    near ptr 0x0054D259;
	__asm        test   dword ptr [ebp-0x14], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0054D395;
	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D395;
	__asm        cmp    celly, 0x80;
	__asm        jge    near ptr 0x0054D395;
	__asm        cmp    celly, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D395;
	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        js     near ptr 0x0054D2B7;
	__asm        mov    eax, cellx;
	__asm        inc    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054D2B7;
	__asm        cmp    celly, 0;
	__asm        jl     near ptr 0x0054D2B7;
	__asm        cmp    celly, 0x7F;
	__asm        jle    near ptr 0x0054D2C3;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0054D37E;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax*4+0x639854];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x18], ax;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0054D2FB;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x0054D361;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x0054D31D;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x0054D361;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x0054D33F;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x0054D361;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x0054D372;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x0054D372;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x0054D37E;
	__asm        jmp    near ptr 0x0054D37E;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0054D37E;
	__asm        test   dword ptr [ebp-0x1C], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        jmp    near ptr 0x0054D3A7;
	__asm        jmp    near ptr 0x0054D39A;
	__asm        jmp    near ptr 0x0054D3A7;
	__asm        test   dword ptr [ebp-0x20], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        cmp    cellx, 0x80;
	__asm        jge    near ptr 0x0054D4E4;
	__asm        cmp    cellx, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D4E4;
	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0054D4E4;
	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D4E4;
	__asm        cmp    cellx, 0;
	__asm        jl     near ptr 0x0054D405;
	__asm        cmp    cellx, 0x7F;
	__asm        jg     near ptr 0x0054D405;
	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        js     near ptr 0x0054D405;
	__asm        mov    eax, celly;
	__asm        dec    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jle    near ptr 0x0054D411;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0054D4CD;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx-1];
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0054D44A;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x0054D4B0;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x0054D46C;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x0054D4B0;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x0054D48E;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x0054D4B0;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x0054D4C1;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x0054D4C1;
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x0054D4CD;
	__asm        jmp    near ptr 0x0054D4CD;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        jmp    near ptr 0x0054D4CD;
	__asm        test   dword ptr [ebp-0x28], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        jmp    near ptr 0x0054D4F6;
	__asm        jmp    near ptr 0x0054D4E9;
	__asm        jmp    near ptr 0x0054D4F6;
	__asm        test   dword ptr [ebp-0x2C], 0xFFFF;
	__asm        jne    near ptr 0x0054D64A;
	__asm        cmp    cellx, 0x80;
	__asm        jge    near ptr 0x0054D633;
	__asm        cmp    cellx, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D633;
	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0054D633;
	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0054D633;
	__asm        cmp    cellx, 0;
	__asm        jl     near ptr 0x0054D554;
	__asm        cmp    cellx, 0x7F;
	__asm        jg     near ptr 0x0054D554;
	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        js     near ptr 0x0054D554;
	__asm        mov    eax, celly;
	__asm        inc    eax;
	__asm        cmp    eax, 0x7F;
	__asm        jle    near ptr 0x0054D560;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0054D61C;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        mov    ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx+1];
	__asm        mov    [ebp-0x30], ax;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0054D599;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x0054D5FF;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x0054D5BB;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x0054D5FF;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x0054D5DD;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x0054D5FF;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x0054D610;
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x0054D610;
	__asm        mov    dword ptr [ebp-0x34], 1;
	__asm        jmp    near ptr 0x0054D61C;
	__asm        jmp    near ptr 0x0054D61C;
	__asm        mov    dword ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x0054D61C;
	__asm        test   dword ptr [ebp-0x34], 0xFFFF;
	__asm        je     near ptr 0x0054D653;
	__asm        jmp    near ptr 0x0054D64A;
	__asm        jmp    near ptr 0x0054D63D;
	__asm        jmp    near ptr 0x0054D653;
	__asm        jmp    near ptr 0x0054D64A;
	__asm        test   dword ptr [ebp-0x38], 0xFFFF;
	__asm        je     near ptr 0x0054D653;
// LINE 2234:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054D65B;
// LINE 2235:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054D65B;
// LINE 2236:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0054d662
unsigned short cYObject::GetNeutralLoc(int32_t * cellx, int32_t * celly, int32_t * offsetx, int32_t * offsetz) {
	struct _CELL_INFO* newcptr;
	struct _CELL_INFO* cptr;
	short cy;
	int32_t z;
	short cx;
	short scurkID1;
	int32_t x;
	short scurkID2;
	enum cYObject::LocationType loctype;

// LINE 2239:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x88;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2243:
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, cellx;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 2244:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, cellx;
	__asm        mov    [ecx], eax;
// LINE 2245:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celly;
	__asm        mov    [ecx], eax;
// LINE 2246:
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 2251:
	__asm        mov    word ptr [ebp-0x68], 0;
	__asm        jmp    near ptr 0x0054D6EC;
	__asm        inc    word ptr [ebp-0x68];
	__asm        movsx  eax, word ptr [ebp-0x68];
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0054D730;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x68];
	__asm        shl    ecx, 2;
	__asm        mov    edx, loctype;
	__asm        cmp    [ecx+eax*8+0x6372D0], edx;
	__asm        jne    near ptr 0x0054D72B;
	__asm        mov    word ptr [ebp-0x64], 1;
	__asm        jmp    near ptr 0x0054D73B;
	__asm        jmp    near ptr 0x0054D6E8;
	__asm        mov    word ptr [ebp-0x64], 0;
	__asm        jmp    near ptr 0x0054D73B;
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    word ptr [ebp-0x70], 0;
	__asm        cmp    dword ptr [ebp-0x6C], 0;
	__asm        je     near ptr 0x0054D774;
	__asm        mov    eax, [ebp-0x6C];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x0054D767;
	__asm        inc    word ptr [ebp-0x70];
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x0054D74A;
	__asm        jmp    near ptr 0x0054D779;
	__asm        mov    eax, loctype;
	__asm        movsx  eax, word ptr [eax*8+0x63526C];
	__asm        movsx  ecx, word ptr [ebp-0x70];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0054D79B;
	__asm        mov    word ptr [ebp-0x60], 1;
	__asm        jmp    near ptr 0x0054D7A1;
	__asm        mov    word ptr [ebp-0x60], 0;
	__asm        test   dword ptr [ebp-0x64], 0xFFFF;
	__asm        je     near ptr 0x0054D7CA;
	__asm        test   dword ptr [ebp-0x60], 0xFFFF;
	__asm        je     near ptr 0x0054D7CA;
	__asm        jmp    near ptr 0x0054D7E4;
	__asm        jmp    near ptr 0x0054D7DC;
	__asm        jmp    near ptr 0x0054D7CF;
	__asm        jmp    near ptr 0x0054D7DC;
	__asm        test   dword ptr [ebp-0x74], 0xFFFF;
	__asm        jne    near ptr 0x0054D7E4;
// LINE 2252:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054DAEC;
// LINE 2254:
	__asm        mov    eax, loctype;
	__asm        mov    eax, [eax*8+0x635268];
	__asm        push   eax;
	__asm        mov    eax, offsetz;
	__asm        push   eax;
	__asm        mov    eax, offsetx;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00545049;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054D819;
// LINE 2255:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054DAEC;
// LINE 2256:
	__asm        mov    eax, loctype;
	__asm        cmp    dword ptr [eax*8+0x635268], 0;
	__asm        jne    near ptr 0x0054D8DD;
// Block start:
	struct Point3d pos;
	__asm        mov    eax, offsetz;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, offsetx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
// LINE 2257:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x50], eax;
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, [ebp-0x58];
	__asm        mov    [ebp-0x4C], eax;
	__asm        lea    eax, [ebp-0x54];
	__asm        lea    ecx, [ebp-0x48];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054D887;
	__asm        lea    eax, [ebp-0x48];
	__asm        lea    ecx, [ebp-0x3C];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x3C];
	__asm        lea    ecx, pos.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2259:
	__asm        mov    eax, pos.z;
	__asm        push   eax;
	__asm        mov    eax, pos.y;
	__asm        push   eax;
	__asm        mov    eax, pos.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054D0E3;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054D8DD;
// LINE 2260:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0054DAEC;
// LINE 2263:
// Block end:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        mov    ecx, offsetx;
	__asm        add    eax, [ecx];
	__asm        shl    eax, 0x10;
	__asm        mov    x, eax;
// LINE 2264:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        mov    ecx, offsetz;
	__asm        add    eax, [ecx];
	__asm        shl    eax, 0x10;
	__asm        mov    z, eax;
// LINE 2265:
	__asm        mov    eax, x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    cx, ax;
// LINE 2266:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, z;
	__asm        sar    eax, 0x16;
	__asm        mov    cy, ax;
// LINE 2267:
	__asm        movsx  eax, cx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, cy;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    newcptr, eax;
// LINE 2268:
	__asm        mov    eax, cptr;
	__asm        cmp    newcptr, eax;
	__asm        je     near ptr 0x0054D967;
	__asm        push   0x8C085;
	__asm        push   0x5BB1A4;
	__asm        push   0x8DC;
	__asm        push   0x5BB1C8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, celly;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], ax;
	__asm        mov    eax, cellx;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x80], ax;
// LINE 2269:
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054D9AB;
	__asm        movsx  eax, word ptr [ebp-0x7C];
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054D9AB;
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054D9AB;
	__asm        movsx  eax, word ptr [ebp-0x7C];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054D9B6;
	__asm        mov    scurkID1, 0xFFFF;
	__asm        jmp    near ptr 0x0054DA12;
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, word ptr [ebp-0x7C];
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x78], ax;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054D9E9;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0054DA05;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x78];
	__asm        mov    scurkID1, ax;
	__asm        jmp    near ptr 0x0054DA12;
// LINE 2270:
	__asm        movsx  eax, cx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054DA44;
	__asm        movsx  eax, cy;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x0054DA44;
	__asm        movsx  eax, cx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054DA44;
	__asm        movsx  eax, cy;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0054DA4F;
	__asm        mov    scurkID2, 0xFFFF;
	__asm        jmp    near ptr 0x0054DAB7;
	__asm        movsx  eax, cx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, cy;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x84], ax;
	__asm        movsx  eax, word ptr [ebp-0x84];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0054DA8B;
	__asm        movsx  eax, word ptr [ebp-0x84];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0054DAA7;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-0x84];
	__asm        mov    scurkID2, ax;
	__asm        jmp    near ptr 0x0054DAB7;
// LINE 2271:
	__asm        movsx  eax, scurkID2;
	__asm        movsx  ecx, scurkID1;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0054DAE3;
	__asm        push   0x8C085;
	__asm        push   0x5BB1EC;
	__asm        push   0x8DF;
	__asm        push   0x5BB228;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2273:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0054DAEC;
// LINE 2274:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0054daf3
void cYObject::Simulate() {
// LINE 2277:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2278:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054DB2D;
	__asm        push   0x8C085;
	__asm        push   0x5BB24C;
	__asm        push   0x8E6;
	__asm        push   0x5BB26C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2280:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x0054DC50;
// LINE 2281:
	__asm        jmp    near ptr 0x0054DB42;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054DB6F;
	__asm        push   0x8C085;
	__asm        push   0x5BBD20;
	__asm        push   0x262;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x0054DB9B;
	__asm        push   0x8C085;
	__asm        push   0x5BBCFC;
	__asm        push   0x263;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA0];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA4];
	__asm        mov    [ebp-0xC], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00555A60;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x0054DC26;
	__asm        push   0x8C085;
	__asm        push   0x5BBCCC;
	__asm        push   0x268;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054DC50;
// LINE 2282:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0055CF37;
// LINE 2283:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054DC8D;
	__asm        push   0x8C085;
	__asm        push   0x5BBCAC;
	__asm        push   0x27F;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054DCD4;
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xDC];
	__asm        jmp    near ptr 0x0054DC9C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x14];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xDC];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0054DCCA;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
	__asm        jmp    near ptr 0x0054DCCF;
	__asm        jmp    near ptr 0x0054DCD4;
// LINE 2284:
	__asm        jmp    near ptr 0x0054DCD9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054dcde
enum cYObject::MoveErrorCode cAvatar::AvatarMove(struct cYObject::MoveInfo* moveinfo) {
	unsigned short yaw;
	enum cYObject::MoveErrorCode movecode;

// LINE 2289:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x64;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2290:
	__asm        mov    yaw, 0;
// LINE 2291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x178], 0;
	__asm        je     near ptr 0x0054DD0E;
// LINE 2292:
	__asm        mov    ecx, this;
	__asm        call   0x00551A3D;
// LINE 2293:
	__asm        mov    yaw, 1;
// LINE 2295:
	__asm        cmp    moveinfo, 0;
	__asm        jne    near ptr 0x0054DD34;
	__asm        push   0x8C085;
	__asm        push   0x5BB290;
	__asm        push   0x8F7;
	__asm        push   0x5BB2B4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2296:
	__asm        push   0x10;
	__asm        push   0;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        call   0x00554C10;
	__asm        add    esp, 0xC;
// LINE 2297:
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x168;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005559B2;
	__asm        mov    movecode, eax;
// LINE 2298:
	__asm        test   reinterpret_cast<uint32_t>(yaw), 0xFFFF;
	__asm        jne    near ptr 0x0054DD87;
	__asm        cmp    movecode, 0;
	__asm        jne    near ptr 0x0054DE09;
// LINE 2299:
	__asm        mov    ecx, this;
	__asm        call   0x0054FAEE;
// LINE 2300:
	__asm        jmp    near ptr 0x0054DD94;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054DDC1;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x60];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x48];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0054DE09;
// LINE 2304:
	__asm        mov    eax, movecode;
	__asm        jmp    near ptr 0x0054DE11;
// LINE 2305:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0054de18
void cAvatar::Simulate() {
	struct _HELI_DATA* hd;
	struct cYObject::MoveInfo moveinfo;
	enum cYObject::MoveErrorCode movecode;

// LINE 2308:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x60;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2309:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054DFC2;
// LINE 2310:
// Block start:
	struct _DYOBJ_INST* dy;
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        jne    near ptr 0x0054DE5F;
	__asm        push   0x8C085;
	__asm        push   0x5BB2D8;
	__asm        push   0x906;
	__asm        push   0x5BB30C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2311:
	__asm        jmp    near ptr 0x0054DE64;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    dy, eax;
// LINE 2312:
	__asm        cmp    dy, 0;
	__asm        je     near ptr 0x0054DE8E;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    ecx, dy;
	__asm        cmp    [eax+0xA4], ecx;
	__asm        je     near ptr 0x0054DEAA;
	__asm        push   0x8C085;
	__asm        push   0x5BB330;
	__asm        push   0x908;
	__asm        push   0x5BB338;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2313:
	__asm        jmp    near ptr 0x0054DEAF;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0054DEDC;
	__asm        push   0x8C085;
	__asm        push   0x5BBD20;
	__asm        push   0x262;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x0054DF08;
	__asm        push   0x8C085;
	__asm        push   0x5BBCFC;
	__asm        push   0x263;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA0];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA8];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xA4];
	__asm        mov    [ebp-0x58], eax;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x58];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00555A60;
	__asm        mov    [ebp-0x50], eax;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x0054DF93;
	__asm        push   0x8C085;
	__asm        push   0x5BBCCC;
	__asm        push   0x268;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA0;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054DFBD;
// LINE 2314:
	__asm        jmp    near ptr 0x0054E574;
// LINE 2316:
// Block end:
	__asm        cmp    dword ptr ds:[0x5B4DB8], 3;
	__asm        je     near ptr 0x0054DFEB;
	__asm        push   0x8C085;
	__asm        push   0x5BB35C;
	__asm        push   0x90C;
	__asm        push   0x5BB394;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2317:
	__asm        mov    ecx, this;
	__asm        call   0x005466C5;
// LINE 2319:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054DCDE;
	__asm        mov    movecode, eax;
// LINE 2321:
	__asm        inc    word ptr ds:[0x5B86B4];
	__asm        movsx  eax, word ptr ds:[0x5B86B4];
	__asm        cmp    eax, 0xA;
	__asm        jle    near ptr 0x0054E055;
// LINE 2322:
	__asm        mov    word ptr ds:[0x5B86B4], 0;
// LINE 2323:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054E055;
// LINE 2324:
// Block start:
	class cYObject* person;
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        mov    person, eax;
// LINE 2325:
	__asm        cmp    person, 0;
	__asm        jne    near ptr 0x0054E055;
// LINE 2326:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2330:
// Block end:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        push   eax;
	__asm        call   0x00546B56;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 2332:
	__asm        cmp    hd, 0;
	__asm        je     near ptr 0x0054E237;
// LINE 2333:
// Block start:
	class cYObject* person;
	__asm        mov    eax, hd;
	__asm        mov    ds:[0x5B4968], eax;
// LINE 2334:
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        mov    person, eax;
// LINE 2337:
	__asm        cmp    person, 0;
	__asm        je     near ptr 0x0054E121;
// LINE 2338:
// Block start:
	class cYObject* obj;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0054E0BD;
	__asm        push   0x8C085;
	__asm        push   0x5BB3B8;
	__asm        push   0x922;
	__asm        push   0x5BB3E4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2340:
	__asm        jmp    near ptr 0x0054E0C2;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00552190;
	__asm        mov    obj, eax;
// LINE 2341:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0054E0FF;
	__asm        push   0x8C085;
	__asm        push   0x5BB408;
	__asm        push   0x925;
	__asm        push   0x5BB410;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2342:
	__asm        mov    eax, person;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   0x0055B920;
// LINE 2345:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2348:
// Block end:
	__asm        jmp    near ptr 0x0054E232;
// LINE 2349:
	__asm        mov    word ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x0054E130;
	__asm        inc    word ptr [ebp-0x30];
	__asm        movsx  eax, word ptr [ebp-0x30];
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0054E1DA;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   0x00552040;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054E1D5;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054E1D0;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0054E1AB;
	__asm        mov    eax, [ebp-0x34];
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x38], ax;
	__asm        jmp    near ptr 0x0054E1BE;
	__asm        jmp    near ptr 0x0054E1B6;
	__asm        mov    word ptr [ebp-0x38], 0xFFFF;
	__asm        jmp    near ptr 0x0054E1BE;
	__asm        mov    ax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], ax;
	__asm        jmp    near ptr 0x0054E1C3;
	__asm        movsx  eax, word ptr [ebp-0x38];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0054E1D5;
	__asm        jmp    near ptr 0x0054E12C;
	__asm        jmp    near ptr 0x0054E1DF;
// LINE 2350:
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2351:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
// LINE 2352:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 0;
// LINE 2356:
	__asm        mov    eax, hd;
	__asm        mov    dword ptr [eax+8], 1;
// LINE 2357:
	__asm        mov    dword ptr ds:[0x5B4DB8], 0;
// LINE 2358:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F07BA;
	__asm        add    esp, 4;
// LINE 2359:
	__asm        jmp    near ptr 0x0054E574;
// LINE 2362:
// Block end:
	__asm        jmp    near ptr 0x0054E482;
	__asm        cmp    movecode, 5;
	__asm        jne    near ptr 0x0054E482;
// LINE 2363:
// Block start:
	class cYObject* person;
	__asm        mov    eax, moveinfo.dyBlock;
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    person, eax;
// LINE 2364:
	__asm        cmp    person, 0;
	__asm        jne    near ptr 0x0054E276;
	__asm        push   0x8C085;
	__asm        push   0x5BB434;
	__asm        push   0x93C;
	__asm        push   0x5BB448;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2365:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        jne    near ptr 0x0054E482;
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054E482;
// LINE 2366:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, person;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, person;
	__asm        call   0x005507EC;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, person;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x48], al;
	__asm        mov    eax, person;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x4C], al;
	__asm        jmp    near ptr 0x0054E2E4;
	__asm        mov    eax, person;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0054E311;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, [ebp-0x4C];
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0x48];
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054E32E;
	__asm        mov    ecx, person;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x0054E33B;
// LINE 2367:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    ecx, person;
	__asm        call   0x0054CECA;
// LINE 2368:
	__asm        jmp    near ptr 0x0054E34F;
	__asm        jmp    near ptr 0x0054E354;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, person;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        cmp    eax, 0x322;
	__asm        je     near ptr 0x0054E3D2;
	__asm        jmp    near ptr 0x0054E37F;
	__asm        jmp    near ptr 0x0054E384;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, person;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0054E3B7;
	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0x322;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, person;
	__asm        call   0x0055CE37;
	__asm        jmp    near ptr 0x0054E3D7;
	__asm        jmp    near ptr 0x0054E3D7;
	__asm        jmp    near ptr 0x0054E3D7;
// LINE 2369:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E403;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E429;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x546F7465;
	__asm        je     near ptr 0x0054E471;
	__asm        push   0x546F7465;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E471;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E476;
// LINE 2370:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 0;
// LINE 2379:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x174];
	__asm        mov    [ebp-0x44], eax;
	__asm        cmp    dword ptr [ebp-0x44], 0x10000;
	__asm        jge    near ptr 0x0054E4B3;
	__asm        cmp    dword ptr [ebp-0x44], 0xFFFF0000;
	__asm        jle    near ptr 0x0054E4B3;
	__asm        mov    word ptr [ebp-0x40], 0;
	__asm        jmp    near ptr 0x0054E4DE;
	__asm        cmp    dword ptr [ebp-0x44], 0xD0000;
	__asm        jge    near ptr 0x0054E4D8;
	__asm        cmp    dword ptr [ebp-0x44], 0xFFF30000;
	__asm        jle    near ptr 0x0054E4D8;
	__asm        mov    word ptr [ebp-0x40], 4;
	__asm        jmp    near ptr 0x0054E4DE;
	__asm        mov    word ptr [ebp-0x40], 8;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054E579;
	__asm        jmp    near ptr 0x0054E4F7;
// LINE 2380:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E528;
	__asm        push   0x8C085;
	__asm        push   0x5BBCAC;
	__asm        push   0x27F;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E56F;
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xDC];
	__asm        jmp    near ptr 0x0054E537;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    eax, [eax+0x28];
	__asm        movsx  eax, word ptr [eax+0x14];
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+0xDC];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0054E565;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
	__asm        jmp    near ptr 0x0054E56A;
	__asm        jmp    near ptr 0x0054E56F;
// LINE 2381:
	__asm        jmp    near ptr 0x0054E574;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054e579
void cYObject::DynEffects(short speed, enum cYObject::MoveErrorCode movecode, struct cYObject::MoveInfo* moveinfo) {
// LINE 2404:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2406:
	__asm        mov    eax, movecode;
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x0054FA9E;
// LINE 2408:
	__asm        movsx  eax, speed;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054E5B8;
	__asm        push   0x8C085;
	__asm        push   0x5BB46C;
	__asm        push   0x968;
	__asm        push   0x5BB474;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2409:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054E723;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054E684;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E60C;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E632;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054E67A;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E67A;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E67F;
	__asm        jmp    near ptr 0x0054E723;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E6B0;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E6D6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x0054E71E;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E71E;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E723;
// LINE 2410:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2413:
	__asm        movsx  eax, speed;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0054E8D5;
// LINE 2414:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054E89F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054E800;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E788;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E7AE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054E7F6;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E7F6;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E7FB;
	__asm        jmp    near ptr 0x0054E89F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E82C;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E852;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x0054E89A;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E89A;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E89F;
// LINE 2415:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x104];
	__asm        cmp    eax, 0xE;
	__asm        jne    near ptr 0x0054E8D0;
// LINE 2416:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054E8D0;
	__asm        push   0;
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2418:
	__asm        jmp    near ptr 0x0054EBF9;
	__asm        movsx  eax, speed;
	__asm        cmp    eax, 7;
	__asm        jge    near ptr 0x0054EA70;
// LINE 2419:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EA4D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054E9AE;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E936;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054E95C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4467526E;
	__asm        je     near ptr 0x0054E9A4;
	__asm        push   0x4467526E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054E9A4;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054E9A9;
	__asm        jmp    near ptr 0x0054EA4D;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054E9DA;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EA00;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x3157616C;
	__asm        je     near ptr 0x0054EA48;
	__asm        push   0x3157616C;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054EA48;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054EA4D;
// LINE 2420:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EA6B;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2422:
	__asm        jmp    near ptr 0x0054EBF9;
// LINE 2423:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EBDB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054EB3C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054EAC4;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EAEA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4467526E;
	__asm        je     near ptr 0x0054EB32;
	__asm        push   0x4467526E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054EB32;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054EB37;
	__asm        jmp    near ptr 0x0054EBDB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054EB68;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EB8E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x3152756E;
	__asm        je     near ptr 0x0054EBD6;
	__asm        push   0x3152756E;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054EBD6;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054EBDB;
// LINE 2424:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EBF9;
	__asm        push   0;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2426:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2429:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054ED69;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054ECCA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054EC52;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EC78;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054ECC0;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054ECC0;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054ECC5;
	__asm        jmp    near ptr 0x0054ED69;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054ECF6;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054ED1C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4661436C;
	__asm        je     near ptr 0x0054ED64;
	__asm        push   0x4661436C;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054ED64;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054ED69;
// LINE 2430:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054ED87;
	__asm        push   0;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2431:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2434:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EEF7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054EE58;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054EDE0;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EE06;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054EE4E;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054EE4E;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054EE53;
	__asm        jmp    near ptr 0x0054EEF7;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054EE84;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054EEAA;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x57686F61;
	__asm        je     near ptr 0x0054EEF2;
	__asm        push   0x57686F61;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054EEF2;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054EEF7;
// LINE 2435:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054EF15;
	__asm        push   0;
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2436:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2438:
	__asm        cmp    moveinfo, 0;
	__asm        je     near ptr 0x0054EF31;
	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        jne    near ptr 0x0054EF4D;
	__asm        push   0x8C085;
	__asm        push   0x5BB498;
	__asm        push   0x986;
	__asm        push   0x5BB4C4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
// LINE 2439:
	__asm        jmp    near ptr 0x0054EF5B;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2440:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2441:
	__asm        push   5;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0054F580;
// LINE 2443:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F126;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F087;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F00F;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F035;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F07D;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F07D;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F082;
	__asm        jmp    near ptr 0x0054F126;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F0B3;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F0D9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x32476162;
	__asm        je     near ptr 0x0054F121;
	__asm        push   0x32476162;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F121;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F126;
// LINE 2444:
	__asm        jmp    near ptr 0x0054F5A3;
// LINE 2446:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F296;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F1F7;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F17F;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F1A5;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F1ED;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F1ED;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F1F2;
	__asm        jmp    near ptr 0x0054F296;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F223;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F249;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x32476162;
	__asm        je     near ptr 0x0054F291;
	__asm        push   0x32476162;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F291;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F296;
// LINE 2447:
	__asm        jmp    near ptr 0x0054F5A3;
// LINE 2449:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F406;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F367;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F2EF;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F315;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F35D;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F35D;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F362;
	__asm        jmp    near ptr 0x0054F406;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F393;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F3B9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x426F7750;
	__asm        je     near ptr 0x0054F401;
	__asm        push   0x426F7750;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F401;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F406;
// LINE 2450:
	__asm        jmp    near ptr 0x0054F5A3;
// LINE 2452:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F576;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F4D7;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F45F;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F485;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F4CD;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F4CD;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F4D2;
	__asm        jmp    near ptr 0x0054F576;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F503;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F529;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x48697048;
	__asm        je     near ptr 0x0054F571;
	__asm        push   0x48697048;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F571;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F576;
// LINE 2453:
	__asm        jmp    near ptr 0x0054F5A3;
// LINE 2454:
	__asm        jmp    near ptr 0x0054F5A3;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0054EFBB;
	__asm        cmp    dword ptr [ebp-0x10], 1;
	__asm        je     near ptr 0x0054F12B;
	__asm        cmp    dword ptr [ebp-0x10], 3;
	__asm        je     near ptr 0x0054F29B;
	__asm        jmp    near ptr 0x0054F40B;
// LINE 2455:
	__asm        push   9;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0054F6F8;
// LINE 2457:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F5D6;
	__asm        push   0;
	__asm        push   0xA;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2458:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2460:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F5F9;
	__asm        push   0;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2461:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2463:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F61C;
	__asm        push   0;
	__asm        push   4;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2464:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2466:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F63F;
	__asm        push   0;
	__asm        push   0xB;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2467:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2469:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F662;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2470:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2472:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F685;
	__asm        push   0;
	__asm        push   0x12;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2473:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2475:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F6A8;
	__asm        push   0;
	__asm        push   6;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2476:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2478:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F6CB;
	__asm        push   0;
	__asm        push   7;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2479:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2481:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F6EE;
	__asm        push   0;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2482:
	__asm        jmp    near ptr 0x0054F72C;
// LINE 2483:
	__asm        jmp    near ptr 0x0054F72C;
	__asm        cmp    dword ptr [ebp-0x14], 7;
	__asm        ja     near ptr 0x0054F6D0;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    dword ptr [eax*4+0x54F70C];
	__asm        mov    eax, 0xDB0054F5;
	__asm        cmc;
	__asm        push   esp;
	__asm        add    dh, bh;
	__asm        cmc;
	__asm        push   esp;
	__asm        add    [ecx], ah;
	__asm        not    byte ptr [eax+eax+0x44];
	__asm        not    byte ptr [eax+eax+0x67];
	__asm        not    byte ptr [eax+eax-0x76];
	__asm        not    byte ptr [eax+eax-0x53];
	__asm        (bad);
// LINE 2484:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2486:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F89C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F7FD;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F785;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F7AB;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F7F3;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F7F3;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F7F8;
	__asm        jmp    near ptr 0x0054F89C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F829;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F84F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x0054F897;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F897;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F89C;
// LINE 2487:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054F8BA;
	__asm        push   0;
	__asm        push   9;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2488:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2491:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054FA2A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054F98B;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F913;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F939;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x44675374;
	__asm        je     near ptr 0x0054F981;
	__asm        push   0x44675374;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054F981;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054F986;
	__asm        jmp    near ptr 0x0054FA2A;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x0054F9B7;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0054F9DD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x0054FA25;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0054FA25;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0054FA2A;
// LINE 2492:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x106];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054FA48;
	__asm        push   0;
	__asm        push   0xC;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
// LINE 2493:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2495:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054FA94;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        cmp    dword ptr [eax+0x1C], 0x32444F47;
	__asm        jne    near ptr 0x0054FA87;
	__asm        push   0x44675374;
	__asm        mov    ecx, this;
	__asm        call   0x005520E0;
	__asm        jmp    near ptr 0x0054FA94;
	__asm        push   0x4E6F4D6F;
	__asm        mov    ecx, this;
	__asm        call   0x005520E0;
// LINE 2496:
	__asm        jmp    near ptr 0x0054FAE2;
// LINE 2497:
	__asm        jmp    near ptr 0x0054FAE2;
	__asm        cmp    dword ptr [ebp-0xC], 0xB;
	__asm        ja     near ptr 0x0054FA4D;
	__asm        mov    eax, [ebp-0xC];
	__asm        jmp    dword ptr [eax*4+0x54FAB2];
	__asm        sub    bh, ah;
	__asm        push   esp;
	__asm        add    dh, bh;
	__asm        jmp    short 0x0054FB0D;
	__asm        add    [ebp+ebp*8-0x5B2FFAC], cl;
	__asm        push   esp;
	__asm        add    this-><cYObject+0x02>, cl;
	__asm        push   esp;
	__asm        add    [edx], bl;
	__asm        out    dx, eax;
	__asm        push   esp;
	__asm        add    [ebp+ebp*8-0x1A6FFFAC], cl;
	__asm        push   esp;
	__asm        add    [eax], ch;
	__asm        out    0x54, eax;
	__asm        add    this-><cYObject+0x02>, cl;
	__asm        push   esp;
	__asm        add    [edi+0x310054F8], bh;
	__asm        (bad);
// LINE 2498:
	__asm        jmp    near ptr 0x0054FAE7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0054faee
void cAvatar::ResetView() {
	unsigned char figDir;
	struct Point3D view;
	int32_t yRot;

// LINE 2501:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2506:
	__asm        call   0x004EE8F1;
// LINE 2508:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        mov    eax, ds:[0x6C1318];
	__asm        mov    [ebp-0x2C], eax;
	__asm        fisub  dword ptr [ebp-0x2C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   view.x;
// LINE 2509:
	__asm        mov    eax, ds:[0x6C131C];
	__asm        mov    [ebp-0x30], eax;
	__asm        fild   dword ptr [ebp-0x30];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        mov    [ebp-0x34], eax;
	__asm        fisub  dword ptr [ebp-0x34];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   view.y;
// LINE 2510:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        mov    [ebp-0x38], eax;
	__asm        fild   dword ptr [ebp-0x38];
	__asm        mov    eax, ds:[0x6C1320];
	__asm        mov    [ebp-0x3C], eax;
	__asm        fisub  dword ptr [ebp-0x3C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fst    view.z;
// LINE 2511:
	__asm        fmul   qword ptr ds:[0x593540];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        fld    view.x;
	__asm        fmul   qword ptr ds:[0x593540];
	__asm        call   0x0056EBE8;
	__asm        push   eax;
	__asm        call   0x004D20B1;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004CA7B4;
	__asm        add    esp, 4;
	__asm        mov    yRot, eax;
// LINE 2512:
	__asm        mov    eax, yRot;
	__asm        mov    [ebp-0x40], eax;
	__asm        fild   dword ptr [ebp-0x40];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fcomp  qword ptr ds:[0x593548];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     near ptr 0x0054FBB5;
// LINE 2513:
	__asm        add    yRot, 0xE100000;
// LINE 2517:
	__asm        mov    ebx, 2;
	__asm        mov    eax, yRot;
	__asm        mov    [ebp-0x44], eax;
	__asm        fild   dword ptr [ebp-0x44];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fadd   qword ptr ds:[0x593550];
	__asm        fdiv   qword ptr ds:[0x593558];
	__asm        call   0x0056EBE8;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, al;
	__asm        sub    ebx, ecx;
	__asm        mov    figDir, bl;
// LINE 2521:
	__asm        xor    eax, eax;
	__asm        mov    al, figDir;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2522:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x174], 0;
	__asm        jge    near ptr 0x0054FC1F;
// LINE 2523:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        sub    eax, 4;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2525:
	__asm        call   0x004F8FE2;
// LINE 2526:
	__asm        jmp    near ptr 0x0054FC29;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0054fc2e
void cYObject::SetCellAndLoc(struct Point3d loc, unsigned char x, unsigned char y) {
	short loccellx;
	short loccelly;

// LINE 2535:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2537:
	__asm        mov    eax, loc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    loccellx, ax;
// LINE 2538:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, loc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    loccelly, ax;
// LINE 2549:
	__asm        mov    eax, reinterpret_cast<uint32_t>(loccelly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(loccellx);
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 2551:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2552:
	__asm        lea    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2553:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x0054FCC5;
	__asm        push   0x8C085;
	__asm        push   0x5BB4E8;
	__asm        push   0x9F9;
	__asm        push   0x5BB520;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2554:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x0054FCF2;
// LINE 2555:
	__asm        jmp    near ptr 0x0054FCF7;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0054FD24;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, reinterpret_cast<uint8_t>(loccellx);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, reinterpret_cast<uint8_t>(loccelly);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0054FD41;
// LINE 2556:
	__asm        jmp    near ptr 0x0054FD46;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x0054fd4d
void cYObject::SetCellAndLoc(unsigned char x, unsigned char y, int32_t dx, int32_t dz) {
	struct Point3d loc;

// LINE 2560:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x50;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2561:
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x30000;
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        add    eax, dz;
	__asm        mov    [ebp-0x44], eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        lea    ecx, [ebp-0x40];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054FDBD;
	__asm        lea    eax, [ebp-0x40];
	__asm        lea    ecx, [ebp-0x34];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x34];
	__asm        lea    ecx, [ebp-0x24];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x0054FDEE;
	__asm        lea    eax, [ebp-0x24];
	__asm        lea    ecx, [ebp-0x18];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        lea    eax, [ebp-0x18];
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2563:
	__asm        mov    eax, reinterpret_cast<uint32_t>(y);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(x);
	__asm        push   eax;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054FC2E;
// LINE 2567:
	__asm        jmp    near ptr 0x0054FE3B;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0054fe42
void cYObject::SetMissionType(enum MissionType type) {
	 // Switch table at 0x0054ff24

// LINE 2570:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2571:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0054FE7C;
	__asm        push   0x8C085;
	__asm        push   0x5BB544;
	__asm        push   0xA0B;
	__asm        push   0x5BB588;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2572:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 2573:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 0xFFFE;
// LINE 2574:
	__asm        mov    eax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], ax;
// LINE 2575:
	__asm        mov    eax, type;
	__asm        mov    ax, [eax*2+0x636B98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], ax;
// LINE 2577:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFC], 0xFFFF;
// LINE 2579:
	__asm        mov    eax, type;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x0054FEF4;
// LINE 2585:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 0;
// LINE 2586:
	__asm        jmp    near ptr 0x0054FF2F;
// LINE 2589:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDA], 1;
// LINE 2590:
	__asm        jmp    near ptr 0x0054FF2F;
// LINE 2594:
	__asm        jmp    near ptr 0x0054FF2F;
	__asm        sub    dword ptr [ebp-8], 3;
	__asm        cmp    dword ptr [ebp-8], 0xA;
	__asm        ja     near ptr 0x0054FF2F;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x54FF24];
	__asm        jmp    dword ptr [ecx*4+0x54FF14];
	__asm        int    0xFE;
	__asm        push   esp;
	__asm        add    dh, bl;
	__asm        (bad);
	__asm        add    ch, cl;
	__asm        (bad);
	__asm        add    [edi], ch;
	__asm        call   dword ptr [eax+eax];
	__asm        add    eax, [ebx];
	__asm        add    eax, [ecx];
	__asm        add    [ebx], eax;
	__asm        add    al, [edx];
	__asm        add    al, [edx];
// LINE 2596:
	__asm        cmp    type, 0;
	__asm        jne    near ptr 0x0054FF78;
// LINE 2597:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
// LINE 2598:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xEC], 0;
// LINE 2599:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF6], 0;
// LINE 2600:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF8], 1;
// LINE 2601:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFA], 0;
// LINE 2603:
	__asm        jmp    near ptr 0x0054FF90;
// LINE 2604:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF8], 0;
// LINE 2605:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xFA], 1;
// LINE 2607:
	__asm        cmp    type, 6;
	__asm        jne    near ptr 0x0054FFAB;
// LINE 2608:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xA;
	__asm        jmp    near ptr 0x0054FFAB;
// LINE 2611:
	__asm        jmp    near ptr 0x0054FFB0;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0054ffb7
void cYObject::SetPersonType(enum PersonType type) {
	short count;
	short freqadj;
	short frequnit;
	unsigned long bodyname;
	short faceindex;

// LINE 2614:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2616:
	__asm        mov    count, 0;
// LINE 2617:
	__asm        cmp    type, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00550052;
// LINE 2619:
	__asm        push   0x12;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        mov    type, eax;
// LINE 2621:
	__asm        cmp    type, 0x11;
	__asm        je     near ptr 0x00550015;
	__asm        cmp    type, 0x10;
	__asm        je     near ptr 0x00550015;
	__asm        cmp    type, 0xE;
	__asm        je     near ptr 0x00550015;
	__asm        cmp    type, 0xD;
	__asm        je     near ptr 0x00550015;
	__asm        cmp    type, 0xC;
	__asm        jne    near ptr 0x00550048;
	__asm        push   0x1E;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00550048;
	__asm        mov    ax, count;
	__asm        mov    [ebp-0x18], ax;
	__asm        inc    count;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 5;
	__asm        jge    near ptr 0x00550048;
// LINE 2622:
	__asm        jmp    near ptr 0x0054FFD3;
// LINE 2623:
	__asm        jmp    near ptr 0x00550052;
// LINE 2624:
	__asm        jmp    near ptr 0x0054FFD3;
// LINE 2626:
	__asm        mov    eax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD6], ax;
// LINE 2627:
	__asm        mov    freqadj, 0;
	__asm        mov    frequnit, 0x1E;
// LINE 2628:
	__asm        mov    eax, type;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x005502C0;
// LINE 2630:
	__asm        mov    bodyname, 0x426C6F6E;
// LINE 2631:
	__asm        mov    faceindex, 7;
// LINE 2632:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    freqadj, ax;
// LINE 2633:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2635:
	__asm        mov    bodyname, 0x32626C6F;
// LINE 2636:
	__asm        mov    faceindex, 5;
// LINE 2637:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2638:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2640:
	__asm        mov    bodyname, 0x576F6D61;
// LINE 2641:
	__asm        mov    faceindex, 5;
// LINE 2642:
	__asm        movsx  eax, frequnit;
	__asm        shl    eax, 2;
	__asm        mov    freqadj, ax;
// LINE 2643:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2645:
	__asm        mov    bodyname, 0x32776F6D;
// LINE 2646:
	__asm        mov    faceindex, 7;
// LINE 2647:
	__asm        movsx  eax, frequnit;
	__asm        shl    eax, 2;
	__asm        mov    freqadj, ax;
// LINE 2648:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2650:
	__asm        mov    bodyname, 0x4368696C;
// LINE 2651:
	__asm        mov    faceindex, 4;
// LINE 2652:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        mov    freqadj, ax;
// LINE 2653:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2655:
	__asm        mov    bodyname, 0x356D616E;
// LINE 2656:
	__asm        mov    faceindex, 8;
// LINE 2657:
	__asm        mov    freqadj, 0;
// LINE 2658:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2660:
	__asm        mov    bodyname, 0x6661746D;
// LINE 2661:
	__asm        mov    faceindex, 6;
// LINE 2662:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2663:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2665:
	__asm        mov    bodyname, 0x424C5545;
// LINE 2666:
	__asm        mov    faceindex, 6;
// LINE 2667:
	__asm        movsx  eax, frequnit;
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2668:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2670:
	__asm        mov    bodyname, 0x53554954;
// LINE 2671:
	__asm        mov    faceindex, 9;
// LINE 2672:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2673:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2675:
	__asm        mov    bodyname, 0x53484144;
// LINE 2676:
	__asm        mov    faceindex, 6;
// LINE 2677:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    freqadj, ax;
// LINE 2678:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2680:
	__asm        mov    bodyname, 0x352E356D;
// LINE 2681:
	__asm        mov    faceindex, 4;
// LINE 2682:
	__asm        movsx  eax, frequnit;
	__asm        mov    ecx, eax;
	__asm        add    eax, eax;
	__asm        sub    eax, ecx;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2683:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2685:
	__asm        mov    bodyname, 0x32444F47;
// LINE 2686:
	__asm        mov    faceindex, 6;
// LINE 2687:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*8];
	__asm        mov    freqadj, ax;
// LINE 2688:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2690:
	__asm        mov    bodyname, 0x42616467;
// LINE 2691:
	__asm        mov    faceindex, 4;
// LINE 2692:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*8];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2693:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2695:
	__asm        mov    bodyname, 0x4B6F7070;
// LINE 2696:
	__asm        mov    faceindex, 1;
// LINE 2697:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2698:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2700:
	__asm        mov    bodyname, 0x46697265;
// LINE 2701:
	__asm        mov    faceindex, 2;
// LINE 2702:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2703:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2705:
	__asm        mov    bodyname, 0x4D656469;
// LINE 2706:
	__asm        mov    faceindex, 3;
// LINE 2707:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*2];
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2708:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2710:
	__asm        mov    bodyname, 0x4E657373;
// LINE 2711:
	__asm        mov    faceindex, 4;
// LINE 2712:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2713:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2715:
	__asm        mov    bodyname, 0x436F7777;
// LINE 2716:
	__asm        mov    faceindex, 4;
// LINE 2717:
	__asm        movsx  eax, frequnit;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        neg    eax;
	__asm        mov    freqadj, ax;
// LINE 2718:
	__asm        jmp    near ptr 0x0055031C;
// LINE 2723:
	__asm        push   0x8C085;
	__asm        push   0x5BB5AC;
	__asm        push   0xAA3;
	__asm        push   0x5BB5C0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2724:
	__asm        jmp    near ptr 0x0055031C;
	__asm        cmp    dword ptr [ebp-0x44], 0x11;
	__asm        ja     near ptr 0x0055029F;
	__asm        mov    eax, [ebp-0x44];
	__asm        jmp    dword ptr [eax*4+0x5502D4];
	__asm        jbe    short 0x005502D6;
	__asm        push   ebp;
	__asm        add    [ebx-0x4DFFAB00], dl;
	__asm        add    [ebp], dl;
	__asm        iretd;
	__asm        add    [ebp], dl;
	__asm        in     al, dx;
	__asm        add    [ebp], dl;
	__asm        or     eax, 0x25005501;
	__asm        add    [ebp], edx;
	__asm        dec    eax;
	__asm        add    [ebp], edx;
	__asm        add    [ebp], dx;
	__asm        test   [ecx], eax;
	__asm        push   ebp;
	__asm        add    [edx-0x3BFFAAFF], ah;
	__asm        add    [ebp], edx;
	__asm        add    dl, ds:[ebp];
	__asm        pop    ds;
	__asm        add    dl, [ebp];
	__asm        add    [edx], al;
	__asm        push   ebp;
	__asm        add    cl, ah;
	__asm        add    [ebp], edx;
	__asm        pop    ebp;
	__asm        add    dl, [ebp];
	__asm        jle    short 0x0055031C;
	__asm        push   ebp;
	__asm        (bad);
// LINE 2725:
	__asm        mov    ax, freqadj;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x108], ax;
// LINE 2726:
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jl     near ptr 0x0055034D;
	__asm        cmp    dword ptr [ebp-0x1C], 0x20;
	__asm        jb     near ptr 0x00550366;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BBDA4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x0055037E;
	__asm        mov    eax, [ebp-0x3C];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00550385;
	__asm        mov    dword ptr [ebp-0x28], 0;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x005503A2;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x005503A9;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x005503AE;
	__asm        jmp    near ptr 0x005503B3;
	__asm        jmp    near ptr 0x005503D0;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x005503CB;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x005503D0;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x005503F0;
	__asm        mov    eax, [ebp-0x20];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00550484;
	__asm        jmp    near ptr 0x00550404;
	__asm        jmp    near ptr 0x005503FA;
	__asm        jmp    near ptr 0x00550484;
	__asm        jmp    near ptr 0x00550404;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x00550484;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00550420;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x0055042C;
	__asm        jmp    near ptr 0x0055042C;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0055042C;
	__asm        jmp    near ptr 0x00550431;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x1C];
	__asm        shr    eax, cl;
	__asm        mov    edx, bodyname;
	__asm        mov    cl, [ebp-0x1C];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x0055047F;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00550468;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x0055047A;
	__asm        jmp    near ptr 0x00550474;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x0055047A;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x00550490;
	__asm        jmp    near ptr 0x005503B8;
	__asm        mov    dword ptr [ebp-0x38], 0;
	__asm        jmp    near ptr 0x00550490;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x005504C8;
	__asm        push   0x8C085;
	__asm        push   0x5BBD68;
	__asm        push   0x27A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005504CD;
// LINE 2727:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x005504F9;
	__asm        push   0x8C085;
	__asm        push   0x5BB5E4;
	__asm        push   0xAA7;
	__asm        push   0x5BB5F8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2729:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00550534;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     near ptr 0x00550534;
// LINE 2730:
	__asm        mov    ax, faceindex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9C], ax;
	__asm        jmp    near ptr 0x00550534;
// LINE 2731:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF0];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055055B;
// LINE 2732:
	__asm        push   0xE;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF0], ax;
// LINE 2735:
	__asm        jmp    near ptr 0x00550560;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00550567
void cYObject::DestroyObjects() {
// LINE 2759:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2760:
	__asm        xor    eax, eax;
	__asm        mov    ax, ds:[0x5B8668];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00550691;
// LINE 2763:
// Block start:
	short cnt;
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x0055058F;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x005505E3;
// LINE 2764:
	__asm        movsx  eax, cnt;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        je     near ptr 0x005505DE;
	__asm        movsx  eax, cnt;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x005505DE;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    near ptr 0x005505DE;
// LINE 2765:
	__asm        jmp    near ptr 0x0055058B;
	__asm        mov    word ptr ds:[0x5B8668], 0;
// LINE 2767:
	__asm        mov    ecx, 0x636BB8;
	__asm        call   0x0055C7DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055060B;
	__asm        mov    ecx, 0x636BB8;
	__asm        call   0x00552F5F;
// LINE 2770:
	__asm        cmp    dword ptr ds:[0x635250], 0;
	__asm        je     near ptr 0x0055064E;
	__asm        mov    eax, ds:[0x635250];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x0055064E;
	__asm        mov    ecx, [ebp-0x10];
	__asm        call   0x00560B1E;
	__asm        mov    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00550649;
	__asm        jmp    near ptr 0x0055064E;
// LINE 2771:
	__asm        cmp    dword ptr ds:[0x636B8C], 0;
	__asm        je     near ptr 0x00550691;
	__asm        mov    eax, ds:[0x636B8C];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00550691;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x0056032E;
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055068C;
	__asm        jmp    near ptr 0x00550691;
// LINE 2774:
// Block end:
	__asm        jmp    near ptr 0x00550696;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055069b
void cYObject::Link() {
	struct _CELL_INFO* ncptr;

// LINE 2779:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2780:
	__asm        jmp    near ptr 0x005506AC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x005506D9;
	__asm        push   0x8C085;
	__asm        push   0x5BB61C;
	__asm        push   0xADC;
	__asm        push   0x5BB638;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2782:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00550722;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055071D;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00550752;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00550752;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00550770;
	__asm        jmp    near ptr 0x0055079E;
	__asm        jmp    near ptr 0x00550770;
	__asm        jmp    near ptr 0x00550782;
	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    near ptr 0x0055079E;
	__asm        push   0x8C085;
	__asm        push   0x5BB65C;
	__asm        push   0xADE;
	__asm        push   0x5BB67C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2783:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x89];
	__asm        mov    eax, [ecx+edx*4+0x67ED30];
	__asm        mov    ncptr, eax;
// LINE 2787:
	__asm        mov    eax, ncptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 2788:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, ncptr;
	__asm        mov    [ecx+0x10], eax;
// LINE 2790:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 1;
// LINE 2791:
	__asm        jmp    near ptr 0x005507E7;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005507ec
void cYObject::Unlink() {
	struct _DYOBJ_INST** dyptrptr;
	struct _CELL_INFO* cptr;

// LINE 2794:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2798:
	__asm        jmp    near ptr 0x005507FD;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0055082A;
	__asm        push   0x8C085;
	__asm        push   0x5BB6A0;
	__asm        push   0xAEE;
	__asm        push   0x5BB6BC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2799:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x88];
	__asm        shl    edx, 0xA;
	__asm        mov    eax, [edx+ecx*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 2800:
	__asm        mov    eax, cptr;
	__asm        add    eax, 0x10;
	__asm        mov    dyptrptr, eax;
// LINE 2801:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00550890;
// LINE 2803:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, dyptrptr;
	__asm        cmp    eax, [ecx];
	__asm        jne    near ptr 0x00550883;
// LINE 2805:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, dyptrptr;
	__asm        mov    [ecx], eax;
// LINE 2806:
	__asm        jmp    near ptr 0x00550890;
// LINE 2808:
	__asm        mov    eax, dyptrptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptrptr, eax;
// LINE 2809:
	__asm        jmp    near ptr 0x00550856;
// LINE 2812:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 0;
// LINE 2813:
	__asm        jmp    near ptr 0x0055089E;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005508a3
class cAvatar* cAvatar::MakeAvatar() {
	class cAvatar* avatar;
	struct Point3d p;

// LINE 2817:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x5509B2;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2818:
	__asm        mov    p.x, 0;
	__asm        mov    p.y, 0;
	__asm        mov    p.z, 0;
// LINE 2819:
	__asm        push   0x180;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x0055097E;
	__asm        lea    eax, p.x;
	__asm        lea    ecx, [ebp-0x30];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x34], eax;
	__asm        push   0x7D00;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x636B8C];
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x00550D4D;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax], 0x5935A8;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    dword ptr [eax+0x14], 0x593590;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    word ptr [eax+0x9C], 0;
	__asm        jmp    near ptr 0x0055095C;
	__asm        jmp    near ptr 0x00550961;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00550979;
_L56436:
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x005518AD;
	__asm        ret;
	__asm        jmp    near ptr 0x00550985;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    avatar, eax;
// LINE 2820:
	__asm        mov    eax, avatar;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, avatar;
	__asm        call   dword ptr [eax+0x18];
// LINE 2821:
	__asm        mov    eax, avatar;
	__asm        jmp    near ptr 0x005509BC;
// LINE 2822:
_L56432:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L56431:
	__asm        mov    eax, 0x595E00;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005509cb
short cYObject::MakeNewObject(short type, struct Point3d loc, class Behavior* behavior) {
	short id;

// LINE 2825:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x550B17;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2826:
	__asm        xor    eax, eax;
	__asm        mov    ax, ds:[0x5B8668];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00550A15;
	__asm        push   0x8C085;
	__asm        push   0x5BB6E0;
	__asm        push   0xB0A;
	__asm        push   0x5BB6F8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2828:
	__asm        mov    id, 0;
	__asm        jmp    near ptr 0x00550A24;
	__asm        inc    id;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00550A57;
// LINE 2829:
	__asm        movsx  eax, id;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        je     near ptr 0x00550A4D;
	__asm        jmp    near ptr 0x00550A20;
// LINE 2830:
	__asm        jmp    near ptr 0x00550A52;
	__asm        jmp    near ptr 0x00550A57;
// LINE 2831:
	__asm        jmp    near ptr 0x00550A20;
// LINE 2833:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        je     near ptr 0x00550AE5;
// LINE 2834:
// Block start:
	class cYObject** newObj;
	__asm        movsx  eax, id;
	__asm        lea    eax, [eax*4+0x636D40];
	__asm        mov    newObj, eax;
// LINE 2835:
	__asm        push   0x168;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00550ABB;
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, behavior;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(type);
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x00550D4D;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00550AC2;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    ecx, newObj;
	__asm        mov    [ecx], eax;
// LINE 2836:
	__asm        mov    eax, newObj;
	__asm        mov    ecx, newObj;
	__asm        mov    ecx, [ecx];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax];
	__asm        call   dword ptr [edx+0x18];
// LINE 2837:
// Block end:
	__asm        jmp    near ptr 0x00550B01;
// LINE 2838:
	__asm        push   0x8C085;
	__asm        push   0x5BB71C;
	__asm        push   0xB16;
	__asm        push   0x5BB738;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2840:
	__asm        mov    ax, id;
	__asm        jmp    near ptr 0x00550B21;
// LINE 2841:
_L56449:
	__asm        mov    eax, [ebp-0x18];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        ret;
_L56448:
	__asm        mov    eax, 0x595E30;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00550b30
void cYObject::InitForEngine(short id) {
	struct VRFaceInfo finfo;
	int32_t face;

// LINE 2844:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2845:
	__asm        push   0x16;
	__asm        push   1;
	__asm        call   0x004D4B80;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 2846:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2C], 0;
	__asm        jne    near ptr 0x00550B77;
	__asm        push   0x8C085;
	__asm        push   0x5BB75C;
	__asm        push   0xB1E;
	__asm        push   0x5BB770;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2848:
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2849:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2850:
	__asm        mov    eax, ds:[0x5B4780];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 2853:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2855:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 2856:
	__asm        cmp    finfo.Plotter, 0x16;
	__asm        jne    near ptr 0x00550BF8;
// LINE 2857:
	__asm        movsx  eax, id;
	__asm        mov    finfo.Bitmap, eax;
// LINE 2858:
	__asm        and    finfo.Attribute, 0x7FFFFFFF;
// LINE 2859:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 2862:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x30], 8;
// LINE 2863:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
// LINE 2864:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x38], 6;
// LINE 2866:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2869:
	__asm        jmp    near ptr 0x00550C29;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x00550c30
void cYObject::KillObject(short id) {
	class cYObject* obj;

// LINE 2872:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 2873:
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00550C55;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00550CD1;
	__asm        movsx  eax, id;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00550C6E;
	__asm        movsx  eax, id;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00550C8A;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00550CB8;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, id;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00550CD1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 2874:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00550CF7;
	__asm        push   0x8C085;
	__asm        push   0x5BB794;
	__asm        push   0xB3A;
	__asm        push   0x5BB7B4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2875:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00550D06;
	__asm        jmp    near ptr 0x00550D48;
// LINE 2877:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        mov    dword ptr [eax*4+0x636D40], 0;
// LINE 2879:
	__asm        mov    eax, obj;
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00550D43;
	__asm        push   1;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-8];
	__asm        call   dword ptr [eax+8];
	__asm        jmp    near ptr 0x00550D43;
// LINE 2880:
	__asm        jmp    near ptr 0x00550D48;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00550d4d
void cYObject::cYObject(short type, class Behavior* pBehavior, struct Point3d loc, short id) {
	short cnt;

// LINE 2885:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x550EFD;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC0;
	__asm        push   eax;
	__asm        mov    eax, pBehavior;
	__asm        push   eax;
	__asm        movsx  eax, type;
	__asm        mov    ax, [eax*2+0x636B98];
	__asm        push   eax;
	__asm        movsx  eax, type;
	__asm        mov    ax, [eax*2+0x6361C0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CB10;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x14;
	__asm        call   0x005609D0;
	__asm        mov    byte ptr [ebp-4], 1;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5935E0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x5935C8;
// LINE 2886:
	__asm        mov    ax, type;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15A], ax;
// LINE 2888:
	__asm        lea    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2891:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x130], 0;
// LINE 2893:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00550E0B;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 0x30;
	__asm        jge    near ptr 0x00550E2E;
// LINE 2894:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, this;
	__asm        mov    word ptr [ecx+eax*2+0xD0], 0;
	__asm        jmp    near ptr 0x00550E07;
// LINE 2895:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
// LINE 2896:
	__asm        mov    cnt, 0;
	__asm        jmp    near ptr 0x00550E49;
	__asm        inc    cnt;
	__asm        movsx  eax, cnt;
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x00550E6D;
// LINE 2897:
	__asm        movsx  eax, cnt;
	__asm        mov    ecx, this;
	__asm        mov    dword ptr [ecx+eax*4+0x130], 0;
	__asm        jmp    near ptr 0x00550E45;
// LINE 2899:
	__asm        mov    eax, pBehavior;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB4], eax;
// LINE 2900:
	__asm        mov    eax, ds:[0x5B8684];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB8], eax;
// LINE 2901:
	__asm        mov    eax, this;
	__asm        mov    ds:[0x5B8684], eax;
// LINE 2905:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x20], 0;
// LINE 2907:
	__asm        mov    ax, id;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x32], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x32];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], ax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBC], ax;
// LINE 2911:
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00550B30;
// LINE 2912:
	__asm        jmp    near ptr 0x00550ED9;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        jmp    near ptr 0x00550F07;
_L56469:
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x14;
	__asm        call   0x00560B1E;
	__asm        ret;
_L56468:
	__asm        mov    ecx, this;
	__asm        call   0x0055CC2A;
	__asm        ret;
_L56467:
	__asm        mov    eax, 0x595E58;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    fs:[0], ecx;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00550f18
void cAvatar::Reset() {
// LINE 2915:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2916:
	__asm        mov    ecx, this;
	__asm        call   0x00550F9F;
// LINE 2919:
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 2921:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0;
	__asm        jmp    near ptr 0x00550F47;
// LINE 2922:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x168], 0;
// LINE 2923:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x16C], 0;
// LINE 2924:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x170], 0x10000;
// LINE 2925:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x174], 0;
// LINE 2926:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x178], 0;
// LINE 2927:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x17C], 0;
// LINE 2928:
	__asm        jmp    near ptr 0x00550F9A;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00550f9f
void cYObject::Reset() {
// LINE 2931:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2932:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x98], 0;
// LINE 2933:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x90], 0;
// LINE 2934:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x164], 0x3F800000;
// LINE 2935:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
// LINE 2937:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0xFFFFFF9C;
// LINE 2939:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF2], 1;
// LINE 2940:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x106], 1;
// LINE 2941:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF4], 0;
// LINE 2942:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
// LINE 2943:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
// LINE 2945:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD4], 6;
// LINE 2946:
	__asm        push   8;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 2947:
	__asm        push   0xFFFFFFFF;
	__asm        mov    ecx, this;
	__asm        call   0x0054FFB7;
// LINE 2949:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005512DC;
// LINE 2950:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055108E;
	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00551093;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x005510C0;
	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00551109;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00551104;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00551139;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00551139;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00551157;
	__asm        jmp    near ptr 0x00551185;
	__asm        jmp    near ptr 0x00551157;
	__asm        jmp    near ptr 0x00551169;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    near ptr 0x00551185;
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055122F;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055120A;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x005511E5;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x005511F8;
	__asm        jmp    near ptr 0x005511F0;
	__asm        mov    word ptr [ebp-8], 0xFFFF;
	__asm        jmp    near ptr 0x005511F8;
	__asm        mov    ax, [ebp-0xC];
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x005511FD;
	__asm        movsx  eax, word ptr [ebp-8];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055120F;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x00551234;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        jne    near ptr 0x00551282;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x00551290;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x00551295;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005512B3;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x005512CF;
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x005507EC;
	__asm        jmp    near ptr 0x005512DC;
// LINE 2952:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xBC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], ax;
// LINE 2953:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xDC], 0;
// LINE 2954:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0;
// LINE 2956:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0054FE42;
// LINE 2957:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00551370;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 5;
	__asm        je     near ptr 0x00551370;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 7;
	__asm        je     near ptr 0x00551370;
	__asm        push   0x8C085;
	__asm        push   0x5BBB34;
	__asm        push   0x2BD;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00551375;
// LINE 2958:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x22], 0;
// LINE 2960:
	__asm        jmp    near ptr 0x00551383;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551388
void cYObject::Draw(struct VRBlit* blit) {
	double nearvar;
	double camPhi;
	struct Point3d screenPt;
	char text[20];
	double midvar;
	float psiOff;
	double camPsi;
	double farvar;
	float phiOff;
	double farlimvar;
	unsigned short highres;
	struct BodyDebugInfo bdi;

// LINE 2963:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2968:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005513CB;
	__asm        push   0x8C085;
	__asm        push   0x5BB7D8;
	__asm        push   0xB98;
	__asm        push   0x5BB7FC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2969:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005513E5;
// LINE 2970:
	__asm        jmp    near ptr 0x00551813;
// LINE 2976:
	__asm        cmp    dword ptr ds:[0x598EBC], 0x10;
	__asm        jne    near ptr 0x005513FD;
	__asm        mov    highres, 1;
	__asm        jmp    near ptr 0x00551403;
	__asm        mov    highres, 0;
// LINE 2978:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x00551432;
	__asm        push   0x8C085;
	__asm        push   0x5BB820;
	__asm        push   0xBA2;
	__asm        push   0x5BB840;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2979:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0055144A;
// LINE 2983:
	__asm        jmp    near ptr 0x00551813;
// LINE 2985:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        sar    eax, 0xC;
	__asm        mov    screenPt.x, eax;
// LINE 2986:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        sar    eax, 0xC;
	__asm        mov    screenPt.y, eax;
// LINE 2987:
	__asm        mov    eax, blit;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+8];
	__asm        sar    eax, 0x10;
	__asm        mov    screenPt.z, eax;
// LINE 2988:
	__asm        fld    qword ptr ds:[0x593568];
	__asm        mov    eax, screenPt.z;
	__asm        mov    [ebp-0x88], eax;
	__asm        fidiv  dword ptr [ebp-0x88];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x164];
// LINE 2989:
	__asm        test   reinterpret_cast<uint32_t>(highres), 0xFFFF;
	__asm        je     near ptr 0x005514C2;
// LINE 2990:
	__asm        mov    eax, this;
	__asm        fld    dword ptr [eax+0x164];
	__asm        fmul   dword ptr ds:[0x593570];
	__asm        mov    eax, this;
	__asm        fstp   dword ptr [eax+0x164];
// LINE 2994:
	__asm        mov    eax, ds:[0x6BF1AC];
	__asm        mov    [ebp-0x8C], eax;
	__asm        fild   dword ptr [ebp-0x8C];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   camPsi;
// LINE 2995:
	__asm        mov    eax, ds:[0x6BF1B0];
	__asm        mov    [ebp-0x90], eax;
	__asm        fild   dword ptr [ebp-0x90];
	__asm        fdiv   qword ptr ds:[0x593540];
	__asm        fstp   camPhi;
// LINE 2996:
	__asm        fld    camPsi;
	__asm        fmul   qword ptr ds:[0x593578];
	__asm        fstp   psiOff;
// LINE 2997:
	__asm        fld    camPhi;
	__asm        fmul   qword ptr ds:[0x593578];
	__asm        fsubr  dword ptr ds:[0x593580];
	__asm        fstp   phiOff;
// LINE 2999:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        mov    [ebp-0x94], eax;
	__asm        fild   dword ptr [ebp-0x94];
	__asm        fmul   qword ptr ds:[0x593588];
	__asm        fadd   psiOff;
	__asm        fstp   psiOff;
// LINE 3004:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 0xFFFF;
// LINE 3006:
	__asm        mov    eax, ds:[0x5B8650];
	__asm        mov    [ebp-0x98], eax;
	__asm        fild   dword ptr [ebp-0x98];
	__asm        fstp   farlimvar;
// LINE 3007:
	__asm        mov    eax, ds:[0x5B8654];
	__asm        mov    [ebp-0x9C], eax;
	__asm        fild   dword ptr [ebp-0x9C];
	__asm        fstp   farvar;
// LINE 3008:
	__asm        mov    eax, ds:[0x5B8658];
	__asm        mov    [ebp-0xA0], eax;
	__asm        fild   dword ptr [ebp-0xA0];
	__asm        fstp   midvar;
// LINE 3009:
	__asm        mov    eax, ds:[0x5B865C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        fild   dword ptr [ebp-0xA4];
	__asm        fstp   nearvar;
// LINE 3011:
	__asm        mov    eax, ds:[0x5B8650];
	__asm        cmp    screenPt.z, eax;
	__asm        jle    near ptr 0x005515B0;
// LINE 3012:
	__asm        jmp    near ptr 0x00551813;
// LINE 3013:
	__asm        jmp    near ptr 0x0055161B;
	__asm        mov    eax, ds:[0x5B8654];
	__asm        cmp    screenPt.z, eax;
	__asm        jle    near ptr 0x005515D2;
// LINE 3014:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 4;
// LINE 3015:
	__asm        jmp    near ptr 0x0055161B;
	__asm        mov    eax, ds:[0x5B8658];
	__asm        cmp    screenPt.z, eax;
	__asm        jle    near ptr 0x005515F4;
// LINE 3016:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 2;
// LINE 3017:
	__asm        jmp    near ptr 0x0055161B;
	__asm        mov    eax, ds:[0x5B865C];
	__asm        cmp    screenPt.z, eax;
	__asm        jle    near ptr 0x00551616;
// LINE 3018:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE6], 1;
// LINE 3019:
	__asm        jmp    near ptr 0x0055161B;
// LINE 3020:
	__asm        jmp    near ptr 0x00551813;
// LINE 3022:
	__asm        lea    eax, phiOff;
	__asm        push   eax;
	__asm        call   0x00562BDB;
	__asm        add    esp, 4;
// LINE 3023:
	__asm        lea    eax, psiOff;
	__asm        push   eax;
	__asm        call   0x00562BDB;
	__asm        add    esp, 4;
// LINE 3024:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00551665;
	__asm        push   0x8C085;
	__asm        push   0x5BB864;
	__asm        push   0xBD0;
	__asm        push   0x5BB888;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 3025:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        cmp    eax, 0xB;
	__asm        jl     near ptr 0x00551697;
	__asm        push   0x8C085;
	__asm        push   0x5BB8AC;
	__asm        push   0xBD1;
	__asm        push   0x5BB8B4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x9C];
	__asm        mov    ax, [eax*2+0x6376B0];
	__asm        mov    [ebp-0x7C], ax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x90];
	__asm        mov    [ebp-0x80], eax;
// LINE 3026:
	__asm        mov    ax, [ebp-0x7C];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+0x30], ax;
	__asm        jmp    near ptr 0x005516CF;
// LINE 3028:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xE6];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x164];
	__asm        push   eax;
	__asm        mov    eax, screenPt.y;
	__asm        push   eax;
	__asm        mov    eax, screenPt.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        push   eax;
	__asm        mov    eax, psiOff;
	__asm        push   eax;
	__asm        mov    eax, phiOff;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00561611;
// LINE 3033:
	__asm        mov    eax, screenPt.x;
	__asm        mov    bdi.screenx, eax;
// LINE 3034:
	__asm        mov    eax, screenPt.y;
	__asm        mov    bdi.screeny, eax;
// LINE 3035:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        push   0x5BB8D8;
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 3036:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005517A7;
// LINE 3037:
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        push   eax;
	__asm        push   0x5BB8DC;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0x14;
// LINE 3038:
	__asm        jmp    near ptr 0x005517BC;
// LINE 3039:
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        push   0x5BB8E8;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0xC;
// LINE 3040:
	__asm        movsx  eax, word ptr ds:[0x5B86A0];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x005517E8;
	__asm        push   0x8C085;
	__asm        push   0x5BB8EC;
	__asm        push   0xBE0;
	__asm        push   0x5BB8F4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 3041:
	__asm        lea    esi, bdi.screenx;
	__asm        movsx  eax, word ptr ds:[0x5B86A0];
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        lea    edi, [eax*4+0x6356D0];
	__asm        mov    ecx, 7;
	__asm        rep movsd;
	__asm        inc    word ptr ds:[0x5B86A0];
// LINE 3044:
	__asm        jmp    near ptr 0x00551813;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055181a
void BodyDrawDebugInfo(class CBackBuffer* buf) {
// LINE 3050:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3051:
	__asm        push   0x91;
	__asm        call   0x00432226;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055189A;
// LINE 3052:
// Block start:
	short count;
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00551847;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        movsx  ecx, word ptr ds:[0x5B86A0];
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055189A;
// LINE 3053:
// Block start:
	struct BodyDebugInfo bdi;
	__asm        movsx  eax, count;
	__asm        mov    ecx, eax;
	__asm        shl    eax, 3;
	__asm        sub    eax, ecx;
	__asm        lea    edi, bdi.screenx;
	__asm        lea    esi, [eax*4+0x6356D0];
	__asm        mov    ecx, 7;
	__asm        rep movsd;
// LINE 3054:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, bdi.screeny;
	__asm        push   eax;
	__asm        lea    eax, bdi.screenx;
	__asm        push   eax;
	__asm        push   0;
	__asm        lea    eax, bdi.text[0];
	__asm        push   eax;
	__asm        mov    eax, buf;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, buf;
	__asm        call   dword ptr [eax+0x4C];
// LINE 3055:
// Block end:
	__asm        jmp    near ptr 0x00551843;
// LINE 3057:
// Block end:
	__asm        mov    word ptr ds:[0x5B86A0], 0;
// LINE 3058:
	__asm        jmp    near ptr 0x005518A8;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005518ad
void cYObject::~cYObject() {
	unsigned short found;
	class cYObject** srch;

// LINE 3062:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   0xFFFFFFFF;
	__asm        push   0x5519BE;
	__asm        mov    eax, fs:[0];
	__asm        push   eax;
	__asm        mov    fs:[0], esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5935E0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x5935C8;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        mov    byte ptr [ebp-4], 1;
// LINE 3063:
	__asm        mov    found, 0;
// LINE 3064:
	__asm        mov    srch, 0x5B8684;
	__asm        jmp    near ptr 0x0055190B;
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0xB8;
	__asm        mov    srch, eax;
	__asm        mov    eax, srch;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00551945;
// LINE 3065:
	__asm        mov    eax, srch;
	__asm        mov    ecx, this;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00551940;
// LINE 3067:
	__asm        mov    eax, srch;
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, srch;
	__asm        mov    [ecx], eax;
// LINE 3068:
	__asm        mov    found, 1;
// LINE 3069:
	__asm        jmp    near ptr 0x00551945;
// LINE 3072:
	__asm        jmp    near ptr 0x005518FE;
	__asm        test   reinterpret_cast<uint32_t>(found), 0xFFFF;
	__asm        jne    near ptr 0x0055196E;
	__asm        push   0x8C085;
	__asm        push   0x5BB918;
	__asm        push   0xC00;
	__asm        push   0x5BB944;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 3073:
	__asm        jmp    near ptr 0x00551973;
	__asm        mov    byte ptr [ebp-4], 0;
	__asm        call   0x0055198D;
	__asm        mov    dword ptr [ebp-4], 0xFFFFFFFF;
	__asm        call   0x005519B5;
	__asm        jmp    near ptr 0x005519C8;
_L56643:
	__asm        cmp    this, 0;
	__asm        je     near ptr 0x005519A5;
	__asm        mov    eax, this;
	__asm        add    eax, 0x14;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x005519AC;
	__asm        mov    dword ptr [ebp-0x18], 0;
	__asm        mov    ecx, [ebp-0x18];
	__asm        call   0x00560B1E;
	__asm        ret;
_L56642:
	__asm        mov    ecx, this;
	__asm        call   0x0055CC2A;
	__asm        ret;
_L56641:
	__asm        mov    eax, 0x595E88;
	__asm        jmp    near ptr 0x0056F590;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    fs:[0], eax;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005519d6
void S3PersonTweakInit() {
	int32_t * pvals[10];

// LINE 3080:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3083:
	__asm        mov    pvals[0], 0x5B8678;
// LINE 3084:
	__asm        mov    pvals[1], 0x5B867C;
// LINE 3085:
	__asm        mov    pvals[2], 0x5B8650;
// LINE 3086:
	__asm        mov    pvals[3], 0x5B8654;
// LINE 3087:
	__asm        mov    pvals[4], 0x5B8658;
// LINE 3088:
	__asm        mov    pvals[5], 0x5B865C;
// LINE 3089:
	__asm        mov    pvals[6], 0x5B86A4;
// LINE 3091:
	__asm        push   0x5BB968;
	__asm        push   7;
	__asm        lea    eax, pvals[0];
	__asm        push   eax;
	__asm        call   0x004C9AD0;
	__asm        add    esp, 0xC;
// LINE 3092:
	__asm        jmp    near ptr 0x00551A28;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551a2d
void UpdateFigureVals() {
// LINE 3095:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3096:
	__asm        jmp    near ptr 0x00551A38;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551a3d
void cAvatar::RotateMatrixAndYawForEngine() {
	int32_t matrix[4][4];

// LINE 3099:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x44;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 3102:
	__asm        push   0xF0000;
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x178];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x17C], eax;
// LINE 3104:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17C], 0xE100000;
	__asm        jle    near ptr 0x00551A9D;
// LINE 3105:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x17C], 0xE100000;
// LINE 3106:
	__asm        jmp    near ptr 0x00551ABA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x17C], 0;
	__asm        jge    near ptr 0x00551ABA;
// LINE 3107:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x17C], 0xE100000;
// LINE 3110:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x17C];
	__asm        push   eax;
	__asm        lea    eax, matrix[0][0];
	__asm        push   eax;
	__asm        call   0x004F955F;
	__asm        add    esp, 0x10;
// LINE 3111:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, matrix[0][0];
	__asm        push   eax;
	__asm        call   0x004D8C2E;
	__asm        add    esp, 8;
// LINE 3112:
	__asm        jmp    near ptr 0x00551AEC;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551af1
int32_t S3PUtilsGetDir(int32_t orgx, int32_t orgy, int32_t destx, int32_t desty) {
	int32_t deltay;
	short dir;
	int32_t deltax;
	int32_t absy;
	int32_t absx;

// LINE 3116:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3119:
	__asm        mov    eax, destx;
	__asm        sub    eax, orgx;
	__asm        mov    deltax, eax;
// LINE 3120:
	__asm        mov    eax, desty;
	__asm        sub    eax, orgy;
	__asm        mov    deltay, eax;
// LINE 3122:
	__asm        cmp    deltax, 0;
	__asm        jge    near ptr 0x00551B23;
	__asm        mov    eax, deltax;
	__asm        neg    eax;
	__asm        mov    absx, eax;
// LINE 3123:
	__asm        jmp    near ptr 0x00551B29;
	__asm        mov    eax, deltax;
	__asm        mov    absx, eax;
// LINE 3124:
	__asm        cmp    deltay, 0;
	__asm        jge    near ptr 0x00551B40;
	__asm        mov    eax, deltay;
	__asm        neg    eax;
	__asm        mov    absy, eax;
// LINE 3125:
	__asm        jmp    near ptr 0x00551B46;
	__asm        mov    eax, deltay;
	__asm        mov    absy, eax;
// LINE 3127:
	__asm        mov    eax, absx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, absy;
	__asm        jle    near ptr 0x00551B75;
// LINE 3129:
	__asm        cmp    deltax, 0;
	__asm        jle    near ptr 0x00551B6A;
	__asm        mov    dir, 2;
// LINE 3130:
	__asm        jmp    near ptr 0x00551B70;
	__asm        mov    dir, 6;
// LINE 3132:
	__asm        jmp    near ptr 0x00551BE9;
	__asm        mov    eax, absy;
	__asm        sar    eax, 1;
	__asm        cmp    eax, absx;
	__asm        jle    near ptr 0x00551BA4;
// LINE 3134:
	__asm        cmp    deltay, 0;
	__asm        jle    near ptr 0x00551B99;
	__asm        mov    dir, 4;
// LINE 3135:
	__asm        jmp    near ptr 0x00551B9F;
	__asm        mov    dir, 0;
// LINE 3138:
	__asm        jmp    near ptr 0x00551BE9;
	__asm        cmp    deltax, 0;
	__asm        jle    near ptr 0x00551BCE;
// LINE 3140:
	__asm        cmp    deltay, 0;
	__asm        jge    near ptr 0x00551BC3;
	__asm        mov    dir, 1;
// LINE 3141:
	__asm        jmp    near ptr 0x00551BC9;
	__asm        mov    dir, 3;
// LINE 3143:
	__asm        jmp    near ptr 0x00551BE9;
// LINE 3145:
	__asm        cmp    deltay, 0;
	__asm        jge    near ptr 0x00551BE3;
	__asm        mov    dir, 7;
// LINE 3146:
	__asm        jmp    near ptr 0x00551BE9;
	__asm        mov    dir, 5;
// LINE 3148:
	__asm        movsx  eax, dir;
	__asm        jmp    near ptr 0x00551BF2;
// LINE 3149:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551bf7
int32_t S3PUtilsGetAlt(int32_t x, int32_t y, int32_t z) {
	int32_t normy;
	int32_t normx;
	struct _CELL_INFO* cptr;
	int32_t alt;
	int32_t objy;
	struct _STOBJ_INST* stobj;
	int32_t color;
	int32_t maxobjy;
	int32_t normz;

// LINE 3152:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3159:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, z;
	__asm        shr    eax, 0x16;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, x;
	__asm        add    ecx, 0x20000000;
	__asm        shr    ecx, 0x16;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 3161:
	__asm        cmp    cptr, 0;
	__asm        jne    near ptr 0x00551C50;
	__asm        push   0;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00518A8C;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00551D31;
// LINE 3163:
	__asm        mov    eax, x;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normx, eax;
// LINE 3164:
	__asm        mov    eax, z;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normz, eax;
// LINE 3165:
	__asm        mov    eax, y;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normy, eax;
// LINE 3167:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 3168:
	__asm        mov    objy, 0;
// LINE 3169:
	__asm        mov    maxobjy, 0;
// LINE 3170:
	__asm        cmp    stobj, 0;
	__asm        je     near ptr 0x00551CF5;
// LINE 3172:
	__asm        mov    color, 0x200;
// LINE 3173:
	__asm        push   0;
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, color;
	__asm        push   eax;
	__asm        mov    eax, normz;
	__asm        push   eax;
	__asm        mov    eax, normy;
	__asm        push   eax;
	__asm        mov    eax, normx;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D2B28;
	__asm        add    esp, 0x20;
	__asm        mov    objy, eax;
// LINE 3174:
	__asm        mov    eax, objy;
	__asm        cmp    maxobjy, eax;
	__asm        jge    near ptr 0x00551CE8;
// LINE 3175:
	__asm        mov    eax, objy;
	__asm        mov    maxobjy, eax;
// LINE 3176:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 3177:
	__asm        jmp    near ptr 0x00551C9D;
// LINE 3182:
	__asm        cmp    maxobjy, 0;
	__asm        jne    near ptr 0x00551D19;
// LINE 3183:
	__asm        push   0;
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00518A8C;
	__asm        add    esp, 0xC;
	__asm        mov    alt, eax;
// LINE 3184:
	__asm        jmp    near ptr 0x00551D29;
// LINE 3185:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, maxobjy;
	__asm        mov    alt, eax;
// LINE 3187:
	__asm        mov    eax, alt;
	__asm        jmp    near ptr 0x00551D31;
// LINE 3188:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00551d36
void FrameInit() {
// LINE 3196:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 3205:
	__asm        cmp    dword ptr ds:[0x598EBC], 0x10;
	__asm        jne    near ptr 0x00551D6E;
// LINE 3207:
	__asm        mov    eax, ds:[0x598EF4];
	__asm        mov    ds:[0x5BEF28], eax;
// LINE 3208:
	__asm        mov    eax, ds:[0x598EE8];
	__asm        dec    eax;
	__asm        mov    ds:[0x5BEF2C], eax;
// LINE 3209:
	__asm        mov    eax, ds:[0x598EEC];
	__asm        dec    eax;
	__asm        mov    ds:[0x5BEF30], eax;
// LINE 3211:
	__asm        jmp    near ptr 0x00551D8E;
// LINE 3213:
	__asm        mov    eax, ds:[0x598ED4];
	__asm        mov    ds:[0x5BEF28], eax;
// LINE 3214:
	__asm        mov    eax, ds:[0x598EC8];
	__asm        dec    eax;
	__asm        mov    ds:[0x5BEF2C], eax;
// LINE 3215:
	__asm        mov    eax, ds:[0x598ECC];
	__asm        dec    eax;
	__asm        mov    ds:[0x5BEF30], eax;
// LINE 3218:
	__asm        jmp    near ptr 0x00551D93;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}



// Contribution: 1:00150da0-00150dd8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551da0
// FlatResFile::`scalar deleting destructor'



// Contribution: 1:00150de0-00150eb7 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150ec0-00150f3f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551ec0
// ResFile::`scalar deleting destructor'



// Contribution: 1:00150f40-00150f9e Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551f40
 ResFile::~ResFile() {
}



// Contribution: 1:00150fa0-00150fba Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00150fc0-00150ff8 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00551fc0
// cYObject::`scalar deleting destructor'



// Contribution: 1:00151000-00151038 Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x00552000
// vector<char>::~vector<char>



// Contribution: 1:00151040-001510d6 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001510e0-0015118f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151190-00151369 Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151370-0015138f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151390-001513af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513b0-001513cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513d0-001513ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001513f0-0015140f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151410-0015142f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151430-0015144f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151450-0015146f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151470-0015148f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151490-001514af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514b0-001514cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514d0-001514ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001514f0-0015150f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151510-0015152f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151530-0015154f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151550-0015156f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151570-0015158f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151590-001515af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515b0-001515cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515d0-001515ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001515f0-0015160f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151610-0015162f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151630-0015164f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151650-0015166f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151670-0015168f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151690-001516af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516b0-001516cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516d0-001516ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001516f0-0015170f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151710-0015172f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151730-0015174f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151750-0015176f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151770-0015178f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151790-001517af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517b0-001517cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517d0-001517ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001517f0-0015180f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151810-0015182f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151830-0015184f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151850-0015186f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151870-0015188f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151890-001518af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518b0-001518cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518d0-001518ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001518f0-0015190f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151910-0015192f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151930-0015194f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151950-0015196f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151970-0015198f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151990-001519af Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519b0-001519cf Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519d0-001519ef Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:001519f0-00151a0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a10-00151a2f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a30-00151a4f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a50-00151a6f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a70-00151a8f Module: 200, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00151a90-00151b0f Module: 200, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00552a90
// cAvatar::`scalar deleting destructor'



// Contribution: 2:00004508-00004517 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593508
// ??_7FlatResFile@@6B@


// Contribution: 2:00004518-00004527 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593518
// ??_7ResFile@@6B@


// Contribution: 2:00004528-0000458f Module: 200, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00004590-000045a3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593590
// ??_7cAvatar@@6BYObjLang@@@


// Contribution: 2:000045a8-000045c3 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935a8
// ??_7cAvatar@@6BTreeSim@@@


// Contribution: 2:000045c8-000045db Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935c8
// ??_7cYObject@@6BYObjLang@@@


// Contribution: 2:000045e0-000045fb Module: 200, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005935e0
// ??_7cYObject@@6BTreeSim@@@


// Contribution: 2:00006d38-00006eb7 Module: 200, 8 byte alignment, initialized_data, read, 


// Contribution: 2:00006eb8-00006edf Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006ee0-00006f07 Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 2:00006f08-00006f2f Module: 200, 8 byte alignment, initialized_data, (comdat), read, 


// Contribution: 3:000000b0-000000bb Module: 200, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x005970b0
// $S76
// LOCAL: COPTER_D 0x005970b4
// $S82
// LOCAL: COPTER_D 0x005970b8
// $S87


// Contribution: 3:00021644-00024974 Module: 200, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b8644
// gPersonBeamingSlices
// GLOBAL: COPTER_D 0x005b8648
// gPersonBeamingForwardWeight
// GLOBAL: COPTER_D 0x005b864c
// gPersonBeamingSlicesSlice
// GLOBAL: COPTER_D 0x005b8650
// gFarLimit
// GLOBAL: COPTER_D 0x005b8654
// gFarBoundary
// GLOBAL: COPTER_D 0x005b8658
// gMidBoundary
// GLOBAL: COPTER_D 0x005b865c
// gNearBoundary
// GLOBAL: COPTER_D 0x005b8660
// gNearLimit
// GLOBAL: COPTER_D 0x005b8664
// CopterDir
// GLOBAL: COPTER_D 0x005b8668
// cYObject::sInited
// GLOBAL: COPTER_D 0x005b866c
// cYObject::sAllAmbientStarted
// GLOBAL: COPTER_D 0x005b8670
// cYObject::sNumMissionAwake
// GLOBAL: COPTER_D 0x005b8674
// cYObject::sNumAmbientAwake
// GLOBAL: COPTER_D 0x005b8678
// cYObject::sAmbientTopOff
// GLOBAL: COPTER_D 0x005b867c
// cYObject::sAmbientAbsoluteMax
// GLOBAL: COPTER_D 0x005b8680
// gAvatar
// GLOBAL: COPTER_D 0x005b8684
// cYObject::sList
// GLOBAL: COPTER_D 0x005b8688
// cYObject::sBeamed
// GLOBAL: COPTER_D 0x005b868c
// cYObject::sDebugNumBeamed
// GLOBAL: COPTER_D 0x005b8690
// cYObject::sSimTicks
// GLOBAL: COPTER_D 0x005b8694
// gPersonBeamSlice
// GLOBAL: COPTER_D 0x005b8698
// gNextTime
// GLOBAL: COPTER_D 0x005b869c
// gCumTime
// GLOBAL: COPTER_D 0x005b86a0
// gBodyDebugInfoIndex
// GLOBAL: COPTER_D 0x005b86a4
// cYObject::sScurkRectRad
// LOCAL: COPTER_D 0x005b86a8
// sAvLastCellX
// LOCAL: COPTER_D 0x005b86ac
// sAvLastCellY
// LOCAL: COPTER_D 0x005b86b0
// gPersonSoundBeamSlice
// LOCAL: COPTER_D 0x005b86b4
// sCheckTotedCount


// Contribution: 3:00024978-00024997 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb978
// ??_C@_0CA@OCDF@couldn?8t?5set?5master?5object?5to?50?$AA@


// Contribution: 3:00024998-000249cc Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb998
// ??_C@_0DF@MDL@trying?5to?5get?5off?5master?5object?5@


// Contribution: 3:000249d0-000249f3 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb9d0
// ??_C@_0CE@BCHG@I?5thought?5all?5people?5were?5alloca@


// Contribution: 3:000249f4-00024a12 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bb9f4
// ??_C@_0BP@EABK@can?8t?5find?5person?5with?5that?5id?$AA@


// Contribution: 3:00024a14-00024a32 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba14
// ??_C@_0BP@GAKH@C?3?2Copter?2Source?2X?2Y?2YObject?4h?$AA@


// Contribution: 3:00024a34-00024a53 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba34
// ??_C@_0CA@JOHG@out?9of?9range?5scurkID?5for?5a?5tile?$AA@


// Contribution: 3:00024a54-00024a7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba54
// ??_C@_0CI@FJMN@must?5set?5cell?5location?5before?5wa@


// Contribution: 3:00024a7c-00024a9b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba7c
// ??_C@_0CA@BGFC@how?8d?5you?5wake?5up?5past?5the?5max?$DP?$AA@


// Contribution: 3:00024a9c-00024abb Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bba9c
// ??_C@_0CA@MKGD@trying?5to?5wake?5up?5already?5awake?$AA@


// Contribution: 3:00024abc-00024ad0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbabc
// ??_C@_0BF@KBDF@y?5and?5x?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024ad4-00024ae8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbad4
// ??_C@_0BF@ECJK@x?5and?5y?5out?5of?5sync?$DP?$AA@


// Contribution: 3:00024aec-00024b17 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbaec
// ??_C@_0CM@FHJC@why?5positioning?5unlinked?5object?5@


// Contribution: 3:00024b18-00024b30 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb18
// ??_C@_0BJ@LCNK@rxn?5tree?5id?5out?5of?5range?$AA@


// Contribution: 3:00024b34-00024b72 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb34
// ??_C@_0DP@CAPD@?91?5missionid?5for?5other?5than?5ambi@


// Contribution: 3:00024b74-00024b99 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb74
// ??_C@_0CG@LEML@couldn?8t?5get?5private?5anim?5for?5an@


// Contribution: 3:00024b9c-00024bb5 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbb9c
// ??_C@_0BK@OHDB@must?5set?5body?5before?5anim?$AA@


// Contribution: 3:00024bb8-00024bec Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbbb8
// ??_C@_0DF@BIBF@you?5must?5unlink?5before?5setting?5c@


// Contribution: 3:00024bf0-00024c22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbbf0
// ??_C@_0DD@LLLA@use?5changemission?5only?5when?5pers@


// Contribution: 3:00024c24-00024c3b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc24
// ??_C@_0BI@MBEM@how?5did?5that?5happen?$DP?$DP?$DP?$DP?$AA@


// Contribution: 3:00024c3c-00024c59 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc3c
// ??_C@_0BO@EKBK@just?5one?5more?5paranoid?5assert?$AA@


// Contribution: 3:00024c5c-00024c87 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc5c
// ??_C@_0CM@JKOD@how?5could?5you?5have?5been?5awake?5ye@


// Contribution: 3:00024c88-00024ca8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbc88
// ??_C@_0CB@NMCE@trying?5to?5sleep?5already?5sleeping@


// Contribution: 3:00024cac-00024cc9 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbcac
// ??_C@_0BO@NCHD@can?8t?5simanim?5without?5an?5anim?$AA@


// Contribution: 3:00024ccc-00024cfa Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbccc
// ??_C@_0CP@EHMM@couldn?8t?5move?5with?5the?5dyn?5objec@


// Contribution: 3:00024cfc-00024d1e Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbcfc
// ??_C@_0CD@GJNN@can?8t?5follow?5master?5with?5no?5mast@


// Contribution: 3:00024d20-00024d3a Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd20
// ??_C@_0BL@EOGE@following?5master?5unlinked?$DP?$AA@


// Contribution: 3:00024d3c-00024d64 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd3c
// ??_C@_0CJ@GJOA@stack?5size?5about?5to?5go?5too?5high?5@


// Contribution: 3:00024d68-00024d7b Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd68
// ??_C@_0BE@HILD@couldn?8t?5get?5a?5body?$AA@


// Contribution: 3:00024d7c-00024da0 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbd7c
// ??_C@_0CF@DHKG@weird?5number?5of?5characters?5shift@


// Contribution: 3:00024da4-00024dc6 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbda4
// ??_C@_0CD@NHHN@c?3?2copter?2source?2x?2objects?2bList@


// Contribution: 3:00024dc8-00024de1 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbdc8
// ??_C@_0BK@HKFL@didn?8t?5make?5obj?5invisible?$AA@


// Contribution: 3:00024de4-00024e22 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbde4
// ??_C@_0DP@HCDA@couldn?8t?5add?5new?5to?5thing?9?9didn?8@


// Contribution: 3:00024e24-00024e40 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe24
// ??_C@_0BN@MPEK@not?5very?5close?5to?5that?5heli?$CB?$AA@


// Contribution: 3:00024e44-00024e6d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe44
// ??_C@_0CK@BLNM@toted?5object?8s?5master?5not?5this?5o@


// Contribution: 3:00024e70-00024e8d Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe70
// ??_C@_0BO@GDCN@toted?5obj?5not?5medevac?5victim?$CB?$AA@


// Contribution: 3:00024e90-00024eba Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbe90
// ??_C@_0CL@LIPB@must?5have?5thing?5to?5put?5aught?5on?5@


// Contribution: 3:00024ebc-00024ed8 Module: 200, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bbebc
// ??_C@_0BN@OBNK@getting?5distance?5to?5null?5dyn?$AA@


// Contribution: 3:0009e250-000a05a4 Module: 200, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00635250
// cYObject::sLanguage
// GLOBAL: COPTER_D 0x00635258
// gXTimer
// GLOBAL: COPTER_D 0x00635268
// cYObject::sLocInfo
// GLOBAL: COPTER_D 0x006352d8
// cYObject::sHitRxnTree
// GLOBAL: COPTER_D 0x00635300
// cYObject::sNeutralMissionLocs
// GLOBAL: COPTER_D 0x00635530
// cYObject::sMoveTable
// GLOBAL: COPTER_D 0x00635590
// cYObject::sErrorFile
// GLOBAL: COPTER_D 0x006356b0
// cYObject::sSoundChannels
// GLOBAL: COPTER_D 0x006356d0
// gBodyDebugInfo
// GLOBAL: COPTER_D 0x006361c0
// cYObject::sStackSize
// GLOBAL: COPTER_D 0x006361c8
// g_sqrtTable
// GLOBAL: COPTER_D 0x00636b8c
// cYObject::sBehavior
// GLOBAL: COPTER_D 0x00636b90
// LastCameraY
// GLOBAL: COPTER_D 0x00636b94
// LastCameraX
// GLOBAL: COPTER_D 0x00636b98
// cYObject::sInitBhav
// GLOBAL: COPTER_D 0x00636bb8
// cYObject::sFile
// GLOBAL: COPTER_D 0x00636ce0
// cYObject::sUnitVectorTable
// GLOBAL: COPTER_D 0x00636d40
// cYObject::sObjects
// GLOBAL: COPTER_D 0x00636ed0
// cYObject::sLocType
// GLOBAL: COPTER_D 0x006372d0
// cYObject::sNeutralPersonLocs
// LOCAL: COPTER_D 0x006375a0
// $S73
// LOCAL: COPTER_D 0x006375a4
// $S79


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x006bf188
// CameraCell
// GLOBAL: COPTER_D 0x006c12a0
// Viewer
// GLOBAL: COPTER_D 0x006c1210
// ViewState
