// Module: Yobjsim.obj
// Source: C:\Copter\Source\X\Y\Yobjsim.cpp
// autogenerated by simcopter_tool from PDB file

// Type: enum TreeSim::ReturnCode (*)(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*)[64];

// Type: int32_t;

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: unsigned short;

// Type: class cYObject (forward reference);
class cYObject : public TreeSim, public YObjLang
{
	using DataType = short;
		enum /* __unnamed */ {
			kNumData = 48,
			kNumTemp = 8,
			kNumPointers = 4,
		};
	struct cYObject::ObjDefHeader{
		long version;
		short stackSize;
		short baseGraphic;
		short numGraphics;
		short initBhav;
		short toolbarPict;
		short treeTableID;
		short personalityID;
		short type;
		short red;
		short green;
		short blue;
		short _padding2;
	};
		enum MoveErrorCode {
			kMoveError = -1,
			kMoveSuccess = 0,
			kMoveFailTooHigh = 1,
			kMoveFailTooLow = 2,
			kMoveFailNonNeutralTerritory = 3,
			kMoveFailDynObjGeneric = 4,
			kMoveFailDynObjPerson = 5,
			kMoveFailOutOfDynObjRect = 6,
			kMoveFailNoSpeed = 7,
			kMoveFailFinishedMoving = 8,
			kMoveFailStaticObj = 9,
			kMoveFailStackObject = 10,
			kMoveFailUnwalkableLoctype = 11,
			kMoveFailOutOfRoad = 12,
		};
		enum ObjectType {
			kPerson = 0,
			kNumObjectTypes = 1,
		};
public:
	static short sStackSize[1];
	void SetToLoc(struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	void Die();
		enum MissionUpdates {
			kPickedUp = 0,
			kOuttaHere = 1,
			kReportNewPickupLocation = 2,
			kJoinedRiot = 3,
			kDrivenFromRiot = 4,
			kLeftRiotOfOwnVolition = 5,
			kReportNewLocation = 6,
			kMedVicToted = 7,
			kMedVicPickedUp = 8,
			kPersonCaught = 9,
		};
		enum Checks {
			kHeliLanded = 0,
			kHeliLow = 1,
			kMasterObjectLow = 2,
			kMasterObjectMovingSlowly = 3,
			kStackObjectLow = 4,
		};
		enum CompareMyLocWith {
			kMissionDestLoc = 0,
			kStackPointer = 1,
			kHeli = 2,
			kBucket = 3,
			kLastHitter = 4,
			kClosestMedevacVictim = 5,
			kClosestCriminal = 6,
			k_pad_MotherShipLoc = 7,
			kClosestCop = 8,
			kAvatarClose = 9,
			kClosestAmbulance = 10,
			kClosestCopCar = 11,
			kClosestFiretruck = 12,
			kClosestCriminalCar = 13,
			kClosestAmbient = 14,
		};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*);
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, struct Point3d*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short sInitBhav[14];
	static short sHitRxnTree[20];
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	long fLastInterrupt;
		enum LocationType {
			kOutOfCity = -1,
			kLocNoInfo = 0,
			kLocUnknown = 1,
			kNothing = 2,
			kForest = 3,
			kRubble = 4,
			kSmallPark = 5,
			kWireStuff = 6,
			kCarRoad = 7,
			kCarBridge = 8,
			kTrainTrack = 9,
			kDomestic = 10,
			kCommercial = 11,
			kWhiteCollarBusiness = 12,
			kBlueCollarBusiness = 13,
			kNumLocTypes = 14,
		};
public:
	static enum cYObject::LocationType sLocType[256];
		enum SearchType {
			kSearchEdgeGround = 0,
			kSearchAnywhereGround = 1,
			kSearchRoof = 2,
			kSearchAnywhereAtAll = 3,
		};
	struct cYObject::LocationInfo{
		enum cYObject::SearchType searchType;
		short maxNormalLoiterers;
	};
public:
	static struct cYObject::LocationInfo sLocInfo[14];
	struct _DYOBJ_INST* SearchForDynObj(short, short, struct _DYOBJ_INST*);
	short GetDirectionTo(struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(struct _CELL_INFO*, enum cYObject::LocationType);
	// calltype: NearC
	static struct Point3d GetPos(unsigned char, unsigned char, int32_t, int32_t);
	// calltype: NearC
	static struct Point3d GetPos(struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	struct cYObject::MoveInfo{
		enum cYObject::LocationType* locType;
		char * roadDir;
		struct _DYOBJ_INST* dyBlock;
		struct _STOBJ_INST* stBlock;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
	struct cYObject::_ControlInput{
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
private:
	static unsigned short sInited;
	static class cYObject* sObjects[100];
	static enum cYObject::LocationType sNeutralPersonLocs[18][10];
	static enum cYObject::LocationType sNeutralMissionLocs[14][10];
	static class cYObject* sList;
	static class NResFile sFile;
	static class ResFile sErrorFile;
public:
	static class YObjLang* sLanguage;
	static class Behavior* sBehavior;
	static struct Point3d sMoveTable[8];
	static struct Point3d sUnitVectorTable[8];
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, struct Point3d, class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	class cYObject* GetClosest(enum MissionSupertype, enum MissionType, unsigned short, short *);
	// calltype: NearC
	static class cYObject* GetObjectA(short);
	// calltype: NearC
	static class cYObject* GetObjectA(struct _DYOBJ_INST*);
	class cYObject* GetPersonWithMaster(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	long fMissionID;
	void PutOnGround();
	void Unlink();
	unsigned short CellIsSet();
	unsigned short fbLinked;
	unsigned short Linked();
	unsigned short fInited;
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	struct _DYOBJ_INST fDyn;
	unsigned char fCellX;
	unsigned char fCellY;
	unsigned long fBodyName;
	class cCopterBody* fBody;
	unsigned long fAnimName;
	class cCopterAnim* fAnim;
	short fFace;
	void SetFace(short);
	struct Point3d fLastMasterLoc;
	unsigned short SetMaster(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static struct _DYOBJ_INST* GetFirstDynObj(struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	unsigned short fSimulate;
	class Behavior* fBehavior;
	class cYObject* fNext;
	short fID;
	short _pad;
	short fTemp[8];
	short fData[48];
	unsigned char * fPointers[4];
	short fIterations;
	short _pad2;
	short fDirInc;
	struct cYObject::ObjDefHeader fDefinition;
		enum /* __unnamed */ {
			kMasterObject = 0,
			kLastHitterObject = 1,
		};
		enum /* __unnamed */ {
			kDirection = 0,
			kAwake = 1,
			kHeightCanJump = 2,
			kPersonType = 3,
			kMissionType = 4,
			kMissionSupertype = 5,
			kAnimFrame = 6,
			kObjectID = 7,
			kRiotVal = 8,
			kVisible = 9,
			kLastRiotVal = 10,
			kNearMedFar = 11,
			kLastHitterMsg = 12,
			kMegaphoneMessage = 13,
			kInRxnTree = 14,
			kDead = 15,
			kColorIndexShift = 16,
			kDynAnim = 17,
			kSpeed = 18,
			kOnlyOnRoad = 19,
			kMoveOnlyNeutrally = 20,
			kMoveNoMatterWhat = 21,
			kSpecificToScurkID = 22,
			kCaptured = 23,
			kStartingObject = 24,
			kSoundChannel = 25,
			kCurrentSound = 26,
			kDynSound = 27,
			kSoundFrequencyAdj = 28,
			kInitBhav = 29,
			kLastRxnTree = 30,
		};
protected:
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 16
	intro void HandleOverflow();
	// vtable: 20
	intro short InterpValue(short, short, short **);
	enum TreeSim::ReturnCode TryExpression(struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(struct Point3d, int32_t, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static char GetRoadDir(struct Point3d);
		enum SoundNum {
			kSNone = -1,
			kSAssertion = 1,
			kSDunno = 2,
			kSHoHum = 3,
			kSQuery = 4,
			kSSad = 5,
			kSTitter = 6,
			kSYouGoGirl = 7,
			kSGrunt = 8,
			kSWhoa = 9,
			kSHey = 10,
			kSHiThere = 11,
			kSAaah = 12,
			kSAck = 13,
			kSFeet = 14,
			kSYrUnderArrest = 15,
			kSGimmeYrCash = 16,
			kSSinisterChuckle = 17,
			kSSayYrKindaHot = 18,
		};
public:
	// calltype: NearC
	static short DistributeSoundChannels(short, short);
	unsigned short PlaySoundA(enum cYObject::SoundNum, unsigned short);
	// calltype: NearC
	static void PhaseAndBeamSoundChannels();
	static short sSoundChannels[15];
	// calltype: NearC
	static short ExtraSoundChannelForSure();
	// calltype: NearC
	static short RegSoundChannel();
	// calltype: NearC
	static void StopAllSounds();
	void StopSound();
	void ClearSoundChannel();
	short GetActualSoundChannel();
	// calltype: NearC
	static short GetActualSoundChannel(short);
	void SetSoundChannel(short);
	// calltype: NearC
	static short GetSRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t GetRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _DYOBJ_INST* GetDynObj(struct _DYOBJ_INST*, struct Point3d, int32_t, struct _DYOBJ_INST*, struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _STOBJ_INST* GetStaticObj(struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(struct Point3d, int32_t, struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(struct _DYOBJ_INST*);
	unsigned short CloseTo(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetFirst();
	// calltype: NearC
	static class cYObject* GetFirst(short, short);
	// calltype: NearC
	static class cYObject* GetFirstInvisible(short);
	class cYObject* PutTotedMedVicOnHeli();
	class cYObject* PutTotedMedVicOn(struct _DYOBJ_INST*);
	unsigned short SetStartingObject(struct _DYOBJ_INST*);
	class cYObject* DropToted();
	class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	// vtable: 24
	intro void Reset();
	virtual void ~cYObject();
protected:
	virtual void Error(short);
	void cYObject(short, class Behavior*, struct Point3d, short);
public:
	struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static class ResFile* GetGlobalFile();
	// calltype: NearC
	static class YObjLang* GetLanguage();
	// calltype: NearC
	static class ResFile* GetErrorFile();
	short GetID();
	struct Point3d GetLocation();
	class Behavior* GetBehavior();
	void Draw(struct VRBlit*);
	float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	class cYObject* GetNext();
	void DynEffects(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	void DynEffectsFixed(int32_t, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	using PrimProc = enum TreeSim::ReturnCode (*)(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
public:
	static enum TreeSim::ReturnCode (*PrimProcs[64])(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIdle(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIdle(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetAnim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetAnim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAttr(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAttr(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalk(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalk(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetBody(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetBody(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sRandom(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iRandom(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToAndGrabOntoStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateMyMission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateMyMission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForTrue(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForTrue(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCompareMyLocWith(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCompareMyLocWith(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSelfDecommission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSelfDecommission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOffMasterObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOffMasterObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocType(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocType(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocTypeNeutral(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocTypeNeutral(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCanJumpOffHere(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCanJumpOffHere(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForSpotlightInMyCell(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForSpotlightInMyCell(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIncrementRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIncrementRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetSurroundingRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetSurroundingRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisScurkID(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisScurkID(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGosubToInitbhav(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGosubToInitbhav(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAdjustRadiusForRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAdjustRadiusForRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sJoinRiot(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iJoinRiot(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetDirection(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetDirection(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOutOfRoadEtc(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOutOfRoadEtc(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGenerateMedevacAndSetSelfAsVictim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnToNearbyFire(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnToNearbyFire(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDie(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDie(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutObjIntoTreeNum(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutObjIntoTreeNum(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimVisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimVisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimInvisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMeMasterOfStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMeMasterOfStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyStackObjectVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyStackObjectVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutTotedMedVicOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutTotedMedVicOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTakeAnyMedVicOffStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetNumSpacesOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetNumSpacesOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDropToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDropToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimPickedUp(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimPickedUp(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCloseToHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCloseToHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetMyExpression(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetMyExpression(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetHeliSpeedPlusDamage(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetHeliSpeedPlusDamage(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisCellSafe(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisCellSafe(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPlaySound(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPlaySound(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnHeliIfHarnessRaised(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAmIOnHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAmIOnHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowFieryProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowFieryProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTellStartingObjectTrueOrFalse(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutMyCarInStack(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutMyCarInStack(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDoIHaveAMaster(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDoIHaveAMaster(struct TreeSim::StackElem*, struct Behavior::Node*);
};

// Type: long;

// Type: struct _DYOBJ_INST (forward reference);
// _DYOBJ_INST Class implementation not found

// Type: float;

// Type: char[100];

// Type: short;

// Type: void;

// Type: struct _CELL_INFO (forward reference);
// _CELL_INFO Class implementation not found

// Type: struct Point2d;
struct Point2d{
	int32_t x;
	int32_t y;
};

// Type: struct _STOBJ_INST (forward reference);
// _STOBJ_INST Class implementation not found

// Type: enum cYObject::LocationType;
	enum LocationType {
		kOutOfCity = -1,
		kLocNoInfo = 0,
		kLocUnknown = 1,
		kNothing = 2,
		kForest = 3,
		kRubble = 4,
		kSmallPark = 5,
		kWireStuff = 6,
		kCarRoad = 7,
		kCarBridge = 8,
		kTrainTrack = 9,
		kDomestic = 10,
		kCommercial = 11,
		kWhiteCollarBusiness = 12,
		kBlueCollarBusiness = 13,
		kNumLocTypes = 14,
	};

// Type: char;

// Type: struct cYObject::MoveInfo (forward reference);
// cYObject::MoveInfo Class implementation not found

// Type: enum cYObject::MoveErrorCode;
	enum MoveErrorCode {
		kMoveError = -1,
		kMoveSuccess = 0,
		kMoveFailTooHigh = 1,
		kMoveFailTooLow = 2,
		kMoveFailNonNeutralTerritory = 3,
		kMoveFailDynObjGeneric = 4,
		kMoveFailDynObjPerson = 5,
		kMoveFailOutOfDynObjRect = 6,
		kMoveFailNoSpeed = 7,
		kMoveFailFinishedMoving = 8,
		kMoveFailStaticObj = 9,
		kMoveFailStackObject = 10,
		kMoveFailUnwalkableLoctype = 11,
		kMoveFailOutOfRoad = 12,
	};

// Type: unsigned char;

// Type: struct TreeSim::StackElem (forward reference);
struct TreeSim::StackElem{
	short treeID;
	short nodeNum;
	short objectID;
	short _pad;
	unsigned char * objectPtr;
	short locals[4];
	class Behavior* pBehavior;
	void GetTreeName(unsigned char *);
};

// Type: struct Point2d (forward reference);
// Point2d Class implementation not found

// Type: short *;

// Type: double;

// Type: enum MissionSupertype;
	enum MissionSupertype {
		kMissionSupertypeError = -2,
		kCriminal = 0,
		kCop = 1,
		kAmbient = 2,
	};

// Type: enum MissionType;
	enum MissionType {
		kMissionTypeError = -2,
		kAmbientNoMission = 0,
		kOnCapsizedBoat = 1,
		kOnBurningBuilding = 2,
		kRioting = 3,
		kTransport = 4,
		kMedevacParamedic = 5,
		kMedevacVictim = 6,
		kCopAerial = 7,
		kCopFoot = 8,
		kFireman = 9,
		kCrimRobber = 10,
		kCrimArsonist = 11,
		kCrimMugger = 12,
		kCrimCar = 13,
		kNumMissionTypes = 14,
	};

// Type: struct _MISSION_PARMS;
struct _MISSION_PARMS{
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct Behavior::Node (forward reference);
// Behavior::Node Class implementation not found

// Type: enum TreeSim::ReturnCode;
	enum ReturnCode {
		kTrueComplete = 1,
		kFalseComplete = 0,
		kEngaged = 2,
		kError = -1,
		kStackLoaded = 3,
	};

// Type: struct YObjLang::IdleParam;
struct YObjLang::IdleParam{
	short decTemp;
};

// Type: union YObjLang::Param (forward reference);

// Type: struct YObjLang::SetAnimParam;
struct YObjLang::SetAnimParam{
	unsigned long animname;
};

// Type: struct cYObject::MoveInfo;
struct cYObject::MoveInfo{
	enum cYObject::LocationType* locType;
	char * roadDir;
	struct _DYOBJ_INST* dyBlock;
	struct _STOBJ_INST* stBlock;
};

// Type: struct YObjLang::SetBodyParam;
struct YObjLang::SetBodyParam{
	unsigned long bodyname;
};

// Type: struct YObjLang::RandomParam;
struct YObjLang::RandomParam{
	short destTemp;
	short rangeData;
	short rangeOwner;
};

// Type: struct YObjLang::WalkAndGrabParam;
struct YObjLang::WalkAndGrabParam{
	short decTemp;
	short dynAnimBoolean;
};

// Type: struct YObjLang::UpdateMyMissionParam;
struct YObjLang::UpdateMyMissionParam{
	short updateLiteral;
};

// Type: struct YObjLang::CheckForTrueParam;
struct YObjLang::CheckForTrueParam{
	short whatLiteral;
};

// Type: struct _HELI_DATA (forward reference);
// _HELI_DATA Class implementation not found

// Type: struct YObjLang::CompareMyLocWithParam;
struct YObjLang::CompareMyLocWithParam{
	short withWhatLiteral;
	short distData;
	short distOwner;
};

// Type: struct YObjLang::IsThisLocTypeParam;
struct YObjLang::IsThisLocTypeParam{
	short locTypeLiteral;
};

// Type: struct YObjLang::CheckForSpotParam;
struct YObjLang::CheckForSpotParam{
	short brightnessTemp;
	short dirToHeliTemp;
};

// Type: struct YObjLang::IncrementRiotValParam;
struct YObjLang::IncrementRiotValParam{
	short riotValLiteral;
};

// Type: struct YObjLang::GetSurroundingRiotValParam;
struct YObjLang::GetSurroundingRiotValParam{
	short distTemp;
	short dirToConcTemp;
	short riotValTemp;
	short numPeopleCountedTemp;
};

// Type: struct YObjLang::IsThisScurkIDParam;
struct YObjLang::IsThisScurkIDParam{
	short scurkIDLiteral;
};

// Type: struct tagLogString;
struct tagLogString{
	unsigned long nType;
	unsigned long nTime;
	unsigned long nMissionID;
	char * szLogString;
	char szData[4];
};

// Type: struct YObjLang::SetDirectionParam;
struct YObjLang::SetDirectionParam{
	short dirTemp;
};

// Type: int32_t[4][4];

// Type: struct YObjLang::GetOutOfRoadParam;
struct YObjLang::GetOutOfRoadParam{
	short decTemp;
};

// Type: struct YObjLang::TurnToFireParam;
struct YObjLang::TurnToFireParam{
	short xdistloc;
	short ydistloc;
};

// Type: enum cYObject::MissionUpdates;
	enum MissionUpdates {
		kPickedUp = 0,
		kOuttaHere = 1,
		kReportNewPickupLocation = 2,
		kJoinedRiot = 3,
		kDrivenFromRiot = 4,
		kLeftRiotOfOwnVolition = 5,
		kReportNewLocation = 6,
		kMedVicToted = 7,
		kMedVicPickedUp = 8,
		kPersonCaught = 9,
	};

// Type: struct YObjLang::AttrParam (forward reference);
// YObjLang::AttrParam Class implementation not found

// Type: class TreeSim;
class TreeSim{
		enum /* __unnamed */ {
			kNumLocals = 4,
			kMaxIterations = 128,
		};
	struct TreeSim::StackElem{
		short treeID;
		short nodeNum;
		short objectID;
		short _pad;
		unsigned char * objectPtr;
		short locals[4];
		class Behavior* pBehavior;
		void GetTreeName(unsigned char *);
	};
private:
	struct TreeSim::StackElem* fStack;
	short fStackSize;
	short fMaxStackSize;
	short fIterations;
	short _pad;
	short * fAutoStackArea;
		enum ReturnCode {
			kTrueComplete = 1,
			kFalseComplete = 0,
			kEngaged = 2,
			kError = -1,
			kStackLoaded = 3,
		};
		enum /* __unnamed */ {
			kStackErrorBase = 1000,
			kStackOverflow = 1000,
			kUndefinedTransition = 1001,
			kTooManyIterations = 1002,
			kStackUnderflow = 1003,
			kStackErrorMax = 1004,
		};
protected:
	// vtable: 0
	intro enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 4
	intro void Error(short);
	void GetCurrentNode(short *, short *);
	void Reset(class Behavior*, short);
	char NodeComplete(unsigned short);
	unsigned short Gosub(class Behavior*, short *, short);
public:
	void TreeSim(short, short *);
	void TreeSim(short, short, class Behavior*, short *);
	// vtable: 8
	intro void ~TreeSim();
	// vtable: 12
	intro unsigned short Simulate(long, unsigned short);
	struct TreeSim::StackElem* GetHighLevelAction();
	struct TreeSim::StackElem* GetCurElem();
	struct TreeSim::StackElem* GetNthElem(short);
	short GetStackSize();
	short GetMaxStackSize();
};

// Type: class YObjLang;
class YObjLang : public Language
{
public:
	void YObjLang(class YObjLang&);
	void YObjLang(unsigned char *);
	void ~YObjLang();
	virtual void GetNodeText(class Behavior*, struct Behavior::Node*, unsigned char *);
	virtual void GetPrimName(short, unsigned char *);
	virtual unsigned short IsSingleExit(struct Behavior::Node*);
	// calltype: NearC
	static void SwizzleTreeParam(short, struct Behavior::NodeParameter*);
	// calltype: NearC
	static void SwizzleTree(void * __ptr32, long);
	virtual void (*)(void * __ptr32, long) GetSwizzler();
		enum /* __unnamed */ {
			kIdle = 0,
			kSetAnim = 1,
			kAttr = 2,
			kWhatsAhead = 3,
			kWalk = 4,
			_kRunPad = 5,
			kSetBody = 6,
			kRandom = 7,
			kGetDirDistToFirst = 8,
			kGetDirDistToPerson = 9,
			kRoadDir = 10,
			kSearchForDyn = 11,
			kWalkToAndGrabOntoStackObject = 12,
			kUpdateMyMission = 13,
			kCheckForTrue = 14,
			kCompareMyLocWith = 15,
			kSelfDecommission = 16,
			kGetOffMasterObject = 17,
			kTurnTowardsStackObject = 18,
			kIsThisLocType = 19,
			kIsThisLocTypeNeutral = 20,
			kCanJumpOffHere = 21,
			kCheckForSpotlightInMyCell = 22,
			kIncrementRiotVal = 23,
			kGetSurroundingRiotVal = 24,
			kIsThisScurkID = 25,
			kGosubToInitbhav = 26,
			kAdjustRadiusForRiotVal = 27,
			kJoinRiot = 28,
			kSetDirection = 29,
			kThrowProjectile = 30,
			kTurnFromStackObject = 31,
			kTurnFromLastHitter = 32,
			kTurnTowardsLastHitter = 33,
			kGetOutOfRoadEtc = 34,
			kGenerateMedevacAndSetSelfAsVictim = 35,
			kTurnToNearbyFire = 36,
			kDie = 37,
			kWalkToStackObject = 38,
			kPutObjIntoTreeNum = 39,
			kVisitOz = 40,
			kNotUsed = 41,
			kMakeMyMedevacVictimVisible = 42,
			kMakeMyMedevacVictimInvisible = 43,
			kMakeMeMasterOfStackObject = 44,
			kMakeMyStackObjectVisitOz = 45,
			kPutTotedMedVicOnMotherShip = 46,
			kTakeAnyMedVicOffMotherShip = 47,
			kGetOnStackObject = 48,
			kUpdateStackVictimToted = 49,
			kGetNumSpacesOnMotherShip = 50,
			kDropToted = 51,
			kUpdateStackVictimPickedUp = 52,
			kCloseToHeli = 53,
			kSetMyExpression = 54,
			kGetHeliSpeedPlusDamage = 55,
			kIsThisCellSafe = 56,
			kPlaySound = 57,
			kGetOnHeliIfHarnessRaised = 58,
			kAmIOnMotherShip = 59,
			kThrowFieryProjectile = 60,
			kNumPrimitives = 61,
		};
public:
	virtual short CountPrimitives();
		enum /* __unnamed */ {
			kMyself = 0,
			kTreeParam = 1,
			kTargetObj = 2,
			kMyData = 3,
			kTreeParamData = 4,
			kTargetObjData = 5,
			kSimGlobals = 6,
			kImmediate = 7,
			kTempVars = 8,
			kStackVars = 9,
			kStackObject = 10,
			kTempTempVars = 11,
			kTreeTableValue = 12,
			kNumOwners = 13,
		};
	struct YObjLang::OwnerDataParam{
		short owner1;
		short data1;
		short owner2;
		short data2;
	};
	struct YObjLang::TurnToFireParam{
		short xdistloc;
		short ydistloc;
	};
	struct YObjLang::GetOutOfRoadParam{
		short decTemp;
	};
	struct YObjLang::SetDirectionParam{
		short dirTemp;
	};
	struct YObjLang::CheckForSpotParam{
		short brightnessTemp;
		short dirToHeliTemp;
	};
	struct YObjLang::GetSurroundingRiotValParam{
		short distTemp;
		short dirToConcTemp;
		short riotValTemp;
		short numPeopleCountedTemp;
	};
	struct YObjLang::IncrementRiotValParam{
		short riotValLiteral;
	};
	struct YObjLang::IsThisScurkIDParam{
		short scurkIDLiteral;
	};
	struct YObjLang::IsThisLocTypeParam{
		short locTypeLiteral;
	};
	struct YObjLang::UpdateMyMissionParam{
		short updateLiteral;
	};
	struct YObjLang::CheckForTrueParam{
		short whatLiteral;
	};
	struct YObjLang::CompareMyLocWithParam{
		short withWhatLiteral;
		short distData;
		short distOwner;
	};
	struct YObjLang::WalkAndGrabParam{
		short decTemp;
		short dynAnimBoolean;
	};
	struct YObjLang::SearchForDynParam{
		short searchdynobjtypetemp;
		short onlyonmasterboolean;
		short numcellstospiral;
	};
	struct YObjLang::IdleParam{
		short decTemp;
	};
	struct YObjLang::SetAnimParam{
		unsigned long animname;
	};
	struct YObjLang::SetBodyParam{
		unsigned long bodyname;
	};
	struct YObjLang::WalkRunParam{
		char decTemp;
		char onlyNeutralBoolean;
		char moveFailTemp;
		char newLocTemp;
		char roadDirTemp;
		char dynAnimBoolean;
		char speedTemp;
	};
	struct YObjLang::RandomParam{
		short destTemp;
		short rangeData;
		short rangeOwner;
	};
	struct YObjLang::RoadDirParam{
		short dirTemp;
		short distAheadData;
		short distAheadOwner;
	};
	struct YObjLang::DirDistFirstParam{
		short dirToTemp;
		short distToTemp;
		short whatData;
		short whatOwner;
	};
	struct YObjLang::DirDistPersonParam{
		short dirToTemp;
		short distToTemp;
		short whoData;
		short whoOwner;
	};
	struct YObjLang::AttrParam{
		short lhsData;
		short rhsData;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 isSigned;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 opType;
		LfBitfield @ 0x5d5b4:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3565
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x0
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 lhsOwner;
		LfBitfield @ 0x5d5bc:
		[90m   LB.[32m[  0.  1][m [95mlength[m = 0x8
		[90m   LB.[95msymbols[m = []
		[90m   LB.[95mTI[m = 0x3566
		[90m   LB.[32m[  1.  1][m [95mposition[m = 0x8
		[90m   LB.[32m[  2.  2][m [95mtype[m = 0x206
		 rhsOwner;
	};
		enum /* __unnamed */ {
			kGreaterThan = 0,
			kLessThan = 1,
			kEquals = 2,
			kIncrement = 3,
			kDecrement = 4,
			kSetValue = 5,
			kTimesEq = 6,
			kDivideEq = 7,
			kIsFlagSet = 8,
			kSetFlag = 9,
			kClearFlag = 10,
			kNumOps = 11,
		};
	struct YObjLang::MiscParam{
		short m1;
		short m2;
		short m3;
		short m4;
	};
	// TODO: Unknown nested type: <class 'tpi.LfUnion'>
	// union YObjLang::Param Param
		enum TreeNum {
			kNoTree = -1,
			kSpotlightTree = 900,
			kMegaphoneTree = 901,
			kOuchTree = 902,
			kDieTree = 903,
			kRunTree = 904,
			kRunOrSwoonTree = 905,
			kSwoonTree = 906,
		};
		enum /* __unnamed */ {
			kWeightStringsID = 140,
			kPrimitiveStringsID = 139,
			kDataLabelsID = 129,
			kDataBase = 1,
			kGlobalBase = 33,
			kOwnerStringsID = 132,
			kNewOwnerBase = 1,
			kMacroDescriptionStrings = 133,
			kPrimMacroBase = 1,
			kMotiveStringsID = 134,
			kMiscStringsID = 135,
			kDontCare = 1,
			kSaveChanges = 2,
			kMaxEntryLabel = 3,
			kBehStringsID = 128,
			kPrimBase = 1,
			kOwnerBase = 33,
			kGosubStr = 65,
			kOpenParen = 66,
			kForType = 67,
			kRadius = 68,
			kFromZeroTo = 69,
			kInto = 70,
			kDistance = 71,
			kStack = 72,
			kUseTempVars = 73,
			kCloseParen = 74,
			kTreetemp = 75,
			kObjtemp = 76,
			kThisObj = 77,
			kAlertType = 78,
			kCheckTreeID = 79,
			kActionTreeID = 80,
			kForAction = 81,
			kEqualStr = 82,
			kTree = 83,
			kRate = 84,
			kTo = 85,
			kForNeed = 86,
			kSel = 87,
			kPairAction = 88,
			kToCheck = 89,
			kSet = 90,
			kToNeed = 91,
			kUpdateNeed = 92,
			kToIndex = 93,
			kCheck = 94,
			kAct = 95,
			kUntil = 96,
			kNot = 97,
			kClear = 98,
			kFor = 99,
			kByAmount = 100,
			kOpBase = 117,
			kTypeBase = 143,
			kBaseTreeBase = 164,
		};
};

// Type: class Language (forward reference);
// Language Class implementation not found



// Contribution: 1:00153ff0-0015b264 Module: 196, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00554ff0
unsigned short cYObject::InBoundingRect(struct Point3d queryloc, int32_t queryRad, struct Point3d objLoc, int32_t objRad) {
// LINE 60:
	__asm        mov    eax, objLoc.x;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.x;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    _T22;
// LINE 61:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 62:
_T22:
	__asm        mov    eax, objLoc.x;
	__asm        add    eax, objRad;
	__asm        mov    ecx, queryloc.x;
	__asm        sub    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jge    _T3e;
// LINE 63:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 64:
_T3e:
	__asm        mov    eax, objLoc.y;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.y;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    _T5a;
// LINE 65:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 66:
_T5a:
	__asm        mov    eax, queryloc.y;
	__asm        sub    eax, queryRad;
	__asm        mov    ecx, objLoc.y;
	__asm        add    ecx, objRad;
	__asm        cmp    eax, ecx;
	__asm        jle    _T76;
// LINE 67:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 68:
_T76:
	__asm        mov    eax, objLoc.z;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.z;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    _T92;
// LINE 69:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 70:
_T92:
	__asm        mov    eax, objLoc.z;
	__asm        add    eax, objRad;
	__asm        mov    ecx, queryloc.z;
	__asm        sub    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jge    _Tae;
// LINE 71:
	__asm        xor    ax, ax;
	__asm        jmp    _Tb7;
// LINE 72:
_Tae:
	__asm        mov    ax, 1;
	__asm        jmp    _Tb7;
// LINE 73:
_Tb7:
}

// FUNCTION: COPTER_D 0x005550ac
void PersonHitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
	float fps;
	char text[100];
	short tree;
	class cYObject* person;

// LINE 78:
	__asm        cmp    hitter_type, 0;
	__asm        jl     _T1d;

	__asm        cmp    hitter_type, 0x14;
	__asm        jl     _T36;
_T1d:
	__asm        push   0x8C085;
	__asm        push   0x5BC638;
	__asm        push   0x4E;
	__asm        push   0x5BC668;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 79:
_T36:
	__asm        mov    eax, hitter_type;
	__asm        mov    ax, cYObject::sHitRxnTree[eax*2];
	__asm        mov    tree, ax;
// LINE 81:
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T57;
// LINE 82:
	__asm        jmp    _T2b8;
// LINE 84:
_T57:
	__asm        mov    eax, dyhittee;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x78], ax;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T7e;

	__asm        mov    eax, gAvatar;
	__asm        mov    person, eax;
	__asm        jmp    _Tfa;
_T7e:
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        test   eax, eax;
	__asm        jl     _T97;

	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x64;
	__asm        jl     _Tb3;
_T97:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb3:
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Te1;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te1:
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    person, eax;
	__asm        jmp    _Tfa;

	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    person, eax;
// LINE 85:
_Tfa:
	__asm        cmp    person, 0;
	__asm        jne    _T11d;

	__asm        push   0x8C085;
	__asm        push   0x5BC68C;
	__asm        push   0x55;
	__asm        push   0x5BC6B0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 88:
_T11d:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        jle    _T16c;
// LINE 89:
// Block start:
	short currxn;
	__asm        mov    eax, person;
	__asm        mov    ax, [eax+0x10C];
	__asm        mov    currxn, ax;
// LINE 90:
	__asm        movsx  eax, currxn;
	__asm        test   eax, eax;
	__asm        je     _T158;

	__asm        movsx  eax, currxn;
	__asm        cmp    eax, 0x384;
	__asm        jne    _T167;
_T158:
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0x384;
	__asm        jne    _T16c;
// LINE 91:
_T167:
	__asm        jmp    _T2b8;
// LINE 94:
// Block end:
_T16c:
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0x384;
	__asm        jne    _T194;

	__asm        mov    eax, cYObject::sSimTicks;
	__asm        mov    ecx, person;
	__asm        sub    eax, [ecx+0x18];
	__asm        cmp    eax, 4;
	__asm        jge    _T194;
// LINE 95:
	__asm        jmp    _T2b8;
// LINE 101:
_T194:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T1ae;
// LINE 102:
	__asm        jmp    _T2b8;
// LINE 107:
_T1ae:
	__asm        mov    eax, cYObject::sSimTicks;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x18], eax;
// LINE 108:
	__asm        mov    eax, dyhitter;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x134], eax;
// LINE 109:
	__asm        mov    eax, xtra_msg;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0xE8], ax;
// LINE 112:
	__asm        mov    eax, gGameApp;
	__asm        mov    eax, [eax+0x4344];
	__asm        mov    fps, eax;
	__asm        jmp    near ptr 0x00555291;
// LINE 113:
	__asm        fld    fps;
	__asm        fcomp  qword ptr ds:[0x593600];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T218;
// LINE 114:
	__asm        fld    fps;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        movsx  eax, tree;
	__asm        push   eax;
	__asm        push   0x5BC6D4;
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x14;
// LINE 119:
_T218:
	__asm        mov    ax, tree;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x10C], ax;
// LINE 120:
	__asm        jmp    near ptr 0x005552D7;

	__asm        jmp    near ptr 0x005552DC;

	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, person;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, tree;
	__asm        cmp    eax, ecx;
	__asm        je     _T2ae;

	__asm        jmp    near ptr 0x00555308;

	__asm        jmp    near ptr 0x0055530D;

	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, person;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     _T294;

	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T294:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tree);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, person;
	__asm        call   TreeSim::Gosub;
	__asm        jmp    _T2b3;

	__asm        jmp    _T2b3;
_T2ae:
	__asm        jmp    _T2b3;
// LINE 122:
_T2b3:
	__asm        jmp    _T2b8;
_T2b8:
}

// FUNCTION: COPTER_D 0x00555369
struct _DYOBJ_INST* cYObject::GetDynObj(struct _DYOBJ_INST* donotignore, struct Point3d location, int32_t radius, struct _DYOBJ_INST* ignore1, struct _DYOBJ_INST* ignore2) {
	int32_t halfradius;
	struct _CELL_INFO* cptr;
	struct Point2d celloc;
	short helipartcount;
	struct _DYOBJ_INST* founddyobj;
	struct _DYOBJ_INST* dyobj;

// LINE 174:
	__asm        mov    founddyobj, 0;
// LINE 181:
	__asm        mov    eax, location.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 182:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, location.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 185:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 189:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 190:
	__asm        mov    helipartcount, 0xFFFF;
// LINE 191:
	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    halfradius, eax;
// LINE 193:
_T6e:
	__asm        cmp    dyobj, 0;
	__asm        je     _T2e8;
// LINE 196:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        jne    _Ta0;

	__asm        movsx  eax, helipartcount;
	__asm        test   eax, eax;
	__asm        jl     _Tef;

	__asm        movsx  eax, helipartcount;
	__asm        cmp    eax, 9;
	__asm        jge    _Tef;
// LINE 198:
_Ta0:
	__asm        inc    helipartcount;
	__asm        movsx  eax, helipartcount;
	__asm        cmp    eax, 0xA;
	__asm        jge    _Td4;

	__asm        cmp    dyobj, 0;
	__asm        je     _Td4;

	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     _Td4;
// LINE 200:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 202:
	__asm        jmp    _Ta0;
// LINE 203:
_Td4:
	__asm        cmp    dyobj, 0;
	__asm        je     _Tea;

	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     _Tef;
// LINE 204:
_Tea:
	__asm        jmp    _T6e;
// LINE 209:
_Tef:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     _T117;

	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     _T117;
// LINE 211:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 212:
	__asm        jmp    _T6e;
// LINE 216:
_T117:
	__asm        mov    eax, ignore1;
	__asm        cmp    dyobj, eax;
	__asm        je     _T12f;

	__asm        mov    eax, ignore2;
	__asm        cmp    dyobj, eax;
	__asm        jne    _T164;
// LINE 218:
_T12f:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        jne    _T157;

	__asm        push   0x8C085;
	__asm        push   0x5BC6EC;
	__asm        push   0xDA;
	__asm        push   0x5BC714;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 219:
_T157:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 220:
	__asm        jmp    _T6e;
// LINE 224:
_T164:
	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, dyobj;
	__asm        add    eax, 0x18;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, halfradius;
	__asm        push   eax;
	__asm        mov    eax, location.z;
	__asm        push   eax;
	__asm        mov    eax, location.y;
	__asm        push   eax;
	__asm        mov    eax, location.x;
	__asm        push   eax;
	__asm        call   cYObject::InBoundingRect;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2db;
// LINE 226:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        jne    _T1c5;
// LINE 227:
	__asm        mov    eax, dyobj;
	__asm        mov    founddyobj, eax;
// LINE 228:
	__asm        jmp    _T2e8;
// LINE 230:
_T1c5:
	__asm        cmp    founddyobj, 0;
	__asm        jne    _T2db;
// LINE 231:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T2c6;
// Block start:
	class cYObject* obj;
	__asm        mov    eax, dyobj;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x24], ax;
// LINE 232:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T205;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T281;
_T205:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        test   eax, eax;
	__asm        jl     _T21e;

	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T23a;
_T21e:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T23a:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T268;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T268:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T281;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    obj, eax;
// LINE 233:
_T281:
	__asm        cmp    obj, 0;
	__asm        jne    _T2a7;

	__asm        push   0x8C085;
	__asm        push   0x5BC738;
	__asm        push   0xE9;
	__asm        push   0x5BC740;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 234:
_T2a7:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    _T2c6;
// LINE 235:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 236:
	__asm        jmp    _T6e;
// LINE 239:
// Block end:
_T2c6:
	__asm        mov    eax, dyobj;
	__asm        mov    founddyobj, eax;
// LINE 240:
	__asm        cmp    donotignore, 0;
	__asm        jne    _T2db;
// LINE 241:
	__asm        jmp    _T2e8;
// LINE 245:
_T2db:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 247:
	__asm        jmp    _T6e;
// LINE 249:
_T2e8:
	__asm        mov    eax, founddyobj;
	__asm        jmp    near ptr 0x00555659;
// LINE 250:
}

// FUNCTION: COPTER_D 0x0055565e
struct _STOBJ_INST* cYObject::GetStaticObj(struct Point3d location, int32_t radius) {
	int32_t normy;
	int32_t normx;
	struct _CELL_INFO* cptr;
	int32_t objy;
	struct Point2d celloc;
	struct _STOBJ_INST* stobj;
	int32_t flags;
	int32_t normz;

// LINE 276:
	__asm        mov    eax, location.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 277:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, location.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 280:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 283:
	__asm        mov    eax, location.x;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normx, eax;
// LINE 284:
	__asm        mov    eax, location.z;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normz, eax;
// LINE 285:
	__asm        mov    eax, location.y;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normy, eax;
// LINE 288:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 289:
_T82:
	__asm        cmp    stobj, 0;
	__asm        je     _Tdc;
// LINE 292:
	__asm        mov    flags, 0x200;
// LINE 301:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        lea    eax, flags;
	__asm        push   eax;
	__asm        mov    eax, normz;
	__asm        push   eax;
	__asm        mov    eax, normy;
	__asm        push   eax;
	__asm        mov    eax, normx;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   VRGetObjAlt;
	__asm        add    esp, 0x20;
	__asm        mov    objy, eax;
// LINE 304:
	__asm        cmp    objy, 0;
	__asm        jle    _Tcf;
// LINE 306:
	__asm        mov    eax, stobj;
	__asm        jmp    _Te3;
// LINE 310:
_Tcf:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 311:
	__asm        jmp    _T82;
// LINE 314:
_Tdc:
	__asm        xor    eax, eax;
	__asm        jmp    _Te3;
// LINE 315:
_Te3:
}

// FUNCTION: COPTER_D 0x00555746
enum cYObject::LocationType cYObject::GetLocType(short cellx, short celly) {
	short scurkID;

// LINE 321:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T3b;

	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     _T3b;

	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    _T46;
_T3b:
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    _Ta2;
_T46:
	__asm        movsx  eax, cellx;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-8], ax;
	__asm        movsx  eax, word ptr [ebp-8];
	__asm        test   eax, eax;
	__asm        jl     _T79;

	__asm        movsx  eax, word ptr [ebp-8];
	__asm        cmp    eax, 0x100;
	__asm        jl     _T95;
_T79:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T95:
	__asm        mov    ax, [ebp-8];
	__asm        mov    scurkID, ax;
	__asm        jmp    _Ta2;
// LINE 322:
_Ta2:
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _Tbe;
// LINE 323:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    _Tce;
// LINE 324:
	__asm        jmp    _Tce;
// LINE 325:
_Tbe:
	__asm        movsx  eax, scurkID;
	__asm        mov    eax, cYObject::sLocType[0][eax*4];
	__asm        jmp    _Tce;
// LINE 326:
_Tce:
}

// FUNCTION: COPTER_D 0x00555819
unsigned short cYObject::IsWater(short cellx, short celly) {
	int32_t j;

// LINE 330:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 8;
	__asm        xor    edx, edx;
	__asm        mov    dl, G_texmap[0][eax+ecx];
	__asm        mov    j, edx;
// LINE 331:
	__asm        cmp    j, 0;
	__asm        jl     _T4d;

	__asm        cmp    j, 0xF;
	__asm        jge    _T4d;
// LINE 332:
	__asm        mov    ax, 1;
	__asm        jmp    _T55;
// LINE 333:
	__asm        jmp    _T55;
// LINE 334:
_T4d:
	__asm        xor    ax, ax;
	__asm        jmp    _T55;
// LINE 335:
_T55:
}

// FUNCTION: COPTER_D 0x00555873
char cYObject::GetRoadDir(struct Point3d location) {
// LINE 345:
	__asm        mov    al, 3;
	__asm        jmp    near ptr 0x00555880;
// LINE 346:
}

// FUNCTION: COPTER_D 0x00555885
enum cYObject::MoveErrorCode cYObject::TryTableMove(short speed, unsigned short moveOnlyNeutrally, struct cYObject::MoveInfo* moveinfo) {
	int32_t dx;
	short dir;
	short attempts;
	enum cYObject::MoveErrorCode movecode;
	int32_t dz;

// LINE 350:
	__asm        mov    attempts, 0;
// LINE 354:
_T12:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        add    eax, 2;
	__asm        mov    dir, ax;
// LINE 355:
	__asm        movsx  eax, dir;
	__asm        and    eax, 7;
	__asm        mov    dir, ax;
// LINE 356:
	__asm        movsx  eax, dir;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, cYObject::sMoveTable[0].x[eax*4];
	__asm        mov    dx, eax;
// LINE 357:
	__asm        movsx  eax, dir;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, cYObject::sMoveTable[0].z[eax*4];
	__asm        mov    dz, eax;
// LINE 358:
	__asm        movsx  eax, speed;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dx, eax;
// LINE 359:
	__asm        movsx  eax, speed;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dz, eax;
// LINE 360:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(moveOnlyNeutrally);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryMove;
	__asm        mov    movecode, eax;
// LINE 362:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xFA];
	__asm        test   eax, eax;
	__asm        jne    _Tb7;
// LINE 363:
	__asm        mov    eax, movecode;
	__asm        jmp    _T126;
// LINE 368:
_Tb7:
	__asm        cmp    movecode, 0;
	__asm        je     _Tdf;

	__asm        cmp    movecode, 0xA;
	__asm        je     _Tdf;

	__asm        cmp    movecode, 8;
	__asm        je     _Tdf;

	__asm        cmp    movecode, 7;
	__asm        jne    _Te7;
// LINE 369:
_Tdf:
	__asm        mov    eax, movecode;
	__asm        jmp    _T126;
// LINE 371:
_Te7:
	__asm        inc    attempts;
// LINE 372:
	__asm        movsx  eax, attempts;
	__asm        cmp    eax, 8;
	__asm        jle    _T100;
// LINE 373:
	__asm        mov    eax, movecode;
	__asm        jmp    _T126;
// LINE 374:
_T100:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xD0];
// LINE 375:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 376:
	__asm        jmp    _T12;
// LINE 377:
_T126:
}

// FUNCTION: COPTER_D 0x005559b2
enum cYObject::MoveErrorCode cYObject::TryVectorMove(struct Point3d vector, int32_t fwdspeed, struct cYObject::MoveInfo* moveinfo) {
	int32_t dx;
	int32_t Vz;
	int32_t Vx;
	int32_t dz;

// LINE 382:
	__asm        cmp    fwdspeed, 0;
	__asm        jne    _T20;

	__asm        mov    eax, 7;
	__asm        jmp    _Ta7;
// LINE 384:
_T20:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, vector.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 385:
	__asm        mov    eax, fwdspeed;
	__asm        push   eax;
	__asm        mov    eax, vector.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    Vx, eax;
// LINE 386:
	__asm        mov    eax, fwdspeed;
	__asm        push   eax;
	__asm        mov    eax, vector.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    Vz, eax;
// LINE 388:
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        mov    eax, Vx;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dx, eax;
// LINE 389:
	__asm        mov    eax, G_AvLoopTime;
	__asm        push   eax;
	__asm        mov    eax, Vz;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dz, eax;
// LINE 392:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryMove;
	__asm        jmp    _Ta7;
// LINE 393:
_Ta7:
}

// FUNCTION: COPTER_D 0x00555a60
enum cYObject::MoveErrorCode cYObject::TryMove(unsigned short moveOnlyNeutrally, struct cYObject::MoveInfo* moveinfo, int32_t dx, int32_t dz, int32_t masterdy, unsigned short mastermove) {
	int32_t masterheight;
	struct _DYOBJ_INST* dyn;
	unsigned char ncellx;
	struct Point3d newloc;
	unsigned char ncelly;
	enum cYObject::MoveErrorCode retcode;

// LINE 402:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, newloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 403:
	__asm        mov    eax, dx;
	__asm        add    newloc.x, eax;
	__asm        mov    eax, dz;
	__asm        add    newloc.z, eax;
// LINE 404:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        je     _T4d;
// LINE 405:
	__asm        mov    eax, masterdy;
	__asm        add    newloc.y, eax;
// LINE 406:
_T4d:
	__asm        mov    retcode, 0;
// LINE 407:
	__asm        mov    dyn, 0;
// LINE 409:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        jne    _T465;
// LINE 410:
// Block start:
	int32_t dy;
	int32_t ht;
	struct TreeSim::StackElem* elem;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _Tfa;
// LINE 413:
// Block start:
	struct Point3d offset;
	int32_t groundheight;
	struct _DYOBJ_INST* master;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    master, eax;
// LINE 414:
	__asm        mov    eax, newloc.x;
	__asm        mov    ecx, master;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    offset.x, eax;
	__asm        mov    offset.y, 0;
	__asm        mov    eax, newloc.z;
	__asm        mov    ecx, master;
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    offset.z, eax;
// LINE 419:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        lea    eax, offset.x;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   VRGetDyObjAlt;
	__asm        add    esp, 0x10;
	__asm        mov    masterheight, eax;
// LINE 420:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    groundheight, eax;
// LINE 421:
	__asm        mov    eax, groundheight;
	__asm        add    eax, masterheight;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 423:
// Block end:
	__asm        jmp    _T116;
// LINE 424:
_Tfa:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 426:
_T116:
	__asm        mov    eax, newloc.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x40];
	__asm        mov    dy, eax;
// LINE 427:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD4];
	__asm        shl    eax, 0x10;
	__asm        mov    ht, eax;
// LINE 428:
	__asm        cmp    G_CheatCodes[0], 0;
	__asm        je     _T183;

	__asm        push   1;
	__asm        call   IsModifierSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T183;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T183;
// LINE 429:
	__asm        push   0x140000;
	__asm        mov    eax, ht;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ht, eax;
// LINE 430:
_T183:
	__asm        mov    eax, dy;
	__asm        cmp    ht, eax;
	__asm        jge    _T196;
// LINE 431:
	__asm        mov    retcode, 1;
// LINE 432:
_T196:
	__asm        mov    eax, ht;
	__asm        neg    eax;
	__asm        cmp    eax, dy;
	__asm        jle    _T1ab;
// LINE 433:
	__asm        mov    retcode, 2;
// LINE 434:
_T1ab:
	__asm        cmp    retcode, 0;
	__asm        je     _T1f4;
// LINE 435:
	__asm        cmp    moveinfo, 0;
	__asm        je     _T1ec;
// LINE 436:
// Block start:
	struct _STOBJ_INST* st;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   cYObject::GetStaticObj;
	__asm        add    esp, 0x10;
	__asm        mov    st, eax;
// LINE 437:
	__asm        mov    eax, st;
	__asm        mov    ecx, moveinfo;
	__asm        mov    [ecx+0xC], eax;
// LINE 439:
// Block end:
_T1ec:
	__asm        mov    eax, retcode;
	__asm        jmp    _Ta09;
// LINE 442:
_T1f4:
	__asm        jmp    near ptr 0x00555C59;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    elem, eax;
// LINE 444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        mov    dyn, eax;
// LINE 446:
	__asm        cmp    moveinfo, 0;
	__asm        je     _T26b;
// LINE 447:
	__asm        mov    eax, dyn;
	__asm        mov    ecx, moveinfo;
	__asm        mov    [ecx+8], eax;
// LINE 449:
_T26b:
	__asm        cmp    dyn, 0;
	__asm        je     _T28e;

	__asm        mov    eax, elem;
	__asm        mov    ecx, dyn;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T28e;
// LINE 450:
	__asm        mov    eax, 0xA;
	__asm        jmp    _Ta09;
// LINE 451:
_T28e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T3dc;
// LINE 452:
// Block start:
	int32_t masterrad;
	int32_t myrad;
	struct Point3d masterloc;
	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    myrad, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-0x84], eax;
// LINE 453:
	__asm        mov    eax, [ebp-0x84];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    _T305;

	__asm        mov    eax, radiusReduction;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    masterrad, eax;
	__asm        jmp    _T311;

	__asm        jmp    _T311;
_T305:
	__asm        mov    masterrad, 0x80000;
	__asm        jmp    _T311;
// LINE 454:
_T311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        lea    ecx, masterloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 455:
	__asm        mov    eax, masterheight;
	__asm        add    masterloc.y, eax;
// LINE 457:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   cYObject::InBoundingRect;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T39f;
// LINE 458:
// Block start:
	struct _DYOBJ_INST* master;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    master, eax;
// LINE 459:
	__asm        push   0x8C085;
	__asm        push   0x5BC764;
	__asm        push   0x1CB;
	__asm        push   0x5BC7A0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 463:
// Block end:
_T39f:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   cYObject::InBoundingRect;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T3dc;
// LINE 464:
	__asm        mov    eax, 6;
	__asm        jmp    _Ta09;
// LINE 466:
// Block end:
_T3dc:
	__asm        cmp    dyn, 0;
	__asm        je     _T465;
// LINE 467:
// Block start:
	struct _DYOBJ_INST* dontignore;
	struct _DYOBJ_INST* myspacedyn;
	__asm        mov    dontignore, 0;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, dontignore;
	__asm        push   eax;
	__asm        call   cYObject::GetDynObj;
	__asm        add    esp, 0x1C;
	__asm        mov    myspacedyn, eax;
// LINE 469:
	__asm        mov    eax, myspacedyn;
	__asm        cmp    dyn, eax;
	__asm        je     _T465;
// LINE 470:
	__asm        mov    eax, dyn;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T45b;
// LINE 471:
	__asm        mov    eax, 5;
	__asm        jmp    _Ta09;
// LINE 472:
	__asm        jmp    _T465;
// LINE 473:
_T45b:
	__asm        mov    eax, 4;
	__asm        jmp    _Ta09;
// LINE 502:
// Block end:
// Block end:
_T465:
	__asm        mov    eax, newloc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ncellx, al;
// LINE 503:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, newloc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    ncelly, al;
// LINE 509:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        xor    eax, eax;
	__asm        mov    al, ncellx;
	__asm        cmp    ecx, eax;
	__asm        jne    _T4b7;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        xor    eax, eax;
	__asm        mov    al, ncelly;
	__asm        cmp    ecx, eax;
	__asm        je     _T9e6;
// LINE 511:
// Block start:
	enum cYObject::LocationType newloctype;
_T4b7:
	__asm        movzx  ax, ncelly;
	__asm        push   eax;
	__asm        movzx  ax, ncellx;
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    newloctype, eax;
// LINE 512:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        jne    _T964;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _T964;
// LINE 516:
// Block start:
	short thiscellx;
	short thiscelly;
	enum cYObject::LocationType thisloctype;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    thiscellx, ax;
// LINE 517:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    thiscelly, ax;
// LINE 518:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(thiscellx);
	__asm        cmp    ecx, eax;
	__asm        jne    _T54e;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(thiscelly);
	__asm        cmp    ecx, eax;
	__asm        je     _T56a;
_T54e:
	__asm        push   0x8C085;
	__asm        push   0x5BC7C4;
	__asm        push   0x206;
	__asm        push   0x5BC7D8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 519:
_T56a:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    thisloctype, eax;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    ecx, thisloctype;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     _T5fa;
// LINE 521:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    _T5de;
// LINE 522:
	__asm        push   0x8C085;
	__asm        push   0x5BC7FC;
	__asm        push   0x20A;
	__asm        push   0x5BC82C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 524:
	__asm        jmp    _T5fa;
// LINE 525:
_T5de:
	__asm        push   0x8C085;
	__asm        push   0x5BC850;
	__asm        push   0x20D;
	__asm        push   0x5BC880;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 529:
_T5fa:
	__asm        mov    eax, this;
	__asm        mov    ecx, newloctype;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     _T92d;
// LINE 530:
// Block start:
	unsigned short newneutralandsparse;
	unsigned short failnonneutral;
	unsigned short thisneutralforme;
	__asm        cmp    moveinfo, 0;
	__asm        je     _T662;

	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T662;
// LINE 532:
	__asm        mov    eax, newloctype;
	__asm        mov    ecx, moveinfo;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
// LINE 533:
	__asm        cmp    newloctype, 7;
	__asm        jne    _T662;

	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T662;
// LINE 534:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   cYObject::GetRoadDir;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, moveinfo;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], al;
// LINE 547:
_T662:
	__asm        mov    failnonneutral, 0;
// LINE 548:
	__asm        mov    eax, newloctype;
	__asm        push   eax;
	__asm        movzx  ax, ncelly;
	__asm        push   eax;
	__asm        movzx  ax, ncellx;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::IsWalkable;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T69d;
// LINE 549:
	__asm        mov    eax, 0xB;
	__asm        jmp    _Ta09;
// LINE 550:
	__asm        jmp    _T911;
_T69d:
	__asm        test   reinterpret_cast<uint32_t>(moveOnlyNeutrally), 0xFFFF;
	__asm        je     _T8b9;
// LINE 551:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     _T6db;

	__asm        push   0x8C085;
	__asm        push   0x5BC8A4;
	__asm        push   0x227;
	__asm        push   0x5BC8D4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 552:
_T6db:
	__asm        mov    word ptr [ebp-0x94], 0;
	__asm        jmp    _T6f0;
_T6e9:
	__asm        inc    word ptr [ebp-0x94];
_T6f0:
	__asm        movsx  eax, word ptr [ebp-0x94];
	__asm        cmp    eax, 0xA;
	__asm        jge    _T73d;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x94];
	__asm        shl    ecx, 2;
	__asm        mov    edx, newloctype;
	__asm        cmp    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], edx;
	__asm        jne    _T738;

	__asm        mov    word ptr [ebp-0x90], 1;
	__asm        jmp    _T74b;
_T738:
	__asm        jmp    _T6e9;
_T73d:
	__asm        mov    word ptr [ebp-0x90], 0;
	__asm        jmp    _T74b;
_T74b:
	__asm        xor    eax, eax;
	__asm        mov    al, ncelly;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, ncellx;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    word ptr [ebp-0x9C], 0;
_T771:
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     _T7aa;

	__asm        mov    eax, [ebp-0x98];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T797;

	__asm        inc    word ptr [ebp-0x9C];
_T797:
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T771;
_T7aa:
	__asm        jmp    near ptr 0x0055620F;

	__asm        mov    eax, newloctype;
	__asm        movsx  eax, cYObject::sLocInfo[0].maxNormalLoiterers[eax*8];
	__asm        movsx  ecx, word ptr [ebp-0x9C];
	__asm        cmp    eax, ecx;
	__asm        jle    _T7d7;

	__asm        mov    word ptr [ebp-0x8C], 1;
	__asm        jmp    _T7e0;
_T7d7:
	__asm        mov    word ptr [ebp-0x8C], 0;
_T7e0:
	__asm        test   dword ptr [ebp-0x90], 0xFFFF;
	__asm        je     _T810;

	__asm        test   dword ptr [ebp-0x8C], 0xFFFF;
	__asm        je     _T810;

	__asm        mov    newneutralandsparse, 1;
	__asm        jmp    _T81b;

	__asm        jmp    _T81b;
_T810:
	__asm        mov    newneutralandsparse, 0;
	__asm        jmp    _T81b;
// LINE 553:
_T81b:
	__asm        test   reinterpret_cast<uint32_t>(newneutralandsparse), 0xFFFF;
	__asm        jne    _T8b4;
// LINE 554:
	__asm        mov    failnonneutral, 1;
// LINE 555:
	__asm        mov    word ptr [ebp-0x88], 0;
	__asm        jmp    _T843;
_T83c:
	__asm        inc    word ptr [ebp-0x88];
_T843:
	__asm        movsx  eax, word ptr [ebp-0x88];
	__asm        cmp    eax, 0xA;
	__asm        jge    _T896;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x88];
	__asm        shl    ecx, 2;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0xAC];
	__asm        cmp    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], edx;
	__asm        jne    _T891;

	__asm        mov    thisneutralforme, 1;
	__asm        jmp    _T8a1;
_T891:
	__asm        jmp    _T83c;
_T896:
	__asm        mov    thisneutralforme, 0;
	__asm        jmp    _T8a1;
// LINE 556:
_T8a1:
	__asm        test   reinterpret_cast<uint32_t>(thisneutralforme), 0xFFFF;
	__asm        jne    _T8b4;
// LINE 557:
	__asm        mov    failnonneutral, 0;
// LINE 563:
_T8b4:
	__asm        jmp    _T911;
_T8b9:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     _T911;
// LINE 564:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 7;
	__asm        je     _T8fd;

	__asm        push   0x8C085;
	__asm        push   0x5BC8F8;
	__asm        push   0x234;
	__asm        push   0x5BC930;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 565:
_T8fd:
	__asm        cmp    newloctype, 7;
	__asm        je     _T911;
// LINE 566:
	__asm        mov    eax, 0xC;
	__asm        jmp    _Ta09;
// LINE 569:
_T911:
	__asm        test   reinterpret_cast<uint32_t>(failnonneutral), 0xFFFF;
	__asm        je     _T928;
// LINE 570:
	__asm        mov    eax, 3;
	__asm        jmp    _Ta09;
// LINE 582:
// Block end:
_T928:
	__asm        jmp    _T964;
_T92d:
	__asm        cmp    moveinfo, 0;
	__asm        je     _T964;

	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T964;

	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T964;
// LINE 583:
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax];
	__asm        mov    dword ptr [eax], 0;
// LINE 584:
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    byte ptr [eax], 0xFF;
// LINE 587:
// Block end:
_T964:
	__asm        mov    eax, newloctype;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 588:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Unlink;
// LINE 589:
	__asm        jmp    near ptr 0x005563E3;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _T9b3;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T9b3:
	__asm        mov    al, ncellx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, ncelly;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x00556436;

	__asm        mov    ecx, this;
	__asm        call   cYObject::Link;
	__asm        jmp    _T9e6;
// LINE 591:
// Block end:
_T9e6:
	__asm        lea    eax, newloc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 595:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta09;
// LINE 596:
_Ta09:
}

// FUNCTION: COPTER_D 0x00556470
unsigned short cYObject::CanJumpOffHere() {
// LINE 606:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::IsWalkable;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _T60;
// LINE 607:
	__asm        xor    ax, ax;
	__asm        jmp    _T143;
// LINE 608:
_T60:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T92;

	__asm        push   0x8C085;
	__asm        push   0x5BDD88;
	__asm        push   0x3DA;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T92:
	__asm        jmp    near ptr 0x00556507;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, [ebp-8];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, [ebp-8];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    _Tdb;

	__asm        jmp    _Tf5;

	__asm        jmp    _Ted;

	__asm        jmp    _Te0;
_Tdb:
	__asm        jmp    _Ted;
_Te0:
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    _Tf5;
// LINE 609:
_Ted:
	__asm        xor    ax, ax;
	__asm        jmp    _T143;
// LINE 610:
_Tf5:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0055658A;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        sub    eax, [ebp-4];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jle    _T13a;
// LINE 611:
	__asm        xor    ax, ax;
	__asm        jmp    _T143;
// LINE 628:
_T13a:
	__asm        mov    ax, 1;
	__asm        jmp    _T143;
// LINE 630:
_T143:
}

// FUNCTION: COPTER_D 0x005565b8
unsigned short cYObject::IsWalkable(short cellx, short celly, enum cYObject::LocationType loctype) {
// LINE 634:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T49;

	__asm        cmp    G_CheatCodes[0], 0;
	__asm        je     _T49;

	__asm        push   1;
	__asm        call   IsModifierSet;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T49;
// LINE 635:
	__asm        mov    ax, 1;
	__asm        jmp    _Tf0;
// LINE 636:
_T49:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   cYObject::IsWater;
	__asm        add    esp, 8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T6c;
// LINE 637:
	__asm        xor    ax, ax;
	__asm        jmp    _Tf0;
// LINE 638:
_T6c:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     _Te7;
// LINE 639:
	__asm        cmp    loctype, 0xFFFFFFFF;
	__asm        jne    _T93;
// LINE 640:
	__asm        xor    ax, ax;
	__asm        jmp    _Tf0;
// LINE 641:
_T93:
	__asm        cmp    loctype, 0;
	__asm        jne    _Ta5;
// LINE 642:
	__asm        xor    ax, ax;
	__asm        jmp    _Tf0;
// LINE 643:
_Ta5:
	__asm        cmp    loctype, 1;
	__asm        jne    _Tb7;
// LINE 644:
	__asm        xor    ax, ax;
	__asm        jmp    _Tf0;
// LINE 647:
_Tb7:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        je     _Te7;
// LINE 648:
	__asm        xor    ax, ax;
	__asm        jmp    _Tf0;
// LINE 650:
_Te7:
	__asm        mov    ax, 1;
	__asm        jmp    _Tf0;
// LINE 651:
_Tf0:
}

// FUNCTION: COPTER_D 0x005566af
struct Point2d GetRiotCenter(long riotid) {
// LINE 657:
	__asm        mov    eax, riotid;
	__asm        push   eax;
	__asm        call   cYObject::GetRiotCenter;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        mov    [ebp-4], edx;
	__asm        mov    eax, [ebp-8];
	__asm        mov    edx, [ebp-4];
	__asm        jmp    near ptr 0x005566D5;
// LINE 658:
}

// FUNCTION: COPTER_D 0x005566da
struct Point2d cYObject::GetRiotCenter(long riotid) {
	short numcounted;
	struct Point2d cent;
	class cYObject* obj;
	short count;
	long overallcellx;
	long overallcelly;

// LINE 662:
	__asm        mov    numcounted, 0;
// LINE 663:
	__asm        mov    overallcellx, 0;
	__asm        mov    overallcelly, 0;
// LINE 666:
	__asm        mov    count, 0;
	__asm        jmp    _T2c;
_T28:
	__asm        inc    count;
_T2c:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T11c;
// LINE 667:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T55;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Td1;
_T55:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T6e;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T8a;
_T6e:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8a:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tb8;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb8:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Td1;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 668:
_Td1:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Te8;

	__asm        jmp    _T28;
// LINE 669:
_Te8:
	__asm        mov    eax, obj;
	__asm        mov    ecx, riotid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    _T117;
// LINE 670:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        add    overallcellx, ecx;
// LINE 671:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        add    overallcelly, ecx;
// LINE 672:
	__asm        inc    numcounted;
// LINE 674:
_T117:
	__asm        jmp    _T28;
// LINE 675:
_T11c:
	__asm        movsx  eax, numcounted;
	__asm        test   eax, eax;
	__asm        jne    _T144;

	__asm        push   0x8C085;
	__asm        push   0x5BC954;
	__asm        push   0x2A3;
	__asm        push   0x5BC990;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 676:
_T144:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, overallcellx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    cent.x, eax;
// LINE 677:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, overallcelly;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    cent.y, eax;
// LINE 678:
	__asm        mov    eax, cent.x;
	__asm        mov    edx, cent.y;
	__asm        jmp    near ptr 0x00556843;
// LINE 679:
}

// FUNCTION: COPTER_D 0x00556848
void cYObject::GetSurroundingRiotInfo(short todist, short * avgriotval, short * counted, short * dirtogreatestconcentration) {
	short numcounted;
	double overallzloc;
	short startcellx;
	long riotval;
	struct _CELL_INFO* cptr;
	short celly;
	short cellx;
	double overallxloc;
	short startcelly;

// LINE 683:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    startcellx, cx;
// LINE 684:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    startcelly, cx;
// LINE 687:
	__asm        mov    riotval, 0;
// LINE 688:
	__asm        mov    numcounted, 0;
// LINE 689:
	__asm        mov    reinterpret_cast<uint32_t>(overallxloc), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&overallxloc) + 4), 0;
// LINE 690:
	__asm        mov    reinterpret_cast<uint32_t>(overallzloc), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&overallzloc) + 4), 0;
// LINE 692:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    _T7d;
_T79:
	__asm        inc    cellx;
_T7d:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     _T138;
// LINE 693:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    _Tb8;
_Tb4:
	__asm        inc    celly;
_Tb8:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     _T133;
// LINE 694:
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    cptr, eax;
// LINE 695:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 0xFFFFFFFB;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 696:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     _T12e;

	__asm        push   0x8C085;
	__asm        push   0x5BC9B4;
	__asm        push   0x2B8;
	__asm        push   0x5BC9CC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 697:
_T12e:
	__asm        jmp    _Tb4;
// LINE 698:
_T133:
	__asm        jmp    _T79;
// LINE 700:
_T138:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    _T156;
_T152:
	__asm        inc    cellx;
_T156:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     _T3bc;
// LINE 701:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    _T191;
_T18d:
	__asm        inc    celly;
_T191:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     _T3b7;
// LINE 702:
// Block start:
	struct _DYOBJ_INST* dyobj;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    cptr, eax;
// LINE 703:
	__asm        cmp    cptr, 0;
	__asm        jne    _T1f4;

	__asm        push   0x8C085;
	__asm        push   0x5BC9F0;
	__asm        push   0x2BF;
	__asm        push   0x5BC9F8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 704:
_T1f4:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     _T207;
// LINE 705:
	__asm        jmp    _T18d;
// LINE 706:
_T207:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 707:
_T210:
	__asm        cmp    dyobj, 0;
	__asm        je     _T3a3;
// LINE 708:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T396;

	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyobj;
	__asm        je     _T396;
// Block start:
	class cYObject* obj;
	short thisriotval;
	short zloc;
	short xloc;
	__asm        mov    eax, dyobj;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x4C], ax;
// LINE 709:
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T25f;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _T2db;
_T25f:
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        test   eax, eax;
	__asm        jl     _T278;

	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    eax, 0x64;
	__asm        jl     _T294;
_T278:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T294:
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _T2c2;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2c2:
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _T2db;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    obj, eax;
// LINE 710:
_T2db:
	__asm        cmp    obj, 0;
	__asm        jne    _T301;

	__asm        push   0x8C085;
	__asm        push   0x5BCA1C;
	__asm        push   0x2C6;
	__asm        push   0x5BCA24;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 711:
_T301:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T32f;

	__asm        push   0x8C085;
	__asm        push   0x5BCA48;
	__asm        push   0x2C7;
	__asm        push   0x5BCA84;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 712:
_T32f:
	__asm        mov    eax, obj;
	__asm        mov    ax, [eax+0xE0];
	__asm        mov    thisriotval, ax;
// LINE 713:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        sar    eax, 0x10;
	__asm        mov    xloc, ax;
// LINE 714:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        sar    eax, 0x10;
	__asm        mov    zloc, ax;
// LINE 715:
	__asm        movsx  eax, xloc;
	__asm        mov    [ebp-0x58], eax;
	__asm        fild   dword ptr [ebp-0x58];
	__asm        movsx  eax, thisriotval;
	__asm        mov    [ebp-0x5C], eax;
	__asm        fimul  dword ptr [ebp-0x5C];
	__asm        fadd   overallxloc;
	__asm        fstp   overallxloc;
// LINE 716:
	__asm        movsx  eax, zloc;
	__asm        mov    [ebp-0x60], eax;
	__asm        fild   dword ptr [ebp-0x60];
	__asm        movsx  eax, thisriotval;
	__asm        mov    [ebp-0x64], eax;
	__asm        fimul  dword ptr [ebp-0x64];
	__asm        fadd   overallzloc;
	__asm        fstp   overallzloc;
// LINE 717:
	__asm        movsx  eax, thisriotval;
	__asm        add    riotval, eax;
// LINE 718:
	__asm        inc    numcounted;
// LINE 720:
// Block end:
_T396:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 721:
	__asm        jmp    _T210;
// LINE 722:
_T3a3:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        or     eax, 4;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 723:
// Block end:
	__asm        jmp    _T18d;
// LINE 724:
_T3b7:
	__asm        jmp    _T152;
// LINE 725:
_T3bc:
	__asm        movsx  eax, numcounted;
	__asm        test   eax, eax;
	__asm        je     _T44b;

	__asm        cmp    riotval, 0;
	__asm        je     _T44b;
// LINE 726:
// Block start:
	int32_t overz;
	int32_t overx;
	__asm        fld    overallxloc;
	__asm        mov    eax, riotval;
	__asm        mov    [ebp-0x68], eax;
	__asm        fidiv  dword ptr [ebp-0x68];
	__asm        fstp   overallxloc;
// LINE 727:
	__asm        fld    overallzloc;
	__asm        mov    eax, riotval;
	__asm        mov    [ebp-0x6C], eax;
	__asm        fidiv  dword ptr [ebp-0x6C];
	__asm        fstp   overallzloc;
// LINE 728:
	__asm        fld    overallxloc;
	__asm        call   0x0056EBE8;
	__asm        shl    eax, 0x10;
	__asm        mov    overx, eax;
// LINE 729:
	__asm        fld    overallzloc;
	__asm        call   0x0056EBE8;
	__asm        shl    eax, 0x10;
	__asm        mov    overz, eax;
// LINE 731:
	__asm        mov    eax, overz;
	__asm        push   eax;
	__asm        mov    eax, overx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, dirtogreatestconcentration;
	__asm        mov    [ecx], ax;
// LINE 732:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, riotval;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, avgriotval;
	__asm        mov    [ecx], ax;
// LINE 734:
// Block end:
	__asm        jmp    _T45b;
// LINE 735:
_T44b:
	__asm        mov    eax, dirtogreatestconcentration;
	__asm        mov    word ptr [eax], 0xFFFF;
// LINE 736:
	__asm        mov    eax, avgriotval;
	__asm        mov    word ptr [eax], 0;
// LINE 738:
_T45b:
	__asm        mov    ax, numcounted;
	__asm        mov    ecx, counted;
	__asm        mov    [ecx], ax;
// LINE 739:
	__asm        jmp    near ptr 0x00556CB2;
}

// FUNCTION: COPTER_D 0x00556cb9
unsigned short cYObject::GetNearbyFire(short todist, short * firecellx, short * firecelly) {
	struct _CELL_INFO* cptr;
	short celly;
	short cellx;

// LINE 748:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    _T2a;
_T26:
	__asm        inc    cellx;
_T2a:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     _Te5;
// LINE 749:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    _T65;
_T61:
	__asm        inc    celly;
_T65:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     _Te0;
// LINE 750:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 751:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 0xFFFFFFFB;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 752:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     _Tdb;

	__asm        push   0x8C085;
	__asm        push   0x5BCAA8;
	__asm        push   0x2F0;
	__asm        push   0x5BCAC0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 753:
_Tdb:
	__asm        jmp    _T61;
// LINE 754:
_Te0:
	__asm        jmp    _T26;
// LINE 756:
_Te5:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    _T103;
_Tff:
	__asm        inc    cellx;
_T103:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     _T1f8;
// LINE 757:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    _T13e;
_T13a:
	__asm        inc    celly;
_T13e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     _T1f3;
// LINE 758:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    cptr, eax;
// LINE 759:
	__asm        cmp    cptr, 0;
	__asm        jne    _T1a1;

	__asm        push   0x8C085;
	__asm        push   0x5BCAE4;
	__asm        push   0x2F7;
	__asm        push   0x5BCAEC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 760:
_T1a1:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     _T1b4;
// LINE 761:
	__asm        jmp    _T13a;
// LINE 762:
_T1b4:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        je     _T1df;
// LINE 763:
	__asm        mov    ax, cellx;
	__asm        mov    ecx, firecellx;
	__asm        mov    [ecx], ax;
// LINE 764:
	__asm        mov    ax, celly;
	__asm        mov    ecx, firecelly;
	__asm        mov    [ecx], ax;
// LINE 765:
	__asm        mov    ax, 1;
	__asm        jmp    _T200;
// LINE 767:
_T1df:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        or     eax, 4;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 768:
	__asm        jmp    _T13a;
// LINE 769:
_T1f3:
	__asm        jmp    _Tff;
// LINE 770:
_T1f8:
	__asm        xor    ax, ax;
	__asm        jmp    _T200;
// LINE 771:
_T200:
}

// FUNCTION: COPTER_D 0x00556ec0
class cYObject* cYObject::GetClosest(enum MissionSupertype missionsupertype, enum MissionType missiontype, unsigned short onlyvisible, short * dist) {
	class cYObject* closestobj;
	unsigned short closestdist;
	struct _DYOBJ_INST* closestdyn;
	short count;

// LINE 775:
	__asm        mov    closestdyn, 0;
// LINE 776:
	__asm        mov    closestobj, 0;
// LINE 777:
	__asm        mov    closestdist, 0xFFFF;
// LINE 778:
	__asm        mov    count, 0;
	__asm        jmp    _T2f;
_T2b:
	__asm        inc    count;
_T2f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T281;
// LINE 779:
// Block start:
	class cYObject* obj;
	struct _DYOBJ_INST* dyn;
	unsigned short dist;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T58;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Td4;
_T58:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T71;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T8d;
_T71:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8d:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tbb;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbb:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Td4;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 780:
_Td4:
	__asm        cmp    obj, 0;
	__asm        jne    _Tfa;

	__asm        push   0x8C085;
	__asm        push   0x5BCB10;
	__asm        push   0x30C;
	__asm        push   0x5BCB18;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 781:
_Tfa:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T111;

	__asm        jmp    _T2b;
// LINE 782:
_T111:
	__asm        mov    eax, obj;
	__asm        cmp    this, eax;
	__asm        jne    _T122;

	__asm        jmp    _T2b;
// LINE 783:
_T122:
	__asm        cmp    missionsupertype, 0xFFFFFFFE;
	__asm        je     _T144;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xDA];
	__asm        cmp    eax, missionsupertype;
	__asm        je     _T144;

	__asm        jmp    _T2b;
// LINE 784:
_T144:
	__asm        cmp    missiontype, 0xFFFFFFFE;
	__asm        je     _T166;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, missiontype;
	__asm        je     _T166;

	__asm        jmp    _T2b;
// LINE 786:
_T166:
	__asm        cmp    missionsupertype, 0xFFFFFFFE;
	__asm        jne    _T196;

	__asm        cmp    missiontype, 0xFFFFFFFE;
	__asm        jne    _T196;

	__asm        push   0x8C085;
	__asm        push   0x5BCB3C;
	__asm        push   0x312;
	__asm        push   0x5BCB64;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 787:
_T196:
	__asm        cmp    missionsupertype, 0;
	__asm        jne    _T1b7;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xFE];
	__asm        test   eax, eax;
	__asm        je     _T1b7;

	__asm        jmp    _T2b;
// LINE 788:
_T1b7:
	__asm        test   reinterpret_cast<uint32_t>(onlyvisible), 0xFFFF;
	__asm        je     _T1db;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    _T1db;

	__asm        jmp    _T2b;
// LINE 789:
_T1db:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    dyn, eax;
// LINE 790:
	__asm        cmp    dyn, 0;
	__asm        jne    _T20a;

	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T20a:
	__asm        jmp    near ptr 0x005570CF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    ax, [ebp-0x24];
	__asm        mov    dist, ax;
	__asm        jmp    near ptr 0x0055710F;
// LINE 791:
	__asm        mov    eax, reinterpret_cast<uint32_t>(dist);
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(closestdist);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    eax, ecx;
	__asm        jge    _T27c;
// LINE 792:
	__asm        mov    ax, dist;
	__asm        mov    closestdist, ax;
// LINE 793:
	__asm        mov    eax, dyn;
	__asm        mov    closestdyn, eax;
// LINE 794:
	__asm        mov    eax, obj;
	__asm        mov    closestobj, eax;
// LINE 796:
// Block end:
_T27c:
	__asm        jmp    _T2b;
// LINE 797:
_T281:
	__asm        cmp    dist, 0;
	__asm        je     _T29f;

	__asm        cmp    closestobj, 0;
	__asm        je     _T29f;
// LINE 798:
	__asm        mov    ax, closestdist;
	__asm        mov    ecx, dist;
	__asm        mov    [ecx], ax;
// LINE 799:
_T29f:
	__asm        mov    eax, closestobj;
	__asm        jmp    near ptr 0x00557167;
// LINE 800:
}

// FUNCTION: COPTER_D 0x0055716e
void cYObject::Die() {
	struct _MISSION_PARMS mp;

// LINE 805:
	__asm        mov    mp.op, 0x17;
// LINE 806:
	__asm        mov    mp.i2num, 1;
// LINE 807:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    mp.id, eax;
// LINE 808:
	__asm        mov    mp.flags, 0;
// LINE 809:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 810:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     _T55;
// LINE 811:
	__asm        mov    ecx, this;
	__asm        call   cYObject::ResetToAmbient;
// LINE 813:
	__asm        jmp    _T77;
// LINE 814:
_T55:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    _T77;
// LINE 816:
_T77:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xEE], 1;
// LINE 817:
	__asm        jmp    near ptr 0x005571F6;
}

// FUNCTION: COPTER_D 0x005571fb
class cYObject* cYObject::GetFirst(short whichtype, short visible) {
	class cYObject* found;
	short count;

// LINE 822:
	__asm        mov    found, 0;
// LINE 823:
	__asm        mov    count, 0;
	__asm        jmp    _T1f;
_T1b:
	__asm        inc    count;
_T1f:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T145;
// LINE 824:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T48;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tc4;
_T48:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T61;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T7d;
_T61:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T7d:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tab;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tab:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tc4;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 825:
_Tc4:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tdb;

	__asm        jmp    _T1b;
// LINE 826:
_Tdb:
	__asm        movsx  eax, visible;
	__asm        cmp    eax, 1;
	__asm        jne    _Tff;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    _Tff;

	__asm        jmp    _T1b;
// LINE 827:
_Tff:
	__asm        movsx  eax, visible;
	__asm        test   eax, eax;
	__asm        jne    _T122;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     _T122;

	__asm        jmp    _T1b;
// LINE 829:
_T122:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        movsx  ecx, whichtype;
	__asm        cmp    eax, ecx;
	__asm        jne    _T140;
// LINE 830:
	__asm        mov    eax, obj;
	__asm        jmp    _T14c;
// LINE 831:
// Block end:
_T140:
	__asm        jmp    _T1b;
// LINE 832:
_T145:
	__asm        xor    eax, eax;
	__asm        jmp    _T14c;
// LINE 833:
_T14c:
}

// FUNCTION: COPTER_D 0x0055734c
class cYObject* cYObject::DropToted() {
	class cYObject* obj;

// LINE 837:
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        mov    obj, eax;
// LINE 838:
	__asm        cmp    obj, 0;
	__asm        je     _T9d;
// LINE 839:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _T50;

	__asm        push   0x8C085;
	__asm        push   0x5BCB88;
	__asm        push   0x347;
	__asm        push   0x5BCBA8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 840:
_T50:
	__asm        jmp    near ptr 0x005573A1;

	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T86;

	__asm        push   0x8C085;
	__asm        push   0x5BCBCC;
	__asm        push   0x348;
	__asm        push   0x5BCBF8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 841:
_T86:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetMaster;
// LINE 842:
	__asm        mov    eax, obj;
	__asm        jmp    _Ta4;
// LINE 844:
	__asm        jmp    _Ta4;
// LINE 845:
_T9d:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta4;
// LINE 846:
_Ta4:
}

// FUNCTION: COPTER_D 0x005573f5
class cYObject* cYObject::GetToted() {
	class cYObject* found;
	short count;

// LINE 850:
	__asm        mov    found, 0;
// LINE 851:
	__asm        mov    count, 0;
	__asm        jmp    _T22;
_T1e:
	__asm        inc    count;
_T22:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    _T129;
// LINE 852:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    _T4b;

	__asm        mov    eax, gAvatar;
	__asm        mov    obj, eax;
	__asm        jmp    _Tc7;
_T4b:
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     _T64;

	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     _T80;
_T64:
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T80:
	__asm        movsx  eax, count;
	__asm        cmp    cYObject::sObjects[0][eax*4], 0;
	__asm        jne    _Tae;

	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tae:
	__asm        movsx  eax, count;
	__asm        mov    eax, cYObject::sObjects[0][eax*4];
	__asm        mov    obj, eax;
	__asm        jmp    _Tc7;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 853:
_Tc7:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Tde;

	__asm        jmp    _T1e;
// LINE 854:
_Tde:
	__asm        jmp    near ptr 0x005574D8;

	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    _T124;
// LINE 855:
	__asm        cmp    found, 0;
	__asm        je     _T11e;

	__asm        push   0x8C085;
	__asm        push   0x5BCC1C;
	__asm        push   0x357;
	__asm        push   0x5BCC44;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 856:
_T11e:
	__asm        mov    eax, obj;
	__asm        mov    found, eax;
// LINE 858:
// Block end:
_T124:
	__asm        jmp    _T1e;
// LINE 860:
_T129:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x00557526;
// LINE 861:
}

// FUNCTION: COPTER_D 0x0055752b
enum TreeSim::ReturnCode cYObject::iDoIHaveAMaster(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 876:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 877:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     _T2f;
// LINE 878:
	__asm        mov    result, 1;
// LINE 879:
	__asm        jmp    _T36;
// LINE 880:
_T2f:
	__asm        mov    result, 0;
// LINE 881:
_T36:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557569;
// LINE 882:
}

// FUNCTION: COPTER_D 0x00557570
enum TreeSim::ReturnCode cYObject::iPutMyCarInStack(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 886:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 887:
	__asm        mov    result, 0;
// LINE 888:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T5d;
// LINE 889:
// Block start:
	struct _DYOBJ_INST* car;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        push   eax;
	__asm        call   EmergencyVehicleClass::S3GetCar;
	__asm        add    esp, 4;
	__asm        mov    car, eax;
// LINE 890:
	__asm        cmp    car, 0;
	__asm        je     _T5d;
// LINE 891:
	__asm        mov    eax, car;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 892:
	__asm        mov    result, 1;
// LINE 895:
// Block end:
_T5d:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005575D5;
// LINE 896:
}

// FUNCTION: COPTER_D 0x005575dc
enum TreeSim::ReturnCode cYObject::iIdle(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IdleParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 900:
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
	__asm        mov    result, 0xFFFFFFFF;
// LINE 901:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.decTemp, ax;
// LINE 902:
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T40;

	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T5c;
_T40:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5c:
	__asm        jmp    near ptr 0x0055763D;

	__asm        jmp    near ptr 0x00557642;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    _T9a;

	__asm        mov    result, 1;
// LINE 903:
	__asm        jmp    _T10b;
// LINE 904:
_T9a:
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Tb4;

	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _Td0;
_Tb4:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td0:
	__asm        jmp    near ptr 0x005576B1;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x005576DA;

	__asm        mov    eax, [ebp-0x10];
	__asm        dec    word ptr [eax];
// LINE 905:
	__asm        mov    result, 2;
// LINE 907:
_T10b:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005576EF;
// LINE 908:
}

// FUNCTION: COPTER_D 0x005576f6
enum TreeSim::ReturnCode cYObject::iSetAnim(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetAnimParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 912:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 913:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    param.animname, eax;
// LINE 914:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T50;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T75;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, param.animname;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        je     _Tbc;
_T75:
	__asm        mov    eax, param.animname;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tbc;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbc:
	__asm        jmp    near ptr 0x005577B7;
// LINE 915:
	__asm        mov    result, 1;
// LINE 916:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005577C6;
// LINE 917:
}

// FUNCTION: COPTER_D 0x005577cd
enum TreeSim::ReturnCode cYObject::iAttr(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 921:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 922:
	__asm        mov    eax, nparam;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryExpression;
	__asm        mov    result, eax;
// LINE 923:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557800;
// LINE 924:
}

// FUNCTION: COPTER_D 0x00557807
enum TreeSim::ReturnCode cYObject::iWalk(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short movespeed;
	short dectemp;
	short * walkloc;
	union YObjLang::Param* nparam;
	unsigned short onlyNeutral;
	enum cYObject::MoveErrorCode movecode;
	struct cYObject::MoveInfo moveinfo;
	enum TreeSim::ReturnCode result;

// LINE 928:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 929:
	__asm        mov    movecode, 0xFFFFFFFF;
// LINE 930:
	__asm        mov    movespeed, 0;
// LINE 932:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    dectemp, ax;
// LINE 933:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF8];
	__asm        mov    onlyNeutral, ax;
// LINE 934:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   Memory::BlockFill;
	__asm        add    esp, 0xC;
// LINE 935:
	__asm        movsx  eax, dectemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T6b;

	__asm        movsx  eax, dectemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T87;
_T6b:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T87:
	__asm        jmp    near ptr 0x00557893;

	__asm        jmp    near ptr 0x00557898;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, dectemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    walkloc, eax;
// LINE 937:
	__asm        mov    eax, walkloc;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jne    _Td6;
// LINE 938:
	__asm        mov    movecode, 8;
// LINE 939:
	__asm        mov    result, 1;
// LINE 941:
	__asm        jmp    _T11e;
// LINE 942:
_Td6:
	__asm        mov    eax, walkloc;
	__asm        dec    word ptr [eax];
// LINE 944:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    movespeed, ax;
// LINE 956:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(onlyNeutral);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(movespeed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryTableMove;
	__asm        mov    movecode, eax;
	__asm        cmp    movecode, 0;
	__asm        jne    _T117;
// LINE 957:
	__asm        mov    result, 2;
// LINE 958:
	__asm        jmp    _T11e;
// LINE 959:
_T117:
	__asm        mov    result, 0;
// LINE 961:
_T11e:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(movespeed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::DynEffects;
// LINE 962:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557941;
// LINE 963:
}

// FUNCTION: COPTER_D 0x00557948
enum TreeSim::ReturnCode cYObject::iSetBody(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetBodyParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 967:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 968:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    param.bodyname, eax;
// LINE 969:
	__asm        mov    eax, cCopterBody::fsList;
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jl     _T47;

	__asm        cmp    dword ptr [ebp-0x10], 0x20;
	__asm        jb     _T60;
_T47:
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BBDA4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T60:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _T78;

	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T7f;
_T78:
	__asm        mov    dword ptr [ebp-0x1C], 0;
_T7f:
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T9c;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _Ta3;
_T9c:
	__asm        mov    dword ptr [ebp-0x14], 0;
_Ta3:
	__asm        jmp    near ptr 0x005579F0;

	__asm        jmp    near ptr 0x005579F5;

	__asm        jmp    _Tca;
_Tb2:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tc5;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
_Tc5:
	__asm        jmp    _Tca;
_Tca:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _Tea;

	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T17e;

	__asm        jmp    _Tfe;

	__asm        jmp    _Tf4;
_Tea:
	__asm        jmp    _T17e;

	__asm        jmp    _Tfe;
_Tf4:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T17e;
_Tfe:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T11a;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T126;

	__asm        jmp    _T126;
_T11a:
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    _T126;
_T126:
	__asm        jmp    near ptr 0x00557A73;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    eax, cl;
	__asm        mov    edx, param.bodyname;
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    _T179;

	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T162;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T174;

	__asm        jmp    _T16e;
_T162:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T174;
_T16e:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
_T174:
	__asm        jmp    _T18a;
_T179:
	__asm        jmp    _Tb2;
_T17e:
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    _T18a;
_T18a:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T1c2;

	__asm        push   0x8C085;
	__asm        push   0x5BBD68;
	__asm        push   0x27A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1c2:
	__asm        jmp    near ptr 0x00557B0F;
// LINE 970:
	__asm        mov    result, 1;
// LINE 972:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557B1E;
// LINE 973:
}

// FUNCTION: COPTER_D 0x00557b25
enum TreeSim::ReturnCode cYObject::iRandom(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::RandomParam rand;
	short range;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 977:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 978:
	__asm        mov    eax, nparam;
	__asm        lea    ecx, rand.destTemp;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    ax, [eax+4];
	__asm        mov    [ecx+4], ax;
// LINE 980:
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(rand.rangeData);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(rand.rangeOwner);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    range, ax;
// LINE 981:
	__asm        movsx  eax, range;
	__asm        test   eax, eax;
	__asm        jg     _T6f;

	__asm        push   0x8C085;
	__asm        push   0x5BCC68;
	__asm        push   0x3D5;
	__asm        push   0x5BCC88;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 982:
_T6f:
	__asm        movsx  eax, rand.destTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T89;

	__asm        movsx  eax, rand.destTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _Ta5;
_T89:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta5:
	__asm        jmp    near ptr 0x00557BCF;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, rand.destTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00557BF8;

	__asm        mov    eax, reinterpret_cast<uint32_t>(range);
	__asm        push   eax;
	__asm        call   SRand;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
// LINE 983:
	__asm        mov    result, 1;
// LINE 985:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557C19;
// LINE 986:
}

// FUNCTION: COPTER_D 0x00557c20
enum TreeSim::ReturnCode cYObject::iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	union YObjLang::Param* nparam;
	struct YObjLang::WalkAndGrabParam walkgrab;
	enum cYObject::MoveErrorCode movecode;
	struct cYObject::MoveInfo moveinfo;
	short speed;
	enum TreeSim::ReturnCode result;

// LINE 990:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 991:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T45;

	__asm        push   0x8C085;
	__asm        push   0x5BCCAC;
	__asm        push   0x3DF;
	__asm        push   0x5BCCC8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 992:
_T45:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(walkgrab.decTemp), eax;
// LINE 995:
	__asm        mov    speed, 0;
// LINE 996:
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T6d;

	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T89;
_T6d:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T89:
	__asm        jmp    near ptr 0x00557CAE;

	__asm        jmp    near ptr 0x00557CB3;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, walkgrab.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    _Tce;
// LINE 997:
	__asm        mov    movecode, 8;
// LINE 998:
	__asm        mov    result, 0;
// LINE 1000:
	__asm        jmp    _T2fd;
// LINE 1001:
// Block start:
	struct _DYOBJ_INST* goal;
_Tce:
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Te8;

	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T104;
_Te8:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T104:
	__asm        jmp    near ptr 0x00557D29;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, walkgrab.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00557D52;

	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    word ptr [eax];
// LINE 1002:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    goal, eax;
// LINE 1003:
	__asm        jmp    near ptr 0x00557D66;

	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1004:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   Memory::BlockFill;
	__asm        add    esp, 0xC;
// LINE 1005:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    speed, ax;
// LINE 1006:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryTableMove;
	__asm        mov    movecode, eax;
// LINE 1007:
	__asm        cmp    movecode, 0xA;
	__asm        jne    _T2e0;

	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x40];
	__asm        and    eax, 0xFFFF0000;
	__asm        mov    ecx, 0x50000;
	__asm        and    ecx, 0xFFFF0000;
	__asm        cmp    eax, ecx;
	__asm        jge    _T2e0;
// LINE 1008:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0xC;
	__asm        jne    _T2d4;
// LINE 1009:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2c8;

	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
// LINE 1010:
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::Unlink;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x30], al;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x34], al;
	__asm        jmp    near ptr 0x00557E7B;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _T288;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T288:
	__asm        mov    al, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x00557EC5;

	__asm        mov    ecx, this;
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x00557ED2;
// LINE 1013:
	__asm        mov    eax, elem;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1014:
	__asm        mov    result, 1;
// LINE 1016:
	__asm        jmp    _T2cf;
// LINE 1017:
_T2c8:
	__asm        mov    result, 0;
// LINE 1019:
_T2cf:
	__asm        jmp    _T2db;
// LINE 1020:
_T2d4:
	__asm        mov    result, 1;
// LINE 1022:
_T2db:
	__asm        jmp    _T2fd;
_T2e0:
	__asm        cmp    movecode, 0;
	__asm        jne    _T2f6;
// LINE 1023:
	__asm        mov    result, 2;
// LINE 1024:
	__asm        jmp    _T2fd;
// LINE 1025:
_T2f6:
	__asm        mov    result, 0;
// LINE 1027:
// Block end:
_T2fd:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::DynEffects;
// LINE 1029:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557F39;
// LINE 1030:
}

// FUNCTION: COPTER_D 0x00557f40
enum TreeSim::ReturnCode cYObject::iUpdateMyMission(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::UpdateMyMissionParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1034:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1035:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.updateLiteral, ax;
// LINE 1036:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        movsx  eax, param.updateLiteral;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::UpdateMission;
// LINE 1037:
	__asm        mov    result, 1;
// LINE 1039:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557F89;
// LINE 1040:
}

// FUNCTION: COPTER_D 0x00557f90
enum TreeSim::ReturnCode cYObject::iCheckForTrue(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::CheckForTrueParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1044:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1045:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.whatLiteral, ax;
// LINE 1046:
	__asm        movsx  eax, param.whatLiteral;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T2a8;
// LINE 1050:
	__asm        mov    eax, G_uheli;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T4d;
// LINE 1051:
	__asm        mov    result, 1;
// LINE 1052:
	__asm        jmp    _T54;
// LINE 1053:
_T4d:
	__asm        mov    result, 0;
// LINE 1054:
_T54:
	__asm        jmp    _T2d0;
// LINE 1057:
// Block start:
	struct _HELI_DATA* hd;
	short copterheight;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        call   S3HeliGetDataByDyObj;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 1058:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, hd;
	__asm        sub    eax, [ecx+0x154];
	__asm        sar    eax, 0x10;
	__asm        mov    copterheight, ax;
// LINE 1060:
	__asm        jmp    near ptr 0x00558023;

	__asm        movsx  eax, copterheight;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jge    _Tb4;
// LINE 1061:
	__asm        mov    result, 1;
// LINE 1062:
	__asm        jmp    _Tbb;
// LINE 1063:
_Tb4:
	__asm        mov    result, 0;
// LINE 1064:
_Tbb:
	__asm        jmp    _T2d0;
// LINE 1067:
// Block end:
// Block start:
	struct _DYOBJ_INST* obj;
	int32_t y;
	short delta_y;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    obj, eax;
// LINE 1068:
	__asm        cmp    obj, 0;
	__asm        jne    _Tf2;

	__asm        push   0x8C085;
	__asm        push   0x5BCCEC;
	__asm        push   0x42C;
	__asm        push   0x5BCD20;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1069:
_Tf2:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        mov    y, eax;
// LINE 1070:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, y;
	__asm        sar    eax, 0x10;
	__asm        mov    delta_y, ax;
// LINE 1071:
	__asm        movsx  eax, delta_y;
	__asm        cmp    eax, 5;
	__asm        jge    _T13b;
// LINE 1072:
	__asm        mov    result, 1;
// LINE 1073:
	__asm        jmp    _T142;
// LINE 1074:
_T13b:
	__asm        mov    result, 0;
// LINE 1075:
_T142:
	__asm        jmp    _T2d0;
// LINE 1078:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T179;

	__asm        push   0x8C085;
	__asm        push   0x5BDD88;
	__asm        push   0x3DA;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T179:
	__asm        jmp    near ptr 0x0055810E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, [ebp-0x28];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, [ebp-0x28];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    _T1bd;

	__asm        jmp    _T1d4;

	__asm        jmp    _T1c7;
_T1bd:
	__asm        jmp    _T1e0;

	__asm        jmp    _T1d4;
_T1c7:
	__asm        test   dword ptr [ebp-0x2C], 0xFFFF;
	__asm        je     _T1e0;
// LINE 1079:
_T1d4:
	__asm        mov    result, 1;
// LINE 1080:
	__asm        jmp    _T1e7;
// LINE 1081:
_T1e0:
	__asm        mov    result, 0;
// LINE 1082:
_T1e7:
	__asm        jmp    _T2d0;
// LINE 1085:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T215;

	__asm        push   0x8C085;
	__asm        push   0x5BCD44;
	__asm        push   0x43D;
	__asm        push   0x5BCD78;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1087:
_T215:
	__asm        mov    eax, elem;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _T27b;
// LINE 1090:
// Block start:
	short copterheight;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, G_uheli;
	__asm        sub    eax, [ecx+0x154];
	__asm        sar    eax, 0x10;
	__asm        mov    copterheight, ax;
// LINE 1092:
	__asm        jmp    near ptr 0x005581DE;

	__asm        movsx  eax, copterheight;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jge    _T26f;
// LINE 1093:
	__asm        mov    result, 1;
// LINE 1094:
	__asm        jmp    _T276;
// LINE 1095:
_T26f:
	__asm        mov    result, 0;
// LINE 1097:
// Block end:
_T276:
	__asm        jmp    _T282;
// LINE 1098:
_T27b:
	__asm        mov    result, 1;
// LINE 1100:
_T282:
	__asm        jmp    _T2d0;
// LINE 1103:
_T287:
	__asm        push   0x8C085;
	__asm        push   0x5BCD9C;
	__asm        push   0x44F;
	__asm        push   0x5BCDB8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1104:
	__asm        jmp    _T2d0;
_T2a8:
	__asm        cmp    dword ptr [ebp-0x34], 4;
	__asm        ja     _T287;

	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    SwitchPointers5603916[0][eax*4];
// Switch pointers
// LINE 1105:
_T2d0:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558268;
// LINE 1106:
}

// FUNCTION: COPTER_D 0x0055826f
enum TreeSim::ReturnCode cYObject::iCompareMyLocWith(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct Point2d destloc;
	struct YObjLang::CompareMyLocWithParam param;
	union YObjLang::Param* nparam;
	short distance;
	enum TreeSim::ReturnCode result;
	struct _DYOBJ_INST* destobj;

// LINE 1110:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1111:
	__asm        mov    eax, nparam;
	__asm        lea    ecx, param.withWhatLiteral;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    ax, [eax+4];
	__asm        mov    [ecx+4], ax;
// LINE 1113:
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(param.distData);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(param.distOwner);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    distance, ax;
// LINE 1115:
	__asm        mov    destobj, 0;
// LINE 1116:
	__asm        movsx  eax, param.withWhatLiteral;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T433;
// LINE 1118:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    _T88;

	__asm        push   0x8C085;
	__asm        push   0x5BCDDC;
	__asm        push   0x45E;
	__asm        push   0x5BCE14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1119:
_T88:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        jne    _Tb1;

	__asm        push   0x8C085;
	__asm        push   0x5BCE38;
	__asm        push   0x45F;
	__asm        push   0x5BCE64;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1120:
_Tb1:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   S3MissionGetDestMapLoc;
	__asm        add    esp, 4;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    destloc.x, ecx;
	__asm        mov    destloc.y, eax;
// LINE 1121:
	__asm        jmp    _T483;
// LINE 1123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    destobj, eax;
// LINE 1124:
	__asm        cmp    destobj, 0;
	__asm        jne    _T102;

	__asm        push   0x8C085;
	__asm        push   0x5BCE88;
	__asm        push   0x464;
	__asm        push   0x5BCEC0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1125:
_T102:
	__asm        jmp    _T483;
// LINE 1127:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    destobj, eax;
// LINE 1128:
	__asm        cmp    destobj, 0;
	__asm        jne    _T136;

	__asm        push   0x8C085;
	__asm        push   0x5BCEE4;
	__asm        push   0x468;
	__asm        push   0x5BCF20;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1129:
_T136:
	__asm        jmp    _T483;
// LINE 1131:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    destobj, eax;
// LINE 1133:
	__asm        jmp    _T483;
// LINE 1136:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    destobj, eax;
// LINE 1138:
	__asm        jmp    _T483;
// LINE 1141:
	__asm        push   0x8C085;
	__asm        push   0x5BCF44;
	__asm        push   0x475;
	__asm        push   0x5BCF60;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1144:
	__asm        jmp    _T483;
// LINE 1147:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0xFFFFFFFE;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetClosest;
	__asm        mov    obj, eax;
// LINE 1148:
	__asm        cmp    obj, 0;
	__asm        je     _T1ad;
// LINE 1149:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1150:
	__asm        jmp    _T1b4;
// LINE 1151:
_T1ad:
	__asm        mov    result, 0;
// LINE 1153:
_T1b4:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    _T1df;

	__asm        push   0x8C085;
	__asm        push   0x5BCF84;
	__asm        push   0x481;
	__asm        push   0x5BCF8C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1154:
_T1df:
	__asm        jmp    _T483;
// LINE 1157:
// Block end:
	__asm        mov    eax, gAvatar;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1158:
	__asm        mov    result, 1;
// LINE 1159:
	__asm        jmp    _T483;
// LINE 1162:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0xFFFFFFFE;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetClosest;
	__asm        mov    obj, eax;
// LINE 1163:
	__asm        cmp    obj, 0;
	__asm        je     _T226;
// LINE 1164:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1165:
	__asm        jmp    _T22d;
// LINE 1166:
_T226:
	__asm        mov    result, 0;
// LINE 1168:
_T22d:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    _T258;

	__asm        push   0x8C085;
	__asm        push   0x5BCFB0;
	__asm        push   0x490;
	__asm        push   0x5BCFB8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1169:
_T258:
	__asm        jmp    _T483;
// LINE 1172:
// Block end:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   6;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetClosest;
	__asm        mov    obj, eax;
// LINE 1173:
	__asm        cmp    obj, 0;
	__asm        je     _T288;
// LINE 1174:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1175:
	__asm        jmp    _T28f;
// LINE 1176:
_T288:
	__asm        mov    result, 0;
// LINE 1178:
_T28f:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    _T2ba;

	__asm        push   0x8C085;
	__asm        push   0x5BCFDC;
	__asm        push   0x49A;
	__asm        push   0x5BCFE4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1179:
_T2ba:
	__asm        jmp    _T483;
// LINE 1182:
// Block end:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   0;
	__asm        call   AutomobileClass::GetClosestCar;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1183:
	__asm        cmp    destobj, 0;
	__asm        je     _T2fa;
// LINE 1184:
	__asm        mov    result, 1;
// LINE 1185:
	__asm        jmp    _T301;
// LINE 1186:
_T2fa:
	__asm        mov    result, 0;
// LINE 1187:
_T301:
	__asm        jmp    _T483;
// LINE 1190:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   3;
	__asm        call   AutomobileClass::GetClosestCar;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1191:
	__asm        cmp    destobj, 0;
	__asm        je     _T341;
// LINE 1192:
	__asm        mov    result, 1;
// LINE 1193:
	__asm        jmp    _T348;
// LINE 1194:
_T341:
	__asm        mov    result, 0;
// LINE 1195:
_T348:
	__asm        jmp    _T483;
// LINE 1199:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   1;
	__asm        call   AutomobileClass::GetClosestCar;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1200:
	__asm        cmp    destobj, 0;
	__asm        je     _T388;
// LINE 1201:
	__asm        mov    result, 1;
// LINE 1202:
	__asm        jmp    _T38f;
// LINE 1203:
_T388:
	__asm        mov    result, 0;
// LINE 1204:
_T38f:
	__asm        jmp    _T483;
// LINE 1207:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   2;
	__asm        call   AutomobileClass::GetClosestCar;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1208:
	__asm        cmp    destobj, 0;
	__asm        je     _T3cf;
// LINE 1209:
	__asm        mov    result, 1;
// LINE 1210:
	__asm        jmp    _T3d6;
// LINE 1211:
_T3cf:
	__asm        mov    result, 0;
// LINE 1212:
_T3d6:
	__asm        jmp    _T483;
// LINE 1215:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetClosest;
	__asm        mov    obj, eax;
// LINE 1216:
	__asm        cmp    obj, 0;
	__asm        je     _T406;
// LINE 1217:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1218:
	__asm        jmp    _T40d;
// LINE 1219:
_T406:
	__asm        mov    result, 0;
// LINE 1221:
_T40d:
	__asm        jmp    _T483;
// LINE 1224:
// Block end:
_T412:
	__asm        push   0x8C085;
	__asm        push   0x5BD008;
	__asm        push   0x4C8;
	__asm        push   0x5BD028;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1225:
	__asm        jmp    _T483;
_T433:
	__asm        cmp    dword ptr [ebp-0x3C], 0xE;
	__asm        ja     _T412;

	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    SwitchPointers5605046[0][eax*4];
// Switch pointers
// LINE 1226:
_T483:
	__asm        cmp    result, 0;
	__asm        je     _T54a;
// LINE 1227:
// Block start:
	short dist;
	__asm        cmp    destobj, 0;
	__asm        je     _T4b9;
// LINE 1228:
	__asm        mov    eax, destobj;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    destloc.x, eax;
// LINE 1229:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, destobj;
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    destloc.y, eax;
// LINE 1232:
_T4b9:
	__asm        jmp    near ptr 0x0055872D;

	__asm        jmp    near ptr 0x00558732;

	__asm        jmp    near ptr 0x00558737;

	__asm        mov    eax, destloc.y;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  ecx, ax;
	__asm        mov    eax, destloc.x;
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0x88];
	__asm        sub    eax, ebx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    ecx, eax;
	__asm        jg     _T508;

	__asm        mov    ecx, eax;
_T508:
	__asm        movsx  eax, cx;
	__asm        and    eax, 0xFF;
	__asm        mov    dist, ax;
// LINE 1233:
	__asm        movsx  eax, dist;
	__asm        movsx  ecx, distance;
	__asm        cmp    eax, ecx;
	__asm        jl     _T530;
// LINE 1234:
	__asm        mov    result, 0;
// LINE 1235:
	__asm        jmp    _T54a;
// LINE 1236:
_T530:
	__asm        cmp    destobj, 0;
	__asm        je     _T543;
// LINE 1237:
	__asm        mov    eax, destobj;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1238:
_T543:
	__asm        mov    result, 1;
// LINE 1241:
// Block end:
_T54a:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005587C1;
// LINE 1242:
}

// FUNCTION: COPTER_D 0x005587c8
enum TreeSim::ReturnCode cYObject::iSelfDecommission(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1246:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1247:
	__asm        mov    ecx, this;
	__asm        call   cYObject::ResetToAmbient;
// LINE 1248:
	__asm        mov    result, 3;
// LINE 1250:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005587F2;
// LINE 1251:
}

// FUNCTION: COPTER_D 0x005587f9
enum TreeSim::ReturnCode cYObject::iGetOffMasterObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1255:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1256:
	__asm        mov    ecx, this;
	__asm        call   cYObject::CanJumpOffHere;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Tc1;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _T52;

	__asm        push   0x8C085;
	__asm        push   0x5BB998;
	__asm        push   0x41E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T52:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
	__asm        mov    [ebp-8], ax;
	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    _T89;

	__asm        push   0x8C085;
	__asm        push   0x5BB978;
	__asm        push   0x420;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T89:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetAlt;
	__asm        add    esp, 0xC;
	__asm        lea    eax, [eax+0x30000];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x005588B0;

	__asm        jmp    _Td8;

	__asm        jmp    _Tcb;
_Tc1:
	__asm        jmp    _Te4;

	__asm        jmp    _Td8;
_Tcb:
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        je     _Te4;
// LINE 1257:
_Td8:
	__asm        mov    result, 1;
// LINE 1258:
	__asm        jmp    _Teb;
// LINE 1259:
_Te4:
	__asm        mov    result, 0;
// LINE 1261:
_Teb:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005588EC;
// LINE 1262:
}

// FUNCTION: COPTER_D 0x005588f3
enum TreeSim::ReturnCode cYObject::iTurnTowardsStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1266:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1267:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD04C;
	__asm        push   0x4F3;
	__asm        push   0x5BD064;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
// LINE 1268:
	__asm        jmp    near ptr 0x0055893D;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1269:
	__asm        mov    result, 1;
// LINE 1271:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558983;
// LINE 1272:
}

// FUNCTION: COPTER_D 0x0055898a
enum TreeSim::ReturnCode cYObject::iIsThisLocType(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IsThisLocTypeParam param;
	union YObjLang::Param* nparam;
	enum cYObject::LocationType loctype;
	enum TreeSim::ReturnCode result;

// LINE 1276:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1277:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.locTypeLiteral, ax;
// LINE 1278:
	__asm        movsx  eax, param.locTypeLiteral;
	__asm        mov    loctype, eax;
// LINE 1279:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        cmp    eax, loctype;
	__asm        jne    _T62;
// LINE 1280:
	__asm        mov    result, 1;
// LINE 1281:
	__asm        jmp    _T69;
// LINE 1282:
_T62:
	__asm        mov    result, 0;
// LINE 1284:
_T69:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005589FB;
// LINE 1285:
}

// FUNCTION: COPTER_D 0x00558a02
enum TreeSim::ReturnCode cYObject::iIsThisLocTypeNeutral(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum cYObject::LocationType loctype;
	enum TreeSim::ReturnCode result;

// LINE 1289:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1290:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1291:
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        jmp    _T45;
_T41:
	__asm        inc    word ptr [ebp-0xC];
_T45:
	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        cmp    eax, 0xA;
	__asm        jge    _T80;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0xC];
	__asm        shl    ecx, 2;
	__asm        mov    edx, loctype;
	__asm        cmp    cYObject::sNeutralPersonLocs[0][0][ecx+eax*8], edx;
	__asm        jne    _T7b;

	__asm        jmp    _T97;
_T7b:
	__asm        jmp    _T41;
_T80:
	__asm        jmp    _Ta3;

	__asm        jmp    _T97;

	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        je     _Ta3;
// LINE 1292:
_T97:
	__asm        mov    result, 1;
// LINE 1293:
	__asm        jmp    _Taa;
// LINE 1294:
_Ta3:
	__asm        mov    result, 0;
// LINE 1296:
_Taa:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558AB4;
// LINE 1297:
}

// FUNCTION: COPTER_D 0x00558abb
enum TreeSim::ReturnCode cYObject::iCanJumpOffHere(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1301:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1302:
	__asm        mov    ecx, this;
	__asm        call   cYObject::CanJumpOffHere;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T32;
// LINE 1303:
	__asm        mov    result, 1;
// LINE 1304:
	__asm        jmp    _T39;
// LINE 1305:
_T32:
	__asm        mov    result, 0;
// LINE 1307:
_T39:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558AFC;
// LINE 1308:
}

// FUNCTION: COPTER_D 0x00558b03
enum TreeSim::ReturnCode cYObject::iCheckForSpotlightInMyCell(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::CheckForSpotParam param;
	struct Point2d loc;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1312:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1313:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(param.brightnessTemp), eax;
// LINE 1315:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        call   S3HeliGetSpotLoc;
	__asm        add    esp, 4;
// LINE 1316:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, loc.x;
	__asm        jne    _T183;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, loc.y;
	__asm        jne    _T183;
// LINE 1317:
	__asm        movsx  eax, param.brightnessTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T72;

	__asm        movsx  eax, param.brightnessTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T8e;
_T72:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8e:
	__asm        jmp    near ptr 0x00558B96;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.brightnessTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00558BBF;

	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
// LINE 1318:
	__asm        movsx  eax, param.dirToHeliTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Te7;

	__asm        movsx  eax, param.dirToHeliTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T103;
_Te7:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T103:
	__asm        jmp    near ptr 0x00558C0B;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirToHeliTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00558C34;

	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00558C47;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
// LINE 1319:
	__asm        mov    result, 1;
// LINE 1321:
	__asm        jmp    _T18a;
// LINE 1322:
_T183:
	__asm        mov    result, 0;
// LINE 1324:
_T18a:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558C95;
// LINE 1325:
}

// FUNCTION: COPTER_D 0x00558c9c
enum TreeSim::ReturnCode cYObject::iIncrementRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IncrementRiotValParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1329:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1330:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.riotValLiteral, ax;
// LINE 1331:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xE0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE4], ax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        movsx  ecx, param.riotValLiteral;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE0], ax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 0xA;
	__asm        jle    _T78;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0xA;
	__asm        jmp    _T96;
_T78:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        jge    _T96;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0;
_T96:
	__asm        jmp    near ptr 0x00558D37;
// LINE 1332:
	__asm        mov    result, 1;
// LINE 1334:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558D46;
// LINE 1335:
}

// FUNCTION: COPTER_D 0x00558d4d
enum TreeSim::ReturnCode cYObject::iGetSurroundingRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short numcounted;
	short todist;
	short dirtoconc;
	struct YObjLang::GetSurroundingRiotValParam param;
	union YObjLang::Param* nparam;
	short actualriotval;
	enum TreeSim::ReturnCode result;

// LINE 1339:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1340:
	__asm        mov    eax, nparam;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    reinterpret_cast<uint32_t>(param.distTemp), ecx;
	__asm        mov    reinterpret_cast<uint32_t>(param.riotValTemp), eax;
// LINE 1341:
	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T53;

	__asm        push   0x8C085;
	__asm        push   0x5BD088;
	__asm        push   0x53D;
	__asm        push   0x5BD09C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1342:
_T53:
	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T6d;

	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T89;
_T6d:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T89:
	__asm        jmp    near ptr 0x00558DDB;

	__asm        jmp    near ptr 0x00558DE0;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.distTemp;
	__asm        mov    ax, [eax+ecx*2+8];
	__asm        mov    todist, ax;
// LINE 1344:
	__asm        lea    eax, dirtoconc;
	__asm        push   eax;
	__asm        lea    eax, numcounted;
	__asm        push   eax;
	__asm        lea    eax, actualriotval;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(todist);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetSurroundingRiotInfo;
// LINE 1345:
	__asm        movsx  eax, param.dirToConcTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Te9;

	__asm        movsx  eax, param.dirToConcTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T105;
_Te9:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T105:
	__asm        jmp    near ptr 0x00558E57;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirToConcTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00558E80;

	__asm        mov    ax, dirtoconc;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], ax;
// LINE 1346:
	__asm        movsx  eax, param.riotValTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T157;

	__asm        movsx  eax, param.riotValTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T173;
_T157:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T173:
	__asm        jmp    near ptr 0x00558EC5;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.riotValTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00558EEE;

	__asm        mov    ax, actualriotval;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], ax;
// LINE 1347:
	__asm        movsx  eax, param.numPeopleCountedTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T1c5;

	__asm        movsx  eax, param.numPeopleCountedTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T1e1;
_T1c5:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1e1:
	__asm        jmp    near ptr 0x00558F33;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.numPeopleCountedTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00558F5C;

	__asm        mov    ax, numcounted;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], ax;
// LINE 1348:
	__asm        mov    result, 1;
// LINE 1350:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558F75;
// LINE 1351:
}

// FUNCTION: COPTER_D 0x00558f7c
enum TreeSim::ReturnCode cYObject::iIsThisScurkID(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short scurkID;
	struct YObjLang::IsThisScurkIDParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1355:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1356:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.scurkIDLiteral, ax;
// LINE 1357:
	__asm        mov    ax, param.scurkIDLiteral;
	__asm        mov    scurkID, ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    [ebp-0x18], ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    [ebp-0x1C], ax;
// LINE 1358:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T7e;

	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T7e;

	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     _T7e;

	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jge    _T90;
_T7e:
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    _T110;

	__asm        jmp    _T104;
_T90:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        mov    eax, BuildMap[eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x18];
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     _Tc3;

	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x100;
	__asm        jl     _Tdf;
_Tc3:
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tdf:
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    _T110;

	__asm        jmp    _T104;

	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    _T110;
// LINE 1359:
_T104:
	__asm        mov    result, 1;
// LINE 1360:
	__asm        jmp    _T117;
// LINE 1361:
_T110:
	__asm        mov    result, 0;
// LINE 1363:
_T117:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055909B;
// LINE 1364:
}

// FUNCTION: COPTER_D 0x005590a2
enum TreeSim::ReturnCode cYObject::iGosubToInitbhav(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short id;
	enum TreeSim::ReturnCode result;

// LINE 1368:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1370:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        mov    id, ax;
// LINE 1371:
	__asm        jmp    near ptr 0x005590C8;

	__asm        jmp    near ptr 0x005590CD;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        je     _Tb4;

	__asm        jmp    near ptr 0x005590F9;

	__asm        jmp    near ptr 0x005590FE;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     _T8f;

	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T8f:
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Gosub;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _Te2;

	__asm        jmp    _Tc6;

	__asm        jmp    _Tb9;
_Tb4:
	__asm        jmp    _Tc6;
_Tb9:
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    _Te2;
// LINE 1372:
_Tc6:
	__asm        push   0x8C085;
	__asm        push   0x5BD0C0;
	__asm        push   0x55C;
	__asm        push   0x5BD0D0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1374:
_Te2:
	__asm        mov    result, 1;
// LINE 1376:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559193;
// LINE 1377:
}

// FUNCTION: COPTER_D 0x0055919a
enum TreeSim::ReturnCode cYObject::iAdjustRadiusForRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1381:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1382:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 5;
	__asm        jle    _T43;

	__asm        push   0x20000;
	__asm        push   0x50000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    _T4d;
_T43:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
_T4d:
	__asm        jmp    near ptr 0x005591EC;
// LINE 1383:
	__asm        mov    result, 1;
// LINE 1385:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005591FB;
// LINE 1386:
}

// FUNCTION: COPTER_D 0x00559202
enum TreeSim::ReturnCode cYObject::iJoinRiot(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1390:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1391:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T5d;

	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5d:
	__asm        jmp    near ptr 0x00559264;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T92;

	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T92:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Te1;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Tdc;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tdc:
	__asm        jmp    _T114;
_Te1:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T114;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T114:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T135;

	__asm        jmp    _T166;

	__asm        jmp    _T135;
_T135:
	__asm        jmp    _T14a;

	__asm        test   dword ptr [ebp-0x88], 0xFFFF;
	__asm        jne    _T166;
_T14a:
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T166:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T228;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1fd;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1d5;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x80], ax;
	__asm        jmp    _T1eb;

	__asm        jmp    _T1e0;
_T1d5:
	__asm        mov    word ptr [ebp-0x80], 0xFFFF;
	__asm        jmp    _T1eb;
_T1e0:
	__asm        mov    ax, [ebp-0x84];
	__asm        mov    [ebp-0x80], ax;
_T1eb:
	__asm        jmp    near ptr 0x005593F2;

	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T1fd:
	__asm        jmp    near ptr 0x00559404;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T228:
	__asm        jmp    near ptr 0x0055942F;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        jne    _T287;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T295;
_T287:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T295:
	__asm        jmp    near ptr 0x0055949C;

	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        test   eax, eax;
	__asm        jl     _T2b8;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        test   eax, eax;
	__asm        jge    _T2d4;
_T2b8:
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2d4:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Unlink;
	__asm        jmp    near ptr 0x005594E6;
// LINE 1392:
	__asm        mov    ecx, this;
	__asm        call   cYObject::JoinRiot;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T319;
// LINE 1393:
	__asm        mov    lstr.szLogString, 0x5BD0F4;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   S3AddLogEntry;
	__asm        add    esp, 8;
// LINE 1395:
	__asm        mov    result, 3;
// LINE 1397:
	__asm        jmp    _T320;
// LINE 1398:
_T319:
	__asm        mov    result, 0;
// LINE 1399:
_T320:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     _T351;

	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T351:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TreeSim::Reset;
	__asm        jmp    near ptr 0x0055957E;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T3c7;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T3d5;
_T3c7:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        inc    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T3d5:
	__asm        jmp    near ptr 0x005595DC;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        movsx  ecx, cYObject::sNumMissionAwake;
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    _T40f;

	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T40f:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T45e;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T459;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T459:
	__asm        jmp    _T491;
_T45e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T491;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T491:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T4b2;

	__asm        jmp    _T4e0;

	__asm        jmp    _T4b2;
_T4b2:
	__asm        jmp    _T4c4;

	__asm        test   dword ptr [ebp-0x78], 0xFFFF;
	__asm        jne    _T4e0;
_T4c4:
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T4e0:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x005596F2;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T520;

	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T520:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x74];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   memcpy;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00559773;

	__asm        jmp    near ptr 0x00559778;
// LINE 1401:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559780;
// LINE 1402:
}

// FUNCTION: COPTER_D 0x00559787
enum TreeSim::ReturnCode cYObject::iSetDirection(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetDirectionParam param;
	union YObjLang::Param* nparam;
	short count;
	enum TreeSim::ReturnCode result;

// LINE 1406:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1407:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.dirTemp, ax;
// LINE 1408:
	__asm        movsx  eax, param.dirTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T40;

	__asm        movsx  eax, param.dirTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T5c;
_T40:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T5c:
	__asm        jmp    near ptr 0x005597E8;

	__asm        jmp    near ptr 0x005597ED;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirTemp;
	__asm        mov    ax, [eax+ecx*2+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1409:
	__asm        mov    count, 0;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        cmp    eax, 0xFFFFFFE2;
	__asm        jle    _Tbc;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        cmp    eax, 0x1E;
	__asm        jl     _Td8;
_Tbc:
	__asm        push   0x8C085;
	__asm        push   0x5BD100;
	__asm        push   0x582;
	__asm        push   0x5BD11C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1411:
_Td8:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        test   eax, eax;
	__asm        jge    _T106;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
	__asm        jmp    _Td8;
// LINE 1413:
_T106:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1414:
	__asm        mov    result, 1;
// LINE 1416:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005598B3;
// LINE 1417:
}

// FUNCTION: COPTER_D 0x005598ba
enum TreeSim::ReturnCode cYObject::iThrowProjectile(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct Point3d personunitvect;
	struct Point3d debrisunitvect;
	struct Point2d celloc;
	struct Point3d loc;
	long what;
	int32_t mat[4][4];
	int32_t speed;
	enum TreeSim::ReturnCode result;
	long scale;

// LINE 1421:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1422:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T42;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T42:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T68;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x5468726F;
	__asm        je     _Tb0;
_T68:
	__asm        push   0x5468726F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _Tb0;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb0:
	__asm        jmp    near ptr 0x0055996F;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    celloc.x, ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    celloc.y, ecx;
// LINE 1424:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1425:
	__asm        mov    scale, 1;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, cYObject::sMoveTable[0].x[eax*4];
	__asm        lea    ecx, personunitvect.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1429:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1431:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xC8;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1432:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        lea    eax, debrisunitvect.x;
	__asm        push   eax;
	__asm        lea    eax, personunitvect.x;
	__asm        push   eax;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1433:
	__asm        call   rand;
	__asm        mov    ecx, 0x32;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x32];
	__asm        shl    eax, 0x10;
	__asm        mov    speed, eax;
// LINE 1434:
	__asm        mov    what, 0xA;
// LINE 1435:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x3C;
	__asm        jne    _T194;
// LINE 1436:
	__asm        mov    what, 4;
// LINE 1437:
_T194:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        lea    eax, debrisunitvect.x;
	__asm        push   eax;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        mov    eax, what;
	__asm        push   eax;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1438:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    _T1ee;

	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1ee:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     _T214;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     _T25c;
_T214:
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   cCopterBody::GetPrivateAnim;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    _T25c;

	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T25c:
	__asm        jmp    near ptr 0x00559B1B;
// LINE 1439:
	__asm        mov    result, 1;
// LINE 1441:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559B2A;
// LINE 1442:
}

// FUNCTION: COPTER_D 0x00559b31
enum TreeSim::ReturnCode cYObject::iTurnFromStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1446:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1447:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD140;
	__asm        push   0x5A7;
	__asm        push   0x5BD15C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
// LINE 1448:
	__asm        jmp    near ptr 0x00559B7B;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        add    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1449:
	__asm        mov    result, 1;
// LINE 1451:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559BC1;
// LINE 1452:
}

// FUNCTION: COPTER_D 0x00559bc8
enum TreeSim::ReturnCode cYObject::iTurnFromLastHitter(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1456:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        jne    _T3f;

	__asm        push   0x8C085;
	__asm        push   0x5BD180;
	__asm        push   0x5B1;
	__asm        push   0x5BD190;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-8], eax;
// LINE 1458:
	__asm        jmp    near ptr 0x00559C18;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        add    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1459:
	__asm        mov    result, 1;
// LINE 1461:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559C5E;
// LINE 1462:
}

// FUNCTION: COPTER_D 0x00559c65
enum TreeSim::ReturnCode cYObject::iTurnTowardsLastHitter(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1466:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1467:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        jne    _T3f;

	__asm        push   0x8C085;
	__asm        push   0x5BD1B4;
	__asm        push   0x5BB;
	__asm        push   0x5BD1C4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T3f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-8], eax;
// LINE 1468:
	__asm        jmp    near ptr 0x00559CB5;

	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1469:
	__asm        mov    result, 1;
// LINE 1471:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559CFB;
// LINE 1472:
}

// FUNCTION: COPTER_D 0x00559d02
enum TreeSim::ReturnCode cYObject::iGetOutOfRoadEtc(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::GetOutOfRoadParam getoutofroad;
	union YObjLang::Param* nparam;
	enum cYObject::LocationType loctype;
	enum cYObject::MoveErrorCode movecode;
	enum TreeSim::ReturnCode result;

// LINE 1476:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1477:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    getoutofroad.decTemp, ax;
// LINE 1479:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     _T54;

	__asm        push   0x8C085;
	__asm        push   0x5BD1E8;
	__asm        push   0x5C7;
	__asm        push   0x5BD220;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1480:
_T54:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
	__asm        jmp    near ptr 0x00559D7E;
// LINE 1486:
	__asm        cmp    loctype, 7;
	__asm        je     _Tc4;

	__asm        cmp    loctype, 8;
	__asm        je     _Tc4;

	__asm        cmp    loctype, 6;
	__asm        je     _Tc4;

	__asm        cmp    loctype, 9;
	__asm        je     _Tc4;

	__asm        cmp    loctype, 0xFFFFFFFF;
	__asm        je     _Tc4;

	__asm        cmp    loctype, 1;
	__asm        je     _Tc4;
// LINE 1487:
	__asm        mov    result, 1;
// LINE 1489:
	__asm        jmp    _T20d;
_Tc4:
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Tde;

	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _Tfa;
_Tde:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tfa:
	__asm        jmp    near ptr 0x00559E01;

	__asm        jmp    near ptr 0x00559E06;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, getoutofroad.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    _T13f;
// LINE 1490:
	__asm        mov    movecode, 8;
// LINE 1491:
	__asm        mov    result, 0;
// LINE 1493:
	__asm        jmp    _T20d;
// LINE 1495:
// Block start:
	struct cYObject::MoveInfo moveinfo;
	short speed;
_T13f:
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T159;

	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     _T175;
_T159:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T175:
	__asm        jmp    near ptr 0x00559E7C;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, getoutofroad.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00559EA5;

	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    word ptr [eax];
// LINE 1499:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   Memory::BlockFill;
	__asm        add    esp, 0xC;
// LINE 1500:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    speed, ax;
// LINE 1501:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::TryTableMove;
	__asm        mov    movecode, eax;
// LINE 1518:
	__asm        cmp    movecode, 0;
	__asm        jne    _T1f2;
// LINE 1519:
	__asm        mov    result, 2;
// LINE 1520:
	__asm        jmp    _T1f9;
// LINE 1521:
_T1f2:
	__asm        mov    result, 0;
// LINE 1522:
_T1f9:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::DynEffects;
// LINE 1526:
// Block end:
_T20d:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559F17;
// LINE 1527:
}

// FUNCTION: COPTER_D 0x00559f1e
enum TreeSim::ReturnCode cYObject::iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1531:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1533:
	__asm        mov    lstr.szLogString, 0x5BD244;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   S3AddLogEntry;
	__asm        add    esp, 8;
// LINE 1536:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Die;
// LINE 1537:
	__asm        mov    result, 3;
// LINE 1539:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559F6D;
// LINE 1540:
}

// FUNCTION: COPTER_D 0x00559f74
enum TreeSim::ReturnCode cYObject::iTurnToNearbyFire(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::TurnToFireParam param;
	union YObjLang::Param* nparam;
	short firecellx;
	short firecelly;
	enum TreeSim::ReturnCode result;

// LINE 1544:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1545:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(param.xdistloc), eax;
// LINE 1547:
	__asm        lea    eax, firecelly;
	__asm        push   eax;
	__asm        lea    eax, firecellx;
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetNearbyFire;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T1d1;

	__asm        mov    ax, firecelly;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    ax, firecellx;
	__asm        mov    [ebp-0x28], ax;
// LINE 1548:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, word ptr [ebp-0x28];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00559FEA;

	__asm        mov    eax, [ebp-0x20];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   S3PUtilsGetDir;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1549:
	__asm        movsx  eax, param.xdistloc;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Tcf;

	__asm        movsx  eax, param.xdistloc;
	__asm        cmp    eax, 4;
	__asm        jl     _Teb;
_Tcf:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Teb:
	__asm        jmp    near ptr 0x0055A064;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.xdistloc;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0055A08D;

	__asm        movsx  eax, firecellx;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
	__asm        jmp    near ptr 0x0055A0B1;
// LINE 1550:
	__asm        movsx  eax, param.ydistloc;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T157;

	__asm        movsx  eax, param.ydistloc;
	__asm        cmp    eax, 4;
	__asm        jl     _T173;
_T157:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T173:
	__asm        jmp    near ptr 0x0055A0EC;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.ydistloc;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055A115;

	__asm        movsx  eax, firecelly;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
	__asm        jmp    near ptr 0x0055A139;
// LINE 1551:
	__asm        mov    result, 1;
// LINE 1553:
	__asm        jmp    _T1d8;
// LINE 1554:
_T1d1:
	__asm        mov    result, 0;
// LINE 1556:
_T1d8:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A154;
// LINE 1557:
}

// FUNCTION: COPTER_D 0x0055a15b
enum TreeSim::ReturnCode cYObject::iDie(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1561:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1562:
	__asm        mov    lstr.szLogString, 0x5BD250;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   S3AddLogEntry;
	__asm        add    esp, 8;
// LINE 1564:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Die;
// LINE 1565:
	__asm        mov    result, 3;
// LINE 1567:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A1AA;
// LINE 1568:
}

// FUNCTION: COPTER_D 0x0055a1b1
enum TreeSim::ReturnCode cYObject::iWalkToStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
// LINE 1572:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::iWalkToAndGrabOntoStackObject;
	__asm        jmp    near ptr 0x0055A1D2;
// LINE 1573:
}

// FUNCTION: COPTER_D 0x0055a1d9
enum TreeSim::ReturnCode cYObject::iPutObjIntoTreeNum(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	short treenum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1577:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1578:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1579:
	__asm        cmp    obj, 0;
	__asm        jne    _T54;

	__asm        push   0x8C085;
	__asm        push   0x5BD264;
	__asm        push   0x62B;
	__asm        push   0x5BD26C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1580:
_T54:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    treenum, ax;
// LINE 1582:
	__asm        jmp    near ptr 0x0055A23C;

	__asm        jmp    near ptr 0x0055A241;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, obj;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, treenum;
	__asm        cmp    eax, ecx;
	__asm        je     _Te6;

	__asm        jmp    near ptr 0x0055A26D;

	__asm        jmp    near ptr 0x0055A272;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, obj;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     _Tcc;

	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tcc:
	__asm        mov    eax, reinterpret_cast<uint32_t>(treenum);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   TreeSim::Gosub;
	__asm        jmp    _Teb;

	__asm        jmp    _Teb;
_Te6:
	__asm        jmp    _Teb;
// LINE 1583:
_Teb:
	__asm        mov    result, 1;
// LINE 1585:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A2D3;
// LINE 1586:
}

// FUNCTION: COPTER_D 0x0055a2da
enum TreeSim::ReturnCode cYObject::iVisitOz(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1590:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1591:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T41;

	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T41:
	__asm        jmp    near ptr 0x0055A320;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _T73;

	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T73:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Tbc;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _Tb7;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tb7:
	__asm        jmp    _Tec;
_Tbc:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _Tec;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tec:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T10a;

	__asm        jmp    _T138;

	__asm        jmp    _T10a;
_T10a:
	__asm        jmp    _T11c;

	__asm        test   dword ptr [ebp-0x14], 0xFFFF;
	__asm        jne    _T138;
_T11c:
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T138:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1e2;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1bd;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T198;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0xC], ax;
	__asm        jmp    _T1ab;

	__asm        jmp    _T1a3;
_T198:
	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
	__asm        jmp    _T1ab;
_T1a3:
	__asm        mov    ax, [ebp-0x10];
	__asm        mov    [ebp-0xC], ax;
_T1ab:
	__asm        jmp    near ptr 0x0055A48A;

	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T1bd:
	__asm        jmp    near ptr 0x0055A49C;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T1e2:
	__asm        jmp    near ptr 0x0055A4C1;

	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T235;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T243;
_T235:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T243:
	__asm        jmp    near ptr 0x0055A522;

	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        test   eax, eax;
	__asm        jl     _T266;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        test   eax, eax;
	__asm        jge    _T282;
_T266:
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T282:
	__asm        mov    ecx, this;
	__asm        call   cYObject::Unlink;
	__asm        jmp    near ptr 0x0055A569;
// LINE 1592:
	__asm        mov    result, 2;
// LINE 1594:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A578;
// LINE 1595:
}

// FUNCTION: COPTER_D 0x0055a57f
enum TreeSim::ReturnCode cYObject::iMakeMyMedevacVictimVisible(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1599:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1600:
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        mov    obj, eax;
// LINE 1601:
	__asm        cmp    obj, 0;
	__asm        jne    _T44;

	__asm        push   0x8C085;
	__asm        push   0x5BD290;
	__asm        push   0x641;
	__asm        push   0x5BD2A4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1602:
_T44:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _T73;

	__asm        push   0x8C085;
	__asm        push   0x5BD2C8;
	__asm        push   0x642;
	__asm        push   0x5BD2E8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1603:
_T73:
	__asm        jmp    near ptr 0x0055A5F7;

	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _Ta9;

	__asm        push   0x8C085;
	__asm        push   0x5BD30C;
	__asm        push   0x643;
	__asm        push   0x5BD338;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1604:
_Ta9:
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 1605:
	__asm        mov    result, 1;
// LINE 1607:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A643;
// LINE 1608:
}

// FUNCTION: COPTER_D 0x0055a64a
enum TreeSim::ReturnCode cYObject::iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1612:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1613:
	__asm        push   0x8C085;
	__asm        push   0x5BD35C;
	__asm        push   0x64D;
	__asm        push   0x5BD378;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1615:
	__asm        mov    result, 1;
// LINE 1617:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A688;
// LINE 1618:
}

// FUNCTION: COPTER_D 0x0055a68f
enum TreeSim::ReturnCode cYObject::iMakeMeMasterOfStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1622:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1623:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD39C;
	__asm        push   0x657;
	__asm        push   0x5BD3D0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1624:
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1625:
	__asm        cmp    obj, 0;
	__asm        jne    _T74;

	__asm        push   0x8C085;
	__asm        push   0x5BD3F4;
	__asm        push   0x659;
	__asm        push   0x5BD3FC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1626:
_T74:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, obj;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Unlink;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, obj;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0xC], al;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x10], al;
	__asm        jmp    near ptr 0x0055A74E;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     _Tec;

	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tec:
	__asm        mov    al, [ebp-0x10];
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0xC];
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0055A798;

	__asm        mov    ecx, obj;
	__asm        call   cYObject::Link;
	__asm        jmp    near ptr 0x0055A7A5;
// LINE 1627:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetMaster;
// LINE 1628:
	__asm        mov    result, 1;
// LINE 1630:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A7C3;
// LINE 1631:
}

// FUNCTION: COPTER_D 0x0055a7ca
enum TreeSim::ReturnCode cYObject::iMakeMyStackObjectVisitOz(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1635:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1636:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD420;
	__asm        push   0x664;
	__asm        push   0x5BD43C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1637:
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1638:
	__asm        cmp    obj, 0;
	__asm        jne    _T74;

	__asm        push   0x8C085;
	__asm        push   0x5BD460;
	__asm        push   0x666;
	__asm        push   0x5BD468;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1639:
_T74:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _Ta2;

	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Ta2:
	__asm        jmp    near ptr 0x0055A871;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    _Td4;

	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Td4:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T11d;

	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T118;

	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T118:
	__asm        jmp    _T14d;
_T11d:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    _T14d;

	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T14d:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     _T16b;

	__asm        jmp    _T199;

	__asm        jmp    _T16b;
_T16b:
	__asm        jmp    _T17d;

	__asm        test   dword ptr [ebp-0x18], 0xFFFF;
	__asm        jne    _T199;
_T17d:
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T199:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T243;

	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T21e;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T1f9;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x10], ax;
	__asm        jmp    _T20c;

	__asm        jmp    _T204;
_T1f9:
	__asm        mov    word ptr [ebp-0x10], 0xFFFF;
	__asm        jmp    _T20c;
_T204:
	__asm        mov    ax, [ebp-0x14];
	__asm        mov    [ebp-0x10], ax;
_T20c:
	__asm        jmp    near ptr 0x0055A9DB;

	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        push   eax;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
_T21e:
	__asm        jmp    near ptr 0x0055A9ED;

	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    cYObject::sSoundChannels[eax*2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
_T243:
	__asm        jmp    near ptr 0x0055AA12;

	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T296;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumAmbientAwake, ax;
	__asm        jmp    _T2a4;
_T296:
	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        dec    eax;
	__asm        mov    cYObject::sNumMissionAwake, ax;
_T2a4:
	__asm        jmp    near ptr 0x0055AA73;

	__asm        movsx  eax, cYObject::sNumMissionAwake;
	__asm        test   eax, eax;
	__asm        jl     _T2c7;

	__asm        movsx  eax, cYObject::sNumAmbientAwake;
	__asm        test   eax, eax;
	__asm        jge    _T2e3;
_T2c7:
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T2e3:
	__asm        mov    ecx, obj;
	__asm        call   cYObject::Unlink;
	__asm        jmp    near ptr 0x0055AABA;
// LINE 1640:
	__asm        mov    result, 1;
// LINE 1642:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AAC9;
// LINE 1643:
}

// FUNCTION: COPTER_D 0x0055aad0
enum TreeSim::ReturnCode cYObject::iPutTotedMedVicOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1647:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
// LINE 1648:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _T42;

	__asm        push   0x8C085;
	__asm        push   0x5BBE90;
	__asm        push   0x3FF;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T42:
	__asm        mov    ecx, this;
	__asm        call   cYObject::GetToted;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1df;

	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _T86;

	__asm        push   0x8C085;
	__asm        push   0x5BBE70;
	__asm        push   0x402;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T86:
	__asm        jmp    near ptr 0x0055AB5B;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _Tbc;

	__asm        push   0x8C085;
	__asm        push   0x5BBE44;
	__asm        push   0x403;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Tbc:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    _Te2;

	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te2:
	__asm        jmp    near ptr 0x0055ABB7;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, [ebp-0xC];
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, [ebp-0xC];
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x14], ax;
	__asm        jmp    near ptr 0x0055ABEF;

	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    _T135;

	__asm        jmp    _T14c;
_T135:
	__asm        jmp    _T168;

	__asm        jmp    _T14c;

	__asm        test   dword ptr [ebp-0x18], 0xFFFF;
	__asm        jne    _T168;
_T14c:
	__asm        push   0x8C085;
	__asm        push   0x5BBE24;
	__asm        push   0x405;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T168:
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   cYObject::SetMaster;
	__asm        mov    [ebp-0x10], ax;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    _T1a1;

	__asm        push   0x8C085;
	__asm        push   0x5BBDE4;
	__asm        push   0x407;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1a1:
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     _T1cf;

	__asm        push   0x8C085;
	__asm        push   0x5BBDC8;
	__asm        push   0x408;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T1cf:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
	__asm        jmp    _T1f1;

	__asm        jmp    _T1eb;
_T1df:
	__asm        mov    obj, 0;
	__asm        jmp    _T1f1;
_T1eb:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 1649:
_T1f1:
	__asm        cmp    obj, 0;
	__asm        je     _T213;
// LINE 1650:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1651:
	__asm        mov    result, 1;
// LINE 1653:
	__asm        jmp    _T21a;
// LINE 1654:
_T213:
	__asm        mov    result, 0;
// LINE 1656:
_T21a:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055ACF2;
// LINE 1657:
}

// FUNCTION: COPTER_D 0x0055acf9
enum TreeSim::ReturnCode cYObject::iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1661:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1662:
	__asm        jmp    near ptr 0x0055AD11;

	__asm        push   0;
	__asm        push   6;
	__asm        call   cYObject::GetFirst;
	__asm        add    esp, 8;
	__asm        mov    obj, eax;
// LINE 1663:
	__asm        cmp    obj, 0;
	__asm        je     _Te1;
// LINE 1664:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     _T5f;

	__asm        push   0x8C085;
	__asm        push   0x5BD48C;
	__asm        push   0x680;
	__asm        push   0x5BD494;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1665:
_T5f:
	__asm        jmp    near ptr 0x0055AD5D;

	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    _T90;

	__asm        push   0x8C085;
	__asm        push   0x5BD4B8;
	__asm        push   0x681;
	__asm        push   0x5BD4C0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1666:
_T90:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   cYObject::SetMaster;
// LINE 1667:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        cmp    eax, 1;
	__asm        je     _Tc9;

	__asm        push   0x8C085;
	__asm        push   0x5BD4E4;
	__asm        push   0x683;
	__asm        push   0x5BD4EC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1668:
_Tc9:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1669:
	__asm        mov    result, 1;
// LINE 1671:
	__asm        jmp    _Te8;
// LINE 1672:
_Te1:
	__asm        mov    result, 0;
// LINE 1674:
_Te8:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055ADE9;
// LINE 1675:
}

// FUNCTION: COPTER_D 0x0055adf0
enum TreeSim::ReturnCode cYObject::iGetOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1679:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1680:
	__asm        push   0x8C085;
	__asm        push   0x5BD510;
	__asm        push   0x690;
	__asm        push   0x5BD524;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1681:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T58;

	__asm        push   0x8C085;
	__asm        push   0x5BD548;
	__asm        push   0x691;
	__asm        push   0x5BD578;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T58:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
// LINE 1682:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T87;

	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T87:
	__asm        jmp    near ptr 0x0055AE7C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x0055AEB4;

	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    _Tda;

	__asm        jmp    _Tf1;
_Tda:
	__asm        jmp    _T10d;

	__asm        jmp    _Tf1;

	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    _T10d;
_Tf1:
	__asm        push   0x8C085;
	__asm        push   0x5BD59C;
	__asm        push   0x692;
	__asm        push   0x5BD5C0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1683:
_T10d:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T133;
// LINE 1684:
	__asm        mov    result, 1;
// LINE 1685:
	__asm        jmp    _T13a;
// LINE 1686:
_T133:
	__asm        mov    result, 0;
// LINE 1688:
_T13a:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AF32;
// LINE 1689:
}

// FUNCTION: COPTER_D 0x0055af39
enum TreeSim::ReturnCode cYObject::iUpdateStackVictimToted(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1693:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1694:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD5E4;
	__asm        push   0x69E;
	__asm        push   0x5BD5F4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1695:
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1696:
	__asm        cmp    obj, 0;
	__asm        jne    _T74;

	__asm        push   0x8C085;
	__asm        push   0x5BD618;
	__asm        push   0x6A0;
	__asm        push   0x5BD65C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1697:
_T74:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _Ta3;

	__asm        push   0x8C085;
	__asm        push   0x5BD680;
	__asm        push   0x6A1;
	__asm        push   0x5BD6A4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1698:
_Ta3:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   7;
	__asm        mov    ecx, this;
	__asm        call   cYObject::UpdateMission;
// LINE 1699:
	__asm        mov    result, 1;
// LINE 1701:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AFFC;
// LINE 1702:
}

// FUNCTION: COPTER_D 0x0055b003
enum TreeSim::ReturnCode cYObject::iGetNumSpacesOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short localnum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1706:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1707:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T45;

	__asm        push   0x8C085;
	__asm        push   0x5BD6C8;
	__asm        push   0x6AB;
	__asm        push   0x5BD6FC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1709:
_T45:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    localnum, ax;
// LINE 1710:
	__asm        mov    eax, elem;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    _Te9;
// LINE 1711:
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T81;

	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 4;
	__asm        jl     _T9d;
_T81:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T9d:
	__asm        jmp    near ptr 0x0055B0A5;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, localnum;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0055B0CE;

	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerCountFreeSeats;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], ax;
// LINE 1712:
	__asm        jmp    _T188;
_Te9:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _T16c;
// LINE 1713:
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T115;

	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 4;
	__asm        jl     _T131;
_T115:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T131:
	__asm        jmp    near ptr 0x0055B139;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, localnum;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055B162;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    word ptr [eax], 0x1721;
// LINE 1714:
	__asm        jmp    _T188;
// LINE 1715:
_T16c:
	__asm        push   0x8C085;
	__asm        push   0x5BD720;
	__asm        push   0x6B3;
	__asm        push   0x5BD740;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1716:
_T188:
	__asm        mov    result, 1;
// LINE 1718:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B19A;
// LINE 1719:
}

// FUNCTION: COPTER_D 0x0055b1a1
enum TreeSim::ReturnCode cYObject::iDropToted(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1723:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1724:
	__asm        mov    ecx, this;
	__asm        call   cYObject::DropToted;
	__asm        mov    obj, eax;
// LINE 1725:
	__asm        cmp    obj, 0;
	__asm        je     _T40;
// LINE 1726:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1727:
	__asm        mov    result, 1;
// LINE 1729:
	__asm        jmp    _T47;
// LINE 1730:
_T40:
	__asm        mov    result, 0;
// LINE 1732:
_T47:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B1F0;
// LINE 1733:
}

// FUNCTION: COPTER_D 0x0055b1f7
enum TreeSim::ReturnCode cYObject::iUpdateStackVictimPickedUp(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1737:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1738:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T3c;

	__asm        push   0x8C085;
	__asm        push   0x5BD764;
	__asm        push   0x6CA;
	__asm        push   0x5BD774;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1739:
_T3c:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   cYObject::GetObjectA;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1740:
	__asm        cmp    obj, 0;
	__asm        jne    _T74;

	__asm        push   0x8C085;
	__asm        push   0x5BD798;
	__asm        push   0x6CC;
	__asm        push   0x5BD7DC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1741:
_T74:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     _Ta3;

	__asm        push   0x8C085;
	__asm        push   0x5BD800;
	__asm        push   0x6CD;
	__asm        push   0x5BD824;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1742:
_Ta3:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   cYObject::UpdateMission;
// LINE 1743:
	__asm        mov    result, 1;
// LINE 1745:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B2BA;
// LINE 1746:
}

// FUNCTION: COPTER_D 0x0055b2c1
enum TreeSim::ReturnCode cYObject::iCloseToHeli(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1750:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-0xC], eax;
// LINE 1751:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T47;

	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_T47:
	__asm        jmp    near ptr 0x0055B30D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x0055B345;

	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    _T9a;

	__asm        jmp    _Tb1;
_T9a:
	__asm        jmp    _Tbd;

	__asm        jmp    _Tb1;

	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    _Tbd;
// LINE 1752:
_Tb1:
	__asm        mov    result, 0;
// LINE 1753:
	__asm        jmp    _Td5;
// LINE 1754:
_Tbd:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1755:
	__asm        mov    result, 1;
// LINE 1758:
_Td5:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B39E;
// LINE 1759:
}

// FUNCTION: COPTER_D 0x0055b3a5
enum TreeSim::ReturnCode cYObject::iSetMyExpression(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short expressionnum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1763:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1765:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    expressionnum, ax;
// LINE 1767:
	__asm        movsx  eax, expressionnum;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerSetExpression;
	__asm        add    esp, 0xC;
// LINE 1768:
	__asm        mov    eax, G_uheli;
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   HeliPassengerSetChanged;
	__asm        add    esp, 4;
// LINE 1769:
	__asm        mov    result, 1;
// LINE 1771:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B410;
// LINE 1772:
}

// FUNCTION: COPTER_D 0x0055b417
enum TreeSim::ReturnCode cYObject::iGetHeliSpeedPlusDamage(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	float damage;
	union YObjLang::Param* nparam;
	float res;
	float maxdamage;
	float speed;
	enum TreeSim::ReturnCode result;

// LINE 1776:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1778:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0x128];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        fstp   speed;
// LINE 1779:
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetCurrentDamage;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        fild   dword ptr [ebp-0x2C];
	__asm        fstp   damage;
// LINE 1780:
	__asm        mov    eax, G_uheli;
	__asm        push   eax;
	__asm        call   S3HeliGetMaximumDamage;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        fild   dword ptr [ebp-0x30];
	__asm        fstp   maxdamage;
// LINE 1781:
	__asm        fld    damage;
	__asm        fcomp  dword ptr ds:[0x593610];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     _T7c;

	__asm        mov    damage, 0x3F800000;
// LINE 1782:
_T7c:
	__asm        fld    maxdamage;
	__asm        fmul   speed;
	__asm        fdiv   damage;
// LINE 1783:
	__asm        fcom   dword ptr ds:[0x593618];
	__asm        fstp   res;
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        jne    _Ta0;
// LINE 1784:
	__asm        mov    res, 0x477FFF00;
// LINE 1785:
_Ta0:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    [ebp-0x20], ax;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _Tc4;

	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        cmp    eax, 4;
	__asm        jl     _Te0;
_Tc4:
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
_Te0:
	__asm        jmp    near ptr 0x0055B4FC;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, word ptr [ebp-0x20];
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055B525;

	__asm        fld    res;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
// LINE 1786:
	__asm        mov    result, 1;
// LINE 1788:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B542;
// LINE 1789:
}

// FUNCTION: COPTER_D 0x0055b549
enum TreeSim::ReturnCode cYObject::iIsThisCellSafe(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1793:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1794:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   cYObject::GetLocType;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::IsWalkable;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T6b;
// LINE 1797:
	__asm        mov    result, 1;
// LINE 1798:
	__asm        jmp    _T72;
// LINE 1799:
_T6b:
	__asm        mov    result, 0;
// LINE 1801:
_T72:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B5C3;
// LINE 1802:
}

// FUNCTION: COPTER_D 0x0055b5ca
enum TreeSim::ReturnCode cYObject::iPlaySound(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	unsigned short playforsure;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1806:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1807:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax+2];
	__asm        mov    playforsure, ax;
// LINE 1808:
	__asm        mov    eax, reinterpret_cast<uint32_t>(playforsure);
	__asm        push   eax;
	__asm        mov    eax, nparam;
	__asm        movsx  eax, word ptr [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::PlaySoundA;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T51;
// LINE 1809:
	__asm        mov    result, 1;
// LINE 1810:
	__asm        jmp    _T58;
// LINE 1811:
_T51:
	__asm        mov    result, 0;
// LINE 1826:
_T58:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B62A;
// LINE 1827:
}

// FUNCTION: COPTER_D 0x0055b631
enum TreeSim::ReturnCode cYObject::iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1831:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1832:
	__asm        jmp    near ptr 0x0055B649;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xBC];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T7b;
// LINE 1833:
	__asm        jmp    near ptr 0x0055B669;

	__asm        mov    eax, this;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     _T6f;

	__asm        push   0x8C085;
	__asm        push   0x5BD848;
	__asm        push   0x729;
	__asm        push   0x5BD888;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1834:
_T6f:
	__asm        mov    result, 1;
// LINE 1836:
	__asm        jmp    _Tf9;
_T7b:
	__asm        mov    eax, G_uheli;
	__asm        cmp    dword ptr [eax+0x1B4], 0;
	__asm        je     _Tc4;
// LINE 1837:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::SetMaster;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    _Tb8;
// LINE 1838:
	__asm        mov    result, 0;
// LINE 1839:
	__asm        jmp    _Tbf;
// LINE 1840:
_Tb8:
	__asm        mov    result, 1;
// LINE 1842:
_Tbf:
	__asm        jmp    _Tf9;
// LINE 1843:
_Tc4:
	__asm        mov    eax, G_uheli;
	__asm        cmp    dword ptr [eax+0x1B0], 0;
	__asm        jne    _Tf2;

	__asm        push   0x8C085;
	__asm        push   0x5BD8AC;
	__asm        push   0x733;
	__asm        push   0x5BD8C0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1844:
_Tf2:
	__asm        mov    result, 0;
// LINE 1847:
_Tf9:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B732;
// LINE 1848:
}

// FUNCTION: COPTER_D 0x0055b739
enum TreeSim::ReturnCode cYObject::iAmIOnHeli(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1852:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1853:
	__asm        mov    eax, this;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    _T3a;
// LINE 1854:
	__asm        mov    result, 1;
// LINE 1855:
	__asm        jmp    _T41;
// LINE 1856:
_T3a:
	__asm        mov    result, 0;
// LINE 1858:
_T41:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B782;
// LINE 1859:
}

// FUNCTION: COPTER_D 0x0055b789
enum TreeSim::ReturnCode cYObject::iThrowFieryProjectile(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
// LINE 1863:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   cYObject::iThrowProjectile;
	__asm        jmp    near ptr 0x0055B7AA;
// LINE 1864:
}

// FUNCTION: COPTER_D 0x0055b7b1
enum TreeSim::ReturnCode cYObject::iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short truefalse;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1868:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1869:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    truefalse, ax;
// LINE 1870:
	__asm        movsx  eax, truefalse;
	__asm        test   eax, eax;
	__asm        je     _T5b;

	__asm        movsx  eax, truefalse;
	__asm        cmp    eax, 1;
	__asm        je     _T5b;

	__asm        push   0x8C085;
	__asm        push   0x5BD8E4;
	__asm        push   0x74E;
	__asm        push   0x5BD908;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1871:
_T5b:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     _T86;
// LINE 1872:
	__asm        movsx  eax, truefalse;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        push   eax;
	__asm        call   EmergencyVehicleClass::S3UpdateCar;
	__asm        add    esp, 8;
// LINE 1873:
_T86:
	__asm        mov    result, 1;
// LINE 1875:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B846;
// LINE 1876:
}

// FUNCTION: COPTER_D 0x0055b84d
enum TreeSim::ReturnCode cYObject::TryElement(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode res;

// LINE 1881:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jl     _T29;

	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x40;
	__asm        jl     _T45;
_T29:
	__asm        push   0x8C085;
	__asm        push   0x5BD92C;
	__asm        push   0x759;
	__asm        push   0x5BD950;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1882:
_T45:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    cYObject::PrimProcs[0][eax*4], 0;
	__asm        jne    _T75;

	__asm        push   0x8C085;
	__asm        push   0x5BD974;
	__asm        push   0x75A;
	__asm        push   0x5BD99C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1884:
_T75:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0x140];
// LINE 1885:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        call   cYObject::PrimProcs[0][eax*4];
	__asm        add    esp, 0xC;
	__asm        mov    res, eax;
// LINE 1887:
	__asm        cmp    res, 0xFFFFFFFF;
	__asm        jne    _Tc4;

	__asm        push   0x8C085;
	__asm        push   0x5BD9C0;
	__asm        push   0x75F;
	__asm        push   0x5BD9E8;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1888:
_Tc4:
	__asm        mov    eax, res;
	__asm        jmp    near ptr 0x0055B919;
// LINE 1889:
}

// FUNCTION: COPTER_D 0x0055b920
void cYObject::UpdateMission(enum cYObject::MissionUpdates missup, long missionid) {
	struct _MISSION_PARMS mp;

// LINE 1901:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    _T3a;

	__asm        push   0x8C085;
	__asm        push   0x5BDA0C;
	__asm        push   0x76D;
	__asm        push   0x5BDA34;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1902:
_T3a:
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    _T60;

	__asm        push   0x8C085;
	__asm        push   0x5BDA58;
	__asm        push   0x76E;
	__asm        push   0x5BDA7C;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1903:
_T60:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1904:
	__asm        mov    eax, missup;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T1ec;
// LINE 1906:
	__asm        mov    mp.op, 0x14;
// LINE 1907:
	__asm        mov    mp.i2num, 1;
// LINE 1908:
	__asm        jmp    _T228;
// LINE 1911:
	__asm        mov    mp.op, 0x15;
// LINE 1912:
	__asm        mov    mp.i2num, 1;
// LINE 1913:
	__asm        jmp    _T228;
// LINE 1916:
	__asm        mov    mp.op, 0x12;
// LINE 1917:
	__asm        mov    mp.i2num, 1;
// LINE 1918:
	__asm        jmp    _T228;
// LINE 1920:
	__asm        mov    mp.op, 0x13;
// LINE 1921:
	__asm        mov    mp.i2num, 1;
// LINE 1922:
	__asm        jmp    _T228;
// LINE 1924:
	__asm        mov    mp.op, 0x13;
// LINE 1925:
	__asm        mov    mp.i2num, 1;
// LINE 1926:
	__asm        jmp    _T228;
// LINE 1928:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T13c;
// LINE 1930:
	__asm        mov    mp.op, 0x15;
// LINE 1931:
	__asm        mov    mp.i2num, 1;
// LINE 1932:
	__asm        jmp    _T163;
// LINE 1934:
	__asm        mov    mp.op, 0x11;
// LINE 1935:
	__asm        mov    mp.i2num, 1;
// LINE 1936:
	__asm        jmp    _T163;
// LINE 1939:
	__asm        mov    mp.op, 0x10;
// LINE 1940:
	__asm        mov    mp.i2num, 1;
// LINE 1941:
	__asm        jmp    _T163;
// LINE 1943:
_T11b:
	__asm        push   0x8C085;
	__asm        push   0x5BDAA0;
	__asm        push   0x797;
	__asm        push   0x5BDACC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1944:
	__asm        jmp    _T163;
_T13c:
	__asm        dec    dword ptr [ebp-0x24];
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     _T11b;

	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    SwitchPointers5618291[0][eax*4];
// Switch pointers
// LINE 1945:
_T163:
	__asm        jmp    _T228;
// LINE 1947:
	__asm        mov    mp.op, 0x1E;
// LINE 1948:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1950:
	__asm        jmp    _T228;
// LINE 1952:
	__asm        mov    mp.op, 0;
// LINE 1953:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1954:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1955:
	__asm        jmp    _T228;
// LINE 1957:
	__asm        mov    mp.op, 0x25;
// LINE 1958:
	__asm        mov    mp.i2num, 1;
// LINE 1959:
	__asm        jmp    _T228;
// LINE 1961:
_T1cb:
	__asm        push   0x8C085;
	__asm        push   0x5BDAF0;
	__asm        push   0x7A9;
	__asm        push   0x5BDB10;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 1962:
	__asm        jmp    _T228;
_T1ec:
	__asm        cmp    dword ptr [ebp-0x20], 9;
	__asm        ja     _T1cb;

	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    SwitchPointers5618464[0][eax*4];
// Switch pointers
// LINE 1963:
_T228:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1964:
	__asm        jmp    near ptr 0x0055BB59;
}

// FUNCTION: COPTER_D 0x0055bb60
enum TreeSim::ReturnCode cYObject::TryExpression(struct YObjLang::AttrParam* attr) {
	short lhs;
	short * plhs;
	short rhs;
	enum TreeSim::ReturnCode result;

// LINE 1992:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1996:
	__asm        push   0;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+2];
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+6];
	__asm        sar    ax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    rhs, ax;
// LINE 1997:
	__asm        lea    eax, plhs;
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax];
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+6];
	__asm        shl    ax, 8;
	__asm        sar    ax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    lhs, ax;
// LINE 1999:
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+4];
	__asm        sar    ax, 8;
	__asm        movsx  eax, ax;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T395;
// LINE 2001:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jle    _T94;

	__asm        mov    result, 1;
// LINE 2002:
	__asm        jmp    _T9b;
_T94:
	__asm        mov    result, 0;
// LINE 2003:
_T9b:
	__asm        jmp    _T3d5;
// LINE 2005:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jge    _Tbc;

	__asm        mov    result, 1;
// LINE 2006:
	__asm        jmp    _Tc3;
_Tbc:
	__asm        mov    result, 0;
// LINE 2007:
_Tc3:
	__asm        jmp    _T3d5;
// LINE 2009:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jne    _Te4;

	__asm        mov    result, 1;
// LINE 2010:
	__asm        jmp    _Teb;
_Te4:
	__asm        mov    result, 0;
// LINE 2011:
_Teb:
	__asm        jmp    _T3d5;
// LINE 2013:
	__asm        cmp    plhs, 0;
	__asm        je     _T109;
// LINE 2014:
	__asm        mov    ax, rhs;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2015:
	__asm        jmp    _T120;
// LINE 2016:
_T109:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T483;

	__asm        jmp    _T449;
// LINE 2018:
_T120:
	__asm        mov    result, 1;
// LINE 2019:
	__asm        jmp    _T3d5;
// LINE 2021:
	__asm        cmp    plhs, 0;
	__asm        je     _T14d;
// LINE 2022:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        add    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2023:
	__asm        jmp    _T164;
// LINE 2024:
_T14d:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T47e;

	__asm        jmp    _T449;
// LINE 2026:
_T164:
	__asm        mov    result, 1;
// LINE 2027:
	__asm        jmp    _T3d5;
// LINE 2029:
	__asm        cmp    plhs, 0;
	__asm        je     _T191;
// LINE 2030:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2031:
	__asm        jmp    _T1a8;
// LINE 2032:
_T191:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T479;

	__asm        jmp    _T449;
// LINE 2034:
_T1a8:
	__asm        mov    result, 1;
// LINE 2035:
	__asm        jmp    _T3d5;
// LINE 2037:
	__asm        cmp    plhs, 0;
	__asm        je     _T1d6;
// LINE 2038:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2039:
	__asm        jmp    _T1ed;
// LINE 2040:
_T1d6:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T474;

	__asm        jmp    _T449;
// LINE 2042:
_T1ed:
	__asm        mov    result, 1;
// LINE 2043:
	__asm        jmp    _T3d5;
// LINE 2045:
	__asm        cmp    plhs, 0;
	__asm        je     _T21b;
// LINE 2046:
	__asm        mov    eax, plhs;
	__asm        movsx  ecx, rhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2047:
	__asm        jmp    _T232;
// LINE 2048:
_T21b:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T46f;

	__asm        jmp    _T449;
// LINE 2050:
_T232:
	__asm        mov    result, 1;
// LINE 2051:
	__asm        jmp    _T3d5;
// LINE 2053:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    _T262;

	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T46a;

	__asm        jmp    _T449;
// LINE 2054:
_T262:
	__asm        cmp    plhs, 0;
	__asm        je     _T28b;

	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        mov    ecx, plhs;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        or     eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2055:
	__asm        jmp    _T2a2;
// LINE 2056:
_T28b:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T465;

	__asm        jmp    _T449;
// LINE 2058:
_T2a2:
	__asm        mov    result, 1;
// LINE 2059:
	__asm        jmp    _T3d5;
// LINE 2061:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    _T2d2;

	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T460;

	__asm        jmp    _T449;
// LINE 2062:
_T2d2:
	__asm        cmp    plhs, 0;
	__asm        je     _T2fd;

	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, plhs;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        and    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2063:
	__asm        jmp    _T314;
// LINE 2064:
_T2fd:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T45b;

	__asm        jmp    _T449;
// LINE 2066:
_T314:
	__asm        mov    result, 1;
// LINE 2067:
	__asm        jmp    _T3d5;
// LINE 2069:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    _T344;

	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T456;

	__asm        jmp    _T449;
// LINE 2070:
_T344:
	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        movsx  ecx, lhs;
	__asm        test   ecx, eax;
	__asm        je     _T368;

	__asm        mov    result, 1;
// LINE 2071:
	__asm        jmp    _T36f;
_T368:
	__asm        mov    result, 0;
// LINE 2072:
_T36f:
	__asm        jmp    _T3d5;
// LINE 2075:
_T374:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T451;

	__asm        jmp    _T449;
// LINE 2076:
	__asm        jmp    _T3d5;
// LINE 2077:
	__asm        jmp    _T3d5;
_T395:
	__asm        cmp    dword ptr [ebp-0x18], 0xA;
	__asm        ja     _T374;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    SwitchPointers5619465[0][eax*4];
// Switch pointers
// LINE 2080:
_T3d5:
	__asm        cmp    plhs, 0;
	__asm        je     _T449;
// LINE 2081:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x61A8;
	__asm        jle    _T414;
// LINE 2082:
	__asm        push   0x8C085;
	__asm        push   0x5BDB34;
	__asm        push   0x822;
	__asm        push   0x5BDB60;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2083:
	__asm        mov    eax, plhs;
	__asm        mov    word ptr [eax], 0x61A8;
// LINE 2086:
_T414:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0xFFFF9E58;
	__asm        jge    _T449;
// LINE 2087:
	__asm        push   0x8C085;
	__asm        push   0x5BDB84;
	__asm        push   0x827;
	__asm        push   0x5BDBB0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2088:
	__asm        mov    eax, plhs;
	__asm        mov    word ptr [eax], 0x9E58;
// LINE 2098:
tree_error:
_T449:
	__asm        mov    eax, result;
	__asm        jmp    _T488;
// LINE 2099:
_T451:
	__asm        jmp    _T449;
_T456:
	__asm        jmp    _T449;
_T45b:
	__asm        jmp    _T449;
_T460:
	__asm        jmp    _T449;
_T465:
	__asm        jmp    _T449;
_T46a:
	__asm        jmp    _T449;
_T46f:
	__asm        jmp    _T449;
_T474:
	__asm        jmp    _T449;
_T479:
	__asm        jmp    _T449;
_T47e:
	__asm        jmp    _T449;
_T483:
	__asm        jmp    _T449;
_T488:
}

// FUNCTION: COPTER_D 0x0055bfef
void cYObject::HandleOverflow() {
// LINE 2104:
	__asm        push   0x8C085;
	__asm        push   0x5BDBD4;
	__asm        push   0x838;
	__asm        push   0x5BDBEC;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2105:
	__asm        jmp    near ptr 0x0055C01C;
}

// FUNCTION: COPTER_D 0x0055c021
short cYObject::InterpValue(short ownerField, short dataField, short ** dataRef) {
	short * ptemp;
	short temp;
	short data;

// LINE 2113:
	__asm        cmp    dataRef, 0;
	__asm        jne    _T22;
// LINE 2114:
	__asm        lea    eax, ptemp;
	__asm        mov    dataRef, eax;
// LINE 2115:
	__asm        lea    eax, temp;
	__asm        mov    ptemp, eax;
// LINE 2117:
_T22:
	__asm        mov    eax, dataRef;
	__asm        mov    dword ptr [eax], 0;
// LINE 2118:
	__asm        mov    data, 0;
// LINE 2119:
	__asm        movsx  eax, ownerField;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T1d9;
// LINE 2121:
	__asm        push   0x8C085;
	__asm        push   0x5BDC10;
	__asm        push   0x849;
	__asm        push   0x5BDC20;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2124:
	__asm        jmp    _T21d;
// LINE 2126:
	__asm        push   0x8C085;
	__asm        push   0x5BDC44;
	__asm        push   0x84E;
	__asm        push   0x5BDC58;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2130:
	__asm        jmp    _T21d;
// LINE 2132:
	__asm        push   0x8C085;
	__asm        push   0x5BDC7C;
	__asm        push   0x854;
	__asm        push   0x5BDCA4;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2133:
	__asm        jmp    _T21d;
// LINE 2135:
	__asm        movsx  eax, dataField;
	__asm        cmp    eax, 0x30;
	__asm        jl     _Tc4;

	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T238;

	__asm        jmp    _T226;
// LINE 2136:
_Tc4:
	__asm        movsx  eax, dataField;
	__asm        add    eax, eax;
	__asm        add    eax, this;
	__asm        add    eax, 0xD0;
	__asm        mov    ecx, dataRef;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, dataRef;
	__asm        mov    eax, [eax];
	__asm        mov    ax, [eax];
	__asm        mov    data, ax;
// LINE 2137:
	__asm        jmp    _T21d;
// LINE 2139:
	__asm        push   0x8C085;
	__asm        push   0x5BDCC8;
	__asm        push   0x85B;
	__asm        push   0x5BDCE0;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2140:
	__asm        jmp    _T21d;
// LINE 2142:
	__asm        mov    ax, dataField;
	__asm        mov    data, ax;
// LINE 2143:
	__asm        jmp    _T21d;
// LINE 2145:
	__asm        push   0x8C085;
	__asm        push   0x5BDD04;
	__asm        push   0x861;
	__asm        push   0x5BDD20;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2146:
	__asm        jmp    _T21d;
// LINE 2148:
	__asm        push   0x8C085;
	__asm        push   0x5BDD44;
	__asm        push   0x864;
	__asm        push   0x5BDD64;
	__asm        call   doAssert;
	__asm        add    esp, 0x10;
// LINE 2149:
	__asm        jmp    _T21d;
// LINE 2151:
	__asm        movsx  eax, dataField;
	__asm        cmp    eax, 4;
	__asm        jl     _T17c;

	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T233;

	__asm        jmp    _T226;
// LINE 2152:
_T17c:
	__asm        jmp    near ptr 0x0055C1A2;

	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, dataField;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    ecx, dataRef;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, dataRef;
	__asm        mov    eax, [eax];
	__asm        mov    ax, [eax];
	__asm        mov    data, ax;
// LINE 2153:
	__asm        jmp    _T21d;
// LINE 2155:
_T1b8:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    _T22e;

	__asm        jmp    _T226;
// LINE 2156:
	__asm        jmp    _T21d;
// LINE 2157:
	__asm        jmp    _T21d;
_T1d9:
	__asm        cmp    dword ptr [ebp-0x14], 0xB;
	__asm        ja     _T1b8;

	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    SwitchPointers5620238[0][eax*4];
// Switch pointers
// LINE 2158:
_T21d:
	__asm        mov    ax, data;
	__asm        jmp    _T23d;
// LINE 2161:
tree_error:
_T226:
	__asm        xor    ax, ax;
	__asm        jmp    _T23d;
// LINE 2162:
_T22e:
	__asm        jmp    _T226;
_T233:
	__asm        jmp    _T226;
_T238:
	__asm        jmp    _T226;
_T23d:
}



// Contribution: 2:00004600-0000461b Module: 196, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00025634-00026d84 Module: 196, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bc634
int32_t radiusReduction = { /* <data@0x005bc634> */ };



// Contribution: 3:00026d88-00026dba Module: 196, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bdd88
// GLOBAL: COPTER_D 0x005bdd88
// ??_C@_0DD@OACJ@must?5have?5master?5object?5to?5test?5@


// Contribution: 3:00026dbc-00026dd5 Module: 196, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bddbc
// GLOBAL: COPTER_D 0x005bddbc
// ??_C@_0BK@BPAL@local?5number?5out?5of?5range?$AA@


// Contribution: 3:000a05a8-000a06a7 Module: 196, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006375a8
enum TreeSim::ReturnCode (*cYObject::PrimProcs[64])(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*) = { /* <data@0x006375a8> */ };



// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x0067ed30
struct _CELL_INFO* G_omap[256][256] = { /* <data@0x0067ed30> */ };

