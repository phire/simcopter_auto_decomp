// Module: Yobjsim.obj
// Source: C:\Copter\Source\X\Y\Yobjsim.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: int32_t;

// Type: unsigned short;

// Type: class cYObject (forward reference);
class cYObject : public TreeSim, public YObjLang
{
	using DataType = short;
		enum __unnamed {
			kNumData = 48,
			kNumTemp = 8,
			kNumPointers = 4,
		};
	class cYObject::ObjDefHeader{
	public:
		long version;
		short stackSize;
		short baseGraphic;
		short numGraphics;
		short initBhav;
		short toolbarPict;
		short treeTableID;
		short personalityID;
		short type;
		short red;
		short green;
		short blue;
		short _padding2;
	};
		enum MoveErrorCode {
			kMoveError = -1,
			kMoveSuccess = 0,
			kMoveFailTooHigh = 1,
			kMoveFailTooLow = 2,
			kMoveFailNonNeutralTerritory = 3,
			kMoveFailDynObjGeneric = 4,
			kMoveFailDynObjPerson = 5,
			kMoveFailOutOfDynObjRect = 6,
			kMoveFailNoSpeed = 7,
			kMoveFailFinishedMoving = 8,
			kMoveFailStaticObj = 9,
			kMoveFailStackObject = 10,
			kMoveFailUnwalkableLoctype = 11,
			kMoveFailOutOfRoad = 12,
		};
		enum ObjectType {
			kPerson = 0,
			kNumObjectTypes = 1,
		};
public:
	static short[1] sStackSize;
	void SetToLoc(struct _DYOBJ_INST*);
	unsigned short Gosub(short);
	short GetTree();
	void ReceiveHit(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	void Die();
		enum MissionUpdates {
			kPickedUp = 0,
			kOuttaHere = 1,
			kReportNewPickupLocation = 2,
			kJoinedRiot = 3,
			kDrivenFromRiot = 4,
			kLeftRiotOfOwnVolition = 5,
			kReportNewLocation = 6,
			kMedVicToted = 7,
			kMedVicPickedUp = 8,
			kPersonCaught = 9,
		};
		enum Checks {
			kHeliLanded = 0,
			kHeliLow = 1,
			kMasterObjectLow = 2,
			kMasterObjectMovingSlowly = 3,
			kStackObjectLow = 4,
		};
		enum CompareMyLocWith {
			kMissionDestLoc = 0,
			kStackPointer = 1,
			kHeli = 2,
			kBucket = 3,
			kLastHitter = 4,
			kClosestMedevacVictim = 5,
			kClosestCriminal = 6,
			k_pad_MotherShipLoc = 7,
			kClosestCop = 8,
			kAvatarClose = 9,
			kClosestAmbulance = 10,
			kClosestCopCar = 11,
			kClosestFiretruck = 12,
			kClosestCriminalCar = 13,
			kClosestAmbient = 14,
		};
public:
	short * GetLocalVar(short);
	// calltype: NearC
	static void StartScurkPeople(short, short);
	// calltype: NearC
	static void StartScurkPeopleNearAvatar();
	// calltype: NearC
	static void BeamRemainingAmbients();
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	// calltype: NearC
	static void StartForScurkID(enum PersonType, enum MissionType, short, short, short, struct _DYOBJ_INST*);
	unsigned short GetNearbyFire(short, short *, short *);
	unsigned short StartMission(enum PersonType, enum MissionType, short, short, long, struct _DYOBJ_INST*, struct Point3d*);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, int32_t, int32_t);
	unsigned short StartScurkAmbientMission(short, short, enum PersonType, short, short, struct _DYOBJ_INST*, struct Point3d*);
	void ResetToAmbient();
	long JoinRiot();
	// calltype: NearC
	static short StartPerson(enum PersonType, enum MissionType);
	unsigned short AddToHeli();
	void RemoveFromHeli();
	void SetPersonData(enum PersonType, enum MissionType, long);
	static short[14] sInitBhav;
	static short[20] sHitRxnTree;
	// calltype: NearC
	static void SetRxnTree(short, short);
	static long sSimTicks;
	long fLastInterrupt;
		enum LocationType {
			kOutOfCity = -1,
			kLocNoInfo = 0,
			kLocUnknown = 1,
			kNothing = 2,
			kForest = 3,
			kRubble = 4,
			kSmallPark = 5,
			kWireStuff = 6,
			kCarRoad = 7,
			kCarBridge = 8,
			kTrainTrack = 9,
			kDomestic = 10,
			kCommercial = 11,
			kWhiteCollarBusiness = 12,
			kBlueCollarBusiness = 13,
			kNumLocTypes = 14,
		};
public:
	static enum cYObject::LocationType[256] sLocType;
		enum SearchType {
			kSearchEdgeGround = 0,
			kSearchAnywhereGround = 1,
			kSearchRoof = 2,
			kSearchAnywhereAtAll = 3,
		};
	class cYObject::LocationInfo{
	public:
		enum cYObject::SearchType searchType;
		short maxNormalLoiterers;
	};
public:
	static struct cYObject::LocationInfo[14] sLocInfo;
	struct _DYOBJ_INST* SearchForDynObj(short, short, struct _DYOBJ_INST*);
	short GetDirectionTo(struct _DYOBJ_INST*);
	short GetDirectionTo(short, short);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, struct Point3d*, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _CELL_INFO*, int32_t *, int32_t *, enum cYObject::SearchType);
	unsigned short SearchForPersonSpot(struct _DYOBJ_INST*, struct Point3d*);
	static short sBeamed;
	static short sDebugNumBeamed;
	// calltype: NearC
	static unsigned short LikelyToBeamSuccessfully();
	// calltype: NearC
	static short GetScurkID(short, short);
	// calltype: NearC
	static unsigned short IsSuitableForMission(enum MissionType, short, short);
	// calltype: NearC
	static unsigned short IsNeutralForPerson(enum PersonType, enum cYObject::LocationType);
	unsigned short IsNeutralAndSparse(struct _CELL_INFO*, enum cYObject::LocationType);
	// calltype: NearC
	static struct Point3d GetPos(unsigned char, unsigned char, int32_t, int32_t);
	// calltype: NearC
	static struct Point3d GetPos(struct _CELL_INFO*, int32_t, int32_t);
	unsigned short AdjoinsRoad(struct Point3d);
	unsigned short RoadTile(int32_t, int32_t);
	unsigned short GetNeutralLoc(int32_t *, int32_t *, int32_t *, int32_t *);
	void UpdateMission(enum cYObject::MissionUpdates, long);
	void ResetTree();
	void ResetTree(short);
	class cYObject::MoveInfo{
	public:
		enum cYObject::LocationType* locType;
		char * roadDir;
		struct _DYOBJ_INST* dyBlock;
		struct _STOBJ_INST* stBlock;
	};
	class cYObject::_ControlInput{
	public:
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
	class cYObject::_ControlInput{
	public:
		struct Point3d vector;
		int32_t fwdSpeed;
		int32_t rotateRate;
		int32_t yaw;
	};
private:
	static unsigned short sInited;
	static Ptr to: class cYObject[100] sObjects;
	static enum cYObject::LocationType[10][18] sNeutralPersonLocs;
	static enum cYObject::LocationType[10][14] sNeutralMissionLocs;
	static class cYObject* sList;
	static class NResFile sFile;
	static class ResFile sErrorFile;
public:
	static class YObjLang* sLanguage;
	static class Behavior* sBehavior;
	static struct Point3d[8] sMoveTable;
	static struct Point3d[8] sUnitVectorTable;
	// calltype: NearC
	static void InitObjects(char *);
	// calltype: NearC
	static void DestroyObjects();
	// calltype: NearC
	static short MakeNewObject(short, struct Point3d, class Behavior*);
	// calltype: NearC
	static void KillObject(short);
	// calltype: NearC
	static void MakePlebes();
	void InitForEngine(short);
	void TellLocToEngine();
	class cYObject* GetClosest(enum MissionSupertype, enum MissionType, unsigned short, short *);
	// calltype: NearC
	static class cYObject* GetObjectA(short);
	// calltype: NearC
	static class cYObject* GetObjectA(struct _DYOBJ_INST*);
	class cYObject* GetPersonWithMaster(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetSleepingPerson();
	// calltype: NearC
	static void DrawOnePerson(struct VRBlit*);
	void SetCell(unsigned char, unsigned char);
	void UnsetCell(unsigned char, unsigned char);
	void Link();
	void Link(unsigned char, unsigned char);
	long fMissionID;
	void PutOnGround();
	void Unlink();
	unsigned short CellIsSet();
	unsigned short fbLinked;
	unsigned short Linked();
	unsigned short fInited;
	// calltype: NearC
	static unsigned short ConvertObjDef(void * __ptr32);
	// calltype: NearC
	static short GetAvailRouteMask();
	// calltype: NearC
	static void ClearRouteMask(short);
	// calltype: NearC
	static void MaskTile(short, short, short);
	// calltype: NearC
	static void IntegrityCheck(unsigned char *);
	static short sNumMissionAwake;
	static short sNumAmbientAwake;
	static unsigned short sAllAmbientStarted;
	static short sAmbientTopOff;
	static short sAmbientAbsoluteMax;
	static short sScurkRectRad;
	struct _DYOBJ_INST fDyn;
	unsigned char fCellX;
	unsigned char fCellY;
	unsigned long fBodyName;
	class cCopterBody* fBody;
	unsigned long fAnimName;
	class cCopterAnim* fAnim;
	short fFace;
	void SetFace(short);
	struct Point3d fLastMasterLoc;
	unsigned short SetMaster(struct _DYOBJ_INST*);
	struct _DYOBJ_INST* GetMaster();
	void FollowMaster();
	enum cYObject::LocationType fCurLocType;
	// calltype: NearC
	static unsigned short GetOutOfHeli(long);
	// calltype: NearC
	static struct Point2d GetRiotCenter(short, short);
	// calltype: NearC
	static struct Point2d GetRiotCenter(long);
	void SimAnim();
	void Simulate();
	// calltype: NearC
	static void SimulateAll();
	// calltype: NearC
	static void TryStartAllAmbient();
	unsigned long GetBody();
	void SetBody(unsigned long);
	void IncAndCheckAnimFrame();
	void CheckAnimFrame();
	// calltype: NearC
	static class cYObject* GetOnePersonForScurkID(short, short);
	// calltype: NearC
	static struct _DYOBJ_INST* GetFirstDynObj(struct _CELL_INFO*, long);
	// calltype: NearC
	static short CountDynObjs(struct _CELL_INFO*, long);
	void SetMissionType(enum MissionType);
	void SetMissionID(long);
	void SetPersonType(enum PersonType);
	void ChangeMission(enum MissionType, long);
	void IncrementMissionStats(enum MissionType, short);
	void ClickHeels();
	void VisitOz();
	unsigned long GetAnim();
	void SetAnim(unsigned long);
	unsigned short fSimulate;
	class Behavior* fBehavior;
	class cYObject* fNext;
	short fID;
	short _pad;
	short[8] fTemp;
	short[48] fData;
	unsigned char *[4] fPointers;
	short fIterations;
	short _pad2;
	short fDirInc;
	struct cYObject::ObjDefHeader fDefinition;
		enum __unnamed {
			kMasterObject = 0,
			kLastHitterObject = 1,
		};
		enum __unnamed {
			kDirection = 0,
			kAwake = 1,
			kHeightCanJump = 2,
			kPersonType = 3,
			kMissionType = 4,
			kMissionSupertype = 5,
			kAnimFrame = 6,
			kObjectID = 7,
			kRiotVal = 8,
			kVisible = 9,
			kLastRiotVal = 10,
			kNearMedFar = 11,
			kLastHitterMsg = 12,
			kMegaphoneMessage = 13,
			kInRxnTree = 14,
			kDead = 15,
			kColorIndexShift = 16,
			kDynAnim = 17,
			kSpeed = 18,
			kOnlyOnRoad = 19,
			kMoveOnlyNeutrally = 20,
			kMoveNoMatterWhat = 21,
			kSpecificToScurkID = 22,
			kCaptured = 23,
			kStartingObject = 24,
			kSoundChannel = 25,
			kCurrentSound = 26,
			kDynSound = 27,
			kSoundFrequencyAdj = 28,
			kInitBhav = 29,
			kLastRxnTree = 30,
		};
protected:
	virtual enum TreeSim::ReturnCode TryElement(struct TreeSim::StackElem*, struct Behavior::Node*);
	// vtable: 16
	intro void HandleOverflow();
	// vtable: 20
	intro short InterpValue(short, short, short **);
	enum TreeSim::ReturnCode TryExpression(struct YObjLang::AttrParam*);
public:
	enum cYObject::MoveErrorCode TryVectorMove(struct Point3d, int32_t, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryTableMove(short, unsigned short, struct cYObject::MoveInfo*);
	enum cYObject::MoveErrorCode TryMove(unsigned short, struct cYObject::MoveInfo*, int32_t, int32_t, int32_t, unsigned short);
	enum cYObject::LocationType GetLocType();
	// calltype: NearC
	static enum cYObject::LocationType GetLocType(short, short);
	// calltype: NearC
	static unsigned short IsWater(short, short);
	unsigned short IsWalkable(short, short, enum cYObject::LocationType);
	unsigned short CanJumpOffHere();
	// calltype: NearC
	static char GetRoadDir(struct Point3d);
		enum SoundNum {
			kSNone = -1,
			kSAssertion = 1,
			kSDunno = 2,
			kSHoHum = 3,
			kSQuery = 4,
			kSSad = 5,
			kSTitter = 6,
			kSYouGoGirl = 7,
			kSGrunt = 8,
			kSWhoa = 9,
			kSHey = 10,
			kSHiThere = 11,
			kSAaah = 12,
			kSAck = 13,
			kSFeet = 14,
			kSYrUnderArrest = 15,
			kSGimmeYrCash = 16,
			kSSinisterChuckle = 17,
			kSSayYrKindaHot = 18,
		};
public:
	// calltype: NearC
	static short DistributeSoundChannels(short, short);
	unsigned short PlaySoundA(enum cYObject::SoundNum, unsigned short);
	// calltype: NearC
	static void PhaseAndBeamSoundChannels();
	static short[15] sSoundChannels;
	// calltype: NearC
	static short ExtraSoundChannelForSure();
	// calltype: NearC
	static short RegSoundChannel();
	// calltype: NearC
	static void StopAllSounds();
	void StopSound();
	void ClearSoundChannel();
	short GetActualSoundChannel();
	// calltype: NearC
	static short GetActualSoundChannel(short);
	void SetSoundChannel(short);
	// calltype: NearC
	static short GetSRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t GetRadius(struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _DYOBJ_INST* GetDynObj(struct _DYOBJ_INST*, struct Point3d, int32_t, struct _DYOBJ_INST*, struct _DYOBJ_INST*);
	// calltype: NearC
	static struct _STOBJ_INST* GetStaticObj(struct Point3d, int32_t);
	// calltype: NearC
	static unsigned short InBoundingRect(struct Point3d, int32_t, struct Point3d, int32_t);
	unsigned short MasterSlowerThan(short);
	short GetHeightOverGround();
	unsigned short GetFakeDistTo(struct _DYOBJ_INST*);
	unsigned short CloseTo(struct _DYOBJ_INST*);
	// calltype: NearC
	static class cYObject* GetFirst();
	// calltype: NearC
	static class cYObject* GetFirst(short, short);
	// calltype: NearC
	static class cYObject* GetFirstInvisible(short);
	class cYObject* PutTotedMedVicOnHeli();
	class cYObject* PutTotedMedVicOn(struct _DYOBJ_INST*);
	unsigned short SetStartingObject(struct _DYOBJ_INST*);
	class cYObject* DropToted();
	class cYObject* GetToted();
	unsigned short GetOffMasterObject();
	// calltype: NearC
	static unsigned short IsHigherThan(struct Point3d, short);
	// calltype: NearC
	static unsigned short IsFlattenedTerrain(struct _CELL_INFO*);
	// calltype: NearC
	static void RandomEdgeOffset(short, int32_t *, int32_t *);
	// calltype: NearC
	static void RandomOffset(short, int32_t *, int32_t *);
	// vtable: 24
	intro void Reset();
	virtual void ~cYObject();
protected:
	virtual void Error(short);
	void cYObject(short, class Behavior*, struct Point3d, short);
public:
	struct cYObject::ObjDefHeader* GetDef();
	void GetTypeName(char *);
	// calltype: NearC
	static class ResFile* GetGlobalFile();
	// calltype: NearC
	static class YObjLang* GetLanguage();
	// calltype: NearC
	static class ResFile* GetErrorFile();
	short GetID();
	struct Point3d GetLocation();
	class Behavior* GetBehavior();
	void Draw(struct VRBlit*);
	float fScale;
	void DefaultDrawStr(short, short, unsigned char, unsigned char *, int32_t);
	void SetCellAndLoc(struct Point3d, unsigned char, unsigned char);
	void SetCellAndLoc(unsigned char, unsigned char, int32_t, int32_t);
	void Start(int32_t, int32_t, int32_t, int32_t);
	unsigned short BeamIntoCameraRange();
	unsigned short OutOfCameraRange();
	unsigned short CanPlace(struct Point3d);
	void AdjustRadiusForRiotVal();
	unsigned short HasRiotValChanged();
	void IncrementRiotVal(short);
	void GetSurroundingRiotInfo(short, short *, short *, short *);
	void Turn(short);
	class cYObject* GetNext();
	void DynEffects(short, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	void DynEffectsFixed(int32_t, enum cYObject::MoveErrorCode, struct cYObject::MoveInfo*);
	using PrimProc = LfEnum @ 0x5ed18:
	[90m   LE.[32m[  0.  2][m [95mcount[m = 5
	[90m   LE.[95msymbols[m = [Container(Type=13805, Name=u'TreeSim::ReturnCode', index=11352, visablity=<Visablity.Global: 1>, refcount=4)]
	[90m   LE.[95mTI[m = 0x35ed
	[90m   LE.[32m[  2.  2][m [95mutype[m = int32_t
	[90m   LE.[32m[  4.  2][m [95mfieldList[m =
	[90m   LE.[mLfFieldList @ 0x5ecb4:
	[90m   LE.[m[90m  LFL.[32m[  0.  *][m [95mData[m =
	[90m   LE.[m[90m  LFL.[m[LfEnumerate @ 0x5ecb6:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kTrueComplete
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 1
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ecca:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kFalseComplete
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 0
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ece2:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kEngaged
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 2
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ecf2:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kError
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = -1
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ed02:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kStackLoaded
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 3
	[90m   LE.[m[90m  LFL.[m]
	[90m   LE.[m[90m  LFL.[95mTI[m = 0x35ec
	[90m   LE.[32m[  6.  2][m [95mproperties[m = isnested
	[90m   LE.[32m[  8.  *][m [95mName[m = TreeSim::ReturnCode
	 (*)(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
public:
	static Ptr to: LfEnum @ 0x5ed18:
	[90m   LE.[32m[  0.  2][m [95mcount[m = 5
	[90m   LE.[95msymbols[m = [Container(Type=13805, Name=u'TreeSim::ReturnCode', index=11352, visablity=<Visablity.Global: 1>, refcount=4)]
	[90m   LE.[95mTI[m = 0x35ed
	[90m   LE.[32m[  2.  2][m [95mutype[m = int32_t
	[90m   LE.[32m[  4.  2][m [95mfieldList[m =
	[90m   LE.[mLfFieldList @ 0x5ecb4:
	[90m   LE.[m[90m  LFL.[32m[  0.  *][m [95mData[m =
	[90m   LE.[m[90m  LFL.[m[LfEnumerate @ 0x5ecb6:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kTrueComplete
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 1
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ecca:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kFalseComplete
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 0
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ece2:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kEngaged
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 2
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ecf2:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kError
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = -1
	[90m   LE.[m[90m  LFL.[m, LfEnumerate @ 0x5ed02:
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  0.  2][m [95mattr[m = public
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[err.  *][m [95mName[m = kStackLoaded
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95msymbols[m = []
	[90m   LE.[m[90m  LFL.[m[90m   LE.[95mTI[m = 0x35ec
	[90m   LE.[m[90m  LFL.[m[90m   LE.[32m[  2.  *][m [95mvalue[m = 3
	[90m   LE.[m[90m  LFL.[m]
	[90m   LE.[m[90m  LFL.[95mTI[m = 0x35ec
	[90m   LE.[32m[  6.  2][m [95mproperties[m = isnested
	[90m   LE.[32m[  8.  *][m [95mName[m = TreeSim::ReturnCode
	 (LfPointer @ 0x60f88:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ptr 0
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = [Container(Offset=136836, Segment=3, Type=14030, Name=u'cYObject::sList', index=12502, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=64, contrib=Container(Section=3, Unknown1=3263, Offset=136772, Size=13105, Characteristics=3224371264, ModuleIndex=200, Pad2=142, symbols=[Container(Offset=136848, Segment=3, Type=0, Name=u'?sSimTicks@cYObject@@2JA', index=11762, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=76, contrib=<recursion detected>), Container(Offset=136832, Segment=3, Type=0, Name=u'?gAvatar@@3PAVcAvatar@@A', index=11764, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=60, contrib=<recursion detected>), Container(Offset=136816, Segment=3, Type=0, Name=u'?sNumMissionAwake@cYObject@@2FA', index=11842, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=44, contrib=<recursion detected>), Container(Offset=136820, Segment=3, Type=0, Name=u'?sNumAmbientAwake@cYObject@@2FA', index=11843, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=48, contrib=<recursion detected>), Container(Offset=136816, Segment=3, Type=17, Name=u'cYObject::sNumMissionAwake', index=11977, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=44, contrib=<recursion detected>), Container(Offset=136820, Segment=3, Type=17, Name=u'cYObject::sNumAmbientAwake', index=11978, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=48, contrib=<recursion detected>), Container(Offset=136832, Segment=3, Type=13879, Name=u'gAvatar', index=11985, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=60, contrib=<recursion detected>), Container(Offset=136848, Segment=3, Type=18, Name=u'cYObject::sSimTicks', index=11987, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=76, contrib=<recursion detected>), Container(Offset=136868, Segment=3, Type=0, Name=u'?sScurkRectRad@cYObject@@2FA', index=12214, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=96, contrib=<recursion detected>), Container(Offset=136864, Segment=3, Type=0, Name=u'?gBodyDebugInfoIndex@@3FA', index=12215, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=92, contrib=<recursion detected>), Container(Offset=136860, Segment=3, Type=0, Name=u'?gCumTime@@3HA', index=12216, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=88, contrib=<recursion detected>), Container(Offset=136856, Segment=3, Type=0, Name=u'?gNextTime@@3HA', index=12217, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=84, contrib=<recursion detected>), Container(Offset=136852, Segment=3, Type=0, Name=u'?gPersonBeamSlice@@3HA', index=12218, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=80, contrib=<recursion detected>), Container(Offset=136844, Segment=3, Type=0, Name=u'?sDebugNumBeamed@cYObject@@2FA', index=12219, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=72, contrib=<recursion detected>), Container(Offset=136840, Segment=3, Type=0, Name=u'?sBeamed@cYObject@@2FA', index=12220, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=68, contrib=<recursion detected>), Container(Offset=136836, Segment=3, Type=0, Name=u'?sList@cYObject@@0PAV1@A', index=12221, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=64, contrib=<recursion detected>), Container(Offset=136828, Segment=3, Type=0, Name=u'?sAmbientAbsoluteMax@cYObject@@2FA', index=12222, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=56, contrib=<recursion detected>), Container(Offset=136824, Segment=3, Type=0, Name=u'?sAmbientTopOff@cYObject@@2FA', index=12223, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=52, contrib=<recursion detected>), Container(Offset=136812, Segment=3, Type=0, Name=u'?sAllAmbientStarted@cYObject@@2GA', index=12224, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=40, contrib=<recursion detected>), Container(Offset=136808, Segment=3, Type=0, Name=u'?sInited@cYObject@@0GA', index=12225, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=36, contrib=<recursion detected>), Container(Offset=136804, Segment=3, Type=0, Name=u'?CopterDir@@3HA', index=12226, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=32, contrib=<recursion detected>), Container(Offset=136800, Segment=3, Type=0, Name=u'?gNearLimit@@3HA', index=12227, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=28, contrib=<recursion detected>), Container(Offset=136796, Segment=3, Type=0, Name=u'?gNearBoundary@@3HA', index=12228, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=24, contrib=<recursion detected>), Container(Offset=136792, Segment=3, Type=0, Name=u'?gMidBoundary@@3HA', index=12229, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=20, contrib=<recursion detected>), Container(Offset=136788, Segment=3, Type=0, Name=u'?gFarBoundary@@3HA', index=12230, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=16, contrib=<recursion detected>), Container(Offset=136784, Segment=3, Type=0, Name=u'?gFarLimit@@3HA', index=12231, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=12, contrib=<recursion detected>), Container(Offset=136780, Segment=3, Type=0, Name=u'?gPersonBeamingSlicesSlice@@3FA', index=12232, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=8, contrib=<recursion detected>), Container(Offset=136776, Segment=3, Type=0, Name=u'?gPersonBeamingForwardWeight@@3FA', index=12233, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=4, contrib=<recursion detected>), Container(Offset=136772, Segment=3, Type=0, Name=u'_gPersonBeamingSlices', index=12234, visablity=<Visablity.Public: 2>, refcount=1, contribOffset=0, contrib=<recursion detected>), Container(Offset=136864, Segment=3, Type=17, Name=u'gBodyDebugInfoIndex', index=12486, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=92, contrib=<recursion detected>), Container(Offset=136772, Segment=3, Type=17, Name=u'gPersonBeamingSlices', index=12487, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=0, contrib=<recursion detected>), Container(Offset=136880, Segment=3, Type=17, Name=u'gPersonSoundBeamSlice', index=12488, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=108, contrib=<recursion detected>), Container(Offset=136872, Segment=3, Type=17, Name=u'sAvLastCellX', index=12492, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=100, contrib=<recursion detected>), Container(Offset=136876, Segment=3, Type=17, Name=u'sAvLastCellY', index=12493, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=104, contrib=<recursion detected>), Container(Offset=136884, Segment=3, Type=17, Name=u'sCheckTotedCount', index=12494, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=112, contrib=<recursion detected>), Container(Offset=136840, Segment=3, Type=17, Name=u'cYObject::sBeamed', index=12498, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=68, contrib=<recursion detected>), Container(Offset=136844, Segment=3, Type=17, Name=u'cYObject::sDebugNumBeamed', index=12499, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=72, contrib=<recursion detected>), Container(Offset=136808, Segment=3, Type=33, Name=u'cYObject::sInited', index=12500, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=36, contrib=<recursion detected>), <recursion detected>, Container(Offset=136812, Segment=3, Type=33, Name=u'cYObject::sAllAmbientStarted', index=12510, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=40, contrib=<recursion detected>), Container(Offset=136824, Segment=3, Type=17, Name=u'cYObject::sAmbientTopOff', index=12511, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=52, contrib=<recursion detected>), Container(Offset=136828, Segment=3, Type=17, Name=u'cYObject::sAmbientAbsoluteMax', index=12512, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=56, contrib=<recursion detected>), Container(Offset=136776, Segment=3, Type=17, Name=u'gPersonBeamingForwardWeight', index=12513, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=4, contrib=<recursion detected>), Container(Offset=136868, Segment=3, Type=17, Name=u'cYObject::sScurkRectRad', index=12514, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=96, contrib=<recursion detected>), Container(Offset=136780, Segment=3, Type=17, Name=u'gPersonBeamingSlicesSlice', index=12515, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=8, contrib=<recursion detected>), Container(Offset=136784, Segment=3, Type=116, Name=u'gFarLimit', index=12516, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=12, contrib=<recursion detected>), Container(Offset=136788, Segment=3, Type=116, Name=u'gFarBoundary', index=12517, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=16, contrib=<recursion detected>), Container(Offset=136792, Segment=3, Type=116, Name=u'gMidBoundary', index=12518, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=20, contrib=<recursion detected>), Container(Offset=136796, Segment=3, Type=116, Name=u'gNearBoundary', index=12519, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=24, contrib=<recursion detected>), Container(Offset=136800, Segment=3, Type=116, Name=u'gNearLimit', index=12520, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=28, contrib=<recursion detected>), Container(Offset=136804, Segment=3, Type=116, Name=u'CopterDir', index=12523, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=32, contrib=<recursion detected>), Container(Offset=136852, Segment=3, Type=116, Name=u'gPersonBeamSlice', index=12525, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=80, contrib=<recursion detected>), Container(Offset=136856, Segment=3, Type=116, Name=u'gNextTime', index=12526, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=84, contrib=<recursion detected>), Container(Offset=136860, Segment=3, Type=116, Name=u'gCumTime', index=12527, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=88, contrib=<recursion detected>)], things={76: Container(Offset=136848, Segment=3, Type=18, Name=u'cYObject::sSimTicks', index=11987, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=76, contrib=<recursion detected>), 60: Container(Offset=136832, Segment=3, Type=13879, Name=u'gAvatar', index=11985, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=60, contrib=<recursion detected>), 44: Container(Offset=136816, Segment=3, Type=17, Name=u'cYObject::sNumMissionAwake', index=11977, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=44, contrib=<recursion detected>), 48: Container(Offset=136820, Segment=3, Type=17, Name=u'cYObject::sNumAmbientAwake', index=11978, visablity=<Visablity.Global: 1>, refcount=2, contribOffset=48, contrib=<recursion detected>), 96: Container(Offset=136868, Segment=3, Type=17, Name=u'cYObject::sScurkRectRad', index=12514, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=96, contrib=<recursion detected>), 92: Container(Offset=136864, Segment=3, Type=17, Name=u'gBodyDebugInfoIndex', index=12486, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=92, contrib=<recursion detected>), 88: Container(Offset=136860, Segment=3, Type=116, Name=u'gCumTime', index=12527, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=88, contrib=<recursion detected>), 84: Container(Offset=136856, Segment=3, Type=116, Name=u'gNextTime', index=12526, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=84, contrib=<recursion detected>), 80: Container(Offset=136852, Segment=3, Type=116, Name=u'gPersonBeamSlice', index=12525, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=80, contrib=<recursion detected>), 72: Container(Offset=136844, Segment=3, Type=17, Name=u'cYObject::sDebugNumBeamed', index=12499, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=72, contrib=<recursion detected>), 68: Container(Offset=136840, Segment=3, Type=17, Name=u'cYObject::sBeamed', index=12498, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=68, contrib=<recursion detected>), 64: <recursion detected>, 56: Container(Offset=136828, Segment=3, Type=17, Name=u'cYObject::sAmbientAbsoluteMax', index=12512, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=56, contrib=<recursion detected>), 52: Container(Offset=136824, Segment=3, Type=17, Name=u'cYObject::sAmbientTopOff', index=12511, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=52, contrib=<recursion detected>), 40: Container(Offset=136812, Segment=3, Type=33, Name=u'cYObject::sAllAmbientStarted', index=12510, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=40, contrib=<recursion detected>), 36: Container(Offset=136808, Segment=3, Type=33, Name=u'cYObject::sInited', index=12500, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=36, contrib=<recursion detected>), 32: Container(Offset=136804, Segment=3, Type=116, Name=u'CopterDir', index=12523, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=32, contrib=<recursion detected>), 28: Container(Offset=136800, Segment=3, Type=116, Name=u'gNearLimit', index=12520, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=28, contrib=<recursion detected>), 24: Container(Offset=136796, Segment=3, Type=116, Name=u'gNearBoundary', index=12519, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=24, contrib=<recursion detected>), 20: Container(Offset=136792, Segment=3, Type=116, Name=u'gMidBoundary', index=12518, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=20, contrib=<recursion detected>), 16: Container(Offset=136788, Segment=3, Type=116, Name=u'gFarBoundary', index=12517, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=16, contrib=<recursion detected>), 12: Container(Offset=136784, Segment=3, Type=116, Name=u'gFarLimit', index=12516, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=12, contrib=<recursion detected>), 8: Container(Offset=136780, Segment=3, Type=17, Name=u'gPersonBeamingSlicesSlice', index=12515, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=8, contrib=<recursion detected>), 4: Container(Offset=136776, Segment=3, Type=17, Name=u'gPersonBeamingForwardWeight', index=12513, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=4, contrib=<recursion detected>), 0: Container(Offset=136772, Segment=3, Type=17, Name=u'gPersonBeamingSlices', index=12487, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=0, contrib=<recursion detected>), 108: Container(Offset=136880, Segment=3, Type=17, Name=u'gPersonSoundBeamSlice', index=12488, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=108, contrib=<recursion detected>), 100: Container(Offset=136872, Segment=3, Type=17, Name=u'sAvLastCellX', index=12492, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=100, contrib=<recursion detected>), 104: Container(Offset=136876, Segment=3, Type=17, Name=u'sAvLastCellY', index=12493, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=104, contrib=<recursion detected>), 112: Container(Offset=136884, Segment=3, Type=17, Name=u'sCheckTotedCount', index=12494, visablity=<Visablity.Global: 1>, refcount=1, contribOffset=112, contrib=<recursion detected>)}, module=Module('Yobject.obj', 'C:\\Copter\\Source\\X\\Y\\Yobject.cpp', ...)))]
	[90m   LP.[95mTI[m = 0x36ce
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfClass @ 0x5b5c0:
	[90m   LP.[m[90m   LC.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LC.[32m[err.  *][m [95mName[m = cYObject
	[90m   LP.[m[90m   LC.[95msymbols[m = []
	[90m   LP.[m[90m   LC.[95mTI[m = 0x3509
	[90m   LP.[m[90m   LC.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  4.  2][m [95mproperties[m = ctor fwdref
	[90m   LP.[m[90m   LC.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LC.[32m[  a.  *][m [95mSize[m = 0
	, LfPointer @ 0x5ed5c:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ptr 0
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x35ef
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfStruct @ 0x5ed38:
	[90m   LP.[m[90m   LS.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LS.[32m[err.  *][m [95mName[m = TreeSim::StackElem
	[90m   LP.[m[90m   LS.[95msymbols[m = []
	[90m   LP.[m[90m   LS.[95mTI[m = 0x35ee
	[90m   LP.[m[90m   LS.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  4.  2][m [95mproperties[m = isnested fwdref
	[90m   LP.[m[90m   LS.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  a.  *][m [95mSize[m = 0
	, LfPointer @ 0x5bd88:
	[90m   LP.[32m[  0.  2][m [95mAttributes[m =
	[90m   LP.[mContainer: 
	[90m   LP.[m    ptrmode = (enum) Ptr 0
	[90m   LP.[m    ptrtype = (enum) PtrNear32 10
	[90m   LP.[m    isunaligned = False
	[90m   LP.[m    isconst = False
	[90m   LP.[m    isvolatile = False
	[90m   LP.[m    isflat32 = False
	[90m   LP.[95msymbols[m = []
	[90m   LP.[95mTI[m = 0x352f
	[90m   LP.[32m[  2.  2][m [95mType[m =
	[90m   LP.[mLfStruct @ 0x5bd68:
	[90m   LP.[m[90m   LS.[32m[  0.  2][m [95mcount[m = 0
	[90m   LP.[m[90m   LS.[32m[err.  *][m [95mName[m = Behavior::Node
	[90m   LP.[m[90m   LS.[95msymbols[m = []
	[90m   LP.[m[90m   LS.[95mTI[m = 0x352e
	[90m   LP.[m[90m   LS.[32m[  2.  2][m [95mfieldList[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  4.  2][m [95mproperties[m = isnested fwdref
	[90m   LP.[m[90m   LS.[32m[  6.  2][m [95mderivedList[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  8.  2][m [95mvshape[m = <NoType>
	[90m   LP.[m[90m   LS.[32m[  a.  *][m [95mSize[m = 0
	, )[64] PrimProcs;
	// calltype: NearC
	static enum TreeSim::ReturnCode sIdle(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIdle(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetAnim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetAnim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAttr(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAttr(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalk(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalk(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetBody(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetBody(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sRandom(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iRandom(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToAndGrabOntoStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateMyMission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateMyMission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForTrue(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForTrue(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCompareMyLocWith(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCompareMyLocWith(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSelfDecommission(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSelfDecommission(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOffMasterObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOffMasterObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocType(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocType(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisLocTypeNeutral(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisLocTypeNeutral(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCanJumpOffHere(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCanJumpOffHere(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCheckForSpotlightInMyCell(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCheckForSpotlightInMyCell(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIncrementRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIncrementRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetSurroundingRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetSurroundingRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisScurkID(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisScurkID(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGosubToInitbhav(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGosubToInitbhav(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAdjustRadiusForRiotVal(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAdjustRadiusForRiotVal(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sJoinRiot(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iJoinRiot(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetDirection(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetDirection(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnFromLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnFromLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnTowardsLastHitter(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnTowardsLastHitter(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOutOfRoadEtc(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOutOfRoadEtc(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGenerateMedevacAndSetSelfAsVictim(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTurnToNearbyFire(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTurnToNearbyFire(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDie(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDie(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sWalkToStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iWalkToStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutObjIntoTreeNum(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutObjIntoTreeNum(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimVisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimVisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyMedevacVictimInvisible(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMeMasterOfStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMeMasterOfStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sMakeMyStackObjectVisitOz(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iMakeMyStackObjectVisitOz(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutTotedMedVicOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutTotedMedVicOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTakeAnyMedVicOffStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetNumSpacesOnStackObject(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetNumSpacesOnStackObject(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDropToted(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDropToted(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sUpdateStackVictimPickedUp(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iUpdateStackVictimPickedUp(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sCloseToHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iCloseToHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sSetMyExpression(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iSetMyExpression(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetHeliSpeedPlusDamage(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetHeliSpeedPlusDamage(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sIsThisCellSafe(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iIsThisCellSafe(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPlaySound(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPlaySound(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sGetOnHeliIfHarnessRaised(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sAmIOnHeli(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iAmIOnHeli(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sThrowFieryProjectile(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iThrowFieryProjectile(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sTellStartingObjectTrueOrFalse(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sPutMyCarInStack(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iPutMyCarInStack(struct TreeSim::StackElem*, struct Behavior::Node*);
	// calltype: NearC
	static enum TreeSim::ReturnCode sDoIHaveAMaster(class cYObject*, struct TreeSim::StackElem*, struct Behavior::Node*);
	enum TreeSim::ReturnCode iDoIHaveAMaster(struct TreeSim::StackElem*, struct Behavior::Node*);
};

// Type: long;

// Type: struct _DYOBJ_INST (forward reference);

// Type: float;

// Type: char[100];

// Type: short;

// Type: void;

// Type: struct _CELL_INFO (forward reference);

// Type: struct Point2d;
class Point2d{
public:
	int32_t x;
	int32_t y;
};

// Type: struct _STOBJ_INST (forward reference);

// Type: enum cYObject::LocationType;

// Type: char;

// Type: struct cYObject::MoveInfo (forward reference);

// Type: enum cYObject::MoveErrorCode;

// Type: unsigned char;

// Type: struct TreeSim::StackElem (forward reference);
class TreeSim::StackElem{
public:
	short treeID;
	short nodeNum;
	short objectID;
	short _pad;
	unsigned char * objectPtr;
	short[4] locals;
	class Behavior* pBehavior;
	void GetTreeName(unsigned char *);
};

// Type: struct Point2d (forward reference);

// Type: short *;

// Type: double;

// Type: enum MissionSupertype;

// Type: enum MissionType;

// Type: struct _MISSION_PARMS;
class _MISSION_PARMS{
public:
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct Behavior::Node (forward reference);

// Type: enum TreeSim::ReturnCode;

// Type: struct YObjLang::IdleParam;
class YObjLang::IdleParam{
public:
	short decTemp;
};

// Type: union YObjLang::Param (forward reference);

// Type: struct YObjLang::SetAnimParam;
class YObjLang::SetAnimParam{
public:
	unsigned long animname;
};

// Type: struct cYObject::MoveInfo;
class cYObject::MoveInfo{
public:
	enum cYObject::LocationType* locType;
	char * roadDir;
	struct _DYOBJ_INST* dyBlock;
	struct _STOBJ_INST* stBlock;
};

// Type: struct YObjLang::SetBodyParam;
class YObjLang::SetBodyParam{
public:
	unsigned long bodyname;
};

// Type: struct YObjLang::RandomParam;
class YObjLang::RandomParam{
public:
	short destTemp;
	short rangeData;
	short rangeOwner;
};

// Type: struct YObjLang::WalkAndGrabParam;
class YObjLang::WalkAndGrabParam{
public:
	short decTemp;
	short dynAnimBoolean;
};

// Type: struct YObjLang::UpdateMyMissionParam;
class YObjLang::UpdateMyMissionParam{
public:
	short updateLiteral;
};

// Type: struct YObjLang::CheckForTrueParam;
class YObjLang::CheckForTrueParam{
public:
	short whatLiteral;
};

// Type: struct _HELI_DATA (forward reference);

// Type: struct YObjLang::CompareMyLocWithParam;
class YObjLang::CompareMyLocWithParam{
public:
	short withWhatLiteral;
	short distData;
	short distOwner;
};

// Type: struct YObjLang::IsThisLocTypeParam;
class YObjLang::IsThisLocTypeParam{
public:
	short locTypeLiteral;
};

// Type: struct YObjLang::CheckForSpotParam;
class YObjLang::CheckForSpotParam{
public:
	short brightnessTemp;
	short dirToHeliTemp;
};

// Type: struct YObjLang::IncrementRiotValParam;
class YObjLang::IncrementRiotValParam{
public:
	short riotValLiteral;
};

// Type: struct YObjLang::GetSurroundingRiotValParam;
class YObjLang::GetSurroundingRiotValParam{
public:
	short distTemp;
	short dirToConcTemp;
	short riotValTemp;
	short numPeopleCountedTemp;
};

// Type: struct YObjLang::IsThisScurkIDParam;
class YObjLang::IsThisScurkIDParam{
public:
	short scurkIDLiteral;
};

// Type: struct tagLogString;
class tagLogString{
public:
	unsigned long nType;
	unsigned long nTime;
	unsigned long nMissionID;
	char * szLogString;
	char[4] szData;
};

// Type: struct YObjLang::SetDirectionParam;
class YObjLang::SetDirectionParam{
public:
	short dirTemp;
};

// Type: int32_t[4][4];

// Type: struct YObjLang::GetOutOfRoadParam;
class YObjLang::GetOutOfRoadParam{
public:
	short decTemp;
};

// Type: struct YObjLang::TurnToFireParam;
class YObjLang::TurnToFireParam{
public:
	short xdistloc;
	short ydistloc;
};

// Type: enum cYObject::MissionUpdates;

// Type: struct YObjLang::AttrParam (forward reference);



// Contribution: 1:00153ff0-0015b264 Module: 196, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00554ff0
unsigned short cYObject::InBoundingRect(struct Point3d queryloc, int32_t queryRad, struct Point3d objLoc, int32_t objRad) {
// LINE 57:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 60:
	__asm        mov    eax, objLoc.x;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.x;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00555012;
// LINE 61:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 62:
	__asm        mov    eax, objLoc.x;
	__asm        add    eax, objRad;
	__asm        mov    ecx, queryloc.x;
	__asm        sub    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055502E;
// LINE 63:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 64:
	__asm        mov    eax, objLoc.y;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.y;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0055504A;
// LINE 65:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 66:
	__asm        mov    eax, queryloc.y;
	__asm        sub    eax, queryRad;
	__asm        mov    ecx, objLoc.y;
	__asm        add    ecx, objRad;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00555066;
// LINE 67:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 68:
	__asm        mov    eax, objLoc.z;
	__asm        sub    eax, objRad;
	__asm        mov    ecx, queryloc.z;
	__asm        add    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00555082;
// LINE 69:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 70:
	__asm        mov    eax, objLoc.z;
	__asm        add    eax, objRad;
	__asm        mov    ecx, queryloc.z;
	__asm        sub    ecx, queryRad;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055509E;
// LINE 71:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005550A7;
// LINE 72:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005550A7;
// LINE 73:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005550ac
void PersonHitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
	float fps;
	char[100] text;
	short tree;
	class cYObject* person;

// LINE 77:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x7C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 78:
	__asm        cmp    hitter_type, 0;
	__asm        jl     near ptr 0x005550C9;
	__asm        cmp    hitter_type, 0x14;
	__asm        jl     near ptr 0x005550E2;
	__asm        push   0x8C085;
	__asm        push   0x5BC638;
	__asm        push   0x4E;
	__asm        push   0x5BC668;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 79:
	__asm        mov    eax, hitter_type;
	__asm        mov    ax, [eax*2+0x6352D8];
	__asm        mov    tree, ax;
// LINE 81:
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00555103;
// LINE 82:
	__asm        jmp    near ptr 0x00555364;
// LINE 84:
	__asm        mov    eax, dyhittee;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x78], ax;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0055512A;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    person, eax;
	__asm        jmp    near ptr 0x005551A6;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00555143;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x0055515F;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x0055518D;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x78];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    person, eax;
	__asm        jmp    near ptr 0x005551A6;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    person, eax;
// LINE 85:
	__asm        cmp    person, 0;
	__asm        jne    near ptr 0x005551C9;
	__asm        push   0x8C085;
	__asm        push   0x5BC68C;
	__asm        push   0x55;
	__asm        push   0x5BC6B0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 88:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xEC];
	__asm        test   eax, eax;
	__asm        jle    near ptr 0x00555218;
// LINE 89:
// Block start:
	short currxn;
	__asm        mov    eax, person;
	__asm        mov    ax, [eax+0x10C];
	__asm        mov    currxn, ax;
// LINE 90:
	__asm        movsx  eax, currxn;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00555204;
	__asm        movsx  eax, currxn;
	__asm        cmp    eax, 0x384;
	__asm        jne    near ptr 0x00555213;
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0x384;
	__asm        jne    near ptr 0x00555218;
// LINE 91:
	__asm        jmp    near ptr 0x00555364;
// LINE 94:
// Block end:
	__asm        movsx  eax, tree;
	__asm        cmp    eax, 0x384;
	__asm        jne    near ptr 0x00555240;
	__asm        mov    eax, ds:[0x5B8690];
	__asm        mov    ecx, person;
	__asm        sub    eax, [ecx+0x18];
	__asm        cmp    eax, 4;
	__asm        jge    near ptr 0x00555240;
// LINE 95:
	__asm        jmp    near ptr 0x00555364;
// LINE 101:
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0055525A;
// LINE 102:
	__asm        jmp    near ptr 0x00555364;
// LINE 107:
	__asm        mov    eax, ds:[0x5B8690];
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x18], eax;
// LINE 108:
	__asm        mov    eax, dyhitter;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x134], eax;
// LINE 109:
	__asm        mov    eax, xtra_msg;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0xE8], ax;
// LINE 112:
	__asm        mov    eax, ds:[0x599BBC];
	__asm        mov    eax, [eax+0x4344];
	__asm        mov    fps, eax;
	__asm        jmp    near ptr 0x00555291;
// LINE 113:
	__asm        fld    fps;
	__asm        fcomp  qword ptr ds:[0x593600];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     near ptr 0x005552C4;
// LINE 114:
	__asm        fld    fps;
	__asm        sub    esp, 8;
	__asm        fstp   qword ptr [esp];
	__asm        movsx  eax, tree;
	__asm        push   eax;
	__asm        push   0x5BC6D4;
	__asm        lea    eax, text[0];
	__asm        push   eax;
	__asm        call   0x0056CD30;
	__asm        add    esp, 0x14;
// LINE 119:
	__asm        mov    ax, tree;
	__asm        mov    ecx, person;
	__asm        mov    [ecx+0x10C], ax;
// LINE 120:
	__asm        jmp    near ptr 0x005552D7;
	__asm        jmp    near ptr 0x005552DC;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, person;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, tree;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0055535A;
	__asm        jmp    near ptr 0x00555308;
	__asm        jmp    near ptr 0x0055530D;
	__asm        mov    eax, person;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, person;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00555340;
	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tree);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, person;
	__asm        call   0x0055CE37;
	__asm        jmp    near ptr 0x0055535F;
	__asm        jmp    near ptr 0x0055535F;
	__asm        jmp    near ptr 0x0055535F;
// LINE 122:
	__asm        jmp    near ptr 0x00555364;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00555369
struct _DYOBJ_INST* cYObject::GetDynObj(struct _DYOBJ_INST* donotignore, struct Point3d location, int32_t radius, struct _DYOBJ_INST* ignore1, struct _DYOBJ_INST* ignore2) {
	int32_t halfradius;
	struct _CELL_INFO* cptr;
	struct Point2d celloc;
	short helipartcount;
	struct _DYOBJ_INST* founddyobj;
	struct _DYOBJ_INST* dyobj;

// LINE 172:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 174:
	__asm        mov    founddyobj, 0;
// LINE 181:
	__asm        mov    eax, location.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 182:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, location.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 185:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 189:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 190:
	__asm        mov    helipartcount, 0xFFFF;
// LINE 191:
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    halfradius, eax;
// LINE 193:
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x00555651;
// LINE 196:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        jne    near ptr 0x00555409;
	__asm        movsx  eax, helipartcount;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00555458;
	__asm        movsx  eax, helipartcount;
	__asm        cmp    eax, 9;
	__asm        jge    near ptr 0x00555458;
// LINE 198:
	__asm        inc    helipartcount;
	__asm        movsx  eax, helipartcount;
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0055543D;
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x0055543D;
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     near ptr 0x0055543D;
// LINE 200:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 202:
	__asm        jmp    near ptr 0x00555409;
// LINE 203:
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x00555453;
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     near ptr 0x00555458;
// LINE 204:
	__asm        jmp    near ptr 0x005553D7;
// LINE 209:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        je     near ptr 0x00555480;
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00555480;
// LINE 211:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 212:
	__asm        jmp    near ptr 0x005553D7;
// LINE 216:
	__asm        mov    eax, ignore1;
	__asm        cmp    dyobj, eax;
	__asm        je     near ptr 0x00555498;
	__asm        mov    eax, ignore2;
	__asm        cmp    dyobj, eax;
	__asm        jne    near ptr 0x005554CD;
// LINE 218:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        jne    near ptr 0x005554C0;
	__asm        push   0x8C085;
	__asm        push   0x5BC6EC;
	__asm        push   0xDA;
	__asm        push   0x5BC714;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 219:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 220:
	__asm        jmp    near ptr 0x005553D7;
// LINE 224:
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, dyobj;
	__asm        add    eax, 0x18;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, halfradius;
	__asm        push   eax;
	__asm        mov    eax, location.z;
	__asm        push   eax;
	__asm        mov    eax, location.y;
	__asm        push   eax;
	__asm        mov    eax, location.x;
	__asm        push   eax;
	__asm        call   0x00554FF0;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00555644;
// LINE 226:
	__asm        mov    eax, donotignore;
	__asm        cmp    dyobj, eax;
	__asm        jne    near ptr 0x0055552E;
// LINE 227:
	__asm        mov    eax, dyobj;
	__asm        mov    founddyobj, eax;
// LINE 228:
	__asm        jmp    near ptr 0x00555651;
// LINE 230:
	__asm        cmp    founddyobj, 0;
	__asm        jne    near ptr 0x00555644;
// LINE 231:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x0055562F;
// Block start:
	class cYObject* obj;
	__asm        mov    eax, dyobj;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x24], ax;
// LINE 232:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0055556E;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005555EA;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00555587;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x005555A3;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x005555D1;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005555EA;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    obj, eax;
// LINE 233:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00555610;
	__asm        push   0x8C085;
	__asm        push   0x5BC738;
	__asm        push   0xE9;
	__asm        push   0x5BC740;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 234:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055562F;
// LINE 235:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 236:
	__asm        jmp    near ptr 0x005553D7;
// LINE 239:
// Block end:
	__asm        mov    eax, dyobj;
	__asm        mov    founddyobj, eax;
// LINE 240:
	__asm        cmp    donotignore, 0;
	__asm        jne    near ptr 0x00555644;
// LINE 241:
	__asm        jmp    near ptr 0x00555651;
// LINE 245:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 247:
	__asm        jmp    near ptr 0x005553D7;
// LINE 249:
	__asm        mov    eax, founddyobj;
	__asm        jmp    near ptr 0x00555659;
// LINE 250:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055565e
struct _STOBJ_INST* cYObject::GetStaticObj(struct Point3d location, int32_t radius) {
	int32_t normy;
	int32_t normx;
	struct _CELL_INFO* cptr;
	int32_t objy;
	struct Point2d celloc;
	struct _STOBJ_INST* stobj;
	int32_t flags;
	int32_t normz;

// LINE 264:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 276:
	__asm        mov    eax, location.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 277:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, location.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 280:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 283:
	__asm        mov    eax, location.x;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normx, eax;
// LINE 284:
	__asm        mov    eax, location.z;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normz, eax;
// LINE 285:
	__asm        mov    eax, location.y;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    normy, eax;
// LINE 288:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 289:
	__asm        cmp    stobj, 0;
	__asm        je     near ptr 0x0055573A;
// LINE 292:
	__asm        mov    flags, 0x200;
// LINE 301:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        lea    eax, flags;
	__asm        push   eax;
	__asm        mov    eax, normz;
	__asm        push   eax;
	__asm        mov    eax, normy;
	__asm        push   eax;
	__asm        mov    eax, normx;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D2B28;
	__asm        add    esp, 0x20;
	__asm        mov    objy, eax;
// LINE 304:
	__asm        cmp    objy, 0;
	__asm        jle    near ptr 0x0055572D;
// LINE 306:
	__asm        mov    eax, stobj;
	__asm        jmp    near ptr 0x00555741;
// LINE 310:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 311:
	__asm        jmp    near ptr 0x005556E0;
// LINE 314:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00555741;
// LINE 315:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00555746
enum cYObject::LocationType cYObject::GetLocType(short cellx, short celly) {
	short scurkID;

// LINE 318:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 321:
	__asm        movsx  eax, cellx;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00555781;
	__asm        movsx  eax, celly;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00555781;
	__asm        movsx  eax, cellx;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00555781;
	__asm        movsx  eax, celly;
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0055578C;
	__asm        mov    scurkID, 0xFFFF;
	__asm        jmp    near ptr 0x005557E8;
	__asm        movsx  eax, cellx;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, celly;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-8], ax;
	__asm        movsx  eax, word ptr [ebp-8];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005557BF;
	__asm        movsx  eax, word ptr [ebp-8];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x005557DB;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ax, [ebp-8];
	__asm        mov    scurkID, ax;
	__asm        jmp    near ptr 0x005557E8;
// LINE 322:
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00555804;
// LINE 323:
	__asm        mov    eax, 0xFFFFFFFF;
	__asm        jmp    near ptr 0x00555814;
// LINE 324:
	__asm        jmp    near ptr 0x00555814;
// LINE 325:
	__asm        movsx  eax, scurkID;
	__asm        mov    eax, [eax*4+0x636ED0];
	__asm        jmp    near ptr 0x00555814;
// LINE 326:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00555819
unsigned short cYObject::IsWater(short cellx, short celly) {
	int32_t j;

// LINE 329:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 330:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 8;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x66EB10];
	__asm        mov    j, edx;
// LINE 331:
	__asm        cmp    j, 0;
	__asm        jl     near ptr 0x00555866;
	__asm        cmp    j, 0xF;
	__asm        jge    near ptr 0x00555866;
// LINE 332:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x0055586E;
// LINE 333:
	__asm        jmp    near ptr 0x0055586E;
// LINE 334:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0055586E;
// LINE 335:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00555873
char cYObject::GetRoadDir(struct Point3d location) {
// LINE 338:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 345:
	__asm        mov    al, 3;
	__asm        jmp    near ptr 0x00555880;
// LINE 346:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00555885
enum cYObject::MoveErrorCode cYObject::TryTableMove(short speed, unsigned short moveOnlyNeutrally, struct cYObject::MoveInfo* moveinfo) {
	int32_t dx;
	short dir;
	short attempts;
	enum cYObject::MoveErrorCode movecode;
	int32_t dz;

// LINE 349:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 350:
	__asm        mov    attempts, 0;
// LINE 354:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        add    eax, 2;
	__asm        mov    dir, ax;
// LINE 355:
	__asm        movsx  eax, dir;
	__asm        and    eax, 7;
	__asm        mov    dir, ax;
// LINE 356:
	__asm        movsx  eax, dir;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, [eax*4+0x635530];
	__asm        mov    dx, eax;
// LINE 357:
	__asm        movsx  eax, dir;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    eax, [eax*4+0x635538];
	__asm        mov    dz, eax;
// LINE 358:
	__asm        movsx  eax, speed;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dx, eax;
// LINE 359:
	__asm        movsx  eax, speed;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dz, eax;
// LINE 360:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(moveOnlyNeutrally);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00555A60;
	__asm        mov    movecode, eax;
// LINE 362:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xFA];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055593C;
// LINE 363:
	__asm        mov    eax, movecode;
	__asm        jmp    near ptr 0x005559AB;
// LINE 368:
	__asm        cmp    movecode, 0;
	__asm        je     near ptr 0x00555964;
	__asm        cmp    movecode, 0xA;
	__asm        je     near ptr 0x00555964;
	__asm        cmp    movecode, 8;
	__asm        je     near ptr 0x00555964;
	__asm        cmp    movecode, 7;
	__asm        jne    near ptr 0x0055596C;
// LINE 369:
	__asm        mov    eax, movecode;
	__asm        jmp    near ptr 0x005559AB;
// LINE 371:
	__asm        inc    attempts;
// LINE 372:
	__asm        movsx  eax, attempts;
	__asm        cmp    eax, 8;
	__asm        jle    near ptr 0x00555985;
// LINE 373:
	__asm        mov    eax, movecode;
	__asm        jmp    near ptr 0x005559AB;
// LINE 374:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0xD0];
// LINE 375:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 376:
	__asm        jmp    near ptr 0x00555897;
// LINE 377:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x005559b2
enum cYObject::MoveErrorCode cYObject::TryVectorMove(struct Point3d vector, int32_t fwdspeed, struct cYObject::MoveInfo* moveinfo) {
	int32_t dx;
	int32_t Vz;
	int32_t Vx;
	int32_t dz;

// LINE 380:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 382:
	__asm        cmp    fwdspeed, 0;
	__asm        jne    near ptr 0x005559D2;
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x00555A59;
// LINE 384:
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, vector.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 385:
	__asm        mov    eax, fwdspeed;
	__asm        push   eax;
	__asm        mov    eax, vector.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    Vx, eax;
// LINE 386:
	__asm        mov    eax, fwdspeed;
	__asm        push   eax;
	__asm        mov    eax, vector.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    Vz, eax;
// LINE 388:
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        mov    eax, Vx;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dx, eax;
// LINE 389:
	__asm        mov    eax, ds:[0x5B4768];
	__asm        push   eax;
	__asm        mov    eax, Vz;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dz, eax;
// LINE 392:
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, dz;
	__asm        push   eax;
	__asm        mov    eax, dx;
	__asm        push   eax;
	__asm        mov    eax, moveinfo;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00555A60;
	__asm        jmp    near ptr 0x00555A59;
// LINE 393:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x14;
}

// FUNCTION: COPTER_D 0x00555a60
enum cYObject::MoveErrorCode cYObject::TryMove(unsigned short moveOnlyNeutrally, struct cYObject::MoveInfo* moveinfo, int32_t dx, int32_t dz, int32_t masterdy, unsigned short mastermove) {
	int32_t masterheight;
	struct _DYOBJ_INST* dyn;
	unsigned char ncellx;
	struct Point3d newloc;
	unsigned char ncelly;
	enum cYObject::MoveErrorCode retcode;

// LINE 401:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xA0;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 402:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, newloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 403:
	__asm        mov    eax, dx;
	__asm        add    newloc.x, eax;
	__asm        mov    eax, dz;
	__asm        add    newloc.z, eax;
// LINE 404:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        je     near ptr 0x00555AAD;
// LINE 405:
	__asm        mov    eax, masterdy;
	__asm        add    newloc.y, eax;
// LINE 406:
	__asm        mov    retcode, 0;
// LINE 407:
	__asm        mov    dyn, 0;
// LINE 409:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        jne    near ptr 0x00555EC5;
// LINE 410:
// Block start:
	int32_t dy;
	int32_t ht;
	struct TreeSim::StackElem* elem;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x00555B5A;
// LINE 413:
// Block start:
	struct Point3d offset;
	int32_t groundheight;
	struct _DYOBJ_INST* master;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    master, eax;
// LINE 414:
	__asm        mov    eax, newloc.x;
	__asm        mov    ecx, master;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    offset.x, eax;
	__asm        mov    offset.y, 0;
	__asm        mov    eax, newloc.z;
	__asm        mov    ecx, master;
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    offset.z, eax;
// LINE 419:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        lea    eax, offset.x;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, master;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D2AC6;
	__asm        add    esp, 0x10;
	__asm        mov    masterheight, eax;
// LINE 420:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    groundheight, eax;
// LINE 421:
	__asm        mov    eax, groundheight;
	__asm        add    eax, masterheight;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 423:
// Block end:
	__asm        jmp    near ptr 0x00555B76;
// LINE 424:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        add    eax, 0x30000;
	__asm        mov    newloc.y, eax;
// LINE 426:
	__asm        mov    eax, newloc.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x40];
	__asm        mov    dy, eax;
// LINE 427:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD4];
	__asm        shl    eax, 0x10;
	__asm        mov    ht, eax;
// LINE 428:
	__asm        cmp    dword ptr ds:[0x5C3808], 0;
	__asm        je     near ptr 0x00555BE3;
	__asm        push   1;
	__asm        call   0x00431CC0;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00555BE3;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00555BE3;
// LINE 429:
	__asm        push   0x140000;
	__asm        mov    eax, ht;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ht, eax;
// LINE 430:
	__asm        mov    eax, dy;
	__asm        cmp    ht, eax;
	__asm        jge    near ptr 0x00555BF6;
// LINE 431:
	__asm        mov    retcode, 1;
// LINE 432:
	__asm        mov    eax, ht;
	__asm        neg    eax;
	__asm        cmp    eax, dy;
	__asm        jle    near ptr 0x00555C0B;
// LINE 433:
	__asm        mov    retcode, 2;
// LINE 434:
	__asm        cmp    retcode, 0;
	__asm        je     near ptr 0x00555C54;
// LINE 435:
	__asm        cmp    moveinfo, 0;
	__asm        je     near ptr 0x00555C4C;
// LINE 436:
// Block start:
	struct _STOBJ_INST* st;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x0055565E;
	__asm        add    esp, 0x10;
	__asm        mov    st, eax;
// LINE 437:
	__asm        mov    eax, st;
	__asm        mov    ecx, moveinfo;
	__asm        mov    [ecx+0xC], eax;
// LINE 439:
// Block end:
	__asm        mov    eax, retcode;
	__asm        jmp    near ptr 0x00556469;
// LINE 442:
	__asm        jmp    near ptr 0x00555C59;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        mov    elem, eax;
// LINE 444:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        mov    dyn, eax;
// LINE 446:
	__asm        cmp    moveinfo, 0;
	__asm        je     near ptr 0x00555CCB;
// LINE 447:
	__asm        mov    eax, dyn;
	__asm        mov    ecx, moveinfo;
	__asm        mov    [ecx+8], eax;
// LINE 449:
	__asm        cmp    dyn, 0;
	__asm        je     near ptr 0x00555CEE;
	__asm        mov    eax, elem;
	__asm        mov    ecx, dyn;
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x00555CEE;
// LINE 450:
	__asm        mov    eax, 0xA;
	__asm        jmp    near ptr 0x00556469;
// LINE 451:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x00555E3C;
// LINE 452:
// Block start:
	int32_t masterrad;
	int32_t myrad;
	struct Point3d masterloc;
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    myrad, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-0x84], eax;
// LINE 453:
	__asm        mov    eax, [ebp-0x84];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x80;
	__asm        jne    near ptr 0x00555D65;
	__asm        mov    eax, ds:[0x5BC634];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    masterrad, eax;
	__asm        jmp    near ptr 0x00555D71;
	__asm        jmp    near ptr 0x00555D71;
	__asm        mov    masterrad, 0x80000;
	__asm        jmp    near ptr 0x00555D71;
// LINE 454:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        add    eax, 0x18;
	__asm        lea    ecx, masterloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 455:
	__asm        mov    eax, masterheight;
	__asm        add    masterloc.y, eax;
// LINE 457:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x00554FF0;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00555DFF;
// LINE 458:
// Block start:
	struct _DYOBJ_INST* master;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    master, eax;
// LINE 459:
	__asm        push   0x8C085;
	__asm        push   0x5BC764;
	__asm        push   0x1CB;
	__asm        push   0x5BC7A0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 463:
// Block end:
	__asm        mov    eax, masterrad;
	__asm        push   eax;
	__asm        mov    eax, masterloc.z;
	__asm        push   eax;
	__asm        mov    eax, masterloc.y;
	__asm        push   eax;
	__asm        mov    eax, masterloc.x;
	__asm        push   eax;
	__asm        mov    eax, myrad;
	__asm        push   eax;
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00554FF0;
	__asm        add    esp, 0x20;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00555E3C;
// LINE 464:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x00556469;
// LINE 466:
// Block end:
	__asm        cmp    dyn, 0;
	__asm        je     near ptr 0x00555EC5;
// LINE 467:
// Block start:
	struct _DYOBJ_INST* dontignore;
	struct _DYOBJ_INST* myspacedyn;
	__asm        mov    dontignore, 0;
// LINE 468:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x34];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, [eax+8];
	__asm        push   ecx;
	__asm        mov    ecx, [eax+4];
	__asm        push   ecx;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, dontignore;
	__asm        push   eax;
	__asm        call   0x00555369;
	__asm        add    esp, 0x1C;
	__asm        mov    myspacedyn, eax;
// LINE 469:
	__asm        mov    eax, myspacedyn;
	__asm        cmp    dyn, eax;
	__asm        je     near ptr 0x00555EC5;
// LINE 470:
	__asm        mov    eax, dyn;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x00555EBB;
// LINE 471:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x00556469;
// LINE 472:
	__asm        jmp    near ptr 0x00555EC5;
// LINE 473:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x00556469;
// LINE 502:
// Block end:
// Block end:
	__asm        mov    eax, newloc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ncellx, al;
// LINE 503:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, newloc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    ncelly, al;
// LINE 509:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        xor    eax, eax;
	__asm        mov    al, ncellx;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00555F17;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        xor    eax, eax;
	__asm        mov    al, ncelly;
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x00556446;
// LINE 511:
// Block start:
	enum cYObject::LocationType newloctype;
	__asm        movzx  ax, ncelly;
	__asm        push   eax;
	__asm        movzx  ax, ncellx;
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    newloctype, eax;
// LINE 512:
	__asm        test   reinterpret_cast<uint32_t>(mastermove), 0xFFFF;
	__asm        jne    near ptr 0x005563C4;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x005563C4;
// LINE 516:
// Block start:
	short thiscellx;
	short thiscelly;
	enum cYObject::LocationType thisloctype;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    thiscellx, ax;
// LINE 517:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    thiscelly, ax;
// LINE 518:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(thiscellx);
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00555FAE;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        xor    eax, eax;
	__asm        mov    al, reinterpret_cast<uint8_t>(thiscelly);
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x00555FCA;
	__asm        push   0x8C085;
	__asm        push   0x5BC7C4;
	__asm        push   0x206;
	__asm        push   0x5BC7D8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 519:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    thisloctype, eax;
// LINE 520:
	__asm        mov    eax, this;
	__asm        mov    ecx, thisloctype;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     near ptr 0x0055605A;
// LINE 521:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055603E;
// LINE 522:
	__asm        push   0x8C085;
	__asm        push   0x5BC7FC;
	__asm        push   0x20A;
	__asm        push   0x5BC82C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 524:
	__asm        jmp    near ptr 0x0055605A;
// LINE 525:
	__asm        push   0x8C085;
	__asm        push   0x5BC850;
	__asm        push   0x20D;
	__asm        push   0x5BC880;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 529:
	__asm        mov    eax, this;
	__asm        mov    ecx, newloctype;
	__asm        cmp    [eax+0xAC], ecx;
	__asm        je     near ptr 0x0055638D;
// LINE 530:
// Block start:
	unsigned short newneutralandsparse;
	unsigned short failnonneutral;
	unsigned short thisneutralforme;
	__asm        cmp    moveinfo, 0;
	__asm        je     near ptr 0x005560C2;
	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x005560C2;
// LINE 532:
	__asm        mov    eax, newloctype;
	__asm        mov    ecx, moveinfo;
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
// LINE 533:
	__asm        cmp    newloctype, 7;
	__asm        jne    near ptr 0x005560C2;
	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x005560C2;
// LINE 534:
	__asm        mov    eax, newloc.z;
	__asm        push   eax;
	__asm        mov    eax, newloc.y;
	__asm        push   eax;
	__asm        mov    eax, newloc.x;
	__asm        push   eax;
	__asm        call   0x00555873;
	__asm        add    esp, 0xC;
	__asm        mov    ecx, moveinfo;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], al;
// LINE 547:
	__asm        mov    failnonneutral, 0;
// LINE 548:
	__asm        mov    eax, newloctype;
	__asm        push   eax;
	__asm        movzx  ax, ncelly;
	__asm        push   eax;
	__asm        movzx  ax, ncellx;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005565B8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005560FD;
// LINE 549:
	__asm        mov    eax, 0xB;
	__asm        jmp    near ptr 0x00556469;
// LINE 550:
	__asm        jmp    near ptr 0x00556371;
	__asm        test   reinterpret_cast<uint32_t>(moveOnlyNeutrally), 0xFFFF;
	__asm        je     near ptr 0x00556319;
// LINE 551:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055613B;
	__asm        push   0x8C085;
	__asm        push   0x5BC8A4;
	__asm        push   0x227;
	__asm        push   0x5BC8D4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 552:
	__asm        mov    word ptr [ebp-0x94], 0;
	__asm        jmp    near ptr 0x00556150;
	__asm        inc    word ptr [ebp-0x94];
	__asm        movsx  eax, word ptr [ebp-0x94];
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x0055619D;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x94];
	__asm        shl    ecx, 2;
	__asm        mov    edx, newloctype;
	__asm        cmp    [ecx+eax*8+0x6372D0], edx;
	__asm        jne    near ptr 0x00556198;
	__asm        mov    word ptr [ebp-0x90], 1;
	__asm        jmp    near ptr 0x005561AB;
	__asm        jmp    near ptr 0x00556149;
	__asm        mov    word ptr [ebp-0x90], 0;
	__asm        jmp    near ptr 0x005561AB;
	__asm        xor    eax, eax;
	__asm        mov    al, ncelly;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, ncellx;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    [ebp-0x98], eax;
	__asm        mov    word ptr [ebp-0x9C], 0;
	__asm        cmp    dword ptr [ebp-0x98], 0;
	__asm        je     near ptr 0x0055620A;
	__asm        mov    eax, [ebp-0x98];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x005561F7;
	__asm        inc    word ptr [ebp-0x9C];
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x005561D1;
	__asm        jmp    near ptr 0x0055620F;
	__asm        mov    eax, newloctype;
	__asm        movsx  eax, word ptr [eax*8+0x63526C];
	__asm        movsx  ecx, word ptr [ebp-0x9C];
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x00556237;
	__asm        mov    word ptr [ebp-0x8C], 1;
	__asm        jmp    near ptr 0x00556240;
	__asm        mov    word ptr [ebp-0x8C], 0;
	__asm        test   dword ptr [ebp-0x90], 0xFFFF;
	__asm        je     near ptr 0x00556270;
	__asm        test   dword ptr [ebp-0x8C], 0xFFFF;
	__asm        je     near ptr 0x00556270;
	__asm        mov    newneutralandsparse, 1;
	__asm        jmp    near ptr 0x0055627B;
	__asm        jmp    near ptr 0x0055627B;
	__asm        mov    newneutralandsparse, 0;
	__asm        jmp    near ptr 0x0055627B;
// LINE 553:
	__asm        test   reinterpret_cast<uint32_t>(newneutralandsparse), 0xFFFF;
	__asm        jne    near ptr 0x00556314;
// LINE 554:
	__asm        mov    failnonneutral, 1;
// LINE 555:
	__asm        mov    word ptr [ebp-0x88], 0;
	__asm        jmp    near ptr 0x005562A3;
	__asm        inc    word ptr [ebp-0x88];
	__asm        movsx  eax, word ptr [ebp-0x88];
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x005562F6;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0x88];
	__asm        shl    ecx, 2;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0xAC];
	__asm        cmp    [ecx+eax*8+0x6372D0], edx;
	__asm        jne    near ptr 0x005562F1;
	__asm        mov    thisneutralforme, 1;
	__asm        jmp    near ptr 0x00556301;
	__asm        jmp    near ptr 0x0055629C;
	__asm        mov    thisneutralforme, 0;
	__asm        jmp    near ptr 0x00556301;
// LINE 556:
	__asm        test   reinterpret_cast<uint32_t>(thisneutralforme), 0xFFFF;
	__asm        jne    near ptr 0x00556314;
// LINE 557:
	__asm        mov    failnonneutral, 0;
// LINE 563:
	__asm        jmp    near ptr 0x00556371;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00556371;
// LINE 564:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xAC], 7;
	__asm        je     near ptr 0x0055635D;
	__asm        push   0x8C085;
	__asm        push   0x5BC8F8;
	__asm        push   0x234;
	__asm        push   0x5BC930;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 565:
	__asm        cmp    newloctype, 7;
	__asm        je     near ptr 0x00556371;
// LINE 566:
	__asm        mov    eax, 0xC;
	__asm        jmp    near ptr 0x00556469;
// LINE 569:
	__asm        test   reinterpret_cast<uint32_t>(failnonneutral), 0xFFFF;
	__asm        je     near ptr 0x00556388;
// LINE 570:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x00556469;
// LINE 582:
// Block end:
	__asm        jmp    near ptr 0x005563C4;
	__asm        cmp    moveinfo, 0;
	__asm        je     near ptr 0x005563C4;
	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x005563C4;
	__asm        mov    eax, moveinfo;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     near ptr 0x005563C4;
// LINE 583:
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax];
	__asm        mov    dword ptr [eax], 0;
// LINE 584:
	__asm        mov    eax, moveinfo;
	__asm        mov    eax, [eax+4];
	__asm        mov    byte ptr [eax], 0xFF;
// LINE 587:
// Block end:
	__asm        mov    eax, newloctype;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAC], eax;
// LINE 588:
	__asm        mov    ecx, this;
	__asm        call   0x005507EC;
// LINE 589:
	__asm        jmp    near ptr 0x005563E3;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x00556413;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, ncellx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, ncelly;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x00556436;
	__asm        mov    ecx, this;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x00556446;
// LINE 591:
// Block end:
	__asm        lea    eax, newloc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 595:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00556469;
// LINE 596:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x00556470
unsigned short cYObject::CanJumpOffHere() {
// LINE 605:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 606:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005565B8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005564D0;
// LINE 607:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005565B3;
// LINE 608:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x00556502;
	__asm        push   0x8C085;
	__asm        push   0x5BDD88;
	__asm        push   0x3DA;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00556507;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, [ebp-8];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, [ebp-8];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x0055654B;
	__asm        jmp    near ptr 0x00556565;
	__asm        jmp    near ptr 0x0055655D;
	__asm        jmp    near ptr 0x00556550;
	__asm        jmp    near ptr 0x0055655D;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    near ptr 0x00556565;
// LINE 609:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005565B3;
// LINE 610:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x0055658A;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        sub    eax, [ebp-4];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jle    near ptr 0x005565AA;
// LINE 611:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005565B3;
// LINE 628:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005565B3;
// LINE 630:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005565b8
unsigned short cYObject::IsWalkable(short cellx, short celly, enum cYObject::LocationType loctype) {
// LINE 633:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 634:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00556601;
	__asm        cmp    dword ptr ds:[0x5C3808], 0;
	__asm        je     near ptr 0x00556601;
	__asm        push   1;
	__asm        call   0x00431CC0;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00556601;
// LINE 635:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005566A8;
// LINE 636:
	__asm        mov    eax, reinterpret_cast<uint32_t>(celly);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(cellx);
	__asm        push   eax;
	__asm        call   0x00555819;
	__asm        add    esp, 8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00556624;
// LINE 637:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005566A8;
// LINE 638:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        cmp    eax, 0x7D00;
	__asm        je     near ptr 0x0055669F;
// LINE 639:
	__asm        cmp    loctype, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055664B;
// LINE 640:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005566A8;
// LINE 641:
	__asm        cmp    loctype, 0;
	__asm        jne    near ptr 0x0055665D;
// LINE 642:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005566A8;
// LINE 643:
	__asm        cmp    loctype, 1;
	__asm        jne    near ptr 0x0055666F;
// LINE 644:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005566A8;
// LINE 647:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x0055669F;
// LINE 648:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x005566A8;
// LINE 650:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005566A8;
// LINE 651:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x005566af
struct Point2d GetRiotCenter(long riotid) {
// LINE 656:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 657:
	__asm        mov    eax, riotid;
	__asm        push   eax;
	__asm        call   0x005566DA;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        mov    [ebp-4], edx;
	__asm        mov    eax, [ebp-8];
	__asm        mov    edx, [ebp-4];
	__asm        jmp    near ptr 0x005566D5;
// LINE 658:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005566da
struct Point2d cYObject::GetRiotCenter(long riotid) {
	short numcounted;
	struct Point2d cent;
	class cYObject* obj;
	short count;
	long overallcellx;
	long overallcelly;

// LINE 661:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 662:
	__asm        mov    numcounted, 0;
// LINE 663:
	__asm        mov    overallcellx, 0;
	__asm        mov    overallcelly, 0;
// LINE 666:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00556706;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x005567F6;
// LINE 667:
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x0055672F;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005567AB;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00556748;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00556764;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00556792;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005567AB;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 668:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005567C2;
	__asm        jmp    near ptr 0x00556702;
// LINE 669:
	__asm        mov    eax, obj;
	__asm        mov    ecx, riotid;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        jne    near ptr 0x005567F1;
// LINE 670:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        add    overallcellx, ecx;
// LINE 671:
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        add    overallcelly, ecx;
// LINE 672:
	__asm        inc    numcounted;
// LINE 674:
	__asm        jmp    near ptr 0x00556702;
// LINE 675:
	__asm        movsx  eax, numcounted;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055681E;
	__asm        push   0x8C085;
	__asm        push   0x5BC954;
	__asm        push   0x2A3;
	__asm        push   0x5BC990;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 676:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, overallcellx;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    cent.x, eax;
// LINE 677:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, overallcelly;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    cent.y, eax;
// LINE 678:
	__asm        mov    eax, cent.x;
	__asm        mov    edx, cent.y;
	__asm        jmp    near ptr 0x00556843;
// LINE 679:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00556848
void cYObject::GetSurroundingRiotInfo(short todist, short * avgriotval, short * counted, short * dirtogreatestconcentration) {
	short numcounted;
	double overallzloc;
	short startcellx;
	long riotval;
	struct _CELL_INFO* cptr;
	short celly;
	short cellx;
	double overallxloc;
	short startcelly;

// LINE 682:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x6C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 683:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    startcellx, cx;
// LINE 684:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    startcelly, cx;
// LINE 687:
	__asm        mov    riotval, 0;
// LINE 688:
	__asm        mov    numcounted, 0;
// LINE 689:
	__asm        mov    reinterpret_cast<uint32_t>(overallxloc), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&overallxloc) + 4), 0;
// LINE 690:
	__asm        mov    reinterpret_cast<uint32_t>(overallzloc), 0;
	__asm        mov    *reinterpret_cast<uint32_t*>(reinterpret_cast<char*>(&overallzloc) + 4), 0;
// LINE 692:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    near ptr 0x005568C5;
	__asm        inc    cellx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556980;
// LINE 693:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    near ptr 0x00556900;
	__asm        inc    celly;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x0055697B;
// LINE 694:
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 695:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 0xFFFFFFFB;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 696:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00556976;
	__asm        push   0x8C085;
	__asm        push   0x5BC9B4;
	__asm        push   0x2B8;
	__asm        push   0x5BC9CC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 697:
	__asm        jmp    near ptr 0x005568FC;
// LINE 698:
	__asm        jmp    near ptr 0x005568C1;
// LINE 700:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    near ptr 0x0055699E;
	__asm        inc    cellx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556C04;
// LINE 701:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    near ptr 0x005569D9;
	__asm        inc    celly;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556BFF;
// LINE 702:
// Block start:
	struct _DYOBJ_INST* dyobj;
	__asm        movsx  eax, cellx;
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        movsx  ecx, celly;
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 703:
	__asm        cmp    cptr, 0;
	__asm        jne    near ptr 0x00556A3C;
	__asm        push   0x8C085;
	__asm        push   0x5BC9F0;
	__asm        push   0x2BF;
	__asm        push   0x5BC9F8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 704:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00556A4F;
// LINE 705:
	__asm        jmp    near ptr 0x005569D5;
// LINE 706:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyobj, eax;
// LINE 707:
	__asm        cmp    dyobj, 0;
	__asm        je     near ptr 0x00556BEB;
// LINE 708:
	__asm        mov    eax, dyobj;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x00556BDE;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, dyobj;
	__asm        je     near ptr 0x00556BDE;
// Block start:
	class cYObject* obj;
	short thisriotval;
	short zloc;
	short xloc;
	__asm        mov    eax, dyobj;
	__asm        mov    ax, [eax+0xE];
	__asm        mov    [ebp-0x4C], ax;
// LINE 709:
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00556AA7;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00556B23;
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00556AC0;
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00556ADC;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00556B0A;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x4C];
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00556B23;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    obj, eax;
// LINE 710:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00556B49;
	__asm        push   0x8C085;
	__asm        push   0x5BCA1C;
	__asm        push   0x2C6;
	__asm        push   0x5BCA24;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 711:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00556B77;
	__asm        push   0x8C085;
	__asm        push   0x5BCA48;
	__asm        push   0x2C7;
	__asm        push   0x5BCA84;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 712:
	__asm        mov    eax, obj;
	__asm        mov    ax, [eax+0xE0];
	__asm        mov    thisriotval, ax;
// LINE 713:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        sar    eax, 0x10;
	__asm        mov    xloc, ax;
// LINE 714:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x44];
	__asm        sar    eax, 0x10;
	__asm        mov    zloc, ax;
// LINE 715:
	__asm        movsx  eax, xloc;
	__asm        mov    [ebp-0x58], eax;
	__asm        fild   dword ptr [ebp-0x58];
	__asm        movsx  eax, thisriotval;
	__asm        mov    [ebp-0x5C], eax;
	__asm        fimul  dword ptr [ebp-0x5C];
	__asm        fadd   overallxloc;
	__asm        fstp   overallxloc;
// LINE 716:
	__asm        movsx  eax, zloc;
	__asm        mov    [ebp-0x60], eax;
	__asm        fild   dword ptr [ebp-0x60];
	__asm        movsx  eax, thisriotval;
	__asm        mov    [ebp-0x64], eax;
	__asm        fimul  dword ptr [ebp-0x64];
	__asm        fadd   overallzloc;
	__asm        fstp   overallzloc;
// LINE 717:
	__asm        movsx  eax, thisriotval;
	__asm        add    riotval, eax;
// LINE 718:
	__asm        inc    numcounted;
// LINE 720:
// Block end:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    dyobj, eax;
// LINE 721:
	__asm        jmp    near ptr 0x00556A58;
// LINE 722:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        or     eax, 4;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 723:
// Block end:
	__asm        jmp    near ptr 0x005569D5;
// LINE 724:
	__asm        jmp    near ptr 0x0055699A;
// LINE 725:
	__asm        movsx  eax, numcounted;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00556C93;
	__asm        cmp    riotval, 0;
	__asm        je     near ptr 0x00556C93;
// LINE 726:
// Block start:
	int32_t overz;
	int32_t overx;
	__asm        fld    overallxloc;
	__asm        mov    eax, riotval;
	__asm        mov    [ebp-0x68], eax;
	__asm        fidiv  dword ptr [ebp-0x68];
	__asm        fstp   overallxloc;
// LINE 727:
	__asm        fld    overallzloc;
	__asm        mov    eax, riotval;
	__asm        mov    [ebp-0x6C], eax;
	__asm        fidiv  dword ptr [ebp-0x6C];
	__asm        fstp   overallzloc;
// LINE 728:
	__asm        fld    overallxloc;
	__asm        call   0x0056EBE8;
	__asm        shl    eax, 0x10;
	__asm        mov    overx, eax;
// LINE 729:
	__asm        fld    overallzloc;
	__asm        call   0x0056EBE8;
	__asm        shl    eax, 0x10;
	__asm        mov    overz, eax;
// LINE 731:
	__asm        mov    eax, overz;
	__asm        push   eax;
	__asm        mov    eax, overx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, dirtogreatestconcentration;
	__asm        mov    [ecx], ax;
// LINE 732:
	__asm        movsx  ecx, numcounted;
	__asm        mov    eax, riotval;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, avgriotval;
	__asm        mov    [ecx], ax;
// LINE 734:
// Block end:
	__asm        jmp    near ptr 0x00556CA3;
// LINE 735:
	__asm        mov    eax, dirtogreatestconcentration;
	__asm        mov    word ptr [eax], 0xFFFF;
// LINE 736:
	__asm        mov    eax, avgriotval;
	__asm        mov    word ptr [eax], 0;
// LINE 738:
	__asm        mov    ax, numcounted;
	__asm        mov    ecx, counted;
	__asm        mov    [ecx], ax;
// LINE 739:
	__asm        jmp    near ptr 0x00556CB2;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x00556cb9
unsigned short cYObject::GetNearbyFire(short todist, short * firecellx, short * firecelly) {
	struct _CELL_INFO* cptr;
	short celly;
	short cellx;

// LINE 745:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 748:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    near ptr 0x00556CE3;
	__asm        inc    cellx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556D9E;
// LINE 749:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    near ptr 0x00556D1E;
	__asm        inc    celly;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556D99;
// LINE 750:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 751:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        and    eax, 0xFFFFFFFB;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 752:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00556D94;
	__asm        push   0x8C085;
	__asm        push   0x5BCAA8;
	__asm        push   0x2F0;
	__asm        push   0x5BCAC0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 753:
	__asm        jmp    near ptr 0x00556D1A;
// LINE 754:
	__asm        jmp    near ptr 0x00556CDF;
// LINE 756:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    cellx, cx;
	__asm        jmp    near ptr 0x00556DBC;
	__asm        inc    cellx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, cellx;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556EB1;
// LINE 757:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        sub    ecx, eax;
	__asm        mov    celly, cx;
	__asm        jmp    near ptr 0x00556DF7;
	__asm        inc    celly;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        movsx  eax, todist;
	__asm        add    ecx, eax;
	__asm        movsx  eax, celly;
	__asm        cmp    ecx, eax;
	__asm        jl     near ptr 0x00556EAC;
// LINE 758:
	__asm        movsx  eax, celly;
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, cellx;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    cptr, eax;
// LINE 759:
	__asm        cmp    cptr, 0;
	__asm        jne    near ptr 0x00556E5A;
	__asm        push   0x8C085;
	__asm        push   0x5BCAE4;
	__asm        push   0x2F7;
	__asm        push   0x5BCAEC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 760:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00556E6D;
// LINE 761:
	__asm        jmp    near ptr 0x00556DF3;
// LINE 762:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00556E98;
// LINE 763:
	__asm        mov    ax, cellx;
	__asm        mov    ecx, firecellx;
	__asm        mov    [ecx], ax;
// LINE 764:
	__asm        mov    ax, celly;
	__asm        mov    ecx, firecelly;
	__asm        mov    [ecx], ax;
// LINE 765:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x00556EB9;
// LINE 767:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        or     eax, 4;
	__asm        mov    ecx, cptr;
	__asm        mov    [ecx], ax;
// LINE 768:
	__asm        jmp    near ptr 0x00556DF3;
// LINE 769:
	__asm        jmp    near ptr 0x00556DB8;
// LINE 770:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x00556EB9;
// LINE 771:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x00556ec0
class cYObject* cYObject::GetClosest(enum MissionSupertype missionsupertype, enum MissionType missiontype, unsigned short onlyvisible, short * dist) {
	class cYObject* closestobj;
	unsigned short closestdist;
	struct _DYOBJ_INST* closestdyn;
	short count;

// LINE 774:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 775:
	__asm        mov    closestdyn, 0;
// LINE 776:
	__asm        mov    closestobj, 0;
// LINE 777:
	__asm        mov    closestdist, 0xFFFF;
// LINE 778:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00556EEF;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00557141;
// LINE 779:
// Block start:
	class cYObject* obj;
	struct _DYOBJ_INST* dyn;
	unsigned short dist;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00556F18;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00556F94;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00556F31;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00556F4D;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x00556F7B;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x00556F94;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 780:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x00556FBA;
	__asm        push   0x8C085;
	__asm        push   0x5BCB10;
	__asm        push   0x30C;
	__asm        push   0x5BCB18;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 781:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00556FD1;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 782:
	__asm        mov    eax, obj;
	__asm        cmp    this, eax;
	__asm        jne    near ptr 0x00556FE2;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 783:
	__asm        cmp    missionsupertype, 0xFFFFFFFE;
	__asm        je     near ptr 0x00557004;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xDA];
	__asm        cmp    eax, missionsupertype;
	__asm        je     near ptr 0x00557004;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 784:
	__asm        cmp    missiontype, 0xFFFFFFFE;
	__asm        je     near ptr 0x00557026;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, missiontype;
	__asm        je     near ptr 0x00557026;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 786:
	__asm        cmp    missionsupertype, 0xFFFFFFFE;
	__asm        jne    near ptr 0x00557056;
	__asm        cmp    missiontype, 0xFFFFFFFE;
	__asm        jne    near ptr 0x00557056;
	__asm        push   0x8C085;
	__asm        push   0x5BCB3C;
	__asm        push   0x312;
	__asm        push   0x5BCB64;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 787:
	__asm        cmp    missionsupertype, 0;
	__asm        jne    near ptr 0x00557077;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xFE];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00557077;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 788:
	__asm        test   reinterpret_cast<uint32_t>(onlyvisible), 0xFFFF;
	__asm        je     near ptr 0x0055709B;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055709B;
	__asm        jmp    near ptr 0x00556EEB;
// LINE 789:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    dyn, eax;
// LINE 790:
	__asm        cmp    dyn, 0;
	__asm        jne    near ptr 0x005570CA;
	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005570CF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, dyn;
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    ax, [ebp-0x24];
	__asm        mov    dist, ax;
	__asm        jmp    near ptr 0x0055710F;
// LINE 791:
	__asm        mov    eax, reinterpret_cast<uint32_t>(dist);
	__asm        and    eax, 0xFFFF;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(closestdist);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055713C;
// LINE 792:
	__asm        mov    ax, dist;
	__asm        mov    closestdist, ax;
// LINE 793:
	__asm        mov    eax, dyn;
	__asm        mov    closestdyn, eax;
// LINE 794:
	__asm        mov    eax, obj;
	__asm        mov    closestobj, eax;
// LINE 796:
// Block end:
	__asm        jmp    near ptr 0x00556EEB;
// LINE 797:
	__asm        cmp    dist, 0;
	__asm        je     near ptr 0x0055715F;
	__asm        cmp    closestobj, 0;
	__asm        je     near ptr 0x0055715F;
// LINE 798:
	__asm        mov    ax, closestdist;
	__asm        mov    ecx, dist;
	__asm        mov    [ecx], ax;
// LINE 799:
	__asm        mov    eax, closestobj;
	__asm        jmp    near ptr 0x00557167;
// LINE 800:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x10;
}

// FUNCTION: COPTER_D 0x0055716e
void cYObject::Die() {
	struct _MISSION_PARMS mp;

// LINE 803:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 805:
	__asm        mov    mp.op, 0x17;
// LINE 806:
	__asm        mov    mp.i2num, 1;
// LINE 807:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    mp.id, eax;
// LINE 808:
	__asm        mov    mp.flags, 0;
// LINE 809:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 810:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005571C3;
// LINE 811:
	__asm        mov    ecx, this;
	__asm        call   0x0054B820;
// LINE 813:
	__asm        jmp    near ptr 0x005571E5;
// LINE 814:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x005571E5;
// LINE 816:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xEE], 1;
// LINE 817:
	__asm        jmp    near ptr 0x005571F6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005571fb
class cYObject* cYObject::GetFirst(short whichtype, short visible) {
	class cYObject* found;
	short count;

// LINE 821:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 822:
	__asm        mov    found, 0;
// LINE 823:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x0055721A;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x00557340;
// LINE 824:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00557243;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005572BF;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055725C;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00557278;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x005572A6;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005572BF;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 825:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005572D6;
	__asm        jmp    near ptr 0x00557216;
// LINE 826:
	__asm        movsx  eax, visible;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x005572FA;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005572FA;
	__asm        jmp    near ptr 0x00557216;
// LINE 827:
	__asm        movsx  eax, visible;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055731D;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055731D;
	__asm        jmp    near ptr 0x00557216;
// LINE 829:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        movsx  ecx, whichtype;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0055733B;
// LINE 830:
	__asm        mov    eax, obj;
	__asm        jmp    near ptr 0x00557347;
// LINE 831:
// Block end:
	__asm        jmp    near ptr 0x00557216;
// LINE 832:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00557347;
// LINE 833:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055734c
class cYObject* cYObject::DropToted() {
	class cYObject* obj;

// LINE 836:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 837:
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        mov    obj, eax;
// LINE 838:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x005573E9;
// LINE 839:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0055739C;
	__asm        push   0x8C085;
	__asm        push   0x5BCB88;
	__asm        push   0x347;
	__asm        push   0x5BCBA8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 840:
	__asm        jmp    near ptr 0x005573A1;
	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x005573D2;
	__asm        push   0x8C085;
	__asm        push   0x5BCBCC;
	__asm        push   0x348;
	__asm        push   0x5BCBF8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 841:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   0x0054CECA;
// LINE 842:
	__asm        mov    eax, obj;
	__asm        jmp    near ptr 0x005573F0;
// LINE 844:
	__asm        jmp    near ptr 0x005573F0;
// LINE 845:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005573F0;
// LINE 846:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x005573f5
class cYObject* cYObject::GetToted() {
	class cYObject* found;
	short count;

// LINE 849:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 850:
	__asm        mov    found, 0;
// LINE 851:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00557417;
	__asm        inc    count;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jge    near ptr 0x0055751E;
// LINE 852:
// Block start:
	class cYObject* obj;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x7D00;
	__asm        jne    near ptr 0x00557440;
	__asm        mov    eax, ds:[0x5B8680];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005574BC;
	__asm        movsx  eax, count;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00557459;
	__asm        movsx  eax, count;
	__asm        cmp    eax, 0x64;
	__asm        jl     near ptr 0x00557475;
	__asm        push   0x8C085;
	__asm        push   0x5BB9F4;
	__asm        push   0x204;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        cmp    dword ptr [eax*4+0x636D40], 0;
	__asm        jne    near ptr 0x005574A3;
	__asm        push   0x8C085;
	__asm        push   0x5BB9D0;
	__asm        push   0x205;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, count;
	__asm        mov    eax, [eax*4+0x636D40];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x005574BC;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    obj, eax;
// LINE 853:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005574D3;
	__asm        jmp    near ptr 0x00557413;
// LINE 854:
	__asm        jmp    near ptr 0x005574D8;
	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    near ptr 0x00557519;
// LINE 855:
	__asm        cmp    found, 0;
	__asm        je     near ptr 0x00557513;
	__asm        push   0x8C085;
	__asm        push   0x5BCC1C;
	__asm        push   0x357;
	__asm        push   0x5BCC44;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 856:
	__asm        mov    eax, obj;
	__asm        mov    found, eax;
// LINE 858:
// Block end:
	__asm        jmp    near ptr 0x00557413;
// LINE 860:
	__asm        mov    eax, found;
	__asm        jmp    near ptr 0x00557526;
// LINE 861:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055752b
enum TreeSim::ReturnCode cYObject::iDoIHaveAMaster(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 875:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 876:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 877:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        je     near ptr 0x0055755A;
// LINE 878:
	__asm        mov    result, 1;
// LINE 879:
	__asm        jmp    near ptr 0x00557561;
// LINE 880:
	__asm        mov    result, 0;
// LINE 881:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557569;
// LINE 882:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557570
enum TreeSim::ReturnCode cYObject::iPutMyCarInStack(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 885:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 886:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 887:
	__asm        mov    result, 0;
// LINE 888:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x005575CD;
// LINE 889:
// Block start:
	struct _DYOBJ_INST* car;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        push   eax;
	__asm        call   0x0054159D;
	__asm        add    esp, 4;
	__asm        mov    car, eax;
// LINE 890:
	__asm        cmp    car, 0;
	__asm        je     near ptr 0x005575CD;
// LINE 891:
	__asm        mov    eax, car;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 892:
	__asm        mov    result, 1;
// LINE 895:
// Block end:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005575D5;
// LINE 896:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005575dc
enum TreeSim::ReturnCode cYObject::iIdle(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IdleParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 899:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 900:
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
	__asm        mov    result, 0xFFFFFFFF;
// LINE 901:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.decTemp, ax;
// LINE 902:
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055761C;
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00557638;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055763D;
	__asm        jmp    near ptr 0x00557642;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00557676;
	__asm        mov    result, 1;
// LINE 903:
	__asm        jmp    near ptr 0x005576E7;
// LINE 904:
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00557690;
	__asm        movsx  eax, param.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x005576AC;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005576B1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x005576DA;
	__asm        mov    eax, [ebp-0x10];
	__asm        dec    word ptr [eax];
// LINE 905:
	__asm        mov    result, 2;
// LINE 907:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005576EF;
// LINE 908:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005576f6
enum TreeSim::ReturnCode cYObject::iSetAnim(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetAnimParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 911:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 912:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 913:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    param.animname, eax;
// LINE 914:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x00557746;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x0055776B;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, param.animname;
	__asm        cmp    [eax+0x1C], ecx;
	__asm        je     near ptr 0x005577B2;
	__asm        mov    eax, param.animname;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x005577B2;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005577B7;
// LINE 915:
	__asm        mov    result, 1;
// LINE 916:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005577C6;
// LINE 917:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005577cd
enum TreeSim::ReturnCode cYObject::iAttr(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 920:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 921:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 922:
	__asm        mov    eax, nparam;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055BB60;
	__asm        mov    result, eax;
// LINE 923:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557800;
// LINE 924:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557807
enum TreeSim::ReturnCode cYObject::iWalk(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short movespeed;
	short dectemp;
	short * walkloc;
	union YObjLang::Param* nparam;
	unsigned short onlyNeutral;
	enum cYObject::MoveErrorCode movecode;
	struct cYObject::MoveInfo moveinfo;
	enum TreeSim::ReturnCode result;

// LINE 927:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 928:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 929:
	__asm        mov    movecode, 0xFFFFFFFF;
// LINE 930:
	__asm        mov    movespeed, 0;
// LINE 932:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    dectemp, ax;
// LINE 933:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF8];
	__asm        mov    onlyNeutral, ax;
// LINE 934:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   0x00554C10;
	__asm        add    esp, 0xC;
// LINE 935:
	__asm        movsx  eax, dectemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00557872;
	__asm        movsx  eax, dectemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055788E;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00557893;
	__asm        jmp    near ptr 0x00557898;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, dectemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    walkloc, eax;
// LINE 937:
	__asm        mov    eax, walkloc;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005578DD;
// LINE 938:
	__asm        mov    movecode, 8;
// LINE 939:
	__asm        mov    result, 1;
// LINE 941:
	__asm        jmp    near ptr 0x00557925;
// LINE 942:
	__asm        mov    eax, walkloc;
	__asm        dec    word ptr [eax];
// LINE 944:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    movespeed, ax;
// LINE 956:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(onlyNeutral);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(movespeed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00555885;
	__asm        mov    movecode, eax;
	__asm        cmp    movecode, 0;
	__asm        jne    near ptr 0x0055791E;
// LINE 957:
	__asm        mov    result, 2;
// LINE 958:
	__asm        jmp    near ptr 0x00557925;
// LINE 959:
	__asm        mov    result, 0;
// LINE 961:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(movespeed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054E579;
// LINE 962:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557941;
// LINE 963:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557948
enum TreeSim::ReturnCode cYObject::iSetBody(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetBodyParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 966:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 967:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 968:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    param.bodyname, eax;
// LINE 969:
	__asm        mov    eax, ds:[0x5BE630];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    dword ptr [ebp-0x10], 0;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        jl     near ptr 0x0055798F;
	__asm        cmp    dword ptr [ebp-0x10], 0x20;
	__asm        jb     near ptr 0x005579A8;
	__asm        push   0x8C085;
	__asm        push   0x5BBD7C;
	__asm        push   0x6D;
	__asm        push   0x5BBDA4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x005579C0;
	__asm        mov    eax, [ebp-0x30];
	__asm        add    eax, 4;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x005579C7;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x18], eax;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x005579E4;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x005579EB;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x005579F0;
	__asm        jmp    near ptr 0x005579F5;
	__asm        jmp    near ptr 0x00557A12;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00557A0D;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00557A12;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00557A32;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00557AC6;
	__asm        jmp    near ptr 0x00557A46;
	__asm        jmp    near ptr 0x00557A3C;
	__asm        jmp    near ptr 0x00557AC6;
	__asm        jmp    near ptr 0x00557A46;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00557AC6;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00557A62;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00557A6E;
	__asm        jmp    near ptr 0x00557A6E;
	__asm        mov    dword ptr [ebp-0x20], 0;
	__asm        jmp    near ptr 0x00557A6E;
	__asm        jmp    near ptr 0x00557A73;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    eax, cl;
	__asm        mov    edx, param.bodyname;
	__asm        mov    cl, [ebp-0x10];
	__asm        shr    edx, cl;
	__asm        cmp    eax, edx;
	__asm        jne    near ptr 0x00557AC1;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00557AAA;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00557ABC;
	__asm        jmp    near ptr 0x00557AB6;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x00557ABC;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00557AD2;
	__asm        jmp    near ptr 0x005579FA;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x00557AD2;
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x90], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x00557B0A;
	__asm        push   0x8C085;
	__asm        push   0x5BBD68;
	__asm        push   0x27A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00557B0F;
// LINE 970:
	__asm        mov    result, 1;
// LINE 972:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557B1E;
// LINE 973:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557b25
enum TreeSim::ReturnCode cYObject::iRandom(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::RandomParam rand;
	short range;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 976:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 977:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 978:
	__asm        mov    eax, nparam;
	__asm        lea    ecx, rand.destTemp;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    ax, [eax+4];
	__asm        mov    [ecx+4], ax;
// LINE 980:
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(rand.rangeData);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(rand.rangeOwner);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    range, ax;
// LINE 981:
	__asm        movsx  eax, range;
	__asm        test   eax, eax;
	__asm        jg     near ptr 0x00557B94;
	__asm        push   0x8C085;
	__asm        push   0x5BCC68;
	__asm        push   0x3D5;
	__asm        push   0x5BCC88;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 982:
	__asm        movsx  eax, rand.destTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00557BAE;
	__asm        movsx  eax, rand.destTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00557BCA;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00557BCF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, rand.destTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00557BF8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(range);
	__asm        push   eax;
	__asm        call   0x0055D717;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
// LINE 983:
	__asm        mov    result, 1;
// LINE 985:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557C19;
// LINE 986:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557c20
enum TreeSim::ReturnCode cYObject::iWalkToAndGrabOntoStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	union YObjLang::Param* nparam;
	struct YObjLang::WalkAndGrabParam walkgrab;
	enum cYObject::MoveErrorCode movecode;
	struct cYObject::MoveInfo moveinfo;
	short speed;
	enum TreeSim::ReturnCode result;

// LINE 989:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 990:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 991:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00557C65;
	__asm        push   0x8C085;
	__asm        push   0x5BCCAC;
	__asm        push   0x3DF;
	__asm        push   0x5BCCC8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 992:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(walkgrab.decTemp), eax;
// LINE 995:
	__asm        mov    speed, 0;
// LINE 996:
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00557C8D;
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00557CA9;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00557CAE;
	__asm        jmp    near ptr 0x00557CB3;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, walkgrab.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00557CEE;
// LINE 997:
	__asm        mov    movecode, 8;
// LINE 998:
	__asm        mov    result, 0;
// LINE 1000:
	__asm        jmp    near ptr 0x00557F1D;
// LINE 1001:
// Block start:
	struct _DYOBJ_INST* goal;
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00557D08;
	__asm        movsx  eax, walkgrab.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00557D24;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00557D29;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, walkgrab.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00557D52;
	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    word ptr [eax];
// LINE 1002:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    goal, eax;
// LINE 1003:
	__asm        jmp    near ptr 0x00557D66;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1004:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   0x00554C10;
	__asm        add    esp, 0xC;
// LINE 1005:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    speed, ax;
// LINE 1006:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00555885;
	__asm        mov    movecode, eax;
// LINE 1007:
	__asm        cmp    movecode, 0xA;
	__asm        jne    near ptr 0x00557F00;
	__asm        mov    eax, goal;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x40];
	__asm        and    eax, 0xFFFF0000;
	__asm        mov    ecx, 0x50000;
	__asm        and    ecx, 0xFFFF0000;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x00557F00;
// LINE 1008:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0xC;
	__asm        jne    near ptr 0x00557EF4;
// LINE 1009:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00557EE8;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x38], eax;
// LINE 1010:
	__asm        mov    eax, [ebp-0x38];
	__asm        add    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, this;
	__asm        call   0x005507EC;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x30], al;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x34], al;
	__asm        jmp    near ptr 0x00557E7B;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x00557EA8;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, [ebp-0x34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0x30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x00557EC5;
	__asm        mov    ecx, this;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x00557ED2;
// LINE 1013:
	__asm        mov    eax, elem;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 1014:
	__asm        mov    result, 1;
// LINE 1016:
	__asm        jmp    near ptr 0x00557EEF;
// LINE 1017:
	__asm        mov    result, 0;
// LINE 1019:
	__asm        jmp    near ptr 0x00557EFB;
// LINE 1020:
	__asm        mov    result, 1;
// LINE 1022:
	__asm        jmp    near ptr 0x00557F1D;
	__asm        cmp    movecode, 0;
	__asm        jne    near ptr 0x00557F16;
// LINE 1023:
	__asm        mov    result, 2;
// LINE 1024:
	__asm        jmp    near ptr 0x00557F1D;
// LINE 1025:
	__asm        mov    result, 0;
// LINE 1027:
// Block end:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054E579;
// LINE 1029:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557F39;
// LINE 1030:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557f40
enum TreeSim::ReturnCode cYObject::iUpdateMyMission(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::UpdateMyMissionParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1033:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1034:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1035:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.updateLiteral, ax;
// LINE 1036:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        movsx  eax, param.updateLiteral;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055B920;
// LINE 1037:
	__asm        mov    result, 1;
// LINE 1039:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00557F89;
// LINE 1040:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00557f90
enum TreeSim::ReturnCode cYObject::iCheckForTrue(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::CheckForTrueParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1043:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x34;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1044:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1045:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.whatLiteral, ax;
// LINE 1046:
	__asm        movsx  eax, param.whatLiteral;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00558238;
// LINE 1050:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00557FDD;
// LINE 1051:
	__asm        mov    result, 1;
// LINE 1052:
	__asm        jmp    near ptr 0x00557FE4;
// LINE 1053:
	__asm        mov    result, 0;
// LINE 1054:
	__asm        jmp    near ptr 0x00558260;
// LINE 1057:
// Block start:
	struct _HELI_DATA* hd;
	short copterheight;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        call   0x004F5A90;
	__asm        add    esp, 4;
	__asm        mov    hd, eax;
// LINE 1058:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, hd;
	__asm        sub    eax, [ecx+0x154];
	__asm        sar    eax, 0x10;
	__asm        mov    copterheight, ax;
// LINE 1060:
	__asm        jmp    near ptr 0x00558023;
	__asm        movsx  eax, copterheight;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jge    near ptr 0x00558044;
// LINE 1061:
	__asm        mov    result, 1;
// LINE 1062:
	__asm        jmp    near ptr 0x0055804B;
// LINE 1063:
	__asm        mov    result, 0;
// LINE 1064:
	__asm        jmp    near ptr 0x00558260;
// LINE 1067:
// Block start:
	struct _DYOBJ_INST* obj;
	int32_t y;
	short delta_y;
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-0x20], eax;
// LINE 1068:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00558082;
	__asm        push   0x8C085;
	__asm        push   0x5BCCEC;
	__asm        push   0x42C;
	__asm        push   0x5BCD20;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1069:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        mov    [ebp-0x1C], eax;
// LINE 1070:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x1C];
	__asm        sub    eax, [ebp-0x1C];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x18], ax;
// LINE 1071:
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 5;
	__asm        jge    near ptr 0x005580CB;
// LINE 1072:
	__asm        mov    result, 1;
// LINE 1073:
	__asm        jmp    near ptr 0x005580D2;
// LINE 1074:
	__asm        mov    result, 0;
// LINE 1075:
	__asm        jmp    near ptr 0x00558260;
// LINE 1078:
// Block end:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x130];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x00558109;
	__asm        push   0x8C085;
	__asm        push   0x5BDD88;
	__asm        push   0x3DA;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055810E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA0];
	__asm        mov    ecx, [ebp-0x28];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0xA8];
	__asm        mov    ecx, [ebp-0x28];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 2;
	__asm        jge    near ptr 0x0055814D;
	__asm        jmp    near ptr 0x00558164;
	__asm        jmp    near ptr 0x00558157;
	__asm        jmp    near ptr 0x00558170;
	__asm        jmp    near ptr 0x00558164;
	__asm        test   dword ptr [ebp-0x2C], 0xFFFF;
	__asm        je     near ptr 0x00558170;
// LINE 1079:
	__asm        mov    result, 1;
// LINE 1080:
	__asm        jmp    near ptr 0x00558177;
// LINE 1081:
	__asm        mov    result, 0;
// LINE 1082:
	__asm        jmp    near ptr 0x00558260;
// LINE 1085:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x005581A5;
	__asm        push   0x8C085;
	__asm        push   0x5BCD44;
	__asm        push   0x43D;
	__asm        push   0x5BCD78;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1087:
	__asm        mov    eax, elem;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0055820B;
// LINE 1090:
// Block start:
	short copterheight;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        sub    eax, [ecx+0x154];
	__asm        sar    eax, 0x10;
	__asm        mov    copterheight, ax;
// LINE 1092:
	__asm        jmp    near ptr 0x005581DE;
	__asm        movsx  eax, copterheight;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 5;
	__asm        jge    near ptr 0x005581FF;
// LINE 1093:
	__asm        mov    result, 1;
// LINE 1094:
	__asm        jmp    near ptr 0x00558206;
// LINE 1095:
	__asm        mov    result, 0;
// LINE 1097:
// Block end:
	__asm        jmp    near ptr 0x00558212;
// LINE 1098:
	__asm        mov    result, 1;
// LINE 1100:
	__asm        jmp    near ptr 0x00558260;
// LINE 1103:
	__asm        push   0x8C085;
	__asm        push   0x5BCD9C;
	__asm        push   0x44F;
	__asm        push   0x5BCDB8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1104:
	__asm        jmp    near ptr 0x00558260;
	__asm        cmp    dword ptr [ebp-0x34], 4;
	__asm        ja     near ptr 0x00558217;
	__asm        mov    eax, [ebp-0x34];
	__asm        jmp    dword ptr [eax*4+0x55824C];
	__asm        ret    0x557F;
	__asm        add    cl, ch;
	__asm        jg     short 0x005582A8;
	__asm        add    [eax-0x80], dl;
	__asm        push   ebp;
	__asm        add    bh, dl;
	__asm        adc    byte ptr [ebp], 0x7C;
	__asm        (bad);
// LINE 1105:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558268;
// LINE 1106:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055826f
enum TreeSim::ReturnCode cYObject::iCompareMyLocWith(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct Point2d destloc;
	struct YObjLang::CompareMyLocWithParam param;
	union YObjLang::Param* nparam;
	short distance;
	enum TreeSim::ReturnCode result;
	struct _DYOBJ_INST* destobj;

// LINE 1109:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x3C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1110:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1111:
	__asm        mov    eax, nparam;
	__asm        lea    ecx, param.withWhatLiteral;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    ax, [eax+4];
	__asm        mov    [ecx+4], ax;
// LINE 1113:
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(param.distData);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(param.distOwner);
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    distance, ax;
// LINE 1115:
	__asm        mov    destobj, 0;
// LINE 1116:
	__asm        movsx  eax, param.withWhatLiteral;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    near ptr 0x005586A2;
// LINE 1118:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005582F7;
	__asm        push   0x8C085;
	__asm        push   0x5BCDDC;
	__asm        push   0x45E;
	__asm        push   0x5BCE14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1119:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x1C], 0xFFFFFFFF;
	__asm        jne    near ptr 0x00558320;
	__asm        push   0x8C085;
	__asm        push   0x5BCE38;
	__asm        push   0x45F;
	__asm        push   0x5BCE64;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1120:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        call   0x004FBBCA;
	__asm        add    esp, 4;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    destloc.x, ecx;
	__asm        mov    destloc.y, eax;
// LINE 1121:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1123:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    destobj, eax;
// LINE 1124:
	__asm        cmp    destobj, 0;
	__asm        jne    near ptr 0x00558371;
	__asm        push   0x8C085;
	__asm        push   0x5BCE88;
	__asm        push   0x464;
	__asm        push   0x5BCEC0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1125:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1127:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    destobj, eax;
// LINE 1128:
	__asm        cmp    destobj, 0;
	__asm        jne    near ptr 0x005583A5;
	__asm        push   0x8C085;
	__asm        push   0x5BCEE4;
	__asm        push   0x468;
	__asm        push   0x5BCF20;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1129:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1131:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    destobj, eax;
// LINE 1133:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1136:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    destobj, eax;
// LINE 1138:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1141:
	__asm        push   0x8C085;
	__asm        push   0x5BCF44;
	__asm        push   0x475;
	__asm        push   0x5BCF60;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1144:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1147:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0xFFFFFFFE;
	__asm        push   1;
	__asm        mov    ecx, this;
	__asm        call   0x00556EC0;
	__asm        mov    obj, eax;
// LINE 1148:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0055841C;
// LINE 1149:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1150:
	__asm        jmp    near ptr 0x00558423;
// LINE 1151:
	__asm        mov    result, 0;
// LINE 1153:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    near ptr 0x0055844E;
	__asm        push   0x8C085;
	__asm        push   0x5BCF84;
	__asm        push   0x481;
	__asm        push   0x5BCF8C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1154:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1157:
// Block end:
	__asm        mov    eax, ds:[0x5B8680];
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1158:
	__asm        mov    result, 1;
// LINE 1159:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1162:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0xFFFFFFFE;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00556EC0;
	__asm        mov    obj, eax;
// LINE 1163:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x00558495;
// LINE 1164:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1165:
	__asm        jmp    near ptr 0x0055849C;
// LINE 1166:
	__asm        mov    result, 0;
// LINE 1168:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    near ptr 0x005584C7;
	__asm        push   0x8C085;
	__asm        push   0x5BCFB0;
	__asm        push   0x490;
	__asm        push   0x5BCFB8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1169:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1172:
// Block start:
	class cYObject* obj;
// Block end:
	__asm        push   0;
	__asm        push   1;
	__asm        push   6;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, this;
	__asm        call   0x00556EC0;
	__asm        mov    [ebp-0x2C], eax;
// LINE 1173:
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x005584F7;
// LINE 1174:
	__asm        mov    eax, [ebp-0x2C];
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1175:
	__asm        jmp    near ptr 0x005584FE;
// LINE 1176:
	__asm        mov    result, 0;
// LINE 1178:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        cmp    eax, destobj;
	__asm        jne    near ptr 0x00558529;
	__asm        push   0x8C085;
	__asm        push   0x5BCFDC;
	__asm        push   0x49A;
	__asm        push   0x5BCFE4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1179:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1182:
// Block end:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   0;
	__asm        call   0x0050176E;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1183:
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x00558569;
// LINE 1184:
	__asm        mov    result, 1;
// LINE 1185:
	__asm        jmp    near ptr 0x00558570;
// LINE 1186:
	__asm        mov    result, 0;
// LINE 1187:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1190:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   3;
	__asm        call   0x0050176E;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1191:
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x005585B0;
// LINE 1192:
	__asm        mov    result, 1;
// LINE 1193:
	__asm        jmp    near ptr 0x005585B7;
// LINE 1194:
	__asm        mov    result, 0;
// LINE 1195:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1199:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   1;
	__asm        call   0x0050176E;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1200:
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x005585F7;
// LINE 1201:
	__asm        mov    result, 1;
// LINE 1202:
	__asm        jmp    near ptr 0x005585FE;
// LINE 1203:
	__asm        mov    result, 0;
// LINE 1204:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1207:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        push   ecx;
	__asm        push   2;
	__asm        call   0x0050176E;
	__asm        add    esp, 0xC;
	__asm        mov    destobj, eax;
// LINE 1208:
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x0055863E;
// LINE 1209:
	__asm        mov    result, 1;
// LINE 1210:
	__asm        jmp    near ptr 0x00558645;
// LINE 1211:
	__asm        mov    result, 0;
// LINE 1212:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1215:
// Block start:
	class cYObject* obj;
	__asm        push   0;
	__asm        push   1;
	__asm        push   0;
	__asm        push   0xFFFFFFFE;
	__asm        mov    ecx, this;
	__asm        call   0x00556EC0;
	__asm        mov    obj, eax;
// LINE 1216:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x00558675;
// LINE 1217:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    destobj, eax;
// LINE 1218:
	__asm        jmp    near ptr 0x0055867C;
// LINE 1219:
	__asm        mov    result, 0;
// LINE 1221:
	__asm        jmp    near ptr 0x005586F2;
// LINE 1224:
// Block end:
	__asm        push   0x8C085;
	__asm        push   0x5BD008;
	__asm        push   0x4C8;
	__asm        push   0x5BD028;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1225:
	__asm        jmp    near ptr 0x005586F2;
	__asm        cmp    dword ptr [ebp-0x3C], 0xE;
	__asm        ja     near ptr 0x00558681;
	__asm        mov    eax, [ebp-0x3C];
	__asm        jmp    dword ptr [eax*4+0x5586B6];
	__asm        leave;
	__asm        adc    byte ptr [ebp], 0x76;
	__asm        adc    dword ptr [ebp], 0xFFFFFFBD;
	__asm        adc    dword ptr [ebp], 0xFFFFFFAA;
	__asm        adc    dword ptr [ebp], 0x3F;
	__asm        adc    dword ptr [ebp], 0xFFFFFFCC;
	__asm        test   [ebp], dl;
	__asm        push   0xFFFFFF84;
	__asm        push   ebp;
	__asm        add    al, dl;
	__asm        adc    dword ptr [ebp], 0xFFFFFFF1;
	__asm        adc    dword ptr [ebp], 0x53;
	__asm        test   [ebp], dl;
	__asm        test   cs:[ebp], edx;
	__asm        mov    esp, 0x3005585;
	__asm        xchg   dl, [ebp];
	__asm        jne    short 0x00558671;
	__asm        push   ebp;
	__asm        add    [edx-0x7A], cl;
	__asm        push   ebp;
	__asm        (bad);
// LINE 1226:
	__asm        cmp    result, 0;
	__asm        je     near ptr 0x005587B9;
// LINE 1227:
// Block start:
	short dist;
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x00558728;
// LINE 1228:
	__asm        mov    eax, destobj;
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    destloc.x, eax;
// LINE 1229:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, destobj;
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    destloc.y, eax;
// LINE 1232:
	__asm        jmp    near ptr 0x0055872D;
	__asm        jmp    near ptr 0x00558732;
	__asm        jmp    near ptr 0x00558737;
	__asm        mov    eax, destloc.y;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  ecx, ax;
	__asm        mov    eax, destloc.x;
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0x88];
	__asm        sub    eax, ebx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cmp    ecx, eax;
	__asm        jg     near ptr 0x00558777;
	__asm        mov    ecx, eax;
	__asm        movsx  eax, cx;
	__asm        and    eax, 0xFF;
	__asm        mov    dist, ax;
// LINE 1233:
	__asm        movsx  eax, dist;
	__asm        movsx  ecx, distance;
	__asm        cmp    eax, ecx;
	__asm        jl     near ptr 0x0055879F;
// LINE 1234:
	__asm        mov    result, 0;
// LINE 1235:
	__asm        jmp    near ptr 0x005587B9;
// LINE 1236:
	__asm        cmp    destobj, 0;
	__asm        je     near ptr 0x005587B2;
// LINE 1237:
	__asm        mov    eax, destobj;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1238:
	__asm        mov    result, 1;
// LINE 1241:
// Block end:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005587C1;
// LINE 1242:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005587c8
enum TreeSim::ReturnCode cYObject::iSelfDecommission(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1245:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1246:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1247:
	__asm        mov    ecx, this;
	__asm        call   0x0054B820;
// LINE 1248:
	__asm        mov    result, 3;
// LINE 1250:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005587F2;
// LINE 1251:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005587f9
enum TreeSim::ReturnCode cYObject::iGetOffMasterObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1254:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1255:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1256:
	__asm        mov    ecx, this;
	__asm        call   0x00556470;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005588BA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x0055884B;
	__asm        push   0x8C085;
	__asm        push   0x5BB998;
	__asm        push   0x41E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
	__asm        mov    [ebp-8], ax;
	__asm        test   dword ptr [ebp-8], 0xFFFF;
	__asm        jne    near ptr 0x00558882;
	__asm        push   0x8C085;
	__asm        push   0x5BB978;
	__asm        push   0x420;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x40];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551BF7;
	__asm        add    esp, 0xC;
	__asm        lea    eax, [eax+0x30000];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
	__asm        jmp    near ptr 0x005588B0;
	__asm        jmp    near ptr 0x005588D1;
	__asm        jmp    near ptr 0x005588C4;
	__asm        jmp    near ptr 0x005588DD;
	__asm        jmp    near ptr 0x005588D1;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        je     near ptr 0x005588DD;
// LINE 1257:
	__asm        mov    result, 1;
// LINE 1258:
	__asm        jmp    near ptr 0x005588E4;
// LINE 1259:
	__asm        mov    result, 0;
// LINE 1261:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005588EC;
// LINE 1262:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005588f3
enum TreeSim::ReturnCode cYObject::iTurnTowardsStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1265:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1266:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1267:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055892F;
	__asm        push   0x8C085;
	__asm        push   0x5BD04C;
	__asm        push   0x4F3;
	__asm        push   0x5BD064;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
// LINE 1268:
	__asm        jmp    near ptr 0x0055893D;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1269:
	__asm        mov    result, 1;
// LINE 1271:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558983;
// LINE 1272:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055898a
enum TreeSim::ReturnCode cYObject::iIsThisLocType(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IsThisLocTypeParam param;
	union YObjLang::Param* nparam;
	enum cYObject::LocationType loctype;
	enum TreeSim::ReturnCode result;

// LINE 1275:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1276:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1277:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.locTypeLiteral, ax;
// LINE 1278:
	__asm        movsx  eax, param.locTypeLiteral;
	__asm        mov    loctype, eax;
// LINE 1279:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        cmp    eax, loctype;
	__asm        jne    near ptr 0x005589EC;
// LINE 1280:
	__asm        mov    result, 1;
// LINE 1281:
	__asm        jmp    near ptr 0x005589F3;
// LINE 1282:
	__asm        mov    result, 0;
// LINE 1284:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005589FB;
// LINE 1285:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558a02
enum TreeSim::ReturnCode cYObject::iIsThisLocTypeNeutral(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum cYObject::LocationType loctype;
	enum TreeSim::ReturnCode result;

// LINE 1288:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1289:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1290:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
// LINE 1291:
	__asm        mov    word ptr [ebp-0xC], 0;
	__asm        jmp    near ptr 0x00558A47;
	__asm        inc    word ptr [ebp-0xC];
	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        cmp    eax, 0xA;
	__asm        jge    near ptr 0x00558A82;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD6];
	__asm        lea    eax, [eax+eax*4];
	__asm        movsx  ecx, word ptr [ebp-0xC];
	__asm        shl    ecx, 2;
	__asm        mov    edx, loctype;
	__asm        cmp    [ecx+eax*8+0x6372D0], edx;
	__asm        jne    near ptr 0x00558A7D;
	__asm        jmp    near ptr 0x00558A99;
	__asm        jmp    near ptr 0x00558A43;
	__asm        jmp    near ptr 0x00558AA5;
	__asm        jmp    near ptr 0x00558A99;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        je     near ptr 0x00558AA5;
// LINE 1292:
	__asm        mov    result, 1;
// LINE 1293:
	__asm        jmp    near ptr 0x00558AAC;
// LINE 1294:
	__asm        mov    result, 0;
// LINE 1296:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558AB4;
// LINE 1297:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558abb
enum TreeSim::ReturnCode cYObject::iCanJumpOffHere(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1300:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1301:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1302:
	__asm        mov    ecx, this;
	__asm        call   0x00556470;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00558AED;
// LINE 1303:
	__asm        mov    result, 1;
// LINE 1304:
	__asm        jmp    near ptr 0x00558AF4;
// LINE 1305:
	__asm        mov    result, 0;
// LINE 1307:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558AFC;
// LINE 1308:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558b03
enum TreeSim::ReturnCode cYObject::iCheckForSpotlightInMyCell(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::CheckForSpotParam param;
	struct Point2d loc;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1311:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1312:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1313:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(param.brightnessTemp), eax;
// LINE 1315:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        call   0x004F6321;
	__asm        add    esp, 4;
// LINE 1316:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, loc.x;
	__asm        jne    near ptr 0x00558C86;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, loc.y;
	__asm        jne    near ptr 0x00558C86;
// LINE 1317:
	__asm        movsx  eax, param.brightnessTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558B75;
	__asm        movsx  eax, param.brightnessTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558B91;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558B96;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.brightnessTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00558BBF;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x140];
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
// LINE 1318:
	__asm        movsx  eax, param.dirToHeliTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558BEA;
	__asm        movsx  eax, param.dirToHeliTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558C06;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558C0B;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirToHeliTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00558C34;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00558C47;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
// LINE 1319:
	__asm        mov    result, 1;
// LINE 1321:
	__asm        jmp    near ptr 0x00558C8D;
// LINE 1322:
	__asm        mov    result, 0;
// LINE 1324:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558C95;
// LINE 1325:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558c9c
enum TreeSim::ReturnCode cYObject::iIncrementRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::IncrementRiotValParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1328:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1329:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1330:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.riotValLiteral, ax;
// LINE 1331:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xE0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE4], ax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        movsx  ecx, param.riotValLiteral;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE0], ax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 0xA;
	__asm        jle    near ptr 0x00558D14;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0xA;
	__asm        jmp    near ptr 0x00558D32;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x00558D32;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE0], 0;
	__asm        jmp    near ptr 0x00558D37;
// LINE 1332:
	__asm        mov    result, 1;
// LINE 1334:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558D46;
// LINE 1335:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558d4d
enum TreeSim::ReturnCode cYObject::iGetSurroundingRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short numcounted;
	short todist;
	short dirtoconc;
	struct YObjLang::GetSurroundingRiotValParam param;
	union YObjLang::Param* nparam;
	short actualriotval;
	enum TreeSim::ReturnCode result;

// LINE 1338:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1339:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1340:
	__asm        mov    eax, nparam;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    reinterpret_cast<uint32_t>(param.distTemp), ecx;
	__asm        mov    reinterpret_cast<uint32_t>(param.riotValTemp), eax;
// LINE 1341:
	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558DA0;
	__asm        push   0x8C085;
	__asm        push   0x5BD088;
	__asm        push   0x53D;
	__asm        push   0x5BD09C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1342:
	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558DBA;
	__asm        movsx  eax, param.distTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558DD6;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558DDB;
	__asm        jmp    near ptr 0x00558DE0;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.distTemp;
	__asm        mov    ax, [eax+ecx*2+8];
	__asm        mov    todist, ax;
// LINE 1344:
	__asm        lea    eax, dirtoconc;
	__asm        push   eax;
	__asm        lea    eax, numcounted;
	__asm        push   eax;
	__asm        lea    eax, actualriotval;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(todist);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00556848;
// LINE 1345:
	__asm        movsx  eax, param.dirToConcTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558E36;
	__asm        movsx  eax, param.dirToConcTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558E52;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558E57;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirToConcTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00558E80;
	__asm        mov    ax, dirtoconc;
	__asm        mov    ecx, [ebp-0x24];
	__asm        mov    [ecx], ax;
// LINE 1346:
	__asm        movsx  eax, param.riotValTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558EA4;
	__asm        movsx  eax, param.riotValTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558EC0;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558EC5;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.riotValTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x00558EEE;
	__asm        mov    ax, actualriotval;
	__asm        mov    ecx, [ebp-0x28];
	__asm        mov    [ecx], ax;
// LINE 1347:
	__asm        movsx  eax, param.numPeopleCountedTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00558F12;
	__asm        movsx  eax, param.numPeopleCountedTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00558F2E;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00558F33;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.numPeopleCountedTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00558F5C;
	__asm        mov    ax, numcounted;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        mov    [ecx], ax;
// LINE 1348:
	__asm        mov    result, 1;
// LINE 1350:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00558F75;
// LINE 1351:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00558f7c
enum TreeSim::ReturnCode cYObject::iIsThisScurkID(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short scurkID;
	struct YObjLang::IsThisScurkIDParam param;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1354:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1355:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1356:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.scurkIDLiteral, ax;
// LINE 1357:
	__asm        mov    ax, param.scurkIDLiteral;
	__asm        mov    scurkID, ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        mov    [ebp-0x18], ax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        mov    [ebp-0x1C], ax;
// LINE 1358:
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00558FFA;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00558FFA;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00558FFA;
	__asm        movsx  eax, word ptr [ebp-0x18];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0055900C;
	__asm        movsx  eax, scurkID;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055908C;
	__asm        jmp    near ptr 0x00559080;
	__asm        movsx  eax, word ptr [ebp-0x1C];
	__asm        mov    eax, [eax*4+0x639850];
	__asm        movsx  ecx, word ptr [ebp-0x18];
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x14], ax;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055903F;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        cmp    eax, 0x100;
	__asm        jl     near ptr 0x0055905B;
	__asm        push   0x8C085;
	__asm        push   0x5BBA34;
	__asm        push   0x18A;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, word ptr [ebp-0x14];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0055908C;
	__asm        jmp    near ptr 0x00559080;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        movsx  ecx, scurkID;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0055908C;
// LINE 1359:
	__asm        mov    result, 1;
// LINE 1360:
	__asm        jmp    near ptr 0x00559093;
// LINE 1361:
	__asm        mov    result, 0;
// LINE 1363:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055909B;
// LINE 1364:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005590a2
enum TreeSim::ReturnCode cYObject::iGosubToInitbhav(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short id;
	enum TreeSim::ReturnCode result;

// LINE 1367:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1368:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1370:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        mov    id, ax;
// LINE 1371:
	__asm        jmp    near ptr 0x005590C8;
	__asm        jmp    near ptr 0x005590CD;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, id;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00559156;
	__asm        jmp    near ptr 0x005590F9;
	__asm        jmp    near ptr 0x005590FE;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x00559131;
	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, reinterpret_cast<uint32_t>(id);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x0055CE37;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00559184;
	__asm        jmp    near ptr 0x00559168;
	__asm        jmp    near ptr 0x0055915B;
	__asm        jmp    near ptr 0x00559168;
	__asm        test   dword ptr [ebp-0xC], 0xFFFF;
	__asm        jne    near ptr 0x00559184;
// LINE 1372:
	__asm        push   0x8C085;
	__asm        push   0x5BD0C0;
	__asm        push   0x55C;
	__asm        push   0x5BD0D0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1374:
	__asm        mov    result, 1;
// LINE 1376:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559193;
// LINE 1377:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055919a
enum TreeSim::ReturnCode cYObject::iAdjustRadiusForRiotVal(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1380:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1381:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1382:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xE0];
	__asm        cmp    eax, 5;
	__asm        jle    near ptr 0x005591DD;
	__asm        push   0x20000;
	__asm        push   0x50000;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x34], eax;
	__asm        jmp    near ptr 0x005591E7;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x50000;
	__asm        jmp    near ptr 0x005591EC;
// LINE 1383:
	__asm        mov    result, 1;
// LINE 1385:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005591FB;
// LINE 1386:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559202
enum TreeSim::ReturnCode cYObject::iJoinRiot(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1389:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x8C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1390:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1391:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055925F;
	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559264;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x00559294;
	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x005592E3;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x005592DE;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559316;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00559316;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x00559337;
	__asm        jmp    near ptr 0x00559368;
	__asm        jmp    near ptr 0x00559337;
	__asm        jmp    near ptr 0x0055934C;
	__asm        test   dword ptr [ebp-0x88], 0xFFFF;
	__asm        jne    near ptr 0x00559368;
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055942A;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x005593FF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x005593D7;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x80], ax;
	__asm        jmp    near ptr 0x005593ED;
	__asm        jmp    near ptr 0x005593E2;
	__asm        mov    word ptr [ebp-0x80], 0xFFFF;
	__asm        jmp    near ptr 0x005593ED;
	__asm        mov    ax, [ebp-0x84];
	__asm        mov    [ebp-0x80], ax;
	__asm        jmp    near ptr 0x005593F2;
	__asm        movsx  eax, word ptr [ebp-0x80];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00559404;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x0055942F;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x7C], eax;
	__asm        cmp    dword ptr [ebp-0x7C], 0;
	__asm        jne    near ptr 0x00559489;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x00559497;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0055949C;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x005594BA;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x005594D6;
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x005507EC;
	__asm        jmp    near ptr 0x005594E6;
// LINE 1392:
	__asm        mov    ecx, this;
	__asm        call   0x0054B9E6;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055951B;
// LINE 1393:
	__asm        mov    lstr.szLogString, 0x5BD0F4;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   0x004EBC2B;
	__asm        add    esp, 8;
// LINE 1395:
	__asm        mov    result, 3;
// LINE 1397:
	__asm        jmp    near ptr 0x00559522;
// LINE 1398:
	__asm        mov    result, 0;
// LINE 1399:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00559553;
	__asm        push   0x8C085;
	__asm        push   0x5BBA9C;
	__asm        push   0x2D3;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x10A];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0055CC58;
	__asm        jmp    near ptr 0x0055957E;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 1;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xE2], 1;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x005595C9;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x005595D7;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        inc    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x005595DC;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        movsx  ecx, word ptr ds:[0x5B8670];
	__asm        add    eax, ecx;
	__asm        cmp    eax, 0x64;
	__asm        jle    near ptr 0x00559611;
	__asm        push   0x8C085;
	__asm        push   0x5BBA7C;
	__asm        push   0x2D9;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00559660;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055965B;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559693;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x00559693;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x005596B4;
	__asm        jmp    near ptr 0x005596E2;
	__asm        jmp    near ptr 0x005596B4;
	__asm        jmp    near ptr 0x005596C6;
	__asm        test   dword ptr [ebp-0x78], 0xFFFF;
	__asm        jne    near ptr 0x005596E2;
	__asm        push   0x8C085;
	__asm        push   0x5BBA54;
	__asm        push   0x2DA;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x005596F2;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x00559722;
	__asm        push   0x8C085;
	__asm        push   0x5BBAEC;
	__asm        push   0x1F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, [ebp-0x74];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        push   0x40;
	__asm        mov    eax, this;
	__asm        add    eax, 0x48;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        call   0x0056A800;
	__asm        add    esp, 0xC;
	__asm        push   3;
	__asm        lea    eax, [ebp-0x74];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00559773;
	__asm        jmp    near ptr 0x00559778;
// LINE 1401:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559780;
// LINE 1402:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559787
enum TreeSim::ReturnCode cYObject::iSetDirection(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::SetDirectionParam param;
	union YObjLang::Param* nparam;
	short count;
	enum TreeSim::ReturnCode result;

// LINE 1405:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1406:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1407:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    param.dirTemp, ax;
// LINE 1408:
	__asm        movsx  eax, param.dirTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x005597C7;
	__asm        movsx  eax, param.dirTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x005597E3;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x005597E8;
	__asm        jmp    near ptr 0x005597ED;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.dirTemp;
	__asm        mov    ax, [eax+ecx*2+8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1409:
	__asm        mov    count, 0;
// LINE 1410:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        cmp    eax, 0xFFFFFFE2;
	__asm        jle    near ptr 0x00559843;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        cmp    eax, 0x1E;
	__asm        jl     near ptr 0x0055985F;
	__asm        push   0x8C085;
	__asm        push   0x5BD100;
	__asm        push   0x582;
	__asm        push   0x5BD11C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1411:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0055988D;
// LINE 1412:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        add    eax, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
	__asm        jmp    near ptr 0x0055985F;
// LINE 1413:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1414:
	__asm        mov    result, 1;
// LINE 1416:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x005598B3;
// LINE 1417:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x005598ba
enum TreeSim::ReturnCode cYObject::iThrowProjectile(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct Point3d personunitvect;
	struct Point3d debrisunitvect;
	struct Point2d celloc;
	struct Point3d loc;
	long what;
	int32_t[4][4] mat;
	int32_t speed;
	enum TreeSim::ReturnCode result;
	long scale;

// LINE 1420:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x80;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1421:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1422:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x005598FC;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x00559922;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x5468726F;
	__asm        je     near ptr 0x0055996A;
	__asm        push   0x5468726F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x0055996A;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055996F;
// LINE 1423:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    celloc.x, ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    celloc.y, ecx;
// LINE 1424:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1425:
	__asm        mov    scale, 1;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD0];
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax*4+0x635530];
	__asm        lea    ecx, personunitvect.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1429:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1431:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0xC8;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1432:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        lea    eax, debrisunitvect.x;
	__asm        push   eax;
	__asm        lea    eax, personunitvect.x;
	__asm        push   eax;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1433:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x32;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x32];
	__asm        shl    eax, 0x10;
	__asm        mov    speed, eax;
// LINE 1434:
	__asm        mov    what, 0xA;
// LINE 1435:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x3C;
	__asm        jne    near ptr 0x00559A4E;
// LINE 1436:
	__asm        mov    what, 4;
// LINE 1437:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, scale;
	__asm        push   eax;
	__asm        lea    eax, debrisunitvect.x;
	__asm        push   eax;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        mov    eax, what;
	__asm        push   eax;
	__asm        call   0x0051EEE5;
	__asm        add    esp, 0x20;
// LINE 1438:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x90], 0;
	__asm        jne    near ptr 0x00559AA8;
	__asm        push   0x8C085;
	__asm        push   0x5BBB9C;
	__asm        push   0x2F8;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        je     near ptr 0x00559ACE;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x98];
	__asm        cmp    dword ptr [eax+0x1C], 0x4E6F4D6F;
	__asm        je     near ptr 0x00559B16;
	__asm        push   0x4E6F4D6F;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+0x90];
	__asm        call   0x00560BF0;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x98], eax;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x98], 0;
	__asm        jne    near ptr 0x00559B16;
	__asm        push   0x8C085;
	__asm        push   0x5BBB74;
	__asm        push   0x2FB;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559B1B;
// LINE 1439:
	__asm        mov    result, 1;
// LINE 1441:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559B2A;
// LINE 1442:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559b31
enum TreeSim::ReturnCode cYObject::iTurnFromStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1445:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1446:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1447:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x00559B6D;
	__asm        push   0x8C085;
	__asm        push   0x5BD140;
	__asm        push   0x5A7;
	__asm        push   0x5BD15C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
// LINE 1448:
	__asm        jmp    near ptr 0x00559B7B;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        add    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1449:
	__asm        mov    result, 1;
// LINE 1451:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559BC1;
// LINE 1452:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559bc8
enum TreeSim::ReturnCode cYObject::iTurnFromLastHitter(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1455:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1456:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        jne    near ptr 0x00559C07;
	__asm        push   0x8C085;
	__asm        push   0x5BD180;
	__asm        push   0x5B1;
	__asm        push   0x5BD190;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-8], eax;
// LINE 1458:
	__asm        jmp    near ptr 0x00559C18;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        add    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1459:
	__asm        mov    result, 1;
// LINE 1461:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559C5E;
// LINE 1462:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559c65
enum TreeSim::ReturnCode cYObject::iTurnTowardsLastHitter(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1465:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1466:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1467:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x140], 0;
	__asm        jne    near ptr 0x00559CA4;
	__asm        push   0x8C085;
	__asm        push   0x5BD1B4;
	__asm        push   0x5BB;
	__asm        push   0x5BD1C4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x140];
	__asm        mov    [ebp-8], eax;
// LINE 1468:
	__asm        jmp    near ptr 0x00559CB5;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1469:
	__asm        mov    result, 1;
// LINE 1471:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559CFB;
// LINE 1472:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559d02
enum TreeSim::ReturnCode cYObject::iGetOutOfRoadEtc(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::GetOutOfRoadParam getoutofroad;
	union YObjLang::Param* nparam;
	enum cYObject::LocationType loctype;
	enum cYObject::MoveErrorCode movecode;
	enum TreeSim::ReturnCode result;

// LINE 1475:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1476:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1477:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    getoutofroad.decTemp, ax;
// LINE 1479:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xF6];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00559D56;
	__asm        push   0x8C085;
	__asm        push   0x5BD1E8;
	__asm        push   0x5C7;
	__asm        push   0x5BD220;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1480:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        mov    loctype, eax;
	__asm        jmp    near ptr 0x00559D7E;
// LINE 1486:
	__asm        cmp    loctype, 7;
	__asm        je     near ptr 0x00559DC6;
	__asm        cmp    loctype, 8;
	__asm        je     near ptr 0x00559DC6;
	__asm        cmp    loctype, 6;
	__asm        je     near ptr 0x00559DC6;
	__asm        cmp    loctype, 9;
	__asm        je     near ptr 0x00559DC6;
	__asm        cmp    loctype, 0xFFFFFFFF;
	__asm        je     near ptr 0x00559DC6;
	__asm        cmp    loctype, 1;
	__asm        je     near ptr 0x00559DC6;
// LINE 1487:
	__asm        mov    result, 1;
// LINE 1489:
	__asm        jmp    near ptr 0x00559F0F;
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00559DE0;
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00559DFC;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559E01;
	__asm        jmp    near ptr 0x00559E06;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, getoutofroad.decTemp;
	__asm        movsx  eax, word ptr [eax+ecx*2+8];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00559E41;
// LINE 1490:
	__asm        mov    movecode, 8;
// LINE 1491:
	__asm        mov    result, 0;
// LINE 1493:
	__asm        jmp    near ptr 0x00559F0F;
// LINE 1495:
// Block start:
	struct cYObject::MoveInfo moveinfo;
	short speed;
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x00559E5B;
	__asm        movsx  eax, getoutofroad.decTemp;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x00559E77;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00559E7C;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, getoutofroad.decTemp;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00559EA5;
	__asm        mov    eax, [ebp-0x2C];
	__asm        dec    word ptr [eax];
// LINE 1499:
	__asm        push   0x10;
	__asm        push   0;
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        call   0x00554C10;
	__asm        add    esp, 0xC;
// LINE 1500:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xF4];
	__asm        mov    speed, ax;
// LINE 1501:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        push   0;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00555885;
	__asm        mov    movecode, eax;
// LINE 1518:
	__asm        cmp    movecode, 0;
	__asm        jne    near ptr 0x00559EF4;
// LINE 1519:
	__asm        mov    result, 2;
// LINE 1520:
	__asm        jmp    near ptr 0x00559EFB;
// LINE 1521:
	__asm        mov    result, 0;
// LINE 1522:
	__asm        lea    eax, moveinfo.locType;
	__asm        push   eax;
	__asm        mov    eax, movecode;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(speed);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054E579;
// LINE 1526:
// Block end:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559F17;
// LINE 1527:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559f1e
enum TreeSim::ReturnCode cYObject::iGenerateMedevacAndSetSelfAsVictim(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1530:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1531:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1533:
	__asm        mov    lstr.szLogString, 0x5BD244;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   0x004EBC2B;
	__asm        add    esp, 8;
// LINE 1536:
	__asm        mov    ecx, this;
	__asm        call   0x0055716E;
// LINE 1537:
	__asm        mov    result, 3;
// LINE 1539:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x00559F6D;
// LINE 1540:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x00559f74
enum TreeSim::ReturnCode cYObject::iTurnToNearbyFire(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct YObjLang::TurnToFireParam param;
	union YObjLang::Param* nparam;
	short firecellx;
	short firecelly;
	enum TreeSim::ReturnCode result;

// LINE 1543:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x2C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1544:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1545:
	__asm        mov    eax, nparam;
	__asm        mov    eax, [eax];
	__asm        mov    reinterpret_cast<uint32_t>(param.xdistloc), eax;
// LINE 1547:
	__asm        lea    eax, firecelly;
	__asm        push   eax;
	__asm        lea    eax, firecellx;
	__asm        push   eax;
	__asm        push   3;
	__asm        mov    ecx, this;
	__asm        call   0x00556CB9;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055A145;
	__asm        mov    ax, firecelly;
	__asm        mov    [ebp-0x24], ax;
	__asm        mov    ax, firecellx;
	__asm        mov    [ebp-0x28], ax;
// LINE 1548:
	__asm        movsx  eax, word ptr [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        movsx  ecx, word ptr [ebp-0x28];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00559FEA;
	__asm        mov    eax, [ebp-0x20];
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        call   0x00551AF1;
	__asm        add    esp, 0x10;
	__asm        movsx  eax, ax;
	__asm        sub    eax, 2;
	__asm        and    eax, 7;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD0], ax;
// LINE 1549:
	__asm        movsx  eax, param.xdistloc;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055A043;
	__asm        movsx  eax, param.xdistloc;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055A05F;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A064;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.xdistloc;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0055A08D;
	__asm        movsx  eax, firecellx;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x88];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, [ebp-0x18];
	__asm        mov    [ecx], ax;
	__asm        jmp    near ptr 0x0055A0B1;
// LINE 1550:
	__asm        movsx  eax, param.ydistloc;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055A0CB;
	__asm        movsx  eax, param.ydistloc;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055A0E7;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A0EC;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, param.ydistloc;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055A115;
	__asm        movsx  eax, firecelly;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x89];
	__asm        sub    eax, edx;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
	__asm        jmp    near ptr 0x0055A139;
// LINE 1551:
	__asm        mov    result, 1;
// LINE 1553:
	__asm        jmp    near ptr 0x0055A14C;
// LINE 1554:
	__asm        mov    result, 0;
// LINE 1556:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A154;
// LINE 1557:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a15b
enum TreeSim::ReturnCode cYObject::iDie(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	struct tagLogString lstr;
	enum TreeSim::ReturnCode result;

// LINE 1560:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1561:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    lstr.nType, 1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    lstr.nMissionID, eax;
// LINE 1562:
	__asm        mov    lstr.szLogString, 0x5BD250;
	__asm        push   1;
	__asm        lea    eax, lstr.nType;
	__asm        push   eax;
	__asm        call   0x004EBC2B;
	__asm        add    esp, 8;
// LINE 1564:
	__asm        mov    ecx, this;
	__asm        call   0x0055716E;
// LINE 1565:
	__asm        mov    result, 3;
// LINE 1567:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A1AA;
// LINE 1568:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a1b1
enum TreeSim::ReturnCode cYObject::iWalkToStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
// LINE 1571:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1572:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00557C20;
	__asm        jmp    near ptr 0x0055A1D2;
// LINE 1573:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a1d9
enum TreeSim::ReturnCode cYObject::iPutObjIntoTreeNum(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	short treenum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1576:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1577:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1578:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1579:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055A22D;
	__asm        push   0x8C085;
	__asm        push   0x5BD264;
	__asm        push   0x62B;
	__asm        push   0x5BD26C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1580:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    treenum, ax;
// LINE 1582:
	__asm        jmp    near ptr 0x0055A23C;
	__asm        jmp    near ptr 0x0055A241;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, obj;
	__asm        mov    ecx, [ecx+4];
	__asm        movsx  eax, word ptr [eax+ecx];
	__asm        movsx  ecx, treenum;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x0055A2BF;
	__asm        jmp    near ptr 0x0055A26D;
	__asm        jmp    near ptr 0x0055A272;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xA];
	__asm        dec    eax;
	__asm        mov    ecx, obj;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        cmp    eax, ecx;
	__asm        jg     near ptr 0x0055A2A5;
	__asm        push   0x8C085;
	__asm        push   0x5BBD3C;
	__asm        push   0xCE;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, reinterpret_cast<uint32_t>(treenum);
	__asm        push   eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   0x0055CE37;
	__asm        jmp    near ptr 0x0055A2C4;
	__asm        jmp    near ptr 0x0055A2C4;
	__asm        jmp    near ptr 0x0055A2C4;
// LINE 1583:
	__asm        mov    result, 1;
// LINE 1585:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A2D3;
// LINE 1586:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a2da
enum TreeSim::ReturnCode cYObject::iVisitOz(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1589:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1590:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1591:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055A31B;
	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A320;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0055A34D;
	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055A396;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A391;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A3C6;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055A3C6;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A3E4;
	__asm        jmp    near ptr 0x0055A412;
	__asm        jmp    near ptr 0x0055A3E4;
	__asm        jmp    near ptr 0x0055A3F6;
	__asm        test   dword ptr [ebp-0x14], 0xFFFF;
	__asm        jne    near ptr 0x0055A412;
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A4BC;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A497;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A472;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0xC], ax;
	__asm        jmp    near ptr 0x0055A485;
	__asm        jmp    near ptr 0x0055A47D;
	__asm        mov    word ptr [ebp-0xC], 0xFFFF;
	__asm        jmp    near ptr 0x0055A485;
	__asm        mov    ax, [ebp-0x10];
	__asm        mov    [ebp-0xC], ax;
	__asm        jmp    near ptr 0x0055A48A;
	__asm        movsx  eax, word ptr [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055A49C;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x0055A4C1;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x0055A50F;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0055A51D;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0055A522;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055A540;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0055A55C;
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x005507EC;
	__asm        jmp    near ptr 0x0055A569;
// LINE 1592:
	__asm        mov    result, 2;
// LINE 1594:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A578;
// LINE 1595:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a57f
enum TreeSim::ReturnCode cYObject::iMakeMyMedevacVictimVisible(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1598:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1599:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1600:
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        mov    obj, eax;
// LINE 1601:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055A5C3;
	__asm        push   0x8C085;
	__asm        push   0x5BD290;
	__asm        push   0x641;
	__asm        push   0x5BD2A4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1602:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0055A5F2;
	__asm        push   0x8C085;
	__asm        push   0x5BD2C8;
	__asm        push   0x642;
	__asm        push   0x5BD2E8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1603:
	__asm        jmp    near ptr 0x0055A5F7;
	__asm        mov    eax, obj;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0055A628;
	__asm        push   0x8C085;
	__asm        push   0x5BD30C;
	__asm        push   0x643;
	__asm        push   0x5BD338;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1604:
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xE2], 1;
// LINE 1605:
	__asm        mov    result, 1;
// LINE 1607:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A643;
// LINE 1608:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a64a
enum TreeSim::ReturnCode cYObject::iMakeMyMedevacVictimInvisible(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1611:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1612:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1613:
	__asm        push   0x8C085;
	__asm        push   0x5BD35C;
	__asm        push   0x64D;
	__asm        push   0x5BD378;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1615:
	__asm        mov    result, 1;
// LINE 1617:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A688;
// LINE 1618:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a68f
enum TreeSim::ReturnCode cYObject::iMakeMeMasterOfStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1621:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1622:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1623:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055A6CB;
	__asm        push   0x8C085;
	__asm        push   0x5BD39C;
	__asm        push   0x657;
	__asm        push   0x5BD3D0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1624:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1625:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055A703;
	__asm        push   0x8C085;
	__asm        push   0x5BD3F4;
	__asm        push   0x659;
	__asm        push   0x5BD3FC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1626:
	__asm        mov    eax, this;
	__asm        add    eax, 0x3C;
	__asm        mov    ecx, obj;
	__asm        add    ecx, 0x3C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    ecx, obj;
	__asm        call   0x005507EC;
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, obj;
	__asm        sub    eax, [ecx+0x44];
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0xC], al;
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x3C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    [ebp-0x10], al;
	__asm        jmp    near ptr 0x0055A74E;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        je     near ptr 0x0055A77B;
	__asm        push   0x8C085;
	__asm        push   0x5BBBB8;
	__asm        push   0x210;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    al, [ebp-0x10];
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x88], al;
	__asm        mov    al, [ebp-0xC];
	__asm        mov    ecx, obj;
	__asm        mov    [ecx+0x89], al;
	__asm        jmp    near ptr 0x0055A798;
	__asm        mov    ecx, obj;
	__asm        call   0x0055069B;
	__asm        jmp    near ptr 0x0055A7A5;
// LINE 1627:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    ecx, obj;
	__asm        call   0x0054CECA;
// LINE 1628:
	__asm        mov    result, 1;
// LINE 1630:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055A7C3;
// LINE 1631:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055a7ca
enum TreeSim::ReturnCode cYObject::iMakeMyStackObjectVisitOz(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1634:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1635:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1636:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055A806;
	__asm        push   0x8C085;
	__asm        push   0x5BD420;
	__asm        push   0x664;
	__asm        push   0x5BD43C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1637:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1638:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055A83E;
	__asm        push   0x8C085;
	__asm        push   0x5BD460;
	__asm        push   0x666;
	__asm        push   0x5BD468;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1639:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055A86C;
	__asm        push   0x8C085;
	__asm        push   0x5BBC88;
	__asm        push   0x2E4;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A871;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+0x20];
	__asm        test   ecx, ecx;
	__asm        jne    near ptr 0x0055A89E;
	__asm        push   0x8C085;
	__asm        push   0x5BBC5C;
	__asm        push   0x2E5;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055A8E7;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A8E2;
	__asm        push   0x8C085;
	__asm        push   0x5BBAD4;
	__asm        push   0x22E;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055A917;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055A917;
	__asm        push   0x8C085;
	__asm        push   0x5BBABC;
	__asm        push   0x231;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        cmp    ecx, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A935;
	__asm        jmp    near ptr 0x0055A963;
	__asm        jmp    near ptr 0x0055A935;
	__asm        jmp    near ptr 0x0055A947;
	__asm        test   dword ptr [ebp-0x18], 0xFFFF;
	__asm        jne    near ptr 0x0055A963;
	__asm        push   0x8C085;
	__asm        push   0x5BBC3C;
	__asm        push   0x2E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055AA0D;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x104], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A9E8;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055A9C3;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        add    eax, 0x62;
	__asm        mov    [ebp-0x10], ax;
	__asm        jmp    near ptr 0x0055A9D6;
	__asm        jmp    near ptr 0x0055A9CE;
	__asm        mov    word ptr [ebp-0x10], 0xFFFF;
	__asm        jmp    near ptr 0x0055A9D6;
	__asm        mov    ax, [ebp-0x14];
	__asm        mov    [ebp-0x10], ax;
	__asm        jmp    near ptr 0x0055A9DB;
	__asm        movsx  eax, word ptr [ebp-0x10];
	__asm        push   eax;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0055A9ED;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0x102];
	__asm        mov    word ptr [eax*2+0x6356B0], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x102], 0xFFFF;
	__asm        jmp    near ptr 0x0055AA12;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xD2], 0;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0xF0], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        mov    word ptr [eax+0x9C], 0xFFFF;
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x0055AA60;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8674], ax;
	__asm        jmp    near ptr 0x0055AA6E;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        dec    eax;
	__asm        mov    ds:[0x5B8670], ax;
	__asm        jmp    near ptr 0x0055AA73;
	__asm        movsx  eax, word ptr ds:[0x5B8670];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055AA91;
	__asm        movsx  eax, word ptr ds:[0x5B8674];
	__asm        test   eax, eax;
	__asm        jge    near ptr 0x0055AAAD;
	__asm        push   0x8C085;
	__asm        push   0x5BBC24;
	__asm        push   0x2EC;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, obj;
	__asm        call   0x005507EC;
	__asm        jmp    near ptr 0x0055AABA;
// LINE 1640:
	__asm        mov    result, 1;
// LINE 1642:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AAC9;
// LINE 1643:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055aad0
enum TreeSim::ReturnCode cYObject::iPutTotedMedVicOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1646:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1647:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x1C], eax;
// LINE 1648:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x0055AB12;
	__asm        push   0x8C085;
	__asm        push   0x5BBE90;
	__asm        push   0x3FF;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    ecx, this;
	__asm        call   0x005573F5;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x0055ACAF;
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0055AB56;
	__asm        push   0x8C085;
	__asm        push   0x5BBE70;
	__asm        push   0x402;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055AB5B;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0055AB8C;
	__asm        push   0x8C085;
	__asm        push   0x5BBE44;
	__asm        push   0x403;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x0055ABB2;
	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055ABB7;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, [ebp-0xC];
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, [ebp-0xC];
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0x1C];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x14], ax;
	__asm        jmp    near ptr 0x0055ABEF;
	__asm        mov    eax, [ebp-0x14];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    near ptr 0x0055AC05;
	__asm        jmp    near ptr 0x0055AC1C;
	__asm        jmp    near ptr 0x0055AC38;
	__asm        jmp    near ptr 0x0055AC1C;
	__asm        test   dword ptr [ebp-0x18], 0xFFFF;
	__asm        jne    near ptr 0x0055AC38;
	__asm        push   0x8C085;
	__asm        push   0x5BBE24;
	__asm        push   0x405;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0x1C];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0054CECA;
	__asm        mov    [ebp-0x10], ax;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    near ptr 0x0055AC71;
	__asm        push   0x8C085;
	__asm        push   0x5BBDE4;
	__asm        push   0x407;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055AC9F;
	__asm        push   0x8C085;
	__asm        push   0x5BBDC8;
	__asm        push   0x408;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    obj, eax;
	__asm        jmp    near ptr 0x0055ACC1;
	__asm        jmp    near ptr 0x0055ACBB;
	__asm        mov    obj, 0;
	__asm        jmp    near ptr 0x0055ACC1;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    obj, eax;
// LINE 1649:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0055ACE3;
// LINE 1650:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1651:
	__asm        mov    result, 1;
// LINE 1653:
	__asm        jmp    near ptr 0x0055ACEA;
// LINE 1654:
	__asm        mov    result, 0;
// LINE 1656:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055ACF2;
// LINE 1657:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055acf9
enum TreeSim::ReturnCode cYObject::iTakeAnyMedVicOffStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1660:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1661:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1662:
	__asm        jmp    near ptr 0x0055AD11;
	__asm        push   0;
	__asm        push   6;
	__asm        call   0x005571FB;
	__asm        add    esp, 8;
	__asm        mov    obj, eax;
// LINE 1663:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0055ADDA;
// LINE 1664:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055AD58;
	__asm        push   0x8C085;
	__asm        push   0x5BD48C;
	__asm        push   0x680;
	__asm        push   0x5BD494;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1665:
	__asm        jmp    near ptr 0x0055AD5D;
	__asm        mov    eax, obj;
	__asm        cmp    dword ptr [eax+0x130], 0;
	__asm        jne    near ptr 0x0055AD89;
	__asm        push   0x8C085;
	__asm        push   0x5BD4B8;
	__asm        push   0x681;
	__asm        push   0x5BD4C0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1666:
	__asm        push   0;
	__asm        mov    ecx, obj;
	__asm        call   0x0054CECA;
// LINE 1667:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xE2];
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x0055ADC2;
	__asm        push   0x8C085;
	__asm        push   0x5BD4E4;
	__asm        push   0x683;
	__asm        push   0x5BD4EC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1668:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1669:
	__asm        mov    result, 1;
// LINE 1671:
	__asm        jmp    near ptr 0x0055ADE1;
// LINE 1672:
	__asm        mov    result, 0;
// LINE 1674:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055ADE9;
// LINE 1675:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055adf0
enum TreeSim::ReturnCode cYObject::iGetOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1678:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1679:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1680:
	__asm        push   0x8C085;
	__asm        push   0x5BD510;
	__asm        push   0x690;
	__asm        push   0x5BD524;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1681:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055AE48;
	__asm        push   0x8C085;
	__asm        push   0x5BD548;
	__asm        push   0x691;
	__asm        push   0x5BD578;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
// LINE 1682:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x0055AE77;
	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055AE7C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x0055AEB4;
	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    near ptr 0x0055AECA;
	__asm        jmp    near ptr 0x0055AEE1;
	__asm        jmp    near ptr 0x0055AEFD;
	__asm        jmp    near ptr 0x0055AEE1;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    near ptr 0x0055AEFD;
	__asm        push   0x8C085;
	__asm        push   0x5BD59C;
	__asm        push   0x692;
	__asm        push   0x5BD5C0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1683:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055AF23;
// LINE 1684:
	__asm        mov    result, 1;
// LINE 1685:
	__asm        jmp    near ptr 0x0055AF2A;
// LINE 1686:
	__asm        mov    result, 0;
// LINE 1688:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AF32;
// LINE 1689:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055af39
enum TreeSim::ReturnCode cYObject::iUpdateStackVictimToted(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1692:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1693:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1694:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055AF75;
	__asm        push   0x8C085;
	__asm        push   0x5BD5E4;
	__asm        push   0x69E;
	__asm        push   0x5BD5F4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1695:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1696:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055AFAD;
	__asm        push   0x8C085;
	__asm        push   0x5BD618;
	__asm        push   0x6A0;
	__asm        push   0x5BD65C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1697:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0055AFDC;
	__asm        push   0x8C085;
	__asm        push   0x5BD680;
	__asm        push   0x6A1;
	__asm        push   0x5BD6A4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1698:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   7;
	__asm        mov    ecx, this;
	__asm        call   0x0055B920;
// LINE 1699:
	__asm        mov    result, 1;
// LINE 1701:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055AFFC;
// LINE 1702:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b003
enum TreeSim::ReturnCode cYObject::iGetNumSpacesOnStackObject(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short localnum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1705:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1706:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1707:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055B048;
	__asm        push   0x8C085;
	__asm        push   0x5BD6C8;
	__asm        push   0x6AB;
	__asm        push   0x5BD6FC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1709:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    localnum, ax;
// LINE 1710:
	__asm        mov    eax, elem;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+4], ecx;
	__asm        jne    near ptr 0x0055B0EC;
// LINE 1711:
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055B084;
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055B0A0;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055B0A5;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, localnum;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x0055B0CE;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9F6E;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], ax;
// LINE 1712:
	__asm        jmp    near ptr 0x0055B18B;
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x0055B16F;
// LINE 1713:
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055B118;
	__asm        movsx  eax, localnum;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055B134;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055B139;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, localnum;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055B162;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    word ptr [eax], 0x1721;
// LINE 1714:
	__asm        jmp    near ptr 0x0055B18B;
// LINE 1715:
	__asm        push   0x8C085;
	__asm        push   0x5BD720;
	__asm        push   0x6B3;
	__asm        push   0x5BD740;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1716:
	__asm        mov    result, 1;
// LINE 1718:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B19A;
// LINE 1719:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b1a1
enum TreeSim::ReturnCode cYObject::iDropToted(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1722:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1723:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1724:
	__asm        mov    ecx, this;
	__asm        call   0x0055734C;
	__asm        mov    obj, eax;
// LINE 1725:
	__asm        cmp    obj, 0;
	__asm        je     near ptr 0x0055B1E1;
// LINE 1726:
	__asm        mov    eax, obj;
	__asm        add    eax, 0x24;
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1727:
	__asm        mov    result, 1;
// LINE 1729:
	__asm        jmp    near ptr 0x0055B1E8;
// LINE 1730:
	__asm        mov    result, 0;
// LINE 1732:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B1F0;
// LINE 1733:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b1f7
enum TreeSim::ReturnCode cYObject::iUpdateStackVictimPickedUp(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	class cYObject* obj;
	enum TreeSim::ReturnCode result;

// LINE 1736:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1737:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1738:
	__asm        mov    eax, elem;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x0055B233;
	__asm        push   0x8C085;
	__asm        push   0x5BD764;
	__asm        push   0x6CA;
	__asm        push   0x5BD774;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1739:
	__asm        mov    eax, elem;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x00544874;
	__asm        add    esp, 4;
	__asm        mov    obj, eax;
// LINE 1740:
	__asm        cmp    obj, 0;
	__asm        jne    near ptr 0x0055B26B;
	__asm        push   0x8C085;
	__asm        push   0x5BD798;
	__asm        push   0x6CC;
	__asm        push   0x5BD7DC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1741:
	__asm        mov    eax, obj;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        cmp    eax, 6;
	__asm        je     near ptr 0x0055B29A;
	__asm        push   0x8C085;
	__asm        push   0x5BD800;
	__asm        push   0x6CD;
	__asm        push   0x5BD824;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1742:
	__asm        mov    eax, obj;
	__asm        mov    eax, [eax+0x1C];
	__asm        push   eax;
	__asm        push   8;
	__asm        mov    ecx, this;
	__asm        call   0x0055B920;
// LINE 1743:
	__asm        mov    result, 1;
// LINE 1745:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B2BA;
// LINE 1746:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b2c1
enum TreeSim::ReturnCode cYObject::iCloseToHeli(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1749:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1750:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    [ebp-0xC], eax;
// LINE 1751:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    near ptr 0x0055B308;
	__asm        push   0x8C085;
	__asm        push   0x5BBEBC;
	__asm        push   0x3E6;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055B30D;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x44];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x40];
	__asm        mov    ecx, [ebp-0xC];
	__asm        sub    eax, [ecx+0x1C];
	__asm        sar    eax, 0x10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    near ptr 0x0055B345;
	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1E;
	__asm        jle    near ptr 0x0055B35B;
	__asm        jmp    near ptr 0x0055B372;
	__asm        jmp    near ptr 0x0055B37E;
	__asm        jmp    near ptr 0x0055B372;
	__asm        test   dword ptr [ebp-0x10], 0xFFFF;
	__asm        jne    near ptr 0x0055B37E;
// LINE 1752:
	__asm        mov    result, 0;
// LINE 1753:
	__asm        jmp    near ptr 0x0055B396;
// LINE 1754:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        mov    ecx, elem;
	__asm        mov    [ecx+4], eax;
// LINE 1755:
	__asm        mov    result, 1;
// LINE 1758:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B39E;
// LINE 1759:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b3a5
enum TreeSim::ReturnCode cYObject::iSetMyExpression(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short expressionnum;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1762:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1763:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1765:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    expressionnum, ax;
// LINE 1767:
	__asm        movsx  eax, expressionnum;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xBC];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9E5B;
	__asm        add    esp, 0xC;
// LINE 1768:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        add    eax, 0x1C4;
	__asm        push   eax;
	__asm        call   0x004F9BD5;
	__asm        add    esp, 4;
// LINE 1769:
	__asm        mov    result, 1;
// LINE 1771:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B410;
// LINE 1772:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b417
enum TreeSim::ReturnCode cYObject::iGetHeliSpeedPlusDamage(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	float damage;
	union YObjLang::Param* nparam;
	float res;
	float maxdamage;
	float speed;
	enum TreeSim::ReturnCode result;

// LINE 1775:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1776:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1778:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0x128];
	__asm        sar    eax, 0x10;
	__asm        mov    [ebp-0x28], eax;
	__asm        fild   dword ptr [ebp-0x28];
	__asm        fstp   speed;
// LINE 1779:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F75E5;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x2C], eax;
	__asm        fild   dword ptr [ebp-0x2C];
	__asm        fstp   damage;
// LINE 1780:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        push   eax;
	__asm        call   0x004F75B5;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x30], eax;
	__asm        fild   dword ptr [ebp-0x30];
	__asm        fstp   maxdamage;
// LINE 1781:
	__asm        fld    damage;
	__asm        fcomp  dword ptr ds:[0x593610];
	__asm        fnstsw ax;
	__asm        test   ah, 1;
	__asm        je     near ptr 0x0055B493;
	__asm        mov    damage, 0x3F800000;
// LINE 1782:
	__asm        fld    maxdamage;
	__asm        fmul   speed;
	__asm        fdiv   damage;
// LINE 1783:
	__asm        fcom   dword ptr ds:[0x593618];
	__asm        fstp   res;
	__asm        fnstsw ax;
	__asm        test   ah, 0x41;
	__asm        jne    near ptr 0x0055B4B7;
// LINE 1784:
	__asm        mov    res, 0x477FFF00;
// LINE 1785:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    [ebp-0x20], ax;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    near ptr 0x0055B4DB;
	__asm        movsx  eax, word ptr [ebp-0x20];
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055B4F7;
	__asm        push   0x8C085;
	__asm        push   0x5BDDBC;
	__asm        push   0x106;
	__asm        push   0x5BBA14;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x0055B4FC;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, word ptr [ebp-0x20];
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x0055B525;
	__asm        fld    res;
	__asm        call   0x0056EBE8;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        mov    [ecx], ax;
// LINE 1786:
	__asm        mov    result, 1;
// LINE 1788:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B542;
// LINE 1789:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b549
enum TreeSim::ReturnCode cYObject::iIsThisCellSafe(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1792:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1793:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1794:
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        call   0x00555746;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x89];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x88];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005565B8;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055B5B4;
// LINE 1797:
	__asm        mov    result, 1;
// LINE 1798:
	__asm        jmp    near ptr 0x0055B5BB;
// LINE 1799:
	__asm        mov    result, 0;
// LINE 1801:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B5C3;
// LINE 1802:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b5ca
enum TreeSim::ReturnCode cYObject::iPlaySound(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	unsigned short playforsure;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1805:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1806:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1807:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax+2];
	__asm        mov    playforsure, ax;
// LINE 1808:
	__asm        mov    eax, reinterpret_cast<uint32_t>(playforsure);
	__asm        push   eax;
	__asm        mov    eax, nparam;
	__asm        movsx  eax, word ptr [eax];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054C1DD;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055B61B;
// LINE 1809:
	__asm        mov    result, 1;
// LINE 1810:
	__asm        jmp    near ptr 0x0055B622;
// LINE 1811:
	__asm        mov    result, 0;
// LINE 1826:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B62A;
// LINE 1827:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b631
enum TreeSim::ReturnCode cYObject::iGetOnHeliIfHarnessRaised(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1830:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1831:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1832:
	__asm        jmp    near ptr 0x0055B649;
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xBC];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0055B6AC;
// LINE 1833:
	__asm        jmp    near ptr 0x0055B669;
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        je     near ptr 0x0055B6A0;
	__asm        push   0x8C085;
	__asm        push   0x5BD848;
	__asm        push   0x729;
	__asm        push   0x5BD888;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1834:
	__asm        mov    result, 1;
// LINE 1836:
	__asm        jmp    near ptr 0x0055B72A;
	__asm        mov    eax, ds:[0x5B4968];
	__asm        cmp    dword ptr [eax+0x1B4], 0;
	__asm        je     near ptr 0x0055B6F5;
// LINE 1837:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xA4];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0054CECA;
	__asm        movzx  eax, ax;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055B6E9;
// LINE 1838:
	__asm        mov    result, 0;
// LINE 1839:
	__asm        jmp    near ptr 0x0055B6F0;
// LINE 1840:
	__asm        mov    result, 1;
// LINE 1842:
	__asm        jmp    near ptr 0x0055B72A;
// LINE 1843:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        cmp    dword ptr [eax+0x1B0], 0;
	__asm        jne    near ptr 0x0055B723;
	__asm        push   0x8C085;
	__asm        push   0x5BD8AC;
	__asm        push   0x733;
	__asm        push   0x5BD8C0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1844:
	__asm        mov    result, 0;
// LINE 1847:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B732;
// LINE 1848:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b739
enum TreeSim::ReturnCode cYObject::iAmIOnHeli(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode result;

// LINE 1851:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1852:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1853:
	__asm        mov    eax, this;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xA4];
	__asm        cmp    [eax+0x130], ecx;
	__asm        jne    near ptr 0x0055B773;
// LINE 1854:
	__asm        mov    result, 1;
// LINE 1855:
	__asm        jmp    near ptr 0x0055B77A;
// LINE 1856:
	__asm        mov    result, 0;
// LINE 1858:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B782;
// LINE 1859:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b789
enum TreeSim::ReturnCode cYObject::iThrowFieryProjectile(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
// LINE 1862:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1863:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005598BA;
	__asm        jmp    near ptr 0x0055B7AA;
// LINE 1864:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b7b1
enum TreeSim::ReturnCode cYObject::iTellStartingObjectTrueOrFalse(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	short truefalse;
	union YObjLang::Param* nparam;
	enum TreeSim::ReturnCode result;

// LINE 1867:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1868:
	__asm        mov    result, 0xFFFFFFFF;
	__asm        mov    eax, node;
	__asm        add    eax, 4;
	__asm        mov    nparam, eax;
// LINE 1869:
	__asm        mov    eax, nparam;
	__asm        mov    ax, [eax];
	__asm        mov    truefalse, ax;
// LINE 1870:
	__asm        movsx  eax, truefalse;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0055B80C;
	__asm        movsx  eax, truefalse;
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x0055B80C;
	__asm        push   0x8C085;
	__asm        push   0x5BD8E4;
	__asm        push   0x74E;
	__asm        push   0x5BD908;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1871:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        je     near ptr 0x0055B837;
// LINE 1872:
	__asm        movsx  eax, truefalse;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x100];
	__asm        push   eax;
	__asm        call   0x00541530;
	__asm        add    esp, 8;
// LINE 1873:
	__asm        mov    result, 1;
// LINE 1875:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055B846;
// LINE 1876:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b84d
enum TreeSim::ReturnCode cYObject::TryElement(struct TreeSim::StackElem* elem, struct Behavior::Node* node) {
	enum TreeSim::ReturnCode res;

// LINE 1880:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 8;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1881:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0055B876;
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x40;
	__asm        jl     near ptr 0x0055B892;
	__asm        push   0x8C085;
	__asm        push   0x5BD92C;
	__asm        push   0x759;
	__asm        push   0x5BD950;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1882:
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    dword ptr [eax*4+0x6375A8], 0;
	__asm        jne    near ptr 0x0055B8C2;
	__asm        push   0x8C085;
	__asm        push   0x5BD974;
	__asm        push   0x75A;
	__asm        push   0x5BD99C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1884:
	__asm        mov    eax, this;
	__asm        inc    word ptr [eax+0x140];
// LINE 1885:
	__asm        mov    eax, node;
	__asm        push   eax;
	__asm        mov    eax, elem;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        push   eax;
	__asm        mov    eax, node;
	__asm        movsx  eax, word ptr [eax];
	__asm        call   dword ptr [eax*4+0x6375A8];
	__asm        add    esp, 0xC;
	__asm        mov    res, eax;
// LINE 1887:
	__asm        cmp    res, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055B911;
	__asm        push   0x8C085;
	__asm        push   0x5BD9C0;
	__asm        push   0x75F;
	__asm        push   0x5BD9E8;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1888:
	__asm        mov    eax, res;
	__asm        jmp    near ptr 0x0055B919;
// LINE 1889:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055b920
void cYObject::UpdateMission(enum cYObject::MissionUpdates missup, long missionid) {
	struct _MISSION_PARMS mp;

// LINE 1899:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1901:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD2];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0055B95A;
	__asm        push   0x8C085;
	__asm        push   0x5BDA0C;
	__asm        push   0x76D;
	__asm        push   0x5BDA34;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1902:
	__asm        cmp    missionid, 0xFFFFFFFF;
	__asm        jne    near ptr 0x0055B980;
	__asm        push   0x8C085;
	__asm        push   0x5BDA58;
	__asm        push   0x76E;
	__asm        push   0x5BDA7C;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1903:
	__asm        mov    eax, missionid;
	__asm        mov    mp.id, eax;
// LINE 1904:
	__asm        mov    eax, missup;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x0055BB0C;
// LINE 1906:
	__asm        mov    mp.op, 0x14;
// LINE 1907:
	__asm        mov    mp.i2num, 1;
// LINE 1908:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1911:
	__asm        mov    mp.op, 0x15;
// LINE 1912:
	__asm        mov    mp.i2num, 1;
// LINE 1913:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1916:
	__asm        mov    mp.op, 0x12;
// LINE 1917:
	__asm        mov    mp.i2num, 1;
// LINE 1918:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1920:
	__asm        mov    mp.op, 0x13;
// LINE 1921:
	__asm        mov    mp.i2num, 1;
// LINE 1922:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1924:
	__asm        mov    mp.op, 0x13;
// LINE 1925:
	__asm        mov    mp.i2num, 1;
// LINE 1926:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1928:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0xD8];
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0055BA5C;
// LINE 1930:
	__asm        mov    mp.op, 0x15;
// LINE 1931:
	__asm        mov    mp.i2num, 1;
// LINE 1932:
	__asm        jmp    near ptr 0x0055BA83;
// LINE 1934:
	__asm        mov    mp.op, 0x11;
// LINE 1935:
	__asm        mov    mp.i2num, 1;
// LINE 1936:
	__asm        jmp    near ptr 0x0055BA83;
// LINE 1939:
	__asm        mov    mp.op, 0x10;
// LINE 1940:
	__asm        mov    mp.i2num, 1;
// LINE 1941:
	__asm        jmp    near ptr 0x0055BA83;
// LINE 1943:
	__asm        push   0x8C085;
	__asm        push   0x5BDAA0;
	__asm        push   0x797;
	__asm        push   0x5BDACC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1944:
	__asm        jmp    near ptr 0x0055BA83;
	__asm        dec    dword ptr [ebp-0x24];
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     near ptr 0x0055BA3B;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    dword ptr [eax*4+0x55BA73];
	__asm        sub    [edx-0x45D7FFAB], bh;
	__asm        push   ebp;
	__asm        add    [edx], al;
	__asm        mov    edx, 0xBA150055;
	__asm        push   ebp;
	__asm        (bad);
// LINE 1945:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1947:
	__asm        mov    mp.op, 0x1E;
// LINE 1948:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1950:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1952:
	__asm        mov    mp.op, 0;
// LINE 1953:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x88];
	__asm        mov    mp.maploc.x, ecx;
// LINE 1954:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x89];
	__asm        mov    mp.maploc.y, ecx;
// LINE 1955:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1957:
	__asm        mov    mp.op, 0x25;
// LINE 1958:
	__asm        mov    mp.i2num, 1;
// LINE 1959:
	__asm        jmp    near ptr 0x0055BB48;
// LINE 1961:
	__asm        push   0x8C085;
	__asm        push   0x5BDAF0;
	__asm        push   0x7A9;
	__asm        push   0x5BDB10;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 1962:
	__asm        jmp    near ptr 0x0055BB48;
	__asm        cmp    dword ptr [ebp-0x20], 9;
	__asm        ja     near ptr 0x0055BAEB;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    dword ptr [eax*4+0x55BB20];
	__asm        fnstsw [ecx-0x460FFFAB];
	__asm        push   ebp;
	__asm        add    [eax-0x14FFAA46], cl;
	__asm        mov    edx, 0xB9910055;
	__asm        push   ebp;
	__asm        add    [ecx+edi*4-0x454FFFAB], ah;
	__asm        push   ebp;
	__asm        add    [edi-0x35FFAA47], dh;
	__asm        mov    ecx, 0xBAD80055;
	__asm        push   ebp;
	__asm        (bad);
// LINE 1963:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1964:
	__asm        jmp    near ptr 0x0055BB59;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0055bb60
enum TreeSim::ReturnCode cYObject::TryExpression(struct YObjLang::AttrParam* attr) {
	short lhs;
	short * plhs;
	short rhs;
	enum TreeSim::ReturnCode result;

// LINE 1991:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 1992:
	__asm        mov    result, 0xFFFFFFFF;
// LINE 1996:
	__asm        push   0;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+2];
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+6];
	__asm        sar    ax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    rhs, ax;
// LINE 1997:
	__asm        lea    eax, plhs;
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax];
	__asm        push   eax;
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+6];
	__asm        shl    ax, 8;
	__asm        sar    ax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
	__asm        mov    lhs, ax;
// LINE 1999:
	__asm        mov    eax, attr;
	__asm        mov    ax, [eax+4];
	__asm        sar    ax, 8;
	__asm        movsx  eax, ax;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0055BEF5;
// LINE 2001:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0055BBF4;
	__asm        mov    result, 1;
// LINE 2002:
	__asm        jmp    near ptr 0x0055BBFB;
	__asm        mov    result, 0;
// LINE 2003:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2005:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0055BC1C;
	__asm        mov    result, 1;
// LINE 2006:
	__asm        jmp    near ptr 0x0055BC23;
	__asm        mov    result, 0;
// LINE 2007:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2009:
	__asm        movsx  eax, rhs;
	__asm        movsx  ecx, lhs;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x0055BC44;
	__asm        mov    result, 1;
// LINE 2010:
	__asm        jmp    near ptr 0x0055BC4B;
	__asm        mov    result, 0;
// LINE 2011:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2013:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BC69;
// LINE 2014:
	__asm        mov    ax, rhs;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2015:
	__asm        jmp    near ptr 0x0055BC80;
// LINE 2016:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFE3;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2018:
	__asm        mov    result, 1;
// LINE 2019:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2021:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BCAD;
// LINE 2022:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        add    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2023:
	__asm        jmp    near ptr 0x0055BCC4;
// LINE 2024:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFDE;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2026:
	__asm        mov    result, 1;
// LINE 2027:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2029:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BCF1;
// LINE 2030:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        sub    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2031:
	__asm        jmp    near ptr 0x0055BD08;
// LINE 2032:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFD9;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2034:
	__asm        mov    result, 1;
// LINE 2035:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2037:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BD36;
// LINE 2038:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        movsx  ecx, rhs;
	__asm        imul   eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2039:
	__asm        jmp    near ptr 0x0055BD4D;
// LINE 2040:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFD4;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2042:
	__asm        mov    result, 1;
// LINE 2043:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2045:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BD7B;
// LINE 2046:
	__asm        mov    eax, plhs;
	__asm        movsx  ecx, rhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2047:
	__asm        jmp    near ptr 0x0055BD92;
// LINE 2048:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFCF;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2050:
	__asm        mov    result, 1;
// LINE 2051:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2053:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    near ptr 0x0055BDC2;
	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFCA;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2054:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BDEB;
	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        mov    ecx, plhs;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        or     eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2055:
	__asm        jmp    near ptr 0x0055BE02;
// LINE 2056:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFC5;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2058:
	__asm        mov    result, 1;
// LINE 2059:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2061:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    near ptr 0x0055BE32;
	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFC0;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2062:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BE5D;
	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        not    eax;
	__asm        mov    ecx, plhs;
	__asm        movsx  ecx, word ptr [ecx];
	__asm        and    eax, ecx;
	__asm        mov    ecx, plhs;
	__asm        mov    [ecx], ax;
// LINE 2063:
	__asm        jmp    near ptr 0x0055BE74;
// LINE 2064:
	__asm        push   0x12;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFBB;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2066:
	__asm        mov    result, 1;
// LINE 2067:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2069:
	__asm        movsx  eax, rhs;
	__asm        cmp    eax, 0xE;
	__asm        jle    near ptr 0x0055BEA4;
	__asm        push   0xC;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFB6;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2070:
	__asm        mov    eax, 1;
	__asm        movsx  ecx, rhs;
	__asm        dec    ecx;
	__asm        shl    eax, cl;
	__asm        movsx  ecx, lhs;
	__asm        test   ecx, eax;
	__asm        je     near ptr 0x0055BEC8;
	__asm        mov    result, 1;
// LINE 2071:
	__asm        jmp    near ptr 0x0055BECF;
	__asm        mov    result, 0;
// LINE 2072:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2075:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055BFB1;
	__asm        jmp    near ptr 0x0055BFA9;
// LINE 2076:
	__asm        jmp    near ptr 0x0055BF35;
// LINE 2077:
	__asm        jmp    near ptr 0x0055BF35;
	__asm        cmp    dword ptr [ebp-0x18], 0xA;
	__asm        ja     near ptr 0x0055BED4;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    dword ptr [eax*4+0x55BF09];
	__asm        add    [ebp+edx*2+0x55BBD800], bh;
	__asm        add    [eax], ch;
	__asm        mov    esp, 0xBC8C0055;
	__asm        push   ebp;
	__asm        add    al, dl;
	__asm        mov    esp, 0xBC500055;
	__asm        push   ebp;
	__asm        add    [edi*4-0x42A6FFAB], dl;
	__asm        push   ebp;
	__asm        add    [eax-0x61FFAA42], al;
	__asm        mov    ebp, 0xBE0E0055;
	__asm        push   ebp;
	__asm        (bad);
// LINE 2080:
	__asm        cmp    plhs, 0;
	__asm        je     near ptr 0x0055BFA9;
// LINE 2081:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0x61A8;
	__asm        jle    near ptr 0x0055BF74;
// LINE 2082:
	__asm        push   0x8C085;
	__asm        push   0x5BDB34;
	__asm        push   0x822;
	__asm        push   0x5BDB60;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2083:
	__asm        mov    eax, plhs;
	__asm        mov    word ptr [eax], 0x61A8;
// LINE 2086:
	__asm        mov    eax, plhs;
	__asm        movsx  eax, word ptr [eax];
	__asm        cmp    eax, 0xFFFF9E58;
	__asm        jge    near ptr 0x0055BFA9;
// LINE 2087:
	__asm        push   0x8C085;
	__asm        push   0x5BDB84;
	__asm        push   0x827;
	__asm        push   0x5BDBB0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2088:
	__asm        mov    eax, plhs;
	__asm        mov    word ptr [eax], 0x9E58;
// LINE 2098:
tree_error:
	__asm        mov    eax, result;
	__asm        jmp    near ptr 0x0055BFE8;
// LINE 2099:
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        jmp    near ptr 0x0055BFA9;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0055bfef
void cYObject::HandleOverflow() {
// LINE 2103:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2104:
	__asm        push   0x8C085;
	__asm        push   0x5BDBD4;
	__asm        push   0x838;
	__asm        push   0x5BDBEC;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2105:
	__asm        jmp    near ptr 0x0055C01C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x0055c021
short cYObject::InterpValue(short ownerField, short dataField, short ** dataRef) {
	short * ptemp;
	short temp;
	short data;

// LINE 2107:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 2113:
	__asm        cmp    dataRef, 0;
	__asm        jne    near ptr 0x0055C043;
// LINE 2114:
	__asm        lea    eax, ptemp;
	__asm        mov    dataRef, eax;
// LINE 2115:
	__asm        lea    eax, temp;
	__asm        mov    ptemp, eax;
// LINE 2117:
	__asm        mov    eax, dataRef;
	__asm        mov    dword ptr [eax], 0;
// LINE 2118:
	__asm        mov    data, 0;
// LINE 2119:
	__asm        movsx  eax, ownerField;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x0055C1FA;
// LINE 2121:
	__asm        push   0x8C085;
	__asm        push   0x5BDC10;
	__asm        push   0x849;
	__asm        push   0x5BDC20;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2124:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2126:
	__asm        push   0x8C085;
	__asm        push   0x5BDC44;
	__asm        push   0x84E;
	__asm        push   0x5BDC58;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2130:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2132:
	__asm        push   0x8C085;
	__asm        push   0x5BDC7C;
	__asm        push   0x854;
	__asm        push   0x5BDCA4;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2133:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2135:
	__asm        movsx  eax, dataField;
	__asm        cmp    eax, 0x30;
	__asm        jl     near ptr 0x0055C0E5;
	__asm        push   6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055C259;
	__asm        jmp    near ptr 0x0055C247;
// LINE 2136:
	__asm        movsx  eax, dataField;
	__asm        add    eax, eax;
	__asm        add    eax, this;
	__asm        add    eax, 0xD0;
	__asm        mov    ecx, dataRef;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, dataRef;
	__asm        mov    eax, [eax];
	__asm        mov    ax, [eax];
	__asm        mov    data, ax;
// LINE 2137:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2139:
	__asm        push   0x8C085;
	__asm        push   0x5BDCC8;
	__asm        push   0x85B;
	__asm        push   0x5BDCE0;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2140:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2142:
	__asm        mov    ax, dataField;
	__asm        mov    data, ax;
// LINE 2143:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2145:
	__asm        push   0x8C085;
	__asm        push   0x5BDD04;
	__asm        push   0x861;
	__asm        push   0x5BDD20;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2146:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2148:
	__asm        push   0x8C085;
	__asm        push   0x5BDD44;
	__asm        push   0x864;
	__asm        push   0x5BDD64;
	__asm        call   0x00554F30;
	__asm        add    esp, 0x10;
// LINE 2149:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2151:
	__asm        movsx  eax, dataField;
	__asm        cmp    eax, 4;
	__asm        jl     near ptr 0x0055C19D;
	__asm        push   7;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055C254;
	__asm        jmp    near ptr 0x0055C247;
// LINE 2152:
	__asm        jmp    near ptr 0x0055C1A2;
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+8];
	__asm        lea    eax, [eax*4-4];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+4];
	__asm        movsx  ecx, dataField;
	__asm        lea    eax, [eax+ecx*2];
	__asm        add    eax, 8;
	__asm        mov    ecx, dataRef;
	__asm        mov    [ecx], eax;
	__asm        mov    eax, dataRef;
	__asm        mov    eax, [eax];
	__asm        mov    ax, [eax];
	__asm        mov    data, ax;
// LINE 2153:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2155:
	__asm        push   8;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
	__asm        jmp    near ptr 0x0055C24F;
	__asm        jmp    near ptr 0x0055C247;
// LINE 2156:
	__asm        jmp    near ptr 0x0055C23E;
// LINE 2157:
	__asm        jmp    near ptr 0x0055C23E;
	__asm        cmp    dword ptr [ebp-0x14], 0xB;
	__asm        ja     near ptr 0x0055C1D9;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    dword ptr [eax*4+0x55C20E];
	__asm        pop    esi;
	__asm        rcl    byte ptr [ebp], 0xA0;
	__asm        rcl    byte ptr [ebp], 0xD9;
	__asm        rcl    dword ptr [ebp], 0xC1;
	__asm        rcl    byte ptr [ebp], 9;
	__asm        rcl    dword ptr [ebp], 0xD9;
	__asm        rcl    dword ptr [ebp], 0xD9;
	__asm        rcl    dword ptr [ebp], 0x2A;
	__asm        rcl    dword ptr [ebp], 0x37;
	__asm        rcl    dword ptr [ebp], 0x79;
	__asm        rcl    dword ptr [ebp], 0x7F;
	__asm        rcl    byte ptr [ebp], 0x58;
	__asm        (bad);
// LINE 2158:
	__asm        mov    ax, data;
	__asm        jmp    near ptr 0x0055C25E;
// LINE 2161:
tree_error:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0055C25E;
// LINE 2162:
	__asm        jmp    near ptr 0x0055C247;
	__asm        jmp    near ptr 0x0055C247;
	__asm        jmp    near ptr 0x0055C247;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}



// Contribution: 2:00004600-0000461b Module: 196, 8 byte alignment, initialized_data, read, 


// Contribution: 3:00025634-00026d84 Module: 196, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005bc634
// radiusReduction


// Contribution: 3:00026d88-00026dba Module: 196, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bdd88
// ??_C@_0DD@OACJ@must?5have?5master?5object?5to?5test?5@


// Contribution: 3:00026dbc-00026dd5 Module: 196, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005bddbc
// ??_C@_0BK@BPAL@local?5number?5out?5of?5range?$AA@


// Contribution: 3:000a05a8-000a06a7 Module: 196, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x006375a8
// cYObject::PrimProcs


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x0067ed30
// G_omap
