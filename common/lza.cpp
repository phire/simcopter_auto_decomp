// Module: lza.obj
// Source: C:\Copter\Source\Common\lza.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class cGZXBitstream (forward reference);
class cGZXBitstream{
public:
	// vtable: 0
	intro unsigned long Read(unsigned char *, unsigned long);
	// vtable: 4
	intro unsigned long Write(unsigned char *, unsigned long);
	// vtable: 8
	intro void Rewind();
	// vtable: 12
	intro void RewindToMark();
	// vtable: 16
	intro void Mark();
	// vtable: 20
	intro long Size();
	// vtable: 24
	intro void FreeAll();
};

// Type: unsigned long *;

// Type: struct tLZSSBinaryForest (forward reference);

// Type: short;

// Type: struct tCompressState (forward reference);

// Type: unsigned char[5];

// Type: struct tACompModel (forward reference);

// Type: unsigned char;

// Type: long;

// Type: void;

// Type: unsigned char *;

// Type: unsigned long;



// Contribution: 1:000ce090-000cfa4b Module: 88, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004cf090
short LZACompress(class cGZXBitstream* inStream, class cGZXBitstream* outStream, unsigned long * cSize) {
	struct tLZSSBinaryForest* forest;
	short retVal;
	struct tCompressState* state;
	unsigned char header[5];
	struct tACompModel* model;

// LINE 648:
	__asm        mov    header[0], 0;
	__asm        mov    header[1], 0;
	__asm        mov    header[2], 0;
	__asm        mov    header[3], 0;
	__asm        mov    header[4], 0;
// LINE 653:
	__asm        mov    eax, cSize;
	__asm        mov    dword ptr [eax], 0;
// LINE 655:
	__asm        push   0x53C0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    model, eax;
// LINE 656:
	__asm        cmp    model, 0;
	__asm        jne    near ptr 0x004CF0E0;
// LINE 657:
	__asm        mov    retVal, 3;
// LINE 658:
	__asm        jmp    near ptr 0x004CF2E3;
	__asm        jmp    near ptr 0x004CF279;
// LINE 660:
	__asm        push   0xD44F;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    forest, eax;
// LINE 661:
	__asm        cmp    forest, 0;
	__asm        jne    near ptr 0x004CF10A;
// LINE 662:
	__asm        mov    retVal, 3;
// LINE 663:
	__asm        jmp    near ptr 0x004CF2DE;
	__asm        jmp    near ptr 0x004CF279;
// LINE 665:
	__asm        push   0x20;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    state, eax;
// LINE 666:
	__asm        cmp    state, 0;
	__asm        jne    near ptr 0x004CF131;
// LINE 667:
	__asm        mov    retVal, 3;
// LINE 668:
	__asm        jmp    near ptr 0x004CF2D9;
	__asm        jmp    near ptr 0x004CF279;
// LINE 671:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 672:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 673:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax], 0;
// LINE 674:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+4], 0x20000;
// LINE 675:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 676:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 677:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax], 0;
// LINE 678:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+4], 0x80;
// LINE 679:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 680:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 682:
	__asm        mov    eax, inStream;
	__asm        mov    ecx, state;
	__asm        mov    [ecx+0x18], eax;
// LINE 683:
	__asm        mov    eax, outStream;
	__asm        mov    ecx, state;
	__asm        mov    [ecx+0x1C], eax;
// LINE 686:
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+0x10];
// LINE 687:
	__asm        push   4;
	__asm        lea    eax, header[0];
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        mov    retVal, ax;
// LINE 688:
	__asm        movsx  eax, retVal;
	__asm        cmp    eax, 4;
	__asm        je     near ptr 0x004CF1EE;
// LINE 689:
	__asm        mov    retVal, 2;
// LINE 690:
	__asm        jmp    near ptr 0x004CF2D4;
	__asm        jmp    near ptr 0x004CF279;
// LINE 693:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   Encode;
	__asm        add    esp, 0xC;
	__asm        mov    retVal, ax;
// LINE 695:
	__asm        movsx  eax, retVal;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF21C;
// LINE 696:
	__asm        jmp    near ptr 0x004CF2CF;
	__asm        jmp    near ptr 0x004CF279;
// LINE 700:
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+0xC];
// LINE 701:
	__asm        push   4;
	__asm        mov    eax, state;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        mov    retVal, ax;
// LINE 703:
	__asm        movsx  eax, retVal;
	__asm        cmp    eax, 4;
	__asm        je     near ptr 0x004CF268;
// LINE 704:
	__asm        mov    retVal, 2;
// LINE 705:
	__asm        jmp    near ptr 0x004CF2CA;
	__asm        jmp    near ptr 0x004CF279;
// LINE 707:
	__asm        mov    eax, state;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, cSize;
	__asm        mov    [ecx], eax;
// LINE 708:
	__asm        mov    retVal, 0;
// LINE 715:
CompressDone:
	__asm        mov    eax, model;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 716:
	__asm        mov    eax, forest;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 717:
	__asm        mov    eax, state;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 719:
	__asm        mov    ax, retVal;
	__asm        jmp    near ptr 0x004CF2E8;
// LINE 720:
	__asm        jmp    near ptr 0x004CF279;
	__asm        jmp    near ptr 0x004CF279;
	__asm        jmp    near ptr 0x004CF279;
	__asm        jmp    near ptr 0x004CF279;
	__asm        jmp    near ptr 0x004CF279;
	__asm        jmp    near ptr 0x004CF279;
}

// FUNCTION: COPTER_D 0x004cf2ed
short Encode(struct tACompModel* model, struct tLZSSBinaryForest* forest, struct tCompressState* state) {
	unsigned char tempByte;
	long len;
	long tempDebug;
	long last_match_length;
	long i;
	long c;
	long s;
	long r;

// LINE 530:
	__asm        mov    tempDebug, 0;
// LINE 532:
	__asm        mov    eax, state;
	__asm        add    dword ptr [eax+0x14], 4;
// LINE 533:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 534:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartModel;
	__asm        add    esp, 4;
// LINE 535:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        call   InitTree;
	__asm        add    esp, 4;
// LINE 536:
	__asm        mov    s, 0;
	__asm        mov    r, 0xFC4;
// LINE 537:
	__asm        mov    eax, s;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x004CF342;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    r, eax;
	__asm        jle    near ptr 0x004CF35D;
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    byte ptr [eax+ecx], 0x20;
	__asm        jmp    near ptr 0x004CF33F;
// LINE 538:
	__asm        mov    len, 0;
	__asm        jmp    near ptr 0x004CF36C;
	__asm        inc    len;
	__asm        cmp    len, 0x3C;
	__asm        jge    near ptr 0x004CF3B0;
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF3B0;
// LINE 539:
	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    c, eax;
// LINE 540:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        add    ecx, len;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
// LINE 541:
	__asm        jmp    near ptr 0x004CF369;
// LINE 542:
	__asm        mov    eax, len;
	__asm        mov    ecx, state;
	__asm        mov    [ecx+0x10], eax;
// LINE 543:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x004CF3C8;
	__asm        inc    i;
	__asm        cmp    i, 0x3C;
	__asm        jg     near ptr 0x004CF3EA;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        sub    eax, i;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x004CF3C5;
// LINE 544:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 546:
	__asm        mov    eax, forest;
	__asm        mov    ecx, len;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jle    near ptr 0x004CF418;
	__asm        mov    eax, len;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103F], eax;
// LINE 547:
	__asm        mov    eax, forest;
	__asm        cmp    dword ptr [eax+0x103F], 2;
	__asm        jg     near ptr 0x004CF46A;
// LINE 548:
	__asm        mov    eax, forest;
	__asm        mov    dword ptr [eax+0x103F], 1;
// LINE 549:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        push   edx;
	__asm        call   EncodeChar;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF465;
// LINE 550:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CF602;
// LINE 552:
	__asm        jmp    near ptr 0x004CF4CC;
// LINE 553:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        mov    eax, [eax+0x103F];
	__asm        add    eax, 0xFD;
	__asm        push   eax;
	__asm        call   EncodeChar;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF49D;
// LINE 554:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CF602;
// LINE 556:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        mov    eax, [eax+0x103B];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   EncodePosition;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF4CC;
// LINE 557:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CF602;
// LINE 560:
	__asm        mov    eax, forest;
	__asm        mov    eax, [eax+0x103F];
	__asm        mov    last_match_length, eax;
// LINE 561:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004CF4E7;
	__asm        inc    i;
	__asm        mov    eax, i;
	__asm        cmp    last_match_length, eax;
	__asm        jle    near ptr 0x004CF57C;
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CF57C;
// LINE 562:
	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    c, eax;
// LINE 563:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   DeleteNode;
	__asm        add    esp, 8;
// LINE 564:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, s;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
// LINE 565:
	__asm        cmp    s, 0x3B;
	__asm        jge    near ptr 0x004CF54F;
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, s;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx+0x1000], al;
// LINE 566:
	__asm        mov    eax, s;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    s, eax;
// LINE 567:
	__asm        mov    eax, r;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    r, eax;
// LINE 568:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 569:
	__asm        jmp    near ptr 0x004CF4E4;
// LINE 570:
	__asm        mov    eax, i;
	__asm        mov    ecx, state;
	__asm        add    [ecx+0x10], eax;
// LINE 571:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x24], eax;
	__asm        inc    i;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    last_match_length, eax;
	__asm        jle    near ptr 0x004CF5E0;
// LINE 572:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   DeleteNode;
	__asm        add    esp, 8;
// LINE 573:
	__asm        mov    eax, s;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    s, eax;
// LINE 574:
	__asm        mov    eax, r;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    r, eax;
// LINE 575:
	__asm        dec    len;
	__asm        je     near ptr 0x004CF5DB;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 576:
	__asm        jmp    near ptr 0x004CF585;
// LINE 580:
	__asm        cmp    len, 0;
	__asm        jg     near ptr 0x004CF3FA;
// LINE 582:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   EncodeEnd;
	__asm        add    esp, 8;
// LINE 588:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004CF602;
// LINE 589:
}

// FUNCTION: COPTER_D 0x004cf607
void InitTree(struct tLZSSBinaryForest* forest) {
	long i;

// LINE 206:
	__asm        mov    i, 0x1001;
	__asm        jmp    near ptr 0x004CF61F;
	__asm        inc    i;
	__asm        cmp    i, 0x1100;
	__asm        jg     near ptr 0x004CF642;
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jmp    near ptr 0x004CF61C;
// LINE 207:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004CF651;
	__asm        inc    i;
	__asm        cmp    i, 0x1000;
	__asm        jge    near ptr 0x004CF674;
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
	__asm        jmp    near ptr 0x004CF64E;
// LINE 208:
	__asm        jmp    near ptr 0x004CF679;
}

// FUNCTION: COPTER_D 0x004cf67e
void InsertNode(long r, struct tLZSSBinaryForest* forest) {
	long cmp;
	long i;
	long temp;
	unsigned char * key;
	long p;

// LINE 221:
	__asm        mov    cmp, 1;
// LINE 222:
	__asm        mov    eax, r;
	__asm        add    eax, forest;
	__asm        mov    key, eax;
// LINE 223:
	__asm        mov    eax, key;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        add    ecx, 0x1001;
	__asm        mov    p, ecx;
// LINE 224:
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 225:
	__asm        mov    eax, forest;
	__asm        mov    dword ptr [eax+0x103F], 0;
// LINE 227:
	__asm        cmp    cmp, 0;
	__asm        jl     near ptr 0x004CF73F;
// LINE 228:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        je     near ptr 0x004CF715;
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    p, eax;
// LINE 229:
	__asm        jmp    near ptr 0x004CF73A;
// LINE 230:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 231:
	__asm        mov    eax, p;
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 232:
	__asm        jmp    near ptr 0x004CF965;
// LINE 234:
	__asm        jmp    near ptr 0x004CF790;
// LINE 235:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        je     near ptr 0x004CF76B;
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    p, eax;
// LINE 236:
	__asm        jmp    near ptr 0x004CF790;
// LINE 237:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 238:
	__asm        mov    eax, p;
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 239:
	__asm        jmp    near ptr 0x004CF965;
// LINE 242:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x004CF79F;
	__asm        inc    i;
	__asm        cmp    i, 0x3C;
	__asm        jge    near ptr 0x004CF7DB;
// LINE 243:
	__asm        mov    eax, i;
	__asm        mov    ecx, key;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    eax, p;
	__asm        add    eax, i;
	__asm        mov    ecx, forest;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+ecx];
	__asm        sub    edx, ebx;
	__asm        mov    cmp, edx;
	__asm        cmp    cmp, 0;
	__asm        je     near ptr 0x004CF7D6;
	__asm        jmp    near ptr 0x004CF7DB;
// LINE 245:
	__asm        jmp    near ptr 0x004CF79C;
	__asm        cmp    i, 2;
	__asm        jle    near ptr 0x004CF86F;
// LINE 246:
	__asm        mov    eax, forest;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jge    near ptr 0x004CF831;
// LINE 247:
	__asm        mov    eax, r;
	__asm        sub    eax, p;
	__asm        and    eax, 0xFFF;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103B], eax;
// LINE 248:
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103F], eax;
	__asm        mov    eax, forest;
	__asm        cmp    dword ptr [eax+0x103F], 0x3C;
	__asm        jl     near ptr 0x004CF82C;
	__asm        jmp    near ptr 0x004CF874;
// LINE 249:
	__asm        jmp    near ptr 0x004CF86F;
	__asm        mov    eax, forest;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jne    near ptr 0x004CF86F;
// LINE 250:
	__asm        mov    eax, r;
	__asm        sub    eax, p;
	__asm        and    eax, 0xFFF;
	__asm        mov    temp, eax;
	__asm        mov    eax, forest;
	__asm        mov    ecx, temp;
	__asm        cmp    [eax+0x103B], ecx;
	__asm        jle    near ptr 0x004CF86F;
// LINE 251:
	__asm        mov    eax, temp;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103B], eax;
// LINE 254:
	__asm        jmp    near ptr 0x004CF6DF;
// LINE 255:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 256:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 257:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 258:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 259:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x5047];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 260:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, forest;
	__asm        mov    edx, p;
	__asm        cmp    [ecx+eax*4+0x5047], edx;
	__asm        jne    near ptr 0x004CF935;
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 261:
	__asm        jmp    near ptr 0x004CF94F;
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 262:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
// LINE 263:
	__asm        jmp    near ptr 0x004CF965;
}

// FUNCTION: COPTER_D 0x004cf96a
void DeleteNode(long p, struct tLZSSBinaryForest* forest) {
	long q;

// LINE 269:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x944B], 0x1000;
	__asm        jne    near ptr 0x004CF98F;
	__asm        jmp    near ptr 0x004CFB6E;
// LINE 270:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jne    near ptr 0x004CF9BB;
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    q, eax;
// LINE 271:
	__asm        jmp    near ptr 0x004CFAE5;
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        jne    near ptr 0x004CF9E7;
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    q, eax;
// LINE 272:
	__asm        jmp    near ptr 0x004CFAE5;
// LINE 273:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    q, eax;
// LINE 274:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        je     near ptr 0x004CFAB1;
// LINE 276:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    q, eax;
// LINE 277:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jne    near ptr 0x004CFA0E;
// LINE 278:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 279:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 280:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 281:
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 283:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 284:
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x5047];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 286:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 287:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, forest;
	__asm        mov    edx, p;
	__asm        cmp    [ecx+eax*4+0x5047], edx;
	__asm        jne    near ptr 0x004CFB3E;
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 288:
	__asm        jmp    near ptr 0x004CFB58;
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 289:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
// LINE 290:
	__asm        jmp    near ptr 0x004CFB6E;
}

// FUNCTION: COPTER_D 0x004cfb73
void StartModel(struct tACompModel* model) {
	long ch;
	long i;
	long sym;

// LINE 303:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+0x13B8], 0;
// LINE 304:
	__asm        mov    sym, 0x13A;
	__asm        jmp    near ptr 0x004CFB98;
	__asm        dec    sym;
	__asm        cmp    sym, 1;
	__asm        jl     near ptr 0x004CFC03;
// LINE 305:
	__asm        mov    eax, sym;
	__asm        dec    eax;
	__asm        mov    ch, eax;
// LINE 306:
	__asm        mov    eax, sym;
	__asm        mov    ecx, ch;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x10], eax;
// LINE 307:
	__asm        mov    eax, ch;
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x4F8], eax;
// LINE 308:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    dword ptr [ecx+eax*4+0x9E4], 1;
// LINE 309:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        add    eax, [edx+ecx*4+0x9E4];
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0xECC], eax;
// LINE 310:
	__asm        jmp    near ptr 0x004CFB95;
// LINE 311:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+0x9E4], 0;
// LINE 312:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+0x53BC], 0;
// LINE 313:
	__asm        mov    i, 0x1000;
	__asm        jmp    near ptr 0x004CFC2C;
	__asm        dec    i;
	__asm        cmp    i, 1;
	__asm        jl     near ptr 0x004CFC68;
// LINE 314:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+eax*4+0x13BC];
	__asm        mov    ebx, i;
	__asm        add    ebx, 0xC8;
	__asm        mov    eax, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        add    ecx, eax;
	__asm        mov    eax, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+eax*4+0x13B8], ecx;
	__asm        jmp    near ptr 0x004CFC29;
// LINE 317:
	__asm        jmp    near ptr 0x004CFC6D;
}

// FUNCTION: COPTER_D 0x004cfc72
short EncodeChar(long ch, struct tACompModel* model, struct tCompressState* dest) {
	unsigned long range;
	long sym;

// LINE 360:
	__asm        mov    eax, ch;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x10];
	__asm        mov    sym, eax;
// LINE 361:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 362:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xECC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 363:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 365:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        ja     near ptr 0x004CFD1B;
// LINE 366:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CFD16;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CFDDD;
// LINE 368:
	__asm        jmp    near ptr 0x004CFDAA;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     near ptr 0x004CFD68;
// LINE 369:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CFD50;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CFDDD;
// LINE 370:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 371:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 372:
	__asm        jmp    near ptr 0x004CFDAA;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     near ptr 0x004CFDA5;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     near ptr 0x004CFDA5;
// LINE 373:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 374:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 375:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 376:
	__asm        jmp    near ptr 0x004CFDAA;
	__asm        jmp    near ptr 0x004CFDC5;
// LINE 377:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 378:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 379:
	__asm        jmp    near ptr 0x004CFCE0;
// LINE 380:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, sym;
	__asm        push   eax;
	__asm        call   UpdateModel;
	__asm        add    esp, 8;
// LINE 382:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004CFDDD;
// LINE 383:
}

// FUNCTION: COPTER_D 0x004cfde2
void UpdateModel(long sym, struct tACompModel* model) {
	long i;
	long ch_i;
	long c;
	long ch_sym;

// LINE 323:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+0xED0], 0x7FFF;
	__asm        jb     near ptr 0x004CFE70;
// LINE 324:
	__asm        mov    c, 0;
// LINE 325:
	__asm        mov    i, 0x13A;
	__asm        jmp    near ptr 0x004CFE14;
	__asm        dec    i;
	__asm        cmp    i, 0;
	__asm        jle    near ptr 0x004CFE64;
// LINE 326:
	__asm        mov    eax, c;
	__asm        mov    ecx, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0xED0], eax;
// LINE 327:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x9E4];
	__asm        inc    eax;
	__asm        shr    eax, 1;
	__asm        mov    ecx, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x9E4], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x9E4];
	__asm        add    eax, c;
	__asm        mov    c, eax;
// LINE 328:
	__asm        jmp    near ptr 0x004CFE11;
// LINE 329:
	__asm        mov    eax, c;
	__asm        mov    ecx, model;
	__asm        mov    [ecx+0xED0], eax;
// LINE 331:
	__asm        mov    eax, sym;
	__asm        mov    i, eax;
	__asm        jmp    near ptr 0x004CFE7E;
	__asm        dec    i;
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    edx, i;
	__asm        mov    ebx, model;
	__asm        mov    edx, [ebx+edx*4+0x9E4];
	__asm        cmp    [ecx+eax*4+0x9E0], edx;
	__asm        jne    near ptr 0x004CFEA3;
	__asm        jmp    near ptr 0x004CFE7B;
// LINE 332:
	__asm        mov    eax, i;
	__asm        cmp    sym, eax;
	__asm        jle    near ptr 0x004CFF09;
// LINE 333:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x4F8];
	__asm        mov    ch_i, eax;
// LINE 334:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x4F8];
	__asm        mov    ch_sym, eax;
// LINE 335:
	__asm        mov    eax, ch_sym;
	__asm        mov    ecx, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x4F8], eax;
// LINE 336:
	__asm        mov    eax, ch_i;
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x4F8], eax;
// LINE 337:
	__asm        mov    eax, sym;
	__asm        mov    ecx, ch_i;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x10], eax;
// LINE 338:
	__asm        mov    eax, i;
	__asm        mov    ecx, ch_sym;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x10], eax;
// LINE 340:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        inc    dword ptr [ecx+eax*4+0x9E4];
// LINE 341:
	__asm        dec    i;
	__asm        js     near ptr 0x004CFF31;
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        inc    dword ptr [ecx+eax*4+0xED0];
	__asm        jmp    near ptr 0x004CFF16;
// LINE 342:
	__asm        jmp    near ptr 0x004CFF36;
}

// FUNCTION: COPTER_D 0x004cff3b
short Output(long bit, struct tACompModel* model, struct tCompressState* dest) {
// LINE 347:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, bit;
	__asm        push   eax;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CFF65;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CFFB3;
// LINE 348:
	__asm        jmp    near ptr 0x004CFF70;
	__asm        mov    eax, model;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jle    near ptr 0x004CFFAB;
// LINE 349:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        cmp    bit, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004CFFA6;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004CFFB3;
// LINE 350:
	__asm        jmp    near ptr 0x004CFF6A;
// LINE 352:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004CFFB3;
// LINE 353:
}

// FUNCTION: COPTER_D 0x004cffb8
short PutBit(long bit, struct tCompressState* dest) {
	unsigned char tempByte;

// LINE 127:
	__asm        cmp    bit, 0;
	__asm        je     near ptr 0x004CFFD6;
	__asm        mov    eax, dest;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, dest;
	__asm        or     [ecx], eax;
// LINE 128:
	__asm        mov    eax, dest;
	__asm        shr    dword ptr [eax+4], 1;
	__asm        mov    eax, dest;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    near ptr 0x004D0034;
// LINE 129:
	__asm        mov    eax, dest;
	__asm        mov    al, [eax];
	__asm        mov    tempByte, al;
// LINE 130:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        mov    ecx, dest;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x004D001B;
// LINE 134:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D003C;
// LINE 136:
	__asm        mov    eax, dest;
	__asm        mov    dword ptr [eax], 0;
// LINE 137:
	__asm        mov    eax, dest;
	__asm        mov    dword ptr [eax+4], 0x80;
// LINE 138:
	__asm        mov    eax, dest;
	__asm        inc    dword ptr [eax+0x14];
// LINE 141:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004D003C;
// LINE 142:
}

// FUNCTION: COPTER_D 0x004d0041
short EncodePosition(long position, struct tACompModel* model, struct tCompressState* dest) {
	unsigned long range;

// LINE 389:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 390:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13BC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 391:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13C0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 393:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        ja     near ptr 0x004D00DD;
// LINE 394:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004D00D8;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D018F;
// LINE 395:
	__asm        jmp    near ptr 0x004D016C;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     near ptr 0x004D012A;
// LINE 396:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004D0112;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D018F;
// LINE 397:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 398:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 399:
	__asm        jmp    near ptr 0x004D016C;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     near ptr 0x004D0167;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     near ptr 0x004D0167;
// LINE 400:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 401:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 402:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 403:
	__asm        jmp    near ptr 0x004D016C;
	__asm        jmp    near ptr 0x004D0187;
// LINE 404:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 405:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 406:
	__asm        jmp    near ptr 0x004D00A2;
// LINE 408:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004D018F;
// LINE 409:
}

// FUNCTION: COPTER_D 0x004d0194
short EncodeEnd(struct tACompModel* model, struct tCompressState* dest) {
// LINE 413:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 414:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jae    near ptr 0x004D01DA;
// LINE 415:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004D01D5;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D0211;
// LINE 416:
	__asm        jmp    near ptr 0x004D0200;
// LINE 417:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004D0200;
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D0211;
// LINE 419:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        call   FlushBitBuffer;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004D0211;
// LINE 420:
}

// FUNCTION: COPTER_D 0x004d0216
short FlushBitBuffer(struct tCompressState* dest) {
	short retVal;
	long i;

// LINE 149:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004D022E;
	__asm        inc    i;
	__asm        cmp    i, 7;
	__asm        jge    near ptr 0x004D0264;
// LINE 150:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        mov    retVal, ax;
// LINE 151:
	__asm        movsx  eax, retVal;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x004D025F;
// LINE 155:
	__asm        mov    ax, retVal;
	__asm        jmp    near ptr 0x004D026C;
// LINE 157:
	__asm        jmp    near ptr 0x004D022B;
// LINE 158:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004D026C;
// LINE 159:
}

// FUNCTION: COPTER_D 0x004d0271
short LZAExpand(class cGZXBitstream* inStream, class cGZXBitstream* outStream) {
	struct tLZSSBinaryForest* forest;
	short retVal;
	struct tCompressState* state;
	struct tACompModel* model;

// LINE 737:
	__asm        push   0x53C0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    model, eax;
// LINE 738:
	__asm        cmp    model, 0;
	__asm        jne    near ptr 0x004D02A4;
// LINE 739:
	__asm        mov    retVal, 3;
// LINE 740:
	__asm        jmp    near ptr 0x004D03DC;
	__asm        jmp    near ptr 0x004D0381;
// LINE 742:
	__asm        push   0xD44F;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    forest, eax;
// LINE 743:
	__asm        cmp    forest, 0;
	__asm        jne    near ptr 0x004D02CE;
// LINE 744:
	__asm        mov    retVal, 3;
// LINE 745:
	__asm        jmp    near ptr 0x004D03D7;
	__asm        jmp    near ptr 0x004D0381;
// LINE 747:
	__asm        push   0x20;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    state, eax;
// LINE 748:
	__asm        cmp    state, 0;
	__asm        jne    near ptr 0x004D02F5;
// LINE 749:
	__asm        mov    retVal, 3;
// LINE 750:
	__asm        jmp    near ptr 0x004D03D2;
	__asm        jmp    near ptr 0x004D0381;
// LINE 753:
	__asm        mov    eax, inStream;
	__asm        mov    ecx, state;
	__asm        mov    [ecx+0x18], eax;
// LINE 754:
	__asm        mov    eax, outStream;
	__asm        mov    ecx, state;
	__asm        mov    [ecx+0x1C], eax;
// LINE 756:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0x10], 0;
// LINE 757:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 758:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax], 0;
// LINE 759:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+4], 0x20000;
// LINE 760:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 761:
	__asm        mov    eax, model;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 762:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax], 0;
// LINE 763:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+4], 0x80;
// LINE 764:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 765:
	__asm        mov    eax, state;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 767:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   Decode;
	__asm        add    esp, 0xC;
	__asm        mov    retVal, ax;
// LINE 770:
ExpandDone:
	__asm        mov    eax, model;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 771:
	__asm        mov    eax, forest;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 772:
	__asm        mov    eax, state;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 774:
	__asm        mov    ax, retVal;
	__asm        jmp    near ptr 0x004D03E1;
// LINE 775:
	__asm        jmp    near ptr 0x004D0381;
	__asm        jmp    near ptr 0x004D0381;
	__asm        jmp    near ptr 0x004D0381;
}

// FUNCTION: COPTER_D 0x004d03e6
short Decode(struct tACompModel* model, struct tLZSSBinaryForest* forest, struct tCompressState* state) {
	unsigned char tempByte;
	long k;
	long j;
	long i;
	unsigned long count;
	long c;
	long r;

// LINE 597:
	__asm        push   4;
	__asm        mov    eax, state;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        cmp    eax, 4;
	__asm        jae    near ptr 0x004D041A;
// LINE 598:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x004D05B3;
// LINE 600:
	__asm        mov    eax, state;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x004D042F;
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004D05B3;
// LINE 601:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartDecode;
	__asm        add    esp, 8;
// LINE 602:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartModel;
	__asm        add    esp, 4;
// LINE 603:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004D045A;
	__asm        inc    i;
	__asm        cmp    i, 0xFC4;
	__asm        jge    near ptr 0x004D0476;
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    byte ptr [eax+ecx], 0x20;
	__asm        jmp    near ptr 0x004D0457;
// LINE 604:
	__asm        mov    r, 0xFC4;
// LINE 605:
	__asm        mov    count, 0;
	__asm        mov    eax, state;
	__asm        mov    ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jbe    near ptr 0x004D05AB;
// LINE 606:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   DecodeChar;
	__asm        add    esp, 8;
	__asm        mov    c, eax;
// LINE 607:
	__asm        cmp    c, 0x100;
	__asm        jge    near ptr 0x004D04FF;
// LINE 608:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    tempByte, al;
// LINE 609:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004D04E1;
// LINE 610:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D05B3;
// LINE 612:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
	__asm        inc    r;
// LINE 613:
	__asm        and    r, 0xFFF;
// LINE 614:
	__asm        inc    count;
// LINE 615:
	__asm        jmp    near ptr 0x004D05A6;
// LINE 616:
	__asm        mov    ebx, r;
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   DecodePosition;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        dec    ebx;
	__asm        and    ebx, 0xFFF;
	__asm        mov    i, ebx;
// LINE 617:
	__asm        mov    eax, c;
	__asm        sub    eax, 0xFD;
	__asm        mov    j, eax;
// LINE 618:
	__asm        mov    k, 0;
	__asm        jmp    near ptr 0x004D0538;
	__asm        inc    k;
	__asm        mov    eax, k;
	__asm        cmp    j, eax;
	__asm        jle    near ptr 0x004D05A6;
// LINE 619:
	__asm        mov    eax, i;
	__asm        add    eax, k;
	__asm        and    eax, 0xFFF;
	__asm        mov    ecx, forest;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    c, edx;
// LINE 620:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    tempByte, al;
// LINE 621:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004D0588;
// LINE 622:
	__asm        mov    ax, 2;
	__asm        jmp    near ptr 0x004D05B3;
// LINE 624:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
	__asm        inc    r;
// LINE 625:
	__asm        and    r, 0xFFF;
// LINE 626:
	__asm        inc    count;
// LINE 627:
	__asm        jmp    near ptr 0x004D0535;
// LINE 629:
	__asm        jmp    near ptr 0x004D0484;
// LINE 631:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x004D05B3;
// LINE 632:
}

// FUNCTION: COPTER_D 0x004d05b8
void StartDecode(struct tACompModel* model, struct tCompressState* src) {
	long i;

// LINE 458:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x004D05D0;
	__asm        inc    i;
	__asm        cmp    i, 0x11;
	__asm        jge    near ptr 0x004D05FA;
// LINE 459:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    near ptr 0x004D05CD;
// LINE 460:
	__asm        jmp    near ptr 0x004D05FF;
}

// FUNCTION: COPTER_D 0x004d0604
long GetBit(struct tCompressState* source) {
	unsigned char tempByte;
	unsigned char kludger;

// LINE 173:
	__asm        mov    kludger, 0;
// LINE 176:
	__asm        mov    eax, source;
	__asm        shr    dword ptr [eax+0xC], 1;
	__asm        mov    eax, source;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x004D067D;
// LINE 177:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, source;
	__asm        mov    ecx, source;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        cmp    eax, 1;
	__asm        je     near ptr 0x004D064C;
// LINE 178:
	__asm        mov    tempByte, 0;
// LINE 179:
	__asm        mov    kludger, 1;
// LINE 181:
	__asm        xor    eax, eax;
	__asm        mov    al, kludger;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x004D0669;
	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    ecx, source;
	__asm        mov    [ecx+8], eax;
// LINE 182:
	__asm        jmp    near ptr 0x004D0673;
	__asm        mov    eax, source;
	__asm        mov    dword ptr [eax+8], 0xFFFFFFFF;
// LINE 183:
	__asm        mov    eax, source;
	__asm        mov    dword ptr [eax+0xC], 0x80;
// LINE 187:
	__asm        mov    eax, source;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, source;
	__asm        test   [ecx+0xC], eax;
	__asm        je     near ptr 0x004D0699;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004D069B;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x004D06A0;
// LINE 188:
}

// FUNCTION: COPTER_D 0x004d06a5
long DecodeChar(struct tACompModel* model, struct tCompressState* src) {
	long ch;
	unsigned long range;
	long sym;

// LINE 467:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 470:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        inc    eax;
	__asm        mov    ecx, model;
	__asm        imul   eax, [ecx+0xED0];
	__asm        dec    eax;
	__asm        sub    edx, edx;
	__asm        div    range;
	__asm        push   eax;
	__asm        call   BinarySearchSym;
	__asm        add    esp, 8;
	__asm        mov    sym, eax;
// LINE 471:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xECC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 472:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 474:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     near ptr 0x004D0763;
// LINE 475:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x10000;
// LINE 476:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 477:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 478:
	__asm        jmp    near ptr 0x004D07B9;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     near ptr 0x004D07A4;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     near ptr 0x004D07A4;
// LINE 479:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x8000;
// LINE 480:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 481:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 482:
	__asm        jmp    near ptr 0x004D07B9;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        jbe    near ptr 0x004D07B9;
	__asm        jmp    near ptr 0x004D07EF;
// LINE 484:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 485:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 486:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
// LINE 487:
	__asm        jmp    near ptr 0x004D0732;
// LINE 488:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x4F8];
	__asm        mov    ch, eax;
// LINE 489:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, sym;
	__asm        push   eax;
	__asm        call   UpdateModel;
	__asm        add    esp, 8;
// LINE 490:
	__asm        mov    eax, ch;
	__asm        jmp    near ptr 0x004D0817;
// LINE 491:
}

// FUNCTION: COPTER_D 0x004d081c
long BinarySearchSym(unsigned long x, struct tACompModel* model) {
	long k;
	long j;
	long i;

// LINE 429:
	__asm        mov    i, 1;
	__asm        mov    j, 0x13A;
// LINE 430:
	__asm        mov    eax, i;
	__asm        cmp    j, eax;
	__asm        jle    near ptr 0x004D087B;
// LINE 431:
	__asm        mov    eax, j;
	__asm        add    eax, i;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    k, eax;
// LINE 432:
	__asm        mov    eax, k;
	__asm        mov    ecx, model;
	__asm        mov    edx, x;
	__asm        cmp    [ecx+eax*4+0xED0], edx;
	__asm        jbe    near ptr 0x004D0870;
	__asm        mov    eax, k;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 433:
	__asm        jmp    near ptr 0x004D0876;
	__asm        mov    eax, k;
	__asm        mov    j, eax;
// LINE 434:
	__asm        jmp    near ptr 0x004D0833;
// LINE 435:
	__asm        mov    eax, i;
	__asm        jmp    near ptr 0x004D0883;
// LINE 436:
}

// FUNCTION: COPTER_D 0x004d0888
long DecodePosition(struct tACompModel* model, struct tCompressState* src) {
	unsigned long range;
	long position;

// LINE 498:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 501:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        inc    eax;
	__asm        mov    ecx, model;
	__asm        imul   eax, [ecx+0x13BC];
	__asm        dec    eax;
	__asm        sub    edx, edx;
	__asm        div    range;
	__asm        push   eax;
	__asm        call   BinarySearchPos;
	__asm        add    esp, 8;
	__asm        mov    position, eax;
// LINE 502:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13BC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 503:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13C0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 505:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     near ptr 0x004D0946;
// LINE 506:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x10000;
// LINE 507:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 508:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 509:
	__asm        jmp    near ptr 0x004D099C;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     near ptr 0x004D0987;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     near ptr 0x004D0987;
// LINE 510:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x8000;
// LINE 511:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 512:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 513:
	__asm        jmp    near ptr 0x004D099C;
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        jbe    near ptr 0x004D099C;
	__asm        jmp    near ptr 0x004D09D2;
// LINE 515:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 516:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 517:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
// LINE 518:
	__asm        jmp    near ptr 0x004D0915;
// LINE 519:
	__asm        mov    eax, position;
	__asm        jmp    near ptr 0x004D09DA;
// LINE 520:
}

// FUNCTION: COPTER_D 0x004d09df
long BinarySearchPos(unsigned long x, struct tACompModel* model) {
	long k;
	long j;
	long i;

// LINE 445:
	__asm        mov    i, 1;
	__asm        mov    j, 0x1000;
// LINE 446:
	__asm        mov    eax, i;
	__asm        cmp    j, eax;
	__asm        jle    near ptr 0x004D0A3E;
// LINE 447:
	__asm        mov    eax, j;
	__asm        add    eax, i;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    k, eax;
// LINE 448:
	__asm        mov    eax, k;
	__asm        mov    ecx, model;
	__asm        mov    edx, x;
	__asm        cmp    [ecx+eax*4+0x13BC], edx;
	__asm        jbe    near ptr 0x004D0A33;
	__asm        mov    eax, k;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 449:
	__asm        jmp    near ptr 0x004D0A39;
	__asm        mov    eax, k;
	__asm        mov    j, eax;
// LINE 450:
	__asm        jmp    near ptr 0x004D09F6;
// LINE 451:
	__asm        mov    eax, i;
	__asm        dec    eax;
	__asm        jmp    near ptr 0x004D0A47;
// LINE 452:
}

