// Module: lza.obj
// Source: C:\Copter\Source\Common\lza.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class cGZXBitstream (forward reference);
// VTABLE: COPTER_D 0x005923f8
class cGZXBitstream{ // packed(0x4 bytes) TI: 0x2d06
public:
	virtual unsigned long Read(unsigned char *, unsigned long); // vtable+0x0
	virtual unsigned long Write(unsigned char *, unsigned long); // vtable+0x4
	virtual void Rewind(); // vtable+0x8
	virtual void RewindToMark(); // vtable+0xc
	virtual void Mark(); // vtable+0x10
	virtual long Size(); // vtable+0x14
	virtual void FreeAll(); // vtable+0x18
};

// Type: unsigned long *;

// Type: /*packed*/ struct tLZSSBinaryForest (forward reference);
struct tLZSSBinaryForest{ // packed(0xd44f bytes) TI: 0x2d0d
	/*+0x0*/   unsigned char text_buf[4155]; // 0x103b bytes
	/*+0x103b*/ long match_position;
	/*+0x103f*/ long match_length;
	/*+0x1043*/ long lson[4097]; // 0x4004 bytes
	/*+0x5047*/ long rson[4353]; // 0x4404 bytes
	/*+0x944b*/ long dad[4097]; // 0x4004 bytes
};

// Type: short;

// Type: /*packed*/ struct tCompressState (forward reference);
struct tCompressState{ // packed(0x20 bytes) TI: 0x2d08
	/*+0x0*/   unsigned long putBuffer;
	/*+0x4*/   unsigned long putMask;
	/*+0x8*/   unsigned long getBuffer;
	/*+0xc*/   unsigned long getMask;
	/*+0x10*/  unsigned long textsize;
	/*+0x14*/  unsigned long codesize;
	/*+0x18*/  /*packed*/ class cGZXBitstream *infile;
	/*+0x1c*/  /*packed*/ class cGZXBitstream *outfile;
};

// Type: unsigned char;

// Type: /*packed*/ struct tACompModel (forward reference);
struct tACompModel{ // packed(0x53c0 bytes) TI: 0x2d13
	/*+0x0*/   unsigned long low;
	/*+0x4*/   unsigned long high;
	/*+0x8*/   unsigned long value;
	/*+0xc*/   long shifts;
	/*+0x10*/  long char_to_sym[314]; // 0x4e8 bytes
	/*+0x4f8*/ long sym_to_char[315]; // 0x4ec bytes
	/*+0x9e4*/ unsigned long sym_freq[315]; // 0x4ec bytes
	/*+0xed0*/ unsigned long sym_cum[315]; // 0x4ec bytes
	/*+0x13bc*/ unsigned long position_cum[4097]; // 0x4004 bytes
};

// Type: long;

// Type: void;

// Type: unsigned char *;

// Type: unsigned long;



// Contribution: 1:000ce090-000cfa4b Module: 88, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004cf090
short LZACompress(/*packed*/ class cGZXBitstream *inStream, /*packed*/ class cGZXBitstream *outStream, unsigned long * cSize) {
	/*bp-0x4*/   /*packed*/ struct tACompModel *model;
	/*bp-0xc*/   unsigned char header[5]; // 0x5 bytes
	/*bp-0x10*/  /*packed*/ struct tCompressState *state;
	/*bp-0x14*/  short retVal;
	/*bp-0x18*/  /*packed*/ struct tLZSSBinaryForest *forest;

// LINE 648:
	__asm        mov    header[0], 0;
	__asm        mov    header[1], 0;
	__asm        mov    header[2], 0;
	__asm        mov    header[3], 0;
	__asm        mov    header[4], 0;
// LINE 653:
	__asm        mov    eax, cSize;
	__asm        mov    dword ptr [eax], 0;
// LINE 655:
	__asm        push   0x53C0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    model, eax;
// LINE 656:
	__asm        cmp    model, 0;
	__asm        jne    _T50;
// LINE 657:
	retVal = 0x3;
// LINE 658:
	__asm        jmp    _T253;

	__asm        jmp    _T1e9;
// LINE 660:
_T50:
	__asm        push   0xD44F;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    forest, eax;
// LINE 661:
	__asm        cmp    forest, 0;
	__asm        jne    _T7a;
// LINE 662:
	retVal = 0x3;
// LINE 663:
	__asm        jmp    _T24e;

	__asm        jmp    _T1e9;
// LINE 665:
_T7a:
	__asm        push   0x20;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    state, eax;
// LINE 666:
	__asm        cmp    state, 0;
	__asm        jne    _Ta1;
// LINE 667:
	retVal = 0x3;
// LINE 668:
	__asm        jmp    _T249;

	__asm        jmp    _T1e9;
// LINE 671:
_Ta1:
	state->textsize = 0x0;
// LINE 672:
	state->codesize = 0x0;
// LINE 673:
	model->low = 0x0;
// LINE 674:
	model->high = 0x20000;
// LINE 675:
	model->value = 0x0;
// LINE 676:
	model->shifts = 0x0;
// LINE 677:
	state->putBuffer = 0x0;
// LINE 678:
	state->putMask = 0x80;
// LINE 679:
	state->getBuffer = 0x0;
// LINE 680:
	state->getMask = 0x0;
// LINE 682:
	state->infile = inStream;
// LINE 683:
	state->outfile = outStream;
// LINE 686:
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+0x10];
// LINE 687:
	__asm        push   4;
	__asm        lea    eax, header[0];
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        mov    retVal, ax;
// LINE 688:
	__asm        movsx  eax, retVal;
	__asm        cmp    eax, 4;
	__asm        je     _T15e;
// LINE 689:
	retVal = 0x2;
// LINE 690:
	__asm        jmp    _T244;

	__asm        jmp    _T1e9;
// LINE 693:
_T15e:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   Encode;
	__asm        add    esp, 0xC;
	__asm        mov    retVal, ax;
// LINE 695:
	__asm        movsx  eax, retVal;
	__asm        test   eax, eax;
	__asm        je     _T18c;
// LINE 696:
	__asm        jmp    _T23f;

	__asm        jmp    _T1e9;
// LINE 700:
_T18c:
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+0xC];
// LINE 701:
	__asm        push   4;
	__asm        mov    eax, state;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        mov    retVal, ax;
// LINE 703:
	__asm        movsx  eax, retVal;
	__asm        cmp    eax, 4;
	__asm        je     _T1d8;
// LINE 704:
	retVal = 0x2;
// LINE 705:
	__asm        jmp    _T23a;

	__asm        jmp    _T1e9;
// LINE 707:
_T1d8:
	__asm        mov    eax, state;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    ecx, cSize;
	__asm        mov    [ecx], eax;
// LINE 708:
	retVal = 0x0;
// LINE 715:
CompressDone:
_T1e9:
	__asm        mov    eax, model;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 716:
	__asm        mov    eax, forest;
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x2C], eax;
	__asm        mov    eax, [ebp-0x2C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 717:
	__asm        mov    eax, state;
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 719:
	__asm        mov    ax, retVal;
	__asm        jmp    _T258;
// LINE 720:
_T23a:
	__asm        jmp    _T1e9;
_T23f:
	__asm        jmp    _T1e9;
_T244:
	__asm        jmp    _T1e9;
_T249:
	__asm        jmp    _T1e9;
_T24e:
	__asm        jmp    _T1e9;
_T253:
	__asm        jmp    _T1e9;
_T258:
}

// FUNCTION: COPTER_D 0x004cf2ed
static short Encode(/*packed*/ struct tACompModel *model, /*packed*/ struct tLZSSBinaryForest *forest, /*packed*/ struct tCompressState *state) {
	/*bp-0x4*/   long r;
	/*bp-0x8*/   long s;
	/*bp-0xc*/   long c;
	/*bp-0x10*/  long i;
	/*bp-0x14*/  long last_match_length;
	/*bp-0x18*/  long tempDebug;
	/*bp-0x1c*/  long len;
	/*bp-0x20*/  unsigned char tempByte;

// LINE 530:
	tempDebug = 0x0;
// LINE 532:
	__asm        mov    eax, state;
	__asm        add    dword ptr [eax+0x14], 4;
// LINE 533:
	state->textsize = 0x0;
// LINE 534:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartModel;
	__asm        add    esp, 4;
// LINE 535:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        call   InitTree;
	__asm        add    esp, 4;
// LINE 536:
	__asm        mov    s, 0;
	__asm        mov    r, 0xFC4;
// LINE 537:
	__asm        mov    eax, s;
	__asm        mov    i, eax;
	__asm        jmp    _T55;
_T52:
	__asm        inc    i;
_T55:
	__asm        mov    eax, i;
	__asm        cmp    r, eax;
	__asm        jle    _T70;

	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    byte ptr [eax+ecx], 0x20;
	__asm        jmp    _T52;
// LINE 538:
_T70:
	__asm        mov    len, 0;
	__asm        jmp    _T7f;
_T7c:
	__asm        inc    len;
_T7f:
	__asm        cmp    len, 0x3C;
	__asm        jge    _Tc3;

	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _Tc3;
// LINE 539:
	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    c, eax;
// LINE 540:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        add    ecx, len;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
// LINE 541:
	__asm        jmp    _T7c;
// LINE 542:
_Tc3:
	state->textsize = len;
// LINE 543:
	__asm        mov    i, 1;
	__asm        jmp    _Tdb;
_Td8:
	__asm        inc    i;
_Tdb:
	__asm        cmp    i, 0x3C;
	__asm        jg     _Tfd;

	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        sub    eax, i;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
	__asm        jmp    _Td8;
// LINE 544:
_Tfd:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 546:
_T10d:
	__asm        mov    eax, forest;
	__asm        mov    ecx, len;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jle    _T12b;

	forest->match_length = len;
// LINE 547:
_T12b:
	__asm        mov    eax, forest;
	__asm        cmp    dword ptr [eax+0x103F], 2;
	__asm        jg     _T17d;
// LINE 548:
	forest->match_length = 0x1;
// LINE 549:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        push   edx;
	__asm        call   EncodeChar;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T178;
// LINE 550:
	__asm        mov    ax, 2;
	__asm        jmp    _T315;
// LINE 552:
_T178:
	__asm        jmp    _T1df;
// LINE 553:
_T17d:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        mov    eax, [eax+0x103F];
	__asm        add    eax, 0xFD;
	__asm        push   eax;
	__asm        call   EncodeChar;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T1b0;
// LINE 554:
	__asm        mov    ax, 2;
	__asm        jmp    _T315;
// LINE 556:
_T1b0:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        mov    eax, [eax+0x103B];
	__asm        dec    eax;
	__asm        push   eax;
	__asm        call   EncodePosition;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T1df;
// LINE 557:
	__asm        mov    ax, 2;
	__asm        jmp    _T315;
// LINE 560:
_T1df:
	last_match_length = forest->match_length;
// LINE 561:
	__asm        mov    i, 0;
	__asm        jmp    _T1fa;
_T1f7:
	__asm        inc    i;
_T1fa:
	__asm        mov    eax, i;
	__asm        cmp    last_match_length, eax;
	__asm        jle    _T28f;

	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        test   eax, eax;
	__asm        je     _T28f;
// LINE 562:
	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    c, eax;
// LINE 563:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   DeleteNode;
	__asm        add    esp, 8;
// LINE 564:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, s;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
// LINE 565:
	__asm        cmp    s, 0x3B;
	__asm        jge    _T262;

	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, s;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx+0x1000], al;
// LINE 566:
_T262:
	__asm        mov    eax, s;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    s, eax;
// LINE 567:
	__asm        mov    eax, r;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    r, eax;
// LINE 568:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 569:
	__asm        jmp    _T1f7;
// LINE 570:
_T28f:
	__asm        mov    eax, i;
	__asm        mov    ecx, state;
	__asm        add    [ecx+0x10], eax;
// LINE 571:
_T298:
	__asm        mov    eax, i;
	__asm        mov    [ebp-0x24], eax;
	__asm        inc    i;
	__asm        mov    eax, [ebp-0x24];
	__asm        cmp    last_match_length, eax;
	__asm        jle    _T2f3;
// LINE 572:
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, s;
	__asm        push   eax;
	__asm        call   DeleteNode;
	__asm        add    esp, 8;
// LINE 573:
	__asm        mov    eax, s;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    s, eax;
// LINE 574:
	__asm        mov    eax, r;
	__asm        inc    eax;
	__asm        and    eax, 0xFFF;
	__asm        mov    r, eax;
// LINE 575:
	__asm        dec    len;
	__asm        je     _T2ee;

	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, r;
	__asm        push   eax;
	__asm        call   InsertNode;
	__asm        add    esp, 8;
// LINE 576:
_T2ee:
	__asm        jmp    _T298;
// LINE 580:
_T2f3:
	__asm        cmp    len, 0;
	__asm        jg     _T10d;
// LINE 582:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   EncodeEnd;
	__asm        add    esp, 8;
// LINE 588:
	__asm        xor    ax, ax;
	__asm        jmp    _T315;
// LINE 589:
_T315:
}

// FUNCTION: COPTER_D 0x004cf607
static void InitTree(/*packed*/ struct tLZSSBinaryForest *forest) {
	/*bp-0x4*/   long i;

// LINE 206:
	__asm        mov    i, 0x1001;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        cmp    i, 0x1100;
	__asm        jg     _T3b;

	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jmp    _T15;
// LINE 207:
_T3b:
	__asm        mov    i, 0;
	__asm        jmp    _T4a;
_T47:
	__asm        inc    i;
_T4a:
	__asm        cmp    i, 0x1000;
	__asm        jge    _T6d;

	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
	__asm        jmp    _T47;
// LINE 208:
_T6d:
	__asm        jmp    near ptr 0x004CF679;
}

// FUNCTION: COPTER_D 0x004cf67e
static void InsertNode(long r, /*packed*/ struct tLZSSBinaryForest *forest) {
	/*bp-0x4*/   long p;
	/*bp-0x8*/   unsigned char * key;
	/*bp-0xc*/   long temp;
	/*bp-0x10*/  long i;
	/*bp-0x14*/  long cmp;

// LINE 221:
	cmp = 0x1;
// LINE 222:
	__asm        mov    eax, r;
	__asm        add    eax, forest;
	__asm        mov    key, eax;
// LINE 223:
	__asm        mov    eax, key;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        add    ecx, 0x1001;
	__asm        mov    p, ecx;
// LINE 224:
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        mov    eax, r;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 225:
	forest->match_length = 0x0;
// LINE 227:
_T61:
	__asm        cmp    cmp, 0;
	__asm        jl     _Tc1;
// LINE 228:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        je     _T97;

	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    p, eax;
// LINE 229:
	__asm        jmp    _Tbc;
// LINE 230:
_T97:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 231:
	__asm        mov    eax, p;
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 232:
	__asm        jmp    _T2e7;
// LINE 234:
_Tbc:
	__asm        jmp    _T112;
// LINE 235:
_Tc1:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        je     _Ted;

	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    p, eax;
// LINE 236:
	__asm        jmp    _T112;
// LINE 237:
_Ted:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 238:
	__asm        mov    eax, p;
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 239:
	__asm        jmp    _T2e7;
// LINE 242:
_T112:
	__asm        mov    i, 1;
	__asm        jmp    _T121;
_T11e:
	__asm        inc    i;
_T121:
	__asm        cmp    i, 0x3C;
	__asm        jge    _T15d;
// LINE 243:
	__asm        mov    eax, i;
	__asm        mov    ecx, key;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    eax, p;
	__asm        add    eax, i;
	__asm        mov    ecx, forest;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [eax+ecx];
	__asm        sub    edx, ebx;
	__asm        mov    cmp, edx;
	__asm        cmp    cmp, 0;
	__asm        je     _T158;

	__asm        jmp    _T15d;
// LINE 245:
_T158:
	__asm        jmp    _T11e;
_T15d:
	__asm        cmp    i, 2;
	__asm        jle    _T1f1;
// LINE 246:
	__asm        mov    eax, forest;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jge    _T1b3;
// LINE 247:
	__asm        mov    eax, r;
	__asm        sub    eax, p;
	__asm        and    eax, 0xFFF;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103B], eax;
// LINE 248:
	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    [ecx+0x103F], eax;
	__asm        mov    eax, forest;
	__asm        cmp    dword ptr [eax+0x103F], 0x3C;
	__asm        jl     _T1ae;

	__asm        jmp    _T1f6;
// LINE 249:
_T1ae:
	__asm        jmp    _T1f1;
_T1b3:
	__asm        mov    eax, forest;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+0x103F], ecx;
	__asm        jne    _T1f1;
// LINE 250:
	__asm        mov    eax, r;
	__asm        sub    eax, p;
	__asm        and    eax, 0xFFF;
	__asm        mov    temp, eax;
	__asm        mov    eax, forest;
	__asm        mov    ecx, temp;
	__asm        cmp    [eax+0x103B], ecx;
	__asm        jle    _T1f1;
// LINE 251:
	forest->match_position = temp;
// LINE 254:
_T1f1:
	__asm        jmp    _T61;
// LINE 255:
_T1f6:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 256:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 257:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 258:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 259:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x5047];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 260:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, forest;
	__asm        mov    edx, p;
	__asm        cmp    [ecx+eax*4+0x5047], edx;
	__asm        jne    _T2b7;

	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 261:
	__asm        jmp    _T2d1;
_T2b7:
	__asm        mov    eax, r;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 262:
_T2d1:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
// LINE 263:
	__asm        jmp    _T2e7;
_T2e7:
}

// FUNCTION: COPTER_D 0x004cf96a
static void DeleteNode(long p, /*packed*/ struct tLZSSBinaryForest *forest) {
	/*bp-0x4*/   long q;

// LINE 269:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x944B], 0x1000;
	__asm        jne    _T25;

	__asm        jmp    _T204;
// LINE 270:
_T25:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jne    _T51;

	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    q, eax;
// LINE 271:
	__asm        jmp    _T17b;
_T51:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x1043], 0x1000;
	__asm        jne    _T7d;

	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    q, eax;
// LINE 272:
	__asm        jmp    _T17b;
// LINE 273:
_T7d:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    q, eax;
// LINE 274:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        je     _T147;
// LINE 276:
_Ta4:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    q, eax;
// LINE 277:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        cmp    dword ptr [ecx+eax*4+0x5047], 0x1000;
	__asm        jne    _Ta4;
// LINE 278:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 279:
	__asm        mov    eax, q;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 280:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x1043];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 281:
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x1043];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 283:
_T147:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x5047];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 284:
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x5047];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 286:
_T17b:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, q;
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x944B], eax;
// LINE 287:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    eax, [ecx+eax*4+0x944B];
	__asm        mov    ecx, forest;
	__asm        mov    edx, p;
	__asm        cmp    [ecx+eax*4+0x5047], edx;
	__asm        jne    _T1d4;

	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x5047], eax;
// LINE 288:
	__asm        jmp    _T1ee;
_T1d4:
	__asm        mov    eax, q;
	__asm        mov    ecx, p;
	__asm        mov    edx, forest;
	__asm        mov    ecx, [edx+ecx*4+0x944B];
	__asm        mov    edx, forest;
	__asm        mov    [edx+ecx*4+0x1043], eax;
// LINE 289:
_T1ee:
	__asm        mov    eax, p;
	__asm        mov    ecx, forest;
	__asm        mov    dword ptr [ecx+eax*4+0x944B], 0x1000;
// LINE 290:
	__asm        jmp    _T204;
_T204:
}

// FUNCTION: COPTER_D 0x004cfb73
static void StartModel(/*packed*/ struct tACompModel *model) {
	/*bp-0x4*/   long sym;
	/*bp-0x8*/   long i;
	/*bp-0xc*/   long ch;

// LINE 303:
	model->sym_cum[314] = 0x0;
// LINE 304:
	__asm        mov    sym, 0x13A;
	__asm        jmp    _T25;
_T22:
	__asm        dec    sym;
_T25:
	__asm        cmp    sym, 1;
	__asm        jl     _T90;
// LINE 305:
	__asm        mov    eax, sym;
	__asm        dec    eax;
	__asm        mov    ch, eax;
// LINE 306:
	model->low = sym;
// LINE 307:
	model->low = ch;
// LINE 308:
	model->low = 0x1;
// LINE 309:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        add    eax, [edx+ecx*4+0x9E4];
	__asm        mov    ecx, sym;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0xECC], eax;
// LINE 310:
	__asm        jmp    _T22;
// LINE 311:
_T90:
	model->sym_freq[0] = 0x0;
// LINE 312:
	model->position_cum[4096] = 0x0;
// LINE 313:
	__asm        mov    i, 0x1000;
	__asm        jmp    _Tb9;
_Tb6:
	__asm        dec    i;
_Tb9:
	__asm        cmp    i, 1;
	__asm        jl     _Tf5;
// LINE 314:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+eax*4+0x13BC];
	__asm        mov    ebx, i;
	__asm        add    ebx, 0xC8;
	__asm        mov    eax, 0x2710;
	__asm        cdq;
	__asm        idiv   ebx;
	__asm        add    ecx, eax;
	__asm        mov    eax, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+eax*4+0x13B8], ecx;
	__asm        jmp    _Tb6;
// LINE 317:
_Tf5:
	__asm        jmp    near ptr 0x004CFC6D;
}

// FUNCTION: COPTER_D 0x004cfc72
static short EncodeChar(long ch, /*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *dest) {
	/*bp-0x4*/   long sym;
	/*bp-0x8*/   unsigned long range;

// LINE 360:
	sym = model->low;
// LINE 361:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 362:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xECC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 363:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 365:
_T6e:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        ja     _Ta9;
// LINE 366:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Ta4;

	__asm        mov    ax, 2;
	__asm        jmp    _T16b;
// LINE 368:
_Ta4:
	__asm        jmp    _T138;
_Ta9:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     _Tf6;
// LINE 369:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Tde;

	__asm        mov    ax, 2;
	__asm        jmp    _T16b;
// LINE 370:
_Tde:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 371:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 372:
	__asm        jmp    _T138;
_Tf6:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     _T133;

	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     _T133;
// LINE 373:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 374:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 375:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 376:
	__asm        jmp    _T138;
_T133:
	__asm        jmp    _T153;
// LINE 377:
_T138:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 378:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 379:
	__asm        jmp    _T6e;
// LINE 380:
_T153:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, sym;
	__asm        push   eax;
	__asm        call   UpdateModel;
	__asm        add    esp, 8;
// LINE 382:
	__asm        xor    ax, ax;
	__asm        jmp    _T16b;
// LINE 383:
_T16b:
}

// FUNCTION: COPTER_D 0x004cfde2
static void UpdateModel(long sym, /*packed*/ struct tACompModel *model) {
	/*bp-0x4*/   long ch_sym;
	/*bp-0x8*/   long c;
	/*bp-0xc*/   long ch_i;
	/*bp-0x10*/  long i;

// LINE 323:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+0xED0], 0x7FFF;
	__asm        jb     _T8e;
// LINE 324:
	c = 0x0;
// LINE 325:
	__asm        mov    i, 0x13A;
	__asm        jmp    _T32;
_T2f:
	__asm        dec    i;
_T32:
	__asm        cmp    i, 0;
	__asm        jle    _T82;
// LINE 326:
	model->low = c;
// LINE 327:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x9E4];
	__asm        inc    eax;
	__asm        shr    eax, 1;
	__asm        mov    ecx, i;
	__asm        mov    edx, model;
	__asm        mov    [edx+ecx*4+0x9E4], eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x9E4];
	__asm        add    eax, c;
	__asm        mov    c, eax;
// LINE 328:
	__asm        jmp    _T2f;
// LINE 329:
_T82:
	model->sym_cum[0] = c;
// LINE 331:
_T8e:
	__asm        mov    eax, sym;
	__asm        mov    i, eax;
	__asm        jmp    _T9c;
_T99:
	__asm        dec    i;
_T9c:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        mov    edx, i;
	__asm        mov    ebx, model;
	__asm        mov    edx, [ebx+edx*4+0x9E4];
	__asm        cmp    [ecx+eax*4+0x9E0], edx;
	__asm        jne    _Tc1;

	__asm        jmp    _T99;
// LINE 332:
_Tc1:
	__asm        mov    eax, i;
	__asm        cmp    sym, eax;
	__asm        jle    _T127;
// LINE 333:
	ch_i = model->low;
// LINE 334:
	ch_sym = model->low;
// LINE 335:
	model->low = ch_sym;
// LINE 336:
	model->low = ch_i;
// LINE 337:
	model->low = sym;
// LINE 338:
	model->low = i;
// LINE 340:
_T127:
	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        inc    dword ptr [ecx+eax*4+0x9E4];
// LINE 341:
_T134:
	__asm        dec    i;
	__asm        js     _T14f;

	__asm        mov    eax, i;
	__asm        mov    ecx, model;
	__asm        inc    dword ptr [ecx+eax*4+0xED0];
	__asm        jmp    _T134;
// LINE 342:
_T14f:
	__asm        jmp    near ptr 0x004CFF36;
}

// FUNCTION: COPTER_D 0x004cff3b
static short Output(long bit, /*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *dest) {
// LINE 347:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, bit;
	__asm        push   eax;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T2a;

	__asm        mov    ax, 2;
	__asm        jmp    _T78;
// LINE 348:
_T2a:
	__asm        jmp    _T35;
_T2f:
	__asm        mov    eax, model;
	__asm        dec    dword ptr [eax+0xC];
_T35:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jle    _T70;
// LINE 349:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        cmp    bit, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T6b;

	__asm        mov    ax, 2;
	__asm        jmp    _T78;
// LINE 350:
_T6b:
	__asm        jmp    _T2f;
// LINE 352:
_T70:
	__asm        xor    ax, ax;
	__asm        jmp    _T78;
// LINE 353:
_T78:
}

// FUNCTION: COPTER_D 0x004cffb8
static short PutBit(long bit, /*packed*/ struct tCompressState *dest) {
	/*bp-0x4*/   unsigned char tempByte;

// LINE 127:
	__asm        cmp    bit, 0;
	__asm        je     _T1e;

	__asm        mov    eax, dest;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, dest;
	__asm        or     [ecx], eax;
// LINE 128:
_T1e:
	__asm        mov    eax, dest;
	__asm        shr    dword ptr [eax+4], 1;
	__asm        mov    eax, dest;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jne    _T7c;
// LINE 129:
	tempByte = reinterpret_cast<uint8_t>(dest->putBuffer);
// LINE 130:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, dest;
	__asm        mov    ecx, dest;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        cmp    eax, 1;
	__asm        je     _T63;
// LINE 134:
	__asm        mov    ax, 2;
	__asm        jmp    _T84;
// LINE 136:
_T63:
	dest->putBuffer = 0x0;
// LINE 137:
	dest->putMask = 0x80;
// LINE 138:
	__asm        mov    eax, dest;
	__asm        inc    dword ptr [eax+0x14];
// LINE 141:
_T7c:
	__asm        xor    ax, ax;
	__asm        jmp    _T84;
// LINE 142:
_T84:
}

// FUNCTION: COPTER_D 0x004d0041
static short EncodePosition(long position, /*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *dest) {
	/*bp-0x4*/   unsigned long range;

// LINE 389:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 390:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13BC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 391:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13C0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 393:
_T61:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        ja     _T9c;
// LINE 394:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T97;

	__asm        mov    ax, 2;
	__asm        jmp    _T14e;
// LINE 395:
_T97:
	__asm        jmp    _T12b;
_T9c:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     _Te9;
// LINE 396:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Td1;

	__asm        mov    ax, 2;
	__asm        jmp    _T14e;
// LINE 397:
_Td1:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 398:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 399:
	__asm        jmp    _T12b;
_Te9:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     _T126;

	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     _T126;
// LINE 400:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 401:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 402:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 403:
	__asm        jmp    _T12b;
_T126:
	__asm        jmp    _T146;
// LINE 404:
_T12b:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 405:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 406:
	__asm        jmp    _T61;
// LINE 408:
_T146:
	__asm        xor    ax, ax;
	__asm        jmp    _T14e;
// LINE 409:
_T14e:
}

// FUNCTION: COPTER_D 0x004d0194
static short EncodeEnd(/*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *dest) {
// LINE 413:
	__asm        mov    eax, model;
	__asm        inc    dword ptr [eax+0xC];
// LINE 414:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jae    _T46;
// LINE 415:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T41;

	__asm        mov    ax, 2;
	__asm        jmp    _T7d;
// LINE 416:
_T41:
	__asm        jmp    _T6c;
// LINE 417:
_T46:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        push   1;
	__asm        call   Output;
	__asm        add    esp, 0xC;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _T6c;

	__asm        mov    ax, 2;
	__asm        jmp    _T7d;
// LINE 419:
_T6c:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        call   FlushBitBuffer;
	__asm        add    esp, 4;
	__asm        jmp    _T7d;
// LINE 420:
_T7d:
}

// FUNCTION: COPTER_D 0x004d0216
static short FlushBitBuffer(/*packed*/ struct tCompressState *dest) {
	/*bp-0x4*/   long i;
	/*bp-0x8*/   short retVal;

// LINE 149:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        cmp    i, 7;
	__asm        jge    _T4e;
// LINE 150:
	__asm        mov    eax, dest;
	__asm        push   eax;
	__asm        push   0;
	__asm        call   PutBit;
	__asm        add    esp, 8;
	__asm        mov    retVal, ax;
// LINE 151:
	__asm        movsx  eax, retVal;
	__asm        test   eax, eax;
	__asm        je     _T49;
// LINE 155:
	__asm        mov    ax, retVal;
	__asm        jmp    _T56;
// LINE 157:
_T49:
	__asm        jmp    _T15;
// LINE 158:
_T4e:
	__asm        xor    ax, ax;
	__asm        jmp    _T56;
// LINE 159:
_T56:
}

// FUNCTION: COPTER_D 0x004d0271
short LZAExpand(/*packed*/ class cGZXBitstream *inStream, /*packed*/ class cGZXBitstream *outStream) {
	/*bp-0x4*/   /*packed*/ struct tACompModel *model;
	/*bp-0x8*/   /*packed*/ struct tCompressState *state;
	/*bp-0xc*/   short retVal;
	/*bp-0x10*/  /*packed*/ struct tLZSSBinaryForest *forest;

// LINE 737:
	__asm        push   0x53C0;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    model, eax;
// LINE 738:
	__asm        cmp    model, 0;
	__asm        jne    _T33;
// LINE 739:
	retVal = 0x3;
// LINE 740:
	__asm        jmp    _T16b;

	__asm        jmp    _T110;
// LINE 742:
_T33:
	__asm        push   0xD44F;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    forest, eax;
// LINE 743:
	__asm        cmp    forest, 0;
	__asm        jne    _T5d;
// LINE 744:
	retVal = 0x3;
// LINE 745:
	__asm        jmp    _T166;

	__asm        jmp    _T110;
// LINE 747:
_T5d:
	__asm        push   0x20;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    state, eax;
// LINE 748:
	__asm        cmp    state, 0;
	__asm        jne    _T84;
// LINE 749:
	retVal = 0x3;
// LINE 750:
	__asm        jmp    _T161;

	__asm        jmp    _T110;
// LINE 753:
_T84:
	state->infile = inStream;
// LINE 754:
	state->outfile = outStream;
// LINE 756:
	state->textsize = 0x0;
// LINE 757:
	state->codesize = 0x0;
// LINE 758:
	model->low = 0x0;
// LINE 759:
	model->high = 0x20000;
// LINE 760:
	model->value = 0x0;
// LINE 761:
	model->shifts = 0x0;
// LINE 762:
	state->putBuffer = 0x0;
// LINE 763:
	state->putMask = 0x80;
// LINE 764:
	state->getBuffer = 0x0;
// LINE 765:
	state->getMask = 0x0;
// LINE 767:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, forest;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   Decode;
	__asm        add    esp, 0xC;
	__asm        mov    retVal, ax;
// LINE 770:
ExpandDone:
_T110:
	__asm        mov    eax, model;
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 771:
	__asm        mov    eax, forest;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 772:
	__asm        mov    eax, state;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 774:
	__asm        mov    ax, retVal;
	__asm        jmp    _T170;
// LINE 775:
_T161:
	__asm        jmp    _T110;
_T166:
	__asm        jmp    _T110;
_T16b:
	__asm        jmp    _T110;
_T170:
}

// FUNCTION: COPTER_D 0x004d03e6
static short Decode(/*packed*/ struct tACompModel *model, /*packed*/ struct tLZSSBinaryForest *forest, /*packed*/ struct tCompressState *state) {
	/*bp-0x4*/   long r;
	/*bp-0x8*/   long c;
	/*bp-0xc*/   unsigned long count;
	/*bp-0x10*/  long i;
	/*bp-0x14*/  long j;
	/*bp-0x18*/  long k;
	/*bp-0x1c*/  unsigned char tempByte;

// LINE 597:
	__asm        push   4;
	__asm        mov    eax, state;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        cmp    eax, 4;
	__asm        jae    _T34;
// LINE 598:
	__asm        mov    ax, 1;
	__asm        jmp    _T1cd;
// LINE 600:
_T34:
	__asm        mov    eax, state;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T49;

	__asm        xor    ax, ax;
	__asm        jmp    _T1cd;
// LINE 601:
_T49:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartDecode;
	__asm        add    esp, 8;
// LINE 602:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   StartModel;
	__asm        add    esp, 4;
// LINE 603:
	__asm        mov    i, 0;
	__asm        jmp    _T74;
_T71:
	__asm        inc    i;
_T74:
	__asm        cmp    i, 0xFC4;
	__asm        jge    _T90;

	__asm        mov    eax, i;
	__asm        mov    ecx, forest;
	__asm        mov    byte ptr [eax+ecx], 0x20;
	__asm        jmp    _T71;
// LINE 604:
_T90:
	r = 0xfc4;
// LINE 605:
	count = 0x0;
_T9e:
	__asm        mov    eax, state;
	__asm        mov    ecx, count;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jbe    _T1c5;
// LINE 606:
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   DecodeChar;
	__asm        add    esp, 8;
	__asm        mov    c, eax;
// LINE 607:
	__asm        cmp    c, 0x100;
	__asm        jge    _T119;
// LINE 608:
	tempByte = reinterpret_cast<uint8_t>(c);
// LINE 609:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        jne    _Tfb;
// LINE 610:
	__asm        mov    ax, 2;
	__asm        jmp    _T1cd;
// LINE 612:
_Tfb:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
	__asm        inc    r;
// LINE 613:
	__asm        and    r, 0xFFF;
// LINE 614:
	__asm        inc    count;
// LINE 615:
	__asm        jmp    _T1c0;
// LINE 616:
_T119:
	__asm        mov    ebx, r;
	__asm        mov    eax, state;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        call   DecodePosition;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        dec    ebx;
	__asm        and    ebx, 0xFFF;
	__asm        mov    i, ebx;
// LINE 617:
	__asm        mov    eax, c;
	__asm        sub    eax, 0xFD;
	__asm        mov    j, eax;
// LINE 618:
	__asm        mov    k, 0;
	__asm        jmp    _T152;
_T14f:
	__asm        inc    k;
_T152:
	__asm        mov    eax, k;
	__asm        cmp    j, eax;
	__asm        jle    _T1c0;
// LINE 619:
	__asm        mov    eax, i;
	__asm        add    eax, k;
	__asm        and    eax, 0xFFF;
	__asm        mov    ecx, forest;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        mov    c, edx;
// LINE 620:
	tempByte = reinterpret_cast<uint8_t>(c);
// LINE 621:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, state;
	__asm        mov    ecx, state;
	__asm        mov    ecx, [ecx+0x1C];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x1C];
	__asm        call   dword ptr [edx+4];
	__asm        test   eax, eax;
	__asm        jne    _T1a2;
// LINE 622:
	__asm        mov    ax, 2;
	__asm        jmp    _T1cd;
// LINE 624:
_T1a2:
	__asm        mov    al, reinterpret_cast<uint8_t>(c);
	__asm        mov    ecx, r;
	__asm        mov    edx, forest;
	__asm        mov    [ecx+edx], al;
	__asm        inc    r;
// LINE 625:
	__asm        and    r, 0xFFF;
// LINE 626:
	__asm        inc    count;
// LINE 627:
	__asm        jmp    _T14f;
// LINE 629:
_T1c0:
	__asm        jmp    _T9e;
// LINE 631:
_T1c5:
	__asm        xor    ax, ax;
	__asm        jmp    _T1cd;
// LINE 632:
_T1cd:
}

// FUNCTION: COPTER_D 0x004d05b8
static void StartDecode(/*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *src) {
	/*bp-0x4*/   long i;

// LINE 458:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        cmp    i, 0x11;
	__asm        jge    _T42;
// LINE 459:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
	__asm        jmp    _T15;
// LINE 460:
_T42:
	__asm        jmp    near ptr 0x004D05FF;
}

// FUNCTION: COPTER_D 0x004d0604
static long GetBit(/*packed*/ struct tCompressState *source) {
	/*bp-0x4*/   unsigned char kludger;
	/*bp-0x8*/   unsigned char tempByte;

// LINE 173:
	kludger = 0x0;
// LINE 176:
	__asm        mov    eax, source;
	__asm        shr    dword ptr [eax+0xC], 1;
	__asm        mov    eax, source;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T79;
// LINE 177:
	__asm        push   1;
	__asm        lea    eax, tempByte;
	__asm        push   eax;
	__asm        mov    eax, source;
	__asm        mov    ecx, source;
	__asm        mov    ecx, [ecx+0x18];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+0x18];
	__asm        call   dword ptr [edx];
	__asm        cmp    eax, 1;
	__asm        je     _T48;
// LINE 178:
	tempByte = 0x0;
// LINE 179:
	kludger = 0x1;
// LINE 181:
_T48:
	__asm        xor    eax, eax;
	__asm        mov    al, kludger;
	__asm        test   eax, eax;
	__asm        jne    _T65;

	__asm        xor    eax, eax;
	__asm        mov    al, tempByte;
	__asm        mov    ecx, source;
	__asm        mov    [ecx+8], eax;
// LINE 182:
	__asm        jmp    _T6f;
_T65:
	source->getBuffer = 0xffffffff;
// LINE 183:
_T6f:
	source->getMask = 0x80;
// LINE 187:
_T79:
	__asm        mov    eax, source;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, source;
	__asm        test   [ecx+0xC], eax;
	__asm        je     _T95;

	__asm        mov    eax, 1;
	__asm        jmp    _T97;
_T95:
	__asm        xor    eax, eax;
_T97:
	__asm        jmp    near ptr 0x004D06A0;
// LINE 188:
}

// FUNCTION: COPTER_D 0x004d06a5
static long DecodeChar(/*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *src) {
	/*bp-0x4*/   long sym;
	/*bp-0x8*/   unsigned long range;
	/*bp-0xc*/   long ch;

// LINE 467:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 470:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        inc    eax;
	__asm        mov    ecx, model;
	__asm        imul   eax, [ecx+0xED0];
	__asm        dec    eax;
	__asm        sub    edx, edx;
	__asm        div    range;
	__asm        push   eax;
	__asm        call   BinarySearchSym;
	__asm        add    esp, 8;
	__asm        mov    sym, eax;
// LINE 471:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xECC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 472:
	__asm        mov    eax, sym;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0xED0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0xED0];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 474:
_T8d:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     _Tbe;
// LINE 475:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x10000;
// LINE 476:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 477:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 478:
	__asm        jmp    _T114;
_Tbe:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     _Tff;

	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     _Tff;
// LINE 479:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x8000;
// LINE 480:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 481:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 482:
	__asm        jmp    _T114;
_Tff:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        jbe    _T114;

	__asm        jmp    _T14a;
// LINE 484:
_T114:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 485:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 486:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
// LINE 487:
	__asm        jmp    _T8d;
// LINE 488:
_T14a:
	ch = model->low;
// LINE 489:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, sym;
	__asm        push   eax;
	__asm        call   UpdateModel;
	__asm        add    esp, 8;
// LINE 490:
	__asm        mov    eax, ch;
	__asm        jmp    near ptr 0x004D0817;
// LINE 491:
}

// FUNCTION: COPTER_D 0x004d081c
static long BinarySearchSym(unsigned long x, /*packed*/ struct tACompModel *model) {
	/*bp-0x4*/   long i;
	/*bp-0x8*/   long j;
	/*bp-0xc*/   long k;

// LINE 429:
	__asm        mov    i, 1;
	__asm        mov    j, 0x13A;
// LINE 430:
_T17:
	__asm        mov    eax, i;
	__asm        cmp    j, eax;
	__asm        jle    _T5f;
// LINE 431:
	__asm        mov    eax, j;
	__asm        add    eax, i;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    k, eax;
// LINE 432:
	__asm        mov    eax, k;
	__asm        mov    ecx, model;
	__asm        mov    edx, x;
	__asm        cmp    [ecx+eax*4+0xED0], edx;
	__asm        jbe    _T54;

	__asm        mov    eax, k;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 433:
	__asm        jmp    _T5a;
_T54:
	j = k;
// LINE 434:
_T5a:
	__asm        jmp    _T17;
// LINE 435:
_T5f:
	__asm        mov    eax, i;
	__asm        jmp    near ptr 0x004D0883;
// LINE 436:
}

// FUNCTION: COPTER_D 0x004d0888
static long DecodePosition(/*packed*/ struct tACompModel *model, /*packed*/ struct tCompressState *src) {
	/*bp-0x4*/   long position;
	/*bp-0x8*/   unsigned long range;

// LINE 498:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        mov    range, eax;
// LINE 501:
	__asm        mov    eax, model;
	__asm        push   eax;
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, model;
	__asm        sub    eax, [ecx];
	__asm        inc    eax;
	__asm        mov    ecx, model;
	__asm        imul   eax, [ecx+0x13BC];
	__asm        dec    eax;
	__asm        sub    edx, edx;
	__asm        div    range;
	__asm        push   eax;
	__asm        call   BinarySearchPos;
	__asm        add    esp, 8;
	__asm        mov    position, eax;
// LINE 502:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13BC];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, eax;
	__asm        mov    eax, model;
	__asm        mov    [eax+4], ecx;
// LINE 503:
	__asm        mov    eax, position;
	__asm        mov    ecx, model;
	__asm        mov    eax, [ecx+eax*4+0x13C0];
	__asm        imul   eax, range;
	__asm        mov    ecx, model;
	__asm        sub    edx, edx;
	__asm        div    dword ptr [ecx+0x13BC];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 505:
_T8d:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x10000;
	__asm        jb     _Tbe;
// LINE 506:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x10000;
// LINE 507:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x10000;
// LINE 508:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x10000;
// LINE 509:
	__asm        jmp    _T114;
_Tbe:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax], 0x8000;
	__asm        jb     _Tff;

	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x18000;
	__asm        ja     _Tff;
// LINE 510:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+8], 0x8000;
// LINE 511:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax], 0x8000;
// LINE 512:
	__asm        mov    eax, model;
	__asm        sub    dword ptr [eax+4], 0x8000;
// LINE 513:
	__asm        jmp    _T114;
_Tff:
	__asm        mov    eax, model;
	__asm        cmp    dword ptr [eax+4], 0x10000;
	__asm        jbe    _T114;

	__asm        jmp    _T14a;
// LINE 515:
_T114:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, model;
	__asm        add    [ecx], eax;
// LINE 516:
	__asm        mov    eax, model;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, model;
	__asm        add    [ecx+4], eax;
// LINE 517:
	__asm        mov    eax, src;
	__asm        push   eax;
	__asm        call   GetBit;
	__asm        add    esp, 4;
	__asm        mov    ecx, model;
	__asm        mov    ecx, [ecx+8];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, model;
	__asm        mov    [ecx+8], eax;
// LINE 518:
	__asm        jmp    _T8d;
// LINE 519:
_T14a:
	__asm        mov    eax, position;
	__asm        jmp    near ptr 0x004D09DA;
// LINE 520:
}

// FUNCTION: COPTER_D 0x004d09df
static long BinarySearchPos(unsigned long x, /*packed*/ struct tACompModel *model) {
	/*bp-0x4*/   long i;
	/*bp-0x8*/   long j;
	/*bp-0xc*/   long k;

// LINE 445:
	__asm        mov    i, 1;
	__asm        mov    j, 0x1000;
// LINE 446:
_T17:
	__asm        mov    eax, i;
	__asm        cmp    j, eax;
	__asm        jle    _T5f;
// LINE 447:
	__asm        mov    eax, j;
	__asm        add    eax, i;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    k, eax;
// LINE 448:
	__asm        mov    eax, k;
	__asm        mov    ecx, model;
	__asm        mov    edx, x;
	__asm        cmp    [ecx+eax*4+0x13BC], edx;
	__asm        jbe    _T54;

	__asm        mov    eax, k;
	__asm        inc    eax;
	__asm        mov    i, eax;
// LINE 449:
	__asm        jmp    _T5a;
_T54:
	j = k;
// LINE 450:
_T5a:
	__asm        jmp    _T17;
// LINE 451:
_T5f:
	__asm        mov    eax, i;
	__asm        dec    eax;
	__asm        jmp    near ptr 0x004D0A47;
// LINE 452:
}

