// Module: scxload.obj
// Source: C:\Copter\Source\Common\scxload.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class cLZAPFileBitStream (forward reference);
class cLZAPFileBitStream : public cGZXBitstream
{
public:
	void cLZAPFileBitStream();
	void ~cLZAPFileBitStream();
	// vtable: 28
	intro int32_t OpenRead(char *);
	// vtable: 32
	intro void Close();
	virtual unsigned long Read(unsigned char *, unsigned long);
	virtual unsigned long Write(unsigned char *, unsigned long);
	virtual void Rewind();
	virtual void RewindToMark();
	virtual void Mark();
	virtual long Size();
	virtual void FreeAll();
private:
	class PFile* m_file;
	unsigned long m_mark;
};

// Type: void;

// Type: char *;

// Type: int32_t;

// Type: unsigned char *;

// Type: unsigned long;

// Type: long;

// Type: class cGZXBitstream (forward reference);
class cGZXBitstream{
public:
	// vtable: 0
	intro unsigned long Read(unsigned char *, unsigned long);
	// vtable: 4
	intro unsigned long Write(unsigned char *, unsigned long);
	// vtable: 8
	intro void Rewind();
	// vtable: 12
	intro void RewindToMark();
	// vtable: 16
	intro void Mark();
	// vtable: 20
	intro long Size();
	// vtable: 24
	intro void FreeAll();
};

// Type: struct SCXNeighborData (forward reference);

// Type: long[11];

// Type: long[256];

// Type: class cLZAPFileBitStream;
class cLZAPFileBitStream : public cGZXBitstream
{
public:
	void cLZAPFileBitStream();
	void ~cLZAPFileBitStream();
	// vtable: 28
	intro int32_t OpenRead(char *);
	// vtable: 32
	intro void Close();
	virtual unsigned long Read(unsigned char *, unsigned long);
	virtual unsigned long Write(unsigned char *, unsigned long);
	virtual void Rewind();
	virtual void RewindToMark();
	virtual void Mark();
	virtual long Size();
	virtual void FreeAll();
private:
	class PFile* m_file;
	unsigned long m_mark;
};

// Type: struct ReadSCXFile::__unnamed;
struct ReadSCXFile::__unnamed{
	unsigned char type;
	unsigned char owner;
	unsigned char stat0;
	short stat1;
	short stat2;
	short stat3;
};

// Type: long[50];

// Type: class cGZXParamBitstream<t_alloc,t_free>;
class cGZXParamBitstream<t_alloc,t_free> : public cGZXBitstream
{
protected:
	unsigned long curPos;
	unsigned long markPos;
	short nodeNo;
	short markNode;
	short maxNode;
	unsigned long maxPos;
	using tNodeList = class vector<tGZXBitstreamNode>;
protected:
	class vector<tGZXBitstreamNode> nodeList;
	struct t_alloc m_rawAllocate;
	struct t_free m_rawFree;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator{
	public:
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>*, short, unsigned long);
		void stream_iterator();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator=(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		int32_t operator==(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		unsigned char& operator*();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator++();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator operator++(int32_t);
	private:
		class cGZXParamBitstream<t_alloc,t_free>* m_stream;
		class CPropertyType<unsigned long> m_pos;
		class CPropertyType<short> m_node;
	};
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator{
	public:
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>*, short, unsigned long);
		void stream_iterator();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator=(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		int32_t operator==(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		unsigned char& operator*();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator++();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator operator++(int32_t);
	private:
		class cGZXParamBitstream<t_alloc,t_free>* m_stream;
		class CPropertyType<unsigned long> m_pos;
		class CPropertyType<short> m_node;
	};
public:
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator starting_iterator;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator ending_iterator;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& begin();
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& end();
	void cGZXParamBitstream<t_alloc,t_free>(struct tGZXBitstreamNode*);
	void cGZXParamBitstream<t_alloc,t_free>(uint32_t);
	void ~cGZXParamBitstream<t_alloc,t_free>();
	virtual void FreeAll();
	virtual unsigned long Read(unsigned char *, unsigned long);
	virtual unsigned long Write(unsigned char *, unsigned long);
	virtual void Rewind();
	virtual void RewindToMark();
	virtual void Mark();
	virtual long Size();
	class CPropertyType<long> PageSize;
};

// Type: struct tSCXSaveFileHdr;
struct tSCXSaveFileHdr{
	char type[4];
	char product[32];
	long version;
	long time;
};

// Type: class vector<tGZXBitstreamNode> (forward reference);
class vector<tGZXBitstreamNode>{
	using vector_allocator = class allocator<tGZXBitstreamNode>;
	using value_type = struct tGZXBitstreamNode;
	using pointer = struct tGZXBitstreamNode*;
	using iterator = struct tGZXBitstreamNode*;
	using const_iterator = const struct tGZXBitstreamNode*;
	using reference = struct tGZXBitstreamNode&;
	using const_reference = const struct tGZXBitstreamNode&;
	using size_type = uint32_t;
	using difference_type = int32_t;
	using const_reverse_iterator = class reverse_iterator<tGZXBitstreamNode const *,tGZXBitstreamNode,tGZXBitstreamNode const &,int>;
	using reverse_iterator = class reverse_iterator<tGZXBitstreamNode *,tGZXBitstreamNode,tGZXBitstreamNode &,int>;
protected:
	static class allocator<tGZXBitstreamNode> static_allocator;
	struct tGZXBitstreamNode* start;
	struct tGZXBitstreamNode* finish;
	struct tGZXBitstreamNode* end_of_storage;
	void insert_aux(struct tGZXBitstreamNode*, const struct tGZXBitstreamNode&);
public:
	const struct tGZXBitstreamNode* begin();
	struct tGZXBitstreamNode* begin();
	const struct tGZXBitstreamNode* end();
	struct tGZXBitstreamNode* end();
	class reverse_iterator<tGZXBitstreamNode const *,tGZXBitstreamNode,tGZXBitstreamNode const &,int> rbegin();
	class reverse_iterator<tGZXBitstreamNode *,tGZXBitstreamNode,tGZXBitstreamNode &,int> rbegin();
	class reverse_iterator<tGZXBitstreamNode const *,tGZXBitstreamNode,tGZXBitstreamNode const &,int> rend();
	class reverse_iterator<tGZXBitstreamNode *,tGZXBitstreamNode,tGZXBitstreamNode &,int> rend();
	uint32_t size();
	uint32_t max_size();
	uint32_t capacity();
	int32_t empty();
	const struct tGZXBitstreamNode& operator[](uint32_t);
	struct tGZXBitstreamNode& operator[](uint32_t);
	void vector<tGZXBitstreamNode>(const struct tGZXBitstreamNode*, const struct tGZXBitstreamNode*);
	void vector<tGZXBitstreamNode>(const class vector<tGZXBitstreamNode>&);
	void vector<tGZXBitstreamNode>(uint32_t, const struct tGZXBitstreamNode&);
	void vector<tGZXBitstreamNode>();
	void ~vector<tGZXBitstreamNode>();
	class vector<tGZXBitstreamNode>& operator=(const class vector<tGZXBitstreamNode>&);
	void reserve(uint32_t);
	const struct tGZXBitstreamNode& front();
	struct tGZXBitstreamNode& front();
	const struct tGZXBitstreamNode& back();
	struct tGZXBitstreamNode& back();
	void push_back(const struct tGZXBitstreamNode&);
	void swap(class vector<tGZXBitstreamNode>&);
	void insert(struct tGZXBitstreamNode*, uint32_t, const struct tGZXBitstreamNode&);
	void insert(struct tGZXBitstreamNode*, const struct tGZXBitstreamNode*, const struct tGZXBitstreamNode*);
	struct tGZXBitstreamNode* insert(struct tGZXBitstreamNode*, const struct tGZXBitstreamNode&);
	void pop_back();
	void erase(struct tGZXBitstreamNode*, struct tGZXBitstreamNode*);
	void erase(struct tGZXBitstreamNode*);
};

// Type: class cGZXParamBitstream<t_alloc,t_free> (forward reference);
class cGZXParamBitstream<t_alloc,t_free> : public cGZXBitstream
{
protected:
	unsigned long curPos;
	unsigned long markPos;
	short nodeNo;
	short markNode;
	short maxNode;
	unsigned long maxPos;
	using tNodeList = class vector<tGZXBitstreamNode>;
protected:
	class vector<tGZXBitstreamNode> nodeList;
	struct t_alloc m_rawAllocate;
	struct t_free m_rawFree;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator{
	public:
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>*, short, unsigned long);
		void stream_iterator();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator=(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		int32_t operator==(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		unsigned char& operator*();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator++();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator operator++(int32_t);
	private:
		class cGZXParamBitstream<t_alloc,t_free>* m_stream;
		class CPropertyType<unsigned long> m_pos;
		class CPropertyType<short> m_node;
	};
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator{
	public:
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		void stream_iterator(class cGZXParamBitstream<t_alloc,t_free>*, short, unsigned long);
		void stream_iterator();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator=(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		int32_t operator==(const class cGZXParamBitstream<t_alloc,t_free>::stream_iterator&);
		unsigned char& operator*();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& operator++();
		class cGZXParamBitstream<t_alloc,t_free>::stream_iterator operator++(int32_t);
	private:
		class cGZXParamBitstream<t_alloc,t_free>* m_stream;
		class CPropertyType<unsigned long> m_pos;
		class CPropertyType<short> m_node;
	};
public:
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator starting_iterator;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator ending_iterator;
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& begin();
	class cGZXParamBitstream<t_alloc,t_free>::stream_iterator& end();
	void cGZXParamBitstream<t_alloc,t_free>(struct tGZXBitstreamNode*);
	void cGZXParamBitstream<t_alloc,t_free>(uint32_t);
	void ~cGZXParamBitstream<t_alloc,t_free>();
	virtual void FreeAll();
	virtual unsigned long Read(unsigned char *, unsigned long);
	virtual unsigned long Write(unsigned char *, unsigned long);
	virtual void Rewind();
	virtual void RewindToMark();
	virtual void Mark();
	virtual long Size();
	class CPropertyType<long> PageSize;
};

// Type: uint32_t;

// Type: struct tGZXBitstreamNode (forward reference);
struct tGZXBitstreamNode{
	unsigned char * data;
	unsigned long size;
	void tGZXBitstreamNode(unsigned char *, unsigned long);
};

// Type: class cGZXBitstream;
class cGZXBitstream{
public:
	// vtable: 0
	intro unsigned long Read(unsigned char *, unsigned long);
	// vtable: 4
	intro unsigned long Write(unsigned char *, unsigned long);
	// vtable: 8
	intro void Rewind();
	// vtable: 12
	intro void RewindToMark();
	// vtable: 16
	intro void Mark();
	// vtable: 20
	intro long Size();
	// vtable: 24
	intro void FreeAll();
};



// Contribution: 1:000ca880-000cc535 Module: 89, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x004cb880
void cLZAPFileBitStream::cLZAPFileBitStream() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x5923F8;
	__asm        jmp    near ptr 0x004CB89A;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x592418;
// LINE 86:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 87:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 88:
	__asm        jmp    near ptr 0x004CB8BC;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004cb8c4
void cLZAPFileBitStream::~cLZAPFileBitStream() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x592418;
// LINE 91:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T3f;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T3f;
// LINE 92:
_T3f:
	__asm        jmp    near ptr 0x004CB908;
}

// FUNCTION: COPTER_D 0x004cb90d
int32_t cLZAPFileBitStream::OpenRead(char * filePath) {
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T36;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T36;
// LINE 97:
_T36:
	__asm        push   0x110;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T97;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x10C], 0;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax], 0x590468;
	__asm        mov    dword ptr ds:[0x5C0920], 0x8000;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    byte ptr [eax+4], 0;
	__asm        jmp    near ptr 0x004CB996;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Ta1;
_T97:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 98:
_Ta1:
	__asm        push   0;
	__asm        push   0x180;
	__asm        push   0;
	__asm        mov    eax, filePath;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+4];
	__asm        call   PFile::Open;
	__asm        jmp    near ptr 0x004CB9CB;
// LINE 99:
}

// FUNCTION: COPTER_D 0x004cb9d2
void cLZAPFileBitStream::Close() {
// LINE 103:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T36;

	__asm        push   1;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T36;
// LINE 104:
_T36:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 105:
	__asm        jmp    near ptr 0x004CBA17;
}

// FUNCTION: COPTER_D 0x004cba1c
unsigned long cLZAPFileBitStream::Read(unsigned char * buffer, unsigned long nBytes) {
// LINE 109:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T72;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    _T31;

	__asm        jmp    _T36;
_T31:
	__asm        jmp    _T72;
_T36:
	__asm        jmp    _T45;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T72;
// LINE 110:
_T45:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004CBA6F;

	__asm        mov    eax, nBytes;
	__asm        push   eax;
	__asm        mov    eax, buffer;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _read;
	__asm        add    esp, 0xC;
	__asm        jmp    _T79;
// LINE 111:
_T72:
	__asm        xor    eax, eax;
	__asm        jmp    _T79;
// LINE 112:
_T79:
}

// FUNCTION: COPTER_D 0x004cba9c
unsigned long cLZAPFileBitStream::Write(unsigned char * buffer, unsigned long nBytes) {
// LINE 116:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T72;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0x108], 0xFFFFFFFF;
	__asm        jle    _T31;

	__asm        jmp    _T36;
_T31:
	__asm        jmp    _T72;
_T36:
	__asm        jmp    _T45;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T72;
// LINE 117:
_T45:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004CBAEF;

	__asm        mov    eax, nBytes;
	__asm        push   eax;
	__asm        mov    eax, buffer;
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _write;
	__asm        add    esp, 0xC;
	__asm        jmp    _T79;
// LINE 118:
_T72:
	__asm        xor    eax, eax;
	__asm        jmp    _T79;
// LINE 119:
_T79:
}

// FUNCTION: COPTER_D 0x004cbb1c
void cLZAPFileBitStream::Rewind() {
// LINE 123:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T3d;
// LINE 124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        push   0;
	__asm        push   0;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3d;
// LINE 125:
_T3d:
	__asm        jmp    near ptr 0x004CBB5E;
}

// FUNCTION: COPTER_D 0x004cbb63
void cLZAPFileBitStream::RewindToMark() {
// LINE 129:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T48;
// LINE 130:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        push   0;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _lseek;
	__asm        add    esp, 0xC;
	__asm        jmp    _T48;
// LINE 131:
_T48:
	__asm        jmp    near ptr 0x004CBBB0;
}

// FUNCTION: COPTER_D 0x004cbbb5
void cLZAPFileBitStream::Mark() {
// LINE 134:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T44;
// LINE 135:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    near ptr 0x004CBBDC;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax+0x108];
	__asm        push   eax;
	__asm        call   _tell;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 136:
	__asm        jmp    _T4e;
// LINE 137:
_T44:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 138:
_T4e:
	__asm        jmp    near ptr 0x004CBC08;
}

// FUNCTION: COPTER_D 0x004cbc0d
long cLZAPFileBitStream::Size() {
// LINE 141:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T29;
// LINE 142:
	__asm        mov    eax, this;
	__asm        mov    ecx, [eax+4];
	__asm        call   PFile::Length;
	__asm        jmp    _T30;
// LINE 143:
_T29:
	__asm        xor    eax, eax;
	__asm        jmp    _T30;
// LINE 144:
_T30:
}

// FUNCTION: COPTER_D 0x004cbc42
void cLZAPFileBitStream::FreeAll() {

	__asm        jmp    near ptr 0x004CBC53;
}

// FUNCTION: COPTER_D 0x004cbc58
void SCXReadBudget(class cGZXBitstream* AStream, unsigned char * data) {
// LINE 170:
	__asm        push   0x71A;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 172:
	__asm        jmp    near ptr 0x004CBC76;
}

// FUNCTION: COPTER_D 0x004cbc7b
void SCXReadGraphData(class cGZXBitstream* AStream, unsigned char * data) {
// LINE 185:
	__asm        push   0xD40;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 186:
	__asm        jmp    near ptr 0x004CBC99;
}

// FUNCTION: COPTER_D 0x004cbc9e
void SCXReadPlayer(class cGZXBitstream* AStream, unsigned char * data) {
// LINE 197:
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        push   eax;
	__asm        call   SCXReadBudget;
	__asm        add    esp, 8;
// LINE 198:
	__asm        push   0x108;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 199:
	__asm        push   0x20;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 200:
	__asm        push   0x44;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 201:
	__asm        push   4;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 202:
	__asm        push   0xC8;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 203:
	__asm        push   0x10;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 204:
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        push   eax;
	__asm        call   SCXReadGraphData;
	__asm        add    esp, 8;
// LINE 205:
	__asm        jmp    near ptr 0x004CBD33;
}

// FUNCTION: COPTER_D 0x004cbd38
void SCXReadNeighbors(class cGZXBitstream* AStream, unsigned char * data) {
	long num;
	long loop;
	struct SCXNeighborData* pData;

// LINE 225:
	__asm        mov    eax, data;
	__asm        mov    pData, eax;
// LINE 227:
	__asm        push   4;
	__asm        lea    eax, num;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 230:
	__asm        mov    loop, 0;
	__asm        jmp    _T2e;
_T2b:
	__asm        inc    loop;
_T2e:
	__asm        mov    eax, num;
	__asm        cmp    loop, eax;
	__asm        jge    _T5c;
// LINE 231:
	__asm        push   0x20;
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        add    eax, pData;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
	__asm        jmp    _T2b;
// LINE 232:
_T5c:
	__asm        mov    loop, 0;
	__asm        jmp    _T6b;
_T68:
	__asm        inc    loop;
_T6b:
	__asm        mov    eax, num;
	__asm        cmp    loop, eax;
	__asm        jge    _T9c;
// LINE 233:
	__asm        push   2;
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        add    eax, pData;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
	__asm        jmp    _T68;
// LINE 234:
_T9c:
	__asm        mov    loop, 0;
	__asm        jmp    _Tab;
_Ta8:
	__asm        inc    loop;
_Tab:
	__asm        mov    eax, num;
	__asm        cmp    loop, eax;
	__asm        jge    _Tdc;
// LINE 235:
	__asm        push   4;
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        add    eax, pData;
	__asm        add    eax, 0x22;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
	__asm        jmp    _Ta8;
// LINE 236:
_Tdc:
	__asm        mov    loop, 0;
	__asm        jmp    _Teb;
_Te8:
	__asm        inc    loop;
_Teb:
	__asm        mov    eax, num;
	__asm        cmp    loop, eax;
	__asm        jge    _T11c;
// LINE 237:
	__asm        push   4;
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        add    eax, pData;
	__asm        add    eax, 0x26;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
	__asm        jmp    _Te8;
// LINE 238:
_T11c:
	__asm        mov    loop, 0;
	__asm        jmp    _T12b;
_T128:
	__asm        inc    loop;
_T12b:
	__asm        mov    eax, num;
	__asm        cmp    loop, eax;
	__asm        jge    _T15c;
// LINE 239:
	__asm        push   4;
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        add    eax, pData;
	__asm        add    eax, 0x2A;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
	__asm        jmp    _T128;
// LINE 242:
_T15c:
	__asm        mov    loop, 0;
	__asm        jmp    _T16b;
_T168:
	__asm        inc    loop;
_T16b:
	__asm        cmp    loop, 4;
	__asm        jge    _T286;
// LINE 244:
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pData;
	__asm        mov    ax, [eax+ecx+0x20];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A578];
	__asm        mov    [edx+ecx*2], ax;
// LINE 245:
	__asm        mov    eax, loop;
	__asm        mov    ecx, ds:[0x63A578];
	__asm        movsx  eax, word ptr [ecx+eax*2];
	__asm        test   eax, eax;
	__asm        jne    _T1d8;
// LINE 246:
	__asm        push   0x59C168;
	__asm        mov    eax, loop;
	__asm        shl    eax, 5;
	__asm        add    eax, 0x639250;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 247:
	__asm        mov    eax, loop;
	__asm        shl    eax, 5;
	__asm        mov    byte ptr [eax+0x639250], 5;
// LINE 249:
	__asm        jmp    _T221;
// LINE 250:
_T1d8:
	__asm        mov    eax, loop;
	__asm        mov    ecx, ds:[0x63A578];
	__asm        mov    ax, [ecx+eax*2];
	__asm        push   eax;
	__asm        push   0x3E8;
	__asm        mov    eax, loop;
	__asm        shl    eax, 5;
	__asm        add    eax, 0x639250;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   GetStringResource;
	__asm        add    esp, 0xC;
// LINE 251:
	__asm        mov    eax, loop;
	__asm        shl    eax, 5;
	__asm        add    eax, 0x639250;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   strlen;
	__asm        add    esp, 4;
	__asm        mov    ecx, loop;
	__asm        shl    ecx, 5;
	__asm        mov    [ecx+0x639250], al;
// LINE 254:
_T221:
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pData;
	__asm        mov    eax, [eax+ecx+0x26];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x639710];
	__asm        mov    [edx+ecx*4], eax;
// LINE 255:
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pData;
	__asm        mov    eax, [eax+ecx+0x22];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A264];
	__asm        mov    [edx+ecx*4], eax;
// LINE 256:
	__asm        mov    eax, loop;
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, ecx;
	__asm        mov    ecx, pData;
	__asm        mov    eax, [eax+ecx+0x2A];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63984C];
	__asm        mov    [edx+ecx*4], eax;
// LINE 257:
	__asm        jmp    _T168;
// LINE 258:
_T286:
	__asm        jmp    near ptr 0x004CBFC3;
}

// FUNCTION: COPTER_D 0x004cbfc8
void SCXReadContracts(class cGZXBitstream* AStream, unsigned char * data) {
	long num;

// LINE 282:
	__asm        push   4;
	__asm        lea    eax, num;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 283:
	__asm        mov    eax, num;
	__asm        shl    eax, 2;
	__asm        lea    eax, [eax+eax*4];
	__asm        push   eax;
	__asm        mov    eax, data;
	__asm        push   eax;
	__asm        mov    eax, AStream;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, AStream;
	__asm        call   dword ptr [eax];
// LINE 284:
	__asm        jmp    near ptr 0x004CBFFE;
}

// FUNCTION: COPTER_D 0x004cc003
int32_t ReadSCXFile(char * filePath) {
	long scxInd[11];
	long scxTileCount[256];
	class cLZAPFileBitStream fileStream;
	struct ReadSCXFile::__unnamed SCXMicroRecord;
	long tempLong;
	long longBonds[50];
	long loop;
	class cGZXParamBitstream<t_alloc,t_free> memstrm;
	struct tSCXSaveFileHdr header;

// LINE 296:
	__asm        call   S2CityFree;
// LINE 297:
	__asm        call   S2CityAlloc;
// LINE 299:
	__asm        push   0xFFFF;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ds:[0x606A58], eax;
// LINE 301:
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::cLZAPFileBitStream;
// LINE 302:
	__asm        mov    eax, filePath;
	__asm        push   eax;
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::OpenRead;
	__asm        test   eax, eax;
	__asm        jne    _T6a;
// LINE 303:
	__asm        mov    dword ptr [ebp-0x580], 0;
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::~cLZAPFileBitStream;
	__asm        mov    eax, [ebp-0x580];
	__asm        jmp    _T152e;
// LINE 306:
_T6a:
	__asm        push   0x2C;
	__asm        lea    eax, header.type[0];
	__asm        push   eax;
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::Read;
// LINE 308:
	__asm        push   0xFFFF;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::cGZXParamBitstream<t_alloc,t_free>;
// LINE 309:
	__asm        lea    eax, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        push   eax;
	__asm        lea    eax, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        push   eax;
	__asm        call   LZAExpand;
	__asm        add    esp, 8;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     _Te2;
// LINE 310:
	__asm        mov    dword ptr [ebp-0x584], 0;
	__asm        mov    memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>, 0x592440;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::FreeAll;
	__asm        jmp    near ptr 0x004CC0C7;

	__asm        lea    ecx, memstrm.nodeList.start;
	__asm        call   vector<tGZXBitstreamNode>::~vector<tGZXBitstreamNode>;
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::~cLZAPFileBitStream;
	__asm        mov    eax, [ebp-0x584];
	__asm        jmp    _T152e;
// LINE 314:
_Te2:
	__asm        mov    memstrm.curPos, 0;
	__asm        mov    memstrm.nodeNo, 0;
	__asm        jmp    near ptr 0x004CC0F7;
// LINE 317:
	__asm        mov    dword ptr [ebp-0x594], 0;
_Tfe:
	__asm        cmp    dword ptr [ebp-0x594], 4;
	__asm        jae    _T1a9;

	__asm        jmp    near ptr 0x004CC113;

	__asm        jmp    near ptr 0x004CC118;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T12b;

	__asm        jmp    _T1ae;
_T12b:
	__asm        jmp    near ptr 0x004CC133;

	__asm        jmp    near ptr 0x004CC138;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T174;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC155;

	__asm        jmp    near ptr 0x004CC15A;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T16d;

	__asm        jmp    _T1ae;
_T16d:
	__asm        mov    memstrm.curPos, 0;
_T174:
	__asm        jmp    near ptr 0x004CC17C;

	__asm        jmp    near ptr 0x004CC181;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x594];
	__asm        mov    [ebp+ecx-0x138], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x594];
	__asm        jmp    _Tfe;
_T1a9:
	__asm        jmp    _T1ae;
// LINE 318:
_T1ae:
	__asm        mov    loop, 0;
	__asm        jmp    _T1bd;
_T1ba:
	__asm        inc    loop;
_T1bd:
	__asm        mov    eax, tempLong;
	__asm        cmp    loop, eax;
	__asm        jge    _T1e3;
// LINE 319:
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        lea    eax, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        push   eax;
	__asm        call   SCXReadPlayer;
	__asm        add    esp, 8;
	__asm        jmp    _T1ba;
// LINE 322:
_T1e3:
	__asm        mov    eax, ds:[0x639830];
	__asm        push   eax;
	__asm        lea    eax, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        push   eax;
	__asm        call   SCXReadBudget;
	__asm        add    esp, 8;
// LINE 325:
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        lea    eax, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        push   eax;
	__asm        call   SCXReadNeighbors;
	__asm        add    esp, 8;
// LINE 328:
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        lea    eax, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        push   eax;
	__asm        call   SCXReadContracts;
	__asm        add    esp, 8;
	__asm        mov    eax, ds:[0x63A570];
	__asm        mov    [ebp-0x59C], eax;
// LINE 331:
	__asm        mov    dword ptr [ebp-0x598], 0;
_T22e:
	__asm        cmp    dword ptr [ebp-0x598], 0x20;
	__asm        jae    _T2db;

	__asm        jmp    near ptr 0x004CC243;

	__asm        jmp    near ptr 0x004CC248;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T25b;

	__asm        jmp    _T2e0;
_T25b:
	__asm        jmp    near ptr 0x004CC263;

	__asm        jmp    near ptr 0x004CC268;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T2a4;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC285;

	__asm        jmp    near ptr 0x004CC28A;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T29d;

	__asm        jmp    _T2e0;
_T29d:
	__asm        mov    memstrm.curPos, 0;
_T2a4:
	__asm        jmp    near ptr 0x004CC2AC;

	__asm        jmp    near ptr 0x004CC2B1;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x598];
	__asm        mov    edx, [ebp-0x59C];
	__asm        mov    [ecx+edx], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x598];
	__asm        jmp    _T22e;
_T2db:
	__asm        jmp    _T2e0;
// LINE 334:
_T2e0:
	__asm        mov    dword ptr [ebp-0x5A0], 0;
_T2ea:
	__asm        cmp    dword ptr [ebp-0x5A0], 4;
	__asm        jae    _T395;

	__asm        jmp    near ptr 0x004CC2FF;

	__asm        jmp    near ptr 0x004CC304;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T317;

	__asm        jmp    _T39a;
_T317:
	__asm        jmp    near ptr 0x004CC31F;

	__asm        jmp    near ptr 0x004CC324;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T360;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC341;

	__asm        jmp    near ptr 0x004CC346;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T359;

	__asm        jmp    _T39a;
_T359:
	__asm        mov    memstrm.curPos, 0;
_T360:
	__asm        jmp    near ptr 0x004CC368;

	__asm        jmp    near ptr 0x004CC36D;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5A0];
	__asm        mov    [ebp+ecx-0x138], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5A0];
	__asm        jmp    _T2ea;
_T395:
	__asm        jmp    _T39a;
// LINE 337:
_T39a:
	__asm        mov    dword ptr [ebp-0x5A4], 0;
_T3a4:
	__asm        cmp    dword ptr [ebp-0x5A4], 0x10;
	__asm        jae    _T44e;

	__asm        jmp    near ptr 0x004CC3B9;

	__asm        jmp    near ptr 0x004CC3BE;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T3d1;

	__asm        jmp    _T453;
_T3d1:
	__asm        jmp    near ptr 0x004CC3D9;

	__asm        jmp    near ptr 0x004CC3DE;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T41a;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC3FB;

	__asm        jmp    near ptr 0x004CC400;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T413;

	__asm        jmp    _T453;
_T413:
	__asm        mov    memstrm.curPos, 0;
_T41a:
	__asm        jmp    near ptr 0x004CC422;

	__asm        jmp    near ptr 0x004CC427;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5A4];
	__asm        mov    [ecx+0x639A90], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5A4];
	__asm        jmp    _T3a4;
_T44e:
	__asm        jmp    _T453;
// LINE 340:
_T453:
	__asm        mov    dword ptr [ebp-0x5A8], 0;
_T45d:
	__asm        cmp    dword ptr [ebp-0x5A8], 0x22;
	__asm        jae    _T507;

	__asm        jmp    near ptr 0x004CC472;

	__asm        jmp    near ptr 0x004CC477;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T48a;

	__asm        jmp    _T50c;
_T48a:
	__asm        jmp    near ptr 0x004CC492;

	__asm        jmp    near ptr 0x004CC497;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T4d3;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC4B4;

	__asm        jmp    near ptr 0x004CC4B9;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T4cc;

	__asm        jmp    _T50c;
_T4cc:
	__asm        mov    memstrm.curPos, 0;
_T4d3:
	__asm        jmp    near ptr 0x004CC4DB;

	__asm        jmp    near ptr 0x004CC4E0;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5A8];
	__asm        mov    [ecx+0x63A580], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5A8];
	__asm        jmp    _T45d;
_T507:
	__asm        jmp    _T50c;
// LINE 343:
_T50c:
	__asm        mov    dword ptr [ebp-0x5AC], 0;
_T516:
	__asm        cmp    dword ptr [ebp-0x5AC], 4;
	__asm        jae    _T5c0;

	__asm        jmp    near ptr 0x004CC52B;

	__asm        jmp    near ptr 0x004CC530;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T543;

	__asm        jmp    _T5c5;
_T543:
	__asm        jmp    near ptr 0x004CC54B;

	__asm        jmp    near ptr 0x004CC550;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T58c;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC56D;

	__asm        jmp    near ptr 0x004CC572;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T585;

	__asm        jmp    _T5c5;
_T585:
	__asm        mov    memstrm.curPos, 0;
_T58c:
	__asm        jmp    near ptr 0x004CC594;

	__asm        jmp    near ptr 0x004CC599;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5AC];
	__asm        mov    [ecx+0x63A850], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5AC];
	__asm        jmp    _T516;
_T5c0:
	__asm        jmp    _T5c5;
// LINE 346:
_T5c5:
	__asm        mov    dword ptr [ebp-0x5B0], 0;
_T5cf:
	__asm        cmp    dword ptr [ebp-0x5B0], 4;
	__asm        jae    _T679;

	__asm        jmp    near ptr 0x004CC5E4;

	__asm        jmp    near ptr 0x004CC5E9;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T5fc;

	__asm        jmp    _T67e;
_T5fc:
	__asm        jmp    near ptr 0x004CC604;

	__asm        jmp    near ptr 0x004CC609;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T645;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC626;

	__asm        jmp    near ptr 0x004CC62B;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T63e;

	__asm        jmp    _T67e;
_T63e:
	__asm        mov    memstrm.curPos, 0;
_T645:
	__asm        jmp    near ptr 0x004CC64D;

	__asm        jmp    near ptr 0x004CC652;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5B0];
	__asm        mov    [ecx+0x639AB4], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5B0];
	__asm        jmp    _T5cf;
_T679:
	__asm        jmp    _T67e;
// LINE 349:
_T67e:
	__asm        mov    dword ptr [ebp-0x5B4], 0;
_T688:
	__asm        cmp    dword ptr [ebp-0x5B4], 4;
	__asm        jae    _T732;

	__asm        jmp    near ptr 0x004CC69D;

	__asm        jmp    near ptr 0x004CC6A2;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T6b5;

	__asm        jmp    _T737;
_T6b5:
	__asm        jmp    near ptr 0x004CC6BD;

	__asm        jmp    near ptr 0x004CC6C2;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T6fe;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC6DF;

	__asm        jmp    near ptr 0x004CC6E4;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T6f7;

	__asm        jmp    _T737;
_T6f7:
	__asm        mov    memstrm.curPos, 0;
_T6fe:
	__asm        jmp    near ptr 0x004CC706;

	__asm        jmp    near ptr 0x004CC70B;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5B4];
	__asm        mov    [ecx+0x63A740], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5B4];
	__asm        jmp    _T688;
_T732:
	__asm        jmp    _T737;
// LINE 354:
_T737:
	__asm        mov    dword ptr [ebp-0x5B8], 0;
_T741:
	__asm        cmp    dword ptr [ebp-0x5B8], 0xC8;
	__asm        jae    _T7ef;

	__asm        jmp    near ptr 0x004CC759;

	__asm        jmp    near ptr 0x004CC75E;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T771;

	__asm        jmp    _T7f4;
_T771:
	__asm        jmp    near ptr 0x004CC779;

	__asm        jmp    near ptr 0x004CC77E;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T7ba;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC79B;

	__asm        jmp    near ptr 0x004CC7A0;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T7b3;

	__asm        jmp    _T7f4;
_T7b3:
	__asm        mov    memstrm.curPos, 0;
_T7ba:
	__asm        jmp    near ptr 0x004CC7C2;

	__asm        jmp    near ptr 0x004CC7C7;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5B8];
	__asm        mov    [ebp+ecx-0x134], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5B8];
	__asm        jmp    _T741;
_T7ef:
	__asm        jmp    _T7f4;
// LINE 355:
_T7f4:
	__asm        mov    loop, 0;
	__asm        jmp    _T803;
_T800:
	__asm        inc    loop;
_T803:
	__asm        cmp    loop, 0x32;
	__asm        jge    _T827;
// LINE 356:
	__asm        mov    eax, loop;
	__asm        mov    eax, [ebp+eax*4-0x134];
	__asm        mov    ecx, loop;
	__asm        mov    [ecx*2+0x63A6D0], ax;
	__asm        jmp    _T800;
// LINE 359:
_T827:
	__asm        mov    dword ptr [ebp-0x5BC], 0;
_T831:
	__asm        cmp    dword ptr [ebp-0x5BC], 4;
	__asm        jae    _T8db;

	__asm        jmp    near ptr 0x004CC846;

	__asm        jmp    near ptr 0x004CC84B;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T85e;

	__asm        jmp    _T8e0;
_T85e:
	__asm        jmp    near ptr 0x004CC866;

	__asm        jmp    near ptr 0x004CC86B;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T8a7;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC888;

	__asm        jmp    near ptr 0x004CC88D;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T8a0;

	__asm        jmp    _T8e0;
_T8a0:
	__asm        mov    memstrm.curPos, 0;
_T8a7:
	__asm        jmp    near ptr 0x004CC8AF;

	__asm        jmp    near ptr 0x004CC8B4;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5BC];
	__asm        mov    [ecx+0x63A5A4], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5BC];
	__asm        jmp    _T831;
_T8db:
	__asm        jmp    _T8e0;
// LINE 362:
_T8e0:
	__asm        mov    dword ptr [ebp-0x5C0], 0;
_T8ea:
	__asm        cmp    dword ptr [ebp-0x5C0], 2;
	__asm        jae    _T994;

	__asm        jmp    near ptr 0x004CC8FF;

	__asm        jmp    near ptr 0x004CC904;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T917;

	__asm        jmp    _T999;
_T917:
	__asm        jmp    near ptr 0x004CC91F;

	__asm        jmp    near ptr 0x004CC924;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _T960;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC941;

	__asm        jmp    near ptr 0x004CC946;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T959;

	__asm        jmp    _T999;
_T959:
	__asm        mov    memstrm.curPos, 0;
_T960:
	__asm        jmp    near ptr 0x004CC968;

	__asm        jmp    near ptr 0x004CC96D;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5C0];
	__asm        mov    [ecx+0x59B584], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5C0];
	__asm        jmp    _T8ea;
_T994:
	__asm        jmp    _T999;
// LINE 365:
_T999:
	__asm        mov    dword ptr [ebp-0x5C4], 0;
_T9a3:
	__asm        cmp    dword ptr [ebp-0x5C4], 2;
	__asm        jae    _Ta4d;

	__asm        jmp    near ptr 0x004CC9B8;

	__asm        jmp    near ptr 0x004CC9BD;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _T9d0;

	__asm        jmp    _Ta52;
_T9d0:
	__asm        jmp    near ptr 0x004CC9D8;

	__asm        jmp    near ptr 0x004CC9DD;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Ta19;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CC9FA;

	__asm        jmp    near ptr 0x004CC9FF;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Ta12;

	__asm        jmp    _Ta52;
_Ta12:
	__asm        mov    memstrm.curPos, 0;
_Ta19:
	__asm        jmp    near ptr 0x004CCA21;

	__asm        jmp    near ptr 0x004CCA26;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5C4];
	__asm        mov    [ecx+0x639AAE], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5C4];
	__asm        jmp    _T9a3;
_Ta4d:
	__asm        jmp    _Ta52;
// LINE 368:
_Ta52:
	__asm        mov    dword ptr [ebp-0x5C8], 0;
_Ta5c:
	__asm        cmp    dword ptr [ebp-0x5C8], 2;
	__asm        jae    _Tb06;

	__asm        jmp    near ptr 0x004CCA71;

	__asm        jmp    near ptr 0x004CCA76;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Ta89;

	__asm        jmp    _Tb0b;
_Ta89:
	__asm        jmp    near ptr 0x004CCA91;

	__asm        jmp    near ptr 0x004CCA96;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Tad2;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCAB3;

	__asm        jmp    near ptr 0x004CCAB8;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tacb;

	__asm        jmp    _Tb0b;
_Tacb:
	__asm        mov    memstrm.curPos, 0;
_Tad2:
	__asm        jmp    near ptr 0x004CCADA;

	__asm        jmp    near ptr 0x004CCADF;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5C8];
	__asm        mov    [ecx+0x6391F0], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5C8];
	__asm        jmp    _Ta5c;
_Tb06:
	__asm        jmp    _Tb0b;
// LINE 371:
_Tb0b:
	__asm        mov    dword ptr [ebp-0x5CC], 0;
_Tb15:
	__asm        cmp    dword ptr [ebp-0x5CC], 2;
	__asm        jae    _Tbbf;

	__asm        jmp    near ptr 0x004CCB2A;

	__asm        jmp    near ptr 0x004CCB2F;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tb42;

	__asm        jmp    _Tbc4;
_Tb42:
	__asm        jmp    near ptr 0x004CCB4A;

	__asm        jmp    near ptr 0x004CCB4F;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Tb8b;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCB6C;

	__asm        jmp    near ptr 0x004CCB71;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tb84;

	__asm        jmp    _Tbc4;
_Tb84:
	__asm        mov    memstrm.curPos, 0;
_Tb8b:
	__asm        jmp    near ptr 0x004CCB93;

	__asm        jmp    near ptr 0x004CCB98;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5CC];
	__asm        mov    [ecx+0x63A250], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5CC];
	__asm        jmp    _Tb15;
_Tbbf:
	__asm        jmp    _Tbc4;
// LINE 374:
_Tbc4:
	__asm        mov    dword ptr [ebp-0x5D0], 0;
_Tbce:
	__asm        cmp    dword ptr [ebp-0x5D0], 2;
	__asm        jae    _Tc78;

	__asm        jmp    near ptr 0x004CCBE3;

	__asm        jmp    near ptr 0x004CCBE8;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tbfb;

	__asm        jmp    _Tc7d;
_Tbfb:
	__asm        jmp    near ptr 0x004CCC03;

	__asm        jmp    near ptr 0x004CCC08;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Tc44;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCC25;

	__asm        jmp    near ptr 0x004CCC2A;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tc3d;

	__asm        jmp    _Tc7d;
_Tc3d:
	__asm        mov    memstrm.curPos, 0;
_Tc44:
	__asm        jmp    near ptr 0x004CCC4C;

	__asm        jmp    near ptr 0x004CCC51;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5D0];
	__asm        mov    [ecx+0x639238], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5D0];
	__asm        jmp    _Tbce;
_Tc78:
	__asm        jmp    _Tc7d;
_Tc7d:
	__asm        mov    eax, ds:[0x639730];
	__asm        mov    [ebp-0x5D8], eax;
// LINE 377:
	__asm        mov    dword ptr [ebp-0x5D4], 0;
_Tc92:
	__asm        cmp    dword ptr [ebp-0x5D4], 0x1000;
	__asm        jae    _Td42;

	__asm        jmp    near ptr 0x004CCCAA;

	__asm        jmp    near ptr 0x004CCCAF;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tcc2;

	__asm        jmp    _Td47;
_Tcc2:
	__asm        jmp    near ptr 0x004CCCCA;

	__asm        jmp    near ptr 0x004CCCCF;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Td0b;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCCEC;

	__asm        jmp    near ptr 0x004CCCF1;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Td04;

	__asm        jmp    _Td47;
_Td04:
	__asm        mov    memstrm.curPos, 0;
_Td0b:
	__asm        jmp    near ptr 0x004CCD13;

	__asm        jmp    near ptr 0x004CCD18;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5D4];
	__asm        mov    edx, [ebp-0x5D8];
	__asm        mov    [ecx+edx], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5D4];
	__asm        jmp    _Tc92;
_Td42:
	__asm        jmp    _Td47;
_Td47:
	__asm        mov    eax, ds:[0x639CD0];
	__asm        mov    [ebp-0x5E0], eax;
// LINE 378:
	__asm        mov    dword ptr [ebp-0x5DC], 0;
_Td5c:
	__asm        cmp    dword ptr [ebp-0x5DC], 0x1000;
	__asm        jae    _Te0c;

	__asm        jmp    near ptr 0x004CCD74;

	__asm        jmp    near ptr 0x004CCD79;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Td8c;

	__asm        jmp    _Te11;
_Td8c:
	__asm        jmp    near ptr 0x004CCD94;

	__asm        jmp    near ptr 0x004CCD99;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Tdd5;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCDB6;

	__asm        jmp    near ptr 0x004CCDBB;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tdce;

	__asm        jmp    _Te11;
_Tdce:
	__asm        mov    memstrm.curPos, 0;
_Tdd5:
	__asm        jmp    near ptr 0x004CCDDD;

	__asm        jmp    near ptr 0x004CCDE2;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5DC];
	__asm        mov    edx, [ebp-0x5E0];
	__asm        mov    [ecx+edx], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5DC];
	__asm        jmp    _Td5c;
_Te0c:
	__asm        jmp    _Te11;
_Te11:
	__asm        mov    eax, ds:[0x63A470];
	__asm        mov    [ebp-0x5E8], eax;
// LINE 379:
	__asm        mov    dword ptr [ebp-0x5E4], 0;
_Te26:
	__asm        cmp    dword ptr [ebp-0x5E4], 0x1000;
	__asm        jae    _Ted6;

	__asm        jmp    near ptr 0x004CCE3E;

	__asm        jmp    near ptr 0x004CCE43;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Te56;

	__asm        jmp    _Tedb;
_Te56:
	__asm        jmp    near ptr 0x004CCE5E;

	__asm        jmp    near ptr 0x004CCE63;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Te9f;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCE80;

	__asm        jmp    near ptr 0x004CCE85;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Te98;

	__asm        jmp    _Tedb;
_Te98:
	__asm        mov    memstrm.curPos, 0;
_Te9f:
	__asm        jmp    near ptr 0x004CCEA7;

	__asm        jmp    near ptr 0x004CCEAC;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5E4];
	__asm        mov    edx, [ebp-0x5E8];
	__asm        mov    [ecx+edx], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5E4];
	__asm        jmp    _Te26;
_Ted6:
	__asm        jmp    _Tedb;
_Tedb:
	__asm        mov    eax, ds:[0x63A750];
	__asm        mov    [ebp-0x5F0], eax;
// LINE 380:
	__asm        mov    dword ptr [ebp-0x5EC], 0;
_Tef0:
	__asm        cmp    dword ptr [ebp-0x5EC], 0x1000;
	__asm        jae    _Tfa0;

	__asm        jmp    near ptr 0x004CCF08;

	__asm        jmp    near ptr 0x004CCF0D;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tf20;

	__asm        jmp    _Tfa5;
_Tf20:
	__asm        jmp    near ptr 0x004CCF28;

	__asm        jmp    near ptr 0x004CCF2D;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    edx, memstrm.curPos;
	__asm        cmp    [ecx+eax*8+4], edx;
	__asm        ja     _Tf69;

	__asm        inc    memstrm.nodeNo;
	__asm        jmp    near ptr 0x004CCF4A;

	__asm        jmp    near ptr 0x004CCF4F;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        cmp    dword ptr [ecx+eax*8], 0;
	__asm        jne    _Tf62;

	__asm        jmp    _Tfa5;
_Tf62:
	__asm        mov    memstrm.curPos, 0;
_Tf69:
	__asm        jmp    near ptr 0x004CCF71;

	__asm        jmp    near ptr 0x004CCF76;

	__asm        movsx  eax, memstrm.nodeNo;
	__asm        mov    ecx, memstrm.nodeList.start;
	__asm        mov    eax, [ecx+eax*8];
	__asm        mov    ecx, memstrm.curPos;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, [ebp-0x5EC];
	__asm        mov    edx, [ebp-0x5F0];
	__asm        mov    [ecx+edx], al;
	__asm        inc    memstrm.curPos;
	__asm        inc    dword ptr [ebp-0x5EC];
	__asm        jmp    _Tef0;
_Tfa0:
	__asm        jmp    _Tfa5;
// LINE 383:
_Tfa5:
	__asm        push   0x400;
	__asm        mov    eax, ds:[0x639170];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 384:
	__asm        push   0x400;
	__asm        mov    eax, ds:[0x63A5B0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 385:
	__asm        push   0x400;
	__asm        mov    eax, ds:[0x638EE0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 386:
	__asm        push   0x400;
	__asm        mov    eax, ds:[0x63A640];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 389:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x638F70];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 390:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x639850];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 391:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x606A58];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 392:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x639DE0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 393:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x63A270];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 394:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x63A030];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 395:
	__asm        push   0x4000;
	__asm        mov    eax, ds:[0x639AD0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 396:
	__asm        push   0x8000;
	__asm        mov    eax, ds:[0x639510];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 400:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 401:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 404:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 405:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 409:
	__asm        push   0x400;
	__asm        lea    eax, scxTileCount[0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 410:
	__asm        mov    loop, 0;
	__asm        jmp    _T10f0;
_T10ed:
	__asm        inc    loop;
_T10f0:
	__asm        cmp    loop, 0x100;
	__asm        jge    _T1119;
// LINE 411:
	__asm        mov    eax, loop;
	__asm        mov    eax, [ebp+eax*4-0x550];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x639AC8];
	__asm        mov    [edx+ecx*2], ax;
	__asm        jmp    _T10ed;
// LINE 414:
_T1119:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 415:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x638ED8], ax;
// LINE 418:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 419:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639AB8], ax;
// LINE 422:
	__asm        push   4;
	__asm        push   0x638F60;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 425:
	__asm        push   4;
	__asm        push   0x63930C;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 428:
	__asm        push   0x50;
	__asm        mov    eax, ds:[0x639244];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 431:
	__asm        push   0x50;
	__asm        mov    eax, ds:[0x639DDC];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 434:
	__asm        push   0x50;
	__asm        mov    eax, ds:[0x639844];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 437:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 438:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639840], ax;
// LINE 441:
	__asm        mov    loop, 0;
	__asm        jmp    _T11cd;
_T11ca:
	__asm        inc    loop;
_T11cd:
	__asm        cmp    loop, 0x32;
	__asm        jge    _T11f6;
// LINE 442:
	__asm        push   0x19;
	__asm        mov    eax, loop;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, ds:[0x639834];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
	__asm        jmp    _T11ca;
// LINE 452:
_T11f6:
	__asm        mov    loop, 0;
	__asm        jmp    _T1205;
_T1202:
	__asm        inc    loop;
_T1205:
	__asm        cmp    loop, 0x96;
	__asm        jge    _T128c;
// LINE 454:
	__asm        push   9;
	__asm        lea    eax, SCXMicroRecord.type;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 455:
	__asm        mov    al, SCXMicroRecord.type;
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A744];
	__asm        mov    [edx+ecx*8], al;
// LINE 456:
	__asm        mov    al, SCXMicroRecord.stat0;
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A744];
	__asm        mov    [edx+ecx*8+1], al;
// LINE 457:
	__asm        mov    ax, SCXMicroRecord.stat1;
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A744];
	__asm        mov    [edx+ecx*8+2], ax;
// LINE 458:
	__asm        mov    ax, SCXMicroRecord.stat2;
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A744];
	__asm        mov    [edx+ecx*8+4], ax;
// LINE 459:
	__asm        mov    ax, SCXMicroRecord.stat3;
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x63A744];
	__asm        mov    [edx+ecx*8+6], ax;
// LINE 460:
	__asm        jmp    _T1202;
// LINE 463:
_T128c:
	__asm        push   1;
	__asm        push   0x639AB2;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 464:
	__asm        push   1;
	__asm        push   0x638EDA;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 465:
	__asm        push   1;
	__asm        push   0x63A6C0;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 466:
	__asm        push   1;
	__asm        push   0x63924A;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 470:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 471:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639ABC], ax;
// LINE 474:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 475:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639A60], ax;
// LINE 478:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 479:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639AB0], ax;
// LINE 482:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 483:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x59C01C], ax;
// LINE 484:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 485:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x59C020], ax;
// LINE 488:
	__asm        push   4;
	__asm        push   0x639234;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 491:
	__asm        push   4;
	__asm        push   0x639DD8;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 494:
	__asm        push   4;
	__asm        push   0x639AA0;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 497:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 498:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639DD0], ax;
// LINE 501:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 502:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639A62], ax;
// LINE 505:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 506:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x63A632], ax;
// LINE 509:
	__asm        push   4;
	__asm        lea    eax, tempLong;
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 510:
	__asm        mov    eax, tempLong;
	__asm        mov    ds:[0x639AAC], ax;
// LINE 514:
	__asm        push   0x2C;
	__asm        lea    eax, scxInd[0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 515:
	__asm        mov    loop, 0;
	__asm        jmp    _T141a;
_T1417:
	__asm        inc    loop;
_T141a:
	__asm        cmp    loop, 0xB;
	__asm        jge    _T1440;
// LINE 516:
	__asm        mov    eax, loop;
	__asm        mov    eax, [ebp+eax*4-0x57C];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x639308];
	__asm        mov    [edx+ecx*2], ax;
	__asm        jmp    _T1417;
// LINE 519:
_T1440:
	__asm        push   0x2C;
	__asm        lea    eax, scxInd[0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 520:
	__asm        mov    loop, 0;
	__asm        jmp    _T1460;
_T145d:
	__asm        inc    loop;
_T1460:
	__asm        cmp    loop, 0xB;
	__asm        jge    _T1486;
// LINE 521:
	__asm        mov    eax, loop;
	__asm        movsx  eax, word ptr [ebp+eax*4-0x57C];
	__asm        mov    ecx, loop;
	__asm        mov    edx, ds:[0x639A54];
	__asm        mov    [edx+ecx*4], eax;
	__asm        jmp    _T145d;
// LINE 524:
_T1486:
	__asm        push   0x40;
	__asm        mov    eax, ds:[0x63A020];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
// LINE 525:
	__asm        mov    loop, 0;
	__asm        jmp    _T14a5;
_T14a2:
	__asm        inc    loop;
_T14a5:
	__asm        cmp    loop, 0x10;
	__asm        jge    _T14cc;
// LINE 526:
	__asm        push   0xD0;
	__asm        mov    eax, loop;
	__asm        mov    eax, [eax*4+0x639FE0];
	__asm        push   eax;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::Read;
	__asm        jmp    _T14a2;
// LINE 528:
_T14cc:
	__asm        mov    eax, ds:[0x606A58];
	__asm        mov    [ebp-0x588], eax;
	__asm        mov    eax, [ebp-0x588];
	__asm        mov    [ebp-0x590], eax;
	__asm        mov    eax, [ebp-0x590];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 530:
	__asm        mov    dword ptr [ebp-0x58C], 1;
	__asm        mov    memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>, 0x592440;
	__asm        lea    ecx, memstrm.<cGZXParamBitstream<t_alloc,t_free>+0x00>;
	__asm        call   cGZXParamBitstream<t_alloc,t_free>::FreeAll;
	__asm        jmp    near ptr 0x004CD513;

	__asm        lea    ecx, memstrm.nodeList.start;
	__asm        call   vector<tGZXBitstreamNode>::~vector<tGZXBitstreamNode>;
	__asm        lea    ecx, fileStream.<cLZAPFileBitStream+0x00>;
	__asm        call   cLZAPFileBitStream::~cLZAPFileBitStream;
	__asm        mov    eax, [ebp-0x58C];
	__asm        jmp    _T152e;
// LINE 531:
_T152e:
}



// Contribution: 1:000cc540-000cc59d Module: 89, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004cd540
// vector<tGZXBitstreamNode>::~vector<tGZXBitstreamNode>



// Contribution: 1:000cc5a0-000ccf60 Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000ccf70-000ccf98 Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000ccfa0-000ccfcf Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000ccfd0-000ccfff Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000cd000-000cd0fe Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000cd100-000cd1f1 Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000cd200-000cdf3b Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000cdf40-000cdfac Module: 89, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:000cdfb0-000ce018 Module: 89, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004cefb0
// allocate



// Contribution: 1:000ce020-000ce089 Module: 89, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004cf020
// uninitialized_copy



// Contribution: 2:000033f8-00003413 Module: 89, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x005923f8
// ??_7cGZXBitstream@@6B@


// Contribution: 2:00003418-0000343b Module: 89, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00592418
// ??_7cLZAPFileBitStream@@6B@


// Contribution: 2:00003440-0000345b Module: 89, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00592440
// ??_7?$cGZXParamBitstream@Ut_alloc@@Ut_free@@@@6B@


// Contribution: 3:00005168-0000516d Module: 89, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0006fa58-0006fa5b Module: 89, 4 byte alignment, uninitialized_data, read, write, 
// LOCAL: COPTER_D 0x00606a58
// scxbuf


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.

// WARNING: this global might actually belong to: C:\Copter\source\common\S2lodsav.c
// GLOBAL: COPTER_D 0x0063a578
// _NeighborName
