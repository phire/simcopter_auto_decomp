// Module: S3train.obj
// Source: C:\Copter\Source\Game\S3train.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct CONNECTION_INFO_TYPE[30];

// Type: struct Point2d;
struct Point2d{
	int32_t x;
	int32_t y;
};

// Type: class TrainClass;
class TrainClass{
	enum /* __unnamed */ {
		TRAIN_TYPES = 1,
		PERCENTAGE_OF_TRAIN1 = 100,
		TOTAL_PERCENTAGE = 100,
	};
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		END_OF_RAIL = 4,
		INTERSECTION_FULL = 5,
	};
	enum RailTileOffsets {
		RL_CENTOFF = 0,
		RL_EDGEOFF = 131072,
	};
	enum /* __unnamed */ {
		COLLISION_SPACE = 655360,
		RAIL_SPEED = 5898240,
		RAIL_SLOWDOWN_FACTOR = 131072,
		SPEED_VARIANCE = 262144,
		MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
		MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
	};
	enum flagEnums {
		INITIALIZED = 0,
		PLACED = 1,
		TURNING = 2,
		IN_INTERSECTION = 3,
		MAKING_UTURN = 4,
		AT_DEAD_END = 5,
		CRASH_WHEN_READY = 6,
		CRASHING = 7,
		ON_RESCUE = 8,
		NUMBER_OF_FLAGS = 9,
	};
private:
	static struct Point2d lastScannedLocation;
	static class TrainClass lsTrain;
	char flags[9];
	int32_t stalledTimer;
	enum DirectionTypes direction;
	struct Point3d directionVector;
	int32_t remainingDist;
	int32_t remainingTime;
	enum DirectionTypes utdirection;
	int32_t speed;
	int32_t desiredSpeed;
	struct Point2d currentLocation1;
	struct Point2d currentLocation2;
	struct Point2d currentLocation3;
	struct Point2d currentCell;
	struct Point2d nextLocation;
	int32_t beamDelay;
	int32_t beamTimer;
	long utRotation;
	long missionId;
	int32_t smokeTime;
	int32_t timeToLive;
	struct Point2d northCell;
	struct Point2d southCell;
	struct Point2d eastCell;
	struct Point2d westCell;
protected:
	long trainModel1;
	long trainModel2;
	long trainModel3;
	struct _DYOBJ_INST dyObj1;
	struct _DYOBJ_INST dyObj2;
	struct _DYOBJ_INST dyObj3;
	struct _DYOBJ_INST* leadcar;
	struct _DYOBJ_INST* midcar;
	struct _DYOBJ_INST* endcar;
public:
	void TrainClass(const class TrainClass&);
	void TrainClass(long, long);
	void TrainClass();
	// vtable: 0
	intro void ~TrainClass();
	// calltype: NearC
	static class TrainClass* CreateInstance(long, long, int32_t);
	// calltype: NearC
	static class TrainClass* CreateInstance(int32_t);
	// calltype: NearC
	static class TrainClass* GetTrainPointer(long);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t FindTrainToCrash(long);
	// calltype: NearC
	static int32_t FindTrainForRescue(long, int32_t);
protected:
	int32_t IsTrainInitialized();
	int32_t IsTrainPlaced();
	int32_t IsTrainAtDeadEnd();
	int32_t IsTrainTurning();
	int32_t IsTrainInIntersection();
	int32_t IsTrainMakingUturn();
	int32_t IsTrainMoving();
	int32_t IsTrainReadyToCrash();
	int32_t IsTrainCrashing();
	int32_t IsTrainOnRescue();
	long GetTrainModel();
	const const struct _DYOBJ_INST* GetTrainDyObj();
	enum DirectionTypes GetDirection();
	int32_t AmIMovingNorth();
	int32_t AmIMovingSouth();
	int32_t AmIMovingEast();
	int32_t AmIMovingWest();
	const struct Point3d& GetDirectionVector();
	int32_t GetSpeed();
	int32_t GetDesiredSpeed();
	const struct Point2d& GetCurrentLocation1();
	const struct Point2d& GetCurrentLocation2();
	const struct Point2d& GetCurrentLocation3();
	const struct Point2d& GetNextLocation();
	void SetCurrentLocation1(struct Point2d&);
	void SetCurrentLocation2(struct Point2d&);
	void SetCurrentLocation3(struct Point2d&);
	void SetTrainReadyToCrash(long);
	int32_t CanTrainBePlacedOnTile(unsigned short);
	void SetSpeed(int32_t);
	int32_t Initialize(int32_t);
	void Itterate();
	// vtable: 4
	intro void ItterateFSM();
	// vtable: 8
	intro void AdjustSpeed();
	// vtable: 12
	intro enum TrainClass::StoppedReasons IsPathClear();
	enum TrainClass::StoppedReasons CheckDynamicObjectsAt(const struct Point2d&, const struct Point3d&);
	int32_t IsTrainOutOfCameraRange();
	void SetTrainDirection(unsigned short);
	int32_t CheckForStop(short, short);
	int32_t FinishedUturn();
	void SlowDown();
	void Stop();
	void MoveForward();
	int32_t HaveIReachedNextLoc();
	int32_t AmIInANewCell();
	int32_t IsAnythingThere(const struct Point2d&, struct mv);
	void UnlinkFromCell(const struct Point2d&, struct _DYOBJ_INST*);
	void LinkToCell(const struct Point2d&, struct _DYOBJ_INST*);
	int32_t IsLocationAnIntersection(struct Point2d&);
	// vtable: 16
	intro enum TrainClass::IntersectionTypes PickTurnDirection(const struct Point2d&);
	int32_t DoRailTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void MakeATurn(enum TrainClass::IntersectionTypes);
	void GetNewPredictedLocation();
	void AdjustCurrentPosition();
	void AdjustNextPosition();
	enum TrainClass::StoppedReasons WhyAmIStopped();
	void GoStraight();
	void MakeUturn();
	void TurnLeft();
	void TurnRight();
	void UnPlaceTrain();
	void SetTrailingCars();
	void AdjustTrailingCars();
	void SetCrashWhenReady();
	void TrainCrashMovement();
	void TrainSoundDriver();
	void Reset();
	int32_t SetTrainForRescue(long, int32_t);
	// calltype: NearC
	static void InitArrays();
	// calltype: NearC
	static void SetTrainTypesAndLocations();
	// calltype: NearC
	static void PlaceInitialTrains();
	// vtable: 20
	intro void BeamToWithinCameraRange();
	// vtable: 24
	intro int32_t BeamToLocation(long, long);
private:
	int32_t InitializeInstance(long, long, int32_t);
public:
	class TrainClass operator=(const class TrainClass&);
};

// Type: class TrainClass*[1];

// Type: void ();

// Type: void;

// Type: class TrainClass (forward reference);
class TrainClass{
	enum /* __unnamed */ {
		TRAIN_TYPES = 1,
		PERCENTAGE_OF_TRAIN1 = 100,
		TOTAL_PERCENTAGE = 100,
	};
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		END_OF_RAIL = 4,
		INTERSECTION_FULL = 5,
	};
	enum RailTileOffsets {
		RL_CENTOFF = 0,
		RL_EDGEOFF = 131072,
	};
	enum /* __unnamed */ {
		COLLISION_SPACE = 655360,
		RAIL_SPEED = 5898240,
		RAIL_SLOWDOWN_FACTOR = 131072,
		SPEED_VARIANCE = 262144,
		MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
		MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
	};
	enum flagEnums {
		INITIALIZED = 0,
		PLACED = 1,
		TURNING = 2,
		IN_INTERSECTION = 3,
		MAKING_UTURN = 4,
		AT_DEAD_END = 5,
		CRASH_WHEN_READY = 6,
		CRASHING = 7,
		ON_RESCUE = 8,
		NUMBER_OF_FLAGS = 9,
	};
private:
	static struct Point2d lastScannedLocation;
	static class TrainClass lsTrain;
	char flags[9];
	int32_t stalledTimer;
	enum DirectionTypes direction;
	struct Point3d directionVector;
	int32_t remainingDist;
	int32_t remainingTime;
	enum DirectionTypes utdirection;
	int32_t speed;
	int32_t desiredSpeed;
	struct Point2d currentLocation1;
	struct Point2d currentLocation2;
	struct Point2d currentLocation3;
	struct Point2d currentCell;
	struct Point2d nextLocation;
	int32_t beamDelay;
	int32_t beamTimer;
	long utRotation;
	long missionId;
	int32_t smokeTime;
	int32_t timeToLive;
	struct Point2d northCell;
	struct Point2d southCell;
	struct Point2d eastCell;
	struct Point2d westCell;
protected:
	long trainModel1;
	long trainModel2;
	long trainModel3;
	struct _DYOBJ_INST dyObj1;
	struct _DYOBJ_INST dyObj2;
	struct _DYOBJ_INST dyObj3;
	struct _DYOBJ_INST* leadcar;
	struct _DYOBJ_INST* midcar;
	struct _DYOBJ_INST* endcar;
public:
	void TrainClass(const class TrainClass&);
	void TrainClass(long, long);
	void TrainClass();
	// vtable: 0
	intro void ~TrainClass();
	// calltype: NearC
	static class TrainClass* CreateInstance(long, long, int32_t);
	// calltype: NearC
	static class TrainClass* CreateInstance(int32_t);
	// calltype: NearC
	static class TrainClass* GetTrainPointer(long);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t FindTrainToCrash(long);
	// calltype: NearC
	static int32_t FindTrainForRescue(long, int32_t);
protected:
	int32_t IsTrainInitialized();
	int32_t IsTrainPlaced();
	int32_t IsTrainAtDeadEnd();
	int32_t IsTrainTurning();
	int32_t IsTrainInIntersection();
	int32_t IsTrainMakingUturn();
	int32_t IsTrainMoving();
	int32_t IsTrainReadyToCrash();
	int32_t IsTrainCrashing();
	int32_t IsTrainOnRescue();
	long GetTrainModel();
	const const struct _DYOBJ_INST* GetTrainDyObj();
	enum DirectionTypes GetDirection();
	int32_t AmIMovingNorth();
	int32_t AmIMovingSouth();
	int32_t AmIMovingEast();
	int32_t AmIMovingWest();
	const struct Point3d& GetDirectionVector();
	int32_t GetSpeed();
	int32_t GetDesiredSpeed();
	const struct Point2d& GetCurrentLocation1();
	const struct Point2d& GetCurrentLocation2();
	const struct Point2d& GetCurrentLocation3();
	const struct Point2d& GetNextLocation();
	void SetCurrentLocation1(struct Point2d&);
	void SetCurrentLocation2(struct Point2d&);
	void SetCurrentLocation3(struct Point2d&);
	void SetTrainReadyToCrash(long);
	int32_t CanTrainBePlacedOnTile(unsigned short);
	void SetSpeed(int32_t);
	int32_t Initialize(int32_t);
	void Itterate();
	// vtable: 4
	intro void ItterateFSM();
	// vtable: 8
	intro void AdjustSpeed();
	// vtable: 12
	intro enum TrainClass::StoppedReasons IsPathClear();
	enum TrainClass::StoppedReasons CheckDynamicObjectsAt(const struct Point2d&, const struct Point3d&);
	int32_t IsTrainOutOfCameraRange();
	void SetTrainDirection(unsigned short);
	int32_t CheckForStop(short, short);
	int32_t FinishedUturn();
	void SlowDown();
	void Stop();
	void MoveForward();
	int32_t HaveIReachedNextLoc();
	int32_t AmIInANewCell();
	int32_t IsAnythingThere(const struct Point2d&, struct mv);
	void UnlinkFromCell(const struct Point2d&, struct _DYOBJ_INST*);
	void LinkToCell(const struct Point2d&, struct _DYOBJ_INST*);
	int32_t IsLocationAnIntersection(struct Point2d&);
	// vtable: 16
	intro enum TrainClass::IntersectionTypes PickTurnDirection(const struct Point2d&);
	int32_t DoRailTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void MakeATurn(enum TrainClass::IntersectionTypes);
	void GetNewPredictedLocation();
	void AdjustCurrentPosition();
	void AdjustNextPosition();
	enum TrainClass::StoppedReasons WhyAmIStopped();
	void GoStraight();
	void MakeUturn();
	void TurnLeft();
	void TurnRight();
	void UnPlaceTrain();
	void SetTrailingCars();
	void AdjustTrailingCars();
	void SetCrashWhenReady();
	void TrainCrashMovement();
	void TrainSoundDriver();
	void Reset();
	int32_t SetTrainForRescue(long, int32_t);
	// calltype: NearC
	static void InitArrays();
	// calltype: NearC
	static void SetTrainTypesAndLocations();
	// calltype: NearC
	static void PlaceInitialTrains();
	// vtable: 20
	intro void BeamToWithinCameraRange();
	// vtable: 24
	intro int32_t BeamToLocation(long, long);
private:
	int32_t InitializeInstance(long, long, int32_t);
public:
	class TrainClass operator=(const class TrainClass&);
};

// Type: long;

// Type: int32_t;

// Type: struct VRview;
struct VRview{
	struct Point3d loc;
	struct Point3d scale;
	int32_t matrix[4][4];
};

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _MISSION_PARMS;
struct _MISSION_PARMS{
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct _CELL_INFO (forward reference);
// _CELL_INFO Class implementation not found

// Type: int32_t[4][4];

// Type: enum TrainClass::StoppedReasons;
enum StoppedReasons {
	NO_REASON = 0,
	TRAFFIC = 1,
	STOPPED_TRAFFIC = 2,
	PERSON_IN_WAY = 3,
	END_OF_RAIL = 4,
	INTERSECTION_FULL = 5,
};

// Type: struct Point2d (forward reference);
// Point2d Class implementation not found

// Type: struct Point3d (forward reference);
// Point3d Class implementation not found

// Type: unsigned short;

// Type: struct _DYOBJ_INST (forward reference);
// _DYOBJ_INST Class implementation not found

// Type: enum TrainClass::IntersectionTypes;
enum IntersectionTypes {
	DEAD_END = 0,
	STRAIGHT_AHEAD = 1,
	LEFT_ONLY = 2,
	RIGHT_ONLY = 4,
	LEFT_OR_STRAIGHT = 3,
	LEFT_OR_RIGHT = 6,
	RIGHT_OR_STRAIGHT = 5,
	LEFT_STRAIGHT_OR_RIGHT = 7,
};

// Type: enum DirectionTypes;
enum DirectionTypes {
	NO_DIRECTION = 0,
	NORTH = 1,
	EAST = 2,
	SOUTH = 4,
	WEST = 8,
	RISING = 16,
	RISING_NORTH = 17,
	RISING_SOUTH = 20,
	RISING_EAST = 18,
	RISING_WEST = 24,
	NORTH_EAST = 3,
	SOUTH_EAST = 6,
	SOUTH_WEST = 12,
	NORTH_WEST = 9,
};

// Type: struct VRObjInfo;
struct VRObjInfo{
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: short;

// Type: void * __ptr32;

// Type: uint32_t;



// Contribution: 1:0012cda0-00133970 Module: 162, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052dda0
void $E7() {

	__asm        call   $E3;
	__asm        call   $E6;
	__asm        jmp    near ptr 0x0052DDB5;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052ddba
void $E3() {

	__asm        mov    TrainClass::lsTrain<vftable>, 0x593238;
	__asm        jmp    near ptr 0x0052DDCF;

	__asm        jmp    near ptr 0x0052DDD4;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052ddd9
void $E6() {

	__asm        push   0x52DDF6;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0052DDF1;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052ddf6
void $E4() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x62B998];
	__asm        test   al, 1;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x62B998];
	__asm        or     al, 1;
	__asm        mov    ds:[0x62B998], al;
	__asm        mov    ecx, 0x62B7B8;
	__asm        call   TrainClass::~TrainClass;
_T2d:
	__asm        jmp    near ptr 0x0052DE28;
}

// FUNCTION: COPTER_D 0x0052de2d
void TrainClass::TrainClass(long mapx, long mapy) {
	long odds;
	int32_t currentFlag;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593238;
// LINE 183:
	__asm        mov    currentFlag, 0;
	__asm        jmp    _T24;
_T21:
	__asm        inc    currentFlag;
_T24:
	__asm        cmp    currentFlag, 9;
	__asm        jge    _T3e;
// LINE 185:
	__asm        mov    eax, currentFlag;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 0;
// LINE 186:
	__asm        jmp    _T21;
// LINE 188:
_T3e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA9], 0;
// LINE 189:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10D], 0;
// LINE 190:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x171], 0;
// LINE 191:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 192:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x61], 0;
// LINE 193:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0;
// LINE 194:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 0;
// LINE 195:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x31], 0;
// LINE 196:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x35], eax;
// LINE 197:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], eax;
// LINE 198:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3D], eax;
// LINE 199:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x41], eax;
// LINE 200:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x45], eax;
// LINE 201:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x49], eax;
// LINE 202:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4D], eax;
// LINE 203:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x51], eax;
// LINE 204:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x55], eax;
// LINE 205:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x59], eax;
// LINE 211:
	__asm        call   rand;
	__asm        mov    ecx, 0x64;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    odds, edx;
// LINE 213:
	__asm        cmp    odds, 0x64;
	__asm        jge    _T13a;
// LINE 215:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x95], 0x12D;
// LINE 216:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x99], 0x14C;
// LINE 217:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9D], 0x14D;
// LINE 219:
	__asm        jmp    _T15b;
// LINE 221:
_T13a:
	__asm        push   0xDD;
	__asm        push   0x5B783C;
	__asm        push   0x5B7860;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T15b;

	__asm        jmp    _T15b;
// LINE 224:
_T15b:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x35], eax;
// LINE 225:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], eax;
// LINE 226:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3D], eax;
// LINE 227:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x41], eax;
// LINE 228:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x45], eax;
// LINE 229:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x49], eax;
// LINE 230:
	__asm        jmp    near ptr 0x0052DFC3;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0052dfcd
void TrainClass::Reset() {
// LINE 248:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnPlaceTrain;
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 251:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 252:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 253:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+9], 0;
// LINE 254:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xA], 0;
// LINE 255:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 0;
// LINE 256:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xC], 0;
// LINE 257:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 258:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x61], 0;
// LINE 259:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0;
// LINE 260:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 0;
// LINE 261:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x35], 0xFFFFFFFF;
// LINE 262:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x39], 0xFFFFFFFF;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3D], 0xFFFFFFFF;
// LINE 264:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x41], 0xFFFFFFFF;
// LINE 265:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x45], 0xFFFFFFFF;
// LINE 266:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x49], 0xFFFFFFFF;
// LINE 267:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4D], 0xFFFFFFFF;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x51], 0xFFFFFFFF;
// LINE 269:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x55], 0xFFFFFFFF;
// LINE 270:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x59], 0xFFFFFFFF;
// LINE 271:
	__asm        jmp    near ptr 0x0052E0A3;
}

// FUNCTION: COPTER_D 0x0052e0a8
void TrainClass::~TrainClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593238;
// LINE 296:
	__asm        jmp    near ptr 0x0052E0C2;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        je     _T88;
// LINE 298:
	__asm        jmp    near ptr 0x0052E0D6;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T88;
// LINE 300:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 314:
_T88:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 0;
// LINE 315:
	__asm        jmp    near ptr 0x0052E13C;
}

// FUNCTION: COPTER_D 0x0052e141
class TrainClass* TrainClass::GetTrainPointer(long index) {
// LINE 335:
	__asm        cmp    index, 1;
	__asm        jl     _T17;
// LINE 336:
	__asm        xor    eax, eax;
	__asm        jmp    _T26;
// LINE 338:
_T17:
	__asm        mov    eax, index;
	__asm        mov    eax, trains[0][eax*4];
	__asm        jmp    _T26;
// LINE 339:
_T26:
}

// FUNCTION: COPTER_D 0x0052e16c
class TrainClass* TrainClass::CreateInstance(int32_t instanceID) {
// LINE 362:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        call   TrainClass::CreateInstance;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0052E187;
// LINE 422:
}

// FUNCTION: COPTER_D 0x0052e18c
class TrainClass* TrainClass::CreateInstance(long mapx, long mapy, int32_t instanceID) {
	class TrainClass* newtrain;

// LINE 447:
	__asm        push   0x1D9;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3b;

	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   TrainClass::TrainClass;
	__asm        mov    newtrain, eax;
	__asm        jmp    _T42;
_T3b:
	__asm        mov    newtrain, 0;
// LINE 451:
_T42:
	__asm        cmp    newtrain, 0;
	__asm        je     _T94;
// LINE 455:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, newtrain;
	__asm        call   TrainClass::Initialize;
	__asm        test   eax, eax;
	__asm        je     _T6d;
// LINE 457:
	__asm        mov    eax, newtrain;
	__asm        jmp    _T9b;
// LINE 459:
	__asm        jmp    _T94;
// LINE 463:
_T6d:
	__asm        mov    eax, newtrain;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T94;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T94;
// LINE 470:
_T94:
	__asm        xor    eax, eax;
	__asm        jmp    _T9b;
// LINE 471:
_T9b:
}

// FUNCTION: COPTER_D 0x0052e22c
int32_t TrainClass::Initialize(int32_t instanceID) {
// LINE 547:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x39];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::InitializeInstance;
	__asm        jmp    near ptr 0x0052E257;
// LINE 548:
}

// FUNCTION: COPTER_D 0x0052e25e
void TrainClass::ResetAll() {
	int32_t currentTrainIndex;

// LINE 592:
	__asm        mov    currentTrainIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentTrainIndex;
_T18:
	__asm        cmp    currentTrainIndex, 1;
	__asm        jge    _T36;
// LINE 594:
	__asm        mov    eax, currentTrainIndex;
	__asm        mov    ecx, trains[0][eax*4];
	__asm        call   TrainClass::Reset;
// LINE 595:
	__asm        jmp    _T15;
// LINE 597:
_T36:
	__asm        jmp    near ptr 0x0052E299;
}

// FUNCTION: COPTER_D 0x0052e29e
void TrainClass::ItterateAll() {
	int32_t currentTrainIndex;

// LINE 641:
	__asm        mov    currentTrainIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentTrainIndex;
_T18:
	__asm        cmp    currentTrainIndex, 1;
	__asm        jge    _T36;
// LINE 643:
	__asm        mov    eax, currentTrainIndex;
	__asm        mov    ecx, trains[0][eax*4];
	__asm        call   TrainClass::Itterate;
// LINE 644:
	__asm        jmp    _T15;
// LINE 646:
_T36:
	__asm        jmp    near ptr 0x0052E2D9;
}

// FUNCTION: COPTER_D 0x0052e2de
int32_t TrainClass::FindTrainToCrash(long mission_id) {
	int32_t currentTrainIndex;

// LINE 672:
	__asm        mov    currentTrainIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentTrainIndex;
_T18:
	__asm        cmp    currentTrainIndex, 1;
	__asm        jge    _T89;
// LINE 675:
	__asm        jmp    near ptr 0x0052E305;

	__asm        mov    eax, currentTrainIndex;
	__asm        mov    eax, trains[0][eax*4];
	__asm        movsx  eax, byte ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        jne    _T84;

	__asm        jmp    near ptr 0x0052E320;

	__asm        mov    eax, currentTrainIndex;
	__asm        mov    eax, trains[0][eax*4];
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        jne    _T84;
// LINE 676:
	__asm        mov    eax, currentTrainIndex;
	__asm        mov    eax, trains[0][eax*4];
	__asm        mov    [ebp-8], eax;
// LINE 677:
	__asm        mov    eax, [ebp-8];
	__asm        mov    byte ptr [eax+0xA], 1;
	__asm        mov    eax, mission_id;
	__asm        mov    ecx, [ebp-8];
	__asm        mov    [ecx+0x69], eax;
	__asm        jmp    near ptr 0x0052E358;
// LINE 678:
	__asm        mov    eax, 1;
	__asm        jmp    _T90;
// LINE 680:
_T84:
	__asm        jmp    _T15;
// LINE 682:
_T89:
	__asm        xor    eax, eax;
	__asm        jmp    _T90;
// LINE 683:
_T90:
}

// FUNCTION: COPTER_D 0x0052e373
void TrainClass::Itterate() {
// LINE 707:
	__asm        jmp    near ptr 0x0052E384;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        je     _T182;
// LINE 710:
	__asm        mov    eax, LoopTime;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x61], eax;
// LINE 711:
	__asm        jmp    near ptr 0x0052E3A3;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T70;

	__asm        jmp    near ptr 0x0052E3B7;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        jne    _T70;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x61];
	__asm        cmp    [eax+0x5D], ecx;
	__asm        jge    _T70;
// LINE 714:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x14];
// LINE 717:
_T70:
	__asm        jmp    near ptr 0x0052E3E8;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T175;
// LINE 723:
// Block start:
	struct VRview position;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 727:
	__asm        jmp    near ptr 0x0052E407;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T175;
// LINE 730:
	__asm        mov    eax, this;
	__asm        add    eax, 0xB9;
	__asm        lea    ecx, position.loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 732:
	__asm        mov    esi, this;
	__asm        lea    edi, position.matrix[0][0];
	__asm        add    esi, 0xC5;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 734:
	__asm        push   3;
	__asm        lea    eax, position.loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA9];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
// LINE 736:
	__asm        mov    eax, this;
	__asm        add    eax, 0x11D;
	__asm        lea    ecx, position.loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 738:
	__asm        mov    esi, this;
	__asm        lea    edi, position.matrix[0][0];
	__asm        add    esi, 0x129;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 740:
	__asm        push   3;
	__asm        lea    eax, position.loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10D];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
// LINE 742:
	__asm        mov    eax, this;
	__asm        add    eax, 0x181;
	__asm        lea    ecx, position.loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 744:
	__asm        mov    esi, this;
	__asm        lea    edi, position.matrix[0][0];
	__asm        add    esi, 0x18D;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 746:
	__asm        push   3;
	__asm        lea    eax, position.loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x171];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
// LINE 751:
// Block end:
_T175:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TrainSoundDriver;
// LINE 753:
	__asm        jmp    _T1b7;
// LINE 757:
_T182:
	__asm        jmp    near ptr 0x0052E4FA;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    _T1b2;

	__asm        push   0x2F5;
	__asm        push   0x5B7868;
	__asm        push   0x5B788C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1b7;
_T1b2:
	__asm        jmp    _T1b7;
// LINE 759:
_T1b7:
	__asm        jmp    near ptr 0x0052E52F;
}

// FUNCTION: COPTER_D 0x0052e534
void TrainClass::TrainSoundDriver() {
	int32_t vol_adj;
	struct Point3d vec;
	int32_t dist;

// LINE 783:
	__asm        jmp    near ptr 0x0052E545;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2D], 0;
	__asm        je     _T37;

	__asm        jmp    _T68;

	__asm        jmp    _T37;
_T37:
	__asm        jmp    _T46;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T68;
// LINE 785:
_T46:
	__asm        push   0x19;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T63;
// LINE 787:
	__asm        push   0x19;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 789:
_T63:
	__asm        jmp    _T138;
// LINE 793:
_T68:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xB9];
	__asm        mov    vec.x, eax;
// LINE 794:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xBD];
	__asm        mov    vec.y, eax;
// LINE 795:
	__asm        mov    eax, ViewState.world_pos.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xC1];
	__asm        mov    vec.z, eax;
// LINE 796:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 798:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    _T116;
// LINE 800:
	__asm        push   0x19;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _Tde;
// LINE 802:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0xB9;
	__asm        push   eax;
	__asm        push   0x19;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 806:
_Tde:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 809:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x19;
	__asm        call   S3SoundAdjVol;
	__asm        add    esp, 8;
// LINE 812:
	__asm        jmp    _T133;
// LINE 814:
_T116:
	__asm        push   0x19;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T133;
// LINE 816:
	__asm        push   0x19;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 819:
_T133:
	__asm        jmp    _T138;
_T138:
}

// FUNCTION: COPTER_D 0x0052e671
void TrainClass::ItterateFSM() {
// LINE 843:
	__asm        jmp    near ptr 0x0052E682;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     _T6c;

	__asm        jmp    near ptr 0x0052E696;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        jne    _T6c;
// LINE 845:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x71], eax;
// LINE 846:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x71], 0;
	__asm        jge    _T6c;
// LINE 848:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 1;
// LINE 850:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6D], 0x20000;
// LINE 851:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x65], 0;
// LINE 855:
_T6c:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::IsTrainOutOfCameraRange;
	__asm        test   eax, eax;
	__asm        je     _Tb1;

	__asm        jmp    near ptr 0x0052E6F2;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        jne    _Tb1;

	__asm        jmp    near ptr 0x0052E706;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        jne    _Tb1;
// LINE 858:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnPlaceTrain;
// LINE 859:
	__asm        jmp    _T29a;
// LINE 863:
_Tb1:
	__asm        jmp    near ptr 0x0052E727;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        je     _Tcd;
// LINE 865:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetCrashWhenReady;
// LINE 868:
_Tcd:
	__asm        jmp    near ptr 0x0052E743;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        je     _Tee;
// LINE 870:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TrainCrashMovement;
// LINE 871:
	__asm        jmp    _T29a;
// LINE 874:
_Tee:
	__asm        jmp    near ptr 0x0052E764;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+8];
	__asm        test   eax, eax;
	__asm        je     _T156;
// LINE 876:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::FinishedUturn;
	__asm        test   eax, eax;
	__asm        jne    _T11f;
// LINE 878:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustTrailingCars;
// LINE 879:
	__asm        jmp    _T29a;
// LINE 882:
_T11f:
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::MakeATurn;
// LINE 888:
	__asm        jmp    near ptr 0x0052E7B0;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jne    _T156;
// LINE 890:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustNextPosition;
// LINE 894:
_T156:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T27c;
// LINE 900:
_T169:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::MoveForward;
// LINE 901:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustTrailingCars;
// LINE 945:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::HaveIReachedNextLoc;
	__asm        test   eax, eax;
	__asm        je     _T252;
// LINE 950:
// Block start:
	struct _MISSION_PARMS mp;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 951:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x55;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 952:
	__asm        mov    eax, this;
	__asm        add    eax, 0x55;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x35;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 955:
	__asm        jmp    near ptr 0x0052E847;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     _T213;
// LINE 957:
	__asm        mov    mp.op, 0;
// LINE 958:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        mov    mp.id, eax;
// LINE 959:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    mp.maploc.x, eax;
// LINE 960:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x39];
	__asm        mov    mp.maploc.y, eax;
// LINE 961:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 964:
_T213:
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::MakeATurn;
// LINE 970:
	__asm        jmp    near ptr 0x0052E8A4;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+8];
	__asm        test   eax, eax;
	__asm        jne    _T252;
// LINE 972:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustNextPosition;
// LINE 973:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustTrailingCars;
// LINE 981:
// Block end:
_T252:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 983:
	__asm        jmp    _T295;
// LINE 993:
_T262:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::Stop;
// LINE 995:
	__asm        jmp    _T295;
// LINE 1001:
_T26f:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::Stop;
// LINE 1003:
	__asm        jmp    _T295;
_T27c:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T169;

	__asm        cmp    dword ptr [ebp-0x20], 1;
	__asm        je     _T262;

	__asm        jmp    _T26f;
// LINE 1024:
_T295:
	__asm        jmp    _T29a;
_T29a:
}

// FUNCTION: COPTER_D 0x0052e910
void TrainClass::SetCrashWhenReady() {
	int32_t deltaY;
	int32_t deltaX;
	int32_t dist;

// LINE 1048:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x35];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    deltaX, eax;
// LINE 1049:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x39];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    deltaY, eax;
// LINE 1050:
	__asm        mov    eax, deltaX;
	__asm        cmp    deltaY, eax;
	__asm        jge    _T4e;
// LINE 1051:
	__asm        mov    eax, deltaX;
	__asm        add    eax, eax;
	__asm        add    eax, deltaY;
	__asm        mov    dist, eax;
// LINE 1052:
	__asm        jmp    _T59;
// LINE 1053:
_T4e:
	__asm        mov    eax, deltaY;
	__asm        add    eax, eax;
	__asm        add    eax, deltaX;
	__asm        mov    dist, eax;
// LINE 1056:
_T59:
	__asm        cmp    dist, 0x14;
	__asm        jle    _T68;
// LINE 1057:
	__asm        jmp    _T8f;
// LINE 1059:
_T68:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xA], 0;
// LINE 1060:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 1;
// LINE 1062:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x6D], 0x20000;
// LINE 1063:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x65], 0;
// LINE 1065:
	__asm        jmp    _T8f;
_T8f:
}

// FUNCTION: COPTER_D 0x0052e9a4
void TrainClass::TrainCrashMovement() {
	int32_t num_debris;
	struct _CELL_INFO* cptr;
	int32_t j;
	struct _MISSION_PARMS mp;
	struct Point3d loc;
	struct Point3d vec;
	int32_t refmat[4][4];
	int32_t distance;
	int32_t speed;

// LINE 1086:
	__asm        mov    eax, LoopTime;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2D];
	__asm        sar    eax, 1;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    distance, eax;
// LINE 1095:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x39];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x88], eax;
	__asm        cmp    dword ptr [ebp-0x88], 0;
	__asm        jne    _T86;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T8b;
_T86:
	__asm        jmp    _T8b;
_T8b:
	__asm        jmp    near ptr 0x0052EA34;

	__asm        mov    eax, [ebp-0x88];
	__asm        mov    cptr, eax;
// LINE 1100:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    loc.x, eax;
// LINE 1101:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    loc.y, eax;
// LINE 1102:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    loc.z, eax;
// LINE 1105:
	__asm        mov    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x18], eax;
// LINE 1106:
	__asm        mov    eax, loc.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x1C], eax;
// LINE 1107:
	__asm        mov    eax, loc.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x20], eax;
// LINE 1108:
	__asm        mov    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        add    [ecx+0x18], eax;
// LINE 1109:
	__asm        mov    eax, loc.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        add    [ecx+0x1C], eax;
// LINE 1110:
	__asm        mov    eax, loc.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        add    [ecx+0x20], eax;
// LINE 1111:
	__asm        mov    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    [ecx+0x18], eax;
// LINE 1112:
	__asm        mov    eax, loc.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    [ecx+0x1C], eax;
// LINE 1113:
	__asm        mov    eax, loc.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    [ecx+0x20], eax;
// LINE 1115:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x640000;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1116:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x500000;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1117:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x320000;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1119:
	__asm        xor    eax, eax;
	__asm        sub    eax, G_AvLoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x6D], eax;
// LINE 1122:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x6D], 0;
	__asm        jle    _T2c4;
// LINE 1124:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x65];
// LINE 1125:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x65];
	__asm        and    eax, 3;
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T293;
// LINE 1128:
_T220:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionSmokeStart;
	__asm        add    esp, 0xC;
// LINE 1129:
	__asm        jmp    _T2bf;
// LINE 1131:
_T243:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionSmokeStart;
	__asm        add    esp, 0xC;
// LINE 1132:
	__asm        jmp    _T2bf;
// LINE 1134:
_T266:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionSmokeStart;
	__asm        add    esp, 0xC;
// LINE 1135:
	__asm        jmp    _T2bf;
// LINE 1137:
	__asm        jmp    _T2bf;
// LINE 1138:
	__asm        jmp    _T2bf;
_T293:
	__asm        cmp    dword ptr [ebp-0x90], 0;
	__asm        je     _T220;

	__asm        cmp    dword ptr [ebp-0x90], 1;
	__asm        je     _T243;

	__asm        cmp    dword ptr [ebp-0x90], 2;
	__asm        je     _T266;

	__asm        jmp    _T2bf;
// LINE 1140:
_T2bf:
	__asm        jmp    _T7a0;
// LINE 1144:
_T2c4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 1145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 1146:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 1147:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionStart;
	__asm        add    esp, 0x18;
// LINE 1149:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        push   0x1A;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 1192:
	__asm        mov    num_debris, 3;
// LINE 1193:
	__asm        mov    j, 0;
	__asm        jmp    _T377;
_T374:
	__asm        inc    j;
_T377:
	__asm        mov    eax, j;
	__asm        cmp    num_debris, eax;
	__asm        jle    _T456;
// LINE 1195:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1196:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1197:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1198:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1199:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1210:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1211:
	__asm        jmp    _T374;
// LINE 1214:
_T456:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 1215:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 1216:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 1217:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionStart;
	__asm        add    esp, 0x18;
// LINE 1226:
	__asm        mov    num_debris, 3;
// LINE 1227:
	__asm        mov    j, 0;
	__asm        jmp    _T4ed;
_T4ea:
	__asm        inc    j;
_T4ed:
	__asm        mov    eax, j;
	__asm        cmp    num_debris, eax;
	__asm        jle    _T5cc;
// LINE 1229:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1230:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1231:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1232:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1233:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1244:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1245:
	__asm        jmp    _T4ea;
// LINE 1248:
_T5cc:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x18];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 1249:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 1250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x20];
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 1251:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionStart;
	__asm        add    esp, 0x18;
// LINE 1260:
	__asm        mov    num_debris, 3;
// LINE 1261:
	__asm        mov    j, 0;
	__asm        jmp    _T663;
_T660:
	__asm        inc    j;
_T663:
	__asm        mov    eax, j;
	__asm        cmp    num_debris, eax;
	__asm        jle    _T742;
// LINE 1263:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1264:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1265:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1266:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1267:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        push   2;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        add    eax, 0x18;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1279:
	__asm        jmp    _T660;
// LINE 1281:
_T742:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 0;
// LINE 1282:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xC], 0;
// LINE 1285:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        push   eax;
	__asm        call   KillMissionPeople;
	__asm        add    esp, 4;
// LINE 1287:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnPlaceTrain;
// LINE 1290:
	__asm        mov    mp.op, 0x1D;
// LINE 1291:
	__asm        mov    mp.i2num, 0;
// LINE 1292:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x69];
	__asm        mov    mp.id, eax;
// LINE 1293:
	__asm        mov    mp.flags, 0;
// LINE 1294:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1298:
_T7a0:
	__asm        jmp    near ptr 0x0052F149;
}

// FUNCTION: COPTER_D 0x0052f14e
void TrainClass::MakeUturn() {
// LINE 1321:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0;
	__asm        jne    _T1e;
// LINE 1322:
	__asm        jmp    _T241;
// LINE 1326:
_T1e:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 1;
// LINE 1327:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x65], 0;
// LINE 1331:
	__asm        jmp    near ptr 0x0052F182;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T7c;

	__asm        jmp    near ptr 0x0052F1A1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x12;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 2;
	__asm        or     eax, ecx;
	__asm        je     _T7c;
// LINE 1333:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 0xC;
// LINE 1335:
	__asm        jmp    _T23c;
_T7c:
	__asm        jmp    near ptr 0x0052F1CF;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _Tc9;

	__asm        jmp    near ptr 0x0052F1EE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _Tc9;
// LINE 1337:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 6;
// LINE 1339:
	__asm        jmp    _T23c;
_Tc9:
	__asm        jmp    near ptr 0x0052F21C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T116;

	__asm        jmp    near ptr 0x0052F23B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x12;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 2;
	__asm        or     eax, ecx;
	__asm        je     _T116;
// LINE 1341:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 9;
// LINE 1343:
	__asm        jmp    _T23c;
_T116:
	__asm        jmp    near ptr 0x0052F269;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T163;

	__asm        jmp    near ptr 0x0052F288;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T163;
// LINE 1345:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 3;
// LINE 1347:
	__asm        jmp    _T23c;
_T163:
	__asm        jmp    near ptr 0x0052F2B6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T191;
// LINE 1349:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 4;
// LINE 1351:
	__asm        jmp    _T23c;
_T191:
	__asm        jmp    near ptr 0x0052F2E4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T1bf;
// LINE 1353:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 1;
// LINE 1355:
	__asm        jmp    _T23c;
_T1bf:
	__asm        jmp    near ptr 0x0052F312;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x12;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 2;
	__asm        or     eax, ecx;
	__asm        je     _T1ed;
// LINE 1357:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 8;
// LINE 1359:
	__asm        jmp    _T23c;
_T1ed:
	__asm        jmp    near ptr 0x0052F340;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T21b;
// LINE 1361:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x29], 2;
// LINE 1363:
	__asm        jmp    _T23c;
// LINE 1365:
_T21b:
	__asm        push   0x555;
	__asm        push   0x5B78A4;
	__asm        push   0x5B78C8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T23c;

	__asm        jmp    _T23c;
// LINE 1368:
_T23c:
	__asm        jmp    _T241;
_T241:
}

// FUNCTION: COPTER_D 0x0052f394
int32_t TrainClass::FinishedUturn() {
// LINE 1389:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x65], 0xA;
// LINE 1390:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x65], 0xB4;
	__asm        jle    _T40;
// LINE 1392:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 1393:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x29];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11], eax;
// LINE 1394:
	__asm        mov    eax, 1;
	__asm        jmp    _T82;
// LINE 1397:
_T40:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x640000;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1398:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x15;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1400:
	__asm        xor    eax, eax;
	__asm        jmp    _T82;
// LINE 1402:
_T82:
}

// FUNCTION: COPTER_D 0x0052f41b
void TrainClass::AdjustSpeed() {
	static const int32_t speedAdjustor = { /* <data@0x005b7838> */ };

// LINE 1424:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x31];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2D], eax;
// LINE 1426:
	__asm        cmp    speedAdjustor, 0;
	__asm        jne    _T2f;
// LINE 1428:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 1;
// LINE 1430:
_T2f:
	__asm        jmp    near ptr 0x0052F44F;
}

// FUNCTION: COPTER_D 0x0052f454
enum TrainClass::StoppedReasons TrainClass::IsPathClear() {
	struct Point2d trainLocation;
	struct Point3d trainHeading;

// LINE 1456:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    ecx, [ecx+0x18];
	__asm        add    ecx, eax;
	__asm        mov    trainHeading.x, ecx;
// LINE 1457:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    ecx, [ecx+0x1C];
	__asm        add    ecx, eax;
	__asm        mov    trainHeading.y, ecx;
// LINE 1458:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    ecx, [ecx+0x20];
	__asm        add    ecx, eax;
	__asm        mov    trainHeading.z, ecx;
// LINE 1460:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    trainLocation.x, eax;
// LINE 1461:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    trainLocation.y, eax;
// LINE 1463:
	__asm        lea    eax, trainHeading.x;
	__asm        push   eax;
	__asm        lea    eax, trainLocation.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::CheckDynamicObjectsAt;
	__asm        jmp    near ptr 0x0052F52A;
// LINE 1464:
}

// FUNCTION: COPTER_D 0x0052f52f
enum TrainClass::StoppedReasons TrainClass::CheckDynamicObjectsAt(const struct Point2d& __formal, const struct Point3d& collisionPoint) {
	int32_t combinedradius;
	int32_t xdiff;
	int32_t zdiff;
	unsigned short cellType;
	struct _CELL_INFO* currentCell;
	struct _DYOBJ_INST* currentObject;
	int32_t ydiff;

// LINE 1486:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        test   eax, eax;
	__asm        jl     _T68;

	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, collisionPoint;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 0x16;
	__asm        test   eax, eax;
	__asm        jl     _T68;

	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T68;

	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, collisionPoint;
	__asm        sub    eax, [ecx+8];
	__asm        sar    eax, 0x16;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T73;
_T68:
	__asm        mov    cellType, 0;
	__asm        jmp    _Td6;
_T73:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, 0x20000000;
	__asm        mov    edx, collisionPoint;
	__asm        sub    ecx, [edx+8];
	__asm        sar    ecx, 0x16;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, collisionPoint;
	__asm        mov    ecx, [ecx];
	__asm        add    ecx, 0x20000000;
	__asm        sar    ecx, 0x16;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, 0x20000000;
	__asm        mov    ebx, collisionPoint;
	__asm        sub    edx, [ebx+8];
	__asm        sar    edx, 0x16;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    cellType, ax;
	__asm        jmp    _Td6;
// LINE 1487:
_Td6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x39];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    _T120;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T125;
_T120:
	__asm        jmp    _T125;
_T125:
	__asm        jmp    near ptr 0x0052F659;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    currentCell, eax;
// LINE 1490:
	__asm        cmp    currentCell, 0;
	__asm        jne    _T144;
// LINE 1492:
	__asm        mov    eax, 4;
	__asm        jmp    _T462;
// LINE 1497:
_T144:
	__asm        mov    eax, currentCell;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 1500:
_T14d:
	__asm        cmp    currentObject, 0;
	__asm        je     _T283;
// LINE 1503:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1CD], ecx;
	__asm        jne    _T17b;
// LINE 1505:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1506:
	__asm        jmp    _T14d;
// LINE 1508:
	__asm        jmp    _T1be;
_T17b:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1D1], ecx;
	__asm        jne    _T19f;
// LINE 1510:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1511:
	__asm        jmp    _T14d;
// LINE 1513:
	__asm        jmp    _T1be;
_T19f:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1D5], ecx;
	__asm        jne    _T1be;
// LINE 1515:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1516:
	__asm        jmp    _T14d;
// LINE 1520:
_T1be:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     _T1da;
// LINE 1522:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1523:
	__asm        jmp    _T14d;
// LINE 1528:
_T1da:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x18];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 1529:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x1C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 1530:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x20];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    zdiff, eax;
// LINE 1532:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    combinedradius, eax;
// LINE 1533:
	__asm        add    combinedradius, 0x50000;
// LINE 1536:
	__asm        mov    eax, combinedradius;
	__asm        cmp    xdiff, eax;
	__asm        jg     _T276;

	__asm        mov    eax, combinedradius;
	__asm        cmp    ydiff, eax;
	__asm        jg     _T276;

	__asm        mov    eax, zdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     _T276;
// LINE 1540:
	__asm        jmp    near ptr 0x0052F77D;

	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T26c;
// LINE 1545:
	__asm        mov    eax, 3;
	__asm        jmp    _T462;
// LINE 1547:
	__asm        jmp    _T276;
// LINE 1551:
_T26c:
	__asm        mov    eax, 1;
	__asm        jmp    _T462;
// LINE 1556:
_T276:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1557:
	__asm        jmp    _T14d;
// LINE 1560:
_T283:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x55];
	__asm        cmp    [eax+0x35], ecx;
	__asm        jne    _T2ae;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x59];
	__asm        cmp    [eax+0x39], ecx;
	__asm        jne    _T2ae;
// LINE 1561:
	__asm        xor    eax, eax;
	__asm        jmp    _T462;
// LINE 1566:
_T2ae:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x59];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x55];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T2f8;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2fd;
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        jmp    near ptr 0x0052F831;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    currentCell, eax;
// LINE 1568:
	__asm        cmp    currentCell, 0;
	__asm        jne    _T31c;
// LINE 1570:
	__asm        mov    eax, 4;
	__asm        jmp    _T462;
// LINE 1574:
_T31c:
	__asm        mov    eax, currentCell;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 1577:
_T325:
	__asm        cmp    currentObject, 0;
	__asm        je     _T45b;
// LINE 1580:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1CD], ecx;
	__asm        jne    _T353;
// LINE 1582:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1583:
	__asm        jmp    _T325;
// LINE 1585:
	__asm        jmp    _T396;
_T353:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1D1], ecx;
	__asm        jne    _T377;
// LINE 1587:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1588:
	__asm        jmp    _T325;
// LINE 1590:
	__asm        jmp    _T396;
_T377:
	__asm        mov    eax, this;
	__asm        mov    ecx, currentObject;
	__asm        cmp    [eax+0x1D5], ecx;
	__asm        jne    _T396;
// LINE 1592:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1593:
	__asm        jmp    _T325;
// LINE 1597:
_T396:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     _T3b2;
// LINE 1599:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1600:
	__asm        jmp    _T325;
// LINE 1604:
_T3b2:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x18];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 1605:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x1C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 1606:
	__asm        mov    eax, collisionPoint;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x20];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    zdiff, eax;
// LINE 1609:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    combinedradius, eax;
// LINE 1610:
	__asm        add    combinedradius, 0x50000;
// LINE 1613:
	__asm        mov    eax, combinedradius;
	__asm        cmp    xdiff, eax;
	__asm        jg     _T44e;

	__asm        mov    eax, combinedradius;
	__asm        cmp    ydiff, eax;
	__asm        jg     _T44e;

	__asm        mov    eax, zdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     _T44e;
// LINE 1616:
	__asm        jmp    near ptr 0x0052F955;

	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _T444;
// LINE 1621:
	__asm        mov    eax, 3;
	__asm        jmp    _T462;
// LINE 1623:
	__asm        jmp    _T44e;
// LINE 1627:
_T444:
	__asm        mov    eax, 1;
	__asm        jmp    _T462;
// LINE 1632:
_T44e:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1633:
	__asm        jmp    _T325;
// LINE 1637:
_T45b:
	__asm        xor    eax, eax;
	__asm        jmp    _T462;
// LINE 1638:
_T462:
}

// FUNCTION: COPTER_D 0x0052f998
int32_t TrainClass::IsTrainOutOfCameraRange() {
	int32_t deltaY;
	int32_t deltaX;

// LINE 1661:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x35];
	__asm        mov    deltaX, eax;
// LINE 1662:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x39];
	__asm        mov    deltaY, eax;
// LINE 1667:
_T28:
	__asm        cmp    deltaX, 0x80;
	__asm        jle    _T41;
// LINE 1669:
	__asm        sub    deltaX, 0x100;
// LINE 1670:
	__asm        jmp    _T28;
// LINE 1671:
_T41:
	__asm        cmp    deltaX, 0xFFFFFF80;
	__asm        jge    _T57;
// LINE 1673:
	__asm        add    deltaX, 0x100;
// LINE 1674:
	__asm        jmp    _T41;
// LINE 1676:
_T57:
	__asm        cmp    deltaY, 0x80;
	__asm        jle    _T70;
// LINE 1678:
	__asm        sub    deltaY, 0x100;
// LINE 1679:
	__asm        jmp    _T57;
// LINE 1680:
_T70:
	__asm        cmp    deltaY, 0xFFFFFF80;
	__asm        jge    _T86;
// LINE 1682:
	__asm        add    deltaY, 0x100;
// LINE 1683:
	__asm        jmp    _T70;
// LINE 1685:
_T86:
	__asm        cmp    deltaX, 0;
	__asm        jge    _T98;
// LINE 1687:
	__asm        mov    eax, deltaX;
	__asm        neg    eax;
	__asm        mov    deltaX, eax;
// LINE 1689:
_T98:
	__asm        cmp    deltaY, 0;
	__asm        jge    _Taa;
// LINE 1691:
	__asm        mov    eax, deltaY;
	__asm        neg    eax;
	__asm        mov    deltaY, eax;
// LINE 1695:
_Taa:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        cmp    eax, deltaX;
	__asm        jl     _Td2;

	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        cmp    eax, deltaY;
	__asm        jge    _Te1;
// LINE 1697:
_Td2:
	__asm        mov    eax, 1;
	__asm        jmp    _Te8;
// LINE 1699:
	__asm        jmp    _Te8;
// LINE 1701:
_Te1:
	__asm        xor    eax, eax;
	__asm        jmp    _Te8;
// LINE 1703:
_Te8:
}

// FUNCTION: COPTER_D 0x0052fa85
void TrainClass::SetTrainDirection(unsigned short tileType) {
	static const <NoType> = { /* <data@0x00530db4> */ };
	static const <NoType> = { /* <data@0x00530381> */ };

// LINE 1723:
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 1724:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0;
// LINE 1726:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T859;
// LINE 1730:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T61;
// LINE 1732:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 1733:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1735:
	__asm        jmp    _T71;
// LINE 1737:
_T61:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 1738:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1740:
_T71:
	__asm        jmp    _T93e;
// LINE 1744:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T9b;
// LINE 1746:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 1747:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1749:
	__asm        jmp    _Tab;
// LINE 1751:
_T9b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 1752:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1754:
_Tab:
	__asm        jmp    _T93e;
// LINE 1758:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _Td5;
// LINE 1760:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 1761:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1763:
	__asm        jmp    _Te5;
// LINE 1765:
_Td5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 1766:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1768:
_Te5:
	__asm        jmp    _T93e;
// LINE 1772:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T10f;
// LINE 1774:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 1775:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1777:
	__asm        jmp    _T11f;
// LINE 1779:
_T10f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 1780:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1782:
_T11f:
	__asm        jmp    _T93e;
// LINE 1786:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T149;
// LINE 1788:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1789:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1791:
	__asm        jmp    _T159;
// LINE 1793:
_T149:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1794:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1796:
_T159:
	__asm        jmp    _T93e;
// LINE 1800:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T183;
// LINE 1802:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1803:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1805:
	__asm        jmp    _T193;
// LINE 1807:
_T183:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1808:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1810:
_T193:
	__asm        jmp    _T93e;
// LINE 1814:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T1bd;
// LINE 1816:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1817:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1819:
	__asm        jmp    _T1cd;
// LINE 1821:
_T1bd:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x14;
// LINE 1822:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1824:
_T1cd:
	__asm        jmp    _T93e;
// LINE 1828:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T1f7;
// LINE 1830:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x11;
// LINE 1831:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1833:
	__asm        jmp    _T207;
// LINE 1835:
_T1f7:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1836:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1838:
_T207:
	__asm        jmp    _T93e;
// LINE 1842:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T231;
// LINE 1844:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x18;
// LINE 1845:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1847:
	__asm        jmp    _T241;
// LINE 1849:
_T231:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1850:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1852:
_T241:
	__asm        jmp    _T93e;
// LINE 1856:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T26b;
// LINE 1858:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1859:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1861:
	__asm        jmp    _T27b;
// LINE 1863:
_T26b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x12;
// LINE 1864:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1866:
_T27b:
	__asm        jmp    _T93e;
// LINE 1870:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T2a5;
// LINE 1872:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1873:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1875:
	__asm        jmp    _T2b5;
// LINE 1877:
_T2a5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x14;
// LINE 1878:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1880:
_T2b5:
	__asm        jmp    _T93e;
// LINE 1884:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T2df;
// LINE 1886:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x11;
// LINE 1887:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1889:
	__asm        jmp    _T2ef;
// LINE 1891:
_T2df:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1892:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1894:
_T2ef:
	__asm        jmp    _T93e;
// LINE 1898:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T319;
// LINE 1900:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x18;
// LINE 1901:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1903:
	__asm        jmp    _T329;
// LINE 1905:
_T319:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1906:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1908:
_T329:
	__asm        jmp    _T93e;
// LINE 1912:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T353;
// LINE 1914:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1915:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1917:
	__asm        jmp    _T363;
// LINE 1919:
_T353:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x12;
// LINE 1920:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1922:
_T363:
	__asm        jmp    _T93e;
// LINE 1926:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x14], edx;
	__asm        jmp    _T3c4;
// LINE 1929:
_T380:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1930:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1931:
	__asm        jmp    _T3e7;
// LINE 1933:
_T395:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1934:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1935:
	__asm        jmp    _T3e7;
// LINE 1937:
_T3aa:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1938:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1939:
	__asm        jmp    _T3e7;
// LINE 1940:
	__asm        jmp    _T3e7;
_T3c4:
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     _T380;

	__asm        cmp    dword ptr [ebp-0x14], 1;
	__asm        je     _T395;

	__asm        cmp    dword ptr [ebp-0x14], 2;
	__asm        je     _T3aa;

	__asm        jmp    _T3e7;
// LINE 1941:
_T3e7:
	__asm        jmp    _T93e;
// LINE 1945:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x18], edx;
	__asm        jmp    _T448;
// LINE 1948:
_T404:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1950:
	__asm        jmp    _T46b;
// LINE 1952:
_T419:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1953:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1954:
	__asm        jmp    _T46b;
// LINE 1956:
_T42e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1957:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1958:
	__asm        jmp    _T46b;
// LINE 1959:
	__asm        jmp    _T46b;
_T448:
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     _T404;

	__asm        cmp    dword ptr [ebp-0x18], 1;
	__asm        je     _T419;

	__asm        cmp    dword ptr [ebp-0x18], 2;
	__asm        je     _T42e;

	__asm        jmp    _T46b;
// LINE 1960:
_T46b:
	__asm        jmp    _T93e;
// LINE 1964:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x1C], edx;
	__asm        jmp    _T4cc;
// LINE 1967:
_T488:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1968:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1969:
	__asm        jmp    _T4ef;
// LINE 1971:
_T49d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 1972:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 1973:
	__asm        jmp    _T4ef;
// LINE 1975:
_T4b2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1976:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1977:
	__asm        jmp    _T4ef;
// LINE 1978:
	__asm        jmp    _T4ef;
_T4cc:
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     _T488;

	__asm        cmp    dword ptr [ebp-0x1C], 1;
	__asm        je     _T49d;

	__asm        cmp    dword ptr [ebp-0x1C], 2;
	__asm        je     _T4b2;

	__asm        jmp    _T4ef;
// LINE 1979:
_T4ef:
	__asm        jmp    _T93e;
// LINE 1983:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x20], edx;
	__asm        jmp    _T550;
// LINE 1986:
_T50c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 1987:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 1988:
	__asm        jmp    _T573;
// LINE 1990:
_T521:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 1991:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 1992:
	__asm        jmp    _T573;
// LINE 1994:
_T536:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 1995:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 1996:
	__asm        jmp    _T573;
// LINE 1997:
	__asm        jmp    _T573;
_T550:
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T50c;

	__asm        cmp    dword ptr [ebp-0x20], 1;
	__asm        je     _T521;

	__asm        cmp    dword ptr [ebp-0x20], 2;
	__asm        je     _T536;

	__asm        jmp    _T573;
// LINE 1998:
_T573:
	__asm        jmp    _T93e;
// LINE 2002:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        and    eax, 3;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    _T5e4;
// LINE 2005:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2006:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2007:
	__asm        jmp    _T608;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2010:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2011:
	__asm        jmp    _T608;
// LINE 2013:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2014:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2015:
	__asm        jmp    _T608;
// LINE 2017:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2018:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2019:
	__asm        jmp    _T608;
// LINE 2020:
	__asm        jmp    _T608;
_T5e4:
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     _T608;

	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    SwitchPointers5439613[0][eax*4];
// Switch pointers
// LINE 2021:
_T608:
	__asm        jmp    _T93e;
// LINE 2026:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T62f;
// LINE 2028:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2029:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2031:
	__asm        jmp    _T63f;
// LINE 2033:
_T62f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2034:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2036:
_T63f:
	__asm        jmp    _T93e;
// LINE 2041:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T666;
// LINE 2043:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2044:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2046:
	__asm        jmp    _T676;
// LINE 2048:
_T666:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2049:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2051:
_T676:
	__asm        jmp    _T93e;
// LINE 2056:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T69d;
// LINE 2058:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2059:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2061:
	__asm        jmp    _T6ad;
// LINE 2063:
_T69d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2064:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2066:
_T6ad:
	__asm        jmp    _T93e;
// LINE 2071:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T6d4;
// LINE 2073:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2074:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2076:
	__asm        jmp    _T6e4;
// LINE 2078:
_T6d4:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2079:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2081:
_T6e4:
	__asm        jmp    _T93e;
// LINE 2086:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T70b;
// LINE 2088:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2089:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2091:
	__asm        jmp    _T71b;
// LINE 2093:
_T70b:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2094:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2096:
_T71b:
	__asm        jmp    _T93e;
// LINE 2101:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T742;
// LINE 2103:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2104:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2106:
	__asm        jmp    _T752;
// LINE 2108:
_T742:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2109:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2111:
_T752:
	__asm        jmp    _T93e;
// LINE 2116:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T779;
// LINE 2118:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2121:
	__asm        jmp    _T789;
// LINE 2123:
_T779:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2124:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2126:
_T789:
	__asm        jmp    _T93e;
// LINE 2131:
_T78e:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T7b0;
// LINE 2133:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2134:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2136:
	__asm        jmp    _T7c0;
// LINE 2138:
_T7b0:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2139:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2141:
_T7c0:
	__asm        jmp    _T93e;
// LINE 2146:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T7e7;
// LINE 2148:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2149:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2151:
	__asm        jmp    _T7f7;
// LINE 2153:
_T7e7:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2154:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2156:
_T7f7:
	__asm        jmp    _T93e;
// LINE 2161:
_T7fc:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T81e;
// LINE 2163:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2164:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2166:
	__asm        jmp    _T82e;
// LINE 2168:
_T81e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2169:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2171:
_T82e:
	__asm        jmp    _T93e;
// LINE 2175:
_T833:
	__asm        push   0x87F;
	__asm        push   0x5B78D0;
	__asm        push   0x5B78F4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T854;

	__asm        jmp    _T854;
// LINE 2177:
_T854:
	__asm        jmp    _T93e;
_T859:
	__asm        cmp    dword ptr [ebp-0x10], 0x805A;
	__asm        jg     _T92c;

	__asm        je     _T78e;

	__asm        sub    dword ptr [ebp-0x10], 0x2C;
	__asm        cmp    dword ptr [ebp-0x10], 0x2F;
	__asm        ja     _T833;

	__asm        mov    eax, [ebp-0x10];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5440385[0][eax];
	__asm        jmp    SwitchPointers5440273[0][ecx*4];
// Switch pointers
// Switch table

	__asm        jmp    _T833;
// LINE 2179:
_T93e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x55], 0;
	__asm        jl     _T978;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x59], 0;
	__asm        jl     _T978;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x55], 0x80;
	__asm        jge    _T978;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x59], 0x80;
	__asm        jl     _T983;
_T978:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        jmp    _T9c7;
_T983:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x55];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x59];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x55];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x59];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-4], ax;
	__asm        jmp    _T9c7;
_T9c7:
	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T9eb;

	__asm        jmp    _Ta6e;

	__asm        jmp    _Ta73;

	__asm        jmp    _Ta6e;

	__asm        jmp    _Ta64;
_T9eb:
	__asm        cmp    dword ptr [ebp-0x28], 0x48;
	__asm        jg     _Ta18;

	__asm        cmp    dword ptr [ebp-0x28], 0x45;
	__asm        jge    _Ta6e;

	__asm        cmp    dword ptr [ebp-0x28], 0x2C;
	__asm        jl     _Ta73;

	__asm        cmp    dword ptr [ebp-0x28], 0x3E;
	__asm        jle    _Ta6e;

	__asm        jmp    _Ta73;
_Ta18:
	__asm        cmp    dword ptr [ebp-0x28], 0x5B;
	__asm        jg     _Ta45;

	__asm        cmp    dword ptr [ebp-0x28], 0x5A;
	__asm        jge    _Ta6e;

	__asm        cmp    dword ptr [ebp-0x28], 0x4D;
	__asm        jl     _Ta73;

	__asm        cmp    dword ptr [ebp-0x28], 0x4E;
	__asm        jle    _Ta6e;

	__asm        jmp    _Ta73;
_Ta45:
	__asm        cmp    dword ptr [ebp-0x28], 0x805A;
	__asm        jl     _Ta73;

	__asm        cmp    dword ptr [ebp-0x28], 0x805B;
	__asm        jle    _Ta6e;

	__asm        jmp    _Ta73;
_Ta64:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _Ta73;
// LINE 2180:
_Ta6e:
	__asm        jmp    _T1376;
// LINE 2183:
_Ta73:
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 2184:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    _T128c;
// LINE 2188:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 6;
	__asm        jne    _Tabb;
// LINE 2190:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 2191:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2193:
	__asm        jmp    _Tacb;
// LINE 2195:
_Tabb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 2196:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2198:
_Tacb:
	__asm        jmp    _T1371;
// LINE 2202:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0xC;
	__asm        jne    _Taf2;
// LINE 2204:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 2205:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2207:
	__asm        jmp    _Tb02;
// LINE 2209:
_Taf2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 2210:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2212:
_Tb02:
	__asm        jmp    _T1371;
// LINE 2216:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 6;
	__asm        jne    _Tb29;
// LINE 2218:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 2219:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2221:
	__asm        jmp    _Tb39;
// LINE 2223:
_Tb29:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 2224:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2226:
_Tb39:
	__asm        jmp    _T1371;
// LINE 2230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0xC;
	__asm        jne    _Tb60;
// LINE 2232:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 2233:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2235:
	__asm        jmp    _Tb70;
// LINE 2237:
_Tb60:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 2238:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2240:
_Tb70:
	__asm        jmp    _T1371;
// LINE 2244:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 1;
	__asm        jne    _Tb97;
// LINE 2246:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2247:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2249:
	__asm        jmp    _Tba7;
// LINE 2251:
_Tb97:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2252:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2254:
_Tba7:
	__asm        jmp    _T1371;
// LINE 2258:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 2;
	__asm        jne    _Tbce;
// LINE 2260:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2261:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2263:
	__asm        jmp    _Tbde;
// LINE 2265:
_Tbce:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2266:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2268:
_Tbde:
	__asm        jmp    _T1371;
// LINE 2272:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0x14;
	__asm        jne    _Tc05;
// LINE 2274:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2275:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2277:
	__asm        jmp    _Tc15;
// LINE 2279:
_Tc05:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x14;
// LINE 2280:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2282:
_Tc15:
	__asm        jmp    _T1371;
// LINE 2286:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 4;
	__asm        jne    _Tc3c;
// LINE 2288:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x11;
// LINE 2289:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2291:
	__asm        jmp    _Tc4c;
// LINE 2293:
_Tc3c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2294:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2296:
_Tc4c:
	__asm        jmp    _T1371;
// LINE 2300:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 2;
	__asm        jne    _Tc73;
// LINE 2302:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x18;
// LINE 2303:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2305:
	__asm        jmp    _Tc83;
// LINE 2307:
_Tc73:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2308:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2310:
_Tc83:
	__asm        jmp    _T1371;
// LINE 2314:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0x18;
	__asm        jne    _Tcaa;
// LINE 2316:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2317:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2319:
	__asm        jmp    _Tcba;
// LINE 2321:
_Tcaa:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x12;
// LINE 2322:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2324:
_Tcba:
	__asm        jmp    _T1371;
// LINE 2328:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0x14;
	__asm        jne    _Tce1;
// LINE 2330:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2331:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2333:
	__asm        jmp    _Tcf1;
// LINE 2335:
_Tce1:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x14;
// LINE 2336:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2338:
_Tcf1:
	__asm        jmp    _T1371;
// LINE 2342:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 4;
	__asm        jne    _Td18;
// LINE 2344:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x11;
// LINE 2345:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2347:
	__asm        jmp    _Td28;
// LINE 2349:
_Td18:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2350:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2352:
_Td28:
	__asm        jmp    _T1371;
// LINE 2356:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 2;
	__asm        jne    _Td4f;
// LINE 2358:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x18;
// LINE 2359:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2361:
	__asm        jmp    _Td5f;
// LINE 2363:
_Td4f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2364:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2366:
_Td5f:
	__asm        jmp    _T1371;
// LINE 2370:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11], 0x18;
	__asm        jne    _Td86;
// LINE 2372:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2373:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2375:
	__asm        jmp    _Td96;
// LINE 2377:
_Td86:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0x12;
// LINE 2378:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2380:
_Td96:
	__asm        jmp    _T1371;
// LINE 2384:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x30], edx;
	__asm        jmp    _Tdf7;
// LINE 2387:
_Tdb3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2388:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2389:
	__asm        jmp    _Te1a;
// LINE 2391:
_Tdc8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2392:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2393:
	__asm        jmp    _Te1a;
// LINE 2395:
_Tddd:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2396:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2397:
	__asm        jmp    _Te1a;
// LINE 2398:
	__asm        jmp    _Te1a;
_Tdf7:
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     _Tdb3;

	__asm        cmp    dword ptr [ebp-0x30], 1;
	__asm        je     _Tdc8;

	__asm        cmp    dword ptr [ebp-0x30], 2;
	__asm        je     _Tddd;

	__asm        jmp    _Te1a;
// LINE 2399:
_Te1a:
	__asm        jmp    _T1371;
// LINE 2403:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x34], edx;
	__asm        jmp    _Te7b;
// LINE 2406:
_Te37:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2407:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2408:
	__asm        jmp    _Te9e;
// LINE 2410:
_Te4c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2411:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2412:
	__asm        jmp    _Te9e;
// LINE 2414:
_Te61:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2415:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2416:
	__asm        jmp    _Te9e;
// LINE 2417:
	__asm        jmp    _Te9e;
_Te7b:
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _Te37;

	__asm        cmp    dword ptr [ebp-0x34], 1;
	__asm        je     _Te4c;

	__asm        cmp    dword ptr [ebp-0x34], 2;
	__asm        je     _Te61;

	__asm        jmp    _Te9e;
// LINE 2418:
_Te9e:
	__asm        jmp    _T1371;
// LINE 2422:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x38], edx;
	__asm        jmp    _Teff;
// LINE 2425:
_Tebb:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2426:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2427:
	__asm        jmp    _Tf22;
// LINE 2429:
_Ted0:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2430:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2431:
	__asm        jmp    _Tf22;
// LINE 2433:
_Tee5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2434:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2435:
	__asm        jmp    _Tf22;
// LINE 2436:
	__asm        jmp    _Tf22;
_Teff:
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _Tebb;

	__asm        cmp    dword ptr [ebp-0x38], 1;
	__asm        je     _Ted0;

	__asm        cmp    dword ptr [ebp-0x38], 2;
	__asm        je     _Tee5;

	__asm        jmp    _Tf22;
// LINE 2437:
_Tf22:
	__asm        jmp    _T1371;
// LINE 2441:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0x3C], edx;
	__asm        jmp    _Tf83;
// LINE 2444:
_Tf3f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2445:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2446:
	__asm        jmp    _Tfa6;
// LINE 2448:
_Tf54:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2449:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2450:
	__asm        jmp    _Tfa6;
// LINE 2452:
_Tf69:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2453:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2454:
	__asm        jmp    _Tfa6;
// LINE 2455:
	__asm        jmp    _Tfa6;
_Tf83:
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     _Tf3f;

	__asm        cmp    dword ptr [ebp-0x3C], 1;
	__asm        je     _Tf54;

	__asm        cmp    dword ptr [ebp-0x3C], 2;
	__asm        je     _Tf69;

	__asm        jmp    _Tfa6;
// LINE 2456:
_Tfa6:
	__asm        jmp    _T1371;
// LINE 2460:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        and    eax, 3;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T1017;
// LINE 2463:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2464:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2465:
	__asm        jmp    _T103b;
// LINE 2467:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2468:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2469:
	__asm        jmp    _T103b;
// LINE 2471:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2472:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2473:
	__asm        jmp    _T103b;
// LINE 2475:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2476:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2477:
	__asm        jmp    _T103b;
// LINE 2478:
	__asm        jmp    _T103b;
_T1017:
	__asm        cmp    dword ptr [ebp-0x40], 3;
	__asm        ja     _T103b;

	__asm        mov    eax, [ebp-0x40];
	__asm        jmp    SwitchPointers5442224[0][eax*4];
// Switch pointers
// LINE 2479:
_T103b:
	__asm        jmp    _T1371;
// LINE 2484:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T1062;
// LINE 2486:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2487:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2489:
	__asm        jmp    _T1072;
// LINE 2491:
_T1062:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2492:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2494:
_T1072:
	__asm        jmp    _T1371;
// LINE 2499:
_T1077:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T1099;
// LINE 2501:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2502:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2504:
	__asm        jmp    _T10a9;
// LINE 2506:
_T1099:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2507:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2509:
_T10a9:
	__asm        jmp    _T1371;
// LINE 2514:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T10d0;
// LINE 2516:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2517:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2519:
	__asm        jmp    _T10e0;
// LINE 2521:
_T10d0:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2522:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2524:
_T10e0:
	__asm        jmp    _T1371;
// LINE 2529:
_T10e5:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T1107;
// LINE 2531:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2532:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2534:
	__asm        jmp    _T1117;
// LINE 2536:
_T1107:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2537:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2539:
_T1117:
	__asm        jmp    _T1371;
// LINE 2544:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T113e;
// LINE 2546:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2547:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2549:
	__asm        jmp    _T114e;
// LINE 2551:
_T113e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2552:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2554:
_T114e:
	__asm        jmp    _T1371;
// LINE 2559:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T1175;
// LINE 2561:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2562:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2564:
	__asm        jmp    _T1185;
// LINE 2566:
_T1175:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2567:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2569:
_T1185:
	__asm        jmp    _T1371;
// LINE 2574:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T11ac;
// LINE 2576:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2577:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2579:
	__asm        jmp    _T11bc;
// LINE 2581:
_T11ac:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2582:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2584:
_T11bc:
	__asm        jmp    _T1371;
// LINE 2589:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T11e3;
// LINE 2591:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2592:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2594:
	__asm        jmp    _T11f3;
// LINE 2596:
_T11e3:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2597:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2599:
_T11f3:
	__asm        jmp    _T1371;
// LINE 2604:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x35], 1;
	__asm        jne    _T121a;
// LINE 2606:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 2607:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x59];
// LINE 2609:
	__asm        jmp    _T122a;
// LINE 2611:
_T121a:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 2612:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x59];
// LINE 2614:
_T122a:
	__asm        jmp    _T1371;
// LINE 2619:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x39], 1;
	__asm        jne    _T1251;
// LINE 2621:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 2622:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x55];
// LINE 2624:
	__asm        jmp    _T1261;
// LINE 2626:
_T1251:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 2627:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x55];
// LINE 2629:
_T1261:
	__asm        jmp    _T1371;
// LINE 2633:
_T1266:
	__asm        push   0xA49;
	__asm        push   0x5B78FC;
	__asm        push   0x5B7920;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1287;

	__asm        jmp    _T1287;
// LINE 2635:
_T1287:
	__asm        jmp    _T1371;
_T128c:
	__asm        cmp    dword ptr [ebp-0x2C], 0x805A;
	__asm        jg     _T135f;

	__asm        je     _T1077;

	__asm        sub    dword ptr [ebp-0x2C], 0x2C;
	__asm        cmp    dword ptr [ebp-0x2C], 0x2F;
	__asm        ja     _T1266;

	__asm        mov    eax, [ebp-0x2C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5442996[0][eax];
	__asm        jmp    SwitchPointers5442884[0][ecx*4];
// Switch pointers
// Switch table

	__asm        jmp    _T1266;
// LINE 2638:
_T1371:
	__asm        jmp    _T1376;
_T1376:
}

// FUNCTION: COPTER_D 0x00530e02
void TrainClass::SlowDown() {
// LINE 2657:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x2D], 0x20000;
// LINE 2658:
	__asm        jmp    near ptr 0x00530E1D;
}

// FUNCTION: COPTER_D 0x00530e22
void TrainClass::Stop() {
// LINE 2678:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 0;
// LINE 2679:
	__asm        jmp    near ptr 0x00530E3D;
}

// FUNCTION: COPTER_D 0x00530e42
void TrainClass::MoveForward() {
	int32_t distance;

// LINE 2701:
	__asm        mov    eax, LoopTime;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    distance, eax;
// LINE 2703:
	__asm        mov    eax, this;
	__asm        mov    ecx, distance;
	__asm        cmp    [eax+0x21], ecx;
	__asm        jge    _T3c;
// LINE 2704:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x21];
	__asm        mov    distance, eax;
// LINE 2705:
_T3c:
	__asm        xor    eax, eax;
	__asm        sub    eax, distance;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x21], eax;
// LINE 2712:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x18], eax;
// LINE 2713:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x1C], eax;
// LINE 2714:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    [ecx+0x20], eax;
// LINE 2717:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        test   eax, eax;
	__asm        jl     _T11c;

	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        test   eax, eax;
	__asm        jl     _T11c;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        cmp    eax, 0x80;
	__asm        jge    _T11c;

	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        cmp    eax, 0x80;
	__asm        jl     _T127;
_T11c:
	__asm        mov    word ptr [ebp-8], 0;
	__asm        jmp    _T1a4;
_T127:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, 0x20000000;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x1CD];
	__asm        sub    ecx, [edx+0x20];
	__asm        sar    ecx, 0x16;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    ecx, [ecx+0x18];
	__asm        add    ecx, 0x20000000;
	__asm        sar    ecx, 0x16;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, 0x20000000;
	__asm        mov    ebx, this;
	__asm        mov    ebx, [ebx+0x1CD];
	__asm        sub    edx, [ebx+0x20];
	__asm        sar    edx, 0x16;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-8], ax;
	__asm        jmp    _T1a4;
_T1a4:
	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x36;
	__asm        jl     _T1d0;

	__asm        mov    eax, [ebp-8];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3A;
	__asm        jg     _T1d0;

	__asm        jmp    _T1e4;

	__asm        jmp    _T1da;
_T1d0:
	__asm        jmp    _T1f0;

	__asm        jmp    _T1e4;
_T1da:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T1f0;
// LINE 2719:
_T1e4:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 1;
// LINE 2721:
	__asm        jmp    _T1f7;
// LINE 2723:
_T1f0:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 2728:
_T1f7:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 2729:
	__asm        jmp    near ptr 0x00531048;
}

// FUNCTION: COPTER_D 0x0053104d
int32_t TrainClass::HaveIReachedNextLoc() {
// LINE 2750:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x21], 0;
	__asm        jg     _T28;
// LINE 2752:
	__asm        mov    eax, 1;
	__asm        jmp    _T2f;
// LINE 2754:
	__asm        jmp    _T2f;
// LINE 2756:
_T28:
	__asm        xor    eax, eax;
	__asm        jmp    _T2f;
// LINE 2758:
_T2f:
}

// FUNCTION: COPTER_D 0x00531081
int32_t TrainClass::AmIInANewCell() {
// LINE 2782:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4D], eax;
// LINE 2783:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x51], eax;
// LINE 2787:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4D];
	__asm        cmp    [eax+0x35], ecx;
	__asm        jne    _T64;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        cmp    [eax+0x51], ecx;
	__asm        je     _T19e;
// LINE 2790:
_T64:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4D], 0;
	__asm        jl     _T9e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x51], 0;
	__asm        jl     _T9e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4D], 0x80;
	__asm        jge    _T9e;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x51], 0x80;
	__asm        jl     _Ta9;
_T9e:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        jmp    _Ted;
_Ta9:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x4D];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x51];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x4D];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x51];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-4], ax;
	__asm        jmp    _Ted;
_Ted:
	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T111;

	__asm        jmp    _T194;

	__asm        jmp    _T19e;

	__asm        jmp    _T194;

	__asm        jmp    _T18a;
_T111:
	__asm        cmp    dword ptr [ebp-0x10], 0x48;
	__asm        jg     _T13e;

	__asm        cmp    dword ptr [ebp-0x10], 0x45;
	__asm        jge    _T194;

	__asm        cmp    dword ptr [ebp-0x10], 0x2C;
	__asm        jl     _T19e;

	__asm        cmp    dword ptr [ebp-0x10], 0x3E;
	__asm        jle    _T194;

	__asm        jmp    _T19e;
_T13e:
	__asm        cmp    dword ptr [ebp-0x10], 0x5B;
	__asm        jg     _T16b;

	__asm        cmp    dword ptr [ebp-0x10], 0x5A;
	__asm        jge    _T194;

	__asm        cmp    dword ptr [ebp-0x10], 0x4D;
	__asm        jl     _T19e;

	__asm        cmp    dword ptr [ebp-0x10], 0x4E;
	__asm        jle    _T194;

	__asm        jmp    _T19e;
_T16b:
	__asm        cmp    dword ptr [ebp-0x10], 0x805A;
	__asm        jl     _T19e;

	__asm        cmp    dword ptr [ebp-0x10], 0x805B;
	__asm        jle    _T194;

	__asm        jmp    _T19e;
_T18a:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T19e;
// LINE 2791:
_T194:
	__asm        mov    eax, 1;
	__asm        jmp    _T1a5;
// LINE 2794:
_T19e:
	__asm        xor    eax, eax;
	__asm        jmp    _T1a5;
// LINE 2795:
_T1a5:
}

// FUNCTION: COPTER_D 0x0053122b
void TrainClass::UnlinkFromCell(const struct Point2d& point, struct _DYOBJ_INST* dyobj) {
	struct _CELL_INFO* cellPointer;

// LINE 2817:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T55;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5a;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        jmp    near ptr 0x0053128A;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    cellPointer, eax;
// LINE 2819:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T8b;

	__asm        push   0xB03;
	__asm        push   0x5B7928;
	__asm        push   0x5B794C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T90;
_T8b:
	__asm        jmp    _T90;
// LINE 2821:
_T90:
	__asm        cmp    cellPointer, 0;
	__asm        je     _T106;
// LINE 2823:
// Block start:
	struct _DYOBJ_INST** dyptrptr;
	__asm        mov    eax, cellPointer;
	__asm        add    eax, 0x10;
	__asm        mov    dyptrptr, eax;
// LINE 2825:
_Ta3:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Td9;
// LINE 2829:
	__asm        mov    eax, dyptrptr;
	__asm        mov    ecx, dyobj;
	__asm        cmp    [eax], ecx;
	__asm        jne    _Tcc;
// LINE 2833:
	__asm        mov    eax, dyobj;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, dyptrptr;
	__asm        mov    [ecx], eax;
// LINE 2835:
	__asm        jmp    _T10b;
// LINE 2838:
_Tcc:
	__asm        mov    eax, dyptrptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptrptr, eax;
// LINE 2839:
	__asm        jmp    _Ta3;
// LINE 2841:
_Td9:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T101;

	__asm        push   0xB19;
	__asm        push   0x5B7958;
	__asm        push   0x5B797C;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T106;
_T101:
	__asm        jmp    _T106;
// LINE 2843:
// Block end:
_T106:
	__asm        jmp    _T10b;
_T10b:
}

// FUNCTION: COPTER_D 0x0053133d
void TrainClass::LinkToCell(const struct Point2d& point, struct _DYOBJ_INST* dyobj) {
	struct _CELL_INFO* cellPointer;

// LINE 2865:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T55;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5a;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        jmp    near ptr 0x0053139C;

	__asm        mov    eax, [ebp-8];
	__asm        mov    cellPointer, eax;
// LINE 2867:
	__asm        mov    eax, cellPointer;
	__asm        mov    ecx, dyobj;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    _T90;

	__asm        push   0xB33;
	__asm        push   0x5B7988;
	__asm        push   0x5B79AC;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T95;
_T90:
	__asm        jmp    _T95;
// LINE 2869:
_T95:
	__asm        mov    eax, cellPointer;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, dyobj;
	__asm        mov    [ecx], eax;
// LINE 2870:
	__asm        mov    eax, dyobj;
	__asm        mov    ecx, cellPointer;
	__asm        mov    [ecx+0x10], eax;
// LINE 2872:
	__asm        jmp    near ptr 0x005313EB;
}

// FUNCTION: COPTER_D 0x005313f2
enum TrainClass::IntersectionTypes TrainClass::PickTurnDirection(const struct Point2d& point) {
	unsigned short southTile;
	unsigned short westTile;
	unsigned short currentTile;
	unsigned short eastTile;
	long intersection;
	unsigned short northTile;

// LINE 2905:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x75], eax;
// LINE 2906:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x79], eax;
// LINE 2907:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7D], eax;
// LINE 2908:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x81], eax;
// LINE 2909:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax];
	__asm        inc    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x85], eax;
// LINE 2910:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x89], eax;
// LINE 2911:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x8D], eax;
// LINE 2912:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x91], eax;
// LINE 2915:
	__asm        mov    eax, point;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jl     _Tb3;

	__asm        mov    eax, point;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        jl     _Tb3;

	__asm        mov    eax, point;
	__asm        cmp    dword ptr [eax], 0x80;
	__asm        jge    _Tb3;

	__asm        mov    eax, point;
	__asm        cmp    dword ptr [eax+4], 0x80;
	__asm        jl     _Tbe;
_Tb3:
	__asm        mov    currentTile, 0;
	__asm        jmp    _T100;
_Tbe:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx+4];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, point;
	__asm        mov    edx, [edx+4];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    currentTile, ax;
	__asm        jmp    _T100;
// LINE 2917:
_T100:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x75], 0;
	__asm        jl     _T13a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x79], 0;
	__asm        jl     _T13a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x75], 0x80;
	__asm        jge    _T13a;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x79], 0x80;
	__asm        jl     _T145;
_T13a:
	__asm        mov    northTile, 0;
	__asm        jmp    _T189;
_T145:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x75];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x79];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x75];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x79];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    northTile, ax;
	__asm        jmp    _T189;
// LINE 2918:
_T189:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7D], 0;
	__asm        jl     _T1c9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x81], 0;
	__asm        jl     _T1c9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7D], 0x80;
	__asm        jge    _T1c9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x81], 0x80;
	__asm        jl     _T1d4;
_T1c9:
	__asm        mov    southTile, 0;
	__asm        jmp    _T21e;
_T1d4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7D];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x81];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x7D];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x81];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    southTile, ax;
	__asm        jmp    _T21e;
// LINE 2919:
_T21e:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x85], 0;
	__asm        jl     _T264;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x89], 0;
	__asm        jl     _T264;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x85], 0x80;
	__asm        jge    _T264;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x89], 0x80;
	__asm        jl     _T26f;
_T264:
	__asm        mov    eastTile, 0;
	__asm        jmp    _T2bf;
_T26f:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x85];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x89];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x85];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x89];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    eastTile, ax;
	__asm        jmp    _T2bf;
// LINE 2920:
_T2bf:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8D], 0;
	__asm        jl     _T305;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x91], 0;
	__asm        jl     _T305;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x8D], 0x80;
	__asm        jge    _T305;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x91], 0x80;
	__asm        jl     _T310;
_T305:
	__asm        mov    westTile, 0;
	__asm        jmp    _T360;
_T310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x8D];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x91];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x8D];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x91];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    westTile, ax;
	__asm        jmp    _T360;
// LINE 2926:
_T360:
	__asm        mov    intersection, 0;
// LINE 2928:
	__asm        jmp    near ptr 0x0053175E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T407;

	__asm        jmp    near ptr 0x0053177D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T407;
// LINE 2930:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x34;
	__asm        jne    _T3d6;

	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x33;
	__asm        jne    _T3d6;
// LINE 2931:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 2932:
	__asm        jmp    _T402;
_T3d6:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x34;
	__asm        jne    _T402;

	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x35;
	__asm        jne    _T402;
// LINE 2933:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 2935:
_T402:
	__asm        jmp    _T5e2;
_T407:
	__asm        jmp    near ptr 0x005317FE;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T4a7;

	__asm        jmp    near ptr 0x0053181D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T4a7;
// LINE 2937:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x33;
	__asm        jne    _T476;

	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x34;
	__asm        jne    _T476;
// LINE 2938:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 2939:
	__asm        jmp    _T4a2;
_T476:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x33;
	__asm        jne    _T4a2;

	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x32;
	__asm        jne    _T4a2;
// LINE 2940:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 2942:
_T4a2:
	__asm        jmp    _T5e2;
_T4a7:
	__asm        jmp    near ptr 0x0053189E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T547;

	__asm        jmp    near ptr 0x005318BD;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T547;
// LINE 2944:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x35;
	__asm        jne    _T516;

	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x32;
	__asm        jne    _T516;
// LINE 2945:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 2946:
	__asm        jmp    _T542;
_T516:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x35;
	__asm        jne    _T542;

	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x34;
	__asm        jne    _T542;
// LINE 2947:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 2949:
_T542:
	__asm        jmp    _T5e2;
_T547:
	__asm        jmp    near ptr 0x0053193E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T5e2;

	__asm        jmp    near ptr 0x0053195D;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T5e2;
// LINE 2951:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x32;
	__asm        jne    _T5b6;

	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x35;
	__asm        jne    _T5b6;
// LINE 2952:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 2953:
	__asm        jmp    _T5e2;
_T5b6:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x32;
	__asm        jne    _T5e2;

	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x33;
	__asm        jne    _T5e2;
// LINE 2954:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 2959:
_T5e2:
	__asm        jmp    near ptr 0x005319D9;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T661;

	__asm        jmp    near ptr 0x005319F8;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T661;
// LINE 2962:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T63e;
// LINE 2964:
	__asm        or     intersection, 1;
// LINE 2966:
_T63e:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T65c;
// LINE 2968:
	__asm        or     intersection, 4;
// LINE 2971:
_T65c:
	__asm        jmp    _T9fe;
_T661:
	__asm        jmp    near ptr 0x00531A58;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T6e0;

	__asm        jmp    near ptr 0x00531A77;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T6e0;
// LINE 2974:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T6bd;
// LINE 2976:
	__asm        or     intersection, 1;
// LINE 2978:
_T6bd:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T6db;
// LINE 2980:
	__asm        or     intersection, 2;
// LINE 2983:
_T6db:
	__asm        jmp    _T9fe;
_T6e0:
	__asm        jmp    near ptr 0x00531AD7;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T75f;

	__asm        jmp    near ptr 0x00531AF6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T75f;
// LINE 2986:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T73c;
// LINE 2988:
	__asm        or     intersection, 1;
// LINE 2990:
_T73c:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T75a;
// LINE 2992:
	__asm        or     intersection, 2;
// LINE 2995:
_T75a:
	__asm        jmp    _T9fe;
_T75f:
	__asm        jmp    near ptr 0x00531B56;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T7de;

	__asm        jmp    near ptr 0x00531B75;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T7de;
// LINE 2998:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T7bb;
// LINE 3000:
	__asm        or     intersection, 1;
// LINE 3002:
_T7bb:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T7d9;
// LINE 3004:
	__asm        or     intersection, 4;
// LINE 3007:
_T7d9:
	__asm        jmp    _T9fe;
_T7de:
	__asm        jmp    near ptr 0x00531BD5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T85c;
// LINE 3010:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T81b;
// LINE 3012:
	__asm        or     intersection, 1;
// LINE 3014:
_T81b:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T839;
// LINE 3016:
	__asm        or     intersection, 2;
// LINE 3018:
_T839:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T857;
// LINE 3020:
	__asm        or     intersection, 4;
// LINE 3023:
_T857:
	__asm        jmp    _T9fe;
_T85c:
	__asm        jmp    near ptr 0x00531C53;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T8da;
// LINE 3026:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T899;
// LINE 3028:
	__asm        or     intersection, 1;
// LINE 3030:
_T899:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T8b7;
// LINE 3032:
	__asm        or     intersection, 2;
// LINE 3034:
_T8b7:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T8d5;
// LINE 3036:
	__asm        or     intersection, 4;
// LINE 3039:
_T8d5:
	__asm        jmp    _T9fe;
_T8da:
	__asm        jmp    near ptr 0x00531CD1;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T958;
// LINE 3042:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T917;
// LINE 3044:
	__asm        or     intersection, 1;
// LINE 3046:
_T917:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T935;
// LINE 3048:
	__asm        or     intersection, 2;
// LINE 3050:
_T935:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T953;
// LINE 3052:
	__asm        or     intersection, 4;
// LINE 3055:
_T953:
	__asm        jmp    _T9fe;
_T958:
	__asm        jmp    near ptr 0x00531D4F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T9d6;
// LINE 3058:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T995;
// LINE 3060:
	__asm        or     intersection, 1;
// LINE 3062:
_T995:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T9b3;
// LINE 3064:
	__asm        or     intersection, 2;
// LINE 3066:
_T9b3:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::DoRailTilesConnect;
	__asm        test   eax, eax;
	__asm        je     _T9d1;
// LINE 3068:
	__asm        or     intersection, 4;
// LINE 3071:
_T9d1:
	__asm        jmp    _T9fe;
// LINE 3073:
_T9d6:
	__asm        push   0xC01;
	__asm        push   0x5B79C8;
	__asm        push   0x5B79EC;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T9f7;

	__asm        jmp    _T9f7;
// LINE 3075:
_T9f7:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta06;
// LINE 3086:
_T9fe:
	__asm        mov    eax, intersection;
	__asm        jmp    _Ta06;
// LINE 3087:
_Ta06:
}

// FUNCTION: COPTER_D 0x00531dff
int32_t TrainClass::DoRailTilesConnect(unsigned short fromTile, unsigned short toTile, enum DirectionTypes direction) {
// LINE 3118:
	__asm        mov    dword ptr [ebp-0xC], 0x5B7BB8;
_T13:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T35;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T69;
_T35:
	__asm        mov    eax, [ebp-0xC];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T54;

	__asm        mov    eax, 0x5B7BB8;
	__asm        add    eax, 0x780;
	__asm        cmp    eax, [ebp-0xC];
	__asm        jae    _T60;
_T54:
	__asm        mov    dword ptr [ebp-8], 0;
	__asm        jmp    _T69;
_T60:
	__asm        add    dword ptr [ebp-0xC], 8;
	__asm        jmp    _T13;
_T69:
	__asm        mov    dword ptr [ebp-0x10], 0x5B7BB8;
_T70:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(toTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T92;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-4], eax;
	__asm        jmp    _Tc6;
_T92:
	__asm        mov    eax, [ebp-0x10];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Tb1;

	__asm        mov    eax, 0x5B7BB8;
	__asm        add    eax, 0x780;
	__asm        cmp    eax, [ebp-0x10];
	__asm        jae    _Tbd;
_Tb1:
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    _Tc6;
_Tbd:
	__asm        add    dword ptr [ebp-0x10], 8;
	__asm        jmp    _T70;
_Tc6:
	__asm        test   reinterpret_cast<uint8_t>(direction), 1;
	__asm        je     _Tf0;

	__asm        test   byte ptr [ebp-8], 1;
	__asm        je     _Tf0;

	__asm        test   byte ptr [ebp-4], 4;
	__asm        je     _Tf0;

	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    _T17a;
_Tf0:
	__asm        test   reinterpret_cast<uint8_t>(direction), 4;
	__asm        je     _T11a;

	__asm        test   byte ptr [ebp-8], 4;
	__asm        je     _T11a;

	__asm        test   byte ptr [ebp-4], 1;
	__asm        je     _T11a;

	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    _T17a;
_T11a:
	__asm        test   reinterpret_cast<uint8_t>(direction), 8;
	__asm        je     _T144;

	__asm        test   byte ptr [ebp-8], 8;
	__asm        je     _T144;

	__asm        test   byte ptr [ebp-4], 2;
	__asm        je     _T144;

	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    _T17a;
_T144:
	__asm        test   reinterpret_cast<uint8_t>(direction), 2;
	__asm        je     _T16e;

	__asm        test   byte ptr [ebp-8], 2;
	__asm        je     _T16e;

	__asm        test   byte ptr [ebp-4], 8;
	__asm        je     _T16e;

	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    _T17a;
_T16e:
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    _T17a;
_T17a:
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x00531F81;
// LINE 3119:
}

// FUNCTION: COPTER_D 0x00531f88
void TrainClass::MakeATurn(enum TrainClass::IntersectionTypes intersectionType) {
// LINE 3139:
	__asm        mov    eax, intersectionType;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T181;
// LINE 3143:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::MakeUturn;
// LINE 3145:
	__asm        jmp    _T1b5;
// LINE 3155:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::GoStraight;
// LINE 3157:
	__asm        jmp    _T1b5;
// LINE 3161:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnLeft;
// LINE 3163:
	__asm        jmp    _T1b5;
// LINE 3167:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnRight;
// LINE 3169:
	__asm        jmp    _T1b5;
// LINE 3173:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T68;
// LINE 3175:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnLeft;
// LINE 3177:
	__asm        jmp    _T70;
// LINE 3179:
_T68:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::GoStraight;
// LINE 3182:
_T70:
	__asm        jmp    _T1b5;
// LINE 3186:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _T92;
// LINE 3188:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnLeft;
// LINE 3190:
	__asm        jmp    _T9a;
// LINE 3192:
_T92:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnRight;
// LINE 3195:
_T9a:
	__asm        jmp    _T1b5;
// LINE 3199:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     _Tbc;
// LINE 3201:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnRight;
// LINE 3203:
	__asm        jmp    _Tc4;
// LINE 3205:
_Tbc:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::GoStraight;
// LINE 3208:
_Tc4:
	__asm        jmp    _T1b5;
// LINE 3212:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0xC], edx;
	__asm        jmp    _T133;
// LINE 3214:
_Te1:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::GoStraight;
	__asm        jmp    _T156;
// LINE 3215:
_Tee:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnLeft;
	__asm        jmp    _T156;
// LINE 3216:
_Tfb:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::TurnRight;
	__asm        jmp    _T156;
// LINE 3217:
_T108:
	__asm        push   0xC91;
	__asm        push   0x5B79F4;
	__asm        push   0x5B7A18;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T129;

	__asm        jmp    _T129;
_T129:
	__asm        jmp    _T156;
// LINE 3218:
	__asm        jmp    _T156;
_T133:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Te1;

	__asm        cmp    dword ptr [ebp-0xC], 1;
	__asm        je     _Tee;

	__asm        cmp    dword ptr [ebp-0xC], 2;
	__asm        je     _Tfb;

	__asm        jmp    _T108;
// LINE 3220:
_T156:
	__asm        jmp    _T1b5;
// LINE 3226:
_T15b:
	__asm        push   0xC9A;
	__asm        push   0x5B7A20;
	__asm        push   0x5B7A44;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T17c;

	__asm        jmp    _T17c;
// LINE 3228:
_T17c:
	__asm        jmp    _T1b5;
_T181:
	__asm        cmp    dword ptr [ebp-8], 7;
	__asm        ja     _T15b;

	__asm        mov    eax, [ebp-8];
	__asm        jmp    SwitchPointers5447965[0][eax*4];
// Switch pointers
// LINE 3229:
_T1b5:
	__asm        jmp    near ptr 0x00532142;
}

// FUNCTION: COPTER_D 0x00532149
enum TrainClass::StoppedReasons TrainClass::WhyAmIStopped() {
// LINE 3252:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0;
	__asm        jl     _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0;
	__asm        jl     _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0x80;
	__asm        jge    _T46;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0x80;
	__asm        jl     _T51;
_T46:
	__asm        mov    word ptr [ebp-4], 0;
	__asm        jmp    _T95;
_T51:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x39];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-4], ax;
	__asm        jmp    _T95;
_T95:
	__asm        mov    eax, [ebp-4];
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Tb9;

	__asm        jmp    _T146;

	__asm        jmp    _T13c;

	__asm        jmp    _T13c;

	__asm        jmp    _T132;
_Tb9:
	__asm        cmp    dword ptr [ebp-0x10], 0x48;
	__asm        jg     _Te6;

	__asm        cmp    dword ptr [ebp-0x10], 0x45;
	__asm        jge    _T146;

	__asm        cmp    dword ptr [ebp-0x10], 0x2C;
	__asm        jl     _T13c;

	__asm        cmp    dword ptr [ebp-0x10], 0x3E;
	__asm        jle    _T146;

	__asm        jmp    _T13c;
_Te6:
	__asm        cmp    dword ptr [ebp-0x10], 0x5B;
	__asm        jg     _T113;

	__asm        cmp    dword ptr [ebp-0x10], 0x5A;
	__asm        jge    _T146;

	__asm        cmp    dword ptr [ebp-0x10], 0x4D;
	__asm        jl     _T13c;

	__asm        cmp    dword ptr [ebp-0x10], 0x4E;
	__asm        jle    _T146;

	__asm        jmp    _T13c;
_T113:
	__asm        cmp    dword ptr [ebp-0x10], 0x805A;
	__asm        jl     _T13c;

	__asm        cmp    dword ptr [ebp-0x10], 0x805B;
	__asm        jle    _T146;

	__asm        jmp    _T13c;
_T132:
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T146;
// LINE 3256:
_T13c:
	__asm        mov    eax, 4;
	__asm        jmp    _T150;
// LINE 3261:
_T146:
	__asm        mov    eax, 3;
	__asm        jmp    _T150;
// LINE 3262:
_T150:
}

// FUNCTION: COPTER_D 0x0053229e
void TrainClass::SetTrailingCars() {
// LINE 3284:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x18], ebx;
// LINE 3286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x1C], ebx;
// LINE 3288:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x20];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x20], ebx;
// LINE 3291:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x18], ebx;
// LINE 3293:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x1C], ebx;
// LINE 3296:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x20];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        add    eax, [ecx+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x20], ebx;
// LINE 3299:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3D], eax;
// LINE 3300:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x41], eax;
// LINE 3301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x45], eax;
// LINE 3302:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x49], eax;
// LINE 3304:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 3305:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 3308:
	__asm        mov    eax, this;
	__asm        mov    esi, [eax+0x1CD];
	__asm        mov    eax, this;
	__asm        mov    edi, [eax+0x1D1];
	__asm        add    edi, 0x24;
	__asm        add    esi, 0x24;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 3309:
	__asm        mov    eax, this;
	__asm        mov    esi, [eax+0x1CD];
	__asm        mov    eax, this;
	__asm        mov    edi, [eax+0x1D5];
	__asm        add    edi, 0x24;
	__asm        add    esi, 0x24;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 3310:
	__asm        jmp    near ptr 0x00532513;
}

// FUNCTION: COPTER_D 0x00532518
void TrainClass::AdjustTrailingCars() {
	struct Point3d loc;
	struct Point2d currloc;
	struct Point3d vec;

// LINE 3334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x15];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.x, ebx;
// LINE 3335:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x19];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.y, ebx;
// LINE 3336:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    ebx, [eax+0x20];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.z, ebx;
// LINE 3339:
	__asm        mov    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    vec.x, eax;
// LINE 3340:
	__asm        mov    eax, loc.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        sub    eax, [ecx+0x1C];
	__asm        mov    vec.y, eax;
// LINE 3341:
	__asm        mov    eax, loc.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    vec.z, eax;
// LINE 3344:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 3347:
	__asm        mov    ebx, loc.x;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x18], ebx;
// LINE 3348:
	__asm        mov    ebx, loc.y;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.y;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x1C], ebx;
// LINE 3349:
	__asm        mov    ebx, loc.z;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    [eax+0x20], ebx;
// LINE 3352:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 3357:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x18];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.x, ebx;
// LINE 3358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x1C];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.y;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.y, ebx;
// LINE 3359:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    ebx, [eax+0x20];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    loc.z, ebx;
// LINE 3362:
	__asm        mov    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    vec.x, eax;
// LINE 3363:
	__asm        mov    eax, loc.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        sub    eax, [ecx+0x1C];
	__asm        mov    vec.y, eax;
// LINE 3364:
	__asm        mov    eax, loc.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    vec.z, eax;
// LINE 3367:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 3370:
	__asm        mov    ebx, loc.x;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x18], ebx;
// LINE 3371:
	__asm        mov    ebx, loc.y;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.y;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x1C], ebx;
// LINE 3372:
	__asm        mov    ebx, loc.z;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        mov    eax, vec.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sub    ebx, eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    [eax+0x20], ebx;
// LINE 3375:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    currloc.x, eax;
// LINE 3376:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D1];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    currloc.y, eax;
// LINE 3377:
	__asm        mov    eax, this;
	__asm        mov    ecx, currloc.x;
	__asm        cmp    [eax+0x3D], ecx;
	__asm        jne    _T2f6;

	__asm        mov    eax, this;
	__asm        mov    ecx, currloc.y;
	__asm        cmp    [eax+0x41], ecx;
	__asm        je     _T339;
// LINE 3379:
_T2f6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 3380:
	__asm        mov    eax, currloc.x;
	__asm        mov    ecx, currloc.y;
	__asm        mov    edx, this;
	__asm        add    edx, 0x3D;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 3381:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 3384:
_T339:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    currloc.x, eax;
// LINE 3385:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1D5];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    currloc.y, eax;
// LINE 3386:
	__asm        mov    eax, this;
	__asm        mov    ecx, currloc.x;
	__asm        cmp    [eax+0x45], ecx;
	__asm        jne    _T385;

	__asm        mov    eax, this;
	__asm        mov    ecx, currloc.y;
	__asm        cmp    [eax+0x49], ecx;
	__asm        je     _T3c8;
// LINE 3388:
_T385:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 3389:
	__asm        mov    eax, currloc.x;
	__asm        mov    ecx, currloc.y;
	__asm        mov    edx, this;
	__asm        add    edx, 0x45;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 3390:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 3394:
_T3c8:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 3395:
	__asm        jmp    near ptr 0x005328FE;
}

// FUNCTION: COPTER_D 0x00532903
void TrainClass::AdjustCurrentPosition() {
	struct _CELL_INFO* cellPointer;

// LINE 3416:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x39];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T56;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5b;
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    near ptr 0x00532963;

	__asm        mov    eax, [ebp-8];
	__asm        mov    cellPointer, eax;
// LINE 3418:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T8c;

	__asm        push   0xD5A;
	__asm        push   0x5B7A4C;
	__asm        push   0x5B7A70;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T91;
_T8c:
	__asm        jmp    _T91;
// LINE 3422:
_T91:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    [ecx+0x18], eax;
// LINE 3423:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    [ecx+0x1C], eax;
// LINE 3424:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        mov    [ecx+0x20], eax;
// LINE 3428:
	__asm        jmp    near ptr 0x005329DB;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T107;
// LINE 3431:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        sub    dword ptr [eax+0x20], 0x1E0000;
// LINE 3433:
	__asm        jmp    _T19e;
_T107:
	__asm        jmp    near ptr 0x00532A0F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T13b;
// LINE 3436:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    dword ptr [eax+0x20], 0x1E0000;
// LINE 3438:
	__asm        jmp    _T19e;
_T13b:
	__asm        jmp    near ptr 0x00532A43;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _T16f;
// LINE 3440:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        sub    dword ptr [eax+0x18], 0x1E0000;
// LINE 3443:
	__asm        jmp    _T19e;
_T16f:
	__asm        jmp    near ptr 0x00532A77;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _T19e;
// LINE 3445:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    dword ptr [eax+0x18], 0x1E0000;
// LINE 3449:
_T19e:
	__asm        jmp    near ptr 0x00532AA6;
}

// FUNCTION: COPTER_D 0x00532aab
void TrainClass::AdjustNextPosition() {
	struct _CELL_INFO* cellPointer;
	unsigned short tile;
	unsigned short ntile;
	struct Point3d nextFineLocation;
	int32_t xdiff;
	int32_t ydiff;

// LINE 3470:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x59];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x55];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T56;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5b;
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    near ptr 0x00532B0B;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    cellPointer, eax;
// LINE 3473:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0;
	__asm        jl     _Ta0;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0;
	__asm        jl     _Ta0;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0x80;
	__asm        jge    _Ta0;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0x80;
	__asm        jl     _Tab;
_Ta0:
	__asm        mov    tile, 0;
	__asm        jmp    _Tef;
_Tab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x39];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    tile, ax;
	__asm        jmp    _Tef;
// LINE 3474:
_Tef:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x55], 0;
	__asm        jl     _T129;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x59], 0;
	__asm        jl     _T129;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x55], 0x80;
	__asm        jge    _T129;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x59], 0x80;
	__asm        jl     _T134;
_T129:
	__asm        mov    ntile, 0;
	__asm        jmp    _T178;
_T134:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x55];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x59];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x55];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x59];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    ntile, ax;
	__asm        jmp    _T178;
// LINE 3476:
_T178:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T19e;

	__asm        push   0xD94;
	__asm        push   0x5B7A7C;
	__asm        push   0x5B7AA0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1a3;
_T19e:
	__asm        jmp    _T1a3;
// LINE 3478:
_T1a3:
	__asm        cmp    cellPointer, 0;
	__asm        je     _T5ef;
// LINE 3481:
// Block start:
	enum DirectionTypes connectionType;
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.x, eax;
// LINE 3482:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.y, eax;
// LINE 3483:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.z, eax;
// LINE 3490:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x55];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x35];
	__asm        mov    xdiff, eax;
// LINE 3491:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x59];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x39];
	__asm        mov    ydiff, eax;
// LINE 3493:
	__asm        cmp    xdiff, 0;
	__asm        jge    _T27d;

	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    _T27d;
// LINE 3496:
	__asm        add    nextFineLocation.x, 0x1E0000;
// LINE 3498:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 8;
// LINE 3501:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    _T25f;
// LINE 3504:
_T237:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 3506:
	__asm        jmp    _T278;
// LINE 3508:
_T246:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 3509:
	__asm        jmp    _T278;
// LINE 3511:
	__asm        jmp    _T278;
// LINE 3512:
	__asm        jmp    _T278;
_T25f:
	__asm        cmp    dword ptr [ebp-0x34], 0x34;
	__asm        je     _T246;

	__asm        cmp    dword ptr [ebp-0x34], 0x35;
	__asm        je     _T237;

	__asm        jmp    _T278;
// LINE 3514:
_T278:
	__asm        jmp    _T41e;
_T27d:
	__asm        cmp    xdiff, 0;
	__asm        jle    _T308;

	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    _T308;
// LINE 3517:
	__asm        sub    nextFineLocation.x, 0x1E0000;
// LINE 3519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 2;
// LINE 3521:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T2ea;
// LINE 3524:
_T2c2:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 3525:
	__asm        jmp    _T303;
// LINE 3527:
_T2d1:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 3528:
	__asm        jmp    _T303;
// LINE 3530:
	__asm        jmp    _T303;
// LINE 3531:
	__asm        jmp    _T303;
_T2ea:
	__asm        cmp    dword ptr [ebp-0x38], 0x32;
	__asm        je     _T2c2;

	__asm        cmp    dword ptr [ebp-0x38], 0x33;
	__asm        je     _T2d1;

	__asm        jmp    _T303;
// LINE 3533:
_T303:
	__asm        jmp    _T41e;
_T308:
	__asm        cmp    ydiff, 0;
	__asm        jle    _T393;

	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    _T393;
// LINE 3536:
	__asm        add    nextFineLocation.z, 0x1E0000;
// LINE 3538:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 4;
// LINE 3540:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T375;
// LINE 3543:
_T34d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0xC;
// LINE 3544:
	__asm        jmp    _T38e;
// LINE 3546:
_T35c:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 6;
// LINE 3547:
	__asm        jmp    _T38e;
// LINE 3549:
	__asm        jmp    _T38e;
// LINE 3550:
	__asm        jmp    _T38e;
_T375:
	__asm        cmp    dword ptr [ebp-0x3C], 0x33;
	__asm        je     _T34d;

	__asm        cmp    dword ptr [ebp-0x3C], 0x34;
	__asm        je     _T35c;

	__asm        jmp    _T38e;
// LINE 3552:
_T38e:
	__asm        jmp    _T41e;
_T393:
	__asm        cmp    ydiff, 0;
	__asm        jge    _T41e;

	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    _T41e;
// LINE 3555:
	__asm        sub    nextFineLocation.z, 0x1E0000;
// LINE 3557:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 1;
// LINE 3560:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T400;
// LINE 3563:
_T3d8:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 9;
// LINE 3564:
	__asm        jmp    _T419;
// LINE 3566:
_T3e7:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 3;
// LINE 3567:
	__asm        jmp    _T419;
// LINE 3569:
	__asm        jmp    _T419;
// LINE 3570:
	__asm        jmp    _T419;
_T400:
	__asm        cmp    dword ptr [ebp-0x40], 0x32;
	__asm        je     _T3d8;

	__asm        cmp    dword ptr [ebp-0x40], 0x35;
	__asm        je     _T3e7;

	__asm        jmp    _T419;
// LINE 3572:
_T419:
	__asm        jmp    _T41e;
// LINE 3579:
_T41e:
	__asm        mov    dword ptr [ebp-0x2C], 0x5B7BB8;
_T425:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(ntile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    _T447;

	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax+4];
	__asm        mov    connectionType, eax;
	__asm        jmp    _T47b;
_T447:
	__asm        mov    eax, [ebp-0x2C];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T466;

	__asm        mov    eax, 0x5B7BB8;
	__asm        add    eax, 0x780;
	__asm        cmp    eax, [ebp-0x2C];
	__asm        jae    _T472;
_T466:
	__asm        mov    connectionType, 0;
	__asm        jmp    _T47b;
_T472:
	__asm        add    dword ptr [ebp-0x2C], 8;
	__asm        jmp    _T425;
// LINE 3581:
_T47b:
	__asm        cmp    connectionType, 0;
	__asm        je     _T56a;
// LINE 3583:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T50f;
// LINE 3586:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x11], 1;
	__asm        je     _T4a9;
// LINE 3587:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3588:
_T4a9:
	__asm        jmp    _T56a;
// LINE 3590:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x11], 4;
	__asm        je     _T4c2;
// LINE 3591:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3592:
_T4c2:
	__asm        jmp    _T56a;
// LINE 3594:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x11], 2;
	__asm        je     _T4db;
// LINE 3595:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3596:
_T4db:
	__asm        jmp    _T56a;
// LINE 3598:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0x11], 8;
	__asm        je     _T4f4;
// LINE 3599:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3600:
_T4f4:
	__asm        jmp    _T56a;
// LINE 3605:
_T4f9:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3606:
	__asm        jmp    _T56a;
// LINE 3608:
	__asm        jmp    _T56a;
// LINE 3609:
	__asm        jmp    _T56a;
_T50f:
	__asm        cmp    dword ptr [ebp-0x44], 0x5B;
	__asm        jg     _T54b;

	__asm        cmp    dword ptr [ebp-0x44], 0x5A;
	__asm        jge    _T4f9;

	__asm        sub    dword ptr [ebp-0x44], 0x2E;
	__asm        cmp    dword ptr [ebp-0x44], 3;
	__asm        ja     _T56a;

	__asm        mov    eax, [ebp-0x44];
	__asm        jmp    SwitchPointers5451750[0][eax*4];
// Switch pointers
// LINE 3624:
_T56a:
	__asm        mov    eax, nextFineLocation.x;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x18];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x15], eax;
// LINE 3625:
	__asm        mov    eax, nextFineLocation.y;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x19], eax;
// LINE 3626:
	__asm        mov    eax, nextFineLocation.z;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x1CD];
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1D], eax;
// LINE 3627:
	__asm        mov    eax, this;
	__asm        add    eax, 0x15;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x21], eax;
// LINE 3632:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 1;
	__asm        je     _T5ef;
// LINE 3634:
	__asm        mov    eax, this;
	__asm        add    eax, 0x15;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 3637:
// Block end:
_T5ef:
	__asm        jmp    near ptr 0x0053309F;
}

// FUNCTION: COPTER_D 0x005330a4
void TrainClass::GoStraight() {
// LINE 3659:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 3663:
	__asm        jmp    near ptr 0x005330BC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T4d;
// LINE 3666:
	__asm        mov    eax, this;
	__asm        add    eax, 0x75;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3668:
	__asm        jmp    _T120;
_T4d:
	__asm        jmp    near ptr 0x005330F6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T87;
// LINE 3671:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3673:
	__asm        jmp    _T120;
_T87:
	__asm        jmp    near ptr 0x00533130;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _Tc3;
// LINE 3676:
	__asm        mov    eax, this;
	__asm        add    eax, 0x85;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3678:
	__asm        jmp    _T120;
_Tc3:
	__asm        jmp    near ptr 0x0053316C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _Tff;
// LINE 3681:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3683:
	__asm        jmp    _T120;
// LINE 3685:
_Tff:
	__asm        push   0xE65;
	__asm        push   0x5B7AAC;
	__asm        push   0x5B7AD0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T120;

	__asm        jmp    _T120;
// LINE 3687:
_T120:
	__asm        jmp    near ptr 0x005331C9;
}

// FUNCTION: COPTER_D 0x005331ce
void TrainClass::TurnLeft() {
// LINE 3709:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 1;
// LINE 3713:
	__asm        jmp    near ptr 0x005331E6;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T4f;
// LINE 3716:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3718:
	__asm        jmp    _T120;
_T4f:
	__asm        jmp    near ptr 0x00533222;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T8b;
// LINE 3721:
	__asm        mov    eax, this;
	__asm        add    eax, 0x85;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3723:
	__asm        jmp    _T120;
_T8b:
	__asm        jmp    near ptr 0x0053325E;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _Tc5;
// LINE 3726:
	__asm        mov    eax, this;
	__asm        add    eax, 0x75;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3728:
	__asm        jmp    _T120;
_Tc5:
	__asm        jmp    near ptr 0x00533298;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _Tff;
// LINE 3731:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3733:
	__asm        jmp    _T120;
// LINE 3735:
_Tff:
	__asm        push   0xE97;
	__asm        push   0x5B7AD8;
	__asm        push   0x5B7AFC;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T120;

	__asm        jmp    _T120;
// LINE 3738:
_T120:
	__asm        jmp    near ptr 0x005332F3;
}

// FUNCTION: COPTER_D 0x005332f8
void TrainClass::TurnRight() {
// LINE 3760:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 1;
// LINE 3764:
	__asm        jmp    near ptr 0x00533310;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x11;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 1;
	__asm        or     eax, ecx;
	__asm        je     _T4f;
// LINE 3767:
	__asm        mov    eax, this;
	__asm        add    eax, 0x85;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3770:
	__asm        jmp    _T120;
_T4f:
	__asm        jmp    near ptr 0x0053334C;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x14;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 4;
	__asm        or     eax, ecx;
	__asm        je     _T8b;
// LINE 3773:
	__asm        mov    eax, this;
	__asm        add    eax, 0x8D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3776:
	__asm        jmp    _T120;
_T8b:
	__asm        jmp    near ptr 0x00533388;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 2;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 0x12;
	__asm        or     eax, ecx;
	__asm        je     _Tc5;
// LINE 3779:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3782:
	__asm        jmp    _T120;
_Tc5:
	__asm        jmp    near ptr 0x005333C2;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11];
	__asm        and    eax, 0x18;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x11];
	__asm        and    ecx, 8;
	__asm        or     eax, ecx;
	__asm        je     _Tff;
// LINE 3785:
	__asm        mov    eax, this;
	__asm        add    eax, 0x75;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 3788:
	__asm        jmp    _T120;
// LINE 3790:
_Tff:
	__asm        push   0xECE;
	__asm        push   0x5B7B04;
	__asm        push   0x5B7B28;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T120;

	__asm        jmp    _T120;
// LINE 3793:
_T120:
	__asm        jmp    near ptr 0x0053341D;
}

// FUNCTION: COPTER_D 0x00533422
void TrainClass::BeamToWithinCameraRange() {
	int32_t foundcell;
	int32_t stop_now;
	struct _CELL_INFO* cptr;
	int32_t curr_dir;
	int32_t i;
	int32_t y;
	int32_t x;
	struct Point2d beampoint;
	struct Point3d vec;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 3815:
	__asm        mov    curr_dist, 0;
// LINE 3816:
	__asm        mov    curr_dir, 0xFFFFFFFF;
// LINE 3818:
	__asm        mov    stop_now, 0;
// LINE 3819:
	__asm        mov    spiral_dist, 7;
// LINE 3821:
	__asm        mov    foundcell, 0;
// LINE 3825:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, vec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 3828:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    _T143;
// LINE 3832:
_T66:
	__asm        mov    eax, vec.z;
	__asm        mov    vec.y, eax;
// LINE 3833:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 3834:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 3836:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 3837:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 3838:
	__asm        jmp    _T166;
// LINE 3841:
_Ta3:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.y, eax;
// LINE 3842:
	__asm        mov    eax, vec.x;
	__asm        mov    vec.z, eax;
// LINE 3843:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 3845:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 3846:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 3847:
	__asm        jmp    _T166;
// LINE 3850:
_Te0:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.x, eax;
// LINE 3851:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 3853:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 3854:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 3855:
	__asm        jmp    _T166;
// LINE 3859:
_T119:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 3860:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 3861:
	__asm        jmp    _T166;
// LINE 3862:
	__asm        jmp    _T166;
_T143:
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        je     _T66;

	__asm        cmp    dword ptr [ebp-0x58], 1;
	__asm        je     _Ta3;

	__asm        cmp    dword ptr [ebp-0x58], 2;
	__asm        je     _Te0;

	__asm        jmp    _T119;
// LINE 3864:
_T166:
	__asm        shl    vec.x, 6;
// LINE 3865:
	__asm        shl    vec.z, 6;
// LINE 3867:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        add    eax, vec.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 3868:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, ViewState.world_pos.z;
	__asm        add    ecx, vec.z;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 3875:
_T197:
	__asm        inc    curr_dir;
// LINE 3876:
	__asm        mov    eax, curr_dir;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T203;
// LINE 3880:
	__asm        mov    curr_dir, 0;
// LINE 3881:
	__asm        inc    curr_dist;
// LINE 3882:
	__asm        mov    xdir, 0;
// LINE 3883:
	__asm        mov    ydir, 0xFFFFFFFF;
// LINE 3884:
	__asm        jmp    _T22b;
// LINE 3886:
	__asm        mov    xdir, 1;
// LINE 3887:
	__asm        mov    ydir, 0;
// LINE 3888:
	__asm        jmp    _T22b;
// LINE 3890:
	__asm        inc    curr_dist;
// LINE 3891:
	__asm        mov    xdir, 0;
// LINE 3892:
	__asm        mov    ydir, 1;
// LINE 3893:
	__asm        jmp    _T22b;
// LINE 3895:
	__asm        mov    xdir, 0xFFFFFFFF;
// LINE 3896:
	__asm        mov    ydir, 0;
// LINE 3897:
	__asm        jmp    _T22b;
// LINE 3898:
	__asm        jmp    _T22b;
_T203:
	__asm        cmp    dword ptr [ebp-0x5C], 4;
	__asm        ja     _T22b;

	__asm        mov    eax, [ebp-0x5C];
	__asm        jmp    SwitchPointers5453369[0][eax*4];
// Switch pointers
// LINE 3902:
_T22b:
	__asm        mov    eax, curr_dist;
	__asm        cmp    spiral_dist, eax;
	__asm        jne    _T241;
// LINE 3904:
	__asm        dec    curr_dist;
// LINE 3905:
	__asm        mov    stop_now, 1;
// LINE 3909:
_T241:
	__asm        mov    i, 0;
	__asm        jmp    _T250;
_T24d:
	__asm        inc    i;
_T250:
	__asm        mov    eax, i;
	__asm        cmp    curr_dist, eax;
	__asm        jle    _T426;
// LINE 3911:
// Block start:
	unsigned short tile;
	__asm        cmp    x, 0;
	__asm        jl     _T28a;

	__asm        cmp    y, 0;
	__asm        jl     _T28a;

	__asm        cmp    x, 0x80;
	__asm        jge    _T28a;

	__asm        cmp    y, 0x80;
	__asm        jl     _T295;
_T28a:
	__asm        mov    tile, 0;
	__asm        jmp    _T2cd;
_T295:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    tile, ax;
	__asm        jmp    _T2cd;
// LINE 3913:
_T2cd:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T2f1;

	__asm        jmp    _T38d;

	__asm        jmp    _T401;

	__asm        jmp    _T38d;

	__asm        jmp    _T383;
_T2f1:
	__asm        cmp    dword ptr [ebp-0x60], 0x3A;
	__asm        jg     _T31e;

	__asm        cmp    dword ptr [ebp-0x60], 0x32;
	__asm        jge    _T38d;

	__asm        cmp    dword ptr [ebp-0x60], 0x2C;
	__asm        jl     _T401;

	__asm        cmp    dword ptr [ebp-0x60], 0x2D;
	__asm        jle    _T38d;

	__asm        jmp    _T401;
_T31e:
	__asm        cmp    dword ptr [ebp-0x60], 0x4E;
	__asm        jg     _T34b;

	__asm        cmp    dword ptr [ebp-0x60], 0x4D;
	__asm        jge    _T38d;

	__asm        cmp    dword ptr [ebp-0x60], 0x45;
	__asm        jl     _T401;

	__asm        cmp    dword ptr [ebp-0x60], 0x48;
	__asm        jle    _T38d;

	__asm        jmp    _T401;
_T34b:
	__asm        cmp    dword ptr [ebp-0x60], 0x805B;
	__asm        jg     _T401;

	__asm        cmp    dword ptr [ebp-0x60], 0x805A;
	__asm        jge    _T38d;

	__asm        cmp    dword ptr [ebp-0x60], 0x5A;
	__asm        jl     _T401;

	__asm        cmp    dword ptr [ebp-0x60], 0x5B;
	__asm        jle    _T38d;

	__asm        jmp    _T401;

	__asm        jmp    _T401;
_T383:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T401;
// LINE 3915:
_T38d:
	__asm        mov    eax, x;
	__asm        mov    beampoint.x, eax;
// LINE 3916:
	__asm        mov    eax, y;
	__asm        mov    beampoint.y, eax;
// LINE 3917:
	__asm        mov    eax, beampoint.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, beampoint.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    _T3dd;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3e2;
_T3dd:
	__asm        jmp    _T3e2;
_T3e2:
	__asm        jmp    near ptr 0x00533809;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    cptr, eax;
// LINE 3918:
	__asm        mov    eax, cptr;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T401;
// LINE 3920:
	__asm        mov    foundcell, 1;
// LINE 3923:
_T401:
	__asm        cmp    foundcell, 0;
	__asm        je     _T415;

	__asm        jmp    _T584;

	__asm        jmp    _T43f;
// LINE 3924:
_T415:
	__asm        mov    eax, xdir;
	__asm        add    x, eax;
// LINE 3925:
	__asm        mov    eax, ydir;
	__asm        add    y, eax;
// LINE 3926:
// Block end:
	__asm        jmp    _T24d;
// LINE 3928:
_T426:
	__asm        cmp    stop_now, 1;
	__asm        jne    _T435;
// LINE 3930:
	__asm        jmp    _T43a;
// LINE 3932:
_T435:
	__asm        jmp    _T197;
// LINE 3935:
_T43a:
	__asm        jmp    _T589;
// LINE 3941:
foundCell:
_T43f:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 3942:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0;
// LINE 3943:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 0;
// LINE 3944:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 1;
// LINE 3945:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 3946:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 3947:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 3948:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+9], 0;
// LINE 3949:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 0;
// LINE 3950:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xC], 0;
// LINE 3955:
	__asm        mov    eax, beampoint.x;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x35], eax;
	__asm        mov    eax, beampoint.y;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], eax;
	__asm        jmp    near ptr 0x005338C7;
// LINE 3959:
	__asm        jmp    near ptr 0x005338CC;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 3963:
	__asm        jmp    near ptr 0x005338EA;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0;
	__asm        jl     _T502;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0;
	__asm        jl     _T502;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0x80;
	__asm        jge    _T502;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0x80;
	__asm        jl     _T50d;
_T502:
	__asm        mov    word ptr [ebp-0x50], 0;
	__asm        jmp    _T551;
_T50d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x39];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x50], ax;
	__asm        jmp    _T551;
_T551:
	__asm        mov    eax, [ebp-0x50];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrainDirection;
// LINE 3964:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustCurrentPosition;
// LINE 3965:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustNextPosition;
// LINE 3966:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrailingCars;
// LINE 3967:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x61], 0;
// LINE 3969:
	__asm        jmp    _T589;
_T584:
	__asm        jmp    _T43f;
_T589:
}

// FUNCTION: COPTER_D 0x005339b0
void TrainClass::UnPlaceTrain() {
// LINE 3992:
	__asm        jmp    near ptr 0x005339C1;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T81;
// LINE 3994:
	__asm        jmp    near ptr 0x005339D5;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 3995:
	__asm        jmp    near ptr 0x005339F3;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 3996:
	__asm        jmp    near ptr 0x00533A11;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::UnlinkFromCell;
// LINE 3997:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 0;
// LINE 3999:
_T81:
	__asm        jmp    near ptr 0x00533A36;
}

// FUNCTION: COPTER_D 0x00533a3b
int32_t TrainClass::BeamToLocation(long mapx, long mapy) {
	int32_t foundcell;
	int32_t stop_now;
	struct _CELL_INFO* cptr;
	int32_t curr_dir;
	int32_t i;
	int32_t y;
	int32_t x;
	struct Point2d beampoint;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 4021:
	__asm        mov    curr_dist, 0;
// LINE 4022:
	__asm        mov    curr_dir, 0xFFFFFFFF;
// LINE 4024:
	__asm        mov    stop_now, 0;
// LINE 4025:
	__asm        mov    spiral_dist, 0x15;
// LINE 4027:
	__asm        mov    foundcell, 0;
// LINE 4031:
	__asm        mov    eax, mapx;
	__asm        mov    x, eax;
// LINE 4032:
	__asm        mov    eax, mapy;
	__asm        mov    y, eax;
// LINE 4039:
_T3b:
	__asm        inc    curr_dir;
// LINE 4040:
	__asm        mov    eax, curr_dir;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _Ta7;
// LINE 4044:
	__asm        mov    curr_dir, 0;
// LINE 4045:
	__asm        inc    curr_dist;
// LINE 4046:
	__asm        mov    xdir, 0;
// LINE 4047:
	__asm        mov    ydir, 0xFFFFFFFF;
// LINE 4048:
	__asm        jmp    _Tcf;
// LINE 4050:
	__asm        mov    xdir, 1;
// LINE 4051:
	__asm        mov    ydir, 0;
// LINE 4052:
	__asm        jmp    _Tcf;
// LINE 4054:
	__asm        inc    curr_dist;
// LINE 4055:
	__asm        mov    xdir, 0;
// LINE 4056:
	__asm        mov    ydir, 1;
// LINE 4057:
	__asm        jmp    _Tcf;
// LINE 4059:
	__asm        mov    xdir, 0xFFFFFFFF;
// LINE 4060:
	__asm        mov    ydir, 0;
// LINE 4061:
	__asm        jmp    _Tcf;
// LINE 4062:
	__asm        jmp    _Tcf;
_Ta7:
	__asm        cmp    dword ptr [ebp-0x4C], 4;
	__asm        ja     _Tcf;

	__asm        mov    eax, [ebp-0x4C];
	__asm        jmp    SwitchPointers5454582[0][eax*4];
// Switch pointers
// LINE 4066:
_Tcf:
	__asm        mov    eax, spiral_dist;
	__asm        cmp    curr_dist, eax;
	__asm        jne    _Te5;
// LINE 4068:
	__asm        dec    curr_dist;
// LINE 4069:
	__asm        mov    stop_now, 1;
// LINE 4073:
_Te5:
	__asm        mov    i, 0;
	__asm        jmp    _Tf4;
_Tf1:
	__asm        inc    i;
_Tf4:
	__asm        mov    eax, i;
	__asm        cmp    curr_dist, eax;
	__asm        jle    _T2ca;
// LINE 4075:
// Block start:
	unsigned short tile;
	__asm        cmp    x, 0;
	__asm        jl     _T12e;

	__asm        cmp    y, 0;
	__asm        jl     _T12e;

	__asm        cmp    x, 0x80;
	__asm        jge    _T12e;

	__asm        cmp    y, 0x80;
	__asm        jl     _T139;
_T12e:
	__asm        mov    tile, 0;
	__asm        jmp    _T171;
_T139:
	__asm        mov    eax, x;
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, x;
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    tile, ax;
	__asm        jmp    _T171;
// LINE 4077:
_T171:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T195;

	__asm        jmp    _T231;

	__asm        jmp    _T2a5;

	__asm        jmp    _T231;

	__asm        jmp    _T227;
_T195:
	__asm        cmp    dword ptr [ebp-0x50], 0x3A;
	__asm        jg     _T1c2;

	__asm        cmp    dword ptr [ebp-0x50], 0x32;
	__asm        jge    _T231;

	__asm        cmp    dword ptr [ebp-0x50], 0x2C;
	__asm        jl     _T2a5;

	__asm        cmp    dword ptr [ebp-0x50], 0x2D;
	__asm        jle    _T231;

	__asm        jmp    _T2a5;
_T1c2:
	__asm        cmp    dword ptr [ebp-0x50], 0x4E;
	__asm        jg     _T1ef;

	__asm        cmp    dword ptr [ebp-0x50], 0x4D;
	__asm        jge    _T231;

	__asm        cmp    dword ptr [ebp-0x50], 0x45;
	__asm        jl     _T2a5;

	__asm        cmp    dword ptr [ebp-0x50], 0x48;
	__asm        jle    _T231;

	__asm        jmp    _T2a5;
_T1ef:
	__asm        cmp    dword ptr [ebp-0x50], 0x805B;
	__asm        jg     _T2a5;

	__asm        cmp    dword ptr [ebp-0x50], 0x805A;
	__asm        jge    _T231;

	__asm        cmp    dword ptr [ebp-0x50], 0x5A;
	__asm        jl     _T2a5;

	__asm        cmp    dword ptr [ebp-0x50], 0x5B;
	__asm        jle    _T231;

	__asm        jmp    _T2a5;

	__asm        jmp    _T2a5;
_T227:
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     _T2a5;
// LINE 4079:
_T231:
	__asm        mov    eax, x;
	__asm        mov    beampoint.x, eax;
// LINE 4080:
	__asm        mov    eax, y;
	__asm        mov    beampoint.y, eax;
// LINE 4081:
	__asm        mov    eax, beampoint.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, beampoint.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _T281;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T286;
_T281:
	__asm        jmp    _T286;
_T286:
	__asm        jmp    near ptr 0x00533CC6;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    cptr, eax;
// LINE 4082:
	__asm        mov    eax, cptr;
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    _T2a5;
// LINE 4084:
	__asm        mov    foundcell, 1;
// LINE 4087:
_T2a5:
	__asm        cmp    foundcell, 0;
	__asm        je     _T2b9;

	__asm        jmp    _T42f;

	__asm        jmp    _T2e5;
// LINE 4088:
_T2b9:
	__asm        mov    eax, xdir;
	__asm        add    x, eax;
// LINE 4089:
	__asm        mov    eax, ydir;
	__asm        add    y, eax;
// LINE 4090:
// Block end:
	__asm        jmp    _Tf1;
// LINE 4092:
_T2ca:
	__asm        cmp    stop_now, 1;
	__asm        jne    _T2d9;
// LINE 4094:
	__asm        jmp    _T2de;
// LINE 4096:
_T2d9:
	__asm        jmp    _T3b;
// LINE 4099:
_T2de:
	__asm        xor    eax, eax;
	__asm        jmp    _T434;
// LINE 4106:
foundCell:
_T2e5:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 4107:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11], 0;
// LINE 4108:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2D], 0;
// LINE 4109:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 1;
// LINE 4110:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 4111:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 4112:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+8], 0;
// LINE 4113:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+9], 0;
// LINE 4114:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xB], 0;
// LINE 4115:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0xC], 0;
// LINE 4120:
	__asm        mov    eax, beampoint.x;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x35], eax;
	__asm        mov    eax, beampoint.y;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], eax;
	__asm        jmp    near ptr 0x00533D86;
// LINE 4124:
	__asm        jmp    near ptr 0x00533D8B;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 4128:
	__asm        jmp    near ptr 0x00533DA9;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0;
	__asm        jl     _T3a8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0;
	__asm        jl     _T3a8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0x80;
	__asm        jge    _T3a8;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0x80;
	__asm        jl     _T3b3;
_T3a8:
	__asm        mov    word ptr [ebp-0x44], 0;
	__asm        jmp    _T3f7;
_T3b3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x39];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x44], ax;
	__asm        jmp    _T3f7;
_T3f7:
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrainDirection;
// LINE 4129:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustCurrentPosition;
// LINE 4130:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustNextPosition;
// LINE 4131:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrailingCars;
// LINE 4132:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x61], 0;
// LINE 4134:
	__asm        mov    eax, 1;
	__asm        jmp    _T434;
// LINE 4136:
_T42f:
	__asm        jmp    _T2e5;
_T434:
}

// FUNCTION: COPTER_D 0x00533e76
int32_t TrainClass::InitializeInstance(long mapx, long mapy, int32_t instanceID) {
	struct VRObjInfo objectInfo;
	int32_t object3;
	int32_t object1;
	int32_t object2;

// LINE 4396:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA9], 0;
// LINE 4397:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10D], 0;
// LINE 4398:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x171], 0;
// LINE 4420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x95];
	__asm        push   eax;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object1, eax;
// LINE 4421:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x99];
	__asm        push   eax;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object2, eax;
// LINE 4422:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9D];
	__asm        push   eax;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object3, eax;
// LINE 4424:
	__asm        cmp    object1, 0;
	__asm        je     _T90;

	__asm        cmp    object2, 0;
	__asm        je     _T90;

	__asm        cmp    object3, 0;
	__asm        jne    _T118;
// LINE 4427:
_T90:
	__asm        cmp    object1, 0;
	__asm        jne    _Tb6;

	__asm        push   0x114B;
	__asm        push   0x5B7B30;
	__asm        push   0x5B7B54;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tbb;
_Tb6:
	__asm        jmp    _Tbb;
// LINE 4428:
_Tbb:
	__asm        cmp    object2, 0;
	__asm        jne    _Te1;

	__asm        push   0x114C;
	__asm        push   0x5B7B5C;
	__asm        push   0x5B7B80;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Te6;
_Te1:
	__asm        jmp    _Te6;
// LINE 4429:
_Te6:
	__asm        cmp    object3, 0;
	__asm        jne    _T10c;

	__asm        push   0x114D;
	__asm        push   0x5B7B88;
	__asm        push   0x5B7BAC;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T111;
_T10c:
	__asm        jmp    _T111;
// LINE 4431:
_T111:
	__asm        xor    eax, eax;
	__asm        jmp    _T45e;
// LINE 4435:
_T118:
	__asm        cmp    instanceID, 0;
	__asm        jne    _T14b;
// LINE 4439:
	__asm        mov    eax, object1;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA9], eax;
// LINE 4440:
	__asm        mov    eax, object2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10D], eax;
// LINE 4441:
	__asm        mov    eax, object3;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x171], eax;
// LINE 4443:
	__asm        jmp    _T152;
// LINE 4446:
_T14b:
	__asm        xor    eax, eax;
	__asm        jmp    _T45e;
// LINE 4490:
_T152:
	__asm        mov    eax, instanceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAF], ax;
// LINE 4491:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0xAD], 0x81;
// LINE 4492:
	__asm        mov    eax, instanceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x113], ax;
// LINE 4493:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x111], 0x81;
// LINE 4494:
	__asm        mov    eax, instanceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x177], ax;
// LINE 4495:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x175], 0x81;
// LINE 4497:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC5;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 4498:
	__asm        mov    eax, this;
	__asm        add    eax, 0x129;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 4499:
	__asm        mov    eax, this;
	__asm        add    eax, 0x18D;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 4500:
	__asm        lea    eax, objectInfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, object1;
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 4501:
	__asm        mov    eax, objectInfo.Radius;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB1], eax;
// LINE 4502:
	__asm        mov    eax, objectInfo.Radius;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x115], eax;
// LINE 4503:
	__asm        mov    eax, objectInfo.Radius;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x179], eax;
// LINE 4504:
	__asm        mov    eax, object1;
	__asm        push   eax;
	__asm        call   VRObjGetHeight;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB5], eax;
// LINE 4505:
	__asm        mov    eax, object2;
	__asm        push   eax;
	__asm        call   VRObjGetHeight;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x119], eax;
// LINE 4506:
	__asm        mov    eax, object3;
	__asm        push   eax;
	__asm        call   VRObjGetHeight;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x17D], eax;
// LINE 4507:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA1;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1CD], eax;
// LINE 4508:
	__asm        mov    eax, this;
	__asm        add    eax, 0x105;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1D1], eax;
// LINE 4509:
	__asm        mov    eax, this;
	__asm        add    eax, 0x169;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1D5], eax;
// LINE 4512:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xA1], 0;
// LINE 4513:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x105], 0;
// LINE 4514:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x169], 0;
// LINE 4518:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 4519:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xD], 0;
// LINE 4520:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x61], 0;
// LINE 4521:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5D], 0;
// LINE 4522:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x35], eax;
// LINE 4523:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x39], eax;
// LINE 4524:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3D], eax;
// LINE 4525:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x41], eax;
// LINE 4526:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x45], eax;
// LINE 4527:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x49], eax;
// LINE 4528:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x4D], eax;
// LINE 4529:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x51], eax;
// LINE 4530:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x55], eax;
// LINE 4531:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x59], eax;
// LINE 4532:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        shl    eax, 0x11;
	__asm        add    eax, 0x560000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x31], eax;
// LINE 4533:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x5D], 0x1E0000;
// LINE 4538:
	__asm        cmp    mapx, 0xFFFFFFFF;
	__asm        je     _T439;

	__asm        cmp    mapy, 0xFFFFFFFF;
	__asm        je     _T439;
// LINE 4542:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::LinkToCell;
// LINE 4546:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0;
	__asm        jl     _T3af;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0;
	__asm        jl     _T3af;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x35], 0x80;
	__asm        jge    _T3af;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x39], 0x80;
	__asm        jl     _T3ba;
_T3af:
	__asm        mov    word ptr [ebp-0x34], 0;
	__asm        jmp    _T3fe;
_T3ba:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    eax, BitsMap[eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x39];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x35];
	__asm        mov    ecx, BuildMap[ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x39];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x34], ax;
	__asm        jmp    _T3fe;
_T3fe:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrainDirection;
// LINE 4547:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustCurrentPosition;
// LINE 4548:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::AdjustNextPosition;
// LINE 4549:
	__asm        mov    ecx, this;
	__asm        call   TrainClass::SetTrailingCars;
// LINE 4553:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 4557:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 1;
// LINE 4559:
	__asm        jmp    _T440;
// LINE 4563:
_T439:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 0;
// LINE 4572:
_T440:
	__asm        mov    eax, this;
	__asm        mov    ecx, instanceID;
	__asm        mov    trains[0][ecx*4], eax;
// LINE 4575:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 1;
// LINE 4577:
	__asm        mov    eax, 1;
	__asm        jmp    _T45e;
// LINE 4578:
_T45e:
}

// FUNCTION: COPTER_D 0x005342db
short GetMaximumNumberOfTrains() {
// LINE 4603:
	__asm        mov    ax, 1;
	__asm        jmp    near ptr 0x005342EA;
// LINE 4604:
}

// FUNCTION: COPTER_D 0x005342ef
int32_t CreateTrainInstance(int32_t instanceID) {
// LINE 4626:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   TrainClass::CreateInstance;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T24;

	__asm        mov    eax, 1;
	__asm        jmp    _T26;
_T24:
	__asm        xor    eax, eax;
_T26:
	__asm        jmp    near ptr 0x0053431A;
// LINE 4627:
}

// FUNCTION: COPTER_D 0x0053431f
void ResetAllTrains() {
// LINE 4645:
	__asm        call   TrainClass::ResetAll;
// LINE 4646:
	__asm        jmp    near ptr 0x0053432F;
}

// FUNCTION: COPTER_D 0x00534334
void ItterateAllTrains() {
// LINE 4668:
	__asm        call   TrainClass::ItterateAll;
// LINE 4669:
	__asm        jmp    near ptr 0x00534344;
}

// FUNCTION: COPTER_D 0x00534349
int32_t S3TrainCrashWhenReady(long mission_id) {
// LINE 4689:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   TrainClass::FindTrainToCrash;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00534360;
// LINE 4690:
}

// FUNCTION: COPTER_D 0x00534365
int32_t S3TrainStartRescue(long mission_id, int32_t timetolive) {
// LINE 4710:
	__asm        mov    eax, timetolive;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   TrainClass::FindTrainForRescue;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x00534380;
// LINE 4711:
}

// FUNCTION: COPTER_D 0x00534385
int32_t TrainClass::FindTrainForRescue(long mission_id, int32_t timetolive) {
	int32_t currentTrainIndex;
	long numtostart;
	struct _MISSION_PARMS mp;
	long y;
	long x;
	long count;
	class TrainClass* t;
	long totalpersons;

// LINE 4743:
	__asm        mov    currentTrainIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentTrainIndex;
_T18:
	__asm        cmp    currentTrainIndex, 1;
	__asm        jge    _T1d1;
// LINE 4745:
	__asm        mov    eax, currentTrainIndex;
	__asm        mov    eax, trains[0][eax*4];
	__asm        mov    t, eax;
// LINE 4750:
	__asm        jmp    near ptr 0x005343B9;

	__asm        mov    eax, t;
	__asm        movsx  eax, byte ptr [eax+0xA];
	__asm        test   eax, eax;
	__asm        jne    _T6b;

	__asm        jmp    near ptr 0x005343CD;

	__asm        mov    eax, t;
	__asm        movsx  eax, byte ptr [eax+0xB];
	__asm        test   eax, eax;
	__asm        jne    _T6b;

	__asm        jmp    near ptr 0x005343E1;

	__asm        mov    eax, t;
	__asm        movsx  eax, byte ptr [eax+0xC];
	__asm        test   eax, eax;
	__asm        je     _T72;
// LINE 4752:
_T6b:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e2;
// LINE 4756:
_T72:
	__asm        jmp    near ptr 0x005343FC;

	__asm        mov    eax, t;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _Td6;
// LINE 4759:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0x7F;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    x, eax;
// LINE 4760:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0x7F;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    y, eax;
// LINE 4763:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, t;
	__asm        call   dword ptr [eax+0x18];
	__asm        test   eax, eax;
	__asm        jne    _Td6;
// LINE 4764:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e2;
// LINE 4768:
_Td6:
	__asm        mov    eax, mission_id;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x69], eax;
// LINE 4769:
	__asm        mov    eax, timetolive;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x71], eax;
// LINE 4772:
	__asm        call   rand;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+1];
	__asm        mov    numtostart, eax;
// LINE 4773:
	__asm        mov    totalpersons, 0;
// LINE 4774:
	__asm        mov    count, 0;
	__asm        jmp    _T114;
_T111:
	__asm        inc    count;
_T114:
	__asm        mov    eax, numtostart;
	__asm        cmp    count, eax;
	__asm        jge    _T161;
// LINE 4781:
	__asm        push   0;
	__asm        mov    eax, t;
	__asm        add    eax, 0xA1;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        movzx  ax, byte ptr [eax+0x39];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        movzx  ax, byte ptr [eax+0x35];
	__asm        push   eax;
	__asm        push   1;
	__asm        push   0xFFFFFFFF;
	__asm        call   StartPerson;
	__asm        add    esp, 0x1C;
	__asm        movsx  eax, ax;
	__asm        cmp    eax, 0xFFFFFFFF;
	__asm        jle    _T15c;
// LINE 4783:
	__asm        inc    totalpersons;
// LINE 4785:
_T15c:
	__asm        jmp    _T111;
// LINE 4788:
_T161:
	__asm        cmp    totalpersons, 0;
	__asm        jne    _T179;
// LINE 4790:
	__asm        mov    eax, t;
	__asm        mov    byte ptr [eax+0xC], 0;
// LINE 4791:
	__asm        xor    eax, eax;
	__asm        jmp    _T1e2;
// LINE 4795:
_T179:
	__asm        mov    mp.op, 0;
// LINE 4796:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x69];
	__asm        mov    mp.id, eax;
// LINE 4797:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x35];
	__asm        mov    mp.maploc.x, eax;
// LINE 4798:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x39];
	__asm        mov    mp.maploc.y, eax;
// LINE 4799:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 4801:
	__asm        mov    mp.op, 0xE;
// LINE 4802:
	__asm        mov    eax, totalpersons;
	__asm        mov    mp.i2num, eax;
// LINE 4803:
	__asm        mov    mp.flags, 1;
// LINE 4804:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 4806:
	__asm        jmp    _T1d1;
// LINE 4808:
	__asm        jmp    _T15;
// LINE 4810:
_T1d1:
	__asm        mov    eax, t;
	__asm        mov    byte ptr [eax+0xC], 1;
// LINE 4811:
	__asm        mov    eax, 1;
	__asm        jmp    _T1e2;
// LINE 4812:
_T1e2:
}

// FUNCTION: COPTER_D 0x0053456c
int32_t S3TrainMIFFLoad(void * __ptr32 miffReader) {
// LINE 4826:
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   TrainClass::MIFFLoad;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00534583;
// LINE 4827:
}

// FUNCTION: COPTER_D 0x00534588
int32_t S3TrainMIFFSave(void * __ptr32 miffWriter) {
// LINE 4839:
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   TrainClass::MIFFSave;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053459F;
// LINE 4840:
}

// FUNCTION: COPTER_D 0x005345a4
int32_t TrainClass::MIFFLoad(void * __ptr32 miffReader) {
	int32_t i;
	int32_t ret;
	class TrainClass* t;

// LINE 4858:
	__asm        push   0x1D9;
	__asm        push   0x62B7B8;
	__asm        push   0x5452414E;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   ReadFirstMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4859:
	__asm        cmp    ret, 0;
	__asm        jne    _T38;
// LINE 4860:
	__asm        xor    eax, eax;
	__asm        jmp    _T35d;
// LINE 4862:
_T38:
	__asm        mov    i, 0;
	__asm        jmp    _T47;
_T44:
	__asm        inc    i;
_T47:
	__asm        cmp    i, 1;
	__asm        jge    _T353;
// LINE 4865:
	__asm        mov    eax, i;
	__asm        mov    eax, trains[0][eax*4];
	__asm        mov    t, eax;
// LINE 4866:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 4;
	__asm        mov    ecx, t;
	__asm        add    ecx, 4;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    al, [eax+8];
	__asm        mov    [ecx+8], al;
// LINE 4867:
	__asm        mov    eax, TrainClass::lsTrain.stalledTimer;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0xD], eax;
// LINE 4868:
	__asm        mov    eax, TrainClass::lsTrain.direction;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x11], eax;
// LINE 4869:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x15;
	__asm        mov    ecx, t;
	__asm        add    ecx, 0x15;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4870:
	__asm        mov    eax, TrainClass::lsTrain.remainingDist;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x21], eax;
// LINE 4871:
	__asm        mov    eax, TrainClass::lsTrain.remainingTime;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x25], eax;
// LINE 4872:
	__asm        mov    eax, TrainClass::lsTrain.utdirection;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x29], eax;
// LINE 4873:
	__asm        mov    eax, TrainClass::lsTrain.speed;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x2D], eax;
// LINE 4874:
	__asm        mov    eax, TrainClass::lsTrain.desiredSpeed;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x31], eax;
// LINE 4875:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x35;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x35;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4876:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x3D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x3D;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4877:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x45;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x45;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4878:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x4D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x4D;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4879:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x55;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x55;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4880:
	__asm        mov    eax, TrainClass::lsTrain.beamDelay;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x5D], eax;
// LINE 4881:
	__asm        mov    eax, TrainClass::lsTrain.beamTimer;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x61], eax;
// LINE 4882:
	__asm        mov    eax, TrainClass::lsTrain.utRotation;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x65], eax;
// LINE 4883:
	__asm        mov    eax, TrainClass::lsTrain.missionId;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x69], eax;
// LINE 4884:
	__asm        mov    eax, TrainClass::lsTrain.smokeTime;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x6D], eax;
// LINE 4885:
	__asm        mov    eax, TrainClass::lsTrain.timeToLive;
	__asm        mov    ecx, t;
	__asm        mov    [ecx+0x71], eax;
// LINE 4886:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x75;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x75;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4887:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x85;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x85;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4888:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x8D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x8D;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4889:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x7D;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, t;
	__asm        add    edx, 0x7D;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 4891:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0xB9;
	__asm        mov    ecx, t;
	__asm        add    ecx, 0xB9;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4892:
	__asm        mov    edi, t;
	__asm        add    edi, 0xC5;
	__asm        lea    esi, TrainClass::lsTrain.dyObj1.matrix[0][0];
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 4893:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x11D;
	__asm        mov    ecx, t;
	__asm        add    ecx, 0x11D;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4894:
	__asm        mov    edi, t;
	__asm        add    edi, 0x129;
	__asm        lea    esi, TrainClass::lsTrain.dyObj2.matrix[0][0];
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 4895:
	__asm        mov    eax, 0x62B7B8;
	__asm        add    eax, 0x181;
	__asm        mov    ecx, t;
	__asm        add    ecx, 0x181;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4896:
	__asm        mov    edi, t;
	__asm        add    edi, 0x18D;
	__asm        lea    esi, TrainClass::lsTrain.dyObj3.matrix[0][0];
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 4898:
	__asm        jmp    near ptr 0x0053485F;

	__asm        mov    eax, t;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T315;
// LINE 4900:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x1CD];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        add    eax, 0x35;
	__asm        push   eax;
	__asm        mov    ecx, t;
	__asm        call   TrainClass::LinkToCell;
// LINE 4901:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x1D1];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        add    eax, 0x3D;
	__asm        push   eax;
	__asm        mov    ecx, t;
	__asm        call   TrainClass::LinkToCell;
// LINE 4902:
	__asm        mov    eax, t;
	__asm        mov    eax, [eax+0x1D5];
	__asm        push   eax;
	__asm        mov    eax, t;
	__asm        add    eax, 0x45;
	__asm        push   eax;
	__asm        mov    ecx, t;
	__asm        call   TrainClass::LinkToCell;
// LINE 4909:
_T315:
	__asm        push   0x1D9;
	__asm        push   0x62B7B8;
	__asm        push   0x5452414E;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   ReadNextMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4911:
	__asm        cmp    ret, 0;
	__asm        jne    _T34e;

	__asm        cmp    i, 0;
	__asm        je     _T34e;
// LINE 4912:
	__asm        xor    eax, eax;
	__asm        jmp    _T35d;
// LINE 4913:
_T34e:
	__asm        jmp    _T44;
// LINE 4914:
_T353:
	__asm        mov    eax, 1;
	__asm        jmp    _T35d;
// LINE 4915:
_T35d:
}

// FUNCTION: COPTER_D 0x00534906
int32_t TrainClass::MIFFSave(void * __ptr32 miffWriter) {
	int32_t i;
	int32_t ret;

// LINE 4928:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        cmp    i, 1;
	__asm        jge    _T5c;
// LINE 4933:
	__asm        push   0x1D9;
	__asm        mov    eax, i;
	__asm        mov    eax, trains[0][eax*4];
	__asm        push   eax;
	__asm        push   0x5452414E;
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   WriteMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4934:
	__asm        cmp    ret, 0;
	__asm        jne    _T57;
// LINE 4935:
	__asm        xor    eax, eax;
	__asm        jmp    _T66;
// LINE 4936:
_T57:
	__asm        jmp    _T15;
// LINE 4937:
_T5c:
	__asm        mov    eax, 1;
	__asm        jmp    _T66;
// LINE 4938:
_T66:
}



// Contribution: 1:00133980-001339b8 Module: 162, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00534980
// TrainClass::`scalar deleting destructor'



// Contribution: 2:00004238-00004253 Module: 162, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593238
// GLOBAL: COPTER_D 0x00593238
// ??_7TrainClass@@6B@


// Contribution: 3:000000ac-000000af Module: 162, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970ac
void (*$S8)() = { /* <data@0x005970ac> */ };



// Contribution: 3:00020830-00020bb3 Module: 162, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7830
struct Point2d TrainClass::lastScannedLocation = { /* <data@0x005b7830> */ };



// Contribution: 3:00020bb8-00020ca7 Module: 162, 8 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b7bb8
struct CONNECTION_INFO_TYPE connections[30] = { /* <data@0x005b7bb8> */ };



// Contribution: 3:000947b8-00094998 Module: 162, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b7b8
class TrainClass TrainClass::lsTrain = { /* <data@0x0062b7b8> */ };

// GLOBAL: COPTER_D 0x0062b994
class TrainClass* trains[1] = { /* <data@0x0062b994> */ };

// GLOBAL: COPTER_D 0x0062b998
// LOCAL: COPTER_D 0x0062b998
// $S5


// Unknown globals:
// The PDB was slightly corrupted and we aren't sure which file these globals belong to.
// GLOBAL: COPTER_D 0x006bf188
struct Point2d CameraCell = { /* <data@0x006bf188> */ };

// GLOBAL: COPTER_D 0x006bf188
struct Point2d CameraCell = { /* <data@0x006bf188> */ };

