// Module: S3user.obj
// Source: C:\Copter\Source\Game\S3user.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: struct tagUserPersonalInfo (forward reference);

// Type: long;

// Type: struct tagCitySettings (forward reference);

// Type: char *;

// Type: int32_t;

// Type: int32_t *[9];

// Type: struct tagCareerCityInfo (forward reference);

// Type: char[256];



// Contribution: 1:00027e80-000294ea Module: 67, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00428e80
void $E48() {

	__asm        call   $E45;
	__asm        call   $E47;
	__asm        jmp    near ptr 0x00428E95;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00428e9a
void $E45() {

	__asm        mov    dword ptr ds:[0x5C33D4], 1;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33E0], 0;
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    _T5b;

	__asm        lea    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C3668];
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    ds:[0x5C33E0], eax;
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    near ptr 0x00428EFA;

	__asm        mov    dword ptr ds:[0x5C33D0], 0;
	__asm        jmp    near ptr 0x00428F09;

	__asm        jmp    near ptr 0x00428F0E;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00428f13
void $E47() {

	__asm        push   0x428F30;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00428F2B;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x00428f30
void $E46() {

	__asm        jmp    near ptr 0x00428F3B;

	__asm        jmp    near ptr 0x00428F40;

	__asm        jmp    near ptr 0x00428F45;
}

// FUNCTION: COPTER_D 0x00428f4a
struct tagUserPersonalInfo* GetCurrentUserPersonalInfo() {
// LINE 84:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    _T1e;
// LINE 85:
	__asm        lea    eax, ds:[0x5C2A48];
	__asm        jmp    _T29;
// LINE 86:
_T1e:
	__asm        lea    eax, ds:[0x5C2ABC];
	__asm        jmp    _T29;
// LINE 87:
_T29:
}

// FUNCTION: COPTER_D 0x00428f78
void SetCurrentUserPersonalInfo(struct tagUserPersonalInfo* newUserPersonalInfo) {
// LINE 93:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    _T23;
// LINE 94:
	__asm        lea    edi, ds:[0x5C2A48];
	__asm        mov    esi, newUserPersonalInfo;
	__asm        mov    ecx, 0x16;
	__asm        rep movsd;
// LINE 95:
_T23:
	__asm        lea    edi, ds:[0x5C2ABC];
	__asm        mov    esi, newUserPersonalInfo;
	__asm        mov    ecx, 0x16;
	__asm        rep movsd;
// LINE 96:
	__asm        jmp    near ptr 0x00428FB0;
}

// FUNCTION: COPTER_D 0x00428fb5
long GetUserMoney() {
// LINE 102:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    eax, [eax+0x40];
	__asm        jmp    near ptr 0x00428FC8;
// LINE 103:
}

// FUNCTION: COPTER_D 0x00428fcd
void SetUserMoney(long lNewMoney) {
// LINE 109:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, lNewMoney;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+0x40], eax;
// LINE 110:
	__asm        jmp    near ptr 0x00428FEC;
}

// FUNCTION: COPTER_D 0x00428ff1
void ChangeUserMoney(long lNewMoneyDelta) {
// LINE 116:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, lNewMoneyDelta;
	__asm        mov    ecx, [ebp-4];
	__asm        add    [ecx+0x40], eax;
// LINE 117:
	__asm        jmp    near ptr 0x00429010;
}

// FUNCTION: COPTER_D 0x00429015
long GetUserPoints() {
// LINE 125:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    eax, [eax+0x50];
	__asm        jmp    near ptr 0x00429028;
// LINE 126:
}

// FUNCTION: COPTER_D 0x0042902d
void SetUserPoints(long lNewPoints) {
// LINE 132:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, lNewPoints;
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx+0x50], eax;
// LINE 133:
	__asm        jmp    near ptr 0x0042904C;
}

// FUNCTION: COPTER_D 0x00429051
void ChangeUserPoints(long lNewPointsDelta) {
// LINE 139:
	__asm        call   GetCurrentUserPersonalInfo;
	__asm        mov    [ebp-4], eax;
	__asm        mov    eax, lNewPointsDelta;
	__asm        mov    ecx, [ebp-4];
	__asm        add    [ecx+0x50], eax;
// LINE 140:
	__asm        jmp    near ptr 0x00429070;
}

// FUNCTION: COPTER_D 0x00429075
struct tagCitySettings* GetCurrentCitySettings() {
// LINE 147:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    _T1d;
// LINE 148:
	__asm        mov    eax, 0x5C2A20;
	__asm        jmp    _T31;
// LINE 149:
_T1d:
	__asm        mov    eax, ds:[0x5C2AB4];
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8+0x5C2B1C];
	__asm        jmp    _T31;
// LINE 150:
_T31:
}

// FUNCTION: COPTER_D 0x004290ab
void SetCurrentCitySettings(struct tagCitySettings* newCitySettings) {
	struct tagCitySettings* tempCitySettings;

// LINE 157:
	__asm        call   GetCurrentCitySettings;
	__asm        mov    tempCitySettings, eax;
// LINE 158:
	__asm        mov    edi, tempCitySettings;
	__asm        mov    esi, newCitySettings;
	__asm        mov    ecx, 9;
	__asm        rep movsd;
// LINE 159:
	__asm        jmp    near ptr 0x004290CE;
}

// FUNCTION: COPTER_D 0x004290d3
char * GetCurrentCityPath() {
// LINE 167:
	__asm        mov    eax, 0x5C2918;
	__asm        jmp    near ptr 0x004290E3;
// LINE 168:
}

// FUNCTION: COPTER_D 0x004290e8
void SetCurrentCityPath(char * szNewCurrentCityPath) {
// LINE 178:
	__asm        mov    eax, szNewCurrentCityPath;
	__asm        push   eax;
	__asm        push   0x5C2918;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 179:
	__asm        jmp    near ptr 0x00429104;
}

// FUNCTION: COPTER_D 0x00429109
void SetUserHasSavedCurrentCity() {
// LINE 186:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    _T22;
// LINE 187:
	__asm        mov    dword ptr ds:[0x5C2A44], 1;
// LINE 188:
	__asm        jmp    _T2c;
// LINE 189:
_T22:
	__asm        mov    dword ptr ds:[0x5C2AB8], 1;
// LINE 190:
_T2c:
	__asm        jmp    near ptr 0x0042913A;
}

// FUNCTION: COPTER_D 0x0042913f
int32_t GetUserHasSavedCurrentCity() {
// LINE 197:
	__asm        cmp    dword ptr ds:[0x5C2AA0], 1;
	__asm        jne    _T22;
// LINE 198:
	__asm        mov    eax, ds:[0x5C2A44];
	__asm        jmp    _T2c;
// LINE 199:
	__asm        jmp    _T2c;
// LINE 200:
_T22:
	__asm        mov    eax, ds:[0x5C2AB8];
	__asm        jmp    _T2c;
// LINE 201:
_T2c:
}

// FUNCTION: COPTER_D 0x00429170
void MakeCityFileName(int32_t nCityFileType, char * szCityFileNameBase, char * szCityFileName) {
// LINE 215:
	__asm        mov    eax, szCityFileNameBase;
	__asm        push   eax;
	__asm        mov    eax, szCityFileName;
	__asm        push   eax;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 217:
	__asm        cmp    nCityFileType, 1;
	__asm        jne    _T37;
// LINE 218:
	__asm        mov    eax, ds:[0x597540];
	__asm        push   eax;
	__asm        mov    eax, szCityFileName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 219:
	__asm        jmp    _T74;
_T37:
	__asm        cmp    nCityFileType, 2;
	__asm        jne    _T58;
// LINE 220:
	__asm        mov    eax, ds:[0x597544];
	__asm        push   eax;
	__asm        mov    eax, szCityFileName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 221:
	__asm        jmp    _T74;
_T58:
	__asm        cmp    nCityFileType, 3;
	__asm        jne    _T74;
// LINE 222:
	__asm        mov    eax, ds:[0x597548];
	__asm        push   eax;
	__asm        mov    eax, szCityFileName;
	__asm        push   eax;
	__asm        call   strcat;
	__asm        add    esp, 8;
// LINE 223:
_T74:
	__asm        jmp    near ptr 0x004291E9;
}

// FUNCTION: COPTER_D 0x004291ee
void InitializeAllUserInfo() {
// LINE 231:
	__asm        mov    byte ptr ds:[0x5C2918], 0;
// LINE 232:
	__asm        mov    byte ptr ds:[0x5C33E8], 0;
// LINE 234:
	__asm        mov    dword ptr ds:[0x5C2AA8], 0;
// LINE 235:
	__asm        mov    dword ptr ds:[0x5C2AAC], 1;
// LINE 236:
	__asm        mov    dword ptr ds:[0x5C2AB0], 2;
// LINE 237:
	__asm        mov    dword ptr ds:[0x5C2AB4], 0;
// LINE 238:
	__asm        mov    dword ptr ds:[0x5C2AB8], 0;
// LINE 239:
	__asm        mov    byte ptr ds:[0x5C2ABC], 0;
// LINE 240:
	__asm        mov    dword ptr ds:[0x5C2AFC], 0;
// LINE 241:
	__asm        mov    dword ptr ds:[0x5C2B00], 0;
// LINE 242:
	__asm        mov    dword ptr ds:[0x5C2B04], 0;
// LINE 243:
	__asm        mov    dword ptr ds:[0x5C2B08], 0;
// LINE 244:
	__asm        mov    dword ptr ds:[0x5C2B0C], 0;
// LINE 245:
	__asm        mov    dword ptr ds:[0x5C2B10], 0;
// LINE 247:
	__asm        mov    dword ptr ds:[0x5C2A20], 0;
// LINE 248:
	__asm        mov    dword ptr ds:[0x5C2A40], 0;
// LINE 249:
	__asm        mov    dword ptr ds:[0x5C2A44], 0;
// LINE 250:
	__asm        mov    byte ptr ds:[0x5C2A48], 0;
// LINE 251:
	__asm        mov    dword ptr ds:[0x5C2A88], 0;
// LINE 252:
	__asm        mov    dword ptr ds:[0x5C2A8C], 0;
// LINE 253:
	__asm        mov    dword ptr ds:[0x5C2A90], 0;
// LINE 254:
	__asm        mov    dword ptr ds:[0x5C2A94], 0;
// LINE 255:
	__asm        mov    dword ptr ds:[0x5C2A98], 0;
// LINE 256:
	__asm        mov    dword ptr ds:[0x5C2A9C], 0;
// LINE 258:
	__asm        mov    dword ptr ds:[0x5C2AA0], 0;
// LINE 259:
	__asm        jmp    near ptr 0x004292E7;
}

// FUNCTION: COPTER_D 0x004292ec
void CareerCityTweakInit() {
	const int32_t nPvals;
	int32_t * pvals[9];
	int32_t i;
	struct tagCareerCityInfo* currentCareerCityInfo;

// LINE 268:
	__asm        mov    nPvals, 9;
// LINE 273:
	__asm        mov    i, 0;
	__asm        jmp    _T1f;
_T1c:
	__asm        inc    i;
_T1f:
	__asm        cmp    i, 0x1F;
	__asm        jge    _Ta5;
// LINE 274:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*8];
	__asm        add    eax, 0x5C2B18;
	__asm        mov    currentCareerCityInfo, eax;
// LINE 275:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 4;
	__asm        mov    pvals[0], eax;
// LINE 276:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 8;
	__asm        mov    pvals[1], eax;
// LINE 277:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0xC;
	__asm        mov    pvals[2], eax;
// LINE 278:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x10;
	__asm        mov    pvals[3], eax;
// LINE 279:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x14;
	__asm        mov    pvals[4], eax;
// LINE 280:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x18;
	__asm        mov    pvals[5], eax;
// LINE 281:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x1C;
	__asm        mov    pvals[6], eax;
// LINE 282:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x20;
	__asm        mov    pvals[7], eax;
// LINE 283:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        add    eax, 0x24;
	__asm        mov    pvals[8], eax;
// LINE 284:
	__asm        mov    eax, currentCareerCityInfo;
	__asm        mov    eax, [eax+0x44];
	__asm        push   eax;
	__asm        push   9;
	__asm        lea    eax, pvals[0];
	__asm        push   eax;
	__asm        call   TWKEnQueue;
	__asm        add    esp, 0xC;
// LINE 285:
	__asm        jmp    _T1c;
// LINE 286:
_Ta5:
	__asm        jmp    near ptr 0x00429396;
}

// FUNCTION: COPTER_D 0x0042939b
void SetUpNewCareerCity(long lNewCareerCityIndex) {
	char szFullCityFileName[256];

// LINE 303:
	__asm        cmp    lNewCareerCityIndex, 0x1F;
	__asm        jge    _T20;

	__asm        cmp    lNewCareerCityIndex, 0;
	__asm        jge    _T27;
// LINE 304:
_T20:
	__asm        mov    lNewCareerCityIndex, 0;
// LINE 307:
_T27:
	__asm        lea    eax, szFullCityFileName[0];
	__asm        push   eax;
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B5C];
	__asm        push   eax;
	__asm        push   1;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 308:
	__asm        push   0x5C2918;
	__asm        lea    eax, szFullCityFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   5;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 310:
	__asm        mov    dword ptr ds:[0x5C2AA8], 0;
// LINE 311:
	__asm        mov    dword ptr ds:[0x5C2AAC], 1;
// LINE 312:
	__asm        mov    dword ptr ds:[0x5C2AB0], 2;
// LINE 313:
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        mov    ds:[0x5C2AB4], eax;
// LINE 314:
	__asm        mov    dword ptr ds:[0x5C2AB8], 0;
// LINE 315:
	__asm        mov    byte ptr ds:[0x5C2ABC], 0;
// LINE 316:
	__asm        mov    dword ptr ds:[0x5C2AFC], 0xFA0;
// LINE 317:
	__asm        mov    dword ptr ds:[0x5C2B00], 0x10;
// LINE 318:
	__asm        mov    dword ptr ds:[0x5C2B04], 0;
// LINE 319:
	__asm        mov    dword ptr ds:[0x5C2B08], 0;
// LINE 320:
	__asm        mov    dword ptr ds:[0x5C2B0C], 0;
// LINE 321:
	__asm        mov    dword ptr ds:[0x5C2B10], 0;
// LINE 322:
	__asm        mov    dword ptr ds:[0x5C2AA0], 2;
// LINE 323:
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B3C];
	__asm        push   eax;
	__asm        call   S3SetDayNight;
	__asm        add    esp, 4;
// LINE 324:
	__asm        mov    dword ptr ds:[0x5C33D0], 0;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x004294AF;

	__asm        jmp    near ptr 0x004294B4;

	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     _T12b;

	__asm        jmp    _T1a6;
_T12b:
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    _T14d;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T1a1;

	__asm        jmp    _T1a1;
_T14d:
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    _T188;

	__asm        lea    eax, [ebp-0x10C];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10C];
	__asm        mov    [ebp-0x104], eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T1a1;

	__asm        jmp    _T1a1;
_T188:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T1a1;
_T1a1:
	__asm        jmp    _T1a6;
_T1a6:
	__asm        jmp    near ptr 0x00429546;

	__asm        jmp    near ptr 0x0042954B;

	__asm        jmp    near ptr 0x00429550;
// LINE 327:
	__asm        mov    dword ptr ds:[0x5C2AFC], 0xFA0;
// LINE 328:
	__asm        mov    dword ptr ds:[0x5C2A8C], 0x10;
// LINE 329:
	__asm        mov    dword ptr ds:[0x5C2B04], 0xFFFFFFFF;
// LINE 330:
	__asm        mov    dword ptr ds:[0x5C2B10], 0xA;
// LINE 332:
	__asm        jmp    near ptr 0x0042957D;
}

// FUNCTION: COPTER_D 0x00429582
void SetUpNewUserCity(char * szUserCityPath) {
	char * chPrefData;

// LINE 348:
	__asm        mov    eax, szUserCityPath;
	__asm        push   eax;
	__asm        push   0x5C2918;
	__asm        call   strcpy;
	__asm        add    esp, 8;
// LINE 349:
	__asm        mov    edi, 0x5C2A20;
	__asm        lea    esi, ds:[0x5C2B1C];
	__asm        mov    ecx, 9;
	__asm        rep movsd;
// LINE 350:
	__asm        mov    dword ptr ds:[0x5C2A44], 0;
// LINE 351:
	__asm        mov    byte ptr ds:[0x5C2A48], 0;
// LINE 352:
	__asm        mov    dword ptr ds:[0x5C2A88], 0xFA0;
// LINE 353:
	__asm        mov    dword ptr ds:[0x5C2A8C], 0x10;
// LINE 354:
	__asm        mov    dword ptr ds:[0x5C2A90], 0;
// LINE 355:
	__asm        mov    dword ptr ds:[0x5C2A94], 0;
// LINE 356:
	__asm        mov    dword ptr ds:[0x5C2A98], 0;
// LINE 357:
	__asm        mov    dword ptr ds:[0x5C2A9C], 0;
// LINE 358:
	__asm        mov    dword ptr ds:[0x5C2AA0], 1;
// LINE 361:
	__asm        cmp    dword ptr ds:[0x599BC4], 0;
	__asm        je     _Tdf;
// LINE 362:
	__asm        push   0x5EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x1C];
	__asm        mov    chPrefData, eax;
// LINE 363:
	__asm        cmp    chPrefData, 0;
	__asm        je     _Tdf;
// LINE 364:
	__asm        push   0x5EEEEEE;
	__asm        mov    eax, ds:[0x599BC4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, ds:[0x599BC4];
	__asm        call   dword ptr [eax+0x24];
	__asm        cmp    eax, 0x24;
	__asm        jne    _Tdf;
// LINE 365:
	__asm        mov    edi, 0x5C2A20;
	__asm        mov    esi, chPrefData;
	__asm        mov    ecx, 9;
	__asm        rep movsd;
// LINE 368:
_Tdf:
	__asm        call   IsActualTimeDaytime;
	__asm        cmp    eax, 1;
	__asm        sbb    eax, eax;
	__asm        neg    eax;
	__asm        push   eax;
	__asm        call   S3SetDayNight;
	__asm        add    esp, 4;
// LINE 369:
	__asm        mov    dword ptr ds:[0x5C33D0], 0;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x00429699;

	__asm        jmp    near ptr 0x0042969E;

	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     _T12e;

	__asm        jmp    _T19d;
_T12e:
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    _T150;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T198;

	__asm        jmp    _T198;
_T150:
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    _T17f;

	__asm        lea    eax, [ebp-0x10];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T198;

	__asm        jmp    _T198;
_T17f:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T198;
_T198:
	__asm        jmp    _T19d;
_T19d:
	__asm        jmp    near ptr 0x00429724;

	__asm        jmp    near ptr 0x00429729;

	__asm        jmp    near ptr 0x0042972E;
// LINE 372:
	__asm        mov    dword ptr ds:[0x5C2A88], 0xFA0;
// LINE 373:
	__asm        mov    dword ptr ds:[0x5C2A8C], 0x10;
// LINE 374:
	__asm        mov    dword ptr ds:[0x5C2A90], 0xFFFFFFFF;
// LINE 375:
	__asm        mov    dword ptr ds:[0x5C2A9C], 0xA;
// LINE 377:
	__asm        jmp    near ptr 0x0042975B;
}

// FUNCTION: COPTER_D 0x00429760
void MoveToNextCareerCity(long lNewCareerCityIndex) {
	char szFullCityFileName[256];
	long lOriginalIndex;

// LINE 395:
	__asm        mov    eax, ds:[0x5C2AB4];
	__asm        mov    lOriginalIndex, eax;
// LINE 398:
	__asm        lea    eax, szFullCityFileName[0];
	__asm        push   eax;
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B5C];
	__asm        push   eax;
	__asm        push   1;
	__asm        call   MakeCityFileName;
	__asm        add    esp, 0xC;
// LINE 399:
	__asm        push   0x5C2918;
	__asm        lea    eax, szFullCityFileName[0];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   5;
	__asm        call   GetPathForFile;
	__asm        add    esp, 0x10;
// LINE 401:
	__asm        mov    eax, lOriginalIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B40];
	__asm        mov    ds:[0x5C2AA8], eax;
// LINE 402:
	__asm        mov    eax, lOriginalIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B44];
	__asm        mov    ds:[0x5C2AAC], eax;
// LINE 403:
	__asm        mov    eax, lOriginalIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B48];
	__asm        mov    ds:[0x5C2AB0], eax;
// LINE 404:
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        mov    ds:[0x5C2AB4], eax;
// LINE 405:
	__asm        mov    eax, lNewCareerCityIndex;
	__asm        shl    eax, 3;
	__asm        mov    eax, [eax+eax*8+0x5C2B3C];
	__asm        push   eax;
	__asm        call   S3SetDayNight;
	__asm        add    esp, 4;
// LINE 406:
	__asm        mov    dword ptr ds:[0x5C33D0], 0;
	__asm        mov    dword ptr ds:[0x5C33DC], 0;
	__asm        mov    dword ptr ds:[0x5C33D8], 0;
	__asm        jmp    near ptr 0x00429822;

	__asm        jmp    near ptr 0x00429827;

	__asm        cmp    dword ptr ds:[0x5C33D8], 0;
	__asm        je     _Td9;

	__asm        jmp    _T154;
_Td9:
	__asm        cmp    dword ptr ds:[0x5C33D4], 1;
	__asm        jne    _Tfb;

	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T14f;

	__asm        jmp    _T14f;
_Tfb:
	__asm        cmp    dword ptr ds:[0x5C33D4], 0;
	__asm        jne    _T136;

	__asm        lea    eax, [ebp-0x110];
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C365C];
	__asm        mov    eax, [ebp-0x110];
	__asm        mov    [ebp-0x108], eax;
	__asm        mov    eax, [ebp-0x108];
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T14f;

	__asm        jmp    _T14f;
_T136:
	__asm        call   dword ptr ds:[0x6C3908];
	__asm        mov    ecx, 0x3E8;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        mov    ds:[0x5C33D8], eax;
	__asm        jmp    _T14f;
_T14f:
	__asm        jmp    _T154;
_T154:
	__asm        jmp    near ptr 0x004298B9;

	__asm        jmp    near ptr 0x004298BE;

	__asm        jmp    near ptr 0x004298C3;
// LINE 407:
	__asm        push   0;
	__asm        call   SetUserPoints;
	__asm        add    esp, 4;
// LINE 408:
	__asm        jmp    near ptr 0x004298D2;
}

// FUNCTION: COPTER_D 0x004298d7
void InitializeAllCareerCitiesInfo() {
	int32_t i;

// LINE 421:
	__asm        mov    dword ptr ds:[0x5C2B4C], 0xFFFFFFFF;
// LINE 422:
	__asm        mov    dword ptr ds:[0x5C2B50], 0xFFFFFFFF;
// LINE 423:
	__asm        mov    dword ptr ds:[0x5C2B54], 0xFFFFFFFF;
// LINE 424:
	__asm        mov    dword ptr ds:[0x5C2B40], 3;
// LINE 425:
	__asm        mov    dword ptr ds:[0x5C2B44], 4;
// LINE 426:
	__asm        mov    dword ptr ds:[0x5C2B48], 1;
// LINE 427:
	__asm        mov    dword ptr ds:[0x5C2B58], 0;
// LINE 428:
	__asm        mov    dword ptr ds:[0x5C2B18], 0;
// LINE 429:
	__asm        mov    eax, ds:[0x5974C0];
	__asm        mov    ds:[0x5C2B5C], eax;
// LINE 431:
	__asm        mov    dword ptr ds:[0x5C2B94], 0xFFFFFFFF;
// LINE 432:
	__asm        mov    dword ptr ds:[0x5C2B98], 0xFFFFFFFF;
// LINE 433:
	__asm        mov    dword ptr ds:[0x5C2B9C], 0xFFFFFFFF;
// LINE 434:
	__asm        mov    dword ptr ds:[0x5C2B88], 3;
// LINE 435:
	__asm        mov    dword ptr ds:[0x5C2B8C], 4;
// LINE 436:
	__asm        mov    dword ptr ds:[0x5C2B90], 5;
// LINE 437:
	__asm        mov    dword ptr ds:[0x5C2BA0], 1;
// LINE 438:
	__asm        mov    dword ptr ds:[0x5C2B60], 0;
// LINE 439:
	__asm        mov    eax, ds:[0x5974C4];
	__asm        mov    ds:[0x5C2BA4], eax;
// LINE 441:
	__asm        mov    dword ptr ds:[0x5C2BDC], 0xFFFFFFFF;
// LINE 442:
	__asm        mov    dword ptr ds:[0x5C2BE0], 0xFFFFFFFF;
// LINE 443:
	__asm        mov    dword ptr ds:[0x5C2BE4], 0xFFFFFFFF;
// LINE 444:
	__asm        mov    dword ptr ds:[0x5C2BD0], 1;
// LINE 445:
	__asm        mov    dword ptr ds:[0x5C2BD4], 4;
// LINE 446:
	__asm        mov    dword ptr ds:[0x5C2BD8], 5;
// LINE 447:
	__asm        mov    dword ptr ds:[0x5C2BE8], 2;
// LINE 448:
	__asm        mov    dword ptr ds:[0x5C2BA8], 0;
// LINE 449:
	__asm        mov    eax, ds:[0x5974C8];
	__asm        mov    ds:[0x5C2BEC], eax;
// LINE 451:
	__asm        mov    dword ptr ds:[0x5C2C24], 1;
// LINE 452:
	__asm        mov    dword ptr ds:[0x5C2C28], 2;
// LINE 453:
	__asm        mov    dword ptr ds:[0x5C2C2C], 4;
// LINE 454:
	__asm        mov    dword ptr ds:[0x5C2C18], 4;
// LINE 455:
	__asm        mov    dword ptr ds:[0x5C2C1C], 6;
// LINE 456:
	__asm        mov    dword ptr ds:[0x5C2C20], 7;
// LINE 457:
	__asm        mov    dword ptr ds:[0x5C2C30], 3;
// LINE 458:
	__asm        mov    dword ptr ds:[0x5C2BF0], 1;
// LINE 459:
	__asm        mov    eax, ds:[0x5974CC];
	__asm        mov    ds:[0x5C2C34], eax;
// LINE 461:
	__asm        mov    dword ptr ds:[0x5C2C6C], 1;
// LINE 462:
	__asm        mov    dword ptr ds:[0x5C2C70], 3;
// LINE 463:
	__asm        mov    dword ptr ds:[0x5C2C74], 5;
// LINE 464:
	__asm        mov    dword ptr ds:[0x5C2C60], 6;
// LINE 465:
	__asm        mov    dword ptr ds:[0x5C2C64], 7;
// LINE 466:
	__asm        mov    dword ptr ds:[0x5C2C68], 8;
// LINE 467:
	__asm        mov    dword ptr ds:[0x5C2C78], 4;
// LINE 468:
	__asm        mov    dword ptr ds:[0x5C2C38], 1;
// LINE 469:
	__asm        mov    eax, ds:[0x5974D0];
	__asm        mov    ds:[0x5C2C7C], eax;
// LINE 471:
	__asm        mov    dword ptr ds:[0x5C2CB4], 0;
// LINE 472:
	__asm        mov    dword ptr ds:[0x5C2CB8], 1;
// LINE 473:
	__asm        mov    dword ptr ds:[0x5C2CBC], 4;
// LINE 474:
	__asm        mov    dword ptr ds:[0x5C2CA8], 4;
// LINE 475:
	__asm        mov    dword ptr ds:[0x5C2CAC], 7;
// LINE 476:
	__asm        mov    dword ptr ds:[0x5C2CB0], 8;
// LINE 477:
	__asm        mov    dword ptr ds:[0x5C2CC0], 5;
// LINE 478:
	__asm        mov    dword ptr ds:[0x5C2C80], 1;
// LINE 479:
	__asm        mov    eax, ds:[0x5974D4];
	__asm        mov    ds:[0x5C2CC4], eax;
// LINE 481:
	__asm        mov    dword ptr ds:[0x5C2CFC], 3;
// LINE 482:
	__asm        mov    dword ptr ds:[0x5C2D00], 4;
// LINE 483:
	__asm        mov    dword ptr ds:[0x5C2D04], 7;
// LINE 484:
	__asm        mov    dword ptr ds:[0x5C2CF0], 7;
// LINE 485:
	__asm        mov    dword ptr ds:[0x5C2CF4], 9;
// LINE 486:
	__asm        mov    dword ptr ds:[0x5C2CF8], 0xA;
// LINE 487:
	__asm        mov    dword ptr ds:[0x5C2D08], 6;
// LINE 488:
	__asm        mov    dword ptr ds:[0x5C2CC8], 2;
// LINE 489:
	__asm        mov    eax, ds:[0x5974D8];
	__asm        mov    ds:[0x5C2D0C], eax;
// LINE 491:
	__asm        mov    dword ptr ds:[0x5C2D44], 4;
// LINE 492:
	__asm        mov    dword ptr ds:[0x5C2D48], 6;
// LINE 493:
	__asm        mov    dword ptr ds:[0x5C2D4C], 8;
// LINE 494:
	__asm        mov    dword ptr ds:[0x5C2D38], 9;
// LINE 495:
	__asm        mov    dword ptr ds:[0x5C2D3C], 0xA;
// LINE 496:
	__asm        mov    dword ptr ds:[0x5C2D40], 0xB;
// LINE 497:
	__asm        mov    dword ptr ds:[0x5C2D50], 7;
// LINE 498:
	__asm        mov    dword ptr ds:[0x5C2D10], 2;
// LINE 499:
	__asm        mov    eax, ds:[0x5974DC];
	__asm        mov    ds:[0x5C2D54], eax;
// LINE 501:
	__asm        mov    dword ptr ds:[0x5C2D8C], 3;
// LINE 502:
	__asm        mov    dword ptr ds:[0x5C2D90], 4;
// LINE 503:
	__asm        mov    dword ptr ds:[0x5C2D94], 7;
// LINE 504:
	__asm        mov    dword ptr ds:[0x5C2D80], 7;
// LINE 505:
	__asm        mov    dword ptr ds:[0x5C2D84], 0xA;
// LINE 506:
	__asm        mov    dword ptr ds:[0x5C2D88], 0xB;
// LINE 507:
	__asm        mov    dword ptr ds:[0x5C2D98], 8;
// LINE 508:
	__asm        mov    dword ptr ds:[0x5C2D58], 2;
// LINE 509:
	__asm        mov    eax, ds:[0x5974E0];
	__asm        mov    ds:[0x5C2D9C], eax;
// LINE 511:
	__asm        mov    dword ptr ds:[0x5C2DD4], 7;
// LINE 512:
	__asm        mov    dword ptr ds:[0x5C2DD8], 8;
// LINE 513:
	__asm        mov    dword ptr ds:[0x5C2DDC], 0xA;
// LINE 514:
	__asm        mov    dword ptr ds:[0x5C2DC8], 0xA;
// LINE 515:
	__asm        mov    dword ptr ds:[0x5C2DCC], 0xC;
// LINE 516:
	__asm        mov    dword ptr ds:[0x5C2DD0], 0xD;
// LINE 517:
	__asm        mov    dword ptr ds:[0x5C2DE0], 9;
// LINE 518:
	__asm        mov    dword ptr ds:[0x5C2DA0], 3;
// LINE 519:
	__asm        mov    eax, ds:[0x5974E4];
	__asm        mov    ds:[0x5C2DE4], eax;
// LINE 521:
	__asm        mov    dword ptr ds:[0x5C2E1C], 9;
// LINE 522:
	__asm        mov    dword ptr ds:[0x5C2E20], 7;
// LINE 523:
	__asm        mov    dword ptr ds:[0x5C2E24], 0xB;
// LINE 524:
	__asm        mov    dword ptr ds:[0x5C2E10], 0xC;
// LINE 525:
	__asm        mov    dword ptr ds:[0x5C2E14], 0xD;
// LINE 526:
	__asm        mov    dword ptr ds:[0x5C2E18], 0xE;
// LINE 527:
	__asm        mov    dword ptr ds:[0x5C2E28], 0xA;
// LINE 528:
	__asm        mov    dword ptr ds:[0x5C2DE8], 3;
// LINE 529:
	__asm        mov    eax, ds:[0x5974E8];
	__asm        mov    ds:[0x5C2E2C], eax;
// LINE 531:
	__asm        mov    dword ptr ds:[0x5C2E64], 6;
// LINE 532:
	__asm        mov    dword ptr ds:[0x5C2E68], 7;
// LINE 533:
	__asm        mov    dword ptr ds:[0x5C2E6C], 0xA;
// LINE 534:
	__asm        mov    dword ptr ds:[0x5C2E58], 0xA;
// LINE 535:
	__asm        mov    dword ptr ds:[0x5C2E5C], 0xD;
// LINE 536:
	__asm        mov    dword ptr ds:[0x5C2E60], 0xE;
// LINE 537:
	__asm        mov    dword ptr ds:[0x5C2E70], 0xB;
// LINE 538:
	__asm        mov    dword ptr ds:[0x5C2E30], 3;
// LINE 539:
	__asm        mov    eax, ds:[0x5974EC];
	__asm        mov    ds:[0x5C2E74], eax;
// LINE 541:
	__asm        mov    dword ptr ds:[0x5C2EAC], 0xA;
// LINE 542:
	__asm        mov    dword ptr ds:[0x5C2EB0], 0xB;
// LINE 543:
	__asm        mov    dword ptr ds:[0x5C2EB4], 0xD;
// LINE 544:
	__asm        mov    dword ptr ds:[0x5C2EA0], 0xD;
// LINE 545:
	__asm        mov    dword ptr ds:[0x5C2EA4], 0xF;
// LINE 546:
	__asm        mov    dword ptr ds:[0x5C2EA8], 0x10;
// LINE 547:
	__asm        mov    dword ptr ds:[0x5C2EB8], 0xC;
// LINE 548:
	__asm        mov    dword ptr ds:[0x5C2E78], 4;
// LINE 549:
	__asm        mov    eax, ds:[0x5974F0];
	__asm        mov    ds:[0x5C2EBC], eax;
// LINE 551:
	__asm        mov    dword ptr ds:[0x5C2EF4], 0xC;
// LINE 552:
	__asm        mov    dword ptr ds:[0x5C2EF8], 0xA;
// LINE 553:
	__asm        mov    dword ptr ds:[0x5C2EFC], 0xE;
// LINE 554:
	__asm        mov    dword ptr ds:[0x5C2EE8], 0xF;
// LINE 555:
	__asm        mov    dword ptr ds:[0x5C2EEC], 0x10;
// LINE 556:
	__asm        mov    dword ptr ds:[0x5C2EF0], 0x11;
// LINE 557:
	__asm        mov    dword ptr ds:[0x5C2F00], 0xD;
// LINE 558:
	__asm        mov    dword ptr ds:[0x5C2EC0], 4;
// LINE 559:
	__asm        mov    eax, ds:[0x5974F4];
	__asm        mov    ds:[0x5C2F04], eax;
// LINE 561:
	__asm        mov    dword ptr ds:[0x5C2F3C], 9;
// LINE 562:
	__asm        mov    dword ptr ds:[0x5C2F40], 0xA;
// LINE 563:
	__asm        mov    dword ptr ds:[0x5C2F44], 0xD;
// LINE 564:
	__asm        mov    dword ptr ds:[0x5C2F30], 0xD;
// LINE 565:
	__asm        mov    dword ptr ds:[0x5C2F34], 0x10;
// LINE 566:
	__asm        mov    dword ptr ds:[0x5C2F38], 0x11;
// LINE 567:
	__asm        mov    dword ptr ds:[0x5C2F48], 0xE;
// LINE 568:
	__asm        mov    dword ptr ds:[0x5C2F08], 4;
// LINE 569:
	__asm        mov    eax, ds:[0x5974F8];
	__asm        mov    ds:[0x5C2F4C], eax;
// LINE 571:
	__asm        mov    dword ptr ds:[0x5C2F84], 0xD;
// LINE 572:
	__asm        mov    dword ptr ds:[0x5C2F88], 0xE;
// LINE 573:
	__asm        mov    dword ptr ds:[0x5C2F8C], 0x10;
// LINE 574:
	__asm        mov    dword ptr ds:[0x5C2F78], 0x10;
// LINE 575:
	__asm        mov    dword ptr ds:[0x5C2F7C], 0x12;
// LINE 576:
	__asm        mov    dword ptr ds:[0x5C2F80], 0x13;
// LINE 577:
	__asm        mov    dword ptr ds:[0x5C2F90], 0xF;
// LINE 578:
	__asm        mov    dword ptr ds:[0x5C2F50], 5;
// LINE 579:
	__asm        mov    eax, ds:[0x5974FC];
	__asm        mov    ds:[0x5C2F94], eax;
// LINE 581:
	__asm        mov    dword ptr ds:[0x5C2FCC], 0xF;
// LINE 582:
	__asm        mov    dword ptr ds:[0x5C2FD0], 0xD;
// LINE 583:
	__asm        mov    dword ptr ds:[0x5C2FD4], 0x11;
// LINE 584:
	__asm        mov    dword ptr ds:[0x5C2FC0], 0x12;
// LINE 585:
	__asm        mov    dword ptr ds:[0x5C2FC4], 0x13;
// LINE 586:
	__asm        mov    dword ptr ds:[0x5C2FC8], 0x14;
// LINE 587:
	__asm        mov    dword ptr ds:[0x5C2FD8], 0x10;
// LINE 588:
	__asm        mov    dword ptr ds:[0x5C2F98], 5;
// LINE 589:
	__asm        mov    eax, ds:[0x597500];
	__asm        mov    ds:[0x5C2FDC], eax;
// LINE 591:
	__asm        mov    dword ptr ds:[0x5C3014], 0xC;
// LINE 592:
	__asm        mov    dword ptr ds:[0x5C3018], 0xD;
// LINE 593:
	__asm        mov    dword ptr ds:[0x5C301C], 0x10;
// LINE 594:
	__asm        mov    dword ptr ds:[0x5C3008], 0x10;
// LINE 595:
	__asm        mov    dword ptr ds:[0x5C300C], 0x13;
// LINE 596:
	__asm        mov    dword ptr ds:[0x5C3010], 0x14;
// LINE 597:
	__asm        mov    dword ptr ds:[0x5C3020], 0x11;
// LINE 598:
	__asm        mov    dword ptr ds:[0x5C2FE0], 5;
// LINE 599:
	__asm        mov    eax, ds:[0x597504];
	__asm        mov    ds:[0x5C3024], eax;
// LINE 601:
	__asm        mov    dword ptr ds:[0x5C305C], 0x10;
// LINE 602:
	__asm        mov    dword ptr ds:[0x5C3060], 0x11;
// LINE 603:
	__asm        mov    dword ptr ds:[0x5C3064], 0x13;
// LINE 604:
	__asm        mov    dword ptr ds:[0x5C3050], 0x13;
// LINE 605:
	__asm        mov    dword ptr ds:[0x5C3054], 0x15;
// LINE 606:
	__asm        mov    dword ptr ds:[0x5C3058], 0xFFFFFFFF;
// LINE 607:
	__asm        mov    dword ptr ds:[0x5C3068], 0x12;
// LINE 608:
	__asm        mov    dword ptr ds:[0x5C3028], 6;
// LINE 609:
	__asm        mov    eax, ds:[0x597508];
	__asm        mov    ds:[0x5C306C], eax;
// LINE 611:
	__asm        mov    dword ptr ds:[0x5C30A4], 0x12;
// LINE 612:
	__asm        mov    dword ptr ds:[0x5C30A8], 0x10;
// LINE 613:
	__asm        mov    dword ptr ds:[0x5C30AC], 0x14;
// LINE 614:
	__asm        mov    dword ptr ds:[0x5C3098], 0x15;
// LINE 615:
	__asm        mov    dword ptr ds:[0x5C309C], 0x16;
// LINE 616:
	__asm        mov    dword ptr ds:[0x5C30A0], 0xFFFFFFFF;
// LINE 617:
	__asm        mov    dword ptr ds:[0x5C30B0], 0x13;
// LINE 618:
	__asm        mov    dword ptr ds:[0x5C3070], 6;
// LINE 619:
	__asm        mov    eax, ds:[0x59750C];
	__asm        mov    ds:[0x5C30B4], eax;
// LINE 621:
	__asm        mov    dword ptr ds:[0x5C30EC], 0xF;
// LINE 622:
	__asm        mov    dword ptr ds:[0x5C30F0], 0x10;
// LINE 623:
	__asm        mov    dword ptr ds:[0x5C30F4], 0x13;
// LINE 624:
	__asm        mov    dword ptr ds:[0x5C30E0], 0x13;
// LINE 625:
	__asm        mov    dword ptr ds:[0x5C30E4], 0x16;
// LINE 626:
	__asm        mov    dword ptr ds:[0x5C30E8], 0xFFFFFFFF;
// LINE 627:
	__asm        mov    dword ptr ds:[0x5C30F8], 0x14;
// LINE 628:
	__asm        mov    dword ptr ds:[0x5C30B8], 6;
// LINE 629:
	__asm        mov    eax, ds:[0x597510];
	__asm        mov    ds:[0x5C30FC], eax;
// LINE 631:
	__asm        mov    dword ptr ds:[0x5C3134], 0x13;
// LINE 632:
	__asm        mov    dword ptr ds:[0x5C3138], 0x14;
// LINE 633:
	__asm        mov    dword ptr ds:[0x5C313C], 0x16;
// LINE 634:
	__asm        mov    dword ptr ds:[0x5C3128], 0x17;
// LINE 635:
	__asm        mov    dword ptr ds:[0x5C312C], 0x18;
// LINE 636:
	__asm        mov    dword ptr ds:[0x5C3130], 0xFFFFFFFF;
// LINE 637:
	__asm        mov    dword ptr ds:[0x5C3140], 0x15;
// LINE 638:
	__asm        mov    dword ptr ds:[0x5C3100], 7;
// LINE 639:
	__asm        mov    eax, ds:[0x597514];
	__asm        mov    ds:[0x5C3144], eax;
// LINE 641:
	__asm        mov    dword ptr ds:[0x5C317C], 0x12;
// LINE 642:
	__asm        mov    dword ptr ds:[0x5C3180], 0x13;
// LINE 643:
	__asm        mov    dword ptr ds:[0x5C3184], 0x15;
// LINE 644:
	__asm        mov    dword ptr ds:[0x5C3170], 0x17;
// LINE 645:
	__asm        mov    dword ptr ds:[0x5C3174], 0x18;
// LINE 646:
	__asm        mov    dword ptr ds:[0x5C3178], 0xFFFFFFFF;
// LINE 647:
	__asm        mov    dword ptr ds:[0x5C3188], 0x16;
// LINE 648:
	__asm        mov    dword ptr ds:[0x5C3148], 7;
// LINE 649:
	__asm        mov    eax, ds:[0x597518];
	__asm        mov    ds:[0x5C318C], eax;
// LINE 651:
	__asm        mov    dword ptr ds:[0x5C31C4], 0x15;
// LINE 652:
	__asm        mov    dword ptr ds:[0x5C31C8], 0x16;
// LINE 653:
	__asm        mov    dword ptr ds:[0x5C31CC], 0xFFFFFFFF;
// LINE 654:
	__asm        mov    dword ptr ds:[0x5C31B8], 0x19;
// LINE 655:
	__asm        mov    dword ptr ds:[0x5C31BC], 0x1A;
// LINE 656:
	__asm        mov    dword ptr ds:[0x5C31C0], 0xFFFFFFFF;
// LINE 657:
	__asm        mov    dword ptr ds:[0x5C31D0], 0x17;
// LINE 658:
	__asm        mov    dword ptr ds:[0x5C3190], 8;
// LINE 659:
	__asm        mov    eax, ds:[0x59751C];
	__asm        mov    ds:[0x5C31D4], eax;
// LINE 661:
	__asm        mov    dword ptr ds:[0x5C320C], 0x15;
// LINE 662:
	__asm        mov    dword ptr ds:[0x5C3210], 0x16;
// LINE 663:
	__asm        mov    dword ptr ds:[0x5C3214], 0xFFFFFFFF;
// LINE 664:
	__asm        mov    dword ptr ds:[0x5C3200], 0x19;
// LINE 665:
	__asm        mov    dword ptr ds:[0x5C3204], 0x1A;
// LINE 666:
	__asm        mov    dword ptr ds:[0x5C3208], 0xFFFFFFFF;
// LINE 667:
	__asm        mov    dword ptr ds:[0x5C3218], 0x18;
// LINE 668:
	__asm        mov    dword ptr ds:[0x5C31D8], 8;
// LINE 669:
	__asm        mov    eax, ds:[0x597520];
	__asm        mov    ds:[0x5C321C], eax;
// LINE 671:
	__asm        mov    dword ptr ds:[0x5C3254], 0x17;
// LINE 672:
	__asm        mov    dword ptr ds:[0x5C3258], 0x18;
// LINE 673:
	__asm        mov    dword ptr ds:[0x5C325C], 0xFFFFFFFF;
// LINE 674:
	__asm        mov    dword ptr ds:[0x5C3248], 0x1B;
// LINE 675:
	__asm        mov    dword ptr ds:[0x5C324C], 0x1C;
// LINE 676:
	__asm        mov    dword ptr ds:[0x5C3250], 0xFFFFFFFF;
// LINE 677:
	__asm        mov    dword ptr ds:[0x5C3260], 0x19;
// LINE 678:
	__asm        mov    dword ptr ds:[0x5C3220], 9;
// LINE 679:
	__asm        mov    eax, ds:[0x597524];
	__asm        mov    ds:[0x5C3264], eax;
// LINE 681:
	__asm        mov    dword ptr ds:[0x5C329C], 0x17;
// LINE 682:
	__asm        mov    dword ptr ds:[0x5C32A0], 0x18;
// LINE 683:
	__asm        mov    dword ptr ds:[0x5C32A4], 0xFFFFFFFF;
// LINE 684:
	__asm        mov    dword ptr ds:[0x5C3290], 0x1B;
// LINE 685:
	__asm        mov    dword ptr ds:[0x5C3294], 0x1C;
// LINE 686:
	__asm        mov    dword ptr ds:[0x5C3298], 0xFFFFFFFF;
// LINE 687:
	__asm        mov    dword ptr ds:[0x5C32A8], 0x1A;
// LINE 688:
	__asm        mov    dword ptr ds:[0x5C3268], 9;
// LINE 689:
	__asm        mov    eax, ds:[0x597528];
	__asm        mov    ds:[0x5C32AC], eax;
// LINE 691:
	__asm        mov    dword ptr ds:[0x5C32E4], 0x19;
// LINE 692:
	__asm        mov    dword ptr ds:[0x5C32E8], 0x1A;
// LINE 693:
	__asm        mov    dword ptr ds:[0x5C32EC], 0xFFFFFFFF;
// LINE 694:
	__asm        mov    dword ptr ds:[0x5C32D8], 0x1D;
// LINE 695:
	__asm        mov    dword ptr ds:[0x5C32DC], 0xFFFFFFFF;
// LINE 696:
	__asm        mov    dword ptr ds:[0x5C32E0], 0xFFFFFFFF;
// LINE 697:
	__asm        mov    dword ptr ds:[0x5C32F0], 0x1B;
// LINE 698:
	__asm        mov    dword ptr ds:[0x5C32B0], 0xA;
// LINE 699:
	__asm        mov    eax, ds:[0x59752C];
	__asm        mov    ds:[0x5C32F4], eax;
// LINE 701:
	__asm        mov    dword ptr ds:[0x5C332C], 0x19;
// LINE 702:
	__asm        mov    dword ptr ds:[0x5C3330], 0x1A;
// LINE 703:
	__asm        mov    dword ptr ds:[0x5C3334], 0xFFFFFFFF;
// LINE 704:
	__asm        mov    dword ptr ds:[0x5C3320], 0x1D;
// LINE 705:
	__asm        mov    dword ptr ds:[0x5C3324], 0xFFFFFFFF;
// LINE 706:
	__asm        mov    dword ptr ds:[0x5C3328], 0xFFFFFFFF;
// LINE 707:
	__asm        mov    dword ptr ds:[0x5C3338], 0x1C;
// LINE 708:
	__asm        mov    dword ptr ds:[0x5C32F8], 0xA;
// LINE 709:
	__asm        mov    eax, ds:[0x597530];
	__asm        mov    ds:[0x5C333C], eax;
// LINE 711:
	__asm        mov    dword ptr ds:[0x5C3374], 0x1C;
// LINE 712:
	__asm        mov    dword ptr ds:[0x5C3378], 0xFFFFFFFF;
// LINE 713:
	__asm        mov    dword ptr ds:[0x5C337C], 0xFFFFFFFF;
// LINE 714:
	__asm        mov    dword ptr ds:[0x5C3368], 0x1E;
// LINE 715:
	__asm        mov    dword ptr ds:[0x5C336C], 0xFFFFFFFF;
// LINE 716:
	__asm        mov    dword ptr ds:[0x5C3370], 0xFFFFFFFF;
// LINE 717:
	__asm        mov    dword ptr ds:[0x5C3380], 0x1D;
// LINE 718:
	__asm        mov    dword ptr ds:[0x5C3340], 0x1D;
// LINE 719:
	__asm        mov    eax, ds:[0x597534];
	__asm        mov    ds:[0x5C3384], eax;
// LINE 721:
	__asm        mov    dword ptr ds:[0x5C33BC], 0x1D;
// LINE 722:
	__asm        mov    dword ptr ds:[0x5C33C0], 0xFFFFFFFF;
// LINE 723:
	__asm        mov    dword ptr ds:[0x5C33C4], 0xFFFFFFFF;
// LINE 724:
	__asm        mov    dword ptr ds:[0x5C33B0], 0x1F;
// LINE 725:
	__asm        mov    dword ptr ds:[0x5C33B4], 0xFFFFFFFF;
// LINE 726:
	__asm        mov    dword ptr ds:[0x5C33B8], 0xFFFFFFFF;
// LINE 727:
	__asm        mov    dword ptr ds:[0x5C33C8], 0x1E;
// LINE 728:
	__asm        mov    dword ptr ds:[0x5C3388], 0xC;
// LINE 729:
	__asm        mov    eax, ds:[0x597538];
	__asm        mov    ds:[0x5C33CC], eax;
// LINE 731:
	__asm        mov    dword ptr ds:[0x5C3404], 0x1E;
// LINE 732:
	__asm        mov    dword ptr ds:[0x5C3408], 0xFFFFFFFF;
// LINE 733:
	__asm        mov    dword ptr ds:[0x5C340C], 0xFFFFFFFF;
// LINE 734:
	__asm        mov    dword ptr ds:[0x5C33F8], 0xFFFFFFFF;
// LINE 735:
	__asm        mov    dword ptr ds:[0x5C33FC], 0xFFFFFFFF;
// LINE 736:
	__asm        mov    dword ptr ds:[0x5C3400], 0xFFFFFFFF;
// LINE 737:
	__asm        mov    dword ptr ds:[0x5C3410], 0x1F;
// LINE 738:
	__asm        mov    dword ptr ds:[0x5C33D0], 0xD;
// LINE 739:
	__asm        mov    eax, ds:[0x59753C];
	__asm        mov    ds:[0x5C3414], eax;
// LINE 744:
	__asm        mov    i, 0;
	__asm        jmp    _Tb58;
_Tb55:
	__asm        inc    i;
_Tb58:
	__asm        cmp    i, 0x1F;
	__asm        jge    _Tc0a;
// LINE 745:
	__asm        mov    eax, i;
	__asm        shl    eax, 2;
	__asm        mov    ecx, 0x1F;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 3;
	__asm        mov    [ecx+ecx*8+0x5C2B1C], eax;
// LINE 746:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B20], 0x1A;
// LINE 747:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B24], 0x14;
// LINE 748:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B28], 8;
// LINE 749:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B2C], 0xC;
// LINE 750:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B30], 0x14;
// LINE 751:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B34], 0xE;
// LINE 752:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B38], 0;
// LINE 753:
	__asm        mov    eax, i;
	__asm        shl    eax, 3;
	__asm        mov    dword ptr [eax+eax*8+0x5C2B3C], 1;
// LINE 754:
	__asm        jmp    _Tb55;
// LINE 755:
_Tc0a:
	__asm        jmp    near ptr 0x0042A4E6;
}



// Contribution: 3:00000020-00000023 Module: 67, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x00597020
// $S49


// Contribution: 3:000004c0-00000662 Module: 67, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005974c0
// SZ_CAREER_CITY_FILE_NAME_BASE_0
// GLOBAL: COPTER_D 0x005974c4
// SZ_CAREER_CITY_FILE_NAME_BASE_1
// GLOBAL: COPTER_D 0x005974c8
// SZ_CAREER_CITY_FILE_NAME_BASE_2
// GLOBAL: COPTER_D 0x005974cc
// SZ_CAREER_CITY_FILE_NAME_BASE_3
// GLOBAL: COPTER_D 0x005974d0
// SZ_CAREER_CITY_FILE_NAME_BASE_4
// GLOBAL: COPTER_D 0x005974d4
// SZ_CAREER_CITY_FILE_NAME_BASE_5
// GLOBAL: COPTER_D 0x005974d8
// SZ_CAREER_CITY_FILE_NAME_BASE_6
// GLOBAL: COPTER_D 0x005974dc
// SZ_CAREER_CITY_FILE_NAME_BASE_7
// GLOBAL: COPTER_D 0x005974e0
// SZ_CAREER_CITY_FILE_NAME_BASE_8
// GLOBAL: COPTER_D 0x005974e4
// SZ_CAREER_CITY_FILE_NAME_BASE_9
// GLOBAL: COPTER_D 0x005974e8
// SZ_CAREER_CITY_FILE_NAME_BASE_10
// GLOBAL: COPTER_D 0x005974ec
// SZ_CAREER_CITY_FILE_NAME_BASE_11
// GLOBAL: COPTER_D 0x005974f0
// SZ_CAREER_CITY_FILE_NAME_BASE_12
// GLOBAL: COPTER_D 0x005974f4
// SZ_CAREER_CITY_FILE_NAME_BASE_13
// GLOBAL: COPTER_D 0x005974f8
// SZ_CAREER_CITY_FILE_NAME_BASE_14
// GLOBAL: COPTER_D 0x005974fc
// SZ_CAREER_CITY_FILE_NAME_BASE_15
// GLOBAL: COPTER_D 0x00597500
// SZ_CAREER_CITY_FILE_NAME_BASE_16
// GLOBAL: COPTER_D 0x00597504
// SZ_CAREER_CITY_FILE_NAME_BASE_17
// GLOBAL: COPTER_D 0x00597508
// SZ_CAREER_CITY_FILE_NAME_BASE_18
// GLOBAL: COPTER_D 0x0059750c
// SZ_CAREER_CITY_FILE_NAME_BASE_19
// GLOBAL: COPTER_D 0x00597510
// SZ_CAREER_CITY_FILE_NAME_BASE_20
// GLOBAL: COPTER_D 0x00597514
// SZ_CAREER_CITY_FILE_NAME_BASE_21
// GLOBAL: COPTER_D 0x00597518
// SZ_CAREER_CITY_FILE_NAME_BASE_22
// GLOBAL: COPTER_D 0x0059751c
// SZ_CAREER_CITY_FILE_NAME_BASE_23
// GLOBAL: COPTER_D 0x00597520
// SZ_CAREER_CITY_FILE_NAME_BASE_24
// GLOBAL: COPTER_D 0x00597524
// SZ_CAREER_CITY_FILE_NAME_BASE_25
// GLOBAL: COPTER_D 0x00597528
// SZ_CAREER_CITY_FILE_NAME_BASE_26
// GLOBAL: COPTER_D 0x0059752c
// SZ_CAREER_CITY_FILE_NAME_BASE_27
// GLOBAL: COPTER_D 0x00597530
// SZ_CAREER_CITY_FILE_NAME_BASE_28
// GLOBAL: COPTER_D 0x00597534
// SZ_CAREER_CITY_FILE_NAME_BASE_29
// GLOBAL: COPTER_D 0x00597538
// SZ_CAREER_CITY_FILE_NAME_BASE_30
// GLOBAL: COPTER_D 0x0059753c
// SZ_CAREER_CITY_FILE_NAME_BASE_31
// GLOBAL: COPTER_D 0x00597540
// SZ_CITY_DATA_SUFFIX
// GLOBAL: COPTER_D 0x00597544
// SZ_CITY_SMALL_VIDEO_SUFFIX
// GLOBAL: COPTER_D 0x00597548
// SZ_CITY_BIG_VIDEO_SUFFIX


// Contribution: 3:0002b918-0002c4ef Module: 67, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x005c2918
// gCityFilePath
// GLOBAL: COPTER_D 0x005c2a20
// gCurrentUserCityInfo
// GLOBAL: COPTER_D 0x005c2aa0
// gCurrentCityType
// GLOBAL: COPTER_D 0x005c2aa8
// gCurrentCareerCityInfo
// GLOBAL: COPTER_D 0x005c2b18
// gAllCareerCities
// GLOBAL: COPTER_D 0x005c33d0
// gGraduationState
// GLOBAL: COPTER_D 0x005c33e8
// gGameFilePath
