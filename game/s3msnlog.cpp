// Module: s3msnlog.obj
// Source: C:\Copter\Source\Game\s3msnlog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: /*packed*/ class LogManager;
class LogManager{ // packed(0xc bytes) TI: 0x244f
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(/*packed*/ class MIFF*);
	int32_t WriteToMIFF(/*packed*/ class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(/*packed*/ class MIFF*);
	int32_t ValidateLogEntry(/*packed*/ struct tagLogBase*);
	long GetSizeOfLogRecord(/*packed*/ struct tagLogBase*);
	int32_t AddLogEntry(/*packed*/ struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(/*packed*/ struct tagLogBase*, /*packed*/ class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const /*packed*/ struct tagLogMissionEvent*);
	/*+0x0*/   /*packed*/ class list<tagLogBase *> *myLogBasePtrList;
	/*+0x4*/   /*packed*/ class MessageDisplayManager *myMessageDisplayManager;
	/*+0x8*/   long lMaxEntries;
};

// Type: /*packed*/ class LogManager;
class LogManager{ // packed(0xc bytes) TI: 0x2b84
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(/*packed*/ class MIFF*);
	int32_t WriteToMIFF(/*packed*/ class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(/*packed*/ class MIFF*);
	int32_t ValidateLogEntry(/*packed*/ struct tagLogBase*);
	long GetSizeOfLogRecord(/*packed*/ struct tagLogBase*);
	int32_t AddLogEntry(/*packed*/ struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(/*packed*/ struct tagLogBase*, /*packed*/ class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const /*packed*/ struct tagLogMissionEvent*);
	/*+0x0*/   /*packed*/ class list<tagLogBase *> *myLogBasePtrList;
	/*+0x4*/   /*unpacked*/ class MessageDisplayManager *myMessageDisplayManager;
	/*+0x8*/   long lMaxEntries;
};

// Type: /*packed*/ struct list<tagLogBase *>::list_node_buffer (forward reference);
struct list<tagLogBase *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x16d2
	/*+0x0*/   void * __ptr32 next_buffer;
	/*+0x4*/   /*packed*/ struct list<tagLogBase *>::list_node *buffer;
};

// Type: /*packed*/ struct list<tagLogBase *>::list_node (forward reference);
struct list<tagLogBase *>::list_node{ // packed(0xc bytes) TI: 0x16d4
	/*+0x0*/   void * __ptr32 next;
	/*+0x4*/   void * __ptr32 prev;
	/*+0x8*/   /*packed*/ struct tagLogBase *data;
};

// Type: uint32_t;

// Type: void ();

// Type: void;

// Type: /*packed*/ struct tagLogBase (forward reference);
struct tagLogBase{ // packed(0xc bytes) TI: 0x1819
	/*+0x0*/   unsigned long nType;
	/*+0x4*/   unsigned long nTime;
	/*+0x8*/   unsigned long nMissionID;
};

// Type: int32_t;

// Type: /*packed*/ class LogManager (forward reference);
class LogManager{ // packed(0xc bytes) TI: 0x2b84
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(/*packed*/ class MIFF*);
	int32_t WriteToMIFF(/*packed*/ class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(/*packed*/ class MIFF*);
	int32_t ValidateLogEntry(/*packed*/ struct tagLogBase*);
	long GetSizeOfLogRecord(/*packed*/ struct tagLogBase*);
	int32_t AddLogEntry(/*packed*/ struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(/*packed*/ struct tagLogBase*, /*packed*/ class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const /*packed*/ struct tagLogMissionEvent*);
	/*+0x0*/   /*packed*/ class list<tagLogBase *> *myLogBasePtrList;
	/*+0x4*/   /*unpacked*/ class MessageDisplayManager *myMessageDisplayManager;
	/*+0x8*/   long lMaxEntries;
};

// Type: char *;

// Type: /*packed*/ class MIFF;
// VTABLE: COPTER_D 0x00591950
class MIFF : public PFile
{ // packed(0x148 bytes) TI: 0x428e
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF() /* override */;
	virtual long OpenForReading(); // vtable+0x4
	virtual long OpenForWriting(long, long, long); // vtable+0x8
	virtual long OpenForAppending(); // vtable+0xc
	virtual long Close(); // vtable+0x10
	virtual long GetPresentRecordType(); // vtable+0x14
	virtual long GetPresentRecordSize(); // vtable+0x18
	virtual long GetPresentRecordDataSize(); // vtable+0x1c
	virtual long GetPresentRecordIndex(); // vtable+0x20
	virtual long VerifyFile(); // vtable+0x24
	virtual long ReadMIFFHeader(); // vtable+0x28
	virtual long ReadRecordHeader(); // vtable+0x2c
	virtual long ReadFileCreator(); // vtable+0x30
	virtual long ReadFileType(); // vtable+0x34
	virtual long ReadFileVersion(); // vtable+0x38
	virtual long ReadPresentRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x3c
	virtual long ReadPresentRecordData(char *, long); // vtable+0x40
	virtual long GoToFirstRecord(); // vtable+0x44
	virtual long GoToNextRecord(); // vtable+0x48
	virtual long GoToPreviousRecord(); // vtable+0x4c
	virtual long GoToFirstRecordOfGivenType(long); // vtable+0x50
	virtual long GoToNextRecordOfGivenType(long); // vtable+0x54
	virtual long GoToNthRecord(long); // vtable+0x58
	virtual long CountRecords(); // vtable+0x5c
	virtual long WriteMIFFRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x60
	virtual long WriteDataRecord(long, char *, long); // vtable+0x64
	virtual long WriteFileHeader(long, long, long); // vtable+0x68
	virtual long WriteEnd(); // vtable+0x6c
	/*+0x110*/ long lPresentRecordStart;
	/*+0x114*/ long lPresentRecordType;
	/*+0x118*/ long lPresentRecordLength;
	/*+0x11c*/ long lPresentRecordIndex;
	/*+0x120*/ long lReadWriteMode;
	/*+0x124*/ long bFileEndWritten;
	/*+0x128*/ long bFileAppearsCorrupt;
	/*+0x12c*/ /*packed*/ struct MIFFHeader myMIFFHeader; // 0x1c bytes
};

// Type: /*packed*/ class MIFF (forward reference);
// VTABLE: COPTER_D 0x00591950
class MIFF : public PFile
{ // packed(0x148 bytes) TI: 0x428e
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF() /* override */;
	virtual long OpenForReading(); // vtable+0x4
	virtual long OpenForWriting(long, long, long); // vtable+0x8
	virtual long OpenForAppending(); // vtable+0xc
	virtual long Close(); // vtable+0x10
	virtual long GetPresentRecordType(); // vtable+0x14
	virtual long GetPresentRecordSize(); // vtable+0x18
	virtual long GetPresentRecordDataSize(); // vtable+0x1c
	virtual long GetPresentRecordIndex(); // vtable+0x20
	virtual long VerifyFile(); // vtable+0x24
	virtual long ReadMIFFHeader(); // vtable+0x28
	virtual long ReadRecordHeader(); // vtable+0x2c
	virtual long ReadFileCreator(); // vtable+0x30
	virtual long ReadFileType(); // vtable+0x34
	virtual long ReadFileVersion(); // vtable+0x38
	virtual long ReadPresentRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x3c
	virtual long ReadPresentRecordData(char *, long); // vtable+0x40
	virtual long GoToFirstRecord(); // vtable+0x44
	virtual long GoToNextRecord(); // vtable+0x48
	virtual long GoToPreviousRecord(); // vtable+0x4c
	virtual long GoToFirstRecordOfGivenType(long); // vtable+0x50
	virtual long GoToNextRecordOfGivenType(long); // vtable+0x54
	virtual long GoToNthRecord(long); // vtable+0x58
	virtual long CountRecords(); // vtable+0x5c
	virtual long WriteMIFFRecord(/*packed*/ struct MIFFRecord*, long); // vtable+0x60
	virtual long WriteDataRecord(long, char *, long); // vtable+0x64
	virtual long WriteFileHeader(long, long, long); // vtable+0x68
	virtual long WriteEnd(); // vtable+0x6c
	/*+0x110*/ long lPresentRecordStart;
	/*+0x114*/ long lPresentRecordType;
	/*+0x118*/ long lPresentRecordLength;
	/*+0x11c*/ long lPresentRecordIndex;
	/*+0x120*/ long lReadWriteMode;
	/*+0x124*/ long bFileEndWritten;
	/*+0x128*/ long bFileAppearsCorrupt;
	/*+0x12c*/ /*packed*/ struct MIFFHeader myMIFFHeader; // 0x1c bytes
};

// Type: /*packed*/ struct tagLogBase;
struct tagLogBase{ // packed(0xc bytes) TI: 0x1819
	/*+0x0*/   unsigned long nType;
	/*+0x4*/   unsigned long nTime;
	/*+0x8*/   unsigned long nMissionID;
};

// Type: long;

// Type: /*packed*/ class list<tagLogBase *>::iterator;
class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
{ // packed(0x4 bytes) TI: 0x16d0
protected:
	/*+0x0*/   /*packed*/ struct list<tagLogBase *>::list_node *node;
public:
	void iterator();
protected:
	void iterator(/*packed*/ struct list<tagLogBase *>::list_node*);
public:
	int32_t operator==(const /*packed*/ class list<tagLogBase *>::iterator&);
	/*packed*/ struct tagLogBase*& operator*();
	/*packed*/ class list<tagLogBase *>::iterator operator++(int32_t);
	/*packed*/ class list<tagLogBase *>::iterator& operator++();
	/*packed*/ class list<tagLogBase *>::iterator operator--(int32_t);
	/*packed*/ class list<tagLogBase *>::iterator& operator--();
};

// Type: /*packed*/ struct tagLogString (forward reference);
struct tagLogString{ // packed(0x14 bytes) TI: 0x31dc
	/*+0x0*/   unsigned long nType;
	/*+0x4*/   unsigned long nTime;
	/*+0x8*/   unsigned long nMissionID;
	/*+0xc*/   char * szLogString;
	/*+0x10*/  char szData[4];
};

// Type: char;

// Type: /*packed*/ struct tagLogMissionEvent (forward reference);
struct tagLogMissionEvent{ // packed(0x14 bytes) TI: 0x2451
	/*+0x0*/   unsigned long nType;
	/*+0x4*/   unsigned long nTime;
	/*+0x8*/   unsigned long nMissionID;
	/*+0xc*/   unsigned long nInfo0;
	/*+0x10*/  unsigned long nInfo1;
};

// Type: /*packed*/ struct tagLogCityEnterExit (forward reference);
struct tagLogCityEnterExit{ // packed(0x30 bytes) TI: 0x3191
	/*+0x0*/   unsigned long nType;
	/*+0x4*/   unsigned long nTime;
	/*+0x8*/   unsigned long nMissionID;
	/*+0xc*/   unsigned long nEnterOrExit;
	/*+0x10*/  char szCity[32]; // 0x20 bytes
};

// Type: /*packed*/ class basic_string<char>;
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class list<tagLogBase *> (forward reference);
class list<tagLogBase *>{ // packed(0x8 bytes) TI: 0x16ae
	using void_pointer = void * __ptr32;
	struct list<tagLogBase *>::list_node{ // packed(0xc bytes) TI: 0x16d4
		/*+0x0*/   void * __ptr32 next;
		/*+0x4*/   void * __ptr32 prev;
		/*+0x8*/   /*packed*/ struct tagLogBase *data;
	};
protected:
	static /*packed*/ class allocator<list<tagLogBase *>::list_node> list_node_allocator;
	static /*packed*/ class allocator<tagLogBase *> value_allocator;
	using value_type = /*packed*/ struct tagLogBase*;
	using value_allocator_type = /*packed*/ class allocator<tagLogBase *>;
	using pointer = /*packed*/ struct tagLogBase**;
	using reference = /*packed*/ struct tagLogBase*&;
	using const_reference = const /*packed*/ struct tagLogBase*&;
	using list_node_allocator_type = /*packed*/ class allocator<list<tagLogBase *>::list_node>;
	using link_type = /*packed*/ struct list<tagLogBase *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<tagLogBase *>::list_node_buffer{ // packed(0x8 bytes) TI: 0x16d2
		/*+0x0*/   void * __ptr32 next_buffer;
		/*+0x4*/   /*packed*/ struct list<tagLogBase *>::list_node *buffer;
	};
	using buffer_allocator_type = /*packed*/ class allocator<list<tagLogBase *>::list_node_buffer>;
	using buffer_pointer = /*packed*/ struct list<tagLogBase *>::list_node_buffer*;
protected:
	static /*packed*/ class allocator<list<tagLogBase *>::list_node_buffer> buffer_allocator;
	static /*packed*/ struct list<tagLogBase *>::list_node_buffer *buffer_list;
	static /*packed*/ struct list<tagLogBase *>::list_node *free_list;
	static /*packed*/ struct list<tagLogBase *>::list_node *next_avail;
	static /*packed*/ struct list<tagLogBase *>::list_node *last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	/*packed*/ struct list<tagLogBase *>::list_node* get_node();
	void put_node(/*packed*/ struct list<tagLogBase *>::list_node*);
	/*+0x0*/   /*packed*/ struct list<tagLogBase *>::list_node *node;
	/*+0x4*/   uint32_t length;
	class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
	{ // packed(0x4 bytes) TI: 0x16d0
	protected:
		/*+0x0*/   /*packed*/ struct list<tagLogBase *>::list_node *node;
	public:
		void iterator();
	protected:
		void iterator(/*packed*/ struct list<tagLogBase *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<tagLogBase *>::iterator&);
		/*packed*/ struct tagLogBase*& operator*();
		/*packed*/ class list<tagLogBase *>::iterator operator++(int32_t);
		/*packed*/ class list<tagLogBase *>::iterator& operator++();
		/*packed*/ class list<tagLogBase *>::iterator operator--(int32_t);
		/*packed*/ class list<tagLogBase *>::iterator& operator--();
	};
	class list<tagLogBase *>::const_iterator : public bidirectional_iterator<tagLogBase *,int>
	{ // packed(0x4 bytes) TI: 0x16c3
	protected:
		/*+0x0*/   /*packed*/ struct list<tagLogBase *>::list_node *node;
	public:
		void const_iterator(const /*packed*/ class list<tagLogBase *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(/*packed*/ struct list<tagLogBase *>::list_node*);
	public:
		int32_t operator==(const /*packed*/ class list<tagLogBase *>::const_iterator&);
		const /*packed*/ struct tagLogBase*& operator*();
		/*packed*/ class list<tagLogBase *>::const_iterator operator++(int32_t);
		/*packed*/ class list<tagLogBase *>::const_iterator& operator++();
		/*packed*/ class list<tagLogBase *>::const_iterator operator--(int32_t);
		/*packed*/ class list<tagLogBase *>::const_iterator& operator--();
	};
	using const_reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int>;
	using reverse_iterator = /*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int>;
public:
	void list<tagLogBase *>(const /*packed*/ class list<tagLogBase *>&);
	void list<tagLogBase *>(const /*packed*/ struct tagLogBase**, const /*packed*/ struct tagLogBase**);
	void list<tagLogBase *>(uint32_t, const /*packed*/ struct tagLogBase*&);
	void list<tagLogBase *>();
	/*packed*/ class list<tagLogBase *>::const_iterator begin();
	/*packed*/ class list<tagLogBase *>::iterator begin();
	/*packed*/ class list<tagLogBase *>::const_iterator end();
	/*packed*/ class list<tagLogBase *>::iterator end();
	/*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int> rbegin();
	/*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int> rend();
	/*unpacked*/ class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const /*packed*/ struct tagLogBase*& front();
	/*packed*/ struct tagLogBase*& front();
	const /*packed*/ struct tagLogBase*& back();
	/*packed*/ struct tagLogBase*& back();
	void swap(/*packed*/ class list<tagLogBase *>&);
	void insert(/*packed*/ class list<tagLogBase *>::iterator, uint32_t, const /*packed*/ struct tagLogBase*&);
	void insert(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>::const_iterator, /*packed*/ class list<tagLogBase *>::const_iterator);
	void insert(/*packed*/ class list<tagLogBase *>::iterator, const /*packed*/ struct tagLogBase**, const /*packed*/ struct tagLogBase**);
	/*packed*/ class list<tagLogBase *>::iterator insert(/*packed*/ class list<tagLogBase *>::iterator, const /*packed*/ struct tagLogBase*&);
	void push_front(const /*packed*/ struct tagLogBase*&);
	void push_back(const /*packed*/ struct tagLogBase*&);
	void erase(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>::iterator);
	void erase(/*packed*/ class list<tagLogBase *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<tagLogBase *>();
	/*packed*/ class list<tagLogBase *>& operator=(const /*packed*/ class list<tagLogBase *>&);
protected:
	void transfer(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>::iterator);
public:
	void splice(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>&, /*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>::iterator);
	void splice(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>&, /*packed*/ class list<tagLogBase *>::iterator);
	void splice(/*packed*/ class list<tagLogBase *>::iterator, /*packed*/ class list<tagLogBase *>&);
	void remove(const /*packed*/ struct tagLogBase*&);
	void unique();
	void merge(/*packed*/ class list<tagLogBase *>&);
	void reverse();
	void sort();
};

// Type: /*packed*/ class basic_string<char> (forward reference);
class basic_string<char>{ // packed(0x8 bytes) TI: 0x1380
	using reference_class = /*unpacked*/ class basic_string_ref<char>;
	using reference_pointer = /*unpacked*/ class basic_string_ref<char>*;
private:
	/*+0x0*/   char * c_str_ptr;
	/*+0x4*/   /*unpacked*/ class basic_string_ref<char> *reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const /*packed*/ class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = /*packed*/ struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	/*packed*/ class basic_string<char>& operator=(char);
	/*packed*/ class basic_string<char>& operator=(char *);
	/*packed*/ class basic_string<char>& operator=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class basic_string<char>& operator+=(char);
	/*packed*/ class basic_string<char>& operator+=(char *);
	/*packed*/ class basic_string<char>& operator+=(const /*packed*/ class basic_string<char>&);
	/*packed*/ class vector<char> operator class vector<char>();
	/*packed*/ class basic_string<char>& append(char, uint32_t);
	/*packed*/ class basic_string<char>& append(char *);
	/*packed*/ class basic_string<char>& append(char *, uint32_t);
	/*packed*/ class basic_string<char>& append(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& assign(char, uint32_t);
	/*packed*/ class basic_string<char>& assign(char *);
	/*packed*/ class basic_string<char>& assign(char *, uint32_t);
	/*packed*/ class basic_string<char>& assign(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *);
	/*packed*/ class basic_string<char>& insert(uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& insert(uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& remove(uint32_t, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	/*packed*/ class basic_string<char>& replace(uint32_t, uint32_t, const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const /*packed*/ class basic_string<char>&, uint32_t);
	/*packed*/ class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const /*packed*/ class basic_string<char>&, uint32_t, uint32_t);
};

// Type: /*packed*/ class MTimeLocalized;
// VTABLE: COPTER_D 0x00592680
class MTimeLocalized : public MTime
{ // packed(0x10 bytes) TI: 0x2bc9
public:
	void MTimeLocalized(const /*packed*/ class MDate&, uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(unsigned long);
	void MTimeLocalized();
	virtual char * PrintStringLocalized(char *, int32_t); // vtable+0x0
	/*+0xc*/   int32_t nLanguage;
};

// Type: /*packed*/ class PFile;
// VTABLE: COPTER_D 0x00590468
class PFile{ // packed(0x110 bytes) TI: 0x453c
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const /*packed*/ class PFile&);
	void PFile(int32_t);
	void PFile();
	virtual void ~PFile(); // vtable+0x0
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	// calltype: NearC
	static unsigned long Checksum(char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	/*+0x4*/   char szFilePath[260]; // 0x104 bytes
	/*+0x108*/ int32_t Handle;
private:
	/*+0x10c*/ int32_t ShouldClose;
};

// Type: /*unpacked*/ class MTime (forward reference);
// MTime Class implementation not found

// Type: /*packed*/ struct bidirectional_iterator<tagLogBase *,int>;
struct bidirectional_iterator<tagLogBase *,int>{ // packed(0x1 bytes) TI: 0x126f
};



// Contribution: 1:000eabc0-000ed27d Module: 178, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004ebbc0
static void $E57() {

	__asm        call   $E54;
	__asm        call   $E56;
	__asm        jmp    _T15;
_T15:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004ebbda
static void $E54() {

	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::LogManager;
	__asm        jmp    _T15;
_T15:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004ebbf4
static void $E56() {

	__asm        push   0x4EBC11;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    _T18;
_T18:
}

// STATIC INITIALIZER:
// SYNTHETIC: COPTER_D 0x004ebc11
static void $E55() {

	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::~LogManager;
	__asm        jmp    _T15;
_T15:
}

// FUNCTION: COPTER_D 0x004ebc2b
void S3AddLogEntry(/*packed*/ struct tagLogBase *logData, int32_t bShowUserMessage) {
// LINE 37:
	__asm        push   1;
	__asm        mov    eax, bShowUserMessage;
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        push   eax;
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::AddLogEntry;
// LINE 38:
	return;
}

// FUNCTION: COPTER_D 0x004ebc4f
void LogManager::LogManager() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0x1F4;
// LINE 47:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T288;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T73;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T250;
_T73:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T23b;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        jne    _Td2;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _Tc8;
_Tc8:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Td2:
	__asm        jmp    _Td7;
_Td7:
	__asm        jmp    _Tdc;
_Tdc:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    dword ptr [ebp-0x18], 0x155;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T117;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T11d;
_T117:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
_T11d:
	__asm        jmp    _T122;
_T122:
	__asm        jmp    _T127;
_T127:
	__asm        jmp    _T12c;
_T12c:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    _T18a;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T180;
_T180:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T18a:
	__asm        jmp    _T18f;
_T18f:
	__asm        jmp    _T194;
_T194:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x2C], 0x155;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f1;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T1f7;
_T1f1:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
_T1f7:
	__asm        jmp    _T1fc;
_T1fc:
	__asm        jmp    _T201;
_T201:
	__asm        jmp    _T206;
_T206:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    _T221;
_T221:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T250;
_T23b:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x10], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x54], eax;
_T250:
	__asm        jmp    _T255;
_T255:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T27b;
_T27b:
	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T291;
_T288:
	this->myLogBasePtrList = 0x0;
// LINE 48:
_T291:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ebeed
void LogManager::~LogManager() {
// LINE 54:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T1f6;
// LINE 55:
	__asm        mov    ecx, this;
	__asm        call   LogManager::PurgeAllEntries;
// LINE 56:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1ed;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T4b;
_T4b:
	__asm        jmp    _T50;
_T50:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _T65;
_T65:
	__asm        jmp    _T6a;
_T6a:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
_T76:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x38], eax;
	__asm        jne    _T8c;

	__asm        jmp    _Ta0;

	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T9b;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _Ta0;
_T9b:
	__asm        jmp    _Ta5;
_Ta0:
	__asm        jmp    _T124;
_Ta5:
	__asm        jmp    _Tb4;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T124;
_Tb4:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _Tc7;
_Tc7:
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _Td2;
_Td2:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _Tf8;
_Tf8:
	__asm        jmp    _Tfd;
_Tfd:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T114;
_T114:
	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T11f;
_T11f:
	__asm        jmp    _T76;
_T124:
	__asm        jmp    _T129;
_T129:
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T148;
_T148:
	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T1d2;
_T154:
	__asm        cmp    list<tagLogBase *>::buffer_list, 0;
	__asm        je     _T1af;

	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T18f;
_T18f:
	__asm        jmp    _T194;
_T194:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1a5;
_T1a5:
	__asm        jmp    _T1aa;
_T1aa:
	__asm        jmp    _T154;
_T1af:
	__asm        mov    list<tagLogBase *>::free_list, 0;
	__asm        mov    list<tagLogBase *>::next_avail, 0;
	__asm        mov    list<tagLogBase *>::last, 0;
	__asm        jmp    _T1d2;
_T1d2:
	__asm        jmp    _T1d7;
_T1d7:
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T1e8;
_T1e8:
	__asm        jmp    _T1ed;
// LINE 57:
_T1ed:
	this->myLogBasePtrList = 0x0;
// LINE 59:
_T1f6:
	return;
}

// FUNCTION: COPTER_D 0x004ec0ed
int32_t LogManager::ReadLogFromFile(char * szFilePath) {
	/*bp-0x148*/ /*packed*/ class MIFF tempMIFF; // 0x148 bytes
	/*bp-0x14c*/ int32_t nReturnValue;

// LINE 67:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 70:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForReading;
// LINE 71:
	__asm        lea    eax, tempMIFF<MIFF+0x00>;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ReadFromMIFF;
	__asm        mov    nReturnValue, eax;
// LINE 72:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 73:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x150], eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x150];
	__asm        jmp    _T71;
// LINE 74:
_T71:
}

// FUNCTION: COPTER_D 0x004ec165
int32_t LogManager::WriteLogToFile(char * szFilePath) {
	/*bp-0x148*/ /*packed*/ class MIFF tempMIFF; // 0x148 bytes
	/*bp-0x14c*/ int32_t nReturnValue;

// LINE 82:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 85:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForAppending;
// LINE 86:
	__asm        lea    eax, tempMIFF<MIFF+0x00>;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::WriteToMIFF;
	__asm        mov    nReturnValue, eax;
// LINE 87:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 88:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x150], eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x150];
	__asm        jmp    _T71;
// LINE 89:
_T71:
}

// FUNCTION: COPTER_D 0x004ec1dd
int32_t LogManager::ReadFromMIFF(/*packed*/ class MIFF *miffReader) {
	/*bp-0x4*/   long lPresentRecordDataLength;
	/*bp-0x10*/  /*packed*/ struct tagLogBase tempLogBase; // 0xc bytes

// LINE 103:
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x44];
// LINE 104:
_T17:
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x54];
	__asm        test   eax, eax;
	__asm        je     _T96;
// LINE 105:
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    lPresentRecordDataLength, eax;
// LINE 106:
	__asm        cmp    lPresentRecordDataLength, 0xC;
	__asm        jge    _T4c;
// LINE 107:
	__asm        jmp    _T17;
// LINE 108:
_T4c:
	__asm        cmp    lPresentRecordDataLength, 0x38;
	__asm        jle    _T5b;
// LINE 109:
	__asm        jmp    _T17;
// LINE 110:
_T5b:
	__asm        push   0xC;
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 111:
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ValidateLogEntry;
	__asm        test   eax, eax;
	__asm        jne    _T85;
// LINE 112:
	__asm        jmp    _T17;
// LINE 113:
_T85:
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ReadCurrentRecordFromMIFF;
// LINE 114:
	__asm        jmp    _T17;
// LINE 115:
_T96:
	return 0x1;
// LINE 116:
}

// FUNCTION: COPTER_D 0x004ec284
int32_t LogManager::WriteToMIFF(/*packed*/ class MIFF *miffWriter) {
	/*bp-0x4*/   /*packed*/ class list<tagLogBase *>::iterator iterator;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x15C], eax;
// LINE 123:
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T3e;
_T3e:
	__asm        jmp    _T43;
// LINE 23:
_T43:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14C], eax;
// LINE 125:
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    _T70;
_T70:
	__asm        jmp    _T75;
_T75:
	__asm        mov    eax, [ebp-0x128];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T8e;

	__asm        jmp    _Ta5;

	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _Ta0;

	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        jne    _Ta5;
_Ta0:
	__asm        jmp    _Taa;
_Ta5:
	__asm        jmp    _T1e3;
_Taa:
	__asm        jmp    _Tbc;

	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _T1e3;
// LINE 126:
_Tbc:
	__asm        jmp    _Tc1;
_Tc1:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T183;
// LINE 130:
// Block start:
	/*bp-0x118*/ char chStringBuffer[276]; // 0x114 bytes
	/*bp-0x11c*/ /*packed*/ struct tagLogString *tempLogStringSource;
	/*bp-0x120*/ /*packed*/ struct tagLogString *tempLogStringDestination;
	/*bp-0x124*/ long lStringLength;
	__asm        jmp    _Td5;
_Td5:
	tempLogStringSource = iterator.node->data;
// LINE 131:
	tempLogStringDestination = chStringBuffer[0];
// LINE 133:
	__asm        mov    edi, tempLogStringDestination;
	__asm        mov    esi, tempLogStringSource;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 134:
	__asm        mov    eax, tempLogStringSource;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        mov    eax, ecx;
	__asm        or     eax, 3;
	__asm        inc    eax;
	__asm        mov    lStringLength, eax;
// LINE 135:
	__asm        cmp    lStringLength, 0x100;
	__asm        jle    _T13a;
// LINE 136:
	lStringLength = 0x100;
// LINE 137:
_T13a:
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, tempLogStringSource;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, tempLogStringDestination;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 140:
	__asm        mov    eax, lStringLength;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, tempLogStringDestination;
	__asm        push   eax;
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffWriter;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffWriter;
	__asm        call   dword ptr [eax+0x64];
// LINE 142:
// Block end:
	__asm        jmp    _T1b7;
// LINE 144:
_T183:
	__asm        jmp    _T188;
_T188:
	__asm        jmp    _T18d;
_T18d:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::GetSizeOfLogRecord;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffWriter;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffWriter;
	__asm        call   dword ptr [eax+0x64];
// LINE 146:
_T1b7:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T1cd;
_T1cd:
	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x12C], eax;
	__asm        jmp    _T1de;
// LINE 147:
_T1de:
	__asm        jmp    _T43;
_T1e3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x13C], eax;
// LINE 148:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    _T210;
_T210:
	__asm        jmp    _T215;
_T215:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    _T244;
_T244:
	__asm        jmp    _T249;
_T249:
	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x17C], eax;
_T26f:
	__asm        mov    eax, [ebp-0x174];
	__asm        cmp    [ebp-0x178], eax;
	__asm        jne    _T28b;

	__asm        jmp    _T2a2;

	__asm        jmp    _T28b;
_T28b:
	__asm        jmp    _T29d;

	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        jne    _T2a2;
_T29d:
	__asm        jmp    _T2a7;
_T2a2:
	__asm        jmp    _T356;
_T2a7:
	__asm        jmp    _T2b9;

	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        je     _T356;
_T2b9:
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    _T2d8;
_T2d8:
	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    _T2e9;
_T2e9:
	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T321;
_T321:
	__asm        jmp    _T326;
_T326:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T343;
_T343:
	__asm        mov    eax, [ebp-0x17C];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T351;
_T351:
	__asm        jmp    _T26f;
_T356:
	__asm        jmp    _T35b;
// LINE 149:
_T35b:
	return 0x1;
// LINE 150:
}

// FUNCTION: COPTER_D 0x004ec5f0
long LogManager::GetSizeOfLogRecord(/*packed*/ struct tagLogBase *logRecord) {
// LINE 158:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T22;
// LINE 159:
	return 0x14;
// LINE 160:
_T22:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T38;
// LINE 161:
	return 0x30;
// LINE 162:
_T38:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T5a;

	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T5a;
// LINE 163:
	return 0x14;
// LINE 164:
_T5a:
	return 0xc;
// LINE 165:
}

// FUNCTION: COPTER_D 0x004ec65b
int32_t LogManager::ReadCurrentRecordFromMIFF(/*packed*/ class MIFF *miffReader) {
	/*bp-0x38*/  char chBuffer[56]; // 0x38 bytes
	/*bp-0x44*/  /*packed*/ struct tagLogBase tempLogBase; // 0xc bytes

// LINE 180:
	__asm        push   0xC;
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 182:
	__asm        cmp    tempLogBase.nType, 1;
	__asm        jne    _T7d;
// LINE 188:
// Block start:
	/*bp-0x158*/ char chStringBuffer[276]; // 0x114 bytes
	/*bp-0x15c*/ /*packed*/ struct tagLogString *tempLogString;
	__asm        push   0x114;
	__asm        lea    eax, chStringBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 189:
	tempLogString = chStringBuffer[0];
// LINE 190:
	__asm        mov    eax, tempLogString;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, tempLogString;
	__asm        mov    [ecx+0xC], eax;
// LINE 191:
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, chStringBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::AddLogEntry;
// LINE 193:
// Block end:
	__asm        jmp    _Ta1;
// LINE 196:
_T7d:
	__asm        push   0x38;
	__asm        lea    eax, chBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 197:
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, chBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::AddLogEntry;
// LINE 199:
_Ta1:
	return 0x1;
// LINE 200:
}

// FUNCTION: COPTER_D 0x004ec70d
int32_t LogManager::ValidateLogEntry(/*packed*/ struct tagLogBase *logData) {
// LINE 208:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jb     _T2e;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xF;
	__asm        jae    _T2e;

	__asm        mov    eax, 1;
	__asm        jmp    _T30;
_T2e:
	__asm        xor    eax, eax;
_T30:
	__asm        jmp    _T35;
// LINE 209:
_T35:
}

// FUNCTION: COPTER_D 0x004ec749
int32_t LogManager::AddLogEntry(/*packed*/ struct tagLogBase *logData, int32_t bShowUserMessage, int32_t bSetTime) {
// LINE 220:
	__asm        jmp    _T17;
_T17:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0x1F4;
	__asm        jb     _T39;
// LINE 221:
	__asm        push   0x64;
	__asm        mov    ecx, this;
	__asm        call   LogManager::PurgeNEntries;
// LINE 223:
_T39:
	__asm        cmp    bSetTime, 0;
	__asm        je     _T5e;
// LINE 224:
	__asm        lea    ecx, [ebp-0x24];
	__asm        call   MTime::MTime;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, logData;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5e;
// LINE 225:
_T5e:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T179;
// LINE 227:
// Block start:
	/*bp-0x4*/   char * szNewStringPointer;
	/*bp-0x8*/   /*packed*/ struct tagLogString *newLogString;
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogString, eax;
// LINE 229:
	__asm        mov    edi, newLogString;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 230:
	__asm        mov    eax, newLogString;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        mov    eax, ecx;
	__asm        or     eax, 3;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    szNewStringPointer, eax;
// LINE 231:
	__asm        mov    eax, newLogString;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    eax, ecx;
	__asm        mov    edx, edi;
	__asm        mov    edi, szNewStringPointer;
	__asm        mov    esi, edx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
// LINE 232:
	newLogString->szLogString = szNewStringPointer;
// LINE 233:
	__asm        mov    eax, newLogString;
	__asm        mov    [ebp-0x28], eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T102;
_T102:
	__asm        jmp    _T107;
_T107:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T11d;
_T11d:
	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T16a;
_T16a:
	__asm        jmp    _T16f;
_T16f:
	__asm        jmp    _T174;
// LINE 235:
// Block end:
_T174:
	__asm        jmp    _T41f;
_T179:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T24c;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T24c;
// LINE 236:
// Block start:
	/*bp-0xc*/   /*packed*/ struct tagLogMissionEvent *newLogMissionEvent;
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogMissionEvent, eax;
// LINE 237:
	__asm        mov    edi, newLogMissionEvent;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 238:
	__asm        mov    eax, newLogMissionEvent;
	__asm        mov    [ebp-0x2C], eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T1d5;
_T1d5:
	__asm        jmp    _T1da;
_T1da:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T1f0;
_T1f0:
	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T23d;
_T23d:
	__asm        jmp    _T242;
_T242:
	__asm        jmp    _T247;
// LINE 240:
// Block end:
_T247:
	__asm        jmp    _T41f;
_T24c:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T32e;
// LINE 241:
// Block start:
	/*bp-0x10*/  /*packed*/ struct tagLogCityEnterExit *newLogCityEnterExit;
	__asm        push   0x30;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogCityEnterExit, eax;
// LINE 242:
	__asm        mov    edi, newLogCityEnterExit;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 0xC;
	__asm        rep movsd;
// LINE 243:
	__asm        mov    eax, newLogCityEnterExit;
	__asm        mov    [ebp-0x30], eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    _T2a2;
_T2a2:
	__asm        jmp    _T2a7;
_T2a7:
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    _T2c3;
_T2c3:
	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    _T31f;
_T31f:
	__asm        jmp    _T324;
_T324:
	__asm        jmp    _T329;
// LINE 245:
// Block end:
_T329:
	__asm        jmp    _T41f;
// LINE 246:
// Block start:
	/*bp-0x14*/  /*packed*/ struct tagLogBase *newLogBase;
_T32e:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogBase, eax;
// LINE 247:
	__asm        mov    eax, logData;
	__asm        mov    ecx, newLogBase;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
// LINE 248:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    _T37e;
_T37e:
	__asm        jmp    _T383;
_T383:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    _T3a5;
_T3a5:
	__asm        lea    eax, newLogBase;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    _T415;
_T415:
	__asm        jmp    _T41a;
_T41a:
	__asm        jmp    _T41f;
// LINE 251:
// Block end:
_T41f:
	__asm        cmp    bShowUserMessage, 0;
	__asm        je     _T577;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T577;
// LINE 252:
// Block start:
	/*bp-0x1c*/  /*packed*/ class basic_string<char> sCurrentText; // 0x8 bytes
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     _T4a1;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T493;
_T493:
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    _T4a8;
_T4a1:
	sCurrentText.reference = 0x0;
_T4a8:
	__asm        mov    sCurrentText.c_str_ptr, 0;
	__asm        jmp    _T4b4;
// LINE 253:
_T4b4:
	__asm        push   0;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 254:
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+4];
	__asm        call   dword ptr [edx+8];
// LINE 255:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T53f;

	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        je     _T53f;

	__asm        mov    ecx, [ebp-0xB0];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T526;
_T526:
	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T53a;
_T53a:
	__asm        jmp    _T53f;
_T53f:
	__asm        jmp    _T544;
_T544:
	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     _T572;

	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T572:
	__asm        jmp    _T577;
// LINE 257:
// Block end:
_T577:
	return 0x1;
// LINE 258:
}

// FUNCTION: COPTER_D 0x004eccd1
int32_t LogManager::SortLogEntriesByDate() {
	/*bp-0x4*/   /*packed*/ class list<tagLogBase *> *newLogBasePtrList;
	/*bp-0x8*/   /*packed*/ class list<tagLogBase *>::iterator iterator;
	/*bp-0xc*/   /*packed*/ class list<tagLogBase *>::iterator currentLowest;

// LINE 266:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T23e;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T68:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T1ed;

	__asm        jmp    _T7e;
_T7e:
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0x155;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te0;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _Tec;
_Te0:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
_Tec:
	__asm        jmp    _Tf1;
_Tf1:
	__asm        jmp    _Tf6;
_Tf6:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T10e;
_T10e:
	__asm        push   0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x98], 0x155;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    dword ptr [ebp-0x9C], 1;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T197;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T1a3;
_T197:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
_T1a3:
	__asm        jmp    _T1a8;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    _T1d0;
_T1d0:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x78], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T1ed:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xB0], eax;
_T205:
	__asm        jmp    _T20a;
_T20a:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T233;
_T233:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    newLogBasePtrList, eax;
	__asm        jmp    _T245;
_T23e:
	newLogBasePtrList = 0x0;
// LINE 267:
_T245:
	__asm        jmp    _T24a;
// LINE 268:
_T24a:
	__asm        jmp    _T24f;
// LINE 270:
_T24f:
	__asm        jmp    _T254;
_T254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T467;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 271:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T286;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 272:
	currentLowest.node = iterator.node;
// LINE 23:
_T297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 273:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T2b5;
_T2b5:
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T2d0;

	__asm        jmp    _T2e4;

	__asm        jmp    _T2d0;
_T2d0:
	__asm        jmp    _T2df;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T2e4;
_T2df:
	__asm        jmp    _T2e9;
_T2e4:
	__asm        jmp    _T343;
_T2e9:
	__asm        jmp    _T2f8;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T343;
// LINE 274:
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        jmp    _T302;
_T302:
	__asm        mov    eax, currentLowest.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T320;
// LINE 275:
	currentLowest.node = iterator.node;
// LINE 276:
_T320:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T333;
_T333:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T33e;
// LINE 277:
_T33e:
	__asm        jmp    _T297;
// LINE 278:
_T343:
	__asm        jmp    _T348;
_T348:
	__asm        mov    eax, currentLowest.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T364;
_T364:
	__asm        jmp    _T369;
_T369:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, newLogBasePtrList;
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T37f;
_T37f:
	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T38d;
_T38d:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    _T3ab;
_T3ab:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T3e5;
_T3e5:
	__asm        jmp    _T3ea;
_T3ea:
	__asm        jmp    _T3ef;
_T3ef:
	__asm        mov    eax, currentLowest.node;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
// LINE 279:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T432;
_T432:
	__asm        jmp    _T437;
_T437:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T454;
_T454:
	__asm        mov    eax, [ebp-0xB8];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T462;
// LINE 280:
_T462:
	__asm        jmp    _T254;
// LINE 281:
_T467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T512;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T495;
_T495:
	__asm        jmp    _T49a;
_T49a:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T4af;
_T4af:
	__asm        jmp    _T4b4;
_T4b4:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::erase;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T4e3;
_T4e3:
	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T4f7;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::deallocate_buffers;
_T4f7:
	__asm        jmp    _T4fc;
_T4fc:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T50d;
_T50d:
	__asm        jmp    _T512;
// LINE 282:
_T512:
	this->myLogBasePtrList = newLogBasePtrList;
// LINE 283:
	return 0x1;
// LINE 284:
}

// FUNCTION: COPTER_D 0x004ed1fd
int32_t LogManager::SortLogEntriesByType() {
	/*bp-0x4*/   /*packed*/ class list<tagLogBase *> *newLogBasePtrList;
	/*bp-0x8*/   /*packed*/ class list<tagLogBase *>::iterator iterator;
	/*bp-0xc*/   /*packed*/ class list<tagLogBase *>::iterator currentLowest;

// LINE 292:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T23e;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T68:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T1ed;

	__asm        jmp    _T7e;
_T7e:
	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0x155;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te0;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _Tec;
_Te0:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
_Tec:
	__asm        jmp    _Tf1;
_Tf1:
	__asm        jmp    _Tf6;
_Tf6:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    _T10e;
_T10e:
	__asm        push   0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x98], 0x155;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    dword ptr [ebp-0x9C], 1;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T197;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T1a3;
_T197:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
_T1a3:
	__asm        jmp    _T1a8;
_T1a8:
	__asm        jmp    _T1ad;
_T1ad:
	__asm        jmp    _T1b2;
_T1b2:
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    _T1d0;
_T1d0:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x78], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T1ed:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xB0], eax;
_T205:
	__asm        jmp    _T20a;
_T20a:
	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T233;
_T233:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    newLogBasePtrList, eax;
	__asm        jmp    _T245;
_T23e:
	newLogBasePtrList = 0x0;
// LINE 293:
_T245:
	__asm        jmp    _T24a;
// LINE 294:
_T24a:
	__asm        jmp    _T24f;
// LINE 296:
_T24f:
	__asm        jmp    _T254;
_T254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T467;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 297:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T286;
_T286:
	__asm        jmp    _T28b;
_T28b:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 298:
	currentLowest.node = iterator.node;
// LINE 23:
_T297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 299:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T2b5;
_T2b5:
	__asm        jmp    _T2ba;
_T2ba:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x18], eax;
	__asm        jne    _T2d0;

	__asm        jmp    _T2e4;

	__asm        jmp    _T2d0;
_T2d0:
	__asm        jmp    _T2df;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T2e4;
_T2df:
	__asm        jmp    _T2e9;
_T2e4:
	__asm        jmp    _T343;
_T2e9:
	__asm        jmp    _T2f8;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T343;
// LINE 300:
_T2f8:
	__asm        jmp    _T2fd;
_T2fd:
	__asm        jmp    _T302;
_T302:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, currentLowest.node;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T320;
// LINE 301:
	currentLowest.node = iterator.node;
// LINE 302:
_T320:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T333;
_T333:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T33e;
// LINE 303:
_T33e:
	__asm        jmp    _T297;
// LINE 304:
_T343:
	__asm        jmp    _T348;
_T348:
	__asm        mov    eax, currentLowest.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T364;
_T364:
	__asm        jmp    _T369;
_T369:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, newLogBasePtrList;
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T37f;
_T37f:
	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T38d;
_T38d:
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    _T3ab;
_T3ab:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T3e5;
_T3e5:
	__asm        jmp    _T3ea;
_T3ea:
	__asm        jmp    _T3ef;
_T3ef:
	__asm        mov    eax, currentLowest.node;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
// LINE 305:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T432;
_T432:
	__asm        jmp    _T437;
_T437:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T454;
_T454:
	__asm        mov    eax, [ebp-0xB8];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T462;
// LINE 306:
_T462:
	__asm        jmp    _T254;
// LINE 307:
_T467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T512;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T495;
_T495:
	__asm        jmp    _T49a;
_T49a:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    _T4af;
_T4af:
	__asm        jmp    _T4b4;
_T4b4:
	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::erase;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T4e3;
_T4e3:
	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T4f7;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::deallocate_buffers;
_T4f7:
	__asm        jmp    _T4fc;
_T4fc:
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T50d;
_T50d:
	__asm        jmp    _T512;
// LINE 308:
_T512:
	this->myLogBasePtrList = newLogBasePtrList;
// LINE 309:
	return 0x1;
// LINE 310:
}

// FUNCTION: COPTER_D 0x004ed729
int32_t LogManager::PurgeAllEntries() {
	/*bp-0x4*/   /*packed*/ class list<tagLogBase *>::iterator iterator;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
// LINE 322:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T2e;
// LINE 23:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 324:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T49;
_T49:
	__asm        jmp    _T4e;
_T4e:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T64;

	__asm        jmp    _T78;

	__asm        jmp    _T64;
_T64:
	__asm        jmp    _T73;

	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        jne    _T78;
_T73:
	__asm        jmp    _T7d;
_T78:
	__asm        jmp    _T106;
_T7d:
	__asm        jmp    _T8c;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T106;
// LINE 325:
_T8c:
	__asm        jmp    _T91;
_T91:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _Tc3;
// LINE 326:
	__asm        jmp    _Ta5;
_Ta5:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 327:
_Tc3:
	__asm        jmp    _Tc8;
_Tc8:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 328:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _Tf6;
_Tf6:
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    _T101;
// LINE 329:
_T101:
	__asm        jmp    _T2e;
_T106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 330:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T121;
_T121:
	__asm        jmp    _T126;
_T126:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T143;
_T143:
	__asm        jmp    _T148;
_T148:
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
_T15c:
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    [ebp-0x68], eax;
	__asm        jne    _T172;

	__asm        jmp    _T186;

	__asm        jmp    _T172;
_T172:
	__asm        jmp    _T181;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T186;
_T181:
	__asm        jmp    _T18b;
_T186:
	__asm        jmp    _T20a;
_T18b:
	__asm        jmp    _T19a;

	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T20a;
_T19a:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T1ad;
_T1ad:
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T1b8;
_T1b8:
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1de;
_T1de:
	__asm        jmp    _T1e3;
_T1e3:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T1fa;
_T1fa:
	__asm        mov    eax, [ebp-0x6C];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T205;
_T205:
	__asm        jmp    _T15c;
_T20a:
	__asm        jmp    _T20f;
// LINE 331:
_T20f:
	return 0x1;
// LINE 332:
}

// FUNCTION: COPTER_D 0x004ed947
int32_t LogManager::PurgeNEntries(long lEntryCountToPurge) {
	/*bp-0x4*/   long i;
	/*bp-0x8*/   /*packed*/ class list<tagLogBase *>::iterator iterator;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
// LINE 344:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _T29;
_T29:
	__asm        jmp    _T2e;
// LINE 347:
_T2e:
	__asm        mov    i, 0;
	__asm        jmp    _T3d;
_T3a:
	i++;
_T3d:
	__asm        mov    eax, lEntryCountToPurge;
	__asm        cmp    i, eax;
	__asm        jge    _T10d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
// LINE 348:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T64;
_T64:
	__asm        jmp    _T69;
_T69:
	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T7f;
_T7a:
	__asm        jmp    _T93;
_T7f:
	__asm        jmp    _T8e;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T93;
// LINE 349:
_T8e:
	__asm        jmp    _T10d;
// LINE 350:
_T93:
	__asm        jmp    _T98;
_T98:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _Tca;
// LINE 351:
	__asm        jmp    _Tac;
_Tac:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 352:
_Tca:
	__asm        jmp    _Tcf;
_Tcf:
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 353:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    _Tfd;
_Tfd:
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T108;
// LINE 354:
_T108:
	__asm        jmp    _T3a;
_T10d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 355:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _T12a;
_T12a:
	__asm        jmp    _T12f;
_T12f:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
_T143:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jne    _T159;

	__asm        jmp    _T16d;

	__asm        jmp    _T159;
_T159:
	__asm        jmp    _T168;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _T16d;
_T168:
	__asm        jmp    _T172;
_T16d:
	__asm        jmp    _T1f1;
_T172:
	__asm        jmp    _T181;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T1f1;
_T181:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    _T194;
_T194:
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T19f;
_T19f:
	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T1c5;
_T1c5:
	__asm        jmp    _T1ca;
_T1ca:
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    _T1e1;
_T1e1:
	__asm        mov    eax, [ebp-0x60];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    _T1ec;
_T1ec:
	__asm        jmp    _T143;
_T1f1:
	__asm        jmp    _T1f6;
// LINE 356:
_T1f6:
	return 0x1;
// LINE 357:
}

// FUNCTION: COPTER_D 0x004edb4e
void LogManager::MakeStringFromLogData(/*packed*/ struct tagLogBase *logData, /*packed*/ class basic_string<char>& sCurrentText, int32_t bPrintTime) {
	/*bp-0x100*/ char szBuffer[256]; // 0x100 bytes
	/*bp-0x104*/ int32_t nFullStringID;
	/*bp-0x144*/ char szTime[64]; // 0x40 bytes
	/*bp-0x244*/ char szBuffer1[256]; // 0x100 bytes
	/*bp-0x254*/ /*packed*/ class MTimeLocalized tempTime; // 0x10 bytes

// LINE 366:
	__asm        mov    al, ds:[0x5B4878];
	__asm        mov    szBuffer[0], al;
	__asm        lea    edi, szBuffer[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x3F;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 367:
	__asm        mov    al, ds:[0x5B487C];
	__asm        mov    szBuffer1[0], al;
	__asm        lea    edi, szBuffer1[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x3F;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 368:
	__asm        mov    al, ds:[0x5B4880];
	__asm        mov    szTime[0], al;
	__asm        lea    edi, szTime[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0xF;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x268], eax;
// LINE 370:
	__asm        mov    tempTime<MTimeLocalized+0x08>, 0;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    tempTime<MTimeLocalized+0x04>, eax;
	__asm        jmp    _T8a;
_T8a:
	__asm        mov    tempTime.nLanguage, 0;
	__asm        mov    tempTime<vftable>, 0x592680;
	__asm        jmp    _Ta3;
// LINE 372:
_Ta3:
	__asm        cmp    bPrintTime, 0;
	__asm        je     _T393;
// LINE 373:
	__asm        push   0;
	__asm        lea    eax, szTime[0];
	__asm        push   eax;
	__asm        lea    ecx, tempTime<vftable>;
	__asm        call   MTimeLocalized::PrintStringLocalized;
// LINE 374:
	__asm        jmp    _Tc6;
_Tc6:
	__asm        lea    edi, szTime[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        lea    eax, szTime[0];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    _Tef;
_Tef:
	__asm        mov    byte ptr [ebp-0x2A4], 0x20;
// LINE 375:
	__asm        jmp    _Tfb;
_Tfb:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     _T143;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x288], eax;
	__asm        mov    eax, [ebp-0x288];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    _T134;
_T134:
	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T143;
_T143:
	__asm        jmp    _T148;
_T148:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    _T17a;

	__asm        jmp    _T15d;
_T15d:
	__asm        jmp    _T162;
_T162:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+8], ecx;
	__asm        ja     _T34c;
_T17a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x27C], eax;
	__asm        cmp    dword ptr [ebp-0x27C], 0;
	__asm        je     _T2ca;

	__asm        jmp    _T19c;
_T19c:
	__asm        jmp    _T1a1;
_T1a1:
	__asm        jmp    _T1a6;
_T1a6:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x284], eax;
	__asm        jmp    _T1dd;

	__asm        jmp    _T1dd;
_T1ce:
	__asm        mov    dword ptr [ebp-0x284], 0;
	__asm        jmp    _T1dd;
_T1dd:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T29b;

	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T296;

	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x294], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        mov    edi, [ebp-0x298];
	__asm        mov    esi, [ebp-0x284];
	__asm        mov    ecx, eax;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T296;
_T296:
	__asm        jmp    _T2a7;
_T29b:
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    dword ptr [eax], 0;
_T2a7:
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    _T2b9;
_T2b9:
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x278], eax;
	__asm        jmp    _T2d4;
_T2ca:
	__asm        mov    dword ptr [ebp-0x278], 0;
_T2d4:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T33b;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x28C], eax;
	__asm        cmp    dword ptr [ebp-0x28C], 0;
	__asm        je     _T33b;

	__asm        mov    ecx, [ebp-0x28C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    _T322;
_T322:
	__asm        mov    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    _T336;
_T336:
	__asm        jmp    _T33b;
_T33b:
	__asm        jmp    _T340;
_T340:
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    [ecx+4], eax;
_T34c:
	__asm        jmp    _T351;
_T351:
	__asm        jmp    _T356;
_T356:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    al, [ebp-0x2A4];
	__asm        mov    ecx, [ebp-0x280];
	__asm        mov    [ecx], al;
	__asm        jmp    _T380;
_T380:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    _T38e;
// LINE 377:
_T38e:
	__asm        jmp    _T39f;
// LINE 378:
_T393:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::remove;
// LINE 380:
_T39f:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T3fb;
// LINE 381:
// Block start:
	/*bp-0x258*/ const /*packed*/ struct tagLogString *lS;
	__asm        mov    eax, logData;
	__asm        mov    lS, eax;
	__asm        mov    eax, lS;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x264], eax;
// LINE 382:
	__asm        jmp    _T3c8;
_T3c8:
	__asm        mov    edi, [ebp-0x264];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T3f1;
// LINE 383:
_T3f1:
	return;
// LINE 385:
// Block end:
	__asm        jmp    _T6de;
_T3fb:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T4ed;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T4ed;
// LINE 386:
// Block start:
	/*bp-0x25c*/ const /*packed*/ struct tagLogMissionEvent *lME;
	lME = logData;
// LINE 387:
	__asm        mov    eax, lME;
	__asm        push   eax;
	__asm        call   LogManager::GetStringIDFromLogEvent;
	__asm        add    esp, 4;
	__asm        mov    nFullStringID, eax;
// LINE 388:
	__asm        push   0;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 389:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x26C], eax;
	__asm        cmp    dword ptr [ebp-0x26C], 0;
	__asm        jne    _T4e3;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T4e8;
_T4e3:
	__asm        jmp    _T4e8;
// LINE 391:
// Block end:
_T4e8:
	__asm        jmp    _T6de;
_T4ed:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T606;
// LINE 392:
// Block start:
	/*bp-0x260*/ const /*packed*/ struct tagLogCityEnterExit *lCEE;
	lCEE = logData;
// LINE 393:
	__asm        mov    eax, lCEE;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T52c;
// LINE 394:
	__asm        push   0;
	__asm        push   0x216;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 395:
	__asm        jmp    _T541;
// LINE 396:
_T52c:
	__asm        push   0;
	__asm        push   0x217;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 397:
_T541:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x270], eax;
	__asm        cmp    dword ptr [ebp-0x270], 0;
	__asm        jne    _T5dc;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x270], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer1[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T5e1;
_T5dc:
	__asm        jmp    _T5e1;
// LINE 398:
_T5e1:
	__asm        mov    eax, lCEE;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 400:
// Block end:
	__asm        jmp    _T6de;
// LINE 401:
_T606:
	__asm        push   0;
	__asm        push   0x215;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 402:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x274], eax;
	__asm        cmp    dword ptr [ebp-0x274], 0;
	__asm        jne    _T6b6;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer1[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T6bb;
_T6b6:
	__asm        jmp    _T6bb;
// LINE 403:
_T6bb:
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 406:
_T6de:
	__asm        jmp    _T6e3;
_T6e3:
	__asm        lea    edi, szBuffer[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    _T70c;
// LINE 407:
_T70c:
	return;
}

// FUNCTION: COPTER_D 0x004ee264
long LogManager::GetStringIDFromLogEvent(const /*packed*/ struct tagLogMissionEvent *lME) {
// LINE 416:
	__asm        mov    eax, lME;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x214;
	__asm        jmp    _T15;
// LINE 434:
_T15:
}



// Contribution: 1:000ed280-000ed495 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee280
// list<tagLogBase *>::get_node



// Contribution: 1:000ed4a0-000ed508 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee4a0
// allocate



// Contribution: 1:000ed510-000ed57b Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee510
// allocate



// Contribution: 1:000ed580-000ed5b6 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee580
// construct



// Contribution: 1:000ed5c0-000ed64e Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee5c0
// list<tagLogBase *>::deallocate_buffers



// Contribution: 1:000ed650-000ed715 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee650
// list<tagLogBase *>::erase



// Contribution: 2:00003680-00003683 Module: 178, 4 byte alignment, initialized_data, (comdat), read, 
// vftable for MTimeLocalized @ 0x00592680
//   00: MTimeLocalized::PrintStringLocalized @ 0x0041fad0
//   1 entries



// Contribution: 3:000000a0-000000a3 Module: 178, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970a0
static void (*$S58)() = { 0 /* todo */ };



// Contribution: 3:0001d878-0001d880 Module: 178, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0001d884-0001d887 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4884
uint32_t list<tagLogBase *>::number_of_lists = 0;



// Contribution: 3:0001d888-0001d88b Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4888
/*packed*/ struct list<tagLogBase *>::list_node *list<tagLogBase *>::last = { 0 /* todo */ };



// Contribution: 3:0001d88c-0001d88f Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b488c
/*packed*/ struct list<tagLogBase *>::list_node *list<tagLogBase *>::next_avail = { 0 /* todo */ };



// Contribution: 3:0001d890-0001d893 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4890
/*packed*/ struct list<tagLogBase *>::list_node *list<tagLogBase *>::free_list = { 0 /* todo */ };



// Contribution: 3:0001d894-0001d897 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4894
/*packed*/ struct list<tagLogBase *>::list_node_buffer *list<tagLogBase *>::buffer_list = { 0 /* todo */ };



// Contribution: 3:0006fe78-0006fe83 Module: 178, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00606e78
/*packed*/ class LogManager gLogManager;
// has alternate definitions: (original TI: 0x244f)
//   /*packed*/ class LogManager gLogManager (TI: 0x2b84)

