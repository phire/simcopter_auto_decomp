// Module: s3msnlog.obj
// Source: C:\Copter\Source\Game\s3msnlog.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class LogManager;
class LogManager{
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(class MIFF*);
	int32_t WriteToMIFF(class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(class MIFF*);
	int32_t ValidateLogEntry(struct tagLogBase*);
	long GetSizeOfLogRecord(struct tagLogBase*);
	int32_t AddLogEntry(struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(struct tagLogBase*, class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const struct tagLogMissionEvent*);
	class list<tagLogBase *>* myLogBasePtrList;
	class MessageDisplayManager* myMessageDisplayManager;
	long lMaxEntries;
};

// Type: class LogManager;
class LogManager{
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(class MIFF*);
	int32_t WriteToMIFF(class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(class MIFF*);
	int32_t ValidateLogEntry(struct tagLogBase*);
	long GetSizeOfLogRecord(struct tagLogBase*);
	int32_t AddLogEntry(struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(struct tagLogBase*, class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const struct tagLogMissionEvent*);
	class list<tagLogBase *>* myLogBasePtrList;
	class MessageDisplayManager* myMessageDisplayManager;
	long lMaxEntries;
};

// Type: struct list<tagLogBase *>::list_node_buffer (forward reference);
// list<tagLogBase *>::list_node_buffer Class implementation not found

// Type: struct list<tagLogBase *>::list_node (forward reference);
// list<tagLogBase *>::list_node Class implementation not found

// Type: uint32_t;

// Type: void ();

// Type: void;

// Type: struct tagLogBase (forward reference);
// tagLogBase Class implementation not found

// Type: int32_t;

// Type: class LogManager (forward reference);
class LogManager{
public:
	void LogManager();
	void ~LogManager();
	int32_t ReadLogFromFile(char *);
	int32_t WriteLogToFile(char *);
	int32_t ReadFromMIFF(class MIFF*);
	int32_t WriteToMIFF(class MIFF*);
	int32_t ReadCurrentRecordFromMIFF(class MIFF*);
	int32_t ValidateLogEntry(struct tagLogBase*);
	long GetSizeOfLogRecord(struct tagLogBase*);
	int32_t AddLogEntry(struct tagLogBase*, int32_t, int32_t);
	int32_t SortLogEntriesByDate();
	int32_t SortLogEntriesByType();
	int32_t PurgeAllEntries();
	int32_t PurgeNEntries(long);
	// calltype: NearC
	static void MakeStringFromLogData(struct tagLogBase*, class basic_string<char>&, int32_t);
	// calltype: NearC
	static long GetStringIDFromLogEvent(const struct tagLogMissionEvent*);
	class list<tagLogBase *>* myLogBasePtrList;
	class MessageDisplayManager* myMessageDisplayManager;
	long lMaxEntries;
};

// Type: char *;

// Type: class MIFF;
class MIFF : public PFile
{
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF();
	// vtable: 4
	intro long OpenForReading();
	// vtable: 8
	intro long OpenForWriting(long, long, long);
	// vtable: 12
	intro long OpenForAppending();
	// vtable: 16
	intro long Close();
	// vtable: 20
	intro long GetPresentRecordType();
	// vtable: 24
	intro long GetPresentRecordSize();
	// vtable: 28
	intro long GetPresentRecordDataSize();
	// vtable: 32
	intro long GetPresentRecordIndex();
	// vtable: 36
	intro long VerifyFile();
	// vtable: 40
	intro long ReadMIFFHeader();
	// vtable: 44
	intro long ReadRecordHeader();
	// vtable: 48
	intro long ReadFileCreator();
	// vtable: 52
	intro long ReadFileType();
	// vtable: 56
	intro long ReadFileVersion();
	// vtable: 60
	intro long ReadPresentRecord(struct MIFFRecord*, long);
	// vtable: 64
	intro long ReadPresentRecordData(char *, long);
	// vtable: 68
	intro long GoToFirstRecord();
	// vtable: 72
	intro long GoToNextRecord();
	// vtable: 76
	intro long GoToPreviousRecord();
	// vtable: 80
	intro long GoToFirstRecordOfGivenType(long);
	// vtable: 84
	intro long GoToNextRecordOfGivenType(long);
	// vtable: 88
	intro long GoToNthRecord(long);
	// vtable: 92
	intro long CountRecords();
	// vtable: 96
	intro long WriteMIFFRecord(struct MIFFRecord*, long);
	// vtable: 100
	intro long WriteDataRecord(long, char *, long);
	// vtable: 104
	intro long WriteFileHeader(long, long, long);
	// vtable: 108
	intro long WriteEnd();
	long lPresentRecordStart;
	long lPresentRecordType;
	long lPresentRecordLength;
	long lPresentRecordIndex;
	long lReadWriteMode;
	long bFileEndWritten;
	long bFileAppearsCorrupt;
	struct MIFFHeader myMIFFHeader;
};

// Type: class MIFF (forward reference);
class MIFF : public PFile
{
public:
	void MIFF(char *);
	void MIFF();
	virtual void ~MIFF();
	// vtable: 4
	intro long OpenForReading();
	// vtable: 8
	intro long OpenForWriting(long, long, long);
	// vtable: 12
	intro long OpenForAppending();
	// vtable: 16
	intro long Close();
	// vtable: 20
	intro long GetPresentRecordType();
	// vtable: 24
	intro long GetPresentRecordSize();
	// vtable: 28
	intro long GetPresentRecordDataSize();
	// vtable: 32
	intro long GetPresentRecordIndex();
	// vtable: 36
	intro long VerifyFile();
	// vtable: 40
	intro long ReadMIFFHeader();
	// vtable: 44
	intro long ReadRecordHeader();
	// vtable: 48
	intro long ReadFileCreator();
	// vtable: 52
	intro long ReadFileType();
	// vtable: 56
	intro long ReadFileVersion();
	// vtable: 60
	intro long ReadPresentRecord(struct MIFFRecord*, long);
	// vtable: 64
	intro long ReadPresentRecordData(char *, long);
	// vtable: 68
	intro long GoToFirstRecord();
	// vtable: 72
	intro long GoToNextRecord();
	// vtable: 76
	intro long GoToPreviousRecord();
	// vtable: 80
	intro long GoToFirstRecordOfGivenType(long);
	// vtable: 84
	intro long GoToNextRecordOfGivenType(long);
	// vtable: 88
	intro long GoToNthRecord(long);
	// vtable: 92
	intro long CountRecords();
	// vtable: 96
	intro long WriteMIFFRecord(struct MIFFRecord*, long);
	// vtable: 100
	intro long WriteDataRecord(long, char *, long);
	// vtable: 104
	intro long WriteFileHeader(long, long, long);
	// vtable: 108
	intro long WriteEnd();
	long lPresentRecordStart;
	long lPresentRecordType;
	long lPresentRecordLength;
	long lPresentRecordIndex;
	long lReadWriteMode;
	long bFileEndWritten;
	long bFileAppearsCorrupt;
	struct MIFFHeader myMIFFHeader;
};

// Type: struct tagLogBase;
struct tagLogBase{
	unsigned long nType;
	unsigned long nTime;
	unsigned long nMissionID;
};

// Type: long;

// Type: class list<tagLogBase *>::iterator;
class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
{
protected:
	struct list<tagLogBase *>::list_node* node;
public:
	void iterator();
protected:
	void iterator(struct list<tagLogBase *>::list_node*);
public:
	int32_t operator==(const class list<tagLogBase *>::iterator&);
	struct tagLogBase*& operator*();
	class list<tagLogBase *>::iterator operator++(int32_t);
	class list<tagLogBase *>::iterator& operator++();
	class list<tagLogBase *>::iterator operator--(int32_t);
	class list<tagLogBase *>::iterator& operator--();
};

// Type: struct tagLogString (forward reference);
// tagLogString Class implementation not found

// Type: char[276];

// Type: char[56];

// Type: struct tagLogMissionEvent (forward reference);
// tagLogMissionEvent Class implementation not found

// Type: struct tagLogCityEnterExit (forward reference);
// tagLogCityEnterExit Class implementation not found

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class list<tagLogBase *> (forward reference);
class list<tagLogBase *>{
	using void_pointer = void * __ptr32;
	struct list<tagLogBase *>::list_node{
		void * __ptr32 next;
		void * __ptr32 prev;
		struct tagLogBase* data;
	};
protected:
	static class allocator<list<tagLogBase *>::list_node> list_node_allocator;
	static class allocator<tagLogBase *> value_allocator;
	using value_type = struct tagLogBase*;
	using value_allocator_type = class allocator<tagLogBase *>;
	using pointer = struct tagLogBase**;
	using reference = struct tagLogBase*&;
	using const_reference = const struct tagLogBase*&;
	using list_node_allocator_type = class allocator<list<tagLogBase *>::list_node>;
	using link_type = struct list<tagLogBase *>::list_node*;
	using size_type = uint32_t;
	using difference_type = int32_t;
protected:
	uint32_t buffer_size();
	struct list<tagLogBase *>::list_node_buffer{
		void * __ptr32 next_buffer;
		struct list<tagLogBase *>::list_node* buffer;
	};
	using buffer_allocator_type = class allocator<list<tagLogBase *>::list_node_buffer>;
	using buffer_pointer = struct list<tagLogBase *>::list_node_buffer*;
protected:
	static class allocator<list<tagLogBase *>::list_node_buffer> buffer_allocator;
	static struct list<tagLogBase *>::list_node_buffer* buffer_list;
	static struct list<tagLogBase *>::list_node* free_list;
	static struct list<tagLogBase *>::list_node* next_avail;
	static struct list<tagLogBase *>::list_node* last;
	void add_new_buffer();
	static uint32_t number_of_lists;
	void deallocate_buffers();
	struct list<tagLogBase *>::list_node* get_node();
	void put_node(struct list<tagLogBase *>::list_node*);
	struct list<tagLogBase *>::list_node* node;
	uint32_t length;
	class list<tagLogBase *>::iterator : public bidirectional_iterator<tagLogBase *,int>
	{
	protected:
		struct list<tagLogBase *>::list_node* node;
	public:
		void iterator();
	protected:
		void iterator(struct list<tagLogBase *>::list_node*);
	public:
		int32_t operator==(const class list<tagLogBase *>::iterator&);
		struct tagLogBase*& operator*();
		class list<tagLogBase *>::iterator operator++(int32_t);
		class list<tagLogBase *>::iterator& operator++();
		class list<tagLogBase *>::iterator operator--(int32_t);
		class list<tagLogBase *>::iterator& operator--();
	};
	class list<tagLogBase *>::const_iterator : public bidirectional_iterator<tagLogBase *,int>
	{
	protected:
		struct list<tagLogBase *>::list_node* node;
	public:
		void const_iterator(const class list<tagLogBase *>::iterator&);
		void const_iterator();
	protected:
		void const_iterator(struct list<tagLogBase *>::list_node*);
	public:
		int32_t operator==(const class list<tagLogBase *>::const_iterator&);
		const struct tagLogBase*& operator*();
		class list<tagLogBase *>::const_iterator operator++(int32_t);
		class list<tagLogBase *>::const_iterator& operator++();
		class list<tagLogBase *>::const_iterator operator--(int32_t);
		class list<tagLogBase *>::const_iterator& operator--();
	};
	using const_reverse_iterator = class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int>;
	using reverse_iterator = class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int>;
public:
	void list<tagLogBase *>(const class list<tagLogBase *>&);
	void list<tagLogBase *>(const struct tagLogBase**, const struct tagLogBase**);
	void list<tagLogBase *>(uint32_t, const struct tagLogBase*&);
	void list<tagLogBase *>();
	class list<tagLogBase *>::const_iterator begin();
	class list<tagLogBase *>::iterator begin();
	class list<tagLogBase *>::const_iterator end();
	class list<tagLogBase *>::iterator end();
	class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int> rbegin();
	class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int> rbegin();
	class reverse_bidirectional_iterator<list<tagLogBase *>::const_iterator,tagLogBase *,tagLogBase * const &,int> rend();
	class reverse_bidirectional_iterator<list<tagLogBase *>::iterator,tagLogBase *,tagLogBase * &,int> rend();
	int32_t empty();
	uint32_t size();
	uint32_t max_size();
	const struct tagLogBase*& front();
	struct tagLogBase*& front();
	const struct tagLogBase*& back();
	struct tagLogBase*& back();
	void swap(class list<tagLogBase *>&);
	void insert(class list<tagLogBase *>::iterator, uint32_t, const struct tagLogBase*&);
	void insert(class list<tagLogBase *>::iterator, class list<tagLogBase *>::const_iterator, class list<tagLogBase *>::const_iterator);
	void insert(class list<tagLogBase *>::iterator, const struct tagLogBase**, const struct tagLogBase**);
	class list<tagLogBase *>::iterator insert(class list<tagLogBase *>::iterator, const struct tagLogBase*&);
	void push_front(const struct tagLogBase*&);
	void push_back(const struct tagLogBase*&);
	void erase(class list<tagLogBase *>::iterator, class list<tagLogBase *>::iterator);
	void erase(class list<tagLogBase *>::iterator);
	void pop_front();
	void pop_back();
	void ~list<tagLogBase *>();
	class list<tagLogBase *>& operator=(const class list<tagLogBase *>&);
protected:
	void transfer(class list<tagLogBase *>::iterator, class list<tagLogBase *>::iterator, class list<tagLogBase *>::iterator);
public:
	void splice(class list<tagLogBase *>::iterator, class list<tagLogBase *>&, class list<tagLogBase *>::iterator, class list<tagLogBase *>::iterator);
	void splice(class list<tagLogBase *>::iterator, class list<tagLogBase *>&, class list<tagLogBase *>::iterator);
	void splice(class list<tagLogBase *>::iterator, class list<tagLogBase *>&);
	void remove(const struct tagLogBase*&);
	void unique();
	void merge(class list<tagLogBase *>&);
	void reverse();
	void sort();
};

// Type: class basic_string<char> (forward reference);
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class MTimeLocalized;
class MTimeLocalized : public MTime
{
public:
	void MTimeLocalized(const class MDate&, uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(uint32_t, uint32_t, uint32_t);
	void MTimeLocalized(unsigned long);
	void MTimeLocalized();
	// vtable: 0
	intro char * PrintStringLocalized(char *, int32_t);
	int32_t nLanguage;
};

// Type: char[256];

// Type: char[64];

// Type: class PFile;
class PFile{
	enum /* __unnamed */ {
		FileNull = -1,
	};
	enum SeekTypes {
		N_SEEK_FROM_FILE_START = 0,
		N_SEEK_FROM_FILE_CURRENT = 1,
		N_SEEK_FROM_FILE_END = 2,
	};
	enum AccessTypes {
		ReadOnly = 0,
		ReadWrite = 2,
		WriteOnly = 1,
		Create = 768,
		CreateExcl = 1280,
		Append = 8,
		Binary = 32768,
		Compat = 0,
		DenyNone = 64,
		DenyRead = 48,
		DenyWrite = 32,
		DenyRdWr = 16,
		NoInherit = 128,
	};
	enum PermissionTypes {
		PermRead = 256,
		PermWrite = 128,
		PermRdWr = 384,
	};
	enum seek_dir {
		beg = 0,
		cur = 1,
		end = 2,
	};
public:
	void PFile(char *);
	void PFile(const class PFile&);
	void PFile(int32_t);
	void PFile();
	// vtable: 0
	intro void ~PFile();
	int32_t Open(char *, unsigned short, unsigned short, int32_t);
	int32_t Close();
	int32_t GetHandle();
	long Position();
	void Length(long);
	long Length();
	long Seek(long, int32_t);
	long SeekToBegin();
	long SeekToEnd();
	int32_t IsOpen();
	int32_t Read(void * __ptr32, int32_t);
	int32_t Write(void * __ptr32, int32_t);
	void Flush();
	// calltype: NearC
	static void Remove(char *);
	// calltype: NearC
	static void Rename(char *, char *);
	long SetPath(char *);
	long FileCreate(char *, int32_t);
	long FileExists(char *);
	char szFilePath[260];
	int32_t Handle;
private:
	int32_t ShouldClose;
};

// Type: class MTime (forward reference);
// MTime Class implementation not found

// Type: struct bidirectional_iterator<tagLogBase *,int>;
struct bidirectional_iterator<tagLogBase *,int>{
};



// Contribution: 1:000eabc0-000ed27d Module: 178, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004ebbc0
void $E57() {

	__asm        call   $E54;
	__asm        call   $E56;
	__asm        jmp    near ptr 0x004EBBD5;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004ebbda
void $E54() {

	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::LogManager;
	__asm        jmp    near ptr 0x004EBBEF;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004ebbf4
void $E56() {

	__asm        push   0x4EBC11;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EBC0C;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x004ebc11
void $E55() {

	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::~LogManager;
	__asm        jmp    near ptr 0x004EBC26;
}

// FUNCTION: COPTER_D 0x004ebc2b
void S3AddLogEntry(struct tagLogBase* logData, int32_t bShowUserMessage) {
// LINE 37:
	__asm        push   1;
	__asm        mov    eax, bShowUserMessage;
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        push   eax;
	__asm        mov    ecx, 0x606E78;
	__asm        call   LogManager::AddLogEntry;
// LINE 38:
	__asm        jmp    near ptr 0x004EBC4A;
}

// FUNCTION: COPTER_D 0x004ebc4f
void LogManager::LogManager() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0x1F4;
// LINE 47:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T288;

	__asm        mov    eax, [ebp-4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T73;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T250;
_T73:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T23b;

	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        jne    _Td2;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x44], eax;
	__asm        mov    eax, [ebp-0x44];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EBD17;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_Td2:
	__asm        jmp    near ptr 0x004EBD26;

	__asm        jmp    near ptr 0x004EBD2B;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    dword ptr [ebp-0x18], 0x155;
	__asm        lea    eax, [ebp-0x18];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        lea    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    ecx, [ebp-0x20];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T117;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    _T11d;
_T117:
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x28], eax;
_T11d:
	__asm        jmp    near ptr 0x004EBD71;

	__asm        jmp    near ptr 0x004EBD76;

	__asm        jmp    near ptr 0x004EBD7B;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x50], eax;
	__asm        push   0;
	__asm        call   set_new_handler;
	__asm        add    esp, 4;
	__asm        mov    eax, [ebp-0x50];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x48], eax;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    _T18a;

	__asm        push   0x5971AC;
	__asm        mov    ecx, 0x638BA0;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EBDCF;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
_T18a:
	__asm        jmp    near ptr 0x004EBDDE;

	__asm        jmp    near ptr 0x004EBDE3;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x2C], 0x155;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    dword ptr [ebp-0x30], 1;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, [ebp-0x34];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T1f1;

	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T1f7;
_T1f1:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    [ebp-0x3C], eax;
_T1f7:
	__asm        jmp    near ptr 0x004EBE4B;

	__asm        jmp    near ptr 0x004EBE50;

	__asm        jmp    near ptr 0x004EBE55;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    near ptr 0x004EBE70;

	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0xC], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    _T250;
_T23b:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x10], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x54], eax;
_T250:
	__asm        jmp    near ptr 0x004EBEA4;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004EBECA;

	__asm        mov    eax, [ebp-4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
	__asm        jmp    _T291;
_T288:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 48:
_T291:
	__asm        jmp    near ptr 0x004EBEE5;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x004ebeed
void LogManager::~LogManager() {
// LINE 54:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _T1f6;
// LINE 55:
	__asm        mov    ecx, this;
	__asm        call   LogManager::PurgeAllEntries;
// LINE 56:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T1ed;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004EBF38;

	__asm        jmp    near ptr 0x004EBF3D;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x004EBF52;

	__asm        jmp    near ptr 0x004EBF57;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x38], eax;
_T76:
	__asm        mov    eax, [ebp-0x34];
	__asm        cmp    [ebp-0x38], eax;
	__asm        jne    _T8c;

	__asm        jmp    _Ta0;

	__asm        jmp    _T8c;
_T8c:
	__asm        jmp    _T9b;

	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _Ta0;
_T9b:
	__asm        jmp    _Ta5;
_Ta0:
	__asm        jmp    _T124;
_Ta5:
	__asm        jmp    _Tb4;

	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     _T124;
_Tb4:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    near ptr 0x004EBFB4;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x004EBFBF;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004EBFE5;

	__asm        jmp    near ptr 0x004EBFEA;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x30];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004EC001;

	__asm        mov    eax, [ebp-4];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004EC00C;

	__asm        jmp    _T76;
_T124:
	__asm        jmp    near ptr 0x004EC016;

	__asm        mov    eax, [ebp-4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x14];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004EC035;

	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T1d2;
_T154:
	__asm        cmp    list<tagLogBase *>::buffer_list, 0;
	__asm        je     _T1af;

	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EC07C;

	__asm        jmp    near ptr 0x004EC081;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EC092;

	__asm        jmp    near ptr 0x004EC097;

	__asm        jmp    _T154;
_T1af:
	__asm        mov    list<tagLogBase *>::free_list, 0;
	__asm        mov    list<tagLogBase *>::next_avail, 0;
	__asm        mov    list<tagLogBase *>::last, 0;
	__asm        jmp    _T1d2;
_T1d2:
	__asm        jmp    near ptr 0x004EC0C4;

	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EC0D5;

	__asm        jmp    _T1ed;
// LINE 57:
_T1ed:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0;
// LINE 59:
_T1f6:
	__asm        jmp    near ptr 0x004EC0E8;
}

// FUNCTION: COPTER_D 0x004ec0ed
int32_t LogManager::ReadLogFromFile(char * szFilePath) {
	int32_t nReturnValue;
	class MIFF tempMIFF;

// LINE 67:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 70:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForReading;
// LINE 71:
	__asm        lea    eax, tempMIFF<MIFF+0x00>;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ReadFromMIFF;
	__asm        mov    nReturnValue, eax;
// LINE 72:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 73:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x150], eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x150];
	__asm        jmp    near ptr 0x004EC15E;
// LINE 74:
}

// FUNCTION: COPTER_D 0x004ec165
int32_t LogManager::WriteLogToFile(char * szFilePath) {
	int32_t nReturnValue;
	class MIFF tempMIFF;

// LINE 82:
	__asm        mov    eax, szFilePath;
	__asm        push   eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::MIFF;
// LINE 85:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::OpenForAppending;
// LINE 86:
	__asm        lea    eax, tempMIFF<MIFF+0x00>;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::WriteToMIFF;
	__asm        mov    nReturnValue, eax;
// LINE 87:
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::Close;
// LINE 88:
	__asm        mov    eax, nReturnValue;
	__asm        mov    [ebp-0x150], eax;
	__asm        lea    ecx, tempMIFF<MIFF+0x00>;
	__asm        call   MIFF::~MIFF;
	__asm        mov    eax, [ebp-0x150];
	__asm        jmp    near ptr 0x004EC1D6;
// LINE 89:
}

// FUNCTION: COPTER_D 0x004ec1dd
int32_t LogManager::ReadFromMIFF(class MIFF* miffReader) {
	struct tagLogBase tempLogBase;
	long lPresentRecordDataLength;

// LINE 103:
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x44];
// LINE 104:
_T17:
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x54];
	__asm        test   eax, eax;
	__asm        je     _T96;
// LINE 105:
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x18];
	__asm        mov    lPresentRecordDataLength, eax;
// LINE 106:
	__asm        cmp    lPresentRecordDataLength, 0xC;
	__asm        jge    _T4c;
// LINE 107:
	__asm        jmp    _T17;
// LINE 108:
_T4c:
	__asm        cmp    lPresentRecordDataLength, 0x38;
	__asm        jle    _T5b;
// LINE 109:
	__asm        jmp    _T17;
// LINE 110:
_T5b:
	__asm        push   0xC;
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 111:
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ValidateLogEntry;
	__asm        test   eax, eax;
	__asm        jne    _T85;
// LINE 112:
	__asm        jmp    _T17;
// LINE 113:
_T85:
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::ReadCurrentRecordFromMIFF;
// LINE 114:
	__asm        jmp    _T17;
// LINE 115:
_T96:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004EC27D;
// LINE 116:
}

// FUNCTION: COPTER_D 0x004ec284
int32_t LogManager::WriteToMIFF(class MIFF* miffWriter) {
	class list<tagLogBase *>::iterator iterator;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x15C], eax;
// LINE 123:
	__asm        mov    eax, [ebp-0x15C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x158], eax;
	__asm        mov    eax, [ebp-0x158];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004EC2C2;

	__asm        jmp    _T43;
// LINE 23:
_T43:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x14C], eax;
// LINE 125:
	__asm        mov    eax, [ebp-0x14C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x148], eax;
	__asm        mov    eax, [ebp-0x148];
	__asm        mov    [ebp-0x128], eax;
	__asm        jmp    near ptr 0x004EC2F4;

	__asm        jmp    near ptr 0x004EC2F9;

	__asm        mov    eax, [ebp-0x128];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T8e;

	__asm        jmp    _Ta5;

	__asm        jmp    _T8e;
_T8e:
	__asm        jmp    _Ta0;

	__asm        cmp    dword ptr [ebp-0x150], 0;
	__asm        jne    _Ta5;
_Ta0:
	__asm        jmp    _Taa;
_Ta5:
	__asm        jmp    _T1e3;
_Taa:
	__asm        jmp    _Tbc;

	__asm        cmp    dword ptr [ebp-0x154], 0;
	__asm        je     _T1e3;
// LINE 126:
_Tbc:
	__asm        jmp    near ptr 0x004EC345;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T183;
// LINE 130:
// Block start:
	long lStringLength;
	struct tagLogString* tempLogStringDestination;
	struct tagLogString* tempLogStringSource;
	char chStringBuffer[276];
	__asm        jmp    near ptr 0x004EC359;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    tempLogStringSource, eax;
// LINE 131:
	__asm        lea    eax, chStringBuffer[0];
	__asm        mov    tempLogStringDestination, eax;
// LINE 133:
	__asm        mov    edi, tempLogStringDestination;
	__asm        mov    esi, tempLogStringSource;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 134:
	__asm        mov    eax, tempLogStringSource;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        mov    eax, ecx;
	__asm        or     eax, 3;
	__asm        inc    eax;
	__asm        mov    lStringLength, eax;
// LINE 135:
	__asm        cmp    lStringLength, 0x100;
	__asm        jle    _T13a;
// LINE 136:
	__asm        mov    lStringLength, 0x100;
// LINE 137:
_T13a:
	__asm        mov    eax, lStringLength;
	__asm        push   eax;
	__asm        mov    eax, tempLogStringSource;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        mov    eax, tempLogStringDestination;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        call   strncpy;
	__asm        add    esp, 0xC;
// LINE 140:
	__asm        mov    eax, lStringLength;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        mov    eax, tempLogStringDestination;
	__asm        push   eax;
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffWriter;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffWriter;
	__asm        call   dword ptr [eax+0x64];
// LINE 142:
// Block end:
	__asm        jmp    _T1b7;
// LINE 144:
_T183:
	__asm        jmp    near ptr 0x004EC40C;

	__asm        jmp    near ptr 0x004EC411;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::GetSizeOfLogRecord;
	__asm        push   eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        push   0x434C4F47;
	__asm        mov    eax, miffWriter;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffWriter;
	__asm        call   dword ptr [eax+0x64];
// LINE 146:
_T1b7:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x180], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004EC451;

	__asm        mov    eax, [ebp-0x180];
	__asm        mov    [ebp-0x12C], eax;
	__asm        jmp    near ptr 0x004EC462;
// LINE 147:
	__asm        jmp    _T43;
_T1e3:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x13C], eax;
// LINE 148:
	__asm        mov    eax, [ebp-0x13C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x138], eax;
	__asm        mov    eax, [ebp-0x138];
	__asm        mov    [ebp-0x130], eax;
	__asm        jmp    near ptr 0x004EC494;

	__asm        jmp    near ptr 0x004EC499;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x144], eax;
	__asm        mov    eax, [ebp-0x144];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x140], eax;
	__asm        mov    eax, [ebp-0x140];
	__asm        mov    [ebp-0x134], eax;
	__asm        jmp    near ptr 0x004EC4C8;

	__asm        jmp    near ptr 0x004EC4CD;

	__asm        mov    eax, [ebp-0x130];
	__asm        mov    [ebp-0x174], eax;
	__asm        mov    eax, [ebp-0x134];
	__asm        mov    [ebp-0x178], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x17C], eax;
_T26f:
	__asm        mov    eax, [ebp-0x174];
	__asm        cmp    [ebp-0x178], eax;
	__asm        jne    _T28b;

	__asm        jmp    _T2a2;

	__asm        jmp    _T28b;
_T28b:
	__asm        jmp    _T29d;

	__asm        cmp    dword ptr [ebp-0x168], 0;
	__asm        jne    _T2a2;
_T29d:
	__asm        jmp    _T2a7;
_T2a2:
	__asm        jmp    _T356;
_T2a7:
	__asm        jmp    _T2b9;

	__asm        cmp    dword ptr [ebp-0x16C], 0;
	__asm        je     _T356;
_T2b9:
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    [ebp-0x164], eax;
	__asm        mov    eax, [ebp-0x178];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x178], eax;
	__asm        jmp    near ptr 0x004EC55C;

	__asm        mov    eax, [ebp-0x164];
	__asm        mov    [ebp-0x160], eax;
	__asm        jmp    near ptr 0x004EC56D;

	__asm        mov    eax, [ebp-0x160];
	__asm        mov    [ebp-0x170], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004EC5A5;

	__asm        jmp    near ptr 0x004EC5AA;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x170];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x170];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004EC5C7;

	__asm        mov    eax, [ebp-0x17C];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004EC5D5;

	__asm        jmp    _T26f;
_T356:
	__asm        jmp    near ptr 0x004EC5DF;
// LINE 149:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004EC5E9;
// LINE 150:
}

// FUNCTION: COPTER_D 0x004ec5f0
long LogManager::GetSizeOfLogRecord(struct tagLogBase* logRecord) {
// LINE 158:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T22;
// LINE 159:
	__asm        mov    eax, 0x14;
	__asm        jmp    _T64;
// LINE 160:
_T22:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T38;
// LINE 161:
	__asm        mov    eax, 0x30;
	__asm        jmp    _T64;
// LINE 162:
_T38:
	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T5a;

	__asm        mov    eax, logRecord;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T5a;
// LINE 163:
	__asm        mov    eax, 0x14;
	__asm        jmp    _T64;
// LINE 164:
_T5a:
	__asm        mov    eax, 0xC;
	__asm        jmp    _T64;
// LINE 165:
_T64:
}

// FUNCTION: COPTER_D 0x004ec65b
int32_t LogManager::ReadCurrentRecordFromMIFF(class MIFF* miffReader) {
	struct tagLogBase tempLogBase;
	char chBuffer[56];

// LINE 180:
	__asm        push   0xC;
	__asm        lea    eax, tempLogBase.nType;
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 182:
	__asm        cmp    tempLogBase.nType, 1;
	__asm        jne    _T7d;
// LINE 188:
// Block start:
	struct tagLogString* tempLogString;
	char chStringBuffer[276];
	__asm        push   0x114;
	__asm        lea    eax, chStringBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 189:
	__asm        lea    eax, chStringBuffer[0];
	__asm        mov    tempLogString, eax;
// LINE 190:
	__asm        mov    eax, tempLogString;
	__asm        add    eax, 0x10;
	__asm        mov    ecx, tempLogString;
	__asm        mov    [ecx+0xC], eax;
// LINE 191:
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, chStringBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::AddLogEntry;
// LINE 193:
// Block end:
	__asm        jmp    _Ta1;
// LINE 196:
_T7d:
	__asm        push   0x38;
	__asm        lea    eax, chBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, miffReader;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, miffReader;
	__asm        call   dword ptr [eax+0x40];
// LINE 197:
	__asm        push   0;
	__asm        push   0;
	__asm        lea    eax, chBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   LogManager::AddLogEntry;
// LINE 199:
_Ta1:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004EC706;
// LINE 200:
}

// FUNCTION: COPTER_D 0x004ec70d
int32_t LogManager::ValidateLogEntry(struct tagLogBase* logData) {
// LINE 208:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jb     _T2e;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xF;
	__asm        jae    _T2e;

	__asm        mov    eax, 1;
	__asm        jmp    _T30;
_T2e:
	__asm        xor    eax, eax;
_T30:
	__asm        jmp    near ptr 0x004EC742;
// LINE 209:
}

// FUNCTION: COPTER_D 0x004ec749
int32_t LogManager::AddLogEntry(struct tagLogBase* logData, int32_t bShowUserMessage, int32_t bSetTime) {
// LINE 220:
	__asm        jmp    near ptr 0x004EC760;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0x1F4;
	__asm        jb     _T39;
// LINE 221:
	__asm        push   0x64;
	__asm        mov    ecx, this;
	__asm        call   LogManager::PurgeNEntries;
// LINE 223:
_T39:
	__asm        cmp    bSetTime, 0;
	__asm        je     _T5e;
// LINE 224:
	__asm        lea    ecx, [ebp-0x24];
	__asm        call   MTime::MTime;
	__asm        mov    [ebp-0x40], eax;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, logData;
	__asm        mov    [ecx+4], eax;
	__asm        jmp    _T5e;
// LINE 225:
_T5e:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T179;
// LINE 227:
// Block start:
	struct tagLogString* newLogString;
	char * szNewStringPointer;
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogString, eax;
// LINE 229:
	__asm        mov    edi, newLogString;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 230:
	__asm        mov    eax, newLogString;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        mov    eax, ecx;
	__asm        or     eax, 3;
	__asm        inc    eax;
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    szNewStringPointer, eax;
// LINE 231:
	__asm        mov    eax, newLogString;
	__asm        mov    edi, [eax+0xC];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    eax, ecx;
	__asm        mov    edx, edi;
	__asm        mov    edi, szNewStringPointer;
	__asm        mov    esi, edx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
// LINE 232:
	__asm        mov    eax, szNewStringPointer;
	__asm        mov    ecx, newLogString;
	__asm        mov    [ecx+0xC], eax;
// LINE 233:
	__asm        mov    eax, newLogString;
	__asm        mov    [ebp-0x28], eax;
	__asm        lea    eax, [ebp-0x28];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004EC84B;

	__asm        jmp    near ptr 0x004EC850;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, [ebp-0x58];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004EC866;

	__asm        mov    eax, [ebp-0x34];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x58];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x004EC8B3;

	__asm        jmp    near ptr 0x004EC8B8;

	__asm        jmp    near ptr 0x004EC8BD;
// LINE 235:
// Block end:
	__asm        jmp    _T41f;
_T179:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T24c;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T24c;
// LINE 236:
// Block start:
	struct tagLogMissionEvent* newLogMissionEvent;
	__asm        push   0x14;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogMissionEvent, eax;
// LINE 237:
	__asm        mov    edi, newLogMissionEvent;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 5;
	__asm        rep movsd;
// LINE 238:
	__asm        mov    eax, newLogMissionEvent;
	__asm        mov    [ebp-0x2C], eax;
	__asm        lea    eax, [ebp-0x2C];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004EC91E;

	__asm        jmp    near ptr 0x004EC923;

	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    ecx, [ebp-0x70];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004EC939;

	__asm        mov    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x68];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    ecx, [ebp-0x6C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x70];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004EC986;

	__asm        jmp    near ptr 0x004EC98B;

	__asm        jmp    near ptr 0x004EC990;
// LINE 240:
// Block end:
	__asm        jmp    _T41f;
_T24c:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T32e;
// LINE 241:
// Block start:
	struct tagLogCityEnterExit* newLogCityEnterExit;
	__asm        push   0x30;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogCityEnterExit, eax;
// LINE 242:
	__asm        mov    edi, newLogCityEnterExit;
	__asm        mov    esi, logData;
	__asm        mov    ecx, 0xC;
	__asm        rep movsd;
// LINE 243:
	__asm        mov    eax, newLogCityEnterExit;
	__asm        mov    [ebp-0x30], eax;
	__asm        lea    eax, [ebp-0x30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x88], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x7C], eax;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0x74], eax;
	__asm        jmp    near ptr 0x004EC9EB;

	__asm        jmp    near ptr 0x004EC9F0;

	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0x84], eax;
	__asm        mov    ecx, [ebp-0x88];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x80], eax;
	__asm        jmp    near ptr 0x004ECA0C;

	__asm        mov    eax, [ebp-0x3C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x84];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    ecx, [ebp-0x84];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x88];
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    [ebp-0x78], eax;
	__asm        jmp    near ptr 0x004ECA68;

	__asm        jmp    near ptr 0x004ECA6D;

	__asm        jmp    near ptr 0x004ECA72;
// LINE 245:
// Block end:
	__asm        jmp    _T41f;
// LINE 246:
// Block start:
	struct tagLogBase* newLogBase;
_T32e:
	__asm        push   0xC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    newLogBase, eax;
// LINE 247:
	__asm        mov    eax, logData;
	__asm        mov    ecx, newLogBase;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xA0], eax;
// LINE 248:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x94], eax;
	__asm        mov    eax, [ebp-0x94];
	__asm        mov    [ebp-0x8C], eax;
	__asm        jmp    near ptr 0x004ECAC7;

	__asm        jmp    near ptr 0x004ECACC;

	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x9C], eax;
	__asm        mov    ecx, [ebp-0xA0];
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x98], eax;
	__asm        jmp    near ptr 0x004ECAEE;

	__asm        lea    eax, newLogBase;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   construct;
	__asm        add    esp, 8;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x9C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x98];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    ecx, [ebp-0x9C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0xA0];
	__asm        inc    dword ptr [eax+4];
	__asm        mov    eax, [ebp-0x98];
	__asm        mov    [ebp-0x90], eax;
	__asm        jmp    near ptr 0x004ECB5E;

	__asm        jmp    near ptr 0x004ECB63;

	__asm        jmp    _T41f;
// LINE 251:
// Block end:
_T41f:
	__asm        cmp    bShowUserMessage, 0;
	__asm        je     _T577;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T577;
// LINE 252:
// Block start:
	class basic_string<char> sCurrentText;
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xA4], eax;
	__asm        cmp    dword ptr [ebp-0xA4], 0;
	__asm        je     _T4a1;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xA4];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004ECBDC;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    sCurrentText.reference, eax;
	__asm        jmp    _T4a8;
_T4a1:
	__asm        mov    sCurrentText.reference, 0;
_T4a8:
	__asm        mov    sCurrentText.c_str_ptr, 0;
	__asm        jmp    near ptr 0x004ECBFD;
// LINE 253:
	__asm        push   0;
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        push   eax;
	__asm        call   LogManager::MakeStringFromLogData;
	__asm        add    esp, 0xC;
// LINE 254:
	__asm        lea    eax, sCurrentText.c_str_ptr;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax+4];
	__asm        call   dword ptr [edx+8];
// LINE 255:
	__asm        mov    eax, sCurrentText.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T53f;

	__asm        mov    eax, sCurrentText.reference;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    [ebp-0xB0], eax;
	__asm        cmp    dword ptr [ebp-0xB0], 0;
	__asm        je     _T53f;

	__asm        mov    ecx, [ebp-0xB0];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004ECC6F;

	__asm        mov    eax, [ebp-0xB0];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ECC83;

	__asm        jmp    _T53f;
_T53f:
	__asm        jmp    near ptr 0x004ECC8D;

	__asm        cmp    sCurrentText.c_str_ptr, 0;
	__asm        je     _T572;

	__asm        mov    eax, sCurrentText.c_str_ptr;
	__asm        mov    [ebp-0xA8], eax;
	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    [ebp-0xAC], eax;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
_T572:
	__asm        jmp    _T577;
// LINE 257:
// Block end:
_T577:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ECCCA;
// LINE 258:
}

// FUNCTION: COPTER_D 0x004eccd1
int32_t LogManager::SortLogEntriesByDate() {
	class list<tagLogBase *>::iterator currentLowest;
	class list<tagLogBase *>::iterator iterator;
	class list<tagLogBase *>* newLogBasePtrList;

// LINE 266:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T23e;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T68:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T1ed;

	__asm        jmp    near ptr 0x004ECD4F;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0x155;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te0;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _Tec;
_Te0:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
_Tec:
	__asm        jmp    near ptr 0x004ECDC2;

	__asm        jmp    near ptr 0x004ECDC7;

	__asm        jmp    near ptr 0x004ECDCC;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004ECDDF;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x98], 0x155;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    dword ptr [ebp-0x9C], 1;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T197;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T1a3;
_T197:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
_T1a3:
	__asm        jmp    near ptr 0x004ECE79;

	__asm        jmp    near ptr 0x004ECE7E;

	__asm        jmp    near ptr 0x004ECE83;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    near ptr 0x004ECEA1;

	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x78], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T1ed:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xB0], eax;
_T205:
	__asm        jmp    near ptr 0x004ECEDB;

	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004ECF04;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    newLogBasePtrList, eax;
	__asm        jmp    _T245;
_T23e:
	__asm        mov    newLogBasePtrList, 0;
// LINE 267:
_T245:
	__asm        jmp    near ptr 0x004ECF1B;
// LINE 268:
	__asm        jmp    near ptr 0x004ECF20;
// LINE 270:
	__asm        jmp    _T254;
_T254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T467;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 271:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004ECF57;

	__asm        jmp    near ptr 0x004ECF5C;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 272:
	__asm        mov    eax, iterator.node;
	__asm        mov    currentLowest.node, eax;
// LINE 23:
_T297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 273:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004ECF86;

	__asm        jmp    near ptr 0x004ECF8B;

	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    iterator.node, eax;
	__asm        jne    _T2d0;

	__asm        jmp    _T2e4;

	__asm        jmp    _T2d0;
_T2d0:
	__asm        jmp    _T2df;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T2e4;
_T2df:
	__asm        jmp    _T2e9;
_T2e4:
	__asm        jmp    _T343;
_T2e9:
	__asm        jmp    _T2f8;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T343;
// LINE 274:
_T2f8:
	__asm        jmp    near ptr 0x004ECFCE;

	__asm        jmp    near ptr 0x004ECFD3;

	__asm        mov    eax, currentLowest.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, iterator.node;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+4], ecx;
	__asm        jbe    _T320;
// LINE 275:
	__asm        mov    eax, iterator.node;
	__asm        mov    currentLowest.node, eax;
// LINE 276:
_T320:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004ED004;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004ED00F;
// LINE 277:
	__asm        jmp    _T297;
// LINE 278:
_T343:
	__asm        jmp    near ptr 0x004ED019;

	__asm        mov    eax, currentLowest.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004ED035;

	__asm        jmp    near ptr 0x004ED03A;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, newLogBasePtrList;
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004ED050;

	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004ED05E;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    near ptr 0x004ED07C;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004ED0B6;

	__asm        jmp    near ptr 0x004ED0BB;

	__asm        jmp    near ptr 0x004ED0C0;

	__asm        mov    eax, currentLowest.node;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
// LINE 279:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004ED103;

	__asm        jmp    near ptr 0x004ED108;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004ED125;

	__asm        mov    eax, [ebp-0xB8];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004ED133;
// LINE 280:
	__asm        jmp    _T254;
// LINE 281:
_T467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T512;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004ED166;

	__asm        jmp    near ptr 0x004ED16B;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004ED180;

	__asm        jmp    near ptr 0x004ED185;

	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::erase;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004ED1B4;

	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T4f7;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::deallocate_buffers;
_T4f7:
	__asm        jmp    near ptr 0x004ED1CD;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ED1DE;

	__asm        jmp    _T512;
// LINE 282:
_T512:
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 283:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ED1F8;
// LINE 284:
}

// FUNCTION: COPTER_D 0x004ed1fd
int32_t LogManager::SortLogEntriesByType() {
	class list<tagLogBase *>::iterator currentLowest;
	class list<tagLogBase *>::iterator iterator;
	class list<tagLogBase *>* newLogBasePtrList;

// LINE 292:
	__asm        push   8;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x10], eax;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     _T23e;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        inc    list<tagLogBase *>::number_of_lists;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    [ebp-0x74], eax;
	__asm        cmp    list<tagLogBase *>::free_list, 0;
	__asm        je     _T68;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    eax, [eax];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        mov    eax, [ebp-0x74];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T68:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        cmp    list<tagLogBase *>::last, eax;
	__asm        jne    _T1ed;

	__asm        jmp    near ptr 0x004ED27B;

	__asm        push   0;
	__asm        push   1;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    [ebp-0x80], eax;
	__asm        mov    dword ptr [ebp-0x84], 0x155;
	__asm        lea    eax, [ebp-0x84];
	__asm        mov    [ebp-0x8C], eax;
	__asm        mov    dword ptr [ebp-0x88], 1;
	__asm        lea    eax, [ebp-0x88];
	__asm        mov    [ebp-0x90], eax;
	__asm        mov    eax, [ebp-0x90];
	__asm        mov    ecx, [ebp-0x8C];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _Te0;

	__asm        mov    eax, [ebp-0x90];
	__asm        mov    [ebp-0x94], eax;
	__asm        jmp    _Tec;
_Te0:
	__asm        mov    eax, [ebp-0x8C];
	__asm        mov    [ebp-0x94], eax;
_Tec:
	__asm        jmp    near ptr 0x004ED2EE;

	__asm        jmp    near ptr 0x004ED2F3;

	__asm        jmp    near ptr 0x004ED2F8;

	__asm        mov    eax, [ebp-0x94];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xAC], eax;
	__asm        jmp    near ptr 0x004ED30B;

	__asm        push   0;
	__asm        mov    eax, [ebp-0xAC];
	__asm        push   eax;
	__asm        call   allocate;
	__asm        add    esp, 8;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    ecx, [ebp-0x80];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x80];
	__asm        mov    list<tagLogBase *>::buffer_list, eax;
	__asm        mov    eax, list<tagLogBase *>::buffer_list;
	__asm        mov    eax, [eax+4];
	__asm        mov    list<tagLogBase *>::next_avail, eax;
	__asm        mov    dword ptr [ebp-0x98], 0x155;
	__asm        lea    eax, [ebp-0x98];
	__asm        mov    [ebp-0xA0], eax;
	__asm        mov    dword ptr [ebp-0x9C], 1;
	__asm        lea    eax, [ebp-0x9C];
	__asm        mov    [ebp-0xA4], eax;
	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    ecx, [ebp-0xA0];
	__asm        mov    ecx, [ecx];
	__asm        cmp    [eax], ecx;
	__asm        jb     _T197;

	__asm        mov    eax, [ebp-0xA4];
	__asm        mov    [ebp-0xA8], eax;
	__asm        jmp    _T1a3;
_T197:
	__asm        mov    eax, [ebp-0xA0];
	__asm        mov    [ebp-0xA8], eax;
_T1a3:
	__asm        jmp    near ptr 0x004ED3A5;

	__asm        jmp    near ptr 0x004ED3AA;

	__asm        jmp    near ptr 0x004ED3AF;

	__asm        mov    eax, [ebp-0xA8];
	__asm        mov    eax, [eax];
	__asm        lea    eax, [eax+eax*2];
	__asm        shl    eax, 2;
	__asm        add    eax, list<tagLogBase *>::next_avail;
	__asm        mov    list<tagLogBase *>::last, eax;
	__asm        jmp    near ptr 0x004ED3CD;

	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x78], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x78];
	__asm        mov    [ebp-0xB0], eax;
	__asm        jmp    _T205;
_T1ed:
	__asm        mov    eax, list<tagLogBase *>::next_avail;
	__asm        mov    [ebp-0x7C], eax;
	__asm        add    list<tagLogBase *>::next_avail, 0xC;
	__asm        mov    eax, [ebp-0x7C];
	__asm        mov    [ebp-0xB0], eax;
_T205:
	__asm        jmp    near ptr 0x004ED407;

	__asm        mov    eax, [ebp-0xB0];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x10];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004ED430;

	__asm        mov    eax, [ebp-0x10];
	__asm        mov    newLogBasePtrList, eax;
	__asm        jmp    _T245;
_T23e:
	__asm        mov    newLogBasePtrList, 0;
// LINE 293:
_T245:
	__asm        jmp    near ptr 0x004ED447;
// LINE 294:
	__asm        jmp    near ptr 0x004ED44C;
// LINE 296:
	__asm        jmp    _T254;
_T254:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T467;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 297:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004ED483;

	__asm        jmp    near ptr 0x004ED488;

	__asm        mov    eax, [ebp-0x14];
	__asm        mov    iterator.node, eax;
// LINE 298:
	__asm        mov    eax, iterator.node;
	__asm        mov    currentLowest.node, eax;
// LINE 23:
_T297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 299:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004ED4B2;

	__asm        jmp    near ptr 0x004ED4B7;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0x18], eax;
	__asm        jne    _T2d0;

	__asm        jmp    _T2e4;

	__asm        jmp    _T2d0;
_T2d0:
	__asm        jmp    _T2df;

	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        jne    _T2e4;
_T2df:
	__asm        jmp    _T2e9;
_T2e4:
	__asm        jmp    _T343;
_T2e9:
	__asm        jmp    _T2f8;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T343;
// LINE 300:
_T2f8:
	__asm        jmp    near ptr 0x004ED4FA;

	__asm        jmp    near ptr 0x004ED4FF;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, currentLowest.node;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    ecx, [ecx+8];
	__asm        cmp    [eax+8], ecx;
	__asm        jae    _T320;
// LINE 301:
	__asm        mov    eax, iterator.node;
	__asm        mov    currentLowest.node, eax;
// LINE 302:
_T320:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004ED530;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004ED53B;
// LINE 303:
	__asm        jmp    _T297;
// LINE 304:
_T343:
	__asm        jmp    near ptr 0x004ED545;

	__asm        mov    eax, currentLowest.node;
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    near ptr 0x004ED561;

	__asm        jmp    near ptr 0x004ED566;

	__asm        mov    eax, [ebp-0x40];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    ecx, newLogBasePtrList;
	__asm        call   list<tagLogBase *>::get_node;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    near ptr 0x004ED57C;

	__asm        mov    eax, [ebp-0x4C];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004ED58A;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T3a6;

	__asm        mov    eax, [ebp-0x58];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x50];
	__asm        mov    [ecx], eax;
	__asm        jmp    _T3a6;
_T3a6:
	__asm        jmp    near ptr 0x004ED5A8;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x4C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, newLogBasePtrList;
	__asm        add    dword ptr [eax+4], 1;
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004ED5E2;

	__asm        jmp    near ptr 0x004ED5E7;

	__asm        jmp    near ptr 0x004ED5EC;

	__asm        mov    eax, currentLowest.node;
	__asm        mov    [ebp-0xB4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0xB8], eax;
// LINE 305:
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004ED62F;

	__asm        jmp    near ptr 0x004ED634;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0xB4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0xB4];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004ED651;

	__asm        mov    eax, [ebp-0xB8];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004ED65F;
// LINE 306:
	__asm        jmp    _T254;
// LINE 307:
_T467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     _T512;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004ED692;

	__asm        jmp    near ptr 0x004ED697;

	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
	__asm        mov    eax, [ebp-0x6C];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x004ED6AC;

	__asm        jmp    near ptr 0x004ED6B1;

	__asm        mov    eax, [ebp-0x5C];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        push   eax;
	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::erase;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x64];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x64];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004ED6E0;

	__asm        dec    list<tagLogBase *>::number_of_lists;
	__asm        jne    _T4f7;

	__asm        mov    ecx, [ebp-0x20];
	__asm        call   list<tagLogBase *>::deallocate_buffers;
_T4f7:
	__asm        jmp    near ptr 0x004ED6F9;

	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004ED70A;

	__asm        jmp    _T512;
// LINE 308:
_T512:
	__asm        mov    eax, newLogBasePtrList;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 309:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ED724;
// LINE 310:
}

// FUNCTION: COPTER_D 0x004ed729
int32_t LogManager::PurgeAllEntries() {
	class list<tagLogBase *>::iterator iterator;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x4C], eax;
// LINE 322:
	__asm        mov    eax, [ebp-0x4C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004ED752;

	__asm        jmp    _T2e;
// LINE 23:
_T2e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
// LINE 324:
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x38], eax;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x004ED772;

	__asm        jmp    near ptr 0x004ED777;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-8], eax;
	__asm        jne    _T64;

	__asm        jmp    _T78;

	__asm        jmp    _T64;
_T64:
	__asm        jmp    _T73;

	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        jne    _T78;
_T73:
	__asm        jmp    _T7d;
_T78:
	__asm        jmp    _T106;
_T7d:
	__asm        jmp    _T8c;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     _T106;
// LINE 325:
_T8c:
	__asm        jmp    near ptr 0x004ED7BA;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _Tc3;
// LINE 326:
	__asm        jmp    near ptr 0x004ED7CE;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 327:
_Tc3:
	__asm        jmp    near ptr 0x004ED7F1;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 328:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x70], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004ED81F;

	__asm        mov    eax, [ebp-0x70];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x004ED82A;
// LINE 329:
	__asm        jmp    _T2e;
_T106:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 330:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004ED84A;

	__asm        jmp    near ptr 0x004ED84F;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004ED86C;

	__asm        jmp    near ptr 0x004ED871;

	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x68], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x6C], eax;
_T15c:
	__asm        mov    eax, [ebp-0x64];
	__asm        cmp    [ebp-0x68], eax;
	__asm        jne    _T172;

	__asm        jmp    _T186;

	__asm        jmp    _T172;
_T172:
	__asm        jmp    _T181;

	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T186;
_T181:
	__asm        jmp    _T18b;
_T186:
	__asm        jmp    _T20a;
_T18b:
	__asm        jmp    _T19a;

	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T20a;
_T19a:
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x68];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x004ED8D6;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x004ED8E1;

	__asm        mov    eax, [ebp-0x50];
	__asm        mov    [ebp-0x60], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004ED907;

	__asm        jmp    near ptr 0x004ED90C;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x60];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x60];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004ED923;

	__asm        mov    eax, [ebp-0x6C];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004ED92E;

	__asm        jmp    _T15c;
_T20a:
	__asm        jmp    near ptr 0x004ED938;
// LINE 331:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004ED942;
// LINE 332:
}

// FUNCTION: COPTER_D 0x004ed947
int32_t LogManager::PurgeNEntries(long lEntryCountToPurge) {
	class list<tagLogBase *>::iterator iterator;
	long i;


	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x40], eax;
// LINE 344:
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004ED970;

	__asm        jmp    near ptr 0x004ED975;
// LINE 347:
	__asm        mov    i, 0;
	__asm        jmp    _T3d;
_T3a:
	__asm        inc    i;
_T3d:
	__asm        mov    eax, lEntryCountToPurge;
	__asm        cmp    i, eax;
	__asm        jge    _T10d;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x34], eax;
// LINE 348:
	__asm        mov    eax, [ebp-0x34];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x30], eax;
	__asm        mov    eax, [ebp-0x30];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x004ED9AB;

	__asm        jmp    near ptr 0x004ED9B0;

	__asm        mov    eax, iterator.node;
	__asm        cmp    [ebp-0xC], eax;
	__asm        jne    _T7a;

	__asm        jmp    _T7f;
_T7a:
	__asm        jmp    _T93;
_T7f:
	__asm        jmp    _T8e;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T93;
// LINE 349:
_T8e:
	__asm        jmp    _T10d;
// LINE 350:
_T93:
	__asm        jmp    near ptr 0x004ED9DF;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _Tca;
// LINE 351:
	__asm        jmp    near ptr 0x004ED9F3;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0x20], eax;
	__asm        mov    eax, [ebp-0x20];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 352:
_Tca:
	__asm        jmp    near ptr 0x004EDA16;

	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ebp-0x14], eax;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    [ebp-0x24], eax;
	__asm        mov    eax, [ebp-0x24];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
// LINE 353:
	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x64], eax;
	__asm        mov    eax, iterator.node;
	__asm        mov    eax, [eax];
	__asm        mov    iterator.node, eax;
	__asm        jmp    near ptr 0x004EDA44;

	__asm        mov    eax, [ebp-0x64];
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x004EDA4F;
// LINE 354:
	__asm        jmp    _T3a;
_T10d:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x2C], eax;
// LINE 355:
	__asm        mov    eax, [ebp-0x2C];
	__asm        mov    eax, [eax];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x28], eax;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x004EDA71;

	__asm        jmp    near ptr 0x004EDA76;

	__asm        mov    eax, iterator.node;
	__asm        mov    [ebp-0x58], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    [ebp-0x5C], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x60], eax;
_T143:
	__asm        mov    eax, [ebp-0x58];
	__asm        cmp    [ebp-0x5C], eax;
	__asm        jne    _T159;

	__asm        jmp    _T16d;

	__asm        jmp    _T159;
_T159:
	__asm        jmp    _T168;

	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    _T16d;
_T168:
	__asm        jmp    _T172;
_T16d:
	__asm        jmp    _T1f1;
_T172:
	__asm        jmp    _T181;

	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     _T1f1;
_T181:
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    [ebp-0x48], eax;
	__asm        mov    eax, [ebp-0x5C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x004EDADB;

	__asm        mov    eax, [ebp-0x48];
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    near ptr 0x004EDAE6;

	__asm        mov    eax, [ebp-0x44];
	__asm        mov    [ebp-0x54], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx+4];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    ecx, [ecx];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x004EDB0C;

	__asm        jmp    near ptr 0x004EDB11;

	__asm        mov    eax, list<tagLogBase *>::free_list;
	__asm        mov    ecx, [ebp-0x54];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    list<tagLogBase *>::free_list, eax;
	__asm        jmp    near ptr 0x004EDB28;

	__asm        mov    eax, [ebp-0x60];
	__asm        dec    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004EDB33;

	__asm        jmp    _T143;
_T1f1:
	__asm        jmp    near ptr 0x004EDB3D;
// LINE 356:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x004EDB47;
// LINE 357:
}

// FUNCTION: COPTER_D 0x004edb4e
void LogManager::MakeStringFromLogData(struct tagLogBase* logData, class basic_string<char>& sCurrentText, int32_t bPrintTime) {
	class MTimeLocalized tempTime;
	char szBuffer1[256];
	char szTime[64];
	int32_t nFullStringID;
	char szBuffer[256];

// LINE 366:
	__asm        mov    al, ds:[0x5B4878];
	__asm        mov    szBuffer[0], al;
	__asm        lea    edi, szBuffer[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x3F;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 367:
	__asm        mov    al, ds:[0x5B487C];
	__asm        mov    szBuffer1[0], al;
	__asm        lea    edi, szBuffer1[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0x3F;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
// LINE 368:
	__asm        mov    al, ds:[0x5B4880];
	__asm        mov    szTime[0], al;
	__asm        lea    edi, szTime[1];
	__asm        xor    eax, eax;
	__asm        mov    ecx, 0xF;
	__asm        rep stosd;
	__asm        stosw;
	__asm        stosb;
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x268], eax;
// LINE 370:
	__asm        mov    tempTime<MTimeLocalized+0x08>, 0;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    tempTime<MTimeLocalized+0x04>, eax;
	__asm        jmp    near ptr 0x004EDBD8;

	__asm        mov    tempTime.nLanguage, 0;
	__asm        mov    tempTime<vftable>, 0x592680;
	__asm        jmp    near ptr 0x004EDBF1;
// LINE 372:
	__asm        cmp    bPrintTime, 0;
	__asm        je     _T393;
// LINE 373:
	__asm        push   0;
	__asm        lea    eax, szTime[0];
	__asm        push   eax;
	__asm        lea    ecx, tempTime<vftable>;
	__asm        call   MTimeLocalized::PrintStringLocalized;
// LINE 374:
	__asm        jmp    near ptr 0x004EDC14;

	__asm        lea    edi, szTime[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        lea    eax, szTime[0];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::assign_str;
	__asm        jmp    near ptr 0x004EDC3D;

	__asm        mov    byte ptr [ebp-0x2A4], 0x20;
// LINE 375:
	__asm        jmp    near ptr 0x004EDC49;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0xFFFFFFFE;
	__asm        jb     _T143;

	__asm        push   0x5971E4;
	__asm        mov    ecx, 0x638C00;
	__asm        call   ostream::operator<<;
	__asm        mov    [ebp-0x288], eax;
	__asm        mov    eax, [ebp-0x288];
	__asm        push   eax;
	__asm        call   endl;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EDC82;

	__asm        push   1;
	__asm        call   exit;
	__asm        add    esp, 4;
	__asm        jmp    _T143;
_T143:
	__asm        jmp    near ptr 0x004EDC96;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 1;
	__asm        jne    _T17a;

	__asm        jmp    near ptr 0x004EDCAB;

	__asm        jmp    near ptr 0x004EDCB0;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    ecx, [ecx+4];
	__asm        mov    ecx, [ecx+4];
	__asm        cmp    [eax+8], ecx;
	__asm        ja     _T34c;
_T17a:
	__asm        push   0x10;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x27C], eax;
	__asm        cmp    dword ptr [ebp-0x27C], 0;
	__asm        je     _T2ca;

	__asm        jmp    near ptr 0x004EDCEA;

	__asm        jmp    near ptr 0x004EDCEF;

	__asm        jmp    near ptr 0x004EDCF4;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T1ce;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x284], eax;
	__asm        jmp    _T1dd;

	__asm        jmp    _T1dd;
_T1ce:
	__asm        mov    dword ptr [ebp-0x284], 0;
	__asm        jmp    _T1dd;
_T1dd:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        inc    eax;
	__asm        mov    [ebp-0x29C], eax;
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x2A0], eax;
	__asm        mov    eax, [ebp-0x29C];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x2A0];
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx+4], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     _T29b;

	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x27C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        cmp    dword ptr [eax+4], 0;
	__asm        je     _T296;

	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x294], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x298], eax;
	__asm        mov    eax, [ebp-0x294];
	__asm        mov    edi, [ebp-0x298];
	__asm        mov    esi, [ebp-0x284];
	__asm        mov    ecx, eax;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T296;
_T296:
	__asm        jmp    _T2a7;
_T29b:
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    dword ptr [eax], 0;
_T2a7:
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x004EDE07;

	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    [ebp-0x278], eax;
	__asm        jmp    _T2d4;
_T2ca:
	__asm        mov    dword ptr [ebp-0x278], 0;
_T2d4:
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T33b;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x290], eax;
	__asm        mov    eax, [ebp-0x290];
	__asm        mov    [ebp-0x28C], eax;
	__asm        cmp    dword ptr [ebp-0x28C], 0;
	__asm        je     _T33b;

	__asm        mov    ecx, [ebp-0x28C];
	__asm        call   basic_string_ref<char>::delete_ptr;
	__asm        jmp    near ptr 0x004EDE70;

	__asm        mov    eax, [ebp-0x28C];
	__asm        push   eax;
	__asm        call   operator delete;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x004EDE84;

	__asm        jmp    _T33b;
_T33b:
	__asm        jmp    near ptr 0x004EDE8E;

	__asm        mov    eax, [ebp-0x278];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    [ecx+4], eax;
_T34c:
	__asm        jmp    near ptr 0x004EDE9F;

	__asm        jmp    near ptr 0x004EDEA4;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, sCurrentText;
	__asm        mov    ecx, [ecx+4];
	__asm        add    eax, [ecx];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    al, [ebp-0x2A4];
	__asm        mov    ecx, [ebp-0x280];
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x004EDECE;

	__asm        mov    eax, sCurrentText;
	__asm        mov    eax, [eax+4];
	__asm        inc    dword ptr [eax+4];
	__asm        jmp    near ptr 0x004EDEDC;
// LINE 377:
	__asm        jmp    _T39f;
// LINE 378:
_T393:
	__asm        push   0xFFFFFFFF;
	__asm        push   0;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::remove;
// LINE 380:
_T39f:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 1;
	__asm        jne    _T3fb;
// LINE 381:
// Block start:
	const struct tagLogString* lS;
	__asm        mov    eax, logData;
	__asm        mov    lS, eax;
	__asm        mov    eax, lS;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    [ebp-0x264], eax;
// LINE 382:
	__asm        jmp    near ptr 0x004EDF16;

	__asm        mov    edi, [ebp-0x264];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004EDF3F;
// LINE 383:
	__asm        jmp    _T711;
// LINE 385:
// Block end:
	__asm        jmp    _T6de;
_T3fb:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 3;
	__asm        jb     _T4ed;

	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 0xE;
	__asm        ja     _T4ed;
// LINE 386:
// Block start:
	const struct tagLogMissionEvent* lME;
	__asm        mov    eax, logData;
	__asm        mov    lME, eax;
// LINE 387:
	__asm        mov    eax, lME;
	__asm        push   eax;
	__asm        call   LogManager::GetStringIDFromLogEvent;
	__asm        add    esp, 4;
	__asm        mov    nFullStringID, eax;
// LINE 388:
	__asm        push   0;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 389:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x26C], eax;
	__asm        cmp    dword ptr [ebp-0x26C], 0;
	__asm        jne    _T4e3;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T4e8;
_T4e3:
	__asm        jmp    _T4e8;
// LINE 391:
// Block end:
_T4e8:
	__asm        jmp    _T6de;
_T4ed:
	__asm        mov    eax, logData;
	__asm        cmp    dword ptr [eax], 2;
	__asm        jne    _T606;
// LINE 392:
// Block start:
	const struct tagLogCityEnterExit* lCEE;
	__asm        mov    eax, logData;
	__asm        mov    lCEE, eax;
// LINE 393:
	__asm        mov    eax, lCEE;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    _T52c;
// LINE 394:
	__asm        push   0;
	__asm        push   0x216;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 395:
	__asm        jmp    _T541;
// LINE 396:
_T52c:
	__asm        push   0;
	__asm        push   0x217;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 397:
_T541:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x270], eax;
	__asm        cmp    dword ptr [ebp-0x270], 0;
	__asm        jne    _T5dc;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x270], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer1[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T5e1;
_T5dc:
	__asm        jmp    _T5e1;
// LINE 398:
_T5e1:
	__asm        mov    eax, lCEE;
	__asm        add    eax, 0x10;
	__asm        push   eax;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0xC;
// LINE 400:
// Block end:
	__asm        jmp    _T6de;
// LINE 401:
_T606:
	__asm        push   0;
	__asm        push   0x215;
	__asm        call   LanguageManager::GetFullStringID;
	__asm        add    esp, 8;
	__asm        mov    nFullStringID, eax;
// LINE 402:
	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    eax, nFullStringID;
	__asm        push   eax;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x274], eax;
	__asm        cmp    dword ptr [ebp-0x274], 0;
	__asm        jne    _T6b6;

	__asm        push   0xFFF;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        mov    ecx, 0x3E8;
	__asm        mov    eax, nFullStringID;
	__asm        sub    edx, edx;
	__asm        div    ecx;
	__asm        push   edx;
	__asm        mov    eax, _ghWindowsInstance;
	__asm        push   eax;
	__asm        call   dword ptr ds:[0x6C38B4];
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    edi, 0x597200;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        sub    edi, ecx;
	__asm        mov    edx, edi;
	__asm        mov    ebx, ecx;
	__asm        lea    edi, szBuffer1[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        dec    edi;
	__asm        mov    esi, edx;
	__asm        mov    ecx, ebx;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, ebx;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    _T6bb;
_T6b6:
	__asm        jmp    _T6bb;
// LINE 403:
_T6bb:
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, logData;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        lea    eax, szBuffer1[0];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        call   sprintf;
	__asm        add    esp, 0x10;
// LINE 406:
_T6de:
	__asm        jmp    near ptr 0x004EE231;

	__asm        lea    edi, szBuffer[0];
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        push   eax;
	__asm        lea    eax, szBuffer[0];
	__asm        push   eax;
	__asm        mov    ecx, sCurrentText;
	__asm        call   basic_string<char>::append_str;
	__asm        jmp    near ptr 0x004EE25A;
// LINE 407:
	__asm        jmp    _T711;
_T711:
}

// FUNCTION: COPTER_D 0x004ee264
long LogManager::GetStringIDFromLogEvent(const struct tagLogMissionEvent* lME) {
// LINE 416:
	__asm        mov    eax, lME;
	__asm        mov    eax, [eax];
	__asm        add    eax, 0x214;
	__asm        jmp    near ptr 0x004EE279;
// LINE 434:
}



// Contribution: 1:000ed280-000ed495 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee280
// list<tagLogBase *>::get_node



// Contribution: 1:000ed4a0-000ed508 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee4a0
// allocate



// Contribution: 1:000ed510-000ed57b Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee510
// allocate



// Contribution: 1:000ed580-000ed5b6 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee580
// construct



// Contribution: 1:000ed5c0-000ed64e Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee5c0
// list<tagLogBase *>::deallocate_buffers



// Contribution: 1:000ed650-000ed715 Module: 178, 16 byte alignment, code, (comdat), execute, read, 
// LIBRARY: MSVC 0x004ee650
// list<tagLogBase *>::erase



// Contribution: 2:00003680-00003683 Module: 178, 4 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00592680
// GLOBAL: COPTER_D 0x00592680
// ??_7MTimeLocalized@@6B@


// Contribution: 3:000000a0-000000a3 Module: 178, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970a0
void (*$S58)() = { /* <data@0x005970a0> */ };



// Contribution: 3:0001d878-0001d880 Module: 178, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0001d884-0001d887 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4884
uint32_t list<tagLogBase *>::number_of_lists = { /* <data@0x005b4884> */ };



// Contribution: 3:0001d888-0001d88b Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4888
struct list<tagLogBase *>::list_node* list<tagLogBase *>::last = { /* <data@0x005b4888> */ };



// Contribution: 3:0001d88c-0001d88f Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b488c
struct list<tagLogBase *>::list_node* list<tagLogBase *>::next_avail = { /* <data@0x005b488c> */ };



// Contribution: 3:0001d890-0001d893 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4890
struct list<tagLogBase *>::list_node* list<tagLogBase *>::free_list = { /* <data@0x005b4890> */ };



// Contribution: 3:0001d894-0001d897 Module: 178, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b4894
struct list<tagLogBase *>::list_node_buffer* list<tagLogBase *>::buffer_list = { /* <data@0x005b4894> */ };



// Contribution: 3:0006fe78-0006fe83 Module: 178, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x00606e78
class LogManager gLogManager;

