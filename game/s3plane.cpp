// Module: S3plane.obj
// Source: C:\Copter\Source\Game\S3plane.cpp
// autogenerated by simcopter_tool from PDB file

// Type: struct Point2d;
struct Point2d{
	int32_t x;
	int32_t y;
};

// Type: int32_t;

// Type: class PlaneClass;
class PlaneClass{
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		END_OF_RAIL = 4,
		INTERSECTION_FULL = 5,
	};
	enum RailTileOffsets {
		RL_CENTOFF = 0,
		RL_EDGEOFF = 131072,
	};
	enum /* __unnamed */ {
		COLLISION_SPACE = 655360,
		PLANE_SPEED = 7864320,
		PLANE_SLOWDOWN_FACTOR = 131072,
		SPEED_VARIANCE = 262144,
		MIN_ALTITUDE = 22937600,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 3932160,
	};
	enum flagEnums {
		INITIALIZED = 0,
		PLACED = 1,
		CRASH_WHEN_READY = 2,
		CRASHING = 3,
		NUMBER_OF_FLAGS = 4,
	};
protected:
	static struct Point2d lastScannedLocation;
	static int32_t sPlaneModelSet;
	static class PlaneClass lsPlane;
	char flags[4];
	struct Point3d directionVector;
	int32_t remainingDist;
	int32_t speed;
	int32_t desiredSpeed;
	struct Point2d currentLocation;
	struct Point2d currentCell;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t altAdjustment;
	long missionId;
	struct Point2d crashLocation;
	int32_t smokeTime;
	long shieldCtr;
	long missileHits;
	long planeModel;
	struct _DYOBJ_INST dyObj;
public:
	void PlaneClass(const class PlaneClass&);
	void PlaneClass(long, long);
	void PlaneClass();
	// vtable: 0
	intro void ~PlaneClass();
	// calltype: NearC
	static class PlaneClass* CreateInstance(long, long, int32_t);
	// calltype: NearC
	static class PlaneClass* CreateInstance(int32_t);
	// calltype: NearC
	static class PlaneClass* GetPlanePointer(long);
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static int32_t FindPlaneToCrash(long);
	// calltype: NearC
	static void HitDispatch(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
protected:
	int32_t IsPlaneInitialized();
	int32_t IsPlanePlaced();
	int32_t IsPlaneCrashing();
	int32_t IsPlaneMoving();
	long GetPlaneModel();
	const const struct _DYOBJ_INST* GetPlaneDyObj();
	const struct Point3d& GetDirectionVector();
	int32_t GetSpeed();
	int32_t GetDesiredSpeed();
	const struct Point2d& GetCurrentLocation();
	void SetCurrentLocation(struct Point2d&);
	void SetPlaneReadyToCrash(long);
	int32_t AmIaUFO();
	int32_t IsPlaneReadyToCrash();
	void SetSpeed(int32_t);
	int32_t Initialize(int32_t);
	void Reset();
	void Itterate();
	// vtable: 4
	intro void ItterateFSM();
	// vtable: 8
	intro void AdjustSpeed();
	// vtable: 12
	intro enum PlaneClass::StoppedReasons IsPathClear();
	enum PlaneClass::StoppedReasons CheckDynamicObjectsAt(const struct Point2d&, const struct Point3d&);
	int32_t IsPlaneOutOfCameraRange();
	void SlowDown();
	void Stop();
	void MoveForward();
	int32_t HaveIReachedNextLoc();
	int32_t AmIInANewCell();
	void UnlinkFromCell(const struct Point2d&);
	void LinkToCell(const struct Point2d&);
	void AdjustCurrentPosition();
	void AdjustNextPosition();
	void AdjustNextAltitude();
	void UnPlacePlane();
	int32_t PlaneCollisionCheck(int32_t, struct _CELL_INFO*);
	void SetCrashWhenReady();
	void PlaneSoundDriver();
	void TurnOffShields();
	void TurnOnShields();
	void HandleUFOStuff();
	// calltype: NearC
	static void InitArrays();
	// calltype: NearC
	static void SetPlaneTypesAndLocations();
	// calltype: NearC
	static void PlaceInitialPlanes();
	// vtable: 16
	intro void BeamToWithinCameraRange();
private:
	int32_t InitializeInstance(long, long, int32_t);
public:
	class PlaneClass operator=(const class PlaneClass&);
};

// Type: class PlaneClass (forward reference);
class PlaneClass{
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		END_OF_RAIL = 4,
		INTERSECTION_FULL = 5,
	};
	enum RailTileOffsets {
		RL_CENTOFF = 0,
		RL_EDGEOFF = 131072,
	};
	enum /* __unnamed */ {
		COLLISION_SPACE = 655360,
		PLANE_SPEED = 7864320,
		PLANE_SLOWDOWN_FACTOR = 131072,
		SPEED_VARIANCE = 262144,
		MIN_ALTITUDE = 22937600,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 3932160,
	};
	enum flagEnums {
		INITIALIZED = 0,
		PLACED = 1,
		CRASH_WHEN_READY = 2,
		CRASHING = 3,
		NUMBER_OF_FLAGS = 4,
	};
protected:
	static struct Point2d lastScannedLocation;
	static int32_t sPlaneModelSet;
	static class PlaneClass lsPlane;
	char flags[4];
	struct Point3d directionVector;
	int32_t remainingDist;
	int32_t speed;
	int32_t desiredSpeed;
	struct Point2d currentLocation;
	struct Point2d currentCell;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t altAdjustment;
	long missionId;
	struct Point2d crashLocation;
	int32_t smokeTime;
	long shieldCtr;
	long missileHits;
	long planeModel;
	struct _DYOBJ_INST dyObj;
public:
	void PlaneClass(const class PlaneClass&);
	void PlaneClass(long, long);
	void PlaneClass();
	// vtable: 0
	intro void ~PlaneClass();
	// calltype: NearC
	static class PlaneClass* CreateInstance(long, long, int32_t);
	// calltype: NearC
	static class PlaneClass* CreateInstance(int32_t);
	// calltype: NearC
	static class PlaneClass* GetPlanePointer(long);
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static int32_t FindPlaneToCrash(long);
	// calltype: NearC
	static void HitDispatch(long, struct _DYOBJ_INST*, struct _DYOBJ_INST*, long, long);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
protected:
	int32_t IsPlaneInitialized();
	int32_t IsPlanePlaced();
	int32_t IsPlaneCrashing();
	int32_t IsPlaneMoving();
	long GetPlaneModel();
	const const struct _DYOBJ_INST* GetPlaneDyObj();
	const struct Point3d& GetDirectionVector();
	int32_t GetSpeed();
	int32_t GetDesiredSpeed();
	const struct Point2d& GetCurrentLocation();
	void SetCurrentLocation(struct Point2d&);
	void SetPlaneReadyToCrash(long);
	int32_t AmIaUFO();
	int32_t IsPlaneReadyToCrash();
	void SetSpeed(int32_t);
	int32_t Initialize(int32_t);
	void Reset();
	void Itterate();
	// vtable: 4
	intro void ItterateFSM();
	// vtable: 8
	intro void AdjustSpeed();
	// vtable: 12
	intro enum PlaneClass::StoppedReasons IsPathClear();
	enum PlaneClass::StoppedReasons CheckDynamicObjectsAt(const struct Point2d&, const struct Point3d&);
	int32_t IsPlaneOutOfCameraRange();
	void SlowDown();
	void Stop();
	void MoveForward();
	int32_t HaveIReachedNextLoc();
	int32_t AmIInANewCell();
	void UnlinkFromCell(const struct Point2d&);
	void LinkToCell(const struct Point2d&);
	void AdjustCurrentPosition();
	void AdjustNextPosition();
	void AdjustNextAltitude();
	void UnPlacePlane();
	int32_t PlaneCollisionCheck(int32_t, struct _CELL_INFO*);
	void SetCrashWhenReady();
	void PlaneSoundDriver();
	void TurnOffShields();
	void TurnOnShields();
	void HandleUFOStuff();
	// calltype: NearC
	static void InitArrays();
	// calltype: NearC
	static void SetPlaneTypesAndLocations();
	// calltype: NearC
	static void PlaceInitialPlanes();
	// vtable: 16
	intro void BeamToWithinCameraRange();
private:
	int32_t InitializeInstance(long, long, int32_t);
public:
	class PlaneClass operator=(const class PlaneClass&);
};

// Type: void ();

// Type: void;

// Type: long;

// Type: struct VRview;
struct VRview{
	struct Point3d loc;
	struct Point3d scale;
	int32_t matrix[4][4];
};

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: enum PlaneClass::StoppedReasons;
enum StoppedReasons {
	NO_REASON = 0,
	TRAFFIC = 1,
	STOPPED_TRAFFIC = 2,
	PERSON_IN_WAY = 3,
	END_OF_RAIL = 4,
	INTERSECTION_FULL = 5,
};

// Type: struct Point2d (forward reference);
struct Point2d{
	int32_t x;
	int32_t y;
};

// Type: struct Point3d (forward reference);
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct _CELL_INFO (forward reference);
struct _CELL_INFO{
	short flags;
	short x;
	short y;
	short z;
	short size;
	short ctr;
	struct _STOBJ_INST* stptr;
	struct _DYOBJ_INST* dyptr;
	struct _DYOBJ_INST* vwptr;
};

// Type: struct _MISSION_PARMS;
struct _MISSION_PARMS{
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct _STOBJ_INST (forward reference);
struct _STOBJ_INST{
	struct _STOBJ_INST* next;
	void * __ptr32 mesh;
	long user1;
	long user2;
};

// Type: struct VRObjInfo;
struct VRObjInfo{
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: struct _DYOBJ_INST (forward reference);
struct _DYOBJ_INST{
	struct _DYOBJ_INST* next;
	struct _DYOBJ_INST* vnext;
	void * __ptr32 mesh;
	short flags;
	short user1;
	long radius;
	long height;
	struct Point3d loc;
	int32_t matrix[4][4];
};

// Type: struct VRFaceInfo;
struct VRFaceInfo{
	int32_t Face;
	int32_t Verts;
	int32_t Attribute;
	int32_t Plotter;
	struct VRBmpHdr* Bitmap;
	int32_t * VertList;
	struct MapVert* MapVList;
	struct MapVert* BarryPtr;
};

// Type: void * __ptr32;

// Type: uint32_t;



// Contribution: 1:0012a0c0-0012cd5c Module: 163, 16 byte alignment, code, execute, read, 
// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052b0c0
void $E8() {

	__asm        call   $E4;
	__asm        call   $E7;
	__asm        jmp    near ptr 0x0052B0D5;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052b0da
void $E4() {

	__asm        mov    PlaneClass::lsPlane<vftable>, 0x593220;
	__asm        jmp    near ptr 0x0052B0EF;

	__asm        jmp    near ptr 0x0052B0F4;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052b0f9
void $E7() {

	__asm        push   0x52B116;
	__asm        call   atexit;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0052B111;
}

// STATIC INITIALIZER:
// FUNCTION: COPTER_D 0x0052b116
void $E5() {

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x62B7B0];
	__asm        test   al, 1;
	__asm        jne    _T2d;

	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x62B7B0];
	__asm        or     al, 1;
	__asm        mov    ds:[0x62B7B0], al;
	__asm        mov    ecx, 0x62B6E8;
	__asm        call   PlaneClass::~PlaneClass;
_T2d:
	__asm        jmp    near ptr 0x0052B148;
}

// FUNCTION: COPTER_D 0x0052b14d
void PlaneClass::PlaneClass(long mapx, long mapy) {
	int32_t currentFlag;


	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593220;
// LINE 177:
	__asm        mov    currentFlag, 0;
	__asm        jmp    _T24;
_T21:
	__asm        inc    currentFlag;
_T24:
	__asm        cmp    currentFlag, 4;
	__asm        jge    _T3e;
// LINE 179:
	__asm        mov    eax, currentFlag;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 0;
// LINE 180:
	__asm        jmp    _T21;
// LINE 182:
_T3e:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 183:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 184:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 185:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0;
// LINE 186:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 187:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 188:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 189:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 196:
	__asm        cmp    PlaneClass::sPlaneModelSet, 0;
	__asm        jne    _Tb0;
// LINE 198:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0x12E;
// LINE 199:
	__asm        mov    PlaneClass::sPlaneModelSet, 1;
// LINE 201:
	__asm        jmp    _Tba;
// LINE 203:
_Tb0:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x54], 0x17C;
// LINE 205:
_Tba:
	__asm        jmp    near ptr 0x0052B20C;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x0052b216
void PlaneClass::~PlaneClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593220;
// LINE 229:
	__asm        jmp    near ptr 0x0052B230;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        je     _T4c;
// LINE 231:
	__asm        jmp    near ptr 0x0052B244;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T4c;
// LINE 233:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnlinkFromCell;
// LINE 245:
_T4c:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 0;
// LINE 246:
	__asm        jmp    near ptr 0x0052B26E;
}

// FUNCTION: COPTER_D 0x0052b273
class PlaneClass* PlaneClass::GetPlanePointer(long index) {
// LINE 266:
	__asm        cmp    index, 2;
	__asm        jl     _T17;
// LINE 267:
	__asm        xor    eax, eax;
	__asm        jmp    _T26;
// LINE 269:
_T17:
	__asm        mov    eax, index;
	__asm        mov    eax, planes[0][eax*4];
	__asm        jmp    _T26;
// LINE 270:
_T26:
}

// FUNCTION: COPTER_D 0x0052b29e
class PlaneClass* PlaneClass::CreateInstance(int32_t instanceID) {
// LINE 290:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        push   0xFFFFFFFF;
	__asm        push   0xFFFFFFFF;
	__asm        call   PlaneClass::CreateInstance;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0052B2B9;
// LINE 328:
}

// FUNCTION: COPTER_D 0x0052b2be
class PlaneClass* PlaneClass::CreateInstance(long mapx, long mapy, int32_t instanceID) {
	class PlaneClass* newplane;

// LINE 353:
	__asm        push   0xBC;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T3b;

	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, [ebp-8];
	__asm        call   PlaneClass::PlaneClass;
	__asm        mov    newplane, eax;
	__asm        jmp    _T42;
_T3b:
	__asm        mov    newplane, 0;
// LINE 357:
_T42:
	__asm        cmp    newplane, 0;
	__asm        je     _T94;
// LINE 361:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, newplane;
	__asm        call   PlaneClass::Initialize;
	__asm        test   eax, eax;
	__asm        je     _T6d;
// LINE 363:
	__asm        mov    eax, newplane;
	__asm        jmp    _T9b;
// LINE 365:
	__asm        jmp    _T94;
// LINE 369:
_T6d:
	__asm        mov    eax, newplane;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _T94;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T94;
// LINE 376:
_T94:
	__asm        xor    eax, eax;
	__asm        jmp    _T9b;
// LINE 377:
_T9b:
}

// FUNCTION: COPTER_D 0x0052b35e
int32_t PlaneClass::Initialize(int32_t instanceID) {
// LINE 453:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x20];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::InitializeInstance;
	__asm        jmp    near ptr 0x0052B389;
// LINE 454:
}

// FUNCTION: COPTER_D 0x0052b390
void PlaneClass::ResetAll() {
	int32_t currentPlaneIndex;

// LINE 498:
	__asm        mov    currentPlaneIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentPlaneIndex;
_T18:
	__asm        cmp    currentPlaneIndex, 2;
	__asm        jge    _T36;
// LINE 500:
	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    ecx, planes[0][eax*4];
	__asm        call   PlaneClass::Reset;
// LINE 501:
	__asm        jmp    _T15;
// LINE 503:
_T36:
	__asm        jmp    near ptr 0x0052B3CB;
}

// FUNCTION: COPTER_D 0x0052b3d0
void PlaneClass::ItterateAll() {
	int32_t currentPlaneIndex;

// LINE 548:
	__asm        mov    currentPlaneIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentPlaneIndex;
_T18:
	__asm        cmp    currentPlaneIndex, 2;
	__asm        jge    _T36;
// LINE 550:
	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    ecx, planes[0][eax*4];
	__asm        call   PlaneClass::Itterate;
// LINE 551:
	__asm        jmp    _T15;
// LINE 553:
_T36:
	__asm        jmp    near ptr 0x0052B40B;
}

// FUNCTION: COPTER_D 0x0052b410
int32_t PlaneClass::FindPlaneToCrash(long mission_id) {
	int32_t currentPlaneIndex;

// LINE 580:
	__asm        mov    currentPlaneIndex, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    currentPlaneIndex;
_T18:
	__asm        cmp    currentPlaneIndex, 2;
	__asm        jge    _Tb9;
// LINE 584:
	__asm        jmp    near ptr 0x0052B437;

	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    eax, planes[0][eax*4];
	__asm        movsx  eax, byte ptr [eax+6];
	__asm        test   eax, eax;
	__asm        jne    _Tb4;

	__asm        jmp    near ptr 0x0052B452;

	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    eax, planes[0][eax*4];
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        jne    _Tb4;

	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    eax, planes[0][eax*4];
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T74;

	__asm        jmp    _T88;
_T74:
	__asm        jmp    _Tb4;

	__asm        jmp    _T88;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _Tb4;
// LINE 585:
_T88:
	__asm        mov    eax, currentPlaneIndex;
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    [ebp-0xC], eax;
// LINE 586:
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    byte ptr [eax+6], 1;
	__asm        mov    eax, mission_id;
	__asm        mov    ecx, [ebp-0xC];
	__asm        mov    [ecx+0x3C], eax;
	__asm        jmp    near ptr 0x0052B4BA;
// LINE 587:
	__asm        mov    eax, 1;
	__asm        jmp    _Tc0;
// LINE 589:
_Tb4:
	__asm        jmp    _T15;
// LINE 591:
_Tb9:
	__asm        xor    eax, eax;
	__asm        jmp    _Tc0;
// LINE 592:
_Tc0:
}

// FUNCTION: COPTER_D 0x0052b4d5
void PlaneClass::Itterate() {
// LINE 614:
	__asm        jmp    near ptr 0x0052B4E6;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        je     _T136;
// LINE 617:
	__asm        jmp    near ptr 0x0052B4FA;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _Tb8;
// LINE 621:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T4e;

	__asm        jmp    _T7c;

	__asm        jmp    _T5d;
_T4e:
	__asm        jmp    _T5d;

	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        je     _T7c;
// LINE 623:
_T5d:
	__asm        cmp    G_apache_placed, 0;
	__asm        je     _T77;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0xA;
	__asm        jl     _T7c;
// LINE 624:
_T77:
	__asm        jmp    _T170;
// LINE 627:
_T7c:
	__asm        mov    eax, LoopTime;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x34], eax;
// LINE 628:
	__asm        jmp    near ptr 0x0052B561;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        jne    _Tb8;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x34];
	__asm        cmp    [eax+0x30], ecx;
	__asm        jge    _Tb8;
// LINE 631:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 635:
_Tb8:
	__asm        jmp    near ptr 0x0052B592;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T129;
// LINE 641:
// Block start:
	struct VRview position;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 645:
	__asm        jmp    near ptr 0x0052B5B1;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T129;
// LINE 648:
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        lea    ecx, position.loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 652:
	__asm        mov    esi, this;
	__asm        lea    edi, position.matrix[0][0];
	__asm        add    esi, 0x7C;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 656:
	__asm        push   3;
	__asm        lea    eax, position.loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
// LINE 661:
// Block end:
_T129:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::PlaneSoundDriver;
// LINE 663:
	__asm        jmp    _T16b;
// LINE 667:
_T136:
	__asm        jmp    near ptr 0x0052B610;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+4];
	__asm        test   eax, eax;
	__asm        jne    _T166;

	__asm        push   0x29B;
	__asm        push   0x5B76A0;
	__asm        push   0x5B76C4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T16b;
_T166:
	__asm        jmp    _T16b;
// LINE 669:
_T16b:
	__asm        jmp    _T170;
_T170:
}

// FUNCTION: COPTER_D 0x0052b64a
void PlaneClass::Reset() {
// LINE 689:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnPlacePlane;
// LINE 691:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 692:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 694:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 695:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x3C], 0xFFFFFFFF;
// LINE 696:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x40], 0xFFFFFFFF;
// LINE 697:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x44], 0xFFFFFFFF;
// LINE 698:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x20], 0xFFFFFFFF;
// LINE 699:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x24], 0xFFFFFFFF;
// LINE 700:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x28], 0xFFFFFFFF;
// LINE 701:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x2C], 0xFFFFFFFF;
// LINE 702:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 704:
	__asm        jmp    near ptr 0x0052B6CB;
}

// FUNCTION: COPTER_D 0x0052b6d0
void PlaneClass::PlaneSoundDriver() {
	int32_t vol_adj;
	struct Point3d vec;
	int32_t dist;

// LINE 750:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T21;

	__asm        jmp    _T35;
_T21:
	__asm        jmp    _T1d3;

	__asm        jmp    _T35;

	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        jne    _T1d3;
// LINE 753:
_T35:
	__asm        jmp    near ptr 0x0052B70A;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T88;
// LINE 755:
	__asm        push   0x1C;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T66;
// LINE 757:
	__asm        push   0x1C;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 759:
_T66:
	__asm        push   0x1B;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T83;
// LINE 761:
	__asm        push   0x1B;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 763:
_T83:
	__asm        jmp    _T2ce;
// LINE 767:
_T88:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x70];
	__asm        mov    vec.x, eax;
// LINE 768:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        mov    vec.y, eax;
// LINE 769:
	__asm        mov    eax, ViewState.world_pos.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    vec.z, eax;
// LINE 770:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 772:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    _T194;
// LINE 774:
	__asm        push   0x1C;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _Tf3;
// LINE 776:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0x1C;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 780:
_Tf3:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 783:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x1C;
	__asm        call   S3SoundAdjVol;
	__asm        add    esp, 8;
// LINE 785:
	__asm        jmp    near ptr 0x0052B7FB;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        je     _T172;
// LINE 787:
	__asm        push   0x1B;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T15f;
// LINE 789:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0x1B;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 791:
_T15f:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x1B;
	__asm        call   S3SoundAdjVol;
	__asm        add    esp, 8;
// LINE 793:
	__asm        jmp    _T18f;
// LINE 795:
_T172:
	__asm        push   0x1B;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T18f;
// LINE 797:
	__asm        push   0x1B;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 801:
_T18f:
	__asm        jmp    _T1ce;
// LINE 803:
_T194:
	__asm        push   0x1C;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T1b1;
// LINE 805:
	__asm        push   0x1C;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 807:
_T1b1:
	__asm        push   0x1B;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T1ce;
// LINE 809:
	__asm        push   0x1B;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 813:
_T1ce:
	__asm        jmp    _T2c9;
// LINE 816:
_T1d3:
	__asm        jmp    near ptr 0x0052B8A8;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T209;
// LINE 818:
	__asm        push   0x29;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T204;
// LINE 820:
	__asm        push   0x29;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 822:
_T204:
	__asm        jmp    _T2ce;
// LINE 826:
_T209:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x70];
	__asm        mov    vec.x, eax;
// LINE 827:
	__asm        mov    eax, ViewState.world_pos.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        mov    vec.y, eax;
// LINE 828:
	__asm        mov    eax, ViewState.world_pos.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    vec.z, eax;
// LINE 829:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 831:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    _T2ac;
// LINE 833:
	__asm        push   0x29;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T274;
// LINE 835:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        push   0x29;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 839:
_T274:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 842:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x29;
	__asm        call   S3SoundAdjVol;
	__asm        add    esp, 8;
// LINE 844:
	__asm        jmp    _T2c9;
// LINE 846:
_T2ac:
	__asm        push   0x29;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    _T2c9;
// LINE 848:
	__asm        push   0x29;
	__asm        call   S3DSStopPlay;
	__asm        add    esp, 4;
// LINE 852:
_T2c9:
	__asm        jmp    _T2ce;
_T2ce:
}

// FUNCTION: COPTER_D 0x0052b9a3
void PlaneClass::ItterateFSM() {
// LINE 872:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::IsPlaneOutOfCameraRange;
	__asm        test   eax, eax;
	__asm        je     _T3d;

	__asm        jmp    near ptr 0x0052B9C4;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        jne    _T3d;
// LINE 875:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnPlacePlane;
// LINE 876:
	__asm        jmp    _T14d;
// LINE 880:
_T3d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T57;

	__asm        jmp    _T6e;

	__asm        jmp    _T66;
_T57:
	__asm        jmp    _T66;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _T6e;
// LINE 882:
_T66:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::HandleUFOStuff;
// LINE 885:
_T6e:
	__asm        jmp    near ptr 0x0052BA16;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+6];
	__asm        test   eax, eax;
	__asm        je     _T8a;
// LINE 887:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::SetCrashWhenReady;
// LINE 892:
_T8a:
	__asm        jmp    near ptr 0x0052BA32;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        je     _Tab;
// LINE 894:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::MoveForward;
// LINE 895:
	__asm        jmp    _T14d;
// LINE 898:
_Tab:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    _T139;
// LINE 904:
_Tbe:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::MoveForward;
// LINE 907:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::HaveIReachedNextLoc;
	__asm        test   eax, eax;
	__asm        je     _T124;
// LINE 910:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnlinkFromCell;
// LINE 911:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 912:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 913:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::LinkToCell;
// LINE 914:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustNextAltitude;
// LINE 920:
_T124:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 922:
	__asm        jmp    _T148;
// LINE 931:
_T134:
	__asm        jmp    _T148;
_T139:
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Tbe;

	__asm        jmp    _T134;
// LINE 932:
_T148:
	__asm        jmp    _T14d;
_T14d:
}

// FUNCTION: COPTER_D 0x0052baf5
void PlaneClass::AdjustSpeed() {
	static const int32_t speedAdjustor = { /* <data@0x005b769c> */ };

// LINE 954:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], eax;
// LINE 956:
	__asm        cmp    speedAdjustor, 0;
	__asm        jne    _T2f;
// LINE 958:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 1;
// LINE 960:
_T2f:
	__asm        jmp    near ptr 0x0052BB29;
}

// FUNCTION: COPTER_D 0x0052bb2e
enum PlaneClass::StoppedReasons PlaneClass::IsPathClear() {
// LINE 1000:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0052BB41;
// LINE 1001:
}

// FUNCTION: COPTER_D 0x0052bb46
enum PlaneClass::StoppedReasons PlaneClass::CheckDynamicObjectsAt(const struct Point2d& __formal, const struct Point3d& collisionPoint) {
// LINE 1160:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0052BB59;
// LINE 1161:
}

// FUNCTION: COPTER_D 0x0052bb60
void PlaneClass::SetCrashWhenReady() {
	int32_t deltaY;
	int32_t deltaX;
	struct _CELL_INFO* cptr;
	int32_t z;
	struct _MISSION_PARMS mp;
	int32_t x;
	int32_t dist;

// LINE 1186:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T26;

	__asm        jmp    _T5d;

	__asm        jmp    _T35;
_T26:
	__asm        jmp    _T35;

	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T5d;
// LINE 1188:
_T35:
	__asm        mov    mp.id, 0xFFFFFFFF;
// LINE 1189:
	__asm        mov    mp.op, 0x27;
// LINE 1190:
	__asm        mov    mp.flags, 0;
// LINE 1191:
	__asm        mov    mp.i2num, 1;
// LINE 1192:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1196:
_T5d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x50], 0;
	__asm        jne    _Tc6;
// LINE 1198:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x20];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    deltaX, eax;
// LINE 1199:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    deltaY, eax;
// LINE 1200:
	__asm        mov    eax, deltaX;
	__asm        cmp    deltaY, eax;
	__asm        jge    _Tac;
// LINE 1201:
	__asm        mov    eax, deltaX;
	__asm        add    eax, eax;
	__asm        add    eax, deltaY;
	__asm        mov    dist, eax;
// LINE 1202:
	__asm        jmp    _Tb7;
// LINE 1203:
_Tac:
	__asm        mov    eax, deltaY;
	__asm        add    eax, eax;
	__asm        add    eax, deltaX;
	__asm        mov    dist, eax;
// LINE 1206:
_Tb7:
	__asm        cmp    dist, 0x14;
	__asm        jle    _Tc6;
// LINE 1207:
	__asm        jmp    _T248;
// LINE 1211:
_Tc6:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        shl    eax, 8;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x70];
	__asm        mov    x, eax;
// LINE 1212:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        shl    eax, 8;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        mov    z, eax;
// LINE 1214:
	__asm        mov    eax, x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x40], eax;
// LINE 1215:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, z;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x44], eax;
// LINE 1227:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x44];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x40];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    _T15c;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T161;
_T15c:
	__asm        jmp    _T161;
_T161:
	__asm        jmp    near ptr 0x0052BCC6;

	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    cptr, eax;
// LINE 1230:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x70];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 1231:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 1232:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 1234:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 1236:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x64];
	__asm        test   al, 1;
	__asm        je     _T1e8;
// LINE 1238:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 1241:
_T1e8:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+6], 0;
// LINE 1242:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 1;
// LINE 1244:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0;
// LINE 1247:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T215;

	__asm        jmp    _T229;
_T215:
	__asm        jmp    _T243;

	__asm        jmp    _T229;

	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    _T243;
// LINE 1249:
_T229:
	__asm        push   0;
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        push   eax;
	__asm        push   0x1D;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 1251:
	__asm        jmp    _T243;
// LINE 1258:
_T243:
	__asm        jmp    _T248;
_T248:
}

// FUNCTION: COPTER_D 0x0052bdad
int32_t PlaneClass::IsPlaneOutOfCameraRange() {
	int32_t deltaY;
	int32_t deltaX;

// LINE 1281:
	__asm        mov    eax, CameraCell.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x20];
	__asm        mov    deltaX, eax;
// LINE 1282:
	__asm        mov    eax, CameraCell.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    deltaY, eax;
// LINE 1287:
_T28:
	__asm        cmp    deltaX, 0x80;
	__asm        jle    _T41;
// LINE 1289:
	__asm        sub    deltaX, 0x100;
// LINE 1290:
	__asm        jmp    _T28;
// LINE 1291:
_T41:
	__asm        cmp    deltaX, 0xFFFFFF80;
	__asm        jge    _T57;
// LINE 1293:
	__asm        add    deltaX, 0x100;
// LINE 1294:
	__asm        jmp    _T41;
// LINE 1296:
_T57:
	__asm        cmp    deltaY, 0x80;
	__asm        jle    _T70;
// LINE 1298:
	__asm        sub    deltaY, 0x100;
// LINE 1299:
	__asm        jmp    _T57;
// LINE 1300:
_T70:
	__asm        cmp    deltaY, 0xFFFFFF80;
	__asm        jge    _T86;
// LINE 1302:
	__asm        add    deltaY, 0x100;
// LINE 1303:
	__asm        jmp    _T70;
// LINE 1305:
_T86:
	__asm        cmp    deltaX, 0;
	__asm        jge    _T98;
// LINE 1307:
	__asm        mov    eax, deltaX;
	__asm        neg    eax;
	__asm        mov    deltaX, eax;
// LINE 1309:
_T98:
	__asm        cmp    deltaY, 0;
	__asm        jge    _Taa;
// LINE 1311:
	__asm        mov    eax, deltaY;
	__asm        neg    eax;
	__asm        mov    deltaY, eax;
// LINE 1315:
_Taa:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        cmp    eax, deltaX;
	__asm        jl     _Td2;

	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        add    eax, 4;
	__asm        cmp    eax, deltaY;
	__asm        jge    _Te1;
// LINE 1317:
_Td2:
	__asm        mov    eax, 1;
	__asm        jmp    _Te8;
// LINE 1319:
	__asm        jmp    _Te8;
// LINE 1321:
_Te1:
	__asm        xor    eax, eax;
	__asm        jmp    _Te8;
// LINE 1323:
_Te8:
}

// FUNCTION: COPTER_D 0x0052be9a
void PlaneClass::SlowDown() {
// LINE 1342:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x18], 0x20000;
// LINE 1343:
	__asm        jmp    near ptr 0x0052BEB5;
}

// FUNCTION: COPTER_D 0x0052beba
void PlaneClass::Stop() {
// LINE 1363:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 1364:
	__asm        jmp    near ptr 0x0052BED5;
}

// FUNCTION: COPTER_D 0x0052beda
void PlaneClass::MoveForward() {
	struct _CELL_INFO* lcptr;
	struct _CELL_INFO* cptr;
	struct Point2d newpos;
	struct Point3d newloc;
	int32_t dist;

// LINE 1390:
	__asm        mov    eax, LoopTime;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    dist, eax;
// LINE 1394:
	__asm        jmp    near ptr 0x0052BF03;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+7];
	__asm        test   eax, eax;
	__asm        jne    _Ta0;
// LINE 1396:
	__asm        mov    eax, this;
	__asm        mov    ecx, dist;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jge    _T50;
// LINE 1397:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    dist, eax;
// LINE 1398:
_T50:
	__asm        xor    eax, eax;
	__asm        sub    eax, dist;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x14], eax;
// LINE 1403:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x70], eax;
// LINE 1405:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x78], eax;
// LINE 1406:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x38];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x74], eax;
// LINE 1408:
	__asm        jmp    _T2bf;
// LINE 1413:
_Ta0:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x70];
	__asm        add    ecx, eax;
	__asm        mov    newloc.x, ecx;
// LINE 1414:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        add    ecx, eax;
	__asm        mov    newloc.y, ecx;
// LINE 1415:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        add    ecx, eax;
	__asm        mov    newloc.z, ecx;
// LINE 1417:
	__asm        mov    eax, newloc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    newpos.x, eax;
// LINE 1418:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, newloc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    newpos.y, eax;
// LINE 1420:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x24], eax;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    _T160;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T165;
_T160:
	__asm        jmp    _T165;
_T165:
	__asm        jmp    near ptr 0x0052C044;

	__asm        mov    eax, [ebp-0x24];
	__asm        mov    lcptr, eax;
// LINE 1421:
	__asm        mov    eax, newpos.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, newpos.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T1b4;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T1b9;
_T1b4:
	__asm        jmp    _T1b9;
_T1b9:
	__asm        jmp    near ptr 0x0052C098;

	__asm        mov    eax, [ebp-0x28];
	__asm        mov    cptr, eax;
// LINE 1424:
	__asm        xor    eax, eax;
	__asm        sub    eax, G_AvLoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x48], eax;
// LINE 1427:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jge    _T1fd;
// LINE 1429:
	__asm        push   1;
	__asm        lea    eax, newloc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionSmokeStart;
	__asm        add    esp, 0xC;
// LINE 1430:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0x3333;
// LINE 1434:
_T1fd:
	__asm        mov    eax, lcptr;
	__asm        push   eax;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::PlaneCollisionCheck;
// LINE 1435:
	__asm        jmp    near ptr 0x0052C0EC;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T226;
// LINE 1437:
	__asm        jmp    _T2c4;
// LINE 1441:
_T226:
	__asm        mov    eax, lcptr;
	__asm        cmp    cptr, eax;
	__asm        je     _T25b;
// LINE 1443:
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::PlaneCollisionCheck;
// LINE 1444:
	__asm        jmp    near ptr 0x0052C121;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        jne    _T25b;
// LINE 1445:
	__asm        jmp    _T2c4;
// LINE 1456:
_T25b:
	__asm        mov    eax, lcptr;
	__asm        cmp    cptr, eax;
	__asm        je     _T2a6;
// LINE 1458:
	__asm        jmp    near ptr 0x0052C146;

	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnlinkFromCell;
// LINE 1459:
	__asm        mov    eax, newpos.x;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
	__asm        mov    eax, newpos.y;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x0052C16C;
// LINE 1460:
	__asm        jmp    near ptr 0x0052C171;

	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::LinkToCell;
// LINE 1463:
_T2a6:
	__asm        lea    eax, newloc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x70;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1465:
_T2bf:
	__asm        jmp    _T2c4;
_T2c4:
}

// FUNCTION: COPTER_D 0x0052c1a3
int32_t PlaneClass::PlaneCollisionCheck(int32_t dist, struct _CELL_INFO* cptr) {
	long new_mission_id;
	long num_debris;
	int32_t newdist;
	struct Point3d oloc;
	long j;
	struct _MISSION_PARMS mp;
	struct Point3d loc;
	struct Point2d celloc;
	struct Point3d center;
	struct Point3d vec;
	int32_t refmat[4][4];
	struct _STOBJ_INST* stobj;
	struct Point3d cloc;
	struct Point3d sloc;
	struct VRObjInfo oinfo;
	struct Point3d* norm;
	int32_t speed;

// LINE 1490:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    cloc.x, eax;
// LINE 1491:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    cloc.y, eax;
// LINE 1492:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    cloc.z, eax;
// LINE 1493:
	__asm        mov    eax, cloc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 1494:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, cloc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 1497:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    stobj, eax;
// LINE 1498:
_T64:
	__asm        cmp    stobj, 0;
	__asm        je     _T5e3;
// LINE 1502:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 1503:
	__asm        lea    eax, center.x;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D88C3;
	__asm        add    esp, 8;
// LINE 1505:
	__asm        lea    eax, cloc.x;
	__asm        lea    ecx, oloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1506:
	__asm        mov    eax, center.x;
	__asm        add    oloc.x, eax;
// LINE 1507:
	__asm        mov    eax, center.y;
	__asm        add    oloc.y, eax;
// LINE 1508:
	__asm        mov    eax, center.z;
	__asm        add    oloc.z, eax;
// LINE 1514:
	__asm        mov    eax, oinfo.Radius;
	__asm        push   eax;
	__asm        lea    eax, oloc.x;
	__asm        push   eax;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        call   S3MissileSphereHit;
	__asm        add    esp, 0x14;
	__asm        mov    newdist, eax;
// LINE 1518:
	__asm        cmp    newdist, 0;
	__asm        jle    _T147;
// LINE 1525:
	__asm        lea    eax, norm;
	__asm        push   eax;
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        lea    eax, cloc.x;
	__asm        push   eax;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        call   VRStObjPolyHit;
	__asm        add    esp, 0x18;
	__asm        mov    newdist, eax;
// LINE 1528:
_T147:
	__asm        cmp    newdist, 0;
	__asm        jle    _T5d6;
// LINE 1532:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x70];
	__asm        add    ecx, eax;
	__asm        mov    loc.x, ecx;
// LINE 1533:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        add    ecx, eax;
	__asm        mov    loc.y, ecx;
// LINE 1534:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        add    ecx, eax;
	__asm        mov    loc.z, ecx;
// LINE 1535:
	__asm        lea    eax, loc.x;
	__asm        lea    ecx, sloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1536:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.x;
	__asm        neg    eax;
	__asm        sub    loc.x, eax;
// LINE 1537:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.y;
	__asm        neg    eax;
	__asm        sub    loc.y, eax;
// LINE 1538:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.z;
	__asm        neg    eax;
	__asm        sub    loc.z, eax;
// LINE 1540:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionStart;
	__asm        add    esp, 0x18;
// LINE 1542:
	__asm        push   0;
	__asm        lea    eax, sloc.x;
	__asm        push   eax;
	__asm        push   0x1A;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 1545:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnPlacePlane;
// LINE 1546:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 1549:
	__asm        mov    new_mission_id, 0xFFFFFFFF;
// LINE 1551:
	__asm        mov    eax, celloc.y;
	__asm        push   eax;
	__asm        mov    eax, celloc.x;
	__asm        push   eax;
	__asm        call   S3FireCanCellBurn;
	__asm        add    esp, 8;
	__asm        cmp    eax, 1;
	__asm        jne    _T2e4;

	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax];
	__asm        test   al, 0x20;
	__asm        jne    _T2e4;
// LINE 1554:
	__asm        call   S3FireGetCount;
	__asm        test   eax, eax;
	__asm        jne    _T2cb;
// LINE 1556:
	__asm        push   1;
	__asm        mov    eax, celloc.y;
	__asm        push   eax;
	__asm        mov    eax, celloc.x;
	__asm        push   eax;
	__asm        call   S3MissionStart;
	__asm        add    esp, 0xC;
	__asm        mov    new_mission_id, eax;
// LINE 1558:
	__asm        jmp    _T2e4;
// LINE 1560:
_T2cb:
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3FireAddToNearest;
	__asm        add    esp, 8;
	__asm        mov    new_mission_id, eax;
// LINE 1564:
_T2e4:
	__asm        cmp    new_mission_id, 0xFFFFFFFF;
	__asm        je     _T449;
// LINE 1568:
	__asm        mov    mp.op, 0x1D;
// LINE 1569:
	__asm        mov    mp.i2num, 4;
// LINE 1570:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    mp.id, eax;
// LINE 1571:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1572:
	__asm        mov    eax, new_mission_id;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x3C], eax;
// LINE 1574:
	__asm        call   rand;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+3];
	__asm        mov    num_debris, eax;
// LINE 1575:
	__asm        mov    j, 0;
	__asm        jmp    _T362;
_T35c:
	__asm        inc    j;
_T362:
	__asm        mov    eax, num_debris;
	__asm        cmp    j, eax;
	__asm        jge    _T444;
// LINE 1577:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1578:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1579:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1580:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1581:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1592:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        lea    eax, sloc.x;
	__asm        push   eax;
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1593:
	__asm        jmp    _T35c;
// LINE 1595:
_T444:
	__asm        jmp    _T5cc;
// LINE 1598:
_T449:
	__asm        call   rand;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+3];
	__asm        mov    num_debris, eax;
// LINE 1599:
	__asm        mov    j, 0;
	__asm        jmp    _T479;
_T473:
	__asm        inc    j;
_T479:
	__asm        mov    eax, num_debris;
	__asm        cmp    j, eax;
	__asm        jge    _T55b;
// LINE 1601:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1602:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1603:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1604:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1605:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1616:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        lea    eax, sloc.x;
	__asm        push   eax;
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1617:
	__asm        jmp    _T473;
// LINE 1621:
_T55b:
	__asm        mov    mp.op, 0x1D;
// LINE 1622:
	__asm        mov    mp.i2num, 0;
// LINE 1623:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    mp.id, eax;
// LINE 1624:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1626:
	__asm        mov    mp.op, 0;
// LINE 1627:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    mp.id, eax;
// LINE 1628:
	__asm        mov    eax, celloc.x;
	__asm        mov    ecx, celloc.y;
	__asm        lea    edx, mp.maploc.x;
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 1629:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1635:
_T5cc:
	__asm        mov    eax, 1;
	__asm        jmp    _T87f;
// LINE 1640:
_T5d6:
	__asm        mov    eax, stobj;
	__asm        mov    eax, [eax];
	__asm        mov    stobj, eax;
// LINE 1641:
	__asm        jmp    _T64;
// LINE 1647:
_T5e3:
	__asm        lea    eax, cloc.x;
	__asm        push   eax;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        call   S3MissileGroundHit;
	__asm        add    esp, 0x10;
	__asm        mov    newdist, eax;
// LINE 1648:
	__asm        cmp    newdist, 0;
	__asm        jle    _T878;
// LINE 1652:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x70];
	__asm        add    ecx, eax;
	__asm        mov    loc.x, ecx;
// LINE 1653:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x74];
	__asm        add    ecx, eax;
	__asm        mov    loc.y, ecx;
// LINE 1654:
	__asm        mov    eax, newdist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x78];
	__asm        add    ecx, eax;
	__asm        mov    loc.z, ecx;
// LINE 1655:
	__asm        lea    eax, loc.x;
	__asm        lea    ecx, sloc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1656:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.x;
	__asm        neg    eax;
	__asm        sub    loc.x, eax;
// LINE 1657:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.y;
	__asm        neg    eax;
	__asm        sub    loc.y, eax;
// LINE 1658:
	__asm        xor    eax, eax;
	__asm        sub    eax, cloc.z;
	__asm        neg    eax;
	__asm        sub    loc.z, eax;
// LINE 1662:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        push   4;
	__asm        mov    eax, loc.z;
	__asm        push   eax;
	__asm        mov    eax, loc.y;
	__asm        push   eax;
	__asm        mov    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, cptr;
	__asm        push   eax;
	__asm        call   S3ExplosionStart;
	__asm        add    esp, 0x18;
// LINE 1664:
	__asm        push   0;
	__asm        lea    eax, sloc.x;
	__asm        push   eax;
	__asm        push   0x1A;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
// LINE 1667:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnPlacePlane;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+7], 0;
// LINE 1710:
	__asm        call   rand;
	__asm        mov    ecx, cptr;
	__asm        movsx  ecx, word ptr [ecx+8];
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+3];
	__asm        mov    num_debris, eax;
// LINE 1711:
	__asm        mov    j, 0;
	__asm        jmp    _T75a;
_T754:
	__asm        inc    j;
_T75a:
	__asm        mov    eax, num_debris;
	__asm        cmp    j, eax;
	__asm        jge    _T83c;
// LINE 1713:
	__asm        call   rand;
	__asm        mov    ecx, 0x1E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        add    eax, 0x190000;
	__asm        mov    speed, eax;
// LINE 1714:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1715:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1716:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        call   rand;
	__asm        mov    ecx, 0x78;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x2EE];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 1717:
	__asm        lea    eax, refmat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1728:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        push   eax;
	__asm        mov    eax, speed;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        push   8;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        lea    eax, sloc.x;
	__asm        push   eax;
	__asm        lea    eax, celloc.x;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 1729:
	__asm        jmp    _T754;
// LINE 1733:
_T83c:
	__asm        mov    mp.op, 0x1D;
// LINE 1734:
	__asm        mov    mp.i2num, 0;
// LINE 1735:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x3C];
	__asm        mov    mp.id, eax;
// LINE 1736:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 1740:
	__asm        mov    eax, 1;
	__asm        jmp    _T87f;
// LINE 1743:
_T878:
	__asm        xor    eax, eax;
	__asm        jmp    _T87f;
// LINE 1744:
_T87f:
}

// FUNCTION: COPTER_D 0x0052ca29
int32_t PlaneClass::HaveIReachedNextLoc() {
// LINE 1765:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jg     _T28;
// LINE 1767:
	__asm        mov    eax, 1;
	__asm        jmp    _T2f;
// LINE 1769:
	__asm        jmp    _T2f;
// LINE 1771:
_T28:
	__asm        xor    eax, eax;
	__asm        jmp    _T2f;
// LINE 1773:
_T2f:
}

// FUNCTION: COPTER_D 0x0052ca5d
int32_t PlaneClass::AmIInANewCell() {
// LINE 1797:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 1798:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 1802:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        cmp    [eax+0x28], ecx;
	__asm        jne    _T58;

	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        cmp    [eax+0x2C], ecx;
	__asm        je     _T62;
// LINE 1804:
_T58:
	__asm        mov    eax, 1;
	__asm        jmp    _T69;
// LINE 1807:
_T62:
	__asm        xor    eax, eax;
	__asm        jmp    _T69;
// LINE 1808:
_T69:
}

// FUNCTION: COPTER_D 0x0052cacb
void PlaneClass::UnlinkFromCell(const struct Point2d& point) {
	struct _CELL_INFO* cellPointer;

// LINE 1830:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T55;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5a;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        jmp    near ptr 0x0052CB2A;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    cellPointer, eax;
// LINE 1832:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T8b;

	__asm        push   0x728;
	__asm        push   0x5B76DC;
	__asm        push   0x5B7700;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T90;
_T8b:
	__asm        jmp    _T90;
// LINE 1834:
_T90:
	__asm        cmp    cellPointer, 0;
	__asm        je     _T10a;
// LINE 1836:
// Block start:
	struct _DYOBJ_INST** dyptrptr;
	__asm        mov    eax, cellPointer;
	__asm        add    eax, 0x10;
	__asm        mov    dyptrptr, eax;
// LINE 1838:
_Ta3:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     _Tdd;
// LINE 1842:
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        mov    ecx, dyptrptr;
	__asm        cmp    eax, [ecx];
	__asm        jne    _Td0;
// LINE 1846:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x58];
	__asm        mov    ecx, dyptrptr;
	__asm        mov    [ecx], eax;
// LINE 1848:
	__asm        jmp    _T10f;
// LINE 1851:
_Td0:
	__asm        mov    eax, dyptrptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptrptr, eax;
// LINE 1852:
	__asm        jmp    _Ta3;
// LINE 1854:
_Tdd:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    _T105;

	__asm        push   0x73E;
	__asm        push   0x5B770C;
	__asm        push   0x5B7730;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T10a;
_T105:
	__asm        jmp    _T10a;
// LINE 1856:
// Block end:
_T10a:
	__asm        jmp    _T10f;
_T10f:
}

// FUNCTION: COPTER_D 0x0052cbe1
void PlaneClass::LinkToCell(const struct Point2d& point) {
	struct _CELL_INFO* cellPointer;

// LINE 1878:
	__asm        mov    eax, point;
	__asm        mov    eax, [eax+4];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, point;
	__asm        mov    ecx, [ecx];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    _T55;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5a;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        jmp    near ptr 0x0052CC40;

	__asm        mov    eax, [ebp-8];
	__asm        mov    cellPointer, eax;
// LINE 1880:
	__asm        mov    eax, cellPointer;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x58;
	__asm        cmp    [eax+0x10], ecx;
	__asm        jne    _T93;

	__asm        push   0x758;
	__asm        push   0x5B773C;
	__asm        push   0x5B7760;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T98;
_T93:
	__asm        jmp    _T98;
// LINE 1882:
_T98:
	__asm        mov    eax, cellPointer;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x58], eax;
// LINE 1883:
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        mov    ecx, cellPointer;
	__asm        mov    [ecx+0x10], eax;
// LINE 1884:
	__asm        jmp    near ptr 0x0052CC96;
}

// FUNCTION: COPTER_D 0x0052cc9d
void PlaneClass::AdjustCurrentPosition() {
	struct _CELL_INFO* cellPointer;
	int32_t alt;

// LINE 1905:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x20];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        jne    _T56;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5b;
_T56:
	__asm        jmp    _T5b;
_T5b:
	__asm        jmp    near ptr 0x0052CCFD;

	__asm        mov    eax, [ebp-0xC];
	__asm        mov    cellPointer, eax;
// LINE 1907:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T8c;

	__asm        push   0x773;
	__asm        push   0x5B7780;
	__asm        push   0x5B77A4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T91;
_T8c:
	__asm        jmp    _T91;
// LINE 1911:
_T91:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x70], eax;
// LINE 1912:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x74], eax;
// LINE 1913:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x78], eax;
// LINE 1916:
	__asm        mov    eax, cellPointer;
	__asm        push   eax;
	__asm        call   S3HeliHighestBuildAlt;
	__asm        add    esp, 4;
	__asm        mov    alt, eax;
// LINE 1917:
	__asm        cmp    alt, 0x15E0000;
	__asm        jge    _Tec;
// LINE 1918:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x74], 0x17C0000;
// LINE 1919:
	__asm        jmp    _Tfa;
// LINE 1920:
_Tec:
	__asm        mov    eax, alt;
	__asm        add    eax, 0x1E0000;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x74], eax;
// LINE 1923:
_Tfa:
	__asm        jmp    near ptr 0x0052CD9C;
}

// FUNCTION: COPTER_D 0x0052cda1
void PlaneClass::AdjustNextPosition() {
	struct _CELL_INFO* cellPointer;
	struct Point3d nextFineLocation;
	int32_t mat[4][4];

// LINE 1944:
	__asm        mov    eax, CameraCell.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, CameraCell.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    _T55;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T5a;
_T55:
	__asm        jmp    _T5a;
_T5a:
	__asm        jmp    near ptr 0x0052CE00;

	__asm        mov    eax, [ebp-0x54];
	__asm        mov    cellPointer, eax;
// LINE 1948:
	__asm        cmp    cellPointer, 0;
	__asm        jne    _T8b;

	__asm        push   0x79C;
	__asm        push   0x5B77B0;
	__asm        push   0x5B77D4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T90;
_T8b:
	__asm        jmp    _T90;
// LINE 1951:
_T90:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x70];
	__asm        mov    nextFineLocation.x, eax;
// LINE 1952:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x78];
	__asm        mov    nextFineLocation.z, eax;
// LINE 1953:
	__asm        mov    nextFineLocation.y, 0;
// LINE 1956:
	__asm        lea    eax, nextFineLocation.x;
	__asm        push   eax;
	__asm        call   MTNormalize;
	__asm        add    esp, 4;
// LINE 1959:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 1960:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        mov    ebx, 0x12C0000;
	__asm        call   rand;
	__asm        mov    ecx, 0x258;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        sub    ebx, eax;
	__asm        push   ebx;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 1961:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        lea    eax, nextFineLocation.x;
	__asm        push   eax;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 1963:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x64];
	__asm        test   al, 1;
	__asm        je     _T13a;
// LINE 1965:
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        call   MTCreateDOF4x4;
	__asm        add    esp, 8;
// LINE 1967:
_T13a:
	__asm        jmp    near ptr 0x0052CEE0;
}

// FUNCTION: COPTER_D 0x0052cee5
void PlaneClass::AdjustNextAltitude() {
	struct _CELL_INFO* cellPointer;
	struct Point2d nextcell;
	int32_t alt;
	int32_t altdiff;
	struct Point3d loc;
	int32_t mat[4][4];

// LINE 1995:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T26;

	__asm        jmp    _Tb2;

	__asm        jmp    _T35;
_T26:
	__asm        jmp    _T35;

	__asm        cmp    dword ptr [ebp-0x64], 0;
	__asm        je     _Tb2;
// LINE 1997:
_T35:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 7;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    _Tb2;
// LINE 1999:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2000:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        mov    ebx, 0x320;
	__asm        call   rand;
	__asm        mov    ecx, 0x640;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        sub    ebx, edx;
	__asm        shl    ebx, 0x10;
	__asm        push   ebx;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 2001:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 8;
	__asm        push   eax;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 2002:
	__asm        lea    eax, loc.x;
	__asm        mov    ecx, this;
	__asm        add    ecx, 8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2008:
_Tb2:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 2009:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x78];
	__asm        mov    loc.z, eax;
// LINE 2011:
	__asm        mov    eax, loc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    nextcell.x, eax;
// LINE 2012:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, loc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    nextcell.y, eax;
// LINE 2014:
	__asm        mov    eax, nextcell.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, nextcell.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, G_omap[0][0][ecx+eax*4];
	__asm        mov    [ebp-0x68], eax;
	__asm        cmp    dword ptr [ebp-0x68], 0;
	__asm        jne    _T138;

	__asm        push   0xD0;
	__asm        push   0x5B780C;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13d;
_T138:
	__asm        jmp    _T13d;
_T13d:
	__asm        jmp    near ptr 0x0052D027;

	__asm        mov    eax, [ebp-0x68];
	__asm        mov    cellPointer, eax;
// LINE 2016:
	__asm        mov    eax, cellPointer;
	__asm        push   eax;
	__asm        call   S3HeliHighestBuildAlt;
	__asm        add    esp, 4;
	__asm        mov    alt, eax;
// LINE 2017:
	__asm        cmp    alt, 0x15E0000;
	__asm        jge    _T16b;
// LINE 2018:
	__asm        mov    alt, 0x15E0000;
// LINE 2023:
_T16b:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        add    eax, alt;
	__asm        add    eax, 0x1E0000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x74];
	__asm        mov    altdiff, eax;
// LINE 2024:
	__asm        mov    eax, altdiff;
	__asm        sar    eax, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x38], eax;
// LINE 2029:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0x200000;
// LINE 2034:
	__asm        jmp    near ptr 0x0052D086;
}

// FUNCTION: COPTER_D 0x0052d08b
void PlaneClass::BeamToWithinCameraRange() {
	int32_t foundcell;
	int32_t stop_now;
	int32_t curr_dir;
	int32_t currentFlag;
	int32_t i;
	int32_t y;
	int32_t x;
	struct Point2d beampoint;
	struct Point3d vec;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 2057:
	__asm        mov    curr_dist, 0;
// LINE 2058:
	__asm        mov    curr_dir, 0xFFFFFFFF;
// LINE 2060:
	__asm        mov    stop_now, 0;
// LINE 2061:
	__asm        mov    spiral_dist, 7;
// LINE 2063:
	__asm        mov    foundcell, 0;
// LINE 2067:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, vec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2069:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0;
// LINE 2075:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 7;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T14d;
// LINE 2079:
_T70:
	__asm        mov    eax, vec.z;
	__asm        mov    vec.y, eax;
// LINE 2080:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 2081:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 2083:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 2084:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 2085:
	__asm        jmp    _T170;
// LINE 2088:
_Tad:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.y, eax;
// LINE 2089:
	__asm        mov    eax, vec.x;
	__asm        mov    vec.z, eax;
// LINE 2090:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 2092:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 2093:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 2094:
	__asm        jmp    _T170;
// LINE 2097:
_Tea:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.x, eax;
// LINE 2098:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 2100:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 2101:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, G_ViewSize;
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 2102:
	__asm        jmp    _T170;
// LINE 2106:
_T123:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 2107:
	__asm        mov    eax, G_ViewSize;
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 2108:
	__asm        jmp    _T170;
// LINE 2109:
	__asm        jmp    _T170;
_T14d:
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        je     _T70;

	__asm        cmp    dword ptr [ebp-0x4C], 1;
	__asm        je     _Tad;

	__asm        cmp    dword ptr [ebp-0x4C], 2;
	__asm        je     _Tea;

	__asm        jmp    _T123;
// LINE 2111:
_T170:
	__asm        shl    vec.x, 6;
// LINE 2112:
	__asm        shl    vec.z, 6;
// LINE 2114:
	__asm        mov    eax, ViewState.world_pos.x;
	__asm        add    eax, vec.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, eax;
// LINE 2115:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, ViewState.world_pos.z;
	__asm        add    ecx, vec.z;
	__asm        sub    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    y, eax;
// LINE 2118:
	__asm        cmp    x, 3;
	__asm        jl     _T1c9;

	__asm        cmp    x, 0x7D;
	__asm        jg     _T1c9;

	__asm        cmp    y, 3;
	__asm        jl     _T1c9;

	__asm        cmp    y, 0x7D;
	__asm        jle    _T1ce;
// LINE 2119:
_T1c9:
	__asm        jmp    _T381;
// LINE 2126:
_T1ce:
	__asm        inc    curr_dir;
// LINE 2127:
	__asm        mov    eax, curr_dir;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    _T23a;
// LINE 2131:
	__asm        mov    curr_dir, 0;
// LINE 2132:
	__asm        inc    curr_dist;
// LINE 2133:
	__asm        mov    xdir, 0;
// LINE 2134:
	__asm        mov    ydir, 0xFFFFFFFF;
// LINE 2135:
	__asm        jmp    _T262;
// LINE 2137:
	__asm        mov    xdir, 1;
// LINE 2138:
	__asm        mov    ydir, 0;
// LINE 2139:
	__asm        jmp    _T262;
// LINE 2141:
	__asm        inc    curr_dist;
// LINE 2142:
	__asm        mov    xdir, 0;
// LINE 2143:
	__asm        mov    ydir, 1;
// LINE 2144:
	__asm        jmp    _T262;
// LINE 2146:
	__asm        mov    xdir, 0xFFFFFFFF;
// LINE 2147:
	__asm        mov    ydir, 0;
// LINE 2148:
	__asm        jmp    _T262;
// LINE 2149:
	__asm        jmp    _T262;
_T23a:
	__asm        cmp    dword ptr [ebp-0x50], 4;
	__asm        ja     _T262;

	__asm        mov    eax, [ebp-0x50];
	__asm        jmp    SwitchPointers5427929[0][eax*4];
// Switch pointers
// LINE 2153:
_T262:
	__asm        mov    eax, curr_dist;
	__asm        cmp    spiral_dist, eax;
	__asm        jne    _T278;
// LINE 2155:
	__asm        dec    curr_dist;
// LINE 2156:
	__asm        mov    stop_now, 1;
// LINE 2160:
_T278:
	__asm        mov    i, 0;
	__asm        jmp    _T287;
_T284:
	__asm        inc    i;
_T287:
	__asm        mov    eax, i;
	__asm        cmp    curr_dist, eax;
	__asm        jle    _T2ae;
// LINE 2162:
	__asm        mov    eax, x;
	__asm        mov    beampoint.x, eax;
// LINE 2163:
	__asm        mov    eax, y;
	__asm        mov    beampoint.y, eax;
// LINE 2164:
	__asm        jmp    _T37c;

	__asm        jmp    _T2c7;
// LINE 2167:
	__asm        jmp    _T284;
// LINE 2169:
_T2ae:
	__asm        cmp    stop_now, 1;
	__asm        jne    _T2bd;
// LINE 2171:
	__asm        jmp    _T2c2;
// LINE 2173:
_T2bd:
	__asm        jmp    _T1ce;
// LINE 2176:
_T2c2:
	__asm        jmp    _T381;
// LINE 2182:
foundCell:
_T2c7:
	__asm        mov    currentFlag, 3;
	__asm        jmp    _T2d6;
_T2d3:
	__asm        inc    currentFlag;
_T2d6:
	__asm        cmp    currentFlag, 4;
	__asm        jge    _T2f0;
// LINE 2184:
	__asm        mov    eax, currentFlag;
	__asm        mov    ecx, this;
	__asm        mov    byte ptr [eax+ecx+4], 0;
// LINE 2185:
	__asm        jmp    _T2d3;
// LINE 2187:
_T2f0:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 0;
// LINE 2190:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 1;
// LINE 2195:
	__asm        mov    eax, beampoint.x;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
	__asm        mov    eax, beampoint.y;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
	__asm        jmp    near ptr 0x0052D3A3;
// LINE 2199:
	__asm        jmp    near ptr 0x0052D3A8;

	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::LinkToCell;
// LINE 2203:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustCurrentPosition;
// LINE 2204:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustNextPosition;
// LINE 2205:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustNextAltitude;
// LINE 2208:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T359;

	__asm        jmp    _T36d;
_T359:
	__asm        jmp    _T377;

	__asm        jmp    _T36d;

	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    _T377;
// LINE 2210:
_T36d:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 2213:
_T377:
	__asm        jmp    _T381;
_T37c:
	__asm        jmp    _T2c7;
_T381:
}

// FUNCTION: COPTER_D 0x0052d411
void PlaneClass::UnPlacePlane() {
// LINE 2236:
	__asm        jmp    near ptr 0x0052D422;

	__asm        mov    eax, this;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T3b;
// LINE 2238:
	__asm        jmp    near ptr 0x0052D436;

	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::UnlinkFromCell;
// LINE 2239:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 0;
// LINE 2241:
_T3b:
	__asm        jmp    near ptr 0x0052D451;
}

// FUNCTION: COPTER_D 0x0052d456
int32_t PlaneClass::InitializeInstance(long mapx, long mapy, int32_t instanceID) {
	int32_t object;
	struct VRObjInfo objectInfo;

// LINE 2272:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x60], 0;
// LINE 2294:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        push   eax;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 2296:
	__asm        cmp    object, 0;
	__asm        jne    _T5a;
// LINE 2300:
	__asm        push   0x8FC;
	__asm        push   0x5B77E0;
	__asm        push   0x5B7804;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T53;

	__asm        jmp    _T53;
// LINE 2302:
_T53:
	__asm        xor    eax, eax;
	__asm        jmp    _T1bb;
// LINE 2305:
_T5a:
	__asm        mov    eax, object;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x60], eax;
// LINE 2363:
	__asm        mov    eax, instanceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x66], ax;
// LINE 2364:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x64], 0x101;
// LINE 2365:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 2367:
	__asm        lea    eax, objectInfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 2368:
	__asm        mov    eax, objectInfo.Radius;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x68], eax;
// LINE 2389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x34], 0x3C0000;
// LINE 2390:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 2391:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 2392:
	__asm        mov    eax, mapx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 2393:
	__asm        mov    eax, mapy;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 2394:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x1C], 0x780000;
// LINE 2395:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x4C], 1;
// LINE 2396:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x50], 0;
// LINE 2397:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0xB40000;
// LINE 2401:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x54];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    _T125;
// LINE 2404:
_T102:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0x3C0000;
// LINE 2405:
	__asm        jmp    _T144;
// LINE 2408:
_T111:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x30], 0x3C0000;
// LINE 2409:
	__asm        jmp    _T144;
// LINE 2410:
	__asm        jmp    _T144;
_T125:
	__asm        cmp    dword ptr [ebp-0x30], 0x12E;
	__asm        je     _T102;

	__asm        cmp    dword ptr [ebp-0x30], 0x17C;
	__asm        je     _T111;

	__asm        jmp    _T144;
// LINE 2415:
_T144:
	__asm        cmp    mapx, 0xFFFFFFFF;
	__asm        je     _T196;

	__asm        cmp    mapy, 0xFFFFFFFF;
	__asm        je     _T196;
// LINE 2419:
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::LinkToCell;
// LINE 2423:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustCurrentPosition;
// LINE 2424:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustNextPosition;
// LINE 2425:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::AdjustNextAltitude;
// LINE 2429:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 2433:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 1;
// LINE 2435:
	__asm        jmp    _T19d;
// LINE 2439:
_T196:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+5], 0;
// LINE 2448:
_T19d:
	__asm        mov    eax, this;
	__asm        mov    ecx, instanceID;
	__asm        mov    planes[0][ecx*4], eax;
// LINE 2451:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+4], 1;
// LINE 2453:
	__asm        mov    eax, 1;
	__asm        jmp    _T1bb;
// LINE 2454:
_T1bb:
}

// FUNCTION: COPTER_D 0x0052d618
void PlaneClass::HandleUFOStuff() {
	struct Point3d vec;

// LINE 2477:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        je     _T34;
// LINE 2479:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x4C];
// LINE 2480:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x4C], 0;
	__asm        jne    _T34;
// LINE 2482:
	__asm        mov    ecx, this;
	__asm        call   PlaneClass::TurnOffShields;
// LINE 2487:
_T34:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x48], eax;
// LINE 2488:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x48], 0;
	__asm        jge    _T9b;
// LINE 2491:
	__asm        mov    vec.z, 0;
	__asm        mov    eax, vec.z;
	__asm        mov    vec.x, eax;
// LINE 2492:
	__asm        mov    vec.y, 0xFFFF0000;
// LINE 2494:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x48], 0xB40000;
// LINE 2504:
	__asm        push   0xFFFFFFFF;
	__asm        push   0x12C0000;
	__asm        mov    eax, this;
	__asm        add    eax, 0x58;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        push   0xB;
	__asm        call   S3MissileStart;
	__asm        add    esp, 0x20;
// LINE 2506:
_T9b:
	__asm        jmp    near ptr 0x0052D6B8;
}

// FUNCTION: COPTER_D 0x0052d6bd
void CreatePlaneInstance(int32_t instanceID) {
// LINE 2554:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   PlaneClass::CreateInstance;
	__asm        add    esp, 4;
// LINE 2555:
	__asm        jmp    near ptr 0x0052D6D4;
}

// FUNCTION: COPTER_D 0x0052d6d9
int32_t S3PlaneCrashWhenReady(long mission_id) {
// LINE 2574:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   PlaneClass::FindPlaneToCrash;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0052D6F0;
// LINE 2575:
}

// FUNCTION: COPTER_D 0x0052d6f5
void ResetAllPlanes() {
// LINE 2597:
	__asm        call   PlaneClass::ResetAll;
// LINE 2598:
	__asm        jmp    near ptr 0x0052D705;
}

// FUNCTION: COPTER_D 0x0052d70a
void ItterateAllPlanes() {
// LINE 2620:
	__asm        call   PlaneClass::ItterateAll;
// LINE 2621:
	__asm        jmp    near ptr 0x0052D71A;
}

// FUNCTION: COPTER_D 0x0052d71f
void PlaneClass::HitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
// LINE 2635:
	__asm        mov    eax, hitter_type;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    _T1f8;
// LINE 2638:
	__asm        jmp    _T24c;
// LINE 2640:
	__asm        jmp    _T24c;
// LINE 2642:
	__asm        jmp    _T24c;
// LINE 2644:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T48;

	__asm        jmp    _Td4;

	__asm        jmp    _T57;
_T48:
	__asm        jmp    _T57;

	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     _Td4;
// LINE 2646:
_T57:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    dword ptr [eax+0x4C], 3;
// LINE 2647:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    ecx, planes[0][eax*4];
	__asm        call   PlaneClass::TurnOnShields;
// LINE 2648:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        inc    dword ptr [eax+0x50];
// LINE 2649:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        cmp    dword ptr [eax+0x50], 0xA;
	__asm        jl     _Tcf;
// LINE 2650:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    [ebp-0xC], eax;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    byte ptr [eax+6], 1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    dword ptr [eax+0x3C], 0xFFFFFFFF;
	__asm        jmp    _Tcf;
// LINE 2652:
_Tcf:
	__asm        jmp    _T110;
// LINE 2655:
_Td4:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    dword ptr [eax+0x50], 1;
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    [ebp-0x10], eax;
// LINE 2656:
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    byte ptr [eax+6], 1;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    dword ptr [eax+0x3C], 0xFFFFFFFF;
	__asm        jmp    _T110;
// LINE 2658:
_T110:
	__asm        jmp    _T24c;
// LINE 2660:
	__asm        jmp    _T24c;
// LINE 2662:
	__asm        jmp    _T24c;
// LINE 2664:
	__asm        jmp    _T24c;
// LINE 2666:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        cmp    dword ptr [eax+0x54], 0x12E;
	__asm        jne    _T149;

	__asm        jmp    _T185;

	__asm        jmp    _T158;
_T149:
	__asm        jmp    _T158;

	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T185;
// LINE 2668:
_T158:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    dword ptr [eax+0x4C], 3;
// LINE 2669:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    ecx, planes[0][eax*4];
	__asm        call   PlaneClass::TurnOnShields;
// LINE 2671:
	__asm        jmp    _T1c1;
// LINE 2674:
_T185:
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    dword ptr [eax+0x50], 1;
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    [ebp-0x14], eax;
// LINE 2675:
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    byte ptr [eax+6], 1;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    dword ptr [eax+0x3C], 0xFFFFFFFF;
	__asm        jmp    _T1c1;
// LINE 2677:
_T1c1:
	__asm        jmp    _T24c;
// LINE 2679:
	__asm        jmp    _T24c;
// LINE 2681:
	__asm        jmp    _T24c;
// LINE 2683:
	__asm        jmp    _T24c;
// LINE 2685:
	__asm        jmp    _T24c;
// LINE 2687:
	__asm        jmp    _T24c;
// LINE 2689:
	__asm        jmp    _T24c;
// LINE 2691:
	__asm        jmp    _T24c;
// LINE 2693:
	__asm        jmp    _T24c;
// LINE 2695:
	__asm        jmp    _T24c;
// LINE 2696:
	__asm        jmp    _T24c;
_T1f8:
	__asm        cmp    dword ptr [ebp-0x18], 0xF;
	__asm        ja     _T24c;

	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    SwitchPointers5429547[0][eax*4];
// Switch pointers
// LINE 2698:
_T24c:
	__asm        jmp    near ptr 0x0052D970;
}

// FUNCTION: COPTER_D 0x0052d975
void PlaneHitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
// LINE 2708:
	__asm        mov    eax, xtra_msg;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    eax, dyhittee;
	__asm        push   eax;
	__asm        mov    eax, dyhitter;
	__asm        push   eax;
	__asm        mov    eax, hitter_type;
	__asm        push   eax;
	__asm        call   PlaneClass::HitDispatch;
	__asm        add    esp, 0x14;
// LINE 2709:
	__asm        jmp    near ptr 0x0052D99C;
}

// FUNCTION: COPTER_D 0x0052d9a1
void PlaneClass::TurnOnShields() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 2728:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 2729:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2730:
	__asm        mov    count, 0;
	__asm        jmp    _T40;
_T3d:
	__asm        inc    count;
_T40:
	__asm        mov    eax, count;
	__asm        cmp    oinfo.Faces, eax;
	__asm        jle    _T91;
// LINE 2732:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 2733:
	__asm        cmp    finfo.Plotter, 0xB;
	__asm        jne    _T7d;
// LINE 2735:
	__asm        and    finfo.Attribute, 0x7FFFFFFF;
// LINE 2736:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 2738:
_T7d:
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D85F8;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2739:
	__asm        jmp    _T3d;
// LINE 2740:
_T91:
	__asm        jmp    near ptr 0x0052DA37;
}

// FUNCTION: COPTER_D 0x0052da3c
void PlaneClass::TurnOffShields() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 2750:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 2751:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x60];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2752:
	__asm        mov    count, 0;
	__asm        jmp    _T40;
_T3d:
	__asm        inc    count;
_T40:
	__asm        mov    eax, count;
	__asm        cmp    oinfo.Faces, eax;
	__asm        jle    _T95;
// LINE 2754:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 2755:
	__asm        cmp    finfo.Plotter, 0xB;
	__asm        jne    _T81;
// LINE 2757:
	__asm        mov    eax, finfo.Attribute;
	__asm        or     eax, 0x80000000;
	__asm        mov    finfo.Attribute, eax;
// LINE 2758:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 2760:
_T81:
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D85F8;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 2761:
	__asm        jmp    _T3d;
// LINE 2762:
_T95:
	__asm        jmp    near ptr 0x0052DAD6;
}

// FUNCTION: COPTER_D 0x0052dadb
int32_t S3PlaneMIFFLoad(void * __ptr32 miffReader) {
// LINE 2773:
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   PlaneClass::MIFFLoad;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0052DAF2;
// LINE 2774:
}

// FUNCTION: COPTER_D 0x0052daf7
int32_t S3PlaneMIFFSave(void * __ptr32 miffWriter) {
// LINE 2786:
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   PlaneClass::MIFFSave;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0052DB0E;
// LINE 2787:
}

// FUNCTION: COPTER_D 0x0052db13
int32_t PlaneClass::MIFFLoad(void * __ptr32 miffReader) {
	int32_t i;
	int32_t ret;
	class PlaneClass* p;

// LINE 2805:
	__asm        push   0xBC;
	__asm        push   0x62B6E8;
	__asm        push   0x504C414E;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   ReadFirstMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 2806:
	__asm        cmp    ret, 0;
	__asm        jne    _T38;
// LINE 2807:
	__asm        xor    eax, eax;
	__asm        jmp    _T1da;
// LINE 2809:
_T38:
	__asm        mov    i, 0;
	__asm        jmp    _T47;
_T44:
	__asm        inc    i;
_T47:
	__asm        cmp    i, 2;
	__asm        jge    _T1d0;
// LINE 2812:
	__asm        mov    eax, i;
	__asm        mov    eax, planes[0][eax*4];
	__asm        mov    p, eax;
// LINE 2813:
	__asm        mov    eax, 0x62B6E8;
	__asm        add    eax, 8;
	__asm        mov    ecx, p;
	__asm        add    ecx, 8;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2814:
	__asm        mov    eax, PlaneClass::lsPlane.remainingDist;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x14], eax;
// LINE 2815:
	__asm        mov    eax, PlaneClass::lsPlane.speed;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x18], eax;
// LINE 2816:
	__asm        mov    eax, PlaneClass::lsPlane.desiredSpeed;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x1C], eax;
// LINE 2817:
	__asm        mov    eax, 0x62B6E8;
	__asm        add    eax, 0x20;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, p;
	__asm        add    edx, 0x20;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 2818:
	__asm        mov    eax, 0x62B6E8;
	__asm        add    eax, 0x28;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, p;
	__asm        add    edx, 0x28;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 2819:
	__asm        mov    eax, PlaneClass::lsPlane.beamDelay;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x30], eax;
// LINE 2820:
	__asm        mov    eax, PlaneClass::lsPlane.beamTimer;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x34], eax;
// LINE 2821:
	__asm        mov    eax, PlaneClass::lsPlane.missionId;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x3C], eax;
// LINE 2822:
	__asm        mov    eax, PlaneClass::lsPlane.altAdjustment;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x38], eax;
// LINE 2823:
	__asm        mov    eax, 0x62B6E8;
	__asm        add    eax, 0x40;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, p;
	__asm        add    edx, 0x40;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 2824:
	__asm        mov    eax, PlaneClass::lsPlane.smokeTime;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x48], eax;
// LINE 2825:
	__asm        mov    eax, PlaneClass::lsPlane.shieldCtr;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x4C], eax;
// LINE 2826:
	__asm        mov    eax, PlaneClass::lsPlane.missileHits;
	__asm        mov    ecx, p;
	__asm        mov    [ecx+0x50], eax;
// LINE 2827:
	__asm        mov    eax, 0x62B6E8;
	__asm        add    eax, 0x70;
	__asm        mov    ecx, p;
	__asm        add    ecx, 0x70;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 2828:
	__asm        mov    edi, p;
	__asm        add    edi, 0x7C;
	__asm        lea    esi, PlaneClass::lsPlane.dyObj.matrix[0][0];
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 2829:
	__asm        mov    eax, p;
	__asm        mov    ecx, reinterpret_cast<uint32_t>(PlaneClass::lsPlane.flags[0]);
	__asm        mov    [eax+4], ecx;
// LINE 2831:
	__asm        jmp    near ptr 0x0052DC87;

	__asm        mov    eax, p;
	__asm        movsx  eax, byte ptr [eax+5];
	__asm        test   eax, eax;
	__asm        je     _T192;
// LINE 2833:
	__asm        mov    eax, p;
	__asm        add    eax, 0x20;
	__asm        push   eax;
	__asm        mov    ecx, p;
	__asm        call   PlaneClass::LinkToCell;
// LINE 2840:
_T192:
	__asm        push   0xBC;
	__asm        push   0x62B6E8;
	__asm        push   0x504C414E;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   ReadNextMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 2842:
	__asm        cmp    ret, 0;
	__asm        jne    _T1cb;

	__asm        cmp    i, 1;
	__asm        je     _T1cb;
// LINE 2843:
	__asm        xor    eax, eax;
	__asm        jmp    _T1da;
// LINE 2844:
_T1cb:
	__asm        jmp    _T44;
// LINE 2845:
_T1d0:
	__asm        mov    eax, 1;
	__asm        jmp    _T1da;
// LINE 2846:
_T1da:
}

// FUNCTION: COPTER_D 0x0052dcf2
int32_t PlaneClass::MIFFSave(void * __ptr32 miffWriter) {
	int32_t i;
	int32_t ret;

// LINE 2859:
	__asm        mov    i, 0;
	__asm        jmp    _T18;
_T15:
	__asm        inc    i;
_T18:
	__asm        cmp    i, 2;
	__asm        jge    _T5c;
// LINE 2864:
	__asm        push   0xBC;
	__asm        mov    eax, i;
	__asm        mov    eax, planes[0][eax*4];
	__asm        push   eax;
	__asm        push   0x504C414E;
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   WriteMIFFChunk;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 2865:
	__asm        cmp    ret, 0;
	__asm        jne    _T57;
// LINE 2866:
	__asm        xor    eax, eax;
	__asm        jmp    _T66;
// LINE 2867:
_T57:
	__asm        jmp    _T15;
// LINE 2868:
_T5c:
	__asm        mov    eax, 1;
	__asm        jmp    _T66;
// LINE 2869:
_T66:
}



// Contribution: 1:0012cd60-0012cd98 Module: 163, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0052dd60
// PlaneClass::`scalar deleting destructor'



// Contribution: 2:00004220-00004233 Module: 163, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593220
// GLOBAL: COPTER_D 0x00593220
// ??_7PlaneClass@@6B@


// Contribution: 3:000000a8-000000ab Module: 163, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005970a8
static void (*$S9)() = { 0 /* todo */ };



// Contribution: 3:00020690-0002080a Module: 163, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7690
struct Point2d PlaneClass::lastScannedLocation = { 0 /* todo */ };

// GLOBAL: COPTER_D 0x005b7698
int32_t PlaneClass::sPlaneModelSet = 0;



// Contribution: 3:0002080c-0002082c Module: 163, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b780c
// GLOBAL: COPTER_D 0x005b780c
// ??_C@_0CB@DLKO@C?3?2Copter?2Source?2Game?2S3MOBILE?4H@


// Contribution: 3:000946e8-000947b0 Module: 163, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b6e8
class PlaneClass PlaneClass::lsPlane;

// GLOBAL: COPTER_D 0x0062b7a8
class PlaneClass* planes[2];

// GLOBAL: COPTER_D 0x0062b7b0
// LOCAL: COPTER_D 0x0062b7b0
// $S6
