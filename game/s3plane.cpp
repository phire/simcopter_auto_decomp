// Module: S3plane.obj
// Source: C:\Copter\Source\Game\S3plane.cpp
// autogenerated by simcopter_tool from PDB file



// Contribution: 1:0012a0c0-0012cd5c Module: 163, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x0052b0c0
// $E8

// FUNCTION: COPTER_D 0x0052b0da
// $E4

// FUNCTION: COPTER_D 0x0052b0f9
// $E7

// FUNCTION: COPTER_D 0x0052b116
// $E5

// FUNCTION: COPTER_D 0x0052b14d
void PlaneClass::PlaneClass(long mapx, long mapy) {
	int32_t currentFlag;

// LINE 174:
	asm( 
"	      0052b14d    push ebp"
"	      0052b14e    mov ebp,esp"
"	      0052b150    sub esp,8"
"	      0052b153    push ebx"
"	      0052b154    push esi"
"	      0052b155    push edi"
"	      0052b156    mov [ebp-8],ecx"
"	      0052b159    mov eax,[ebp-8]"
"	      0052b15c    mov dword ptr [eax],593220h"
);
// LINE 177:
	asm( 
"	      0052b162    mov dword ptr [ebp-4],0"
"	      0052b169    jmp near ptr 0052B171h"
"	      0052b16e    inc dword ptr [ebp-4]"
"	      0052b171    cmp dword ptr [ebp-4],4"
"	      0052b175    jge near ptr 0052B18Bh"
);
// LINE 179:
	asm( 
"	      0052b17b    mov eax,[ebp-4]"
"	      0052b17e    mov ecx,[ebp-8]"
"	      0052b181    mov byte ptr [eax+ecx+4],0"
);
// LINE 180:
	asm( 
"	      0052b186    jmp near ptr 0052B16Eh"
);
// LINE 182:
	asm( 
"	      0052b18b    mov eax,[ebp-8]"
"	      0052b18e    mov dword ptr [eax+60h],0"
);
// LINE 183:
	asm( 
"	      0052b195    mov eax,[ebp-8]"
"	      0052b198    mov dword ptr [eax+34h],0"
);
// LINE 184:
	asm( 
"	      0052b19f    mov eax,[ebp-8]"
"	      0052b1a2    mov dword ptr [eax+18h],0"
);
// LINE 185:
	asm( 
"	      0052b1a9    mov eax,[ebp-8]"
"	      0052b1ac    mov dword ptr [eax+1Ch],0"
);
// LINE 186:
	asm( 
"	      0052b1b3    mov eax,[ebp+8]"
"	      0052b1b6    mov ecx,[ebp-8]"
"	      0052b1b9    mov [ecx+20h],eax"
);
// LINE 187:
	asm( 
"	      0052b1bc    mov eax,[ebp+0Ch]"
"	      0052b1bf    mov ecx,[ebp-8]"
"	      0052b1c2    mov [ecx+24h],eax"
);
// LINE 188:
	asm( 
"	      0052b1c5    mov eax,[ebp+8]"
"	      0052b1c8    mov ecx,[ebp-8]"
"	      0052b1cb    mov [ecx+28h],eax"
);
// LINE 189:
	asm( 
"	      0052b1ce    mov eax,[ebp+0Ch]"
"	      0052b1d1    mov ecx,[ebp-8]"
"	      0052b1d4    mov [ecx+2Ch],eax"
);
// LINE 196:
	asm( 
"	      0052b1d7    cmp dword ptr ds:[5B7698h],0"
"	      0052b1de    jne near ptr 0052B1FDh"
);
// LINE 198:
	asm( 
"	      0052b1e4    mov eax,[ebp-8]"
"	      0052b1e7    mov dword ptr [eax+54h],12Eh"
);
// LINE 199:
	asm( 
"	      0052b1ee    mov dword ptr ds:[5B7698h],1"
);
// LINE 201:
	asm( 
"	      0052b1f8    jmp near ptr 0052B207h"
);
// LINE 203:
	asm( 
"	      0052b1fd    mov eax,[ebp-8]"
"	      0052b200    mov dword ptr [eax+54h],17Ch"
);
// LINE 205:
	asm( 
"	      0052b207    jmp near ptr 0052B20Ch"
"	      0052b20c    mov eax,[ebp-8]"
"	      0052b20f    pop edi"
"	      0052b210    pop esi"
"	      0052b211    pop ebx"
"	      0052b212    leave"
"	      0052b213    ret 8"
);
}

// FUNCTION: COPTER_D 0x0052b216
void PlaneClass::~PlaneClass() {
// LINE 224:
	asm( 
"	      0052b216    push ebp"
"	      0052b217    mov ebp,esp"
"	      0052b219    sub esp,4"
"	      0052b21c    push ebx"
"	      0052b21d    push esi"
"	      0052b21e    push edi"
"	      0052b21f    mov [ebp-4],ecx"
"	      0052b222    mov eax,[ebp-4]"
"	      0052b225    mov dword ptr [eax],593220h"
);
// LINE 229:
	asm( 
"	      0052b22b    jmp near ptr 0052B230h"
"	      0052b230    mov eax,[ebp-4]"
"	      0052b233    movsx eax,byte ptr [eax+4]"
"	      0052b237    test eax,eax"
"	      0052b239    je near ptr 0052B262h"
);
// LINE 231:
	asm( 
"	      0052b23f    jmp near ptr 0052B244h"
"	      0052b244    mov eax,[ebp-4]"
"	      0052b247    movsx eax,byte ptr [eax+5]"
"	      0052b24b    test eax,eax"
"	      0052b24d    je near ptr 0052B262h"
);
// LINE 233:
	asm( 
"	      0052b253    mov eax,[ebp-4]"
"	      0052b256    add eax,20h"
"	      0052b259    push eax"
"	      0052b25a    mov ecx,[ebp-4]"
"	      0052b25d    call 0052CACBh"
);
// LINE 245:
	asm( 
"	      0052b262    mov eax,[ebp-4]"
"	      0052b265    mov byte ptr [eax+4],0"
);
// LINE 246:
	asm( 
"	      0052b269    jmp near ptr 0052B26Eh"
"	      0052b26e    pop edi"
"	      0052b26f    pop esi"
"	      0052b270    pop ebx"
"	      0052b271    leave"
"	      0052b272    ret"
);
}

// FUNCTION: COPTER_D 0x0052b273
class PlaneClass* PlaneClass::GetPlanePointer(long index) {
// LINE 265:
	asm( 
"	      0052b273    push ebp"
"	      0052b274    mov ebp,esp"
"	      0052b276    push ebx"
"	      0052b277    push esi"
"	      0052b278    push edi"
);
// LINE 266:
	asm( 
"	      0052b279    cmp dword ptr [ebp+8],2"
"	      0052b27d    jl near ptr 0052B28Ah"
);
// LINE 267:
	asm( 
"	      0052b283    xor eax,eax"
"	      0052b285    jmp near ptr 0052B299h"
);
// LINE 269:
	asm( 
"	      0052b28a    mov eax,[ebp+8]"
"	      0052b28d    mov eax,[eax*4+62B7A8h]"
"	      0052b294    jmp near ptr 0052B299h"
);
// LINE 270:
	asm( 
"	      0052b299    pop edi"
"	      0052b29a    pop esi"
"	      0052b29b    pop ebx"
"	      0052b29c    leave"
"	      0052b29d    ret"
);
}

// FUNCTION: COPTER_D 0x0052b29e
class PlaneClass* PlaneClass::CreateInstance(int32_t instanceID) {
// LINE 289:
	asm( 
"	      0052b29e    push ebp"
"	      0052b29f    mov ebp,esp"
"	      0052b2a1    push ebx"
"	      0052b2a2    push esi"
"	      0052b2a3    push edi"
);
// LINE 290:
	asm( 
"	      0052b2a4    mov eax,[ebp+8]"
"	      0052b2a7    push eax"
"	      0052b2a8    push 0FFFFFFFFh"
"	      0052b2aa    push 0FFFFFFFFh"
"	      0052b2ac    call 0052B2BEh"
"	      0052b2b1    add esp,0Ch"
"	      0052b2b4    jmp near ptr 0052B2B9h"
);
// LINE 328:
	asm( 
"	      0052b2b9    pop edi"
"	      0052b2ba    pop esi"
"	      0052b2bb    pop ebx"
"	      0052b2bc    leave"
"	      0052b2bd    ret"
);
}

// FUNCTION: COPTER_D 0x0052b2be
class PlaneClass* PlaneClass::CreateInstance(long mapx, long mapy, int32_t instanceID) {
	class PlaneClass* newplane;

// LINE 350:
	asm( 
"	      0052b2be    push ebp"
"	      0052b2bf    mov ebp,esp"
"	      0052b2c1    sub esp,10h"
"	      0052b2c4    push ebx"
"	      0052b2c5    push esi"
"	      0052b2c6    push edi"
);
// LINE 353:
	asm( 
"	      0052b2c7    push 0BCh"
"	      0052b2cc    call 0056A600h"
"	      0052b2d1    add esp,4"
"	      0052b2d4    mov [ebp-8],eax"
"	      0052b2d7    cmp dword ptr [ebp-8],0"
"	      0052b2db    je near ptr 0052B2F9h"
"	      0052b2e1    mov eax,[ebp+0Ch]"
"	      0052b2e4    push eax"
"	      0052b2e5    mov eax,[ebp+8]"
"	      0052b2e8    push eax"
"	      0052b2e9    mov ecx,[ebp-8]"
"	      0052b2ec    call 0052B14Dh"
"	      0052b2f1    mov [ebp-4],eax"
"	      0052b2f4    jmp near ptr 0052B300h"
"	      0052b2f9    mov dword ptr [ebp-4],0"
);
// LINE 357:
	asm( 
"	      0052b300    cmp dword ptr [ebp-4],0"
"	      0052b304    je near ptr 0052B352h"
);
// LINE 361:
	asm( 
"	      0052b30a    mov eax,[ebp+10h]"
"	      0052b30d    push eax"
"	      0052b30e    mov ecx,[ebp-4]"
"	      0052b311    call 0052B35Eh"
"	      0052b316    test eax,eax"
"	      0052b318    je near ptr 0052B32Bh"
);
// LINE 363:
	asm( 
"	      0052b31e    mov eax,[ebp-4]"
"	      0052b321    jmp near ptr 0052B359h"
);
// LINE 365:
	asm( 
"	      0052b326    jmp near ptr 0052B352h"
);
// LINE 369:
	asm( 
"	      0052b32b    mov eax,[ebp-4]"
"	      0052b32e    mov [ebp-10h],eax"
"	      0052b331    mov eax,[ebp-10h]"
"	      0052b334    mov [ebp-0Ch],eax"
"	      0052b337    cmp dword ptr [ebp-0Ch],0"
"	      0052b33b    je near ptr 0052B352h"
"	      0052b341    push 1"
"	      0052b343    mov eax,[ebp-0Ch]"
"	      0052b346    mov eax,[eax]"
"	      0052b348    mov ecx,[ebp-0Ch]"
"	      0052b34b    call dword ptr [eax]"
"	      0052b34d    jmp near ptr 0052B352h"
);
// LINE 376:
	asm( 
"	      0052b352    xor eax,eax"
"	      0052b354    jmp near ptr 0052B359h"
);
// LINE 377:
	asm( 
"	      0052b359    pop edi"
"	      0052b35a    pop esi"
"	      0052b35b    pop ebx"
"	      0052b35c    leave"
"	      0052b35d    ret"
);
}

// FUNCTION: COPTER_D 0x0052b35e
int32_t PlaneClass::Initialize(int32_t instanceID) {
// LINE 452:
	asm( 
"	      0052b35e    push ebp"
"	      0052b35f    mov ebp,esp"
"	      0052b361    sub esp,4"
"	      0052b364    push ebx"
"	      0052b365    push esi"
"	      0052b366    push edi"
"	      0052b367    mov [ebp-4],ecx"
);
// LINE 453:
	asm( 
"	      0052b36a    mov eax,[ebp+8]"
"	      0052b36d    push eax"
"	      0052b36e    mov eax,[ebp-4]"
"	      0052b371    mov eax,[eax+24h]"
"	      0052b374    push eax"
"	      0052b375    mov eax,[ebp-4]"
"	      0052b378    mov eax,[eax+20h]"
"	      0052b37b    push eax"
"	      0052b37c    mov ecx,[ebp-4]"
"	      0052b37f    call 0052D456h"
"	      0052b384    jmp near ptr 0052B389h"
);
// LINE 454:
	asm( 
"	      0052b389    pop edi"
"	      0052b38a    pop esi"
"	      0052b38b    pop ebx"
"	      0052b38c    leave"
"	      0052b38d    ret 4"
);
}

// FUNCTION: COPTER_D 0x0052b390
void PlaneClass::ResetAll() {
	int32_t currentPlaneIndex;

// LINE 477:
	asm( 
"	      0052b390    push ebp"
"	      0052b391    mov ebp,esp"
"	      0052b393    sub esp,4"
"	      0052b396    push ebx"
"	      0052b397    push esi"
"	      0052b398    push edi"
);
// LINE 498:
	asm( 
"	      0052b399    mov dword ptr [ebp-4],0"
"	      0052b3a0    jmp near ptr 0052B3A8h"
"	      0052b3a5    inc dword ptr [ebp-4]"
"	      0052b3a8    cmp dword ptr [ebp-4],2"
"	      0052b3ac    jge near ptr 0052B3C6h"
);
// LINE 500:
	asm( 
"	      0052b3b2    mov eax,[ebp-4]"
"	      0052b3b5    mov ecx,[eax*4+62B7A8h]"
"	      0052b3bc    call 0052B64Ah"
);
// LINE 501:
	asm( 
"	      0052b3c1    jmp near ptr 0052B3A5h"
);
// LINE 503:
	asm( 
"	      0052b3c6    jmp near ptr 0052B3CBh"
"	      0052b3cb    pop edi"
"	      0052b3cc    pop esi"
"	      0052b3cd    pop ebx"
"	      0052b3ce    leave"
"	      0052b3cf    ret"
);
}

// FUNCTION: COPTER_D 0x0052b3d0
void PlaneClass::ItterateAll() {
	int32_t currentPlaneIndex;

// LINE 527:
	asm( 
"	      0052b3d0    push ebp"
"	      0052b3d1    mov ebp,esp"
"	      0052b3d3    sub esp,4"
"	      0052b3d6    push ebx"
"	      0052b3d7    push esi"
"	      0052b3d8    push edi"
);
// LINE 548:
	asm( 
"	      0052b3d9    mov dword ptr [ebp-4],0"
"	      0052b3e0    jmp near ptr 0052B3E8h"
"	      0052b3e5    inc dword ptr [ebp-4]"
"	      0052b3e8    cmp dword ptr [ebp-4],2"
"	      0052b3ec    jge near ptr 0052B406h"
);
// LINE 550:
	asm( 
"	      0052b3f2    mov eax,[ebp-4]"
"	      0052b3f5    mov ecx,[eax*4+62B7A8h]"
"	      0052b3fc    call 0052B4D5h"
);
// LINE 551:
	asm( 
"	      0052b401    jmp near ptr 0052B3E5h"
);
// LINE 553:
	asm( 
"	      0052b406    jmp near ptr 0052B40Bh"
"	      0052b40b    pop edi"
"	      0052b40c    pop esi"
"	      0052b40d    pop ebx"
"	      0052b40e    leave"
"	      0052b40f    ret"
);
}

// FUNCTION: COPTER_D 0x0052b410
int32_t PlaneClass::FindPlaneToCrash(long mission_id) {
	int32_t currentPlaneIndex;

// LINE 577:
	asm( 
"	      0052b410    push ebp"
"	      0052b411    mov ebp,esp"
"	      0052b413    sub esp,0Ch"
"	      0052b416    push ebx"
"	      0052b417    push esi"
"	      0052b418    push edi"
);
// LINE 580:
	asm( 
"	      0052b419    mov dword ptr [ebp-4],0"
"	      0052b420    jmp near ptr 0052B428h"
"	      0052b425    inc dword ptr [ebp-4]"
"	      0052b428    cmp dword ptr [ebp-4],2"
"	      0052b42c    jge near ptr 0052B4C9h"
);
// LINE 584:
	asm( 
"	      0052b432    jmp near ptr 0052B437h"
"	      0052b437    mov eax,[ebp-4]"
"	      0052b43a    mov eax,[eax*4+62B7A8h]"
"	      0052b441    movsx eax,byte ptr [eax+6]"
"	      0052b445    test eax,eax"
"	      0052b447    jne near ptr 0052B4C4h"
"	      0052b44d    jmp near ptr 0052B452h"
"	      0052b452    mov eax,[ebp-4]"
"	      0052b455    mov eax,[eax*4+62B7A8h]"
"	      0052b45c    movsx eax,byte ptr [eax+7]"
"	      0052b460    test eax,eax"
"	      0052b462    jne near ptr 0052B4C4h"
"	      0052b468    mov eax,[ebp-4]"
"	      0052b46b    mov eax,[eax*4+62B7A8h]"
"	      0052b472    cmp dword ptr [eax+54h],12Eh"
"	      0052b479    jne near ptr 0052B484h"
"	      0052b47f    jmp near ptr 0052B498h"
"	      0052b484    jmp near ptr 0052B4C4h"
"	      0052b489    jmp near ptr 0052B498h"
"	      0052b48e    cmp dword ptr [ebp-8],0"
"	      0052b492    jne near ptr 0052B4C4h"
);
// LINE 585:
	asm( 
"	      0052b498    mov eax,[ebp-4]"
"	      0052b49b    mov eax,[eax*4+62B7A8h]"
"	      0052b4a2    mov [ebp-0Ch],eax"
);
// LINE 586:
	asm( 
"	      0052b4a5    mov eax,[ebp-0Ch]"
"	      0052b4a8    mov byte ptr [eax+6],1"
"	      0052b4ac    mov eax,[ebp+8]"
"	      0052b4af    mov ecx,[ebp-0Ch]"
"	      0052b4b2    mov [ecx+3Ch],eax"
"	      0052b4b5    jmp near ptr 0052B4BAh"
);
// LINE 587:
	asm( 
"	      0052b4ba    mov eax,1"
"	      0052b4bf    jmp near ptr 0052B4D0h"
);
// LINE 589:
	asm( 
"	      0052b4c4    jmp near ptr 0052B425h"
);
// LINE 591:
	asm( 
"	      0052b4c9    xor eax,eax"
"	      0052b4cb    jmp near ptr 0052B4D0h"
);
// LINE 592:
	asm( 
"	      0052b4d0    pop edi"
"	      0052b4d1    pop esi"
"	      0052b4d2    pop ebx"
"	      0052b4d3    leave"
"	      0052b4d4    ret"
);
}

// FUNCTION: COPTER_D 0x0052b4d5
void PlaneClass::Itterate() {
// LINE 611:
	asm( 
"	      0052b4d5    push ebp"
"	      0052b4d6    mov ebp,esp"
"	      0052b4d8    sub esp,60h"
"	      0052b4db    push ebx"
"	      0052b4dc    push esi"
"	      0052b4dd    push edi"
"	      0052b4de    mov [ebp-60h],ecx"
);
// LINE 614:
	asm( 
"	      0052b4e1    jmp near ptr 0052B4E6h"
"	      0052b4e6    mov eax,[ebp-60h]"
"	      0052b4e9    movsx eax,byte ptr [eax+4]"
"	      0052b4ed    test eax,eax"
"	      0052b4ef    je near ptr 0052B60Bh"
);
// LINE 617:
	asm( 
"	      0052b4f5    jmp near ptr 0052B4FAh"
"	      0052b4fa    mov eax,[ebp-60h]"
"	      0052b4fd    movsx eax,byte ptr [eax+5]"
"	      0052b501    test eax,eax"
"	      0052b503    jne near ptr 0052B58Dh"
);
// LINE 621:
	asm( 
"	      0052b509    mov eax,[ebp-60h]"
"	      0052b50c    cmp dword ptr [eax+54h],12Eh"
"	      0052b513    jne near ptr 0052B523h"
"	      0052b519    jmp near ptr 0052B551h"
"	      0052b51e    jmp near ptr 0052B532h"
"	      0052b523    jmp near ptr 0052B532h"
"	      0052b528    cmp dword ptr [ebp-5Ch],0"
"	      0052b52c    je near ptr 0052B551h"
);
// LINE 623:
	asm( 
"	      0052b532    cmp dword ptr ds:[5B4924h],0"
"	      0052b539    je near ptr 0052B54Ch"
"	      0052b53f    mov eax,[ebp-60h]"
"	      0052b542    cmp dword ptr [eax+50h],0Ah"
"	      0052b546    jl near ptr 0052B551h"
);
// LINE 624:
	asm( 
"	      0052b54c    jmp near ptr 0052B645h"
);
// LINE 627:
	asm( 
"	      0052b551    mov eax,ds:[5B4760h]"
"	      0052b556    mov ecx,[ebp-60h]"
"	      0052b559    add [ecx+34h],eax"
);
// LINE 628:
	asm( 
"	      0052b55c    jmp near ptr 0052B561h"
"	      0052b561    mov eax,[ebp-60h]"
"	      0052b564    movsx eax,byte ptr [eax+7]"
"	      0052b568    test eax,eax"
"	      0052b56a    jne near ptr 0052B58Dh"
"	      0052b570    mov eax,[ebp-60h]"
"	      0052b573    mov ecx,[ebp-60h]"
"	      0052b576    mov ecx,[ecx+34h]"
"	      0052b579    cmp [eax+30h],ecx"
"	      0052b57c    jge near ptr 0052B58Dh"
);
// LINE 631:
	asm( 
"	      0052b582    mov eax,[ebp-60h]"
"	      0052b585    mov eax,[eax]"
"	      0052b587    mov ecx,[ebp-60h]"
"	      0052b58a    call dword ptr [eax+10h]"
);
// LINE 635:
	asm( 
"	      0052b58d    jmp near ptr 0052B592h"
"	      0052b592    mov eax,[ebp-60h]"
"	      0052b595    movsx eax,byte ptr [eax+5]"
"	      0052b599    test eax,eax"
"	      0052b59b    je near ptr 0052B5FEh"
);
// LINE 641:
// Block start:
	struct VRview position;
	asm( 
"	      0052b5a1    mov eax,[ebp-60h]"
"	      0052b5a4    mov eax,[eax]"
"	      0052b5a6    mov ecx,[ebp-60h]"
"	      0052b5a9    call dword ptr [eax+4]"
);
// LINE 645:
	asm( 
"	      0052b5ac    jmp near ptr 0052B5B1h"
"	      0052b5b1    mov eax,[ebp-60h]"
"	      0052b5b4    movsx eax,byte ptr [eax+5]"
"	      0052b5b8    test eax,eax"
"	      0052b5ba    je near ptr 0052B5FEh"
);
// LINE 648:
	asm( 
"	      0052b5c0    mov eax,[ebp-60h]"
"	      0052b5c3    add eax,70h"
"	      0052b5c6    lea ecx,[ebp-58h]"
"	      0052b5c9    mov edx,[eax]"
"	      0052b5cb    mov [ecx],edx"
"	      0052b5cd    mov edx,[eax+4]"
"	      0052b5d0    mov [ecx+4],edx"
"	      0052b5d3    mov eax,[eax+8]"
"	      0052b5d6    mov [ecx+8],eax"
);
// LINE 652:
	asm( 
"	      0052b5d9    mov esi,[ebp-60h]"
"	      0052b5dc    lea edi,[ebp-40h]"
"	      0052b5df    add esi,7Ch"
"	      0052b5e2    mov ecx,10h"
"	      0052b5e7    rep movsd"
);
// LINE 656:
	asm( 
"	      0052b5e9    push 3"
"	      0052b5eb    lea eax,[ebp-58h]"
"	      0052b5ee    push eax"
"	      0052b5ef    mov eax,[ebp-60h]"
"	      0052b5f2    mov eax,[eax+60h]"
"	      0052b5f5    push eax"
"	      0052b5f6    call 004D8781h"
"	      0052b5fb    add esp,0Ch"
);
// LINE 661:
// Block end:
	asm( 
"	      0052b5fe    mov ecx,[ebp-60h]"
"	      0052b601    call 0052B6D0h"
);
// LINE 663:
	asm( 
"	      0052b606    jmp near ptr 0052B640h"
);
// LINE 667:
	asm( 
"	      0052b60b    jmp near ptr 0052B610h"
"	      0052b610    mov eax,[ebp-60h]"
"	      0052b613    movsx eax,byte ptr [eax+4]"
"	      0052b617    test eax,eax"
"	      0052b619    jne near ptr 0052B63Bh"
"	      0052b61f    push 29Bh"
"	      0052b624    push 5B76A0h"
"	      0052b629    push 5B76C4h"
"	      0052b62e    call 0056DA30h"
"	      0052b633    add esp,0Ch"
"	      0052b636    jmp near ptr 0052B640h"
"	      0052b63b    jmp near ptr 0052B640h"
);
// LINE 669:
	asm( 
"	      0052b640    jmp near ptr 0052B645h"
"	      0052b645    pop edi"
"	      0052b646    pop esi"
"	      0052b647    pop ebx"
"	      0052b648    leave"
"	      0052b649    ret"
);
}

// FUNCTION: COPTER_D 0x0052b64a
void PlaneClass::Reset() {
// LINE 688:
	asm( 
"	      0052b64a    push ebp"
"	      0052b64b    mov ebp,esp"
"	      0052b64d    sub esp,4"
"	      0052b650    push ebx"
"	      0052b651    push esi"
"	      0052b652    push edi"
"	      0052b653    mov [ebp-4],ecx"
);
// LINE 689:
	asm( 
"	      0052b656    mov ecx,[ebp-4]"
"	      0052b659    call 0052D411h"
);
// LINE 691:
	asm( 
"	      0052b65e    mov eax,[ebp-4]"
"	      0052b661    mov byte ptr [eax+6],0"
);
// LINE 692:
	asm( 
"	      0052b665    mov eax,[ebp-4]"
"	      0052b668    mov byte ptr [eax+7],0"
);
// LINE 694:
	asm( 
"	      0052b66c    mov eax,[ebp-4]"
"	      0052b66f    mov dword ptr [eax+18h],0"
);
// LINE 695:
	asm( 
"	      0052b676    mov eax,[ebp-4]"
"	      0052b679    mov dword ptr [eax+3Ch],0FFFFFFFFh"
);
// LINE 696:
	asm( 
"	      0052b680    mov eax,[ebp-4]"
"	      0052b683    mov dword ptr [eax+40h],0FFFFFFFFh"
);
// LINE 697:
	asm( 
"	      0052b68a    mov eax,[ebp-4]"
"	      0052b68d    mov dword ptr [eax+44h],0FFFFFFFFh"
);
// LINE 698:
	asm( 
"	      0052b694    mov eax,[ebp-4]"
"	      0052b697    mov dword ptr [eax+20h],0FFFFFFFFh"
);
// LINE 699:
	asm( 
"	      0052b69e    mov eax,[ebp-4]"
"	      0052b6a1    mov dword ptr [eax+24h],0FFFFFFFFh"
);
// LINE 700:
	asm( 
"	      0052b6a8    mov eax,[ebp-4]"
"	      0052b6ab    mov dword ptr [eax+28h],0FFFFFFFFh"
);
// LINE 701:
	asm( 
"	      0052b6b2    mov eax,[ebp-4]"
"	      0052b6b5    mov dword ptr [eax+2Ch],0FFFFFFFFh"
);
// LINE 702:
	asm( 
"	      0052b6bc    mov eax,[ebp-4]"
"	      0052b6bf    mov dword ptr [eax+50h],0"
);
// LINE 704:
	asm( 
"	      0052b6c6    jmp near ptr 0052B6CBh"
"	      0052b6cb    pop edi"
"	      0052b6cc    pop esi"
"	      0052b6cd    pop ebx"
"	      0052b6ce    leave"
"	      0052b6cf    ret"
);
}

// FUNCTION: COPTER_D 0x0052b6d0
void PlaneClass::PlaneSoundDriver() {
	int32_t vol_adj;
	struct Point3d vec;
	int32_t dist;

// LINE 745:
	asm( 
"	      0052b6d0    push ebp"
"	      0052b6d1    mov ebp,esp"
"	      0052b6d3    sub esp,1Ch"
"	      0052b6d6    push ebx"
"	      0052b6d7    push esi"
"	      0052b6d8    push edi"
"	      0052b6d9    mov [ebp-1Ch],ecx"
);
// LINE 750:
	asm( 
"	      0052b6dc    mov eax,[ebp-1Ch]"
"	      0052b6df    cmp dword ptr [eax+54h],12Eh"
"	      0052b6e6    jne near ptr 0052B6F1h"
"	      0052b6ec    jmp near ptr 0052B705h"
"	      0052b6f1    jmp near ptr 0052B8A3h"
"	      0052b6f6    jmp near ptr 0052B705h"
"	      0052b6fb    cmp dword ptr [ebp-18h],0"
"	      0052b6ff    jne near ptr 0052B8A3h"
);
// LINE 753:
	asm( 
"	      0052b705    jmp near ptr 0052B70Ah"
"	      0052b70a    mov eax,[ebp-1Ch]"
"	      0052b70d    movsx eax,byte ptr [eax+5]"
"	      0052b711    test eax,eax"
"	      0052b713    jne near ptr 0052B758h"
);
// LINE 755:
	asm( 
"	      0052b719    push 1Ch"
"	      0052b71b    call 00446F02h"
"	      0052b720    add esp,4"
"	      0052b723    cmp eax,1"
"	      0052b726    jne near ptr 0052B736h"
);
// LINE 757:
	asm( 
"	      0052b72c    push 1Ch"
"	      0052b72e    call 00446E04h"
"	      0052b733    add esp,4"
);
// LINE 759:
	asm( 
"	      0052b736    push 1Bh"
"	      0052b738    call 00446F02h"
"	      0052b73d    add esp,4"
"	      0052b740    cmp eax,1"
"	      0052b743    jne near ptr 0052B753h"
);
// LINE 761:
	asm( 
"	      0052b749    push 1Bh"
"	      0052b74b    call 00446E04h"
"	      0052b750    add esp,4"
);
// LINE 763:
	asm( 
"	      0052b753    jmp near ptr 0052B99Eh"
);
// LINE 767:
	asm( 
"	      0052b758    mov eax,ds:[6C126Ch]"
"	      0052b75d    mov ecx,[ebp-1Ch]"
"	      0052b760    sub eax,[ecx+70h]"
"	      0052b763    mov [ebp-10h],eax"
);
// LINE 768:
	asm( 
"	      0052b766    mov eax,ds:[6C1270h]"
"	      0052b76b    mov ecx,[ebp-1Ch]"
"	      0052b76e    sub eax,[ecx+74h]"
"	      0052b771    mov [ebp-0Ch],eax"
);
// LINE 769:
	asm( 
"	      0052b774    mov eax,ds:[6C1274h]"
"	      0052b779    mov ecx,[ebp-1Ch]"
"	      0052b77c    sub eax,[ecx+78h]"
"	      0052b77f    mov [ebp-8],eax"
);
// LINE 770:
	asm( 
"	      0052b782    lea eax,[ebp-10h]"
"	      0052b785    push eax"
"	      0052b786    call 004CA1E3h"
"	      0052b78b    add esp,4"
"	      0052b78e    mov [ebp-4],eax"
);
// LINE 772:
	asm( 
"	      0052b791    cmp dword ptr [ebp-4],7800000h"
"	      0052b798    jge near ptr 0052B864h"
);
// LINE 774:
	asm( 
"	      0052b79e    push 1Ch"
"	      0052b7a0    call 00446F02h"
"	      0052b7a5    add esp,4"
"	      0052b7a8    test eax,eax"
"	      0052b7aa    jne near ptr 0052B7C3h"
);
// LINE 776:
	asm( 
"	      0052b7b0    push 1"
"	      0052b7b2    mov eax,[ebp-1Ch]"
"	      0052b7b5    add eax,70h"
"	      0052b7b8    push eax"
"	      0052b7b9    push 1Ch"
"	      0052b7bb    call 00446CC2h"
"	      0052b7c0    add esp,0Ch"
);
// LINE 780:
	asm( 
"	      0052b7c3    push 0F0600000h"
"	      0052b7c8    push 7800000h"
"	      0052b7cd    mov eax,[ebp-4]"
"	      0052b7d0    push eax"
"	      0052b7d1    call 004D19DFh"
"	      0052b7d6    add esp,8"
"	      0052b7d9    push eax"
"	      0052b7da    call 004D19BDh"
"	      0052b7df    add esp,8"
"	      0052b7e2    sar eax,10h"
"	      0052b7e5    mov [ebp-14h],eax"
);
// LINE 783:
	asm( 
"	      0052b7e8    mov eax,[ebp-14h]"
"	      0052b7eb    push eax"
"	      0052b7ec    push 1Ch"
"	      0052b7ee    call 00446E82h"
"	      0052b7f3    add esp,8"
);
// LINE 785:
	asm( 
"	      0052b7f6    jmp near ptr 0052B7FBh"
"	      0052b7fb    mov eax,[ebp-1Ch]"
"	      0052b7fe    movsx eax,byte ptr [eax+7]"
"	      0052b802    test eax,eax"
"	      0052b804    je near ptr 0052B842h"
);
// LINE 787:
	asm( 
"	      0052b80a    push 1Bh"
"	      0052b80c    call 00446F02h"
"	      0052b811    add esp,4"
"	      0052b814    test eax,eax"
"	      0052b816    jne near ptr 0052B82Fh"
);
// LINE 789:
	asm( 
"	      0052b81c    push 1"
"	      0052b81e    mov eax,[ebp-1Ch]"
"	      0052b821    add eax,70h"
"	      0052b824    push eax"
"	      0052b825    push 1Bh"
"	      0052b827    call 00446CC2h"
"	      0052b82c    add esp,0Ch"
);
// LINE 791:
	asm( 
"	      0052b82f    mov eax,[ebp-14h]"
"	      0052b832    push eax"
"	      0052b833    push 1Bh"
"	      0052b835    call 00446E82h"
"	      0052b83a    add esp,8"
);
// LINE 793:
	asm( 
"	      0052b83d    jmp near ptr 0052B85Fh"
);
// LINE 795:
	asm( 
"	      0052b842    push 1Bh"
"	      0052b844    call 00446F02h"
"	      0052b849    add esp,4"
"	      0052b84c    cmp eax,1"
"	      0052b84f    jne near ptr 0052B85Fh"
);
// LINE 797:
	asm( 
"	      0052b855    push 1Bh"
"	      0052b857    call 00446E04h"
"	      0052b85c    add esp,4"
);
// LINE 801:
	asm( 
"	      0052b85f    jmp near ptr 0052B89Eh"
);
// LINE 803:
	asm( 
"	      0052b864    push 1Ch"
"	      0052b866    call 00446F02h"
"	      0052b86b    add esp,4"
"	      0052b86e    cmp eax,1"
"	      0052b871    jne near ptr 0052B881h"
);
// LINE 805:
	asm( 
"	      0052b877    push 1Ch"
"	      0052b879    call 00446E04h"
"	      0052b87e    add esp,4"
);
// LINE 807:
	asm( 
"	      0052b881    push 1Bh"
"	      0052b883    call 00446F02h"
"	      0052b888    add esp,4"
"	      0052b88b    cmp eax,1"
"	      0052b88e    jne near ptr 0052B89Eh"
);
// LINE 809:
	asm( 
"	      0052b894    push 1Bh"
"	      0052b896    call 00446E04h"
"	      0052b89b    add esp,4"
);
// LINE 813:
	asm( 
"	      0052b89e    jmp near ptr 0052B999h"
);
// LINE 816:
	asm( 
"	      0052b8a3    jmp near ptr 0052B8A8h"
"	      0052b8a8    mov eax,[ebp-1Ch]"
"	      0052b8ab    movsx eax,byte ptr [eax+5]"
"	      0052b8af    test eax,eax"
"	      0052b8b1    jne near ptr 0052B8D9h"
);
// LINE 818:
	asm( 
"	      0052b8b7    push 29h"
"	      0052b8b9    call 00446F02h"
"	      0052b8be    add esp,4"
"	      0052b8c1    cmp eax,1"
"	      0052b8c4    jne near ptr 0052B8D4h"
);
// LINE 820:
	asm( 
"	      0052b8ca    push 29h"
"	      0052b8cc    call 00446E04h"
"	      0052b8d1    add esp,4"
);
// LINE 822:
	asm( 
"	      0052b8d4    jmp near ptr 0052B99Eh"
);
// LINE 826:
	asm( 
"	      0052b8d9    mov eax,ds:[6C126Ch]"
"	      0052b8de    mov ecx,[ebp-1Ch]"
"	      0052b8e1    sub eax,[ecx+70h]"
"	      0052b8e4    mov [ebp-10h],eax"
);
// LINE 827:
	asm( 
"	      0052b8e7    mov eax,ds:[6C1270h]"
"	      0052b8ec    mov ecx,[ebp-1Ch]"
"	      0052b8ef    sub eax,[ecx+74h]"
"	      0052b8f2    mov [ebp-0Ch],eax"
);
// LINE 828:
	asm( 
"	      0052b8f5    mov eax,ds:[6C1274h]"
"	      0052b8fa    mov ecx,[ebp-1Ch]"
"	      0052b8fd    sub eax,[ecx+78h]"
"	      0052b900    mov [ebp-8],eax"
);
// LINE 829:
	asm( 
"	      0052b903    lea eax,[ebp-10h]"
"	      0052b906    push eax"
"	      0052b907    call 004CA1E3h"
"	      0052b90c    add esp,4"
"	      0052b90f    mov [ebp-4],eax"
);
// LINE 831:
	asm( 
"	      0052b912    cmp dword ptr [ebp-4],7800000h"
"	      0052b919    jge near ptr 0052B97Ch"
);
// LINE 833:
	asm( 
"	      0052b91f    push 29h"
"	      0052b921    call 00446F02h"
"	      0052b926    add esp,4"
"	      0052b929    test eax,eax"
"	      0052b92b    jne near ptr 0052B944h"
);
// LINE 835:
	asm( 
"	      0052b931    push 1"
"	      0052b933    mov eax,[ebp-1Ch]"
"	      0052b936    add eax,70h"
"	      0052b939    push eax"
"	      0052b93a    push 29h"
"	      0052b93c    call 00446CC2h"
"	      0052b941    add esp,0Ch"
);
// LINE 839:
	asm( 
"	      0052b944    push 0F0600000h"
"	      0052b949    push 7800000h"
"	      0052b94e    mov eax,[ebp-4]"
"	      0052b951    push eax"
"	      0052b952    call 004D19DFh"
"	      0052b957    add esp,8"
"	      0052b95a    push eax"
"	      0052b95b    call 004D19BDh"
"	      0052b960    add esp,8"
"	      0052b963    sar eax,10h"
"	      0052b966    mov [ebp-14h],eax"
);
// LINE 842:
	asm( 
"	      0052b969    mov eax,[ebp-14h]"
"	      0052b96c    push eax"
"	      0052b96d    push 29h"
"	      0052b96f    call 00446E82h"
"	      0052b974    add esp,8"
);
// LINE 844:
	asm( 
"	      0052b977    jmp near ptr 0052B999h"
);
// LINE 846:
	asm( 
"	      0052b97c    push 29h"
"	      0052b97e    call 00446F02h"
"	      0052b983    add esp,4"
"	      0052b986    cmp eax,1"
"	      0052b989    jne near ptr 0052B999h"
);
// LINE 848:
	asm( 
"	      0052b98f    push 29h"
"	      0052b991    call 00446E04h"
"	      0052b996    add esp,4"
);
// LINE 852:
	asm( 
"	      0052b999    jmp near ptr 0052B99Eh"
"	      0052b99e    pop edi"
"	      0052b99f    pop esi"
"	      0052b9a0    pop ebx"
"	      0052b9a1    leave"
"	      0052b9a2    ret"
);
}

// FUNCTION: COPTER_D 0x0052b9a3
void PlaneClass::ItterateFSM() {
// LINE 871:
	asm( 
"	      0052b9a3    push ebp"
"	      0052b9a4    mov ebp,esp"
"	      0052b9a6    sub esp,0Ch"
"	      0052b9a9    push ebx"
"	      0052b9aa    push esi"
"	      0052b9ab    push edi"
"	      0052b9ac    mov [ebp-8],ecx"
);
// LINE 872:
	asm( 
"	      0052b9af    mov ecx,[ebp-8]"
"	      0052b9b2    call 0052BDADh"
"	      0052b9b7    test eax,eax"
"	      0052b9b9    je near ptr 0052B9E0h"
"	      0052b9bf    jmp near ptr 0052B9C4h"
"	      0052b9c4    mov eax,[ebp-8]"
"	      0052b9c7    movsx eax,byte ptr [eax+7]"
"	      0052b9cb    test eax,eax"
"	      0052b9cd    jne near ptr 0052B9E0h"
);
// LINE 875:
	asm( 
"	      0052b9d3    mov ecx,[ebp-8]"
"	      0052b9d6    call 0052D411h"
);
// LINE 876:
	asm( 
"	      0052b9db    jmp near ptr 0052BAF0h"
);
// LINE 880:
	asm( 
"	      0052b9e0    mov eax,[ebp-8]"
"	      0052b9e3    cmp dword ptr [eax+54h],12Eh"
"	      0052b9ea    jne near ptr 0052B9FAh"
"	      0052b9f0    jmp near ptr 0052BA11h"
"	      0052b9f5    jmp near ptr 0052BA09h"
"	      0052b9fa    jmp near ptr 0052BA09h"
"	      0052b9ff    cmp dword ptr [ebp-4],0"
"	      0052ba03    je near ptr 0052BA11h"
);
// LINE 882:
	asm( 
"	      0052ba09    mov ecx,[ebp-8]"
"	      0052ba0c    call 0052D618h"
);
// LINE 885:
	asm( 
"	      0052ba11    jmp near ptr 0052BA16h"
"	      0052ba16    mov eax,[ebp-8]"
"	      0052ba19    movsx eax,byte ptr [eax+6]"
"	      0052ba1d    test eax,eax"
"	      0052ba1f    je near ptr 0052BA2Dh"
);
// LINE 887:
	asm( 
"	      0052ba25    mov ecx,[ebp-8]"
"	      0052ba28    call 0052BB60h"
);
// LINE 892:
	asm( 
"	      0052ba2d    jmp near ptr 0052BA32h"
"	      0052ba32    mov eax,[ebp-8]"
"	      0052ba35    movsx eax,byte ptr [eax+7]"
"	      0052ba39    test eax,eax"
"	      0052ba3b    je near ptr 0052BA4Eh"
);
// LINE 894:
	asm( 
"	      0052ba41    mov ecx,[ebp-8]"
"	      0052ba44    call 0052BEDAh"
);
// LINE 895:
	asm( 
"	      0052ba49    jmp near ptr 0052BAF0h"
);
// LINE 898:
	asm( 
"	      0052ba4e    mov eax,[ebp-8]"
"	      0052ba51    mov eax,[eax]"
"	      0052ba53    mov ecx,[ebp-8]"
"	      0052ba56    call dword ptr [eax+0Ch]"
"	      0052ba59    mov [ebp-0Ch],eax"
"	      0052ba5c    jmp near ptr 0052BADCh"
);
// LINE 904:
	asm( 
"	      0052ba61    mov ecx,[ebp-8]"
"	      0052ba64    call 0052BEDAh"
);
// LINE 907:
	asm( 
"	      0052ba69    mov ecx,[ebp-8]"
"	      0052ba6c    call 0052CA29h"
"	      0052ba71    test eax,eax"
"	      0052ba73    je near ptr 0052BAC7h"
);
// LINE 910:
	asm( 
"	      0052ba79    mov eax,[ebp-8]"
"	      0052ba7c    add eax,20h"
"	      0052ba7f    push eax"
"	      0052ba80    mov ecx,[ebp-8]"
"	      0052ba83    call 0052CACBh"
);
// LINE 911:
	asm( 
"	      0052ba88    mov eax,[ebp-8]"
"	      0052ba8b    mov eax,[eax+70h]"
"	      0052ba8e    add eax,20000000h"
"	      0052ba93    sar eax,16h"
"	      0052ba96    mov ecx,[ebp-8]"
"	      0052ba99    mov [ecx+20h],eax"
);
// LINE 912:
	asm( 
"	      0052ba9c    mov eax,20000000h"
"	      0052baa1    mov ecx,[ebp-8]"
"	      0052baa4    sub eax,[ecx+78h]"
"	      0052baa7    sar eax,16h"
"	      0052baaa    mov ecx,[ebp-8]"
"	      0052baad    mov [ecx+24h],eax"
);
// LINE 913:
	asm( 
"	      0052bab0    mov eax,[ebp-8]"
"	      0052bab3    add eax,20h"
"	      0052bab6    push eax"
"	      0052bab7    mov ecx,[ebp-8]"
"	      0052baba    call 0052CBE1h"
);
// LINE 914:
	asm( 
"	      0052babf    mov ecx,[ebp-8]"
"	      0052bac2    call 0052CEE5h"
);
// LINE 920:
	asm( 
"	      0052bac7    mov eax,[ebp-8]"
"	      0052baca    mov eax,[eax]"
"	      0052bacc    mov ecx,[ebp-8]"
"	      0052bacf    call dword ptr [eax+8]"
);
// LINE 922:
	asm( 
"	      0052bad2    jmp near ptr 0052BAEBh"
);
// LINE 931:
	asm( 
"	      0052bad7    jmp near ptr 0052BAEBh"
"	      0052badc    cmp dword ptr [ebp-0Ch],0"
"	      0052bae0    je near ptr 0052BA61h"
"	      0052bae6    jmp near ptr 0052BAD7h"
);
// LINE 932:
	asm( 
"	      0052baeb    jmp near ptr 0052BAF0h"
"	      0052baf0    pop edi"
"	      0052baf1    pop esi"
"	      0052baf2    pop ebx"
"	      0052baf3    leave"
"	      0052baf4    ret"
);
}

// FUNCTION: COPTER_D 0x0052baf5
void PlaneClass::AdjustSpeed() {
	static const int32_t speedAdjustor = { /* <data@0x005b769c> */ };

// LINE 951:
	asm( 
"	      0052baf5    push ebp"
"	      0052baf6    mov ebp,esp"
"	      0052baf8    sub esp,4"
"	      0052bafb    push ebx"
"	      0052bafc    push esi"
"	      0052bafd    push edi"
"	      0052bafe    mov [ebp-4],ecx"
);
// LINE 954:
	asm( 
"	      0052bb01    mov eax,[ebp-4]"
"	      0052bb04    mov eax,[eax+1Ch]"
"	      0052bb07    mov ecx,[ebp-4]"
"	      0052bb0a    mov [ecx+18h],eax"
);
// LINE 956:
	asm( 
"	      0052bb0d    cmp dword ptr ds:[5B769Ch],0"
"	      0052bb14    jne near ptr 0052BB24h"
);
// LINE 958:
	asm( 
"	      0052bb1a    mov eax,[ebp-4]"
"	      0052bb1d    mov dword ptr [eax+18h],1"
);
// LINE 960:
	asm( 
"	      0052bb24    jmp near ptr 0052BB29h"
"	      0052bb29    pop edi"
"	      0052bb2a    pop esi"
"	      0052bb2b    pop ebx"
"	      0052bb2c    leave"
"	      0052bb2d    ret"
);
}

// FUNCTION: COPTER_D 0x0052bb2e
enum PlaneClass::StoppedReasons PlaneClass::IsPathClear() {
// LINE 980:
	asm( 
"	      0052bb2e    push ebp"
"	      0052bb2f    mov ebp,esp"
"	      0052bb31    sub esp,4"
"	      0052bb34    push ebx"
"	      0052bb35    push esi"
"	      0052bb36    push edi"
"	      0052bb37    mov [ebp-4],ecx"
);
// LINE 1000:
	asm( 
"	      0052bb3a    xor eax,eax"
"	      0052bb3c    jmp near ptr 0052BB41h"
);
// LINE 1001:
	asm( 
"	      0052bb41    pop edi"
"	      0052bb42    pop esi"
"	      0052bb43    pop ebx"
"	      0052bb44    leave"
"	      0052bb45    ret"
);
}

// FUNCTION: COPTER_D 0x0052bb46
enum PlaneClass::StoppedReasons PlaneClass::CheckDynamicObjectsAt(const struct Point2d& __formal, const struct Point3d& collisionPoint) {
// LINE 1020:
	asm( 
"	      0052bb46    push ebp"
"	      0052bb47    mov ebp,esp"
"	      0052bb49    sub esp,4"
"	      0052bb4c    push ebx"
"	      0052bb4d    push esi"
"	      0052bb4e    push edi"
"	      0052bb4f    mov [ebp-4],ecx"
);
// LINE 1160:
	asm( 
"	      0052bb52    xor eax,eax"
"	      0052bb54    jmp near ptr 0052BB59h"
);
// LINE 1161:
	asm( 
"	      0052bb59    pop edi"
"	      0052bb5a    pop esi"
"	      0052bb5b    pop ebx"
"	      0052bb5c    leave"
"	      0052bb5d    ret 8"
);
}

// FUNCTION: COPTER_D 0x0052bb60
void PlaneClass::SetCrashWhenReady() {
	int32_t deltaY;
	int32_t deltaX;
	struct _CELL_INFO* cptr;
	int32_t z;
	struct _MISSION_PARMS mp;
	int32_t x;
	int32_t dist;

// LINE 1178:
	asm( 
"	      0052bb60    push ebp"
"	      0052bb61    mov ebp,esp"
"	      0052bb63    sub esp,40h"
"	      0052bb66    push ebx"
"	      0052bb67    push esi"
"	      0052bb68    push edi"
"	      0052bb69    mov [ebp-40h],ecx"
);
// LINE 1186:
	asm( 
"	      0052bb6c    mov eax,[ebp-40h]"
"	      0052bb6f    cmp dword ptr [eax+54h],12Eh"
"	      0052bb76    jne near ptr 0052BB86h"
"	      0052bb7c    jmp near ptr 0052BBBDh"
"	      0052bb81    jmp near ptr 0052BB95h"
"	      0052bb86    jmp near ptr 0052BB95h"
"	      0052bb8b    cmp dword ptr [ebp-34h],0"
"	      0052bb8f    je near ptr 0052BBBDh"
);
// LINE 1188:
	asm( 
"	      0052bb95    mov dword ptr [ebp-1Ch],0FFFFFFFFh"
);
// LINE 1189:
	asm( 
"	      0052bb9c    mov dword ptr [ebp-20h],27h"
);
// LINE 1190:
	asm( 
"	      0052bba3    mov dword ptr [ebp-0Ch],0"
);
// LINE 1191:
	asm( 
"	      0052bbaa    mov dword ptr [ebp-10h],1"
);
// LINE 1192:
	asm( 
"	      0052bbb1    lea eax,[ebp-20h]"
"	      0052bbb4    push eax"
"	      0052bbb5    call 004FBD4Ah"
"	      0052bbba    add esp,4"
);
// LINE 1196:
	asm( 
"	      0052bbbd    mov eax,[ebp-40h]"
"	      0052bbc0    cmp dword ptr [eax+50h],0"
"	      0052bbc4    jne near ptr 0052BC26h"
);
// LINE 1198:
	asm( 
"	      0052bbca    mov eax,ds:[6BF188h]"
"	      0052bbcf    mov ecx,[ebp-40h]"
"	      0052bbd2    sub eax,[ecx+20h]"
"	      0052bbd5    cdq"
"	      0052bbd6    xor eax,edx"
"	      0052bbd8    sub eax,edx"
"	      0052bbda    mov [ebp-2Ch],eax"
);
// LINE 1199:
	asm( 
"	      0052bbdd    mov eax,ds:[6BF18Ch]"
"	      0052bbe2    mov ecx,[ebp-40h]"
"	      0052bbe5    sub eax,[ecx+24h]"
"	      0052bbe8    cdq"
"	      0052bbe9    xor eax,edx"
"	      0052bbeb    sub eax,edx"
"	      0052bbed    mov [ebp-30h],eax"
);
// LINE 1200:
	asm( 
"	      0052bbf0    mov eax,[ebp-2Ch]"
"	      0052bbf3    cmp [ebp-30h],eax"
"	      0052bbf6    jge near ptr 0052BC0Ch"
);
// LINE 1201:
	asm( 
"	      0052bbfc    mov eax,[ebp-2Ch]"
"	      0052bbff    add eax,eax"
"	      0052bc01    add eax,[ebp-30h]"
"	      0052bc04    mov [ebp-4],eax"
);
// LINE 1202:
	asm( 
"	      0052bc07    jmp near ptr 0052BC17h"
);
// LINE 1203:
	asm( 
"	      0052bc0c    mov eax,[ebp-30h]"
"	      0052bc0f    add eax,eax"
"	      0052bc11    add eax,[ebp-2Ch]"
"	      0052bc14    mov [ebp-4],eax"
);
// LINE 1206:
	asm( 
"	      0052bc17    cmp dword ptr [ebp-4],14h"
"	      0052bc1b    jle near ptr 0052BC26h"
);
// LINE 1207:
	asm( 
"	      0052bc21    jmp near ptr 0052BDA8h"
);
// LINE 1211:
	asm( 
"	      0052bc26    mov eax,[ebp-40h]"
"	      0052bc29    mov eax,[eax+8]"
"	      0052bc2c    shl eax,8"
"	      0052bc2f    lea eax,[eax+eax*2]"
"	      0052bc32    mov ecx,[ebp-40h]"
"	      0052bc35    add eax,[ecx+70h]"
"	      0052bc38    mov [ebp-8],eax"
);
// LINE 1212:
	asm( 
"	      0052bc3b    mov eax,[ebp-40h]"
"	      0052bc3e    mov eax,[eax+10h]"
"	      0052bc41    shl eax,8"
"	      0052bc44    lea eax,[eax+eax*2]"
"	      0052bc47    mov ecx,[ebp-40h]"
"	      0052bc4a    add eax,[ecx+78h]"
"	      0052bc4d    mov [ebp-24h],eax"
);
// LINE 1214:
	asm( 
"	      0052bc50    mov eax,[ebp-8]"
"	      0052bc53    add eax,20000000h"
"	      0052bc58    sar eax,16h"
"	      0052bc5b    mov ecx,[ebp-40h]"
"	      0052bc5e    mov [ecx+40h],eax"
);
// LINE 1215:
	asm( 
"	      0052bc61    mov eax,20000000h"
"	      0052bc66    sub eax,[ebp-24h]"
"	      0052bc69    sar eax,16h"
"	      0052bc6c    mov ecx,[ebp-40h]"
"	      0052bc6f    mov [ecx+44h],eax"
);
// LINE 1227:
	asm( 
"	      0052bc72    mov eax,[ebp-40h]"
"	      0052bc75    mov eax,[eax+44h]"
"	      0052bc78    and eax,0FFh"
"	      0052bc7d    mov ecx,[ebp-40h]"
"	      0052bc80    mov ecx,[ecx+40h]"
"	      0052bc83    and ecx,0FFh"
"	      0052bc89    shl ecx,0Ah"
"	      0052bc8c    mov eax,[ecx+eax*4+67ED30h]"
"	      0052bc93    mov [ebp-3Ch],eax"
"	      0052bc96    cmp dword ptr [ebp-3Ch],0"
"	      0052bc9a    jne near ptr 0052BCBCh"
"	      0052bca0    push 0D0h"
"	      0052bca5    push 5B780Ch"
"	      0052bcaa    push 5B57B8h"
"	      0052bcaf    call 0056DA30h"
"	      0052bcb4    add esp,0Ch"
"	      0052bcb7    jmp near ptr 0052BCC1h"
"	      0052bcbc    jmp near ptr 0052BCC1h"
"	      0052bcc1    jmp near ptr 0052BCC6h"
"	      0052bcc6    mov eax,[ebp-3Ch]"
"	      0052bcc9    mov [ebp-28h],eax"
);
// LINE 1230:
	asm( 
"	      0052bccc    mov eax,[ebp-28h]"
"	      0052bccf    movsx eax,word ptr [eax+2]"
"	      0052bcd3    shl eax,10h"
"	      0052bcd6    mov ecx,[ebp-40h]"
"	      0052bcd9    sub eax,[ecx+70h]"
"	      0052bcdc    mov ecx,[ebp-40h]"
"	      0052bcdf    mov [ecx+8],eax"
);
// LINE 1231:
	asm( 
"	      0052bce2    mov eax,[ebp-28h]"
"	      0052bce5    movsx eax,word ptr [eax+4]"
"	      0052bce9    shl eax,10h"
"	      0052bcec    mov ecx,[ebp-40h]"
"	      0052bcef    sub eax,[ecx+74h]"
"	      0052bcf2    mov ecx,[ebp-40h]"
"	      0052bcf5    mov [ecx+0Ch],eax"
);
// LINE 1232:
	asm( 
"	      0052bcf8    mov eax,[ebp-28h]"
"	      0052bcfb    movsx eax,word ptr [eax+6]"
"	      0052bcff    shl eax,10h"
"	      0052bd02    mov ecx,[ebp-40h]"
"	      0052bd05    sub eax,[ecx+78h]"
"	      0052bd08    mov ecx,[ebp-40h]"
"	      0052bd0b    mov [ecx+10h],eax"
);
// LINE 1234:
	asm( 
"	      0052bd0e    mov eax,[ebp-40h]"
"	      0052bd11    add eax,8"
"	      0052bd14    push eax"
"	      0052bd15    call 004CA1E3h"
"	      0052bd1a    add esp,4"
"	      0052bd1d    mov ecx,[ebp-40h]"
"	      0052bd20    mov [ecx+14h],eax"
);
// LINE 1236:
	asm( 
"	      0052bd23    mov eax,[ebp-40h]"
"	      0052bd26    movsx eax,word ptr [eax+64h]"
"	      0052bd2a    test al,1"
"	      0052bd2c    je near ptr 0052BD48h"
);
// LINE 1238:
	asm( 
"	      0052bd32    mov eax,[ebp-40h]"
"	      0052bd35    add eax,8"
"	      0052bd38    push eax"
"	      0052bd39    mov eax,[ebp-40h]"
"	      0052bd3c    add eax,7Ch"
"	      0052bd3f    push eax"
"	      0052bd40    call 004CAEFBh"
"	      0052bd45    add esp,8"
);
// LINE 1241:
	asm( 
"	      0052bd48    mov eax,[ebp-40h]"
"	      0052bd4b    mov byte ptr [eax+6],0"
);
// LINE 1242:
	asm( 
"	      0052bd4f    mov eax,[ebp-40h]"
"	      0052bd52    mov byte ptr [eax+7],1"
);
// LINE 1244:
	asm( 
"	      0052bd56    mov eax,[ebp-40h]"
"	      0052bd59    mov dword ptr [eax+48h],0"
);
// LINE 1247:
	asm( 
"	      0052bd60    mov eax,[ebp-40h]"
"	      0052bd63    cmp dword ptr [eax+54h],12Eh"
"	      0052bd6a    jne near ptr 0052BD75h"
"	      0052bd70    jmp near ptr 0052BD89h"
"	      0052bd75    jmp near ptr 0052BDA3h"
"	      0052bd7a    jmp near ptr 0052BD89h"
"	      0052bd7f    cmp dword ptr [ebp-38h],0"
"	      0052bd83    jne near ptr 0052BDA3h"
);
// LINE 1249:
	asm( 
"	      0052bd89    push 0"
"	      0052bd8b    mov eax,6C1210h"
"	      0052bd90    add eax,5Ch"
"	      0052bd93    push eax"
"	      0052bd94    push 1Dh"
"	      0052bd96    call 00446CC2h"
"	      0052bd9b    add esp,0Ch"
);
// LINE 1251:
	asm( 
"	      0052bd9e    jmp near ptr 0052BDA3h"
);
// LINE 1258:
	asm( 
"	      0052bda3    jmp near ptr 0052BDA8h"
"	      0052bda8    pop edi"
"	      0052bda9    pop esi"
"	      0052bdaa    pop ebx"
"	      0052bdab    leave"
"	      0052bdac    ret"
);
}

// FUNCTION: COPTER_D 0x0052bdad
int32_t PlaneClass::IsPlaneOutOfCameraRange() {
	int32_t deltaY;
	int32_t deltaX;

// LINE 1277:
	asm( 
"	      0052bdad    push ebp"
"	      0052bdae    mov ebp,esp"
"	      0052bdb0    sub esp,0Ch"
"	      0052bdb3    push ebx"
"	      0052bdb4    push esi"
"	      0052bdb5    push edi"
"	      0052bdb6    mov [ebp-0Ch],ecx"
);
// LINE 1281:
	asm( 
"	      0052bdb9    mov eax,ds:[6BF188h]"
"	      0052bdbe    mov ecx,[ebp-0Ch]"
"	      0052bdc1    sub eax,[ecx+20h]"
"	      0052bdc4    mov [ebp-4],eax"
);
// LINE 1282:
	asm( 
"	      0052bdc7    mov eax,ds:[6BF18Ch]"
"	      0052bdcc    mov ecx,[ebp-0Ch]"
"	      0052bdcf    sub eax,[ecx+24h]"
"	      0052bdd2    mov [ebp-8],eax"
);
// LINE 1287:
	asm( 
"	      0052bdd5    cmp dword ptr [ebp-4],80h"
"	      0052bddc    jle near ptr 0052BDEEh"
);
// LINE 1289:
	asm( 
"	      0052bde2    sub dword ptr [ebp-4],100h"
);
// LINE 1290:
	asm( 
"	      0052bde9    jmp near ptr 0052BDD5h"
);
// LINE 1291:
	asm( 
"	      0052bdee    cmp dword ptr [ebp-4],0FFFFFF80h"
"	      0052bdf2    jge near ptr 0052BE04h"
);
// LINE 1293:
	asm( 
"	      0052bdf8    add dword ptr [ebp-4],100h"
);
// LINE 1294:
	asm( 
"	      0052bdff    jmp near ptr 0052BDEEh"
);
// LINE 1296:
	asm( 
"	      0052be04    cmp dword ptr [ebp-8],80h"
"	      0052be0b    jle near ptr 0052BE1Dh"
);
// LINE 1298:
	asm( 
"	      0052be11    sub dword ptr [ebp-8],100h"
);
// LINE 1299:
	asm( 
"	      0052be18    jmp near ptr 0052BE04h"
);
// LINE 1300:
	asm( 
"	      0052be1d    cmp dword ptr [ebp-8],0FFFFFF80h"
"	      0052be21    jge near ptr 0052BE33h"
);
// LINE 1302:
	asm( 
"	      0052be27    add dword ptr [ebp-8],100h"
);
// LINE 1303:
	asm( 
"	      0052be2e    jmp near ptr 0052BE1Dh"
);
// LINE 1305:
	asm( 
"	      0052be33    cmp dword ptr [ebp-4],0"
"	      0052be37    jge near ptr 0052BE45h"
);
// LINE 1307:
	asm( 
"	      0052be3d    mov eax,[ebp-4]"
"	      0052be40    neg eax"
"	      0052be42    mov [ebp-4],eax"
);
// LINE 1309:
	asm( 
"	      0052be45    cmp dword ptr [ebp-8],0"
"	      0052be49    jge near ptr 0052BE57h"
);
// LINE 1311:
	asm( 
"	      0052be4f    mov eax,[ebp-8]"
"	      0052be52    neg eax"
"	      0052be54    mov [ebp-8],eax"
);
// LINE 1315:
	asm( 
"	      0052be57    mov eax,ds:[6663A0h]"
"	      0052be5c    sar eax,1"
"	      0052be5f    add eax,4"
"	      0052be62    cmp eax,[ebp-4]"
"	      0052be65    jl near ptr 0052BE7Fh"
"	      0052be6b    mov eax,ds:[6663A0h]"
"	      0052be70    sar eax,1"
"	      0052be73    add eax,4"
"	      0052be76    cmp eax,[ebp-8]"
"	      0052be79    jge near ptr 0052BE8Eh"
);
// LINE 1317:
	asm( 
"	      0052be7f    mov eax,1"
"	      0052be84    jmp near ptr 0052BE95h"
);
// LINE 1319:
	asm( 
"	      0052be89    jmp near ptr 0052BE95h"
);
// LINE 1321:
	asm( 
"	      0052be8e    xor eax,eax"
"	      0052be90    jmp near ptr 0052BE95h"
);
// LINE 1323:
	asm( 
"	      0052be95    pop edi"
"	      0052be96    pop esi"
"	      0052be97    pop ebx"
"	      0052be98    leave"
"	      0052be99    ret"
);
}

// FUNCTION: COPTER_D 0x0052be9a
void PlaneClass::SlowDown() {
// LINE 1341:
	asm( 
"	      0052be9a    push ebp"
"	      0052be9b    mov ebp,esp"
"	      0052be9d    sub esp,4"
"	      0052bea0    push ebx"
"	      0052bea1    push esi"
"	      0052bea2    push edi"
"	      0052bea3    mov [ebp-4],ecx"
);
// LINE 1342:
	asm( 
"	      0052bea6    mov eax,[ebp-4]"
"	      0052bea9    sub dword ptr [eax+18h],20000h"
);
// LINE 1343:
	asm( 
"	      0052beb0    jmp near ptr 0052BEB5h"
"	      0052beb5    pop edi"
"	      0052beb6    pop esi"
"	      0052beb7    pop ebx"
"	      0052beb8    leave"
"	      0052beb9    ret"
);
}

// FUNCTION: COPTER_D 0x0052beba
void PlaneClass::Stop() {
// LINE 1362:
	asm( 
"	      0052beba    push ebp"
"	      0052bebb    mov ebp,esp"
"	      0052bebd    sub esp,4"
"	      0052bec0    push ebx"
"	      0052bec1    push esi"
"	      0052bec2    push edi"
"	      0052bec3    mov [ebp-4],ecx"
);
// LINE 1363:
	asm( 
"	      0052bec6    mov eax,[ebp-4]"
"	      0052bec9    mov dword ptr [eax+18h],0"
);
// LINE 1364:
	asm( 
"	      0052bed0    jmp near ptr 0052BED5h"
"	      0052bed5    pop edi"
"	      0052bed6    pop esi"
"	      0052bed7    pop ebx"
"	      0052bed8    leave"
"	      0052bed9    ret"
);
}

// FUNCTION: COPTER_D 0x0052beda
void PlaneClass::MoveForward() {
	struct _CELL_INFO* lcptr;
	struct _CELL_INFO* cptr;
	struct Point2d newpos;
	struct Point3d newloc;
	int32_t dist;

// LINE 1383:
	asm( 
"	      0052beda    push ebp"
"	      0052bedb    mov ebp,esp"
"	      0052bedd    sub esp,2Ch"
"	      0052bee0    push ebx"
"	      0052bee1    push esi"
"	      0052bee2    push edi"
"	      0052bee3    mov [ebp-2Ch],ecx"
);
// LINE 1390:
	asm( 
"	      0052bee6    mov eax,ds:[5B4760h]"
"	      0052beeb    push eax"
"	      0052beec    mov eax,[ebp-2Ch]"
"	      0052beef    mov eax,[eax+18h]"
"	      0052bef2    push eax"
"	      0052bef3    call 004D19BDh"
"	      0052bef8    add esp,8"
"	      0052befb    mov [ebp-4],eax"
);
// LINE 1394:
	asm( 
"	      0052befe    jmp near ptr 0052BF03h"
"	      0052bf03    mov eax,[ebp-2Ch]"
"	      0052bf06    movsx eax,byte ptr [eax+7]"
"	      0052bf0a    test eax,eax"
"	      0052bf0c    jne near ptr 0052BF7Ah"
);
// LINE 1396:
	asm( 
"	      0052bf12    mov eax,[ebp-2Ch]"
"	      0052bf15    mov ecx,[ebp-4]"
"	      0052bf18    cmp [eax+14h],ecx"
"	      0052bf1b    jge near ptr 0052BF2Ah"
);
// LINE 1397:
	asm( 
"	      0052bf21    mov eax,[ebp-2Ch]"
"	      0052bf24    mov eax,[eax+14h]"
"	      0052bf27    mov [ebp-4],eax"
);
// LINE 1398:
	asm( 
"	      0052bf2a    xor eax,eax"
"	      0052bf2c    sub eax,[ebp-4]"
"	      0052bf2f    neg eax"
"	      0052bf31    mov ecx,[ebp-2Ch]"
"	      0052bf34    sub [ecx+14h],eax"
);
// LINE 1403:
	asm( 
"	      0052bf37    mov eax,[ebp-4]"
"	      0052bf3a    push eax"
"	      0052bf3b    mov eax,[ebp-2Ch]"
"	      0052bf3e    mov eax,[eax+8]"
"	      0052bf41    push eax"
"	      0052bf42    call 004D19BDh"
"	      0052bf47    add esp,8"
"	      0052bf4a    mov ecx,[ebp-2Ch]"
"	      0052bf4d    add [ecx+70h],eax"
);
// LINE 1405:
	asm( 
"	      0052bf50    mov eax,[ebp-4]"
"	      0052bf53    push eax"
"	      0052bf54    mov eax,[ebp-2Ch]"
"	      0052bf57    mov eax,[eax+10h]"
"	      0052bf5a    push eax"
"	      0052bf5b    call 004D19BDh"
"	      0052bf60    add esp,8"
"	      0052bf63    mov ecx,[ebp-2Ch]"
"	      0052bf66    add [ecx+78h],eax"
);
// LINE 1406:
	asm( 
"	      0052bf69    mov eax,[ebp-2Ch]"
"	      0052bf6c    mov eax,[eax+38h]"
"	      0052bf6f    mov ecx,[ebp-2Ch]"
"	      0052bf72    add [ecx+74h],eax"
);
// LINE 1408:
	asm( 
"	      0052bf75    jmp near ptr 0052C199h"
);
// LINE 1413:
	asm( 
"	      0052bf7a    mov eax,[ebp-4]"
"	      0052bf7d    push eax"
"	      0052bf7e    mov eax,[ebp-2Ch]"
"	      0052bf81    mov eax,[eax+8]"
"	      0052bf84    push eax"
"	      0052bf85    call 004D19BDh"
"	      0052bf8a    add esp,8"
"	      0052bf8d    mov ecx,[ebp-2Ch]"
"	      0052bf90    mov ecx,[ecx+70h]"
"	      0052bf93    add ecx,eax"
"	      0052bf95    mov [ebp-10h],ecx"
);
// LINE 1414:
	asm( 
"	      0052bf98    mov eax,[ebp-4]"
"	      0052bf9b    push eax"
"	      0052bf9c    mov eax,[ebp-2Ch]"
"	      0052bf9f    mov eax,[eax+0Ch]"
"	      0052bfa2    push eax"
"	      0052bfa3    call 004D19BDh"
"	      0052bfa8    add esp,8"
"	      0052bfab    mov ecx,[ebp-2Ch]"
"	      0052bfae    mov ecx,[ecx+74h]"
"	      0052bfb1    add ecx,eax"
"	      0052bfb3    mov [ebp-0Ch],ecx"
);
// LINE 1415:
	asm( 
"	      0052bfb6    mov eax,[ebp-4]"
"	      0052bfb9    push eax"
"	      0052bfba    mov eax,[ebp-2Ch]"
"	      0052bfbd    mov eax,[eax+10h]"
"	      0052bfc0    push eax"
"	      0052bfc1    call 004D19BDh"
"	      0052bfc6    add esp,8"
"	      0052bfc9    mov ecx,[ebp-2Ch]"
"	      0052bfcc    mov ecx,[ecx+78h]"
"	      0052bfcf    add ecx,eax"
"	      0052bfd1    mov [ebp-8],ecx"
);
// LINE 1417:
	asm( 
"	      0052bfd4    mov eax,[ebp-10h]"
"	      0052bfd7    add eax,20000000h"
"	      0052bfdc    sar eax,16h"
"	      0052bfdf    mov [ebp-18h],eax"
);
// LINE 1418:
	asm( 
"	      0052bfe2    mov eax,20000000h"
"	      0052bfe7    sub eax,[ebp-8]"
"	      0052bfea    sar eax,16h"
"	      0052bfed    mov [ebp-14h],eax"
);
// LINE 1420:
	asm( 
"	      0052bff0    mov eax,[ebp-2Ch]"
"	      0052bff3    mov eax,[eax+24h]"
"	      0052bff6    and eax,0FFh"
"	      0052bffb    mov ecx,[ebp-2Ch]"
"	      0052bffe    mov ecx,[ecx+20h]"
"	      0052c001    and ecx,0FFh"
"	      0052c007    shl ecx,0Ah"
"	      0052c00a    mov eax,[ecx+eax*4+67ED30h]"
"	      0052c011    mov [ebp-24h],eax"
"	      0052c014    cmp dword ptr [ebp-24h],0"
"	      0052c018    jne near ptr 0052C03Ah"
"	      0052c01e    push 0D0h"
"	      0052c023    push 5B780Ch"
"	      0052c028    push 5B57B8h"
"	      0052c02d    call 0056DA30h"
"	      0052c032    add esp,0Ch"
"	      0052c035    jmp near ptr 0052C03Fh"
"	      0052c03a    jmp near ptr 0052C03Fh"
"	      0052c03f    jmp near ptr 0052C044h"
"	      0052c044    mov eax,[ebp-24h]"
"	      0052c047    mov [ebp-20h],eax"
);
// LINE 1421:
	asm( 
"	      0052c04a    mov eax,[ebp-14h]"
"	      0052c04d    and eax,0FFh"
"	      0052c052    mov ecx,[ebp-18h]"
"	      0052c055    and ecx,0FFh"
"	      0052c05b    shl ecx,0Ah"
"	      0052c05e    mov eax,[ecx+eax*4+67ED30h]"
"	      0052c065    mov [ebp-28h],eax"
"	      0052c068    cmp dword ptr [ebp-28h],0"
"	      0052c06c    jne near ptr 0052C08Eh"
"	      0052c072    push 0D0h"
"	      0052c077    push 5B780Ch"
"	      0052c07c    push 5B57B8h"
"	      0052c081    call 0056DA30h"
"	      0052c086    add esp,0Ch"
"	      0052c089    jmp near ptr 0052C093h"
"	      0052c08e    jmp near ptr 0052C093h"
"	      0052c093    jmp near ptr 0052C098h"
"	      0052c098    mov eax,[ebp-28h]"
"	      0052c09b    mov [ebp-1Ch],eax"
);
// LINE 1424:
	asm( 
"	      0052c09e    xor eax,eax"
"	      0052c0a0    sub eax,ds:[5B4768h]"
"	      0052c0a6    neg eax"
"	      0052c0a8    mov ecx,[ebp-2Ch]"
"	      0052c0ab    sub [ecx+48h],eax"
);
// LINE 1427:
	asm( 
"	      0052c0ae    mov eax,[ebp-2Ch]"
"	      0052c0b1    cmp dword ptr [eax+48h],0"
"	      0052c0b5    jge near ptr 0052C0D7h"
);
// LINE 1429:
	asm( 
"	      0052c0bb    push 1"
"	      0052c0bd    lea eax,[ebp-10h]"
"	      0052c0c0    push eax"
"	      0052c0c1    mov eax,[ebp-1Ch]"
"	      0052c0c4    push eax"
"	      0052c0c5    call 005240DCh"
"	      0052c0ca    add esp,0Ch"
);
// LINE 1430:
	asm( 
"	      0052c0cd    mov eax,[ebp-2Ch]"
"	      0052c0d0    mov dword ptr [eax+48h],3333h"
);
// LINE 1434:
	asm( 
"	      0052c0d7    mov eax,[ebp-20h]"
"	      0052c0da    push eax"
"	      0052c0db    mov eax,[ebp-4]"
"	      0052c0de    push eax"
"	      0052c0df    mov ecx,[ebp-2Ch]"
"	      0052c0e2    call 0052C1A3h"
);
// LINE 1435:
	asm( 
"	      0052c0e7    jmp near ptr 0052C0ECh"
"	      0052c0ec    mov eax,[ebp-2Ch]"
"	      0052c0ef    movsx eax,byte ptr [eax+5]"
"	      0052c0f3    test eax,eax"
"	      0052c0f5    jne near ptr 0052C100h"
);
// LINE 1437:
	asm( 
"	      0052c0fb    jmp near ptr 0052C19Eh"
);
// LINE 1441:
	asm( 
"	      0052c100    mov eax,[ebp-20h]"
"	      0052c103    cmp [ebp-1Ch],eax"
"	      0052c106    je near ptr 0052C135h"
);
// LINE 1443:
	asm( 
"	      0052c10c    mov eax,[ebp-1Ch]"
"	      0052c10f    push eax"
"	      0052c110    mov eax,[ebp-4]"
"	      0052c113    push eax"
"	      0052c114    mov ecx,[ebp-2Ch]"
"	      0052c117    call 0052C1A3h"
);
// LINE 1444:
	asm( 
"	      0052c11c    jmp near ptr 0052C121h"
"	      0052c121    mov eax,[ebp-2Ch]"
"	      0052c124    movsx eax,byte ptr [eax+5]"
"	      0052c128    test eax,eax"
"	      0052c12a    jne near ptr 0052C135h"
);
// LINE 1445:
	asm( 
"	      0052c130    jmp near ptr 0052C19Eh"
);
// LINE 1456:
	asm( 
"	      0052c135    mov eax,[ebp-20h]"
"	      0052c138    cmp [ebp-1Ch],eax"
"	      0052c13b    je near ptr 0052C180h"
);
// LINE 1458:
	asm( 
"	      0052c141    jmp near ptr 0052C146h"
"	      0052c146    mov eax,[ebp-2Ch]"
"	      0052c149    add eax,20h"
"	      0052c14c    push eax"
"	      0052c14d    mov ecx,[ebp-2Ch]"
"	      0052c150    call 0052CACBh"
);
// LINE 1459:
	asm( 
"	      0052c155    mov eax,[ebp-18h]"
"	      0052c158    mov ecx,[ebp-2Ch]"
"	      0052c15b    mov [ecx+20h],eax"
"	      0052c15e    mov eax,[ebp-14h]"
"	      0052c161    mov ecx,[ebp-2Ch]"
"	      0052c164    mov [ecx+24h],eax"
"	      0052c167    jmp near ptr 0052C16Ch"
);
// LINE 1460:
	asm( 
"	      0052c16c    jmp near ptr 0052C171h"
"	      0052c171    mov eax,[ebp-2Ch]"
"	      0052c174    add eax,20h"
"	      0052c177    push eax"
"	      0052c178    mov ecx,[ebp-2Ch]"
"	      0052c17b    call 0052CBE1h"
);
// LINE 1463:
	asm( 
"	      0052c180    lea eax,[ebp-10h]"
"	      0052c183    mov ecx,[ebp-2Ch]"
"	      0052c186    add ecx,70h"
"	      0052c189    mov edx,[eax]"
"	      0052c18b    mov [ecx],edx"
"	      0052c18d    mov edx,[eax+4]"
"	      0052c190    mov [ecx+4],edx"
"	      0052c193    mov eax,[eax+8]"
"	      0052c196    mov [ecx+8],eax"
);
// LINE 1465:
	asm( 
"	      0052c199    jmp near ptr 0052C19Eh"
"	      0052c19e    pop edi"
"	      0052c19f    pop esi"
"	      0052c1a0    pop ebx"
"	      0052c1a1    leave"
"	      0052c1a2    ret"
);
}

// FUNCTION: COPTER_D 0x0052c1a3
int32_t PlaneClass::PlaneCollisionCheck(int32_t dist, struct _CELL_INFO* cptr) {
	long new_mission_id;
	long num_debris;
	int32_t newdist;
	struct Point3d oloc;
	long j;
	struct _MISSION_PARMS mp;
	struct Point3d loc;
	struct Point2d celloc;
	struct Point3d center;
	struct Point3d vec;
	int32_t[4][4] refmat;
	struct _STOBJ_INST* stobj;
	struct Point3d cloc;
	struct Point3d sloc;
	struct VRObjInfo oinfo;
	struct Point3d* norm;
	int32_t speed;

// LINE 1475:
	asm( 
"	      0052c1a3    push ebp"
"	      0052c1a4    mov ebp,esp"
"	      0052c1a6    sub esp,0ECh"
"	      0052c1ac    push ebx"
"	      0052c1ad    push esi"
"	      0052c1ae    push edi"
"	      0052c1af    mov [ebp-0ECh],ecx"
);
// LINE 1490:
	asm( 
"	      0052c1b5    mov eax,[ebp+0Ch]"
"	      0052c1b8    movsx eax,word ptr [eax+2]"
"	      0052c1bc    shl eax,10h"
"	      0052c1bf    mov [ebp-44h],eax"
);
// LINE 1491:
	asm( 
"	      0052c1c2    mov eax,[ebp+0Ch]"
"	      0052c1c5    movsx eax,word ptr [eax+4]"
"	      0052c1c9    shl eax,10h"
"	      0052c1cc    mov [ebp-40h],eax"
);
// LINE 1492:
	asm( 
"	      0052c1cf    mov eax,[ebp+0Ch]"
"	      0052c1d2    movsx eax,word ptr [eax+6]"
"	      0052c1d6    shl eax,10h"
"	      0052c1d9    mov [ebp-3Ch],eax"
);
// LINE 1493:
	asm( 
"	      0052c1dc    mov eax,[ebp-44h]"
"	      0052c1df    add eax,20000000h"
"	      0052c1e4    sar eax,16h"
"	      0052c1e7    mov [ebp-0A8h],eax"
);
// LINE 1494:
	asm( 
"	      0052c1ed    mov eax,20000000h"
"	      0052c1f2    sub eax,[ebp-3Ch]"
"	      0052c1f5    sar eax,16h"
"	      0052c1f8    mov [ebp-0A4h],eax"
);
// LINE 1497:
	asm( 
"	      0052c1fe    mov eax,[ebp+0Ch]"
"	      0052c201    mov eax,[eax+0Ch]"
"	      0052c204    mov [ebp-48h],eax"
);
// LINE 1498:
	asm( 
"	      0052c207    cmp dword ptr [ebp-48h],0"
"	      0052c20b    je near ptr 0052C786h"
);
// LINE 1502:
	asm( 
"	      0052c211    lea eax,[ebp-2Ch]"
"	      0052c214    push eax"
"	      0052c215    mov eax,[ebp-48h]"
"	      0052c218    mov eax,[eax+4]"
"	      0052c21b    push eax"
"	      0052c21c    call 004D8859h"
"	      0052c221    add esp,8"
);
// LINE 1503:
	asm( 
"	      0052c224    lea eax,[ebp-0A0h]"
"	      0052c22a    push eax"
"	      0052c22b    mov eax,[ebp-48h]"
"	      0052c22e    mov eax,[eax+4]"
"	      0052c231    push eax"
"	      0052c232    call 004D88C3h"
"	      0052c237    add esp,8"
);
// LINE 1505:
	asm( 
"	      0052c23a    lea eax,[ebp-44h]"
"	      0052c23d    lea ecx,[ebp-0DCh]"
"	      0052c243    mov edx,[eax]"
"	      0052c245    mov [ecx],edx"
"	      0052c247    mov edx,[eax+4]"
"	      0052c24a    mov [ecx+4],edx"
"	      0052c24d    mov eax,[eax+8]"
"	      0052c250    mov [ecx+8],eax"
);
// LINE 1506:
	asm( 
"	      0052c253    mov eax,[ebp-0A0h]"
"	      0052c259    add [ebp-0DCh],eax"
);
// LINE 1507:
	asm( 
"	      0052c25f    mov eax,[ebp-9Ch]"
"	      0052c265    add [ebp-0D8h],eax"
);
// LINE 1508:
	asm( 
"	      0052c26b    mov eax,[ebp-98h]"
"	      0052c271    add [ebp-0D4h],eax"
);
// LINE 1514:
	asm( 
"	      0052c277    mov eax,[ebp-20h]"
"	      0052c27a    push eax"
"	      0052c27b    lea eax,[ebp-0DCh]"
"	      0052c281    push eax"
"	      0052c282    mov eax,[ebp+8]"
"	      0052c285    push eax"
"	      0052c286    mov eax,[ebp-0ECh]"
"	      0052c28c    add eax,8"
"	      0052c28f    push eax"
"	      0052c290    mov eax,[ebp-0ECh]"
"	      0052c296    add eax,70h"
"	      0052c299    push eax"
"	      0052c29a    call 00522EB3h"
"	      0052c29f    add esp,14h"
"	      0052c2a2    mov [ebp-0E0h],eax"
);
// LINE 1518:
	asm( 
"	      0052c2a8    cmp dword ptr [ebp-0E0h],0"
"	      0052c2af    jle near ptr 0052C2EAh"
);
// LINE 1525:
	asm( 
"	      0052c2b5    lea eax,[ebp-8]"
"	      0052c2b8    push eax"
"	      0052c2b9    mov eax,[ebp-48h]"
"	      0052c2bc    mov eax,[eax+4]"
"	      0052c2bf    push eax"
"	      0052c2c0    lea eax,[ebp-44h]"
"	      0052c2c3    push eax"
"	      0052c2c4    mov eax,[ebp+8]"
"	      0052c2c7    push eax"
"	      0052c2c8    mov eax,[ebp-0ECh]"
"	      0052c2ce    add eax,8"
"	      0052c2d1    push eax"
"	      0052c2d2    mov eax,[ebp-0ECh]"
"	      0052c2d8    add eax,70h"
"	      0052c2db    push eax"
"	      0052c2dc    call 004D4F25h"
"	      0052c2e1    add esp,18h"
"	      0052c2e4    mov [ebp-0E0h],eax"
);
// LINE 1528:
	asm( 
"	      0052c2ea    cmp dword ptr [ebp-0E0h],0"
"	      0052c2f1    jle near ptr 0052C779h"
);
// LINE 1532:
	asm( 
"	      0052c2f7    mov eax,[ebp-0E0h]"
"	      0052c2fd    push eax"
"	      0052c2fe    mov eax,[ebp-0ECh]"
"	      0052c304    mov eax,[eax+8]"
"	      0052c307    push eax"
"	      0052c308    call 004D19BDh"
"	      0052c30d    add esp,8"
"	      0052c310    mov ecx,[ebp-0ECh]"
"	      0052c316    mov ecx,[ecx+70h]"
"	      0052c319    add ecx,eax"
"	      0052c31b    mov [ebp-0B4h],ecx"
);
// LINE 1533:
	asm( 
"	      0052c321    mov eax,[ebp-0E0h]"
"	      0052c327    push eax"
"	      0052c328    mov eax,[ebp-0ECh]"
"	      0052c32e    mov eax,[eax+0Ch]"
"	      0052c331    push eax"
"	      0052c332    call 004D19BDh"
"	      0052c337    add esp,8"
"	      0052c33a    mov ecx,[ebp-0ECh]"
"	      0052c340    mov ecx,[ecx+74h]"
"	      0052c343    add ecx,eax"
"	      0052c345    mov [ebp-0B0h],ecx"
);
// LINE 1534:
	asm( 
"	      0052c34b    mov eax,[ebp-0E0h]"
"	      0052c351    push eax"
"	      0052c352    mov eax,[ebp-0ECh]"
"	      0052c358    mov eax,[eax+10h]"
"	      0052c35b    push eax"
"	      0052c35c    call 004D19BDh"
"	      0052c361    add esp,8"
"	      0052c364    mov ecx,[ebp-0ECh]"
"	      0052c36a    mov ecx,[ecx+78h]"
"	      0052c36d    add ecx,eax"
"	      0052c36f    mov [ebp-0ACh],ecx"
);
// LINE 1535:
	asm( 
"	      0052c375    lea eax,[ebp-0B4h]"
"	      0052c37b    lea ecx,[ebp-38h]"
"	      0052c37e    mov edx,[eax]"
"	      0052c380    mov [ecx],edx"
"	      0052c382    mov edx,[eax+4]"
"	      0052c385    mov [ecx+4],edx"
"	      0052c388    mov eax,[eax+8]"
"	      0052c38b    mov [ecx+8],eax"
);
// LINE 1536:
	asm( 
"	      0052c38e    xor eax,eax"
"	      0052c390    sub eax,[ebp-44h]"
"	      0052c393    neg eax"
"	      0052c395    sub [ebp-0B4h],eax"
);
// LINE 1537:
	asm( 
"	      0052c39b    xor eax,eax"
"	      0052c39d    sub eax,[ebp-40h]"
"	      0052c3a0    neg eax"
"	      0052c3a2    sub [ebp-0B0h],eax"
);
// LINE 1538:
	asm( 
"	      0052c3a8    xor eax,eax"
"	      0052c3aa    sub eax,[ebp-3Ch]"
"	      0052c3ad    neg eax"
"	      0052c3af    sub [ebp-0ACh],eax"
);
// LINE 1540:
	asm( 
"	      0052c3b5    mov eax,[ebp-0ECh]"
"	      0052c3bb    mov eax,[eax+3Ch]"
"	      0052c3be    push eax"
"	      0052c3bf    push 4"
"	      0052c3c1    mov eax,[ebp-0ACh]"
"	      0052c3c7    push eax"
"	      0052c3c8    mov eax,[ebp-0B0h]"
"	      0052c3ce    push eax"
"	      0052c3cf    mov eax,[ebp-0B4h]"
"	      0052c3d5    push eax"
"	      0052c3d6    mov eax,[ebp+0Ch]"
"	      0052c3d9    push eax"
"	      0052c3da    call 00523F50h"
"	      0052c3df    add esp,18h"
);
// LINE 1542:
	asm( 
"	      0052c3e2    push 0"
"	      0052c3e4    lea eax,[ebp-38h]"
"	      0052c3e7    push eax"
"	      0052c3e8    push 1Ah"
"	      0052c3ea    call 00446CC2h"
"	      0052c3ef    add esp,0Ch"
);
// LINE 1545:
	asm( 
"	      0052c3f2    mov ecx,[ebp-0ECh]"
"	      0052c3f8    call 0052D411h"
);
// LINE 1546:
	asm( 
"	      0052c3fd    mov eax,[ebp-0ECh]"
"	      0052c403    mov byte ptr [eax+7],0"
);
// LINE 1549:
	asm( 
"	      0052c407    mov dword ptr [ebp-0E8h],0FFFFFFFFh"
);
// LINE 1551:
	asm( 
"	      0052c411    mov eax,[ebp-0A4h]"
"	      0052c417    push eax"
"	      0052c418    mov eax,[ebp-0A8h]"
"	      0052c41e    push eax"
"	      0052c41f    call 00526595h"
"	      0052c424    add esp,8"
"	      0052c427    cmp eax,1"
"	      0052c42a    jne near ptr 0052C487h"
"	      0052c430    mov eax,[ebp+0Ch]"
"	      0052c433    movsx eax,word ptr [eax]"
"	      0052c436    test al,20h"
"	      0052c438    jne near ptr 0052C487h"
);
// LINE 1554:
	asm( 
"	      0052c43e    call 00526B81h"
"	      0052c443    test eax,eax"
"	      0052c445    jne near ptr 0052C46Eh"
);
// LINE 1556:
	asm( 
"	      0052c44b    push 1"
"	      0052c44d    mov eax,[ebp-0A4h]"
"	      0052c453    push eax"
"	      0052c454    mov eax,[ebp-0A8h]"
"	      0052c45a    push eax"
"	      0052c45b    call 004FAC6Dh"
"	      0052c460    add esp,0Ch"
"	      0052c463    mov [ebp-0E8h],eax"
);
// LINE 1558:
	asm( 
"	      0052c469    jmp near ptr 0052C487h"
);
// LINE 1560:
	asm( 
"	      0052c46e    lea eax,[ebp-0A8h]"
"	      0052c474    push eax"
"	      0052c475    mov eax,[ebp+0Ch]"
"	      0052c478    push eax"
"	      0052c479    call 00526B96h"
"	      0052c47e    add esp,8"
"	      0052c481    mov [ebp-0E8h],eax"
);
// LINE 1564:
	asm( 
"	      0052c487    cmp dword ptr [ebp-0E8h],0FFFFFFFFh"
"	      0052c48e    je near ptr 0052C5ECh"
);
// LINE 1568:
	asm( 
"	      0052c494    mov dword ptr [ebp-0CCh],1Dh"
);
// LINE 1569:
	asm( 
"	      0052c49e    mov dword ptr [ebp-0BCh],4"
);
// LINE 1570:
	asm( 
"	      0052c4a8    mov eax,[ebp-0ECh]"
"	      0052c4ae    mov eax,[eax+3Ch]"
"	      0052c4b1    mov [ebp-0C8h],eax"
);
// LINE 1571:
	asm( 
"	      0052c4b7    lea eax,[ebp-0CCh]"
"	      0052c4bd    push eax"
"	      0052c4be    call 004FBD4Ah"
"	      0052c4c3    add esp,4"
);
// LINE 1572:
	asm( 
"	      0052c4c6    mov eax,[ebp-0E8h]"
"	      0052c4cc    mov ecx,[ebp-0ECh]"
"	      0052c4d2    mov [ecx+3Ch],eax"
);
// LINE 1574:
	asm( 
"	      0052c4d5    call 0056EC50h"
"	      0052c4da    mov ecx,[ebp+0Ch]"
"	      0052c4dd    movsx ecx,word ptr [ecx+8]"
"	      0052c4e1    movsx eax,ax"
"	      0052c4e4    cdq"
"	      0052c4e5    idiv ecx"
"	      0052c4e7    lea eax,[edx+3]"
"	      0052c4ea    mov [ebp-0E4h],eax"
);
// LINE 1575:
	asm( 
"	      0052c4f0    mov dword ptr [ebp-0D0h],0"
"	      0052c4fa    jmp near ptr 0052C505h"
"	      0052c4ff    inc dword ptr [ebp-0D0h]"
"	      0052c505    mov eax,[ebp-0E4h]"
"	      0052c50b    cmp [ebp-0D0h],eax"
"	      0052c511    jge near ptr 0052C5E7h"
);
// LINE 1577:
	asm( 
"	      0052c517    call 0056EC50h"
"	      0052c51c    mov ecx,1Eh"
"	      0052c521    movsx eax,ax"
"	      0052c524    cdq"
"	      0052c525    idiv ecx"
"	      0052c527    mov eax,edx"
"	      0052c529    shl eax,10h"
"	      0052c52c    add eax,190000h"
"	      0052c531    mov [ebp-4],eax"
);
// LINE 1578:
	asm( 
"	      0052c534    lea eax,[ebp-88h]"
"	      0052c53a    push eax"
"	      0052c53b    call 004D1FF1h"
"	      0052c540    add esp,4"
);
// LINE 1579:
	asm( 
"	      0052c543    lea eax,[ebp-88h]"
"	      0052c549    push eax"
"	      0052c54a    call 0056EC50h"
"	      0052c54f    mov ecx,0E10h"
"	      0052c554    movsx eax,ax"
"	      0052c557    cdq"
"	      0052c558    idiv ecx"
"	      0052c55a    mov eax,edx"
"	      0052c55c    shl eax,10h"
"	      0052c55f    push eax"
"	      0052c560    call 004D201Ch"
"	      0052c565    add esp,8"
);
// LINE 1580:
	asm( 
"	      0052c568    lea eax,[ebp-88h]"
"	      0052c56e    push eax"
"	      0052c56f    call 0056EC50h"
"	      0052c574    mov ecx,78h"
"	      0052c579    movsx eax,ax"
"	      0052c57c    cdq"
"	      0052c57d    idiv ecx"
"	      0052c57f    lea eax,[edx+2EEh]"
"	      0052c585    shl eax,10h"
"	      0052c588    push eax"
"	      0052c589    call 004D2004h"
"	      0052c58e    add esp,8"
);
// LINE 1581:
	asm( 
"	      0052c591    lea eax,[ebp-88h]"
"	      0052c597    push eax"
"	      0052c598    lea eax,[ebp-94h]"
"	      0052c59e    push eax"
"	      0052c59f    push 59B518h"
"	      0052c5a4    call 004D2094h"
"	      0052c5a9    add esp,0Ch"
);
// LINE 1592:
	asm( 
"	      0052c5ac    mov eax,[ebp-0ECh]"
"	      0052c5b2    mov eax,[eax+3Ch]"
"	      0052c5b5    push eax"
"	      0052c5b6    mov eax,[ebp-4]"
"	      0052c5b9    push eax"
"	      0052c5ba    mov eax,[ebp-0ECh]"
"	      0052c5c0    add eax,58h"
"	      0052c5c3    push eax"
"	      0052c5c4    push 8"
"	      0052c5c6    lea eax,[ebp-94h]"
"	      0052c5cc    push eax"
"	      0052c5cd    lea eax,[ebp-38h]"
"	      0052c5d0    push eax"
"	      0052c5d1    lea eax,[ebp-0A8h]"
"	      0052c5d7    push eax"
"	      0052c5d8    push 4"
"	      0052c5da    call 0051EEE5h"
"	      0052c5df    add esp,20h"
);
// LINE 1593:
	asm( 
"	      0052c5e2    jmp near ptr 0052C4FFh"
);
// LINE 1595:
	asm( 
"	      0052c5e7    jmp near ptr 0052C76Fh"
);
// LINE 1598:
	asm( 
"	      0052c5ec    call 0056EC50h"
"	      0052c5f1    mov ecx,[ebp+0Ch]"
"	      0052c5f4    movsx ecx,word ptr [ecx+8]"
"	      0052c5f8    movsx eax,ax"
"	      0052c5fb    cdq"
"	      0052c5fc    idiv ecx"
"	      0052c5fe    lea eax,[edx+3]"
"	      0052c601    mov [ebp-0E4h],eax"
);
// LINE 1599:
	asm( 
"	      0052c607    mov dword ptr [ebp-0D0h],0"
"	      0052c611    jmp near ptr 0052C61Ch"
"	      0052c616    inc dword ptr [ebp-0D0h]"
"	      0052c61c    mov eax,[ebp-0E4h]"
"	      0052c622    cmp [ebp-0D0h],eax"
"	      0052c628    jge near ptr 0052C6FEh"
);
// LINE 1601:
	asm( 
"	      0052c62e    call 0056EC50h"
"	      0052c633    mov ecx,1Eh"
"	      0052c638    movsx eax,ax"
"	      0052c63b    cdq"
"	      0052c63c    idiv ecx"
"	      0052c63e    mov eax,edx"
"	      0052c640    shl eax,10h"
"	      0052c643    add eax,190000h"
"	      0052c648    mov [ebp-4],eax"
);
// LINE 1602:
	asm( 
"	      0052c64b    lea eax,[ebp-88h]"
"	      0052c651    push eax"
"	      0052c652    call 004D1FF1h"
"	      0052c657    add esp,4"
);
// LINE 1603:
	asm( 
"	      0052c65a    lea eax,[ebp-88h]"
"	      0052c660    push eax"
"	      0052c661    call 0056EC50h"
"	      0052c666    mov ecx,0E10h"
"	      0052c66b    movsx eax,ax"
"	      0052c66e    cdq"
"	      0052c66f    idiv ecx"
"	      0052c671    mov eax,edx"
"	      0052c673    shl eax,10h"
"	      0052c676    push eax"
"	      0052c677    call 004D201Ch"
"	      0052c67c    add esp,8"
);
// LINE 1604:
	asm( 
"	      0052c67f    lea eax,[ebp-88h]"
"	      0052c685    push eax"
"	      0052c686    call 0056EC50h"
"	      0052c68b    mov ecx,78h"
"	      0052c690    movsx eax,ax"
"	      0052c693    cdq"
"	      0052c694    idiv ecx"
"	      0052c696    lea eax,[edx+2EEh]"
"	      0052c69c    shl eax,10h"
"	      0052c69f    push eax"
"	      0052c6a0    call 004D2004h"
"	      0052c6a5    add esp,8"
);
// LINE 1605:
	asm( 
"	      0052c6a8    lea eax,[ebp-88h]"
"	      0052c6ae    push eax"
"	      0052c6af    lea eax,[ebp-94h]"
"	      0052c6b5    push eax"
"	      0052c6b6    push 59B518h"
"	      0052c6bb    call 004D2094h"
"	      0052c6c0    add esp,0Ch"
);
// LINE 1616:
	asm( 
"	      0052c6c3    mov eax,[ebp-0ECh]"
"	      0052c6c9    mov eax,[eax+3Ch]"
"	      0052c6cc    push eax"
"	      0052c6cd    mov eax,[ebp-4]"
"	      0052c6d0    push eax"
"	      0052c6d1    mov eax,[ebp-0ECh]"
"	      0052c6d7    add eax,58h"
"	      0052c6da    push eax"
"	      0052c6db    push 8"
"	      0052c6dd    lea eax,[ebp-94h]"
"	      0052c6e3    push eax"
"	      0052c6e4    lea eax,[ebp-38h]"
"	      0052c6e7    push eax"
"	      0052c6e8    lea eax,[ebp-0A8h]"
"	      0052c6ee    push eax"
"	      0052c6ef    push 4"
"	      0052c6f1    call 0051EEE5h"
"	      0052c6f6    add esp,20h"
);
// LINE 1617:
	asm( 
"	      0052c6f9    jmp near ptr 0052C616h"
);
// LINE 1621:
	asm( 
"	      0052c6fe    mov dword ptr [ebp-0CCh],1Dh"
);
// LINE 1622:
	asm( 
"	      0052c708    mov dword ptr [ebp-0BCh],0"
);
// LINE 1623:
	asm( 
"	      0052c712    mov eax,[ebp-0ECh]"
"	      0052c718    mov eax,[eax+3Ch]"
"	      0052c71b    mov [ebp-0C8h],eax"
);
// LINE 1624:
	asm( 
"	      0052c721    lea eax,[ebp-0CCh]"
"	      0052c727    push eax"
"	      0052c728    call 004FBD4Ah"
"	      0052c72d    add esp,4"
);
// LINE 1626:
	asm( 
"	      0052c730    mov dword ptr [ebp-0CCh],0"
);
// LINE 1627:
	asm( 
"	      0052c73a    mov eax,[ebp-0ECh]"
"	      0052c740    mov eax,[eax+3Ch]"
"	      0052c743    mov [ebp-0C8h],eax"
);
// LINE 1628:
	asm( 
"	      0052c749    mov eax,[ebp-0A8h]"
"	      0052c74f    mov ecx,[ebp-0A4h]"
"	      0052c755    lea edx,[ebp-0C4h]"
"	      0052c75b    mov [edx],eax"
"	      0052c75d    mov [edx+4],ecx"
);
// LINE 1629:
	asm( 
"	      0052c760    lea eax,[ebp-0CCh]"
"	      0052c766    push eax"
"	      0052c767    call 004FBD4Ah"
"	      0052c76c    add esp,4"
);
// LINE 1635:
	asm( 
"	      0052c76f    mov eax,1"
"	      0052c774    jmp near ptr 0052CA22h"
);
// LINE 1640:
	asm( 
"	      0052c779    mov eax,[ebp-48h]"
"	      0052c77c    mov eax,[eax]"
"	      0052c77e    mov [ebp-48h],eax"
);
// LINE 1641:
	asm( 
"	      0052c781    jmp near ptr 0052C207h"
);
// LINE 1647:
	asm( 
"	      0052c786    lea eax,[ebp-44h]"
"	      0052c789    push eax"
"	      0052c78a    mov eax,[ebp+8]"
"	      0052c78d    push eax"
"	      0052c78e    mov eax,[ebp-0ECh]"
"	      0052c794    add eax,8"
"	      0052c797    push eax"
"	      0052c798    mov eax,[ebp-0ECh]"
"	      0052c79e    add eax,70h"
"	      0052c7a1    push eax"
"	      0052c7a2    call 00522DBCh"
"	      0052c7a7    add esp,10h"
"	      0052c7aa    mov [ebp-0E0h],eax"
);
// LINE 1648:
	asm( 
"	      0052c7b0    cmp dword ptr [ebp-0E0h],0"
"	      0052c7b7    jle near ptr 0052CA1Bh"
);
// LINE 1652:
	asm( 
"	      0052c7bd    mov eax,[ebp-0E0h]"
"	      0052c7c3    push eax"
"	      0052c7c4    mov eax,[ebp-0ECh]"
"	      0052c7ca    mov eax,[eax+8]"
"	      0052c7cd    push eax"
"	      0052c7ce    call 004D19BDh"
"	      0052c7d3    add esp,8"
"	      0052c7d6    mov ecx,[ebp-0ECh]"
"	      0052c7dc    mov ecx,[ecx+70h]"
"	      0052c7df    add ecx,eax"
"	      0052c7e1    mov [ebp-0B4h],ecx"
);
// LINE 1653:
	asm( 
"	      0052c7e7    mov eax,[ebp-0E0h]"
"	      0052c7ed    push eax"
"	      0052c7ee    mov eax,[ebp-0ECh]"
"	      0052c7f4    mov eax,[eax+0Ch]"
"	      0052c7f7    push eax"
"	      0052c7f8    call 004D19BDh"
"	      0052c7fd    add esp,8"
"	      0052c800    mov ecx,[ebp-0ECh]"
"	      0052c806    mov ecx,[ecx+74h]"
"	      0052c809    add ecx,eax"
"	      0052c80b    mov [ebp-0B0h],ecx"
);
// LINE 1654:
	asm( 
"	      0052c811    mov eax,[ebp-0E0h]"
"	      0052c817    push eax"
"	      0052c818    mov eax,[ebp-0ECh]"
"	      0052c81e    mov eax,[eax+10h]"
"	      0052c821    push eax"
"	      0052c822    call 004D19BDh"
"	      0052c827    add esp,8"
"	      0052c82a    mov ecx,[ebp-0ECh]"
"	      0052c830    mov ecx,[ecx+78h]"
"	      0052c833    add ecx,eax"
"	      0052c835    mov [ebp-0ACh],ecx"
);
// LINE 1655:
	asm( 
"	      0052c83b    lea eax,[ebp-0B4h]"
"	      0052c841    lea ecx,[ebp-38h]"
"	      0052c844    mov edx,[eax]"
"	      0052c846    mov [ecx],edx"
"	      0052c848    mov edx,[eax+4]"
"	      0052c84b    mov [ecx+4],edx"
"	      0052c84e    mov eax,[eax+8]"
"	      0052c851    mov [ecx+8],eax"
);
// LINE 1656:
	asm( 
"	      0052c854    xor eax,eax"
"	      0052c856    sub eax,[ebp-44h]"
"	      0052c859    neg eax"
"	      0052c85b    sub [ebp-0B4h],eax"
);
// LINE 1657:
	asm( 
"	      0052c861    xor eax,eax"
"	      0052c863    sub eax,[ebp-40h]"
"	      0052c866    neg eax"
"	      0052c868    sub [ebp-0B0h],eax"
);
// LINE 1658:
	asm( 
"	      0052c86e    xor eax,eax"
"	      0052c870    sub eax,[ebp-3Ch]"
"	      0052c873    neg eax"
"	      0052c875    sub [ebp-0ACh],eax"
);
// LINE 1662:
	asm( 
"	      0052c87b    mov eax,[ebp-0ECh]"
"	      0052c881    mov eax,[eax+3Ch]"
"	      0052c884    push eax"
"	      0052c885    push 4"
"	      0052c887    mov eax,[ebp-0ACh]"
"	      0052c88d    push eax"
"	      0052c88e    mov eax,[ebp-0B0h]"
"	      0052c894    push eax"
"	      0052c895    mov eax,[ebp-0B4h]"
"	      0052c89b    push eax"
"	      0052c89c    mov eax,[ebp+0Ch]"
"	      0052c89f    push eax"
"	      0052c8a0    call 00523F50h"
"	      0052c8a5    add esp,18h"
);
// LINE 1664:
	asm( 
"	      0052c8a8    push 0"
"	      0052c8aa    lea eax,[ebp-38h]"
"	      0052c8ad    push eax"
"	      0052c8ae    push 1Ah"
"	      0052c8b0    call 00446CC2h"
"	      0052c8b5    add esp,0Ch"
);
// LINE 1667:
	asm( 
"	      0052c8b8    mov ecx,[ebp-0ECh]"
"	      0052c8be    call 0052D411h"
);
// LINE 1668:
	asm( 
"	      0052c8c3    mov eax,[ebp-0ECh]"
"	      0052c8c9    mov byte ptr [eax+7],0"
);
// LINE 1710:
	asm( 
"	      0052c8cd    call 0056EC50h"
"	      0052c8d2    mov ecx,[ebp+0Ch]"
"	      0052c8d5    movsx ecx,word ptr [ecx+8]"
"	      0052c8d9    movsx eax,ax"
"	      0052c8dc    cdq"
"	      0052c8dd    idiv ecx"
"	      0052c8df    lea eax,[edx+3]"
"	      0052c8e2    mov [ebp-0E4h],eax"
);
// LINE 1711:
	asm( 
"	      0052c8e8    mov dword ptr [ebp-0D0h],0"
"	      0052c8f2    jmp near ptr 0052C8FDh"
"	      0052c8f7    inc dword ptr [ebp-0D0h]"
"	      0052c8fd    mov eax,[ebp-0E4h]"
"	      0052c903    cmp [ebp-0D0h],eax"
"	      0052c909    jge near ptr 0052C9DFh"
);
// LINE 1713:
	asm( 
"	      0052c90f    call 0056EC50h"
"	      0052c914    mov ecx,1Eh"
"	      0052c919    movsx eax,ax"
"	      0052c91c    cdq"
"	      0052c91d    idiv ecx"
"	      0052c91f    mov eax,edx"
"	      0052c921    shl eax,10h"
"	      0052c924    add eax,190000h"
"	      0052c929    mov [ebp-4],eax"
);
// LINE 1714:
	asm( 
"	      0052c92c    lea eax,[ebp-88h]"
"	      0052c932    push eax"
"	      0052c933    call 004D1FF1h"
"	      0052c938    add esp,4"
);
// LINE 1715:
	asm( 
"	      0052c93b    lea eax,[ebp-88h]"
"	      0052c941    push eax"
"	      0052c942    call 0056EC50h"
"	      0052c947    mov ecx,0E10h"
"	      0052c94c    movsx eax,ax"
"	      0052c94f    cdq"
"	      0052c950    idiv ecx"
"	      0052c952    mov eax,edx"
"	      0052c954    shl eax,10h"
"	      0052c957    push eax"
"	      0052c958    call 004D201Ch"
"	      0052c95d    add esp,8"
);
// LINE 1716:
	asm( 
"	      0052c960    lea eax,[ebp-88h]"
"	      0052c966    push eax"
"	      0052c967    call 0056EC50h"
"	      0052c96c    mov ecx,78h"
"	      0052c971    movsx eax,ax"
"	      0052c974    cdq"
"	      0052c975    idiv ecx"
"	      0052c977    lea eax,[edx+2EEh]"
"	      0052c97d    shl eax,10h"
"	      0052c980    push eax"
"	      0052c981    call 004D2004h"
"	      0052c986    add esp,8"
);
// LINE 1717:
	asm( 
"	      0052c989    lea eax,[ebp-88h]"
"	      0052c98f    push eax"
"	      0052c990    lea eax,[ebp-94h]"
"	      0052c996    push eax"
"	      0052c997    push 59B518h"
"	      0052c99c    call 004D2094h"
"	      0052c9a1    add esp,0Ch"
);
// LINE 1728:
	asm( 
"	      0052c9a4    mov eax,[ebp-0ECh]"
"	      0052c9aa    mov eax,[eax+3Ch]"
"	      0052c9ad    push eax"
"	      0052c9ae    mov eax,[ebp-4]"
"	      0052c9b1    push eax"
"	      0052c9b2    mov eax,[ebp-0ECh]"
"	      0052c9b8    add eax,58h"
"	      0052c9bb    push eax"
"	      0052c9bc    push 8"
"	      0052c9be    lea eax,[ebp-94h]"
"	      0052c9c4    push eax"
"	      0052c9c5    lea eax,[ebp-38h]"
"	      0052c9c8    push eax"
"	      0052c9c9    lea eax,[ebp-0A8h]"
"	      0052c9cf    push eax"
"	      0052c9d0    push 4"
"	      0052c9d2    call 0051EEE5h"
"	      0052c9d7    add esp,20h"
);
// LINE 1729:
	asm( 
"	      0052c9da    jmp near ptr 0052C8F7h"
);
// LINE 1733:
	asm( 
"	      0052c9df    mov dword ptr [ebp-0CCh],1Dh"
);
// LINE 1734:
	asm( 
"	      0052c9e9    mov dword ptr [ebp-0BCh],0"
);
// LINE 1735:
	asm( 
"	      0052c9f3    mov eax,[ebp-0ECh]"
"	      0052c9f9    mov eax,[eax+3Ch]"
"	      0052c9fc    mov [ebp-0C8h],eax"
);
// LINE 1736:
	asm( 
"	      0052ca02    lea eax,[ebp-0CCh]"
"	      0052ca08    push eax"
"	      0052ca09    call 004FBD4Ah"
"	      0052ca0e    add esp,4"
);
// LINE 1740:
	asm( 
"	      0052ca11    mov eax,1"
"	      0052ca16    jmp near ptr 0052CA22h"
);
// LINE 1743:
	asm( 
"	      0052ca1b    xor eax,eax"
"	      0052ca1d    jmp near ptr 0052CA22h"
);
// LINE 1744:
	asm( 
"	      0052ca22    pop edi"
"	      0052ca23    pop esi"
"	      0052ca24    pop ebx"
"	      0052ca25    leave"
"	      0052ca26    ret 8"
);
}

// FUNCTION: COPTER_D 0x0052ca29
int32_t PlaneClass::HaveIReachedNextLoc() {
// LINE 1764:
	asm( 
"	      0052ca29    push ebp"
"	      0052ca2a    mov ebp,esp"
"	      0052ca2c    sub esp,4"
"	      0052ca2f    push ebx"
"	      0052ca30    push esi"
"	      0052ca31    push edi"
"	      0052ca32    mov [ebp-4],ecx"
);
// LINE 1765:
	asm( 
"	      0052ca35    mov eax,[ebp-4]"
"	      0052ca38    cmp dword ptr [eax+14h],0"
"	      0052ca3c    jg near ptr 0052CA51h"
);
// LINE 1767:
	asm( 
"	      0052ca42    mov eax,1"
"	      0052ca47    jmp near ptr 0052CA58h"
);
// LINE 1769:
	asm( 
"	      0052ca4c    jmp near ptr 0052CA58h"
);
// LINE 1771:
	asm( 
"	      0052ca51    xor eax,eax"
"	      0052ca53    jmp near ptr 0052CA58h"
);
// LINE 1773:
	asm( 
"	      0052ca58    pop edi"
"	      0052ca59    pop esi"
"	      0052ca5a    pop ebx"
"	      0052ca5b    leave"
"	      0052ca5c    ret"
);
}

// FUNCTION: COPTER_D 0x0052ca5d
int32_t PlaneClass::AmIInANewCell() {
// LINE 1791:
	asm( 
"	      0052ca5d    push ebp"
"	      0052ca5e    mov ebp,esp"
"	      0052ca60    sub esp,4"
"	      0052ca63    push ebx"
"	      0052ca64    push esi"
"	      0052ca65    push edi"
"	      0052ca66    mov [ebp-4],ecx"
);
// LINE 1797:
	asm( 
"	      0052ca69    mov eax,[ebp-4]"
"	      0052ca6c    mov eax,[eax+70h]"
"	      0052ca6f    add eax,20000000h"
"	      0052ca74    sar eax,16h"
"	      0052ca77    mov ecx,[ebp-4]"
"	      0052ca7a    mov [ecx+28h],eax"
);
// LINE 1798:
	asm( 
"	      0052ca7d    mov eax,20000000h"
"	      0052ca82    mov ecx,[ebp-4]"
"	      0052ca85    sub eax,[ecx+78h]"
"	      0052ca88    sar eax,16h"
"	      0052ca8b    mov ecx,[ebp-4]"
"	      0052ca8e    mov [ecx+2Ch],eax"
);
// LINE 1802:
	asm( 
"	      0052ca91    mov eax,[ebp-4]"
"	      0052ca94    mov ecx,[ebp-4]"
"	      0052ca97    mov ecx,[ecx+20h]"
"	      0052ca9a    cmp [eax+28h],ecx"
"	      0052ca9d    jne near ptr 0052CAB5h"
"	      0052caa3    mov eax,[ebp-4]"
"	      0052caa6    mov ecx,[ebp-4]"
"	      0052caa9    mov ecx,[ecx+24h]"
"	      0052caac    cmp [eax+2Ch],ecx"
"	      0052caaf    je near ptr 0052CABFh"
);
// LINE 1804:
	asm( 
"	      0052cab5    mov eax,1"
"	      0052caba    jmp near ptr 0052CAC6h"
);
// LINE 1807:
	asm( 
"	      0052cabf    xor eax,eax"
"	      0052cac1    jmp near ptr 0052CAC6h"
);
// LINE 1808:
	asm( 
"	      0052cac6    pop edi"
"	      0052cac7    pop esi"
"	      0052cac8    pop ebx"
"	      0052cac9    leave"
"	      0052caca    ret"
);
}

// FUNCTION: COPTER_D 0x0052cacb
void PlaneClass::UnlinkFromCell(const struct Point2d& point) {
	struct _CELL_INFO* cellPointer;

// LINE 1827:
	asm( 
"	      0052cacb    push ebp"
"	      0052cacc    mov ebp,esp"
"	      0052cace    sub esp,10h"
"	      0052cad1    push ebx"
"	      0052cad2    push esi"
"	      0052cad3    push edi"
"	      0052cad4    mov [ebp-10h],ecx"
);
// LINE 1830:
	asm( 
"	      0052cad7    mov eax,[ebp+8]"
"	      0052cada    mov eax,[eax+4]"
"	      0052cadd    and eax,0FFh"
"	      0052cae2    mov ecx,[ebp+8]"
"	      0052cae5    mov ecx,[ecx]"
"	      0052cae7    and ecx,0FFh"
"	      0052caed    shl ecx,0Ah"
"	      0052caf0    mov eax,[ecx+eax*4+67ED30h]"
"	      0052caf7    mov [ebp-0Ch],eax"
"	      0052cafa    cmp dword ptr [ebp-0Ch],0"
"	      0052cafe    jne near ptr 0052CB20h"
"	      0052cb04    push 0D0h"
"	      0052cb09    push 5B780Ch"
"	      0052cb0e    push 5B57B8h"
"	      0052cb13    call 0056DA30h"
"	      0052cb18    add esp,0Ch"
"	      0052cb1b    jmp near ptr 0052CB25h"
"	      0052cb20    jmp near ptr 0052CB25h"
"	      0052cb25    jmp near ptr 0052CB2Ah"
"	      0052cb2a    mov eax,[ebp-0Ch]"
"	      0052cb2d    mov [ebp-4],eax"
);
// LINE 1832:
	asm( 
"	      0052cb30    cmp dword ptr [ebp-4],0"
"	      0052cb34    jne near ptr 0052CB56h"
"	      0052cb3a    push 728h"
"	      0052cb3f    push 5B76DCh"
"	      0052cb44    push 5B7700h"
"	      0052cb49    call 0056DA30h"
"	      0052cb4e    add esp,0Ch"
"	      0052cb51    jmp near ptr 0052CB5Bh"
"	      0052cb56    jmp near ptr 0052CB5Bh"
);
// LINE 1834:
	asm( 
"	      0052cb5b    cmp dword ptr [ebp-4],0"
"	      0052cb5f    je near ptr 0052CBD5h"
);
// LINE 1836:
// Block start:
	struct _DYOBJ_INST** dyptrptr;
	asm( 
"	      0052cb65    mov eax,[ebp-4]"
"	      0052cb68    add eax,10h"
"	      0052cb6b    mov [ebp-8],eax"
);
// LINE 1838:
	asm( 
"	      0052cb6e    mov eax,[ebp-8]"
"	      0052cb71    cmp dword ptr [eax],0"
"	      0052cb74    je near ptr 0052CBA8h"
);
// LINE 1842:
	asm( 
"	      0052cb7a    mov eax,[ebp-10h]"
"	      0052cb7d    add eax,58h"
"	      0052cb80    mov ecx,[ebp-8]"
"	      0052cb83    cmp eax,[ecx]"
"	      0052cb85    jne near ptr 0052CB9Bh"
);
// LINE 1846:
	asm( 
"	      0052cb8b    mov eax,[ebp-10h]"
"	      0052cb8e    mov eax,[eax+58h]"
"	      0052cb91    mov ecx,[ebp-8]"
"	      0052cb94    mov [ecx],eax"
);
// LINE 1848:
	asm( 
"	      0052cb96    jmp near ptr 0052CBDAh"
);
// LINE 1851:
	asm( 
"	      0052cb9b    mov eax,[ebp-8]"
"	      0052cb9e    mov eax,[eax]"
"	      0052cba0    mov [ebp-8],eax"
);
// LINE 1852:
	asm( 
"	      0052cba3    jmp near ptr 0052CB6Eh"
);
// LINE 1854:
	asm( 
"	      0052cba8    mov eax,[ebp-8]"
"	      0052cbab    cmp dword ptr [eax],0"
"	      0052cbae    jne near ptr 0052CBD0h"
"	      0052cbb4    push 73Eh"
"	      0052cbb9    push 5B770Ch"
"	      0052cbbe    push 5B7730h"
"	      0052cbc3    call 0056DA30h"
"	      0052cbc8    add esp,0Ch"
"	      0052cbcb    jmp near ptr 0052CBD5h"
"	      0052cbd0    jmp near ptr 0052CBD5h"
);
// LINE 1856:
// Block end:
	asm( 
"	      0052cbd5    jmp near ptr 0052CBDAh"
"	      0052cbda    pop edi"
"	      0052cbdb    pop esi"
"	      0052cbdc    pop ebx"
"	      0052cbdd    leave"
"	      0052cbde    ret 4"
);
}

// FUNCTION: COPTER_D 0x0052cbe1
void PlaneClass::LinkToCell(const struct Point2d& point) {
	struct _CELL_INFO* cellPointer;

// LINE 1875:
	asm( 
"	      0052cbe1    push ebp"
"	      0052cbe2    mov ebp,esp"
"	      0052cbe4    sub esp,0Ch"
"	      0052cbe7    push ebx"
"	      0052cbe8    push esi"
"	      0052cbe9    push edi"
"	      0052cbea    mov [ebp-0Ch],ecx"
);
// LINE 1878:
	asm( 
"	      0052cbed    mov eax,[ebp+8]"
"	      0052cbf0    mov eax,[eax+4]"
"	      0052cbf3    and eax,0FFh"
"	      0052cbf8    mov ecx,[ebp+8]"
"	      0052cbfb    mov ecx,[ecx]"
"	      0052cbfd    and ecx,0FFh"
"	      0052cc03    shl ecx,0Ah"
"	      0052cc06    mov eax,[ecx+eax*4+67ED30h]"
"	      0052cc0d    mov [ebp-8],eax"
"	      0052cc10    cmp dword ptr [ebp-8],0"
"	      0052cc14    jne near ptr 0052CC36h"
"	      0052cc1a    push 0D0h"
"	      0052cc1f    push 5B780Ch"
"	      0052cc24    push 5B57B8h"
"	      0052cc29    call 0056DA30h"
"	      0052cc2e    add esp,0Ch"
"	      0052cc31    jmp near ptr 0052CC3Bh"
"	      0052cc36    jmp near ptr 0052CC3Bh"
"	      0052cc3b    jmp near ptr 0052CC40h"
"	      0052cc40    mov eax,[ebp-8]"
"	      0052cc43    mov [ebp-4],eax"
);
// LINE 1880:
	asm( 
"	      0052cc46    mov eax,[ebp-4]"
"	      0052cc49    mov ecx,[ebp-0Ch]"
"	      0052cc4c    add ecx,58h"
"	      0052cc4f    cmp [eax+10h],ecx"
"	      0052cc52    jne near ptr 0052CC74h"
"	      0052cc58    push 758h"
"	      0052cc5d    push 5B773Ch"
"	      0052cc62    push 5B7760h"
"	      0052cc67    call 0056DA30h"
"	      0052cc6c    add esp,0Ch"
"	      0052cc6f    jmp near ptr 0052CC79h"
"	      0052cc74    jmp near ptr 0052CC79h"
);
// LINE 1882:
	asm( 
"	      0052cc79    mov eax,[ebp-4]"
"	      0052cc7c    mov eax,[eax+10h]"
"	      0052cc7f    mov ecx,[ebp-0Ch]"
"	      0052cc82    mov [ecx+58h],eax"
);
// LINE 1883:
	asm( 
"	      0052cc85    mov eax,[ebp-0Ch]"
"	      0052cc88    add eax,58h"
"	      0052cc8b    mov ecx,[ebp-4]"
"	      0052cc8e    mov [ecx+10h],eax"
);
// LINE 1884:
	asm( 
"	      0052cc91    jmp near ptr 0052CC96h"
"	      0052cc96    pop edi"
"	      0052cc97    pop esi"
"	      0052cc98    pop ebx"
"	      0052cc99    leave"
"	      0052cc9a    ret 4"
);
}

// FUNCTION: COPTER_D 0x0052cc9d
void PlaneClass::AdjustCurrentPosition() {
	struct _CELL_INFO* cellPointer;
	int32_t alt;

// LINE 1904:
	asm( 
"	      0052cc9d    push ebp"
"	      0052cc9e    mov ebp,esp"
"	      0052cca0    sub esp,10h"
"	      0052cca3    push ebx"
"	      0052cca4    push esi"
"	      0052cca5    push edi"
"	      0052cca6    mov [ebp-10h],ecx"
);
// LINE 1905:
	asm( 
"	      0052cca9    mov eax,[ebp-10h]"
"	      0052ccac    mov eax,[eax+24h]"
"	      0052ccaf    and eax,0FFh"
"	      0052ccb4    mov ecx,[ebp-10h]"
"	      0052ccb7    mov ecx,[ecx+20h]"
"	      0052ccba    and ecx,0FFh"
"	      0052ccc0    shl ecx,0Ah"
"	      0052ccc3    mov eax,[ecx+eax*4+67ED30h]"
"	      0052ccca    mov [ebp-0Ch],eax"
"	      0052cccd    cmp dword ptr [ebp-0Ch],0"
"	      0052ccd1    jne near ptr 0052CCF3h"
"	      0052ccd7    push 0D0h"
"	      0052ccdc    push 5B780Ch"
"	      0052cce1    push 5B57B8h"
"	      0052cce6    call 0056DA30h"
"	      0052cceb    add esp,0Ch"
"	      0052ccee    jmp near ptr 0052CCF8h"
"	      0052ccf3    jmp near ptr 0052CCF8h"
"	      0052ccf8    jmp near ptr 0052CCFDh"
"	      0052ccfd    mov eax,[ebp-0Ch]"
"	      0052cd00    mov [ebp-8],eax"
);
// LINE 1907:
	asm( 
"	      0052cd03    cmp dword ptr [ebp-8],0"
"	      0052cd07    jne near ptr 0052CD29h"
"	      0052cd0d    push 773h"
"	      0052cd12    push 5B7780h"
"	      0052cd17    push 5B77A4h"
"	      0052cd1c    call 0056DA30h"
"	      0052cd21    add esp,0Ch"
"	      0052cd24    jmp near ptr 0052CD2Eh"
"	      0052cd29    jmp near ptr 0052CD2Eh"
);
// LINE 1911:
	asm( 
"	      0052cd2e    mov eax,[ebp-8]"
"	      0052cd31    movsx eax,word ptr [eax+2]"
"	      0052cd35    shl eax,10h"
"	      0052cd38    mov ecx,[ebp-10h]"
"	      0052cd3b    mov [ecx+70h],eax"
);
// LINE 1912:
	asm( 
"	      0052cd3e    mov eax,[ebp-8]"
"	      0052cd41    movsx eax,word ptr [eax+4]"
"	      0052cd45    shl eax,10h"
"	      0052cd48    mov ecx,[ebp-10h]"
"	      0052cd4b    mov [ecx+74h],eax"
);
// LINE 1913:
	asm( 
"	      0052cd4e    mov eax,[ebp-8]"
"	      0052cd51    movsx eax,word ptr [eax+6]"
"	      0052cd55    shl eax,10h"
"	      0052cd58    mov ecx,[ebp-10h]"
"	      0052cd5b    mov [ecx+78h],eax"
);
// LINE 1916:
	asm( 
"	      0052cd5e    mov eax,[ebp-8]"
"	      0052cd61    push eax"
"	      0052cd62    call 004F5A0Ch"
"	      0052cd67    add esp,4"
"	      0052cd6a    mov [ebp-4],eax"
);
// LINE 1917:
	asm( 
"	      0052cd6d    cmp dword ptr [ebp-4],15E0000h"
"	      0052cd74    jge near ptr 0052CD89h"
);
// LINE 1918:
	asm( 
"	      0052cd7a    mov eax,[ebp-10h]"
"	      0052cd7d    add dword ptr [eax+74h],17C0000h"
);
// LINE 1919:
	asm( 
"	      0052cd84    jmp near ptr 0052CD97h"
);
// LINE 1920:
	asm( 
"	      0052cd89    mov eax,[ebp-4]"
"	      0052cd8c    add eax,1E0000h"
"	      0052cd91    mov ecx,[ebp-10h]"
"	      0052cd94    add [ecx+74h],eax"
);
// LINE 1923:
	asm( 
"	      0052cd97    jmp near ptr 0052CD9Ch"
"	      0052cd9c    pop edi"
"	      0052cd9d    pop esi"
"	      0052cd9e    pop ebx"
"	      0052cd9f    leave"
"	      0052cda0    ret"
);
}

// FUNCTION: COPTER_D 0x0052cda1
void PlaneClass::AdjustNextPosition() {
	struct _CELL_INFO* cellPointer;
	struct Point3d nextFineLocation;
	int32_t[4][4] mat;

// LINE 1943:
	asm( 
"	      0052cda1    push ebp"
"	      0052cda2    mov ebp,esp"
"	      0052cda4    sub esp,58h"
"	      0052cda7    push ebx"
"	      0052cda8    push esi"
"	      0052cda9    push edi"
"	      0052cdaa    mov [ebp-58h],ecx"
);
// LINE 1944:
	asm( 
"	      0052cdad    mov eax,ds:[6BF18Ch]"
"	      0052cdb2    and eax,0FFh"
"	      0052cdb7    mov ecx,ds:[6BF188h]"
"	      0052cdbd    and ecx,0FFh"
"	      0052cdc3    shl ecx,0Ah"
"	      0052cdc6    mov eax,[ecx+eax*4+67ED30h]"
"	      0052cdcd    mov [ebp-54h],eax"
"	      0052cdd0    cmp dword ptr [ebp-54h],0"
"	      0052cdd4    jne near ptr 0052CDF6h"
"	      0052cdda    push 0D0h"
"	      0052cddf    push 5B780Ch"
"	      0052cde4    push 5B57B8h"
"	      0052cde9    call 0056DA30h"
"	      0052cdee    add esp,0Ch"
"	      0052cdf1    jmp near ptr 0052CDFBh"
"	      0052cdf6    jmp near ptr 0052CDFBh"
"	      0052cdfb    jmp near ptr 0052CE00h"
"	      0052ce00    mov eax,[ebp-54h]"
"	      0052ce03    mov [ebp-50h],eax"
);
// LINE 1948:
	asm( 
"	      0052ce06    cmp dword ptr [ebp-50h],0"
"	      0052ce0a    jne near ptr 0052CE2Ch"
"	      0052ce10    push 79Ch"
"	      0052ce15    push 5B77B0h"
"	      0052ce1a    push 5B77D4h"
"	      0052ce1f    call 0056DA30h"
"	      0052ce24    add esp,0Ch"
"	      0052ce27    jmp near ptr 0052CE31h"
"	      0052ce2c    jmp near ptr 0052CE31h"
);
// LINE 1951:
	asm( 
"	      0052ce31    mov eax,[ebp-50h]"
"	      0052ce34    movsx eax,word ptr [eax+2]"
"	      0052ce38    shl eax,10h"
"	      0052ce3b    mov ecx,[ebp-58h]"
"	      0052ce3e    sub eax,[ecx+70h]"
"	      0052ce41    mov [ebp-4Ch],eax"
);
// LINE 1952:
	asm( 
"	      0052ce44    mov eax,[ebp-50h]"
"	      0052ce47    movsx eax,word ptr [eax+6]"
"	      0052ce4b    shl eax,10h"
"	      0052ce4e    mov ecx,[ebp-58h]"
"	      0052ce51    sub eax,[ecx+78h]"
"	      0052ce54    mov [ebp-44h],eax"
);
// LINE 1953:
	asm( 
"	      0052ce57    mov dword ptr [ebp-48h],0"
);
// LINE 1956:
	asm( 
"	      0052ce5e    lea eax,[ebp-4Ch]"
"	      0052ce61    push eax"
"	      0052ce62    call 004CA1E3h"
"	      0052ce67    add esp,4"
);
// LINE 1959:
	asm( 
"	      0052ce6a    lea eax,[ebp-40h]"
"	      0052ce6d    push eax"
"	      0052ce6e    call 004D1FF1h"
"	      0052ce73    add esp,4"
);
// LINE 1960:
	asm( 
"	      0052ce76    lea eax,[ebp-40h]"
"	      0052ce79    push eax"
"	      0052ce7a    mov ebx,12C0000h"
"	      0052ce7f    call 0056EC50h"
"	      0052ce84    mov ecx,258h"
"	      0052ce89    movsx eax,ax"
"	      0052ce8c    cdq"
"	      0052ce8d    idiv ecx"
"	      0052ce8f    mov eax,edx"
"	      0052ce91    shl eax,10h"
"	      0052ce94    sub ebx,eax"
"	      0052ce96    push ebx"
"	      0052ce97    call 004D201Ch"
"	      0052ce9c    add esp,8"
);
// LINE 1961:
	asm( 
"	      0052ce9f    lea eax,[ebp-40h]"
"	      0052cea2    push eax"
"	      0052cea3    mov eax,[ebp-58h]"
"	      0052cea6    add eax,8"
"	      0052cea9    push eax"
"	      0052ceaa    lea eax,[ebp-4Ch]"
"	      0052cead    push eax"
"	      0052ceae    call 004D2094h"
"	      0052ceb3    add esp,0Ch"
);
// LINE 1963:
	asm( 
"	      0052ceb6    mov eax,[ebp-58h]"
"	      0052ceb9    movsx eax,word ptr [eax+64h]"
"	      0052cebd    test al,1"
"	      0052cebf    je near ptr 0052CEDBh"
);
// LINE 1965:
	asm( 
"	      0052cec5    mov eax,[ebp-58h]"
"	      0052cec8    add eax,8"
"	      0052cecb    push eax"
"	      0052cecc    mov eax,[ebp-58h]"
"	      0052cecf    add eax,7Ch"
"	      0052ced2    push eax"
"	      0052ced3    call 004CAEFBh"
"	      0052ced8    add esp,8"
);
// LINE 1967:
	asm( 
"	      0052cedb    jmp near ptr 0052CEE0h"
"	      0052cee0    pop edi"
"	      0052cee1    pop esi"
"	      0052cee2    pop ebx"
"	      0052cee3    leave"
"	      0052cee4    ret"
);
}

// FUNCTION: COPTER_D 0x0052cee5
void PlaneClass::AdjustNextAltitude() {
	struct _CELL_INFO* cellPointer;
	struct Point2d nextcell;
	int32_t alt;
	int32_t altdiff;
	struct Point3d loc;
	int32_t[4][4] mat;

// LINE 1986:
	asm( 
"	      0052cee5    push ebp"
"	      0052cee6    mov ebp,esp"
"	      0052cee8    sub esp,6Ch"
"	      0052ceeb    push ebx"
"	      0052ceec    push esi"
"	      0052ceed    push edi"
"	      0052ceee    mov [ebp-6Ch],ecx"
);
// LINE 1995:
	asm( 
"	      0052cef1    mov eax,[ebp-6Ch]"
"	      0052cef4    cmp dword ptr [eax+54h],12Eh"
"	      0052cefb    jne near ptr 0052CF0Bh"
"	      0052cf01    jmp near ptr 0052CF97h"
"	      0052cf06    jmp near ptr 0052CF1Ah"
"	      0052cf0b    jmp near ptr 0052CF1Ah"
"	      0052cf10    cmp dword ptr [ebp-64h],0"
"	      0052cf14    je near ptr 0052CF97h"
);
// LINE 1997:
	asm( 
"	      0052cf1a    call 0056EC50h"
"	      0052cf1f    movsx eax,ax"
"	      0052cf22    cdq"
"	      0052cf23    xor eax,edx"
"	      0052cf25    sub eax,edx"
"	      0052cf27    and eax,7"
"	      0052cf2a    xor eax,edx"
"	      0052cf2c    sub eax,edx"
"	      0052cf2e    jne near ptr 0052CF97h"
);
// LINE 1999:
	asm( 
"	      0052cf34    lea eax,[ebp-40h]"
"	      0052cf37    push eax"
"	      0052cf38    call 004D1FF1h"
"	      0052cf3d    add esp,4"
);
// LINE 2000:
	asm( 
"	      0052cf40    lea eax,[ebp-40h]"
"	      0052cf43    push eax"
"	      0052cf44    mov ebx,320h"
"	      0052cf49    call 0056EC50h"
"	      0052cf4e    mov ecx,640h"
"	      0052cf53    movsx eax,ax"
"	      0052cf56    cdq"
"	      0052cf57    idiv ecx"
"	      0052cf59    sub ebx,edx"
"	      0052cf5b    shl ebx,10h"
"	      0052cf5e    push ebx"
"	      0052cf5f    call 004D201Ch"
"	      0052cf64    add esp,8"
);
// LINE 2001:
	asm( 
"	      0052cf67    lea eax,[ebp-40h]"
"	      0052cf6a    push eax"
"	      0052cf6b    lea eax,[ebp-4Ch]"
"	      0052cf6e    push eax"
"	      0052cf6f    mov eax,[ebp-6Ch]"
"	      0052cf72    add eax,8"
"	      0052cf75    push eax"
"	      0052cf76    call 004D2094h"
"	      0052cf7b    add esp,0Ch"
);
// LINE 2002:
	asm( 
"	      0052cf7e    lea eax,[ebp-4Ch]"
"	      0052cf81    mov ecx,[ebp-6Ch]"
"	      0052cf84    add ecx,8"
"	      0052cf87    mov edx,[eax]"
"	      0052cf89    mov [ecx],edx"
"	      0052cf8b    mov edx,[eax+4]"
"	      0052cf8e    mov [ecx+4],edx"
"	      0052cf91    mov eax,[eax+8]"
"	      0052cf94    mov [ecx+8],eax"
);
// LINE 2008:
	asm( 
"	      0052cf97    mov eax,[ebp-6Ch]"
"	      0052cf9a    mov eax,[eax+70h]"
"	      0052cf9d    mov ecx,[ebp-6Ch]"
"	      0052cfa0    mov ecx,[ecx+8]"
"	      0052cfa3    shl ecx,5"
"	      0052cfa6    add eax,ecx"
"	      0052cfa8    mov [ebp-4Ch],eax"
);
// LINE 2009:
	asm( 
"	      0052cfab    mov eax,[ebp-6Ch]"
"	      0052cfae    mov eax,[eax+10h]"
"	      0052cfb1    shl eax,5"
"	      0052cfb4    mov ecx,[ebp-6Ch]"
"	      0052cfb7    add eax,[ecx+78h]"
"	      0052cfba    mov [ebp-44h],eax"
);
// LINE 2011:
	asm( 
"	      0052cfbd    mov eax,[ebp-4Ch]"
"	      0052cfc0    add eax,20000000h"
"	      0052cfc5    sar eax,16h"
"	      0052cfc8    mov [ebp-5Ch],eax"
);
// LINE 2012:
	asm( 
"	      0052cfcb    mov eax,20000000h"
"	      0052cfd0    sub eax,[ebp-44h]"
"	      0052cfd3    sar eax,16h"
"	      0052cfd6    mov [ebp-58h],eax"
);
// LINE 2014:
	asm( 
"	      0052cfd9    mov eax,[ebp-58h]"
"	      0052cfdc    and eax,0FFh"
"	      0052cfe1    mov ecx,[ebp-5Ch]"
"	      0052cfe4    and ecx,0FFh"
"	      0052cfea    shl ecx,0Ah"
"	      0052cfed    mov eax,[ecx+eax*4+67ED30h]"
"	      0052cff4    mov [ebp-68h],eax"
"	      0052cff7    cmp dword ptr [ebp-68h],0"
"	      0052cffb    jne near ptr 0052D01Dh"
"	      0052d001    push 0D0h"
"	      0052d006    push 5B780Ch"
"	      0052d00b    push 5B57B8h"
"	      0052d010    call 0056DA30h"
"	      0052d015    add esp,0Ch"
"	      0052d018    jmp near ptr 0052D022h"
"	      0052d01d    jmp near ptr 0052D022h"
"	      0052d022    jmp near ptr 0052D027h"
"	      0052d027    mov eax,[ebp-68h]"
"	      0052d02a    mov [ebp-60h],eax"
);
// LINE 2016:
	asm( 
"	      0052d02d    mov eax,[ebp-60h]"
"	      0052d030    push eax"
"	      0052d031    call 004F5A0Ch"
"	      0052d036    add esp,4"
"	      0052d039    mov [ebp-54h],eax"
);
// LINE 2017:
	asm( 
"	      0052d03c    cmp dword ptr [ebp-54h],15E0000h"
"	      0052d043    jge near ptr 0052D050h"
);
// LINE 2018:
	asm( 
"	      0052d049    mov dword ptr [ebp-54h],15E0000h"
);
// LINE 2023:
	asm( 
"	      0052d050    mov eax,[ebp-60h]"
"	      0052d053    movsx eax,word ptr [eax+4]"
"	      0052d057    shl eax,10h"
"	      0052d05a    add eax,[ebp-54h]"
"	      0052d05d    add eax,1E0000h"
"	      0052d062    mov ecx,[ebp-6Ch]"
"	      0052d065    sub eax,[ecx+74h]"
"	      0052d068    mov [ebp-50h],eax"
);
// LINE 2024:
	asm( 
"	      0052d06b    mov eax,[ebp-50h]"
"	      0052d06e    sar eax,4"
"	      0052d071    mov ecx,[ebp-6Ch]"
"	      0052d074    mov [ecx+38h],eax"
);
// LINE 2029:
	asm( 
"	      0052d077    mov eax,[ebp-6Ch]"
"	      0052d07a    mov dword ptr [eax+14h],200000h"
);
// LINE 2034:
	asm( 
"	      0052d081    jmp near ptr 0052D086h"
"	      0052d086    pop edi"
"	      0052d087    pop esi"
"	      0052d088    pop ebx"
"	      0052d089    leave"
"	      0052d08a    ret"
);
}

// FUNCTION: COPTER_D 0x0052d08b
void PlaneClass::BeamToWithinCameraRange() {
	int32_t foundcell;
	int32_t stop_now;
	int32_t curr_dir;
	int32_t currentFlag;
	int32_t i;
	int32_t y;
	int32_t x;
	struct Point2d beampoint;
	struct Point3d vec;
	int32_t spiral_dist;
	int32_t curr_dist;
	int32_t ydir;
	int32_t xdir;

// LINE 2054:
	asm( 
"	      0052d08b    push ebp"
"	      0052d08c    mov ebp,esp"
"	      0052d08e    sub esp,50h"
"	      0052d091    push ebx"
"	      0052d092    push esi"
"	      0052d093    push edi"
"	      0052d094    mov [ebp-48h],ecx"
);
// LINE 2057:
	asm( 
"	      0052d097    mov dword ptr [ebp-0Ch],0"
);
// LINE 2058:
	asm( 
"	      0052d09e    mov dword ptr [ebp-38h],0FFFFFFFFh"
);
// LINE 2060:
	asm( 
"	      0052d0a5    mov dword ptr [ebp-3Ch],0"
);
// LINE 2061:
	asm( 
"	      0052d0ac    mov dword ptr [ebp-10h],7"
);
// LINE 2063:
	asm( 
"	      0052d0b3    mov dword ptr [ebp-40h],0"
);
// LINE 2067:
	asm( 
"	      0052d0ba    mov eax,6C1210h"
"	      0052d0bf    add eax,14h"
"	      0052d0c2    lea ecx,[ebp-1Ch]"
"	      0052d0c5    mov edx,[eax]"
"	      0052d0c7    mov [ecx],edx"
"	      0052d0c9    mov edx,[eax+4]"
"	      0052d0cc    mov [ecx+4],edx"
"	      0052d0cf    mov eax,[eax+8]"
"	      0052d0d2    mov [ecx+8],eax"
);
// LINE 2069:
	asm( 
"	      0052d0d5    mov eax,[ebp-48h]"
"	      0052d0d8    mov dword ptr [eax+34h],0"
);
// LINE 2075:
	asm( 
"	      0052d0df    call 0056EC50h"
"	      0052d0e4    movsx eax,ax"
"	      0052d0e7    cdq"
"	      0052d0e8    xor eax,edx"
"	      0052d0ea    sub eax,edx"
"	      0052d0ec    and eax,7"
"	      0052d0ef    xor eax,edx"
"	      0052d0f1    sub eax,edx"
"	      0052d0f3    mov [ebp-4Ch],eax"
"	      0052d0f6    jmp near ptr 0052D1D8h"
);
// LINE 2079:
	asm( 
"	      0052d0fb    mov eax,[ebp-14h]"
"	      0052d0fe    mov [ebp-18h],eax"
);
// LINE 2080:
	asm( 
"	      0052d101    mov eax,[ebp-1Ch]"
"	      0052d104    neg eax"
"	      0052d106    mov [ebp-14h],eax"
);
// LINE 2081:
	asm( 
"	      0052d109    mov eax,[ebp-18h]"
"	      0052d10c    mov [ebp-1Ch],eax"
);
// LINE 2083:
	asm( 
"	      0052d10f    mov eax,[ebp-1Ch]"
"	      0052d112    mov ecx,ds:[6663A0h]"
"	      0052d118    sar ecx,1"
"	      0052d11b    imul eax,ecx"
"	      0052d11e    mov [ebp-1Ch],eax"
);
// LINE 2084:
	asm( 
"	      0052d121    mov eax,[ebp-14h]"
"	      0052d124    mov ecx,ds:[6663A0h]"
"	      0052d12a    sar ecx,1"
"	      0052d12d    imul eax,ecx"
"	      0052d130    mov [ebp-14h],eax"
);
// LINE 2085:
	asm( 
"	      0052d133    jmp near ptr 0052D1FBh"
);
// LINE 2088:
	asm( 
"	      0052d138    mov eax,[ebp-14h]"
"	      0052d13b    neg eax"
"	      0052d13d    mov [ebp-18h],eax"
);
// LINE 2089:
	asm( 
"	      0052d140    mov eax,[ebp-1Ch]"
"	      0052d143    mov [ebp-14h],eax"
);
// LINE 2090:
	asm( 
"	      0052d146    mov eax,[ebp-18h]"
"	      0052d149    mov [ebp-1Ch],eax"
);
// LINE 2092:
	asm( 
"	      0052d14c    mov eax,[ebp-1Ch]"
"	      0052d14f    mov ecx,ds:[6663A0h]"
"	      0052d155    sar ecx,1"
"	      0052d158    imul eax,ecx"
"	      0052d15b    mov [ebp-1Ch],eax"
);
// LINE 2093:
	asm( 
"	      0052d15e    mov eax,[ebp-14h]"
"	      0052d161    mov ecx,ds:[6663A0h]"
"	      0052d167    sar ecx,1"
"	      0052d16a    imul eax,ecx"
"	      0052d16d    mov [ebp-14h],eax"
);
// LINE 2094:
	asm( 
"	      0052d170    jmp near ptr 0052D1FBh"
);
// LINE 2097:
	asm( 
"	      0052d175    mov eax,[ebp-1Ch]"
"	      0052d178    neg eax"
"	      0052d17a    mov [ebp-1Ch],eax"
);
// LINE 2098:
	asm( 
"	      0052d17d    mov eax,[ebp-14h]"
"	      0052d180    neg eax"
"	      0052d182    mov [ebp-14h],eax"
);
// LINE 2100:
	asm( 
"	      0052d185    mov eax,[ebp-1Ch]"
"	      0052d188    mov ecx,ds:[6663A0h]"
"	      0052d18e    sar ecx,1"
"	      0052d191    imul eax,ecx"
"	      0052d194    mov [ebp-1Ch],eax"
);
// LINE 2101:
	asm( 
"	      0052d197    mov eax,[ebp-14h]"
"	      0052d19a    mov ecx,ds:[6663A0h]"
"	      0052d1a0    sar ecx,1"
"	      0052d1a3    imul eax,ecx"
"	      0052d1a6    mov [ebp-14h],eax"
);
// LINE 2102:
	asm( 
"	      0052d1a9    jmp near ptr 0052D1FBh"
);
// LINE 2106:
	asm( 
"	      0052d1ae    mov eax,ds:[6663A0h]"
"	      0052d1b3    sar eax,1"
"	      0052d1b6    inc eax"
"	      0052d1b7    imul eax,[ebp-1Ch]"
"	      0052d1bb    mov [ebp-1Ch],eax"
);
// LINE 2107:
	asm( 
"	      0052d1be    mov eax,ds:[6663A0h]"
"	      0052d1c3    sar eax,1"
"	      0052d1c6    inc eax"
"	      0052d1c7    imul eax,[ebp-14h]"
"	      0052d1cb    mov [ebp-14h],eax"
);
// LINE 2108:
	asm( 
"	      0052d1ce    jmp near ptr 0052D1FBh"
);
// LINE 2109:
	asm( 
"	      0052d1d3    jmp near ptr 0052D1FBh"
"	      0052d1d8    cmp dword ptr [ebp-4Ch],0"
"	      0052d1dc    je near ptr 0052D0FBh"
"	      0052d1e2    cmp dword ptr [ebp-4Ch],1"
"	      0052d1e6    je near ptr 0052D138h"
"	      0052d1ec    cmp dword ptr [ebp-4Ch],2"
"	      0052d1f0    je near ptr 0052D175h"
"	      0052d1f6    jmp near ptr 0052D1AEh"
);
// LINE 2111:
	asm( 
"	      0052d1fb    shl dword ptr [ebp-1Ch],6"
);
// LINE 2112:
	asm( 
"	      0052d1ff    shl dword ptr [ebp-14h],6"
);
// LINE 2114:
	asm( 
"	      0052d203    mov eax,ds:[6C126Ch]"
"	      0052d208    add eax,[ebp-1Ch]"
"	      0052d20b    add eax,20000000h"
"	      0052d210    sar eax,16h"
"	      0052d213    mov [ebp-28h],eax"
);
// LINE 2115:
	asm( 
"	      0052d216    mov eax,20000000h"
"	      0052d21b    mov ecx,ds:[6C1274h]"
"	      0052d221    add ecx,[ebp-14h]"
"	      0052d224    sub eax,ecx"
"	      0052d226    sar eax,16h"
"	      0052d229    mov [ebp-2Ch],eax"
);
// LINE 2118:
	asm( 
"	      0052d22c    cmp dword ptr [ebp-28h],3"
"	      0052d230    jl near ptr 0052D254h"
"	      0052d236    cmp dword ptr [ebp-28h],7Dh"
"	      0052d23a    jg near ptr 0052D254h"
"	      0052d240    cmp dword ptr [ebp-2Ch],3"
"	      0052d244    jl near ptr 0052D254h"
"	      0052d24a    cmp dword ptr [ebp-2Ch],7Dh"
"	      0052d24e    jle near ptr 0052D259h"
);
// LINE 2119:
	asm( 
"	      0052d254    jmp near ptr 0052D40Ch"
);
// LINE 2126:
	asm( 
"	      0052d259    inc dword ptr [ebp-38h]"
);
// LINE 2127:
	asm( 
"	      0052d25c    mov eax,[ebp-38h]"
"	      0052d25f    mov [ebp-50h],eax"
"	      0052d262    jmp near ptr 0052D2C5h"
);
// LINE 2131:
	asm( 
"	      0052d267    mov dword ptr [ebp-38h],0"
);
// LINE 2132:
	asm( 
"	      0052d26e    inc dword ptr [ebp-0Ch]"
);
// LINE 2133:
	asm( 
"	      0052d271    mov dword ptr [ebp-4],0"
);
// LINE 2134:
	asm( 
"	      0052d278    mov dword ptr [ebp-8],0FFFFFFFFh"
);
// LINE 2135:
	asm( 
"	      0052d27f    jmp near ptr 0052D2EDh"
);
// LINE 2137:
	asm( 
"	      0052d284    mov dword ptr [ebp-4],1"
);
// LINE 2138:
	asm( 
"	      0052d28b    mov dword ptr [ebp-8],0"
);
// LINE 2139:
	asm( 
"	      0052d292    jmp near ptr 0052D2EDh"
);
// LINE 2141:
	asm( 
"	      0052d297    inc dword ptr [ebp-0Ch]"
);
// LINE 2142:
	asm( 
"	      0052d29a    mov dword ptr [ebp-4],0"
);
// LINE 2143:
	asm( 
"	      0052d2a1    mov dword ptr [ebp-8],1"
);
// LINE 2144:
	asm( 
"	      0052d2a8    jmp near ptr 0052D2EDh"
);
// LINE 2146:
	asm( 
"	      0052d2ad    mov dword ptr [ebp-4],0FFFFFFFFh"
);
// LINE 2147:
	asm( 
"	      0052d2b4    mov dword ptr [ebp-8],0"
);
// LINE 2148:
	asm( 
"	      0052d2bb    jmp near ptr 0052D2EDh"
);
// LINE 2149:
	asm( 
"	      0052d2c0    jmp near ptr 0052D2EDh"
"	      0052d2c5    cmp dword ptr [ebp-50h],4"
"	      0052d2c9    ja near ptr 0052D2EDh"
"	      0052d2cf    mov eax,[ebp-50h]"
"	      0052d2d2    jmp dword ptr [eax*4+52D2D9h]"
"	      0052d2d9    rcl byte ptr [bp+si],cl"
"	      0052d2dd    test dl,dl"
"	      0052d2df    push edx"
"	      0052d2e0    add [edi-52FFAD2Eh],dl"
"	      0052d2e6    rcl byte ptr [edx],cl"
"	      0052d2e9    rcl byte ptr [bp+si],cl"
);
// LINE 2153:
	asm( 
"	      0052d2ed    mov eax,[ebp-0Ch]"
"	      0052d2f0    cmp [ebp-10h],eax"
"	      0052d2f3    jne near ptr 0052D303h"
);
// LINE 2155:
	asm( 
"	      0052d2f9    dec dword ptr [ebp-0Ch]"
);
// LINE 2156:
	asm( 
"	      0052d2fc    mov dword ptr [ebp-3Ch],1"
);
// LINE 2160:
	asm( 
"	      0052d303    mov dword ptr [ebp-30h],0"
"	      0052d30a    jmp near ptr 0052D312h"
"	      0052d30f    inc dword ptr [ebp-30h]"
"	      0052d312    mov eax,[ebp-30h]"
"	      0052d315    cmp [ebp-0Ch],eax"
"	      0052d318    jle near ptr 0052D339h"
);
// LINE 2162:
	asm( 
"	      0052d31e    mov eax,[ebp-28h]"
"	      0052d321    mov [ebp-24h],eax"
);
// LINE 2163:
	asm( 
"	      0052d324    mov eax,[ebp-2Ch]"
"	      0052d327    mov [ebp-20h],eax"
);
// LINE 2164:
	asm( 
"	      0052d32a    jmp near ptr 0052D407h"
"	      0052d32f    jmp near ptr 0052D352h"
);
// LINE 2167:
	asm( 
"	      0052d334    jmp near ptr 0052D30Fh"
);
// LINE 2169:
	asm( 
"	      0052d339    cmp dword ptr [ebp-3Ch],1"
"	      0052d33d    jne near ptr 0052D348h"
);
// LINE 2171:
	asm( 
"	      0052d343    jmp near ptr 0052D34Dh"
);
// LINE 2173:
	asm( 
"	      0052d348    jmp near ptr 0052D259h"
);
// LINE 2176:
	asm( 
"	      0052d34d    jmp near ptr 0052D40Ch"
);
// LINE 2182:
foundCell:
	asm( 
"	      0052d352    mov dword ptr [ebp-34h],3"
"	      0052d359    jmp near ptr 0052D361h"
"	      0052d35e    inc dword ptr [ebp-34h]"
"	      0052d361    cmp dword ptr [ebp-34h],4"
"	      0052d365    jge near ptr 0052D37Bh"
);
// LINE 2184:
	asm( 
"	      0052d36b    mov eax,[ebp-34h]"
"	      0052d36e    mov ecx,[ebp-48h]"
"	      0052d371    mov byte ptr [eax+ecx+4],0"
);
// LINE 2185:
	asm( 
"	      0052d376    jmp near ptr 0052D35Eh"
);
// LINE 2187:
	asm( 
"	      0052d37b    mov eax,[ebp-48h]"
"	      0052d37e    mov dword ptr [eax+18h],0"
);
// LINE 2190:
	asm( 
"	      0052d385    mov eax,[ebp-48h]"
"	      0052d388    mov byte ptr [eax+5],1"
);
// LINE 2195:
	asm( 
"	      0052d38c    mov eax,[ebp-24h]"
"	      0052d38f    mov ecx,[ebp-48h]"
"	      0052d392    mov [ecx+20h],eax"
"	      0052d395    mov eax,[ebp-20h]"
"	      0052d398    mov ecx,[ebp-48h]"
"	      0052d39b    mov [ecx+24h],eax"
"	      0052d39e    jmp near ptr 0052D3A3h"
);
// LINE 2199:
	asm( 
"	      0052d3a3    jmp near ptr 0052D3A8h"
"	      0052d3a8    mov eax,[ebp-48h]"
"	      0052d3ab    add eax,20h"
"	      0052d3ae    push eax"
"	      0052d3af    mov ecx,[ebp-48h]"
"	      0052d3b2    call 0052CBE1h"
);
// LINE 2203:
	asm( 
"	      0052d3b7    mov ecx,[ebp-48h]"
"	      0052d3ba    call 0052CC9Dh"
);
// LINE 2204:
	asm( 
"	      0052d3bf    mov ecx,[ebp-48h]"
"	      0052d3c2    call 0052CDA1h"
);
// LINE 2205:
	asm( 
"	      0052d3c7    mov ecx,[ebp-48h]"
"	      0052d3ca    call 0052CEE5h"
);
// LINE 2208:
	asm( 
"	      0052d3cf    mov eax,[ebp-48h]"
"	      0052d3d2    cmp dword ptr [eax+54h],12Eh"
"	      0052d3d9    jne near ptr 0052D3E4h"
"	      0052d3df    jmp near ptr 0052D3F8h"
"	      0052d3e4    jmp near ptr 0052D402h"
"	      0052d3e9    jmp near ptr 0052D3F8h"
"	      0052d3ee    cmp dword ptr [ebp-44h],0"
"	      0052d3f2    jne near ptr 0052D402h"
);
// LINE 2210:
	asm( 
"	      0052d3f8    mov eax,[ebp-48h]"
"	      0052d3fb    mov dword ptr [eax+50h],0"
);
// LINE 2213:
	asm( 
"	      0052d402    jmp near ptr 0052D40Ch"
"	      0052d407    jmp near ptr 0052D352h"
"	      0052d40c    pop edi"
"	      0052d40d    pop esi"
"	      0052d40e    pop ebx"
"	      0052d40f    leave"
"	      0052d410    ret"
);
}

// FUNCTION: COPTER_D 0x0052d411
void PlaneClass::UnPlacePlane() {
// LINE 2233:
	asm( 
"	      0052d411    push ebp"
"	      0052d412    mov ebp,esp"
"	      0052d414    sub esp,4"
"	      0052d417    push ebx"
"	      0052d418    push esi"
"	      0052d419    push edi"
"	      0052d41a    mov [ebp-4],ecx"
);
// LINE 2236:
	asm( 
"	      0052d41d    jmp near ptr 0052D422h"
"	      0052d422    mov eax,[ebp-4]"
"	      0052d425    movsx eax,byte ptr [eax+5]"
"	      0052d429    test eax,eax"
"	      0052d42b    je near ptr 0052D44Ch"
);
// LINE 2238:
	asm( 
"	      0052d431    jmp near ptr 0052D436h"
"	      0052d436    mov eax,[ebp-4]"
"	      0052d439    add eax,20h"
"	      0052d43c    push eax"
"	      0052d43d    mov ecx,[ebp-4]"
"	      0052d440    call 0052CACBh"
);
// LINE 2239:
	asm( 
"	      0052d445    mov eax,[ebp-4]"
"	      0052d448    mov byte ptr [eax+5],0"
);
// LINE 2241:
	asm( 
"	      0052d44c    jmp near ptr 0052D451h"
"	      0052d451    pop edi"
"	      0052d452    pop esi"
"	      0052d453    pop ebx"
"	      0052d454    leave"
"	      0052d455    ret"
);
}

// FUNCTION: COPTER_D 0x0052d456
int32_t PlaneClass::InitializeInstance(long mapx, long mapy, int32_t instanceID) {
	int32_t object;
	struct VRObjInfo objectInfo;

// LINE 2267:
	asm( 
"	      0052d456    push ebp"
"	      0052d457    mov ebp,esp"
"	      0052d459    sub esp,30h"
"	      0052d45c    push ebx"
"	      0052d45d    push esi"
"	      0052d45e    push edi"
"	      0052d45f    mov [ebp-2Ch],ecx"
);
// LINE 2272:
	asm( 
"	      0052d462    mov eax,[ebp-2Ch]"
"	      0052d465    mov dword ptr [eax+60h],0"
);
// LINE 2294:
	asm( 
"	      0052d46c    mov eax,[ebp-2Ch]"
"	      0052d46f    mov eax,[eax+54h]"
"	      0052d472    push eax"
"	      0052d473    call 004D8821h"
"	      0052d478    add esp,4"
"	      0052d47b    mov [ebp-28h],eax"
);
// LINE 2296:
	asm( 
"	      0052d47e    cmp dword ptr [ebp-28h],0"
"	      0052d482    jne near ptr 0052D4B0h"
);
// LINE 2300:
	asm( 
"	      0052d488    push 8FCh"
"	      0052d48d    push 5B77E0h"
"	      0052d492    push 5B7804h"
"	      0052d497    call 0056DA30h"
"	      0052d49c    add esp,0Ch"
"	      0052d49f    jmp near ptr 0052D4A9h"
"	      0052d4a4    jmp near ptr 0052D4A9h"
);
// LINE 2302:
	asm( 
"	      0052d4a9    xor eax,eax"
"	      0052d4ab    jmp near ptr 0052D611h"
);
// LINE 2305:
	asm( 
"	      0052d4b0    mov eax,[ebp-28h]"
"	      0052d4b3    mov ecx,[ebp-2Ch]"
"	      0052d4b6    mov [ecx+60h],eax"
);
// LINE 2363:
	asm( 
"	      0052d4b9    mov eax,[ebp+10h]"
"	      0052d4bc    mov ecx,[ebp-2Ch]"
"	      0052d4bf    mov [ecx+66h],ax"
);
// LINE 2364:
	asm( 
"	      0052d4c3    mov eax,[ebp-2Ch]"
"	      0052d4c6    mov word ptr [eax+64h],101h"
);
// LINE 2365:
	asm( 
"	      0052d4cc    mov eax,[ebp-2Ch]"
"	      0052d4cf    add eax,7Ch"
"	      0052d4d2    push eax"
"	      0052d4d3    call 004D1FF1h"
"	      0052d4d8    add esp,4"
);
// LINE 2367:
	asm( 
"	      0052d4db    lea eax,[ebp-24h]"
"	      0052d4de    push eax"
"	      0052d4df    mov eax,[ebp-28h]"
"	      0052d4e2    push eax"
"	      0052d4e3    call 004D8859h"
"	      0052d4e8    add esp,8"
);
// LINE 2368:
	asm( 
"	      0052d4eb    mov eax,[ebp-18h]"
"	      0052d4ee    mov ecx,[ebp-2Ch]"
"	      0052d4f1    mov [ecx+68h],eax"
);
// LINE 2389:
	asm( 
"	      0052d4f4    mov eax,[ebp-2Ch]"
"	      0052d4f7    mov dword ptr [eax+34h],3C0000h"
);
// LINE 2390:
	asm( 
"	      0052d4fe    mov eax,[ebp+8]"
"	      0052d501    mov ecx,[ebp-2Ch]"
"	      0052d504    mov [ecx+20h],eax"
);
// LINE 2391:
	asm( 
"	      0052d507    mov eax,[ebp+0Ch]"
"	      0052d50a    mov ecx,[ebp-2Ch]"
"	      0052d50d    mov [ecx+24h],eax"
);
// LINE 2392:
	asm( 
"	      0052d510    mov eax,[ebp+8]"
"	      0052d513    mov ecx,[ebp-2Ch]"
"	      0052d516    mov [ecx+28h],eax"
);
// LINE 2393:
	asm( 
"	      0052d519    mov eax,[ebp+0Ch]"
"	      0052d51c    mov ecx,[ebp-2Ch]"
"	      0052d51f    mov [ecx+2Ch],eax"
);
// LINE 2394:
	asm( 
"	      0052d522    mov eax,[ebp-2Ch]"
"	      0052d525    mov dword ptr [eax+1Ch],780000h"
);
// LINE 2395:
	asm( 
"	      0052d52c    mov eax,[ebp-2Ch]"
"	      0052d52f    mov dword ptr [eax+4Ch],1"
);
// LINE 2396:
	asm( 
"	      0052d536    mov eax,[ebp-2Ch]"
"	      0052d539    mov dword ptr [eax+50h],0"
);
// LINE 2397:
	asm( 
"	      0052d540    mov eax,[ebp-2Ch]"
"	      0052d543    mov dword ptr [eax+48h],0B40000h"
);
// LINE 2401:
	asm( 
"	      0052d54a    mov eax,[ebp-2Ch]"
"	      0052d54d    mov eax,[eax+54h]"
"	      0052d550    mov [ebp-30h],eax"
"	      0052d553    jmp near ptr 0052D57Bh"
);
// LINE 2404:
	asm( 
"	      0052d558    mov eax,[ebp-2Ch]"
"	      0052d55b    mov dword ptr [eax+30h],3C0000h"
);
// LINE 2405:
	asm( 
"	      0052d562    jmp near ptr 0052D59Ah"
);
// LINE 2408:
	asm( 
"	      0052d567    mov eax,[ebp-2Ch]"
"	      0052d56a    mov dword ptr [eax+30h],3C0000h"
);
// LINE 2409:
	asm( 
"	      0052d571    jmp near ptr 0052D59Ah"
);
// LINE 2410:
	asm( 
"	      0052d576    jmp near ptr 0052D59Ah"
"	      0052d57b    cmp dword ptr [ebp-30h],12Eh"
"	      0052d582    je near ptr 0052D558h"
"	      0052d588    cmp dword ptr [ebp-30h],17Ch"
"	      0052d58f    je near ptr 0052D567h"
"	      0052d595    jmp near ptr 0052D59Ah"
);
// LINE 2415:
	asm( 
"	      0052d59a    cmp dword ptr [ebp+8],0FFFFFFFFh"
"	      0052d59e    je near ptr 0052D5ECh"
"	      0052d5a4    cmp dword ptr [ebp+0Ch],0FFFFFFFFh"
"	      0052d5a8    je near ptr 0052D5ECh"
);
// LINE 2419:
	asm( 
"	      0052d5ae    mov eax,[ebp-2Ch]"
"	      0052d5b1    add eax,20h"
"	      0052d5b4    push eax"
"	      0052d5b5    mov ecx,[ebp-2Ch]"
"	      0052d5b8    call 0052CBE1h"
);
// LINE 2423:
	asm( 
"	      0052d5bd    mov ecx,[ebp-2Ch]"
"	      0052d5c0    call 0052CC9Dh"
);
// LINE 2424:
	asm( 
"	      0052d5c5    mov ecx,[ebp-2Ch]"
"	      0052d5c8    call 0052CDA1h"
);
// LINE 2425:
	asm( 
"	      0052d5cd    mov ecx,[ebp-2Ch]"
"	      0052d5d0    call 0052CEE5h"
);
// LINE 2429:
	asm( 
"	      0052d5d5    mov eax,[ebp-2Ch]"
"	      0052d5d8    mov eax,[eax]"
"	      0052d5da    mov ecx,[ebp-2Ch]"
"	      0052d5dd    call dword ptr [eax+8]"
);
// LINE 2433:
	asm( 
"	      0052d5e0    mov eax,[ebp-2Ch]"
"	      0052d5e3    mov byte ptr [eax+5],1"
);
// LINE 2435:
	asm( 
"	      0052d5e7    jmp near ptr 0052D5F3h"
);
// LINE 2439:
	asm( 
"	      0052d5ec    mov eax,[ebp-2Ch]"
"	      0052d5ef    mov byte ptr [eax+5],0"
);
// LINE 2448:
	asm( 
"	      0052d5f3    mov eax,[ebp-2Ch]"
"	      0052d5f6    mov ecx,[ebp+10h]"
"	      0052d5f9    mov [ecx*4+62B7A8h],eax"
);
// LINE 2451:
	asm( 
"	      0052d600    mov eax,[ebp-2Ch]"
"	      0052d603    mov byte ptr [eax+4],1"
);
// LINE 2453:
	asm( 
"	      0052d607    mov eax,1"
"	      0052d60c    jmp near ptr 0052D611h"
);
// LINE 2454:
	asm( 
"	      0052d611    pop edi"
"	      0052d612    pop esi"
"	      0052d613    pop ebx"
"	      0052d614    leave"
"	      0052d615    ret 0Ch"
);
}

// FUNCTION: COPTER_D 0x0052d618
void PlaneClass::HandleUFOStuff() {
	struct Point3d vec;

// LINE 2473:
	asm( 
"	      0052d618    push ebp"
"	      0052d619    mov ebp,esp"
"	      0052d61b    sub esp,10h"
"	      0052d61e    push ebx"
"	      0052d61f    push esi"
"	      0052d620    push edi"
"	      0052d621    mov [ebp-10h],ecx"
);
// LINE 2477:
	asm( 
"	      0052d624    mov eax,[ebp-10h]"
"	      0052d627    cmp dword ptr [eax+4Ch],0"
"	      0052d62b    je near ptr 0052D64Ch"
);
// LINE 2479:
	asm( 
"	      0052d631    mov eax,[ebp-10h]"
"	      0052d634    dec dword ptr [eax+4Ch]"
);
// LINE 2480:
	asm( 
"	      0052d637    mov eax,[ebp-10h]"
"	      0052d63a    cmp dword ptr [eax+4Ch],0"
"	      0052d63e    jne near ptr 0052D64Ch"
);
// LINE 2482:
	asm( 
"	      0052d644    mov ecx,[ebp-10h]"
"	      0052d647    call 0052DA3Ch"
);
// LINE 2487:
	asm( 
"	      0052d64c    xor eax,eax"
"	      0052d64e    sub eax,ds:[5B4760h]"
"	      0052d654    neg eax"
"	      0052d656    mov ecx,[ebp-10h]"
"	      0052d659    sub [ecx+48h],eax"
);
// LINE 2488:
	asm( 
"	      0052d65c    mov eax,[ebp-10h]"
"	      0052d65f    cmp dword ptr [eax+48h],0"
"	      0052d663    jge near ptr 0052D6B3h"
);
// LINE 2491:
	asm( 
"	      0052d669    mov dword ptr [ebp-4],0"
"	      0052d670    mov eax,[ebp-4]"
"	      0052d673    mov [ebp-0Ch],eax"
);
// LINE 2492:
	asm( 
"	      0052d676    mov dword ptr [ebp-8],0FFFF0000h"
);
// LINE 2494:
	asm( 
"	      0052d67d    mov eax,[ebp-10h]"
"	      0052d680    mov dword ptr [eax+48h],0B40000h"
);
// LINE 2504:
	asm( 
"	      0052d687    push 0FFFFFFFFh"
"	      0052d689    push 12C0000h"
"	      0052d68e    mov eax,[ebp-10h]"
"	      0052d691    add eax,58h"
"	      0052d694    push eax"
"	      0052d695    push 1"
"	      0052d697    lea eax,[ebp-0Ch]"
"	      0052d69a    push eax"
"	      0052d69b    mov eax,[ebp-10h]"
"	      0052d69e    add eax,70h"
"	      0052d6a1    push eax"
"	      0052d6a2    mov eax,[ebp-10h]"
"	      0052d6a5    add eax,20h"
"	      0052d6a8    push eax"
"	      0052d6a9    push 0Bh"
"	      0052d6ab    call 0051EEE5h"
"	      0052d6b0    add esp,20h"
);
// LINE 2506:
	asm( 
"	      0052d6b3    jmp near ptr 0052D6B8h"
"	      0052d6b8    pop edi"
"	      0052d6b9    pop esi"
"	      0052d6ba    pop ebx"
"	      0052d6bb    leave"
"	      0052d6bc    ret"
);
}

// FUNCTION: COPTER_D 0x0052d6bd
void CreatePlaneInstance(int32_t instanceID) {
// LINE 2553:
	asm( 
"	      0052d6bd    push ebp"
"	      0052d6be    mov ebp,esp"
"	      0052d6c0    push ebx"
"	      0052d6c1    push esi"
"	      0052d6c2    push edi"
);
// LINE 2554:
	asm( 
"	      0052d6c3    mov eax,[ebp+8]"
"	      0052d6c6    push eax"
"	      0052d6c7    call 0052B29Eh"
"	      0052d6cc    add esp,4"
);
// LINE 2555:
	asm( 
"	      0052d6cf    jmp near ptr 0052D6D4h"
"	      0052d6d4    pop edi"
"	      0052d6d5    pop esi"
"	      0052d6d6    pop ebx"
"	      0052d6d7    leave"
"	      0052d6d8    ret"
);
}

// FUNCTION: COPTER_D 0x0052d6d9
int32_t S3PlaneCrashWhenReady(long mission_id) {
// LINE 2573:
	asm( 
"	      0052d6d9    push ebp"
"	      0052d6da    mov ebp,esp"
"	      0052d6dc    push ebx"
"	      0052d6dd    push esi"
"	      0052d6de    push edi"
);
// LINE 2574:
	asm( 
"	      0052d6df    mov eax,[ebp+8]"
"	      0052d6e2    push eax"
"	      0052d6e3    call 0052B410h"
"	      0052d6e8    add esp,4"
"	      0052d6eb    jmp near ptr 0052D6F0h"
);
// LINE 2575:
	asm( 
"	      0052d6f0    pop edi"
"	      0052d6f1    pop esi"
"	      0052d6f2    pop ebx"
"	      0052d6f3    leave"
"	      0052d6f4    ret"
);
}

// FUNCTION: COPTER_D 0x0052d6f5
void ResetAllPlanes() {
// LINE 2596:
	asm( 
"	      0052d6f5    push ebp"
"	      0052d6f6    mov ebp,esp"
"	      0052d6f8    push ebx"
"	      0052d6f9    push esi"
"	      0052d6fa    push edi"
);
// LINE 2597:
	asm( 
"	      0052d6fb    call 0052B390h"
);
// LINE 2598:
	asm( 
"	      0052d700    jmp near ptr 0052D705h"
"	      0052d705    pop edi"
"	      0052d706    pop esi"
"	      0052d707    pop ebx"
"	      0052d708    leave"
"	      0052d709    ret"
);
}

// FUNCTION: COPTER_D 0x0052d70a
void ItterateAllPlanes() {
// LINE 2619:
	asm( 
"	      0052d70a    push ebp"
"	      0052d70b    mov ebp,esp"
"	      0052d70d    push ebx"
"	      0052d70e    push esi"
"	      0052d70f    push edi"
);
// LINE 2620:
	asm( 
"	      0052d710    call 0052B3D0h"
);
// LINE 2621:
	asm( 
"	      0052d715    jmp near ptr 0052D71Ah"
"	      0052d71a    pop edi"
"	      0052d71b    pop esi"
"	      0052d71c    pop ebx"
"	      0052d71d    leave"
"	      0052d71e    ret"
);
}

// FUNCTION: COPTER_D 0x0052d71f
void PlaneClass::HitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
// LINE 2632:
	asm( 
"	      0052d71f    push ebp"
"	      0052d720    mov ebp,esp"
"	      0052d722    sub esp,18h"
"	      0052d725    push ebx"
"	      0052d726    push esi"
"	      0052d727    push edi"
);
// LINE 2635:
	asm( 
"	      0052d728    mov eax,[ebp+8]"
"	      0052d72b    mov [ebp-18h],eax"
"	      0052d72e    jmp near ptr 0052D917h"
);
// LINE 2638:
	asm( 
"	      0052d733    jmp near ptr 0052D96Bh"
);
// LINE 2640:
	asm( 
"	      0052d738    jmp near ptr 0052D96Bh"
);
// LINE 2642:
	asm( 
"	      0052d73d    jmp near ptr 0052D96Bh"
);
// LINE 2644:
	asm( 
"	      0052d742    mov eax,[ebp+10h]"
"	      0052d745    movsx eax,word ptr [eax+0Eh]"
"	      0052d749    mov eax,[eax*4+62B7A8h]"
"	      0052d750    cmp dword ptr [eax+54h],12Eh"
"	      0052d757    jne near ptr 0052D767h"
"	      0052d75d    jmp near ptr 0052D7F3h"
"	      0052d762    jmp near ptr 0052D776h"
"	      0052d767    jmp near ptr 0052D776h"
"	      0052d76c    cmp dword ptr [ebp-4],0"
"	      0052d770    je near ptr 0052D7F3h"
);
// LINE 2646:
	asm( 
"	      0052d776    mov eax,[ebp+10h]"
"	      0052d779    movsx eax,word ptr [eax+0Eh]"
"	      0052d77d    mov eax,[eax*4+62B7A8h]"
"	      0052d784    mov dword ptr [eax+4Ch],3"
);
// LINE 2647:
	asm( 
"	      0052d78b    mov eax,[ebp+10h]"
"	      0052d78e    movsx eax,word ptr [eax+0Eh]"
"	      0052d792    mov ecx,[eax*4+62B7A8h]"
"	      0052d799    call 0052D9A1h"
);
// LINE 2648:
	asm( 
"	      0052d79e    mov eax,[ebp+10h]"
"	      0052d7a1    movsx eax,word ptr [eax+0Eh]"
"	      0052d7a5    mov eax,[eax*4+62B7A8h]"
"	      0052d7ac    inc dword ptr [eax+50h]"
);
// LINE 2649:
	asm( 
"	      0052d7af    mov eax,[ebp+10h]"
"	      0052d7b2    movsx eax,word ptr [eax+0Eh]"
"	      0052d7b6    mov eax,[eax*4+62B7A8h]"
"	      0052d7bd    cmp dword ptr [eax+50h],0Ah"
"	      0052d7c1    jl near ptr 0052D7EEh"
);
// LINE 2650:
	asm( 
"	      0052d7c7    mov eax,[ebp+10h]"
"	      0052d7ca    movsx eax,word ptr [eax+0Eh]"
"	      0052d7ce    mov eax,[eax*4+62B7A8h]"
"	      0052d7d5    mov [ebp-0Ch],eax"
"	      0052d7d8    mov eax,[ebp-0Ch]"
"	      0052d7db    mov byte ptr [eax+6],1"
"	      0052d7df    mov eax,[ebp-0Ch]"
"	      0052d7e2    mov dword ptr [eax+3Ch],0FFFFFFFFh"
"	      0052d7e9    jmp near ptr 0052D7EEh"
);
// LINE 2652:
	asm( 
"	      0052d7ee    jmp near ptr 0052D82Fh"
);
// LINE 2655:
	asm( 
"	      0052d7f3    mov eax,[ebp+10h]"
"	      0052d7f6    movsx eax,word ptr [eax+0Eh]"
"	      0052d7fa    mov eax,[eax*4+62B7A8h]"
"	      0052d801    mov dword ptr [eax+50h],1"
"	      0052d808    mov eax,[ebp+10h]"
"	      0052d80b    movsx eax,word ptr [eax+0Eh]"
"	      0052d80f    mov eax,[eax*4+62B7A8h]"
"	      0052d816    mov [ebp-10h],eax"
);
// LINE 2656:
	asm( 
"	      0052d819    mov eax,[ebp-10h]"
"	      0052d81c    mov byte ptr [eax+6],1"
"	      0052d820    mov eax,[ebp-10h]"
"	      0052d823    mov dword ptr [eax+3Ch],0FFFFFFFFh"
"	      0052d82a    jmp near ptr 0052D82Fh"
);
// LINE 2658:
	asm( 
"	      0052d82f    jmp near ptr 0052D96Bh"
);
// LINE 2660:
	asm( 
"	      0052d834    jmp near ptr 0052D96Bh"
);
// LINE 2662:
	asm( 
"	      0052d839    jmp near ptr 0052D96Bh"
);
// LINE 2664:
	asm( 
"	      0052d83e    jmp near ptr 0052D96Bh"
);
// LINE 2666:
	asm( 
"	      0052d843    mov eax,[ebp+10h]"
"	      0052d846    movsx eax,word ptr [eax+0Eh]"
"	      0052d84a    mov eax,[eax*4+62B7A8h]"
"	      0052d851    cmp dword ptr [eax+54h],12Eh"
"	      0052d858    jne near ptr 0052D868h"
"	      0052d85e    jmp near ptr 0052D8A4h"
"	      0052d863    jmp near ptr 0052D877h"
"	      0052d868    jmp near ptr 0052D877h"
"	      0052d86d    cmp dword ptr [ebp-8],0"
"	      0052d871    je near ptr 0052D8A4h"
);
// LINE 2668:
	asm( 
"	      0052d877    mov eax,[ebp+10h]"
"	      0052d87a    movsx eax,word ptr [eax+0Eh]"
"	      0052d87e    mov eax,[eax*4+62B7A8h]"
"	      0052d885    mov dword ptr [eax+4Ch],3"
);
// LINE 2669:
	asm( 
"	      0052d88c    mov eax,[ebp+10h]"
"	      0052d88f    movsx eax,word ptr [eax+0Eh]"
"	      0052d893    mov ecx,[eax*4+62B7A8h]"
"	      0052d89a    call 0052D9A1h"
);
// LINE 2671:
	asm( 
"	      0052d89f    jmp near ptr 0052D8E0h"
);
// LINE 2674:
	asm( 
"	      0052d8a4    mov eax,[ebp+10h]"
"	      0052d8a7    movsx eax,word ptr [eax+0Eh]"
"	      0052d8ab    mov eax,[eax*4+62B7A8h]"
"	      0052d8b2    mov dword ptr [eax+50h],1"
"	      0052d8b9    mov eax,[ebp+10h]"
"	      0052d8bc    movsx eax,word ptr [eax+0Eh]"
"	      0052d8c0    mov eax,[eax*4+62B7A8h]"
"	      0052d8c7    mov [ebp-14h],eax"
);
// LINE 2675:
	asm( 
"	      0052d8ca    mov eax,[ebp-14h]"
"	      0052d8cd    mov byte ptr [eax+6],1"
"	      0052d8d1    mov eax,[ebp-14h]"
"	      0052d8d4    mov dword ptr [eax+3Ch],0FFFFFFFFh"
"	      0052d8db    jmp near ptr 0052D8E0h"
);
// LINE 2677:
	asm( 
"	      0052d8e0    jmp near ptr 0052D96Bh"
);
// LINE 2679:
	asm( 
"	      0052d8e5    jmp near ptr 0052D96Bh"
);
// LINE 2681:
	asm( 
"	      0052d8ea    jmp near ptr 0052D96Bh"
);
// LINE 2683:
	asm( 
"	      0052d8ef    jmp near ptr 0052D96Bh"
);
// LINE 2685:
	asm( 
"	      0052d8f4    jmp near ptr 0052D96Bh"
);
// LINE 2687:
	asm( 
"	      0052d8f9    jmp near ptr 0052D96Bh"
);
// LINE 2689:
	asm( 
"	      0052d8fe    jmp near ptr 0052D96Bh"
);
// LINE 2691:
	asm( 
"	      0052d903    jmp near ptr 0052D96Bh"
);
// LINE 2693:
	asm( 
"	      0052d908    jmp near ptr 0052D96Bh"
);
// LINE 2695:
	asm( 
"	      0052d90d    jmp near ptr 0052D96Bh"
);
// LINE 2696:
	asm( 
"	      0052d912    jmp near ptr 0052D96Bh"
"	      0052d917    cmp dword ptr [ebp-18h],0Fh"
"	      0052d91b    ja near ptr 0052D96Bh"
"	      0052d921    mov eax,[ebp-18h]"
"	      0052d924    jmp dword ptr [eax*4+52D92Bh]"
"	      0052d92b    xor edx,edi"
"	      0052d92d    push edx"
"	      0052d92e    add [eax],bh"
"	      0052d930    xlatb"
"	      0052d931    push edx"
"	      0052d932    add ds:[420052D7h],bh"
"	      0052d938    xlatb"
"	      0052d939    push edx"
"	      0052d93a    add [eax+ebx*8],dh"
"	      0052d93d    push edx"
"	      0052d93e    add [ecx],bh"
"	      0052d940    fcom dword ptr [edx]"
"	      0052d943    fcom dword ptr [edx]"
"	      0052d947    inc ebx"
"	      0052d948    fcom dword ptr [edx]"
"	      0052d94b    in eax,0D8h"
"	      0052d94d    push edx"
"	      0052d94e    add dl,ch"
"	      0052d950    fcom dword ptr [edx]"
"	      0052d953    out dx,eax"
"	      0052d954    fcom dword ptr [edx]"
"	      0052d957    hlt"
"	      0052d958    fcom dword ptr [edx]"
"	      0052d95b    stc"
"	      0052d95c    fcom dword ptr [edx]"
"	      0052d95f    (bad)"
"	      0052d961    push edx"
"	      0052d962    add [ebx],al"
"	      0052d964    fst dword ptr [edx]"
"	      0052d967    or cl,bl"
"	      0052d969    push edx"
"	      0052d96a    (bad)"
);
// LINE 2698:
	asm( 
"	      0052d96b    jmp near ptr 0052D970h"
"	      0052d970    pop edi"
"	      0052d971    pop esi"
"	      0052d972    pop ebx"
"	      0052d973    leave"
"	      0052d974    ret"
);
}

// FUNCTION: COPTER_D 0x0052d975
void PlaneHitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
// LINE 2707:
	asm( 
"	      0052d975    push ebp"
"	      0052d976    mov ebp,esp"
"	      0052d978    push ebx"
"	      0052d979    push esi"
"	      0052d97a    push edi"
);
// LINE 2708:
	asm( 
"	      0052d97b    mov eax,[ebp+18h]"
"	      0052d97e    push eax"
"	      0052d97f    mov eax,[ebp+14h]"
"	      0052d982    push eax"
"	      0052d983    mov eax,[ebp+10h]"
"	      0052d986    push eax"
"	      0052d987    mov eax,[ebp+0Ch]"
"	      0052d98a    push eax"
"	      0052d98b    mov eax,[ebp+8]"
"	      0052d98e    push eax"
"	      0052d98f    call 0052D71Fh"
"	      0052d994    add esp,14h"
);
// LINE 2709:
	asm( 
"	      0052d997    jmp near ptr 0052D99Ch"
"	      0052d99c    pop edi"
"	      0052d99d    pop esi"
"	      0052d99e    pop ebx"
"	      0052d99f    leave"
"	      0052d9a0    ret"
);
}

// FUNCTION: COPTER_D 0x0052d9a1
void PlaneClass::TurnOnShields() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 2722:
	asm( 
"	      0052d9a1    push ebp"
"	      0052d9a2    mov ebp,esp"
"	      0052d9a4    sub esp,50h"
"	      0052d9a7    push ebx"
"	      0052d9a8    push esi"
"	      0052d9a9    push edi"
"	      0052d9aa    mov [ebp-50h],ecx"
);
// LINE 2728:
	asm( 
"	      0052d9ad    lea eax,[ebp-24h]"
"	      0052d9b0    push eax"
"	      0052d9b1    mov eax,[ebp-50h]"
"	      0052d9b4    mov eax,[eax+60h]"
"	      0052d9b7    push eax"
"	      0052d9b8    call 004D8859h"
"	      0052d9bd    add esp,8"
);
// LINE 2729:
	asm( 
"	      0052d9c0    mov eax,[ebp-50h]"
"	      0052d9c3    mov eax,[eax+60h]"
"	      0052d9c6    push eax"
"	      0052d9c7    call 004D85CDh"
"	      0052d9cc    add esp,4"
"	      0052d9cf    mov [ebp-28h],eax"
);
// LINE 2730:
	asm( 
"	      0052d9d2    mov dword ptr [ebp-2Ch],0"
"	      0052d9d9    jmp near ptr 0052D9E1h"
"	      0052d9de    inc dword ptr [ebp-2Ch]"
"	      0052d9e1    mov eax,[ebp-2Ch]"
"	      0052d9e4    cmp [ebp-24h],eax"
"	      0052d9e7    jle near ptr 0052DA32h"
);
// LINE 2732:
	asm( 
"	      0052d9ed    lea eax,[ebp-4Ch]"
"	      0052d9f0    push eax"
"	      0052d9f1    mov eax,[ebp-28h]"
"	      0052d9f4    push eax"
"	      0052d9f5    call 004D6905h"
"	      0052d9fa    add esp,8"
);
// LINE 2733:
	asm( 
"	      0052d9fd    cmp dword ptr [ebp-40h],0Bh"
"	      0052da01    jne near ptr 0052DA1Eh"
);
// LINE 2735:
	asm( 
"	      0052da07    and dword ptr [ebp-44h],7FFFFFFFh"
);
// LINE 2736:
	asm( 
"	      0052da0e    lea eax,[ebp-4Ch]"
"	      0052da11    push eax"
"	      0052da12    mov eax,[ebp-28h]"
"	      0052da15    push eax"
"	      0052da16    call 004D6941h"
"	      0052da1b    add esp,8"
);
// LINE 2738:
	asm( 
"	      0052da1e    mov eax,[ebp-28h]"
"	      0052da21    push eax"
"	      0052da22    call 004D85F8h"
"	      0052da27    add esp,4"
"	      0052da2a    mov [ebp-28h],eax"
);
// LINE 2739:
	asm( 
"	      0052da2d    jmp near ptr 0052D9DEh"
);
// LINE 2740:
	asm( 
"	      0052da32    jmp near ptr 0052DA37h"
"	      0052da37    pop edi"
"	      0052da38    pop esi"
"	      0052da39    pop ebx"
"	      0052da3a    leave"
"	      0052da3b    ret"
);
}

// FUNCTION: COPTER_D 0x0052da3c
void PlaneClass::TurnOffShields() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 2744:
	asm( 
"	      0052da3c    push ebp"
"	      0052da3d    mov ebp,esp"
"	      0052da3f    sub esp,50h"
"	      0052da42    push ebx"
"	      0052da43    push esi"
"	      0052da44    push edi"
"	      0052da45    mov [ebp-50h],ecx"
);
// LINE 2750:
	asm( 
"	      0052da48    lea eax,[ebp-24h]"
"	      0052da4b    push eax"
"	      0052da4c    mov eax,[ebp-50h]"
"	      0052da4f    mov eax,[eax+60h]"
"	      0052da52    push eax"
"	      0052da53    call 004D8859h"
"	      0052da58    add esp,8"
);
// LINE 2751:
	asm( 
"	      0052da5b    mov eax,[ebp-50h]"
"	      0052da5e    mov eax,[eax+60h]"
"	      0052da61    push eax"
"	      0052da62    call 004D85CDh"
"	      0052da67    add esp,4"
"	      0052da6a    mov [ebp-28h],eax"
);
// LINE 2752:
	asm( 
"	      0052da6d    mov dword ptr [ebp-2Ch],0"
"	      0052da74    jmp near ptr 0052DA7Ch"
"	      0052da79    inc dword ptr [ebp-2Ch]"
"	      0052da7c    mov eax,[ebp-2Ch]"
"	      0052da7f    cmp [ebp-24h],eax"
"	      0052da82    jle near ptr 0052DAD1h"
);
// LINE 2754:
	asm( 
"	      0052da88    lea eax,[ebp-4Ch]"
"	      0052da8b    push eax"
"	      0052da8c    mov eax,[ebp-28h]"
"	      0052da8f    push eax"
"	      0052da90    call 004D6905h"
"	      0052da95    add esp,8"
);
// LINE 2755:
	asm( 
"	      0052da98    cmp dword ptr [ebp-40h],0Bh"
"	      0052da9c    jne near ptr 0052DABDh"
);
// LINE 2757:
	asm( 
"	      0052daa2    mov eax,[ebp-44h]"
"	      0052daa5    or eax,80000000h"
"	      0052daaa    mov [ebp-44h],eax"
);
// LINE 2758:
	asm( 
"	      0052daad    lea eax,[ebp-4Ch]"
"	      0052dab0    push eax"
"	      0052dab1    mov eax,[ebp-28h]"
"	      0052dab4    push eax"
"	      0052dab5    call 004D6941h"
"	      0052daba    add esp,8"
);
// LINE 2760:
	asm( 
"	      0052dabd    mov eax,[ebp-28h]"
"	      0052dac0    push eax"
"	      0052dac1    call 004D85F8h"
"	      0052dac6    add esp,4"
"	      0052dac9    mov [ebp-28h],eax"
);
// LINE 2761:
	asm( 
"	      0052dacc    jmp near ptr 0052DA79h"
);
// LINE 2762:
	asm( 
"	      0052dad1    jmp near ptr 0052DAD6h"
"	      0052dad6    pop edi"
"	      0052dad7    pop esi"
"	      0052dad8    pop ebx"
"	      0052dad9    leave"
"	      0052dada    ret"
);
}

// FUNCTION: COPTER_D 0x0052dadb
int32_t S3PlaneMIFFLoad(void * __ptr32 miffReader) {
// LINE 2772:
	asm( 
"	      0052dadb    push ebp"
"	      0052dadc    mov ebp,esp"
"	      0052dade    push ebx"
"	      0052dadf    push esi"
"	      0052dae0    push edi"
);
// LINE 2773:
	asm( 
"	      0052dae1    mov eax,[ebp+8]"
"	      0052dae4    push eax"
"	      0052dae5    call 0052DB13h"
"	      0052daea    add esp,4"
"	      0052daed    jmp near ptr 0052DAF2h"
);
// LINE 2774:
	asm( 
"	      0052daf2    pop edi"
"	      0052daf3    pop esi"
"	      0052daf4    pop ebx"
"	      0052daf5    leave"
"	      0052daf6    ret"
);
}

// FUNCTION: COPTER_D 0x0052daf7
int32_t S3PlaneMIFFSave(void * __ptr32 miffWriter) {
// LINE 2785:
	asm( 
"	      0052daf7    push ebp"
"	      0052daf8    mov ebp,esp"
"	      0052dafa    push ebx"
"	      0052dafb    push esi"
"	      0052dafc    push edi"
);
// LINE 2786:
	asm( 
"	      0052dafd    mov eax,[ebp+8]"
"	      0052db00    push eax"
"	      0052db01    call 0052DCF2h"
"	      0052db06    add esp,4"
"	      0052db09    jmp near ptr 0052DB0Eh"
);
// LINE 2787:
	asm( 
"	      0052db0e    pop edi"
"	      0052db0f    pop esi"
"	      0052db10    pop ebx"
"	      0052db11    leave"
"	      0052db12    ret"
);
}

// FUNCTION: COPTER_D 0x0052db13
int32_t PlaneClass::MIFFLoad(void * __ptr32 miffReader) {
	int32_t i;
	int32_t ret;
	class PlaneClass* p;

// LINE 2797:
	asm( 
"	      0052db13    push ebp"
"	      0052db14    mov ebp,esp"
"	      0052db16    sub esp,0Ch"
"	      0052db19    push ebx"
"	      0052db1a    push esi"
"	      0052db1b    push edi"
);
// LINE 2805:
	asm( 
"	      0052db1c    push 0BCh"
"	      0052db21    push 62B6E8h"
"	      0052db26    push 504C414Eh"
"	      0052db2b    mov eax,[ebp+8]"
"	      0052db2e    push eax"
"	      0052db2f    call 004AB530h"
"	      0052db34    add esp,10h"
"	      0052db37    mov [ebp-8],eax"
);
// LINE 2806:
	asm( 
"	      0052db3a    cmp dword ptr [ebp-8],0"
"	      0052db3e    jne near ptr 0052DB4Bh"
);
// LINE 2807:
	asm( 
"	      0052db44    xor eax,eax"
"	      0052db46    jmp near ptr 0052DCEDh"
);
// LINE 2809:
	asm( 
"	      0052db4b    mov dword ptr [ebp-0Ch],0"
"	      0052db52    jmp near ptr 0052DB5Ah"
"	      0052db57    inc dword ptr [ebp-0Ch]"
"	      0052db5a    cmp dword ptr [ebp-0Ch],2"
"	      0052db5e    jge near ptr 0052DCE3h"
);
// LINE 2812:
	asm( 
"	      0052db64    mov eax,[ebp-0Ch]"
"	      0052db67    mov eax,[eax*4+62B7A8h]"
"	      0052db6e    mov [ebp-4],eax"
);
// LINE 2813:
	asm( 
"	      0052db71    mov eax,62B6E8h"
"	      0052db76    add eax,8"
"	      0052db79    mov ecx,[ebp-4]"
"	      0052db7c    add ecx,8"
"	      0052db7f    mov edx,[eax]"
"	      0052db81    mov [ecx],edx"
"	      0052db83    mov edx,[eax+4]"
"	      0052db86    mov [ecx+4],edx"
"	      0052db89    mov eax,[eax+8]"
"	      0052db8c    mov [ecx+8],eax"
);
// LINE 2814:
	asm( 
"	      0052db8f    mov eax,ds:[62B6FCh]"
"	      0052db94    mov ecx,[ebp-4]"
"	      0052db97    mov [ecx+14h],eax"
);
// LINE 2815:
	asm( 
"	      0052db9a    mov eax,ds:[62B700h]"
"	      0052db9f    mov ecx,[ebp-4]"
"	      0052dba2    mov [ecx+18h],eax"
);
// LINE 2816:
	asm( 
"	      0052dba5    mov eax,ds:[62B704h]"
"	      0052dbaa    mov ecx,[ebp-4]"
"	      0052dbad    mov [ecx+1Ch],eax"
);
// LINE 2817:
	asm( 
"	      0052dbb0    mov eax,62B6E8h"
"	      0052dbb5    add eax,20h"
"	      0052dbb8    mov ecx,[eax]"
"	      0052dbba    mov eax,[eax+4]"
"	      0052dbbd    mov edx,[ebp-4]"
"	      0052dbc0    add edx,20h"
"	      0052dbc3    mov [edx],ecx"
"	      0052dbc5    mov [edx+4],eax"
);
// LINE 2818:
	asm( 
"	      0052dbc8    mov eax,62B6E8h"
"	      0052dbcd    add eax,28h"
"	      0052dbd0    mov ecx,[eax]"
"	      0052dbd2    mov eax,[eax+4]"
"	      0052dbd5    mov edx,[ebp-4]"
"	      0052dbd8    add edx,28h"
"	      0052dbdb    mov [edx],ecx"
"	      0052dbdd    mov [edx+4],eax"
);
// LINE 2819:
	asm( 
"	      0052dbe0    mov eax,ds:[62B718h]"
"	      0052dbe5    mov ecx,[ebp-4]"
"	      0052dbe8    mov [ecx+30h],eax"
);
// LINE 2820:
	asm( 
"	      0052dbeb    mov eax,ds:[62B71Ch]"
"	      0052dbf0    mov ecx,[ebp-4]"
"	      0052dbf3    mov [ecx+34h],eax"
);
// LINE 2821:
	asm( 
"	      0052dbf6    mov eax,ds:[62B724h]"
"	      0052dbfb    mov ecx,[ebp-4]"
"	      0052dbfe    mov [ecx+3Ch],eax"
);
// LINE 2822:
	asm( 
"	      0052dc01    mov eax,ds:[62B720h]"
"	      0052dc06    mov ecx,[ebp-4]"
"	      0052dc09    mov [ecx+38h],eax"
);
// LINE 2823:
	asm( 
"	      0052dc0c    mov eax,62B6E8h"
"	      0052dc11    add eax,40h"
"	      0052dc14    mov ecx,[eax]"
"	      0052dc16    mov eax,[eax+4]"
"	      0052dc19    mov edx,[ebp-4]"
"	      0052dc1c    add edx,40h"
"	      0052dc1f    mov [edx],ecx"
"	      0052dc21    mov [edx+4],eax"
);
// LINE 2824:
	asm( 
"	      0052dc24    mov eax,ds:[62B730h]"
"	      0052dc29    mov ecx,[ebp-4]"
"	      0052dc2c    mov [ecx+48h],eax"
);
// LINE 2825:
	asm( 
"	      0052dc2f    mov eax,ds:[62B734h]"
"	      0052dc34    mov ecx,[ebp-4]"
"	      0052dc37    mov [ecx+4Ch],eax"
);
// LINE 2826:
	asm( 
"	      0052dc3a    mov eax,ds:[62B738h]"
"	      0052dc3f    mov ecx,[ebp-4]"
"	      0052dc42    mov [ecx+50h],eax"
);
// LINE 2827:
	asm( 
"	      0052dc45    mov eax,62B6E8h"
"	      0052dc4a    add eax,70h"
"	      0052dc4d    mov ecx,[ebp-4]"
"	      0052dc50    add ecx,70h"
"	      0052dc53    mov edx,[eax]"
"	      0052dc55    mov [ecx],edx"
"	      0052dc57    mov edx,[eax+4]"
"	      0052dc5a    mov [ecx+4],edx"
"	      0052dc5d    mov eax,[eax+8]"
"	      0052dc60    mov [ecx+8],eax"
);
// LINE 2828:
	asm( 
"	      0052dc63    mov edi,[ebp-4]"
"	      0052dc66    add edi,7Ch"
"	      0052dc69    lea esi,ds:[62B764h]"
"	      0052dc6f    mov ecx,10h"
"	      0052dc74    rep movsd"
);
// LINE 2829:
	asm( 
"	      0052dc76    mov eax,[ebp-4]"
"	      0052dc79    mov ecx,ds:[62B6ECh]"
"	      0052dc7f    mov [eax+4],ecx"
);
// LINE 2831:
	asm( 
"	      0052dc82    jmp near ptr 0052DC87h"
"	      0052dc87    mov eax,[ebp-4]"
"	      0052dc8a    movsx eax,byte ptr [eax+5]"
"	      0052dc8e    test eax,eax"
"	      0052dc90    je near ptr 0052DCA5h"
);
// LINE 2833:
	asm( 
"	      0052dc96    mov eax,[ebp-4]"
"	      0052dc99    add eax,20h"
"	      0052dc9c    push eax"
"	      0052dc9d    mov ecx,[ebp-4]"
"	      0052dca0    call 0052CBE1h"
);
// LINE 2840:
	asm( 
"	      0052dca5    push 0BCh"
"	      0052dcaa    push 62B6E8h"
"	      0052dcaf    push 504C414Eh"
"	      0052dcb4    mov eax,[ebp+8]"
"	      0052dcb7    push eax"
"	      0052dcb8    call 004AB57Ch"
"	      0052dcbd    add esp,10h"
"	      0052dcc0    mov [ebp-8],eax"
);
// LINE 2842:
	asm( 
"	      0052dcc3    cmp dword ptr [ebp-8],0"
"	      0052dcc7    jne near ptr 0052DCDEh"
"	      0052dccd    cmp dword ptr [ebp-0Ch],1"
"	      0052dcd1    je near ptr 0052DCDEh"
);
// LINE 2843:
	asm( 
"	      0052dcd7    xor eax,eax"
"	      0052dcd9    jmp near ptr 0052DCEDh"
);
// LINE 2844:
	asm( 
"	      0052dcde    jmp near ptr 0052DB57h"
);
// LINE 2845:
	asm( 
"	      0052dce3    mov eax,1"
"	      0052dce8    jmp near ptr 0052DCEDh"
);
// LINE 2846:
	asm( 
"	      0052dced    pop edi"
"	      0052dcee    pop esi"
"	      0052dcef    pop ebx"
"	      0052dcf0    leave"
"	      0052dcf1    ret"
);
}

// FUNCTION: COPTER_D 0x0052dcf2
int32_t PlaneClass::MIFFSave(void * __ptr32 miffWriter) {
	int32_t i;
	int32_t ret;

// LINE 2856:
	asm( 
"	      0052dcf2    push ebp"
"	      0052dcf3    mov ebp,esp"
"	      0052dcf5    sub esp,8"
"	      0052dcf8    push ebx"
"	      0052dcf9    push esi"
"	      0052dcfa    push edi"
);
// LINE 2859:
	asm( 
"	      0052dcfb    mov dword ptr [ebp-8],0"
"	      0052dd02    jmp near ptr 0052DD0Ah"
"	      0052dd07    inc dword ptr [ebp-8]"
"	      0052dd0a    cmp dword ptr [ebp-8],2"
"	      0052dd0e    jge near ptr 0052DD4Eh"
);
// LINE 2864:
	asm( 
"	      0052dd14    push 0BCh"
"	      0052dd19    mov eax,[ebp-8]"
"	      0052dd1c    mov eax,[eax*4+62B7A8h]"
"	      0052dd23    push eax"
"	      0052dd24    push 504C414Eh"
"	      0052dd29    mov eax,[ebp+8]"
"	      0052dd2c    push eax"
"	      0052dd2d    call 004AB5BDh"
"	      0052dd32    add esp,10h"
"	      0052dd35    mov [ebp-4],eax"
);
// LINE 2865:
	asm( 
"	      0052dd38    cmp dword ptr [ebp-4],0"
"	      0052dd3c    jne near ptr 0052DD49h"
);
// LINE 2866:
	asm( 
"	      0052dd42    xor eax,eax"
"	      0052dd44    jmp near ptr 0052DD58h"
);
// LINE 2867:
	asm( 
"	      0052dd49    jmp near ptr 0052DD07h"
);
// LINE 2868:
	asm( 
"	      0052dd4e    mov eax,1"
"	      0052dd53    jmp near ptr 0052DD58h"
);
// LINE 2869:
	asm( 
"	      0052dd58    pop edi"
"	      0052dd59    pop esi"
"	      0052dd5a    pop ebx"
"	      0052dd5b    leave"
"	      0052dd5c    ret"
);
}



// Contribution: 1:0012cd60-0012cd98 Module: 163, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x0052dd60
// PlaneClass::`scalar deleting destructor'



// Contribution: 2:00004220-00004233 Module: 163, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593220
// ??_7PlaneClass@@6B@


// Contribution: 3:000000a8-000000ab Module: 163, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x005970a8
// $S9


// Contribution: 3:00020690-0002080a Module: 163, 8 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7690
// PlaneClass::lastScannedLocation
// GLOBAL: COPTER_D 0x005b7698
// PlaneClass::sPlaneModelSet


// Contribution: 3:0002080c-0002082c Module: 163, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b780c
// ??_C@_0CB@DLKO@C?3?2Copter?2Source?2Game?2S3MOBILE?4H@


// Contribution: 3:000946e8-000947b0 Module: 163, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b6e8
// PlaneClass::lsPlane
// GLOBAL: COPTER_D 0x0062b7a8
// planes
// LOCAL: COPTER_D 0x0062b7b0
// $S6
