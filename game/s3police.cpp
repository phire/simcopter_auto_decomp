// Module: S3police.obj
// Source: C:\Copter\source\game\S3police.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class PoliceCarClass (forward reference);
class PoliceCarClass : public EmergencyVehicleClass
{
private:
	struct Goal currDestGoal;
	struct Goal destGoal1;
	struct Goal destGoal2;
	int32_t foundRoad;
	struct _DYOBJ_INST* pBadGuyDyOb;
public:
	void PoliceCarClass(const class PoliceCarClass&);
	void PoliceCarClass();
	virtual void ~PoliceCarClass();
	// calltype: NearC
	static class PoliceCarClass* CreateInstance(int32_t);
	// calltype: NearC
	static unsigned char Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	class PoliceCarClass operator=(const class PoliceCarClass&);
protected:
	virtual void ItterateFSM();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
private:
	int32_t AtScene();
	struct _DYOBJ_INST* ScanForBadGuys(struct _GridCoordinates&);
	int32_t ChangeEmergencyLocationToSpotlightLocation();
};

// Type: void;

// Type: char *;

// Type: struct VRObjInfo;
class VRObjInfo{
public:
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: enum EmergencyType;

// Type: enum EmergencyLevel;

// Type: long;

// Type: unsigned char;

// Type: struct _GridCoordinates;
class _GridCoordinates{
public:
	unsigned char x;
	unsigned char y;
};

// Type: struct _CELL_INFO (forward reference);

// Type: struct _MISSION_PARMS;
class _MISSION_PARMS{
public:
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct Goal (forward reference);

// Type: struct _RGIndex;
class _RGIndex{
public:
	unsigned char x;
	unsigned char yindex;
};

// Type: enum TurnIndex;

// Type: class SpiralScan;
class SpiralScan{
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(struct _GridCoordinates&);
	int32_t InCityGridLimits(struct _GridCoordinates);
private:
	int32_t currDist;
	int32_t currDir;
	int32_t currDia;
	int32_t maxDia;
};

// Type: struct _GridCoordinates (forward reference);

// Type: struct _DYOBJ_INST (forward reference);

// Type: struct _AUTO_LOAD_SAVE (forward reference);

// Type: uint32_t;

// Type: class EmergencyVehicleClass;
class EmergencyVehicleClass : public AutomobileClass
{
		enum __unnamed {
			MAXIMUM_DISTANCE_FROM_BASE = 7,
			MAXIMUM_TIME_TO_EMERGENCY = 3932160,
			AMBULANCE_CAPACITY = 2,
		};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char dispatchPath[256];
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FinishedCarMission(struct _DYOBJ_INST*, int32_t);
protected:
	// vtable: 24
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
};

// Type: class AutomobileClass;
class AutomobileClass{
		enum __unnamed {
			CAR_TYPES = 7,
			PERCENTAGE_OF_AUTO1 = 10,
			PERCENTAGE_OF_AUTO2 = 20,
			PERCENTAGE_OF_AUTO3 = 20,
			PERCENTAGE_OF_AUTO4 = 10,
			PERCENTAGE_OF_AUTO5 = 10,
			PERCENTAGE_OF_AUTO6 = 20,
			PERCENTAGE_OF_AUTO7 = 20,
			TOTAL_PERCENTAGE = 110,
		};
		enum __unnamed {
			NO_X_POSITION = -1,
			STARTING_X = 3,
			ENDING_X = 125,
			NO_Y_POSITION = -1,
			STARTING_Y = 3,
			ENDING_Y = 125,
		};
		enum IntersectionTypes {
			DEAD_END = 0,
			STRAIGHT_AHEAD = 1,
			LEFT_ONLY = 2,
			RIGHT_ONLY = 4,
			LEFT_OR_STRAIGHT = 3,
			LEFT_OR_RIGHT = 6,
			RIGHT_OR_STRAIGHT = 5,
			LEFT_STRAIGHT_OR_RIGHT = 7,
			DEAD_END_HIWAY = 16,
		};
		enum StoppedReasons {
			NO_REASON = 0,
			TRAFFIC = 1,
			STOPPED_TRAFFIC = 2,
			PERSON_IN_WAY = 3,
			AUTO_IN_WAY = 4,
			DEBRIS_IN_WAY = 5,
			UNIDENTIFIED_IN_WAY = 6,
			HELI_IN_WAY = 7,
			END_OF_ROAD = 8,
			END_OF_HIWAY = 9,
			INTERSECTION_FULL = 10,
			BEEN_PULLED_OVER = 11,
		};
		enum RoadTileOffsets {
			RD_CENTOFF = 851968,
			RD_EDGEOFF = 131072,
		};
		enum HiwayOffsets {
			HW_CENTOFF_LANE1 = 851968,
			HW_EDGEOFF_LANE1 = 131072,
			HW_CENTOFF_LANE2 = 851968,
			HW_EDGEOFF_LANE2 = 131072,
			HW_HEIGHT = 2031616,
		};
		enum PersonState {
			PS_IN_VEHICLE = 0,
			PS_OUT_OF_VEHICLE = 1,
			PS_BACK_IN_VEHICLE = 2,
			PS_GOT_AWAY = 3,
			PS_MISSION_OVER = 4,
		};
		enum __unnamed {
			CAR_RADIUS = 327680,
			COLLISION_SPACE = 655360,
			ROAD_SPEED = 2621440,
			ROAD_SLOWDOWN_FACTOR = 131072,
			HIWAY_SPEED = 6225920,
			HIWAY_SLOWDOWN_FACTOR = 327680,
			SPEED_VARIANCE = 262144,
			HIWAY_VARIANCE = 655360,
			MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
			MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
			MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
		};
		enum Flags {
			AUTO_INITIALIZED = 1,
			AUTO_PLACED = 2,
			AUTO_TURNING = 4,
			AUTO_MAKING_UTURN = 8,
			AUTO_PULL_OVER = 16,
			AUTO_PULLING_OVER = 32,
			AUTO_PULLED_OVER = 64,
			AUTO_AT_DEAD_END = 128,
			AUTO_IN_INTERSECTION = 256,
			AUTO_ON_FIRE = 512,
			AUTO_JAMMED = 1024,
			AUTO_PULLING_OUT = 2048,
			AUTO_RIGHT_OF_WAY = 4096,
			AUTO_ON_HIWAY = 8192,
		};
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	// vtable: 4
	intro void AdjustSpeed();
	void Reset();
	// vtable: 8
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 12
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 16
	intro void BeamToWithinCameraRange();
	// vtable: 20
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
};



// Contribution: 1:00135e00-00137427 Module: 158, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00536e00
int32_t CreatePoliceCarInstance(int32_t instanceID) {
// LINE 90:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   0x00536E98;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00536E24;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00536E26;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00536E2B;
// LINE 91:
}

// FUNCTION: COPTER_D 0x00536e30
void PoliceCarClass::PoliceCarClass() {
	__asm        mov    ecx, this;
	__asm        call   0x005415D5;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593310;
// LINE 96:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x11D;
// LINE 97:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x31E], 0;
// LINE 98:
	__asm        jmp    near ptr 0x00536E69;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00536e71
void PoliceCarClass::~PoliceCarClass() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593310;
	__asm        jmp    near ptr 0x00536E8B;
	__asm        mov    ecx, this;
	__asm        call   0x0054163A;
}

// FUNCTION: COPTER_D 0x00536e98
class PoliceCarClass* PoliceCarClass::CreateInstance(int32_t instanceID) {
	int32_t object;
	class PoliceCarClass* youveWonABrandNewCar;
	char * objectMemory;

// LINE 125:
	__asm        push   0x326;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00536ECB;
	__asm        mov    ecx, [ebp-0x34];
	__asm        call   0x00536E30;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    near ptr 0x00536ED2;
	__asm        mov    youveWonABrandNewCar, 0;
// LINE 128:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     near ptr 0x00537075;
// LINE 131:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   0x00504554;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053704E;
// LINE 135:
// Block start:
	struct VRObjInfo oinfo;
	__asm        push   0x122;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 136:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B5E78];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 138:
	__asm        cmp    objectMemory, 0;
	__asm        je     near ptr 0x00536FAB;
// LINE 143:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 145:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     near ptr 0x00536F6E;
// LINE 148:
	__asm        mov    eax, ds:[0x5B4780];
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 150:
	__asm        jmp    near ptr 0x00536FA6;
// LINE 153:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    near ptr 0x00536F9A;
	__asm        push   0x99;
	__asm        push   0x5B7EB4;
	__asm        push   0x5B7ED8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536F9F;
	__asm        jmp    near ptr 0x00536F9F;
// LINE 155:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053707C;
// LINE 158:
	__asm        jmp    near ptr 0x00536FDD;
// LINE 161:
	__asm        cmp    objectMemory, 0;
	__asm        jne    near ptr 0x00536FD1;
	__asm        push   0xA1;
	__asm        push   0x5B7F00;
	__asm        push   0x5B7F24;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00536FD6;
	__asm        jmp    near ptr 0x00536FD6;
// LINE 163:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053707C;
// LINE 169:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x134], 0;
// LINE 170:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    word ptr [eax+0x132], 0x21;
// LINE 171:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 172:
	__asm        mov    eax, oinfo.Radius;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x136], eax;
// LINE 173:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 175:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, ds:[0x5B7EB0];
	__asm        mov    [ecx*4+0x62B9E8], eax;
	__asm        inc    dword ptr ds:[0x5B7EB0];
// LINE 177:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    near ptr 0x0053707C;
// LINE 179:
// Block end:
	__asm        jmp    near ptr 0x00537075;
// LINE 182:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00537075;
	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00537075;
// LINE 188:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053707C;
// LINE 189:
}

// FUNCTION: COPTER_D 0x00537081
unsigned char PoliceCarClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 217:
	__asm        push   5;
	__asm        push   0x62B9E8;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3800];
	__asm        call   0x0053AB93;
	__asm        jmp    near ptr 0x005370AE;
// LINE 218:
}

// FUNCTION: COPTER_D 0x005370b3
void PoliceCarClass::ItterateFSM() {
	struct _GridCoordinates oldemergencyloc;
	struct _CELL_INFO* cptr;
	struct _MISSION_PARMS mp;
	struct Point3d vec;
	int32_t dist;
	struct _GridCoordinates badGuyLoc;

// LINE 248:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x31E], 0;
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    near ptr 0x005379F3;
// LINE 253:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    near ptr 0x00537100;
// LINE 254:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 256:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     near ptr 0x00537187;
	__asm        mov    ecx, this;
	__asm        call   0x005049FE;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00537187;
// LINE 261:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 262:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3800];
	__asm        call   0x0053AB2F;
// LINE 267:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 269:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 270:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x11E], 3;
// LINE 271:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 273:
	__asm        jmp    near ptr 0x00537A22;
// LINE 276:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(badGuyLoc.x), ax;
// LINE 277:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00537FD9;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 278:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x00537242;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00537242;
// LINE 281:
	__asm        mov    ecx, this;
	__asm        call   0x0054293B;
// LINE 282:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 6;
// LINE 283:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x292], 0;
// LINE 286:
	__asm        mov    mp.op, 0xA;
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 288:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    mp.maploc.x, ecx;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    mp.maploc.y, ecx;
// LINE 290:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 292:
	__asm        jmp    near ptr 0x00537A22;
// LINE 295:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 298:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x005372B7;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x005372B7;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3800];
	__asm        call   0x0053AB2F;
// LINE 302:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 303:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 305:
	__asm        jmp    near ptr 0x00537A27;
// LINE 308:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 309:
	__asm        jmp    near ptr 0x00537A22;
// LINE 312:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        je     near ptr 0x005372DE;
// LINE 314:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 315:
	__asm        jmp    near ptr 0x00537A22;
// LINE 318:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 320:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(badGuyLoc.x), ax;
// LINE 321:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00537FD9;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 322:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x00537353;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        je     near ptr 0x00537353;
// LINE 326:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        jne    near ptr 0x0053734E;
// LINE 327:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 329:
	__asm        jmp    near ptr 0x005375EB;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x00537431;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00537431;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00537431;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542461;
// LINE 333:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 336:
	__asm        push   8;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   0x0050217C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005373EE;
// LINE 338:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 5;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 340:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0xF00000;
// LINE 341:
	__asm        jmp    near ptr 0x00537A22;
// LINE 343:
	__asm        jmp    near ptr 0x0053742C;
// LINE 346:
	__asm        push   0x15A;
	__asm        push   0x5B7F34;
	__asm        push   0x5B7F58;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053740F;
	__asm        jmp    near ptr 0x0053740F;
// LINE 348:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 349:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 350:
	__asm        jmp    near ptr 0x00537A22;
// LINE 354:
	__asm        jmp    near ptr 0x005375EB;
// LINE 356:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        mov    reinterpret_cast<uint16_t>(oldemergencyloc.x), ax;
// LINE 358:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x0053746F;
// LINE 360:
	__asm        mov    ax, reinterpret_cast<uint16_t>(badGuyLoc.x);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11C], ax;
// LINE 361:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x31E], 1;
// LINE 363:
	__asm        jmp    near ptr 0x00537480;
// LINE 365:
	__asm        mov    ecx, this;
	__asm        call   0x00537E2F;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x31E], eax;
// LINE 369:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 370:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 371:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 372:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 373:
	__asm        mov    eax, dist;
	__asm        cmp    ds:[0x608F74], eax;
	__asm        jle    near ptr 0x005374D0;
// LINE 374:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F74], eax;
// LINE 376:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 380:
	__asm        mov    eax, reinterpret_cast<uint32_t>(oldemergencyloc.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542461;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x11D];
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x11C];
	__asm        mov    [ebp-0x40], ecx;
// LINE 381:
	__asm        mov    eax, [ebp-0x40];
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    near ptr 0x00537544;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00537549;
	__asm        jmp    near ptr 0x00537549;
	__asm        jmp    near ptr 0x0053754E;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    cptr, eax;
// LINE 382:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13E], eax;
// LINE 383:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x142], eax;
// LINE 384:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x146], eax;
// LINE 385:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x142], 0xA0000;
// LINE 386:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542570;
// LINE 388:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x005375E3;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        je     near ptr 0x005375EB;
// LINE 389:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 392:
	__asm        jmp    near ptr 0x00537A22;
// LINE 396:
	__asm        mov    ecx, this;
	__asm        call   0x005422EE;
// LINE 399:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00537642;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    near ptr 0x00537642;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x70;
	__asm        jne    near ptr 0x00537642;
// LINE 401:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 4;
// LINE 404:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 4;
	__asm        je     near ptr 0x0053777D;
// LINE 406:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x30;
	__asm        jne    near ptr 0x0053767E;
	__asm        mov    ecx, this;
	__asm        call   0x005045B6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053767E;
// LINE 408:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 410:
	__asm        jmp    near ptr 0x00537770;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00537770;
// LINE 412:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542461;
// LINE 413:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 414:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFB;
// LINE 417:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(badGuyLoc.x), ax;
// LINE 418:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00537FD9;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 419:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x0053773C;
// LINE 422:
	__asm        push   8;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   0x0050217C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053771D;
// LINE 424:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 5;
// LINE 425:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 426:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0xF00000;
// LINE 428:
	__asm        jmp    near ptr 0x00537737;
// LINE 432:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0;
// LINE 433:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 436:
	__asm        jmp    near ptr 0x0053776B;
// LINE 439:
	__asm        mov    ecx, this;
	__asm        call   0x005429D6;
// LINE 440:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 441:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 442:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0x12C0000;
// LINE 445:
	__asm        jmp    near ptr 0x00537A27;
// LINE 448:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 450:
	__asm        jmp    near ptr 0x005377DD;
// LINE 453:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 454:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 455:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 456:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 457:
	__asm        mov    eax, dist;
	__asm        cmp    ds:[0x608F74], eax;
	__asm        jle    near ptr 0x005377CD;
// LINE 458:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F74], eax;
// LINE 460:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 461:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 463:
	__asm        jmp    near ptr 0x00537A22;
// LINE 466:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x005377FC;
// LINE 469:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 470:
	__asm        jmp    near ptr 0x00537A22;
// LINE 473:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    near ptr 0x0053781F;
// LINE 474:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 477:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        jne    near ptr 0x0053783F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     near ptr 0x00537907;
// LINE 479:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    near ptr 0x0053785F;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     near ptr 0x005378FA;
// LINE 481:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 485:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 486:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   0x00500FC3;
	__asm        add    esp, 4;
// LINE 487:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, ds:[0x5C3820];
	__asm        call   0x0053AB2F;
// LINE 491:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 495:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x005378F5;
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x005378F5;
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        or     dword ptr [eax+8], 0x2000;
// LINE 501:
	__asm        jmp    near ptr 0x00537907;
// LINE 503:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 1;
// LINE 506:
	__asm        jmp    near ptr 0x00537A22;
// LINE 509:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(badGuyLoc.x), ax;
// LINE 510:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00537FD9;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 511:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     near ptr 0x005379B6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x005379B6;
// LINE 514:
	__asm        mov    eax, ds:[0x6C126C];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    vec.x, eax;
// LINE 515:
	__asm        mov    eax, ds:[0x6C1270];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    vec.y, eax;
// LINE 516:
	__asm        mov    eax, ds:[0x6C1274];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    vec.z, eax;
// LINE 517:
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    dist, eax;
// LINE 518:
	__asm        mov    eax, dist;
	__asm        cmp    ds:[0x608F74], eax;
	__asm        jle    near ptr 0x005379A1;
// LINE 519:
	__asm        mov    eax, dist;
	__asm        mov    ds:[0x608F74], eax;
// LINE 521:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 522:
	__asm        mov    ecx, this;
	__asm        call   0x005022B0;
// LINE 524:
	__asm        jmp    near ptr 0x005379C3;
// LINE 527:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x294], 2;
// LINE 529:
	__asm        jmp    near ptr 0x00537A22;
// LINE 532:
	__asm        push   0x214;
	__asm        push   0x5B7F60;
	__asm        push   0x5B7F84;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005379E9;
	__asm        jmp    near ptr 0x005379E9;
// LINE 533:
	__asm        jmp    near ptr 0x00537A22;
// LINE 534:
	__asm        jmp    near ptr 0x00537A22;
	__asm        dec    dword ptr [ebp-0x48];
	__asm        cmp    dword ptr [ebp-0x48], 5;
	__asm        ja     near ptr 0x005379C8;
	__asm        mov    eax, [ebp-0x48];
	__asm        jmp    dword ptr [eax*4+0x537A0A];
// Switch pointers
// LINE 535:
	__asm        jmp    near ptr 0x00537A27;
}

// FUNCTION: COPTER_D 0x00537a2c
enum TurnIndex PoliceCarClass::PickTurnDir(struct Goal* pGoal) {
	struct _GridCoordinates startLoc;

// LINE 545:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 3;
	__asm        jne    near ptr 0x00537E06;
// LINE 547:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x31E], 0;
	__asm        je     near ptr 0x00537DAA;
// LINE 552:
// Block start:
	struct _RGIndex destVertex;
	struct _RGIndex startVertex;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(startLoc.x), ax;
// LINE 555:
	__asm        mov    al, startLoc.x;
	__asm        mov    startVertex.x, al;
// LINE 556:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    startVertex.yindex, al;
// LINE 558:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2F4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2CA;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
// LINE 562:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    near ptr 0x00537B19;
// LINE 564:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    near ptr 0x00537AF4;
	__asm        push   0x234;
	__asm        push   0x5B7F8C;
	__asm        push   0x5B7FB0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00537AF9;
	__asm        jmp    near ptr 0x00537AF9;
// LINE 565:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 567:
	__asm        jmp    near ptr 0x00537CB9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    near ptr 0x00537B7A;
// LINE 569:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    near ptr 0x00537B55;
	__asm        push   0x239;
	__asm        push   0x5B7FC0;
	__asm        push   0x5B7FE4;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00537B5A;
	__asm        jmp    near ptr 0x00537B5A;
// LINE 570:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 574:
	__asm        jmp    near ptr 0x00537CB9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00537BF0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00537BF0;
// LINE 576:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 577:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2D8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x5932D0];
	__asm        jmp    near ptr 0x00537E28;
// LINE 579:
	__asm        jmp    near ptr 0x00537CB9;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00537C66;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x00537C66;
// LINE 581:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x302];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x5932D0];
	__asm        jmp    near ptr 0x00537E28;
// LINE 584:
	__asm        jmp    near ptr 0x00537CB9;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2CA];
	__asm        cmp    [eax+0x2A0], ecx;
	__asm        jne    near ptr 0x00537C9E;
// LINE 586:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 588:
	__asm        jmp    near ptr 0x00537CB9;
// LINE 590:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 593:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    near ptr 0x00537CFA;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    near ptr 0x00537CFA;
	__asm        push   0x251;
	__asm        push   0x5B7FF4;
	__asm        push   0x5B8018;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00537CFA;
	__asm        jmp    near ptr 0x00537CFA;
// LINE 595:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        mov    al, [eax];
	__asm        mov    destVertex.x, al;
// LINE 596:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    destVertex.yindex, al;
// LINE 599:
	__asm        xor    eax, eax;
	__asm        mov    al, destVertex.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startVertex.x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00537D79;
	__asm        xor    eax, eax;
	__asm        mov    al, destVertex.yindex;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startVertex.yindex;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00537D79;
// LINE 602:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xDE], 0;
// LINE 603:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502C92;
	__asm        jmp    near ptr 0x00537E28;
// LINE 605:
	__asm        jmp    near ptr 0x00537D9B;
// LINE 608:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVertex.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, 0x5C37F8;
	__asm        call   0x005439BB;
// LINE 609:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVertex.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005427F5;
// LINE 613:
	__asm        mov    eax, this;
	__asm        mov    byte ptr [eax+0x292], 0;
// LINE 615:
// Block end:
	__asm        jmp    near ptr 0x00537DD2;
// LINE 621:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x293];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x292];
	__asm        cmp    ecx, edx;
	__asm        jle    near ptr 0x00537DD2;
// LINE 622:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0x292];
// LINE 628:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x292];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax+0x192];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        shl    eax, 4;
	__asm        mov    eax, [eax+edx*4+0x5932D0];
	__asm        jmp    near ptr 0x00537E28;
// LINE 630:
	__asm        jmp    near ptr 0x00537E17;
// LINE 633:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542373;
	__asm        jmp    near ptr 0x00537E28;
// LINE 636:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542373;
	__asm        jmp    near ptr 0x00537E28;
// LINE 637:
}

// FUNCTION: COPTER_D 0x00537e2f
int32_t PoliceCarClass::ChangeEmergencyLocationToSpotlightLocation() {
	struct _GridCoordinates loc;
	class SpiralScan scan;

// LINE 643:
	__asm        push   4;
	__asm        lea    ecx, scan.currDist;
	__asm        call   0x00542DC0;
// LINE 647:
	__asm        mov    eax, ds:[0x5B4968];
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    loc.x, al;
// LINE 648:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, ds:[0x5B4968];
	__asm        mov    ecx, [ecx+0xC0];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    loc.y, al;
// LINE 653:
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00537EAE;
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        cmp    eax, 0x7F;
	__asm        jg     near ptr 0x00537EAE;
	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00537EAE;
	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        cmp    eax, 0x7F;
	__asm        jle    near ptr 0x00537EBA;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00537F13;
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc.y;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x20], ax;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00537F07;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x00537F07;
	__asm        mov    dword ptr [ebp-0x24], 1;
	__asm        jmp    near ptr 0x00537F13;
	__asm        jmp    near ptr 0x00537F13;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00537F13;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x00537F3F;
// LINE 655:
	__asm        mov    ax, reinterpret_cast<uint16_t>(loc.x);
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x11C], ax;
// LINE 656:
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        jmp    near ptr 0x00537F37;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x00537F67;
// LINE 659:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        lea    ecx, scan.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00537E78;
// LINE 661:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00537F5F;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x00537F67;
// LINE 662:
}

// FUNCTION: COPTER_D 0x00537f6c
int32_t PoliceCarClass::AtScene() {
// LINE 669:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00537FB4;
// LINE 673:
	__asm        jmp    near ptr 0x00537FCD;
// LINE 675:
	__asm        push   0x2A3;
	__asm        push   0x5B8020;
	__asm        push   0x5B8044;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00537FAF;
	__asm        jmp    near ptr 0x00537FAF;
// LINE 676:
	__asm        jmp    near ptr 0x00537FCD;
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        jl     near ptr 0x00537F8E;
	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    near ptr 0x00537FCD;
	__asm        jmp    near ptr 0x00537F8E;
// LINE 681:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00537FD4;
// LINE 682:
}

// FUNCTION: COPTER_D 0x00537fd9
struct _DYOBJ_INST* PoliceCarClass::ScanForBadGuys(struct _GridCoordinates& scanLoc) {
	struct _CELL_INFO* cptr;
	struct _DYOBJ_INST* dyptr;
	class SpiralScan spiral;

// LINE 690:
	__asm        push   3;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542DC0;
// LINE 694:
	__asm        mov    eax, scanLoc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    [ebp-0x2C], ecx;
	__asm        mov    eax, scanLoc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x30], ecx;
// LINE 696:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x00538048;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053804D;
	__asm        jmp    near ptr 0x0053804D;
	__asm        jmp    near ptr 0x00538052;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    cptr, eax;
// LINE 697:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    dyptr, eax;
// LINE 701:
	__asm        cmp    dyptr, 0;
	__asm        je     near ptr 0x005380F0;
// LINE 703:
	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x005380A6;
	__asm        mov    eax, dyptr;
	__asm        push   eax;
	__asm        call   0x0054642E;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005380A6;
// LINE 705:
	__asm        mov    eax, dyptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00538099;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x00538118;
// LINE 707:
	__asm        jmp    near ptr 0x005380E3;
	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x005380E3;
	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   0x0050413E;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005380E3;
// LINE 709:
	__asm        mov    eax, dyptr;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x005380DB;
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    near ptr 0x00538118;
// LINE 712:
	__asm        mov    eax, dyptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptr, eax;
// LINE 713:
	__asm        jmp    near ptr 0x00538061;
// LINE 715:
	__asm        mov    eax, scanLoc;
	__asm        push   eax;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00537FEF;
// LINE 717:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x00538110;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    near ptr 0x00538118;
// LINE 718:
}

// FUNCTION: COPTER_D 0x0053811f
void PoliceCarClass::SetSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 730:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x2BC;
	__asm        add    esi, 0x2A0;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 731:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x2E8;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 732:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x314;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 733:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x31E];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x340], eax;
// LINE 735:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00538216;
// LINE 739:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        mov    al, [eax];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x2E6], al;
// LINE 740:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x2E7], al;
// LINE 741:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        mov    al, [eax];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x312], al;
// LINE 742:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x313], al;
// LINE 743:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        mov    al, [eax];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x33E], al;
// LINE 744:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x33F], al;
// LINE 748:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542A75;
// LINE 749:
	__asm        jmp    near ptr 0x00538227;
}

// FUNCTION: COPTER_D 0x0053822e
void PoliceCarClass::LoadSaveData(struct _AUTO_LOAD_SAVE* sd) {
	unsigned char yindex;
	struct _GridCoordinates badGuyLoc;

// LINE 764:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    near ptr 0x0053824B;
// LINE 766:
	__asm        jmp    near ptr 0x00538421;
// LINE 770:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542B90;
// LINE 773:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2BC;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 774:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2CA;
	__asm        add    esi, 0x2E8;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 775:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2F4;
	__asm        add    esi, 0x314;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 776:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x340];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x31E], eax;
// LINE 778:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x005382ED;
// LINE 784:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00542570;
// LINE 785:
	__asm        jmp    near ptr 0x00538306;
// LINE 788:
	__asm        jmp    near ptr 0x00538306;
// LINE 789:
	__asm        jmp    near ptr 0x00538306;
	__asm        cmp    dword ptr [ebp-0x10], 1;
	__asm        jl     near ptr 0x00538306;
	__asm        cmp    dword ptr [ebp-0x10], 4;
	__asm        jle    near ptr 0x005382CB;
	__asm        jmp    near ptr 0x00538306;
// LINE 794:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E7];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E6];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 795:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E6];
	__asm        mov    eax, [ecx*4+0x5C3828];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A0], eax;
// LINE 798:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x313];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x312];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 799:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x312];
	__asm        mov    eax, [ecx*4+0x5C3828];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2CA], eax;
// LINE 802:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33F];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33E];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 803:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33E];
	__asm        mov    eax, [ecx*4+0x5C3828];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2F4], eax;
// LINE 805:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(badGuyLoc.x), ax;
// LINE 806:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00537FD9;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 807:
	__asm        jmp    near ptr 0x00538421;
}



// Contribution: 1:00137430-00137468 Module: 158, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00538430
// PoliceCarClass::`scalar deleting destructor'



// Contribution: 2:000042d0-0000430f Module: 158, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x005932d0
// TILUT


// Contribution: 2:00004310-00004337 Module: 158, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00593310
// ??_7PoliceCarClass@@6B@


// Contribution: 3:00020eb0-00021049 Module: 158, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7eb0
// curPoliceCars


// Contribution: 3:000949e8-000949fb Module: 158, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9e8
// policeCars
