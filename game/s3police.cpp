// Module: S3police.obj
// Source: C:\Copter\source\game\S3police.cpp
// autogenerated by simcopter_tool from PDB file

// Type: enum TurnIndex;
enum TurnIndex {
	iTS = 0,
	iTR = 1,
	iTL = 2,
	iTU = 3,
};

// Type: int32_t;

// Type: /*packed*/ class PoliceCarClass (forward reference);
// VTABLE: COPTER_D 0x00593310
class PoliceCarClass : public EmergencyVehicleClass
{ // packed(0x326 bytes) TI: 0x480d
private:
	/*+0x2a0*/ /*packed*/ struct Goal currDestGoal; // 0x2a bytes
	/*+0x2ca*/ /*packed*/ struct Goal destGoal1; // 0x2a bytes
	/*+0x2f4*/ /*packed*/ struct Goal destGoal2; // 0x2a bytes
	/*+0x31e*/ int32_t foundRoad;
	/*+0x322*/ /*packed*/ struct _DYOBJ_INST *pBadGuyDyOb;
public:
	void PoliceCarClass(const /*packed*/ class PoliceCarClass&);
	void PoliceCarClass();
	virtual void ~PoliceCarClass() /* override */;
	// calltype: NearC
	static /*packed*/ class PoliceCarClass* CreateInstance(int32_t);
	// calltype: NearC
	static unsigned char Dispatch(enum EmergencyType, enum EmergencyLevel, long, long);
	/*packed*/ class PoliceCarClass operator=(const /*packed*/ class PoliceCarClass&);
protected:
	virtual void ItterateFSM() /* override */;
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*) /* override */;
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
private:
	int32_t AtScene();
	/*packed*/ struct _DYOBJ_INST* ScanForBadGuys(/*packed*/ struct _GridCoordinates&);
	int32_t ChangeEmergencyLocationToSpotlightLocation();
};

// Type: void;

// Type: char *;

// Type: /*packed*/ struct VRObjInfo;
struct VRObjInfo{ // packed(0x24 bytes) TI: 0x2ea8
	/*+0x0*/   int32_t Faces;
	/*+0x4*/   int32_t Verts;
	/*+0x8*/   int32_t Attribute;
	/*+0xc*/   int32_t Radius;
	/*+0x10*/  /*packed*/ struct Point3d *ObjCenter;
	/*+0x14*/  /*packed*/ struct Point3d *VertsPtr;
	/*+0x18*/  /*packed*/ struct Xform3d *VertsXfm;
	/*+0x1c*/  /*packed*/ struct Point3d *OrgVerts;
	/*+0x20*/  int32_t *Matrix[4][4];
};

// Type: enum EmergencyType;
enum EmergencyType {
	NO_EMERGENCY = 0,
	FIRE_TRUCK = 1,
	AMBULANCE_CAR = 2,
	POLICE_CHASING_CAR = 3,
	POLICE_ON_PATROL = 4,
};

// Type: enum EmergencyLevel;
enum EmergencyLevel {
	ES_UNDEFINED = 0,
	ES_STAKEOUT = 1,
	ES_RETURN = 2,
	ES_PURSUIT = 3,
	ES_DISPATCHED = 4,
	ES_AT_SCENE = 5,
	ES_COP_CHASE = 6,
};

// Type: long;

// Type: unsigned char;

// Type: /*packed*/ struct _GridCoordinates;
struct _GridCoordinates{ // packed(0x2 bytes) TI: 0x143c
	/*+0x0*/   unsigned char x; // 0x1 bytes
	/*+0x1*/   unsigned char y; // 0x1 bytes
};

// Type: /*packed*/ struct _CELL_INFO (forward reference);
struct _CELL_INFO{ // packed(0x18 bytes) TI: 0x1b03
	/*+0x0*/   short flags; // 0x2 bytes
	/*+0x2*/   short x; // 0x2 bytes
	/*+0x4*/   short y; // 0x2 bytes
	/*+0x6*/   short z; // 0x2 bytes
	/*+0x8*/   short size; // 0x2 bytes
	/*+0xa*/   short ctr; // 0x2 bytes
	/*+0xc*/   /*packed*/ struct _STOBJ_INST *stptr;
	/*+0x10*/  /*packed*/ struct _DYOBJ_INST *dyptr;
	/*+0x14*/  /*packed*/ struct _DYOBJ_INST *vwptr;
};

// Type: /*packed*/ struct _MISSION_PARMS;
struct _MISSION_PARMS{ // packed(0x18 bytes) TI: 0x307d
	/*+0x0*/   long op;
	/*+0x4*/   long id;
	/*+0x8*/   /*packed*/ struct Point2d maploc; // 0x8 bytes
	/*+0x10*/  long i2num;
	/*+0x14*/  long flags;
};

// Type: /*packed*/ struct Point3d;
struct Point3d{ // packed(0xc bytes) TI: 0x18b0
	/*+0x0*/   int32_t x;
	/*+0x4*/   int32_t y;
	/*+0x8*/   int32_t z;
};

// Type: /*packed*/ struct Goal (forward reference);
struct Goal{ // packed(0x2a bytes) TI: 0x12ce
	/*+0x0*/   /*packed*/ struct RGVertex *pRGV;
	/*+0x4*/   int32_t elementIndex;
	/*+0x8*/   int32_t gridIndex;
	/*+0xc*/   /*packed*/ struct _GridCoordinates gridLoc; // 0x2 bytes
	/*+0xe*/   enum DirIndex2 edgeIndex;
	/*+0x12*/  enum DirIndex2 direction;
	/*+0x16*/  int32_t distance;
	/*+0x1a*/  int32_t turnFlags;
	/*+0x1e*/  int32_t deadEndFlags;
	/*+0x22*/  int32_t fElevated;
	/*+0x26*/  enum SlopeIndex slope;
};

// Type: /*packed*/ struct _RGIndex;
struct _RGIndex{ // packed(0x2 bytes) TI: 0x2ab2
	/*+0x0*/   unsigned char x; // 0x1 bytes
	/*+0x1*/   unsigned char yindex; // 0x1 bytes
};

// Type: /*packed*/ class SpiralScan;
class SpiralScan{ // packed(0x10 bytes) TI: 0x2fb5
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(/*packed*/ struct _GridCoordinates&);
	int32_t InCityGridLimits(/*packed*/ struct _GridCoordinates);
private:
	/*+0x0*/   int32_t currDist;
	/*+0x4*/   int32_t currDir;
	/*+0x8*/   int32_t currDia;
	/*+0xc*/   int32_t maxDia;
};

// Type: /*packed*/ struct _GridCoordinates (forward reference);
struct _GridCoordinates{ // packed(0x2 bytes) TI: 0x143c
	/*+0x0*/   unsigned char x; // 0x1 bytes
	/*+0x1*/   unsigned char y; // 0x1 bytes
};

// Type: /*packed*/ struct _DYOBJ_INST (forward reference);
struct _DYOBJ_INST{ // packed(0x64 bytes) TI: 0x1deb
	/*+0x0*/   /*packed*/ struct _DYOBJ_INST *next;
	/*+0x4*/   /*packed*/ struct _DYOBJ_INST *vnext;
	/*+0x8*/   void * __ptr32 mesh;
	/*+0xc*/   short flags; // 0x2 bytes
	/*+0xe*/   short user1; // 0x2 bytes
	/*+0x10*/  long radius;
	/*+0x14*/  long height;
	/*+0x18*/  /*packed*/ struct Point3d loc; // 0xc bytes
	/*+0x24*/  int32_t matrix[4][4]; // 0x40 bytes
};

// Type: /*packed*/ struct _AUTO_LOAD_SAVE (forward reference);
struct _AUTO_LOAD_SAVE{ // packed(0x344 bytes) TI: 0x42d7
	/*+0x0*/   int32_t flags;
	/*+0x4*/   /*packed*/ struct _DYOBJ_INST autoDynomitor; // 0x64 bytes
	/*+0x68*/  /*packed*/ struct Goal goal; // 0x2a bytes
	/*+0x92*/  /*packed*/ struct _GridCoordinates goalpRGVFixup; // 0x2 bytes
	/*+0x94*/  int32_t DeltaFromCenter;
	/*+0x98*/  int32_t stalledTimer;
	/*+0x9c*/  /*packed*/ struct Point3d directionVector; // 0xc bytes
	/*+0xa8*/  int32_t remainingTime;
	/*+0xac*/  int32_t desiredSpeed;
	/*+0xb0*/  int32_t desiredHiwaySpeed;
	/*+0xb4*/  int32_t beamDelay;
	/*+0xb8*/  int32_t beamTimer;
	/*+0xbc*/  int32_t m_cellBaseY;
	/*+0xc0*/  int32_t timePulledOver;
	/*+0xc4*/  enum DirectionTypes hiwaydir;
	/*+0xc8*/  /*packed*/ struct _GridCoordinates currentLocation; // 0x2 bytes
	/*+0xca*/  /*packed*/ struct _GridCoordinates nextLocation; // 0x2 bytes
	/*+0xcc*/  /*packed*/ struct _GridCoordinates northCell; // 0x2 bytes
	/*+0xce*/  /*packed*/ struct _GridCoordinates southCell; // 0x2 bytes
	/*+0xd0*/  /*packed*/ struct _GridCoordinates eastCell; // 0x2 bytes
	/*+0xd2*/  /*packed*/ struct _GridCoordinates westCell; // 0x2 bytes
	/*+0xd4*/  int32_t speed;
	/*+0xd8*/  long prevDir;
	/*+0xdc*/  long turnIndex;
	/*+0xe0*/  int32_t currDist;
	/*+0xe4*/  int32_t legOfTurn;
	/*+0xe8*/  /*packed*/ struct Point3d *pDirVector;
	/*+0xec*/  int32_t personDone;
	/*+0xf0*/  int32_t personState;
	/*+0xf4*/  int32_t personTimer;
	/*+0xf8*/  int32_t timeToLive;
	/*+0xfc*/  int32_t fireTime;
	/*+0x100*/ long fireSeq;
	/*+0x104*/ long missionId;
	/*+0x108*/ /*packed*/ struct _GridCoordinates cptrfixup; // 0x2 bytes
	/*+0x10a*/ int32_t spotlightHitCounter;
	struct _AUTO_LOAD_SAVE::_CRIMINAL{ // packed(0x10 bytes) TI: 0x42df
		/*+0x0*/   long missionState;
		/*+0x4*/   long criminalType;
		/*+0x8*/   int32_t timeToLeaveCar;
		/*+0xc*/   int32_t timeToBeOnTheRun;
	};
public:
	/*+0x10e*/ /*packed*/ struct _AUTO_LOAD_SAVE::_CRIMINAL c; // 0x10 bytes
	struct _AUTO_LOAD_SAVE::_EMERGENCY{ // packed(0x186 bytes) TI: 0x42dd
		/*+0x0*/   /*packed*/ struct _GridCoordinates baseLocation; // 0x2 bytes
		/*+0x2*/   /*packed*/ struct _GridCoordinates emergencyLocation; // 0x2 bytes
		/*+0x4*/   long emergencyType;
		/*+0x8*/   long timeOfArrival;
		/*+0xc*/   /*packed*/ struct _DYOBJ_INST dispatchIcon; // 0x64 bytes
		/*+0x70*/  int32_t timeToEmergency;
		/*+0x74*/  long targetfixup;
		/*+0x78*/  unsigned char dispatchPath[256]; // 0x100 bytes
		/*+0x178*/ unsigned char dispatchPathIndex; // 0x1 bytes
		/*+0x179*/ unsigned char dispatchPathLength; // 0x1 bytes
		/*+0x17a*/ long emergencyState;
		/*+0x17e*/ int32_t stationID;
		/*+0x182*/ int32_t numberOfSeats;
	};
public:
	/*+0x11e*/ /*packed*/ struct _AUTO_LOAD_SAVE::_EMERGENCY e; // 0x186 bytes
	struct _AUTO_LOAD_SAVE::_FIRE{ // packed(0x18 bytes) TI: 0x42db
		/*+0x0*/   int32_t dousingFire;
		/*+0x4*/   int32_t distToFire;
		/*+0x8*/   /*packed*/ struct Point3d firevec; // 0xc bytes
		/*+0x14*/  int32_t pathID;
	};
public:
	/*+0x2a4*/ /*packed*/ struct _AUTO_LOAD_SAVE::_FIRE f; // 0x18 bytes
	struct _AUTO_LOAD_SAVE::_POLICE{ // packed(0x88 bytes) TI: 0x42d9
		/*+0x0*/   /*packed*/ struct Goal currDestGoal; // 0x2a bytes
		/*+0x2a*/  /*packed*/ struct _GridCoordinates currpRGVFixup; // 0x2 bytes
		/*+0x2c*/  /*packed*/ struct Goal destGoal1; // 0x2a bytes
		/*+0x56*/  /*packed*/ struct _GridCoordinates dest1pRGVFixup; // 0x2 bytes
		/*+0x58*/  /*packed*/ struct Goal destGoal2; // 0x2a bytes
		/*+0x82*/  /*packed*/ struct _GridCoordinates dest2pRGVFixup; // 0x2 bytes
		/*+0x84*/  int32_t foundRoad;
	};
public:
	/*+0x2bc*/ /*packed*/ struct _AUTO_LOAD_SAVE::_POLICE p; // 0x88 bytes
};

// Type: uint32_t;

// Type: /*packed*/ class EmergencyVehicleClass;
// VTABLE: COPTER_D 0x005934c0
class EmergencyVehicleClass : public AutomobileClass
{ // packed(0x2a0 bytes) TI: 0x47d8
	enum /* __unnamed */ {
		MAXIMUM_DISTANCE_FROM_BASE = 7,
		MAXIMUM_TIME_TO_EMERGENCY = 3932160,
		AMBULANCE_CAPACITY = 2,
	};
protected:
	/*+0x11a*/ /*packed*/ struct _GridCoordinates baseLocation; // 0x2 bytes
	/*+0x11c*/ /*packed*/ struct _GridCoordinates emergencyLocation; // 0x2 bytes
	/*+0x11e*/ enum EmergencyType emergencyType;
	/*+0x122*/ long timeOfArrival;
	/*+0x126*/ /*packed*/ struct _DYOBJ_INST dispatchIcon; // 0x64 bytes
	/*+0x18a*/ int32_t timeToEmergency;
	/*+0x18e*/ /*packed*/ class AutomobileClass *dispatchTarget;
	/*+0x192*/ unsigned char dispatchPath[256]; // 0x100 bytes
	/*+0x292*/ unsigned char dispatchPathIndex; // 0x1 bytes
	/*+0x293*/ unsigned char dispatchPathLength; // 0x1 bytes
	/*+0x294*/ enum EmergencyLevel emergencyState;
	/*+0x298*/ int32_t stationID;
	/*+0x29c*/ int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const /*packed*/ class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass() /* override */;
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(/*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	void InitializeStationVehicleForDispatch(int32_t, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, /*packed*/ struct Goal, /*packed*/ struct Goal, /*packed*/ struct _GridCoordinates, int32_t, /*packed*/ struct Goal, enum EmergencyType, enum EmergencyLevel);
	// calltype: NearC
	static int32_t AreThereMoreSeats(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(/*packed*/ struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t S3UpdateCar(int32_t, int32_t);
	// calltype: NearC
	static /*packed*/ struct _DYOBJ_INST* S3GetCar(int32_t);
	void CancelEmergencyDispatch();
protected:
	virtual void Reset(); // vtable+0x24
	virtual void AdjustSpeed() /* override */;
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*) /* override */;
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*) /* override */;
	void ArriveOnScene();
	void UnLinkIconFromCell(const /*packed*/ struct _GridCoordinates);
	void LinkIconToCell(const /*packed*/ struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(/*packed*/ struct _RGIndex, /*packed*/ struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	int32_t UpdateCar(int32_t);
	virtual void BeamToWithinCameraRange() /* override */;
public:
	/*packed*/ class EmergencyVehicleClass operator=(const /*packed*/ class EmergencyVehicleClass&);
};

// Type: /*packed*/ class AutomobileClass;
// VTABLE: COPTER_D 0x00592d98
class AutomobileClass{ // packed(0x11a bytes) TI: 0x4880
	enum CarType {
		kCarAmbulance = 0,
		kCarCop = 1,
		kCarFiretruck = 2,
		kCarCriminal = 3,
	};
	enum AutoMessageID {
		AM_NO_MESSAGE = 0,
		AM_CANCEL_AUTO_MISSION = 1,
	};
	enum /* __unnamed */ {
		CAR_TYPES = 7,
		PERCENTAGE_OF_AUTO1 = 10,
		PERCENTAGE_OF_AUTO2 = 20,
		PERCENTAGE_OF_AUTO3 = 20,
		PERCENTAGE_OF_AUTO4 = 10,
		PERCENTAGE_OF_AUTO5 = 10,
		PERCENTAGE_OF_AUTO6 = 20,
		PERCENTAGE_OF_AUTO7 = 20,
		TOTAL_PERCENTAGE = 110,
	};
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
		DEAD_END_HIWAY = 16,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		AUTO_IN_WAY = 4,
		DEBRIS_IN_WAY = 5,
		UNIDENTIFIED_IN_WAY = 6,
		HELI_IN_WAY = 7,
		END_OF_ROAD = 8,
		END_OF_HIWAY = 9,
		INTERSECTION_FULL = 10,
		BEEN_PULLED_OVER = 11,
	};
	enum RoadTileOffsets {
		RD_CENTOFF = 851968,
		RD_EDGEOFF = 131072,
	};
	enum HiwayOffsets {
		HW_CENTOFF_LANE1 = 851968,
		HW_EDGEOFF_LANE1 = 131072,
		HW_CENTOFF_LANE2 = 851968,
		HW_EDGEOFF_LANE2 = 131072,
		HW_HEIGHT = 2031616,
	};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
	enum /* __unnamed */ {
		CAR_RADIUS = 327680,
		COLLISION_SPACE = 655360,
		ROAD_SPEED = 2621440,
		ROAD_SLOWDOWN_FACTOR = 131072,
		HIWAY_SPEED = 6225920,
		HIWAY_SLOWDOWN_FACTOR = 327680,
		SPEED_VARIANCE = 262144,
		HIWAY_VARIANCE = 655360,
		MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
		MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
	};
	enum Flags {
		AUTO_INITIALIZED = 1,
		AUTO_PLACED = 2,
		AUTO_NEEDS_TO_PULL_OVER = 4,
		AUTO_PULL_OVER = 8,
		AUTO_PULLING_OVER = 16,
		AUTO_PULLED_OVER = 32,
		AUTO_PULLING_OUT = 64,
		AUTO_IN_INTERSECTION = 128,
		AUTO_ON_FIRE = 256,
		AUTO_JAMMED = 512,
		AUTO_RIGHT_OF_WAY = 1024,
		AUTO_ON_HIWAY = 2048,
		AUTO_SPEEDER = 4096,
		AUTO_SPEEDER_DONE = 8192,
		AUTO_UTURN = 16384,
	};
public:
	/*+0x4*/   long carModel;
	/*+0x8*/   int32_t flags;
	/*+0xc*/   /*packed*/ struct _DYOBJ_INST autoDynomitor; // 0x64 bytes
	/*+0x70*/  /*packed*/ struct Goal goal; // 0x2a bytes
private:
	static /*packed*/ struct Point2d lastScannedLocation;
	/*+0x9a*/  int32_t DeltaFromCenter;
	/*+0x9e*/  int32_t stalledTimer;
	/*+0xa2*/  /*packed*/ struct Point3d directionVector; // 0xc bytes
	/*+0xae*/  int32_t remainingTime;
	/*+0xb2*/  int32_t desiredSpeed;
	/*+0xb6*/  int32_t desiredHiwaySpeed;
	/*+0xba*/  int32_t beamDelay;
	/*+0xbe*/  int32_t beamTimer;
	/*+0xc2*/  int32_t m_cellBaseY;
	/*+0xc6*/  int32_t timePulledOver;
	/*+0xca*/  int32_t hornSoundId;
	/*+0xce*/  enum DirectionTypes hiwaydir;
	/*+0xd2*/  /*packed*/ struct _GridCoordinates currentLocation; // 0x2 bytes
	/*+0xd4*/  /*packed*/ struct _GridCoordinates nextLocation; // 0x2 bytes
	/*+0xd6*/  /*packed*/ struct _GridCoordinates northCell; // 0x2 bytes
	/*+0xd8*/  /*packed*/ struct _GridCoordinates southCell; // 0x2 bytes
	/*+0xda*/  /*packed*/ struct _GridCoordinates eastCell; // 0x2 bytes
	/*+0xdc*/  /*packed*/ struct _GridCoordinates westCell; // 0x2 bytes
protected:
	/*+0xde*/  int32_t speed;
	/*+0xe2*/  enum DirIndex2 prevDir;
	/*+0xe6*/  enum TurnIndex turnIndex;
	/*+0xea*/  int32_t currDist;
	/*+0xee*/  int32_t legOfTurn;
	/*+0xf2*/  /*packed*/ struct Point3d *pDirVector;
	/*+0xf6*/  int32_t personDone;
	/*+0xfa*/  int32_t personState;
	/*+0xfe*/  int32_t personTimer;
	/*+0x102*/ int32_t timeToLive;
	/*+0x106*/ int32_t fireTime;
	/*+0x10a*/ long fireSeq;
	/*+0x10e*/ long missionId;
	/*+0x112*/ /*packed*/ struct _CELL_INFO *cptr;
	/*+0x116*/ int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const /*packed*/ class AutomobileClass&);
	void AutomobileClass();
	virtual void ~AutomobileClass(); // vtable+0x0
	// calltype: NearC
	static /*packed*/ class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static /*packed*/ class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(/*packed*/ class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, /*packed*/ struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, /*packed*/ struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	// calltype: NearC
	static int32_t S3AutoMessage(short, short);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
	void HitDispatch(long, /*packed*/ struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(/*packed*/ struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	virtual void PullOver(short); // vtable+0x4
	void PullOut();
	int32_t CanIPullOut();
	int32_t CanIPullOver();
	void DoAUTurn();
	long GetCarModel();
	// calltype: NearC
	static /*packed*/ struct _DYOBJ_INST* GetClosestCar(int32_t, int32_t, int32_t);
protected:
	void Itterate();
	virtual void AdjustSpeed(); // vtable+0x8
	void Reset();
	virtual enum TurnIndex PickTurnDir(/*packed*/ struct Goal*); // vtable+0xc
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	virtual void ItterateFSM(); // vtable+0x10
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const /*packed*/ struct _GridCoordinates&);
	int32_t AreCarsHeadOn(/*packed*/ struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, /*packed*/ struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	int32_t AutoMessage(short);
	int32_t PlacePerson(int32_t, int32_t);
	virtual void SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*); // vtable+0x14
	virtual void LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE*); // vtable+0x18
	void HonkHorn();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(/*packed*/ struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	virtual void BeamToWithinCameraRange(); // vtable+0x1c
	virtual int32_t BeamToLocation(const /*packed*/ struct _GridCoordinates&); // vtable+0x20
	void MoveAuto(int32_t);
	void ChangeAutoColor();
private:
	void UnlinkFromCell(const /*packed*/ struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(/*packed*/ struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
	void DoPullOverStuff(int32_t);
	int32_t CanIDoAUTurn();
public:
	/*packed*/ class AutomobileClass operator=(const /*packed*/ class AutomobileClass&);
};



// Contribution: 1:00135e00-00137427 Module: 158, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00536e00
int32_t CreatePoliceCarInstance(int32_t instanceID) {
// LINE 90:
_T24:
_T26:
	return (PoliceCarClass::CreateInstance(instanceID) == 0x0);
// LINE 91:
}

// FUNCTION: COPTER_D 0x00536e30
void PoliceCarClass::PoliceCarClass() {

	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::EmergencyVehicleClass;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593310;
// LINE 96:
	this->carModel = 0x11d;
// LINE 97:
	this->foundRoad = 0x0;
// LINE 98:
	return;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00536e71
void PoliceCarClass::~PoliceCarClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593310;
	__asm        jmp    __RETURN;
__RETURN:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::~EmergencyVehicleClass;
}

// FUNCTION: COPTER_D 0x00536e98
/*packed*/ class PoliceCarClass* PoliceCarClass::CreateInstance(int32_t instanceID) {
	/*bp-0x4*/   char * objectMemory;
	/*bp-0x8*/   /*packed*/ class PoliceCarClass *youveWonABrandNewCar;
	/*bp-0xc*/   int32_t object;

// LINE 125:
	__asm        push   0x326;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x34], eax;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-0x34];
	__asm        call   PoliceCarClass::PoliceCarClass;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    _T3a;
_T33:
	youveWonABrandNewCar = 0x0;
// LINE 128:
_T3a:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     _T1dd;
// LINE 131:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   AutomobileClass::Initialize;
	__asm        test   eax, eax;
	__asm        je     _T1b6;
// LINE 135:
// Block start:
	/*bp-0x30*/  /*packed*/ struct VRObjInfo oinfo; // 0x24 bytes
	__asm        push   0x122;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 136:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, G_dyobjmempool;
	__asm        push   eax;
	__asm        call   S2Alloc;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 138:
	__asm        cmp    objectMemory, 0;
	__asm        je     _T113;
// LINE 143:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        mov    [ecx+0x12E], eax;
// LINE 145:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        je     _Td6;
// LINE 148:
	__asm        mov    eax, G_main_mp;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 150:
	__asm        jmp    _T10e;
// LINE 153:
_Td6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        cmp    dword ptr [eax+0x12E], 0;
	__asm        jne    _T102;

	__asm        push   0x99;
	__asm        push   0x5B7EB4;
	__asm        push   0x5B7ED8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T107;
_T102:
	__asm        jmp    _T107;
// LINE 155:
_T107:
	return 0x0;
// LINE 158:
_T10e:
	__asm        jmp    _T145;
// LINE 161:
_T113:
	__asm        cmp    objectMemory, 0;
	__asm        jne    _T139;

	__asm        push   0xA1;
	__asm        push   0x5B7F00;
	__asm        push   0x5B7F24;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T13e;
_T139:
	__asm        jmp    _T13e;
// LINE 163:
_T13e:
	return 0x0;
// LINE 169:
_T145:
	youveWonABrandNewCar->dispatchIcon.user1 = 0x0;
// LINE 170:
	youveWonABrandNewCar->dispatchIcon.flags = 0x21;
// LINE 171:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 172:
	youveWonABrandNewCar->dispatchIcon.radius = oinfo.Radius;
// LINE 173:
	__asm        push   0;
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    eax, [eax+0x12E];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 175:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, curPoliceCars;
	__asm        mov    policeCars[0][ecx*4], eax;
	__asm        inc    curPoliceCars;
// LINE 177:
	return youveWonABrandNewCar;
// LINE 179:
// Block end:
	__asm        jmp    _T1dd;
// LINE 182:
_T1b6:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x3C], eax;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     _T1dd;

	__asm        push   1;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0x38];
	__asm        call   dword ptr [eax];
	__asm        jmp    _T1dd;
// LINE 188:
_T1dd:
	return 0x0;
// LINE 189:
}

// FUNCTION: COPTER_D 0x00537081
unsigned char PoliceCarClass::Dispatch(enum EmergencyType responseType, enum EmergencyLevel responseLevel, long mapx, long mapy) {
// LINE 217:
	__asm        push   5;
	__asm        push   0x62B9E8;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        mov    eax, mapy;
	__asm        push   eax;
	__asm        mov    eax, mapx;
	__asm        push   eax;
	__asm        mov    ecx, gPoliceStations;
	__asm        call   Station::DispatchNearestAvailableVehicle;
	__asm        jmp    __RETURN;
// LINE 218:
__RETURN:
}

// FUNCTION: COPTER_D 0x005370b3
void PoliceCarClass::ItterateFSM() {
	/*bp-0x4*/   /*packed*/ struct _GridCoordinates badGuyLoc;
	/*bp-0x8*/   int32_t dist;
	/*bp-0x14*/  /*packed*/ struct Point3d vec; // 0xc bytes
	/*bp-0x2c*/  /*packed*/ struct _MISSION_PARMS mp; // 0x18 bytes
	/*bp-0x30*/  /*packed*/ struct _CELL_INFO *cptr;
	/*bp-0x34*/  /*packed*/ struct _GridCoordinates oldemergencyloc;

// LINE 248:
	this->foundRoad = 0x0;
// LINE 250:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T940;
// LINE 253:
_T2a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T4d;
// LINE 254:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 256:
_T4d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _Td4;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _Td4;
// LINE 261:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 262:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gPoliceStations;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 267:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 268:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 269:
	this->emergencyState = 0x2;
// LINE 270:
	this->emergencyType = 0x3;
// LINE 271:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 273:
	__asm        jmp    _T96f;
// LINE 276:
_Td4:
	reinterpret_cast<uint16_t>(badGuyLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 277:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PoliceCarClass::ScanForBadGuys;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 278:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T18f;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _T18f;
// LINE 281:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOnStrobe;
// LINE 282:
	this->emergencyState = 0x6;
// LINE 283:
	this->dispatchPathIndex = 0x0;
// LINE 286:
	mp.op = 0xa;
// LINE 287:
	mp.id = this->missionId;
// LINE 288:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    mp.maploc.x, ecx;
// LINE 289:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    mp.maploc.y, ecx;
// LINE 290:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 292:
_T18f:
	__asm        jmp    _T96f;
// LINE 295:
_T194:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 298:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11A];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11B];
	__asm        cmp    ecx, edx;
	__asm        jne    _T204;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gPoliceStations;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 302:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 303:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 305:
	return;
// LINE 308:
_T204:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 309:
	__asm        jmp    _T96f;
// LINE 312:
_T211:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        je     _T22b;
// LINE 314:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 315:
	__asm        jmp    _T96f;
// LINE 318:
_T22b:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 320:
	reinterpret_cast<uint16_t>(badGuyLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 321:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PoliceCarClass::ScanForBadGuys;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 322:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T2a0;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        je     _T2a0;
// LINE 326:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        jne    _T29b;
// LINE 327:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 329:
_T29b:
	__asm        jmp    _T538;
_T2a0:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T37e;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T37e;

	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T37e;
// LINE 332:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::UnLinkIconFromCell;
// LINE 333:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 336:
	__asm        push   8;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T33b;
// LINE 338:
	this->emergencyState = 0x5;
// LINE 339:
	this->personDone = 0x0;
// LINE 340:
	this->personTimer = 0xf00000;
// LINE 341:
	__asm        jmp    _T96f;
// LINE 343:
	__asm        jmp    _T379;
// LINE 346:
_T33b:
	__asm        push   0x15A;
	__asm        push   0x5B7F34;
	__asm        push   0x5B7F58;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T35c;

	__asm        jmp    _T35c;
// LINE 348:
_T35c:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 349:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 350:
	__asm        jmp    _T96f;
// LINE 354:
_T379:
	__asm        jmp    _T538;
// LINE 356:
_T37e:
	reinterpret_cast<uint16_t>(oldemergencyloc.x) = reinterpret_cast<uint16_t>(this->emergencyLocation.x);
// LINE 358:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T3bc;
// LINE 360:
	reinterpret_cast<uint16_t>(this->emergencyLocation.x) = reinterpret_cast<uint16_t>(badGuyLoc.x);
// LINE 361:
	this->foundRoad = 0x1;
// LINE 363:
	__asm        jmp    _T3cd;
// LINE 365:
_T3bc:
	this->foundRoad = this->PoliceCarClass::ChangeEmergencyLocationToSpotlightLocation();
// LINE 369:
_T3cd:
	vec.x = (ViewState.world_pos.x - this->autoDynomitor.loc.x);
// LINE 370:
	vec.y = (ViewState.world_pos.y - this->autoDynomitor.loc.y);
// LINE 371:
	vec.z = (ViewState.world_pos.z - this->autoDynomitor.loc.z);
// LINE 372:
	dist = MTNormalize(vec.x);
// LINE 373:
	__asm        mov    eax, dist;
	__asm        cmp    AutomobileClass::policeSirenDist, eax;
	__asm        jle    _T41d;
// LINE 374:
	AutomobileClass::policeSirenDist = dist;
// LINE 376:
_T41d:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 380:
	__asm        mov    eax, reinterpret_cast<uint32_t>(oldemergencyloc.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::UnLinkIconFromCell;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x11D];
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x11C];
	__asm        mov    [ebp-0x40], ecx;
// LINE 381:
	__asm        mov    eax, [ebp-0x40];
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, [ebp-0x3C];
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    _T491;

	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T496;
_T491:
	__asm        jmp    _T496;
_T496:
	__asm        jmp    _T49b;
_T49b:
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    cptr, eax;
// LINE 382:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x13E], eax;
// LINE 383:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x142], eax;
// LINE 384:
	__asm        mov    eax, cptr;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x146], eax;
// LINE 385:
	this->dispatchIcon.loc.y += 0xa0000;
// LINE 386:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LinkIconToCell;
// LINE 388:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    _T530;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        je     _T538;
// LINE 389:
_T530:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 392:
_T538:
	__asm        jmp    _T96f;
// LINE 396:
_T53d:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PositionIcon;
// LINE 399:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11C];
	__asm        cmp    ecx, edx;
	__asm        jne    _T58f;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x11D];
	__asm        cmp    ecx, edx;
	__asm        jne    _T58f;

	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x70;
	__asm        jne    _T58f;
// LINE 401:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 4;
// LINE 404:
_T58f:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 4;
	__asm        je     _T6ca;
// LINE 406:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x30;
	__asm        jne    _T5cb;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOver;
	__asm        test   eax, eax;
	__asm        je     _T5cb;
// LINE 408:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 410:
	__asm        jmp    _T6bd;
_T5cb:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T6bd;
// LINE 412:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::UnLinkIconFromCell;
// LINE 413:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 414:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFB;
// LINE 417:
	reinterpret_cast<uint16_t>(badGuyLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 418:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PoliceCarClass::ScanForBadGuys;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 419:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T689;
// LINE 422:
	__asm        push   8;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T66a;
// LINE 424:
	this->emergencyState = 0x5;
// LINE 425:
	this->personDone = 0x0;
// LINE 426:
	this->personTimer = 0xf00000;
// LINE 428:
	__asm        jmp    _T684;
// LINE 432:
_T66a:
	this->personTimer = 0x0;
// LINE 433:
	this->emergencyState = 0x1;
// LINE 436:
_T684:
	__asm        jmp    _T6b8;
// LINE 439:
_T689:
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::TurnOffStrobe;
// LINE 440:
	this->emergencyState = 0x1;
// LINE 441:
	this->personDone = 0x0;
// LINE 442:
	this->personTimer = 0x12c0000;
// LINE 445:
_T6b8:
	return;
// LINE 448:
_T6bd:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 450:
	__asm        jmp    _T72a;
// LINE 453:
_T6ca:
	vec.x = (ViewState.world_pos.x - this->autoDynomitor.loc.x);
// LINE 454:
	vec.y = (ViewState.world_pos.y - this->autoDynomitor.loc.y);
// LINE 455:
	vec.z = (ViewState.world_pos.z - this->autoDynomitor.loc.z);
// LINE 456:
	dist = MTNormalize(vec.x);
// LINE 457:
	__asm        mov    eax, dist;
	__asm        cmp    AutomobileClass::policeSirenDist, eax;
	__asm        jle    _T71a;
// LINE 458:
	AutomobileClass::policeSirenDist = dist;
// LINE 460:
_T71a:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 461:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 463:
_T72a:
	__asm        jmp    _T96f;
// LINE 466:
_T72f:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    _T749;
// LINE 469:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 470:
	__asm        jmp    _T96f;
// LINE 473:
_T749:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jle    _T76c;
// LINE 474:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 477:
_T76c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        jne    _T78c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _T854;
// LINE 479:
_T78c:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T7ac;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _T847;
// LINE 481:
_T7ac:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 485:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 486:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x1A];
	__asm        push   eax;
	__asm        call   S3MapRemoveCarInfo;
	__asm        add    esp, 4;
// LINE 487:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x298];
	__asm        push   eax;
	__asm        mov    ecx, gHospitals;
	__asm        call   Station::DecrementQuantityOfVehicleDispatched;
// LINE 491:
	this->emergencyState = 0x2;
// LINE 492:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 495:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T842;
// LINE 497:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     _T842;
// LINE 498:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, cars[0][eax*4];
	__asm        or     dword ptr [eax+8], 0x2000;
// LINE 501:
_T842:
	__asm        jmp    _T854;
// LINE 503:
_T847:
	this->emergencyState = 0x1;
// LINE 506:
_T854:
	__asm        jmp    _T96f;
// LINE 509:
_T859:
	reinterpret_cast<uint16_t>(badGuyLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 510:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PoliceCarClass::ScanForBadGuys;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 511:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x322], 0;
	__asm        je     _T903;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x322];
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _T903;
// LINE 514:
	vec.x = (ViewState.world_pos.x - this->autoDynomitor.loc.x);
// LINE 515:
	vec.y = (ViewState.world_pos.y - this->autoDynomitor.loc.y);
// LINE 516:
	vec.z = (ViewState.world_pos.z - this->autoDynomitor.loc.z);
// LINE 517:
	dist = MTNormalize(vec.x);
// LINE 518:
	__asm        mov    eax, dist;
	__asm        cmp    AutomobileClass::policeSirenDist, eax;
	__asm        jle    _T8ee;
// LINE 519:
	AutomobileClass::policeSirenDist = dist;
// LINE 521:
_T8ee:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 522:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 524:
	__asm        jmp    _T910;
// LINE 527:
_T903:
	this->emergencyState = 0x2;
// LINE 529:
_T910:
	__asm        jmp    _T96f;
// LINE 532:
_T915:
	__asm        push   0x214;
	__asm        push   0x5B7F60;
	__asm        push   0x5B7F84;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T936;

	__asm        jmp    _T936;
// LINE 533:
_T936:
	__asm        jmp    _T96f;
// LINE 534:
	__asm        jmp    _T96f;
_T940:
	__asm        dec    dword ptr [ebp-0x48];
	__asm        cmp    dword ptr [ebp-0x48], 5;
	__asm        ja     _T915;

	__asm        mov    eax, [ebp-0x48];
	__asm        jmp    _Switch_957[0][eax*4];
// Switch pointers:
//   _T2a
//   _T194
//   _T211
//   _T53d
//   _T72f
//   _T859
// LINE 535:
_T96f:
	return;
}

// FUNCTION: COPTER_D 0x00537a2c
enum TurnIndex PoliceCarClass::PickTurnDir(/*packed*/ struct Goal *pGoal) {
	/*bp-0x4*/   /*packed*/ struct _GridCoordinates startLoc;

// LINE 545:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11E], 3;
	__asm        jne    _T3da;
// LINE 547:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x31E], 0;
	__asm        je     _T37e;
// LINE 552:
// Block start:
	/*bp-0x8*/   /*packed*/ struct _RGIndex startVertex;
	/*bp-0xc*/   /*packed*/ struct _RGIndex destVertex;
	reinterpret_cast<uint16_t>(startLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 555:
	startVertex.x = startLoc.x;
// LINE 556:
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        push   eax;
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    startVertex.yindex, al;
// LINE 558:
	__asm        mov    eax, this;
	__asm        add    eax, 0x2F4;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x2CA;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x38];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindIntersections;
// LINE 562:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    _Ted;
// LINE 564:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    _Tc8;

	__asm        push   0x234;
	__asm        push   0x5B7F8C;
	__asm        push   0x5B7FB0;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _Tcd;
_Tc8:
	__asm        jmp    _Tcd;
// LINE 565:
_Tcd:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 567:
	__asm        jmp    _T28d;
_Ted:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    _T14e;
// LINE 569:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    _T129;

	__asm        push   0x239;
	__asm        push   0x5B7FC0;
	__asm        push   0x5B7FE4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T12e;
_T129:
	__asm        jmp    _T12e;
// LINE 570:
_T12e:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 574:
	__asm        jmp    _T28d;
_T14e:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    _T1c4;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2CA];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    ecx, eax;
	__asm        jne    _T1c4;
// LINE 576:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 577:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2D8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, TILUT[0][0][ecx+eax*4];
	__asm        jmp    __RETURN;
// LINE 579:
	__asm        jmp    _T28d;
_T1c4:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    _T23a;

	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2F4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        xor    eax, eax;
	__asm        mov    al, startLoc.y;
	__asm        cmp    ecx, eax;
	__asm        jne    _T23a;
// LINE 581:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 582:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x302];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, TILUT[0][0][ecx+eax*4];
	__asm        jmp    __RETURN;
// LINE 584:
	__asm        jmp    _T28d;
_T23a:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2CA];
	__asm        cmp    [eax+0x2A0], ecx;
	__asm        jne    _T272;
// LINE 586:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 588:
	__asm        jmp    _T28d;
// LINE 590:
_T272:
	__asm        mov    esi, this;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 593:
_T28d:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2CA], 0;
	__asm        jne    _T2ce;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x2F4], 0;
	__asm        jne    _T2ce;

	__asm        push   0x251;
	__asm        push   0x5B7FF4;
	__asm        push   0x5B8018;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T2ce;

	__asm        jmp    _T2ce;
// LINE 595:
_T2ce:
	destVertex.x = this->currDestGoal.pRGV->x;
// LINE 596:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2A0];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    destVertex.yindex, al;
// LINE 599:
	__asm        xor    eax, eax;
	__asm        mov    al, destVertex.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startVertex.x;
	__asm        cmp    eax, ecx;
	__asm        jne    _T34d;

	__asm        xor    eax, eax;
	__asm        mov    al, destVertex.yindex;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, startVertex.yindex;
	__asm        cmp    eax, ecx;
	__asm        jne    _T34d;
// LINE 602:
	this->speed = 0x0;
// LINE 603:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PickTurnDir;
	__asm        jmp    __RETURN;
// LINE 605:
	__asm        jmp    _T36f;
// LINE 608:
_T34d:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVertex.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, 0x5C37F8;
	__asm        call   ShortestPath::DepthFirstSearch;
// LINE 609:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVertex.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::BuildPath;
// LINE 613:
_T36f:
	this->dispatchPathIndex = 0x0;
// LINE 615:
// Block end:
	__asm        jmp    _T3a6;
// LINE 621:
_T37e:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x293];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0x292];
	__asm        cmp    ecx, edx;
	__asm        jle    _T3a6;
// LINE 622:
	this->dispatchPathIndex++;
// LINE 628:
_T3a6:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x292];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+eax+0x192];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        shl    eax, 4;
	__asm        mov    eax, TILUT[0][0][eax+edx*4];
	__asm        jmp    __RETURN;
// LINE 630:
	__asm        jmp    _T3eb;
// LINE 633:
_T3da:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PickTurnDir;
	__asm        jmp    __RETURN;
// LINE 636:
_T3eb:
	__asm        mov    eax, pGoal;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::PickTurnDir;
	__asm        jmp    __RETURN;
// LINE 637:
__RETURN:
}

// FUNCTION: COPTER_D 0x00537e2f
int32_t PoliceCarClass::ChangeEmergencyLocationToSpotlightLocation() {
	/*bp-0x10*/  /*packed*/ class SpiralScan scan; // 0x10 bytes
	/*bp-0x14*/  /*packed*/ struct _GridCoordinates loc;

// LINE 643:
	__asm        push   4;
	__asm        lea    ecx, scan.currDist;
	__asm        call   SpiralScan::SpiralScan;
// LINE 647:
	__asm        mov    eax, G_uheli;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    eax, [eax+0x18];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    loc.x, al;
// LINE 648:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, G_uheli;
	__asm        mov    ecx, [ecx+0xC0];
	__asm        sub    eax, [ecx+0x20];
	__asm        sar    eax, 0x16;
	__asm        mov    loc.y, al;
// LINE 653:
_T49:
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        test   eax, eax;
	__asm        jl     _T7f;

	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        cmp    eax, 0x7F;
	__asm        jg     _T7f;

	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        test   eax, eax;
	__asm        jl     _T7f;

	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        cmp    eax, 0x7F;
	__asm        jle    _T8b;
_T7f:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _Te4;
_T8b:
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc.y;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    [ebp-0x20], ax;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     _Td8;

	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    _Td8;

	__asm        mov    dword ptr [ebp-0x24], 1;
	__asm        jmp    _Te4;

	__asm        jmp    _Te4;
_Td8:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _Te4;
_Te4:
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     _T110;
// LINE 655:
	reinterpret_cast<uint16_t>(this->emergencyLocation.x) = reinterpret_cast<uint16_t>(loc.x);
// LINE 656:
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        jmp    _T108;
_T108:
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    __RETURN;
// LINE 659:
_T110:
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        lea    ecx, scan.currDist;
	__asm        call   SpiralScan::Next;
	__asm        test   eax, eax;
	__asm        jne    _T49;
// LINE 661:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    _T130;
_T130:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 662:
__RETURN:
}

// FUNCTION: COPTER_D 0x00537f6c
int32_t PoliceCarClass::AtScene() {
// LINE 669:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    _T48;
// LINE 673:
	__asm        jmp    _T61;
// LINE 675:
_T22:
	__asm        push   0x2A3;
	__asm        push   0x5B8020;
	__asm        push   0x5B8044;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T43;

	__asm        jmp    _T43;
// LINE 676:
_T43:
	__asm        jmp    _T61;
_T48:
	__asm        cmp    dword ptr [ebp-8], 3;
	__asm        jl     _T22;

	__asm        cmp    dword ptr [ebp-8], 4;
	__asm        jle    _T61;

	__asm        jmp    _T22;
// LINE 681:
_T61:
	return 0x0;
// LINE 682:
}

// FUNCTION: COPTER_D 0x00537fd9
/*packed*/ struct _DYOBJ_INST* PoliceCarClass::ScanForBadGuys(/*packed*/ struct _GridCoordinates& scanLoc) {
	/*bp-0x10*/  /*packed*/ class SpiralScan spiral; // 0x10 bytes
	/*bp-0x14*/  /*packed*/ struct _DYOBJ_INST *dyptr;
	/*bp-0x18*/  /*packed*/ struct _CELL_INFO *cptr;

// LINE 690:
	__asm        push   3;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   SpiralScan::SpiralScan;
// LINE 694:
_T16:
	__asm        mov    eax, scanLoc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    [ebp-0x2C], ecx;
	__asm        mov    eax, scanLoc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    [ebp-0x30], ecx;
// LINE 696:
	__asm        mov    eax, [ebp-0x30];
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, [ebp-0x2C];
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    _T6f;

	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T74;
_T6f:
	__asm        jmp    _T74;
_T74:
	__asm        jmp    _T79;
_T79:
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    cptr, eax;
// LINE 697:
	dyptr = cptr->dyptr;
// LINE 701:
_T88:
	__asm        cmp    dyptr, 0;
	__asm        je     _T117;
// LINE 703:
	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     _Tcd;

	__asm        mov    eax, dyptr;
	__asm        push   eax;
	__asm        call   IsThisABadGuy;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _Tcd;
// LINE 705:
	__asm        mov    eax, dyptr;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    _Tc0;
_Tc0:
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    __RETURN;
// LINE 707:
	__asm        jmp    _T10a;
_Tcd:
	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     _T10a;

	__asm        mov    eax, dyptr;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    ecx, cars[0][eax*4];
	__asm        call   AutomobileClass::AmIABadGuy;
	__asm        test   eax, eax;
	__asm        je     _T10a;
// LINE 709:
	__asm        mov    eax, dyptr;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    _T102;
_T102:
	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    __RETURN;
// LINE 712:
_T10a:
	dyptr = dyptr->next;
// LINE 713:
	__asm        jmp    _T88;
// LINE 715:
_T117:
	__asm        mov    eax, scanLoc;
	__asm        push   eax;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   SpiralScan::Next;
	__asm        test   eax, eax;
	__asm        jne    _T16;
// LINE 717:
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    _T137;
_T137:
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    __RETURN;
// LINE 718:
__RETURN:
}

// FUNCTION: COPTER_D 0x0053811f
void PoliceCarClass::SetSaveData(/*packed*/ struct _AUTO_LOAD_SAVE *sd) {
// LINE 730:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x2BC;
	__asm        add    esi, 0x2A0;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 731:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x2E8;
	__asm        add    esi, 0x2CA;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 732:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x314;
	__asm        add    esi, 0x2F4;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 733:
	sd->p.foundRoad = this->foundRoad;
// LINE 735:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     _Tf7;
// LINE 739:
	sd->p.currpRGVFixup.x = this->currDestGoal.pRGV->x;
// LINE 740:
	sd->p.currpRGVFixup.y = this->currDestGoal.pRGV->y;
// LINE 741:
	sd->p.dest1pRGVFixup.x = this->destGoal1.pRGV->x;
// LINE 742:
	sd->p.dest1pRGVFixup.y = this->destGoal1.pRGV->y;
// LINE 743:
	sd->p.dest2pRGVFixup.x = this->destGoal2.pRGV->x;
// LINE 744:
	sd->p.dest2pRGVFixup.y = this->destGoal2.pRGV->y;
// LINE 748:
_Tf7:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::SetSaveData;
// LINE 749:
	return;
}

// FUNCTION: COPTER_D 0x0053822e
void PoliceCarClass::LoadSaveData(/*packed*/ struct _AUTO_LOAD_SAVE *sd) {
	/*bp-0x4*/   /*packed*/ struct _GridCoordinates badGuyLoc;
	/*bp-0x8*/   unsigned char yindex;

// LINE 764:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    _T1d;
// LINE 766:
	return;
// LINE 770:
_T1d:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LoadSaveData;
// LINE 773:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2A0;
	__asm        add    esi, 0x2BC;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 774:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2CA;
	__asm        add    esi, 0x2E8;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 775:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x2F4;
	__asm        add    esi, 0x314;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 776:
	this->foundRoad = sd->p.foundRoad;
// LINE 778:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x294];
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    _Tbf;
// LINE 784:
_T9d:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x11C];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   EmergencyVehicleClass::LinkIconToCell;
// LINE 785:
	__asm        jmp    _Td8;
// LINE 788:
	__asm        jmp    _Td8;
// LINE 789:
	__asm        jmp    _Td8;
_Tbf:
	__asm        cmp    dword ptr [ebp-0x10], 1;
	__asm        jl     _Td8;

	__asm        cmp    dword ptr [ebp-0x10], 4;
	__asm        jle    _T9d;

	__asm        jmp    _Td8;
// LINE 794:
_Td8:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E7];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E6];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 795:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x2E6];
	__asm        mov    eax, gRoadGraph.RGArray[0][ecx*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2A0], eax;
// LINE 798:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x313];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x312];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 799:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x312];
	__asm        mov    eax, gRoadGraph.RGArray[0][ecx*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2CA], eax;
// LINE 802:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33F];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33E];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   RoadGraph::FindYIndexToVertex;
	__asm        mov    yindex, al;
// LINE 803:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x33E];
	__asm        mov    eax, gRoadGraph.RGArray[0][ecx*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2F4], eax;
// LINE 805:
	reinterpret_cast<uint16_t>(badGuyLoc.x) = reinterpret_cast<uint16_t>(this->goal.gridLoc.x);
// LINE 806:
	__asm        lea    eax, badGuyLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   PoliceCarClass::ScanForBadGuys;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x322], eax;
// LINE 807:
	return;
}



// Contribution: 1:00137430-00137468 Module: 158, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00538430
// PoliceCarClass::`scalar deleting destructor'



// Contribution: 2:000042d0-0000430f Module: 158, 8 byte alignment, initialized_data, read, 
// GLOBAL: COPTER_D 0x005932d0
static const enum TurnIndex TILUT[4][4] = { 0 /* todo */ };



// Contribution: 2:00004310-00004337 Module: 158, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for PoliceCarClass @ 0x00593310
//   00: PoliceCarClass::`scalar deleting destructor' @ 0x00538430
//   01: AutomobileClass::PullOver @ 0x005048cd
//   02: EmergencyVehicleClass::AdjustSpeed @ 0x0054222e
//   03: PoliceCarClass::PickTurnDir @ 0x00537a2c
//   04: PoliceCarClass::ItterateFSM @ 0x005370b3
//   05: PoliceCarClass::SetSaveData @ 0x0053811f
//   06: PoliceCarClass::LoadSaveData @ 0x0053822e
//   07: EmergencyVehicleClass::BeamToWithinCameraRange @ 0x005360a0
//   08: AutomobileClass::BeamToLocation @ 0x005030aa
//   09: EmergencyVehicleClass::Reset @ 0x00542631
//   10 entries



// Contribution: 3:00020eb0-00021049 Module: 158, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7eb0
int32_t curPoliceCars = 0;



// Contribution: 3:000949e8-000949fb Module: 158, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9e8
/*packed*/ class PoliceCarClass *policeCars[5];

