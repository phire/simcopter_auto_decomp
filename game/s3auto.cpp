// Module: S3auto.obj
// Source: C:\Copter\source\game\S3auto.cpp
// autogenerated by simcopter_tool from PDB file

// Type: int32_t;

// Type: class AutomobileClass (forward reference);
class AutomobileClass{
		enum CarType {
			kCarAmbulance = 0,
			kCarCop = 1,
			kCarFiretruck = 2,
			kCarCriminal = 3,
		};
		enum AutoMessageID {
			AM_NO_MESSAGE = 0,
			AM_CANCEL_AUTO_MISSION = 1,
		};
		enum __unnamed {
			CAR_TYPES = 7,
			PERCENTAGE_OF_AUTO1 = 10,
			PERCENTAGE_OF_AUTO2 = 20,
			PERCENTAGE_OF_AUTO3 = 20,
			PERCENTAGE_OF_AUTO4 = 10,
			PERCENTAGE_OF_AUTO5 = 10,
			PERCENTAGE_OF_AUTO6 = 20,
			PERCENTAGE_OF_AUTO7 = 20,
			TOTAL_PERCENTAGE = 110,
		};
		enum __unnamed {
			NO_X_POSITION = -1,
			STARTING_X = 3,
			ENDING_X = 125,
			NO_Y_POSITION = -1,
			STARTING_Y = 3,
			ENDING_Y = 125,
		};
		enum IntersectionTypes {
			DEAD_END = 0,
			STRAIGHT_AHEAD = 1,
			LEFT_ONLY = 2,
			RIGHT_ONLY = 4,
			LEFT_OR_STRAIGHT = 3,
			LEFT_OR_RIGHT = 6,
			RIGHT_OR_STRAIGHT = 5,
			LEFT_STRAIGHT_OR_RIGHT = 7,
			DEAD_END_HIWAY = 16,
		};
		enum StoppedReasons {
			NO_REASON = 0,
			TRAFFIC = 1,
			STOPPED_TRAFFIC = 2,
			PERSON_IN_WAY = 3,
			AUTO_IN_WAY = 4,
			DEBRIS_IN_WAY = 5,
			UNIDENTIFIED_IN_WAY = 6,
			HELI_IN_WAY = 7,
			END_OF_ROAD = 8,
			END_OF_HIWAY = 9,
			INTERSECTION_FULL = 10,
			BEEN_PULLED_OVER = 11,
		};
		enum RoadTileOffsets {
			RD_CENTOFF = 851968,
			RD_EDGEOFF = 131072,
		};
		enum HiwayOffsets {
			HW_CENTOFF_LANE1 = 851968,
			HW_EDGEOFF_LANE1 = 131072,
			HW_CENTOFF_LANE2 = 851968,
			HW_EDGEOFF_LANE2 = 131072,
			HW_HEIGHT = 2031616,
		};
public:
	static int32_t fireSirenDist;
	static int32_t policeSirenDist;
	static int32_t ambSirenDist;
	static int32_t fireHoseDist;
		enum __unnamed {
			CAR_RADIUS = 327680,
			COLLISION_SPACE = 655360,
			ROAD_SPEED = 2621440,
			ROAD_SLOWDOWN_FACTOR = 131072,
			HIWAY_SPEED = 6225920,
			HIWAY_SLOWDOWN_FACTOR = 327680,
			SPEED_VARIANCE = 262144,
			HIWAY_VARIANCE = 655360,
			MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
			MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
			MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
		};
		enum Flags {
			AUTO_INITIALIZED = 1,
			AUTO_PLACED = 2,
			AUTO_NEEDS_TO_PULL_OVER = 4,
			AUTO_PULL_OVER = 8,
			AUTO_PULLING_OVER = 16,
			AUTO_PULLED_OVER = 32,
			AUTO_PULLING_OUT = 64,
			AUTO_IN_INTERSECTION = 128,
			AUTO_ON_FIRE = 256,
			AUTO_JAMMED = 512,
			AUTO_RIGHT_OF_WAY = 1024,
			AUTO_ON_HIWAY = 2048,
			AUTO_SPEEDER = 4096,
			AUTO_SPEEDER_DONE = 8192,
			AUTO_UTURN = 16384,
		};
public:
	long carModel;
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	int32_t hornSoundId;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t personDone;
	int32_t personState;
	int32_t personTimer;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	// calltype: NearC
	static int32_t S3AutoMessage(short, short);
	// calltype: NearC
	static int32_t MIFFLoad(void * __ptr32);
	// calltype: NearC
	static int32_t MIFFSave(void * __ptr32);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	// vtable: 4
	intro void PullOver(short);
	void PullOut();
	int32_t CanIPullOut();
	int32_t CanIPullOver();
	void DoAUTurn();
	long GetCarModel();
	// calltype: NearC
	static struct _DYOBJ_INST* GetClosestCar(int32_t, int32_t, int32_t);
protected:
	void Itterate();
	// vtable: 8
	intro void AdjustSpeed();
	void Reset();
	// vtable: 12
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 16
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	int32_t AutoMessage(short);
	int32_t PlacePerson(int32_t, int32_t);
	// vtable: 20
	intro void SetSaveData(struct _AUTO_LOAD_SAVE*);
	// vtable: 24
	intro void LoadSaveData(struct _AUTO_LOAD_SAVE*);
	void HonkHorn();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 28
	intro void BeamToWithinCameraRange();
	// vtable: 32
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
	void ChangeAutoColor();
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
	void DoPullOverStuff(int32_t);
	int32_t CanIDoAUTurn();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
};

// Type: struct _GridCoordinates;
class _GridCoordinates{
public:
	unsigned char x;
	unsigned char y;
};

// Type: struct _DYOBJ_INST (forward reference);

// Type: short;

// Type: long;

// Type: void;

// Type: struct VRview;
class VRview{
public:
	struct Point3d loc;
	struct Point3d scale;
	int32_t matrix[4][4];
};

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: struct MISSION_DATA (forward reference);

// Type: struct _MISSION_PARMS;
class _MISSION_PARMS{
public:
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct _GridCoordinates (forward reference);

// Type: struct _CELL_INFO (forward reference);

// Type: struct Goal (forward reference);

// Type: enum TurnIndex;

// Type: unsigned short;

// Type: struct Goal;
class Goal{
public:
	struct RGVertex* pRGV;
	int32_t elementIndex;
	int32_t gridIndex;
	struct _GridCoordinates gridLoc;
	enum DirIndex2 edgeIndex;
	enum DirIndex2 direction;
	int32_t distance;
	int32_t turnFlags;
	int32_t deadEndFlags;
	int32_t fElevated;
	enum SlopeIndex slope;
};

// Type: class SpiralScan;
class SpiralScan{
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(struct _GridCoordinates&);
	int32_t InCityGridLimits(struct _GridCoordinates);
private:
	int32_t currDist;
	int32_t currDir;
	int32_t currDia;
	int32_t maxDia;
};

// Type: struct VRObjInfo;
class VRObjInfo{
public:
	int32_t Faces;
	int32_t Verts;
	int32_t Attribute;
	int32_t Radius;
	struct Point3d* ObjCenter;
	struct Point3d* VertsPtr;
	struct Xform3d* VertsXfm;
	struct Point3d* OrgVerts;
	int32_t[4][4]* Matrix;
};

// Type: char *;

// Type: unsigned char;

// Type: int32_t[4][4];

// Type: enum AutomobileClass::StoppedReasons;

// Type: struct Point3d (forward reference);

// Type: struct Point2d (forward reference);

// Type: struct Point2d;
class Point2d{
public:
	int32_t x;
	int32_t y;
};

// Type: struct VRFaceInfo;
class VRFaceInfo{
public:
	int32_t Face;
	int32_t Verts;
	int32_t Attribute;
	int32_t Plotter;
	struct VRBmpHdr* Bitmap;
	int32_t * VertList;
	struct MapVert* MapVList;
	struct MapVert* BarryPtr;
};

// Type: enum DirectionTypes[8];

// Type: enum DirectionTypes;

// Type: enum AutomobileClass::IntersectionTypes;

// Type: void * __ptr32;

// Type: struct _AUTO_LOAD_SAVE (forward reference);

// Type: uint32_t;



// Contribution: 1:001005e0-00108fb1 Module: 171, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005015e0
int32_t S3StartSpeederMission() {
	int32_t i;
	class AutomobileClass* pCar;

// LINE 74:
	__asm        mov    i, 1;
	__asm        jmp    near ptr 0x005015F8;
	__asm        inc    i;
	__asm        cmp    i, 0x46;
	__asm        jge    near ptr 0x005016BD;
// LINE 76:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    pCar, eax;
// LINE 87:
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x7A;
	__asm        je     near ptr 0x00501666;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x7D;
	__asm        je     near ptr 0x00501666;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x7E;
	__asm        je     near ptr 0x00501666;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x12A;
	__asm        je     near ptr 0x00501666;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x12B;
	__asm        je     near ptr 0x00501666;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x12C;
	__asm        jne    near ptr 0x005016B8;
	__asm        mov    eax, pCar;
	__asm        test   byte ptr [eax+9], 1;
	__asm        jne    near ptr 0x005016B8;
	__asm        mov    eax, pCar;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x005016B8;
	__asm        mov    eax, pCar;
	__asm        test   byte ptr [eax+8], 1;
	__asm        je     near ptr 0x005016B8;
	__asm        mov    eax, i;
	__asm        cmp    ds:[0x5B52C4], eax;
	__asm        je     near ptr 0x005016B8;
// LINE 90:
	__asm        mov    eax, pCar;
	__asm        or     dword ptr [eax+8], 0x1000;
// LINE 93:
	__asm        mov    eax, i;
	__asm        mov    ds:[0x5B52C4], eax;
// LINE 94:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005016C4;
// LINE 96:
	__asm        jmp    near ptr 0x005015F5;
// LINE 98:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005016C4;
// LINE 99:
}

// FUNCTION: COPTER_D 0x005016c9
int32_t Distance(struct _GridCoordinates loc1, struct _GridCoordinates loc2) {
	int32_t deltay;
	int32_t deltax;

// LINE 109:
	__asm        xor    eax, eax;
	__asm        mov    al, loc2.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc1.x;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x005016F8;
// LINE 110:
	__asm        xor    eax, eax;
	__asm        mov    al, loc1.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc2.x;
	__asm        sub    eax, ecx;
	__asm        mov    deltax, eax;
// LINE 111:
	__asm        jmp    near ptr 0x00501707;
// LINE 112:
	__asm        xor    eax, eax;
	__asm        mov    al, loc2.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc1.x;
	__asm        sub    eax, ecx;
	__asm        mov    deltax, eax;
// LINE 114:
	__asm        xor    eax, eax;
	__asm        mov    al, loc2.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc1.y;
	__asm        cmp    eax, ecx;
	__asm        jge    near ptr 0x0050172D;
// LINE 115:
	__asm        xor    eax, eax;
	__asm        mov    al, loc1.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc2.y;
	__asm        sub    eax, ecx;
	__asm        mov    deltay, eax;
// LINE 116:
	__asm        jmp    near ptr 0x0050173C;
// LINE 117:
	__asm        xor    eax, eax;
	__asm        mov    al, loc2.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, loc1.y;
	__asm        sub    eax, ecx;
	__asm        mov    deltay, eax;
// LINE 119:
	__asm        mov    eax, deltax;
	__asm        cmp    deltay, eax;
	__asm        jge    near ptr 0x0050175B;
// LINE 121:
	__asm        mov    eax, deltay;
	__asm        sar    eax, 1;
	__asm        add    eax, deltax;
	__asm        jmp    near ptr 0x00501769;
// LINE 123:
	__asm        jmp    near ptr 0x00501769;
// LINE 125:
	__asm        mov    eax, deltax;
	__asm        sar    eax, 1;
	__asm        add    eax, deltay;
	__asm        jmp    near ptr 0x00501769;
// LINE 127:
}

// FUNCTION: COPTER_D 0x0050176e
struct _DYOBJ_INST* AutomobileClass::GetClosestCar(int32_t cartype, int32_t cellx, int32_t celly) {
	struct _GridCoordinates there;
	int32_t minDist;
	int32_t i;
	struct _GridCoordinates here;
	int32_t dist;
	int32_t carID;

// LINE 142:
	__asm        mov    minDist, 0x7D00;
// LINE 147:
	__asm        mov    al, reinterpret_cast<uint8_t>(cellx);
	__asm        mov    there.x, al;
// LINE 148:
	__asm        mov    al, reinterpret_cast<uint8_t>(celly);
	__asm        mov    there.y, al;
// LINE 150:
	__asm        mov    eax, cartype;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00501A59;
// LINE 153:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x005017A4;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x00501818;
// LINE 156:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9B8];
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00501813;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9B8];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00501813;
// LINE 158:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9B8];
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(here.x), ax;
// LINE 159:
	__asm        mov    eax, reinterpret_cast<uint32_t>(there.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        call   0x005016C9;
	__asm        add    esp, 8;
	__asm        mov    dist, eax;
// LINE 160:
	__asm        mov    eax, minDist;
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x00501813;
// LINE 162:
	__asm        mov    eax, dist;
	__asm        mov    minDist, eax;
// LINE 163:
	__asm        mov    eax, i;
	__asm        mov    carID, eax;
// LINE 166:
	__asm        jmp    near ptr 0x005017A1;
// LINE 168:
	__asm        cmp    minDist, 0x7D00;
	__asm        jne    near ptr 0x00501831;
// LINE 169:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 170:
	__asm        jmp    near ptr 0x00501843;
// LINE 171:
	__asm        mov    eax, carID;
	__asm        mov    eax, [eax*4+0x62B9B8];
	__asm        add    eax, 0xC;
	__asm        jmp    near ptr 0x00501A84;
// LINE 174:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00501852;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x005018C6;
// LINE 177:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9E8];
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x005018C1;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9E8];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x005018C1;
// LINE 179:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9E8];
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(here.x), ax;
// LINE 180:
	__asm        mov    eax, reinterpret_cast<uint32_t>(there.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        call   0x005016C9;
	__asm        add    esp, 8;
	__asm        mov    dist, eax;
// LINE 181:
	__asm        mov    eax, minDist;
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x005018C1;
// LINE 183:
	__asm        mov    eax, dist;
	__asm        mov    minDist, eax;
// LINE 184:
	__asm        mov    eax, i;
	__asm        mov    carID, eax;
// LINE 187:
	__asm        jmp    near ptr 0x0050184F;
// LINE 189:
	__asm        cmp    minDist, 0x7D00;
	__asm        jne    near ptr 0x005018DF;
// LINE 190:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 191:
	__asm        jmp    near ptr 0x005018F1;
// LINE 192:
	__asm        mov    eax, carID;
	__asm        mov    eax, [eax*4+0x62B9E8];
	__asm        add    eax, 0xC;
	__asm        jmp    near ptr 0x00501A84;
// LINE 195:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00501900;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x00501974;
// LINE 198:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9D0];
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x0050196F;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9D0];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x0050196F;
// LINE 200:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9D0];
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(here.x), ax;
// LINE 201:
	__asm        mov    eax, reinterpret_cast<uint32_t>(there.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        call   0x005016C9;
	__asm        add    esp, 8;
	__asm        mov    dist, eax;
// LINE 202:
	__asm        mov    eax, minDist;
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x0050196F;
// LINE 204:
	__asm        mov    eax, dist;
	__asm        mov    minDist, eax;
// LINE 205:
	__asm        mov    eax, i;
	__asm        mov    carID, eax;
// LINE 208:
	__asm        jmp    near ptr 0x005018FD;
// LINE 210:
	__asm        cmp    minDist, 0x7D00;
	__asm        jne    near ptr 0x0050198D;
// LINE 211:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 212:
	__asm        jmp    near ptr 0x0050199F;
// LINE 213:
	__asm        mov    eax, carID;
	__asm        mov    eax, [eax*4+0x62B9D0];
	__asm        add    eax, 0xC;
	__asm        jmp    near ptr 0x00501A84;
// LINE 216:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x005019AE;
	__asm        inc    i;
	__asm        cmp    i, 5;
	__asm        jge    near ptr 0x00501A22;
// LINE 219:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9A0];
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00501A1D;
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9A0];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00501A1D;
// LINE 221:
	__asm        mov    eax, i;
	__asm        mov    eax, [eax*4+0x62B9A0];
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(here.x), ax;
// LINE 222:
	__asm        mov    eax, reinterpret_cast<uint32_t>(there.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(here.x);
	__asm        push   eax;
	__asm        call   0x005016C9;
	__asm        add    esp, 8;
	__asm        mov    dist, eax;
// LINE 223:
	__asm        mov    eax, minDist;
	__asm        cmp    dist, eax;
	__asm        jge    near ptr 0x00501A1D;
// LINE 225:
	__asm        mov    eax, dist;
	__asm        mov    minDist, eax;
// LINE 226:
	__asm        mov    eax, i;
	__asm        mov    carID, eax;
// LINE 229:
	__asm        jmp    near ptr 0x005019AB;
// LINE 231:
	__asm        cmp    minDist, 0x7D00;
	__asm        jne    near ptr 0x00501A3B;
// LINE 232:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 233:
	__asm        jmp    near ptr 0x00501A4D;
// LINE 234:
	__asm        mov    eax, carID;
	__asm        mov    eax, [eax*4+0x62B9A0];
	__asm        add    eax, 0xC;
	__asm        jmp    near ptr 0x00501A84;
// LINE 237:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 238:
	__asm        jmp    near ptr 0x00501A7D;
	__asm        cmp    dword ptr [ebp-0x1C], 3;
	__asm        ja     near ptr 0x00501A4D;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    dword ptr [eax*4+0x501A6D];
// Switch pointers
// LINE 240:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501A84;
// LINE 241:
}

// FUNCTION: COPTER_D 0x00501a89
int32_t AutomobileClass::S3AutoMessage(short vehicleID, short messID) {
// LINE 246:
	__asm        mov    eax, reinterpret_cast<uint32_t>(messID);
	__asm        push   eax;
	__asm        movsx  eax, vehicleID;
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   0x00501AAD;
	__asm        jmp    near ptr 0x00501AA8;
// LINE 247:
}

// FUNCTION: COPTER_D 0x00501aad
int32_t AutomobileClass::AutoMessage(short messID) {
// LINE 252:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        jne    near ptr 0x00501ACD;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501AF2;
// LINE 254:
	__asm        movsx  eax, messID;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00501AE3;
// LINE 258:
	__asm        jmp    near ptr 0x00501AE8;
// LINE 259:
	__asm        jmp    near ptr 0x00501AE8;
	__asm        jmp    near ptr 0x00501AE8;
// LINE 261:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00501AF2;
// LINE 262:
}

// FUNCTION: COPTER_D 0x00501af9
int32_t GetTheCurrentNumberOfAutomobiles() {
// LINE 269:
	__asm        mov    eax, ds:[0x5B52C8];
	__asm        jmp    near ptr 0x00501B09;
// LINE 270:
}

// FUNCTION: COPTER_D 0x00501b0e
int32_t SetTheCurrentNumberOfAutomobiles(int32_t num) {
// LINE 275:
	__asm        cmp    num, 0x32;
	__asm        jg     near ptr 0x00501B30;
// LINE 277:
	__asm        mov    eax, num;
	__asm        mov    ds:[0x5B52C8], eax;
// LINE 278:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00501B37;
// LINE 281:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501B37;
// LINE 282:
}

// FUNCTION: COPTER_D 0x00501b3c
int32_t CreateAutomobileInstance(int32_t instanceID) {
// LINE 304:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   0x00501DB8;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00501B60;
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00501B62;
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501B67;
// LINE 305:
}

// FUNCTION: COPTER_D 0x00501b6c
void AutomobileClass::AutomobileClass() {
	long odds;

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x592D98;
// LINE 327:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 328:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBE], 0x1E0000;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9A], 0;
// LINE 330:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x116], 0;
// LINE 333:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0xC], edx;
	__asm        jmp    near ptr 0x00501C08;
// LINE 336:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCA], 0x2D;
// LINE 337:
	__asm        jmp    near ptr 0x00501C2B;
// LINE 339:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCA], 0x2E;
// LINE 340:
	__asm        jmp    near ptr 0x00501C2B;
// LINE 342:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCA], 0x2F;
// LINE 343:
	__asm        jmp    near ptr 0x00501C2B;
// LINE 344:
	__asm        jmp    near ptr 0x00501C2B;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00501BCD;
	__asm        cmp    dword ptr [ebp-0xC], 1;
	__asm        je     near ptr 0x00501BDF;
	__asm        cmp    dword ptr [ebp-0xC], 2;
	__asm        je     near ptr 0x00501BF1;
	__asm        jmp    near ptr 0x00501C2B;
// LINE 349:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0x6E;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    odds, edx;
// LINE 351:
	__asm        cmp    odds, 0xA;
	__asm        jge    near ptr 0x00501C57;
// LINE 353:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x7A;
// LINE 361:
	__asm        jmp    near ptr 0x00501CF5;
// LINE 363:
	__asm        cmp    odds, 0x32;
	__asm        jge    near ptr 0x00501C70;
// LINE 365:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x7D;
// LINE 367:
	__asm        jmp    near ptr 0x00501CF5;
// LINE 370:
	__asm        cmp    odds, 0x3C;
	__asm        jge    near ptr 0x00501C89;
// LINE 372:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x7E;
// LINE 374:
	__asm        jmp    near ptr 0x00501CF5;
// LINE 378:
	__asm        cmp    odds, 0x46;
	__asm        jge    near ptr 0x00501CA2;
// LINE 380:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x12A;
// LINE 382:
	__asm        jmp    near ptr 0x00501CF5;
// LINE 387:
	__asm        cmp    odds, 0x5A;
	__asm        jge    near ptr 0x00501CBB;
// LINE 389:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x12B;
// LINE 391:
	__asm        jmp    near ptr 0x00501CF5;
	__asm        cmp    odds, 0x6E;
	__asm        jge    near ptr 0x00501CD4;
// LINE 393:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0x12C;
// LINE 395:
	__asm        jmp    near ptr 0x00501CF5;
// LINE 397:
	__asm        push   0x18D;
	__asm        push   0x5B52CC;
	__asm        push   0x5B52F0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00501CF5;
	__asm        jmp    near ptr 0x00501CF5;
// LINE 400:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFF8F;
// LINE 402:
	__asm        jmp    near ptr 0x00501D01;
	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00501d09
void AutomobileClass::~AutomobileClass() {
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x592D98;
// LINE 414:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 1;
	__asm        je     near ptr 0x00501D47;
// LINE 416:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00501D47;
// LINE 418:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 430:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFE;
// LINE 431:
	__asm        jmp    near ptr 0x00501D53;
}

// FUNCTION: COPTER_D 0x00501d58
class AutomobileClass* AutomobileClass::GetAutoPointer(long index) {
// LINE 451:
	__asm        mov    eax, index;
	__asm        cmp    ds:[0x5B52C8], eax;
	__asm        jg     near ptr 0x00501D89;
	__asm        push   0x1C3;
	__asm        push   0x5B52F8;
	__asm        push   0x5B531C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00501D8E;
	__asm        jmp    near ptr 0x00501D8E;
// LINE 453:
	__asm        mov    eax, index;
	__asm        cmp    ds:[0x5B52C8], eax;
	__asm        jg     near ptr 0x00501DA4;
// LINE 454:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501DB3;
// LINE 456:
	__asm        mov    eax, index;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        jmp    near ptr 0x00501DB3;
// LINE 457:
}

// FUNCTION: COPTER_D 0x00501db8
class AutomobileClass* AutomobileClass::CreateInstance(int32_t instanceID) {
	class AutomobileClass* youveWonABrandNewCar;

// LINE 480:
	__asm        push   0x11A;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00501DEB;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x00501B6C;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    near ptr 0x00501DF2;
	__asm        mov    youveWonABrandNewCar, 0;
// LINE 483:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     near ptr 0x00501E65;
// LINE 486:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   0x00504337;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00501E1D;
// LINE 488:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    near ptr 0x00501E6C;
// LINE 490:
	__asm        jmp    near ptr 0x00501E65;
// LINE 493:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00501E44;
	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    near ptr 0x00501E44;
// LINE 494:
	__asm        push   0x1EE;
	__asm        push   0x5B5330;
	__asm        push   0x5B5354;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00501E65;
	__asm        jmp    near ptr 0x00501E65;
// LINE 500:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00501E6C;
// LINE 501:
}

// FUNCTION: COPTER_D 0x00501e71
void AutomobileClass::ResetAll() {
	int32_t currentCarIndex;

// LINE 543:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x00501E89;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x00501EA7;
// LINE 545:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   0x00504116;
// LINE 546:
	__asm        jmp    near ptr 0x00501E86;
// LINE 547:
	__asm        jmp    near ptr 0x00501EAC;
}

// FUNCTION: COPTER_D 0x00501eb1
void AutomobileClass::ItterateAll() {
	int32_t currentCarIndex;

// LINE 574:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x00501EC9;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x00501EE7;
// LINE 576:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   0x00501EF1;
// LINE 577:
	__asm        jmp    near ptr 0x00501EC6;
// LINE 578:
	__asm        jmp    near ptr 0x00501EEC;
}

// FUNCTION: COPTER_D 0x00501ef1
void AutomobileClass::Itterate() {
// LINE 601:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 1;
	__asm        jne    near ptr 0x00501F26;
	__asm        push   0x259;
	__asm        push   0x5B535C;
	__asm        push   0x5B5380;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00501F2B;
	__asm        jmp    near ptr 0x00501F2B;
// LINE 608:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0xBE], eax;
// LINE 613:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x0050214F;
// LINE 617:
// Block start:
	struct VRview position;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x00501F5F;
	__asm        mov    dword ptr [ebp-0x5C], 1;
	__asm        jmp    near ptr 0x00501FB6;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00501F7E;
	__asm        mov    dword ptr [ebp-0x5C], 1;
	__asm        jmp    near ptr 0x00501FB6;
	__asm        jmp    near ptr 0x00501FAA;
	__asm        cmp    dword ptr [ebp-0x68], 0x11C;
	__asm        jl     near ptr 0x00501FAA;
	__asm        cmp    dword ptr [ebp-0x68], 0x11F;
	__asm        jle    near ptr 0x00501F6D;
	__asm        cmp    dword ptr [ebp-0x68], 0x181;
	__asm        je     near ptr 0x00501F6D;
	__asm        jmp    near ptr 0x00501FAA;
	__asm        mov    dword ptr [ebp-0x5C], 0;
	__asm        jmp    near ptr 0x00501FB6;
	__asm        cmp    dword ptr [ebp-0x5C], 0;
	__asm        jne    near ptr 0x00501FDD;
	__asm        mov    ecx, this;
	__asm        call   0x00506333;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00501FDD;
// LINE 619:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 620:
	__asm        jmp    near ptr 0x00502177;
// LINE 623:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x005020F1;
// LINE 625:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC6], 0;
	__asm        jle    near ptr 0x00502012;
// LINE 627:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xC6], eax;
// LINE 629:
	__asm        jmp    near ptr 0x005020F1;
	__asm        mov    ecx, this;
	__asm        call   0x005049FE;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005020C1;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x40;
	__asm        jne    near ptr 0x005020C1;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x00502048;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        jmp    near ptr 0x0050209F;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x6C], eax;
	__asm        jmp    near ptr 0x00502067;
	__asm        mov    dword ptr [ebp-0x60], 1;
	__asm        jmp    near ptr 0x0050209F;
	__asm        jmp    near ptr 0x00502093;
	__asm        cmp    dword ptr [ebp-0x6C], 0x11C;
	__asm        jl     near ptr 0x00502093;
	__asm        cmp    dword ptr [ebp-0x6C], 0x11F;
	__asm        jle    near ptr 0x00502056;
	__asm        cmp    dword ptr [ebp-0x6C], 0x181;
	__asm        je     near ptr 0x00502056;
	__asm        jmp    near ptr 0x00502093;
	__asm        mov    dword ptr [ebp-0x60], 0;
	__asm        jmp    near ptr 0x0050209F;
	__asm        cmp    dword ptr [ebp-0x60], 0;
	__asm        jne    near ptr 0x005020C1;
// LINE 631:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 632:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 634:
	__asm        jmp    near ptr 0x005020F1;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x005020F1;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        jg     near ptr 0x005020F1;
// LINE 636:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 637:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 665:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xDE], 0;
	__asm        jle    near ptr 0x0050210C;
// LINE 667:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x10];
// LINE 672:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        lea    ecx, position.loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 675:
	__asm        mov    esi, this;
	__asm        lea    edi, position.matrix[0][0];
	__asm        add    esi, 0x30;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 678:
	__asm        push   3;
	__asm        lea    eax, position.loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D8781;
	__asm        add    esp, 0xC;
// LINE 680:
// Block end:
	__asm        jmp    near ptr 0x00502172;
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xBE];
	__asm        cmp    [eax+0xBA], ecx;
	__asm        jge    near ptr 0x00502172;
// LINE 683:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 685:
	__asm        jmp    near ptr 0x00502177;
}

// FUNCTION: COPTER_D 0x0050217c
int32_t AutomobileClass::PlacePerson(int32_t personType, int32_t personAction) {
	int32_t maxRadius;
	int32_t radius;
	int32_t rsin;
	struct Point3d personLoc;
	int32_t angle;
	struct Point3d vehicleLoc;
	int32_t rcos;

// LINE 749:
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        lea    ecx, vehicleLoc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 750:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        add    eax, 0x400000;
	__asm        mov    maxRadius, eax;
// LINE 756:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        add    eax, 0x50000;
	__asm        mov    radius, eax;
	__asm        jmp    near ptr 0x005021C9;
	__asm        add    radius, 0xA0000;
	__asm        mov    eax, maxRadius;
	__asm        cmp    radius, eax;
	__asm        jge    near ptr 0x005022A2;
// LINE 758:
	__asm        mov    angle, 0;
	__asm        jmp    near ptr 0x005021E8;
	__asm        add    angle, 0x640000;
	__asm        cmp    angle, 0xE100000;
	__asm        jge    near ptr 0x0050229D;
// LINE 760:
	__asm        lea    eax, rcos;
	__asm        push   eax;
	__asm        lea    eax, rsin;
	__asm        push   eax;
	__asm        mov    eax, angle;
	__asm        push   eax;
	__asm        call   0x004D19FC;
	__asm        add    esp, 0xC;
// LINE 761:
	__asm        mov    eax, rcos;
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, vehicleLoc.x;
	__asm        add    ecx, eax;
	__asm        mov    personLoc.x, ecx;
// LINE 762:
	__asm        mov    eax, rsin;
	__asm        push   eax;
	__asm        mov    eax, radius;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, vehicleLoc.z;
	__asm        add    ecx, eax;
	__asm        mov    personLoc.z, ecx;
// LINE 763:
	__asm        mov    eax, personLoc.z;
	__asm        push   eax;
	__asm        mov    eax, personLoc.x;
	__asm        push   eax;
	__asm        call   0x00518E76;
	__asm        add    esp, 8;
	__asm        mov    personLoc.y, eax;
// LINE 766:
	__asm        lea    eax, personLoc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x7D];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        movzx  ax, byte ptr [eax+0x7C];
	__asm        push   eax;
	__asm        mov    eax, personAction;
	__asm        push   eax;
	__asm        mov    eax, personType;
	__asm        push   eax;
	__asm        call   0x0054A1D3;
	__asm        add    esp, 0x1C;
	__asm        movsx  eax, ax;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00502298;
// LINE 767:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005022A9;
// LINE 768:
	__asm        jmp    near ptr 0x005021E1;
// LINE 769:
	__asm        jmp    near ptr 0x005021C2;
// LINE 771:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005022A9;
// LINE 772:
}

// FUNCTION: COPTER_D 0x005022b0
void AutomobileClass::ItterateFSM() {
	struct MISSION_DATA* md;
	int32_t itterationDist;
	struct _DYOBJ_INST* dyblock;
	class AutomobileClass* carblock;

// LINE 796:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 1;
	__asm        je     near ptr 0x005022DB;
// LINE 798:
	__asm        mov    ecx, this;
	__asm        call   0x00506971;
// LINE 799:
	__asm        jmp    near ptr 0x00502A96;
// LINE 801:
	__asm        jmp    near ptr 0x0050235E;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 2;
	__asm        je     near ptr 0x005022FA;
// LINE 803:
	__asm        mov    ecx, this;
	__asm        call   0x00506BCF;
// LINE 804:
	__asm        jmp    near ptr 0x00502A96;
// LINE 806:
	__asm        jmp    near ptr 0x0050235E;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x0050235E;
// LINE 808:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x20;
	__asm        je     near ptr 0x0050235E;
	__asm        mov    ecx, this;
	__asm        call   0x005049FE;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0050235E;
// LINE 813:
// Block start:
	struct _MISSION_PARMS mp;
	__asm        mov    mp.id, 0xFFFFFFFF;
// LINE 814:
	__asm        mov    mp.i2num, 1;
// LINE 815:
	__asm        mov    mp.op, 0x26;
// LINE 816:
	__asm        mov    mp.flags, 0;
// LINE 818:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 820:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFCFFF;
// LINE 821:
	__asm        mov    ecx, this;
	__asm        call   0x00504B0A;
// LINE 826:
// Block end:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0x50000;
	__asm        jle    near ptr 0x00502379;
// LINE 828:
	__asm        mov    ecx, this;
	__asm        call   0x005098B0;
// LINE 831:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00502392;
	__asm        mov    itterationDist, 0;
	__asm        jmp    near ptr 0x005023AD;
	__asm        mov    eax, ds:[0x5B4760];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDE];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    itterationDist, eax;
// LINE 838:
	__asm        lea    eax, dyblock;
	__asm        push   eax;
	__asm        mov    eax, itterationDist;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0050598C;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00502823;
// LINE 841:
	__asm        jmp    near ptr 0x0050284F;
// LINE 845:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x9E], eax;
// LINE 849:
	__asm        mov    eax, dyblock;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    carblock, eax;
// LINE 852:
	__asm        mov    eax, carblock;
	__asm        test   byte ptr [eax+9], 2;
	__asm        je     near ptr 0x005024C9;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0x140000;
	__asm        jle    near ptr 0x005024C9;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x00502422;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    near ptr 0x00502479;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00502441;
	__asm        mov    dword ptr [ebp-0x44], 1;
	__asm        jmp    near ptr 0x00502479;
	__asm        jmp    near ptr 0x0050246D;
	__asm        cmp    dword ptr [ebp-0x5C], 0x11C;
	__asm        jl     near ptr 0x0050246D;
	__asm        cmp    dword ptr [ebp-0x5C], 0x11F;
	__asm        jle    near ptr 0x00502430;
	__asm        cmp    dword ptr [ebp-0x5C], 0x181;
	__asm        je     near ptr 0x00502430;
	__asm        jmp    near ptr 0x0050246D;
	__asm        mov    dword ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00502479;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        jne    near ptr 0x005024C9;
// LINE 855:
	__asm        mov    eax, carblock;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        call   0x004FC2DB;
	__asm        add    esp, 4;
	__asm        mov    md, eax;
// LINE 859:
	__asm        cmp    md, 0;
	__asm        je     near ptr 0x005024C4;
	__asm        mov    eax, md;
	__asm        cmp    dword ptr [eax+0xC4], 6;
	__asm        jge    near ptr 0x005024C4;
// LINE 860:
	__asm        mov    eax, carblock;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506859;
// LINE 864:
	__asm        jmp    near ptr 0x005025CA;
// LINE 865:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0x460000;
	__asm        jle    near ptr 0x005025CA;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x005024F5;
	__asm        mov    dword ptr [ebp-0x48], 1;
	__asm        jmp    near ptr 0x0050254C;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x00502514;
	__asm        mov    dword ptr [ebp-0x48], 1;
	__asm        jmp    near ptr 0x0050254C;
	__asm        jmp    near ptr 0x00502540;
	__asm        cmp    dword ptr [ebp-0x60], 0x11C;
	__asm        jl     near ptr 0x00502540;
	__asm        cmp    dword ptr [ebp-0x60], 0x11F;
	__asm        jle    near ptr 0x00502503;
	__asm        cmp    dword ptr [ebp-0x60], 0x181;
	__asm        je     near ptr 0x00502503;
	__asm        jmp    near ptr 0x00502540;
	__asm        mov    dword ptr [ebp-0x48], 0;
	__asm        jmp    near ptr 0x0050254C;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        jne    near ptr 0x005025CA;
// LINE 870:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x005025AD;
// LINE 872:
	__asm        push   0x800;
	__asm        call   0x004FCCD0;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 873:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x005025A8;
// LINE 875:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506859;
// LINE 878:
	__asm        jmp    near ptr 0x005025CA;
	__asm        mov    ecx, this;
	__asm        call   0x00505820;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005025CA;
// LINE 880:
	__asm        mov    ecx, this;
	__asm        call   0x00505706;
// LINE 881:
	__asm        jmp    near ptr 0x0050284F;
// LINE 885:
	__asm        jmp    near ptr 0x00502A96;
// LINE 886:
	__asm        jmp    near ptr 0x0050284F;
// LINE 889:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x9E], eax;
// LINE 891:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0x1E0000;
	__asm        jle    near ptr 0x005026E3;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x0050260E;
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        jmp    near ptr 0x00502665;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x0050262D;
	__asm        mov    dword ptr [ebp-0x4C], 1;
	__asm        jmp    near ptr 0x00502665;
	__asm        jmp    near ptr 0x00502659;
	__asm        cmp    dword ptr [ebp-0x64], 0x11C;
	__asm        jl     near ptr 0x00502659;
	__asm        cmp    dword ptr [ebp-0x64], 0x11F;
	__asm        jle    near ptr 0x0050261C;
	__asm        cmp    dword ptr [ebp-0x64], 0x181;
	__asm        je     near ptr 0x0050261C;
	__asm        jmp    near ptr 0x00502659;
	__asm        mov    dword ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x00502665;
	__asm        cmp    dword ptr [ebp-0x4C], 0;
	__asm        jne    near ptr 0x005026E3;
// LINE 896:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x005026C6;
// LINE 898:
	__asm        push   0x800;
	__asm        call   0x004FCCD0;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 899:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x005026C1;
// LINE 901:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506859;
// LINE 904:
	__asm        jmp    near ptr 0x005026E3;
	__asm        mov    ecx, this;
	__asm        call   0x00505820;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005026E3;
// LINE 906:
	__asm        mov    ecx, this;
	__asm        call   0x00505706;
// LINE 907:
	__asm        jmp    near ptr 0x0050284F;
// LINE 911:
	__asm        jmp    near ptr 0x00502A96;
// LINE 912:
	__asm        jmp    near ptr 0x0050284F;
// LINE 916:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x9E], eax;
// LINE 918:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0x3C0000;
	__asm        jle    near ptr 0x005027FC;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x00502727;
	__asm        mov    dword ptr [ebp-0x50], 1;
	__asm        jmp    near ptr 0x0050277E;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    near ptr 0x00502746;
	__asm        mov    dword ptr [ebp-0x50], 1;
	__asm        jmp    near ptr 0x0050277E;
	__asm        jmp    near ptr 0x00502772;
	__asm        cmp    dword ptr [ebp-0x68], 0x11C;
	__asm        jl     near ptr 0x00502772;
	__asm        cmp    dword ptr [ebp-0x68], 0x11F;
	__asm        jle    near ptr 0x00502735;
	__asm        cmp    dword ptr [ebp-0x68], 0x181;
	__asm        je     near ptr 0x00502735;
	__asm        jmp    near ptr 0x00502772;
	__asm        mov    dword ptr [ebp-0x50], 0;
	__asm        jmp    near ptr 0x0050277E;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        jne    near ptr 0x005027FC;
// LINE 923:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        jne    near ptr 0x005027DF;
// LINE 925:
	__asm        push   0x800;
	__asm        call   0x004FCCD0;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 926:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x005027DA;
// LINE 928:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506859;
// LINE 931:
	__asm        jmp    near ptr 0x005027FC;
	__asm        mov    ecx, this;
	__asm        call   0x00505820;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005027FC;
// LINE 933:
	__asm        mov    ecx, this;
	__asm        call   0x00505706;
// LINE 934:
	__asm        jmp    near ptr 0x0050284F;
// LINE 938:
	__asm        jmp    near ptr 0x00502A96;
// LINE 939:
	__asm        jmp    near ptr 0x0050284F;
// LINE 942:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x9E], eax;
// LINE 943:
	__asm        jmp    near ptr 0x00502A96;
// LINE 944:
	__asm        jmp    near ptr 0x0050284F;
// LINE 945:
	__asm        jmp    near ptr 0x0050284F;
	__asm        cmp    dword ptr [ebp-0x58], 5;
	__asm        ja     near ptr 0x00502806;
	__asm        mov    eax, [ebp-0x58];
	__asm        jmp    dword ptr [eax*4+0x502837];
// Switch pointers
// LINE 949:
	__asm        mov    ecx, this;
	__asm        call   0x0050413E;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0050297E;
// LINE 951:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0;
	__asm        je     near ptr 0x00502969;
	__asm        push   0x30;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00502969;
// LINE 955:
// Block start:
	struct Point3d loc;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 956:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+4];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 957:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+8];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 958:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x30;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x3C], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x40], ecx;
// LINE 959:
	__asm        mov    eax, [ebp-0x3C];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x40];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x38], eax;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        jne    near ptr 0x0050293B;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00502940;
	__asm        jmp    near ptr 0x00502940;
	__asm        jmp    near ptr 0x00502945;
	__asm        mov    eax, [ebp-0x38];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 960:
	__asm        push   6;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        call   0x005240DC;
	__asm        add    esp, 0xC;
// LINE 963:
// Block end:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x0050297E;
// LINE 964:
	__asm        mov    ecx, this;
	__asm        call   0x0050417D;
// LINE 968:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 971:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 8;
	__asm        je     near ptr 0x00502A0D;
// LINE 973:
	__asm        mov    ecx, this;
	__asm        call   0x00508F54;
// LINE 976:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xEA], 0;
	__asm        jg     near ptr 0x00502A08;
// LINE 979:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 980:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD4;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 981:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD2], ax;
// LINE 983:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00508180;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00508AD4;
// LINE 989:
	__asm        mov    ecx, this;
	__asm        call   0x0050790C;
// LINE 991:
	__asm        jmp    near ptr 0x00502A96;
// LINE 1003:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        jle    near ptr 0x00502A26;
// LINE 1004:
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x116];
// LINE 1009:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEA];
	__asm        add    ecx, itterationDist;
	__asm        cmp    [eax+0x86], ecx;
	__asm        jg     near ptr 0x00502A70;
// LINE 1011:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEA];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x86];
	__asm        add    itterationDist, eax;
// LINE 1012:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEA], 0;
// LINE 1014:
	__asm        mov    ecx, this;
	__asm        call   0x00504B48;
// LINE 1020:
	__asm        jmp    near ptr 0x00502A26;
// LINE 1032:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEA];
	__asm        add    eax, itterationDist;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00505234;
// LINE 1034:
	__asm        mov    eax, itterationDist;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0xEA], eax;
// LINE 1044:
	__asm        jmp    near ptr 0x00502A96;
}

// FUNCTION: COPTER_D 0x00502a9b
void AutomobileClass::UnlinkFromCell(const struct _GridCoordinates& point) {
	struct _CELL_INFO* pCell;

// LINE 1054:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        shl    edx, 0xA;
	__asm        mov    eax, [edx+ecx*4+0x67ED30];
	__asm        mov    pCell, eax;
// LINE 1055:
	__asm        cmp    pCell, 0;
	__asm        jne    near ptr 0x00502AE9;
	__asm        push   0x41F;
	__asm        push   0x5B539C;
	__asm        push   0x5B53C0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00502AEE;
	__asm        jmp    near ptr 0x00502AEE;
// LINE 1057:
	__asm        cmp    pCell, 0;
	__asm        je     near ptr 0x00502B68;
// LINE 1059:
// Block start:
	struct _DYOBJ_INST** dyptrptr;
	__asm        mov    eax, pCell;
	__asm        add    eax, 0x10;
	__asm        mov    dyptrptr, eax;
// LINE 1061:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00502B3B;
// LINE 1064:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, dyptrptr;
	__asm        cmp    eax, [ecx];
	__asm        jne    near ptr 0x00502B2E;
// LINE 1067:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    ecx, dyptrptr;
	__asm        mov    [ecx], eax;
// LINE 1068:
	__asm        jmp    near ptr 0x00502B6D;
// LINE 1070:
	__asm        mov    eax, dyptrptr;
	__asm        mov    eax, [eax];
	__asm        mov    dyptrptr, eax;
// LINE 1071:
	__asm        jmp    near ptr 0x00502B01;
// LINE 1073:
	__asm        mov    eax, dyptrptr;
	__asm        cmp    dword ptr [eax], 0;
	__asm        jne    near ptr 0x00502B63;
	__asm        push   0x431;
	__asm        push   0x5B53C8;
	__asm        push   0x5B53EC;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00502B68;
	__asm        jmp    near ptr 0x00502B68;
// LINE 1075:
// Block end:
	__asm        jmp    near ptr 0x00502B6D;
}

// FUNCTION: COPTER_D 0x00502b74
void AutomobileClass::LinkToCell(const struct _GridCoordinates& point) {
	struct _CELL_INFO* pCell;

// LINE 1086:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        mov    eax, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax];
	__asm        shl    edx, 0xA;
	__asm        mov    eax, [edx+ecx*4+0x67ED30];
	__asm        mov    pCell, eax;
// LINE 1087:
	__asm        cmp    pCell, 0;
	__asm        jne    near ptr 0x00502BC2;
	__asm        push   0x43F;
	__asm        push   0x5B53F8;
	__asm        push   0x5B541C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00502BC7;
	__asm        jmp    near ptr 0x00502BC7;
// LINE 1089:
	__asm        cmp    pCell, 0;
	__asm        je     near ptr 0x00502C86;
// LINE 1091:
// Block start:
	int32_t z;
	int32_t x;
	__asm        mov    eax, pCell;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC], eax;
// LINE 1092:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        mov    ecx, pCell;
	__asm        mov    [ecx+0x10], eax;
// LINE 1096:
	__asm        mov    eax, pCell;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    x, eax;
// LINE 1097:
	__asm        mov    eax, pCell;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    z, eax;
// LINE 1099:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00502C49;
// LINE 1101:
	__asm        sub    z, 0x200000;
	__asm        jmp    near ptr 0x00502C6D;
// LINE 1102:
	__asm        add    z, 0x200000;
	__asm        jmp    near ptr 0x00502C6D;
// LINE 1103:
	__asm        add    x, 0x200000;
	__asm        jmp    near ptr 0x00502C6D;
// LINE 1104:
	__asm        sub    x, 0x200000;
	__asm        jmp    near ptr 0x00502C6D;
// LINE 1105:
	__asm        jmp    near ptr 0x00502C6D;
	__asm        cmp    dword ptr [ebp-0x14], 3;
	__asm        ja     near ptr 0x00502C6D;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    dword ptr [eax*4+0x502C5D];
// Switch pointers
// LINE 1107:
	__asm        mov    eax, z;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        call   0x00518E76;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC2], eax;
// LINE 1109:
// Block end:
	__asm        jmp    near ptr 0x00502C8B;
}

// FUNCTION: COPTER_D 0x00502c92
enum TurnIndex AutomobileClass::PickTurnDir(struct Goal* pGoal) {
	int32_t possibleTurnDir;
	int32_t rightleftorstraight;
	enum TurnIndex turn;

// LINE 1152:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    eax, [eax*4+0x592D00];
	__asm        not    eax;
	__asm        mov    ecx, pGoal;
	__asm        and    eax, [ecx+0x1A];
	__asm        mov    possibleTurnDir, eax;
// LINE 1157:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x1E];
	__asm        not    eax;
	__asm        test   possibleTurnDir, eax;
	__asm        je     near ptr 0x00502CF2;
// LINE 1159:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        je     near ptr 0x00502CF2;
// LINE 1160:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x1E];
	__asm        not    eax;
	__asm        and    possibleTurnDir, eax;
// LINE 1165:
	__asm        mov    rightleftorstraight, 0;
// LINE 1166:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    eax, [eax*4+0x592D00];
	__asm        test   possibleTurnDir, eax;
	__asm        je     near ptr 0x00502D13;
	__asm        or     rightleftorstraight, 4;
// LINE 1167:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    eax, [eax*4+0x592CD0];
	__asm        mov    eax, [eax*4+0x592D00];
	__asm        test   possibleTurnDir, eax;
	__asm        je     near ptr 0x00502D34;
	__asm        or     rightleftorstraight, 2;
// LINE 1168:
	__asm        mov    eax, pGoal;
	__asm        mov    eax, [eax+0x12];
	__asm        mov    eax, [eax*4+0x592CE0];
	__asm        mov    eax, [eax*4+0x592D00];
	__asm        test   possibleTurnDir, eax;
	__asm        je     near ptr 0x00502D55;
	__asm        or     rightleftorstraight, 1;
// LINE 1172:
	__asm        mov    eax, rightleftorstraight;
	__asm        mov    [ebp-0x14], eax;
	__asm        jmp    near ptr 0x00502ECF;
// LINE 1175:
	__asm        mov    turn, 2;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1177:
	__asm        mov    turn, 1;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1179:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x00502D94;
	__asm        mov    turn, 1;
	__asm        jmp    near ptr 0x00502D9B;
	__asm        mov    turn, 2;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1181:
	__asm        mov    turn, 0;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1183:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x00502DE5;
	__asm        mov    turn, 2;
	__asm        jmp    near ptr 0x00502DF4;
	__asm        mov    turn, 0;
	__asm        jmp    near ptr 0x00502DF4;
	__asm        jmp    near ptr 0x00502DF4;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00502DC8;
	__asm        jmp    near ptr 0x00502DD4;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1185:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x1C], eax;
	__asm        jmp    near ptr 0x00502E32;
	__asm        mov    turn, 1;
	__asm        jmp    near ptr 0x00502E41;
	__asm        mov    turn, 0;
	__asm        jmp    near ptr 0x00502E41;
	__asm        jmp    near ptr 0x00502E41;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x00502E15;
	__asm        jmp    near ptr 0x00502E21;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1187:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 7;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x00502E8B;
// LINE 1188:
	__asm        mov    turn, 1;
	__asm        jmp    near ptr 0x00502EA4;
	__asm        mov    turn, 2;
	__asm        jmp    near ptr 0x00502EA4;
	__asm        mov    turn, 0;
	__asm        jmp    near ptr 0x00502EA4;
	__asm        jmp    near ptr 0x00502EA4;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        je     near ptr 0x00502E62;
	__asm        cmp    dword ptr [ebp-0x20], 1;
	__asm        je     near ptr 0x00502E6E;
	__asm        jmp    near ptr 0x00502E7A;
	__asm        jmp    near ptr 0x00502F02;
// LINE 1190:
	__asm        push   0x4A6;
	__asm        push   0x5B5424;
	__asm        push   0x5B5448;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00502ECA;
	__asm        jmp    near ptr 0x00502ECA;
// LINE 1191:
	__asm        jmp    near ptr 0x00502F02;
	__asm        dec    dword ptr [ebp-0x14];
	__asm        cmp    dword ptr [ebp-0x14], 6;
	__asm        ja     near ptr 0x00502EA9;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    dword ptr [eax*4+0x502EE6];
// Switch pointers
// LINE 1193:
	__asm        mov    eax, turn;
	__asm        jmp    near ptr 0x00502F0A;
// LINE 1194:
}

// FUNCTION: COPTER_D 0x00502f11
void AutomobileClass::BeamToWithinCameraRange() {
	struct Point3d vec;
	struct _GridCoordinates beamCell;

// LINE 1209:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x14;
	__asm        lea    ecx, vec.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 1211:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBE], 0;
// LINE 1214:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    [ebp-0x18], eax;
	__asm        jmp    near ptr 0x0050303E;
// LINE 1218:
	__asm        mov    eax, vec.z;
	__asm        mov    vec.y, eax;
// LINE 1219:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1220:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1222:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 1223:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1224:
	__asm        jmp    near ptr 0x00503061;
// LINE 1227:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.y, eax;
// LINE 1228:
	__asm        mov    eax, vec.x;
	__asm        mov    vec.z, eax;
// LINE 1229:
	__asm        mov    eax, vec.y;
	__asm        mov    vec.x, eax;
// LINE 1231:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 1232:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1233:
	__asm        jmp    near ptr 0x00503061;
// LINE 1236:
	__asm        mov    eax, vec.x;
	__asm        neg    eax;
	__asm        mov    vec.x, eax;
// LINE 1237:
	__asm        mov    eax, vec.z;
	__asm        neg    eax;
	__asm        mov    vec.z, eax;
// LINE 1239:
	__asm        mov    eax, vec.x;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.x, eax;
// LINE 1240:
	__asm        mov    eax, vec.z;
	__asm        mov    ecx, ds:[0x6663A0];
	__asm        sar    ecx, 1;
	__asm        imul   eax, ecx;
	__asm        mov    vec.z, eax;
// LINE 1241:
	__asm        jmp    near ptr 0x00503061;
// LINE 1245:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.x;
	__asm        mov    vec.x, eax;
// LINE 1246:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        inc    eax;
	__asm        imul   eax, vec.z;
	__asm        mov    vec.z, eax;
// LINE 1247:
	__asm        jmp    near ptr 0x00503061;
// LINE 1248:
	__asm        jmp    near ptr 0x00503061;
	__asm        cmp    dword ptr [ebp-0x18], 0;
	__asm        je     near ptr 0x00502F61;
	__asm        cmp    dword ptr [ebp-0x18], 1;
	__asm        je     near ptr 0x00502F9E;
	__asm        cmp    dword ptr [ebp-0x18], 2;
	__asm        je     near ptr 0x00502FDB;
	__asm        jmp    near ptr 0x00503014;
// LINE 1256:
	__asm        mov    eax, vec.x;
	__asm        shl    eax, 6;
	__asm        add    eax, ds:[0x6C126C];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    beamCell.x, al;
// LINE 1257:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, ds:[0x6C1274];
	__asm        mov    ecx, vec.z;
	__asm        shl    ecx, 6;
	__asm        add    eax, ecx;
	__asm        sar    eax, 0x16;
	__asm        mov    beamCell.y, al;
// LINE 1261:
	__asm        lea    eax, beamCell.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x20];
// LINE 1262:
	__asm        jmp    near ptr 0x005030A5;
}

// FUNCTION: COPTER_D 0x005030aa
int32_t AutomobileClass::BeamToLocation(const struct _GridCoordinates& cell) {
	unsigned short tile;
	int32_t foundcell;
	struct _GridCoordinates prevGridLoc;
	struct _GridCoordinates scanLoc;
	int32_t hiway;
	struct Goal goal2;
	class SpiralScan scan;
	struct Goal goal1;

// LINE 1284:
	__asm        mov    eax, cell;
	__asm        mov    ax, [eax];
	__asm        mov    reinterpret_cast<uint16_t>(scanLoc.x), ax;
// LINE 1285:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(prevGridLoc.x), ax;
// LINE 1289:
	__asm        push   9;
	__asm        lea    ecx, scan.currDist;
	__asm        call   0x00542DC0;
// LINE 1290:
	__asm        mov    foundcell, 0;
// LINE 1291:
	__asm        mov    hiway, 0;
// LINE 1298:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503126;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503126;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00503126;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00503131;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x00503171;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, scanLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x00503171;
// LINE 1300:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x10C], eax;
	__asm        jmp    near ptr 0x00503198;
	__asm        jmp    near ptr 0x00503203;
	__asm        jmp    near ptr 0x0050332C;
	__asm        jmp    near ptr 0x00503203;
	__asm        jmp    near ptr 0x005031F6;
	__asm        cmp    dword ptr [ebp-0x10C], 0x6B;
	__asm        jg     near ptr 0x005031D1;
	__asm        cmp    dword ptr [ebp-0x10C], 0x61;
	__asm        jge    near ptr 0x00503203;
	__asm        cmp    dword ptr [ebp-0x10C], 0x49;
	__asm        jl     near ptr 0x0050332C;
	__asm        cmp    dword ptr [ebp-0x10C], 0x50;
	__asm        jle    near ptr 0x00503203;
	__asm        jmp    near ptr 0x0050332C;
	__asm        cmp    dword ptr [ebp-0x10C], 0x806A;
	__asm        jl     near ptr 0x0050332C;
	__asm        cmp    dword ptr [ebp-0x10C], 0x806B;
	__asm        jle    near ptr 0x00503203;
	__asm        jmp    near ptr 0x0050332C;
	__asm        cmp    dword ptr [ebp-0xF8], 0;
	__asm        je     near ptr 0x0050332C;
// LINE 1304:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x110], eax;
	__asm        jmp    near ptr 0x0050322A;
	__asm        jmp    near ptr 0x00503256;
	__asm        jmp    near ptr 0x00503327;
	__asm        jmp    near ptr 0x00503256;
	__asm        jmp    near ptr 0x00503249;
	__asm        cmp    dword ptr [ebp-0x110], 0x49;
	__asm        jl     near ptr 0x00503327;
	__asm        cmp    dword ptr [ebp-0x110], 0x50;
	__asm        jle    near ptr 0x00503256;
	__asm        jmp    near ptr 0x00503327;
	__asm        cmp    dword ptr [ebp-0xE0], 0;
	__asm        je     near ptr 0x00503327;
	__asm        mov    ecx, this;
	__asm        call   0x00506F0E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00503327;
	__asm        mov    ecx, this;
	__asm        call   0x0050413E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00503327;
// LINE 1305:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        mov    [ebp-0xF0], eax;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    [ebp-0xF4], eax;
// LINE 1306:
	__asm        mov    eax, [ebp-0xF0];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0xF4];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0xEC], eax;
	__asm        cmp    dword ptr [ebp-0xEC], 0;
	__asm        jne    near ptr 0x005032E2;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005032E7;
	__asm        jmp    near ptr 0x005032E7;
	__asm        jmp    near ptr 0x005032EC;
	__asm        mov    eax, [ebp-0xEC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 1310:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x00503327;
// LINE 1312:
	__asm        mov    foundcell, 1;
// LINE 1313:
	__asm        mov    hiway, 1;
// LINE 1314:
	__asm        jmp    near ptr 0x00503568;
// LINE 1318:
	__asm        jmp    near ptr 0x0050354A;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503366;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503366;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00503366;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00503374;
	__asm        mov    word ptr [ebp-0xDC], 0;
	__asm        jmp    near ptr 0x005033B7;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, scanLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0xDC], ax;
	__asm        jmp    near ptr 0x005033B7;
	__asm        mov    ax, [ebp-0xDC];
	__asm        mov    [ebp-0xE4], ax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        and    eax, 0xFF;
	__asm        mov    [ebp-0xE4], ax;
	__asm        mov    eax, [ebp-0xE4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00503431;
	__asm        mov    eax, [ebp-0xE4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x00503431;
	__asm        mov    eax, [ebp-0xE4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1F;
	__asm        jl     near ptr 0x00503427;
	__asm        mov    eax, [ebp-0xE4];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x26;
	__asm        jle    near ptr 0x00503431;
	__asm        jmp    near ptr 0x00503448;
	__asm        jmp    near ptr 0x0050343B;
	__asm        jmp    near ptr 0x0050354A;
	__asm        jmp    near ptr 0x00503448;
	__asm        cmp    dword ptr [ebp-0xE8], 0;
	__asm        je     near ptr 0x0050354A;
// LINE 1322:
	__asm        lea    eax, goal2.pRGV;
	__asm        push   eax;
	__asm        lea    eax, goal1.pRGV;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scanLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(scanLoc.x);
	__asm        push   eax;
	__asm        lea    eax, [ebp-0xB4];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
// LINE 1325:
	__asm        cmp    goal1.pRGV, 0;
	__asm        jne    near ptr 0x0050348D;
// LINE 1326:
	__asm        lea    esi, goal2.pRGV;
	__asm        mov    edi, this;
	__asm        add    edi, 0x70;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 1327:
	__asm        jmp    near ptr 0x005034A2;
// LINE 1328:
	__asm        lea    esi, goal1.pRGV;
	__asm        mov    edi, this;
	__asm        add    edi, 0x70;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 1332:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x70], 0;
	__asm        je     near ptr 0x0050354A;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0xD0], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0xD4], ecx;
	__asm        mov    eax, [ebp-0xD0];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0xD4];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0xCC], eax;
	__asm        cmp    dword ptr [ebp-0xCC], 0;
	__asm        jne    near ptr 0x00503524;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00503529;
	__asm        jmp    near ptr 0x00503529;
	__asm        jmp    near ptr 0x0050352E;
	__asm        mov    eax, [ebp-0xCC];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        jne    near ptr 0x0050354A;
// LINE 1334:
	__asm        mov    foundcell, 1;
// LINE 1335:
	__asm        jmp    near ptr 0x00503568;
// LINE 1339:
	__asm        lea    eax, scanLoc.x;
	__asm        push   eax;
	__asm        lea    ecx, scan.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00503568;
	__asm        cmp    foundcell, 0;
	__asm        je     near ptr 0x005030EC;
// LINE 1342:
	__asm        cmp    foundcell, 0;
	__asm        jne    near ptr 0x00503596;
// LINE 1344:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFD;
// LINE 1345:
	__asm        mov    dword ptr [ebp-0xB8], 0;
	__asm        jmp    near ptr 0x0050358B;
	__asm        mov    eax, [ebp-0xB8];
	__asm        jmp    near ptr 0x00503E67;
// LINE 1477:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x005035B5;
// LINE 1479:
	__asm        lea    eax, prevGridLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 1483:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 1;
	__asm        jne    near ptr 0x005035E1;
	__asm        push   0x5CB;
	__asm        push   0x5B5450;
	__asm        push   0x5B5474;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005035E6;
	__asm        jmp    near ptr 0x005035E6;
// LINE 1484:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 3;
// LINE 1487:
	__asm        cmp    hiway, 0;
	__asm        je     near ptr 0x005037A3;
// LINE 1491:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x802;
// LINE 1493:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 1494:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 0;
// LINE 1496:
	__asm        mov    al, scanLoc.x;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD2], al;
// LINE 1497:
	__asm        mov    al, scanLoc.y;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD3], al;
// LINE 1501:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 1505:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005036BF;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005036BF;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x005036BF;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x005036CD;
	__asm        mov    word ptr [ebp-0xFC], 0;
	__asm        jmp    near ptr 0x00503734;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    [ebp-0xFC], ax;
	__asm        jmp    near ptr 0x00503734;
	__asm        mov    eax, [ebp-0xFC];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506F6F;
// LINE 1506:
	__asm        mov    ecx, this;
	__asm        call   0x00507782;
// LINE 1507:
	__asm        mov    ecx, this;
	__asm        call   0x0050790C;
// LINE 1508:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 1509:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF2], eax;
// LINE 1510:
	__asm        mov    dword ptr [ebp-0xBC], 1;
	__asm        jmp    near ptr 0x00503793;
	__asm        mov    eax, [ebp-0xBC];
	__asm        jmp    near ptr 0x00503E67;
// LINE 1512:
	__asm        jmp    near ptr 0x00503E62;
// LINE 1515:
// Block start:
	int32_t i;
	int32_t dirIndex;
	struct _GridCoordinates nextLoc;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        cmp    ecx, eax;
	__asm        jne    near ptr 0x005037D3;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        cmp    ecx, eax;
	__asm        je     near ptr 0x005037EF;
	__asm        push   0x5EB;
	__asm        push   0x5B5490;
	__asm        push   0x5B54B4;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005037F4;
	__asm        jmp    near ptr 0x005037F4;
// LINE 1518:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    dirIndex, eax;
// LINE 1525:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00503823;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x00503A48;
// LINE 1527:
	__asm        mov    eax, dirIndex;
	__asm        inc    eax;
	__asm        and    eax, 3;
	__asm        mov    dirIndex, eax;
// LINE 1528:
	__asm        mov    eax, dirIndex;
	__asm        mov    [ebp-0x114], eax;
	__asm        jmp    near ptr 0x005038A6;
// LINE 1530:
	__asm        mov    al, scanLoc.x;
	__asm        mov    nextLoc.x, al;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        dec    eax;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x005038D0;
// LINE 1531:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        inc    eax;
	__asm        mov    nextLoc.x, al;
	__asm        mov    al, scanLoc.y;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x005038D0;
// LINE 1532:
	__asm        mov    al, scanLoc.x;
	__asm        mov    nextLoc.x, al;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        inc    eax;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x005038D0;
// LINE 1533:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        dec    eax;
	__asm        mov    nextLoc.x, al;
	__asm        mov    al, scanLoc.y;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x005038D0;
// LINE 1534:
	__asm        jmp    near ptr 0x005038D0;
	__asm        cmp    dword ptr [ebp-0x114], 3;
	__asm        ja     near ptr 0x005038D0;
	__asm        mov    eax, [ebp-0x114];
	__asm        jmp    dword ptr [eax*4+0x5038C0];
// Switch pointers
// LINE 1539:
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0050390A;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x0050390A;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x0050390A;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00503918;
	__asm        mov    word ptr [ebp-0x100], 0;
	__asm        jmp    near ptr 0x0050395B;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, nextLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x100], ax;
	__asm        jmp    near ptr 0x0050395B;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503995;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00503995;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00503995;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x005039A3;
	__asm        mov    word ptr [ebp-0x104], 0;
	__asm        jmp    near ptr 0x005039E6;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, scanLoc.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x104], ax;
	__asm        jmp    near ptr 0x005039E6;
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(dirIndex);
	__asm        shl    eax, cl;
	__asm        push   eax;
	__asm        mov    eax, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(dirIndex);
	__asm        shl    eax, cl;
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x100];
	__asm        push   eax;
	__asm        mov    eax, [ebp-0x104];
	__asm        push   eax;
	__asm        call   0x0053964A;
	__asm        add    esp, 0x10;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00503A43;
// LINE 1546:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        cmp    eax, dirIndex;
	__asm        je     near ptr 0x00503A43;
// LINE 1553:
	__asm        jmp    near ptr 0x00503A48;
// LINE 1556:
	__asm        jmp    near ptr 0x0050381D;
// LINE 1558:
	__asm        cmp    i, 4;
	__asm        jl     near ptr 0x00503A6F;
// LINE 1559:
	__asm        mov    dword ptr [ebp-0xC0], 0;
	__asm        jmp    near ptr 0x00503A64;
	__asm        mov    eax, [ebp-0xC0];
	__asm        jmp    near ptr 0x00503E67;
// LINE 1567:
	__asm        mov    eax, dirIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE2], eax;
// LINE 1570:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0;
// LINE 1572:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7E], 0xFFFFFFFE;
	__asm        jne    near ptr 0x00503BDF;
// LINE 1574:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    dirIndex, eax;
// LINE 1575:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00503AD0;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x00503B16;
// LINE 1577:
	__asm        mov    eax, dirIndex;
	__asm        inc    eax;
	__asm        and    eax, 3;
	__asm        mov    dirIndex, eax;
// LINE 1578:
	__asm        mov    eax, this;
	__asm        mov    edx, 1;
	__asm        mov    cl, reinterpret_cast<uint8_t>(dirIndex);
	__asm        shl    edx, cl;
	__asm        test   [eax+0x8A], edx;
	__asm        je     near ptr 0x00503B11;
// LINE 1579:
	__asm        jmp    near ptr 0x00503B16;
// LINE 1580:
	__asm        jmp    near ptr 0x00503ACA;
// LINE 1581:
	__asm        cmp    i, 4;
	__asm        jl     near ptr 0x00503B3F;
	__asm        push   0x62D;
	__asm        push   0x5B54F0;
	__asm        push   0x5B5514;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00503B44;
	__asm        jmp    near ptr 0x00503B44;
// LINE 1582:
	__asm        mov    eax, dirIndex;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7E];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x82], eax;
// LINE 1583:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7E];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x592D10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE6], eax;
// LINE 1584:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x96], 1;
// LINE 1585:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEE];
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, [ecx+eax*4+0x62BB34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 1593:
	__asm        jmp    near ptr 0x00503C9D;
// LINE 1595:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x592D10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE6], eax;
// LINE 1596:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        shl    ecx, 2;
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    eax, [eax+ecx+0x62BB30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 1597:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x96], 0;
	__asm        jl     near ptr 0x00503C7C;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x96], 2;
	__asm        jle    near ptr 0x00503C98;
	__asm        push   0x63D;
	__asm        push   0x5B5518;
	__asm        push   0x5B553C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00503C9D;
	__asm        jmp    near ptr 0x00503C9D;
// LINE 1607:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        sub    eax, 2;
	__asm        and    eax, 3;
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x00503D0F;
// LINE 1609:
	__asm        mov    al, scanLoc.x;
	__asm        mov    nextLoc.x, al;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        dec    eax;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x00503D39;
// LINE 1610:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        inc    eax;
	__asm        mov    nextLoc.x, al;
	__asm        mov    al, scanLoc.y;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x00503D39;
// LINE 1611:
	__asm        mov    al, scanLoc.x;
	__asm        mov    nextLoc.x, al;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        inc    eax;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x00503D39;
// LINE 1612:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        dec    eax;
	__asm        mov    nextLoc.x, al;
	__asm        mov    al, scanLoc.y;
	__asm        mov    nextLoc.y, al;
	__asm        jmp    near ptr 0x00503D39;
// LINE 1613:
	__asm        jmp    near ptr 0x00503D39;
	__asm        cmp    dword ptr [ebp-0x118], 3;
	__asm        ja     near ptr 0x00503D39;
	__asm        mov    eax, [ebp-0x118];
	__asm        jmp    dword ptr [eax*4+0x503D29];
// Switch pointers
// LINE 1615:
	__asm        xor    eax, eax;
	__asm        mov    al, nextLoc.x;
	__asm        shl    eax, 0xA;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLoc.y;
	__asm        mov    eax, [eax+ecx*4+0x67ED30];
	__asm        mov    [ebp-0xD8], eax;
	__asm        cmp    dword ptr [ebp-0xD8], 0;
	__asm        jne    near ptr 0x00503D7C;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00503D81;
	__asm        jmp    near ptr 0x00503D81;
	__asm        jmp    near ptr 0x00503D86;
	__asm        mov    eax, [ebp-0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 1618:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        cmp    dword ptr [eax+0x10], 0;
	__asm        je     near ptr 0x00503DD2;
// LINE 1621:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFD;
// LINE 1622:
	__asm        mov    dword ptr [ebp-0xC4], 0;
	__asm        jmp    near ptr 0x00503DC7;
	__asm        mov    eax, [ebp-0xC4];
	__asm        jmp    near ptr 0x00503E67;
// LINE 1624:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 1632:
	__asm        push   0;
	__asm        mov    ecx, this;
	__asm        call   0x00505234;
// LINE 1635:
	__asm        mov    ecx, this;
	__asm        call   0x0050503F;
// LINE 1638:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 1640:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEA], 0;
// LINE 1641:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 1642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBE], eax;
// LINE 1644:
	__asm        mov    dword ptr [ebp-0xC8], 1;
	__asm        jmp    near ptr 0x00503E57;
	__asm        mov    eax, [ebp-0xC8];
	__asm        jmp    near ptr 0x00503E67;
// LINE 1646:
// Block end:
	__asm        jmp    near ptr 0x00503E67;
}

// FUNCTION: COPTER_D 0x00503e6e
void AutomobileClass::UnPlaceCar() {
// LINE 1662:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFEFF;
// LINE 1663:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFDFF;
// LINE 1666:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00503ED4;
// LINE 1668:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 8;
	__asm        je     near ptr 0x00503EBE;
// LINE 1669:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 1670:
	__asm        jmp    near ptr 0x00503ECD;
// LINE 1671:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 1672:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFD;
// LINE 1674:
	__asm        jmp    near ptr 0x00503ED9;
}

// FUNCTION: COPTER_D 0x00503ede
void AutomobileClass::WaterDouse(struct _DYOBJ_INST* dyhittee) {
	struct _MISSION_PARMS mp;

// LINE 1690:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 3;
	__asm        jne    near ptr 0x00503EFC;
// LINE 1691:
	__asm        jmp    near ptr 0x00503FC9;
// LINE 1693:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 1;
	__asm        je     near ptr 0x00503F60;
// LINE 1695:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 1697:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFEFF;
// LINE 1698:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x18];
	__asm        and    eax, 0xFFFFEFFF;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], ax;
// LINE 1701:
	__asm        mov    mp.op, 0x1A;
// LINE 1702:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 1703:
	__asm        mov    mp.i2num, 1;
// LINE 1704:
	__asm        mov    mp.flags, 0;
// LINE 1705:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1707:
	__asm        jmp    near ptr 0x00503FB1;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 2;
	__asm        je     near ptr 0x00503FB1;
// LINE 1709:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFDFF;
// LINE 1710:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 1713:
	__asm        mov    mp.op, 0x1B;
// LINE 1714:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 1715:
	__asm        mov    mp.i2num, 1;
// LINE 1716:
	__asm        mov    mp.flags, 0;
// LINE 1717:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1722:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0xF;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 1725:
	__asm        jmp    near ptr 0x00503FC9;
}

// FUNCTION: COPTER_D 0x00503fd0
void AutomobileClass::IveBeenMegaphoned(long msg_id) {
	struct _MISSION_PARMS mp;

// LINE 1735:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x00504025;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        jle    near ptr 0x00504025;
	__asm        mov    ecx, this;
	__asm        call   0x005045B6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00504025;
	__asm        cmp    msg_id, 0;
	__asm        jne    near ptr 0x00504025;
// LINE 1737:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 1738:
	__asm        jmp    near ptr 0x00504093;
// LINE 1743:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 2;
	__asm        jne    near ptr 0x00504037;
// LINE 1744:
	__asm        jmp    near ptr 0x00504093;
// LINE 1748:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFDFF;
// LINE 1749:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9E], 0;
// LINE 1752:
	__asm        mov    mp.op, 0x1B;
// LINE 1753:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 1754:
	__asm        mov    mp.i2num, 1;
// LINE 1755:
	__asm        mov    mp.flags, 0;
// LINE 1756:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 1762:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   8;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 1764:
	__asm        jmp    near ptr 0x00504093;
}

// FUNCTION: COPTER_D 0x0050409a
void AutomobileClass::AdjustSpeed() {
// LINE 1773:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x92], 0;
	__asm        je     near ptr 0x005040CD;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB6];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], eax;
	__asm        jmp    near ptr 0x005040DF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], eax;
// LINE 1775:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x0050410C;
// LINE 1776:
	__asm        push   0x1C000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDE];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], eax;
// LINE 1777:
	__asm        jmp    near ptr 0x00504111;
}

// FUNCTION: COPTER_D 0x00504116
void AutomobileClass::Reset() {
// LINE 1791:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 1792:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 1;
// LINE 1794:
	__asm        jmp    near ptr 0x00504139;
}

// FUNCTION: COPTER_D 0x0050413e
int32_t AutomobileClass::AmIABadGuy() {
// LINE 1799:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0x11E;
	__asm        je     near ptr 0x00504167;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x00504171;
// LINE 1800:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00504178;
// LINE 1802:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00504178;
// LINE 1803:
}

// FUNCTION: COPTER_D 0x0050417d
void AutomobileClass::PullOverCiviliansInWay() {
	struct _GridCoordinates scanLoc;
	class SpiralScan spiral;
	struct _DYOBJ_INST* currentObject;

// LINE 1808:
	__asm        push   1;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542DC0;
// LINE 1810:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    reinterpret_cast<uint16_t>(scanLoc.x), ax;
// LINE 1815:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.y;
	__asm        mov    [ebp-0x24], eax;
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    [ebp-0x28], eax;
// LINE 1816:
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x28];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x005041F2;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005041F7;
	__asm        jmp    near ptr 0x005041F7;
	__asm        jmp    near ptr 0x005041FC;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 1819:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x00504314;
// LINE 1822:
// Block start:
	class AutomobileClass* pCar;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x0050422B;
// LINE 1824:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1825:
	__asm        jmp    near ptr 0x00504205;
// LINE 1829:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    pCar, eax;
// LINE 1831:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00504307;
	__asm        mov    ecx, pCar;
	__asm        call   0x005045B6;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00504307;
// LINE 1836:
	__asm        mov    eax, pCar;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x00504274;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        jmp    near ptr 0x005042CB;
	__asm        mov    eax, pCar;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00504293;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        jmp    near ptr 0x005042CB;
	__asm        jmp    near ptr 0x005042BF;
	__asm        cmp    dword ptr [ebp-0x34], 0x11C;
	__asm        jl     near ptr 0x005042BF;
	__asm        cmp    dword ptr [ebp-0x34], 0x11F;
	__asm        jle    near ptr 0x00504282;
	__asm        cmp    dword ptr [ebp-0x34], 0x181;
	__asm        je     near ptr 0x00504282;
	__asm        jmp    near ptr 0x005042BF;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x005042CB;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x005042F5;
	__asm        mov    eax, pCar;
	__asm        cmp    dword ptr [eax+4], 0x11E;
	__asm        jne    near ptr 0x00504307;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0x11D;
	__asm        jne    near ptr 0x00504307;
// LINE 1837:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, pCar;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, pCar;
	__asm        call   dword ptr [eax+4];
// LINE 1840:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 1841:
// Block end:
	__asm        jmp    near ptr 0x00504205;
// LINE 1843:
	__asm        lea    eax, scanLoc.x;
	__asm        push   eax;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0050419E;
// LINE 1844:
	__asm        jmp    near ptr 0x0050432D;
	__asm        jmp    near ptr 0x00504332;
}

// FUNCTION: COPTER_D 0x00504337
int32_t AutomobileClass::InitializeInstance(int32_t instanceID) {
	int32_t object;
	struct VRObjInfo objectInfo;

// LINE 1878:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 1881:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D8821;
	__asm        add    esp, 4;
	__asm        mov    object, eax;
// LINE 1884:
	__asm        cmp    object, 0;
	__asm        jne    near ptr 0x00504385;
	__asm        push   0x75C;
	__asm        push   0x5B5560;
	__asm        push   0x5B5584;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0050438A;
	__asm        jmp    near ptr 0x0050438A;
// LINE 1887:
	__asm        cmp    instanceID, 0;
	__asm        jne    near ptr 0x005043A2;
// LINE 1890:
	__asm        mov    eax, object;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 1899:
	__asm        jmp    near ptr 0x00504444;
// LINE 1904:
// Block start:
	char * objectMemory;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8520;
	__asm        add    esp, 4;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x5B5E78];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    objectMemory, eax;
// LINE 1905:
	__asm        cmp    objectMemory, 0;
	__asm        jne    near ptr 0x005043E6;
	__asm        push   0x771;
	__asm        push   0x5B558C;
	__asm        push   0x5B55B0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005043EB;
	__asm        jmp    near ptr 0x005043EB;
// LINE 1908:
	__asm        mov    eax, objectMemory;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8570;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x14], eax;
// LINE 1909:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        jne    near ptr 0x0050442A;
	__asm        push   0x775;
	__asm        push   0x5B55C0;
	__asm        push   0x5B55E4;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0050442F;
	__asm        jmp    near ptr 0x0050442F;
// LINE 1912:
	__asm        mov    eax, ds:[0x5B4780];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D84DB;
	__asm        add    esp, 8;
// LINE 1916:
// Block end:
	__asm        mov    eax, instanceID;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1A], ax;
// LINE 1917:
	__asm        mov    eax, this;
	__asm        mov    word ptr [eax+0x18], 0x11;
// LINE 1919:
	__asm        lea    eax, objectInfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 1921:
	__asm        mov    eax, objectInfo.Radius;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x1C], eax;
// LINE 1922:
	__asm        mov    eax, object;
	__asm        push   eax;
	__asm        call   0x004D3E9D;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x20], eax;
// LINE 1925:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+8], 0;
// LINE 1926:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        shl    eax, 0x11;
	__asm        add    eax, 0x240000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB2], eax;
// LINE 1927:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 3;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        shl    eax, 0x11;
	__asm        add    eax, 0x280000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB6], eax;
// LINE 1931:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x34], eax;
	__asm        jmp    near ptr 0x00504510;
// LINE 1937:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBA], 0x1E0000;
// LINE 1938:
	__asm        jmp    near ptr 0x0050452F;
// LINE 1940:
	__asm        mov    ecx, this;
	__asm        call   0x00509CF7;
// LINE 1941:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xBA], 0xA0000;
// LINE 1942:
	__asm        jmp    near ptr 0x0050452F;
	__asm        cmp    dword ptr [ebp-0x34], 0x11C;
	__asm        jl     near ptr 0x005044F6;
	__asm        cmp    dword ptr [ebp-0x34], 0x11F;
	__asm        jle    near ptr 0x005044E4;
	__asm        jmp    near ptr 0x005044F6;
// LINE 1949:
	__asm        mov    eax, this;
	__asm        mov    ecx, instanceID;
	__asm        mov    [ecx*4+0x608F80], eax;
// LINE 1950:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 1;
// LINE 1952:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050454D;
// LINE 1953:
}

// FUNCTION: COPTER_D 0x00504554
int32_t AutomobileClass::Initialize(int32_t instanceID) {
// LINE 1979:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00504337;
	__asm        jmp    near ptr 0x00504571;
// LINE 1980:
}

// FUNCTION: COPTER_D 0x00504578
short GetMaximumNumberOfAutomobiles() {
// LINE 2001:
	__asm        mov    ax, 0x32;
	__asm        jmp    near ptr 0x00504587;
// LINE 2002:
}

// FUNCTION: COPTER_D 0x0050458c
void ItterateAllAutomobiles() {
// LINE 2024:
	__asm        call   0x00501EB1;
// LINE 2025:
	__asm        jmp    near ptr 0x0050459C;
}

// FUNCTION: COPTER_D 0x005045a1
void ResetAllAutomobiles() {
// LINE 2046:
	__asm        call   0x00501E71;
// LINE 2047:
	__asm        jmp    near ptr 0x005045B1;
}

// FUNCTION: COPTER_D 0x005045b6
int32_t AutomobileClass::CanIPullOver() {
	struct Point3d nextpoint;
	unsigned char y;
	unsigned char x;
	struct _DYOBJ_INST* currentObject;

// LINE 2099:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050460A;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050460A;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0050460A;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x00504615;
	__asm        mov    word ptr [ebp-0x34], 0;
	__asm        jmp    near ptr 0x00504661;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7C];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0x7D];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    [ebp-0x34], ax;
	__asm        jmp    near ptr 0x00504661;
	__asm        mov    eax, [ebp-0x34];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     near ptr 0x0050468D;
	__asm        mov    eax, [ebp-0x34];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     near ptr 0x0050468D;
	__asm        jmp    near ptr 0x005046A1;
	__asm        jmp    near ptr 0x00504697;
	__asm        jmp    near ptr 0x005046A8;
	__asm        jmp    near ptr 0x005046A1;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x005046A8;
// LINE 2100:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2103:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x80;
	__asm        je     near ptr 0x005046BC;
// LINE 2104:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2107:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9E], 0;
	__asm        jle    near ptr 0x005046D3;
// LINE 2108:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2112:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x24];
	__asm        mov    nextpoint.x, eax;
// LINE 2113:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        shl    eax, 5;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x2C];
	__asm        mov    nextpoint.z, eax;
// LINE 2114:
	__asm        mov    eax, nextpoint.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    x, al;
// LINE 2115:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, nextpoint.z;
	__asm        sar    eax, 0x16;
	__asm        mov    y, al;
// LINE 2116:
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00504758;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00504758;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00504758;
	__asm        xor    eax, eax;
	__asm        mov    al, y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00504763;
	__asm        mov    word ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x005047A3;
	__asm        xor    eax, eax;
	__asm        mov    al, x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x2C], ax;
	__asm        jmp    near ptr 0x005047A3;
	__asm        mov    eax, [ebp-0x2C];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     near ptr 0x005047CF;
	__asm        mov    eax, [ebp-0x2C];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     near ptr 0x005047CF;
	__asm        jmp    near ptr 0x005047E3;
	__asm        jmp    near ptr 0x005047D9;
	__asm        jmp    near ptr 0x005047EA;
	__asm        jmp    near ptr 0x005047E3;
	__asm        cmp    dword ptr [ebp-0x30], 0;
	__asm        je     near ptr 0x005047EA;
// LINE 2117:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2119:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x24], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x28], ecx;
	__asm        mov    eax, [ebp-0x24];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x28];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x20], eax;
	__asm        cmp    dword ptr [ebp-0x20], 0;
	__asm        jne    near ptr 0x00504844;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00504849;
	__asm        jmp    near ptr 0x00504849;
	__asm        jmp    near ptr 0x0050484E;
	__asm        mov    eax, [ebp-0x20];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 2122:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x005048BE;
// LINE 2125:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x0050487D;
// LINE 2127:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2128:
	__asm        jmp    near ptr 0x00504857;
// LINE 2133:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x005048B1;
// LINE 2135:
// Block start:
	class AutomobileClass* car;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    car, eax;
// LINE 2139:
	__asm        mov    eax, car;
	__asm        test   byte ptr [eax+8], 0xF0;
	__asm        je     near ptr 0x005048B1;
// LINE 2140:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2143:
// Block end:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2144:
	__asm        jmp    near ptr 0x00504857;
// LINE 2146:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005048C8;
// LINE 2147:
}

// FUNCTION: COPTER_D 0x005048cd
void AutomobileClass::PullOver(short __formal) {
// LINE 2153:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x13;
	__asm        je     near ptr 0x005048F2;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        jmp    near ptr 0x00504949;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0xC], eax;
	__asm        jmp    near ptr 0x00504911;
	__asm        mov    dword ptr [ebp-4], 1;
	__asm        jmp    near ptr 0x00504949;
	__asm        jmp    near ptr 0x0050493D;
	__asm        cmp    dword ptr [ebp-0xC], 0x11C;
	__asm        jl     near ptr 0x0050493D;
	__asm        cmp    dword ptr [ebp-0xC], 0x11F;
	__asm        jle    near ptr 0x00504900;
	__asm        cmp    dword ptr [ebp-0xC], 0x181;
	__asm        je     near ptr 0x00504900;
	__asm        jmp    near ptr 0x0050493D;
	__asm        mov    dword ptr [ebp-4], 0;
	__asm        jmp    near ptr 0x00504949;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00504965;
// LINE 2154:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC6], 0x7D000000;
// LINE 2155:
	__asm        jmp    near ptr 0x00504972;
// LINE 2156:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC6], 0x40000;
// LINE 2158:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x70;
	__asm        jne    near ptr 0x0050499A;
// LINE 2160:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x10;
// LINE 2161:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFF9F;
// LINE 2162:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9A], 0;
// LINE 2165:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x005049F2;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        je     near ptr 0x005049F2;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        je     near ptr 0x005049F2;
// LINE 2167:
	__asm        push   7;
	__asm        push   0xE;
	__asm        mov    ecx, this;
	__asm        call   0x0050217C;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005049F2;
// LINE 2169:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xF6], 0;
// LINE 2170:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xFE], 0x780000;
// LINE 2173:
	__asm        jmp    near ptr 0x005049F7;
}

// FUNCTION: COPTER_D 0x005049fe
int32_t AutomobileClass::CanIPullOut() {
	struct _DYOBJ_INST* currentObject;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0xC], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x10], ecx;
// LINE 2178:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x10];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x00504A64;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00504A69;
	__asm        jmp    near ptr 0x00504A69;
	__asm        jmp    near ptr 0x00504A6E;
	__asm        mov    eax, [ebp-8];
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 2181:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x00504AFB;
// LINE 2184:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x00504A9D;
// LINE 2186:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2187:
	__asm        jmp    near ptr 0x00504A77;
// LINE 2192:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00504AEE;
// LINE 2195:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x82];
	__asm        cmp    [eax+0x82], ecx;
	__asm        jne    near ptr 0x00504AEE;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x00504AEE;
// LINE 2196:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00504B05;
// LINE 2199:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2200:
	__asm        jmp    near ptr 0x00504A77;
// LINE 2202:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00504B05;
// LINE 2203:
}

// FUNCTION: COPTER_D 0x00504b0a
void AutomobileClass::PullOut() {
// LINE 2209:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     near ptr 0x00504B3E;
// LINE 2211:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x40;
// LINE 2212:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFDF;
// LINE 2213:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9A], 0xD0000;
// LINE 2215:
	__asm        jmp    near ptr 0x00504B43;
}

// FUNCTION: COPTER_D 0x00504b48
void AutomobileClass::TransitionBetweenGoals() {
// LINE 2230:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xEE], 9;
	__asm        jge    near ptr 0x00504BAC;
// LINE 2233:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xEE];
// LINE 2234:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [eax+ecx*4+0x62BB30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2235:
	__asm        jmp    near ptr 0x0050503A;
// LINE 2239:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502A9B;
// LINE 2241:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x00504C21;
// LINE 2243:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x7D], cl;
	__asm        jmp    near ptr 0x00504C45;
// LINE 2244:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        inc    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x7C], cl;
	__asm        jmp    near ptr 0x00504C45;
// LINE 2245:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        inc    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x7D], cl;
	__asm        jmp    near ptr 0x00504C45;
// LINE 2246:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0x7C], cl;
	__asm        jmp    near ptr 0x00504C45;
// LINE 2247:
	__asm        jmp    near ptr 0x00504C45;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x00504C45;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x504C35];
// Switch pointers
// LINE 2250:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639510];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+edx*2];
	__asm        shr    ecx, 0xA;
	__asm        test   cl, 0x1F;
	__asm        jne    near ptr 0x00504D80;
// LINE 2252:
// Block start:
	unsigned short tile;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        movzx  ax, byte ptr [eax+edx];
	__asm        mov    tile, ax;
	__asm        mov    ax, tile;
	__asm        mov    [ebp-0x20], ax;
// LINE 2253:
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFF;
	__asm        mov    [ebp-0x20], ax;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00504CC4;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jle    near ptr 0x00504D2A;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x3F;
	__asm        jl     near ptr 0x00504CE6;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x46;
	__asm        jle    near ptr 0x00504D2A;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x49;
	__asm        jl     near ptr 0x00504D08;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x59;
	__asm        jle    near ptr 0x00504D2A;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x5D;
	__asm        jl     near ptr 0x00504D39;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x6B;
	__asm        jg     near ptr 0x00504D39;
	__asm        jmp    near ptr 0x00504D80;
	__asm        jmp    near ptr 0x00504D48;
	__asm        jmp    near ptr 0x00504D3E;
	__asm        jmp    near ptr 0x00504D48;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        jne    near ptr 0x00504D80;
// LINE 2256:
	__asm        push   0x8D0;
	__asm        push   0x5B55F8;
	__asm        push   0x5B561C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00504D69;
	__asm        jmp    near ptr 0x00504D69;
// LINE 2258:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFFD;
// LINE 2259:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0x1C];
// LINE 2260:
	__asm        jmp    near ptr 0x0050503A;
// LINE 2264:
// Block end:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 2268:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0xA;
// LINE 2272:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE2], eax;
// LINE 2275:
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C331;
// LINE 2283:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x7E], 0xFFFFFFFE;
	__asm        jne    near ptr 0x00504E58;
// LINE 2285:
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+0xC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE6], eax;
// LINE 2286:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x592CC0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x7E], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x7E];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x82], eax;
// LINE 2287:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0;
// LINE 2288:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE6];
	__asm        shl    eax, 3;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [eax+ecx*4+0x62BB34];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2290:
	__asm        jmp    near ptr 0x00504EFB;
// LINE 2292:
	__asm        mov    eax, this;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        cmp    [eax+0x82], ecx;
	__asm        jne    near ptr 0x00504E8F;
// LINE 2296:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0;
// LINE 2302:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x86], 0x400000;
// LINE 2304:
	__asm        jmp    near ptr 0x00504EFB;
// LINE 2312:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0;
// LINE 2313:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        shl    ecx, 4;
	__asm        mov    eax, [ecx+eax*4+0x592D10];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE6], eax;
// LINE 2314:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [eax+ecx*4+0x62BB30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2321:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE6], 0;
	__asm        je     near ptr 0x00505022;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 0x10;
	__asm        jne    near ptr 0x00504F28;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+4], 0x11E;
	__asm        jne    near ptr 0x00505022;
// LINE 2323:
	__asm        push   0x31;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00505022;
// LINE 2327:
// Block start:
	struct Point3d loc;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 2328:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+4];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 2329:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+8];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 2330:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x31;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x18], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x1C], ecx;
// LINE 2331:
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x00504FF4;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00504FF9;
	__asm        jmp    near ptr 0x00504FF9;
	__asm        jmp    near ptr 0x00504FFE;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 2332:
	__asm        push   6;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        call   0x005240DC;
	__asm        add    esp, 0xC;
// LINE 2338:
// Block end:
	__asm        mov    ecx, this;
	__asm        call   0x0050503F;
// LINE 2344:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+8];
// LINE 2345:
	__asm        jmp    near ptr 0x0050503A;
}

// FUNCTION: COPTER_D 0x0050503f
void AutomobileClass::DoDiagonalRoadFixup() {
	int32_t roadTile;
	int32_t diagRoad;

// LINE 2362:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        sub    ecx, 0x23;
	__asm        mov    roadTile, ecx;
// LINE 2378:
	__asm        mov    eax, roadTile;
	__asm        mov    [ebp-0x10], eax;
	__asm        jmp    near ptr 0x00505206;
// LINE 2380:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 2;
	__asm        jne    near ptr 0x00505094;
	__asm        mov    diagRoad, 0;
	__asm        jmp    near ptr 0x0050509B;
	__asm        mov    diagRoad, 2;
// LINE 2381:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0;
// LINE 2382:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635114];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2383:
	__asm        jmp    near ptr 0x0050522A;
// LINE 2385:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 3;
	__asm        jne    near ptr 0x005050F5;
	__asm        mov    diagRoad, 1;
	__asm        jmp    near ptr 0x005050FC;
	__asm        mov    diagRoad, 3;
// LINE 2386:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0;
// LINE 2387:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635114];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2388:
	__asm        jmp    near ptr 0x0050522A;
// LINE 2390:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 0;
	__asm        jne    near ptr 0x00505156;
	__asm        mov    diagRoad, 2;
	__asm        jmp    near ptr 0x0050515D;
	__asm        mov    diagRoad, 0;
// LINE 2391:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0;
// LINE 2392:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635114];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2393:
	__asm        jmp    near ptr 0x0050522A;
// LINE 2395:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 1;
	__asm        jne    near ptr 0x005051B7;
	__asm        mov    diagRoad, 3;
	__asm        jmp    near ptr 0x005051BE;
	__asm        mov    diagRoad, 1;
// LINE 2396:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xEE], 0xA;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 0;
// LINE 2397:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635114];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2398:
	__asm        jmp    near ptr 0x0050522A;
// LINE 2400:
	__asm        jmp    near ptr 0x0050522A;
// LINE 2401:
	__asm        jmp    near ptr 0x0050522A;
	__asm        cmp    dword ptr [ebp-0x10], 3;
	__asm        ja     near ptr 0x0050522A;
	__asm        mov    eax, [ebp-0x10];
	__asm        jmp    dword ptr [eax*4+0x50521A];
// Switch pointers
// LINE 2404:
	__asm        jmp    near ptr 0x0050522F;
}

// FUNCTION: COPTER_D 0x00505234
void AutomobileClass::MoveAuto(int32_t dist) {
	int32_t xOffset;
	struct _CELL_INFO* pCell;
	int32_t roadTile;
	int32_t[4][4]* pRotMatrix;
	int32_t zOffset;
	int32_t diagRoad;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x20], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x24], ecx;
// LINE 2424:
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x24];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x1C], eax;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        jne    near ptr 0x0050529A;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0050529F;
	__asm        jmp    near ptr 0x0050529F;
	__asm        jmp    near ptr 0x005052A4;
	__asm        mov    eax, [ebp-0x1C];
	__asm        mov    pCell, eax;
// LINE 2432:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 2433:
	__asm        mov    eax, pCell;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 2434:
	__asm        mov    eax, pCell;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 2441:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        sub    ecx, 0x23;
	__asm        mov    roadTile, ecx;
// LINE 2442:
	__asm        mov    diagRoad, 0;
// LINE 2445:
	__asm        cmp    roadTile, 0;
	__asm        jl     near ptr 0x0050544A;
	__asm        cmp    roadTile, 4;
	__asm        jge    near ptr 0x0050544A;
// LINE 2447:
	__asm        mov    eax, roadTile;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x005053CB;
// LINE 2449:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 2;
	__asm        jne    near ptr 0x0050533D;
	__asm        mov    diagRoad, 0;
	__asm        jmp    near ptr 0x00505344;
	__asm        mov    diagRoad, 2;
	__asm        jmp    near ptr 0x005053EF;
// LINE 2450:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 3;
	__asm        jne    near ptr 0x00505365;
	__asm        mov    diagRoad, 1;
	__asm        jmp    near ptr 0x0050536C;
	__asm        mov    diagRoad, 3;
	__asm        jmp    near ptr 0x005053EF;
// LINE 2451:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 0;
	__asm        jne    near ptr 0x0050538D;
	__asm        mov    diagRoad, 2;
	__asm        jmp    near ptr 0x00505394;
	__asm        mov    diagRoad, 0;
	__asm        jmp    near ptr 0x005053EF;
// LINE 2452:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE2], 1;
	__asm        jne    near ptr 0x005053B5;
	__asm        mov    diagRoad, 3;
	__asm        jmp    near ptr 0x005053BC;
	__asm        mov    diagRoad, 1;
	__asm        jmp    near ptr 0x005053EF;
// LINE 2453:
	__asm        jmp    near ptr 0x005053EF;
// LINE 2454:
	__asm        jmp    near ptr 0x005053EF;
	__asm        cmp    dword ptr [ebp-0x2C], 3;
	__asm        ja     near ptr 0x005053EF;
	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    dword ptr [eax*4+0x5053DF];
// Switch pointers
// LINE 2456:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635110];
	__asm        mov    xOffset, eax;
// LINE 2457:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, roadTile;
	__asm        shl    ecx, 4;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [ecx+eax*4+0x635118];
	__asm        mov    zOffset, eax;
// LINE 2458:
	__asm        mov    eax, diagRoad;
	__asm        lea    eax, [eax+eax*2];
	__asm        lea    eax, [eax*4+0x62BB00];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF2], eax;
// LINE 2459:
	__asm        mov    eax, diagRoad;
	__asm        shl    eax, 6;
	__asm        add    eax, 0x62BA00;
	__asm        mov    pRotMatrix, eax;
// LINE 2461:
	__asm        jmp    near ptr 0x00505613;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xEE], 0xA;
	__asm        jge    near ptr 0x0050557C;
// LINE 2464:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, [eax+ecx+0x62D390];
	__asm        mov    xOffset, eax;
// LINE 2465:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        mov    ecx, eax;
	__asm        lea    eax, [eax+eax*4];
	__asm        lea    eax, [ecx+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        shl    ecx, 3;
	__asm        lea    eax, [ecx+eax*8];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        shl    ecx, 5;
	__asm        mov    eax, [eax+ecx+0x62D394];
	__asm        mov    zOffset, eax;
// LINE 2466:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        shl    ecx, 5;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        shl    ecx, 2;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62BD10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF2], eax;
// LINE 2467:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE2];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 7;
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        shl    ecx, 6;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 9;
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62D910;
	__asm        mov    pRotMatrix, eax;
// LINE 2470:
	__asm        jmp    near ptr 0x00505613;
// LINE 2472:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        shl    eax, 4;
	__asm        fld    qword ptr [eax+0x592D50];
	__asm        fmul   qword ptr ds:[0x592D90];
	__asm        call   0x0056EBE8;
	__asm        mov    xOffset, eax;
// LINE 2473:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x82];
	__asm        shl    eax, 4;
	__asm        fld    qword ptr [eax+0x592D58];
	__asm        fmul   qword ptr ds:[0x592D90];
	__asm        call   0x0056EBE8;
	__asm        mov    zOffset, eax;
// LINE 2474:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x82];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*8];
	__asm        lea    eax, [ecx+eax*4];
	__asm        add    eax, 0x62BD10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF2], eax;
// LINE 2475:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        shl    eax, 6;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x82];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        shl    ecx, 7;
	__asm        add    eax, ecx;
	__asm        add    eax, 0x62D910;
	__asm        mov    pRotMatrix, eax;
// LINE 2480:
	__asm        mov    eax, xOffset;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x24], eax;
// LINE 2481:
	__asm        mov    eax, zOffset;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x2C], eax;
// LINE 2485:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x24], eax;
// LINE 2487:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x28], eax;
// LINE 2488:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x2C], eax;
// LINE 2491:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x70;
	__asm        je     near ptr 0x0050569A;
// LINE 2492:
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0050583B;
// LINE 2495:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639510];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+edx*2];
	__asm        shr    ecx, 0xA;
	__asm        test   cl, 0x1F;
	__asm        je     near ptr 0x005056D9;
// LINE 2496:
	__asm        push   1;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2497:
	__asm        jmp    near ptr 0x005056EA;
// LINE 2498:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D6970;
	__asm        add    esp, 8;
// LINE 2506:
	__asm        mov    edi, this;
	__asm        add    edi, 0x30;
	__asm        mov    esi, pRotMatrix;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 2507:
	__asm        jmp    near ptr 0x005056FF;
}

// FUNCTION: COPTER_D 0x00505706
void AutomobileClass::DoAUTurn() {
// LINE 2515:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xEE], 0xA;
	__asm        je     near ptr 0x0050578E;
// LINE 2518:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE6], 3;
	__asm        jne    near ptr 0x00505737;
// LINE 2519:
	__asm        jmp    near ptr 0x0050581B;
// LINE 2522:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE6], 2;
	__asm        jne    near ptr 0x00505759;
// LINE 2524:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 1;
// LINE 2526:
	__asm        jmp    near ptr 0x00505776;
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xE6], 1;
	__asm        jne    near ptr 0x00505776;
// LINE 2528:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xE6], 2;
// LINE 2531:
	__asm        mov    eax, 0xA;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xEE];
	__asm        dec    eax;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xEE], eax;
// LINE 2535:
	__asm        mov    eax, this;
	__asm        add    eax, 0x70;
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D02C;
// LINE 2539:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xEE], 0xA;
	__asm        jne    near ptr 0x005057C1;
// LINE 2540:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x86], 0x400000;
// LINE 2541:
	__asm        jmp    near ptr 0x005057FB;
// LINE 2542:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x96];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xE6];
	__asm        shl    ecx, 3;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [ecx+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xEE];
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    eax, [eax+ecx*4+0x62BB30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x86], eax;
// LINE 2544:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x86];
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xEA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xEA], eax;
// LINE 2545:
	__asm        jmp    near ptr 0x0050581B;
}

// FUNCTION: COPTER_D 0x00505820
int32_t AutomobileClass::CanIDoAUTurn() {
// LINE 2552:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00505836;
// LINE 2553:
}

// FUNCTION: COPTER_D 0x0050583b
void AutomobileClass::DoPullOverStuff(int32_t dist) {
	struct Point3d pulloverVector;
	int32_t PulloverStepSize;

// LINE 2562:
	__asm        push   0x8000;
	__asm        mov    eax, dist;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0xEA];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    PulloverStepSize, eax;
// LINE 2564:
	__asm        mov    pulloverVector.y, 0;
// LINE 2565:
	__asm        push   0xFFFF0000;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    pulloverVector.z, eax;
// LINE 2566:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        mov    pulloverVector.x, eax;
// LINE 2567:
	__asm        lea    eax, pulloverVector.x;
	__asm        push   eax;
	__asm        call   0x0054308E;
	__asm        add    esp, 4;
// LINE 2569:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        je     near ptr 0x005058FB;
// LINE 2571:
	__asm        mov    eax, PulloverStepSize;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x9A], eax;
// LINE 2572:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9A], 0xD0000;
	__asm        jle    near ptr 0x005058F6;
// LINE 2574:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFFEF;
// LINE 2575:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x20;
// LINE 2576:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9A], 0xD0000;
// LINE 2577:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC6], 0x40000;
// LINE 2580:
	__asm        jmp    near ptr 0x0050593C;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x40;
	__asm        je     near ptr 0x0050593C;
// LINE 2582:
	__asm        xor    eax, eax;
	__asm        sub    eax, PulloverStepSize;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x9A], eax;
// LINE 2583:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x9A], 0;
	__asm        jg     near ptr 0x0050593C;
// LINE 2585:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFF8F;
// LINE 2586:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x9A], 0;
// LINE 2589:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9A];
	__asm        push   eax;
	__asm        mov    eax, pulloverVector.x;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    pulloverVector.x, eax;
// LINE 2590:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9A];
	__asm        push   eax;
	__asm        mov    eax, pulloverVector.z;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    pulloverVector.z, eax;
// LINE 2592:
	__asm        mov    eax, pulloverVector.x;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x24], eax;
// LINE 2593:
	__asm        mov    eax, pulloverVector.z;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x2C], eax;
// LINE 2594:
	__asm        jmp    near ptr 0x00505985;
}

// FUNCTION: COPTER_D 0x0050598c
enum AutomobileClass::StoppedReasons AutomobileClass::CollisionCheck(int32_t dist, struct _DYOBJ_INST** dyblock) {
	struct Point3d collisionPoint;
	int32_t combinedradius;
	struct _GridCoordinates nextLocation;
	int32_t xdiff;
	int32_t zdiff;
	struct _CELL_INFO* currentCell;
	struct _DYOBJ_INST* currentObject;
	class AutomobileClass* carblock;
	struct _GridCoordinates currentLocation;
	int32_t ydiff;

// LINE 2625:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639510];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+edx*2];
	__asm        shr    ecx, 0xA;
	__asm        test   cl, 0x1F;
	__asm        je     near ptr 0x005059C8;
// LINE 2626:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2629:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        add    eax, 0x50000;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x24];
	__asm        add    ecx, eax;
	__asm        mov    collisionPoint.x, ecx;
// LINE 2630:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        add    eax, 0x50000;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x28];
	__asm        add    ecx, eax;
	__asm        mov    collisionPoint.y, ecx;
// LINE 2631:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x1C];
	__asm        add    eax, 0x50000;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x2C];
	__asm        add    ecx, eax;
	__asm        mov    collisionPoint.z, ecx;
// LINE 2636:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    currentLocation.x, al;
// LINE 2637:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    currentLocation.y, al;
// LINE 2640:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        shl    eax, 3;
	__asm        add    eax, collisionPoint.x;
	__asm        mov    xdiff, eax;
// LINE 2641:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        shl    eax, 3;
	__asm        add    eax, collisionPoint.z;
	__asm        mov    zdiff, eax;
// LINE 2643:
	__asm        mov    eax, xdiff;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    nextLocation.x, al;
// LINE 2644:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, zdiff;
	__asm        sar    eax, 0x16;
	__asm        mov    nextLocation.y, al;
// LINE 2646:
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.x;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x54], eax;
	__asm        cmp    dword ptr [ebp-0x54], 0;
	__asm        jne    near ptr 0x00505AEF;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00505AF4;
	__asm        jmp    near ptr 0x00505AF4;
	__asm        jmp    near ptr 0x00505AF9;
	__asm        mov    eax, [ebp-0x54];
	__asm        mov    currentCell, eax;
// LINE 2650:
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00505B39;
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00505B39;
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00505B39;
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00505B44;
	__asm        mov    word ptr [ebp-0x4C], 0;
	__asm        jmp    near ptr 0x00505B84;
	__asm        xor    eax, eax;
	__asm        mov    al, currentLocation.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, currentLocation.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x4C], ax;
	__asm        jmp    near ptr 0x00505B84;
	__asm        mov    eax, [ebp-0x4C];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     near ptr 0x00505BB0;
	__asm        mov    eax, [ebp-0x4C];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     near ptr 0x00505BB0;
	__asm        jmp    near ptr 0x00505BC4;
	__asm        jmp    near ptr 0x00505BBA;
	__asm        jmp    near ptr 0x00505BD3;
	__asm        jmp    near ptr 0x00505BC4;
	__asm        cmp    dword ptr [ebp-0x50], 0;
	__asm        je     near ptr 0x00505BD3;
// LINE 2652:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x80;
// LINE 2654:
	__asm        jmp    near ptr 0x00505BE7;
// LINE 2656:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFF7F;
// LINE 2657:
	__asm        mov    eax, this;
	__asm        and    dword ptr [eax+8], 0xFFFFFBFF;
// LINE 2661:
	__asm        mov    ecx, this;
	__asm        call   0x00506F0E;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00505C01;
// LINE 2662:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x400;
// LINE 2665:
	__asm        cmp    currentCell, 0;
	__asm        jne    near ptr 0x00505C2C;
// LINE 2667:
	__asm        push   0xA6B;
	__asm        push   0x5B5624;
	__asm        push   0x5B5648;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00505C2C;
	__asm        jmp    near ptr 0x00505C2C;
// LINE 2675:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 4;
	__asm        jne    near ptr 0x00505EB8;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00505C5D;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.y;
	__asm        cmp    eax, ecx;
	__asm        je     near ptr 0x00505EB8;
// LINE 2680:
// Block start:
	struct _CELL_INFO* cptr;
	struct _DYOBJ_INST* currentObject;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.x;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00505C97;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        test   eax, eax;
	__asm        jl     near ptr 0x00505C97;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.x;
	__asm        cmp    eax, 0x80;
	__asm        jge    near ptr 0x00505C97;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        cmp    eax, 0x80;
	__asm        jl     near ptr 0x00505CA2;
	__asm        mov    word ptr [ebp-0x44], 0;
	__asm        jmp    near ptr 0x00505CE2;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.x;
	__asm        mov    eax, [eax*4+0x638F70];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLocation.y;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        and    edx, 2;
	__asm        movsx  eax, dx;
	__asm        shl    eax, 0xE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLocation.x;
	__asm        mov    ecx, [ecx*4+0x639850];
	__asm        xor    edx, edx;
	__asm        mov    dl, nextLocation.y;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx];
	__asm        or     eax, ebx;
	__asm        mov    [ebp-0x44], ax;
	__asm        jmp    near ptr 0x00505CE2;
	__asm        mov    eax, [ebp-0x44];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x27;
	__asm        jl     near ptr 0x00505D0E;
	__asm        mov    eax, [ebp-0x44];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2B;
	__asm        jg     near ptr 0x00505D0E;
	__asm        jmp    near ptr 0x00505D22;
	__asm        jmp    near ptr 0x00505D18;
	__asm        jmp    near ptr 0x00505EB8;
	__asm        jmp    near ptr 0x00505D22;
	__asm        cmp    dword ptr [ebp-0x48], 0;
	__asm        je     near ptr 0x00505EB8;
// LINE 2682:
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLocation.x;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x3C], eax;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        jne    near ptr 0x00505D5F;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00505D64;
	__asm        jmp    near ptr 0x00505D64;
	__asm        jmp    near ptr 0x00505D69;
	__asm        mov    eax, [ebp-0x3C];
	__asm        mov    cptr, eax;
// LINE 2683:
	__asm        mov    eax, cptr;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 2685:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x00505EB8;
// LINE 2688:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x00505D9E;
// LINE 2690:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2691:
	__asm        jmp    near ptr 0x00505D78;
// LINE 2695:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00505DBA;
// LINE 2697:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2698:
	__asm        jmp    near ptr 0x00505D78;
// LINE 2701:
	__asm        mov    eax, currentObject;
	__asm        mov    ecx, dyblock;
	__asm        mov    [ecx], eax;
// LINE 2704:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00505E46;
// LINE 2707:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    carblock, eax;
// LINE 2713:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x80;
	__asm        je     near ptr 0x00505E13;
	__asm        mov    eax, carblock;
	__asm        test   byte ptr [eax+9], 4;
	__asm        jne    near ptr 0x00505E13;
// LINE 2715:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x400;
// LINE 2716:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2717:
	__asm        jmp    near ptr 0x00505D78;
// LINE 2723:
	__asm        mov    eax, carblock;
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        jne    near ptr 0x00505E37;
	__asm        mov    eax, carblock;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x00505E37;
// LINE 2725:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2728:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2730:
	__asm        jmp    near ptr 0x00505EAB;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x00505E64;
// LINE 2732:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2734:
	__asm        jmp    near ptr 0x00505EAB;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00505E82;
// LINE 2736:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2738:
	__asm        jmp    near ptr 0x00505EAB;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   ah, 4;
	__asm        je     near ptr 0x00505EA1;
// LINE 2740:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2742:
	__asm        jmp    near ptr 0x00505EAB;
// LINE 2744:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2748:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2749:
	__asm        jmp    near ptr 0x00505D78;
// LINE 2755:
// Block end:
	__asm        mov    eax, currentCell;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 2758:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x00506057;
// LINE 2761:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x00505EE7;
// LINE 2763:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2764:
	__asm        jmp    near ptr 0x00505EC1;
// LINE 2768:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00505F03;
// LINE 2770:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2771:
	__asm        jmp    near ptr 0x00505EC1;
// LINE 2776:
	__asm        mov    eax, collisionPoint.x;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x18];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 2777:
	__asm        mov    eax, collisionPoint.y;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x1C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 2778:
	__asm        mov    eax, collisionPoint.z;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x20];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    zdiff, eax;
// LINE 2780:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    combinedradius, eax;
// LINE 2781:
	__asm        add    combinedradius, 0x50000;
// LINE 2784:
	__asm        mov    eax, xdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050604A;
	__asm        mov    eax, ydiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050604A;
	__asm        mov    eax, zdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050604A;
// LINE 2787:
	__asm        mov    eax, currentObject;
	__asm        mov    ecx, dyblock;
	__asm        mov    [ecx], eax;
// LINE 2789:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00505FE5;
// LINE 2793:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        jne    near ptr 0x00505FE0;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x00505FE0;
// LINE 2804:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    eax, [eax+0xF2];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005062A7;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00505FE0;
// LINE 2805:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2808:
	__asm        jmp    near ptr 0x0050604A;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x00506003;
// LINE 2810:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2812:
	__asm        jmp    near ptr 0x0050604A;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00506021;
// LINE 2814:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2816:
	__asm        jmp    near ptr 0x0050604A;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   ah, 4;
	__asm        je     near ptr 0x00506040;
// LINE 2818:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2820:
	__asm        jmp    near ptr 0x0050604A;
// LINE 2822:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2827:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2828:
	__asm        jmp    near ptr 0x00505EC1;
// LINE 2831:
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.x;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00506082;
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, currentLocation.y;
	__asm        cmp    eax, ecx;
	__asm        jne    near ptr 0x00506082;
// LINE 2832:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2837:
	__asm        xor    eax, eax;
	__asm        mov    al, nextLocation.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, nextLocation.x;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x40], eax;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        jne    near ptr 0x005060BF;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005060C4;
	__asm        jmp    near ptr 0x005060C4;
	__asm        jmp    near ptr 0x005060C9;
	__asm        mov    eax, [ebp-0x40];
	__asm        mov    currentCell, eax;
// LINE 2840:
	__asm        cmp    currentCell, 0;
	__asm        jne    near ptr 0x005060FA;
// LINE 2842:
	__asm        push   0xB1A;
	__asm        push   0x5B5650;
	__asm        push   0x5B5674;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005060FA;
	__asm        jmp    near ptr 0x005060FA;
// LINE 2846:
	__asm        mov    eax, currentCell;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    currentObject, eax;
// LINE 2849:
	__asm        cmp    currentObject, 0;
	__asm        je     near ptr 0x00506299;
// LINE 2852:
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        cmp    eax, currentObject;
	__asm        jne    near ptr 0x00506129;
// LINE 2854:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2855:
	__asm        jmp    near ptr 0x00506103;
// LINE 2859:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x20;
	__asm        je     near ptr 0x00506145;
// LINE 2861:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2862:
	__asm        jmp    near ptr 0x00506103;
// LINE 2867:
	__asm        mov    eax, collisionPoint.x;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x18];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 2868:
	__asm        mov    eax, collisionPoint.y;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x1C];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 2869:
	__asm        mov    eax, collisionPoint.z;
	__asm        mov    ecx, currentObject;
	__asm        sub    eax, [ecx+0x20];
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    zdiff, eax;
// LINE 2871:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    combinedradius, eax;
// LINE 2872:
	__asm        add    combinedradius, 0x50000;
// LINE 2875:
	__asm        mov    eax, xdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050628C;
	__asm        mov    eax, ydiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050628C;
	__asm        mov    eax, zdiff;
	__asm        cmp    combinedradius, eax;
	__asm        jl     near ptr 0x0050628C;
// LINE 2878:
	__asm        mov    eax, currentObject;
	__asm        mov    ecx, dyblock;
	__asm        mov    [ecx], eax;
// LINE 2880:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 0x10;
	__asm        je     near ptr 0x00506227;
// LINE 2884:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x10;
	__asm        jne    near ptr 0x00506222;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        jne    near ptr 0x00506222;
// LINE 2895:
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    eax, [eax+0xF2];
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x005062A7;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00506222;
// LINE 2896:
	__asm        mov    eax, 4;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2899:
	__asm        jmp    near ptr 0x0050628C;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 8;
	__asm        je     near ptr 0x00506245;
// LINE 2901:
	__asm        mov    eax, 3;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2903:
	__asm        jmp    near ptr 0x0050628C;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   al, 4;
	__asm        je     near ptr 0x00506263;
// LINE 2905:
	__asm        mov    eax, 7;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2907:
	__asm        jmp    near ptr 0x0050628C;
	__asm        mov    eax, currentObject;
	__asm        movsx  eax, word ptr [eax+0xC];
	__asm        test   ah, 4;
	__asm        je     near ptr 0x00506282;
// LINE 2909:
	__asm        mov    eax, 5;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2911:
	__asm        jmp    near ptr 0x0050628C;
// LINE 2913:
	__asm        mov    eax, 6;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2918:
	__asm        mov    eax, currentObject;
	__asm        mov    eax, [eax];
	__asm        mov    currentObject, eax;
// LINE 2919:
	__asm        jmp    near ptr 0x00506103;
// LINE 2923:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005062A0;
// LINE 2924:
}

// FUNCTION: COPTER_D 0x005062a7
int32_t AutomobileClass::AreCarsHeadOn(struct Point3d* dirvect) {
	int32_t dotp;

// LINE 2952:
	__asm        mov    eax, dirvect;
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ebx, eax;
	__asm        mov    eax, dirvect;
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax+4];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        add    ebx, eax;
	__asm        mov    eax, dirvect;
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    eax, [eax];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        add    ebx, eax;
	__asm        mov    dotp, ebx;
// LINE 2954:
	__asm        cmp    dotp, 0x3333;
	__asm        jl     near ptr 0x00506322;
// LINE 2955:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0050632C;
// LINE 2958:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050632C;
// LINE 2959:
}

// FUNCTION: COPTER_D 0x00506333
int32_t AutomobileClass::IsCarOutOfCameraRange() {
	int32_t xdiff;
	int32_t dist;
	int32_t ydiff;

// LINE 2985:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 8;
	__asm        je     near ptr 0x00506387;
// LINE 2987:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        sub    ecx, ds:[0x6BF188];
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 2988:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        sub    ecx, ds:[0x6BF18C];
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 2990:
	__asm        jmp    near ptr 0x005063B7;
// LINE 2992:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        sub    ecx, ds:[0x6BF188];
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    xdiff, eax;
// LINE 2993:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        sub    ecx, ds:[0x6BF18C];
	__asm        mov    eax, ecx;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ydiff, eax;
// LINE 2996:
	__asm        mov    eax, xdiff;
	__asm        cmp    ydiff, eax;
	__asm        jge    near ptr 0x005063D3;
// LINE 2998:
	__asm        mov    eax, xdiff;
	__asm        add    eax, eax;
	__asm        add    eax, ydiff;
	__asm        mov    dist, eax;
// LINE 3000:
	__asm        jmp    near ptr 0x005063DE;
// LINE 3002:
	__asm        mov    eax, ydiff;
	__asm        add    eax, eax;
	__asm        add    eax, xdiff;
	__asm        mov    dist, eax;
// LINE 3006:
	__asm        mov    eax, ds:[0x6663A0];
	__asm        sar    eax, 1;
	__asm        add    eax, ds:[0x6663A0];
	__asm        add    eax, 2;
	__asm        cmp    eax, dist;
	__asm        jge    near ptr 0x00506407;
// LINE 3008:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050640E;
// LINE 3010:
	__asm        jmp    near ptr 0x0050640E;
// LINE 3012:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0050640E;
// LINE 3014:
}

// FUNCTION: COPTER_D 0x00506413
void AutomobileClass::HitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, long mission_id, long xtra_msg) {
// LINE 3029:
	__asm        mov    eax, hitter_type;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x005064EC;
// LINE 3032:
	__asm        jmp    near ptr 0x00506540;
// LINE 3034:
	__asm        mov    eax, dyhitter;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00506C7D;
// LINE 3035:
	__asm        jmp    near ptr 0x00506540;
// LINE 3037:
	__asm        mov    eax, xtra_msg;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00503FD0;
// LINE 3038:
	__asm        jmp    near ptr 0x00506540;
// LINE 3040:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0050670B;
// LINE 3041:
	__asm        jmp    near ptr 0x00506540;
// LINE 3043:
	__asm        mov    eax, dyhitter;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00503EDE;
// LINE 3044:
	__asm        jmp    near ptr 0x00506540;
// LINE 3046:
	__asm        jmp    near ptr 0x00506540;
// LINE 3048:
	__asm        jmp    near ptr 0x00506540;
// LINE 3050:
	__asm        mov    ecx, this;
	__asm        call   0x00506F0E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00506499;
// LINE 3051:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0050670B;
// LINE 3052:
	__asm        jmp    near ptr 0x00506540;
// LINE 3054:
	__asm        jmp    near ptr 0x00506540;
// LINE 3056:
	__asm        jmp    near ptr 0x00506540;
// LINE 3058:
	__asm        jmp    near ptr 0x00506540;
// LINE 3060:
	__asm        jmp    near ptr 0x00506540;
// LINE 3062:
	__asm        jmp    near ptr 0x00506540;
// LINE 3064:
	__asm        jmp    near ptr 0x00506540;
// LINE 3066:
	__asm        jmp    near ptr 0x00506540;
// LINE 3068:
	__asm        mov    ecx, this;
	__asm        call   0x00506F0E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005064DD;
// LINE 3069:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0050670B;
// LINE 3070:
	__asm        jmp    near ptr 0x00506540;
// LINE 3072:
	__asm        jmp    near ptr 0x00506540;
// LINE 3073:
	__asm        jmp    near ptr 0x00506540;
	__asm        cmp    dword ptr [ebp-8], 0xF;
	__asm        ja     near ptr 0x00506540;
	__asm        mov    eax, [ebp-8];
	__asm        jmp    dword ptr [eax*4+0x506500];
// Switch pointers
// LINE 3075:
	__asm        jmp    near ptr 0x00506545;
}

// FUNCTION: COPTER_D 0x0050654c
void AutoHitDispatch(long hitter_type, struct _DYOBJ_INST* dyhitter, struct _DYOBJ_INST* dyhittee, long mission_id, long xtra_msg) {
// LINE 3086:
	__asm        mov    eax, xtra_msg;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    eax, dyhitter;
	__asm        push   eax;
	__asm        mov    eax, hitter_type;
	__asm        push   eax;
	__asm        mov    eax, dyhittee;
	__asm        movsx  eax, word ptr [eax+0xE];
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   0x00506413;
// LINE 3087:
	__asm        jmp    near ptr 0x0050657A;
}

// FUNCTION: COPTER_D 0x0050657f
int32_t AutoMissionStartFire(long mission_id, struct Point2d* celloc) {
// LINE 3098:
	__asm        mov    eax, celloc;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   0x005065BF;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x0050659A;
// LINE 3099:
}

// FUNCTION: COPTER_D 0x0050659f
int32_t AutoMissionStartJam(long mission_id, struct Point2d* celloc) {
// LINE 3111:
	__asm        mov    eax, celloc;
	__asm        push   eax;
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   0x00506665;
	__asm        add    esp, 8;
	__asm        jmp    near ptr 0x005065BA;
// LINE 3112:
}

// FUNCTION: COPTER_D 0x005065bf
int32_t AutomobileClass::MissionStartFire(long mission_id, struct Point2d* celloc) {
	class AutomobileClass* targcar;
	int32_t currentCarIndex;

// LINE 3128:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x005065D7;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x00506612;
// LINE 3130:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    targcar, eax;
// LINE 3131:
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x0050660D;
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+9], 1;
	__asm        jne    near ptr 0x0050660D;
// LINE 3132:
	__asm        jmp    near ptr 0x00506612;
// LINE 3133:
	__asm        jmp    near ptr 0x005065D4;
// LINE 3135:
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jne    near ptr 0x00506623;
// LINE 3136:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00506660;
// LINE 3138:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    ecx, targcar;
	__asm        call   0x0050670B;
// LINE 3141:
	__asm        mov    eax, targcar;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celloc;
	__asm        mov    [ecx], eax;
// LINE 3142:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, targcar;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celloc;
	__asm        mov    [ecx+4], eax;
// LINE 3144:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00506660;
// LINE 3145:
}

// FUNCTION: COPTER_D 0x00506665
int32_t AutomobileClass::MissionStartJam(long mission_id, struct Point2d* celloc) {
	class AutomobileClass* targcar;
	int32_t currentCarIndex;

// LINE 3161:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x0050667D;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x005066B8;
// LINE 3163:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    targcar, eax;
// LINE 3164:
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x005066B3;
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+9], 3;
	__asm        jne    near ptr 0x005066B3;
// LINE 3165:
	__asm        jmp    near ptr 0x005066B8;
// LINE 3166:
	__asm        jmp    near ptr 0x0050667A;
// LINE 3168:
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jne    near ptr 0x005066C9;
// LINE 3169:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00506706;
// LINE 3171:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        mov    ecx, targcar;
	__asm        call   0x00506859;
// LINE 3174:
	__asm        mov    eax, targcar;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celloc;
	__asm        mov    [ecx], eax;
// LINE 3175:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, targcar;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    ecx, celloc;
	__asm        mov    [ecx+4], eax;
// LINE 3177:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00506706;
// LINE 3178:
}

// FUNCTION: COPTER_D 0x0050670b
void AutomobileClass::StartFire(long mission_id) {
	struct _MISSION_PARMS mp;
	struct Point2d celloc;

// LINE 3195:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 1;
	__asm        je     near ptr 0x00506729;
// LINE 3196:
	__asm        jmp    near ptr 0x00506852;
// LINE 3199:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639510];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+edx*2];
	__asm        shr    ecx, 0xA;
	__asm        test   cl, 0x1F;
	__asm        je     near ptr 0x00506757;
// LINE 3200:
	__asm        jmp    near ptr 0x00506852;
// LINE 3204:
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 3205:
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        push   eax;
	__asm        push   0x3840000;
	__asm        call   0x004D2034;
	__asm        add    esp, 8;
// LINE 3208:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x100;
// LINE 3209:
	__asm        mov    eax, this;
	__asm        movsx  eax, word ptr [eax+0x18];
	__asm        or     eax, 0x1000;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x18], ax;
// LINE 3212:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0x780000;
// LINE 3213:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
// LINE 3214:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 0;
// LINE 3215:
	__asm        mov    eax, mission_id;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 3218:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 3219:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 3220:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 3223:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x0050684D;
// LINE 3225:
	__asm        mov    mp.op, 0x18;
// LINE 3226:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 3227:
	__asm        mov    mp.i2num, 1;
// LINE 3228:
	__asm        mov    mp.flags, 0;
// LINE 3229:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 3233:
	__asm        jmp    near ptr 0x00506852;
}

// FUNCTION: COPTER_D 0x00506859
void AutomobileClass::StartJam(long mission_id) {
	struct _MISSION_PARMS mp;
	struct Point2d celloc;

// LINE 3249:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 3;
	__asm        je     near ptr 0x00506877;
// LINE 3250:
	__asm        jmp    near ptr 0x0050696A;
// LINE 3253:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    eax, [ecx*4+0x639510];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0x7D];
	__asm        xor    ecx, ecx;
	__asm        mov    cx, [eax+edx*2];
	__asm        shr    ecx, 0xA;
	__asm        test   cl, 0x1F;
	__asm        je     near ptr 0x005068A5;
// LINE 3254:
	__asm        jmp    near ptr 0x0050696A;
// LINE 3257:
	__asm        mov    eax, this;
	__asm        or     dword ptr [eax+8], 0x200;
// LINE 3260:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x102], 0x780000;
// LINE 3261:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x10A], 0;
// LINE 3262:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 0;
// LINE 3263:
	__asm        mov    eax, mission_id;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 3266:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.x, eax;
// LINE 3267:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    celloc.y, eax;
// LINE 3268:
	__asm        mov    eax, celloc.y;
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, celloc.x;
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 3271:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x00506965;
// LINE 3273:
	__asm        mov    mp.op, 0x19;
// LINE 3274:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 3275:
	__asm        mov    mp.i2num, 1;
// LINE 3276:
	__asm        mov    mp.flags, 0;
// LINE 3277:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 3281:
	__asm        jmp    near ptr 0x0050696A;
}

// FUNCTION: COPTER_D 0x00506971
void AutomobileClass::RunFireState() {
	struct Point2d currpos;
	struct _MISSION_PARMS mp;
	struct Point3d vec;
	int32_t mat[4][4];

// LINE 3298:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x102], eax;
// LINE 3299:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x106], eax;
// LINE 3302:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x106], 0;
	__asm        jg     near ptr 0x005069E2;
// LINE 3304:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x106], 0x3333;
// LINE 3305:
	__asm        mov    eax, this;
	__asm        add    eax, 0x10A;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        call   0x005233FF;
	__asm        add    esp, 0xC;
// LINE 3309:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x102], 0;
	__asm        jge    near ptr 0x00506B74;
// LINE 3311:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    currpos.x, eax;
// LINE 3312:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    currpos.y, eax;
// LINE 3314:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x004D1FF1;
	__asm        add    esp, 4;
// LINE 3315:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0xE10;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D201C;
	__asm        add    esp, 8;
// LINE 3316:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0xC8;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        lea    eax, [edx+0x28A];
	__asm        shl    eax, 0x10;
	__asm        push   eax;
	__asm        call   0x004D2004;
	__asm        add    esp, 8;
// LINE 3317:
	__asm        lea    eax, mat[0][0];
	__asm        push   eax;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        push   0x59B518;
	__asm        call   0x004D2094;
	__asm        add    esp, 0xC;
// LINE 3328:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        push   0x320000;
	__asm        mov    eax, this;
	__asm        add    eax, 0xC;
	__asm        push   eax;
	__asm        push   1;
	__asm        lea    eax, vec.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        lea    eax, currpos.x;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   0x0051EEE5;
	__asm        add    esp, 0x20;
// LINE 3334:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        push   eax;
	__asm        push   2;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x112];
	__asm        movsx  ecx, word ptr [ecx+6];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x112];
	__asm        movsx  ecx, word ptr [ecx+4];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x112];
	__asm        movsx  ecx, word ptr [ecx+2];
	__asm        shl    ecx, 0x10;
	__asm        sub    eax, ecx;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        call   0x00523F50;
	__asm        add    esp, 0x18;
// LINE 3336:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   4;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 3339:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x00506B67;
// LINE 3341:
	__asm        mov    mp.op, 0x1C;
// LINE 3342:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 3343:
	__asm        mov    mp.i2num, 1;
// LINE 3344:
	__asm        mov    mp.flags, 0;
// LINE 3345:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 3348:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 3349:
	__asm        jmp    near ptr 0x00506BCA;
// LINE 3354:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x00506BC5;
// LINE 3356:
	__asm        mov    mp.op, 0;
// LINE 3357:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 3358:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    mp.maploc.x, eax;
// LINE 3359:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    mp.maploc.y, eax;
// LINE 3360:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 3362:
	__asm        jmp    near ptr 0x00506BCA;
}

// FUNCTION: COPTER_D 0x00506bcf
void AutomobileClass::RunJamState() {
	struct _MISSION_PARMS mp;

// LINE 3375:
	__asm        mov    ecx, this;
	__asm        call   0x005098B0;
// LINE 3378:
	__asm        xor    eax, eax;
	__asm        sub    eax, ds:[0x5B4760];
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x102], eax;
// LINE 3381:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x102], 0;
	__asm        jge    near ptr 0x00506C06;
// LINE 3389:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x10E], 0xFFFFFFFF;
	__asm        je     near ptr 0x00506C57;
// LINE 3391:
	__asm        mov    mp.op, 0;
// LINE 3392:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    mp.id, eax;
// LINE 3393:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    mp.maploc.x, eax;
// LINE 3394:
	__asm        mov    eax, 0x20000000;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        sar    eax, 0x16;
	__asm        mov    mp.maploc.y, eax;
// LINE 3395:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   0x004FBD4A;
	__asm        add    esp, 4;
// LINE 3397:
	__asm        jmp    near ptr 0x00506C5C;
}

// FUNCTION: COPTER_D 0x00506c61
void AutoMissionCancel(long mission_id) {
// LINE 3409:
	__asm        mov    eax, mission_id;
	__asm        push   eax;
	__asm        call   0x00506CCD;
	__asm        add    esp, 4;
// LINE 3410:
	__asm        jmp    near ptr 0x00506C78;
}

// FUNCTION: COPTER_D 0x00506c7d
void AutomobileClass::IveBeenSpotlighted(struct _DYOBJ_INST* dyhitter) {
	struct Point3d spotLoc;

// LINE 3433:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0xA;
	__asm        jl     near ptr 0x00506C9E;
// LINE 3434:
	__asm        jmp    near ptr 0x00506CC6;
// LINE 3442:
	__asm        mov    eax, dyhitter;
	__asm        add    eax, 0x18;
	__asm        lea    ecx, spotLoc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 3448:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x116], 2;
// LINE 3449:
	__asm        jmp    near ptr 0x00506CC6;
}

// FUNCTION: COPTER_D 0x00506ccd
void AutomobileClass::MissionCancel(long mission_id) {
	class AutomobileClass* targcar;
	int32_t currentCarIndex;

// LINE 3464:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x00506CE5;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x00506D44;
// LINE 3467:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    targcar, eax;
// LINE 3470:
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x00506D3F;
	__asm        mov    eax, targcar;
	__asm        mov    ecx, mission_id;
	__asm        cmp    [eax+0x10E], ecx;
	__asm        jne    near ptr 0x00506D3F;
// LINE 3475:
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+9], 2;
	__asm        je     near ptr 0x00506D3F;
// LINE 3477:
	__asm        mov    eax, targcar;
	__asm        and    dword ptr [eax+8], 0xFFFFFDFF;
// LINE 3478:
	__asm        mov    eax, targcar;
	__asm        mov    dword ptr [eax+0x10E], 0xFFFFFFFF;
// LINE 3481:
	__asm        jmp    near ptr 0x00506CE2;
// LINE 3482:
	__asm        jmp    near ptr 0x00506D49;
}

// FUNCTION: COPTER_D 0x00506d4e
void AutoSetAllHeadlights(int32_t lights_on) {
// LINE 3494:
	__asm        mov    eax, lights_on;
	__asm        push   eax;
	__asm        call   0x00506D6A;
	__asm        add    esp, 4;
// LINE 3495:
	__asm        jmp    near ptr 0x00506D65;
}

// FUNCTION: COPTER_D 0x00506d6a
void AutomobileClass::SetAllHeadlights(int32_t lights_on) {
	class AutomobileClass* targcar;
	int32_t currentCarIndex;

// LINE 3511:
	__asm        mov    currentCarIndex, 0;
	__asm        jmp    near ptr 0x00506D82;
	__asm        inc    currentCarIndex;
	__asm        cmp    currentCarIndex, 0x46;
	__asm        jge    near ptr 0x00506DCA;
// LINE 3513:
	__asm        mov    eax, currentCarIndex;
	__asm        mov    eax, [eax*4+0x608F80];
	__asm        mov    targcar, eax;
// LINE 3514:
	__asm        mov    eax, targcar;
	__asm        test   byte ptr [eax+8], 1;
	__asm        je     near ptr 0x00506DC5;
// LINE 3516:
	__asm        cmp    lights_on, 1;
	__asm        jne    near ptr 0x00506DBD;
// LINE 3517:
	__asm        mov    ecx, targcar;
	__asm        call   0x00506DD4;
// LINE 3518:
	__asm        jmp    near ptr 0x00506DC5;
// LINE 3519:
	__asm        mov    ecx, targcar;
	__asm        call   0x00506E6F;
// LINE 3521:
	__asm        jmp    near ptr 0x00506D7F;
// LINE 3524:
	__asm        jmp    near ptr 0x00506DCF;
}

// FUNCTION: COPTER_D 0x00506dd4
void AutomobileClass::TurnOnHeadlight() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 3544:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 3545:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 3546:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00506E14;
	__asm        inc    count;
	__asm        mov    eax, count;
	__asm        cmp    oinfo.Faces, eax;
	__asm        jle    near ptr 0x00506E65;
// LINE 3548:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 3549:
	__asm        cmp    finfo.Plotter, 0xB;
	__asm        jne    near ptr 0x00506E51;
// LINE 3551:
	__asm        and    finfo.Attribute, 0x7FFFFFFF;
// LINE 3552:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 3554:
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D85F8;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 3555:
	__asm        jmp    near ptr 0x00506E11;
// LINE 3556:
	__asm        jmp    near ptr 0x00506E6A;
}

// FUNCTION: COPTER_D 0x00506e6f
void AutomobileClass::TurnOffHeadlight() {
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t face;
	struct VRObjInfo oinfo;

// LINE 3567:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 3568:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 3569:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00506EAF;
	__asm        inc    count;
	__asm        mov    eax, count;
	__asm        cmp    oinfo.Faces, eax;
	__asm        jle    near ptr 0x00506F04;
// LINE 3571:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 3572:
	__asm        cmp    finfo.Plotter, 0xB;
	__asm        jne    near ptr 0x00506EF0;
// LINE 3574:
	__asm        mov    eax, finfo.Attribute;
	__asm        or     eax, 0x80000000;
	__asm        mov    finfo.Attribute, eax;
// LINE 3575:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6941;
	__asm        add    esp, 8;
// LINE 3577:
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D85F8;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 3578:
	__asm        jmp    near ptr 0x00506EAC;
// LINE 3579:
	__asm        jmp    near ptr 0x00506F09;
}

// FUNCTION: COPTER_D 0x00506f0e
int32_t AutomobileClass::IsThisAnEmergencyVehicle() {
// LINE 3586:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00506F37;
// LINE 3591:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00506F6A;
// LINE 3592:
	__asm        jmp    near ptr 0x00506F63;
	__asm        cmp    dword ptr [ebp-8], 0x11C;
	__asm        jl     near ptr 0x00506F63;
	__asm        cmp    dword ptr [ebp-8], 0x11D;
	__asm        jle    near ptr 0x00506F28;
	__asm        cmp    dword ptr [ebp-8], 0x11F;
	__asm        je     near ptr 0x00506F28;
	__asm        jmp    near ptr 0x00506F63;
// LINE 3594:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00506F6A;
// LINE 3595:
}

// FUNCTION: COPTER_D 0x00506f6f
void AutomobileClass::SetHiwayDirection(unsigned short tileType) {
	 // Switch table at 0x00507464
	unsigned short tile;
	enum DirectionTypes validdirs[8];
	int32_t i;

// LINE 3616:
	__asm        mov    validdirs[0], 0;
// LINE 3617:
	__asm        mov    validdirs[1], 0;
// LINE 3618:
	__asm        mov    validdirs[2], 0;
// LINE 3619:
	__asm        mov    validdirs[3], 0;
// LINE 3620:
	__asm        mov    validdirs[4], 0;
// LINE 3621:
	__asm        mov    validdirs[5], 0;
// LINE 3622:
	__asm        mov    validdirs[6], 0;
// LINE 3623:
	__asm        mov    validdirs[7], 0;
// LINE 3624:
	__asm        mov    i, 0;
// LINE 3626:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 3627:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 0;
// LINE 3631:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050702F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        dec    ecx;
	__asm        js     near ptr 0x0050702F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0050702F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        dec    ecx;
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x0050703A;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x00507094;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx-1];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx-1];
	__asm        or     eax, edx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x00507094;
// LINE 3632:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005070D0;
// LINE 3634:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x005070D0;
// LINE 3636:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x24], 1;
	__asm        inc    i;
// LINE 3650:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00507124;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        inc    ecx;
	__asm        js     near ptr 0x00507124;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x00507124;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        inc    ecx;
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x0050712F;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x00507189;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx+1];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx+1];
	__asm        or     eax, edx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x00507189;
// LINE 3651:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005071C5;
// LINE 3653:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   cl, 1;
	__asm        jne    near ptr 0x005071C5;
// LINE 3655:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x24], 4;
	__asm        inc    i;
// LINE 3660:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        inc    ecx;
	__asm        js     near ptr 0x00507219;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00507219;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        inc    ecx;
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x00507219;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x00507224;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x0050727C;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F74];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x639854];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x0050727C;
// LINE 3661:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005072B8;
// LINE 3663:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x005072B8;
// LINE 3665:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x24], 2;
	__asm        inc    i;
// LINE 3669:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        dec    ecx;
	__asm        js     near ptr 0x0050730C;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050730C;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        dec    ecx;
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0050730C;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x00507317;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x0050736F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F6C];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x63984C];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x0050736F;
// LINE 3670:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(tileType);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005073AB;
// LINE 3672:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   cl, 1;
	__asm        jne    near ptr 0x005073AB;
// LINE 3674:
	__asm        mov    eax, i;
	__asm        mov    dword ptr [ebp+eax*4-0x24], 8;
	__asm        inc    i;
// LINE 3681:
	__asm        cmp    i, 0;
	__asm        jne    near ptr 0x005073BA;
// LINE 3682:
	__asm        jmp    near ptr 0x00507481;
// LINE 3684:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   i;
	__asm        mov    eax, [ebp+edx*4-0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCE], eax;
// LINE 3686:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCE];
	__asm        mov    [ebp-0x30], eax;
	__asm        jmp    near ptr 0x00507421;
// LINE 3690:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xD5];
// LINE 3691:
	__asm        jmp    near ptr 0x0050747C;
// LINE 3694:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xD5];
// LINE 3695:
	__asm        jmp    near ptr 0x0050747C;
// LINE 3698:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xD4];
// LINE 3699:
	__asm        jmp    near ptr 0x0050747C;
// LINE 3702:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xD4];
// LINE 3703:
	__asm        jmp    near ptr 0x0050747C;
// LINE 3704:
	__asm        jmp    near ptr 0x0050747C;
	__asm        dec    dword ptr [ebp-0x30];
	__asm        cmp    dword ptr [ebp-0x30], 0x17;
	__asm        ja     near ptr 0x0050747C;
	__asm        mov    eax, [ebp-0x30];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x507464];
	__asm        jmp    dword ptr [ecx*4+0x507440];
// Switch pointers
// Switch table
// LINE 3706:
	__asm        jmp    near ptr 0x00507481;
}

// FUNCTION: COPTER_D 0x00507488
int32_t AutomobileClass::DoHiwayTilesConnect(unsigned short fromTile, unsigned short toTile, enum DirectionTypes direction) {
// LINE 3731:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x20], eax;
	__asm        jmp    near ptr 0x005074C4;
// LINE 3734:
	__asm        mov    fromTile, 0x49;
// LINE 3735:
	__asm        jmp    near ptr 0x005074DD;
// LINE 3737:
	__asm        mov    fromTile, 0x4A;
// LINE 3738:
	__asm        jmp    near ptr 0x005074DD;
// LINE 3740:
	__asm        jmp    near ptr 0x005074DD;
// LINE 3741:
	__asm        jmp    near ptr 0x005074DD;
	__asm        cmp    dword ptr [ebp-0x20], 0x4B;
	__asm        je     near ptr 0x005074A4;
	__asm        cmp    dword ptr [ebp-0x20], 0x4C;
	__asm        je     near ptr 0x005074AF;
	__asm        jmp    near ptr 0x005074DD;
// LINE 3743:
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x0050750D;
// LINE 3746:
	__asm        mov    toTile, 0x49;
// LINE 3747:
	__asm        jmp    near ptr 0x00507526;
// LINE 3749:
	__asm        mov    toTile, 0x4A;
// LINE 3750:
	__asm        jmp    near ptr 0x00507526;
// LINE 3752:
	__asm        jmp    near ptr 0x00507526;
// LINE 3753:
	__asm        jmp    near ptr 0x00507526;
	__asm        cmp    dword ptr [ebp-0x24], 0x4B;
	__asm        je     near ptr 0x005074ED;
	__asm        cmp    dword ptr [ebp-0x24], 0x4C;
	__asm        je     near ptr 0x005074F8;
	__asm        jmp    near ptr 0x00507526;
// LINE 3755:
	__asm        mov    eax, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x0050754A;
	__asm        jmp    near ptr 0x005075A0;
	__asm        jmp    near ptr 0x00507774;
	__asm        jmp    near ptr 0x005075A0;
	__asm        jmp    near ptr 0x00507596;
	__asm        cmp    dword ptr [ebp-0x28], 0x6B;
	__asm        jg     near ptr 0x00507577;
	__asm        cmp    dword ptr [ebp-0x28], 0x61;
	__asm        jge    near ptr 0x005075A0;
	__asm        cmp    dword ptr [ebp-0x28], 0x49;
	__asm        jl     near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x28], 0x50;
	__asm        jle    near ptr 0x005075A0;
	__asm        jmp    near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x28], 0x806A;
	__asm        jl     near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x28], 0x806B;
	__asm        jle    near ptr 0x005075A0;
	__asm        jmp    near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00507774;
	__asm        mov    eax, reinterpret_cast<uint32_t>(toTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x005075C4;
	__asm        jmp    near ptr 0x0050761A;
	__asm        jmp    near ptr 0x00507774;
	__asm        jmp    near ptr 0x0050761A;
	__asm        jmp    near ptr 0x00507610;
	__asm        cmp    dword ptr [ebp-0x2C], 0x6B;
	__asm        jg     near ptr 0x005075F1;
	__asm        cmp    dword ptr [ebp-0x2C], 0x61;
	__asm        jge    near ptr 0x0050761A;
	__asm        cmp    dword ptr [ebp-0x2C], 0x49;
	__asm        jl     near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x2C], 0x50;
	__asm        jle    near ptr 0x0050761A;
	__asm        jmp    near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x2C], 0x806A;
	__asm        jl     near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x2C], 0x806B;
	__asm        jle    near ptr 0x0050761A;
	__asm        jmp    near ptr 0x00507774;
	__asm        cmp    dword ptr [ebp-0x10], 0;
	__asm        je     near ptr 0x00507774;
// LINE 3757:
// Block start:
	enum DirectionTypes fromConnections;
	enum DirectionTypes toConnections;
	__asm        mov    dword ptr [ebp-0x14], 0x5B57E8;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(fromTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00507643;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    eax, [eax+4];
	__asm        mov    fromConnections, eax;
	__asm        jmp    near ptr 0x00507677;
	__asm        mov    eax, [ebp-0x14];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00507662;
	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x14];
	__asm        jae    near ptr 0x0050766E;
	__asm        mov    fromConnections, 0;
	__asm        jmp    near ptr 0x00507677;
	__asm        add    dword ptr [ebp-0x14], 8;
	__asm        jmp    near ptr 0x00507621;
// LINE 3758:
	__asm        mov    dword ptr [ebp-0x18], 0x5B57E8;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(toTile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x005076A0;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    eax, [eax+4];
	__asm        mov    toConnections, eax;
	__asm        jmp    near ptr 0x005076D4;
	__asm        mov    eax, [ebp-0x18];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x005076BF;
	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x18];
	__asm        jae    near ptr 0x005076CB;
	__asm        mov    toConnections, 0;
	__asm        jmp    near ptr 0x005076D4;
	__asm        add    dword ptr [ebp-0x18], 8;
	__asm        jmp    near ptr 0x0050767E;
// LINE 3765:
	__asm        test   reinterpret_cast<uint8_t>(direction), 1;
	__asm        je     near ptr 0x005076FC;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 1;
	__asm        je     near ptr 0x005076FC;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 4;
	__asm        je     near ptr 0x005076FC;
// LINE 3767:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050777B;
// LINE 3771:
	__asm        test   reinterpret_cast<uint8_t>(direction), 4;
	__asm        je     near ptr 0x00507724;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 4;
	__asm        je     near ptr 0x00507724;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 1;
	__asm        je     near ptr 0x00507724;
// LINE 3773:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050777B;
// LINE 3777:
	__asm        test   reinterpret_cast<uint8_t>(direction), 8;
	__asm        je     near ptr 0x0050774C;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 8;
	__asm        je     near ptr 0x0050774C;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 2;
	__asm        je     near ptr 0x0050774C;
// LINE 3779:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050777B;
// LINE 3783:
	__asm        test   reinterpret_cast<uint8_t>(direction), 2;
	__asm        je     near ptr 0x00507774;
	__asm        test   reinterpret_cast<uint8_t>(fromConnections), 2;
	__asm        je     near ptr 0x00507774;
	__asm        test   reinterpret_cast<uint8_t>(toConnections), 8;
	__asm        je     near ptr 0x00507774;
// LINE 3785:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x0050777B;
// LINE 3790:
// Block end:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0050777B;
// LINE 3791:
}

// FUNCTION: COPTER_D 0x00507782
void AutomobileClass::AdjustCurrentHiwayPosition() {
	struct _CELL_INFO* cellPointer;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        mov    [ebp-0xC], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    [ebp-0x10], ecx;
// LINE 3813:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x10];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x005077EE;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005077F3;
	__asm        jmp    near ptr 0x005077F3;
	__asm        jmp    near ptr 0x005077F8;
	__asm        mov    eax, [ebp-8];
	__asm        mov    cellPointer, eax;
// LINE 3815:
	__asm        cmp    cellPointer, 0;
	__asm        jne    near ptr 0x00507824;
	__asm        push   0xEE7;
	__asm        push   0x5B567C;
	__asm        push   0x5B56A0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00507829;
	__asm        jmp    near ptr 0x00507829;
// LINE 3819:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x24], eax;
// LINE 3820:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x28], eax;
// LINE 3821:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x2C], eax;
// LINE 3825:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x00507882;
// LINE 3827:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x24], 0xD0000;
// LINE 3828:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x2C], 0x1E0000;
// LINE 3830:
	__asm        jmp    near ptr 0x005078F8;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x005078AB;
// LINE 3832:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0xD0000;
// LINE 3833:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x2C], 0x1E0000;
// LINE 3835:
	__asm        jmp    near ptr 0x005078F8;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x005078D4;
// LINE 3837:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x24], 0x1E0000;
// LINE 3838:
	__asm        mov    eax, this;
	__asm        sub    dword ptr [eax+0x2C], 0xD0000;
// LINE 3840:
	__asm        jmp    near ptr 0x005078F8;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x005078F8;
// LINE 3842:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x24], 0x1E0000;
// LINE 3843:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x2C], 0xD0000;
// LINE 3847:
	__asm        mov    eax, this;
	__asm        add    dword ptr [eax+0x28], 0x1F0000;
// LINE 3848:
	__asm        jmp    near ptr 0x00507907;
}

// FUNCTION: COPTER_D 0x0050790c
void AutomobileClass::AdjustNextHiwayPosition() {
	struct _CELL_INFO* cellPointer;
	unsigned short tile;
	unsigned short ntile;
	struct Point3d nextFineLocation;
	int32_t xdiff;
	int32_t ydiff;
	enum DirectionTypes connectionType;

	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        mov    [ebp-0x2C], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        mov    [ebp-0x30], ecx;
// LINE 3869:
	__asm        mov    eax, [ebp-0x2C];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x30];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x28], eax;
	__asm        cmp    dword ptr [ebp-0x28], 0;
	__asm        jne    near ptr 0x00507978;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0050797D;
	__asm        jmp    near ptr 0x0050797D;
	__asm        jmp    near ptr 0x00507982;
	__asm        mov    eax, [ebp-0x28];
	__asm        mov    cellPointer, eax;
// LINE 3872:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005079DC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005079DC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x005079DC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x005079E7;
	__asm        mov    tile, 0;
	__asm        jmp    near ptr 0x00507A3F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD3];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD2];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD3];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    tile, ax;
	__asm        jmp    near ptr 0x00507A3F;
// LINE 3873:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00507A93;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00507A93;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x00507A93;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x00507A9E;
	__asm        mov    ntile, 0;
	__asm        jmp    near ptr 0x00507AF6;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD5];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD4];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD5];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    ntile, ax;
	__asm        jmp    near ptr 0x00507AF6;
// LINE 3877:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x50], eax;
	__asm        jmp    near ptr 0x00507B1A;
	__asm        jmp    near ptr 0x00507B5C;
	__asm        jmp    near ptr 0x00507C33;
	__asm        jmp    near ptr 0x00507B5C;
	__asm        jmp    near ptr 0x00507B52;
	__asm        cmp    dword ptr [ebp-0x50], 0x806B;
	__asm        jg     near ptr 0x00507C33;
	__asm        cmp    dword ptr [ebp-0x50], 0x806A;
	__asm        jge    near ptr 0x00507B5C;
	__asm        cmp    dword ptr [ebp-0x50], 0x61;
	__asm        jl     near ptr 0x00507C33;
	__asm        cmp    dword ptr [ebp-0x50], 0x6B;
	__asm        jle    near ptr 0x00507B5C;
	__asm        jmp    near ptr 0x00507C33;
	__asm        jmp    near ptr 0x00507C33;
	__asm        cmp    dword ptr [ebp-0x34], 0;
	__asm        je     near ptr 0x00507C33;
// LINE 3879:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x00507BB8;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x00507BB8;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jae    near ptr 0x00507BB8;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jb     near ptr 0x00507BC3;
	__asm        mov    ntile, 0;
	__asm        jmp    near ptr 0x00507C33;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        and    ecx, 0xFE;
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD5];
	__asm        and    edx, 0xFE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD4];
	__asm        and    edx, 0xFE;
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD5];
	__asm        and    ebx, 0xFE;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    ntile, ax;
	__asm        jmp    near ptr 0x00507C33;
// LINE 3882:
	__asm        cmp    cellPointer, 0;
	__asm        jne    near ptr 0x00507C59;
	__asm        push   0xF2A;
	__asm        push   0x5B56AC;
	__asm        push   0x5B56D0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00507C5E;
	__asm        jmp    near ptr 0x00507C5E;
// LINE 3885:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+2];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.x, eax;
// LINE 3886:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+4];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.y, eax;
// LINE 3887:
	__asm        mov    eax, cellPointer;
	__asm        movsx  eax, word ptr [eax+6];
	__asm        shl    eax, 0x10;
	__asm        mov    nextFineLocation.z, eax;
// LINE 3894:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD4];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0xD2];
	__asm        sub    ecx, edx;
	__asm        mov    xdiff, ecx;
// LINE 3895:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD5];
	__asm        mov    eax, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+0xD3];
	__asm        sub    ecx, edx;
	__asm        mov    ydiff, ecx;
// LINE 3897:
	__asm        cmp    xdiff, 0;
	__asm        jge    near ptr 0x00507D78;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jge    near ptr 0x00507D78;
// LINE 3899:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x00507D03;
	__asm        jmp    near ptr 0x00507D45;
	__asm        jmp    near ptr 0x00507D58;
	__asm        jmp    near ptr 0x00507D45;
	__asm        jmp    near ptr 0x00507D3B;
	__asm        cmp    dword ptr [ebp-0x54], 0x806B;
	__asm        jg     near ptr 0x00507D58;
	__asm        cmp    dword ptr [ebp-0x54], 0x806A;
	__asm        jge    near ptr 0x00507D45;
	__asm        cmp    dword ptr [ebp-0x54], 0x61;
	__asm        jl     near ptr 0x00507D58;
	__asm        cmp    dword ptr [ebp-0x54], 0x6B;
	__asm        jle    near ptr 0x00507D45;
	__asm        jmp    near ptr 0x00507D58;
	__asm        jmp    near ptr 0x00507D58;
	__asm        cmp    dword ptr [ebp-0x38], 0;
	__asm        je     near ptr 0x00507D58;
// LINE 3901:
	__asm        add    nextFineLocation.x, 0x3E0000;
// LINE 3902:
	__asm        add    nextFineLocation.z, 0x2D0000;
// LINE 3904:
	__asm        jmp    near ptr 0x00507D66;
// LINE 3906:
	__asm        add    nextFineLocation.x, 0x1E0000;
// LINE 3907:
	__asm        add    nextFineLocation.z, 0xD0000;
// LINE 3909:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 8;
// LINE 3912:
	__asm        jmp    near ptr 0x00507FAF;
	__asm        cmp    xdiff, 0;
	__asm        jle    near ptr 0x00507E35;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jge    near ptr 0x00507E35;
// LINE 3915:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x58], eax;
	__asm        jmp    near ptr 0x00507DC0;
	__asm        jmp    near ptr 0x00507E02;
	__asm        jmp    near ptr 0x00507E15;
	__asm        jmp    near ptr 0x00507E02;
	__asm        jmp    near ptr 0x00507DF8;
	__asm        cmp    dword ptr [ebp-0x58], 0x806B;
	__asm        jg     near ptr 0x00507E15;
	__asm        cmp    dword ptr [ebp-0x58], 0x806A;
	__asm        jge    near ptr 0x00507E02;
	__asm        cmp    dword ptr [ebp-0x58], 0x61;
	__asm        jl     near ptr 0x00507E15;
	__asm        cmp    dword ptr [ebp-0x58], 0x6B;
	__asm        jle    near ptr 0x00507E02;
	__asm        jmp    near ptr 0x00507E15;
	__asm        jmp    near ptr 0x00507E15;
	__asm        cmp    dword ptr [ebp-0x3C], 0;
	__asm        je     near ptr 0x00507E15;
// LINE 3917:
	__asm        sub    nextFineLocation.x, 0x3E0000;
// LINE 3918:
	__asm        sub    nextFineLocation.z, 0x2D0000;
// LINE 3920:
	__asm        jmp    near ptr 0x00507E23;
// LINE 3922:
	__asm        sub    nextFineLocation.x, 0x1E0000;
// LINE 3923:
	__asm        sub    nextFineLocation.z, 0xD0000;
// LINE 3925:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 2;
// LINE 3927:
	__asm        jmp    near ptr 0x00507FAF;
	__asm        cmp    ydiff, 0;
	__asm        jle    near ptr 0x00507EF2;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    near ptr 0x00507EF2;
// LINE 3929:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x5C], eax;
	__asm        jmp    near ptr 0x00507E7D;
	__asm        jmp    near ptr 0x00507EBF;
	__asm        jmp    near ptr 0x00507ED2;
	__asm        jmp    near ptr 0x00507EBF;
	__asm        jmp    near ptr 0x00507EB5;
	__asm        cmp    dword ptr [ebp-0x5C], 0x806B;
	__asm        jg     near ptr 0x00507ED2;
	__asm        cmp    dword ptr [ebp-0x5C], 0x806A;
	__asm        jge    near ptr 0x00507EBF;
	__asm        cmp    dword ptr [ebp-0x5C], 0x61;
	__asm        jl     near ptr 0x00507ED2;
	__asm        cmp    dword ptr [ebp-0x5C], 0x6B;
	__asm        jle    near ptr 0x00507EBF;
	__asm        jmp    near ptr 0x00507ED2;
	__asm        jmp    near ptr 0x00507ED2;
	__asm        cmp    dword ptr [ebp-0x40], 0;
	__asm        je     near ptr 0x00507ED2;
// LINE 3931:
	__asm        add    nextFineLocation.z, 0x3E0000;
// LINE 3932:
	__asm        sub    nextFineLocation.x, 0x2D0000;
// LINE 3934:
	__asm        jmp    near ptr 0x00507EE0;
// LINE 3936:
	__asm        add    nextFineLocation.z, 0x1E0000;
// LINE 3937:
	__asm        sub    nextFineLocation.x, 0xD0000;
// LINE 3939:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 4;
// LINE 3941:
	__asm        jmp    near ptr 0x00507FAF;
	__asm        cmp    ydiff, 0;
	__asm        jge    near ptr 0x00507FAF;
	__asm        mov    eax, ydiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        mov    ecx, eax;
	__asm        mov    eax, xdiff;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        cmp    ecx, eax;
	__asm        jle    near ptr 0x00507FAF;
// LINE 3944:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x60], eax;
	__asm        jmp    near ptr 0x00507F3A;
	__asm        jmp    near ptr 0x00507F7C;
	__asm        jmp    near ptr 0x00507F8F;
	__asm        jmp    near ptr 0x00507F7C;
	__asm        jmp    near ptr 0x00507F72;
	__asm        cmp    dword ptr [ebp-0x60], 0x806B;
	__asm        jg     near ptr 0x00507F8F;
	__asm        cmp    dword ptr [ebp-0x60], 0x806A;
	__asm        jge    near ptr 0x00507F7C;
	__asm        cmp    dword ptr [ebp-0x60], 0x61;
	__asm        jl     near ptr 0x00507F8F;
	__asm        cmp    dword ptr [ebp-0x60], 0x6B;
	__asm        jle    near ptr 0x00507F7C;
	__asm        jmp    near ptr 0x00507F8F;
	__asm        jmp    near ptr 0x00507F8F;
	__asm        cmp    dword ptr [ebp-0x44], 0;
	__asm        je     near ptr 0x00507F8F;
// LINE 3946:
	__asm        sub    nextFineLocation.z, 0x3E0000;
// LINE 3947:
	__asm        add    nextFineLocation.x, 0x2D0000;
// LINE 3949:
	__asm        jmp    near ptr 0x00507F9D;
// LINE 3951:
	__asm        sub    nextFineLocation.z, 0x1E0000;
// LINE 3952:
	__asm        add    nextFineLocation.x, 0xD0000;
// LINE 3954:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xCE], 1;
// LINE 3956:
	__asm        jmp    near ptr 0x00507FAF;
// LINE 3963:
	__asm        mov    dword ptr [ebp-0x48], 0x5B57E8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    ecx, reinterpret_cast<uint32_t>(ntile);
	__asm        and    ecx, 0xFFFF;
	__asm        cmp    [eax], ecx;
	__asm        jne    near ptr 0x00507FD8;
	__asm        mov    eax, [ebp-0x48];
	__asm        mov    eax, [eax+4];
	__asm        mov    connectionType, eax;
	__asm        jmp    near ptr 0x0050800C;
	__asm        mov    eax, [ebp-0x48];
	__asm        cmp    dword ptr [eax], 0;
	__asm        je     near ptr 0x00507FF7;
	__asm        mov    eax, 0x5B57E8;
	__asm        add    eax, 0xF40;
	__asm        cmp    eax, [ebp-0x48];
	__asm        jae    near ptr 0x00508003;
	__asm        mov    connectionType, 0;
	__asm        jmp    near ptr 0x0050800C;
	__asm        add    dword ptr [ebp-0x48], 8;
	__asm        jmp    near ptr 0x00507FB6;
// LINE 3966:
	__asm        cmp    connectionType, 0;
	__asm        je     near ptr 0x00508107;
// LINE 3968:
	__asm        mov    eax, reinterpret_cast<uint32_t>(ntile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x005080AC;
// LINE 3971:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x0050803D;
// LINE 3972:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3973:
	__asm        jmp    near ptr 0x00508107;
// LINE 3975:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x00508059;
// LINE 3976:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3977:
	__asm        jmp    near ptr 0x00508107;
// LINE 3979:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x00508075;
// LINE 3980:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3981:
	__asm        jmp    near ptr 0x00508107;
// LINE 3983:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x00508091;
// LINE 3984:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3985:
	__asm        jmp    near ptr 0x00508107;
// LINE 3990:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 3991:
	__asm        jmp    near ptr 0x00508107;
// LINE 3993:
	__asm        jmp    near ptr 0x00508107;
// LINE 3994:
	__asm        jmp    near ptr 0x00508107;
	__asm        cmp    dword ptr [ebp-0x64], 0x6B;
	__asm        jg     near ptr 0x005080E8;
	__asm        cmp    dword ptr [ebp-0x64], 0x6A;
	__asm        jge    near ptr 0x00508096;
	__asm        sub    dword ptr [ebp-0x64], 0x61;
	__asm        cmp    dword ptr [ebp-0x64], 3;
	__asm        ja     near ptr 0x00508107;
	__asm        mov    eax, [ebp-0x64];
	__asm        jmp    dword ptr [eax*4+0x5080D8];
// Switch pointers
// LINE 3998:
	__asm        add    nextFineLocation.y, 0x1F0000;
// LINE 4002:
	__asm        mov    eax, nextFineLocation.x;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x24];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA2], eax;
// LINE 4003:
	__asm        mov    eax, nextFineLocation.y;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x28];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xA6], eax;
// LINE 4004:
	__asm        mov    eax, nextFineLocation.z;
	__asm        mov    ecx, this;
	__asm        sub    eax, [ecx+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAA], eax;
// LINE 4005:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA2;
	__asm        push   eax;
	__asm        call   0x004CA1E3;
	__asm        add    esp, 4;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xEA], eax;
// LINE 4010:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA2;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        add    eax, 0x30;
	__asm        push   eax;
	__asm        call   0x004CAEFB;
	__asm        add    esp, 8;
// LINE 4011:
	__asm        jmp    near ptr 0x0050817B;
}

// FUNCTION: COPTER_D 0x00508180
enum AutomobileClass::IntersectionTypes AutomobileClass::PickHiwayDir(struct _GridCoordinates& point) {
	unsigned short southTile;
	unsigned short westTile;
	unsigned short currentTile;
	unsigned short eastTile;
	long intersection;
	unsigned short northTile;

// LINE 4045:
	__asm        mov    eax, point;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD6], al;
// LINE 4046:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD7], cl;
// LINE 4047:
	__asm        mov    eax, point;
	__asm        mov    al, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], al;
// LINE 4048:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        inc    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xD9], cl;
// LINE 4049:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        inc    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xDA], cl;
// LINE 4050:
	__asm        mov    eax, point;
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDB], al;
// LINE 4051:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        dec    ecx;
	__asm        mov    eax, this;
	__asm        mov    [eax+0xDC], cl;
// LINE 4052:
	__asm        mov    eax, point;
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDD], al;
// LINE 4055:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00508252;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00508252;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x00508252;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x0050825D;
	__asm        mov    currentTile, 0;
	__asm        jmp    near ptr 0x005082A7;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, point;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+1];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    currentTile, ax;
	__asm        jmp    near ptr 0x005082A7;
// LINE 4059:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x005082CB;
	__asm        jmp    near ptr 0x0050830D;
	__asm        jmp    near ptr 0x005084E7;
	__asm        jmp    near ptr 0x0050830D;
	__asm        jmp    near ptr 0x00508303;
	__asm        cmp    dword ptr [ebp-0x24], 0x806B;
	__asm        jg     near ptr 0x005084E7;
	__asm        cmp    dword ptr [ebp-0x24], 0x806A;
	__asm        jge    near ptr 0x0050830D;
	__asm        cmp    dword ptr [ebp-0x24], 0x61;
	__asm        jl     near ptr 0x005084E7;
	__asm        cmp    dword ptr [ebp-0x24], 0x6B;
	__asm        jle    near ptr 0x0050830D;
	__asm        jmp    near ptr 0x005084E7;
	__asm        jmp    near ptr 0x005084E7;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x005084E7;
// LINE 4064:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x0050835B;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x0050835B;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jae    near ptr 0x0050835B;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jb     near ptr 0x00508366;
	__asm        mov    currentTile, 0;
	__asm        jmp    near ptr 0x005083C8;
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        and    ecx, 0xFE;
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        and    edx, 0xFE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, point;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx];
	__asm        and    edx, 0xFE;
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, point;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+1];
	__asm        and    ebx, 0xFE;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    currentTile, ax;
	__asm        jmp    near ptr 0x005083C8;
// LINE 4067:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x005083E6;
// LINE 4068:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xDC];
// LINE 4069:
	__asm        jmp    near ptr 0x005083EF;
// LINE 4070:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xDA];
// LINE 4071:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x0050840E;
// LINE 4072:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xD7];
// LINE 4073:
	__asm        jmp    near ptr 0x00508417;
// LINE 4074:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xD9];
// LINE 4077:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x28], eax;
	__asm        jmp    near ptr 0x005084AF;
// LINE 4080:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   cl, 1;
	__asm        jne    near ptr 0x00508440;
// LINE 4081:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xDB];
// LINE 4082:
	__asm        jmp    near ptr 0x005084E7;
// LINE 4084:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   cl, 1;
	__asm        jne    near ptr 0x0050845E;
// LINE 4085:
	__asm        mov    eax, this;
	__asm        inc    byte ptr [eax+0xD6];
// LINE 4086:
	__asm        jmp    near ptr 0x005084E7;
// LINE 4088:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x0050847C;
// LINE 4089:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xD8];
// LINE 4090:
	__asm        jmp    near ptr 0x005084E7;
// LINE 4092:
	__asm        mov    eax, point;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   cl, 1;
	__asm        je     near ptr 0x0050849A;
// LINE 4093:
	__asm        mov    eax, this;
	__asm        dec    byte ptr [eax+0xDD];
// LINE 4094:
	__asm        jmp    near ptr 0x005084E7;
// LINE 4097:
	__asm        mov    westTile, 0;
// LINE 4098:
	__asm        jmp    near ptr 0x005084E7;
// LINE 4099:
	__asm        jmp    near ptr 0x005084E7;
	__asm        sub    dword ptr [ebp-0x28], 0x61;
	__asm        cmp    dword ptr [ebp-0x28], 7;
	__asm        ja     near ptr 0x005084E7;
	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    dword ptr [eax*4+0x5084C7];
// Switch pointers
// LINE 4103:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD6];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050853B;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD7];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0050853B;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD6];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x0050853B;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD7];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x00508546;
	__asm        mov    northTile, 0;
	__asm        jmp    near ptr 0x0050859E;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD6];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD7];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD6];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD7];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    northTile, ax;
	__asm        jmp    near ptr 0x0050859E;
// LINE 4104:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD8];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005085F2;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD9];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005085F2;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD8];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x005085F2;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD9];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x005085FD;
	__asm        mov    southTile, 0;
	__asm        jmp    near ptr 0x00508655;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD8];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD9];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xD8];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xD9];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    southTile, ax;
	__asm        jmp    near ptr 0x00508655;
// LINE 4105:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDA];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005086A9;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDB];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x005086A9;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDA];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x005086A9;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDB];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x005086B4;
	__asm        mov    eastTile, 0;
	__asm        jmp    near ptr 0x0050870C;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDA];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDB];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDA];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xDB];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    eastTile, ax;
	__asm        jmp    near ptr 0x0050870C;
// LINE 4106:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00508760;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDD];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00508760;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        cmp    ecx, 0x80;
	__asm        jge    near ptr 0x00508760;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDD];
	__asm        cmp    ecx, 0x80;
	__asm        jl     near ptr 0x0050876B;
	__asm        mov    westTile, 0;
	__asm        jmp    near ptr 0x005087C3;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDD];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDC];
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xDD];
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    westTile, ax;
	__asm        jmp    near ptr 0x005087C3;
// LINE 4112:
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x2C], eax;
	__asm        jmp    near ptr 0x005088B4;
// LINE 4116:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x0050882F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDD];
	__asm        test   ecx, 0xFE;
	__asm        jl     near ptr 0x0050882F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jae    near ptr 0x0050882F;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDD];
	__asm        and    cl, 0xFE;
	__asm        cmp    cl, 0x80;
	__asm        jb     near ptr 0x0050883A;
	__asm        mov    westTile, 0;
	__asm        jmp    near ptr 0x005088AA;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xDC];
	__asm        and    ecx, 0xFE;
	__asm        mov    eax, [ecx*4+0x638F70];
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDD];
	__asm        and    edx, 0xFE;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+edx];
	__asm        and    ecx, 2;
	__asm        movsx  eax, cx;
	__asm        shl    eax, 0xE;
	__asm        mov    ecx, this;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+0xDC];
	__asm        and    edx, 0xFE;
	__asm        mov    ecx, [edx*4+0x639850];
	__asm        mov    edx, this;
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [edx+0xDD];
	__asm        and    ebx, 0xFE;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+ebx];
	__asm        or     eax, edx;
	__asm        mov    westTile, ax;
	__asm        jmp    near ptr 0x005088AA;
// LINE 4117:
	__asm        jmp    near ptr 0x005088CD;
// LINE 4118:
	__asm        jmp    near ptr 0x005088CD;
	__asm        cmp    dword ptr [ebp-0x2C], 0x6A;
	__asm        jl     near ptr 0x005088CD;
	__asm        cmp    dword ptr [ebp-0x2C], 0x6B;
	__asm        jle    near ptr 0x005087D3;
	__asm        jmp    near ptr 0x005088CD;
// LINE 4123:
	__asm        mov    intersection, 0;
// LINE 4127:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x00508943;
// LINE 4130:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508902;
// LINE 4132:
	__asm        or     intersection, 1;
// LINE 4134:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508920;
// LINE 4136:
	__asm        or     intersection, 2;
// LINE 4138:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0050893E;
// LINE 4140:
	__asm        or     intersection, 4;
// LINE 4143:
	__asm        jmp    near ptr 0x00508A97;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x005089B2;
// LINE 4146:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508971;
// LINE 4148:
	__asm        or     intersection, 1;
// LINE 4150:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0050898F;
// LINE 4152:
	__asm        or     intersection, 2;
// LINE 4154:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005089AD;
// LINE 4156:
	__asm        or     intersection, 4;
// LINE 4159:
	__asm        jmp    near ptr 0x00508A97;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x00508A21;
// LINE 4162:
	__asm        push   2;
	__asm        mov    eax, reinterpret_cast<uint32_t>(eastTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005089E0;
// LINE 4164:
	__asm        or     intersection, 1;
// LINE 4166:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x005089FE;
// LINE 4168:
	__asm        or     intersection, 2;
// LINE 4170:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508A1C;
// LINE 4172:
	__asm        or     intersection, 4;
// LINE 4175:
	__asm        jmp    near ptr 0x00508A97;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x00508A90;
// LINE 4178:
	__asm        push   8;
	__asm        mov    eax, reinterpret_cast<uint32_t>(westTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508A4F;
// LINE 4180:
	__asm        or     intersection, 1;
// LINE 4182:
	__asm        push   4;
	__asm        mov    eax, reinterpret_cast<uint32_t>(southTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508A6D;
// LINE 4184:
	__asm        or     intersection, 2;
// LINE 4186:
	__asm        push   1;
	__asm        mov    eax, reinterpret_cast<uint32_t>(northTile);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00507488;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x00508A8B;
// LINE 4188:
	__asm        or     intersection, 4;
// LINE 4191:
	__asm        jmp    near ptr 0x00508A97;
// LINE 4193:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00508ACD;
// LINE 4200:
	__asm        mov    eax, reinterpret_cast<uint32_t>(currentTile);
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x69;
	__asm        jne    near ptr 0x00508AC5;
// LINE 4202:
	__asm        test   reinterpret_cast<uint8_t>(intersection), 1;
	__asm        je     near ptr 0x00508ABE;
// LINE 4203:
	__asm        mov    intersection, 1;
// LINE 4204:
	__asm        jmp    near ptr 0x00508AC5;
// LINE 4205:
	__asm        mov    intersection, 0;
// LINE 4216:
	__asm        mov    eax, intersection;
	__asm        jmp    near ptr 0x00508ACD;
// LINE 4217:
}

// FUNCTION: COPTER_D 0x00508ad4
void AutomobileClass::MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes intersectionType) {
	 // Switch table at 0x00508ca6

// LINE 4237:
	__asm        mov    eax, intersectionType;
	__asm        mov    [ebp-8], eax;
	__asm        jmp    near ptr 0x00508C62;
// LINE 4241:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 4242:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4246:
	__asm        mov    ecx, this;
	__asm        call   0x00508CC3;
// LINE 4248:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4252:
	__asm        mov    ecx, this;
	__asm        call   0x00508D9E;
// LINE 4254:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4258:
	__asm        mov    ecx, this;
	__asm        call   0x00508E79;
// LINE 4260:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4264:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x00508B3C;
// LINE 4266:
	__asm        mov    ecx, this;
	__asm        call   0x00508D9E;
// LINE 4268:
	__asm        jmp    near ptr 0x00508B44;
// LINE 4270:
	__asm        mov    ecx, this;
	__asm        call   0x00508CC3;
// LINE 4273:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4277:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x00508B66;
// LINE 4279:
	__asm        mov    ecx, this;
	__asm        call   0x00508D9E;
// LINE 4281:
	__asm        jmp    near ptr 0x00508B6E;
// LINE 4283:
	__asm        mov    ecx, this;
	__asm        call   0x00508E79;
// LINE 4286:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4290:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        test   al, 1;
	__asm        je     near ptr 0x00508B90;
// LINE 4292:
	__asm        mov    ecx, this;
	__asm        call   0x00508E79;
// LINE 4294:
	__asm        jmp    near ptr 0x00508B98;
// LINE 4296:
	__asm        mov    ecx, this;
	__asm        call   0x00508CC3;
// LINE 4299:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4303:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 3;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    [ebp-0xC], edx;
	__asm        jmp    near ptr 0x00508C07;
// LINE 4305:
	__asm        mov    ecx, this;
	__asm        call   0x00508CC3;
	__asm        jmp    near ptr 0x00508C2A;
// LINE 4306:
	__asm        mov    ecx, this;
	__asm        call   0x00508D9E;
	__asm        jmp    near ptr 0x00508C2A;
// LINE 4307:
	__asm        mov    ecx, this;
	__asm        call   0x00508E79;
	__asm        jmp    near ptr 0x00508C2A;
// LINE 4308:
	__asm        push   0x10D4;
	__asm        push   0x5B56DC;
	__asm        push   0x5B5700;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00508BFD;
	__asm        jmp    near ptr 0x00508BFD;
	__asm        jmp    near ptr 0x00508C2A;
// LINE 4309:
	__asm        jmp    near ptr 0x00508C2A;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00508BB5;
	__asm        cmp    dword ptr [ebp-0xC], 1;
	__asm        je     near ptr 0x00508BC2;
	__asm        cmp    dword ptr [ebp-0xC], 2;
	__asm        je     near ptr 0x00508BCF;
	__asm        jmp    near ptr 0x00508BDC;
// LINE 4311:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4315:
	__asm        mov    ecx, this;
	__asm        call   0x00503E6E;
// LINE 4316:
	__asm        jmp    near ptr 0x00508CB7;
// LINE 4322:
	__asm        push   0x10E2;
	__asm        push   0x5B5708;
	__asm        push   0x5B572C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00508C5D;
	__asm        jmp    near ptr 0x00508C5D;
// LINE 4324:
	__asm        jmp    near ptr 0x00508CB7;
	__asm        cmp    dword ptr [ebp-8], 0x10;
	__asm        ja     near ptr 0x00508C3C;
	__asm        mov    eax, [ebp-8];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x508CA6];
	__asm        jmp    dword ptr [ecx*4+0x508C7E];
// Switch pointers
// Switch table
// LINE 4325:
	__asm        jmp    near ptr 0x00508CBC;
}

// FUNCTION: COPTER_D 0x00508cc3
void AutomobileClass::GoStraight() {
// LINE 4347:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x00508CF8;
// LINE 4350:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD6];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4352:
	__asm        jmp    near ptr 0x00508D94;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x00508D21;
// LINE 4355:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4357:
	__asm        jmp    near ptr 0x00508D94;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x00508D4A;
// LINE 4360:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4362:
	__asm        jmp    near ptr 0x00508D94;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x00508D73;
// LINE 4365:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4367:
	__asm        jmp    near ptr 0x00508D94;
// LINE 4369:
	__asm        push   0x1111;
	__asm        push   0x5B5734;
	__asm        push   0x5B5758;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00508D94;
	__asm        jmp    near ptr 0x00508D94;
// LINE 4371:
	__asm        jmp    near ptr 0x00508D99;
}

// FUNCTION: COPTER_D 0x00508d9e
void AutomobileClass::TurnLeft() {
// LINE 4393:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x00508DD3;
// LINE 4396:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4398:
	__asm        jmp    near ptr 0x00508E6F;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x00508DFC;
// LINE 4401:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4403:
	__asm        jmp    near ptr 0x00508E6F;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x00508E25;
// LINE 4406:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD6];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4408:
	__asm        jmp    near ptr 0x00508E6F;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x00508E4E;
// LINE 4411:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4413:
	__asm        jmp    near ptr 0x00508E6F;
// LINE 4415:
	__asm        push   0x113F;
	__asm        push   0x5B5760;
	__asm        push   0x5B5784;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00508E6F;
	__asm        jmp    near ptr 0x00508E6F;
// LINE 4418:
	__asm        jmp    near ptr 0x00508E74;
}

// FUNCTION: COPTER_D 0x00508e79
void AutomobileClass::TurnRight() {
// LINE 4440:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 1;
	__asm        je     near ptr 0x00508EAE;
// LINE 4443:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4446:
	__asm        jmp    near ptr 0x00508F4A;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 4;
	__asm        je     near ptr 0x00508ED7;
// LINE 4449:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4452:
	__asm        jmp    near ptr 0x00508F4A;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 2;
	__asm        je     near ptr 0x00508F00;
// LINE 4455:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4458:
	__asm        jmp    near ptr 0x00508F4A;
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+0xCE], 8;
	__asm        je     near ptr 0x00508F29;
// LINE 4461:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD6];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4464:
	__asm        jmp    near ptr 0x00508F4A;
// LINE 4466:
	__asm        push   0x1172;
	__asm        push   0x5B578C;
	__asm        push   0x5B57B0;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00508F4A;
	__asm        jmp    near ptr 0x00508F4A;
// LINE 4469:
	__asm        jmp    near ptr 0x00508F4F;
}

// FUNCTION: COPTER_D 0x00508f54
void AutomobileClass::MoveForwardOnHiway() {
	int32_t distance;

// LINE 4490:
	__asm        mov    eax, ds:[0x5B4760];
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDE];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    distance, eax;
// LINE 4492:
	__asm        mov    eax, this;
	__asm        mov    ecx, distance;
	__asm        cmp    [eax+0xEA], ecx;
	__asm        jge    near ptr 0x00508F99;
// LINE 4493:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEA];
	__asm        mov    distance, eax;
// LINE 4494:
	__asm        xor    eax, eax;
	__asm        sub    eax, distance;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xEA], eax;
// LINE 4501:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA2];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x24], eax;
// LINE 4502:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xA6];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x28], eax;
// LINE 4503:
	__asm        mov    eax, distance;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAA];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        add    [ecx+0x2C], eax;
// LINE 4506:
	__asm        jmp    near ptr 0x00509002;
}

// FUNCTION: COPTER_D 0x00509007
int32_t S3AutoMIFFLoad(void * __ptr32 miffReader) {
// LINE 4518:
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   0x0050903F;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0050901E;
// LINE 4519:
}

// FUNCTION: COPTER_D 0x00509023
int32_t S3AutoMIFFSave(void * __ptr32 miffWriter) {
// LINE 4531:
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   0x005090FB;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0050903A;
// LINE 4532:
}

// FUNCTION: COPTER_D 0x0050903f
int32_t AutomobileClass::MIFFLoad(void * __ptr32 miffReader) {
	int32_t i;
	int32_t ret;

// LINE 4549:
	__asm        push   0x344;
	__asm        push   0x608C28;
	__asm        push   0x4155544F;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   0x004AB530;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4550:
	__asm        cmp    ret, 0;
	__asm        jne    near ptr 0x00509077;
// LINE 4551:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005090F6;
// LINE 4553:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00509086;
	__asm        inc    i;
	__asm        cmp    i, 0x46;
	__asm        jge    near ptr 0x005090EC;
// LINE 4555:
	__asm        push   0x608C28;
	__asm        mov    eax, i;
	__asm        mov    ecx, i;
	__asm        mov    ecx, [ecx*4+0x608F80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   dword ptr [edx+0x18];
// LINE 4561:
	__asm        push   0x344;
	__asm        push   0x608C28;
	__asm        push   0x4155544F;
	__asm        mov    eax, miffReader;
	__asm        push   eax;
	__asm        call   0x004AB57C;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4563:
	__asm        cmp    ret, 0;
	__asm        jne    near ptr 0x005090E7;
	__asm        cmp    i, 0x45;
	__asm        je     near ptr 0x005090E7;
// LINE 4564:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x005090F6;
// LINE 4565:
	__asm        jmp    near ptr 0x00509083;
// LINE 4566:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x005090F6;
// LINE 4567:
}

// FUNCTION: COPTER_D 0x005090fb
int32_t AutomobileClass::MIFFSave(void * __ptr32 miffWriter) {
	int32_t i;
	int32_t ret;

// LINE 4580:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00509113;
	__asm        inc    i;
	__asm        cmp    i, 0x46;
	__asm        jge    near ptr 0x0050916F;
// LINE 4583:
	__asm        push   0x608C28;
	__asm        mov    eax, i;
	__asm        mov    ecx, i;
	__asm        mov    ecx, [ecx*4+0x608F80];
	__asm        mov    edx, [ecx];
	__asm        mov    ecx, [eax*4+0x608F80];
	__asm        call   dword ptr [edx+0x14];
// LINE 4588:
	__asm        push   0x344;
	__asm        push   0x608C28;
	__asm        push   0x4155544F;
	__asm        mov    eax, miffWriter;
	__asm        push   eax;
	__asm        call   0x004AB5BD;
	__asm        add    esp, 0x10;
	__asm        mov    ret, eax;
// LINE 4589:
	__asm        cmp    ret, 0;
	__asm        jne    near ptr 0x0050916A;
// LINE 4590:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x00509179;
// LINE 4591:
	__asm        jmp    near ptr 0x00509110;
// LINE 4592:
	__asm        mov    eax, 1;
	__asm        jmp    near ptr 0x00509179;
// LINE 4593:
}

// FUNCTION: COPTER_D 0x0050917e
void AutomobileClass::SetSaveData(struct _AUTO_LOAD_SAVE* sd) {
// LINE 4605:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx], eax;
// LINE 4606:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 4;
	__asm        add    esi, 0xC;
	__asm        mov    ecx, 0x19;
	__asm        rep movsd;
// LINE 4607:
	__asm        mov    esi, this;
	__asm        mov    edi, sd;
	__asm        add    edi, 0x68;
	__asm        add    esi, 0x70;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 4608:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9A];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x94], eax;
// LINE 4609:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x9E];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x98], eax;
// LINE 4610:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA2;
	__asm        mov    ecx, sd;
	__asm        add    ecx, 0x9C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4611:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xAE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xA8], eax;
// LINE 4612:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB2];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xAC], eax;
// LINE 4613:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xB6];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xB0], eax;
// LINE 4614:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBA];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xB4], eax;
// LINE 4615:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xBE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xB8], eax;
// LINE 4616:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC2];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xBC], eax;
// LINE 4617:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC6];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xC0], eax;
// LINE 4618:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xC4], eax;
// LINE 4619:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD2];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xC8], ax;
// LINE 4620:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD4];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xCA], ax;
// LINE 4621:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD6];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xCC], ax;
// LINE 4622:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDA];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xD0], ax;
// LINE 4623:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xDC];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xD2], ax;
// LINE 4624:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD8];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xCE], ax;
// LINE 4625:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xD4], eax;
// LINE 4626:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE2];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xD8], eax;
// LINE 4627:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xE6];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xDC], eax;
// LINE 4628:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEA];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xE0], eax;
// LINE 4629:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xEE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xE4], eax;
// LINE 4630:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF6];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xEC], eax;
// LINE 4631:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFA];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xF0], eax;
// LINE 4632:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xFE];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xF4], eax;
// LINE 4633:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x102];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xF8], eax;
// LINE 4634:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x106];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0xFC], eax;
// LINE 4635:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10A];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x100], eax;
// LINE 4636:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10E];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x104], eax;
// LINE 4637:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x116];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x10A], eax;
// LINE 4639:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x0050947D;
// LINE 4641:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    al, [eax];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x92], al;
// LINE 4642:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x70];
	__asm        mov    al, [eax+1];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x93], al;
// LINE 4643:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xF2];
	__asm        mov    ecx, sd;
	__asm        add    ecx, 0x9C;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4646:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 8;
	__asm        je     near ptr 0x0050946C;
// LINE 4648:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0xD2];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x108], ax;
// LINE 4650:
	__asm        jmp    near ptr 0x0050947D;
// LINE 4652:
	__asm        mov    eax, this;
	__asm        mov    ax, [eax+0x7C];
	__asm        mov    ecx, sd;
	__asm        mov    [ecx+0x108], ax;
// LINE 4655:
	__asm        jmp    near ptr 0x00509482;
}

// FUNCTION: COPTER_D 0x00509489
void AutomobileClass::LoadSaveData(struct _AUTO_LOAD_SAVE* sd) {
	unsigned char yindex;

// LINE 4670:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    near ptr 0x005094A6;
// LINE 4672:
	__asm        jmp    near ptr 0x005098A9;
// LINE 4675:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 4676:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x70;
	__asm        add    esi, 0x68;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 4677:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x94];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9A], eax;
// LINE 4678:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x98];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x9E], eax;
// LINE 4679:
	__asm        mov    eax, sd;
	__asm        add    eax, 0x9C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0xA2;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4680:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xA8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xAE], eax;
// LINE 4681:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xAC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB2], eax;
// LINE 4682:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xB0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xB6], eax;
// LINE 4683:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xB4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBA], eax;
// LINE 4684:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xB8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xBE], eax;
// LINE 4685:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xBC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC2], eax;
// LINE 4686:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xC0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xC6], eax;
// LINE 4687:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xC4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xCE], eax;
// LINE 4688:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xC8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD2], ax;
// LINE 4689:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xCA];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD4], ax;
// LINE 4690:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xCC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD6], ax;
// LINE 4691:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xD0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDA], ax;
// LINE 4692:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xD2];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDC], ax;
// LINE 4693:
	__asm        mov    eax, sd;
	__asm        mov    ax, [eax+0xCE];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xD8], ax;
// LINE 4694:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xD4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], eax;
// LINE 4695:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xD8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE2], eax;
// LINE 4696:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xDC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xE6], eax;
// LINE 4697:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xE0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xEA], eax;
// LINE 4698:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xE4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xEE], eax;
// LINE 4699:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xEC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF6], eax;
// LINE 4700:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xF0];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xFA], eax;
// LINE 4701:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xF4];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xFE], eax;
// LINE 4702:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xF8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x102], eax;
// LINE 4703:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0xFC];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x106], eax;
// LINE 4704:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x100];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10A], eax;
// LINE 4705:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x104];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10E], eax;
// LINE 4706:
	__asm        mov    eax, sd;
	__asm        mov    eax, [eax+0x10A];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x116], eax;
// LINE 4708:
	__asm        mov    eax, sd;
	__asm        add    eax, 0x1C;
	__asm        mov    ecx, this;
	__asm        add    ecx, 0x24;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4709:
	__asm        mov    esi, sd;
	__asm        mov    edi, this;
	__asm        add    edi, 0x30;
	__asm        add    esi, 0x28;
	__asm        mov    ecx, 0x10;
	__asm        rep movsd;
// LINE 4711:
	__asm        mov    eax, this;
	__asm        add    eax, 0xA2;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xF2], eax;
// LINE 4714:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x93];
	__asm        push   ecx;
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x92];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    yindex, al;
// LINE 4715:
	__asm        mov    eax, sd;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x92];
	__asm        mov    eax, [ecx*4+0x5C3828];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, yindex;
	__asm        mov    edx, ecx;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    ecx, [edx+ecx*2];
	__asm        add    eax, ecx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x70], eax;
// LINE 4717:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 8;
	__asm        je     near ptr 0x00509825;
// LINE 4718:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD3];
	__asm        mov    [ebp-0xC], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0xD2];
	__asm        mov    [ebp-0x10], ecx;
// LINE 4719:
	__asm        mov    eax, [ebp-0xC];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x10];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        jne    near ptr 0x005097F9;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x005097FE;
	__asm        jmp    near ptr 0x005097FE;
	__asm        jmp    near ptr 0x00509803;
	__asm        mov    eax, [ebp-8];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 4720:
	__asm        mov    eax, this;
	__asm        add    eax, 0xD2;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 4722:
	__asm        jmp    near ptr 0x005098A4;
// LINE 4723:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x18], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x1C], ecx;
// LINE 4724:
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFF;
	__asm        mov    ecx, [ebp-0x1C];
	__asm        and    ecx, 0xFF;
	__asm        shl    ecx, 0xA;
	__asm        mov    eax, [ecx+eax*4+0x67ED30];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        jne    near ptr 0x0050987F;
	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x00509884;
	__asm        jmp    near ptr 0x00509884;
	__asm        jmp    near ptr 0x00509889;
	__asm        mov    eax, [ebp-0x14];
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x112], eax;
// LINE 4725:
	__asm        mov    eax, this;
	__asm        add    eax, 0x7C;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00502B74;
// LINE 4727:
	__asm        jmp    near ptr 0x005098A9;
}

// FUNCTION: COPTER_D 0x005098b0
void AutomobileClass::HonkHorn() {
// LINE 4740:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+9], 2;
	__asm        je     near ptr 0x005098ED;
// LINE 4743:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0xF;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        je     near ptr 0x005098E8;
// LINE 4744:
	__asm        jmp    near ptr 0x00509946;
// LINE 4746:
	__asm        jmp    near ptr 0x0050990C;
// LINE 4749:
	__asm        call   0x0056EC50;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        and    eax, 0x3F;
	__asm        xor    eax, edx;
	__asm        sub    eax, edx;
	__asm        je     near ptr 0x0050990C;
// LINE 4750:
	__asm        jmp    near ptr 0x00509946;
// LINE 4753:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCA];
	__asm        push   eax;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00509941;
// LINE 4755:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xCA];
	__asm        push   eax;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4759:
	__asm        jmp    near ptr 0x00509946;
}

// FUNCTION: COPTER_D 0x0050994b
void S3AutoSoundDistReset() {
// LINE 4773:
	__asm        mov    dword ptr ds:[0x608F78], 0x7800000;
// LINE 4774:
	__asm        mov    dword ptr ds:[0x608F74], 0x7800000;
// LINE 4775:
	__asm        mov    dword ptr ds:[0x608F70], 0x7800000;
// LINE 4776:
	__asm        mov    dword ptr ds:[0x608F6C], 0x7800000;
// LINE 4777:
	__asm        jmp    near ptr 0x0050997E;
}

// FUNCTION: COPTER_D 0x00509983
void S3AutoSoundDriver() {
	int32_t vol_adj;
	struct Point3d loc;
	int32_t dist;

// LINE 4794:
	__asm        mov    eax, ds:[0x608F78];
	__asm        mov    dist, eax;
// LINE 4795:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    near ptr 0x00509A1C;
// LINE 4797:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4798:
	__asm        mov    eax, dist;
	__asm        add    loc.z, eax;
// LINE 4800:
	__asm        push   0x12;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x005099E4;
// LINE 4802:
	__asm        push   1;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        push   0x12;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4805:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 4807:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x12;
	__asm        call   0x00446E82;
	__asm        add    esp, 8;
// LINE 4809:
	__asm        jmp    near ptr 0x00509A39;
// LINE 4811:
	__asm        push   0x12;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00509A39;
// LINE 4813:
	__asm        push   0x12;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 4818:
	__asm        mov    eax, ds:[0x608F74];
	__asm        mov    dist, eax;
// LINE 4819:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    near ptr 0x00509AC9;
// LINE 4821:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4822:
	__asm        mov    eax, dist;
	__asm        add    loc.z, eax;
// LINE 4824:
	__asm        push   0x13;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00509A91;
// LINE 4826:
	__asm        push   1;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        push   0x13;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4829:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 4831:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x13;
	__asm        call   0x00446E82;
	__asm        add    esp, 8;
// LINE 4833:
	__asm        jmp    near ptr 0x00509AE6;
// LINE 4835:
	__asm        push   0x13;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00509AE6;
// LINE 4837:
	__asm        push   0x13;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 4842:
	__asm        mov    eax, ds:[0x608F70];
	__asm        mov    dist, eax;
// LINE 4843:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    near ptr 0x00509B76;
// LINE 4845:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4846:
	__asm        mov    eax, dist;
	__asm        add    loc.z, eax;
// LINE 4848:
	__asm        push   0x11;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00509B3E;
// LINE 4850:
	__asm        push   1;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        push   0x11;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4853:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 4855:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x11;
	__asm        call   0x00446E82;
	__asm        add    esp, 8;
// LINE 4857:
	__asm        jmp    near ptr 0x00509B93;
// LINE 4859:
	__asm        push   0x11;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00509B93;
// LINE 4861:
	__asm        push   0x11;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 4866:
	__asm        mov    eax, ds:[0x608F6C];
	__asm        mov    dist, eax;
// LINE 4867:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    near ptr 0x00509C23;
// LINE 4869:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4870:
	__asm        mov    eax, dist;
	__asm        add    loc.z, eax;
// LINE 4872:
	__asm        push   0x14;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00509BEB;
// LINE 4874:
	__asm        push   1;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4877:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 4879:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        call   0x00446E82;
	__asm        add    esp, 8;
// LINE 4881:
	__asm        jmp    near ptr 0x00509C40;
// LINE 4883:
	__asm        push   0x14;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00509C40;
// LINE 4885:
	__asm        push   0x14;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 4890:
	__asm        mov    eax, ds:[0x608F6C];
	__asm        mov    dist, eax;
// LINE 4891:
	__asm        cmp    dist, 0x7800000;
	__asm        jge    near ptr 0x00509CD0;
// LINE 4893:
	__asm        mov    eax, 0x6C1210;
	__asm        add    eax, 0x5C;
	__asm        lea    ecx, loc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 4894:
	__asm        mov    eax, dist;
	__asm        add    loc.z, eax;
// LINE 4896:
	__asm        push   0x14;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x00509C98;
// LINE 4898:
	__asm        push   1;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        call   0x00446CC2;
	__asm        add    esp, 0xC;
// LINE 4901:
	__asm        push   0xF0600000;
	__asm        push   0x7800000;
	__asm        mov    eax, dist;
	__asm        push   eax;
	__asm        call   0x004D19DF;
	__asm        add    esp, 8;
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        sar    eax, 0x10;
	__asm        mov    vol_adj, eax;
// LINE 4903:
	__asm        mov    eax, vol_adj;
	__asm        push   eax;
	__asm        push   0x14;
	__asm        call   0x00446E82;
	__asm        add    esp, 8;
// LINE 4905:
	__asm        jmp    near ptr 0x00509CED;
// LINE 4907:
	__asm        push   0x14;
	__asm        call   0x00446F02;
	__asm        add    esp, 4;
	__asm        cmp    eax, 1;
	__asm        jne    near ptr 0x00509CED;
// LINE 4909:
	__asm        push   0x14;
	__asm        call   0x00446E04;
	__asm        add    esp, 4;
// LINE 4912:
	__asm        jmp    near ptr 0x00509CF2;
}

// FUNCTION: COPTER_D 0x00509cf7
void AutomobileClass::ChangeAutoColor() {
	 // Switch table at 0x00509ee1
	int32_t base;
	int32_t index;
	struct VRFaceInfo finfo;
	int32_t count;
	int32_t color;
	int32_t face;
	int32_t newbase;
	struct VRObjInfo oinfo;

// LINE 4935:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 0xD;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 4;
	__asm        add    eax, 0x10;
	__asm        mov    newbase, eax;
// LINE 4938:
	__asm        cmp    newbase, 0x30;
	__asm        jne    near ptr 0x00509D43;
// LINE 4939:
	__asm        call   0x0056EC50;
	__asm        mov    ecx, 5;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   ecx;
	__asm        mov    eax, edx;
	__asm        shl    eax, 4;
	__asm        add    eax, 0x10;
	__asm        add    newbase, eax;
// LINE 4941:
	__asm        lea    eax, oinfo.Faces;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D8859;
	__asm        add    esp, 8;
// LINE 4942:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        push   eax;
	__asm        call   0x004D85CD;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 4943:
	__asm        mov    count, 0;
	__asm        jmp    near ptr 0x00509D77;
	__asm        inc    count;
	__asm        mov    eax, count;
	__asm        cmp    oinfo.Faces, eax;
	__asm        jle    near ptr 0x00509FA8;
// LINE 4945:
	__asm        lea    eax, finfo.Face;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D6905;
	__asm        add    esp, 8;
// LINE 4946:
	__asm        cmp    finfo.Plotter, 0xF;
	__asm        jne    near ptr 0x00509F94;
// LINE 4949:
	__asm        mov    eax, finfo.Bitmap;
	__asm        mov    color, eax;
// LINE 4950:
	__asm        mov    eax, color;
	__asm        and    eax, 0xFFFFFFF0;
	__asm        mov    base, eax;
// LINE 4951:
	__asm        mov    eax, color;
	__asm        and    eax, 0xF;
	__asm        mov    index, eax;
// LINE 4955:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x64], eax;
	__asm        jmp    near ptr 0x00509EA2;
// LINE 4958:
	__asm        cmp    base, 0x80;
	__asm        jne    near ptr 0x00509DE3;
// LINE 4959:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4960:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4962:
	__asm        cmp    base, 0x80;
	__asm        jne    near ptr 0x00509E08;
// LINE 4963:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4964:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4966:
	__asm        cmp    base, 0x50;
	__asm        jne    near ptr 0x00509E2A;
// LINE 4967:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4968:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4970:
	__asm        cmp    base, 0x50;
	__asm        jne    near ptr 0x00509E4C;
// LINE 4971:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4972:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4974:
	__asm        cmp    base, 0xA0;
	__asm        jne    near ptr 0x00509E71;
// LINE 4975:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4976:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4978:
	__asm        cmp    base, 0x30;
	__asm        jne    near ptr 0x00509E93;
// LINE 4979:
	__asm        mov    eax, newbase;
	__asm        add    eax, index;
	__asm        push   eax;
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D997F;
	__asm        add    esp, 8;
// LINE 4980:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4982:
	__asm        jmp    near ptr 0x00509F94;
// LINE 4983:
	__asm        jmp    near ptr 0x00509F94;
	__asm        sub    dword ptr [ebp-0x64], 0x7A;
	__asm        cmp    dword ptr [ebp-0x64], 0xB2;
	__asm        ja     near ptr 0x00509F94;
	__asm        mov    eax, [ebp-0x64];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x509EE1];
	__asm        jmp    dword ptr [ecx*4+0x509EC5];
// Switch pointers
// Switch table
// LINE 4986:
	__asm        mov    eax, face;
	__asm        push   eax;
	__asm        call   0x004D85F8;
	__asm        add    esp, 4;
	__asm        mov    face, eax;
// LINE 4987:
	__asm        jmp    near ptr 0x00509D74;
// LINE 4988:
	__asm        jmp    near ptr 0x00509FAD;
}



// Contribution: 1:00108fc0-00108ff8 Module: 171, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00509fc0
// AutomobileClass::`scalar deleting destructor'



// Contribution: 2:00003cc0-00003d97 Module: 171, 8 byte alignment, initialized_data, read, 
// LOCAL: COPTER_D 0x00592cc0
// TurnTable2
// LOCAL: COPTER_D 0x00592d00
// IndexToType
// LOCAL: COPTER_D 0x00592d10
// TILUT
// LOCAL: COPTER_D 0x00592d50
// OT


// Contribution: 2:00003d98-00003dbb Module: 171, 8 byte alignment, initialized_data, (comdat), read, 
// GLOBAL: COPTER_D 0x00592d98
// ??_7AutomobileClass@@6B@


// Contribution: 3:0001e2c4-0001e7b5 Module: 171, 4 byte alignment, initialized_data, read, write, 
// LOCAL: COPTER_D 0x005b52c4
// lastSpeederID
// GLOBAL: COPTER_D 0x005b52c8
// curAutos


// Contribution: 3:0001e7b8-0001e7c3 Module: 171, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b57b8
// ??_C@_0M@DOIM@cellPointer?$AA@


// Contribution: 3:0001e7c4-0001e7e4 Module: 171, 4 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b57c4
// ??_C@_0CB@DNKM@C?3?2Copter?2source?2game?2S3MOBILE?4H@


// Contribution: 3:0001e7e8-0001e9cf Module: 171, 8 byte alignment, initialized_data, (comdat), read, write, 
// GLOBAL: COPTER_D 0x005b57e8
// connections


// Contribution: 3:00071c28-00072097 Module: 171, 8 byte alignment, uninitialized_data, read, write, 
// LOCAL: COPTER_D 0x00608c28
// S_autols
// GLOBAL: COPTER_D 0x00608f6c
// AutomobileClass::fireHoseDist
// GLOBAL: COPTER_D 0x00608f70
// AutomobileClass::ambSirenDist
// GLOBAL: COPTER_D 0x00608f74
// AutomobileClass::policeSirenDist
// GLOBAL: COPTER_D 0x00608f78
// AutomobileClass::fireSirenDist
// GLOBAL: COPTER_D 0x00608f80
// cars
