// Module: S3staton.obj
// Source: C:\Copter\Source\Game\S3staton.cpp
// autogenerated by simcopter_tool from PDB file

// Type: void;

// Type: class Station (forward reference);
class Station{
public:
	void Station(unsigned char);
	void ~Station();
	int32_t DispatchNearestAvailableVehicle(long, long, enum EmergencyType, enum EmergencyLevel, class EmergencyVehicleClass**, int32_t);
	short GetNearestStation(struct _GridCoordinates, struct _GridCoordinates*);
	short GetNextNearest(struct _GridCoordinates*);
	void DecrementQuantityOfVehicleDispatched(int32_t);
private:
	struct _StructStation* stationList;
	int32_t quantityOfStations;
	struct _StationHeapStruct* stationHeap;
	int32_t stationHeapSize;
	struct _VehicleHeapStruct* vehicleHeap;
	int32_t vehicleHeapSize;
	int32_t maxVehicles;
	int32_t FindNearestRoadToStation(struct _GridCoordinates&);
	int32_t FindNearestRoadToEmergency(struct _GridCoordinates&);
	int32_t FindNearestStation(struct _GridCoordinates);
	class EmergencyVehicleClass* FindAvailableVehicle(enum EmergencyLevel, class EmergencyVehicleClass**, int32_t);
	void SortStationsByDistanceFromDestination(struct _GridCoordinates);
	void SortVehiclesByDistanceFromDestination(struct _GridCoordinates, class EmergencyVehicleClass**, int32_t);
	void StationHeapInsert(const struct _StationHeapStruct*);
	void StationHeapRemove(struct _StationHeapStruct*);
	void VehicleHeapInsert(const struct _VehicleHeapStruct*);
	void VehicleHeapRemove(struct _VehicleHeapStruct*);
};

// Type: struct _GridCoordinates;
class _GridCoordinates{
public:
	unsigned char x;
	unsigned char y;
};

// Type: struct _GridCoordinates (forward reference);

// Type: short;

// Type: int32_t;

// Type: class SpiralScan;
class SpiralScan{
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(struct _GridCoordinates&);
	int32_t InCityGridLimits(struct _GridCoordinates);
private:
	int32_t currDist;
	int32_t currDir;
	int32_t currDia;
	int32_t maxDia;
};

// Type: struct _StationHeapStruct;
class _StationHeapStruct{
public:
	long cost;
	int32_t stationID;
};

// Type: class EmergencyVehicleClass (forward reference);
class EmergencyVehicleClass : public AutomobileClass
{
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d* pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO* cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	// vtable: 0
	intro void ~AutomobileClass();
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	// vtable: 4
	intro void AdjustSpeed();
	void Reset();
	// vtable: 8
	intro enum TurnIndex PickTurnDir(struct Goal*);
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	// vtable: 12
	intro void ItterateFSM();
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	// vtable: 16
	intro void BeamToWithinCameraRange();
	// vtable: 20
	intro int32_t BeamToLocation(const struct _GridCoordinates&);
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
		enum __unnamed {
			MAXIMUM_DISTANCE_FROM_BASE = 7,
			MAXIMUM_TIME_TO_EMERGENCY = 3932160,
			AMBULANCE_CAPACITY = 2,
		};
protected:
	struct _GridCoordinates baseLocation;
	struct _GridCoordinates emergencyLocation;
	enum EmergencyType emergencyType;
	long timeOfArrival;
	struct _DYOBJ_INST dispatchIcon;
	int32_t timeToEmergency;
	class AutomobileClass* dispatchTarget;
	unsigned char[256] dispatchPath;
	unsigned char dispatchPathIndex;
	unsigned char dispatchPathLength;
	enum EmergencyLevel emergencyState;
	int32_t stationID;
	int32_t numberOfSeats;
public:
	void EmergencyVehicleClass(const class EmergencyVehicleClass&);
	void EmergencyVehicleClass();
	virtual void ~EmergencyVehicleClass();
	enum EmergencyLevel GetEmergencyState();
	void InitializePlacedVehicleForDispatch(struct Goal, struct Goal, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, enum EmergencyType, enum EmergencyLevel);
	void InitializeStationVehicleForDispatch(int32_t, struct Goal, struct Goal, struct _GridCoordinates, struct Goal, struct Goal, struct _GridCoordinates, int32_t, struct Goal, enum EmergencyType, enum EmergencyLevel);
	// calltype: NearC
	static int32_t AreThereMoreSeats(struct _DYOBJ_INST*);
	// calltype: NearC
	static void FillSeat(struct _DYOBJ_INST*);
	// calltype: NearC
	static int32_t S3UpdateCar(int32_t, int32_t);
	// calltype: NearC
	static struct _DYOBJ_INST* S3GetCar(int32_t);
	void CancelEmergencyDispatch();
protected:
	// vtable: 36
	intro void Reset();
	virtual void AdjustSpeed();
	virtual enum TurnIndex PickTurnDir(struct Goal*);
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*);
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*);
	void ArriveOnScene();
	void UnLinkIconFromCell(const struct _GridCoordinates);
	void LinkIconToCell(const struct _GridCoordinates);
	void PositionIcon();
	void GoBackToStation();
	void BuildPath(struct _RGIndex, struct _RGIndex);
	void TurnOnStrobe();
	void TurnOffStrobe();
	int32_t UpdateCar(int32_t);
	virtual void BeamToWithinCameraRange();
public:
	class EmergencyVehicleClass operator=(const class EmergencyVehicleClass&);
};

// Type: struct _VehicleHeapStruct;
class _VehicleHeapStruct{
public:
	long cost;
	class EmergencyVehicleClass* pVehicle;
	struct _GridCoordinates loc;
};

// Type: struct Point3d;
class Point3d{
public:
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: enum EmergencyLevel;

// Type: struct _StationHeapStruct (forward reference);

// Type: struct _VehicleHeapStruct (forward reference);

// Type: long;

// Type: enum EmergencyType;

// Type: struct Goal;
class Goal{
public:
	struct RGVertex* pRGV;
	int32_t elementIndex;
	int32_t gridIndex;
	struct _GridCoordinates gridLoc;
	enum DirIndex2 edgeIndex;
	enum DirIndex2 direction;
	int32_t distance;
	int32_t turnFlags;
	int32_t deadEndFlags;
	int32_t fElevated;
	enum SlopeIndex slope;
};

// Type: struct _RGIndex;
class _RGIndex{
public:
	unsigned char x;
	unsigned char yindex;
};

// Type: class basic_string<char>;
class basic_string<char>{
	using reference_class = class basic_string_ref<char>;
	using reference_pointer = class basic_string_ref<char>*;
private:
	char * c_str_ptr;
	class basic_string_ref<char>* reference;
	char * point();
	uint32_t& len();
	uint32_t ref_count();
	// calltype: NearC
	static char eos();
	void assign_str(char *, uint32_t);
	void append_str(char *, uint32_t);
	void insert_str(uint32_t, char *, uint32_t);
	void replace_str(uint32_t, uint32_t, char *, uint32_t);
	int32_t compare_str(uint32_t, char *, uint32_t, uint32_t);
	uint32_t find_str(char *, uint32_t, uint32_t);
	uint32_t rfind_str(char *, uint32_t, uint32_t);
	uint32_t find_first_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_of_str(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of_str(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of_str(char *, uint32_t, uint32_t);
public:
	void basic_string<char>(const class vector<char>&);
	void basic_string<char>(char, uint32_t);
	void basic_string<char>(char *);
	void basic_string<char>(char *, uint32_t);
	void basic_string<char>(const class basic_string<char>&, uint32_t, uint32_t);
	void basic_string<char>(uint32_t, enum capacity);
	void basic_string<char>();
protected:
	void basic_string<char>(char *, uint32_t, uint32_t);
	void delete_ref();
	using char_type = char;
	using baggage_type = struct string_char_baggage<char>;
public:
	void ~basic_string<char>();
	class basic_string<char>& operator=(char);
	class basic_string<char>& operator=(char *);
	class basic_string<char>& operator=(const class basic_string<char>&);
	class basic_string<char>& operator+=(char);
	class basic_string<char>& operator+=(char *);
	class basic_string<char>& operator+=(const class basic_string<char>&);
	class vector<char> operator class vector<char>();
	class basic_string<char>& append(char, uint32_t);
	class basic_string<char>& append(char *);
	class basic_string<char>& append(char *, uint32_t);
	class basic_string<char>& append(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& assign(char, uint32_t);
	class basic_string<char>& assign(char *);
	class basic_string<char>& assign(char *, uint32_t);
	class basic_string<char>& assign(const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& insert(uint32_t, char, uint32_t);
	class basic_string<char>& insert(uint32_t, char *);
	class basic_string<char>& insert(uint32_t, char *, uint32_t);
	class basic_string<char>& insert(uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	class basic_string<char>& remove(uint32_t, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, char *);
	class basic_string<char>& replace(uint32_t, uint32_t, char *, uint32_t);
	class basic_string<char>& replace(uint32_t, uint32_t, const class basic_string<char>&, uint32_t, uint32_t);
	char get_at(uint32_t);
	void put_at(uint32_t, char);
	char& operator[](uint32_t);
	char operator[](uint32_t);
	char * c_str();
	char * data();
	uint32_t length();
	void resize(uint32_t);
	void resize(uint32_t, char);
	void reserve(uint32_t);
	uint32_t reserve();
	uint32_t copy(char *, uint32_t, uint32_t);
	uint32_t find(char, uint32_t);
	uint32_t find(char *, uint32_t);
	uint32_t find(char *, uint32_t, uint32_t);
	uint32_t find(const class basic_string<char>&, uint32_t);
	uint32_t rfind(char, uint32_t);
	uint32_t rfind(char *, uint32_t);
	uint32_t rfind(char *, uint32_t, uint32_t);
	uint32_t rfind(const class basic_string<char>&, uint32_t);
	uint32_t find_first_of(char, uint32_t);
	uint32_t find_first_of(char *, uint32_t);
	uint32_t find_first_of(char *, uint32_t, uint32_t);
	uint32_t find_first_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_of(char, uint32_t);
	uint32_t find_last_of(char *, uint32_t);
	uint32_t find_last_of(char *, uint32_t, uint32_t);
	uint32_t find_last_of(const class basic_string<char>&, uint32_t);
	uint32_t find_first_not_of(char, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t);
	uint32_t find_first_not_of(char *, uint32_t, uint32_t);
	uint32_t find_first_not_of(const class basic_string<char>&, uint32_t);
	uint32_t find_last_not_of(char, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t);
	uint32_t find_last_not_of(char *, uint32_t, uint32_t);
	uint32_t find_last_not_of(const class basic_string<char>&, uint32_t);
	class basic_string<char> substr(uint32_t, uint32_t);
	int32_t compare(char, uint32_t, uint32_t);
	int32_t compare(char *, uint32_t);
	int32_t compare(char *, uint32_t, uint32_t);
	int32_t compare(const class basic_string<char>&, uint32_t, uint32_t);
};

// Type: class DigitalSound;
class DigitalSound : public Sound
{
public:
	enum Sound::SoundSourceType nSoundSourceType;
	enum Sound::SoundDuplicateType nSoundDuplicateType;
	long lID;
	long lResID;
	class basic_string<char> sSoundFile;
	long bLooping;
	long bStreaming;
	long lVolume;
	void (*)(long) soundCompletionFunction;
	long lSoundCompletionData;
	void Sound();
	// vtable: 0
	intro void ~Sound();
	class Sound& operator=(const class Sound&);
	// vtable: 4
	intro void SetSoundFile(const class basic_string<char>&);
	// vtable: 8
	intro long Play(long, int32_t);
	// vtable: 12
	intro long Stop();
	// vtable: 16
	intro long IsPlaying();
	// vtable: 20
	intro int32_t SetCompletionNotification(void (*)(long), long);
	// vtable: 24
	intro void StopCompletionNotification();
	// vtable: 28
	intro long EstimateRemainingPlayTime();
	// vtable: 32
	intro int32_t GetVolume(long *);
	// vtable: 36
	intro int32_t SetVolume(long);
	// vtable: 40
	intro int32_t GetSoundType();
	// calltype: NearC
	static unsigned long GetTotalMemoryUsage();
	static unsigned long lTotalMemoryUsage;
protected:
	int32_t nStreamingType;
	int32_t nCompletionEstimationTimerSet;
	static struct IDirectSound* lpDirectSound;
	uint32_t cbSize;
	struct tWAVEFORMATEX waveFormatEx;
	Ptr to: struct IDirectSoundBuffer[8] lpSound;
	struct _STREAMBUFINFO* lpStreamBufferInfo;
	unsigned long dwDesiredBufferDescFlags;
public:
	void DigitalSound(long);
	void DigitalSound(const class basic_string<char>&, int32_t);
	void DigitalSound();
	virtual void ~DigitalSound();
	class DigitalSound& operator=(class DigitalSound&);
	// vtable: 44
	intro void SetSoundFile(const class basic_string<char>&, int32_t);
	// vtable: 48
	intro int32_t Load();
	// vtable: 52
	intro int32_t LoadFromResource();
	// vtable: 56
	intro int32_t LoadFromFile();
	// vtable: 60
	intro void Unload();
	virtual long Play(long, int32_t);
	virtual long Stop();
	// vtable: 64
	intro long ShouldWeStream();
	// vtable: 68
	intro long PlayStream();
	// vtable: 72
	intro long StopStream();
protected:
	// vtable: 76
	intro long IsPlaying(struct IDirectSoundBuffer**);
public:
	virtual long IsPlaying();
	virtual int32_t GetVolume(long *);
	virtual int32_t SetVolume(long);
	// vtable: 80
	intro int32_t GetPan(long *);
	// vtable: 84
	intro int32_t SetPan(long);
	// vtable: 88
	intro int32_t SetPosition(long, long, long);
	// vtable: 92
	intro long GetOriginalFrequency();
	// vtable: 96
	intro int32_t GetFrequency(long *);
	// vtable: 100
	intro int32_t SetFrequency(long);
	virtual int32_t GetSoundType();
	virtual int32_t SetCompletionNotification(void (*)(long), long);
	virtual void StopCompletionNotification();
	virtual long EstimateRemainingPlayTime();
protected:
	// vtable: 104
	intro int32_t GetSoundAliasToPlay(struct IDirectSoundBuffer**);
	// vtable: 108
	intro int32_t CreateSoundBuffer(struct _DSBUFFERDESC*);
	// vtable: 112
	intro int32_t CreatePrimarySoundBuffer();
	// vtable: 116
	intro int32_t ReleaseSoundBuffer();
	// vtable: 120
	intro long InitializeStreamBuffer(long);
	// vtable: 124
	intro void ProcessStreamingBufferTimerCallback();
	// vtable: 128
	intro void ProcessCompletionEstimationTimerCallback();
	// vtable: 132
	intro void StopCompletionNotificationEstimationTimer();
	// vtable: 136
	intro int32_t StartCompletionNotificationEstimationTimer();
};

// Type: struct _StructStation (forward reference);

// Type: struct RGVertex (forward reference);

// Type: unsigned char;

// Type: unsigned char *;



// Contribution: 1:00138c00-0013ad38 Module: 156, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x00539c00
void S3StationInit() {
// LINE 27:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 28:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00539C37;
	__asm        push   0xD1;
	__asm        mov    ecx, [ebp-4];
	__asm        call   0x0053B9B5;
	__asm        mov    ds:[0x5C3820], eax;
	__asm        jmp    near ptr 0x00539C41;
	__asm        mov    dword ptr ds:[0x5C3820], 0;
// LINE 29:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     near ptr 0x00539C6F;
	__asm        push   0xD2;
	__asm        mov    ecx, [ebp-8];
	__asm        call   0x0053B9B5;
	__asm        mov    ds:[0x5C3800], eax;
	__asm        jmp    near ptr 0x00539C79;
	__asm        mov    dword ptr ds:[0x5C3800], 0;
// LINE 30:
	__asm        push   0x1C;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00539CA7;
	__asm        push   0xD3;
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   0x0053B9B5;
	__asm        mov    ds:[0x5C3AA8], eax;
	__asm        jmp    near ptr 0x00539CB1;
	__asm        mov    dword ptr ds:[0x5C3AA8], 0;
// LINE 31:
	__asm        jmp    near ptr 0x00539CB6;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00539cbb
void S3StationReset() {
// LINE 36:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 40:
	__asm        mov    eax, ds:[0x5C3820];
	__asm        mov    [ebp-8], eax;
	__asm        mov    eax, [ebp-8];
	__asm        mov    [ebp-4], eax;
	__asm        cmp    dword ptr [ebp-4], 0;
	__asm        je     near ptr 0x00539CF7;
	__asm        jmp    near ptr 0x00539CE1;
	__asm        mov    eax, [ebp-4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00539CF2;
	__asm        jmp    near ptr 0x00539CF7;
// LINE 41:
	__asm        mov    eax, ds:[0x5C3800];
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     near ptr 0x00539D2A;
	__asm        jmp    near ptr 0x00539D14;
	__asm        mov    eax, [ebp-0xC];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00539D25;
	__asm        jmp    near ptr 0x00539D2A;
// LINE 42:
	__asm        mov    eax, ds:[0x5C3AA8];
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    [ebp-0x14], eax;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00539D5D;
	__asm        jmp    near ptr 0x00539D47;
	__asm        mov    eax, [ebp-0x14];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x00539D58;
	__asm        jmp    near ptr 0x00539D5D;
// LINE 43:
	__asm        jmp    near ptr 0x00539D62;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00539d67
short S3GetNearestStation(class Station* station, struct _GridCoordinates gc, struct _GridCoordinates* result) {
// LINE 48:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 49:
	__asm        mov    eax, result;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(gc.x);
	__asm        push   eax;
	__asm        mov    ecx, station;
	__asm        call   0x0053AA5F;
	__asm        jmp    near ptr 0x00539D82;
// LINE 50:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00539d87
short S3GetNextNearest(class Station* station, struct _GridCoordinates* result) {
// LINE 56:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
// LINE 57:
	__asm        mov    eax, result;
	__asm        push   eax;
	__asm        mov    ecx, station;
	__asm        call   0x0053AACD;
	__asm        jmp    near ptr 0x00539D9E;
// LINE 58:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret;
}

// FUNCTION: COPTER_D 0x00539da3
int32_t Station::FindNearestRoadToStation(struct _GridCoordinates& loc) {
	int32_t i;
	struct _GridCoordinates center;
	int32_t direction;

// LINE 65:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x24;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 80:
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, loc;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+1];
	__asm        add    ecx, edx;
	__asm        and    ecx, 3;
	__asm        mov    direction, ecx;
// LINE 82:
	__asm        mov    eax, loc;
	__asm        mov    ax, [eax];
	__asm        mov    reinterpret_cast<uint16_t>(center.x), ax;
// LINE 85:
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00539E10;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 0x7F;
	__asm        jg     near ptr 0x00539E10;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00539E10;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        cmp    ecx, 0x7F;
	__asm        jle    near ptr 0x00539E1C;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00539E7A;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, loc;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        movzx  ax, byte ptr [eax+edx];
	__asm        mov    [ebp-0x10], ax;
	__asm        mov    eax, [ebp-0x10];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00539E6E;
	__asm        mov    eax, [ebp-0x10];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x00539E6E;
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    near ptr 0x00539E7A;
	__asm        jmp    near ptr 0x00539E7A;
	__asm        mov    dword ptr [ebp-0x14], 0;
	__asm        jmp    near ptr 0x00539E7A;
	__asm        cmp    dword ptr [ebp-0x14], 0;
	__asm        je     near ptr 0x00539E8C;
	__asm        mov    eax, direction;
	__asm        jmp    near ptr 0x0053A017;
// LINE 87:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x00539E9B;
	__asm        inc    i;
	__asm        cmp    i, 4;
	__asm        jge    near ptr 0x0053A00D;
// LINE 89:
	__asm        mov    eax, direction;
	__asm        mov    [ebp-0x24], eax;
	__asm        jmp    near ptr 0x00539F21;
// LINE 91:
	__asm        xor    eax, eax;
	__asm        mov    al, center.y;
	__asm        sub    eax, 2;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx+1], al;
	__asm        mov    al, center.x;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00539F45;
// LINE 92:
	__asm        xor    eax, eax;
	__asm        mov    al, center.x;
	__asm        add    eax, 2;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx], al;
	__asm        mov    al, center.y;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx+1], al;
	__asm        jmp    near ptr 0x00539F45;
// LINE 93:
	__asm        xor    eax, eax;
	__asm        mov    al, center.y;
	__asm        add    eax, 2;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx+1], al;
	__asm        mov    al, center.x;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx], al;
	__asm        jmp    near ptr 0x00539F45;
// LINE 94:
	__asm        xor    eax, eax;
	__asm        mov    al, center.x;
	__asm        sub    eax, 2;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx], al;
	__asm        mov    al, center.y;
	__asm        mov    ecx, loc;
	__asm        mov    [ecx+1], al;
	__asm        jmp    near ptr 0x00539F45;
// LINE 95:
	__asm        jmp    near ptr 0x00539F45;
	__asm        cmp    dword ptr [ebp-0x24], 3;
	__asm        ja     near ptr 0x00539F45;
	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    dword ptr [eax*4+0x539F35];
	__asm        mov    al, 0x9E;
	__asm        push   ebx;
	__asm        add    bl, cl;
	__asm        sahf;
	__asm        push   ebx;
	__asm        add    dh, ah;
	__asm        sahf;
	__asm        push   ebx;
	__asm        add    [ecx], al;
	__asm        lahf;
	__asm        push   ebx;
	__asm        (bad);
// LINE 97:
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00539F85;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 0x7F;
	__asm        jg     near ptr 0x00539F85;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x00539F85;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        cmp    ecx, 0x7F;
	__asm        jle    near ptr 0x00539F91;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00539FEF;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, loc;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        movzx  ax, byte ptr [eax+edx];
	__asm        mov    [ebp-0x18], ax;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x00539FE3;
	__asm        mov    eax, [ebp-0x18];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x00539FE3;
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x00539FEF;
	__asm        jmp    near ptr 0x00539FEF;
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x00539FEF;
	__asm        cmp    dword ptr [ebp-0x1C], 0;
	__asm        je     near ptr 0x0053A001;
	__asm        mov    eax, direction;
	__asm        jmp    near ptr 0x0053A017;
// LINE 99:
	__asm        inc    direction;
	__asm        and    direction, 3;
// LINE 100:
	__asm        jmp    near ptr 0x00539E98;
// LINE 103:
	__asm        mov    eax, 0xFF;
	__asm        jmp    near ptr 0x0053A017;
// LINE 104:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a01e
int32_t Station::FindNearestRoadToEmergency(struct _GridCoordinates& loc) {
	class SpiralScan spiral;

// LINE 109:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x30;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 110:
	__asm        push   0x80;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542DC0;
// LINE 113:
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0053A077;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 0x7F;
	__asm        jg     near ptr 0x0053A077;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0053A077;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        cmp    ecx, 0x7F;
	__asm        jle    near ptr 0x0053A083;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0053A0E1;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, loc;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        movzx  ax, byte ptr [eax+edx];
	__asm        mov    [ebp-0x20], ax;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0053A0D5;
	__asm        mov    eax, [ebp-0x20];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x0053A0D5;
	__asm        mov    dword ptr [ebp-0x24], 1;
	__asm        jmp    near ptr 0x0053A0E1;
	__asm        jmp    near ptr 0x0053A0E1;
	__asm        mov    dword ptr [ebp-0x24], 0;
	__asm        jmp    near ptr 0x0053A0E1;
	__asm        cmp    dword ptr [ebp-0x24], 0;
	__asm        je     near ptr 0x0053A0FF;
// LINE 114:
	__asm        mov    dword ptr [ebp-0x14], 1;
	__asm        jmp    near ptr 0x0053A0F7;
	__asm        mov    eax, [ebp-0x14];
	__asm        jmp    near ptr 0x0053A1F4;
// LINE 116:
	__asm        mov    eax, loc;
	__asm        push   eax;
	__asm        lea    ecx, spiral.currDist;
	__asm        call   0x00542E03;
	__asm        test   eax, eax;
	__asm        je     near ptr 0x0053A1E0;
// LINE 118:
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0053A153;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        cmp    ecx, 0x7F;
	__asm        jg     near ptr 0x0053A153;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        test   ecx, ecx;
	__asm        jl     near ptr 0x0053A153;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        cmp    ecx, 0x7F;
	__asm        jle    near ptr 0x0053A15F;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0053A1BD;
	__asm        mov    eax, loc;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        mov    eax, [ecx*4+0x639850];
	__asm        mov    ecx, loc;
	__asm        xor    edx, edx;
	__asm        mov    dl, [ecx+1];
	__asm        movzx  ax, byte ptr [eax+edx];
	__asm        mov    [ebp-0x28], ax;
	__asm        mov    eax, [ebp-0x28];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x1D;
	__asm        jl     near ptr 0x0053A1B1;
	__asm        mov    eax, [ebp-0x28];
	__asm        and    eax, 0xFFFF;
	__asm        cmp    eax, 0x2C;
	__asm        jge    near ptr 0x0053A1B1;
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        jmp    near ptr 0x0053A1BD;
	__asm        jmp    near ptr 0x0053A1BD;
	__asm        mov    dword ptr [ebp-0x2C], 0;
	__asm        jmp    near ptr 0x0053A1BD;
	__asm        cmp    dword ptr [ebp-0x2C], 0;
	__asm        je     near ptr 0x0053A1DB;
// LINE 119:
	__asm        mov    dword ptr [ebp-0x18], 1;
	__asm        jmp    near ptr 0x0053A1D3;
	__asm        mov    eax, [ebp-0x18];
	__asm        jmp    near ptr 0x0053A1F4;
// LINE 120:
	__asm        jmp    near ptr 0x0053A0FF;
// LINE 122:
	__asm        mov    dword ptr [ebp-0x1C], 0;
	__asm        jmp    near ptr 0x0053A1EC;
	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    near ptr 0x0053A1F4;
// LINE 123:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a1fb
void Station::SortStationsByDistanceFromDestination(struct _GridCoordinates loc) {
	struct _StationHeapStruct station;
	int32_t deltay;
	int32_t deltax;
	int32_t i;

// LINE 127:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x18;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 132:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0xC], 0;
// LINE 134:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053A220;
	__asm        inc    i;
	__asm        mov    eax, this;
	__asm        mov    ecx, i;
	__asm        cmp    [eax+4], ecx;
	__asm        jle    near ptr 0x0053A34C;
// LINE 138:
	__asm        mov    eax, i;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x58];
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        cmp    edx, eax;
	__asm        jle    near ptr 0x0053A273;
// LINE 139:
	__asm        mov    eax, i;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x58];
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        sub    edx, eax;
	__asm        mov    deltax, edx;
// LINE 140:
	__asm        jmp    near ptr 0x0053A291;
// LINE 141:
	__asm        xor    eax, eax;
	__asm        mov    al, loc.x;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 5;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx+0x58];
	__asm        sub    eax, ebx;
	__asm        mov    deltax, eax;
// LINE 145:
	__asm        mov    eax, i;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x59];
	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        cmp    edx, eax;
	__asm        jle    near ptr 0x0053A2D5;
// LINE 146:
	__asm        mov    eax, i;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx+0x59];
	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        sub    edx, eax;
	__asm        mov    deltay, edx;
// LINE 147:
	__asm        jmp    near ptr 0x0053A2F3;
// LINE 148:
	__asm        xor    eax, eax;
	__asm        mov    al, loc.y;
	__asm        mov    ecx, i;
	__asm        shl    ecx, 5;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx];
	__asm        xor    ebx, ebx;
	__asm        mov    bl, [ecx+edx+0x59];
	__asm        sub    eax, ebx;
	__asm        mov    deltay, eax;
// LINE 151:
	__asm        mov    eax, i;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        cmp    dword ptr [eax+ecx+0x5C], 1;
	__asm        jge    near ptr 0x0053A347;
// LINE 153:
	__asm        mov    eax, deltax;
	__asm        cmp    deltay, eax;
	__asm        jge    near ptr 0x0053A329;
// LINE 155:
	__asm        mov    eax, deltay;
	__asm        sar    eax, 1;
	__asm        add    eax, deltax;
	__asm        mov    station.cost, eax;
// LINE 157:
	__asm        jmp    near ptr 0x0053A335;
// LINE 159:
	__asm        mov    eax, deltax;
	__asm        sar    eax, 1;
	__asm        add    eax, deltay;
	__asm        mov    station.cost, eax;
// LINE 162:
	__asm        mov    eax, i;
	__asm        mov    station.stationID, eax;
// LINE 163:
	__asm        lea    eax, station.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A566;
// LINE 165:
	__asm        jmp    near ptr 0x0053A21D;
// LINE 166:
	__asm        jmp    near ptr 0x0053A351;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a358
void Station::SortVehiclesByDistanceFromDestination(struct _GridCoordinates destLoc, class EmergencyVehicleClass** vehicleList, int32_t vehicleListLength) {
	int32_t deltay;
	int32_t deltax;
	int32_t i;
	struct _VehicleHeapStruct vehicle;

// LINE 173:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x28;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 178:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x14], 0;
// LINE 181:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053A37D;
	__asm        inc    i;
	__asm        mov    eax, vehicleListLength;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0053A494;
// LINE 184:
// Block start:
	struct Point3d DyObjLoc;
	__asm        jmp    near ptr 0x0053A38E;
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        cmp    dword ptr [eax+0x294], 3;
	__asm        jle    near ptr 0x0053A3A9;
// LINE 185:
	__asm        jmp    near ptr 0x0053A37A;
// LINE 187:
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        add    eax, 0x24;
	__asm        lea    ecx, DyObjLoc.x;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    eax, [eax+8];
	__asm        mov    [ecx+8], eax;
// LINE 188:
	__asm        mov    eax, DyObjLoc.x;
	__asm        add    eax, 0x20000000;
	__asm        sar    eax, 0x16;
	__asm        mov    vehicle.loc.x, al;
// LINE 189:
	__asm        mov    eax, 0x20000000;
	__asm        sub    eax, DyObjLoc.z;
	__asm        sar    eax, 0x16;
	__asm        mov    vehicle.loc.y, al;
// LINE 193:
	__asm        xor    eax, eax;
	__asm        mov    al, vehicle.loc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.x;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0053A40A;
// LINE 194:
	__asm        xor    eax, eax;
	__asm        mov    al, vehicle.loc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.x;
	__asm        sub    eax, ecx;
	__asm        mov    deltax, eax;
// LINE 195:
	__asm        jmp    near ptr 0x0053A419;
// LINE 196:
	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.x;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, vehicle.loc.x;
	__asm        sub    eax, ecx;
	__asm        mov    deltax, eax;
// LINE 200:
	__asm        xor    eax, eax;
	__asm        mov    al, vehicle.loc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.y;
	__asm        cmp    eax, ecx;
	__asm        jle    near ptr 0x0053A43F;
// LINE 201:
	__asm        xor    eax, eax;
	__asm        mov    al, vehicle.loc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, destLoc.y;
	__asm        sub    eax, ecx;
	__asm        mov    deltay, eax;
// LINE 202:
	__asm        jmp    near ptr 0x0053A44E;
// LINE 203:
	__asm        xor    eax, eax;
	__asm        mov    al, destLoc.y;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, vehicle.loc.y;
	__asm        sub    eax, ecx;
	__asm        mov    deltay, eax;
// LINE 206:
	__asm        mov    eax, deltax;
	__asm        cmp    deltay, eax;
	__asm        jge    near ptr 0x0053A46B;
// LINE 208:
	__asm        mov    eax, deltay;
	__asm        sar    eax, 1;
	__asm        add    eax, deltax;
	__asm        mov    vehicle.cost, eax;
// LINE 210:
	__asm        jmp    near ptr 0x0053A477;
// LINE 212:
	__asm        mov    eax, deltax;
	__asm        sar    eax, 1;
	__asm        add    eax, deltay;
	__asm        mov    vehicle.cost, eax;
// LINE 215:
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    vehicle.pVehicle, eax;
// LINE 216:
	__asm        lea    eax, vehicle.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A798;
// LINE 217:
// Block end:
	__asm        jmp    near ptr 0x0053A37A;
// LINE 218:
	__asm        jmp    near ptr 0x0053A499;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0053a4a0
class EmergencyVehicleClass* Station::FindAvailableVehicle(enum EmergencyLevel responseLevel, class EmergencyVehicleClass** vehicleList, int32_t vehicleListLength) {
	int32_t code;
	int32_t i;

// LINE 225:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 227:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053A4BB;
	__asm        inc    i;
	__asm        mov    eax, vehicleListLength;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0053A4ED;
// LINE 229:
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        test   byte ptr [eax+8], 2;
	__asm        jne    near ptr 0x0053A4E8;
// LINE 230:
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        jmp    near ptr 0x0053A55F;
// LINE 231:
	__asm        jmp    near ptr 0x0053A4B8;
// LINE 235:
	__asm        mov    code, 2;
	__asm        jmp    near ptr 0x0053A4FC;
	__asm        inc    code;
	__asm        mov    eax, code;
	__asm        cmp    responseLevel, eax;
	__asm        jle    near ptr 0x0053A558;
// LINE 237:
	__asm        mov    i, 0;
	__asm        jmp    near ptr 0x0053A517;
	__asm        inc    i;
	__asm        mov    eax, vehicleListLength;
	__asm        cmp    i, eax;
	__asm        jge    near ptr 0x0053A553;
// LINE 239:
	__asm        jmp    near ptr 0x0053A528;
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        mov    ecx, code;
	__asm        cmp    [eax+0x294], ecx;
	__asm        jge    near ptr 0x0053A54E;
// LINE 240:
	__asm        mov    eax, i;
	__asm        mov    ecx, vehicleList;
	__asm        mov    eax, [ecx+eax*4];
	__asm        jmp    near ptr 0x0053A55F;
// LINE 241:
	__asm        jmp    near ptr 0x0053A514;
// LINE 242:
	__asm        jmp    near ptr 0x0053A4F9;
// LINE 244:
	__asm        xor    eax, eax;
	__asm        jmp    near ptr 0x0053A55F;
// LINE 245:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0xC;
}

// FUNCTION: COPTER_D 0x0053a566
void Station::StationHeapInsert(const struct _StationHeapStruct* pInsertStruct) {
	int32_t index;
	struct _StationHeapStruct tempStruct;

// LINE 249:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x10;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 252:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0xC];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    index, eax;
// LINE 255:
	__asm        mov    eax, pInsertStruct;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, index;
	__asm        lea    edx, [edx+ebx*8];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 261:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, index;
	__asm        mov    edx, [edx+ebx*8];
	__asm        cmp    [ecx+eax*8], edx;
	__asm        jle    near ptr 0x0053A62B;
// LINE 263:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, index;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    tempStruct.cost, ecx;
	__asm        mov    tempStruct.stationID, eax;
// LINE 264:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        shl    eax, 3;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+8];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, index;
	__asm        lea    edx, [edx+ebx*8];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 265:
	__asm        mov    ecx, tempStruct.cost;
	__asm        mov    ebx, tempStruct.stationID;
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        shl    eax, 3;
	__asm        mov    edx, this;
	__asm        add    eax, [edx+8];
	__asm        mov    [eax], ecx;
	__asm        mov    [eax+4], ebx;
// LINE 266:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    index, eax;
// LINE 267:
	__asm        jmp    near ptr 0x0053A59A;
// LINE 268:
	__asm        jmp    near ptr 0x0053A630;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a637
void Station::StationHeapRemove(struct _StationHeapStruct* pRemovedStruct) {
	int32_t index;
	int32_t child;
	int32_t parent;
	struct _StationHeapStruct tempStruct;

// LINE 272:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x1C;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 278:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        mov    index, eax;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0xC];
// LINE 279:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 8;
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, pRemovedStruct;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 280:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, index;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        add    edx, 8;
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        add    eax, 8;
	__asm        mov    [ebp-0x18], eax;
	__asm        mov    eax, [ebp-0x18];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    tempStruct.cost, ecx;
	__asm        mov    tempStruct.stationID, eax;
// LINE 284:
	__asm        mov    parent, 1;
// LINE 287:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xC];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, parent;
	__asm        jl     near ptr 0x0053A775;
// LINE 290:
	__asm        mov    eax, parent;
	__asm        add    eax, parent;
	__asm        mov    child, eax;
// LINE 293:
	__asm        mov    eax, this;
	__asm        mov    ecx, child;
	__asm        cmp    [eax+0xC], ecx;
	__asm        jle    near ptr 0x0053A6F7;
	__asm        mov    eax, child;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+8];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, child;
	__asm        mov    edx, [edx+ebx*8];
	__asm        cmp    [ecx+eax*8+8], edx;
	__asm        jge    near ptr 0x0053A6F7;
// LINE 294:
	__asm        inc    child;
// LINE 297:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, parent;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, child;
	__asm        mov    edx, [edx+ebx*8];
	__asm        cmp    [eax+ecx*8], edx;
	__asm        jg     near ptr 0x0053A71A;
// LINE 298:
	__asm        jmp    near ptr 0x0053A775;
// LINE 301:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, parent;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    tempStruct.cost, ecx;
	__asm        mov    tempStruct.stationID, eax;
// LINE 302:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+8];
	__asm        mov    ecx, child;
	__asm        lea    eax, [eax+ecx*8];
	__asm        mov    ecx, [eax];
	__asm        mov    eax, [eax+4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, parent;
	__asm        lea    edx, [edx+ebx*8];
	__asm        mov    [edx], ecx;
	__asm        mov    [edx+4], eax;
// LINE 303:
	__asm        mov    eax, tempStruct.cost;
	__asm        mov    ecx, tempStruct.stationID;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, child;
	__asm        lea    edx, [edx+ebx*8];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 306:
	__asm        mov    eax, child;
	__asm        mov    parent, eax;
// LINE 307:
	__asm        jmp    near ptr 0x0053A6A8;
// LINE 310:
	__asm        mov    eax, tempStruct.cost;
	__asm        mov    ecx, tempStruct.stationID;
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+8];
	__asm        mov    ebx, parent;
	__asm        lea    edx, [edx+ebx*8];
	__asm        mov    [edx], eax;
	__asm        mov    [edx+4], ecx;
// LINE 311:
	__asm        jmp    near ptr 0x0053A791;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a798
void Station::VehicleHeapInsert(const struct _VehicleHeapStruct* pInsertStruct) {
	int32_t index;
	struct _VehicleHeapStruct tempStruct;

// LINE 315:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x14;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 318:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+0x14];
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    index, eax;
// LINE 321:
	__asm        mov    eax, pInsertStruct;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, index;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    ecx, [ecx+edx*2];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 327:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        lea    eax, [eax+eax*4];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x10];
	__asm        mov    ebx, index;
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    edx, [edx+ebx*2];
	__asm        cmp    [ecx+eax*2], edx;
	__asm        jle    near ptr 0x0053A894;
// LINE 329:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, index;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        lea    ecx, tempStruct.cost;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 330:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx+0x10];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, index;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    ecx, [ecx+edx*2];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 331:
	__asm        lea    ecx, tempStruct.cost;
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        mov    edx, this;
	__asm        add    eax, [edx+0x10];
	__asm        mov    edx, [ecx];
	__asm        mov    [eax], edx;
	__asm        mov    edx, [ecx+4];
	__asm        mov    [eax+4], edx;
	__asm        mov    cx, [ecx+8];
	__asm        mov    [eax+8], cx;
// LINE 332:
	__asm        mov    eax, index;
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        mov    index, eax;
// LINE 333:
	__asm        jmp    near ptr 0x0053A7D7;
// LINE 334:
	__asm        jmp    near ptr 0x0053A899;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053a8a0
void Station::VehicleHeapRemove(struct _VehicleHeapStruct* pRemovedStruct) {
	int32_t index;
	int32_t child;
	int32_t parent;
	struct _VehicleHeapStruct tempStruct;

// LINE 338:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x20;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 344:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        mov    index, eax;
	__asm        mov    eax, this;
	__asm        dec    dword ptr [eax+0x14];
// LINE 345:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, 0xA;
	__asm        mov    ecx, pRemovedStruct;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 346:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, index;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        add    ecx, 0xA;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        add    eax, 0xA;
	__asm        mov    [ebp-0x1C], eax;
	__asm        mov    eax, [ebp-0x1C];
	__asm        lea    ecx, tempStruct.cost;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 350:
	__asm        mov    parent, 1;
// LINE 353:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x14];
	__asm        cdq;
	__asm        sub    eax, edx;
	__asm        sar    eax, 1;
	__asm        cmp    eax, parent;
	__asm        jl     near ptr 0x0053AA2F;
// LINE 356:
	__asm        mov    eax, parent;
	__asm        add    eax, parent;
	__asm        mov    child, eax;
// LINE 359:
	__asm        mov    eax, this;
	__asm        mov    ecx, child;
	__asm        cmp    [eax+0x14], ecx;
	__asm        jle    near ptr 0x0053A983;
	__asm        mov    eax, child;
	__asm        lea    eax, [eax+eax*4+5];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x10];
	__asm        mov    ebx, child;
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    edx, [edx+ebx*2];
	__asm        cmp    [ecx+eax*2], edx;
	__asm        jge    near ptr 0x0053A983;
// LINE 360:
	__asm        inc    child;
// LINE 363:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, child;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx+0x10];
	__asm        mov    ebx, parent;
	__asm        lea    ebx, [ebx+ebx*4];
	__asm        mov    edx, [edx+ebx*2];
	__asm        cmp    [eax+ecx*2], edx;
	__asm        jl     near ptr 0x0053A9AC;
// LINE 364:
	__asm        jmp    near ptr 0x0053AA2F;
// LINE 367:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, parent;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        lea    ecx, tempStruct.cost;
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 368:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x10];
	__asm        mov    ecx, child;
	__asm        lea    ecx, [ecx+ecx*4];
	__asm        lea    eax, [eax+ecx*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, parent;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    ecx, [ecx+edx*2];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 369:
	__asm        lea    eax, tempStruct.cost;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, child;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    ecx, [ecx+edx*2];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 372:
	__asm        mov    eax, child;
	__asm        mov    parent, eax;
// LINE 373:
	__asm        jmp    near ptr 0x0053A92E;
// LINE 376:
	__asm        lea    eax, tempStruct.cost;
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0x10];
	__asm        mov    edx, parent;
	__asm        lea    edx, [edx+edx*4];
	__asm        lea    ecx, [ecx+edx*2];
	__asm        mov    edx, [eax];
	__asm        mov    [ecx], edx;
	__asm        mov    edx, [eax+4];
	__asm        mov    [ecx+4], edx;
	__asm        mov    ax, [eax+8];
	__asm        mov    [ecx+8], ax;
// LINE 377:
	__asm        jmp    near ptr 0x0053AA58;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053aa5f
short Station::GetNearestStation(struct _GridCoordinates gc, struct _GridCoordinates* result) {
// LINE 384:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 385:
	__asm        mov    eax, reinterpret_cast<uint32_t>(gc.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A1FB;
// LINE 386:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0053AAB7;
// LINE 390:
// Block start:
	struct _StationHeapStruct removedStruct;
	__asm        lea    eax, removedStruct.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A637;
// LINE 391:
	__asm        mov    ecx, removedStruct.stationID;
	__asm        shl    ecx, 5;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx];
	__asm        mov    cx, [ecx+edx+0x58];
	__asm        mov    edx, result;
	__asm        mov    [edx], cx;
// LINE 392:
	__asm        mov    ax, reinterpret_cast<uint16_t>(removedStruct.cost);
	__asm        jmp    near ptr 0x0053AAC6;
// LINE 394:
// Block end:
	__asm        jmp    near ptr 0x0053AAC6;
// LINE 396:
	__asm        mov    result, 0;
// LINE 397:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0053AAC6;
// LINE 399:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    8;
}

// FUNCTION: COPTER_D 0x0053aacd
short Station::GetNextNearest(struct _GridCoordinates* result) {
// LINE 403:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0xC;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 404:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0053AB19;
// LINE 408:
// Block start:
	struct _StationHeapStruct removedStruct;
	__asm        lea    eax, removedStruct.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A637;
// LINE 409:
	__asm        mov    ecx, removedStruct.stationID;
	__asm        shl    ecx, 5;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        mov    edx, this;
	__asm        mov    edx, [edx];
	__asm        mov    cx, [ecx+edx+0x58];
	__asm        mov    edx, result;
	__asm        mov    [edx], cx;
// LINE 410:
	__asm        mov    ax, reinterpret_cast<uint16_t>(removedStruct.cost);
	__asm        jmp    near ptr 0x0053AB28;
// LINE 412:
// Block end:
	__asm        jmp    near ptr 0x0053AB28;
// LINE 414:
	__asm        mov    result, 0;
// LINE 415:
	__asm        xor    ax, ax;
	__asm        jmp    near ptr 0x0053AB28;
// LINE 417:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053ab2f
void Station::DecrementQuantityOfVehicleDispatched(int32_t stationID) {
// LINE 421:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 4;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 423:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, stationID;
	__asm        shl    ecx, 5;
	__asm        lea    ecx, [ecx+ecx*2];
	__asm        cmp    dword ptr [eax+ecx+0x5C], 0;
	__asm        jne    near ptr 0x0053AB70;
	__asm        push   0x1A7;
	__asm        push   0x5B8078;
	__asm        push   0x5B809C;
	__asm        call   0x0056DA30;
	__asm        add    esp, 0xC;
	__asm        jmp    near ptr 0x0053AB75;
	__asm        jmp    near ptr 0x0053AB75;
// LINE 425:
	__asm        mov    eax, stationID;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        dec    dword ptr [eax+ecx+0x5C];
// LINE 426:
	__asm        jmp    near ptr 0x0053AB8C;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}

// FUNCTION: COPTER_D 0x0053ab93
int32_t Station::DispatchNearestAvailableVehicle(long mapx, long mapy, enum EmergencyType responseType, enum EmergencyLevel responseLevel, class EmergencyVehicleClass** vehicleList, int32_t vehicleListLength) {
	struct Goal startGoal1;
	struct Goal startGoal2;
	struct _RGIndex destVert;
	struct _VehicleHeapStruct vehicleHeapStruct;
	struct _GridCoordinates destLoc;
	class basic_string<char> errorMsgSoundFullPath;
	struct Goal destGoal1;
	int32_t pathFound;
	struct Goal destGoal2;
	class EmergencyVehicleClass* availableVehicle;
	static const class DigitalSound errorMsgSound = { /* <data@0x006351d0> */ };
	struct _StationHeapStruct stationHeapStruct;
	struct Goal result;
	struct _RGIndex startVertex;

// LINE 432:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x288;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 433:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x284], eax;
	__asm        cmp    dword ptr [ebp-0x284], 0;
	__asm        je     near ptr 0x0053AC10;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    dword ptr [eax+4], 0;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x284];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0053ABFF;
	__asm        mov    eax, [ebp-0x284];
	__asm        mov    errorMsgSoundFullPath.reference, eax;
	__asm        jmp    near ptr 0x0053AC1A;
	__asm        mov    errorMsgSoundFullPath.reference, 0;
	__asm        mov    errorMsgSoundFullPath.c_str_ptr, 0;
	__asm        jmp    near ptr 0x0053AC29;
// LINE 434:
	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x63524C];
	__asm        test   al, 1;
	__asm        jne    near ptr 0x0053AC5D;
	__asm        xor    eax, eax;
	__asm        mov    al, ds:[0x63524C];
	__asm        or     al, 1;
	__asm        mov    ds:[0x63524C], al;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042EF87;
	__asm        push   0x53B99B;
	__asm        call   0x0056D090;
	__asm        add    esp, 4;
// LINE 450:
	__asm        mov    al, reinterpret_cast<uint8_t>(mapx);
	__asm        mov    destLoc.x, al;
// LINE 451:
	__asm        mov    al, reinterpret_cast<uint8_t>(mapy);
	__asm        mov    destLoc.y, al;
// LINE 454:
	__asm        mov    eax, vehicleListLength;
	__asm        push   eax;
	__asm        mov    eax, vehicleList;
	__asm        push   eax;
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A4A0;
	__asm        mov    availableVehicle, eax;
// LINE 457:
	__asm        cmp    availableVehicle, 0;
	__asm        jne    near ptr 0x0053AF4C;
// LINE 459:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x278], eax;
	__asm        cmp    dword ptr [ebp-0x278], 0;
	__asm        je     near ptr 0x0053AD82;
	__asm        mov    edi, 0x5B80CC;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        mov    ecx, [ebp-0x278];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0053ACD1;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x278];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0053AD53;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x278];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x27C], eax;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x280], eax;
	__asm        mov    eax, [ebp-0x27C];
	__asm        mov    esi, 0x5B80CC;
	__asm        mov    edi, [ebp-0x280];
	__asm        mov    ecx, eax;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    near ptr 0x0053AD4E;
	__asm        jmp    near ptr 0x0053AD5F;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0053AD71;
	__asm        mov    eax, [ebp-0x278];
	__asm        mov    [ebp-0x118], eax;
	__asm        jmp    near ptr 0x0053AD8C;
	__asm        mov    dword ptr [ebp-0x118], 0;
	__asm        mov    dword ptr [ebp-0x11C], 0;
	__asm        jmp    near ptr 0x0053AD9B;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x11C];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0053ADBC;
	__asm        mov    eax, [ebp-0x118];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x118];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053AE23;
	__asm        mov    eax, [ebp-0x118];
	__asm        mov    [ebp-0x264], eax;
	__asm        mov    eax, [ebp-0x264];
	__asm        mov    [ebp-0x260], eax;
	__asm        cmp    dword ptr [ebp-0x260], 0;
	__asm        je     near ptr 0x0053AE23;
	__asm        mov    ecx, [ebp-0x260];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053AE0A;
	__asm        mov    eax, [ebp-0x260];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053AE1E;
	__asm        jmp    near ptr 0x0053AE23;
	__asm        jmp    near ptr 0x0053AE28;
	__asm        cmp    dword ptr [ebp-0x11C], 0;
	__asm        je     near ptr 0x0053AE5C;
	__asm        mov    eax, [ebp-0x11C];
	__asm        mov    [ebp-0x258], eax;
	__asm        mov    eax, [ebp-0x258];
	__asm        mov    [ebp-0x25C], eax;
	__asm        mov    eax, [ebp-0x25C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053AE61;
// LINE 460:
	__asm        push   2;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042F318;
// LINE 461:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042FE2E;
// LINE 462:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0043005A;
// LINE 464:
	__asm        mov    dword ptr [ebp-0x120], 0x101;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053AF03;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        mov    [ebp-0x274], eax;
	__asm        mov    eax, [ebp-0x274];
	__asm        mov    [ebp-0x270], eax;
	__asm        cmp    dword ptr [ebp-0x270], 0;
	__asm        je     near ptr 0x0053AF03;
	__asm        mov    ecx, [ebp-0x270];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053AEEA;
	__asm        mov    eax, [ebp-0x270];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053AEFE;
	__asm        jmp    near ptr 0x0053AF03;
	__asm        jmp    near ptr 0x0053AF08;
	__asm        cmp    errorMsgSoundFullPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0053AF3C;
	__asm        mov    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        mov    [ebp-0x268], eax;
	__asm        mov    eax, [ebp-0x268];
	__asm        mov    [ebp-0x26C], eax;
	__asm        mov    eax, [ebp-0x26C];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053AF41;
	__asm        mov    eax, [ebp-0x120];
	__asm        jmp    near ptr 0x0053B994;
// LINE 467:
	__asm        lea    eax, destLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A01E;
	__asm        test   eax, eax;
	__asm        jne    near ptr 0x0053B21F;
// LINE 469:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x24C], eax;
	__asm        cmp    dword ptr [ebp-0x24C], 0;
	__asm        je     near ptr 0x0053B055;
	__asm        mov    edi, 0x5B80D8;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        mov    ecx, [ebp-0x24C];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0053AFA4;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x24C];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x24C];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0053B026;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x24C];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x250], eax;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x254], eax;
	__asm        mov    eax, [ebp-0x250];
	__asm        mov    esi, 0x5B80D8;
	__asm        mov    edi, [ebp-0x254];
	__asm        mov    ecx, eax;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    near ptr 0x0053B021;
	__asm        jmp    near ptr 0x0053B032;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0053B044;
	__asm        mov    eax, [ebp-0x24C];
	__asm        mov    [ebp-0x124], eax;
	__asm        jmp    near ptr 0x0053B05F;
	__asm        mov    dword ptr [ebp-0x124], 0;
	__asm        mov    dword ptr [ebp-0x128], 0;
	__asm        jmp    near ptr 0x0053B06E;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x128];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0053B08F;
	__asm        mov    eax, [ebp-0x124];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x124];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053B0F6;
	__asm        mov    eax, [ebp-0x124];
	__asm        mov    [ebp-0x238], eax;
	__asm        mov    eax, [ebp-0x238];
	__asm        mov    [ebp-0x234], eax;
	__asm        cmp    dword ptr [ebp-0x234], 0;
	__asm        je     near ptr 0x0053B0F6;
	__asm        mov    ecx, [ebp-0x234];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053B0DD;
	__asm        mov    eax, [ebp-0x234];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B0F1;
	__asm        jmp    near ptr 0x0053B0F6;
	__asm        jmp    near ptr 0x0053B0FB;
	__asm        cmp    dword ptr [ebp-0x128], 0;
	__asm        je     near ptr 0x0053B12F;
	__asm        mov    eax, [ebp-0x128];
	__asm        mov    [ebp-0x22C], eax;
	__asm        mov    eax, [ebp-0x22C];
	__asm        mov    [ebp-0x230], eax;
	__asm        mov    eax, [ebp-0x230];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B134;
// LINE 470:
	__asm        push   2;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042F318;
// LINE 471:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042FE2E;
// LINE 472:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0043005A;
// LINE 474:
	__asm        mov    dword ptr [ebp-0x12C], 0x103;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053B1D6;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        mov    [ebp-0x248], eax;
	__asm        mov    eax, [ebp-0x248];
	__asm        mov    [ebp-0x244], eax;
	__asm        cmp    dword ptr [ebp-0x244], 0;
	__asm        je     near ptr 0x0053B1D6;
	__asm        mov    ecx, [ebp-0x244];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053B1BD;
	__asm        mov    eax, [ebp-0x244];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B1D1;
	__asm        jmp    near ptr 0x0053B1D6;
	__asm        jmp    near ptr 0x0053B1DB;
	__asm        cmp    errorMsgSoundFullPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0053B20F;
	__asm        mov    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        mov    [ebp-0x23C], eax;
	__asm        mov    eax, [ebp-0x23C];
	__asm        mov    [ebp-0x240], eax;
	__asm        mov    eax, [ebp-0x240];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B214;
	__asm        mov    eax, [ebp-0x12C];
	__asm        jmp    near ptr 0x0053B994;
// LINE 479:
	__asm        mov    eax, availableVehicle;
	__asm        test   byte ptr [eax+8], 2;
	__asm        je     near ptr 0x0053B3F4;
// LINE 483:
	__asm        mov    eax, vehicleListLength;
	__asm        push   eax;
	__asm        mov    eax, vehicleList;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A358;
// LINE 487:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x14], 0;
	__asm        je     near ptr 0x0053B3EF;
// LINE 489:
	__asm        lea    eax, vehicleHeapStruct.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A8A0;
// LINE 493:
	__asm        lea    eax, startGoal2.pRGV;
	__asm        push   eax;
	__asm        lea    eax, startGoal1.pRGV;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, vehicleHeapStruct.pVehicle;
	__asm        mov    ax, [eax+0x7C];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x158];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
	__asm        lea    edi, result.pRGV;
	__asm        mov    esi, eax;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 495:
	__asm        cmp    result.pRGV, 0;
	__asm        jne    near ptr 0x0053B35C;
// LINE 497:
	__asm        lea    eax, destGoal2.pRGV;
	__asm        push   eax;
	__asm        lea    eax, destGoal1.pRGV;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x184];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
// LINE 501:
	__asm        mov    eax, startGoal1.pRGV;
	__asm        mov    al, [eax];
	__asm        mov    startVertex.x, al;
// LINE 502:
	__asm        mov    eax, startGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, startGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    startVertex.yindex, al;
// LINE 504:
	__asm        mov    eax, destGoal1.pRGV;
	__asm        mov    al, [eax];
	__asm        mov    destVert.x, al;
// LINE 505:
	__asm        mov    eax, destGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, destGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    destVert.yindex, al;
// LINE 507:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVert.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, 0x5C37F8;
	__asm        call   0x00543704;
	__asm        mov    pathFound, eax;
// LINE 509:
	__asm        jmp    near ptr 0x0053B363;
// LINE 511:
	__asm        mov    pathFound, 1;
// LINE 516:
	__asm        cmp    pathFound, 0;
	__asm        je     near ptr 0x0053B3EA;
// LINE 519:
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, result.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, destGoal2.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, destGoal1.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, startGoal2.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, startGoal1.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    ecx, vehicleHeapStruct.pVehicle;
	__asm        call   0x00541661;
// LINE 520:
	__asm        jmp    near ptr 0x0053B3EF;
// LINE 522:
	__asm        jmp    near ptr 0x0053B246;
// LINE 524:
	__asm        jmp    near ptr 0x0053B617;
// LINE 528:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A1FB;
// LINE 530:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        je     near ptr 0x0053B617;
// LINE 532:
// Block start:
	struct _StructStation* sS;
	__asm        lea    eax, stationHeapStruct.cost;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x0053A637;
// LINE 537:
	__asm        lea    eax, destGoal1.pRGV;
	__asm        push   eax;
	__asm        lea    eax, destGoal1.pRGV;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, stationHeapStruct.stationID;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    ax, [eax+ecx+0x5A];
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1B0];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
	__asm        lea    edi, result.pRGV;
	__asm        mov    esi, eax;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
// LINE 539:
	__asm        cmp    result.pRGV, 0;
	__asm        jne    near ptr 0x0053B53F;
// LINE 541:
// Block start:
	struct RGVertex* pRGV;
	__asm        lea    eax, destGoal2.pRGV;
	__asm        push   eax;
	__asm        lea    eax, destGoal1.pRGV;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1DC];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
// LINE 545:
	__asm        mov    eax, stationHeapStruct.stationID;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    eax, [eax+ecx];
	__asm        mov    pRGV, eax;
// LINE 546:
	__asm        mov    eax, pRGV;
	__asm        mov    al, [eax];
	__asm        mov    startVertex.x, al;
// LINE 547:
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    startVertex.yindex, al;
// LINE 549:
	__asm        mov    eax, destGoal1.pRGV;
	__asm        mov    al, [eax];
	__asm        mov    destVert.x, al;
// LINE 550:
	__asm        mov    eax, destGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+1];
	__asm        push   ecx;
	__asm        mov    eax, destGoal1.pRGV;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax];
	__asm        push   ecx;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053D167;
	__asm        mov    destVert.yindex, al;
// LINE 552:
	__asm        mov    eax, reinterpret_cast<uint32_t>(destVert.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(startVertex.x);
	__asm        push   eax;
	__asm        mov    ecx, 0x5C37F8;
	__asm        call   0x00543704;
	__asm        mov    pathFound, eax;
// LINE 554:
// Block end:
	__asm        jmp    near ptr 0x0053B546;
// LINE 556:
	__asm        mov    pathFound, 1;
// LINE 561:
	__asm        mov    eax, stationHeapStruct.stationID;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx];
	__asm        mov    sS, eax;
// LINE 562:
	__asm        cmp    pathFound, 0;
	__asm        je     near ptr 0x0053B612;
// LINE 564:
	__asm        mov    eax, sS;
	__asm        inc    dword ptr [eax+0x5C];
// LINE 567:
	__asm        mov    eax, responseLevel;
	__asm        push   eax;
	__asm        mov    eax, responseType;
	__asm        push   eax;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, result.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, stationHeapStruct.stationID;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx];
	__asm        mov    eax, [eax+ecx+0x54];
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(destLoc.x);
	__asm        push   eax;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, destGoal2.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        sub    esp, 0x2C;
	__asm        lea    esi, destGoal1.pRGV;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, sS;
	__asm        mov    ax, [eax+0x5A];
	__asm        push   eax;
	__asm        sub    esp, 0x2C;
	__asm        mov    esi, sS;
	__asm        add    esi, 0x2A;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        sub    esp, 0x2C;
	__asm        mov    esi, sS;
	__asm        mov    edi, esp;
	__asm        mov    ecx, 0xA;
	__asm        rep movsd;
	__asm        movsw;
	__asm        mov    eax, stationHeapStruct.stationID;
	__asm        push   eax;
	__asm        mov    ecx, availableVehicle;
	__asm        call   0x005419BA;
// LINE 568:
	__asm        jmp    near ptr 0x0053B617;
// LINE 570:
// Block end:
	__asm        jmp    near ptr 0x0053B406;
// LINE 573:
	__asm        cmp    pathFound, 0;
	__asm        jne    near ptr 0x0053B8DA;
// LINE 576:
	__asm        push   0x10;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    [ebp-0x220], eax;
	__asm        cmp    dword ptr [ebp-0x220], 0;
	__asm        je     near ptr 0x0053B710;
	__asm        mov    edi, 0x5B80E4;
	__asm        mov    ecx, 0xFFFFFFFF;
	__asm        sub    eax, eax;
	__asm        repne scasb;
	__asm        not    ecx;
	__asm        lea    eax, [ecx-1];
	__asm        mov    ecx, [ebp-0x220];
	__asm        mov    [ecx+4], eax;
	__asm        jmp    near ptr 0x0053B65F;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    eax, [eax+4];
	__asm        mov    ecx, [ebp-0x220];
	__asm        mov    [ecx+8], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        cmp    dword ptr [eax+8], 0;
	__asm        je     near ptr 0x0053B6E1;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    eax, [eax+8];
	__asm        push   eax;
	__asm        call   0x0056A600;
	__asm        add    esp, 4;
	__asm        mov    ecx, [ebp-0x220];
	__asm        mov    [ecx], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    eax, [eax+4];
	__asm        mov    [ebp-0x224], eax;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    eax, [eax];
	__asm        mov    [ebp-0x228], eax;
	__asm        mov    eax, [ebp-0x224];
	__asm        mov    esi, 0x5B80E4;
	__asm        mov    edi, [ebp-0x228];
	__asm        mov    ecx, eax;
	__asm        shr    ecx, 2;
	__asm        rep movsd;
	__asm        mov    ecx, eax;
	__asm        and    ecx, 3;
	__asm        rep movsb;
	__asm        jmp    near ptr 0x0053B6DC;
	__asm        jmp    near ptr 0x0053B6ED;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    dword ptr [eax], 0;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    dword ptr [eax+0xC], 1;
	__asm        jmp    near ptr 0x0053B6FF;
	__asm        mov    eax, [ebp-0x220];
	__asm        mov    [ebp-0x1E0], eax;
	__asm        jmp    near ptr 0x0053B71A;
	__asm        mov    dword ptr [ebp-0x1E0], 0;
	__asm        mov    dword ptr [ebp-0x1E4], 0;
	__asm        jmp    near ptr 0x0053B729;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x1E4];
	__asm        push   eax;
	__asm        push   0;
	__asm        push   2;
	__asm        mov    ecx, 0x604C00;
	__asm        call   0x00494F82;
	__asm        jmp    near ptr 0x0053B74A;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, [ebp-0x1E0];
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053B7B1;
	__asm        mov    eax, [ebp-0x1E0];
	__asm        mov    [ebp-0x1FC], eax;
	__asm        mov    eax, [ebp-0x1FC];
	__asm        mov    [ebp-0x1F8], eax;
	__asm        cmp    dword ptr [ebp-0x1F8], 0;
	__asm        je     near ptr 0x0053B7B1;
	__asm        mov    ecx, [ebp-0x1F8];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053B798;
	__asm        mov    eax, [ebp-0x1F8];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B7AC;
	__asm        jmp    near ptr 0x0053B7B1;
	__asm        jmp    near ptr 0x0053B7B6;
	__asm        cmp    dword ptr [ebp-0x1E4], 0;
	__asm        je     near ptr 0x0053B7EA;
	__asm        mov    eax, [ebp-0x1E4];
	__asm        mov    [ebp-0x1F0], eax;
	__asm        mov    eax, [ebp-0x1F0];
	__asm        mov    [ebp-0x1F4], eax;
	__asm        mov    eax, [ebp-0x1F4];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B7EF;
// LINE 577:
	__asm        push   2;
	__asm        lea    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042F318;
// LINE 578:
	__asm        mov    eax, ds:[0x5C37F0];
	__asm        push   eax;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0042FE2E;
// LINE 579:
	__asm        push   1;
	__asm        push   0;
	__asm        mov    ecx, 0x6351D0;
	__asm        call   0x0043005A;
// LINE 581:
	__asm        mov    dword ptr [ebp-0x1E8], 0x105;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053B891;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        mov    [ebp-0x20C], eax;
	__asm        mov    eax, [ebp-0x20C];
	__asm        mov    [ebp-0x208], eax;
	__asm        cmp    dword ptr [ebp-0x208], 0;
	__asm        je     near ptr 0x0053B891;
	__asm        mov    ecx, [ebp-0x208];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053B878;
	__asm        mov    eax, [ebp-0x208];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B88C;
	__asm        jmp    near ptr 0x0053B891;
	__asm        jmp    near ptr 0x0053B896;
	__asm        cmp    errorMsgSoundFullPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0053B8CA;
	__asm        mov    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        mov    [ebp-0x200], eax;
	__asm        mov    eax, [ebp-0x200];
	__asm        mov    [ebp-0x204], eax;
	__asm        mov    eax, [ebp-0x204];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B8CF;
	__asm        mov    eax, [ebp-0x1E8];
	__asm        jmp    near ptr 0x0053B994;
// LINE 584:
	__asm        mov    dword ptr [ebp-0x1EC], 1;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        dec    dword ptr [eax+0xC];
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        cmp    dword ptr [eax+0xC], 0;
	__asm        jne    near ptr 0x0053B94B;
	__asm        mov    eax, errorMsgSoundFullPath.reference;
	__asm        mov    [ebp-0x21C], eax;
	__asm        mov    eax, [ebp-0x21C];
	__asm        mov    [ebp-0x218], eax;
	__asm        cmp    dword ptr [ebp-0x218], 0;
	__asm        je     near ptr 0x0053B94B;
	__asm        mov    ecx, [ebp-0x218];
	__asm        call   0x0041F4B0;
	__asm        jmp    near ptr 0x0053B932;
	__asm        mov    eax, [ebp-0x218];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B946;
	__asm        jmp    near ptr 0x0053B94B;
	__asm        jmp    near ptr 0x0053B950;
	__asm        cmp    errorMsgSoundFullPath.c_str_ptr, 0;
	__asm        je     near ptr 0x0053B984;
	__asm        mov    eax, errorMsgSoundFullPath.c_str_ptr;
	__asm        mov    [ebp-0x210], eax;
	__asm        mov    eax, [ebp-0x210];
	__asm        mov    [ebp-0x214], eax;
	__asm        mov    eax, [ebp-0x214];
	__asm        push   eax;
	__asm        call   0x0056A740;
	__asm        add    esp, 4;
	__asm        jmp    near ptr 0x0053B989;
	__asm        mov    eax, [ebp-0x1EC];
	__asm        jmp    near ptr 0x0053B994;
// LINE 585:
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    0x18;
}

// FUNCTION: COPTER_D 0x0053b99b
// $E36

// FUNCTION: COPTER_D 0x0053b9b5
void Station::Station(unsigned char stationScurkID) {
	int32_t stationIndex;
	int32_t y;
	int32_t x;
	unsigned char * tempBuildMap;
	struct _GridCoordinates workingLoc;

// LINE 591:
	__asm        push   ebp;
	__asm        mov    ebp, esp;
	__asm        sub    esp, 0x54;
	__asm        push   ebx;
	__asm        push   esi;
	__asm        push   edi;
	__asm        mov    this, ecx;
// LINE 594:
	__asm        mov    tempBuildMap, 0x5C3AB0;
// LINE 596:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+4], 0;
// LINE 599:
	__asm        mov    y, 0;
	__asm        jmp    near ptr 0x0053B9E1;
	__asm        inc    y;
	__asm        cmp    y, 0x80;
	__asm        jge    near ptr 0x0053BA33;
// LINE 601:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053B9FD;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BA2E;
// LINE 603:
	__asm        mov    eax, x;
	__asm        mov    eax, [eax*4+0x639850];
	__asm        mov    ecx, y;
	__asm        mov    al, [eax+ecx];
	__asm        mov    ecx, y;
	__asm        shl    ecx, 7;
	__asm        add    ecx, x;
	__asm        mov    edx, tempBuildMap;
	__asm        mov    [ecx+edx], al;
// LINE 604:
	__asm        jmp    near ptr 0x0053B9FA;
// LINE 605:
	__asm        jmp    near ptr 0x0053B9DE;
// LINE 610:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BA42;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BB5D;
// LINE 612:
	__asm        mov    y, 0;
	__asm        jmp    near ptr 0x0053BA5E;
	__asm        inc    y;
	__asm        cmp    y, 0x80;
	__asm        jge    near ptr 0x0053BB58;
// LINE 614:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        xor    eax, eax;
	__asm        mov    al, stationScurkID;
	__asm        cmp    edx, eax;
	__asm        jne    near ptr 0x0053BB53;
// LINE 618:
// Block start:
	int32_t result;
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+1], 0;
// LINE 619:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+2], 0;
// LINE 621:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x80], 0;
// LINE 622:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x81], 0;
// LINE 623:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x82], 0;
// LINE 625:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x100], 0;
// LINE 626:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x101], 0;
// LINE 627:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        mov    byte ptr [eax+ecx+0x102], 0;
// LINE 631:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    workingLoc.x, al;
// LINE 632:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        mov    workingLoc.y, al;
// LINE 633:
	__asm        lea    eax, workingLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00539DA3;
	__asm        mov    result, eax;
// LINE 634:
	__asm        cmp    result, 0xFF;
	__asm        je     near ptr 0x0053BB53;
// LINE 635:
	__asm        mov    eax, this;
	__asm        inc    dword ptr [eax+4];
// LINE 637:
// Block end:
	__asm        jmp    near ptr 0x0053BA5B;
// LINE 638:
	__asm        jmp    near ptr 0x0053BA3F;
// LINE 641:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        push   eax;
	__asm        mov    eax, ds:[0x647200];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx], eax;
// LINE 644:
	__asm        mov    stationIndex, 0;
// LINE 645:
	__asm        mov    y, 0;
	__asm        jmp    near ptr 0x0053BB93;
	__asm        inc    y;
	__asm        cmp    y, 0x80;
	__asm        jge    near ptr 0x0053BC81;
// LINE 647:
	__asm        mov    x, 0;
	__asm        jmp    near ptr 0x0053BBAF;
	__asm        inc    x;
	__asm        cmp    x, 0x80;
	__asm        jge    near ptr 0x0053BC7C;
// LINE 649:
	__asm        mov    eax, y;
	__asm        shl    eax, 7;
	__asm        add    eax, x;
	__asm        mov    ecx, tempBuildMap;
	__asm        xor    edx, edx;
	__asm        mov    dl, [eax+ecx];
	__asm        xor    eax, eax;
	__asm        mov    al, stationScurkID;
	__asm        cmp    edx, eax;
	__asm        jne    near ptr 0x0053BC77;
// LINE 654:
// Block start:
	struct _StructStation* pStation;
	int32_t direction;
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    workingLoc.x, al;
// LINE 655:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        mov    workingLoc.y, al;
// LINE 658:
	__asm        lea    eax, workingLoc.x;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   0x00539DA3;
	__asm        mov    direction, eax;
// LINE 661:
	__asm        cmp    direction, 0xFF;
	__asm        jne    near ptr 0x0053BC09;
// LINE 662:
	__asm        jmp    near ptr 0x0053BBAC;
// LINE 665:
	__asm        mov    eax, stationIndex;
	__asm        shl    eax, 5;
	__asm        lea    eax, [eax+eax*2];
	__asm        mov    ecx, this;
	__asm        add    eax, [ecx];
	__asm        mov    pStation, eax;
	__asm        inc    stationIndex;
// LINE 668:
	__asm        mov    eax, pStation;
	__asm        add    eax, 0x2A;
	__asm        push   eax;
	__asm        mov    eax, pStation;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(workingLoc.x);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(workingLoc.x);
	__asm        push   eax;
	__asm        lea    eax, [ebp-0x4C];
	__asm        push   eax;
	__asm        mov    ecx, 0x5C3828;
	__asm        call   0x0053C998;
// LINE 673:
	__asm        mov    eax, x;
	__asm        inc    eax;
	__asm        mov    ecx, pStation;
	__asm        mov    [ecx+0x58], al;
// LINE 674:
	__asm        mov    eax, y;
	__asm        inc    eax;
	__asm        mov    ecx, pStation;
	__asm        mov    [ecx+0x59], al;
// LINE 675:
	__asm        mov    al, workingLoc.x;
	__asm        mov    ecx, pStation;
	__asm        mov    [ecx+0x5A], al;
// LINE 676:
	__asm        mov    al, workingLoc.y;
	__asm        mov    ecx, pStation;
	__asm        mov    [ecx+0x5B], al;
// LINE 677:
	__asm        mov    eax, pStation;
	__asm        mov    dword ptr [eax+0x5C], 0;
// LINE 678:
	__asm        mov    eax, direction;
	__asm        mov    ecx, pStation;
	__asm        mov    [ecx+0x54], eax;
// LINE 680:
// Block end:
	__asm        jmp    near ptr 0x0053BBAC;
// LINE 681:
	__asm        jmp    near ptr 0x0053BB90;
// LINE 683:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+4];
	__asm        shl    eax, 3;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x647200];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+8], eax;
// LINE 686:
	__asm        xor    eax, eax;
	__asm        mov    al, stationScurkID;
	__asm        mov    [ebp-0x54], eax;
	__asm        jmp    near ptr 0x0053BCDE;
// LINE 688:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 5;
	__asm        jmp    near ptr 0x0053BD0A;
// LINE 689:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 5;
	__asm        jmp    near ptr 0x0053BD0A;
// LINE 690:
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax+0x18], 5;
	__asm        jmp    near ptr 0x0053BD0A;
// LINE 691:
	__asm        jmp    near ptr 0x0053BD0A;
	__asm        cmp    dword ptr [ebp-0x54], 0xD1;
	__asm        je     near ptr 0x0053BCAC;
	__asm        cmp    dword ptr [ebp-0x54], 0xD2;
	__asm        je     near ptr 0x0053BCBB;
	__asm        cmp    dword ptr [ebp-0x54], 0xD3;
	__asm        je     near ptr 0x0053BCCA;
	__asm        jmp    near ptr 0x0053BD0A;
// LINE 693:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x18];
	__asm        lea    eax, [eax+eax*4];
	__asm        add    eax, eax;
	__asm        push   eax;
	__asm        mov    eax, ds:[0x647200];
	__asm        push   eax;
	__asm        call   0x004CB4AC;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x10], eax;
// LINE 694:
	__asm        jmp    near ptr 0x0053BD2F;
	__asm        mov    eax, this;
	__asm        pop    edi;
	__asm        pop    esi;
	__asm        pop    ebx;
	__asm        leave;
	__asm        ret    4;
}



// Contribution: 3:00021078-000210ec Module: 156, 4 byte alignment, initialized_data, read, write, 


// Contribution: 3:0009e1d0-0009e24c Module: 156, 8 byte alignment, uninitialized_data, read, write, 
// LOCAL: COPTER_D 0x0063524c
// ?$S35@?1??DispatchNearestAvailableVehicle@Station@@QAEHJJW4EmergencyType@@W4EmergencyLevel@@PAPAVEmergencyVehicleClass@@H@Z@4EA
