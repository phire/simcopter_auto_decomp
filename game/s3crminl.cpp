// Module: S3crminl.obj
// Source: C:\Copter\source\game\S3crminl.cpp
// autogenerated by simcopter_tool from PDB file

// Type: class CriminalEvaderCarClass (forward reference);
// VTABLE: COPTER_D 0x00593258
class CriminalEvaderCarClass : public AutomobileClass
{
public:
	static class CriminalEvaderCarClass *criminalCars[0];
	enum MissionState {
		CRUISING = 0,
		SEARCHING = 1,
		ON_THE_RUN = 2,
		OUT_OF_CAR = 3,
		MISSION_OVER = 4,
	};
	enum CriminalType {
		BURGLAR = 0,
		DRUG_PUSHER = 1,
		SNIPER = 2,
		ARSONIST = 3,
		TERRORIST = 4,
	};
protected:
	enum CriminalEvaderCarClass::MissionState missionState;
	enum CriminalEvaderCarClass::CriminalType criminalType;
	int32_t timeToLeaveCar;
	int32_t timeToBeOnTheRun;
	static int32_t baseTimeBetweenCriminalActivities;
	static int32_t maxTimeBetweenCriminalActivities;
	static int32_t constantTimeToBeOnTheRun;
	static int32_t evasionSpeedMultiplier;
	static short maxSearchForBuildingRadius;
	static int32_t curCriminalCars;
public:
	void CriminalEvaderCarClass(const class CriminalEvaderCarClass&);
	void CriminalEvaderCarClass();
	virtual void ~CriminalEvaderCarClass() /* override */;
	// calltype: NearC
	static class CriminalEvaderCarClass* CreateInstance(int32_t);
	// calltype: NearC
	static int32_t StartCriminalMission(short, short, long, long);
protected:
	virtual void AdjustSpeed() /* override */;
	virtual void BeamToWithinCameraRange() /* override */;
	virtual void ItterateFSM() /* override */;
	virtual void PullOver(short) /* override */;
	virtual void SetSaveData(struct _AUTO_LOAD_SAVE*) /* override */;
	virtual void LoadSaveData(struct _AUTO_LOAD_SAVE*) /* override */;
	int32_t AtScene();
	int32_t NearToBuilding();
public:
	class CriminalEvaderCarClass operator=(const class CriminalEvaderCarClass&);
private:
	void ShowWhereWeAre();
};

// Type: int32_t;

// Type: short;

// Type: long;

// Type: void;

// Type: struct _MISSION_PARMS;
struct _MISSION_PARMS{
	long op;
	long id;
	struct Point2d maploc;
	long i2num;
	long flags;
};

// Type: struct _GridCoordinates;
struct _GridCoordinates{
	unsigned char x;
	unsigned char y;
};

// Type: struct Point3d;
struct Point3d{
	int32_t x;
	int32_t y;
	int32_t z;
};

// Type: class SpiralScan;
class SpiralScan{
public:
	void SpiralScan(int32_t);
	void ~SpiralScan();
	int32_t Next(struct _GridCoordinates&);
	int32_t InCityGridLimits(struct _GridCoordinates);
private:
	int32_t currDist;
	int32_t currDir;
	int32_t currDia;
	int32_t maxDia;
};

// Type: unsigned short;

// Type: struct _AUTO_LOAD_SAVE (forward reference);
struct _AUTO_LOAD_SAVE{
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
	struct _GridCoordinates goalpRGVFixup;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
	int32_t speed;
	long prevDir;
	long turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d *pDirVector;
	int32_t personDone;
	int32_t personState;
	int32_t personTimer;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _GridCoordinates cptrfixup;
	int32_t spotlightHitCounter;
	struct _AUTO_LOAD_SAVE::_CRIMINAL{
		long missionState;
		long criminalType;
		int32_t timeToLeaveCar;
		int32_t timeToBeOnTheRun;
	};
public:
	struct _AUTO_LOAD_SAVE::_CRIMINAL c;
	struct _AUTO_LOAD_SAVE::_EMERGENCY{
		struct _GridCoordinates baseLocation;
		struct _GridCoordinates emergencyLocation;
		long emergencyType;
		long timeOfArrival;
		struct _DYOBJ_INST dispatchIcon;
		int32_t timeToEmergency;
		long targetfixup;
		unsigned char dispatchPath[256];
		unsigned char dispatchPathIndex;
		unsigned char dispatchPathLength;
		long emergencyState;
		int32_t stationID;
		int32_t numberOfSeats;
	};
public:
	struct _AUTO_LOAD_SAVE::_EMERGENCY e;
	struct _AUTO_LOAD_SAVE::_FIRE{
		int32_t dousingFire;
		int32_t distToFire;
		struct Point3d firevec;
		int32_t pathID;
	};
public:
	struct _AUTO_LOAD_SAVE::_FIRE f;
	struct _AUTO_LOAD_SAVE::_POLICE{
		struct Goal currDestGoal;
		struct _GridCoordinates currpRGVFixup;
		struct Goal destGoal1;
		struct _GridCoordinates dest1pRGVFixup;
		struct Goal destGoal2;
		struct _GridCoordinates dest2pRGVFixup;
		int32_t foundRoad;
	};
public:
	struct _AUTO_LOAD_SAVE::_POLICE p;
};

// Type: uint32_t;

// Type: class AutomobileClass;
// VTABLE: COPTER_D 0x00592d98
class AutomobileClass{
	enum /* __unnamed */ {
		CAR_TYPES = 7,
		PERCENTAGE_OF_AUTO1 = 10,
		PERCENTAGE_OF_AUTO2 = 20,
		PERCENTAGE_OF_AUTO3 = 20,
		PERCENTAGE_OF_AUTO4 = 10,
		PERCENTAGE_OF_AUTO5 = 10,
		PERCENTAGE_OF_AUTO6 = 20,
		PERCENTAGE_OF_AUTO7 = 20,
		TOTAL_PERCENTAGE = 110,
	};
	enum /* __unnamed */ {
		NO_X_POSITION = -1,
		STARTING_X = 3,
		ENDING_X = 125,
		NO_Y_POSITION = -1,
		STARTING_Y = 3,
		ENDING_Y = 125,
	};
	enum IntersectionTypes {
		DEAD_END = 0,
		STRAIGHT_AHEAD = 1,
		LEFT_ONLY = 2,
		RIGHT_ONLY = 4,
		LEFT_OR_STRAIGHT = 3,
		LEFT_OR_RIGHT = 6,
		RIGHT_OR_STRAIGHT = 5,
		LEFT_STRAIGHT_OR_RIGHT = 7,
		DEAD_END_HIWAY = 16,
	};
	enum StoppedReasons {
		NO_REASON = 0,
		TRAFFIC = 1,
		STOPPED_TRAFFIC = 2,
		PERSON_IN_WAY = 3,
		AUTO_IN_WAY = 4,
		DEBRIS_IN_WAY = 5,
		UNIDENTIFIED_IN_WAY = 6,
		HELI_IN_WAY = 7,
		END_OF_ROAD = 8,
		END_OF_HIWAY = 9,
		INTERSECTION_FULL = 10,
		BEEN_PULLED_OVER = 11,
	};
	enum RoadTileOffsets {
		RD_CENTOFF = 851968,
		RD_EDGEOFF = 131072,
	};
	enum HiwayOffsets {
		HW_CENTOFF_LANE1 = 851968,
		HW_EDGEOFF_LANE1 = 131072,
		HW_CENTOFF_LANE2 = 851968,
		HW_EDGEOFF_LANE2 = 131072,
		HW_HEIGHT = 2031616,
	};
	enum PersonState {
		PS_IN_VEHICLE = 0,
		PS_OUT_OF_VEHICLE = 1,
		PS_BACK_IN_VEHICLE = 2,
		PS_GOT_AWAY = 3,
		PS_MISSION_OVER = 4,
	};
	enum /* __unnamed */ {
		CAR_RADIUS = 327680,
		COLLISION_SPACE = 655360,
		ROAD_SPEED = 2621440,
		ROAD_SLOWDOWN_FACTOR = 131072,
		HIWAY_SPEED = 6225920,
		HIWAY_SLOWDOWN_FACTOR = 327680,
		SPEED_VARIANCE = 262144,
		HIWAY_VARIANCE = 655360,
		MAX_TIME_TO_WAIT_FOR_TRAFFIC = 1310720,
		MAX_TIME_TO_WAIT_PULLED_OVER = 196608,
		MAX_TIME_TO_WAIT_BEFORE_BEAMING = 235,
	};
	enum Flags {
		AUTO_INITIALIZED = 1,
		AUTO_PLACED = 2,
		AUTO_TURNING = 4,
		AUTO_MAKING_UTURN = 8,
		AUTO_PULL_OVER = 16,
		AUTO_PULLING_OVER = 32,
		AUTO_PULLED_OVER = 64,
		AUTO_AT_DEAD_END = 128,
		AUTO_IN_INTERSECTION = 256,
		AUTO_ON_FIRE = 512,
		AUTO_JAMMED = 1024,
		AUTO_PULLING_OUT = 2048,
		AUTO_RIGHT_OF_WAY = 4096,
		AUTO_ON_HIWAY = 8192,
	};
public:
	int32_t flags;
	struct _DYOBJ_INST autoDynomitor;
	struct Goal goal;
private:
	static struct Point2d lastScannedLocation;
	int32_t DeltaFromCenter;
	int32_t stalledTimer;
	struct Point3d directionVector;
	int32_t remainingTime;
	int32_t desiredSpeed;
	int32_t desiredHiwaySpeed;
	int32_t beamDelay;
	int32_t beamTimer;
	int32_t m_cellBaseY;
	int32_t timePulledOver;
	enum DirectionTypes hiwaydir;
	struct _GridCoordinates currentLocation;
	struct _GridCoordinates nextLocation;
	struct _GridCoordinates northCell;
	struct _GridCoordinates southCell;
	struct _GridCoordinates eastCell;
	struct _GridCoordinates westCell;
protected:
	long carModel;
	int32_t speed;
	enum DirIndex2 prevDir;
	enum TurnIndex turnIndex;
	int32_t currDist;
	int32_t legOfTurn;
	struct Point3d *pDirVector;
	int32_t timeToLive;
	int32_t fireTime;
	long fireSeq;
	long missionId;
	struct _CELL_INFO *cptr;
	enum AutomobileClass::PersonState personState;
	int32_t spotlightHitCounter;
	int32_t IsCarPersistant();
	int32_t CanCarBeamToHiwayTile(unsigned short);
public:
	void AutomobileClass(const class AutomobileClass&);
	void AutomobileClass();
	virtual void ~AutomobileClass(); // vtable+0x0
	// calltype: NearC
	static class AutomobileClass* CreateInstance(int32_t);
	// calltype: NearC
	static class AutomobileClass* GetAutoPointer(long);
	// calltype: NearC
	static void DestroyInstance(class AutomobileClass*);
	// calltype: NearC
	static void ItterateAll();
	// calltype: NearC
	static void ResetAll();
	// calltype: NearC
	static int32_t MissionStartFire(long, struct Point2d*);
	// calltype: NearC
	static int32_t MissionStartJam(long, struct Point2d*);
	// calltype: NearC
	static void MissionCancel(long);
	// calltype: NearC
	static void SetAllHeadlights(int32_t);
	void HitDispatch(long, struct _DYOBJ_INST*, long, long);
	int32_t AmIABadGuy();
	int32_t Initialize(int32_t);
	void WaterDouse(struct _DYOBJ_INST*);
	void IveBeenMegaphoned(long);
	void StartFire(long);
	void StartJam(long);
	void PullOver();
	void PullOut();
	int32_t CanIPullOut();
protected:
	void Itterate();
	virtual void AdjustSpeed(); // vtable+0x4
	void Reset();
	virtual enum TurnIndex PickTurnDir(struct Goal*); // vtable+0x8
	void UnPlaceCar();
	void PullOverCiviliansInWay();
	virtual void ItterateFSM(); // vtable+0xc
	int32_t InitializeInstance(int32_t);
	void LinkToCell(const struct _GridCoordinates&);
	int32_t AreCarsHeadOn(struct Point3d*);
	enum AutomobileClass::StoppedReasons CollisionCheck(int32_t, struct _DYOBJ_INST**);
	int32_t IsCarOutOfCameraRange();
	void TurnOffHeadlight();
	void TurnOnHeadlight();
	void SetHiwayDirection(unsigned short);
	int32_t DoHiwayTilesConnect(unsigned short, unsigned short, enum DirectionTypes);
	void AdjustCurrentHiwayPosition();
	void AdjustNextHiwayPosition();
	enum AutomobileClass::IntersectionTypes PickHiwayDir(struct _GridCoordinates&);
	void MakeAHiwayTurn(enum AutomobileClass::IntersectionTypes);
	void GoStraight();
	void TurnLeft();
	void TurnRight();
	void MoveForwardOnHiway();
	void DoDiagonalRoadFixup();
	virtual void BeamToWithinCameraRange(); // vtable+0x10
	virtual int32_t BeamToLocation(const struct _GridCoordinates&); // vtable+0x14
	void MoveAuto(int32_t);
private:
	void UnlinkFromCell(const struct _GridCoordinates&);
	void TransitionBetweenGoals();
	void RunFireState();
	void RunJamState();
	void IveBeenSpotlighted(struct _DYOBJ_INST*);
	int32_t IsThisAnEmergencyVehicle();
public:
	class AutomobileClass operator=(const class AutomobileClass&);
};



// Contribution: 1:001339c0-0013483c Module: 161, 16 byte alignment, code, execute, read, 
// FUNCTION: COPTER_D 0x005349c0
int32_t CreateCriminalCarInstance(int32_t instanceID) {
// LINE 82:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        call   CriminalEvaderCarClass::CreateInstance;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        je     _T24;

	__asm        mov    eax, 1;
	__asm        jmp    _T26;
_T24:
	__asm        xor    eax, eax;
_T26:
	__asm        jmp    near ptr 0x005349EB;
// LINE 83:
}

// FUNCTION: COPTER_D 0x005349f0
int32_t S3CriminalMissionStart(short mID, short mType, long x, long y) {
// LINE 88:
	__asm        mov    eax, y;
	__asm        push   eax;
	__asm        mov    eax, x;
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(mType);
	__asm        push   eax;
	__asm        mov    eax, reinterpret_cast<uint32_t>(mID);
	__asm        push   eax;
	__asm        call   CriminalEvaderCarClass::StartCriminalMission;
	__asm        add    esp, 0x10;
	__asm        jmp    near ptr 0x00534A13;
// LINE 89:
}

// FUNCTION: COPTER_D 0x00534a18
void CriminalEvaderCarClass::CriminalEvaderCarClass() {

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::AutomobileClass;
	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593258;
// LINE 98:
	this->flags = 0x11e;
// LINE 99:
	__asm        jmp    near ptr 0x00534A44;

	__asm        mov    eax, this;
}

// FUNCTION: COPTER_D 0x00534a4c
void CriminalEvaderCarClass::~CriminalEvaderCarClass() {

	__asm        mov    eax, this;
	__asm        mov    dword ptr [eax], 0x593258;
	__asm        jmp    near ptr 0x00534A66;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::~AutomobileClass;
}

// FUNCTION: COPTER_D 0x00534a73
class CriminalEvaderCarClass* CriminalEvaderCarClass::CreateInstance(int32_t instanceID) {
	class CriminalEvaderCarClass *youveWonABrandNewCar;

// LINE 127:
	__asm        push   0x12A;
	__asm        call   operator new;
	__asm        add    esp, 4;
	__asm        mov    [ebp-8], eax;
	__asm        cmp    dword ptr [ebp-8], 0;
	__asm        je     _T33;

	__asm        mov    ecx, [ebp-8];
	__asm        call   CriminalEvaderCarClass::CriminalEvaderCarClass;
	__asm        mov    youveWonABrandNewCar, eax;
	__asm        jmp    _T3a;
_T33:
	youveWonABrandNewCar = 0x0;
// LINE 130:
_T3a:
	__asm        cmp    youveWonABrandNewCar, 0;
	__asm        je     _Ta2;
// LINE 133:
	__asm        mov    eax, instanceID;
	__asm        push   eax;
	__asm        mov    ecx, youveWonABrandNewCar;
	__asm        call   AutomobileClass::Initialize;
	__asm        test   eax, eax;
	__asm        je     _T7b;
// LINE 135:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    ecx, CriminalEvaderCarClass::curCriminalCars;
	__asm        mov    CriminalEvaderCarClass::criminalCars[0][ecx*4], eax;
	__asm        inc    CriminalEvaderCarClass::curCriminalCars;
// LINE 138:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        jmp    _Ta9;
// LINE 140:
	__asm        jmp    _Ta2;
// LINE 143:
_T7b:
	__asm        mov    eax, youveWonABrandNewCar;
	__asm        mov    [ebp-0x10], eax;
	__asm        mov    eax, [ebp-0x10];
	__asm        mov    [ebp-0xC], eax;
	__asm        cmp    dword ptr [ebp-0xC], 0;
	__asm        je     _Ta2;

	__asm        push   1;
	__asm        mov    eax, [ebp-0xC];
	__asm        mov    eax, [eax];
	__asm        mov    ecx, [ebp-0xC];
	__asm        call   dword ptr [eax];
	__asm        jmp    _Ta2;
// LINE 149:
_Ta2:
	__asm        xor    eax, eax;
	__asm        jmp    _Ta9;
// LINE 150:
_Ta9:
}

// FUNCTION: COPTER_D 0x00534b21
int32_t CriminalEvaderCarClass::StartCriminalMission(short mID, short mType, long x, long y) {
	struct _MISSION_PARMS mp;
	int32_t i;
	struct _GridCoordinates startLoc;

// LINE 159:
	startLoc.x = reinterpret_cast<uint8_t>(x);
// LINE 160:
	startLoc.y = reinterpret_cast<uint8_t>(y);
// LINE 165:
	__asm        mov    i, 0;
	__asm        jmp    _T24;
_T21:
	__asm        inc    i;
_T24:
	__asm        cmp    i, 5;
	__asm        jge    _T118;
// LINE 167:
	__asm        mov    eax, i;
	__asm        mov    eax, CriminalEvaderCarClass::criminalCars[0][eax*4];
	__asm        test   byte ptr [eax+8], 2;
	__asm        jne    _T113;
// LINE 170:
	__asm        lea    eax, startLoc.x;
	__asm        push   eax;
	__asm        mov    eax, i;
	__asm        mov    ecx, CriminalEvaderCarClass::criminalCars[0][eax*4];
	__asm        call   AutomobileClass::BeamToLocation;
	__asm        test   eax, eax;
	__asm        je     _T10c;
// LINE 175:
	mp.op = 0xa;
// LINE 176:
	__asm        movsx  eax, mID;
	__asm        mov    mp.id, eax;
// LINE 180:
	__asm        mov    eax, i;
	__asm        mov    eax, CriminalEvaderCarClass::criminalCars[0][eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    mp.maploc.x, ecx;
// LINE 181:
	__asm        mov    eax, i;
	__asm        mov    eax, CriminalEvaderCarClass::criminalCars[0][eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    mp.maploc.y, ecx;
// LINE 182:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 185:
	__asm        movsx  eax, mID;
	__asm        mov    ecx, i;
	__asm        mov    ecx, CriminalEvaderCarClass::criminalCars[0][ecx*4];
	__asm        mov    [ecx+0x10E], eax;
// LINE 186:
	__asm        mov    eax, i;
	__asm        mov    eax, CriminalEvaderCarClass::criminalCars[0][eax*4];
	__asm        mov    dword ptr [eax+0x11A], 0;
// LINE 187:
	__asm        movsx  eax, mType;
	__asm        mov    ecx, i;
	__asm        mov    ecx, CriminalEvaderCarClass::criminalCars[0][ecx*4];
	__asm        mov    [ecx+0x11E], eax;
// LINE 189:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   CriminalEvaderCarClass::maxTimeBetweenCriminalActivities;
	__asm        mov    eax, CriminalEvaderCarClass::baseTimeBetweenCriminalActivities;
	__asm        add    eax, edx;
	__asm        mov    ecx, i;
	__asm        mov    ecx, CriminalEvaderCarClass::criminalCars[0][ecx*4];
	__asm        mov    [ecx+0x122], eax;
// LINE 190:
	__asm        mov    eax, 1;
	__asm        jmp    _T11f;
// LINE 192:
	__asm        jmp    _T113;
// LINE 193:
_T10c:
	__asm        xor    eax, eax;
	__asm        jmp    _T11f;
// LINE 195:
_T113:
	__asm        jmp    _T21;
// LINE 198:
_T118:
	__asm        xor    eax, eax;
	__asm        jmp    _T11f;
// LINE 199:
_T11f:
}

// FUNCTION: COPTER_D 0x00534c45
void CriminalEvaderCarClass::ItterateFSM() {
	struct _MISSION_PARMS mp;

// LINE 209:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11A];
	__asm        mov    [ebp-0x68], eax;
	__asm        jmp    _T4b7;
// LINE 212:
	__asm        mov    ecx, this;
	__asm        call   CriminalEvaderCarClass::ShowWhereWeAre;
// LINE 214:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        je     _T141;
// LINE 216:
	this->timeToLeaveCar = 0x2;
// LINE 218:
	__asm        push   0x30;
	__asm        call   S3SoundIsPlaying;
	__asm        add    esp, 4;
	__asm        test   eax, eax;
	__asm        jne    _T13c;
// LINE 222:
// Block start:
	struct Point3d loc;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x24];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.x, eax;
// LINE 223:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x28];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+4];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.y, eax;
// LINE 224:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x2C];
	__asm        mov    ecx, this;
	__asm        mov    ecx, [ecx+0xF2];
	__asm        mov    ecx, [ecx+8];
	__asm        shl    ecx, 4;
	__asm        sub    eax, ecx;
	__asm        mov    loc.z, eax;
// LINE 226:
	__asm        push   0;
	__asm        mov    eax, this;
	__asm        add    eax, 0x24;
	__asm        push   eax;
	__asm        push   0x30;
	__asm        call   S3DSPlay;
	__asm        add    esp, 0xC;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    [ebp-0x5C], ecx;
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    [ebp-0x60], ecx;
// LINE 227:
	__asm        mov    eax, [ebp-0x60];
	__asm        and    eax, 0xFF;
	__asm        shl    eax, 0xA;
	__asm        mov    ecx, [ebp-0x5C];
	__asm        and    ecx, 0xFF;
	__asm        mov    eax, G_omap[0][0][eax+ecx*4];
	__asm        mov    [ebp-0x58], eax;
	__asm        cmp    dword ptr [ebp-0x58], 0;
	__asm        jne    _T10e;

	__asm        push   0xA0;
	__asm        push   0x5B57C4;
	__asm        push   0x5B57B8;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T113;
_T10e:
	__asm        jmp    _T113;
_T113:
	__asm        jmp    near ptr 0x00534D5D;

	reinterpret_cast<uint32_t>(this->missionID) = None;
// LINE 228:
	__asm        push   6;
	__asm        lea    eax, loc.x;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x112];
	__asm        push   eax;
	__asm        call   S3ExplosionSmokeStart;
	__asm        add    esp, 0xC;
// LINE 230:
// Block end:
_T13c:
	__asm        jmp    _T4df;
// LINE 233:
_T141:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x122], 0;
	__asm        jge    _T182;
// LINE 235:
	this->timeToLeaveCar = 0x1;
// LINE 236:
	__asm        call   rand;
	__asm        movsx  eax, ax;
	__asm        cdq;
	__asm        idiv   CriminalEvaderCarClass::maxTimeBetweenCriminalActivities;
	__asm        mov    eax, CriminalEvaderCarClass::baseTimeBetweenCriminalActivities;
	__asm        add    eax, edx;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0x122], eax;
// LINE 238:
	__asm        jmp    _T195;
// LINE 240:
_T182:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x122], eax;
// LINE 243:
_T195:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 244:
	__asm        jmp    _T4df;
// LINE 247:
	__asm        mov    ecx, this;
	__asm        call   CriminalEvaderCarClass::ShowWhereWeAre;
// LINE 249:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        je     _T1cc;
// LINE 251:
	this->timeToLeaveCar = 0x2;
// LINE 253:
	__asm        jmp    _T2a5;
_T1cc:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x30;
	__asm        jne    _T20b;

	__asm        mov    ecx, this;
	__asm        call   CriminalEvaderCarClass::NearToBuilding;
	__asm        test   eax, eax;
	__asm        je     _T20b;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOver;
	__asm        test   eax, eax;
	__asm        je     _T20b;
// LINE 255:
	__asm        push   0xFFFFFFFF;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax];
	__asm        mov    ecx, this;
	__asm        call   dword ptr [eax+4];
// LINE 257:
	__asm        jmp    _T2a5;
_T20b:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T2a5;
// LINE 259:
	__asm        push   0xA;
	__asm        push   0xF;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T258;
// LINE 261:
	this->timeToLeaveCar = 0x3;
// LINE 262:
	this->fireTime = 0x0;
// LINE 263:
	this->missionId = 0x780000;
// LINE 265:
	__asm        jmp    _T2a0;
// LINE 269:
// Block start:
	struct _MISSION_PARMS mp;
_T258:
	__asm        push   0x10D;
	__asm        push   0x5B7CC0;
	__asm        push   0x5B7CE4;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T279;

	__asm        jmp    _T279;
// LINE 270:
_T279:
	mp.op = 0x1d;
// LINE 271:
	mp.i2num = 0x8;
// LINE 272:
	mp.id = this->missionState;
// LINE 274:
	this->timeToLeaveCar = 0x4;
// LINE 277:
// Block end:
_T2a0:
	__asm        jmp    _T4e4;
// LINE 280:
_T2a5:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 281:
	__asm        jmp    _T4df;
// LINE 289:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0xFE], eax;
// LINE 291:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xF6], 0;
	__asm        jne    _T2e5;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFE], 0;
	__asm        jg     _T368;
// LINE 293:
_T2e5:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0xFA], 0;
	__asm        jne    _T321;
// LINE 295:
	mp.op = 0x1d;
// LINE 296:
	mp.i2num = 0x8;
// LINE 297:
	mp.id = this->missionState;
// LINE 299:
	this->timeToLeaveCar = 0x4;
// LINE 300:
	__asm        jmp    _T4e4;
// LINE 304:
_T321:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T346;

	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::CanIPullOut;
	__asm        test   eax, eax;
	__asm        je     _T346;
// LINE 306:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOut;
// LINE 310:
_T346:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x60;
	__asm        jne    _T360;
// LINE 313:
	this->timeToLeaveCar = 0x0;
// LINE 316:
_T360:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 319:
_T368:
	__asm        jmp    _T4df;
// LINE 322:
	__asm        mov    ecx, this;
	__asm        call   CriminalEvaderCarClass::ShowWhereWeAre;
// LINE 323:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOverCiviliansInWay;
// LINE 326:
	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x20;
	__asm        je     _T427;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        je     _T427;
// LINE 328:
	__asm        push   0xA;
	__asm        push   0xF;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PlacePerson;
	__asm        test   eax, eax;
	__asm        je     _T3da;
// LINE 330:
	this->timeToLeaveCar = 0x3;
// LINE 331:
	this->fireTime = 0x0;
// LINE 332:
	this->missionId = 0x780000;
// LINE 334:
	__asm        jmp    _T422;
// LINE 338:
// Block start:
	struct _MISSION_PARMS mp;
_T3da:
	__asm        push   0x152;
	__asm        push   0x5B7CEC;
	__asm        push   0x5B7D10;
	__asm        call   _assert;
	__asm        add    esp, 0xC;
	__asm        jmp    _T3fb;

	__asm        jmp    _T3fb;
// LINE 339:
_T3fb:
	mp.op = 0x1d;
// LINE 340:
	mp.i2num = 0x8;
// LINE 341:
	mp.id = this->missionState;
// LINE 343:
	this->timeToLeaveCar = 0x4;
// LINE 346:
// Block end:
_T422:
	__asm        jmp    _T4df;
// LINE 351:
_T427:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        je     _T44a;
// LINE 352:
	this-><CriminalEvaderCarClass+0x126> = CriminalEvaderCarClass::constantTimeToBeOnTheRun;
// LINE 354:
	__asm        jmp    _T48d;
_T44a:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x126], 0;
	__asm        jge    _T47a;
// LINE 356:
	this-><CriminalEvaderCarClass+0x126> = CriminalEvaderCarClass::constantTimeToBeOnTheRun;
// LINE 357:
	this->timeToLeaveCar = 0x0;
// LINE 359:
	__asm        jmp    _T48d;
// LINE 360:
_T47a:
	__asm        xor    eax, eax;
	__asm        sub    eax, LoopTime;
	__asm        neg    eax;
	__asm        mov    ecx, this;
	__asm        sub    [ecx+0x126], eax;
// LINE 362:
_T48d:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::ItterateFSM;
// LINE 363:
	__asm        jmp    _T4df;
// LINE 367:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::IsCarOutOfCameraRange;
	__asm        test   eax, eax;
	__asm        je     _T4b2;
// LINE 369:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::UnPlaceCar;
// LINE 371:
_T4b2:
	__asm        jmp    _T4df;
_T4b7:
	__asm        cmp    dword ptr [ebp-0x68], 4;
	__asm        ja     _T4df;

	__asm        mov    eax, [ebp-0x68];
	__asm        jmp    SwitchPointers5460240[0][eax*4];
// Switch pointers
// LINE 387:
_T4df:
	__asm        jmp    _T4e4;
_T4e4:
}

// FUNCTION: COPTER_D 0x0053512e
void CriminalEvaderCarClass::PullOver(short carModel) {
// LINE 393:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11A], 3;
	__asm        je     _T2c;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11A], 4;
	__asm        jne    _T31;
// LINE 394:
_T2c:
	__asm        jmp    _T7e;
// LINE 397:
_T31:
	__asm        movsx  eax, carModel;
	__asm        cmp    eax, 0x11D;
	__asm        jne    _T50;

	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x116], 0;
	__asm        jne    _T6d;
_T50:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11A], 1;
	__asm        jne    _T79;

	__asm        mov    eax, this;
	__asm        test   byte ptr [eax+8], 0x30;
	__asm        jne    _T79;
// LINE 398:
_T6d:
	__asm        mov    eax, reinterpret_cast<uint32_t>(carModel);
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::PullOver;
// LINE 399:
_T79:
	__asm        jmp    _T7e;
_T7e:
}

// FUNCTION: COPTER_D 0x005351b3
void CriminalEvaderCarClass::AdjustSpeed() {
// LINE 418:
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::AdjustSpeed;
// LINE 420:
	__asm        mov    eax, this;
	__asm        cmp    dword ptr [eax+0x11A], 2;
	__asm        jne    _T45;
// LINE 422:
	__asm        mov    eax, CriminalEvaderCarClass::evasionSpeedMultiplier;
	__asm        push   eax;
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0xDE];
	__asm        push   eax;
	__asm        call   0x004D19BD;
	__asm        add    esp, 8;
	__asm        mov    ecx, this;
	__asm        mov    [ecx+0xDE], eax;
// LINE 424:
_T45:
	__asm        jmp    near ptr 0x005351FD;
}

// FUNCTION: COPTER_D 0x00535202
int32_t CriminalEvaderCarClass::NearToBuilding() {
	static const <NoType> = { /* <data@0x00535675> */ };
	static const <NoType> = { /* <data@0x0053557c> */ };
	static const <NoType> = { /* <data@0x005354c9> */ };
	static const <NoType> = { /* <data@0x005353dc> */ };
	static const <NoType> = { /* <data@0x005352c5> */ };
	struct _GridCoordinates scanLoc;
	class SpiralScan scan;

// LINE 442:
	__asm        movsx  eax, CriminalEvaderCarClass::maxSearchForBuildingRadius;
	__asm        push   eax;
	__asm        lea    ecx, scan.currDist;
	__asm        call   SpiralScan::SpiralScan;
// LINE 443:
	reinterpret_cast<uint16_t>(scanLoc.x) = *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(&this->goal.edgeIndex) + 2);
// LINE 447:
// Block start:
	unsigned short tt;
_T27:
	__asm        xor    eax, eax;
	__asm        mov    al, scanLoc.x;
	__asm        mov    eax, BuildMap[eax*4];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, scanLoc.y;
	__asm        movzx  ax, byte ptr [eax+ecx];
	__asm        mov    tt, ax;
// LINE 448:
	__asm        mov    eax, this;
	__asm        mov    eax, [eax+0x11E];
	__asm        mov    [ebp-0x38], eax;
	__asm        jmp    _T4b2;
// LINE 451:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tt);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x3C], eax;
	__asm        jmp    _T80;
// LINE 480:
	__asm        mov    dword ptr [ebp-0x1C], 1;
	__asm        jmp    near ptr 0x00535270;

	__asm        mov    eax, [ebp-0x1C];
	__asm        jmp    _T502;
// LINE 481:
	__asm        jmp    _T153;
// LINE 482:
	__asm        jmp    _T153;
_T80:
	__asm        sub    dword ptr [ebp-0x3C], 0x70;
	__asm        cmp    dword ptr [ebp-0x3C], 0x8F;
	__asm        ja     _T153;

	__asm        mov    eax, [ebp-0x3C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchPointers5460645[32][eax];
	__asm        jmp    SwitchPointers5460645[0][ecx*4];
// Switch pointers
// Switch table
// LINE 484:
_T153:
	__asm        jmp    _T4da;
// LINE 487:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tt);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x40], eax;
	__asm        jmp    _T186;
// LINE 510:
	__asm        mov    dword ptr [ebp-0x20], 1;
	__asm        jmp    near ptr 0x00535376;

	__asm        mov    eax, [ebp-0x20];
	__asm        jmp    _T502;
// LINE 511:
	__asm        jmp    _T255;
// LINE 512:
	__asm        jmp    _T255;
_T186:
	__asm        sub    dword ptr [ebp-0x40], 0x7D;
	__asm        cmp    dword ptr [ebp-0x40], 0x7A;
	__asm        ja     _T255;

	__asm        mov    eax, [ebp-0x40];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchPointers5460904[52][eax];
	__asm        jmp    SwitchPointers5460904[0][ecx*4];
// Switch pointers
// Switch table
// LINE 513:
_T255:
	__asm        jmp    _T4da;
// LINE 516:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tt);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x44], eax;
	__asm        jmp    _T288;
// LINE 531:
	__asm        mov    dword ptr [ebp-0x24], 1;
	__asm        jmp    near ptr 0x00535478;

	__asm        mov    eax, [ebp-0x24];
	__asm        jmp    _T502;
// LINE 532:
	__asm        jmp    _T2f0;
// LINE 533:
	__asm        jmp    _T2f0;
_T288:
	__asm        sub    dword ptr [ebp-0x44], 0x90;
	__asm        cmp    dword ptr [ebp-0x44], 0x28;
	__asm        ja     _T2f0;

	__asm        mov    eax, [ebp-0x44];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchPointers5461165[28][eax];
	__asm        jmp    SwitchPointers5461165[0][ecx*4];
// Switch pointers
// Switch table
// LINE 534:
_T2f0:
	__asm        jmp    _T4da;
// LINE 537:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tt);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x48], eax;
	__asm        jmp    _T323;
// LINE 572:
	__asm        mov    dword ptr [ebp-0x28], 1;
	__asm        jmp    near ptr 0x00535513;

	__asm        mov    eax, [ebp-0x28];
	__asm        jmp    _T502;
// LINE 573:
	__asm        jmp    _T3ed;
// LINE 574:
	__asm        jmp    _T3ed;
_T323:
	__asm        sub    dword ptr [ebp-0x48], 0x80;
	__asm        cmp    dword ptr [ebp-0x48], 0x72;
	__asm        ja     _T3ed;

	__asm        mov    eax, [ebp-0x48];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchPointers5461320[52][eax];
	__asm        jmp    SwitchPointers5461320[0][ecx*4];
// Switch pointers
// Switch table
// LINE 575:
_T3ed:
	__asm        jmp    _T4da;
// LINE 578:
	__asm        mov    eax, reinterpret_cast<uint32_t>(tt);
	__asm        and    eax, 0xFFFF;
	__asm        mov    [ebp-0x4C], eax;
	__asm        jmp    _T420;
// LINE 613:
	__asm        mov    dword ptr [ebp-0x2C], 1;
	__asm        jmp    near ptr 0x00535610;

	__asm        mov    eax, [ebp-0x2C];
	__asm        jmp    _T502;
// LINE 614:
	__asm        jmp    _T4a8;
// LINE 615:
	__asm        jmp    _T4a8;
_T420:
	__asm        sub    dword ptr [ebp-0x4C], 0xC6;
	__asm        cmp    dword ptr [ebp-0x4C], 0x34;
	__asm        ja     _T4a8;

	__asm        mov    eax, [ebp-0x4C];
	__asm        xor    ecx, ecx;
	__asm        mov    cl, SwitchTable5461621[0][eax];
	__asm        jmp    SwitchPointers5461573[0][ecx*4];
// Switch pointers
// Switch table
// LINE 616:
_T4a8:
	__asm        jmp    _T4da;
// LINE 617:
	__asm        jmp    _T4da;
_T4b2:
	__asm        cmp    dword ptr [ebp-0x38], 4;
	__asm        ja     _T4da;

	__asm        mov    eax, [ebp-0x38];
	__asm        jmp    SwitchPointers5461704[0][eax*4];
// Switch pointers
// LINE 619:
// Block end:
_T4da:
	__asm        lea    eax, scanLoc.x;
	__asm        push   eax;
	__asm        lea    ecx, scan.currDist;
	__asm        call   SpiralScan::Next;
	__asm        test   eax, eax;
	__asm        jne    _T27;
// LINE 621:
	__asm        mov    dword ptr [ebp-0x30], 0;
	__asm        jmp    near ptr 0x005356FC;

	__asm        mov    eax, [ebp-0x30];
	__asm        jmp    _T502;
// LINE 622:
_T502:
}

// FUNCTION: COPTER_D 0x00535709
void CriminalEvaderCarClass::ShowWhereWeAre() {
	struct _MISSION_PARMS mp;

// LINE 649:
	mp.op = 0xa;
// LINE 650:
	mp.id = this->missionState;
// LINE 654:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7C];
	__asm        mov    mp.maploc.x, ecx;
// LINE 655:
	__asm        mov    eax, this;
	__asm        xor    ecx, ecx;
	__asm        mov    cl, [eax+0x7D];
	__asm        mov    mp.maploc.y, ecx;
// LINE 656:
	__asm        lea    eax, mp.op;
	__asm        push   eax;
	__asm        call   S3MissionUpdate;
	__asm        add    esp, 4;
// LINE 657:
	__asm        jmp    near ptr 0x0053574F;
}

// FUNCTION: COPTER_D 0x00535754
void CriminalEvaderCarClass::SetSaveData(struct _AUTO_LOAD_SAVE *sd) {
// LINE 669:
	sd->c.missionState = this->timeToLeaveCar;
// LINE 670:
	sd->c.criminalType = this->timeToBeOnTheRun;
// LINE 671:
	sd->c.timeToLeaveCar = this-><CriminalEvaderCarClass+0x122>;
// LINE 672:
	sd->c.timeToBeOnTheRun = this-><CriminalEvaderCarClass+0x126>;
// LINE 675:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::SetSaveData;
// LINE 676:
	__asm        jmp    near ptr 0x005357B9;
}

// FUNCTION: COPTER_D 0x005357c0
void CriminalEvaderCarClass::LoadSaveData(struct _AUTO_LOAD_SAVE *sd) {
// LINE 689:
	__asm        mov    eax, sd;
	__asm        test   byte ptr [eax], 2;
	__asm        jne    _T1d;
// LINE 691:
	__asm        jmp    _T76;
// LINE 695:
_T1d:
	__asm        mov    eax, sd;
	__asm        push   eax;
	__asm        mov    ecx, this;
	__asm        call   AutomobileClass::LoadSaveData;
// LINE 698:
	this->timeToLeaveCar = sd->c.missionState;
// LINE 699:
	this->timeToBeOnTheRun = sd->c.criminalType;
// LINE 700:
	this-><CriminalEvaderCarClass+0x122> = sd->c.timeToLeaveCar;
// LINE 701:
	this-><CriminalEvaderCarClass+0x126> = sd->c.timeToBeOnTheRun;
// LINE 702:
	__asm        jmp    _T76;
_T76:
}



// Contribution: 1:00134840-00134855 Module: 161, 16 byte alignment, code, (comdat), execute, read, 


// Contribution: 1:00134860-00134898 Module: 161, 16 byte alignment, code, (comdat), execute, read, 
// FUNCTION: COPTER_D 0x00535860
// CriminalEvaderCarClass::`scalar deleting destructor'



// Contribution: 2:00004258-0000427b Module: 161, 8 byte alignment, initialized_data, (comdat), read, 
// vftable for CriminalEvaderCarClass @ 0x00593258
//   00: CriminalEvaderCarClass::`scalar deleting destructor' @ 0x00535860
//   01: CriminalEvaderCarClass::PullOver @ 0x0053512e
//   02: CriminalEvaderCarClass::AdjustSpeed @ 0x005351b3
//   03: AutomobileClass::PickTurnDir @ 0x00502c92
//   04: CriminalEvaderCarClass::ItterateFSM @ 0x00534c45
//   05: CriminalEvaderCarClass::SetSaveData @ 0x00535754
//   06: CriminalEvaderCarClass::LoadSaveData @ 0x005357c0
//   07: CriminalEvaderCarClass::BeamToWithinCameraRange @ 0x00535840
//   08: AutomobileClass::BeamToLocation @ 0x005030aa
//   9 entries



// Contribution: 3:00020ca8-00020d15 Module: 161, 4 byte alignment, initialized_data, read, write, 
// GLOBAL: COPTER_D 0x005b7ca8
int32_t CriminalEvaderCarClass::baseTimeBetweenCriminalActivities = 6553600;

// GLOBAL: COPTER_D 0x005b7cac
int32_t CriminalEvaderCarClass::maxTimeBetweenCriminalActivities = 39321600;

// GLOBAL: COPTER_D 0x005b7cb0
int32_t CriminalEvaderCarClass::constantTimeToBeOnTheRun = 1310720;

// GLOBAL: COPTER_D 0x005b7cb4
int32_t CriminalEvaderCarClass::evasionSpeedMultiplier = 131072;

// GLOBAL: COPTER_D 0x005b7cb8
short CriminalEvaderCarClass::maxSearchForBuildingRadius = 3;

// GLOBAL: COPTER_D 0x005b7cbc
int32_t CriminalEvaderCarClass::curCriminalCars = 0;



// Contribution: 3:000949a0-000949b3 Module: 161, 8 byte alignment, uninitialized_data, read, write, 
// GLOBAL: COPTER_D 0x0062b9a0
class CriminalEvaderCarClass *CriminalEvaderCarClass::criminalCars[5];

